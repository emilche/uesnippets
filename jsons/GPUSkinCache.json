[
  {
    "label": "FGPUSkinPassthroughVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinPassthroughVertexFactory"
  },
  {
    "label": "FGPUBaseSkinVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUBaseSkinVertexFactory"
  },
  {
    "label": "FMorphVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMorphVertexBuffer"
  },
  {
    "label": "FSkeletalMeshObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObject"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FSkeletalMeshObjectGPUSkin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObjectGPUSkin"
  },
  {
    "label": "FSkeletalMeshVertexClothBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshVertexClothBuffer"
  },
  {
    "label": "FVertexOffsetBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexOffsetBuffers"
  },
  {
    "label": "FClothSimulData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothSimulData"
  },
  {
    "label": "FSkelMeshRenderSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRenderSection"
  },
  {
    "label": "FVertexBufferAndSRV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexBufferAndSRV"
  },
  {
    "label": "FRayTracingGeometrySegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingGeometrySegment"
  },
  {
    "label": "FGPUSkinCacheEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCacheEntry"
  },
  {
    "label": "FClothSimulEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothSimulEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGPUSkinCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCache"
  },
  {
    "label": "FRWBufferTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBufferTracker"
  },
  {
    "label": "ESkinCacheInitSettings",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESkinCacheInitSettings"
  },
  {
    "label": "FDispatchEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDispatchEntry"
  },
  {
    "label": "FSortedDispatchEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedDispatchEntry"
  },
  {
    "label": "FSkinCacheRWBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinCacheRWBuffer"
  },
  {
    "label": "FRWBuffersAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBuffersAllocation"
  },
  {
    "label": "ShouldWeCompileGPUSkinVFShaders()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" HAL / IConsoleManager . h \" # include \" RHI . h \" # include \" RHIUtilities . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderResource . h \" # include \" ShaderParameters . h \" # include \" UniformBuffer . h \" # include \" GPUSkinPublicDefs . h \" # include \" VertexFactory . h \" # include \" CanvasTypes . h \" # include \" CachedGeometry . h \" # include \" DataDrivenShaderPlatformInfo . h \" class FGPUSkinPassthroughVertexFactory ; class FGPUBaseSkinVertexFactory ; class FMorphVertexBuffer ; class FSkeletalMeshObject ; class FSkeletalMeshLODRenderData ; class FSkeletalMeshObjectGPUSkin ; class FSkeletalMeshVertexClothBuffer ; class FVertexOffsetBuffers ; struct FClothSimulData ; struct FSkelMeshRenderSection ; struct FVertexBufferAndSRV ; struct FRayTracingGeometrySegment ; bool)",
    "insertText": "ShouldWeCompileGPUSkinVFShaders(EShaderPlatform Platform, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GPUSkinCacheNeedsDuplicatedVertices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GPUSkinCacheNeedsDuplicatedVertices()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int32 GEnableGPUSkinCache ; int32 GSkinCacheRecomputeTangents ; class FGPUSkinCacheEntry ; struct FClothSimulEntry { FVector3f Position ; FVector3f Normal ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FClothSimulEntry& V)"
  },
  {
    "label": "FGPUSkinCache()",
    "kind": "Method",
    "detail": "Function (Ar<<V . Position<<V . Normal ; return Ar ; } } ; enum class EGPUSkinCacheEntryMode { Raster,RayTracing } ; class FGPUSkinCache { public : struct FRWBufferTracker ; enum ESkinCacheInitSettings { MaxUniformBufferBones = 2 5 6,RWTangentXOffsetInFloats = 0,RWTangentZOffsetInFloats = 1,IntermediateAccumBufferNumInts = 8,} ; struct FDispatchEntry { FGPUSkinCacheEntry* SkinCacheEntry = nullptr ; uint32 Section = 0 ; } ; struct FSortedDispatchEntry { int32 ShaderIndex ; int32 BatchIndex ; } ;)",
    "insertText": "FGPUSkinCache()"
  },
  {
    "label": "FGPUSkinCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGPUSkinCache(ERHIFeatureLevel::Type InFeatureLevel, bool bInRequiresMemoryLimit, UWorld* InWorld)"
  },
  {
    "label": "UpdateSkinWeightBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkinWeightBuffer(FGPUSkinCacheEntry* Entry)"
  },
  {
    "label": "SetEntryGPUSkin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntryGPUSkin(FGPUSkinCacheEntry* Entry, FSkeletalMeshObject* Skin)"
  },
  {
    "label": "ProcessEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEntry(EGPUSkinCacheEntryMode Mode, FRHICommandList& RHICmdList, FGPUBaseSkinVertexFactory* VertexFactory, FGPUSkinPassthroughVertexFactory* TargetVertexFactory, const FSkelMeshRenderSection& BatchElement, FSkeletalMeshObject* Skin, const FMorphVertexBuffer* MorphVertexBuffer, const FSkeletalMeshVertexClothBuffer* ClothVertexBuffer, const FClothSimulData* SimData, const FMatrix44f& ClothToLocal, float ClothBlendWeight, FVector3f ClothScale, uint32 RevisionNumber, int32 Section, int32 LOD, bool bRecreating, FGPUSkinCacheEntry*& InOutEntry)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(FGPUSkinCacheEntry*& SkinCacheEntry)"
  },
  {
    "label": "IsEntryValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEntryValid(FGPUSkinCacheEntry* SkinCacheEntry, int32 Section)"
  },
  {
    "label": "GetVisualizationDebugColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetVisualizationDebugColor(const FName& GPUSkinCacheVisualizationMode, FGPUSkinCacheEntry* Entry, FGPUSkinCacheEntry* RayTracingEntry, uint32 SectionIndex)"
  },
  {
    "label": "DrawVisualizationInfoText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVisualizationInfoText(const FName& GPUSkinCacheVisualizationMode, FScreenMessageWriter& ScreenMessageWriter)"
  },
  {
    "label": "GetExtraRequiredMemoryAndReset()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetExtraRequiredMemoryAndReset()"
  },
  {
    "label": "IsGPUSkinCacheRayTracingSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGPUSkinCacheRayTracingSupported()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (enum { NUM_BUFFERS = 2,} ; struct FSkinCacheRWBuffer { FRWBuffer Buffer ; ERHIAccess AccessState = ERHIAccess::Unknown ; uint32 UniqueOpToken = 0 ; void)",
    "insertText": "Release()"
  },
  {
    "label": "UpdateAccessState()",
    "kind": "Method",
    "detail": "Function (AccessState = ERHIAccess::Unknown ; } FRHITransitionInfo)",
    "insertText": "UpdateAccessState(ERHIAccess NewState)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (ERHIAccess OldState = AccessState ; AccessState = NewState ; return)",
    "insertText": "FRHITransitionInfo(Buffer.UAV.GetReference(), OldState, AccessState)"
  },
  {
    "label": "FRWBuffersAllocation()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRWBuffersAllocation { struct FRWBufferTracker ;)",
    "insertText": "FRWBuffersAllocation(uint32 InNumVertices, bool InWithTangents, bool InUseIntermediateTangents, uint32 InIntermediateAccumulatedTangentsSize, FRHICommandList& RHICmdList, const FName& OwnerName) : NumVertices(InNumVertices), WithTangents(InWithTangents), UseIntermediateTangents(InUseIntermediateTangents), IntermediateAccumulatedTangentsSize(InIntermediateAccumulatedTangentsSize)"
  },
  {
    "label": "PositionsName()",
    "kind": "Method",
    "detail": "Function (const FLazyName)",
    "insertText": "PositionsName(TEXT(\"SkinCachePositions\"))"
  },
  {
    "label": "TangentsName()",
    "kind": "Method",
    "detail": "Function (const FLazyName)",
    "insertText": "TangentsName(TEXT(\"SkinCacheTangents\"))"
  },
  {
    "label": "IntermediateTangentsName()",
    "kind": "Method",
    "detail": "Function (const FLazyName)",
    "insertText": "IntermediateTangentsName(TEXT(\"SkinCacheIntermediateTangents\"))"
  },
  {
    "label": "IntermediateAccumulatedTangentsName()",
    "kind": "Method",
    "detail": "Function (const FLazyName)",
    "insertText": "IntermediateAccumulatedTangentsName(TEXT(\"SkinCacheIntermediateAccumulatedTangents\"))"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (PositionBuffers [ Index ] . Buffer . ClassName = PositionsName ; PositionBuffers [ Index ] . Buffer . OwnerName = OwnerName ; PositionBuffers [ Index ] . Buffer .)",
    "insertText": "Initialize(RHICmdList, TEXT(\"SkinCachePositions\"), PosBufferBytesPerElement, NumVertices * 3, PF_R32_FLOAT, ERHIAccess::SRVMask, BUF_Static)"
  },
  {
    "label": "SetOwnerName()",
    "kind": "Method",
    "detail": "Function (PositionBuffers [ Index ] . Buffer . Buffer ->)",
    "insertText": "SetOwnerName(OwnerName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PositionBuffers [ Index ] . AccessState = ERHIAccess::Unknown ; })",
    "insertText": "if(WithTangents)"
  },
  {
    "label": "IsOpenGLPlatform()",
    "kind": "Method",
    "detail": "Function (const EPixelFormat TangentsFormat =)",
    "insertText": "IsOpenGLPlatform(GMaxRHIShaderPlatform)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Tangents . Buffer . ClassName = TangentsName ; Tangents . Buffer . OwnerName = OwnerName ; Tangents . Buffer .)",
    "insertText": "Initialize(RHICmdList, TEXT(\"SkinCacheTangents\"), TangentBufferBytesPerElement, NumVertices * 2, TangentsFormat, BUF_Static)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Tangents . AccessState = ERHIAccess::Unknown ;)",
    "insertText": "if(UseIntermediateTangents)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (IntermediateTangents . Buffer . ClassName = IntermediateTangentsName ; IntermediateTangents . Buffer . OwnerName = OwnerName ; IntermediateTangents . Buffer .)",
    "insertText": "Initialize(RHICmdList, TEXT(\"SkinCacheIntermediateTangents\"), TangentBufferBytesPerElement, NumVertices * 2, TangentsFormat, BUF_Static)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IntermediateTangents . AccessState = ERHIAccess::Unknown ; } })",
    "insertText": "if(IntermediateAccumulatedTangentsSize > 0)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (IntermediateAccumulatedTangents . Buffer . ClassName = IntermediateAccumulatedTangentsName ; IntermediateAccumulatedTangents . Buffer . OwnerName = OwnerName ; IntermediateAccumulatedTangents . Buffer .)",
    "insertText": "Initialize(RHICmdList, TEXT(\"SkinCacheIntermediateAccumulatedTangents\"), sizeof(int32), IntermediateAccumulatedTangentsSize * FGPUSkinCache::IntermediateAccumBufferNumInts, PF_R32_SINT, BUF_UnorderedAccess)"
  },
  {
    "label": "ClearUAVUint()",
    "kind": "Method",
    "detail": "Function (IntermediateAccumulatedTangents . AccessState = ERHIAccess::Unknown ; RHICmdList .)",
    "insertText": "ClearUAVUint(IntermediateAccumulatedTangents.Buffer.UAV, FUintVector4(0, 0, 0, 0))"
  },
  {
    "label": "FRWBuffersAllocation()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FRWBuffersAllocation()"
  },
  {
    "label": "CalculateRequiredMemory()",
    "kind": "Method",
    "detail": "Function (} } uint64)",
    "insertText": "CalculateRequiredMemory(uint32 InNumVertices, bool InWithTangents, bool InUseIntermediateTangents, uint32 InIntermediateAccumulatedTangentsSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 PositionBufferSize = PosBufferBytesPerElement* InNumVertices* 3* NUM_BUFFERS ; uint64 TangentBufferSize = InWithTangents ? TangentBufferBytesPerElement* InNumVertices* 2 : 0 ; uint64 IntermediateTangentBufferSize = 0 ;)",
    "insertText": "if(InUseIntermediateTangents)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (IntermediateTangentBufferSize = InWithTangents ? TangentBufferBytesPerElement* InNumVertices* 2 : 0 ; } uint64 AccumulatedTangentBufferSize = InIntermediateAccumulatedTangentsSize* FGPUSkinCache::IntermediateAccumBufferNumInts*)",
    "insertText": "sizeof(int32)"
  },
  {
    "label": "GetTangentBuffer()",
    "kind": "Method",
    "detail": "Function (} FSkinCacheRWBuffer*)",
    "insertText": "GetTangentBuffer()"
  },
  {
    "label": "GetIntermediateAccumulatedTangentBuffer()",
    "kind": "Method",
    "detail": "Function (} FSkinCacheRWBuffer*)",
    "insertText": "GetIntermediateAccumulatedTangentBuffer()"
  },
  {
    "label": "FRWBufferTracker()",
    "kind": "Method",
    "detail": "Function (private : FSkinCacheRWBuffer PositionBuffers [ NUM_BUFFERS ] ; FSkinCacheRWBuffer Tangents ; FSkinCacheRWBuffer IntermediateTangents ; FSkinCacheRWBuffer IntermediateAccumulatedTangents ; const uint32 NumVertices ; const bool WithTangents ; const bool UseIntermediateTangents ; const uint32 IntermediateAccumulatedTangentsSize ; const uint32 PosBufferBytesPerElement = 4 ; const uint32 TangentBufferBytesPerElement = 8 ; } ; struct FRWBufferTracker { FRWBuffersAllocation* Allocation ;)",
    "insertText": "FRWBufferTracker() : Allocation(nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetNumBytes()",
    "kind": "Method",
    "detail": "Function (Revisions [ Index ] = 0 ; BoneBuffers [ Index ] = nullptr ; } } uint32)",
    "insertText": "GetNumBytes()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} FSkinCacheRWBuffer*)",
    "insertText": "Find(const FVertexBufferAndSRV& BoneBuffer, uint32 Revision)"
  },
  {
    "label": "GetIntermediateTangentBuffer()",
    "kind": "Method",
    "detail": "Function (} FSkinCacheRWBuffer*)",
    "insertText": "GetIntermediateTangentBuffer()"
  },
  {
    "label": "AllocateUnused()",
    "kind": "Method",
    "detail": "Function (} FSkinCacheRWBuffer*)",
    "insertText": "AllocateUnused(const FVertexBufferAndSRV& BoneBuffer, uint32 Revision, const FSkinCacheRWBuffer* Used, TArray<FSkinCacheRWBuffer*>* AllocatedItems)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 UnusedIndex = Used = =& Allocation -> PositionBuffers [ 0 ] ? 1 : 0 ; Revisions [ UnusedIndex ] = Revision ; BoneBuffers [ UnusedIndex ] =& BoneBuffer ; FSkinCacheRWBuffer* Result =& Allocation -> PositionBuffers [ UnusedIndex ] ;)",
    "insertText": "if(AllocatedItems)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllocatedItems ->)",
    "insertText": "Add(Result)"
  },
  {
    "label": "UpdatePreviousBoneBuffer()",
    "kind": "Method",
    "detail": "Function (} return Result ; } void)",
    "insertText": "UpdatePreviousBoneBuffer(const FVertexBufferAndSRV& PreviousBoneBuffer, uint32 PreviousRevision)"
  },
  {
    "label": "GetSkinCacheEntry()",
    "kind": "Method",
    "detail": "Function (BoneBuffers [ Index ] =& PreviousBoneBuffer ; break ; } } } private : uint32 Revisions [ NUM_BUFFERS ] ; const FVertexBufferAndSRV* BoneBuffers [ NUM_BUFFERS ] ; } ; FGPUSkinCacheEntry const*)",
    "insertText": "GetSkinCacheEntry(uint32 ComponentId)"
  },
  {
    "label": "GetPositionBuffer()",
    "kind": "Method",
    "detail": "Function (FRWBuffer*)",
    "insertText": "GetPositionBuffer(FGPUSkinCacheEntry const* Entry, uint32 SectionIndex)"
  },
  {
    "label": "GetPreviousPositionBuffer()",
    "kind": "Method",
    "detail": "Function (FRWBuffer*)",
    "insertText": "GetPreviousPositionBuffer(FGPUSkinCacheEntry const* Entry, uint32 SectionIndex)"
  },
  {
    "label": "GetTangentBuffer()",
    "kind": "Method",
    "detail": "Function (FRWBuffer*)",
    "insertText": "GetTangentBuffer(FGPUSkinCacheEntry const* Entry, uint32 SectionIndex)"
  },
  {
    "label": "GetUpdatedFrame()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUpdatedFrame(FGPUSkinCacheEntry const* Entry, uint32 SectionIndex)"
  },
  {
    "label": "ProcessRayTracingGeometryToUpdate()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING void)",
    "insertText": "ProcessRayTracingGeometryToUpdate(FRHICommandList& RHICmdList, FGPUSkinCacheEntry* SkinCacheEntry)"
  },
  {
    "label": "DoDispatch()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DoDispatch(FRHICommandList& RHICmdList)"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "MakeBufferTransitions()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "MakeBufferTransitions(FRHICommandList& RHICmdList, TArray<FSkinCacheRWBuffer*>& Buffers, ERHIAccess ToState)"
  },
  {
    "label": "GetBufferUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBufferUAVs(const TArray<FSkinCacheRWBuffer*>& InBuffers, TArray<FRHIUnorderedAccessView*>& OutUAVs)"
  },
  {
    "label": "TryAllocBuffer()",
    "kind": "Method",
    "detail": "Function (TArray<FRWBuffersAllocation*> Allocations ; TArray<FGPUSkinCacheEntry*> Entries ; TSet<FGPUSkinCacheEntry*> PendingProcessRTGeometryEntries ; TArray<FDispatchEntry> BatchDispatches ; FRWBuffersAllocation*)",
    "insertText": "TryAllocBuffer(uint32 NumVertices, bool WithTangnents, bool UseIntermediateTangents, uint32 NumTriangles, FRHICommandList& RHICmdList, const FName& OwnerName)"
  },
  {
    "label": "DispatchUpdateSkinTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchUpdateSkinTangents(FRHICommandList& RHICmdList, FGPUSkinCacheEntry* Entry, int32 SectionIndex, FSkinCacheRWBuffer*& StagingBuffer, bool bTrianglePass)"
  },
  {
    "label": "PrepareUpdateSkinning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareUpdateSkinning(FGPUSkinCacheEntry* Entry, int32 Section, uint32 RevisionNumber, TArray<FSkinCacheRWBuffer*>* OverlappedUAVs)"
  },
  {
    "label": "DispatchUpdateSkinning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchUpdateSkinning(FRHICommandList& RHICmdList, FGPUSkinCacheEntry* Entry, int32 Section, uint32 RevisionNumber, TArray<FSkinCacheRWBuffer*>& BuffersToTransitionToRead)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "TransitionAllToReadable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionAllToReadable(FRHICommandList& RHICmdList, const TArray<FSkinCacheRWBuffer*>& BuffersToTransitionToRead)"
  },
  {
    "label": "ReleaseSkinCacheEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSkinCacheEntry(FGPUSkinCacheEntry* SkinCacheEntry)"
  },
  {
    "label": "InvalidateAllEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllEntries()"
  },
  {
    "label": "CVarSinkFunction()",
    "kind": "Method",
    "detail": "Function (uint64 UsedMemoryInBytes ; uint64 ExtraRequiredMemory ; int32 FlushCounter ; bool bRequiresMemoryLimit ; TArray<FSkinCacheRWBuffer> StagingBuffers ; int32 CurrentStagingBufferIndex ; ERHIFeatureLevel::Type FeatureLevel ; UWorld* World ; void)",
    "insertText": "CVarSinkFunction()"
  },
  {
    "label": "IncrementDispatchCounter()",
    "kind": "Method",
    "detail": "Function (FAutoConsoleVariableSink CVarSink ; bool)",
    "insertText": "IncrementDispatchCounter(FRHICommandList& RHICmdList)"
  },
  {
    "label": "PrintMemorySummary()",
    "kind": "Method",
    "detail": "Function (int32 DispatchCounter = 0 ; void)",
    "insertText": "PrintMemorySummary()"
  },
  {
    "label": "GetSkeletalMeshObjectName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSkeletalMeshObjectName(const FSkeletalMeshObject* GPUSkin)"
  },
  {
    "label": "GetSkeletalMeshObjectDebugName()",
    "kind": "Method",
    "detail": "Function (FDebugName)",
    "insertText": "GetSkeletalMeshObjectDebugName(const FSkeletalMeshObject* GPUSkin)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"GPU Skin Cache\"), STATGROUP_GPUSkinCache, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Sections Skinned\"), STAT_GPUSkinCache_TotalNumChunks, STATGROUP_GPUSkinCache,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Vertices Skinned\"), STAT_GPUSkinCache_TotalNumVertices, STATGROUP_GPUSkinCache,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Total Memory Bytes Used\"), STAT_GPUSkinCache_TotalMemUsed, STATGROUP_GPUSkinCache,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Intermediate buffer for Recompute Tangents\"), STAT_GPUSkinCache_TangentsIntermediateMemUsed, STATGROUP_GPUSkinCache,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Triangles for Recompute Tangents\"), STAT_GPUSkinCache_NumTrianglesForRecomputeTangents, STATGROUP_GPUSkinCache,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Sections Processed\"), STAT_GPUSkinCache_NumSectionsProcessed, STATGROUP_GPUSkinCache,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num SetVertexStreams\"), STAT_GPUSkinCache_NumSetVertexStreams, STATGROUP_GPUSkinCache,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num PreGDME\"), STAT_GPUSkinCache_NumPreGDME, STATGROUP_GPUSkinCache,)"
  }
]