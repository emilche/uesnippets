[
  {
    "label": "TReplicationFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TReplicationFragment"
  },
  {
    "label": "TReplicationFragment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / ReplicationFragment . h \" namespace UE::Net { template<T,ReplicationStateT> class TReplicationFragment : protected FReplicationFragment { public :)",
    "insertText": "TReplicationFragment(T& OwnerIn) : FReplicationFragment(EReplicationFragmentTraits::CanReceive), Owner(OwnerIn), SrcState(nullptr)"
  },
  {
    "label": "TReplicationFragment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TReplicationFragment(T& OwnerIn, ReplicationStateT& SrcReplicationState) : FReplicationFragment(EReplicationFragmentTraits::CanReplicate), Owner(OwnerIn), SrcState(&SrcReplicationState)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Register(FFragmentRegistrationContext& Context)"
  },
  {
    "label": "ApplyReplicatedState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ApplyReplicatedState(FReplicationStateApplyContext& Context)"
  },
  {
    "label": "ReplicationStateT()",
    "kind": "Method",
    "detail": "Function (const ReplicationStateT* ReplicationState = reinterpret_cast<const)",
    "insertText": "ReplicationStateT(Context.StateBufferData.ExternalStateBuffer)"
  },
  {
    "label": "ApplyReplicationState()",
    "kind": "Method",
    "detail": "Function (Owner .)",
    "insertText": "ApplyReplicationState(*ReplicationState, Context)"
  },
  {
    "label": "RegisterReplicationFragment()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "RegisterReplicationFragment(this, ReplicationStateT::GetReplicationStateDescriptor(), SrcState)"
  }
]