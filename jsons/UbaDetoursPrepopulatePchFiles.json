[
  {
    "label": "ReadLines()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaDetoursUtilsWin . h \" # include \" UbaEvent . h \" # include<oodle2 . h> namespace uba { MemoryFile& g_emptyMemoryFile ; template<LineFunc> bool)",
    "insertText": "ReadLines(const tchar* file, const LineFunc& lineFunc)"
  },
  {
    "label": "CreateFileW()",
    "kind": "Method",
    "detail": "Function (HANDLE handle =)",
    "insertText": "CreateFileW(file, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_ALWAYS, 0, NULL)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto hg =)",
    "insertText": "MakeGuard([&]() { CloseHandle(handle); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER fileSize ;)",
    "insertText": "if(!GetFileSizeEx(handle, &fileSize))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (char buffer [ 5 1 2 ] ; u64 left = fileSize . QuadPart ; StringBuffer<2 0 4 8> line ;)",
    "insertText": "while(left)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (u64 toRead =)",
    "insertText": "Min(left, u64(sizeof(buffer)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (left - = toRead ; DWORD read = 0 ;)",
    "insertText": "if(!ReadFile(handle, buffer, u32(toRead), &read, NULL))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (u64 start = 0 ;)",
    "insertText": "for(u64 i=0;i!=read;++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u64 end = i ;)",
    "insertText": "if(i > 0 && buffer[i-1] == '\\r')"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (line .)",
    "insertText": "Append(buffer + start, u32(end - start))"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (line .)",
    "insertText": "Clear()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (start = i + 1 ; })",
    "insertText": "if(read && buffer[read - 1] == '\\r')"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (line .)",
    "insertText": "Append(buffer + start, u32(read - start))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(line.count) if (!lineFunc(line))"
  },
  {
    "label": "TStrchr()",
    "kind": "Method",
    "detail": "Function (auto startOfRsp =)",
    "insertText": "TStrchr(commandline, '@')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool hasQuotes = false ;)",
    "insertText": "if(*++startOfRsp == '\\\"')"
  },
  {
    "label": "TStrchr()",
    "kind": "Method",
    "detail": "Function (+ + startOfRsp ; hasQuotes = true ; } auto endOfRsp =)",
    "insertText": "TStrchr(startOfRsp, hasQuotes ? '\\\"' : ' ')"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> rsp ; rsp .)",
    "insertText": "Append(startOfRsp, endOfRsp - startOfRsp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Vector<TString> includes ;)",
    "insertText": "if(rulesIndex == 1)"
  },
  {
    "label": "ReadLines()",
    "kind": "Method",
    "detail": "Function (bool usesPch = false ; StringBuffer<5 1 2> pch ;)",
    "insertText": "ReadLines(rsp.data, [&](StringBufferBase& line) { if (line.StartsWith(L\"/Yu\")) usesPch = true; if (!line.Contains(L\"/Fp\\\"\")) return true; auto pchStart = line.data + 4; auto pchEnd = TStrchr(pchStart, '\\\"'); pch.Append(pchStart, u32(pchEnd - pchStart)); return usesPch != true; })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> dep ; dep .)",
    "insertText": "Append(pch.data, pch.count - 4).Append(L\".dep.json\")"
  },
  {
    "label": "ReadLines()",
    "kind": "Method",
    "detail": "Function (bool inIncludes = false ;)",
    "insertText": "ReadLines(dep.data, [&](StringBufferBase& line) { if (!inIncludes) { inIncludes = line.Contains(L\"\\\"Includes\\\":\"); return true; } auto includeStart = TStrchr(line.data, '\\\"'); if (!includeStart) return false; ++includeStart; tchar* readIt = includeStart; tchar* writeIt = readIt; tchar lastChar = 0; while (*readIt != '\\\"') { if (lastChar != '\\\\' || *readIt != '\\\\') { *writeIt = *readIt; ++writeIt; } lastChar = *readIt; ++readIt; } includes.push_back(TString(includeStart, writeIt)); return true; })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(rulesIndex == 7 || rulesIndex == 11 || rulesIndex == 14)"
  },
  {
    "label": "ReadLines()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> pch ;)",
    "insertText": "ReadLines(rsp.data, [&](StringBufferBase& line) { if (!line.StartsWith(L\"-include-pch\")) return true; auto pchStart = line.data + 14; auto pchEnd = TStrchr(pchStart, '\\\"'); pch.Append(pchStart, u32(pchEnd - pchStart)); return false; })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> dep ; dep .)",
    "insertText": "Append(pch.data, pch.count - 4).Append(L\".d\")"
  },
  {
    "label": "ReadLines()",
    "kind": "Method",
    "detail": "Function (bool inIncludes = false ;)",
    "insertText": "ReadLines(dep.data, [&](StringBufferBase& line) { if (!inIncludes) { inIncludes = true; return true; } tchar* it = line.data + 2; bool isFirst = true; while (true) { tchar* end = TStrchr(it, ' '); if (!end && !isFirst) break; if (end) *end = 0; isFirst = false; StringBuffer<> fullPath; FixPath(fullPath, it); includes.push_back(TString(fullPath.data, fullPath.count)); if (!end) break; it = end + 1; } return true; })"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (} const tchar* canBeIncludedMultipleTimes [ ] = { L \" . h . inl \",L \" UnrealNames . inl \",L \" ShowFlagsValues . inl \",L \" AnimMTStats . h \",L \" bits \\ \\ byteswap \",} ;)",
    "insertText": "SCOPED_WRITE_LOCK(g_mappedFileTable.m_lookupLock, _)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool skip = false ;)",
    "insertText": "for(auto i : canBeIncludedMultipleTimes) skip |= Contains(include.data(), i)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (StringBuffer<>)",
    "insertText": "t(include.data())"
  },
  {
    "label": "ToStringKeyLower()",
    "kind": "Method",
    "detail": "Function (auto fileNameKey =)",
    "insertText": "ToStringKeyLower(t)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (auto insres = g_mappedFileTable . m_lookup .)",
    "insertText": "try_emplace(fileNameKey)"
  },
  {
    "label": "Strdup()",
    "kind": "Method",
    "detail": "Function (FileInfo& info = insres . first -> second ; info . originalName = g_memoryBlock .)",
    "insertText": "Strdup(include.data())"
  }
]