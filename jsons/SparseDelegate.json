[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "UObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectBase"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FSparseDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSparseDelegate"
  },
  {
    "label": "FSparseDelegateStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSparseDelegateStorage"
  },
  {
    "label": "FObjectListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectListener"
  },
  {
    "label": "FMulticastSparseDelegateProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMulticastSparseDelegateProperty"
  },
  {
    "label": "TSparseDynamicDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSparseDynamicDelegate"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "SparseDelegateClassName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseDelegateClassName"
  },
  {
    "label": "RegisterDelegateOffset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / TransactionallySafeScopeLock . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptDelegateFwd . h \" # include \" UObject / UObjectArray . h \" # include \" UObject / WeakObjectPtr . h \" class FOutputDevice ; class FString ; class UObjectBase ; class UWorld ; struct FSparseDelegate ; struct FSparseDelegateStorage { public : void)",
    "insertText": "RegisterDelegateOffset(const UObject* OwningObject, FName DelegateName, size_t OffsetToOwner)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add(const UObject* DelegateOwner, const FName DelegateName, FScriptDelegate Delegate)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUnique(const UObject* DelegateOwner, const FName DelegateName, FScriptDelegate Delegate)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const UObject* DelegateOwner, const FName DelegateName, const FScriptDelegate& Delegate)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const UObject* DelegateOwner, const FName DelegateName, const UObject* InObject, FName InFunctionName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(const UObject* DelegateOwner, const FName DelegateName, const FScriptDelegate& Delegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(const UObject* DelegateOwner, const FName DelegateName, const UObject* InObject, FName InFunctionName)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAll(const UObject* DelegateOwner, const FName DelegateName, const UObject* UserObject)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(const UObject* DelegateOwner, const FName DelegateName)"
  },
  {
    "label": "GetMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (FMulticastScriptDelegate*)",
    "insertText": "GetMulticastDelegate(const UObject* DelegateOwner, const FName DelegateName)"
  },
  {
    "label": "GetSharedMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMulticastScriptDelegate>)",
    "insertText": "GetSharedMulticastDelegate(const UObject* DelegateOwner, const FName DelegateName)"
  },
  {
    "label": "SetMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMulticastDelegate(const UObject* DelegateOwner, const FName DelegateName, FMulticastScriptDelegate Delegate)"
  },
  {
    "label": "ResolveSparseDelegate()",
    "kind": "Method",
    "detail": "Function (FSparseDelegate*)",
    "insertText": "ResolveSparseDelegate(const UObject* OwningObject, FName DelegateName)"
  },
  {
    "label": "ResolveSparseOwner()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ResolveSparseOwner(const FSparseDelegate& SparseDelegate, const FName OwningClassName, const FName DelegateName)"
  },
  {
    "label": "SparseDelegateReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SparseDelegateReport(const TArray<FString>&, UWorld*, FOutputDevice&)"
  },
  {
    "label": "FObjectListener()",
    "kind": "Method",
    "detail": "Function (private : struct FObjectListener : public FUObjectArray::FUObjectDeleteListener { ~)",
    "insertText": "FObjectListener()"
  },
  {
    "label": "NotifyUObjectDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyUObjectDeleted(const UObjectBase* Object, int32 Index)"
  },
  {
    "label": "OnUObjectArrayShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUObjectArrayShutdown()"
  },
  {
    "label": "EnableListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableListener()"
  },
  {
    "label": "DisableListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableListener()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (bIsBound | =)",
    "insertText": "AddUnique(DelegateOwner, DelegateName, MoveTemp(InDelegate))"
  },
  {
    "label": "__Internal_Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__Internal_Remove(const UObject* DelegateOwner, FName DelegateName, const FScriptDelegate& InDelegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bIsBound =)",
    "insertText": "Remove(DelegateOwner, DelegateName, InDelegate)"
  },
  {
    "label": "__Internal_Clear()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "__Internal_Clear(const UObject* DelegateOwner, FName DelegateName)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(DelegateOwner, DelegateName)"
  },
  {
    "label": "GetDelegateName()",
    "kind": "Method",
    "detail": "Function (bIsBound = false ; } } protected : class FMulticastSparseDelegateProperty ; bool bIsBound ; } ; template<MulticastDelegate,OwningClass,DelegateInfoClass> struct TSparseDynamicDelegate : public FSparseDelegate { public : typedef MulticastDelegate::FDelegate FDelegate ; protected : FName)",
    "insertText": "GetDelegateName()"
  },
  {
    "label": "DelegateFName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "DelegateFName(DelegateInfoClass::GetDelegateName())"
  },
  {
    "label": "OwningClass()",
    "kind": "Method",
    "detail": "Function (const size_t OffsetToOwner = DelegateInfoClass::template GetDelegateOffset<)",
    "insertText": "OwningClass()"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (UObject* DelegateOwner = reinterpret_cast<)",
    "insertText": "UObject((uint8*)this - OffsetToOwner)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<MulticastDelegate> Result ;)",
    "insertText": "if(bIsBound)"
  },
  {
    "label": "MulticastDelegate()",
    "kind": "Method",
    "detail": "Function (Result = StaticCastSharedPtr<)",
    "insertText": "MulticastDelegate(FSparseDelegateStorage::GetSharedMulticastDelegate(GetDelegateOwner(), GetDelegateName()))"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} return Result ; } bool)",
    "insertText": "Contains(const FScriptDelegate& InDelegate)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const UObject* InObject, FName InFunctionName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FScriptDelegate InDelegate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bIsBound | =)",
    "insertText": "Add(GetDelegateOwner(), GetDelegateName(), MoveTemp(InDelegate))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUnique(FScriptDelegate InDelegate)"
  },
  {
    "label": "__Internal_AddUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__Internal_AddUnique(GetDelegateOwner(), GetDelegateName(), MoveTemp(InDelegate))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const FScriptDelegate& InDelegate)"
  },
  {
    "label": "__Internal_Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__Internal_Remove(GetDelegateOwner(), GetDelegateName(), InDelegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const UObject* InObject, FName InFunctionName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bIsBound =)",
    "insertText": "Remove(GetDelegateOwner(), GetDelegateName(), InObject, InFunctionName)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveAll(const UObject* Object)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (bIsBound =)",
    "insertText": "RemoveAll(GetDelegateOwner(), GetDelegateName(), Object)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Clear()"
  },
  {
    "label": "__Internal_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__Internal_Clear(GetDelegateOwner(), GetDelegateName())"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (} template<. . . ParamTypes> void)",
    "insertText": "Broadcast(ParamTypes... Params)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (MCDelegate ->)",
    "insertText": "Broadcast(Params...)"
  },
  {
    "label": "__Internal_IsAlreadyBound()",
    "kind": "Method",
    "detail": "Function (} } template<class UserClass> bool)",
    "insertText": "__Internal_IsAlreadyBound(UserClass* InUserObject, typename FDelegate::template TMethodPtrResolver< UserClass >::FMethodPtr InMethodPtr, FName InFunctionName)"
  },
  {
    "label": "__Internal_AddDynamic()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> void)",
    "insertText": "__Internal_AddDynamic(UserClass* InUserObject, typename FDelegate::template TMethodPtrResolver< UserClass >::FMethodPtr InMethodPtr, FName InFunctionName)"
  },
  {
    "label": "__Internal_BindDynamic()",
    "kind": "Method",
    "detail": "Function (FDelegate NewDelegate ; NewDelegate .)",
    "insertText": "__Internal_BindDynamic(InUserObject, InMethodPtr, InFunctionName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Add(NewDelegate)"
  },
  {
    "label": "__Internal_AddUniqueDynamic()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> void)",
    "insertText": "__Internal_AddUniqueDynamic(UserClass* InUserObject, typename FDelegate::template TMethodPtrResolver< UserClass >::FMethodPtr InMethodPtr, FName InFunctionName)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AddUnique(NewDelegate)"
  },
  {
    "label": "__Internal_RemoveDynamic()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> void)",
    "insertText": "__Internal_RemoveDynamic(UserClass* InUserObject, typename FDelegate::template TMethodPtrResolver< UserClass >::FMethodPtr InMethodPtr, FName InFunctionName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Remove(InUserObject, InFunctionName)"
  },
  {
    "label": "__Internal_AddUnique()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "__Internal_AddUnique(const UObject*, FName, FScriptDelegate)"
  },
  {
    "label": "__Internal_Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__Internal_Remove(const UObject*, FName, const FScriptDelegate&)"
  },
  {
    "label": "__Internal_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__Internal_Clear(const UObject*, FName)"
  },
  {
    "label": "FUNC_DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "FUNC_DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE(SparseDelegateClassName, OwningClass, DelegateName, FuncParamList, FuncParamPassThru, ...) \\ FUNC_DECLARE_DYNAMIC_MULTICAST_DELEGATE(SparseDelegateClassName##_MCSignature, SparseDelegateClassName##_DelegateWrapper, FUNC_CONCAT(FuncParamList), FUNC_CONCAT(FuncParamPassThru), __VA_ARGS__)"
  }
]