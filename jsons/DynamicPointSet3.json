[
  {
    "label": "FDynamicAttributeSetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicAttributeSetBase"
  },
  {
    "label": "TDynamicPointSet3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicPointSet3"
  },
  {
    "label": "SetExternallyManagedAttributes()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" # include \" GeometryTypes . h \" # include \" MathUtil . h \" # include \" Util / DynamicVector . h \" # include \" Util / IndexUtil . h \" # include \" Util / IteratorUtil . h \" # include \" Util / RefCountVector . h \" # include \" VectorTypes . h \" # include \" VectorUtil . h \" # include \" DynamicMesh / DynamicAttribute . h \" class FDynamicAttributeSetBase ; namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TDynamicPointSet3 { protected : FRefCountVector VertexRefCounts ; TDynamicVector<RealType> Vertices ; TDynamicAttributeSetBase<TDynamicPointSet3<RealType>>* BaseAttributeSet = nullptr ; public : void)",
    "insertText": "SetExternallyManagedAttributes(TDynamicAttributeSetBase<TDynamicPointSet3<RealType>>* AttributeSet)"
  },
  {
    "label": "GetBaseAttributeSet()",
    "kind": "Method",
    "detail": "Function (BaseAttributeSet = AttributeSet ; } TDynamicAttributeSetBase<TDynamicPointSet3<RealType>>*)",
    "insertText": "GetBaseAttributeSet()"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "IsVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertex(int VertexID)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Clear()"
  },
  {
    "label": "FRefCountVector()",
    "kind": "Method",
    "detail": "Function (VertexRefCounts =)",
    "insertText": "FRefCountVector()"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (BaseAttributeSet = nullptr ; } int)",
    "insertText": "AppendVertex(const TVector<RealType>& Position)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (int vid = VertexRefCounts .)",
    "insertText": "Allocate()"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (int i = 3* vid ; Vertices .)",
    "insertText": "InsertAt(Position[2], i + 2)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "InsertAt(Position[1], i + 1)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "InsertAt(Position[0], i)"
  },
  {
    "label": "GetBaseAttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBaseAttributeSet()->OnNewVertex(vid, false)"
  },
  {
    "label": "BeginUnsafeVerticesInsert()",
    "kind": "Method",
    "detail": "Function (} return vid ; } void)",
    "insertText": "BeginUnsafeVerticesInsert()"
  },
  {
    "label": "EndUnsafeVerticesInsert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUnsafeVerticesInsert()"
  },
  {
    "label": "RebuildFreeList()",
    "kind": "Method",
    "detail": "Function (VertexRefCounts .)",
    "insertText": "RebuildFreeList()"
  },
  {
    "label": "InsertVertex()",
    "kind": "Method",
    "detail": "Function (} EMeshResult)",
    "insertText": "InsertVertex(int VertexID, const TVector<RealType>& Position, bool bUnsafe = false)"
  },
  {
    "label": "GetBaseAttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBaseAttributeSet()->OnNewVertex(VertexID, true)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} return EMeshResult::Ok ; } public : TVector<RealType>)",
    "insertText": "GetVertex(int VertexID)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (int i = 3* VertexID ; return TVector<)",
    "insertText": "RealType(Vertices[i], Vertices[i + 1], Vertices[i + 2])"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertex(int VertexID, const TVector<RealType>& vNewPos)"
  },
  {
    "label": "VertexIndicesItr()",
    "kind": "Method",
    "detail": "Function (int i = 3* VertexID ; Vertices [ i ] = vNewPos . X ; Vertices [ i + 1 ] = vNewPos . Y ; Vertices [ i + 2 ] = vNewPos . Z ; } public : FRefCountVector::IndexEnumerable)",
    "insertText": "VertexIndicesItr()"
  },
  {
    "label": "VerticesItr()",
    "kind": "Method",
    "detail": "Function (} FRefCountVector::MappedEnumerable<TVector<RealType>>)",
    "insertText": "VerticesItr()"
  },
  {
    "label": "IsCompact()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompact()"
  },
  {
    "label": "CompactMetric()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "CompactMetric()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} public : TAxisAlignedBox3<RealType>)",
    "insertText": "GetBounds()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox3<RealType> Box = TAxisAlignedBox3<RealType)",
    "insertText": "Empty()"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (int k = 3* vi ; Box .)",
    "insertText": "Contain(TVector<RealType>(Vertices[k], Vertices[k + 1], Vertices[k + 2]))"
  },
  {
    "label": "GetVerticesBuffer()",
    "kind": "Method",
    "detail": "Function (} return Box ; } public : const TDynamicVector<double>&)",
    "insertText": "GetVerticesBuffer()"
  },
  {
    "label": "GetBaseAttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBaseAttributeSet()->OnRemoveVertex(VertexID)"
  }
]