[
  {
    "label": "CefTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefTimer"
  },
  {
    "label": "PerfTestEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerfTestEntry"
  },
  {
    "label": "PERF_TEST_NAME()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_RENDERER_PERFORMANCE_TEST_SETUP_H_ # define CEF_TESTS_CEFCLIENT_RENDERER_PERFORMANCE_TEST_SETUP_H_ # pragma once # include \" include / base / cef_logging . h \" # include \" include / base / cef_macros . h \" namespace client { namespace performance_test { const int kDefaultIterations ; # define)",
    "insertText": "PERF_TEST_NAME(name) PerfTest##name #define PERF_TEST_ENTRY_EX(name, iterations)"
  },
  {
    "label": "PERF_TEST_NAME()",
    "kind": "Method",
    "detail": "Function (# name,)",
    "insertText": "PERF_TEST_NAME(name), iterations } #define PERF_TEST_ENTRY(name) PERF_TEST_ENTRY_EX(name, kDefaultIterations) #define PERF_TEST_RESULT int64 #define PERF_TEST_PARAM_ITERATIONS iterations #define PERF_TEST_PARAMS int PERF_TEST_PARAM_ITERATIONS #define PERF_TEST_FUNC(name) \\ PERF_TEST_RESULT PERF_TEST_NAME(name)(PERF_TEST_PARAMS) typedef PERF_TEST_RESULT(PerfTest(PERF_TEST_PARAMS))"
  },
  {
    "label": "CefTimer()",
    "kind": "Method",
    "detail": "Function (class CefTimer { public :)",
    "insertText": "CefTimer() : running_(false)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!running_)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (running_ = true ; start_ .)",
    "insertText": "Now()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(running_)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (running_ = false ; } int64)",
    "insertText": "Delta()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} private : bool running_ ; CefTime start_ ; CefTime stop_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefTimer)"
  },
  {
    "label": "PERF_ITERATIONS_START_EX()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "PERF_ITERATIONS_START_EX()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (\\ CefTimer _timer ; \\ _timer .)",
    "insertText": "Start()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(int _i = 0; _i < PERF_TEST_PARAM_ITERATIONS; ++_i)"
  },
  {
    "label": "PERF_ITERATIONS_END_EX()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PERF_ITERATIONS_END_EX(result) \\ } \\ _timer.Stop()"
  },
  {
    "label": "PERF_ITERATIONS_START()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PERF_ITERATIONS_START()"
  },
  {
    "label": "PERF_ITERATIONS_START_EX()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PERF_ITERATIONS_START_EX() #define PERF_ITERATIONS_END() \\ PERF_ITERATIONS_END_EX(_result)"
  }
]