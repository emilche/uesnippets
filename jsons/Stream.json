[
  {
    "label": "StreamState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StreamState"
  },
  {
    "label": "StreamResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StreamResult"
  },
  {
    "label": "StreamEvent",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StreamEvent"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "StreamInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_STREAM_H_ # define RTC_BASE_STREAM_H_ # include<memory> # include \" api / array_view . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" namespace rtc { enum StreamState { SS_CLOSED,SS_OPENING,SS_OPEN } ; enum StreamResult { SR_ERROR,SR_SUCCESS,SR_BLOCK,SR_EOS } ; enum StreamEvent { SE_OPEN = 1,SE_READ = 2,SE_WRITE = 4,SE_CLOSE = 8 } ; class RTC_EXPORT StreamInterface { public : ~)",
    "insertText": "StreamInterface()"
  },
  {
    "label": "StreamInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StreamInterface(const StreamInterface&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamInterface&)",
    "insertText": "operator(const StreamInterface&)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (StreamState)",
    "insertText": "GetState()"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function ([ [)",
    "insertText": "deprecated(\"Use ArrayView version\")]] virtual StreamResult Read(void* buffer, size_t buffer_len, size_t* read, int* error)"
  },
  {
    "label": "RTC_CHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_NOTREACHED()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__clang__) #pragma clang diagnostic push #pragma clang diagnostic ignored \"-Wdeprecated-declarations\" #endif virtual StreamResult Read(rtc::ArrayView<uint8_t> buffer, size_t& read, int& error)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__clang__) #pragma clang diagnostic pop #endif [[deprecated(\"Use ArrayView version\")]] virtual StreamResult Write(const void* data, size_t data_len, size_t* written, int* error)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__clang__) #pragma clang diagnostic push #pragma clang diagnostic ignored \"-Wdeprecated-declarations\" #endif virtual StreamResult Write(rtc::ArrayView<const uint8_t> data, size_t& written, int& error)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__clang__) #pragma clang diagnostic pop #endif virtual void Close()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (sigslot::signal3<StreamInterface*,int,int> SignalEvent ; bool)",
    "insertText": "Flush()"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function ([ [)",
    "insertText": "deprecated(\"Use version with ArrayView\")]] StreamResult WriteAll(const void* data, size_t data_len, size_t* written, int* error)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__clang__) #pragma clang diagnostic push #pragma clang diagnostic ignored \"-Wdeprecated-declarations\" #endif StreamResult WriteAll(ArrayView<const uint8_t> data, size_t& written, int& error)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__clang__) #pragma clang diagnostic pop #endif protected: StreamInterface()"
  }
]