[
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "ISequenceDataEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequenceDataEventHandler"
  },
  {
    "label": "FMovieSceneBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBinding"
  },
  {
    "label": "FObjectBindingModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectBindingModel"
  },
  {
    "label": "FPlaceholderObjectBindingModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlaceholderObjectBindingModel"
  },
  {
    "label": "FSequenceModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequenceModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FViewModelChildren",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelChildren"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" EventHandlers / ISequenceDataEventHandler . h \" # include \" EventHandlers / MovieSceneDataEventContainer . h \" # include \" MVVM / Extensions / DynamicExtensionContainer . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Misc / Guid . h \" # include \" Templates / SharedPointer . h \" class UMovieSceneTrack ; namespace UE::MovieScene { class ISequenceDataEventHandler ; } struct FMovieSceneBinding ; namespace UE { namespace Sequencer { class FObjectBindingModel ; class FPlaceholderObjectBindingModel ; class FSequenceModel ; class FViewModel ; struct FViewModelChildren ; class FObjectBindingModelStorageExtension : public IDynamicExtension,private UE::MovieScene::TIntrusiveEventHandler<UE::MovieScene::ISequenceDataEventHandler> { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FObjectBindingModelStorageExtension)"
  },
  {
    "label": "FObjectBindingModelStorageExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectBindingModelStorageExtension()"
  },
  {
    "label": "GetOrCreateModelForBinding()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "GetOrCreateModelForBinding(const FGuid& Binding)"
  },
  {
    "label": "GetOrCreateModelForBinding()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "GetOrCreateModelForBinding(const FMovieSceneBinding& Binding)"
  },
  {
    "label": "FindModelForObjectBinding()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectBindingModel>)",
    "insertText": "FindModelForObjectBinding(const FGuid& InObjectBindingID)"
  },
  {
    "label": "OnCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreated(TSharedRef<FViewModel> InWeakOwner)"
  },
  {
    "label": "OnReinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReinitialize()"
  },
  {
    "label": "OnBindingAdded()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBindingAdded(const FMovieSceneBinding& Binding)"
  },
  {
    "label": "OnBindingRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBindingRemoved(const FGuid& ObjectBindingID)"
  },
  {
    "label": "OnTrackAddedToBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackAddedToBinding(UMovieSceneTrack* Track, const FGuid& Binding)"
  },
  {
    "label": "OnTrackRemovedFromBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackRemovedFromBinding(UMovieSceneTrack* Track, const FGuid& Binding)"
  },
  {
    "label": "OnBindingParentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBindingParentChanged(const FGuid& Binding, const FGuid& NewParent)"
  },
  {
    "label": "CreateModelForObjectBinding()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectBindingModel>)",
    "insertText": "CreateModelForObjectBinding(const FMovieSceneBinding& Binding)"
  },
  {
    "label": "CreatePlaceholderForObjectBinding()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "CreatePlaceholderForObjectBinding(const FGuid& ObjectID)"
  },
  {
    "label": "FindPlaceholderForObjectBinding()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "FindPlaceholderForObjectBinding(const FGuid& InObjectBindingID)"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  }
]