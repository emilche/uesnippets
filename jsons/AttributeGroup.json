[
  {
    "label": "GroupCodec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroupCodec"
  },
  {
    "label": "Storage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Storage"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "BitMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitMask"
  },
  {
    "label": "GroupFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GroupFilter"
  },
  {
    "label": "decode()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_ATTRIBUTE_GROUP_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_ATTRIBUTE_GROUP_HAS_BEEN_INCLUDED # include \" AttributeArray . h \" # include \" AttributeSet . h \" # include<memory> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { struct GroupCodec { using StorageType = GroupType ; using ValueType = GroupType ; template<T> struct Storage { using Type = StorageType ; } ; void)",
    "insertText": "decode(const StorageType&, ValueType&)"
  },
  {
    "label": "encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "encode(const ValueType&, StorageType&)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "name()"
  },
  {
    "label": "encode()",
    "kind": "Method",
    "detail": "Function (val = data ; } void)",
    "insertText": "encode(const ValueType& val, StorageType& data)"
  },
  {
    "label": "isGroup()",
    "kind": "Method",
    "detail": "Function (data = val ; } bool)",
    "insertText": "isGroup(const AttributeArray& array)"
  },
  {
    "label": "GroupHandle()",
    "kind": "Method",
    "detail": "Function (} class GroupHandle { public : using Ptr = std::shared_ptr<GroupHandle> ; using UniquePtr = std::unique_ptr<GroupHandle> ; struct BitMask { } ; using GroupIndex = std::pair<Index,uint8_t> ;)",
    "insertText": "GroupHandle(const GroupAttributeArray& array, const GroupType& offset)"
  },
  {
    "label": "GroupHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupHandle(const GroupAttributeArray& array, const GroupType& bitMask, BitMask)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "size()"
  },
  {
    "label": "isUniform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUniform()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "get(Index n)"
  },
  {
    "label": "getUnsafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getUnsafe(Index n)"
  },
  {
    "label": "GroupWriteHandle()",
    "kind": "Method",
    "detail": "Function (protected : const GroupAttributeArray& mArray ; const GroupType mBitMask ; } ; class GroupWriteHandle : public GroupHandle { public : using Ptr = std::shared_ptr<GroupWriteHandle> ; using UniquePtr = std::unique_ptr<GroupWriteHandle> ;)",
    "insertText": "GroupWriteHandle(GroupAttributeArray& array, const GroupType& offset)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(Index n, bool on)"
  },
  {
    "label": "setUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUnsafe(Index n, bool on)"
  },
  {
    "label": "collapse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "collapse(bool on)"
  },
  {
    "label": "compact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "compact()"
  },
  {
    "label": "GroupFilter()",
    "kind": "Method",
    "detail": "Function (} ; class GroupFilter { public :)",
    "insertText": "GroupFilter(const Name& name, const AttributeSet& attributeSet) : mIndex(attributeSet.groupIndex(name))"
  },
  {
    "label": "GroupFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GroupFilter(const AttributeSet::Descriptor::GroupIndex& index) : mIndex(index)"
  },
  {
    "label": "initialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "initialized()"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (} index::State)",
    "insertText": "state()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mHandle .)",
    "insertText": "reset(new GroupHandle(leaf.groupHandle(mIndex)))"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} template<IterT> bool)",
    "insertText": "valid(const IterT& iter)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mHandle)"
  }
]