[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FMeshRenderBufferSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshRenderBufferSet"
  },
  {
    "label": "FMeshRenderBufferSetConversionUtil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshRenderBufferSetConversionUtil"
  },
  {
    "label": "FDynamicMeshComponentToMeshRenderBufferSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshComponentToMeshRenderBufferSet"
  },
  {
    "label": "UDynamicMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDynamicMeshComponent"
  },
  {
    "label": "FMeshRenderBufferSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / BaseDynamicMeshComponent . h \" # include \" Components / DynamicMeshComponent . h \" # include \" DynamicMeshBuilder . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicMeshAttributeSet . h \" # include \" LocalVertexFactory . h \" # include \" Rendering / StaticMeshVertexBuffer . h \" # include \" Rendering / PositionVertexBuffer . h \" # include \" Rendering / ColorVertexBuffer . h \" # include \" RHICommandList . h \" # include \" RayTracingGeometry . h \" # include \" VertexFactory . h \" using UE::Geometry::FDynamicMesh3 ; using UE::Geometry::FDynamicMeshAttributeSet ; using UE::Geometry::FDynamicMeshUVOverlay ; using UE::Geometry::FDynamicMeshNormalOverlay ; using UE::Geometry::FDynamicMeshColorOverlay ; using UE::Geometry::FDynamicMeshMaterialAttribute ; class UMaterialInterface ; class FMeshRenderBufferSet { public : int TriangleCount = 0 ; FStaticMeshVertexBuffer StaticMeshVertexBuffer ; FPositionVertexBuffer PositionVertexBuffer ; FColorVertexBuffer ColorVertexBuffer ; FDynamicMeshIndexBuffer32 IndexBuffer ; FLocalVertexFactory VertexFactory ; UMaterialInterface* Material = nullptr ; TOptional<TArray<int>> Triangles ; bool bEnableSecondaryIndexBuffer = false ; FDynamicMeshIndexBuffer32 SecondaryIndexBuffer ; bool bEnableRaytracing = false ; # if RHI_RAYTRACING FRayTracingGeometry PrimaryRayTracingGeometry ; FRayTracingGeometry SecondaryRayTracingGeometry ; bool bIsRayTracingDataValid = false ; # endif FCriticalSection BuffersLock ;)",
    "insertText": "FMeshRenderBufferSet(ERHIFeatureLevel::Type FeatureLevelType) : VertexFactory(FeatureLevelType, \"FMeshRenderBufferSet\")"
  },
  {
    "label": "SetUseFullPrecisionUVs()",
    "kind": "Method",
    "detail": "Function (StaticMeshVertexBuffer .)",
    "insertText": "SetUseFullPrecisionUVs(true)"
  },
  {
    "label": "SetUseHighPrecisionTangentBasis()",
    "kind": "Method",
    "detail": "Function (StaticMeshVertexBuffer .)",
    "insertText": "SetUseHighPrecisionTangentBasis(true)"
  },
  {
    "label": "FMeshRenderBufferSet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMeshRenderBufferSet()"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (PositionVertexBuffer .)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SecondaryIndexBuffer.IsInitialized())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # if RHI_RAYTRACING)",
    "insertText": "if(bEnableRaytracing)"
  },
  {
    "label": "Upload()",
    "kind": "Method",
    "detail": "Function (} # endif } } void)",
    "insertText": "Upload()"
  },
  {
    "label": "UploadIndexBufferUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadIndexBufferUpdate()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FRHICommandListBase& RHICmdList =)",
    "insertText": "Get()"
  },
  {
    "label": "InitOrUpdateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOrUpdateResource(RHICmdList, &IndexBuffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bEnableSecondaryIndexBuffer && SecondaryIndexBuffer.Indices.Num() > 0)"
  },
  {
    "label": "InitOrUpdateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOrUpdateResource(RHICmdList, &SecondaryIndexBuffer)"
  },
  {
    "label": "InvalidateRayTracingData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InvalidateRayTracingData()"
  },
  {
    "label": "ValidateRayTracingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateRayTracingData()"
  },
  {
    "label": "UploadVertexUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UploadVertexUpdate(bool bPositions, bool bMeshAttribs, bool bColors)"
  },
  {
    "label": "TransferVertexUpdateToGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferVertexUpdateToGPU(FRHICommandListBase& RHICmdList, bool bPositions, bool bNormals, bool bTexCoords, bool bColors)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING)",
    "insertText": "if(bIsRayTracingDataValid == false && IsRayTracingEnabled() && bEnableRaytracing)"
  },
  {
    "label": "UpdateRaytracingGeometryIfEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRaytracingGeometryIfEnabled()"
  },
  {
    "label": "UseIndexBuffer()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshIndexBuffer32&)",
    "insertText": "UseIndexBuffer(k == 0)"
  },
  {
    "label": "RayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (continue ; } FRayTracingGeometry&)",
    "insertText": "RayTracingGeometry(k == 0)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryInitializer Initializer ; Initializer . IndexBuffer = UseIndexBuffer . IndexBufferRHI ; Initializer . TotalPrimitiveCount = UseIndexBuffer . Indices .)",
    "insertText": "Num()"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (Initializer . GeometryType = RTGT_Triangles ; Initializer . bFastBuild = true ; Initializer . bAllowUpdate = false ; FRayTracingGeometrySegment Segment ; Segment . VertexBuffer = PositionVertexBuffer . VertexBufferRHI ; Segment . NumPrimitives = Initializer . TotalPrimitiveCount ; Segment . MaxVertices = PositionVertexBuffer .)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Initializer . Segments .)",
    "insertText": "Add(Segment)"
  },
  {
    "label": "SetInitializer()",
    "kind": "Method",
    "detail": "Function (RayTracingGeometry .)",
    "insertText": "SetInitializer(MoveTemp(Initializer))"
  },
  {
    "label": "InitResource()",
    "kind": "Method",
    "detail": "Function (RayTracingGeometry .)",
    "insertText": "InitResource(RHICmdList)"
  },
  {
    "label": "InitOrUpdateResource()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "InitOrUpdateResource(FRHICommandListBase& RHICmdList, FRenderResource* Resource)"
  },
  {
    "label": "UpdateRHI()",
    "kind": "Method",
    "detail": "Function (} else { Resource ->)",
    "insertText": "UpdateRHI(RHICmdList)"
  },
  {
    "label": "DestroyRenderBufferSet()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "DestroyRenderBufferSet(FMeshRenderBufferSet* BufferSet)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bool bApplyVertexColorRemapping = false ; TUniqueFunction<)",
    "insertText": "void(FVector4f&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (EDynamicMeshVertexColorTransformMode ColorSpaceTransformMode = EDynamicMeshVertexColorTransformMode::NoTransform ; bool bUsePerTriangleNormals = false ; bool bUseSecondaryTriBuffers = false ; TUniqueFunction<)",
    "insertText": "bool(const FDynamicMesh3*, int32)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (template<TriangleEnumerable> void)",
    "insertText": "InitializeBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const FDynamicMeshUVOverlay* UVOverlay, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bTrackTriangles = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<const FDynamicMeshUVOverlay*> UVOverlays ; UVOverlays .)",
    "insertText": "Add(UVOverlay)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBuffersFromOverlays(RenderBuffers, Mesh, NumTriangles, Enumerable, UVOverlays, NormalOverlay, ColorOverlay, TangentsFunc, bTrackTriangles)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (} template<TriangleEnumerable,UVOverlayListAllocator> void)",
    "insertText": "InitializeBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const TArray<const FDynamicMeshUVOverlay*, UVOverlayListAllocator>& UVOverlays, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bTrackTriangles = false)"
  },
  {
    "label": "UpdateSecondaryTriangleBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSecondaryTriangleBuffer(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, bool bDuplicate)"
  },
  {
    "label": "RecomputeRenderBufferTriangleIndexSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeRenderBufferTriangleIndexSets(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh)"
  },
  {
    "label": "UpdateVertexBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (template<TriangleEnumerable> void)",
    "insertText": "UpdateVertexBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bUpdatePositions = true, bool bUpdateNormals = false, bool bUpdateColors = false)"
  },
  {
    "label": "UpdateVertexUVBufferFromOverlays()",
    "kind": "Method",
    "detail": "Function (template<TriangleEnumerable,UVOverlayListAllocator> void)",
    "insertText": "UpdateVertexUVBufferFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int32 NumTriangles, TriangleEnumerable Enumerable, const TArray<const FDynamicMeshUVOverlay*, UVOverlayListAllocator>& UVOverlays)"
  },
  {
    "label": "GetOverlayColorAsFColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetOverlayColorAsFColor(const FDynamicMeshColorOverlay* ColorOverlay, int32 ElementID)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (FVector4f UseColor = ColorOverlay ->)",
    "insertText": "GetElement(ElementID)"
  },
  {
    "label": "VertexColorRemappingFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VertexColorRemappingFunc(UseColor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ColorSpaceTransformMode == EDynamicMeshVertexColorTransformMode::SRGBToLinear)"
  },
  {
    "label": "QuantizedSRGBColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "QuantizedSRGBColor((FLinearColor)UseColor).ToFColor(false)"
  },
  {
    "label": "bConvertToSRGB()",
    "kind": "Method",
    "detail": "Function (} else { bool)",
    "insertText": "bConvertToSRGB(ColorSpaceTransformMode == EDynamicMeshVertexColorTransformMode::LinearToSRGB)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} } private : using FIndex2i = UE::Geometry::FIndex2i ; using FIndex3i = UE::Geometry::FIndex3i ; } ; class FDynamicMeshComponentToMeshRenderBufferSet { public : FMeshRenderBufferSetConversionUtil MeshRenderBufferSetConverter ; void)",
    "insertText": "Convert(class UDynamicMeshComponent& DynamicMeshComponent, FMeshRenderBufferSet& MeshRenderBufferSet, bool bUseComponentSettings = true)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (protected : TUniqueFunction<)",
    "insertText": "void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> MakeTangentsFunc(class UDynamicMeshComponent& DynamicMeshCompnent, bool bSkipAutoCompute = false)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (} ; template<TriangleEnumerable,UVOverlayListAllocator> void)",
    "insertText": "InitializeBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const TArray<const FDynamicMeshUVOverlay*, UVOverlayListAllocator>& UVOverlays, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bTrackTriangles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> TriangleCount = NumTriangles ;)",
    "insertText": "if(NumTriangles == 0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int NumTexCoords =)",
    "insertText": "Max(1, NumUVOverlays)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<FIndex3i,TFixedAllocator<MAX_STATIC_TEXCOORDS>> UVTriangles ; UVTriangles .)",
    "insertText": "SetNum(NumTexCoords)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function ({ RenderBuffers -> PositionVertexBuffer .)",
    "insertText": "Init(NumVertices)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> StaticMeshVertexBuffer .)",
    "insertText": "Init(NumVertices, NumTexCoords)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> IndexBuffer . Indices .)",
    "insertText": "AddUninitialized(NumTriangles * 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bool bBuildTriangleList = bTrackTriangles | | bUseSecondaryTriBuffers ;)",
    "insertText": "if(bBuildTriangleList)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> Triangles = TArray<)",
    "insertText": "int32()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} int TriIdx = 0,VertIdx = 0 ; FVector3f TangentX,TangentY ;)",
    "insertText": "for(int TriangleID : Enumerable)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i Tri = Mesh ->)",
    "insertText": "GetTriangle(TriangleID)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (UVTriangles [)",
    "insertText": "k(k < NumUVOverlays && UVOverlays[k] != nullptr) ? UVOverlays[k]->GetTriangle(TriangleID) : FIndex3i::Invalid()"
  },
  {
    "label": "TriNormal()",
    "kind": "Method",
    "detail": "Function (} FIndex3i)",
    "insertText": "TriNormal(NormalOverlay != nullptr) ? NormalOverlay->GetTriangle(TriangleID) : FIndex3i::Zero()"
  },
  {
    "label": "TriColor()",
    "kind": "Method",
    "detail": "Function (FIndex3i)",
    "insertText": "TriColor(ColorOverlay != nullptr) ? ColorOverlay->GetTriangle(TriangleID) : FIndex3i::Zero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FColor UniformTriColor = ConstantVertexColor ;)",
    "insertText": "if(bUsePerTriangleColor && PerTriangleColorFunc != nullptr)"
  },
  {
    "label": "PerTriangleColorFunc()",
    "kind": "Method",
    "detail": "Function (UniformTriColor =)",
    "insertText": "PerTriangleColorFunc(Mesh, TriangleID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bHaveColors = false ; })",
    "insertText": "for(int j = 0; j < 3; ++j)"
  },
  {
    "label": "VertexPosition()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> PositionVertexBuffer .)",
    "insertText": "VertexPosition(VertIdx) = (FVector3f)Mesh->GetVertex(Tri[j])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector3f Normal ;)",
    "insertText": "if(bUsePerTriangleNormals)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normal(FVector3f)Mesh->GetTriNormal(TriangleID)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Normal(NormalOverlay != nullptr && TriNormal[j] != FDynamicMesh3::InvalidID) ? NormalOverlay->GetElement(TriNormal[j]) : Mesh->GetVertexNormal(Tri[j])"
  },
  {
    "label": "TangentsFunc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TangentsFunc(Tri[j], TriangleID, j, Normal, TangentX, TangentY)"
  },
  {
    "label": "SetVertexTangents()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> StaticMeshVertexBuffer .)",
    "insertText": "SetVertexTangents(VertIdx, TangentX, TangentY, Normal)"
  },
  {
    "label": "UV()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "UV(UVTriangles[k][j] != FDynamicMesh3::InvalidID) ? UVOverlays[k]->GetElement(UVTriangles[k][j]) : FVector2f::Zero()"
  },
  {
    "label": "SetVertexUV()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> StaticMeshVertexBuffer .)",
    "insertText": "SetVertexUV(VertIdx, k, UV)"
  },
  {
    "label": "VertexFColor()",
    "kind": "Method",
    "detail": "Function (} FColor)",
    "insertText": "VertexFColor(bHaveColors && TriColor[j] != FDynamicMesh3::InvalidID) ? GetOverlayColorAsFColor(ColorOverlay, TriColor[j])"
  },
  {
    "label": "VertexColor()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> ColorVertexBuffer .)",
    "insertText": "VertexColor(VertIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> Triangles ->)",
    "insertText": "Add(TriangleID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bUseSecondaryTriBuffers)"
  },
  {
    "label": "UpdateSecondaryTriangleBuffer()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> bEnableSecondaryIndexBuffer = true ;)",
    "insertText": "UpdateSecondaryTriangleBuffer(RenderBuffers, Mesh, false)"
  },
  {
    "label": "UpdateVertexBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (} } template<TriangleEnumerable> void)",
    "insertText": "UpdateVertexBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bUpdatePositions, bool bUpdateNormals, bool bUpdateColors)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int NumVertices = NumTriangles* 3 ;)",
    "insertText": "if((bUpdatePositions && ensure(RenderBuffers->PositionVertexBuffer.GetNumVertices() == NumVertices) == false) || (bUpdateNormals && ensure(RenderBuffers->StaticMeshVertexBuffer.GetNumVertices() == NumVertices) == false) || (bUpdateColors && ensure(RenderBuffers->ColorVertexBuffer.GetNumVertices() == NumVertices) == false))"
  },
  {
    "label": "TriNormal()",
    "kind": "Method",
    "detail": "Function (FIndex3i)",
    "insertText": "TriNormal(bUpdateNormals && NormalOverlay != nullptr) ? NormalOverlay->GetTriangle(TriangleID) : FIndex3i::Zero()"
  },
  {
    "label": "TriColor()",
    "kind": "Method",
    "detail": "Function (FIndex3i)",
    "insertText": "TriColor(bUpdateColors && ColorOverlay != nullptr) ? ColorOverlay->GetTriangle(TriangleID) : FIndex3i::Zero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FColor UniformTriColor = ConstantVertexColor ;)",
    "insertText": "if(bUpdateColors && bUsePerTriangleColor && PerTriangleColorFunc != nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bUpdateNormals)"
  },
  {
    "label": "SetVertexTangents()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> StaticMeshVertexBuffer .)",
    "insertText": "SetVertexTangents(VertIdx, (FVector3f)TangentX, (FVector3f)TangentY, (FVector3f)Normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bUpdateColors)"
  },
  {
    "label": "GetNumTexCoords()",
    "kind": "Method",
    "detail": "Function (int NumTexCoords = RenderBuffers -> StaticMeshVertexBuffer .)",
    "insertText": "GetNumTexCoords()"
  }
]