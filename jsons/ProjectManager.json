[
  {
    "label": "FProjectDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectDescriptor"
  },
  {
    "label": "FProjectManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectManager"
  },
  {
    "label": "FProjectManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Interfaces / IProjectManager . h \" struct FProjectDescriptor ; class FProjectManager final : public IProjectManager { public :)",
    "insertText": "FProjectManager()"
  },
  {
    "label": "GetCurrentProject()",
    "kind": "Method",
    "detail": "Function (const FProjectDescriptor*)",
    "insertText": "GetCurrentProject()"
  },
  {
    "label": "LoadProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadProjectFile(const FString& ProjectFile)"
  },
  {
    "label": "LoadModulesForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadModulesForProject(const ELoadingPhase::Type LoadingPhase)"
  },
  {
    "label": "OnLoadingPhaseComplete()",
    "kind": "Method",
    "detail": "Function (FLoadingModulesForPhaseEvent&)",
    "insertText": "OnLoadingPhaseComplete()"
  },
  {
    "label": "CheckModuleCompatibility()",
    "kind": "Method",
    "detail": "Function (# if ! IS_MONOLITHIC bool)",
    "insertText": "CheckModuleCompatibility(TArray<FString>& OutIncompatibleModules)"
  },
  {
    "label": "GetAutoLoadProjectFileName()",
    "kind": "Method",
    "detail": "Function (# endif const FString&)",
    "insertText": "GetAutoLoadProjectFileName()"
  },
  {
    "label": "SignSampleProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SignSampleProject(const FString& FilePath, const FString& Category, FText& OutFailReason)"
  },
  {
    "label": "QueryStatusForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryStatusForProject(const FString& FilePath, FProjectStatus& OutProjectStatus)"
  },
  {
    "label": "QueryStatusForCurrentProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryStatusForCurrentProject(FProjectStatus& OutProjectStatus)"
  },
  {
    "label": "UpdateSupportedTargetPlatformsForProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSupportedTargetPlatformsForProject(const FString& FilePath, const FName& InPlatformName, const bool bIsSupported)"
  },
  {
    "label": "UpdateSupportedTargetPlatformsForCurrentProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSupportedTargetPlatformsForCurrentProject(const FName& InPlatformName, const bool bIsSupported)"
  },
  {
    "label": "ClearSupportedTargetPlatformsForProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSupportedTargetPlatformsForProject(const FString& FilePath)"
  },
  {
    "label": "ClearSupportedTargetPlatformsForCurrentProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSupportedTargetPlatformsForCurrentProject()"
  },
  {
    "label": "OnTargetPlatformsForCurrentProjectChanged()",
    "kind": "Method",
    "detail": "Function (FOnTargetPlatformsForCurrentProjectChangedEvent&)",
    "insertText": "OnTargetPlatformsForCurrentProjectChanged()"
  },
  {
    "label": "SetPluginEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPluginEnabled(const FString& PluginName, bool bEnabled, FText& OutFailReason)"
  },
  {
    "label": "RemovePluginReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePluginReference(const FString& PluginName, FText& OutFailReason)"
  },
  {
    "label": "UpdateAdditionalPluginDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAdditionalPluginDirectory(const FString& Dir, const bool bAddOrRemove)"
  },
  {
    "label": "GetAdditionalPluginDirectories()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetAdditionalPluginDirectories()"
  },
  {
    "label": "IsCurrentProjectDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentProjectDirty()"
  },
  {
    "label": "SaveCurrentProjectToDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCurrentProjectToDisk(FText& OutFailReason)"
  },
  {
    "label": "IsEnterpriseProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnterpriseProject()"
  },
  {
    "label": "SetIsEnterpriseProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsEnterpriseProject(bool bValue)"
  },
  {
    "label": "GetCurrentProjectModuleContextInfos()",
    "kind": "Method",
    "detail": "Function (TArray<FModuleContextInfo>&)",
    "insertText": "GetCurrentProjectModuleContextInfos()"
  },
  {
    "label": "IsSuppressingProjectFileWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSuppressingProjectFileWrite()"
  },
  {
    "label": "AddSuppressProjectFileWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSuppressProjectFileWrite(const FName InName)"
  },
  {
    "label": "RemoveSuppressProjectFileWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSuppressProjectFileWrite(const FName InName)"
  },
  {
    "label": "QueryStatusForProjectImpl()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "QueryStatusForProjectImpl(const FProjectDescriptor& Project, const FString& FilePath, FProjectStatus& OutProjectStatus)"
  },
  {
    "label": "GetDefaultEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultEnabledPlugins(TArray<FString>& PluginNames, bool bIncludeInstalledPlugins, bool bAllowEnginePluginsEnabledByDefault)"
  }
]