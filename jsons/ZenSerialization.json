[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbAttachment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbAttachment"
  },
  {
    "label": "FCbPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbPackage"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SaveCbAttachment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Experimental / ZenServerInterface . h \" # if UE_WITH_ZEN # include \" Memory / SharedBuffer . h \" # include \" Serialization / CompactBinary . h \" class FArchive ; class FCbAttachment ; class FCbPackage ; class FCbWriter ; namespace UE::Zen { namespace OpLog { void)",
    "insertText": "SaveCbAttachment(const FCbAttachment& Attachment, FCbWriter& Writer)"
  },
  {
    "label": "SaveCbPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCbPackage(const FCbPackage& Package, FCbWriter& Writer)"
  },
  {
    "label": "SaveCbPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCbPackage(const FCbPackage& Package, FArchive& Ar)"
  },
  {
    "label": "TryLoadCbPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoadCbPackage(FCbPackage& Package, FArchive& Ar, FCbBufferAllocator Allocator = FUniqueBuffer::Alloc)"
  },
  {
    "label": "kAllowLocalReferences()",
    "kind": "Method",
    "detail": "Function (} namespace Http { const uint32 kCbPkgMagic = 0 xaa77aacc ; enum class RpcAcceptOptions : uint32_t { kNone = 0,)",
    "insertText": "kAllowLocalReferences(1u << 0), kAllowPartialCacheChunks = (1u << 2)"
  }
]