[
  {
    "label": "StrongTypedef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrongTypedef"
  },
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "equal_to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "equal_to"
  },
  {
    "label": "StrongTypedef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<algorithm> template<T,int TAG = 0> class StrongTypedef { public : typedef T Type ;)",
    "insertText": "StrongTypedef(void) : m_value()"
  },
  {
    "label": "StrongTypedef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrongTypedef(T value) : m_value(value)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(StrongTypedef<T> other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StrongTypedef<T>&)",
    "insertText": "operator(T value)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (m_value = value ; return* this ; } T*)",
    "insertText": "Access(void)"
  }
]