[
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FSimModuleTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimModuleTree"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FEngineSimModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEngineSimModule"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimModule / TorqueSimModule . h \" # include \" SimModule / SimulationModuleBase . h \" namespace Chaos { struct FAllInputs ; class FSimModuleTree ; struct FEngineSimModuleData : public FTorqueSimModuleData,public Chaos::TSimulationModuleTypeable<class FEngineSimModule,FEngineSimModuleData> { #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) FEngineSimModuleData(int NodeArrayIndex, const FString& InDebugString) : FTorqueSimModuleData(NodeArrayIndex, InDebugString)"
  },
  {
    "label": "FEngineSimModuleData()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FEngineSimModuleData(int NodeArrayIndex) : FTorqueSimModuleData(NodeArrayIndex)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "FillSimState(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSimState(SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillNetState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNetState(SimModule)"
  },
  {
    "label": "MakeNewData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FEngineOutputData : public FSimOutputData,public Chaos::TSimulationModuleTypeable<class FEngineSimModule,FEngineOutputData> { FSimOutputData*)",
    "insertText": "MakeNewData()"
  },
  {
    "label": "MakeNew()",
    "kind": "Method",
    "detail": "Function (} FSimOutputData*)",
    "insertText": "MakeNew()"
  },
  {
    "label": "FillOutputState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillOutputState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lerp(const FSimOutputData& InCurrent, const FSimOutputData& InNext, float Alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual FString ToString()"
  },
  {
    "label": "FEngineSettings()",
    "kind": "Method",
    "detail": "Function (# endif float RPM ; float Torque ; } ; struct FEngineSettings {)",
    "insertText": "FEngineSettings() : MaxTorque(300.f) , MaxRPM(6000) , IdleRPM(1200) , EngineBrakeEffect(50.0f) , EngineInertia(100.0f)"
  },
  {
    "label": "AddNormalized()",
    "kind": "Method",
    "detail": "Function (TorqueCurve .)",
    "insertText": "AddNormalized(0.5f)"
  },
  {
    "label": "AddNormalized()",
    "kind": "Method",
    "detail": "Function (TorqueCurve .)",
    "insertText": "AddNormalized(0.6f)"
  },
  {
    "label": "AddNormalized()",
    "kind": "Method",
    "detail": "Function (TorqueCurve .)",
    "insertText": "AddNormalized(0.7f)"
  },
  {
    "label": "AddNormalized()",
    "kind": "Method",
    "detail": "Function (TorqueCurve .)",
    "insertText": "AddNormalized(0.8f)"
  },
  {
    "label": "AddNormalized()",
    "kind": "Method",
    "detail": "Function (TorqueCurve .)",
    "insertText": "AddNormalized(0.9f)"
  },
  {
    "label": "AddNormalized()",
    "kind": "Method",
    "detail": "Function (TorqueCurve .)",
    "insertText": "AddNormalized(1.0f)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (} FNormalisedGraph TorqueCurve ; float MaxTorque ; uint16 MaxRPM ; uint16 IdleRPM ; float EngineBrakeEffect ; float EngineInertia ; } ; class FEngineSimModule : public FTorqueSimModule,public TSimModuleSettings<FEngineSettings>,public TSimulationModuleTypeable<FEngineSimModule> { public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FEngineSimModule)"
  },
  {
    "label": "FEngineSimModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEngineSimModule(const FEngineSettings& Settings)"
  },
  {
    "label": "FEngineSimModule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEngineSimModule()"
  },
  {
    "label": "GenerateNetData()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FModuleNetData>)",
    "insertText": "GenerateNetData(const int32 SimArrayIndex)"
  },
  {
    "label": "GenerateOutputData()",
    "kind": "Method",
    "detail": "Function (} FSimOutputData*)",
    "insertText": "GenerateOutputData()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetDebugString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDebugString(FString& StringOut)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(float DeltaTime, const FAllInputs& Inputs, FSimModuleTree& VehicleModuleSystem)"
  },
  {
    "label": "GetEngineIdleSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEngineIdleSpeed()"
  },
  {
    "label": "GetTorqueFromRPM()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTorqueFromRPM(float RPM, bool LimitToIdle = true)"
  },
  {
    "label": "FEngineSimFactory()",
    "kind": "Method",
    "detail": "Function (protected : float EngineIdleSpeed ; float MaxEngineSpeed ; bool EngineStarted ; } ; class FEngineSimFactory : public FSimFactoryModule<FEngineSimModuleData>,public TSimulationModuleTypeable<FEngineSimModule,FEngineSimFactory>,public TSimFactoryAutoRegister<FEngineSimFactory> { public :)",
    "insertText": "FEngineSimFactory() : FSimFactoryModule(TEXT(\"EngineSimFactory\"))"
  }
]