[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedSuspendThread()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_SUSPENDABLE_THREAD_DELEGATE_H_ # define BASE_PROFILER_SUSPENDABLE_THREAD_DELEGATE_H_ # include<memory> # include \" base / base_export . h \" # include \" base / profiler / register_context . h \" # include \" base / profiler / thread_delegate . h \" namespace base { class BASE_EXPORT SuspendableThreadDelegate : public ThreadDelegate { public : class BASE_EXPORT ScopedSuspendThread { public :)",
    "insertText": "ScopedSuspendThread()"
  },
  {
    "label": "ScopedSuspendThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSuspendThread(const ScopedSuspendThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSuspendThread&)",
    "insertText": "operator(const ScopedSuspendThread&)"
  },
  {
    "label": "WasSuccessful()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasSuccessful()"
  },
  {
    "label": "SuspendableThreadDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SuspendableThreadDelegate()"
  },
  {
    "label": "CreateScopedSuspendThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ScopedSuspendThread>)",
    "insertText": "CreateScopedSuspendThread()"
  },
  {
    "label": "GetThreadContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetThreadContext(RegisterContext* thread_context)"
  },
  {
    "label": "CanCopyStack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyStack(uintptr_t stack_pointer)"
  }
]