[
  {
    "label": "TParticlesRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticlesRange"
  },
  {
    "label": "TParticlesRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Evolution / SolverBody . h \" # include \" Chaos / Particles . h \" # include \" Containers / ArrayView . h \" namespace Chaos::Softs { template<ParticlesType,= TEnableIf<TIsDerivedFrom<ParticlesType,TParticles<FSolverReal,3>>::IsDerived>::Type> class TParticlesRange { public :)",
    "insertText": "TParticlesRange()"
  },
  {
    "label": "TParticlesRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TParticlesRange(ParticlesType* InParticles, int32 InOffset, int32 InRangeSize) : Particles(InParticles) , Offset(InOffset) , RangeSize(InRangeSize)"
  },
  {
    "label": "AddParticleRange()",
    "kind": "Method",
    "detail": "Function (} TParticlesRange)",
    "insertText": "AddParticleRange(ParticlesType& InParticles, const int32 InRangeSize)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "Offset(int32)InParticles.Size()"
  },
  {
    "label": "AddParticles()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "AddParticles(InRangeSize)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (} template<T> TConstArrayView<T>)",
    "insertText": "GetConstArrayView(const TArray<T>& Array)"
  },
  {
    "label": "GetArrayView()",
    "kind": "Method",
    "detail": "Function (} template<T> TArrayView<T>)",
    "insertText": "GetArrayView(TArray<T>& Array)"
  },
  {
    "label": "GetParticles()",
    "kind": "Method",
    "detail": "Function (} const ParticlesType&)",
    "insertText": "GetParticles()"
  }
]