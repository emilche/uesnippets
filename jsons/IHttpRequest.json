[
  {
    "label": "IHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpRequest"
  },
  {
    "label": "IHttpResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpResponse"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Interfaces / IHttpBase . h \" class IHttpRequest ; class IHttpResponse ; enum class EHttpRequestDelegateThreadPolicy : uint8 { CompleteOnGameThread = 0,CompleteOnHttpThread,} ; class IHttpRequest ; class IHttpResponse ; typedef TSharedPtr<IHttpRequest,ESPMode::ThreadSafe> FHttpRequestPtr ; typedef TSharedPtr<IHttpResponse,ESPMode::ThreadSafe> FHttpResponsePtr ; typedef TSharedRef<IHttpRequest,ESPMode::ThreadSafe> FHttpRequestRef ; typedef TSharedRef<IHttpResponse,ESPMode::ThreadSafe> FHttpResponseRef ; using FHttpRequestCompleteDelegate = TTSDelegate<)",
    "insertText": "void(FHttpRequestPtr , FHttpResponsePtr , bool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FHttpRequestStatusCodeReceivedDelegate = TTSDelegate<)",
    "insertText": "void(FHttpRequestPtr , int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FHttpRequestHeaderReceivedDelegate = TTSDelegate<)",
    "insertText": "void(FHttpRequestPtr , const FString& , const FString&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FHttpRequestProgressDelegate = TTSDelegate<)",
    "insertText": "void(FHttpRequestPtr , int32 , int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FHttpRequestProgressDelegate64 = TTSDelegate<)",
    "insertText": "void(FHttpRequestPtr , uint64 , uint64)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FHttpRequestWillRetryDelegate = TTSDelegate<)",
    "insertText": "void(FHttpRequestPtr , FHttpResponsePtr , float)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using FHttpRequestStreamDelegate = TTSDelegate<)",
    "insertText": "bool(void* , int64)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FHttpRequestStreamDelegateV2 = TTSDelegate<)",
    "insertText": "void(void* , int64&)"
  },
  {
    "label": "FArchiveWithDelegate()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FArchiveWithDelegate(FHttpRequestStreamDelegate InStreamDelegate) : StreamDelegate(InStreamDelegate)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError()"
  },
  {
    "label": "UnixSocketPath()",
    "kind": "Method",
    "detail": "Function (} } private : FHttpRequestStreamDelegate StreamDelegate ; } ; namespace HttpRequestOptions { # if UE_HTTP_SUPPORT_UNIX_SOCKET const FName)",
    "insertText": "UnixSocketPath(\"UnixSocketPath\")"
  },
  {
    "label": "GetVerb()",
    "kind": "Method",
    "detail": "Function (# endif } class IHttpRequest : public IHttpBase,public TSharedFromThis<IHttpRequest,ESPMode::ThreadSafe> { public : FString)",
    "insertText": "GetVerb()"
  },
  {
    "label": "SetVerb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVerb(const FString& Verb)"
  },
  {
    "label": "SetURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetURL(const FString& URL)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOption(const FName Option)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOption(const FName Option, const FString& OptionValue)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(const TArray<uint8>& ContentPayload)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(TArray<uint8>&& ContentPayload)"
  },
  {
    "label": "SetContentAsString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentAsString(const FString& ContentString)"
  },
  {
    "label": "SetContentAsStreamedFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetContentAsStreamedFile(const FString& Filename)"
  },
  {
    "label": "SetContentFromStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetContentFromStream(TSharedRef<FArchive, ESPMode::ThreadSafe> Stream)"
  },
  {
    "label": "SetResponseBodyReceiveStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResponseBodyReceiveStream(TSharedRef<FArchive> Stream)"
  },
  {
    "label": "SetResponseBodyReceiveStreamDelegateV2()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResponseBodyReceiveStreamDelegateV2(FHttpRequestStreamDelegateV2 StreamDelegate)"
  },
  {
    "label": "SetHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeader(const FString& HeaderName, const FString& HeaderValue)"
  },
  {
    "label": "AppendToHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendToHeader(const FString& HeaderName, const FString& AdditionalHeaderValue)"
  },
  {
    "label": "SetTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeout(float InTimeoutSecs)"
  },
  {
    "label": "SetActivityTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActivityTimeout(float InTimeoutSecs)"
  },
  {
    "label": "ClearTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTimeout()"
  },
  {
    "label": "ResetTimeoutStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimeoutStatus()"
  },
  {
    "label": "GetTimeout()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetTimeout()"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessRequest()"
  },
  {
    "label": "OnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (FHttpRequestCompleteDelegate&)",
    "insertText": "OnProcessRequestComplete()"
  },
  {
    "label": "OnRequestProgress64()",
    "kind": "Method",
    "detail": "Function (FHttpRequestProgressDelegate64&)",
    "insertText": "OnRequestProgress64()"
  },
  {
    "label": "OnRequestWillRetry()",
    "kind": "Method",
    "detail": "Function (FHttpRequestWillRetryDelegate&)",
    "insertText": "OnRequestWillRetry()"
  },
  {
    "label": "OnHeaderReceived()",
    "kind": "Method",
    "detail": "Function (FHttpRequestHeaderReceivedDelegate&)",
    "insertText": "OnHeaderReceived()"
  },
  {
    "label": "OnStatusCodeReceived()",
    "kind": "Method",
    "detail": "Function (FHttpRequestStatusCodeReceivedDelegate&)",
    "insertText": "OnStatusCodeReceived()"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest()"
  },
  {
    "label": "GetResponse()",
    "kind": "Method",
    "detail": "Function (const FHttpResponsePtr)",
    "insertText": "GetResponse()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "GetElapsedTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetElapsedTime()"
  },
  {
    "label": "SetDelegateThreadPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelegateThreadPolicy(EHttpRequestDelegateThreadPolicy InThreadPolicy)"
  },
  {
    "label": "GetDelegateThreadPolicy()",
    "kind": "Method",
    "detail": "Function (EHttpRequestDelegateThreadPolicy)",
    "insertText": "GetDelegateThreadPolicy()"
  },
  {
    "label": "ProcessRequestUntilComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRequestUntilComplete()"
  },
  {
    "label": "IHttpRequest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IHttpRequest()"
  }
]