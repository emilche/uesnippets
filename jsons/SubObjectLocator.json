[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FSubObjectLocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubObjectLocator"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" UObject / SoftObjectPath . h \" # include \" UniversalObjectLocatorFwd . h \" # include \" SubObjectLocator . generated . h \" class UObject ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (UE::UniversalObjectLocator::TFragmentTypeHandle<FSubObjectLocator> FragmentType ; uint32)",
    "insertText": "GetTypeHash(const FSubObjectLocator& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSubObjectLocator& A, const FSubObjectLocator& B)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (UE::UniversalObjectLocator::FInitializeResult)",
    "insertText": "Initialize(const UE::UniversalObjectLocator::FInitializeParams& InParams)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FStringBuilderBase& OutStringBuilder)"
  },
  {
    "label": "TryParseString()",
    "kind": "Method",
    "detail": "Function (UE::UniversalObjectLocator::FParseStringResult)",
    "insertText": "TryParseString(FStringView InString, const UE::UniversalObjectLocator::FParseStringParams& Params)"
  },
  {
    "label": "ComputePriority()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputePriority(const UObject* Object, const UObject* Context)"
  }
]