[
  {
    "label": "FNameDebugBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameDebugBuffer"
  },
  {
    "label": "UE_NET_ALLOCA_NAME_DEBUG_BUFFER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / CoreNetTypes . h \" # if UE_NET_REPACTOR_NAME_DEBUG # include \" UObject / NameTypes . h \" # include \" Net / Core / Misc / NetSubObjectRegistry . h \" # define)",
    "insertText": "UE_NET_ALLOCA_NAME_DEBUG_BUFFER() \\ reinterpret_cast<PTRINT>(FMemory_Alloca_Aligned(sizeof(FNameDebugBuffer), alignof(FNameDebugBuffer)))"
  },
  {
    "label": "HasMetAsyncDemoNameDebugChance()",
    "kind": "Method",
    "detail": "Function (int32 GCVarNetActorNameDebug ; int32 GCVarNetSubObjectNameDebug ; } ; namespace UE::Net::Private { struct FNameDebugBuffer { int32 MaxNameAppend = 1 2 8 ; union { volatile ANSICHAR Ansi [ NAME_SIZE + MaxNameAppend ] ; volatile WIDECHAR Wide [ NAME_SIZE + MaxNameAppend ] ; } ; int32 Length ; bool bIsWide ; } ; bool)",
    "insertText": "HasMetAsyncDemoNameDebugChance()"
  },
  {
    "label": "StoreFullName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreFullName(PTRINT BufferPtr, const UObject* InObj)"
  },
  {
    "label": "StoreSubObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreSubObjectName(PTRINT BufferPtr, FName ClassName, FName ObjName, const UObject* InObj)"
  },
  {
    "label": "StoreSubObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreSubObjectName(PTRINT BufferPtr, const FSubObjectRegistry::FEntry& SubObjectInfo)"
  },
  {
    "label": "StoreSubObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreSubObjectName(BufferPtr, SubObjectInfo.SubObjectClassName, SubObjectInfo.SubObjectName, SubObjectInfo.GetSubObject())"
  },
  {
    "label": "StoreSubObjectName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StoreSubObjectName(PTRINT BufferPtr, const FReplicatedComponentInfo& ComponentInfo)"
  },
  {
    "label": "StoreSubObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreSubObjectName(BufferPtr, ComponentInfo.ComponentClassName, ComponentInfo.ComponentName, (UObject*)ComponentInfo.Component)"
  }
]