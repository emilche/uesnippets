[
  {
    "label": "sockaddr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sockaddr"
  },
  {
    "label": "Logger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Logger"
  },
  {
    "label": "StringBufferBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBufferBase"
  },
  {
    "label": "NetworkBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkBackend"
  },
  {
    "label": "SendContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SendContext"
  },
  {
    "label": "HttpConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HttpConnection"
  },
  {
    "label": "TraverseNetworkAddresses()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaMemory . h \" # include \" UbaNetwork . h \" # if PLATFORM_WINDOWS typedef struct sockaddr SOCKADDR ; # else struct sockaddr ; # endif namespace uba { class Logger ; class StringBufferBase ; void)",
    "insertText": "TraverseNetworkAddresses(Logger& logger, const Function<bool(const StringBufferBase& addr)>& func)"
  },
  {
    "label": "TraverseRemoteAddresses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TraverseRemoteAddresses(Logger& logger, const tchar* addr, u16 port, const Function<bool(const sockaddr& remoteSockaddr)>& func)"
  },
  {
    "label": "NetworkBackend()",
    "kind": "Method",
    "detail": "Function (class NetworkBackend { public : ~)",
    "insertText": "NetworkBackend()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shutdown(void* connection)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (enum : u8 { SendFlags_Async = 1<<0,SendFlags_ExternalWait = 1<<1,} ; struct SendContext ; bool)",
    "insertText": "Send(Logger& logger, void* connection, const void* data, u32 dataSize, SendContext& sendContext)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using DataSentCallback =)",
    "insertText": "void(void* context, u32 bytes)"
  },
  {
    "label": "SetDataSentCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataSentCallback(void* connection, void* context, DataSentCallback* callback)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using RecvHeaderCallback =)",
    "insertText": "bool(void* context, const Guid& connectionUid, u8* headerData, void*& outBodyContext, u8*& outBodyData, u32& outBodySize)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using RecvBodyCallback =)",
    "insertText": "bool(void* context, bool recvError, u8* headerData, void* bodyContext, u8* bodyData, u32 bodySize)"
  },
  {
    "label": "SetRecvCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvCallbacks(void* connection, void* context, u32 headerSize, RecvHeaderCallback* h, RecvBodyCallback* b, const tchar* recvHint)"
  },
  {
    "label": "SetRecvTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvTimeout(void* connection, u32 timeoutMs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using DisconnectCallback =)",
    "insertText": "void(void* context, const Guid& connectionUid, void* connection)"
  },
  {
    "label": "SetDisconnectCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisconnectCallback(void* connection, void* context, DisconnectCallback* callback)"
  },
  {
    "label": "SetAllowLessThanBodySize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowLessThanBodySize(void* connection, bool allow)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using ListenConnectedFunc = Function<)",
    "insertText": "bool(void* connection, const sockaddr& remoteSocketAddr)"
  },
  {
    "label": "StartListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListen(Logger& logger, u16 port, const tchar* ip, const ListenConnectedFunc& connectedFunc)"
  },
  {
    "label": "StopListen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopListen()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using ConnectedFunc = Function<)",
    "insertText": "bool(void* connection, const sockaddr& remoteSocketAddr, bool* timedOut)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(Logger& logger, const tchar* ip, const ConnectedFunc& connectedFunc, u16 port = DefaultPort, bool* timedOut = nullptr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(Logger& logger, const sockaddr& remoteSocketAddr, const ConnectedFunc& connectedFunc, bool* timedOut = nullptr, const tchar* nameHint = nullptr)"
  },
  {
    "label": "GetTotalSendAndRecv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTotalSendAndRecv(u64& outSend, u64& outRecv)"
  },
  {
    "label": "SendContext()",
    "kind": "Method",
    "detail": "Function (} ; struct NetworkBackend::SendContext { u64 data [ 2 ] ; u32 size = 0 ; u8 flags ; bool isUsed = false ; bool isFinished = false ;)",
    "insertText": "SendContext(u8 sendFlags = 0) : flags(sendFlags)"
  },
  {
    "label": "SendContext()",
    "kind": "Method",
    "detail": "Function (* data = 0 ; } ~)",
    "insertText": "SendContext()"
  },
  {
    "label": "HttpConnection()",
    "kind": "Method",
    "detail": "Function (} } ; class HttpConnection { public :)",
    "insertText": "HttpConnection()"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Query(Logger& logger, const char* type, StringBufferBase& outResponse, u32& outStatusCode, const char* host, const char* path, const char* header = \"\")"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Connect(Logger& logger, const char* host)"
  }
]