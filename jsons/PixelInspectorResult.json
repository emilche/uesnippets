[
  {
    "label": "FFloat16Color",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloat16Color"
  },
  {
    "label": "PixelInspectorResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PixelInspectorResult"
  },
  {
    "label": "PixelInspectorResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Engine / EngineTypes . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" class FFloat16Color ; # define PIXEL_INSPECTOR_SHADINGMODELID_UNLIT 0 # define PIXEL_INSPECTOR_SHADINGMODELID_DEFAULT_LIT 1 # define PIXEL_INSPECTOR_SHADINGMODELID_SUBSURFACE 2 # define PIXEL_INSPECTOR_SHADINGMODELID_PREINTEGRATED_SKIN 3 # define PIXEL_INSPECTOR_SHADINGMODELID_CLEAR_COAT 4 # define PIXEL_INSPECTOR_SHADINGMODELID_SUBSURFACE_PROFILE 5 # define PIXEL_INSPECTOR_SHADINGMODELID_TWOSIDED_FOLIAGE 6 # define PIXEL_INSPECTOR_SHADINGMODELID_HAIR 7 # define PIXEL_INSPECTOR_SHADINGMODELID_CLOTH 8 # define PIXEL_INSPECTOR_SHADINGMODELID_EYE 9 # define PIXEL_INSPECTOR_SHADINGMODELID_SINGLELAYERWATER 1 0 # define PIXEL_INSPECTOR_SHADINGMODELID_THIN_TRANSLUCENT 1 1 # define PIXEL_INSPECTOR_SHADINGMODELID_SUBSTRATE 1 2 # define PIXEL_INSPECTOR_SHADINGMODELID_MASK 0 xF namespace PixelInspector { class PixelInspectorResult { public :)",
    "insertText": "PixelInspectorResult()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (ViewUniqueId = - 1 ; ViewportUV =)",
    "insertText": "FVector2D(-1, -1)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (PreExposure = 1 . f ; Depth = 0 . 0 f ; WorldPosition =)",
    "insertText": "FVector(0.0f)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (PerObjectGBufferData = 0 . 0 f ; Metallic = 0 . 0 f ; Specular = 0 . 0 f ; Roughness = 0 . 0 f ; ShadingModel = MSM_DefaultLit ; SelectiveOutputMask = 0 ; BaseColor = FLinearColor::Black ; IndirectIrradiance = 0 . 0 f ; AmbientOcclusion = 0 . 0 f ; SubSurfaceColor =)",
    "insertText": "FVector3f(0.0f)"
  },
  {
    "label": "DecodeFinalColor()",
    "kind": "Method",
    "detail": "Function (IrisMask = 0 . 0 f ; IrisDistance = 0 . 0 f ; } int32 ViewUniqueId ; FVector2D ViewportUV ; float PreExposure ; float OneOverPreExposure ; TArray<FLinearColor> FinalColor ; FLinearColor SceneColorBeforePostProcessing ; FLinearColor SceneColorBeforeTonemap ; float LuminanceBeforeTonemap ; float Depth ; FVector WorldPosition ; FVector Normal ; float PerObjectGBufferData ; float Metallic ; float Specular ; float Roughness ; EMaterialShadingModel ShadingModel ; int32 SelectiveOutputMask ; FLinearColor BaseColor ; float IndirectIrradiance ; float AmbientOcclusion ; FLinearColor SubSurfaceColor ; float Opacity ; FVector SubsurfaceProfile ; float ClearCoat ; float ClearCoatRoughness ; FVector WorldNormal ; float BackLit ; float Cloth ; FVector EyeTangent ; float IrisMask ; float IrisDistance ; void)",
    "insertText": "DecodeFinalColor(TArray<FLinearColor> &BufferFinalColorValue, float InGamma, bool bHasAlphaChannel)"
  },
  {
    "label": "DecodeSceneColorBeforePostProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeSceneColorBeforePostProcessing(TArray<FLinearColor> &BufferSceneColorValue)"
  },
  {
    "label": "DecodeDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeDepth(TArray<FLinearColor> &BufferDepthValue)"
  },
  {
    "label": "DecodeSceneColorBeforeToneMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeSceneColorBeforeToneMap(TArray<FLinearColor>& BufferSceneColorValue, bool bHasAlphaChannel)"
  },
  {
    "label": "DecodeBufferData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeBufferData(TArray<FColor> &BufferAValue, TArray<FColor> &BufferBCDEValue, bool AllowStaticLighting)"
  },
  {
    "label": "DecodeBufferData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeBufferData(TArray<FLinearColor> &BufferAValue, TArray<FColor> &BufferBCDEValue, bool AllowStaticLighting)"
  },
  {
    "label": "DecodeBufferData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeBufferData(TArray<FFloat16Color> &BufferAValue, TArray<FFloat16Color> &BufferBCDEValue, bool AllowStaticLighting)"
  },
  {
    "label": "DecodeBufferA()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DecodeBufferA(TArray<FColor> &BufferAValue)"
  },
  {
    "label": "DecodeBufferA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeBufferA(TArray<FLinearColor> &BufferAValue)"
  },
  {
    "label": "DecodeBufferA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeBufferA(TArray<FFloat16Color> &BufferAValue)"
  },
  {
    "label": "DecodeBufferBCDE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeBufferBCDE(TArray<FColor> &BufferBCDEValue, bool AllowStaticLighting)"
  },
  {
    "label": "DecodeBufferBCDE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeBufferBCDE(TArray<FFloat16Color> &BufferBCDEValue, bool AllowStaticLighting)"
  },
  {
    "label": "ConvertLinearRGBAToFloat()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "ConvertLinearRGBAToFloat(FColor LinearRGBColor)"
  },
  {
    "label": "ConvertLinearRGBToFloat()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertLinearRGBToFloat(FColor LinearRGBColor)"
  },
  {
    "label": "ConvertLinearRGBToFloat()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertLinearRGBToFloat(uint8 Red, uint8 Green, uint8 Blue)"
  },
  {
    "label": "DecodeSubSurfaceColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "DecodeSubSurfaceColor(FVector EncodeColor)"
  },
  {
    "label": "DecodeNormalFromBuffer()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "DecodeNormalFromBuffer(FVector NormalEncoded)"
  },
  {
    "label": "DecodeShadingModel()",
    "kind": "Method",
    "detail": "Function (EMaterialShadingModel)",
    "insertText": "DecodeShadingModel(float InPackedChannel)"
  },
  {
    "label": "DecodeSelectiveOutputMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DecodeSelectiveOutputMask(float InPackedChannel)"
  },
  {
    "label": "DecodeIndirectIrradiance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DecodeIndirectIrradiance(float IndirectIrradiance)"
  },
  {
    "label": "OctahedronToUnitVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "OctahedronToUnitVector(FVector2D Oct)"
  },
  {
    "label": "DecodeCustomData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeCustomData(FVector4 InCustomData)"
  }
]