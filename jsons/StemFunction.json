[
  {
    "label": "stem_function_exp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_STEM_FUNCTION # define EIGEN_STEM_FUNCTION namespace Eigen { namespace internal { template<Scalar> Scalar)",
    "insertText": "stem_function_exp(Scalar x, int)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (using std::exp ; return)",
    "insertText": "exp(x)"
  },
  {
    "label": "stem_function_cos()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> Scalar)",
    "insertText": "stem_function_cos(Scalar x, int n)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (using std::cos ; using std::sin ; Scalar res ;)",
    "insertText": "switch(n % 4)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : res = -)",
    "insertText": "sin(x)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : res = -)",
    "insertText": "cos(x)"
  },
  {
    "label": "stem_function_sin()",
    "kind": "Method",
    "detail": "Function (break ; } return res ; } template<Scalar> Scalar)",
    "insertText": "stem_function_sin(Scalar x, int n)"
  },
  {
    "label": "stem_function_cosh()",
    "kind": "Method",
    "detail": "Function (break ; } return res ; } template<Scalar> Scalar)",
    "insertText": "stem_function_cosh(Scalar x, int n)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (using std::cosh ; using std::sinh ; Scalar res ;)",
    "insertText": "switch(n % 2)"
  },
  {
    "label": "sinh()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : res =)",
    "insertText": "sinh(x)"
  },
  {
    "label": "stem_function_sinh()",
    "kind": "Method",
    "detail": "Function (break ; } return res ; } template<Scalar> Scalar)",
    "insertText": "stem_function_sinh(Scalar x, int n)"
  },
  {
    "label": "cosh()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : res =)",
    "insertText": "cosh(x)"
  }
]