[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_DELAYED_TASK_HANDLE_H_ # define BASE_TASK_DELAYED_TASK_HANDLE_H_ # include<memory> # include \" base / base_export . h \" namespace base { class BASE_EXPORT DelayedTaskHandle { public : class Delegate { public : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CancelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTask()"
  },
  {
    "label": "DelayedTaskHandle()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DelayedTaskHandle()"
  },
  {
    "label": "DelayedTaskHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTaskHandle(std::unique_ptr<Delegate> delegate)"
  },
  {
    "label": "DelayedTaskHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTaskHandle(DelayedTaskHandle&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayedTaskHandle&)",
    "insertText": "operator(DelayedTaskHandle&&)"
  }
]