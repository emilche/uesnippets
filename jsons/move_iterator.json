[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "__move_iter_category_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__move_iter_category_base"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_It2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_It2"
  },
  {
    "label": "move_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "move_iterator"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_MOVE_ITERATOR_H # define _LIBCPP___ITERATOR_MOVE_ITERATOR_H # include<__compare / compare_three_way_result . h> # include<__compare / three_way_comparable . h> # include<__concepts / assignable . h> # include<__concepts / convertible_to . h> # include<__concepts / derived_from . h> # include<__concepts / same_as . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iter_move . h> # include<__iterator / iter_swap . h> # include<__iterator / iterator_traits . h> # include<__iterator / move_sentinel . h> # include<__iterator / readable_traits . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (convertible_to<bool>)",
    "insertText": "_Iter() == declval<_Sent>()"
  },
  {
    "label": "move_iterator()",
    "kind": "Method",
    "detail": "Function (} ; # endif template<class _Iter> class _LIBCPP_TEMPLATE_VIS move_iterator # if _LIBCPP_STD_VER> 1 7 : public __move_iter_category_base<_Iter> # endif { public : # if _LIBCPP_STD_VER> 1 7 using iterator_type = _Iter ; using iterator_concept = input_iterator_tag ; using value_type = iter_value_t<_Iter> ; using difference_type = iter_difference_t<_Iter> ; using pointer = _Iter ; using reference = iter_rvalue_reference_t<_Iter> ; # else typedef _Iter iterator_type ; typedef _If<__is_cpp17_random_access_iterator<_Iter>::value,random_access_iterator_tag,iterator_traits<_Iter>::iterator_category> iterator_category ; typedef iterator_traits<iterator_type>::value_type value_type ; typedef iterator_traits<iterator_type>::difference_type difference_type ; typedef iterator_type pointer ; typedef iterator_traits<iterator_type>::reference __reference ; typedef conditional<is_reference<__reference>::value,remove_reference<__reference>::type&&,__reference>::type reference ; # endif _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "move_iterator(_Iter __i) : __current_(std::move(__i))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 move_iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} template<class _Up>)",
    "insertText": "requires(!_IsSame<_Up, _Iter>::value) && convertible_to<const _Up&, _Iter> _LIBCPP_HIDE_FROM_ABI constexpr move_iterator(const move_iterator<_Up>& __u) : __current_(__u.base())"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} template<class _Up>)",
    "insertText": "requires(!_IsSame<_Up, _Iter>::value) && convertible_to<const _Up&, _Iter> && assignable_from<_Iter&, const _Up&> _LIBCPP_HIDE_FROM_ABI constexpr move_iterator& operator=(const move_iterator<_Up>& __u)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (__current_ = __u .)",
    "insertText": "base()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI reference)",
    "insertText": "operator(difference_type __n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator(int)"
  },
  {
    "label": "__tmp()",
    "kind": "Method",
    "detail": "Function (move_iterator)",
    "insertText": "__tmp(*this)"
  },
  {
    "label": "move_iterator()",
    "kind": "Method",
    "detail": "Function (+ + __current_ ; } # else _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "move_iterator() : __current_()"
  },
  {
    "label": "move_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class = __enable_if_t<! is_same<_Up,_Iter>::value&& is_convertible<const _Up&,_Iter>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "move_iterator(const move_iterator<_Up>& __u) : __current_(__u.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class = __enable_if_t<! is_same<_Up,_Iter>::value&& is_convertible<const _Up&,_Iter>::value&& is_assignable<_Iter&,const _Up&>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 move_iterator&)",
    "insertText": "operator(const move_iterator<_Up>& __u)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__current_ - = __n ; return* this ; } # if _LIBCPP_STD_VER> 1 7 template<sentinel_for<_Iter> _Sent> _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const move_iterator& __x, const move_sentinel<_Sent>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<sized_sentinel_for<_Iter> _Sent> _LIBCPP_HIDE_FROM_ABI iter_difference_t<_Iter>)",
    "insertText": "operator(const move_sentinel<_Sent>& __x, const move_iterator& __y)"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI iter_rvalue_reference_t<_Iter>)",
    "insertText": "iter_move(const move_iterator& __i) noexcept(noexcept(ranges::iter_move(__i.__current_)))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} template<indirectly_swappable<_Iter> _It2> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "iter_swap(const move_iterator& __x, const move_iterator<_It2>& __y) noexcept(noexcept(ranges::iter_swap(__x.__current_, __y.__current_)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif private : template<class _It2> class move_iterator ; _Iter __current_ ; } ; template<class _Iter1,class _Iter2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 bool)",
    "insertText": "operator(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef _LIBCPP_CXX03_LANG template<class _Iter1,class _Iter2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 auto)",
    "insertText": "operator(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) -> decltype(__x.base() - __y.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif # if _LIBCPP_STD_VER> 1 7 template<class _Iter> _LIBCPP_HIDE_FROM_ABI move_iterator<_Iter>)",
    "insertText": "operator(iter_difference_t<_Iter> __n, const move_iterator<_Iter>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} { return __x + __n ; } # else template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 move_iterator<_Iter>)",
    "insertText": "operator(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x)"
  },
  {
    "label": "make_move_iterator()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14 move_iterator<_Iter>)",
    "insertText": "make_move_iterator(_Iter __i)"
  }
]