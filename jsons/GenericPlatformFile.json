[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EAsyncIOPriorityAndFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAsyncIOPriorityAndFlags"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileHandle"
  },
  {
    "label": "FFileStatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileStatData"
  },
  {
    "label": "FFileJournalFileHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileJournalFileHandle"
  },
  {
    "label": "FFileJournalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileJournalData"
  },
  {
    "label": "FFileSystemError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileSystemError"
  },
  {
    "label": "IPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformFile"
  },
  {
    "label": "FDirectoryVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirectoryVisitor"
  },
  {
    "label": "FDirectoryStatVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirectoryStatVisitor"
  },
  {
    "label": "IFileServerMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileServerMessageHandler"
  },
  {
    "label": "IWrappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWrappedFileHandle"
  },
  {
    "label": "IPhysicalPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicalPlatformFile"
  },
  {
    "label": "IPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFile"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformMemory . h \" # include \" Math / NumericLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" # include \" Templates / ValueOrError . h \" class FArchive ; class IAsyncReadFileHandle ; class IMappedFileHandle ; namespace ELogVerbosity { enum Type : uint8 ; } enum EAsyncIOPriorityAndFlags { AIOP_PRIORITY_MASK = 0 x000000ff,AIOP_FLAG_PRECACHE = 0 x00000100,AIOP_FLAG_DONTCACHE = 0 x00000200,AIOP_FLAG_HW_TARGET_MEMORY = 0 x00000400,AIOP_MIN = 0,AIOP_Low,AIOP_BelowNormal,AIOP_Normal,AIOP_High,AIOP_CriticalPath,AIOP_MAX = AIOP_CriticalPath,AIOP_NUM,AIOP_Precache = AIOP_MIN | AIOP_FLAG_PRECACHE,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAsyncIOPriorityAndFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EPlatformFileRead : uint8 { None = 0 x0,AllowWrite = 0 x01 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EPlatformFileRead)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EPlatformFileWrite : uint8 { None = 0 x0,AllowRead = 0 x01 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EPlatformFileWrite)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EDirectoryVisitorFlags : uint8 { None = 0 x0,ThreadSafe = 0 x01 } ; enum class ESymlinkResult : int8 { Unimplemented = - 1,NonSymlink = 0,Symlink = 1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EDirectoryVisitorFlags)"
  },
  {
    "label": "IFileHandle()",
    "kind": "Method",
    "detail": "Function (enum class EFileJournalResult { Success,InvalidPlatform,InvalidVolumeName,JournalNotActive,JournalWrapped,FailedOpenJournal,FailedDescribeJournal,FailedReadJournal,JournalInternalError,UnhandledJournalVersion,} ; class IFileHandle { public : ~)",
    "insertText": "IFileHandle()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Tell()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Seek(int64 NewPosition)"
  },
  {
    "label": "SeekFromEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SeekFromEnd(int64 NewPositionRelativeToEnd = 0)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(uint8* Destination, int64 BytesToRead)"
  },
  {
    "label": "ReadAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAt(uint8* Destination, int64 BytesToRead, int64 Offset)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(const uint8* Source, int64 BytesToWrite)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Flush(const bool bFullFlush = false)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Truncate(int64 NewSize)"
  },
  {
    "label": "ShrinkBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkBuffers()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} public : int64)",
    "insertText": "Size()"
  },
  {
    "label": "FFileStatData()",
    "kind": "Method",
    "detail": "Function (} ; struct FFileStatData {)",
    "insertText": "FFileStatData() : CreationTime(FDateTime::MinValue()) , AccessTime(FDateTime::MinValue()) , ModificationTime(FDateTime::MinValue()) , FileSize(-1) , bIsDirectory(false) , bIsReadOnly(false) , bIsValid(false)"
  },
  {
    "label": "FFileStatData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileStatData(FDateTime InCreationTime, FDateTime InAccessTime, FDateTime InModificationTime, const int64 InFileSize, const bool InIsDirectory, const bool InIsReadOnly) : CreationTime(InCreationTime) , AccessTime(InAccessTime) , ModificationTime(InModificationTime) , FileSize(InFileSize) , bIsDirectory(InIsDirectory) , bIsReadOnly(InIsReadOnly) , bIsValid(true)"
  },
  {
    "label": "FFileJournalId()",
    "kind": "Method",
    "detail": "Function (} FDateTime CreationTime ; FDateTime AccessTime ; FDateTime ModificationTime ; int64 FileSize ; bool bIsDirectory : 1 ; bool bIsReadOnly : 1 ; bool bIsValid : 1 ; } ; typedef uint64 FFileJournalId ; FFileJournalId FileJournalIdInvalid = static_cast<)",
    "insertText": "FFileJournalId(MAX_uint64)"
  },
  {
    "label": "FFileJournalEntryHandle()",
    "kind": "Method",
    "detail": "Function (typedef uint64 FFileJournalEntryHandle ; FFileJournalEntryHandle FileJournalEntryHandleInvalid = static_cast<)",
    "insertText": "FFileJournalEntryHandle(MAX_uint64)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FFileJournalFileHandle { bool)",
    "insertText": "operator(const FFileJournalFileHandle& Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint8 Bytes [ 2 0 ] ; } ; uint32)",
    "insertText": "GetTypeHash(const FFileJournalFileHandle&)"
  },
  {
    "label": "FFileJournalData()",
    "kind": "Method",
    "detail": "Function (const FFileJournalFileHandle FileJournalFileHandleInvalid ; struct FFileJournalData {)",
    "insertText": "FFileJournalData()"
  },
  {
    "label": "FFileSystemError()",
    "kind": "Method",
    "detail": "Function (FDateTime ModificationTime ; FFileJournalFileHandle JournalHandle = FileJournalFileHandleInvalid ; bool bIsValid : 1 ; bool bIsDirectory : 1 ; } ; class FFileSystemError { public :)",
    "insertText": "FFileSystemError()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_NONCOPYABLE(FFileSystemError)"
  },
  {
    "label": "FFileSystemError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileSystemError(FString&& InErrorMessage, int32 InSystemErrorCode = 0) : ErrorMessage(MoveTemp(InErrorMessage)) , SystemErrorCode(InSystemErrorCode)"
  },
  {
    "label": "FFileSystemError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileSystemError(FStringView InErrorMessage, int32 InSystemErrorCode = 0) : ErrorMessage(InErrorMessage) , SystemErrorCode(InSystemErrorCode)"
  },
  {
    "label": "GetMessage()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetMessage()"
  },
  {
    "label": "GetSystemErrorMessage()",
    "kind": "Method",
    "detail": "Function (TCHAR FormattedErrorMsg [ MAX_SPRINTF ] = { 0 } ;)",
    "insertText": "GetSystemErrorMessage(FormattedErrorMsg, UE_ARRAY_COUNT(FormattedErrorMsg), SystemErrorCode)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} else { return ErrorMessage ; } } template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FFileSystemError& Error)"
  },
  {
    "label": "GetSystemErrorMessage()",
    "kind": "Method",
    "detail": "Function (TCHAR FormattedErrorMsg [ MAX_SPRINTF ] = { 0 } ;)",
    "insertText": "GetSystemErrorMessage(FormattedErrorMsg, UE_ARRAY_COUNT(FormattedErrorMsg), Error.SystemErrorCode)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Builder<<Error . ErrorMessage<<)",
    "insertText": "TEXT(\" [\") << FormattedErrorMsg << TEXT(\" (\") << Error.SystemErrorCode << TEXT(\")]\")"
  },
  {
    "label": "GetPhysicalTypeName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetPhysicalTypeName()"
  },
  {
    "label": "IPlatformFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IPlatformFile()"
  },
  {
    "label": "SetSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSandboxEnabled(bool bInEnabled)"
  },
  {
    "label": "IsSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSandboxEnabled()"
  },
  {
    "label": "InitializeAfterSetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAfterSetActive()"
  },
  {
    "label": "InitializeAfterProjectFilePath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeAfterProjectFilePath()"
  },
  {
    "label": "MakeUniquePakFilesForTheseFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeUniquePakFilesForTheseFiles(const TArray<TArray<FString>>& InFiles)"
  },
  {
    "label": "InitializeNewAsyncIO()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeNewAsyncIO()"
  },
  {
    "label": "AddLocalDirectories()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddLocalDirectories(TArray<FString> &LocalDirectories)"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLowerLevel()->AddLocalDirectories(LocalDirectories)"
  },
  {
    "label": "BypassSecurity()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BypassSecurity(bool bInBypass)"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLowerLevel()->BypassSecurity(bInBypass)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Tick()"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (} IPlatformFile*)",
    "insertText": "GetLowerLevel()"
  },
  {
    "label": "SetLowerLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowerLevel(IPlatformFile* NewLowerLevel)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFile(const TCHAR* Filename)"
  },
  {
    "label": "DeleteFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFiles(const TArrayView<const TCHAR*>& Filenames)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bOneFailed = false ;)",
    "insertText": "for(const TCHAR* File : Filenames)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (bOneFailed | = !)",
    "insertText": "DeleteFile(File)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (} return ! bOneFailed ; } bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFile(const TCHAR* To, const TCHAR* From)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime DateTime)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  },
  {
    "label": "IsSymlink()",
    "kind": "Method",
    "detail": "Function (ESymlinkResult)",
    "insertText": "IsSymlink(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename, bool bAllowWrite = false)"
  },
  {
    "label": "OpenReadNoBuffering()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenReadNoBuffering(const TCHAR* Filename, bool bAllowWrite = false)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (} IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend = false, bool bAllowRead = false)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "FDirectoryVisitor()",
    "kind": "Method",
    "detail": "Function (class FDirectoryVisitor { public :)",
    "insertText": "FDirectoryVisitor(EDirectoryVisitorFlags InDirectoryVisitorFlags = EDirectoryVisitorFlags::None) : DirectoryVisitorFlags(InDirectoryVisitorFlags)"
  },
  {
    "label": "FDirectoryVisitor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDirectoryVisitor()"
  },
  {
    "label": "ShouldVisitLeafPathname()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldVisitLeafPathname(FStringView LeafPathname)"
  },
  {
    "label": "CallShouldVisitAndVisit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallShouldVisitAndVisit(const TCHAR* FilenameOrDirectory, bool bIsDirectory)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EDirectoryVisitorFlags DirectoryVisitorFlags ; } ; typedef TFunctionRef<)",
    "insertText": "bool(const TCHAR*, bool)"
  },
  {
    "label": "FDirectoryStatVisitor()",
    "kind": "Method",
    "detail": "Function (class FDirectoryStatVisitor { public : ~)",
    "insertText": "FDirectoryStatVisitor()"
  },
  {
    "label": "CallShouldVisitAndVisit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallShouldVisitAndVisit(const TCHAR* FilenameOrDirectory, const FFileStatData& StatData)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; typedef TFunctionRef<)",
    "insertText": "bool(const TCHAR*, const FFileStatData&)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "FileJournalIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileJournalIsAvailable(const TCHAR* VolumeOrPath = nullptr, ELogVerbosity::Type* OutErrorLevel = nullptr, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalGetLatestEntry()",
    "kind": "Method",
    "detail": "Function (EFileJournalResult)",
    "insertText": "FileJournalGetLatestEntry(const TCHAR* VolumeName, FFileJournalId& OutJournalId, FFileJournalEntryHandle& OutEntryHandle, FString* OutError = nullptr)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(const TCHAR*, const FFileJournalData&)"
  },
  {
    "label": "FileJournalIterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileJournalIterateDirectory(const TCHAR* Directory, FDirectoryJournalVisitorFunc Visitor)"
  },
  {
    "label": "FileJournalGetFileData()",
    "kind": "Method",
    "detail": "Function (FFileJournalData)",
    "insertText": "FileJournalGetFileData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "FileJournalReadModified()",
    "kind": "Method",
    "detail": "Function (EFileJournalResult)",
    "insertText": "FileJournalReadModified(const TCHAR* VolumeName, const FFileJournalId& JournalIdOfStartingEntry, const FFileJournalEntryHandle& StartingJournalEntry, TMap<FFileJournalFileHandle, FString>& KnownDirectories, TSet<FString>& OutModifiedDirectories, FFileJournalEntryHandle& OutNextJournalEntry, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalGetVolumeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FileJournalGetVolumeName(FStringView InPath)"
  },
  {
    "label": "OpenAsyncRead()",
    "kind": "Method",
    "detail": "Function (IAsyncReadFileHandle*)",
    "insertText": "OpenAsyncRead(const TCHAR* Filename)"
  },
  {
    "label": "SetAsyncMinimumPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncMinimumPriority(EAsyncIOPriorityAndFlags MinPriority)"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (} IMappedFileHandle*)",
    "insertText": "OpenMapped(const TCHAR* Filename)"
  },
  {
    "label": "GetTimeStampLocal()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStampLocal(const TCHAR* Filename)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension)"
  },
  {
    "label": "FindFilesRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFilesRecursively(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension)"
  },
  {
    "label": "DeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectoryRecursively(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectoryTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryTree(const TCHAR* Directory)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFile(const TCHAR* To, const TCHAR* From, EPlatformFileRead ReadFlags = EPlatformFileRead::None, EPlatformFileWrite WriteFlags = EPlatformFileWrite::None)"
  },
  {
    "label": "CopyDirectoryTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyDirectoryTree(const TCHAR* DestinationDirectory, const TCHAR* Source, bool bOverwriteAllExisting)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "IFileServerMessageHandler()",
    "kind": "Method",
    "detail": "Function (class IFileServerMessageHandler { public : ~)",
    "insertText": "IFileServerMessageHandler()"
  },
  {
    "label": "FillPayload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillPayload(FArchive& Payload)"
  },
  {
    "label": "ProcessResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessResponse(FArchive& Response)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "SendMessageToServer(const TCHAR* Message, IFileServerMessageHandler* Handler)"
  },
  {
    "label": "GetAllowedBytesToWriteThrottledStorage()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetAllowedBytesToWriteThrottledStorage(const TCHAR* DestinationPath = nullptr)"
  },
  {
    "label": "ShouldBeUsed()",
    "kind": "Method",
    "detail": "Function (} ; class IPhysicalPlatformFile : public IPlatformFile { public : bool)",
    "insertText": "ShouldBeUsed(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "PakGetPakFilename()",
    "kind": "Method",
    "detail": "Function (} } ; class IPakFile { public : const FString&)",
    "insertText": "PakGetPakFilename()"
  },
  {
    "label": "PakContains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PakContains(const FString& Filename)"
  },
  {
    "label": "PakGetPakchunkIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PakGetPakchunkIndex()"
  },
  {
    "label": "PakVisitPrunedFilenames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PakVisitPrunedFilenames(IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "PakGetMountPoint()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "PakGetMountPoint()"
  },
  {
    "label": "GetNumFiles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFiles()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetTypeHash(const FFileJournalFileHandle& A)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint32 Mult = 1 0 3 ; uint32 Hash = 0 ; const uint8* EndA = reinterpret_cast<const)",
    "insertText": "uint8(&A) + sizeof(FFileJournalFileHandle)"
  },
  {
    "label": "FFileJournalData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileJournalData() : bIsValid(false) , bIsDirectory(false)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ENUM_CLASS_FLAGS(IPlatformFile::EOpenReadFlags)"
  }
]