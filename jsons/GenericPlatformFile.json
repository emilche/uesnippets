[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EAsyncIOPriorityAndFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAsyncIOPriorityAndFlags"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileHandle"
  },
  {
    "label": "FFileStatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileStatData"
  },
  {
    "label": "FFileJournalFileHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileJournalFileHandle"
  },
  {
    "label": "FFileJournalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileJournalData"
  },
  {
    "label": "FFileSystemError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileSystemError"
  },
  {
    "label": "IPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformFile"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FDirectoryVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirectoryVisitor"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FDirectoryStatVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirectoryStatVisitor"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "IFileServerMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileServerMessageHandler"
  },
  {
    "label": "IWrappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWrappedFileHandle"
  },
  {
    "label": "IPhysicalPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicalPlatformFile"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "IPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFile"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Size()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FFileJournalFileHandle&)"
  },
  {
    "label": "IPlatformFile()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "IPlatformFile()"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (FFileOpenResult)",
    "insertText": "OpenRead(const TCHAR* Filename, EOpenReadFlags Flags)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OpenRead(Filename, bAllowWrite)"
  },
  {
    "label": "CallShouldVisitAndVisit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallShouldVisitAndVisit(const TCHAR* FilenameOrDirectory, bool bIsDirectory)"
  },
  {
    "label": "CallShouldVisitAndVisit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallShouldVisitAndVisit(const TCHAR* FilenameOrDirectory, const FFileStatData& StatData)"
  },
  {
    "label": "FileJournalIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileJournalIsAvailable(const TCHAR* VolumeOrPath = nullptr,\n\t\tELogVerbosity::Type* OutErrorLevel = nullptr, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalGetLatestEntry()",
    "kind": "Method",
    "detail": "Function (EFileJournalResult)",
    "insertText": "FileJournalGetLatestEntry(const TCHAR* VolumeName,\n\t\tFFileJournalId& OutJournalId, FFileJournalEntryHandle& OutEntryHandle, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalIterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileJournalIterateDirectory(const TCHAR* Directory, FDirectoryJournalVisitorFunc Visitor)"
  },
  {
    "label": "FileJournalGetFileData()",
    "kind": "Method",
    "detail": "Function (FFileJournalData)",
    "insertText": "FileJournalGetFileData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "FileJournalReadModified()",
    "kind": "Method",
    "detail": "Function (EFileJournalResult)",
    "insertText": "FileJournalReadModified(const TCHAR* VolumeName,\n\t\tconst FFileJournalId& JournalIdOfStartingEntry, const FFileJournalEntryHandle& StartingJournalEntry,\n\t\tTMap<FFileJournalFileHandle, FString>& KnownDirectories, TSet<FString>& OutModifiedDirectories,\n\t\tFFileJournalEntryHandle& OutNextJournalEntry, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalGetVolumeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FileJournalGetVolumeName(FStringView InPath)"
  },
  {
    "label": "GetTimeStampPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeStampPair(const TCHAR* PathA, const TCHAR* PathB, FDateTime& OutTimeStampA, FDateTime& OutTimeStampB)"
  },
  {
    "label": "GetTimeStampLocal()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStampLocal(const TCHAR* Filename)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension)"
  },
  {
    "label": "FindFilesRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFilesRecursively(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension)"
  },
  {
    "label": "DeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectoryRecursively(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectoryTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryTree(const TCHAR* Directory)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFile(const TCHAR* To, const TCHAR* From, EPlatformFileRead ReadFlags = EPlatformFileRead::None, EPlatformFileWrite WriteFlags = EPlatformFileWrite::None)"
  },
  {
    "label": "CopyDirectoryTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyDirectoryTree(const TCHAR* DestinationDirectory, const TCHAR* Source, bool bOverwriteAllExisting)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead( const TCHAR* Filename )"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite( const TCHAR* Filename )"
  }
]