[
  {
    "label": "FFakeDownloadService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeDownloadService"
  },
  {
    "label": "FFakeDownloadService()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Tests / Mock / Download . mock . h \" # include \" Tests / Mock / DownloadService . mock . h \" # include \" Interfaces / IHttpResponse . h \" # include \" Async / Async . h \" # include \" Async / Future . h \" # include \" Serialization / MemoryWriter . h \" # if WITH_DEV_AUTOMATION_TESTS # include \" Data / ChunkData . h \" namespace BuildPatchServices { class FFakeDownloadService : public FMockDownloadService { public : typedef TTuple<double,bool,EHttpResponseCodes::Type,FChunkHeader> FTxRequestFile ; public :)",
    "insertText": "FFakeDownloadService() : bRunDownloadThread(false)"
  },
  {
    "label": "FFakeDownloadService()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFakeDownloadService()"
  },
  {
    "label": "StopService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopService()"
  },
  {
    "label": "StartService()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "StartService()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (ThreadLock .)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (bRunDownloadThread = true ; ThreadLock .)",
    "insertText": "Unlock()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()> Task = [this]()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bKeepRunning = true ; TArray<FRequestFile> RxToBeProcessed ; int32 IndicesTaken = 0 ;)",
    "insertText": "while(bKeepRunning)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (RxToBeProcessed .)",
    "insertText": "Push(RxRequestFile[Idx])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Responses .)",
    "insertText": "Add(RxToBeProcessed.Last().Get<1>(), TxRequestFile[0])"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (TxRequestFile .)",
    "insertText": "RemoveAt(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { Responses .)",
    "insertText": "Add(RxToBeProcessed.Last().Get<1>(), FTxRequestFile(0.0f, true, EHttpResponseCodes::Ok, DefaultChunkHeader))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TArray<FRequestFile> RxToConsider =)",
    "insertText": "MoveTemp(RxToBeProcessed)"
  },
  {
    "label": "GetSeconds()",
    "kind": "Method",
    "detail": "Function (const double TimeNow =)",
    "insertText": "GetSeconds()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FRequestFile& RequestFile = RxToConsider [ Idx ] ; FTxRequestFile& ResponseFile = Responses [ RequestFile .)",
    "insertText": "Get()"
  },
  {
    "label": "FMockDownload()",
    "kind": "Method",
    "detail": "Function (FMockDownload* MockDownload = new)",
    "insertText": "FMockDownload()"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (FMemoryWriter)",
    "insertText": "Ar(MockDownload->Data)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Close()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (MockDownload -> Data .)",
    "insertText": "AddUninitialized(ResponseFile.Get<3>().DataSizeCompressed)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (RequestFile .)",
    "insertText": "Get().ExecuteIfBound(RequestFile.Get<1>(), MockDownload->Data.Num() / 3)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (RequestFile .)",
    "insertText": "Get().ExecuteIfBound(RequestFile.Get<1>(), MockDownload->Data.Num() / 2)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (RequestFile .)",
    "insertText": "Get().ExecuteIfBound(RequestFile.Get<1>(), MockDownload->Data.Num())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} else { MockDownload -> ResponseCode = EHttpResponseCodes::Unknown ; } RequestFile .)",
    "insertText": "Get().ExecuteIfBound(RequestFile.Get<1>(), MakeShareable(MockDownload))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} else { RxToBeProcessed .)",
    "insertText": "Push(MoveTemp(RequestFile))"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Sleep(0.0f)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (} } ; Future =)",
    "insertText": "Async(EAsyncExecution::Thread, MoveTemp(Task))"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (Future .)",
    "insertText": "Wait()"
  }
]