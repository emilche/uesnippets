[
  {
    "label": "EigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EigenSolver"
  },
  {
    "label": "EigenSolver()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_EIGENSOLVER_H # define EIGEN_EIGENSOLVER_H # include \" . / RealSchur . h \" namespace Eigen { template<_MatrixType> class EigenSolver { public : typedef _MatrixType MatrixType ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,Options = MatrixType::Options,MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Eigen::Index Index ; typedef std::complex<RealScalar> ComplexScalar ; typedef Matrix<ComplexScalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> EigenvalueType ; typedef Matrix<ComplexScalar,RowsAtCompileTime,ColsAtCompileTime,Options,MaxRowsAtCompileTime,MaxColsAtCompileTime> EigenvectorsType ;)",
    "insertText": "EigenSolver() : m_eivec(), m_eivalues(), m_isInitialized(false), m_eigenvectorsOk(false), m_realSchur(), m_matT(), m_tmp()"
  },
  {
    "label": "EigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EigenSolver(Index size) : m_eivec(size, size), m_eivalues(size), m_isInitialized(false), m_eigenvectorsOk(false), m_realSchur(size), m_matT(size, size), m_tmp(size)"
  },
  {
    "label": "EigenSolver()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "EigenSolver(const EigenBase<InputType>& matrix, bool computeEigenvectors = true) : m_eivec(matrix.rows(), matrix.cols()), m_eivalues(matrix.cols()), m_isInitialized(false), m_eigenvectorsOk(false), m_realSchur(matrix.cols()), m_matT(matrix.rows(), matrix.cols()), m_tmp(matrix.cols())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived(), computeEigenvectors)"
  },
  {
    "label": "eigenvectors()",
    "kind": "Method",
    "detail": "Function (} EigenvectorsType)",
    "insertText": "eigenvectors()"
  },
  {
    "label": "pseudoEigenvectors()",
    "kind": "Method",
    "detail": "Function (const MatrixType&)",
    "insertText": "pseudoEigenvectors()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"EigenSolver is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\")"
  },
  {
    "label": "eigenvalues()",
    "kind": "Method",
    "detail": "Function (const EigenvalueType&)",
    "insertText": "eigenvalues()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "setMaxIterations()",
    "kind": "Method",
    "detail": "Function (m_realSchur .)",
    "insertText": "setMaxIterations(maxIters)"
  },
  {
    "label": "doComputeEigenvectors()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "doComputeEigenvectors()"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsComplex, NUMERIC_TYPE_MUST_BE_REAL)"
  },
  {
    "label": "pseudoEigenvalueMatrix()",
    "kind": "Method",
    "detail": "Function (} MatrixType m_eivec ; EigenvalueType m_eivalues ; bool m_isInitialized ; bool m_eigenvectorsOk ; ComputationInfo m_info ; RealSchur<MatrixType> m_realSchur ; MatrixType m_matT ; typedef Matrix<Scalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> ColumnVectorType ; ColumnVectorType m_tmp ; } ; template<MatrixType> MatrixType EigenSolver<MatrixType)",
    "insertText": "pseudoEigenvalueMatrix()"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar precision =)",
    "insertText": "RealScalar(2)*NumTraits<RealScalar>::epsilon()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index n = m_eivalues .)",
    "insertText": "rows()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (MatrixType matD =)",
    "insertText": "Zero(n,n)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index n = m_eivec .)",
    "insertText": "cols()"
  },
  {
    "label": "matV()",
    "kind": "Method",
    "detail": "Function (EigenvectorsType)",
    "insertText": "matV(n,n)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (matV .)",
    "insertText": "col(j) = m_eivec.col(j).template cast<ComplexScalar>()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (matV .)",
    "insertText": "col(j).normalize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(Index i=0; i<n; ++i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (matV .)",
    "insertText": "coeffRef(i,j) = ComplexScalar(m_eivec.coeff(i,j), m_eivec.coeff(i,j+1))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (matV .)",
    "insertText": "coeffRef(i,j+1) = ComplexScalar(m_eivec.coeff(i,j), -m_eivec.coeff(i,j+1))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (matV .)",
    "insertText": "col(j+1).normalize()"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (+ + j ; } } return matV ; } template<MatrixType> template<InputType> EigenSolver<MatrixType>& EigenSolver<MatrixType)",
    "insertText": "compute(const EigenBase<InputType>& matrix, bool computeEigenvectors)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; using numext::isfinite ;)",
    "insertText": "eigen_assert(matrix.cols() == matrix.rows())"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (m_matT = m_realSchur .)",
    "insertText": "matrixT()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_eivalues .)",
    "insertText": "resize(matrix.cols())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "while(i < matrix.cols())"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_eivalues .)",
    "insertText": "coeffRef(i) = m_matT.coeff(i, i)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; m_eigenvectorsOk = false ; m_info = NumericalIssue ; return* this ; } + + i ; } else { Scalar p =)",
    "insertText": "Scalar(0.5) * (m_matT.coeff(i, i) - m_matT.coeff(i+1, i+1))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar z ; { Scalar t0 = m_matT .)",
    "insertText": "coeff(i+1, i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar t1 = m_matT .)",
    "insertText": "coeff(i, i+1)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar maxval = numext::maxi<)",
    "insertText": "Scalar(abs(p),numext::maxi<Scalar>(abs(t0),abs(t1)))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (t0 / = maxval ; t1 / = maxval ; Scalar p0 = p / maxval ; z = maxval*)",
    "insertText": "sqrt(abs(p0 * p0 + t0 * t1))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} m_eivalues .)",
    "insertText": "coeffRef(i) = ComplexScalar(m_matT.coeff(i+1, i+1) + p, z)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_eivalues .)",
    "insertText": "coeffRef(i+1) = ComplexScalar(m_matT.coeff(i+1, i+1) + p, -z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; m_eigenvectorsOk = false ; m_info = NumericalIssue ; return* this ; } i + = 2 ; } })",
    "insertText": "if(computeEigenvectors) doComputeEigenvectors()"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (const Scalar eps = NumTraits<Scalar)",
    "insertText": "epsilon()"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "norm(0)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (norm + = m_matT .)",
    "insertText": "row(j).segment((std::max)(j-1,Index(0)), size-(std::max)(j-1,Index(0))).cwiseAbs().sum()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(norm == Scalar(0))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar p = m_eivalues .)",
    "insertText": "coeff(n).real()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar q = m_eivalues .)",
    "insertText": "coeff(n).imag()"
  },
  {
    "label": "lastr()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lastr(0), lastw(0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (Index l = n ; m_matT .)",
    "insertText": "coeffRef(n,n) = Scalar(1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar w = m_matT .)",
    "insertText": "coeff(i,i)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Scalar r = m_matT .)",
    "insertText": "row(i).segment(l,n-l+1).dot(m_matT.col(n).segment(l, n-l+1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastw = w ; lastr = r ; } else { l = i ;)",
    "insertText": "if(m_eivalues.coeff(i).imag() == Scalar(0))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { Scalar x = m_matT .)",
    "insertText": "coeff(i,i+1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar y = m_matT .)",
    "insertText": "coeff(i+1,i)"
  },
  {
    "label": "denom()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "denom(m_eivalues.coeff(i).real() - p) * (m_eivalues.coeff(i).real() - p) + m_eivalues.coeff(i).imag() * m_eivalues.coeff(i).imag()"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "t(x * lastr - lastw * r)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i,n)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (} Scalar t =)",
    "insertText": "abs(m_matT.coeff(i,n))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(q < Scalar(0) && n > 0)"
  },
  {
    "label": "lastra()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lastra(0), lastsa(0), lastw(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index l = n - 1 ;)",
    "insertText": "if(abs(m_matT.coeff(n,n-1)) > abs(m_matT.coeff(n-1,n)))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(n-1,n-1) = q / m_matT.coeff(n,n-1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(n-1,n) = -(m_matT.coeff(n,n) - p) / m_matT.coeff(n,n-1)"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (} else { ComplexScalar cc =)",
    "insertText": "ComplexScalar(Scalar(0),-m_matT.coeff(n-1,n)) / ComplexScalar(m_matT.coeff(n-1,n-1)-p,q)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(n-1,n-1) = numext::real(cc)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(n-1,n) = numext::imag(cc)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} m_matT .)",
    "insertText": "coeffRef(n,n-1) = Scalar(0)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Scalar ra = m_matT .)",
    "insertText": "row(i).segment(l, n-l+1).dot(m_matT.col(n-1).segment(l, n-l+1))"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Scalar sa = m_matT .)",
    "insertText": "row(i).segment(l, n-l+1).dot(m_matT.col(n).segment(l, n-l+1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastw = w ; lastra = ra ; lastsa = sa ; } else { l = i ;)",
    "insertText": "if(m_eivalues.coeff(i).imag() == RealScalar(0))"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (ComplexScalar cc =)",
    "insertText": "ComplexScalar(-ra,-sa) / ComplexScalar(w,q)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i,n-1) = numext::real(cc)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i,n) = numext::imag(cc)"
  },
  {
    "label": "vr()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "vr(m_eivalues.coeff(i).real() - p) * (m_eivalues.coeff(i).real() - p) + m_eivalues.coeff(i).imag() * m_eivalues.coeff(i).imag()"
  },
  {
    "label": "vi()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "vi(m_eivalues.coeff(i).real() - p) * Scalar(2)"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (ComplexScalar cc =)",
    "insertText": "ComplexScalar(x*lastra-lastw*ra+q*sa,x*lastsa-lastw*sa-q*ra) / ComplexScalar(vr,vi)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i+1,n-1) = (-ra - w * m_matT.coeff(i,n-1) + q * m_matT.coeff(i,n))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i+1,n) = (-sa - w * m_matT.coeff(i,n) - q * m_matT.coeff(i,n-1))"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (} else { cc =)",
    "insertText": "ComplexScalar(-lastra-y*m_matT.coeff(i,n-1),-lastsa-y*m_matT.coeff(i,n)) / ComplexScalar(lastw,q)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i+1,n-1) = numext::real(cc)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i+1,n) = numext::imag(cc)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (} } Scalar t = numext::maxi<)",
    "insertText": "Scalar(abs(m_matT.coeff(i,n-1)),abs(m_matT.coeff(i,n)))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} } n - - ; } else {)",
    "insertText": "eigen_assert(0 && \"Internal bug in EigenSolver (INF or NaN has not been detected)\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(Index j = size-1; j >= 0; j--)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (m_tmp .)",
    "insertText": "noalias() = m_eivec.leftCols(j+1) * m_matT.col(j).segment(0, j+1)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "col(j)"
  }
]