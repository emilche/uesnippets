[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "UEnvQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQuery"
  },
  {
    "label": "UEnvQueryGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryGenerator"
  },
  {
    "label": "UEnvQueryItemType_ActorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryItemType_ActorBase"
  },
  {
    "label": "UEnvQueryItemType_VectorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryItemType_VectorBase"
  },
  {
    "label": "UEnvQueryTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryTest"
  },
  {
    "label": "UNavigationQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationQueryFilter"
  },
  {
    "label": "FEnvQueryInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryInstance"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEnvNamedValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvNamedValue"
  },
  {
    "label": "FEnvDirection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvDirection"
  },
  {
    "label": "FEnvTraceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvTraceData"
  },
  {
    "label": "EDescriptionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDescriptionMode"
  },
  {
    "label": "ETraceTypeQuery",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETraceTypeQuery"
  },
  {
    "label": "ECollisionChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionChannel"
  },
  {
    "label": "FEnvOverlapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvOverlapData"
  },
  {
    "label": "FEnvQueryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryItem"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "FEnvQueryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryResult"
  },
  {
    "label": "FEnvQuerySpatialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQuerySpatialData"
  },
  {
    "label": "FEnvQueryItemDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryItemDetails"
  },
  {
    "label": "FEnvQueryContextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryContextData"
  },
  {
    "label": "FEnvQueryOptionInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryOptionInstance"
  },
  {
    "label": "FEnvQueryDebugProfileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryDebugProfileData"
  },
  {
    "label": "FStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStep"
  },
  {
    "label": "FOptionStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionStat"
  },
  {
    "label": "FOptionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionData"
  },
  {
    "label": "FEnvQueryDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryDebugData"
  },
  {
    "label": "FEQSQueryDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEQSQueryDebugData"
  },
  {
    "label": "UEnvQueryTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryTypes"
  },
  {
    "label": "FConstItemIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstItemIterator"
  },
  {
    "label": "FItemIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FItemIterator"
  },
  {
    "label": "FAIDynamicParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIDynamicParam"
  },
  {
    "label": "FEQSParametrizedQueryExecutionRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEQSParametrizedQueryExecutionRequest"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" EnvironmentQuery / Items / EnvQueryItemType . h \" # include \" EnvironmentQuery / EnvQueryContext . h \" # include \" BehaviorTree / BehaviorTreeTypes . h \" # include \" EnvQueryTypes . generated . h \" class AActor ; class ANavigationData ; class Error ; class UBlackboardComponent ; class UBlackboardData ; class UEnvQuery ; class UEnvQueryGenerator ; class UEnvQueryItemType_ActorBase ; class UEnvQueryItemType_VectorBase ; class UEnvQueryTest ; class UNavigationQueryFilter ; struct FEnvQueryInstance ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEQS, Display, All)"
  },
  {
    "label": "USE_EQS_DEBUGGER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "USE_EQS_DEBUGGER(1 && !(UE_BUILD_SHIPPING || UE_BUILD_TEST)) #define USE_EQS_TICKLOADDATA (1 && USE_EQS_DEBUGGER && WITH_EDITOR) DECLARE_STATS_GROUP(TEXT(\"Environment Query\"), STATGROUP_AI_EQS, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Tick\"),STAT_AI_EQS_Tick,STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Tick - EQS work\"), STAT_AI_EQS_TickWork, STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Tick - OnFinished delegates\"), STAT_AI_EQS_TickNotifies, STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Tick - Removal of completed queries\"), STAT_AI_EQS_TickQueryRemovals, STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Load Time\"),STAT_AI_EQS_LoadTime,STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Execute One Step Time\"),STAT_AI_EQS_ExecuteOneStep,STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Generator Time\"),STAT_AI_EQS_GeneratorTime,STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Test Time\"),STAT_AI_EQS_TestTime,STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"EQS Debug StoreQuery\"), STAT_AI_EQS_Debug_StoreQuery, STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"EQS Debug StoreTickTime\"), STAT_AI_EQS_Debug_StoreTickTime, STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"EQS Debug StoreStats\"), STAT_AI_EQS_Debug_StoreStats, STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Instances\"),STAT_AI_EQS_NumInstances,STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Items\"),STAT_AI_EQS_NumItems,STATGROUP_AI_EQS,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Instance memory\"),STAT_AI_EQS_InstanceMemory,STATGROUP_AI_EQS, AIMODULE_API)"
  },
  {
    "label": "DECLARE_FLOAT_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_COUNTER_STAT_EXTERN(TEXT(\"Avg Instance Response Time (ms)\"), STAT_AI_EQS_AvgInstanceResponseTime, STATGROUP_AI_EQS,)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Filter)",
    "insertText": "UMETA(DisplayName=\"Filter Only\"), Score UMETA(DisplayName=\"Score Only\"), FilterAndScore UMETA(DisplayName=\"Filter and Score\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None,Square,Inverse,Unused)",
    "insertText": "UMETA(Hidden), Constant, Skip UMETA(DisplayName = \"Do not weight\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { AllPass)",
    "insertText": "UMETA(Tooltip = \"All contexts must pass condition\"), AnyPass UMETA(Tooltip = \"At least one context must pass condition\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { AverageScore)",
    "insertText": "UMETA(Tooltip = \"Use average score from all contexts\"), MinScore UMETA(Tooltip = \"Use minimum score from all contexts\"), MaxScore UMETA(Tooltip = \"Use maximum score from all contexts\"), Multiply UMETA(Tooltip = \"Multiply scores from all contexts\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} namespace EEnvItemStatus { enum Type { Passed,Failed,} ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { SingleResult)",
    "insertText": "UMETA(Tooltip=\"Pick first item with the best score\", DisplayName=\"Single Best Item\"), RandomBest5Pct UMETA(Tooltip=\"Pick random item with score 95% .. 100% of max\", DisplayName=\"Single Random Item from Best 5%\"), RandomBest25Pct UMETA(Tooltip=\"Pick random item with score 75% .. 100% of max\", DisplayName=\"Single Random Item from Best 25%\"), AllMatching UMETA(Tooltip=\"Get all items that match conditions\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Float,Int,Bool,MAX)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Box,Sphere,Capsule,} ; })",
    "insertText": "UENUM(meta=(ScriptName=\"EnvDirectionType\"))"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { TwoPoints)",
    "insertText": "UMETA(DisplayName=\"Two Points\",ToolTip=\"Direction from location of one context to another.\"), Rotation UMETA(ToolTip=\"Context's rotation will be used as a direction.\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None,SpecifiedValue,FilterThreshold } ; })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Param)"
  },
  {
    "label": "FEnvNamedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEnvNamedValue() : ParamType(EAIParamType::Float), Value(0.f)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditDefaultsOnly, Category=Direction)"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToText()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FEnvTraceData()",
    "kind": "Method",
    "detail": "Function (Brief,Detailed,} ;)",
    "insertText": "FEnvTraceData()"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToText(EDescriptionMode DescMode)"
  },
  {
    "label": "SetGeometryOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometryOnly()"
  },
  {
    "label": "SetNavmeshOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavmeshOnly()"
  },
  {
    "label": "OnPostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoad()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FEnvOverlapData() : ExtentX(10.0f), ExtentY(10.0f), ExtentZ(10.0f), ShapeOffset(FVector::ZeroVector), OverlapChannel(ECC_WorldStatic), OverlapShape(EEnvOverlapShape::Box), bOnlyBlockingHits(true), bOverlapComplex(false), bSkipOverlapQuerier(false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ; struct FEnvQueryItem { float Score ; int32 DataOffset : 3 1 ; uint32 bIsDiscarded : 1 ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bIsDiscarded = true ; } bool)",
    "insertText": "operator(const FEnvQueryItem& Other)"
  },
  {
    "label": "FEnvQueryItem()",
    "kind": "Method",
    "detail": "Function (} return Score ! = Other . Score ? Score<Other . Score : DataOffset<Other . DataOffset ; })",
    "insertText": "FEnvQueryItem() : Score(0.0f), DataOffset(-1), bIsDiscarded(false)"
  },
  {
    "label": "FEnvQueryItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEnvQueryItem(int32 InOffset) : Score(0.0f), DataOffset(InOffset), bIsDiscarded(false)"
  },
  {
    "label": "GetItemScore()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UObject> Owner ; float)",
    "insertText": "GetItemScore(int32 Index)"
  },
  {
    "label": "GetItemAsActor()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetItemAsActor(int32 Index)"
  },
  {
    "label": "GetItemAsLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetItemAsLocation(int32 Index)"
  },
  {
    "label": "GetItemAsTypeChecked()",
    "kind": "Method",
    "detail": "Function (template<TItemType> const TItemType::FValueType&)",
    "insertText": "GetItemAsTypeChecked(const int32 Index)"
  },
  {
    "label": "GetAllAsActors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllAsActors(TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetAllAsLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllAsLocations(TArray<FVector>& OutLocations)"
  },
  {
    "label": "GetItemRawMemory()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetItemRawMemory(const int32 Index)"
  },
  {
    "label": "FEnvQueryResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEnvQueryResult() : ItemType(NULL), Status(EEnvQueryStatus::Processing), OptionIndex(0), QueryID(0)"
  },
  {
    "label": "FEnvQueryResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEnvQueryResult(const EEnvQueryStatus::Type& InStatus) : ItemType(NULL), Status(InStatus), OptionIndex(0), QueryID(0)"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFinished()"
  },
  {
    "label": "MarkAsAborted()",
    "kind": "Method",
    "detail": "Function (Status = EEnvQueryStatus::MissingParam ; } void)",
    "insertText": "MarkAsAborted()"
  },
  {
    "label": "MarkAsFailed()",
    "kind": "Method",
    "detail": "Function (Status = EEnvQueryStatus::Aborted ; } void)",
    "insertText": "MarkAsFailed()"
  },
  {
    "label": "MarkAsFinishedWithoutIssues()",
    "kind": "Method",
    "detail": "Function (Status = EEnvQueryStatus::Failed ; } void)",
    "insertText": "MarkAsFinishedWithoutIssues()"
  },
  {
    "label": "MarkAsOwnerLost()",
    "kind": "Method",
    "detail": "Function (Status = EEnvQueryStatus::Success ; } void)",
    "insertText": "MarkAsOwnerLost()"
  },
  {
    "label": "GetRawStatus()",
    "kind": "Method",
    "detail": "Function (Status = EEnvQueryStatus::OwnerLost ; } EEnvQueryStatus::Type)",
    "insertText": "GetRawStatus()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FQueryFinishedSignature, TSharedPtr<FEnvQueryResult>)"
  },
  {
    "label": "FEnvQueryItemDetails()",
    "kind": "Method",
    "detail": "Function (struct FEnvQuerySpatialData { FVector Location ; FRotator Rotation ; } ; struct FEnvQueryItemDetails { TArray<float> TestResults ; # if USE_EQS_DEBUGGER TArray<float> TestWeightedScores ; int32 FailedTestIndex ; int32 ItemIndex ; FString FailedDescription ; # endif)",
    "insertText": "FEnvQueryItemDetails()"
  },
  {
    "label": "FEnvQueryItemDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEnvQueryItemDetails(int32 NumTests, int32 InItemIndex)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (TestResults .)",
    "insertText": "AddZeroed(NumTests)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (ItemIndex = InItemIndex ; FailedTestIndex = INDEX_NONE ; # endif } uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "FEnvQueryContextData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FEnvQueryContextData { TSubclassOf<UEnvQueryItemType> ValueType ; int32 NumValues ; TArray<uint8> RawData ;)",
    "insertText": "FEnvQueryContextData() : NumValues(0)"
  },
  {
    "label": "EQSHEADERLOG()",
    "kind": "Method",
    "detail": "Function (} } ; # if NO_LOGGING # define)",
    "insertText": "EQSHEADERLOG(...) #else #define EQSHEADERLOG(msg) Log(msg)"
  },
  {
    "label": "FStep()",
    "kind": "Method",
    "detail": "Function (struct FStep { float ExecutionTime ; int32 NumProcessedItems ;)",
    "insertText": "FStep() : ExecutionTime(0.0f), NumProcessedItems(0)"
  },
  {
    "label": "FOptionStat()",
    "kind": "Method",
    "detail": "Function (} } ; struct FOptionStat { TArray<FStep> StepData ; int32 NumRuns ;)",
    "insertText": "FOptionStat() : NumRuns(0)"
  },
  {
    "label": "FOptionData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FOptionData { int32 NumGenerators ; TArray<FName> GeneratorNames ; int32 OptionIdx ; TArray<int32> TestIndices ;)",
    "insertText": "FOptionData() : NumGenerators(1), OptionIdx(INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FOptionStat> OptionStats ; TArray<FOptionData> OptionData ; void)",
    "insertText": "Add(const FEnvQueryDebugProfileData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FEnvQueryDebugProfileData::FStep& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FEnvQueryDebugProfileData::FOptionStat& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FEnvQueryDebugProfileData::FOptionData& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FEnvQueryDebugProfileData& Data)"
  },
  {
    "label": "FEnvQueryDebugData()",
    "kind": "Method",
    "detail": "Function (struct FEnvQueryDebugData : public FEnvQueryDebugProfileData { TArray<FEnvQueryItem> DebugItems ; TArray<FEnvQueryItemDetails> DebugItemDetails ; TArray<uint8> RawData ; TArray<FString> PerformedTestNames ; uint32 bSingleItemResult : 1 ; int32 CurrentOptionGeneratorIdx = INDEX_NONE ;)",
    "insertText": "FEnvQueryDebugData() : bSingleItemResult(false)"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Store(const FEnvQueryInstance& QueryInstance, const float ExecutionTime, const bool bStepDone)"
  },
  {
    "label": "PrepareOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareOption(const FEnvQueryInstance& QueryInstance, const TArray<UEnvQueryGenerator*>& Generators, const int32 NumTests)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; struct FEQSQueryDebugData : public FEnvQueryDebugData { } ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetShortTypeName()",
    "kind": "Method",
    "detail": "Function (float UnlimitedStepTime ; FText)",
    "insertText": "GetShortTypeName(const UObject* Ob)"
  },
  {
    "label": "DescribeContext()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "DescribeContext(TSubclassOf<UEnvQueryContext> ContextClass)"
  },
  {
    "label": "FEnvQueryInstance()",
    "kind": "Method",
    "detail": "Function (} ; struct FEnvQueryInstance : public FEnvQueryResult { typedef float FNamedParamValueType ; FString QueryName ; FName UniqueName ; UWorld* World ; FQueryFinishedSignature FinishDelegate ; TMap<FName,FNamedParamValueType> NamedParams ; TMap<UClass*,FEnvQueryContextData> ContextCache ; TArray<FEnvQueryOptionInstance> Options ; int32 CurrentTest ; int32 CurrentTestStartingItem ; TArray<FEnvQueryItemDetails> ItemDetails ; int32 NumValidItems ; uint16 ValueSize ; # if USE_EQS_DEBUGGER int32 NumProcessedItems ; uint8 bStoreDebugInfo : 1 ; # endif uint8 bFoundSingleResult : 1 ; uint8 bPassOnSingleResult : 1 ; uint8 bHasLoggedTimeLimitWarning : 1 ; uint8 bIsCurrentlyRunningAsync : 1 ; double StartTime ; double TotalExecutionTime ; double CurrentStepTimeLimit ; # if ! UE_BUILD_SHIPPING double GenerationTimeWarningSeconds = 0 . 0 1 f ; # endif EEnvQueryRunMode::Type Mode ; UEnvQueryItemType_VectorBase* ItemTypeVectorCDO ; UEnvQueryItemType_ActorBase* ItemTypeActorCDO ;)",
    "insertText": "FEnvQueryInstance()"
  },
  {
    "label": "FEnvQueryInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEnvQueryInstance(const FEnvQueryInstance& Other)"
  },
  {
    "label": "ExecuteOneStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOneStep(double TimeLimit)"
  },
  {
    "label": "PrepareContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareContext(UClass* Context, FEnvQueryContextData& ContextData)"
  },
  {
    "label": "PrepareContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareContext(UClass* Context, TArray<FEnvQuerySpatialData>& Data)"
  },
  {
    "label": "PrepareContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareContext(UClass* Context, TArray<FVector>& Data)"
  },
  {
    "label": "PrepareContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareContext(UClass* Context, TArray<FRotator>& Data)"
  },
  {
    "label": "PrepareContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareContext(UClass* Context, TArray<AActor*>& Data)"
  },
  {
    "label": "IsInSingleItemFinalSearch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSingleItemFinalSearch()"
  },
  {
    "label": "IsCurrentlyRunningAsync()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCurrentlyRunningAsync()"
  },
  {
    "label": "AddItemData()",
    "kind": "Method",
    "detail": "Function (template<TypeItem> void)",
    "insertText": "AddItemData(typename TypeItem::FValueType ItemValue)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_AI_EQS_InstanceMemory, RawData.GetAllocatedSize() + Items.GetAllocatedSize())"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (const int32 DataOffset = RawData .)",
    "insertText": "AddZeroed(ValueSize)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(RawData.GetData() + DataOffset, ItemValue)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Add(FEnvQueryItem(DataOffset))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_AI_EQS_InstanceMemory, RawData.GetAllocatedSize() + Items.GetAllocatedSize())"
  },
  {
    "label": "AddItemData()",
    "kind": "Method",
    "detail": "Function (} template<TypeItem> void)",
    "insertText": "AddItemData(TArray<typename TypeItem::FValueType>& ItemCollection)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (int32 DataOffset = RawData .)",
    "insertText": "AddZeroed(ValueSize * ItemCollection.Num())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Reserve(Items.Num() + ItemCollection.Num())"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(RawData.GetData() + DataOffset, Item)"
  },
  {
    "label": "AddItemData()",
    "kind": "Method",
    "detail": "Function (} } template<TypeItem,TypeValue> void)",
    "insertText": "AddItemData(TypeValue ItemValue)"
  },
  {
    "label": "TypeItem()",
    "kind": "Method",
    "detail": "Function (AddItemData<)",
    "insertText": "TypeItem((typename TypeItem::FValueType)(ItemValue))"
  },
  {
    "label": "AddItemData()",
    "kind": "Method",
    "detail": "Function (} template<TypeItem,TypeValue> void)",
    "insertText": "AddItemData(TArray<TypeValue>& ItemCollection)"
  },
  {
    "label": "TypeItem()",
    "kind": "Method",
    "detail": "Function (AddItemData<)",
    "insertText": "TypeItem((typename TypeItem::FValueType)(Item))"
  },
  {
    "label": "FinalizeGeneration()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "FinalizeGeneration()"
  },
  {
    "label": "FinalizeTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeTest()"
  },
  {
    "label": "FinalizeQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeQuery()"
  },
  {
    "label": "NormalizeScores()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeScores()"
  },
  {
    "label": "SortScores()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortScores()"
  },
  {
    "label": "PickRandomItemOfScoreAtLeast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PickRandomItemOfScoreAtLeast(float MinScore)"
  },
  {
    "label": "PickSingleItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PickSingleItem(int32 ItemIndex)"
  },
  {
    "label": "StripRedundantData()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "StripRedundantData()"
  },
  {
    "label": "IncStats()",
    "kind": "Method",
    "detail": "Function (# if STATS void)",
    "insertText": "IncStats()"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_AI_EQS_InstanceMemory, GetAllocatedSize())"
  },
  {
    "label": "INC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_DWORD_STAT_BY(STAT_AI_EQS_NumItems, Items.Num())"
  },
  {
    "label": "DecStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecStats()"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_AI_EQS_InstanceMemory, GetAllocatedSize())"
  },
  {
    "label": "DEC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_DWORD_STAT_BY(STAT_AI_EQS_NumItems, Items.Num())"
  },
  {
    "label": "GetContextAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetContextAllocatedSize()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (} # endif # if ! NO_LOGGING void)",
    "insertText": "Log(const FString Msg)"
  },
  {
    "label": "UE_EQS_DBGMSG()",
    "kind": "Method",
    "detail": "Function (# endif # if USE_EQS_DEBUGGER # define)",
    "insertText": "UE_EQS_DBGMSG(Condition, Format, ...) \\ if (Condition)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (\\ Instance . ItemDetails [ CurrentItem ] . FailedDescription =)",
    "insertText": "Printf(Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_EQS_LOG()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UE_EQS_LOG(CategoryName, Verbosity, Format, ...) \\ UE_LOG(CategoryName, Verbosity, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_EQS_DBGMSG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_EQS_DBGMSG(true, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_EQS_DBGMSG()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "UE_EQS_DBGMSG(Condition, Format, ...) # define UE_EQS_LOG(CategoryName, Verbosity, Format, ...) UE_LOG(CategoryName, Verbosity, Format, ##__VA_ARGS__)"
  },
  {
    "label": "GetExecutionTimeDescription()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetExecutionTimeDescription()"
  },
  {
    "label": "FConstItemIterator()",
    "kind": "Method",
    "detail": "Function (# if CPP | | UE_BUILD_DOCS struct FConstItemIterator {)",
    "insertText": "FConstItemIterator(FEnvQueryInstance& QueryInstance, int32 StartingItemIndex = INDEX_NONE) : Instance(QueryInstance) , CurrentItem(StartingItemIndex != INDEX_NONE ? StartingItemIndex : QueryInstance.CurrentTestStartingItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentItem = StartingItemIndex ; } else { CurrentItem = QueryInstance . CurrentTestStartingItem ;)",
    "insertText": "if(Instance.Items.IsValidIndex(CurrentItem) == false || Instance.Items[CurrentItem].IsValid() == false)"
  },
  {
    "label": "GetItemData()",
    "kind": "Method",
    "detail": "Function (} } } uint8*)",
    "insertText": "GetItemData()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + CurrentItem ;)",
    "insertText": "for(; CurrentItem < Instance.Items.Num() && !Instance.Items[CurrentItem].IsValid(); ++CurrentItem)"
  },
  {
    "label": "FItemIterator()",
    "kind": "Method",
    "detail": "Function (} protected : FEnvQueryInstance& Instance ; int32 CurrentItem ; } ; struct FItemIterator : public FConstItemIterator {)",
    "insertText": "FItemIterator(const UEnvQueryTest* QueryTest, FEnvQueryInstance& QueryInstance, int32 StartingItemIndex = INDEX_NONE)"
  },
  {
    "label": "FItemIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FItemIterator()"
  },
  {
    "label": "SetScore()",
    "kind": "Method",
    "detail": "Function (Instance . CurrentTestStartingItem = CurrentItem ; } void)",
    "insertText": "SetScore(EEnvTestPurpose::Type TestPurpose, EEnvTestFilterType::Type FilterType, float Score, float FilterMin, float FilterMax)"
  },
  {
    "label": "UE_EQS_DBGMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_EQS_DBGMSG(!bPassedTest, TEXT(\"Value %f is above maximum value set to %f\"), Score, FilterMax)"
  },
  {
    "label": "bPassedTest()",
    "kind": "Method",
    "detail": "Function (break ; case EEnvTestFilterType::Minimum :)",
    "insertText": "bPassedTest(Score >= FilterMin)"
  },
  {
    "label": "UE_EQS_DBGMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_EQS_DBGMSG(!bPassedTest, TEXT(\"Value %f is below minimum value set to %f\"), Score, FilterMin)"
  },
  {
    "label": "bPassedTest()",
    "kind": "Method",
    "detail": "Function (break ; case EEnvTestFilterType::Range :)",
    "insertText": "bPassedTest(Score >= FilterMin) && (Score <= FilterMax)"
  },
  {
    "label": "UE_EQS_DBGMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_EQS_DBGMSG(!bPassedTest, TEXT(\"Value %f is out of range set to (%f, %f)\"), Score, FilterMin, FilterMax)"
  },
  {
    "label": "UE_EQS_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case EEnvTestFilterType::Match :)",
    "insertText": "UE_EQS_LOG(LogEQS, Error, TEXT(\"Filtering Type set to 'Match' for floating point test. Will consider test as failed in all cases.\"))"
  },
  {
    "label": "UE_EQS_LOG()",
    "kind": "Method",
    "detail": "Function (bPassedTest = false ; break ; default :)",
    "insertText": "UE_EQS_LOG(LogEQS, Error, TEXT(\"Filtering Type set to invalid value for floating point test. Will consider test as failed in all cases.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPassedTest = false ; break ; } })",
    "insertText": "if(bPassedTest)"
  },
  {
    "label": "SetScoreInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScoreInternal(Score)"
  },
  {
    "label": "SetScore()",
    "kind": "Method",
    "detail": "Function (NumPassedForItem + + ; } NumTestsForItem + + ; } void)",
    "insertText": "SetScore(EEnvTestPurpose::Type TestPurpose, EEnvTestFilterType::Type FilterType, bool bScore, bool bExpected)"
  },
  {
    "label": "UE_EQS_DBGMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_EQS_DBGMSG(!bPassedTest, TEXT(\"Boolean score doesn't match (expected %s and got %s)\"), bExpected ? TEXT(\"TRUE\") : TEXT(\"FALSE\"), bScore ? TEXT(\"TRUE\") : TEXT(\"FALSE\"))"
  },
  {
    "label": "UE_EQS_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case EEnvTestFilterType::Maximum :)",
    "insertText": "UE_EQS_LOG(LogEQS, Error, TEXT(\"Filtering Type set to 'Maximum' for boolean test. Will consider test as failed in all cases.\"))"
  },
  {
    "label": "UE_EQS_LOG()",
    "kind": "Method",
    "detail": "Function (bPassedTest = false ; break ; case EEnvTestFilterType::Minimum :)",
    "insertText": "UE_EQS_LOG(LogEQS, Error, TEXT(\"Filtering Type set to 'Minimum' for boolean test. Will consider test as failed in all cases.\"))"
  },
  {
    "label": "UE_EQS_LOG()",
    "kind": "Method",
    "detail": "Function (bPassedTest = false ; break ; case EEnvTestFilterType::Range :)",
    "insertText": "UE_EQS_LOG(LogEQS, Error, TEXT(\"Filtering Type set to 'Range' for boolean test. Will consider test as failed in all cases.\"))"
  },
  {
    "label": "UE_EQS_LOG()",
    "kind": "Method",
    "detail": "Function (bPassedTest = false ; break ; default :)",
    "insertText": "UE_EQS_LOG(LogEQS, Error, TEXT(\"Filtering Type set to invalid value for boolean test. Will consider test as failed in all cases.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPassedTest = false ; break ; })",
    "insertText": "if(bPassedTest || !bIsFiltering)"
  },
  {
    "label": "SetScoreInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScoreInternal(bPassedTest ? 1.0f : 0.f)"
  },
  {
    "label": "ForceItemState()",
    "kind": "Method",
    "detail": "Function (NumPassedForItem + + ; } NumTestsForItem + + ; } void)",
    "insertText": "ForceItemState(const EEnvItemStatus::Type InStatus, const float Score = UEnvQueryTypes::SkippedItemValue)"
  },
  {
    "label": "bPassed()",
    "kind": "Method",
    "detail": "Function (bForced = true ;)",
    "insertText": "bPassed(InStatus == EEnvItemStatus::Passed)"
  },
  {
    "label": "IgnoreTimeLimit()",
    "kind": "Method",
    "detail": "Function (ItemScore = Score ; } FItemIterator&)",
    "insertText": "IgnoreTimeLimit()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (Deadline = - 1 . 0 f ; return* this ; } operator)",
    "insertText": "bool()"
  },
  {
    "label": "StoreTestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreTestResult()"
  },
  {
    "label": "InitItemScore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitItemScore()"
  },
  {
    "label": "HandleFailedTestResult()",
    "kind": "Method",
    "detail": "Function (NumPassedForItem = 0 ; NumTestsForItem = 0 ; ItemScore = 0 . 0 f ; bPassed = true ; bForced = false ; } void)",
    "insertText": "HandleFailedTestResult()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ItemScore = Score ; } break ; case EEnvTestScoreOperator::MaxScore :)",
    "insertText": "if(!NumPassedForItem || ItemScore < Score)"
  },
  {
    "label": "ItemScore()",
    "kind": "Method",
    "detail": "Function (ItemScore = Score ; } break ; case EEnvTestScoreOperator::Multiply :)",
    "insertText": "ItemScore(NumTestsForItem == 0) ? Score : (ItemScore * Score)"
  },
  {
    "label": "CheckItemPassed()",
    "kind": "Method",
    "detail": "Function (break ; } } void)",
    "insertText": "CheckItemPassed()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPassed = false ; } else)",
    "insertText": "if(!bIsFiltering)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPassed = true ; } else)",
    "insertText": "if(CachedFilterOp == EEnvTestFilterOperator::AllPass)"
  },
  {
    "label": "bPassed()",
    "kind": "Method",
    "detail": "Function (bPassed =)",
    "insertText": "bPassed(NumPassedForItem == NumTestsForItem)"
  },
  {
    "label": "bPassed()",
    "kind": "Method",
    "detail": "Function (} else { bPassed =)",
    "insertText": "bPassed(NumPassedForItem > 0)"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (} } } } ; typedef FItemIterator ItemIterator ; # endif # undef UE_EQS_LOG # undef UE_EQS_DBGMSG # if USE_EQS_DEBUGGER FEnvQueryDebugData DebugData ; bool bDebuggingInfoEnabled ; # endif # if STATS TStatId StatId ; # endif FBox)",
    "insertText": "GetBoundingBox()"
  },
  {
    "label": "FindNavigationDataForQuery()",
    "kind": "Method",
    "detail": "Function (} ; namespace FEQSHelpers { const ANavigationData*)",
    "insertText": "FindNavigationDataForQuery(FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "FAIDynamicParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIDynamicParam()"
  },
  {
    "label": "AllowNoneAsValue()",
    "kind": "Method",
    "detail": "Function (ParamType = EAIParamType::Float ; Value = 0 . f ; BBKey .)",
    "insertText": "AllowNoneAsValue(true)"
  },
  {
    "label": "ConfigureBBKey()",
    "kind": "Method",
    "detail": "Function (bAllowBBKey = true ; } void)",
    "insertText": "ConfigureBBKey(UObject &QueryOwner)"
  },
  {
    "label": "GenerateConfigurableParamsFromNamedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateConfigurableParamsFromNamedValues(UObject &QueryOwner, TArray<FAIDynamicParam>& OutQueryConfig, TArray<FEnvNamedValue>& InQueryParams)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() AIMODULE_API FEQSParametrizedQueryExecutionRequest()"
  },
  {
    "label": "InitForOwnerAndBlackboard()",
    "kind": "Method",
    "detail": "Function (uint32 bInitialized : 1 ; void)",
    "insertText": "InitForOwnerAndBlackboard(UObject& Owner, UBlackboardData* BBAsset)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(UObject& Owner, struct FPropertyChangedEvent& PropertyChangedEvent)"
  }
]