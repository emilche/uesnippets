[
  {
    "label": "extend_64bit()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_HIGHBD_INV_TXFM_SSE2_H_ # define VPX_VPX_DSP_X86_HIGHBD_INV_TXFM_SSE2_H_ # include<emmintrin . h> # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_dsp / inv_txfm . h \" # include \" vpx_dsp / x86 / transpose_sse2 . h \" # include \" vpx_dsp / x86 / txfm_common_sse2 . h \" void)",
    "insertText": "extend_64bit(const __m128i in, __m128i *const out)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "_mm_unpacklo_epi32(in, in)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] =)",
    "insertText": "_mm_unpackhi_epi32(in, in)"
  },
  {
    "label": "wraplow_16bit_shift4()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "wraplow_16bit_shift4(const __m128i in0, const __m128i in1, const __m128i rounding)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i temp [ 2 ] ; temp [ 0 ] =)",
    "insertText": "_mm_add_epi32(in0, rounding)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (temp [ 1 ] =)",
    "insertText": "_mm_add_epi32(in1, rounding)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (temp [ 0 ] =)",
    "insertText": "_mm_srai_epi32(temp[0], 4)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (temp [ 1 ] =)",
    "insertText": "_mm_srai_epi32(temp[1], 4)"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "wraplow_16bit_shift5(const __m128i in0, const __m128i in1, const __m128i rounding)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (temp [ 0 ] =)",
    "insertText": "_mm_srai_epi32(temp[0], 5)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (temp [ 1 ] =)",
    "insertText": "_mm_srai_epi32(temp[1], 5)"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "dct_const_round_shift_64bit(const __m128i in)"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i t =)",
    "insertText": "_mm_add_epi64(in, pair_set_epi32(DCT_CONST_ROUNDING << 2, 0))"
  },
  {
    "label": "pack_4()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "pack_4(const __m128i in0, const __m128i in1)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i t0 =)",
    "insertText": "_mm_unpacklo_epi32(in0, in1)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_unpackhi_epi32(in0, in1)"
  },
  {
    "label": "abs_extend_64bit_sse2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "abs_extend_64bit_sse2(const __m128i in, __m128i *const out , __m128i *const sign)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (sign [ 0 ] =)",
    "insertText": "_mm_srai_epi32(in, 31)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "_mm_xor_si128(in, sign[0])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "_mm_sub_epi32(out[0], sign[0])"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (sign [ 1 ] =)",
    "insertText": "_mm_unpackhi_epi32(sign[0], sign[0])"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (sign [ 0 ] =)",
    "insertText": "_mm_unpacklo_epi32(sign[0], sign[0])"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] =)",
    "insertText": "_mm_unpackhi_epi32(out[0], out[0])"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "_mm_unpacklo_epi32(out[0], out[0])"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "multiply_apply_sign_sse2(const __m128i in, const __m128i sign, const __m128i cospi)"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i out =)",
    "insertText": "_mm_mul_epu32(in, cospi)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "_mm_xor_si128(out, sign)"
  },
  {
    "label": "multiplication_round_shift_sse2()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "multiplication_round_shift_sse2(const __m128i *const in , const __m128i *const sign , const int c)"
  },
  {
    "label": "pair_set_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i pair_c =)",
    "insertText": "pair_set_epi32(c << 2, 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (__m128i t0,t1 ;)",
    "insertText": "assert(c >= 0)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (t0 =)",
    "insertText": "multiply_apply_sign_sse2(in[0], sign[0], pair_c)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (t1 =)",
    "insertText": "multiply_apply_sign_sse2(in[1], sign[1], pair_c)"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (t0 =)",
    "insertText": "dct_const_round_shift_64bit(t0)"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (t1 =)",
    "insertText": "dct_const_round_shift_64bit(t1)"
  },
  {
    "label": "multiplication_neg_round_shift_sse2()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "multiplication_neg_round_shift_sse2(const __m128i *const in , const __m128i *const sign , const int c)"
  },
  {
    "label": "_mm_sub_epi64()",
    "kind": "Method",
    "detail": "Function (t0 =)",
    "insertText": "_mm_sub_epi64(_mm_setzero_si128(), t0)"
  },
  {
    "label": "_mm_sub_epi64()",
    "kind": "Method",
    "detail": "Function (t1 =)",
    "insertText": "_mm_sub_epi64(_mm_setzero_si128(), t1)"
  },
  {
    "label": "highbd_butterfly_sse2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_butterfly_sse2(const __m128i in0, const __m128i in1, const int c0, const int c1, __m128i *const out0, __m128i *const out1)"
  },
  {
    "label": "pair_set_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i pair_c0 =)",
    "insertText": "pair_set_epi32(c0 << 2, 0)"
  },
  {
    "label": "pair_set_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i pair_c1 =)",
    "insertText": "pair_set_epi32(c1 << 2, 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (__m128i temp1 [ 4 ],temp2 [ 4 ],sign1 [ 2 ],sign2 [ 2 ] ;)",
    "insertText": "assert(c0 >= 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(c1 >= 0)"
  },
  {
    "label": "abs_extend_64bit_sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abs_extend_64bit_sse2(in0, temp1, sign1)"
  },
  {
    "label": "abs_extend_64bit_sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abs_extend_64bit_sse2(in1, temp2, sign2)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp1 [ 2 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp1[0], sign1[0], pair_c1)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp1 [ 3 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp1[1], sign1[1], pair_c1)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp1 [ 0 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp1[0], sign1[0], pair_c0)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp1 [ 1 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp1[1], sign1[1], pair_c0)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp2 [ 2 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp2[0], sign2[0], pair_c0)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp2 [ 3 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp2[1], sign2[1], pair_c0)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp2 [ 0 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp2[0], sign2[0], pair_c1)"
  },
  {
    "label": "multiply_apply_sign_sse2()",
    "kind": "Method",
    "detail": "Function (temp2 [ 1 ] =)",
    "insertText": "multiply_apply_sign_sse2(temp2[1], sign2[1], pair_c1)"
  },
  {
    "label": "_mm_sub_epi64()",
    "kind": "Method",
    "detail": "Function (temp1 [ 0 ] =)",
    "insertText": "_mm_sub_epi64(temp1[0], temp2[0])"
  },
  {
    "label": "_mm_sub_epi64()",
    "kind": "Method",
    "detail": "Function (temp1 [ 1 ] =)",
    "insertText": "_mm_sub_epi64(temp1[1], temp2[1])"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (temp2 [ 0 ] =)",
    "insertText": "_mm_add_epi64(temp1[2], temp2[2])"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (temp2 [ 1 ] =)",
    "insertText": "_mm_add_epi64(temp1[3], temp2[3])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp1 [ 0 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp1[0])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp1 [ 1 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp1[1])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp2 [ 0 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp2[0])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp2 [ 1 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp2[1])"
  },
  {
    "label": "pack_4()",
    "kind": "Method",
    "detail": "Function (* out0 =)",
    "insertText": "pack_4(temp1[0], temp1[1])"
  },
  {
    "label": "pack_4()",
    "kind": "Method",
    "detail": "Function (* out1 =)",
    "insertText": "pack_4(temp2[0], temp2[1])"
  },
  {
    "label": "highbd_partial_butterfly_sse2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_partial_butterfly_sse2(const __m128i in, const int c0, const int c1, __m128i *const out0, __m128i *const out1)"
  },
  {
    "label": "abs_extend_64bit_sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abs_extend_64bit_sse2(in, temp, sign)"
  },
  {
    "label": "multiplication_round_shift_sse2()",
    "kind": "Method",
    "detail": "Function (* out0 =)",
    "insertText": "multiplication_round_shift_sse2(temp, sign, c0)"
  },
  {
    "label": "multiplication_round_shift_sse2()",
    "kind": "Method",
    "detail": "Function (* out1 =)",
    "insertText": "multiplication_round_shift_sse2(temp, sign, c1)"
  },
  {
    "label": "highbd_partial_butterfly_neg_sse2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_partial_butterfly_neg_sse2(const __m128i in, const int c0, const int c1, __m128i *const out0, __m128i *const out1)"
  },
  {
    "label": "multiplication_neg_round_shift_sse2()",
    "kind": "Method",
    "detail": "Function (* out0 =)",
    "insertText": "multiplication_neg_round_shift_sse2(temp, sign, c1)"
  },
  {
    "label": "highbd_butterfly_cospi16_sse2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_butterfly_cospi16_sse2(const __m128i in0, const __m128i in1, __m128i *const out0, __m128i *const out1)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i temp1 [ 2 ],temp2,sign [ 2 ] ; temp2 =)",
    "insertText": "_mm_add_epi32(in0, in1)"
  },
  {
    "label": "abs_extend_64bit_sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abs_extend_64bit_sse2(temp2, temp1, sign)"
  },
  {
    "label": "multiplication_round_shift_sse2()",
    "kind": "Method",
    "detail": "Function (* out0 =)",
    "insertText": "multiplication_round_shift_sse2(temp1, sign, cospi_16_64)"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (temp2 =)",
    "insertText": "_mm_sub_epi32(in0, in1)"
  },
  {
    "label": "highbd_add_sub_butterfly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_add_sub_butterfly(const __m128i *in, __m128i *out, int size)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int i = 0 ; const int num = size>> 1 ; const int bound = size - 1 ;)",
    "insertText": "while(i < num)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ i ] =)",
    "insertText": "_mm_add_epi32(in[i], in[bound - i])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ bound - i ] =)",
    "insertText": "_mm_sub_epi32(in[i], in[bound - i])"
  },
  {
    "label": "highbd_idct8_stage4()",
    "kind": "Method",
    "detail": "Function (i + + ; } } void)",
    "insertText": "highbd_idct8_stage4(const __m128i *const in, __m128i *const out)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "_mm_add_epi32(in[0], in[7])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] =)",
    "insertText": "_mm_add_epi32(in[1], in[6])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 2 ] =)",
    "insertText": "_mm_add_epi32(in[2], in[5])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 3 ] =)",
    "insertText": "_mm_add_epi32(in[3], in[4])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 4 ] =)",
    "insertText": "_mm_sub_epi32(in[3], in[4])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 5 ] =)",
    "insertText": "_mm_sub_epi32(in[2], in[5])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 6 ] =)",
    "insertText": "_mm_sub_epi32(in[1], in[6])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 7 ] =)",
    "insertText": "_mm_sub_epi32(in[0], in[7])"
  },
  {
    "label": "highbd_idct8x8_final_round()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_idct8x8_final_round(__m128i *const io)"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 0 ] =)",
    "insertText": "wraplow_16bit_shift5(io[0], io[8], _mm_set1_epi32(16))"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 1 ] =)",
    "insertText": "wraplow_16bit_shift5(io[1], io[9], _mm_set1_epi32(16))"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 2 ] =)",
    "insertText": "wraplow_16bit_shift5(io[2], io[10], _mm_set1_epi32(16))"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 3 ] =)",
    "insertText": "wraplow_16bit_shift5(io[3], io[11], _mm_set1_epi32(16))"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 4 ] =)",
    "insertText": "wraplow_16bit_shift5(io[4], io[12], _mm_set1_epi32(16))"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 5 ] =)",
    "insertText": "wraplow_16bit_shift5(io[5], io[13], _mm_set1_epi32(16))"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 6 ] =)",
    "insertText": "wraplow_16bit_shift5(io[6], io[14], _mm_set1_epi32(16))"
  },
  {
    "label": "wraplow_16bit_shift5()",
    "kind": "Method",
    "detail": "Function (io [ 7 ] =)",
    "insertText": "wraplow_16bit_shift5(io[7], io[15], _mm_set1_epi32(16))"
  },
  {
    "label": "highbd_idct16_4col_stage7()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_idct16_4col_stage7(const __m128i *const in, __m128i *const out)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "_mm_add_epi32(in[0], in[15])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] =)",
    "insertText": "_mm_add_epi32(in[1], in[14])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 2 ] =)",
    "insertText": "_mm_add_epi32(in[2], in[13])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 3 ] =)",
    "insertText": "_mm_add_epi32(in[3], in[12])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 4 ] =)",
    "insertText": "_mm_add_epi32(in[4], in[11])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 5 ] =)",
    "insertText": "_mm_add_epi32(in[5], in[10])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 6 ] =)",
    "insertText": "_mm_add_epi32(in[6], in[9])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 7 ] =)",
    "insertText": "_mm_add_epi32(in[7], in[8])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 8 ] =)",
    "insertText": "_mm_sub_epi32(in[7], in[8])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 9 ] =)",
    "insertText": "_mm_sub_epi32(in[6], in[9])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 0 ] =)",
    "insertText": "_mm_sub_epi32(in[5], in[10])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 1 ] =)",
    "insertText": "_mm_sub_epi32(in[4], in[11])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 2 ] =)",
    "insertText": "_mm_sub_epi32(in[3], in[12])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 3 ] =)",
    "insertText": "_mm_sub_epi32(in[2], in[13])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 4 ] =)",
    "insertText": "_mm_sub_epi32(in[1], in[14])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (out [ 1 5 ] =)",
    "insertText": "_mm_sub_epi32(in[0], in[15])"
  },
  {
    "label": "add_clamp()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "add_clamp(const __m128i in0, const __m128i in1, const int bd)"
  },
  {
    "label": "_mm_setzero_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i zero =)",
    "insertText": "_mm_setzero_si128()"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i one =)",
    "insertText": "_mm_set1_epi16(1)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i max =)",
    "insertText": "_mm_sub_epi16(_mm_slli_epi16(one, bd), one)"
  },
  {
    "label": "_mm_adds_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i d ; d =)",
    "insertText": "_mm_adds_epi16(in0, in1)"
  },
  {
    "label": "_mm_max_epi16()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "_mm_max_epi16(d, zero)"
  },
  {
    "label": "_mm_min_epi16()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "_mm_min_epi16(d, max)"
  },
  {
    "label": "HIGHBD_WRAPLOW()",
    "kind": "Method",
    "detail": "Function (int a1,i,j ; tran_low_t out ; __m128i dc,d ; out =)",
    "insertText": "HIGHBD_WRAPLOW(dct_const_round_shift(input[0] * (tran_high_t)cospi_16_64), bd)"
  },
  {
    "label": "HIGHBD_WRAPLOW()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "HIGHBD_WRAPLOW(dct_const_round_shift(out * (tran_high_t)cospi_16_64), bd)"
  },
  {
    "label": "ROUND_POWER_OF_TWO()",
    "kind": "Method",
    "detail": "Function (a1 =)",
    "insertText": "ROUND_POWER_OF_TWO(out, (size == 8) ? 5 : 6)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (dc =)",
    "insertText": "_mm_set1_epi16(a1)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "_mm_load_si128((const __m128i *)(&dest[j]))"
  },
  {
    "label": "add_clamp()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "add_clamp(d, dc, bd)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(&dest[j]), d)"
  },
  {
    "label": "recon_and_store_4()",
    "kind": "Method",
    "detail": "Function (} dest + = stride ; } } void)",
    "insertText": "recon_and_store_4(const __m128i in, uint16_t *const dest, const int bd)"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i d ; d =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)dest)"
  },
  {
    "label": "add_clamp()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "add_clamp(d, in, bd)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)dest, d)"
  },
  {
    "label": "recon_and_store_4x2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "recon_and_store_4x2(const __m128i in, uint16_t *const dest, const int stride, const int bd)"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i d ; d =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)(dest + 0 * stride))"
  },
  {
    "label": "_mm_castps_si128()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "_mm_castps_si128(_mm_loadh_pi(_mm_castsi128_ps(d), (const __m64 *)(dest + 1 * stride)))"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(dest + 0 * stride), d)"
  },
  {
    "label": "_mm_storeh_pi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeh_pi((__m64 *)(dest + 1 * stride), _mm_castsi128_ps(d))"
  },
  {
    "label": "recon_and_store_4x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "recon_and_store_4x4(const __m128i *const in, uint16_t *dest, const int stride, const int bd)"
  },
  {
    "label": "recon_and_store_4x2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_4x2(in[0], dest, stride, bd)"
  },
  {
    "label": "recon_and_store_4x2()",
    "kind": "Method",
    "detail": "Function (dest + = 2* stride ;)",
    "insertText": "recon_and_store_4x2(in[1], dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "recon_and_store_8(const __m128i in, uint16_t **const dest, const int stride, const int bd)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i d ; d =)",
    "insertText": "_mm_load_si128((const __m128i *)(*dest))"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(*dest), d)"
  },
  {
    "label": "recon_and_store_8x8()",
    "kind": "Method",
    "detail": "Function (* dest + = stride ; } void)",
    "insertText": "recon_and_store_8x8(const __m128i *const in, uint16_t *dest, const int stride, const int bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[0], &dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[1], &dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[2], &dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[3], &dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[4], &dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[5], &dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[6], &dest, stride, bd)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(in[7], &dest, stride, bd)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "load_pack_8_32bit(const tran_low_t *const input)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i t0 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 0))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 4))"
  },
  {
    "label": "highbd_load_pack_transpose_32bit_8x8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_load_pack_transpose_32bit_8x8(const tran_low_t *input, const int stride, __m128i *const in)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 0 ] =)",
    "insertText": "load_pack_8_32bit(input + 0 * stride)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 1 ] =)",
    "insertText": "load_pack_8_32bit(input + 1 * stride)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 2 ] =)",
    "insertText": "load_pack_8_32bit(input + 2 * stride)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 3 ] =)",
    "insertText": "load_pack_8_32bit(input + 3 * stride)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 4 ] =)",
    "insertText": "load_pack_8_32bit(input + 4 * stride)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 5 ] =)",
    "insertText": "load_pack_8_32bit(input + 5 * stride)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 6 ] =)",
    "insertText": "load_pack_8_32bit(input + 6 * stride)"
  },
  {
    "label": "load_pack_8_32bit()",
    "kind": "Method",
    "detail": "Function (in [ 7 ] =)",
    "insertText": "load_pack_8_32bit(input + 7 * stride)"
  },
  {
    "label": "transpose_16bit_8x8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transpose_16bit_8x8(in, in)"
  },
  {
    "label": "highbd_load_transpose_32bit_8x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_load_transpose_32bit_8x4(const tran_low_t *input, const int stride, __m128i *in)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 0 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 0 * stride + 0))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 1 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 0 * stride + 4))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 2 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 1 * stride + 0))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 3 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 1 * stride + 4))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 4 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 2 * stride + 0))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 5 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 2 * stride + 4))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 6 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 3 * stride + 0))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 7 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 3 * stride + 4))"
  },
  {
    "label": "transpose_32bit_8x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transpose_32bit_8x4(in, in)"
  },
  {
    "label": "highbd_load_transpose_32bit_4x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_load_transpose_32bit_4x4(const tran_low_t *input, const int stride, __m128i *in)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 0 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 0 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 1 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 1 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 2 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 2 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (in [ 3 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(input + 3 * stride))"
  },
  {
    "label": "transpose_32bit_4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transpose_32bit_4x4(in, in)"
  },
  {
    "label": "highbd_write_buffer_8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_write_buffer_8(uint16_t *dest, const __m128i in, const int bd)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i final_rounding =)",
    "insertText": "_mm_set1_epi16(1 << 5)"
  },
  {
    "label": "_mm_adds_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i out ; out =)",
    "insertText": "_mm_adds_epi16(in, final_rounding)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "_mm_srai_epi16(out, 6)"
  },
  {
    "label": "recon_and_store_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_8(out, &dest, 0, bd)"
  },
  {
    "label": "highbd_write_buffer_4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_write_buffer_4(uint16_t *const dest, const __m128i in, const int bd)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i final_rounding =)",
    "insertText": "_mm_set1_epi32(1 << 5)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i out ; out =)",
    "insertText": "_mm_add_epi32(in, final_rounding)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "_mm_srai_epi32(out, 6)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "_mm_packs_epi32(out, out)"
  },
  {
    "label": "recon_and_store_4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recon_and_store_4(out, dest, bd)"
  }
]