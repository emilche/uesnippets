[
  {
    "label": "FContentBrowserDataDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBrowserDataDragDropOp"
  },
  {
    "label": "FContentBrowserItemData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBrowserItemData"
  },
  {
    "label": "FContentBrowserItemDataUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBrowserItemDataUpdate"
  },
  {
    "label": "FContentBrowserPluginFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBrowserPluginFilter"
  },
  {
    "label": "FPathPermissionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPathPermissionList"
  },
  {
    "label": "FSourcesSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSourcesSearch"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FFiltersAdditionalParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFiltersAdditionalParams"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FHistoryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHistoryData"
  },
  {
    "label": "FPathViewConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathViewConfig"
  },
  {
    "label": "FPathViewData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathViewData"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FContentBrowserInstanceConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentBrowserInstanceConfig"
  },
  {
    "label": "SPathView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPathView"
  },
  {
    "label": "FScopedPreventTreeItemChangedDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedPreventTreeItemChangedDelegate"
  },
  {
    "label": "FScopedSelectionChangedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSelectionChangedEvent"
  },
  {
    "label": "SFavoritePathView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFavoritePathView"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetViewUtils . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" ContentBrowserDataFilter . h \" # include \" ContentBrowserDelegates . h \" # include \" ContentBrowserItem . h \" # include \" Delegates / Delegate . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IContentBrowserSingleton . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Misc / TextFilter . h \" # include \" PathViewTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateConstants . h \" # include \" Types / SlateEnums . h \" # include \" Types / SlateVector2 . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FContentBrowserDataDragDropOp ; class FContentBrowserItemData ; class FContentBrowserItemDataUpdate ; class FContentBrowserPluginFilter ; class FPathPermissionList ; class FSourcesSearch ; class ITableRow ; class SWidget ; class UToolMenu ; struct FAssetData ; struct FFiltersAdditionalParams ; struct FGeometry ; struct FHistoryData ; struct FPathViewConfig ; struct FPathViewData ; struct FPointerEvent ; struct FContentBrowserInstanceConfig ; class SPathView : public SCompoundWidget { using Super = SCompoundWidget ; public :)",
    "insertText": "DECLARE_DELEGATE(FOnFrontendPluginFilterChanged)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SPathView ) : _InitialCategoryFilter(EContentBrowserItemCategoryFilter::IncludeAll) , _FocusSearchBoxWhenOpened(true) , _ShowTreeTitle(false) , _SearchBarVisibility(EVisibility::Visible) , _ShowSeparator(true) , _AllowContextMenu(true) , _AllowClassesFolder(false) , _AllowReadOnlyFolders(true) , _ShowFavorites(false) , _CanShowDevelopersFolder(false) , _ForceShowEngineContent(false) , _ForceShowPluginContent(false) , _ShowViewOptions(false) , _SelectionMode( ESelectionMode::Multi)"
  },
  {
    "label": "SLATE_NAMED_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_NAMED_SLOT(FArguments, SearchContent ) SLATE_EVENT( FOnContentBrowserItemSelectionChanged, OnItemSelectionChanged ) SLATE_EVENT( FOnGetContentBrowserItemContextMenu, OnGetItemContextMenu ) SLATE_ARGUMENT( EContentBrowserItemCategoryFilter, InitialCategoryFilter ) SLATE_ARGUMENT( bool, FocusSearchBoxWhenOpened ) SLATE_ARGUMENT( bool, ShowTreeTitle ) SLATE_ATTRIBUTE( EVisibility, SearchBarVisibility ) SLATE_ARGUMENT( bool, ShowSeparator ) SLATE_ARGUMENT( bool, AllowContextMenu ) SLATE_ARGUMENT( bool, AllowClassesFolder ) SLATE_ARGUMENT( bool, AllowReadOnlyFolders ) SLATE_ARGUMENT(bool, ShowFavorites)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, CanShowDevelopersFolder) SLATE_ARGUMENT(bool, ForceShowEngineContent) SLATE_ARGUMENT(bool, ForceShowPluginContent) SLATE_ARGUMENT(bool, ShowViewOptions) SLATE_ATTRIBUTE(bool, ShowRedirectors)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(ESelectionMode::Type, SelectionMode ) SLATE_ARGUMENT( TSharedPtr<FSourcesSearch>, ExternalSearch ) SLATE_ARGUMENT( TSharedPtr<FPathPermissionList>, CustomFolderPermissionList) SLATE_ARGUMENT( TSharedPtr<FPluginFilterCollectionType>, PluginPathFilters) SLATE_ARGUMENT( FName, OwningContentBrowserName ) SLATE_ARGUMENT(FString, DefaultPath) SLATE_ARGUMENT(bool, CreateDefaultPath) SLATE_END_ARGS() ~SPathView()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SetSelectedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedPaths(const TArray<FName>& Paths)"
  },
  {
    "label": "SetSelectedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedPaths(const TArray<FString>& Paths)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "GetSelectedPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSelectedPath()"
  },
  {
    "label": "GetSelectedPaths()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetSelectedPaths()"
  },
  {
    "label": "GetSelectedFolderItems()",
    "kind": "Method",
    "detail": "Function (TArray<FContentBrowserItem>)",
    "insertText": "GetSelectedFolderItems()"
  },
  {
    "label": "NewFolderItemRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewFolderItemRequested(const FContentBrowserItemTemporaryContext& NewItemContext)"
  },
  {
    "label": "RenameFolderItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameFolderItem(const FContentBrowserItem& InItem)"
  },
  {
    "label": "SyncToItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToItems(TArrayView<const FContentBrowserItem> ItemsToSync, const bool bAllowImplicitSync = false)"
  },
  {
    "label": "SyncToVirtualPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToVirtualPaths(TArrayView<const FName> VirtualPathsToSync, const bool bAllowImplicitSync = false)"
  },
  {
    "label": "SyncToLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToLegacy(TArrayView<const FAssetData> AssetDataList, TArrayView<const FString> FolderList, const bool bAllowImplicitSync = false)"
  },
  {
    "label": "DoesItemExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesItemExist(FName InVirtualPath)"
  },
  {
    "label": "ApplyHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHistoryData(const FHistoryData& History)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings(const FString& IniFilename, const FString& IniSection, const FString& InstanceName)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings(const FString& IniFilename, const FString& IniSection, const FString& InstanceName)"
  },
  {
    "label": "InternalPathPassesBlockLists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalPathPassesBlockLists(const FStringView InInternalPath, const int32 InAlreadyCheckedDepth = 0)"
  },
  {
    "label": "DisablePluginPathFiltersThatHideItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisablePluginPathFiltersThatHideItems(TConstArrayView<FContentBrowserItem> Items)"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Populate(const bool bIsRefreshingFilter = false)"
  },
  {
    "label": "SetTreeTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeTitle(FText InTitle)"
  },
  {
    "label": "GetTreeTitle()",
    "kind": "Method",
    "detail": "Function (TreeTitle = InTitle ; } ; FText)",
    "insertText": "GetTreeTitle()"
  },
  {
    "label": "GetDefaultPathsToSelect()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetDefaultPathsToSelect()"
  },
  {
    "label": "GetRootPathItemNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetRootPathItemNames()"
  },
  {
    "label": "GetContentBrowserItemCategoryFilter()",
    "kind": "Method",
    "detail": "Function (EContentBrowserItemCategoryFilter)",
    "insertText": "GetContentBrowserItemCategoryFilter()"
  },
  {
    "label": "GetContentBrowserItemAttributeFilter()",
    "kind": "Method",
    "detail": "Function (EContentBrowserItemAttributeFilter)",
    "insertText": "GetContentBrowserItemAttributeFilter()"
  },
  {
    "label": "RecursiveExpandParents()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RecursiveExpandParents(const TSharedPtr<FTreeItem>& Item)"
  },
  {
    "label": "HandleItemDataUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemDataUpdated(TArrayView<const FContentBrowserItemDataUpdate> InUpdatedItems)"
  },
  {
    "label": "HandleItemDataRefreshed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemDataRefreshed()"
  },
  {
    "label": "HandleItemDataDiscoveryComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemDataDiscoveryComplete()"
  },
  {
    "label": "GenerateTreeRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateTreeRow(TSharedPtr<FTreeItem> TreeItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "TreeItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeItemScrolledIntoView(TSharedPtr<FTreeItem> TreeItem, const TSharedPtr<ITableRow>& Widget)"
  },
  {
    "label": "TreeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeSelectionChanged(TSharedPtr< FTreeItem > TreeItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "MakePathViewContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakePathViewContextMenu()"
  },
  {
    "label": "GetChildrenForTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildrenForTree(TSharedPtr< FTreeItem > TreeItem, TArray< TSharedPtr<FTreeItem> >& OutChildren)"
  },
  {
    "label": "FolderNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FolderNameChanged(const TSharedPtr< FTreeItem >& TreeItem, const FString& ProposedName, const UE::Slate::FDeprecateVector2DParameter& MessageLocation, const ETextCommit::Type CommitType)"
  },
  {
    "label": "VerifyFolderNameChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyFolderNameChanged(const TSharedPtr< FTreeItem >& TreeItem, const FString& ProposedName, FText& OutErrorMessage)"
  },
  {
    "label": "SetSearchFilterText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchFilterText(const FText& InSearchText, TArray<FText>& OutErrors)"
  },
  {
    "label": "GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHighlightText()"
  },
  {
    "label": "IsTreeItemSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTreeItemSelected(TSharedPtr<FTreeItem> TreeItem)"
  },
  {
    "label": "OnFolderDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFolderDragDetected(const FGeometry& Geometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CreateCompiledFolderFilter()",
    "kind": "Method",
    "detail": "Function (FContentBrowserDataCompiledFilter)",
    "insertText": "CreateCompiledFolderFilter()"
  },
  {
    "label": "GetPathViewConfig()",
    "kind": "Method",
    "detail": "Function (FPathViewConfig*)",
    "insertText": "GetPathViewConfig()"
  },
  {
    "label": "GetContentBrowserConfig()",
    "kind": "Method",
    "detail": "Function (FContentBrowserInstanceConfig*)",
    "insertText": "GetContentBrowserConfig()"
  },
  {
    "label": "ConfigureTreeView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureTreeView(STreeView<TSharedPtr<FTreeItem>>::FArguments& InArgs)"
  },
  {
    "label": "ExplicitlyAddPathToSelection()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ExplicitlyAddPathToSelection(const FName Path)"
  },
  {
    "label": "ShouldAllowTreeItemChangedDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllowTreeItemChangedDelegate()"
  },
  {
    "label": "SetTreeItemExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeItemExpansionRecursive(TSharedPtr< FTreeItem > TreeItem, bool bInExpansionState)"
  },
  {
    "label": "TreeExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeExpansionChanged(TSharedPtr< FTreeItem > TreeItem, bool bIsExpanded)"
  },
  {
    "label": "FilterUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterUpdated()"
  },
  {
    "label": "FolderAlreadyExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FolderAlreadyExists(const TSharedPtr< FTreeItem >& TreeItem, TSharedPtr< FTreeItem >& ExistingItem)"
  },
  {
    "label": "IsTreeItemExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTreeItemExpanded(TSharedPtr<FTreeItem> TreeItem)"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName PropertyName)"
  },
  {
    "label": "SetFocusPostConstruct()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "SetFocusPostConstruct(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "TriggerRepopulate()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "TriggerRepopulate(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "SetPluginPathFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPluginPathFilterActive(const TSharedRef<FContentBrowserPluginFilter>& Filter, bool bActive)"
  },
  {
    "label": "ResetPluginPathFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPluginPathFilters()"
  },
  {
    "label": "PluginPathFilterClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluginPathFilterClicked(TSharedRef<FContentBrowserPluginFilter> Filter)"
  },
  {
    "label": "IsPluginPathFilterChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPluginPathFilterChecked(TSharedRef<FContentBrowserPluginFilter> Filter)"
  },
  {
    "label": "IsPluginPathFilterInUse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPluginPathFilterInUse(TSharedRef<FContentBrowserPluginFilter> Filter)"
  },
  {
    "label": "GetDefaultPathsToExpand()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetDefaultPathsToExpand()"
  },
  {
    "label": "DirtyLastExpandedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyLastExpandedPaths()"
  },
  {
    "label": "UpdateLastExpandedPathsIfDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLastExpandedPathsIfDirty()"
  },
  {
    "label": "CreateFavoritesView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateFavoritesView()"
  },
  {
    "label": "RegisterGetViewButtonMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGetViewButtonMenu()"
  },
  {
    "label": "PopulateFilterAdditionalParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateFilterAdditionalParams(FFiltersAdditionalParams& OutParams)"
  },
  {
    "label": "IsToggleShowCppContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowCppContentAllowed()"
  },
  {
    "label": "IsToggleShowDevelopersContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowDevelopersContentAllowed()"
  },
  {
    "label": "IsToggleShowEngineContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowEngineContentAllowed()"
  },
  {
    "label": "IsToggleShowPluginContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowPluginContentAllowed()"
  },
  {
    "label": "IsToggleShowLocalizedContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowLocalizedContentAllowed()"
  },
  {
    "label": "GetViewButtonContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetViewButtonContent()"
  },
  {
    "label": "CopySelectedFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedFolder()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "FScopedPreventTreeItemChangedDelegate()",
    "kind": "Method",
    "detail": "Function (protected : class FScopedPreventTreeItemChangedDelegate { public :)",
    "insertText": "FScopedPreventTreeItemChangedDelegate(const TSharedRef<SPathView>& InPathView) : PathView(InPathView)"
  },
  {
    "label": "FScopedPreventTreeItemChangedDelegate()",
    "kind": "Method",
    "detail": "Function (PathView -> PreventTreeItemChangedDelegateCount + + ; } ~)",
    "insertText": "FScopedPreventTreeItemChangedDelegate()"
  },
  {
    "label": "FScopedSelectionChangedEvent()",
    "kind": "Method",
    "detail": "Function (PathView -> PreventTreeItemChangedDelegateCount - - ; } private : TSharedRef<SPathView> PathView ; } ; class FScopedSelectionChangedEvent { public :)",
    "insertText": "FScopedSelectionChangedEvent(const TSharedRef<SPathView>& InPathView, const bool InShouldEmitEvent = true)"
  },
  {
    "label": "FScopedSelectionChangedEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedSelectionChangedEvent()"
  },
  {
    "label": "GetSelectionSet()",
    "kind": "Method",
    "detail": "Function (private : TSet<FName>)",
    "insertText": "GetSelectionSet()"
  },
  {
    "label": "SFavoritePathView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SPathView> PathView ; TSet<FName> InitialSelectionSet ; bool bShouldEmitEvent = true ; } ; TSharedPtr<STreeView<TSharedPtr<FTreeItem>>> TreeViewPtr ; TSharedPtr<FSourcesSearch> SearchPtr ; TSharedPtr<FPathViewData> TreeData ; uint64 LastTreeDataVersion = 0 ; bool bFlat = false ; TSet<FName> LastSelectedPaths ; TArray<FName> PendingInitialPaths ; FContentBrowserItemTemporaryContext PendingNewFolderContext ; TSharedPtr<SWidget> PathViewWidget ; TSharedPtr<FPathPermissionList> FolderPermissionList ; TSharedPtr<FPathPermissionList> WritableFolderPermissionList ; TSharedPtr<FPathPermissionList> CustomFolderPermissionList ; TAttribute<bool> bShowRedirectors ; bool bLastShowRedirectors = false ; FName OwningContentBrowserName ; private : bool bLastExpandedPathsDirty = false ; TSet<FName> LastExpandedPaths ; FOnContentBrowserItemSelectionChanged OnItemSelectionChanged ; FOnGetContentBrowserItemContextMenu OnGetItemContextMenu ; int32 PreventTreeItemChangedDelegateCount = 0 ; EContentBrowserItemCategoryFilter InitialCategoryFilter = EContentBrowserItemCategoryFilter::IncludeAll ; bool bAllowContextMenu : 1 ; bool bAllowClassesFolder : 1 ; bool bAllowReadOnlyFolders : 1 ; bool bCanShowDevelopersFolder : 1 ; bool bForceShowEngineContent : 1 ; bool bForceShowPluginContent : 1 ; FText TreeTitle ; TSharedPtr<FUICommandList> Commands ; TSharedPtr<FPluginFilterCollectionType> PluginPathFilters ; TArray<TSharedRef<FContentBrowserPluginFilter>> AllPluginPathFilters ; TSharedPtr<SExpandableArea> FavoritesArea ; } ; class SFavoritePathView : public SPathView { public :)",
    "insertText": "SFavoritePathView()"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "FixupFavoritesFromExternalChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupFavoritesFromExternalChange(TArrayView<const AssetViewUtils::FMovedContentFolder> MovedFolders)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnFolderFavoriteAdd, const TArray<FString>& ) void SetOnFolderFavoriteAdd(const FOnFolderFavoriteAdd& InOnFolderFavoriteAdd)"
  },
  {
    "label": "OnFavoriteAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFavoriteAdded()"
  },
  {
    "label": "GetContentBrowserDragDropOpFromEvent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FContentBrowserDataDragDropOp>)",
    "insertText": "GetContentBrowserDragDropOpFromEvent(const FDragDropEvent& DragDropEvent)"
  }
]