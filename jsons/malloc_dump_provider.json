[
  {
    "label": "MemoryAllocatorDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryAllocatorDump"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DefaultSingletonTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultSingletonTraits"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_MALLOC_DUMP_PROVIDER_H_ # define BASE_TRACE_EVENT_MALLOC_DUMP_PROVIDER_H_ # include \" base / allocator / buildflags . h \" # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / singleton . h \" # include \" base / synchronization / lock . h \" # include \" base / time / time . h \" # include \" base / trace_event / memory_dump_provider . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) || \\ BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) #define MALLOC_MEMORY_TRACING_SUPPORTED #endif #if BUILDFLAG(USE_PARTITION_ALLOC)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (namespace trace_event { class MemoryAllocatorDump ; class BASE_EXPORT MallocDumpProvider : public MemoryDumpProvider { public : const char kAllocatedObjects [ ] ; MallocDumpProvider*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "MallocDumpProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MallocDumpProvider(const MallocDumpProvider&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MallocDumpProvider&)",
    "insertText": "operator(const MallocDumpProvider&)"
  },
  {
    "label": "OnMemoryDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMemoryDump(const MemoryDumpArgs& args, ProcessMemoryDump* pmd)"
  },
  {
    "label": "MallocDumpProvider()",
    "kind": "Method",
    "detail": "Function (private : struct DefaultSingletonTraits<MallocDumpProvider> ;)",
    "insertText": "MallocDumpProvider()"
  },
  {
    "label": "ReportPerMinuteStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPerMinuteStats(uint64_t syscall_count, size_t cumulative_brp_quarantined_bytes, size_t cumulative_brp_quarantined_count, MemoryAllocatorDump* malloc_dump, MemoryAllocatorDump* partition_alloc_dump)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool emit_metrics_on_memory_dump_)",
    "insertText": "GUARDED_BY(emit_metrics_on_memory_dump_lock_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (base::Lock emit_metrics_on_memory_dump_lock_ ; # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) base::TimeTicks last_memory_dump_time_ = base::TimeTicks::Now()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (uint64_t last_syscall_count_ = 0 ; size_t last_cumulative_brp_quarantined_bytes_ = 0 ; size_t last_cumulative_brp_quarantined_count_ = 0 ; # endif } ; # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC)"
  },
  {
    "label": "MemoryDumpPartitionStatsDumper()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MemoryDumpPartitionStatsDumper(const char* root_name, ProcessMemoryDump* memory_dump, MemoryDumpLevelOfDetail level_of_detail)"
  },
  {
    "label": "PartitionDumpTotals()",
    "kind": "Method",
    "detail": "Function (const char* kPartitionsDumpName ; void)",
    "insertText": "PartitionDumpTotals(const char* partition_name, const partition_alloc::PartitionMemoryStats*)"
  },
  {
    "label": "PartitionsDumpBucketStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartitionsDumpBucketStats(const char* partition_name, const partition_alloc::PartitionBucketMemoryStats*)"
  },
  {
    "label": "total_mmapped_bytes()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "total_mmapped_bytes()"
  }
]