[
  {
    "label": "CMath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMath"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include<cstdint> # include<math . h> # include<string . h> namespace uLang { class CMath { public : template<T> ULANG_FORCEINLINE T)",
    "insertText": "Max(const T A, const T B)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} template<T> ULANG_FORCEINLINE T)",
    "insertText": "Min(const T A, const T B)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} template<T> ULANG_FORCEINLINE T)",
    "insertText": "Clamp(const T X, const T Min, const T Max)"
  },
  {
    "label": "IsPowerOf2()",
    "kind": "Method",
    "detail": "Function (} template<class T> ULANG_FORCEINLINE bool)",
    "insertText": "IsPowerOf2(const T X)"
  },
  {
    "label": "Loge()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE float)",
    "insertText": "Loge(float Value)"
  },
  {
    "label": "Extensionalize()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Extensionalize(double Value)"
  },
  {
    "label": "ToFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToFloat(int64_t Value)"
  },
  {
    "label": "FloatAdd()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FloatAdd(double Left, double Right)"
  },
  {
    "label": "FloatSubtract()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FloatSubtract(double Left, double Right)"
  },
  {
    "label": "FloatMultiply()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FloatMultiply(double Left, double Right)"
  },
  {
    "label": "FloatDivide()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FloatDivide(double Left, double Right)"
  },
  {
    "label": "ReinterpretInt64AsDouble()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE double)",
    "insertText": "ReinterpretInt64AsDouble(uint64_t Int)"
  },
  {
    "label": "FloatInfinity()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE double)",
    "insertText": "FloatInfinity()"
  },
  {
    "label": "FloatIsFinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FloatIsFinite(double Value)"
  },
  {
    "label": "FloatIsInfinite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FloatIsInfinite(double Value)"
  },
  {
    "label": "FloatIsNaN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FloatIsNaN(double Value)"
  },
  {
    "label": "FloatEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FloatEqual(double Left, double Right)"
  },
  {
    "label": "FloatLess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FloatLess(double Left, double Right)"
  },
  {
    "label": "FloatLessEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FloatLessEqual(double Left, double Right)"
  },
  {
    "label": "FloatNotEqual()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE bool)",
    "insertText": "FloatNotEqual(double Left, double Right)"
  },
  {
    "label": "FloatGreater()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "FloatGreater(double Left, double Right)"
  },
  {
    "label": "FloatGreaterEqual()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "FloatGreaterEqual(double Left, double Right)"
  },
  {
    "label": "FloatRanking()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "FloatRanking(double Value)"
  }
]