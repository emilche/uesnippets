[
  {
    "label": "Semantic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Semantic"
  },
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "IsPS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilConstants . h \" # include \" llvm / ADT / StringRef . h \" namespace hlsl { class Semantic ; class ShaderModel { public : using Kind = DXIL::ShaderKind ; const unsigned kHighestMajor = 6 ; const unsigned kHighestMinor = 8 ; const unsigned kOfflineMinor = 0 xF ; bool)",
    "insertText": "IsPS()"
  },
  {
    "label": "IsValidForDxil()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidForDxil()"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (Kind)",
    "insertText": "GetKind()"
  },
  {
    "label": "GetMinValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinValidatorVersion(unsigned &ValMajor, unsigned &ValMinor)"
  },
  {
    "label": "IsSMAtLeast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSMAtLeast(unsigned Major, unsigned Minor)"
  },
  {
    "label": "IsSM50Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM50Plus()"
  },
  {
    "label": "IsSM51Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM51Plus()"
  },
  {
    "label": "AllowDerivatives()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowDerivatives(DXIL::ShaderKind sk)"
  },
  {
    "label": "IsSM60Plus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSM60Plus()"
  },
  {
    "label": "IsSM61Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM61Plus()"
  },
  {
    "label": "IsSM62Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM62Plus()"
  },
  {
    "label": "IsSM63Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM63Plus()"
  },
  {
    "label": "IsSM64Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM64Plus()"
  },
  {
    "label": "IsSM65Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM65Plus()"
  },
  {
    "label": "IsSM66Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM66Plus()"
  },
  {
    "label": "IsSM67Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM67Plus()"
  },
  {
    "label": "IsSM68Plus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSM68Plus()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDefaultPackingStrategy()",
    "kind": "Method",
    "detail": "Function (DXIL::PackingStrategy)",
    "insertText": "GetDefaultPackingStrategy()"
  },
  {
    "label": "GetByName()",
    "kind": "Method",
    "detail": "Function (const ShaderModel*)",
    "insertText": "GetByName(llvm::StringRef Name)"
  },
  {
    "label": "GetKindName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetKindName(Kind kind)"
  },
  {
    "label": "KindFromFullName()",
    "kind": "Method",
    "detail": "Function (DXIL::ShaderKind)",
    "insertText": "KindFromFullName(llvm::StringRef Name)"
  },
  {
    "label": "FullNameFromKind()",
    "kind": "Method",
    "detail": "Function (const llvm::StringRef)",
    "insertText": "FullNameFromKind(DXIL::ShaderKind sk)"
  },
  {
    "label": "GetNodeLaunchTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetNodeLaunchTypeName(DXIL::NodeLaunchType launchTy)"
  },
  {
    "label": "NodeLaunchTypeFromName()",
    "kind": "Method",
    "detail": "Function (DXIL::NodeLaunchType)",
    "insertText": "NodeLaunchTypeFromName(llvm::StringRef name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const ShaderModel &other)"
  },
  {
    "label": "ShaderModel()",
    "kind": "Method",
    "detail": "Function (} private : Kind m_Kind ; unsigned m_Major ; unsigned m_Minor ; const char* m_pszName ; unsigned m_NumInputRegs ; unsigned m_NumOutputRegs ; bool m_bTypedUavs ; unsigned m_NumUAVRegs ;)",
    "insertText": "ShaderModel()"
  },
  {
    "label": "ShaderModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShaderModel(Kind Kind, unsigned Major, unsigned Minor, const char *pszName, unsigned m_NumInputRegs, unsigned m_NumOutputRegs, bool m_bUAVs, bool m_bTypedUavs, unsigned m_UAVRegsLim)"
  },
  {
    "label": "GetInvalid()",
    "kind": "Method",
    "detail": "Function (const unsigned kNumShaderModels = 9 2 ; const ShaderModel ms_ShaderModels [ kNumShaderModels ] ; const ShaderModel*)",
    "insertText": "GetInvalid()"
  }
]