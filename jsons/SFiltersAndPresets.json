[
  {
    "label": "FGroupOrStatNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGroupOrStatNode"
  },
  {
    "label": "FProfilerSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerSession"
  },
  {
    "label": "EStatGroupingOrSortingMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatGroupingOrSortingMode"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FGroupAndStatSorting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroupAndStatSorting"
  },
  {
    "label": "ByStatName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByStatName"
  },
  {
    "label": "ByGroupName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByGroupName"
  },
  {
    "label": "ByStatType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByStatType"
  },
  {
    "label": "SFiltersAndPresets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFiltersAndPresets"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" ProfilerCommon . h \" # include \" ProfilerSample . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Misc / TextFilter . h \" # include \" Misc / FilterCollection . h \" class FGroupOrStatNode ; class FProfilerSession ; typedef TSharedPtr<class FGroupOrStatNode> FGroupOrStatNodePtr ; typedef TSharedRef<class FGroupOrStatNode> FGroupOrStatNodeRef ; typedef TSharedRef<const class FGroupOrStatNode> FGroupOrStatNodeRefConst ; typedef TWeakPtr<class FGroupOrStatNode> FGroupOrStatNodeWeak ; struct EStatGroupingOrSortingMode { enum Type { GroupName,StatName,StatType,StatValue,InvalidOrMax,} ; FText)",
    "insertText": "ToName(const Type StatGroupingOrSortingMode)"
  },
  {
    "label": "ToDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToDescription(const Type StatGroupingOrSortingMode)"
  },
  {
    "label": "ToBrushName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ToBrushName(const Type StatGroupingOrSortingMode)"
  },
  {
    "label": "FGroupOrStatNode()",
    "kind": "Method",
    "detail": "Function (} ; typedef TFilterCollection<const FGroupOrStatNodePtr&> FGroupAndStatFilterCollection ; typedef TTextFilter<const FGroupOrStatNodePtr&> FGroupAndStatTextFilter ; class FGroupOrStatNode : public TSharedFromThis<FGroupOrStatNode> { public :)",
    "insertText": "FGroupOrStatNode(const FName InMetaGroupName, const FName InName, uint32 InStatID, const EProfilerSampleTypes::Type InStatType ) : MetaGroupName( InMetaGroupName ) , Name( InName ) , StatID( InStatID ) , StatType( InStatType ) , bForceExpandGroupNode( false)"
  },
  {
    "label": "FGroupOrStatNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGroupOrStatNode(const FName InGroupName ) : Name( InGroupName ) , StatID( 0 ) , StatType( EProfilerSampleTypes::InvalidOrMax ) , bForceExpandGroupNode( false)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (} template<TSortingClass> void)",
    "insertText": "SortChildren(const TSortingClass& Instance)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (ChildrenPtr .)",
    "insertText": "Sort(Instance)"
  },
  {
    "label": "AddChildAndSetGroupPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChildAndSetGroupPtr(const FGroupOrStatNodePtr& ChildPtr)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (ChildPtr -> GroupPtr =)",
    "insertText": "AsShared()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChildrenPtr .)",
    "insertText": "Add(ChildPtr)"
  },
  {
    "label": "AddFilteredChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddFilteredChild(const FGroupOrStatNodePtr& ChildPtr)"
  },
  {
    "label": "ClearFilteredChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearFilteredChildren()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FilteredChildrenPtr .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} const TArray<FGroupOrStatNodePtr>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetMetaGropName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetMetaGropName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct ByGroupName { bool)",
    "insertText": "operator()( const FGroupOrStatNodePtr& A, const FGroupOrStatNodePtr& B)"
  },
  {
    "label": "GetStatType()",
    "kind": "Method",
    "detail": "Function (const EProfilerSampleTypes::Type& TypeA = A ->)",
    "insertText": "GetStatType()"
  },
  {
    "label": "SFiltersAndPresets()",
    "kind": "Method",
    "detail": "Function (} else { return TypeA> TypeB ; } } } ; } ; class SFiltersAndPresets : public SCompoundWidget { public :)",
    "insertText": "SFiltersAndPresets()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SFiltersAndPresets)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "ProfilerManager_OnRequestFilterAndPresetsUpdate()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ProfilerManager_OnRequestFilterAndPresetsUpdate()"
  },
  {
    "label": "UpdateGroupAndStatTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGroupAndStatTree(const TSharedPtr<FProfilerSession> InProfilerSession)"
  },
  {
    "label": "CreateGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroups()"
  },
  {
    "label": "SortStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortStats()"
  },
  {
    "label": "ApplyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFiltering()"
  },
  {
    "label": "HandleItemToStringArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemToStringArray(const FGroupOrStatNodePtr& GroupOrStatNodePtr, TArray< FString >& out_SearchStrings)"
  },
  {
    "label": "CreateGroupByOptionsSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroupByOptionsSources()"
  },
  {
    "label": "RecreateSortByOptionsSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateSortByOptionsSources()"
  },
  {
    "label": "GetToggleButtonForStatType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToggleButtonForStatType(const EProfilerSampleTypes::Type StatType)"
  },
  {
    "label": "FilterByStatType_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByStatType_OnCheckStateChanged(ECheckBoxState NewRadioState, const EProfilerSampleTypes::Type InStatType)"
  },
  {
    "label": "FilterByStatType_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterByStatType_IsChecked(const EProfilerSampleTypes::Type InStatType)"
  },
  {
    "label": "GroupAndStatTree_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GroupAndStatTree_OnGenerateRow(FGroupOrStatNodePtr TreeNode, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "GroupAndStatTree_OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupAndStatTree_OnGetChildren(FGroupOrStatNodePtr InParent, TArray< FGroupOrStatNodePtr >& out_Children)"
  },
  {
    "label": "GroupAndStatTree_OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupAndStatTree_OnMouseButtonDoubleClick(FGroupOrStatNodePtr TreeNode)"
  },
  {
    "label": "GroupAndStatTableRow_GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupAndStatTableRow_GetHighlightText()"
  },
  {
    "label": "GroupAndStatTableRow_ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GroupAndStatTableRow_ShouldBeEnabled(const uint32 StatID)"
  },
  {
    "label": "SearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "SearchBox_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchBox_IsEnabled()"
  },
  {
    "label": "GroupBy_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupBy_OnSelectionChanged(TSharedPtr<EStatGroupingOrSortingMode::Type> NewGroupingMode, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GroupBy_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GroupBy_OnGenerateWidget(TSharedPtr<EStatGroupingOrSortingMode::Type> InGroupingMode)"
  },
  {
    "label": "GroupBy_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedText()"
  },
  {
    "label": "GroupBy_GetSelectedTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedTooltipText()"
  },
  {
    "label": "SortBy_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortBy_OnSelectionChanged(TSharedPtr<EStatGroupingOrSortingMode::Type> NewSortingMode, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "SortBy_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "SortBy_OnGenerateWidget(TSharedPtr<EStatGroupingOrSortingMode::Type> InSortingMode)"
  },
  {
    "label": "SortBy_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "SortBy_GetSelectedText()"
  }
]