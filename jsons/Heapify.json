[
  {
    "label": "Heapify()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Impl / BinaryHeap . h \" # include \" Templates / IdentityFunctor . h \" # include \" Templates / Invoke . h \" # include \" Templates / Less . h \" # include \" Templates / UnrealTemplate . h \" namespace Algo { template<RangeType> void)",
    "insertText": "Heapify(RangeType& Range)"
  },
  {
    "label": "HeapifyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapifyInternal(GetData(Range), GetNum(Range), FIdentityFunctor(), TLess<>())"
  },
  {
    "label": "Heapify()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,PredicateType> void)",
    "insertText": "Heapify(RangeType& Range, PredicateType Predicate)"
  },
  {
    "label": "HeapifyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapifyInternal(GetData(Range), GetNum(Range), FIdentityFunctor(), Predicate)"
  },
  {
    "label": "HeapifyBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,PredicateType> void)",
    "insertText": "HeapifyBy(RangeType& Range, ProjectionType Projection)"
  },
  {
    "label": "HeapifyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapifyInternal(GetData(Range), GetNum(Range), Projection, TLess<>())"
  },
  {
    "label": "HeapifyBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,PredicateType> void)",
    "insertText": "HeapifyBy(RangeType& Range, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "HeapifyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapifyInternal(GetData(Range), GetNum(Range), Projection, Predicate)"
  }
]