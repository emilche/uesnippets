[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCInstPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstPrinter"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "MCOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCOperand"
  },
  {
    "label": "MachineOperandType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MachineOperandType"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "MCOperand()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCINST_H # define LLVM_MC_MCINST_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / SMLoc . h \" namespace llvm { class raw_ostream ; class MCAsmInfo ; class MCInstPrinter ; class MCExpr ; class MCInst ; class MCOperand { enum MachineOperandType : unsigned char { kInvalid,kRegister,kImmediate,kFPImmediate,kExpr,kInst } ; MachineOperandType Kind ; union { unsigned RegVal ; int64_t ImmVal ; double FPImmVal ; const MCExpr* ExprVal ; const MCInst* InstVal ; } ; public :)",
    "insertText": "MCOperand() : Kind(kInvalid), FPImmVal(0.0)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReg() && \"This is not a register operand!\")"
  },
  {
    "label": "getImm()",
    "kind": "Method",
    "detail": "Function (RegVal = Reg ; } int64_t)",
    "insertText": "getImm()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isImm() && \"This is not an immediate\")"
  },
  {
    "label": "getFPImm()",
    "kind": "Method",
    "detail": "Function (ImmVal = Val ; } double)",
    "insertText": "getFPImm()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isFPImm() && \"This is not an FP immediate\")"
  },
  {
    "label": "getExpr()",
    "kind": "Method",
    "detail": "Function (FPImmVal = Val ; } const MCExpr*)",
    "insertText": "getExpr()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isExpr() && \"This is not an expression\")"
  },
  {
    "label": "getInst()",
    "kind": "Method",
    "detail": "Function (ExprVal = Val ; } const MCInst*)",
    "insertText": "getInst()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isInst() && \"This is not a sub-instruction\")"
  },
  {
    "label": "createReg()",
    "kind": "Method",
    "detail": "Function (InstVal = Val ; } MCOperand)",
    "insertText": "createReg(unsigned Reg)"
  },
  {
    "label": "createImm()",
    "kind": "Method",
    "detail": "Function (MCOperand Op ; Op . Kind = kRegister ; Op . RegVal = Reg ; return Op ; } MCOperand)",
    "insertText": "createImm(int64_t Val)"
  },
  {
    "label": "createFPImm()",
    "kind": "Method",
    "detail": "Function (MCOperand Op ; Op . Kind = kImmediate ; Op . ImmVal = Val ; return Op ; } MCOperand)",
    "insertText": "createFPImm(double Val)"
  },
  {
    "label": "createExpr()",
    "kind": "Method",
    "detail": "Function (MCOperand Op ; Op . Kind = kFPImmediate ; Op . FPImmVal = Val ; return Op ; } MCOperand)",
    "insertText": "createExpr(const MCExpr *Val)"
  },
  {
    "label": "createInst()",
    "kind": "Method",
    "detail": "Function (MCOperand Op ; Op . Kind = kExpr ; Op . ExprVal = Val ; return Op ; } MCOperand)",
    "insertText": "createInst(const MCInst *Val)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (MCOperand Op ; Op . Kind = kInst ; Op . InstVal = Val ; return Op ; } void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "MCInst()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct isPodLike<MCOperand> { const bool value = true ; } ; class MCInst { unsigned Opcode ; SMLoc Loc ; SmallVector<MCOperand,8> Operands ; public :)",
    "insertText": "MCInst() : Opcode(0)"
  },
  {
    "label": "setOpcode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOpcode(unsigned Op)"
  },
  {
    "label": "getOpcode()",
    "kind": "Method",
    "detail": "Function (Opcode = Op ; } unsigned)",
    "insertText": "getOpcode()"
  },
  {
    "label": "getLoc()",
    "kind": "Method",
    "detail": "Function (Loc = loc ; } SMLoc)",
    "insertText": "getLoc()"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addOperand(const MCOperand &Op)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Operands .)",
    "insertText": "push_back(Op)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} typedef SmallVectorImpl<MCOperand>::iterator iterator ; typedef SmallVectorImpl<MCOperand>::const_iterator const_iterator ; void)",
    "insertText": "clear()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase(iterator I)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Operands .)",
    "insertText": "erase(I)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(iterator I, const MCOperand &Op)"
  },
  {
    "label": "dump_pretty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump_pretty(raw_ostream &OS, const MCInstPrinter *Printer = nullptr, StringRef Separator = \" \")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const MCOperand &MO)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (MO .)",
    "insertText": "print(OS)"
  }
]