[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PartitionAllocSetCallNewHandlerOnMallocFailure()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_DEFAULT_DISPATCH_TO_PARTITION_ALLOC_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_DEFAULT_DISPATCH_TO_PARTITION_ALLOC_H_ # include \" base / allocator / partition_allocator / partition_alloc . h \" # include \" base / allocator / partition_allocator / shim / allocator_shim . h \" # include \" base / base_export . h \" namespace allocator_shim::internal { void)",
    "insertText": "PartitionAllocSetCallNewHandlerOnMallocFailure(bool value)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT PartitionAllocMalloc { public : partition_alloc::ThreadSafePartitionRoot*)",
    "insertText": "Allocator()"
  },
  {
    "label": "OriginalAllocator()",
    "kind": "Method",
    "detail": "Function (partition_alloc::ThreadSafePartitionRoot*)",
    "insertText": "OriginalAllocator()"
  },
  {
    "label": "AlignedAllocator()",
    "kind": "Method",
    "detail": "Function (partition_alloc::ThreadSafePartitionRoot*)",
    "insertText": "AlignedAllocator()"
  },
  {
    "label": "PartitionMalloc()",
    "kind": "Method",
    "detail": "Function (} ; BASE_EXPORT void*)",
    "insertText": "PartitionMalloc(const AllocatorDispatch*, size_t size, void* context)"
  },
  {
    "label": "PartitionMallocUnchecked()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "PartitionMallocUnchecked(const AllocatorDispatch*, size_t size, void* context)"
  },
  {
    "label": "PartitionCalloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "PartitionCalloc(const AllocatorDispatch*, size_t n, size_t size, void* context)"
  },
  {
    "label": "PartitionMemalign()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "PartitionMemalign(const AllocatorDispatch*, size_t alignment, size_t size, void* context)"
  },
  {
    "label": "PartitionAlignedAlloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "PartitionAlignedAlloc(const AllocatorDispatch* dispatch, size_t size, size_t alignment, void* context)"
  },
  {
    "label": "PartitionAlignedRealloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "PartitionAlignedRealloc(const AllocatorDispatch* dispatch, void* address, size_t size, size_t alignment, void* context)"
  },
  {
    "label": "PartitionRealloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "PartitionRealloc(const AllocatorDispatch*, void* address, size_t size, void* context)"
  },
  {
    "label": "PartitionFree()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "PartitionFree(const AllocatorDispatch*, void* object, void* context)"
  },
  {
    "label": "PartitionGetSizeEstimate()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "PartitionGetSizeEstimate(const AllocatorDispatch*, void* address, void* context)"
  }
]