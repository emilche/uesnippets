[
  {
    "label": "FAnalyticsProviderETEventCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalyticsProviderETEventCache"
  },
  {
    "label": "Lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lock"
  },
  {
    "label": "FAnalyticsEventEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventEntry"
  },
  {
    "label": "FAnalyticsProviderETEventCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnalyticsEventAttribute . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" Misc / DateTime . h \" # include \" Misc / ScopeLock . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" Misc / TransactionallySafeScopeLock . h \" class FAnalyticsProviderETEventCache { public :)",
    "insertText": "FAnalyticsProviderETEventCache(int32 MaximumPayloadSize = -1, int32 InPreallocatedPayloadSize = -1)"
  },
  {
    "label": "AddToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToCache(FString EventName, const TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "AddToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToCache(FString EventName)"
  },
  {
    "label": "SetDefaultAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultAttributes(TArray<FAnalyticsEventAttribute>&& DefaultAttributes)"
  },
  {
    "label": "GetDefaultAttributes()",
    "kind": "Method",
    "detail": "Function (TArray<FAnalyticsEventAttribute>)",
    "insertText": "GetDefaultAttributes()"
  },
  {
    "label": "GetDefaultAttributeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDefaultAttributeCount()"
  },
  {
    "label": "GetDefaultAttribute()",
    "kind": "Method",
    "detail": "Function (FAnalyticsEventAttribute)",
    "insertText": "GetDefaultAttribute(int32 AttributeIndex)"
  },
  {
    "label": "FlushCacheUTF8()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "FlushCacheUTF8()"
  },
  {
    "label": "CanFlush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFlush()"
  },
  {
    "label": "HasFlushesQueued()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFlushesQueued()"
  },
  {
    "label": "GetNumCachedEvents()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumCachedEvents()"
  },
  {
    "label": "SetPreallocatedPayloadSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreallocatedPayloadSize(int32 InSetPreallocatedPayloadSize)"
  },
  {
    "label": "GetSetPreallocatedPayloadSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSetPreallocatedPayloadSize()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (class Lock ; class Lock { public :)",
    "insertText": "Lock(FAnalyticsProviderETEventCache& EventCache) :ScopedLock(&EventCache.CachedEventsCS)"
  },
  {
    "label": "OnStartupModule()",
    "kind": "Method",
    "detail": "Function (} private : FTransactionallySafeScopeLock ScopedLock ; } ; void)",
    "insertText": "OnStartupModule()"
  },
  {
    "label": "QueueFlush()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "QueueFlush()"
  },
  {
    "label": "FAnalyticsEventEntry()",
    "kind": "Method",
    "detail": "Function (struct FAnalyticsEventEntry { FString EventName ; FDateTime TimeStamp ; int32 DateOffsetByteOffset ; int32 EventSizeChars ;)",
    "insertText": "FAnalyticsEventEntry(FString&& InEventName, int32 InDateOffsetByteOffset, int32 InEventSizeChars) : EventName(MoveTemp(InEventName)) , TimeStamp(FDateTime::UtcNow()) , DateOffsetByteOffset(InDateOffsetByteOffset) , EventSizeChars(InEventSizeChars)"
  }
]