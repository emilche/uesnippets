[
  {
    "label": "SSequencerFilterCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerFilterCheckBox"
  },
  {
    "label": "SetOnCtrlClick()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Framework / Application / SlateApplication . h \" # include \" Widgets / Input / SCheckBox . h \" class SSequencerFilterCheckBox : public SCheckBox { public : void)",
    "insertText": "SetOnCtrlClick(const FOnClicked& InNewCtrlClick)"
  },
  {
    "label": "SetOnAltClick()",
    "kind": "Method",
    "detail": "Function (OnCtrlClick = InNewCtrlClick ; } void)",
    "insertText": "SetOnAltClick(const FOnClicked& InNewAltClick)"
  },
  {
    "label": "SetOnMiddleButtonClick()",
    "kind": "Method",
    "detail": "Function (OnAltClick = InNewAltClick ; } void)",
    "insertText": "SetOnMiddleButtonClick(const FOnClicked& InNewMiddleButtonClick)"
  },
  {
    "label": "SetOnDoubleClick()",
    "kind": "Method",
    "detail": "Function (OnMiddleButtonClick = InNewMiddleButtonClick ; } void)",
    "insertText": "SetOnDoubleClick(const FOnClicked& InNewDoubleClick)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (OnDoubleClick = InNewDoubleClick ; } protected : FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& InGeometry, const FPointerEvent& InPointerEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InPointerEvent.IsAltDown() && OnAltClick.IsBound())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InPointerEvent.GetEffectingButton() == EKeys::MiddleMouseButton && OnMiddleButtonClick.IsBound())"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnMouseButtonUp(InGeometry, InPointerEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InGeometry, const FPointerEvent& InPointerEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "OnMouseButtonDoubleClick(InGeometry, InPointerEvent)"
  }
]