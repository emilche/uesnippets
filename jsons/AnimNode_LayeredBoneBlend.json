[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimNode_LayeredBoneBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LayeredBoneBlend"
  },
  {
    "label": "ECurveBlendOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECurveBlendOption"
  },
  {
    "label": "UAnimGraphNode_LayeredBoneBlend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_LayeredBoneBlend"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / AnimData / BoneMaskFilter . h \" # include \" AnimNode_LayeredBoneBlend . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (BranchFilter,BlendMask,} ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Links)"
  },
  {
    "label": "FAnimNode_LayeredBoneBlend()",
    "kind": "Method",
    "detail": "Function (bool bHasRelevantPoses ;)",
    "insertText": "FAnimNode_LayeredBoneBlend() : BlendMode(ELayeredBoneBlendMode::BranchFilter) , RequiredBonesSerialNumber(0) , LODThreshold(INDEX_NONE) , bMeshSpaceRotationBlend(false) , bMeshSpaceScaleBlend(false) , CurveBlendOption(ECurveBlendOption::Override) , bBlendRootMotionBasedOnRootBone(true) , bHasRelevantPoses(false)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "GetLODThreshold()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODThreshold()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BlendWeights .)",
    "insertText": "Add(1.f)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (BlendPoses .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BlendMasks .)",
    "insertText": "Add(nullptr)"
  },
  {
    "label": "RemovePose()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemovePose(int32 PoseIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (BlendWeights .)",
    "insertText": "RemoveAt(PoseIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LayerSetup.IsValidIndex(PoseIndex))"
  },
  {
    "label": "SetBlendMask()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBlendMask(int32 InPoseIndex, UBlendProfile* InBlendMask)"
  },
  {
    "label": "InvalidatePerBoneBlendWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePerBoneBlendWeights()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (RequiredBonesSerialNumber = 0 ; SkeletonGuid =)",
    "insertText": "FGuid()"
  },
  {
    "label": "InvalidateCachedBoneData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateCachedBoneData()"
  },
  {
    "label": "RebuildPerBoneBlendWeights()",
    "kind": "Method",
    "detail": "Function (RequiredBonesSerialNumber = 0 ; } private : void)",
    "insertText": "RebuildPerBoneBlendWeights(const USkeleton* InSkeleton)"
  },
  {
    "label": "ArePerBoneBlendWeightsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePerBoneBlendWeightsValid(const USkeleton* InSkeleton)"
  },
  {
    "label": "UpdateCachedBoneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedBoneData(const FBoneContainer& RequiredBones, const USkeleton* Skeleton)"
  }
]