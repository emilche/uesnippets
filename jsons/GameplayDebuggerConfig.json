[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FGameplayDebuggerInputModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerInputModifier"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGameplayDebuggerInputConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerInputConfig"
  },
  {
    "label": "FGameplayDebuggerCategoryConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerCategoryConfig"
  },
  {
    "label": "FGameplayDebuggerExtensionConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerExtensionConfig"
  },
  {
    "label": "UGameplayDebuggerConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayDebuggerConfig"
  },
  {
    "label": "FPropertyChangedChainEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedChainEvent"
  },
  {
    "label": "UGameplayDebuggerUserSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayDebuggerUserSettings"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Engine / DeveloperSettings . h \" # include \" HAL / Platform . h \" # include \" InputCoreTypes . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" GameplayDebuggerConfig . generated . h \" class FArchive ; struct FGameplayDebuggerInputModifier ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Enable,Disable,UseDefault,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FGameplayDebuggerInputConfig() : bModShift(false) , bModCtrl(false) , bModAlt(false) , bModCmd(false)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(VisibleAnywhere, Category = Settings)"
  },
  {
    "label": "FGameplayDebuggerCategoryConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayDebuggerCategoryConfig() : SlotIdx(0) , ActiveInGame(EGameplayDebuggerOverrideMode::UseDefault) , ActiveInSimulate(EGameplayDebuggerOverrideMode::UseDefault) , Hidden(EGameplayDebuggerOverrideMode::UseDefault) , bOverrideSlotIdx(false)"
  },
  {
    "label": "FGameplayDebuggerExtensionConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayDebuggerExtensionConfig() : UseExtension(EGameplayDebuggerOverrideMode::UseDefault)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(config = Engine, defaultconfig, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(config, EditAnywhere, Category = Input)"
  },
  {
    "label": "UpdateCategoryConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCategoryConfig(const FName CategoryName, int32& SlotIdx, uint8& CategoryState)"
  },
  {
    "label": "UpdateCategoryInputConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCategoryInputConfig(const FName CategoryName, const FName InputName, FName& KeyName, FGameplayDebuggerInputModifier& KeyModifier)"
  },
  {
    "label": "UpdateExtensionConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExtensionConfig(const FName ExtensionName, uint8& UseExtension)"
  },
  {
    "label": "UpdateExtensionInputConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExtensionInputConfig(const FName ExtensionName, const FName InputName, FName& KeyName, FGameplayDebuggerInputModifier& KeyModifier)"
  },
  {
    "label": "RemoveUnknownConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnknownConfigs()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeChainProperty(struct FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif private : TArray<FName> KnownCategoryNames ; TArray<FName> KnownExtensionNames ; TMultiMap<FName,FName> KnownCategoryInputNames ; TMultiMap<FName,FName> KnownExtensionInputNames ; } ;)",
    "insertText": "UCLASS(config = EditorPerProjectUserSettings, meta = (DisplayName = \"Gameplay Debugger\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: virtual FName GetCategoryName()"
  },
  {
    "label": "GetFontSize()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "GetFontSize()"
  },
  {
    "label": "SetFontSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFontSize(const int32 InFontSize)"
  }
]