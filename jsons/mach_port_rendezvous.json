[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MachPortRendezvousServerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachPortRendezvousServerTest"
  },
  {
    "label": "MachPortRendezvousFuzzer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachPortRendezvousFuzzer"
  },
  {
    "label": "ClientData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClientData"
  },
  {
    "label": "MachRendezvousPort()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_MACH_PORT_RENDEZVOUS_H_ # define BASE_MAC_MACH_PORT_RENDEZVOUS_H_ # include<dispatch / dispatch . h> # include<mach / mach . h> # include<stdint . h> # include<sys / types . h> # include<map> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / mac / dispatch_source_mach . h \" # include \" base / mac / scoped_dispatch_object . h \" # include \" base / mac / scoped_mach_port . h \" # include \" base / synchronization / lock . h \" # include \" base / thread_annotations . h \" namespace base { class BASE_EXPORT MachRendezvousPort { public :)",
    "insertText": "MachRendezvousPort()"
  },
  {
    "label": "MachRendezvousPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachRendezvousPort(mach_port_t name, mach_msg_type_name_t disposition)"
  },
  {
    "label": "MachRendezvousPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachRendezvousPort(mac::ScopedMachSendRight send_right)"
  },
  {
    "label": "MachRendezvousPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachRendezvousPort(mac::ScopedMachReceiveRight receive_right)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (mach_port_t)",
    "insertText": "name()"
  },
  {
    "label": "MachPortRendezvousServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachPortRendezvousServer(const MachPortRendezvousServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MachPortRendezvousServer&)",
    "insertText": "operator(const MachPortRendezvousServer&)"
  },
  {
    "label": "RegisterPortsForPid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPortsForPid(pid_t pid, const MachPortsForRendezvous& ports) EXCLUSIVE_LOCKS_REQUIRED(GetLock())"
  },
  {
    "label": "GetLock()",
    "kind": "Method",
    "detail": "Function (Lock&)",
    "insertText": "GetLock() LOCK_RETURNED(lock_)"
  },
  {
    "label": "ClientData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientData(ClientData&&)"
  },
  {
    "label": "ClientData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ClientData()"
  },
  {
    "label": "MachPortRendezvousServer()",
    "kind": "Method",
    "detail": "Function (ScopedDispatchObject<dispatch_source_t> exit_watcher ; MachPortsForRendezvous ports ; } ;)",
    "insertText": "MachPortRendezvousServer()"
  },
  {
    "label": "HandleRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequest()"
  },
  {
    "label": "PortsForPid()",
    "kind": "Method",
    "detail": "Function (MachPortsForRendezvous)",
    "insertText": "PortsForPid(pid_t pid)"
  },
  {
    "label": "CreateReplyMessage()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<uint8_t [ ]>)",
    "insertText": "CreateReplyMessage(mach_port_t reply_port, const MachPortsForRendezvous& ports)"
  },
  {
    "label": "OnClientExited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClientExited(pid_t pid)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (mac::ScopedMachReceiveRight server_port_ ; std::unique_ptr<DispatchSourceMach> dispatch_source_ ; Lock lock_ ; std::map<pid_t,ClientData> client_data_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT MachPortRendezvousClient { public : MachPortRendezvousClient*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "MachPortRendezvousClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachPortRendezvousClient(const MachPortRendezvousClient&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MachPortRendezvousClient&)",
    "insertText": "operator(const MachPortRendezvousClient&)"
  },
  {
    "label": "TakeSendRight()",
    "kind": "Method",
    "detail": "Function (mac::ScopedMachSendRight)",
    "insertText": "TakeSendRight(MachPortsForRendezvous::key_type key)"
  },
  {
    "label": "TakeReceiveRight()",
    "kind": "Method",
    "detail": "Function (mac::ScopedMachReceiveRight)",
    "insertText": "TakeReceiveRight(MachPortsForRendezvous::key_type key)"
  },
  {
    "label": "GetPortCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetPortCount()"
  },
  {
    "label": "GetBootstrapName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetBootstrapName()"
  },
  {
    "label": "MachPortRendezvousClient()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "MachPortRendezvousClient()"
  },
  {
    "label": "AcquirePorts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AcquirePorts()"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRequest(mac::ScopedMachSendRight server_port) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "PortForKey()",
    "kind": "Method",
    "detail": "Function (MachRendezvousPort)",
    "insertText": "PortForKey(MachPortsForRendezvous::key_type key)"
  }
]