[
  {
    "label": "buffer_element_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "buffer_element_type"
  },
  {
    "label": "hash_buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hash_buffer"
  },
  {
    "label": "DoCleanup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DoCleanup"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__flow_graph_hash_buffer_impl_H # define __TBB__flow_graph_hash_buffer_impl_H # ifndef __TBB_flow_graph_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif template<ValueType> struct buffer_element_type { typedef aligned_pair<ValueType,void*>::type type ; } ; template<Key,ValueType,ValueToKey,HashCompare,Allocator = tbb::cache_aligned_allocator<aligned_pair<ValueType,void*>::type>> class hash_buffer : public HashCompare { public : const size_t INITIAL_SIZE = 8 ; typedef ValueType value_type ; typedef buffer_element_type<value_type>::type element_type ; typedef value_type* pointer_type ; typedef element_type* list_array_type ; typedef list_array_type* pointer_array_type ; typedef Allocator::template rebind<list_array_type>::other pointer_array_allocator_type ; typedef Allocator::template rebind<element_type>::other elements_array_allocator ; typedef tbb::internal::strip<Key>::type Knoref ; private : ValueToKey* my_key ; size_t my_size ; size_t nelements ; pointer_array_type pointer_array ; list_array_type elements_array ; element_type* free_list ; size_t)",
    "insertText": "mask()"
  },
  {
    "label": "second()",
    "kind": "Method",
    "detail": "Function (la [ i ] .)",
    "insertText": "second(la[i+1])"
  },
  {
    "label": "p_free_list()",
    "kind": "Method",
    "detail": "Function (} la [ sz - 1 ] . second = NULL ;*)",
    "insertText": "p_free_list(element_type *)&(la[0])"
  },
  {
    "label": "DoCleanup()",
    "kind": "Method",
    "detail": "Function (} struct DoCleanup { pointer_array_type* my_pa ; list_array_type* my_elements ; size_t my_size ;)",
    "insertText": "DoCleanup(pointer_array_type &pa, list_array_type &my_els, size_t sz) : my_pa(&pa), my_elements(&my_els), my_size(sz)"
  },
  {
    "label": "DoCleanup()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DoCleanup()"
  },
  {
    "label": "internal_free_buffer()",
    "kind": "Method",
    "detail": "Function (size_t dont_care = 0 ;)",
    "insertText": "internal_free_buffer(*my_pa, *my_elements, my_size, dont_care)"
  },
  {
    "label": "grow_array()",
    "kind": "Method",
    "detail": "Function (} } } ; void)",
    "insertText": "grow_array()"
  },
  {
    "label": "my_cleanup()",
    "kind": "Method",
    "detail": "Function (size_t new_size = my_size* 2 ; size_t new_nelements = nelements ; list_array_type new_elements_array = NULL ; pointer_array_type new_pointer_array = NULL ; list_array_type new_free_list = NULL ; { DoCleanup)",
    "insertText": "my_cleanup(new_pointer_array, new_elements_array, new_size)"
  },
  {
    "label": "elements_array_allocator()",
    "kind": "Method",
    "detail": "Function (new_elements_array =)",
    "insertText": "elements_array_allocator().allocate(my_size)"
  },
  {
    "label": "pointer_array_allocator_type()",
    "kind": "Method",
    "detail": "Function (new_pointer_array =)",
    "insertText": "pointer_array_allocator_type().allocate(new_size)"
  },
  {
    "label": "set_up_free_list()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_up_free_list(&new_free_list, new_elements_array, my_size)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (value_type* ov = reinterpret_cast<)",
    "insertText": "value_type(&(op->first))"
  },
  {
    "label": "internal_insert_with_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_insert_with_key(new_pointer_array, new_size, new_free_list, *ov)"
  },
  {
    "label": "internal_free_buffer()",
    "kind": "Method",
    "detail": "Function (} } my_cleanup . my_pa = NULL ; my_cleanup . my_elements = NULL ; })",
    "insertText": "internal_free_buffer(pointer_array, elements_array, my_size, nelements)"
  },
  {
    "label": "internal_insert_with_key()",
    "kind": "Method",
    "detail": "Function (free_list = new_free_list ; pointer_array = new_pointer_array ; elements_array = new_elements_array ; my_size = new_size ; nelements = new_nelements ; } void)",
    "insertText": "internal_insert_with_key(element_type **p_pointer_array, size_t p_sz, list_array_type &p_free_list, const value_type &v)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (size_t l_mask = p_sz - 1 ;)",
    "insertText": "__TBB_ASSERT(my_key, \"Error: value-to-key functor not provided\")"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (size_t h = this ->)",
    "insertText": "hash((*my_key)(v))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(p_free_list, \"Error: free list not set up.\")"
  },
  {
    "label": "p_free_list()",
    "kind": "Method",
    "detail": "Function (element_type* my_elem = p_free_list ;)",
    "insertText": "p_free_list(element_type *)(p_free_list->second)"
  },
  {
    "label": "internal_initialize_buffer()",
    "kind": "Method",
    "detail": "Function (my_elem -> second = p_pointer_array [ h ] ; p_pointer_array [ h ] = my_elem ; } void)",
    "insertText": "internal_initialize_buffer()"
  },
  {
    "label": "pointer_array_allocator_type()",
    "kind": "Method",
    "detail": "Function (pointer_array =)",
    "insertText": "pointer_array_allocator_type().allocate(my_size)"
  },
  {
    "label": "elements_array_allocator()",
    "kind": "Method",
    "detail": "Function (elements_array =)",
    "insertText": "elements_array_allocator().allocate(my_size / 2)"
  },
  {
    "label": "set_up_free_list()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_up_free_list(&free_list, elements_array, my_size / 2)"
  },
  {
    "label": "internal_free_buffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_free_buffer(pointer_array_type &pa, list_array_type &el, size_t &sz, size_t &ne)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (element_type* p_next ;)",
    "insertText": "for(element_type *p = pa[i]; p; p = p_next)"
  },
  {
    "label": "p_next()",
    "kind": "Method",
    "detail": "Function (second)",
    "insertText": "p_next(element_type *)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (internal::punned_cast<)",
    "insertText": "value_type(&(p->first))->~value_type()"
  },
  {
    "label": "pointer_array_allocator_type()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "pointer_array_allocator_type().deallocate(pa, sz)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pa = NULL ; })",
    "insertText": "if(el)"
  },
  {
    "label": "elements_array_allocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "elements_array_allocator().deallocate(el, sz / 2)"
  },
  {
    "label": "hash_buffer()",
    "kind": "Method",
    "detail": "Function (el = NULL ; } sz = INITIAL_SIZE ; ne = 0 ; } public :)",
    "insertText": "hash_buffer() : my_key(NULL), my_size(INITIAL_SIZE), nelements(0)"
  },
  {
    "label": "hash_buffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "hash_buffer()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "set_key_func()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_key_func(ValueToKey *vtk)"
  },
  {
    "label": "get_key_func()",
    "kind": "Method",
    "detail": "Function (my_key = vtk ; } ValueToKey*)",
    "insertText": "get_key_func()"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (p -> ~)",
    "insertText": "value_type()"
  },
  {
    "label": "internal_insert_with_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_insert_with_key(pointer_array, my_size, free_list, v)"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (size_t i = this ->)",
    "insertText": "hash(k) & mask()"
  },
  {
    "label": "pointer_type()",
    "kind": "Method",
    "detail": "Function (pointer_type pv = reinterpret_cast<)",
    "insertText": "pointer_type(&(p->first))"
  },
  {
    "label": "find_with_key()",
    "kind": "Method",
    "detail": "Function (v = pv ; return true ; } } return false ; } bool)",
    "insertText": "find_with_key(const Knoref& k, value_type &v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (value_type* p ;)",
    "insertText": "if(find_ref_with_key(k, p))"
  },
  {
    "label": "delete_with_key()",
    "kind": "Method",
    "detail": "Function (v =* p ; return true ; } else return false ; } void)",
    "insertText": "delete_with_key(const Knoref& k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (element_type* prev = NULL ;)",
    "insertText": "for(element_type* p = pointer_array[h]; p; prev = p, p = (element_type *)(p->second))"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (value_type* vp = reinterpret_cast<)",
    "insertText": "value_type(&(p->first))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (p -> second = free_list ; free_list = p ; - - nelements ; return ; } })",
    "insertText": "__TBB_ASSERT(false, \"key not found for delete\")"
  }
]