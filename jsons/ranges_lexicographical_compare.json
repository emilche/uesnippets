[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_Sent2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent2"
  },
  {
    "label": "_Proj1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj1"
  },
  {
    "label": "_Proj2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj2"
  },
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_LEXICOGRAPHICAL_COMPARE_H # define _LIBCPP___ALGORITHM_RANGES_LEXICOGRAPHICAL_COMPARE_H # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__lexicographical_compare_impl()",
    "kind": "Method",
    "detail": "Function (namespace __lexicographical_compare { struct __fn { template<class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Proj1,class _Proj2,class _Comp> _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__lexicographical_compare_impl(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Comp& __comp, _Proj1& __proj1, _Proj2& __proj2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; + + __first2 ; } return false ; } template<input_iterator _Iter1,sentinel_for<_Iter1> _Sent1,input_iterator _Iter2,sentinel_for<_Iter2> _Sent2,class _Proj1 = identity,class _Proj2 = identity,indirect_strict_weak_order<projected<_Iter1,_Proj1>,projected<_Iter2,_Proj2>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range1,input_range _Range2,class _Proj1 = identity,class _Proj2 = identity,indirect_strict_weak_order<projected<iterator_t<_Range1>,_Proj1>,projected<iterator_t<_Range2>,_Proj2>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator()(_Range1&& __range1, _Range2&& __range2, _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {})"
  }
]