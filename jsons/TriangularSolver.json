[
  {
    "label": "sparse_solve_triangular_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_solve_triangular_selector"
  },
  {
    "label": "sparse_solve_triangular_sparse_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_solve_triangular_sparse_selector"
  },
  {
    "label": "UpLo()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSETRIANGULARSOLVER_H # define EIGEN_SPARSETRIANGULARSOLVER_H namespace Eigen { namespace internal { template<Lhs,Rhs,int Mode,int)",
    "insertText": "UpLo(Mode & Lower) ? Lower : (Mode & Upper) ? Upper : -1, int StorageOrder = int(traits<Lhs>::Flags)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<Lhs,Rhs,int Mode> struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Lower,RowMajor> { typedef Rhs::Scalar Scalar ; typedef evaluator<Lhs> LhsEval ; typedef evaluator<Lhs>::InnerIterator LhsIterator ; void)",
    "insertText": "run(const Lhs& lhs, Rhs& other)"
  },
  {
    "label": "lhsEval()",
    "kind": "Method",
    "detail": "Function (LhsEval)",
    "insertText": "lhsEval(lhs)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar tmp = other .)",
    "insertText": "coeff(i,col)"
  },
  {
    "label": "lastVal()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lastVal(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index lastIndex = 0 ;)",
    "insertText": "for(LhsIterator it(lhsEval, i); it; ++it)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (lastVal = it .)",
    "insertText": "value()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (lastIndex = it .)",
    "insertText": "index()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (tmp - = lastVal* other .)",
    "insertText": "coeff(lastIndex,col)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Mode & UnitDiag) other.coeffRef(i,col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "coeffRef(i,col)"
  },
  {
    "label": "l_ii()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "l_ii(0)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (LhsIterator)",
    "insertText": "it(lhsEval, i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(it && it.index()==i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + it ; } else)",
    "insertText": "if(it && it.index() == i)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (tmp - = it .)",
    "insertText": "value() * other.coeff(it.index(),col)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(it && it.index()==i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "coeffRef(i,col) /= it.value()"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (} } } } } ; } # ifndef EIGEN_PARSED_BY_DOXYGEN template<ExpressionType,unsigned int Mode> template<OtherDerived> void TriangularViewImpl<ExpressionType,Mode,Sparse)",
    "insertText": "solveInPlace(MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(derived().cols() == derived().rows() && derived().cols() == other.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((!(Mode & ZeroDiag)) && bool(Mode & (Upper|Lower)))"
  },
  {
    "label": "otherCopy()",
    "kind": "Method",
    "detail": "Function (enum { copy = internal::traits<OtherDerived>::Flags& RowMajorBit } ; typedef internal::conditional<copy,internal::plain_matrix_type_column_major<OtherDerived>::type,OtherDerived&>::type OtherCopy ; OtherCopy)",
    "insertText": "otherCopy(other.derived())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::sparse_solve_triangular_selector<ExpressionType,internal::remove_reference<OtherCopy>::type,Mode)",
    "insertText": "run(derived().nestedExpression(), otherCopy)"
  },
  {
    "label": "UpLo()",
    "kind": "Method",
    "detail": "Function (} # endif namespace internal { template<Lhs,Rhs,int Mode,int)",
    "insertText": "UpLo(Mode & Lower) ? Lower : (Mode & Upper) ? Upper : -1, int StorageOrder = int(Lhs::Flags) & (RowMajorBit)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsLower(UpLo==Lower)"
  },
  {
    "label": "tempVector()",
    "kind": "Method",
    "detail": "Function (AmbiVector<Scalar,StorageIndex>)",
    "insertText": "tempVector(other.rows()*2)"
  },
  {
    "label": "setBounds()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "setBounds(0,other.rows())"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (Rhs)",
    "insertText": "res(other.rows(), other.cols())"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "reserve(other.nonZeros())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "init(.99)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "setZero()"
  },
  {
    "label": "restart()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "restart()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "coeffRef(rhsIt.index()) = rhsIt.value()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i=IsLower?0:lhs.cols()-1; IsLower?i<lhs.cols():i>=0; i+=IsLower?1:-1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (Scalar& ci = tempVector .)",
    "insertText": "coeffRef(i)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (Lhs::InnerIterator)",
    "insertText": "it(lhs, i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(it.index()==i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else ci / = lhs .)",
    "insertText": "coeff(i,i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(; it && it.index()<i; ++it) tempVector.coeffRef(it.index()) -= ci * it.value()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } Index count = 0 ;)",
    "insertText": "for(typename AmbiVector<Scalar,StorageIndex>::Iterator it(tempVector ); it; ++it)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (+ + count ; res .)",
    "insertText": "insert(it.index(), col) = it.value()"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} } res .)",
    "insertText": "finalize()"
  },
  {
    "label": "markAsRValue()",
    "kind": "Method",
    "detail": "Function (other = res .)",
    "insertText": "markAsRValue()"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (} } ; } # ifndef EIGEN_PARSED_BY_DOXYGEN template<ExpressionType,unsigned int Mode> template<OtherDerived> void TriangularViewImpl<ExpressionType,Mode,Sparse)",
    "insertText": "solveInPlace(SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::sparse_solve_triangular_sparse_selector<ExpressionType,OtherDerived,Mode)",
    "insertText": "run(derived().nestedExpression(), other.derived())"
  }
]