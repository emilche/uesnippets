[
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FCharacterGroundConstraintProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintProxy"
  },
  {
    "label": "FJointConstraintPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointConstraintPhysicsProxy"
  },
  {
    "label": "TBasePullData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBasePullData"
  },
  {
    "label": "FDirtyRigidParticleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyRigidParticleData"
  },
  {
    "label": "FDirtyRigidParticleReplicationErrorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyRigidParticleReplicationErrorData"
  },
  {
    "label": "FDirtyGeometryCollectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyGeometryCollectionData"
  },
  {
    "label": "FDirtyClusterUnionParticleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyClusterUnionParticleData"
  },
  {
    "label": "FDirtyClusterUnionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyClusterUnionData"
  },
  {
    "label": "FJointConstraintOutputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJointConstraintOutputData"
  },
  {
    "label": "FJointConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointConstraint"
  },
  {
    "label": "FDirtyJointConstraintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyJointConstraintData"
  },
  {
    "label": "FDirtyCharacterGroundConstraintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyCharacterGroundConstraintData"
  },
  {
    "label": "FPullPhysicsData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPullPhysicsData"
  },
  {
    "label": "SetProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Queue . h \" # include \" Chaos / Defines . h \" # include \" Chaos / ParticleDirtyFlags . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / ParallelFor . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxyFwd . h \" # include \" GeometryCollectionProxyData . h \" # include \" PBDRigidsEvolutionFwd . h \" namespace Chaos { class FClusterUnionPhysicsProxy ; class FCharacterGroundConstraintProxy ; class FJointConstraintPhysicsProxy ; template<TProxy,TTimeStamp> struct TBasePullData { public : void)",
    "insertText": "SetProxy(TProxy& InProxy)"
  },
  {
    "label": "GetSyncTimestamp()",
    "kind": "Method",
    "detail": "Function (Timestamp = InProxy .)",
    "insertText": "GetSyncTimestamp()"
  },
  {
    "label": "GetProxy()",
    "kind": "Method",
    "detail": "Function (Proxy =& InProxy ; } TProxy*)",
    "insertText": "GetProxy()"
  },
  {
    "label": "TBasePullData()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TBasePullData() : Proxy(nullptr)"
  },
  {
    "label": "TBasePullData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TBasePullData()"
  },
  {
    "label": "HasResults()",
    "kind": "Method",
    "detail": "Function (private : TProxy* Proxy ; TSharedPtr<FProxyTimestampBase,ESPMode::ThreadSafe> Timestamp ; } ; struct FDirtyRigidParticleData : public TBasePullData<FSingleParticlePhysicsProxy,FSingleParticleProxyTimestamp> { FVec3 X ; FQuat R ; FVec3 V ; FVec3 W ; EObjectStateType ObjectState ; } ; struct FDirtyRigidParticleReplicationErrorData : public TBasePullData<FSingleParticlePhysicsProxy,FSingleParticleProxyTimestamp> { FVec3 ErrorX ; FQuat ErrorR ; } ; struct FDirtyGeometryCollectionData : public TBasePullData<FGeometryCollectionPhysicsProxy,FProxyTimestampBase> { public : bool)",
    "insertText": "HasResults()"
  },
  {
    "label": "FDirtyGeometryCollectionData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDirtyGeometryCollectionData() : ResultPtr(new FGeometryCollectionResults)"
  },
  {
    "label": "FDirtyGeometryCollectionData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDirtyGeometryCollectionData(const FDirtyGeometryCollectionData& Other)"
  },
  {
    "label": "FDirtyGeometryCollectionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDirtyGeometryCollectionData(FDirtyGeometryCollectionData&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDirtyGeometryCollectionData&)",
    "insertText": "operator(const FDirtyGeometryCollectionData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDirtyGeometryCollectionData&)",
    "insertText": "operator(FDirtyGeometryCollectionData&& Other)"
  },
  {
    "label": "Results()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionResults&)",
    "insertText": "Results()"
  },
  {
    "label": "FDirtyClusterUnionData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDirtyClusterUnionData(const FDirtyClusterUnionData&)"
  },
  {
    "label": "FDirtyClusterUnionData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDirtyClusterUnionData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Chaos::FDirtyClusterUnionData&)",
    "insertText": "operator(const Chaos::FDirtyClusterUnionData &)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (TArray<FCollisionData> CollisionData ; TArray<FCollisionFilterData> QueryData ; TArray<FCollisionFilterData> SimData ; } ; struct FJointConstraintOutputData { bool bIsBreaking = false ; bool bIsBroken = false ; bool bIsViolating = false ; bool bDriveTargetChanged = false ; FVector Force =)",
    "insertText": "FVector(0)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (float LinearViolation = 0 . f ; float AngularViolation = 0 . f ; } ; class FJointConstraint ; struct FDirtyJointConstraintData : public TBasePullData<FJointConstraintPhysicsProxy,FProxyTimestampBase> { FJointConstraintOutputData OutputData ; } ; struct FDirtyCharacterGroundConstraintData : public TBasePullData<FCharacterGroundConstraintProxy,FProxyTimestampBase> { FVector Force =)",
    "insertText": "FVector(0.0)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector GroundNormal =)",
    "insertText": "FVector(0.0, 0.0, 1.0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FReal TargetDeltaFacing = 0 . 0 ; FReal GroundDistance = 0 . 0 ; FGeometryParticleHandle* GroundParticle = nullptr ; } ; class FPullPhysicsData { public : TArray<FDirtyRigidParticleData> DirtyRigids ; TMap<const IPhysicsProxyBase*,FDirtyRigidParticleReplicationErrorData> DirtyRigidErrors ; TArray<FDirtyGeometryCollectionData> DirtyGeometryCollections ; TArray<FDirtyClusterUnionData> DirtyClusterUnions ; TArray<FDirtyJointConstraintData> DirtyJointConstraints ; TArray<FDirtyCharacterGroundConstraintData> DirtyCharacterGroundConstraints ; int32 SolverTimestamp ; FReal ExternalStartTime ; FReal ExternalEndTime ; void)",
    "insertText": "Reset()"
  }
]