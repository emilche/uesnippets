[
  {
    "label": "TurnPortFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnPortFactory"
  },
  {
    "label": "TurnPortFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_CLIENT_TURN_PORT_FACTORY_H_ # define P2P_CLIENT_TURN_PORT_FACTORY_H_ # include<memory> # include \" p2p / base / port . h \" # include \" p2p / client / relay_port_factory_interface . h \" # include \" rtc_base / async_packet_socket . h \" namespace cricket { class TurnPortFactory : public RelayPortFactoryInterface { public : ~)",
    "insertText": "TurnPortFactory()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Port>)",
    "insertText": "Create(const CreateRelayPortArgs& args, rtc::AsyncPacketSocket* udp_socket)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Port>)",
    "insertText": "Create(const CreateRelayPortArgs& args, int min_port, int max_port)"
  }
]