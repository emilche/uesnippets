[
  {
    "label": "FAlphaBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphaBlend"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FBlendedCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedCurve"
  },
  {
    "label": "FSlotEvaluationPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlotEvaluationPose"
  },
  {
    "label": "FStackAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackAttributeContainer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBlendProfileBoneEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendProfileBoneEntry"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" BoneContainer . h \" # include \" AnimationRuntime . h \" # include \" BlendProfile . generated . h \" struct FAlphaBlend ; struct FCompactPose ; struct FBlendedCurve ; struct FSlotEvaluationPose ; namespace UE { namespace Anim { struct FStackAttributeContainer ; } })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (TimeFactor = 0,WeightFactor,BlendMask)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=BoneSettings)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Within=Skeleton, MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() ENGINE_API UBlendProfile()"
  },
  {
    "label": "GetNumBlendEntries()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBlendEntries()"
  },
  {
    "label": "SetBoneBlendScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBoneBlendScale(int32 InBoneIdx, float InScale, bool bRecurse = false, bool bCreate = false)"
  },
  {
    "label": "SetBoneBlendScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneBlendScale(const FName& InBoneName, float InScale, bool bRecurse = false, bool bCreate = false)"
  },
  {
    "label": "RemoveEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntry(int32 InBoneIdx)"
  },
  {
    "label": "RefreshBoneEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneEntry(int32 InBoneIndex)"
  },
  {
    "label": "RefreshBoneEntriesFromName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneEntriesFromName()"
  },
  {
    "label": "CleanupBoneEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupBoneEntries()"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (const FBlendProfileBoneEntry&)",
    "insertText": "GetEntry(const int32 InEntryIdx)"
  },
  {
    "label": "GetBoneBlendScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBoneBlendScale(int32 InBoneIdx)"
  },
  {
    "label": "GetBoneBlendScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBoneBlendScale(const FName& InBoneName)"
  },
  {
    "label": "GetEntryIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetEntryIndex(const FSkeletonPoseBoneIndex InBoneIdx)"
  },
  {
    "label": "GetEntryIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetEntryIndex(const FName& BoneName)"
  },
  {
    "label": "GetEntryBlendScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEntryBlendScale(const int32 InEntryIdx)"
  },
  {
    "label": "UpdateBoneWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoneWeights(FBlendSampleData& InOutCurrentData, const FAlphaBlend& BlendInfo, float BlendStartAlpha, float MainWeight, bool bInverse = false)"
  },
  {
    "label": "CalculateBoneWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateBoneWeight(float BoneFactor, EBlendProfileMode Mode, const FAlphaBlend& BlendInfo, float BlendStartAlpha, float MainWeight, bool bInverse = false)"
  },
  {
    "label": "FillBoneScalesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBoneScalesArray(TArray<float>& OutBoneBlendProfileFactors, const FBoneContainer& BoneContainer)"
  },
  {
    "label": "FillSkeletonBoneDurationsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSkeletonBoneDurationsArray(TCustomBoneIndexArrayView<float, FSkeletonPoseBoneIndex> OutDurationPerBone, float Duration, const USkeleton* TargetSkeleton)"
  },
  {
    "label": "GetPerBoneInterpolationIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPerBoneInterpolationIndex(const FCompactPoseBoneIndex& InCompactPoseBoneIndex, const FBoneContainer& BoneContainer, const IInterpolationIndexProvider::FPerBoneInterpolationData* Data)"
  },
  {
    "label": "GetPerBoneInterpolationIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPerBoneInterpolationIndex(const FSkeletonPoseBoneIndex InSkeletonBoneIndex, const USkeleton* TargetSkeleton, const IInterpolationIndexProvider::FPerBoneInterpolationData* Data)"
  },
  {
    "label": "IsSafeForRootSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSafeForRootSet()"
  },
  {
    "label": "GetDefaultBlendScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDefaultBlendScale()"
  },
  {
    "label": "IsBlendMask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBlendMask()"
  },
  {
    "label": "SetSingleBoneBlendScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSingleBoneBlendScale(int32 InBoneIdx, float InScale, bool bCreate = false)"
  }
]