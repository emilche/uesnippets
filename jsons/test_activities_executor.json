[
  {
    "label": "TestActivitiesExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestActivitiesExecutor"
  },
  {
    "label": "ScheduledActivity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScheduledActivity"
  },
  {
    "label": "TestActivitiesExecutor()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_TEST_ACTIVITIES_EXECUTOR_H_ # define TEST_PC_E2E_TEST_ACTIVITIES_EXECUTOR_H_ # include<queue> # include<vector> # include \" absl / types / optional . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { namespace webrtc_pc_e2e { class TestActivitiesExecutor { public :)",
    "insertText": "TestActivitiesExecutor(Clock* clock) : clock_(clock)"
  },
  {
    "label": "TestActivitiesExecutor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TestActivitiesExecutor()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(TaskQueueForTest* task_queue)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(task_queue->Get())"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(TaskQueueBase* task_queue)"
  },
  {
    "label": "ScheduleActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleActivity(TimeDelta initial_delay_since_start, absl::optional<TimeDelta> interval, std::function<void(TimeDelta)> func)"
  },
  {
    "label": "ScheduledActivity()",
    "kind": "Method",
    "detail": "Function (private : struct ScheduledActivity {)",
    "insertText": "ScheduledActivity(TimeDelta initial_delay_since_start, absl::optional<TimeDelta> interval, std::function<void(TimeDelta)> func)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TimeDelta initial_delay_since_start ; absl::optional<TimeDelta> interval ; std::function<)",
    "insertText": "void(TimeDelta)"
  },
  {
    "label": "PostActivity()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PostActivity(ScheduledActivity activity) RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "Now()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; TaskQueueBase* task_queue_ ; Mutex lock_ ; Timestamp start_time_)",
    "insertText": "RTC_GUARDED_BY(lock_) = Timestamp::MinusInfinity()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::queue<ScheduledActivity> scheduled_activities_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]