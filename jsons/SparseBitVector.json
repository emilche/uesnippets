[
  {
    "label": "SparseBitVectorElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseBitVectorElement"
  },
  {
    "label": "ilist_sentinel_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_sentinel_traits"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "SparseBitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseBitVector"
  },
  {
    "label": "SparseBitVectorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseBitVectorIterator"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SPARSEBITVECTOR_H # define LLVM_ADT_SPARSEBITVECTOR_H # include \" llvm / ADT / ilist . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / MathExtras . h \" # include \" llvm / Support / raw_ostream . h \" # include<cassert> # include<climits> namespace llvm { template<unsigned ElementSize = 1 2 8> struct SparseBitVectorElement : public ilist_node<SparseBitVectorElement<ElementSize>> { public : typedef unsigned long BitWord ; typedef unsigned size_type ; enum { BITWORD_SIZE =)",
    "insertText": "sizeof(BitWord) * CHAR_BIT, BITWORDS_PER_ELEMENT = (ElementSize + BITWORD_SIZE - 1)"
  },
  {
    "label": "SparseBitVectorElement()",
    "kind": "Method",
    "detail": "Function (private : unsigned ElementIndex ; BitWord Bits [ BITWORDS_PER_ELEMENT ] ; struct ilist_sentinel_traits<SparseBitVectorElement> ;)",
    "insertText": "SparseBitVectorElement()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (ElementIndex = ~ 0 U ;)",
    "insertText": "memset(&Bits[0], 0, sizeof (BitWord) * BITWORDS_PER_ELEMENT)"
  },
  {
    "label": "SparseBitVectorElement()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "SparseBitVectorElement(unsigned Idx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const SparseBitVectorElement &RHS)"
  },
  {
    "label": "word()",
    "kind": "Method",
    "detail": "Function (} BitWord)",
    "insertText": "word(unsigned Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < BITWORDS_PER_ELEMENT)"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (Bits [ Idx / BITWORD_SIZE ] | = 1)",
    "insertText": "L(Idx % BITWORD_SIZE)"
  },
  {
    "label": "test_and_set()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "test_and_set(unsigned Idx)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (bool old =)",
    "insertText": "test(Idx)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(Idx)"
  },
  {
    "label": "BITWORD_SIZE()",
    "kind": "Method",
    "detail": "Function (Bits [ Idx /)",
    "insertText": "BITWORD_SIZE(1L << (Idx % BITWORD_SIZE))"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "test(unsigned Idx)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned NumBits = 0 ;)",
    "insertText": "for(unsigned i = 0; i < BITWORDS_PER_ELEMENT; ++i) NumBits += countPopulation(Bits[i])"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"Illegal empty element\")"
  },
  {
    "label": "find_next()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "find_next(unsigned Curr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (unsigned WordPos = Curr / BITWORD_SIZE ; unsigned BitPos = Curr % BITWORD_SIZE ; BitWord Copy = Bits [ WordPos ] ;)",
    "insertText": "assert(WordPos <= BITWORDS_PER_ELEMENT && \"Word Position outside of element\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Copy& = ~ 0 UL<<BitPos ;)",
    "insertText": "if(Copy != 0) return WordPos * BITWORD_SIZE + countTrailingZeros(Copy)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool changed = false ;)",
    "insertText": "for(unsigned i = 0; i < BITWORDS_PER_ELEMENT; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BitWord old = changed ? 0 : Bits [ i ] ; Bits [ i ] | = RHS . Bits [ i ] ;)",
    "insertText": "if(!changed && old != Bits[i])"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} return changed ; } bool)",
    "insertText": "intersects(const SparseBitVectorElement &RHS)"
  },
  {
    "label": "intersectWith()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "intersectWith(const SparseBitVectorElement &RHS, bool &BecameZero)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BitWord old = changed ? 0 : Bits [ i ] ; Bits [ i ]& = RHS . Bits [ i ] ;)",
    "insertText": "if(Bits[i] != 0)"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (} BecameZero = allzero ; return changed ; } bool)",
    "insertText": "intersectWithComplement(const SparseBitVectorElement &RHS, bool &BecameZero)"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (} BecameZero = allzero ; return changed ; } void)",
    "insertText": "intersectWithComplement(const SparseBitVectorElement &RHS1, const SparseBitVectorElement &RHS2, bool &BecameZero)"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (} BecameZero = allzero ; } } ; template<unsigned ElementSize> struct ilist_traits<SparseBitVectorElement<ElementSize>> : public ilist_default_traits<SparseBitVectorElement<ElementSize>> { typedef SparseBitVectorElement<ElementSize> Element ; Element*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(Element *)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} Element*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} Element*)",
    "insertText": "ensureHead(Element *)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(Element *, Element *)"
  },
  {
    "label": "FindLowerBound()",
    "kind": "Method",
    "detail": "Function (} private : ilist_half_node<Element> Sentinel ; } ; template<unsigned ElementSize = 1 2 8> class SparseBitVector { typedef ilist<SparseBitVectorElement<ElementSize>> ElementList ; typedef ElementList::iterator ElementListIter ; typedef ElementList::const_iterator ElementListConstIter ; enum { BITWORD_SIZE = SparseBitVectorElement<ElementSize>::BITWORD_SIZE } ; ElementListIter CurrElementIter ; ElementList Elements ; ElementListIter)",
    "insertText": "FindLowerBound(unsigned ElementIndex)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (CurrElementIter = Elements .)",
    "insertText": "begin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CurrElementIter == Elements.end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementListIter ElementIter = CurrElementIter ;)",
    "insertText": "if(CurrElementIter->index() == ElementIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "while(ElementIter != Elements.end() && ElementIter->index() < ElementIndex)"
  },
  {
    "label": "AdvanceToFirstNonZero()",
    "kind": "Method",
    "detail": "Function (} CurrElementIter = ElementIter ; return ElementIter ; } class SparseBitVectorIterator { private : bool AtEnd ; const SparseBitVector<ElementSize>* BitVector ; ElementListConstIter Iter ; unsigned BitNumber ; unsigned WordNumber ; SparseBitVectorElement<ElementSize>::BitWord Bits ; void)",
    "insertText": "AdvanceToFirstNonZero()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (BitNumber = Iter ->)",
    "insertText": "index()"
  },
  {
    "label": "find_first()",
    "kind": "Method",
    "detail": "Function (unsigned BitPos = Iter ->)",
    "insertText": "find_first()"
  },
  {
    "label": "WordNumber()",
    "kind": "Method",
    "detail": "Function (BitNumber + = BitPos ;)",
    "insertText": "WordNumber(BitNumber % ElementSize)"
  },
  {
    "label": "word()",
    "kind": "Method",
    "detail": "Function (Bits = Iter ->)",
    "insertText": "word(WordNumber)"
  },
  {
    "label": "AdvanceToNextNonZero()",
    "kind": "Method",
    "detail": "Function (Bits>> = BitPos % BITWORD_SIZE ; } void)",
    "insertText": "AdvanceToNextNonZero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Bits>> = 1 ; BitNumber + = 1 ; })",
    "insertText": "if(!Bits)"
  },
  {
    "label": "find_next()",
    "kind": "Method",
    "detail": "Function (int NextSetBitNumber = Iter ->)",
    "insertText": "find_next(BitNumber % ElementSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + Iter ; WordNumber = 0 ;)",
    "insertText": "if(Iter == BitVector->Elements.end())"
  },
  {
    "label": "WordNumber()",
    "kind": "Method",
    "detail": "Function (Bits>> = NextSetBitNumber % BITWORD_SIZE ; } else {)",
    "insertText": "WordNumber(NextSetBitNumber % ElementSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BitNumber + = NextSetBitNumber ; } } } public : SparseBitVectorIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "SparseBitVectorIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseBitVectorIterator(): BitVector(NULL)"
  },
  {
    "label": "SparseBitVectorIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseBitVectorIterator(const SparseBitVector<ElementSize> *RHS, bool end = false):BitVector(RHS)"
  },
  {
    "label": "SparseBitVector()",
    "kind": "Method",
    "detail": "Function (} } ; public : typedef SparseBitVectorIterator iterator ;)",
    "insertText": "SparseBitVector()"
  },
  {
    "label": "SparseBitVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseBitVector(const SparseBitVector &RHS)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "push_back(SparseBitVectorElement<ElementSize>(*ElementIter))"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SparseBitVector&)",
    "insertText": "operator(const SparseBitVector& RHS)"
  },
  {
    "label": "FindLowerBound()",
    "kind": "Method",
    "detail": "Function (unsigned ElementIndex = Idx / ElementSize ; ElementListIter ElementIter =)",
    "insertText": "FindLowerBound(ElementIndex)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(unsigned Idx)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (ElementIter ->)",
    "insertText": "reset(Idx % ElementSize)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (+ + CurrElementIter ; Elements .)",
    "insertText": "erase(ElementIter)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "set(unsigned Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned ElementIndex = Idx / ElementSize ; SparseBitVectorElement<ElementSize>* Element ; ElementListIter ElementIter ;)",
    "insertText": "if(Elements.empty())"
  },
  {
    "label": "ElementSize()",
    "kind": "Method",
    "detail": "Function (Element = new SparseBitVectorElement<)",
    "insertText": "ElementSize(ElementIndex)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (ElementIter = Elements .)",
    "insertText": "insert(Elements.end(), Element)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} } CurrElementIter = ElementIter ; ElementIter ->)",
    "insertText": "set(Idx % ElementSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const SparseBitVector &RHS)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} return Iter1 = = Elements .)",
    "insertText": "end() && Iter2 == RHS.Elements.end()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "insert(Iter1, new SparseBitVectorElement<ElementSize>(*Iter2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + Iter2 ; changed = true ; } else)",
    "insertText": "if(Iter1->index() == Iter2->index())"
  },
  {
    "label": "unionWith()",
    "kind": "Method",
    "detail": "Function (changed | = Iter1 ->)",
    "insertText": "unionWith(*Iter2)"
  },
  {
    "label": "intersectWith()",
    "kind": "Method",
    "detail": "Function (bool BecameZero ; changed | = Iter1 ->)",
    "insertText": "intersectWith(*Iter2, BecameZero)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (ElementListIter IterTmp = Iter1 ; + + Iter1 ; Elements .)",
    "insertText": "erase(IterTmp)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} } Elements .)",
    "insertText": "erase(Iter1, Elements.end())"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (bool BecameZero ; changed | = Iter1 ->)",
    "insertText": "intersectWithComplement(*Iter2, BecameZero)"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "intersectWithComplement(const SparseBitVector<ElementSize> &RHS1, const SparseBitVector<ElementSize> &RHS2)"
  },
  {
    "label": "ElementSize()",
    "kind": "Method",
    "detail": "Function (bool BecameZero = false ; SparseBitVectorElement<ElementSize>* NewElement = new SparseBitVectorElement<)",
    "insertText": "ElementSize(Iter1->index())"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (NewElement ->)",
    "insertText": "intersectWithComplement(*Iter1, *Iter2, BecameZero)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "push_back(NewElement)"
  },
  {
    "label": "ElementSize()",
    "kind": "Method",
    "detail": "Function (} else delete NewElement ; + + Iter1 ; + + Iter2 ; } else { SparseBitVectorElement<ElementSize>* NewElement = new SparseBitVectorElement<)",
    "insertText": "ElementSize(*Iter1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + Iter1 ; } })",
    "insertText": "while(Iter1 != RHS1.Elements.end())"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (+ + Iter1 ; } return ; } void)",
    "insertText": "intersectWithComplement(const SparseBitVector<ElementSize> *RHS1, const SparseBitVector<ElementSize> *RHS2)"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "intersectWithComplement(*RHS1, *RHS2)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersects(const SparseBitVector<ElementSize> *RHS)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersects(const SparseBitVector<ElementSize> &RHS)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (+ + Iter1 ; + + Iter2 ; } else { + + Iter1 ; } } return false ; } bool)",
    "insertText": "contains(const SparseBitVector<ElementSize> &RHS)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (SparseBitVector<ElementSize>)",
    "insertText": "Result(*this)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (Result& = RHS ;)",
    "insertText": "return(Result == RHS)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (const SparseBitVectorElement<ElementSize>&)",
    "insertText": "First(Elements.begin())"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned BitCount = 0 ;)",
    "insertText": "for(ElementListConstIter Iter = Elements.begin(); Iter != Elements.end(); ++Iter) BitCount += Iter->count()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<unsigned ElementSize> bool)",
    "insertText": "operator(SparseBitVector<ElementSize> &LHS, const SparseBitVector<ElementSize> *RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<unsigned ElementSize> bool)",
    "insertText": "operator(SparseBitVector<ElementSize> *LHS, const SparseBitVector<ElementSize> &RHS)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (SparseBitVector<ElementSize>)",
    "insertText": "Result(LHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Result | = RHS ; return Result ; } template<unsigned ElementSize> SparseBitVector<ElementSize>)",
    "insertText": "operator(const SparseBitVector<ElementSize> &LHS, const SparseBitVector<ElementSize> &RHS)"
  },
  {
    "label": "intersectWithComplement()",
    "kind": "Method",
    "detail": "Function (SparseBitVector<ElementSize> Result ; Result .)",
    "insertText": "intersectWithComplement(LHS, RHS)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (out<<\" [ \" ; SparseBitVector<ElementSize>::iterator bi = LHS .)",
    "insertText": "begin(), be = LHS.end()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (out<<* bi ;)",
    "insertText": "for(++bi; bi != be; ++bi)"
  }
]