[
  {
    "label": "NetworkClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkClient"
  },
  {
    "label": "TraceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceView"
  },
  {
    "label": "Process",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Process"
  },
  {
    "label": "Processor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Processor"
  },
  {
    "label": "SessionUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SessionUpdate"
  },
  {
    "label": "WorkRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkRecord"
  },
  {
    "label": "WorkTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkTrack"
  },
  {
    "label": "FileTransfer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileTransfer"
  },
  {
    "label": "StatusUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatusUpdate"
  },
  {
    "label": "Session",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Session"
  },
  {
    "label": "ProcessLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessLocation"
  },
  {
    "label": "CacheWrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CacheWrite"
  },
  {
    "label": "TraceReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceReader"
  },
  {
    "label": "WorkRecordLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkRecordLocation"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaProcessHandle . h \" # include \" UbaStats . h \" # include \" UbaTrace . h \" namespace uba { class NetworkClient ; class TraceView { public : struct Process { u32 id = 0 ; u32 exitCode = ~ 0 u ; u64 start = 0 ; u64 stop = 0 ; TString description ; TString returnedReason ; TString breadcrumbs ; HBITMAP bitmap = 0 ; u32 bitmapOffset = 0 ; bool bitmapDirty = true ; bool cacheFetch = false ; bool isRemote = false ; u64 createFilesTime = 0 ; u64 writeFilesTime = 0 ; Vector<u8> stats ; Vector<ProcessLogLine> logLines ; } ; struct Processor { Vector<Process> processes ; } ; struct SessionUpdate { u64 time ; u64 send ; u64 recv ; u64 ping ; u64 memAvail ; float cpuLoad ; u8 connectionCount ; } ; struct WorkRecord { const tchar* description = nullptr ; u64 start = 0 ; u64 stop = 0 ; HBITMAP bitmap = 0 ; u32 bitmapOffset = 0 ; } ; struct WorkTrack { Vector<WorkRecord> records ; } ; struct FileTransfer { CasKey key ; u64 size ; TString hint ; u64 start ; u64 stop ; } ; struct StatusUpdate { TString text ; LogEntryType type ; TString link ; } ; struct Session { TString name ; TString fullName ; Guid clientUid ; Vector<Processor> processors ; Vector<SessionUpdate> updates ; Vector<TString> summary ; Vector<FileTransfer> fetchedFiles ; Vector<FileTransfer> storedFiles ; TString notification ; u64 fetchedFilesBytes = 0 ; u64 storedFilesBytes = 0 ; u32 maxVisibleFiles = 0 ; float highestSendPerS = 0 ; float highestRecvPerS = 0 ; bool isReset = true ; u64 disconnectTime = ~)",
    "insertText": "u64(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (u64 prevUpdateTime = 0 ; u64 prevSend = 0 ; u64 prevRecv = 0 ; u64 memTotal = 0 ; u32 processActiveCount = 0 ; u32 processExitedCount = 0 ; TString proxyName ; bool proxyCreated = false ; } ; struct ProcessLocation { u32 sessionIndex = 0 ; u32 processorIndex = 0 ; u32 processIndex = 0 ; bool)",
    "insertText": "operator(const ProcessLocation& o)"
  },
  {
    "label": "GetSession()",
    "kind": "Method",
    "detail": "Function (const Session&)",
    "insertText": "GetSession(const ProcessLocation& loc)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "TraceReader()",
    "kind": "Method",
    "detail": "Function (Vector<Session> sessions ; Vector<WorkTrack> workTracks ; Vector<TString> strings ; Map<u64,StatusUpdate> statusMap ; Map<u32,CacheWrite> cacheWrites ; u64 realStartTime = 0 ; u64 startTime = 0 ; u64 frequency = 0 ; u32 totalProcessActiveCount = 0 ; u32 totalProcessExitedCount = 0 ; u32 activeSessionCount = 0 ; u32 version = 0 ; u32 progressProcessesTotal = 0 ; u32 progressProcessesDone = 0 ; u32 progressErrorCount = 0 ; bool remoteExecutionDisabled = false ; bool finished = true ; } ; class TraceReader { public :)",
    "insertText": "TraceReader(Logger& logger)"
  },
  {
    "label": "TraceReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TraceReader()"
  },
  {
    "label": "ReadFile()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS bool)",
    "insertText": "ReadFile(TraceView& out, const tchar* fileName, bool replay)"
  },
  {
    "label": "UpdateReadFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateReadFile(TraceView& out, u64 maxTime, bool& outChanged)"
  },
  {
    "label": "StartReadClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartReadClient(TraceView& out, NetworkClient& client)"
  },
  {
    "label": "UpdateReadClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateReadClient(TraceView& out, NetworkClient& client, bool& outChanged)"
  },
  {
    "label": "StartReadNamed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartReadNamed(TraceView& out, const tchar* namedTrace, bool silentFail = false, bool replay = false)"
  },
  {
    "label": "UpdateReadNamed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateReadNamed(TraceView& out, u64 maxTime, bool& outChanged)"
  },
  {
    "label": "ReadMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadMemory(TraceView& out, bool trackHost, u64 maxTime)"
  },
  {
    "label": "ReadTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadTrace(TraceView& out, BinaryReader& reader, u64 maxTime)"
  },
  {
    "label": "StopAllActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllActive(TraceView& out, u64 stopTime)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(TraceView& out)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unmap()"
  },
  {
    "label": "SaveAs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveAs(const tchar* fileName)"
  },
  {
    "label": "ReadClientId()",
    "kind": "Method",
    "detail": "Function (Guid)",
    "insertText": "ReadClientId(TraceView& out, BinaryReader& reader)"
  },
  {
    "label": "GetSession()",
    "kind": "Method",
    "detail": "Function (TraceView::Session&)",
    "insertText": "GetSession(TraceView& out, u32 sessionIndex)"
  },
  {
    "label": "GetSession()",
    "kind": "Method",
    "detail": "Function (TraceView::Session*)",
    "insertText": "GetSession(TraceView& out, const Guid& clientUid)"
  },
  {
    "label": "ProcessBegin()",
    "kind": "Method",
    "detail": "Function (TraceView::Process*)",
    "insertText": "ProcessBegin(TraceView& out, u32 sessionIndex, u32 id, u64 time, const tchar* description)"
  },
  {
    "label": "ProcessEnd()",
    "kind": "Method",
    "detail": "Function (TraceView::Process*)",
    "insertText": "ProcessEnd(TraceView& out, u32& outSessionIndex, u32 id, u64 time)"
  }
]