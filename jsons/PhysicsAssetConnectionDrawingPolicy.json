[
  {
    "label": "FPhysicsAssetConnectionDrawingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsAssetConnectionDrawingPolicy"
  },
  {
    "label": "FPhysicsAssetConnectionDrawingPolicy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ConnectionDrawingPolicy . h \" class FPhysicsAssetConnectionDrawingPolicy : public FConnectionDrawingPolicy { public :)",
    "insertText": "FPhysicsAssetConnectionDrawingPolicy(int32 InBackLayerID, int32 InFrontLayerID, float InZoomFactor, const FSlateRect& InClippingRect, FSlateWindowElementList& InDrawElements) : FConnectionDrawingPolicy(InBackLayerID, InFrontLayerID, InZoomFactor, InClippingRect, InDrawElements)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (ArrowImage = nullptr ; ArrowRadius =)",
    "insertText": "FVector2D(0.0f, 0.0f)"
  },
  {
    "label": "ComputeSplineTangent()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "ComputeSplineTangent(const FVector2D& Start, const FVector2D& End)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 Tension = FMath::Abs<)",
    "insertText": "int32(Start.X - End.X)"
  }
]