[
  {
    "label": "CopyOnWriteBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyOnWriteBuffer"
  },
  {
    "label": "DataChannelInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataChannelInit"
  },
  {
    "label": "IsOpenMessage()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_SCTP_UTILS_H_ # define PC_SCTP_UTILS_H_ # include<string> # include \" api / data_channel_interface . h \" # include \" api / transport / data_channel_transport_interface . h \" # include \" media / base / media_channel . h \" # include \" rtc_base / copy_on_write_buffer . h \" namespace rtc { class CopyOnWriteBuffer ; } namespace webrtc { struct DataChannelInit ; bool)",
    "insertText": "IsOpenMessage(const rtc::CopyOnWriteBuffer& payload)"
  },
  {
    "label": "ParseDataChannelOpenMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseDataChannelOpenMessage(const rtc::CopyOnWriteBuffer& payload, std::string* label, DataChannelInit* config)"
  },
  {
    "label": "ParseDataChannelOpenAckMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseDataChannelOpenAckMessage(const rtc::CopyOnWriteBuffer& payload)"
  },
  {
    "label": "WriteDataChannelOpenMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteDataChannelOpenMessage(const std::string& label, const DataChannelInit& config, rtc::CopyOnWriteBuffer* payload)"
  },
  {
    "label": "WriteDataChannelOpenAckMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDataChannelOpenAckMessage(rtc::CopyOnWriteBuffer* payload)"
  }
]