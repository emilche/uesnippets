[
  {
    "label": "FCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurve"
  },
  {
    "label": "FEntityGeom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityGeom"
  },
  {
    "label": "FInfoEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInfoEntity"
  },
  {
    "label": "FSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurface"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FSurfacicPolyline()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Core / CADKernelArchive . h \" # include \" Geo / Curves / Curve . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / GeoPoint . h \" # include \" Geo / Sampling / PolylineTools . h \" # include \" Geo / Surfaces / Surface . h \" # include \" Math / Boundary . h \" # include \" Math / MatrixH . h \" # include \" Math / Point . h \" # include \" UI / Display . h \" # include \" Utils / IndexOfCoordinateFinder . h \" # include \" Serialization / Archive . h \" # include \" Algo / AllOf . h \" namespace UE::CADKernel { class FCurve ; class FEntityGeom ; class FInfoEntity ; class FSurface ; class FSurfacicPolyline { public : TArray<double> Coordinates ; TArray<FPoint2D> Points2D ; TArray<FPoint> Points3D ; TArray<FVector3f> Normals ; TArray<FPoint> Tangents ; FSurfacicBoundary BoundingBox ; bool bWithNormals ; bool bWithTangent ;)",
    "insertText": "FSurfacicPolyline(TSharedRef<FSurface> InCarrierSurface, TSharedRef<FCurve> InCurve2D)"
  },
  {
    "label": "FSurfacicPolyline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSurfacicPolyline(TSharedRef<FSurface> InCarrierSurface, TSharedRef<FCurve> InCurve2D, const double Tolerance)"
  },
  {
    "label": "FSurfacicPolyline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSurfacicPolyline(TSharedRef<FSurface> InCarrierSurface, TSharedRef<FCurve> InCurve2D, const double ChordTolerance, const double ParamTolerance, bool bInWithNormals , bool bWithTangent)"
  },
  {
    "label": "FSurfacicPolyline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSurfacicPolyline(bool bInWithNormals = false, bool bInWithTangent = false) : bWithNormals(bInWithNormals) , bWithTangent(bInWithTangent)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Points3D)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Points2D)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Normals)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Coordinates)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(BoundingBox)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (Ar<<bWithNormals ; Ar<<bWithTangent ; } FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH&)"
  },
  {
    "label": "CheckIfDegenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIfDegenerated(const double Tolerance3D, const FSurfacicTolerance& Tolerances2D, const FLinearBoundary& Boudary, bool& bDegeneration2D, bool& bDegeneration3D, double& Length3D)"
  },
  {
    "label": "GetExtremities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExtremities(const FLinearBoundary& InBoundary, const double Tolerance3D, const FSurfacicTolerance& Tolerances2D, FSurfacicCurveExtremities& Extremities)"
  },
  {
    "label": "Approximate3DPoint()",
    "kind": "Method",
    "detail": "Function (FPoint)",
    "insertText": "Approximate3DPoint(double InCoordinate)"
  },
  {
    "label": "Approximator3D()",
    "kind": "Method",
    "detail": "Function (TPolylineApproximator<FPoint>)",
    "insertText": "Approximator3D(Coordinates, Points3D)"
  },
  {
    "label": "Approximate3DPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Approximate3DPoints(const TArray<double>& InCoordinates, TArray<FPoint>& OutPoints)"
  },
  {
    "label": "ApproximatePoints()",
    "kind": "Method",
    "detail": "Function (Approximator3D .)",
    "insertText": "ApproximatePoints(InCoordinates, OutPoints)"
  },
  {
    "label": "Approximate2DPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "Approximate2DPoint(double InCoordinate)"
  },
  {
    "label": "Approximator()",
    "kind": "Method",
    "detail": "Function (TPolylineApproximator<FPoint2D>)",
    "insertText": "Approximator(Coordinates, Points2D)"
  },
  {
    "label": "GetTangentAt()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetTangentAt(double InCoordinate)"
  },
  {
    "label": "Finder()",
    "kind": "Method",
    "detail": "Function (FDichotomyFinder)",
    "insertText": "Finder(Coordinates)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Index = Finder .)",
    "insertText": "Find(InCoordinate)"
  },
  {
    "label": "ComputeLinearToleranceAt()",
    "kind": "Method",
    "detail": "Function (} } ; double)",
    "insertText": "ComputeLinearToleranceAt(const double Tolerance3D, const double MinLinearTolerance, const int32 Index)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} else { double LinearDistance = Coordinates [ Index + 1 ] - Coordinates [ Index ] ; return)",
    "insertText": "Max(LinearDistance / Distance3D * Tolerance3D, MinLinearTolerance)"
  },
  {
    "label": "Approximate2DPoints()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "Approximate2DPoints(const TArray<double>& InCoordinates, TArray<FPoint2D>& OutPoints)"
  },
  {
    "label": "ApproximatePolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApproximatePolyline(FSurfacicPolyline& OutPolyline)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 CoordinateCount = OutPolyline . Coordinates .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<int32> SegmentIndexes ; SegmentIndexes .)",
    "insertText": "Reserve(CoordinateCount)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (const int32& Index = SegmentIndexes .)",
    "insertText": "Emplace_GetRef(Finder.Find(Coordinate))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SegmentCoordinates .)",
    "insertText": "Emplace(PolylineTools::SectionCoordinate(Coordinates, Index, Coordinate))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (int32 SegmentIndex = SegmentIndexes [ Index ] ; double SegmentCoordinate = SegmentCoordinates [ Index ] ; OutPolyline . Points2D .)",
    "insertText": "Emplace(PolylineTools::LinearInterpolation(Points2D, SegmentIndex, SegmentCoordinate))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (int32 SegmentIndex = SegmentIndexes [ Index ] ; double SegmentCoordinate = SegmentCoordinates [ Index ] ; OutPolyline . Points3D .)",
    "insertText": "Emplace(PolylineTools::LinearInterpolation(Points3D, SegmentIndex, SegmentCoordinate))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bWithNormals)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (int32 SegmentIndex = SegmentIndexes [ Index ] ; double SegmentCoordinate = SegmentCoordinates [ Index ] ; OutPolyline . Normals .)",
    "insertText": "Emplace(PolylineTools::LinearInterpolation(Normals, SegmentIndex, SegmentCoordinate))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bWithTangent)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (int32 SegmentIndex = SegmentIndexes [ Index ] ; double SegmentCoordinate = SegmentCoordinates [ Index ] ; OutPolyline . Tangents .)",
    "insertText": "Emplace(PolylineTools::LinearInterpolation(Tangents, SegmentIndex, SegmentCoordinate))"
  },
  {
    "label": "DichotomyFinder()",
    "kind": "Method",
    "detail": "Function (} } } ; FDichotomyFinder)",
    "insertText": "DichotomyFinder(Coordinates)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = 0 ; int32 EndIndex ; bool bUseDichotomy = false ; StartIndex = DichotomyFinder .)",
    "insertText": "Find(OutPolyline.Coordinates[0])"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (EndIndex = DichotomyFinder .)",
    "insertText": "Find(OutPolyline.Coordinates.Last())"
  },
  {
    "label": "IsDichotomyToBePreferred()",
    "kind": "Method",
    "detail": "Function (bUseDichotomy =)",
    "insertText": "IsDichotomyToBePreferred(EndIndex - StartIndex, Coordinates.Num())"
  },
  {
    "label": "ComputePoints()",
    "kind": "Method",
    "detail": "Function (DichotomyFinder . StartLower = StartIndex ; DichotomyFinder . StartUpper = EndIndex ;)",
    "insertText": "ComputePoints(DichotomyFinder)"
  },
  {
    "label": "LinearFinder()",
    "kind": "Method",
    "detail": "Function (} else { FLinearFinder)",
    "insertText": "LinearFinder(Coordinates, StartIndex)"
  },
  {
    "label": "ComputePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePoints(LinearFinder)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Sample(const FLinearBoundary& Boundary, const double DesiredSegmentLength, TArray<double>& OutCoordinates)"
  },
  {
    "label": "SamplePolyline()",
    "kind": "Method",
    "detail": "Function (Approximator3D .)",
    "insertText": "SamplePolyline(Boundary, DesiredSegmentLength, OutCoordinates)"
  },
  {
    "label": "GetCoordinateOfProjectedPoint()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetCoordinateOfProjectedPoint(const FLinearBoundary& Boundary, const FPoint& PointOnEdge, FPoint& ProjectedPoint)"
  },
  {
    "label": "GetCoordinateOfProjectedPoint()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetCoordinateOfProjectedPoint(const FLinearBoundary& Boundary, const FPoint2D& PointOnEdge, FPoint2D& ProjectedPoint)"
  },
  {
    "label": "Approximator2D()",
    "kind": "Method",
    "detail": "Function (TPolylineApproximator<FPoint2D>)",
    "insertText": "Approximator2D(Coordinates, Points2D)"
  },
  {
    "label": "ProjectPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectPoints(const FLinearBoundary& InBoundary, const TArray<FPoint>& InPointsToProject, TArray<double>& ProjectedPointCoordinates, TArray<FPoint>& ProjectedPoints)"
  },
  {
    "label": "ProjectPointsToPolyline()",
    "kind": "Method",
    "detail": "Function (Approximator3D .)",
    "insertText": "ProjectPointsToPolyline(InBoundary, InPointsToProject, ProjectedPointCoordinates, ProjectedPoints)"
  },
  {
    "label": "ProjectPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectPoints(const FLinearBoundary& InBoundary, const TArray<FPoint2D>& InPointsToProject, TArray<double>& ProjectedPointCoordinates, TArray<FPoint2D>& ProjectedPoints)"
  },
  {
    "label": "ProjectCoincidentalPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectCoincidentalPolyline(const FLinearBoundary& InBoundary, const TArray<FPoint>& InPointsToProject, bool bSameOrientation, TArray<double>& OutProjectedPointCoordinates, double ToleranceOfProjection)"
  },
  {
    "label": "ProjectCoincidentalPolyline()",
    "kind": "Method",
    "detail": "Function (Approximator3D .)",
    "insertText": "ProjectCoincidentalPolyline(InBoundary, InPointsToProject, bSameOrientation, OutProjectedPointCoordinates, ToleranceOfProjection)"
  },
  {
    "label": "ComputeIntersectionsWithIsos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeIntersectionsWithIsos(const FLinearBoundary& InBoundary, const TArray<double>& InIsoCoordinates, const EIso InTypeIso, const FSurfacicTolerance& ToleranceIso, TArray<double>& OutIntersection)"
  },
  {
    "label": "GetCoordinates()",
    "kind": "Method",
    "detail": "Function (const TArray<double>&)",
    "insertText": "GetCoordinates()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(NewCoordinates, Coordinates)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Points2D .)",
    "insertText": "Empty(Coordinates.Num())"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "Size()"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSubPolyline(const FLinearBoundary& InBoundary, const EOrientation InOrientation, TArray<FPoint2D>& OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "GetSubPolyline(InBoundary, InOrientation, OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSubPolyline(const FLinearBoundary& InBoundary, TArray<double>& OutCoordinates, TArray<FPoint2D>& OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "GetSubPolyline(InBoundary, OutCoordinates, OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSubPolyline(const FLinearBoundary& InBoundary, const EOrientation InOrientation, TArray<FPoint>& OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSubPolyline(const FLinearBoundary& InBoundary, TArray<double>& OutCoordinates, TArray<FPoint>& OutPoints)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Number)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Points3D .)",
    "insertText": "Reserve(Number)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Empty(int32 Slack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Points3D .)",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmplaceAt(int32 Index, FSurfacicPolyline& Polyline, int32 PointIndex)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Coordinates .)",
    "insertText": "EmplaceAt(Index, Polyline.Coordinates[PointIndex])"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Points2D .)",
    "insertText": "EmplaceAt(Index, Polyline.Points2D[PointIndex])"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Points3D .)",
    "insertText": "EmplaceAt(Index, Polyline.Points3D[PointIndex])"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Normals .)",
    "insertText": "EmplaceAt(Index, Polyline.Normals[PointIndex])"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Tangents .)",
    "insertText": "EmplaceAt(Index, Polyline.Tangents[PointIndex])"
  },
  {
    "label": "RemoveComplementaryPoints()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveComplementaryPoints(int32 Offset)"
  },
  {
    "label": "Markers()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "Markers(true, Count)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Markers [ Index ] = false ; } int32 CurrentIndex = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < Count; ++Index)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Tangents [ CurrentIndex ] = Tangents [ Index ] ; } + + CurrentIndex ; } } Coordinates .)",
    "insertText": "SetNum(CurrentIndex, EAllowShrinking::No)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Pop()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Coordinates .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reverse()"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Coordinates)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Points2D)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Points3D)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Normals)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Tangents)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} } double)",
    "insertText": "GetLength(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "Get2DLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Get2DLength(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "IsIso()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIso(EIso Iso, double ErrorTolerance = DOUBLE_SMALL_NUMBER)"
  },
  {
    "label": "AllOf()",
    "kind": "Method",
    "detail": "Function (FPoint2D StartPoint = Points2D [ 0 ] ; return)",
    "insertText": "AllOf(Points2D, [&](const FPoint2D& Point) { return FMath::IsNearlyEqual(Point[Iso], StartPoint[Iso], ErrorTolerance); })"
  }
]