[
  {
    "label": "RtpGeneratorOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpGeneratorOptions"
  },
  {
    "label": "VideoSendStreamConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendStreamConfig"
  },
  {
    "label": "RtpGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpGenerator"
  },
  {
    "label": "ParseRtpGeneratorOptionsFromFile()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_RTP_GENERATOR_RTP_GENERATOR_H_ # define RTC_TOOLS_RTP_GENERATOR_RTP_GENERATOR_H_ # include<memory> # include<string> # include<vector> # include \" api / call / transport . h \" # include \" api / media_types . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / video / builtin_video_bitrate_allocator_factory . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" call / call . h \" # include \" call / rtp_config . h \" # include \" call / video_send_stream . h \" # include \" media / engine / webrtc_video_engine . h \" # include \" test / frame_generator_capturer . h \" # include \" test / rtp_file_reader . h \" # include \" test / rtp_file_writer . h \" # include \" video / config / video_encoder_config . h \" namespace webrtc { struct RtpGeneratorOptions { struct VideoSendStreamConfig { int duration_ms = 1 0 0 0 0 ; int video_width = 6 4 0 ; int video_height = 4 8 0 ; int video_fps = 2 4 ; int num_squares = 1 2 8 ; RtpConfig rtp ; } ; std::vector<VideoSendStreamConfig> video_streams ; } ; absl::optional<RtpGeneratorOptions>)",
    "insertText": "ParseRtpGeneratorOptionsFromFile(const std::string& options_file)"
  },
  {
    "label": "RtpGenerator()",
    "kind": "Method",
    "detail": "Function (class RtpGenerator final : public webrtc::Transport { public :)",
    "insertText": "RtpGenerator(const RtpGeneratorOptions& options)"
  },
  {
    "label": "RtpGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpGenerator()"
  },
  {
    "label": "RtpGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpGenerator(const RtpGenerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpGenerator&)",
    "insertText": "operator(const RtpGenerator&)"
  },
  {
    "label": "GenerateRtpDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRtpDump(const std::string& rtp_dump_path)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SendRtp(const uint8_t* packet, size_t length, const webrtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "GetMaxDuration()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaxDuration()"
  },
  {
    "label": "WaitUntilAllVideoStreamsFinish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilAllVideoStreamsFinish()"
  },
  {
    "label": "DataToRtpPacket()",
    "kind": "Method",
    "detail": "Function (test::RtpPacket)",
    "insertText": "DataToRtpPacket(const uint8_t* packet, size_t packet_len)"
  }
]