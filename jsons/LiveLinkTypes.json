[
  {
    "label": "FLiveLinkSubjectName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkSubjectName"
  },
  {
    "label": "FLiveLinkSubjectKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkSubjectKey"
  },
  {
    "label": "FLiveLinkWorldTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkWorldTime"
  },
  {
    "label": "FLiveLinkTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkTime"
  },
  {
    "label": "FLiveLinkMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkMetaData"
  },
  {
    "label": "FLiveLinkBaseFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkBaseFrameData"
  },
  {
    "label": "FLiveLinkBaseStaticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkBaseStaticData"
  },
  {
    "label": "FLiveLinkBaseBlueprintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkBaseBlueprintData"
  },
  {
    "label": "FLiveLinkBaseDataStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLiveLinkBaseDataStruct"
  },
  {
    "label": "FCastImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCastImpl"
  },
  {
    "label": "FLiveLinkSubjectFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkSubjectFrameData"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FLiveLinkTimeCode_Base_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkTimeCode_Base_DEPRECATED"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Concepts / GetTypeHashable . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / UnrealMemory . h \" # include \" LiveLinkRefSkeleton . h \" # include \" Math / Transform . h \" # include \" Math / TransformVectorized . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Guid . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" Serialization / Archive . h \" # include \" Templates / Casts . h \" # include \" Templates / Models . h \" # include \" Templates / RemoveReference . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / PropertyPortFlags . h \" # include \" UObject / StructOnScope . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" LiveLinkTypes . generated . h \")",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() FLiveLinkSubjectName()"
  },
  {
    "label": "FLiveLinkSubjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkSubjectName(FName InName) : Name(InName)"
  },
  {
    "label": "FLiveLinkSubjectName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkSubjectName(EName InName) : Name(InName)"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNone()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FName()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<InSubjectName . Name ; return Ar ; } uint32)",
    "insertText": "GetTypeHash(const FLiveLinkSubjectName& Value)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(BlueprintReadOnly, Category=\"LiveLink\")"
  },
  {
    "label": "FLiveLinkSubjectKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkSubjectKey()"
  },
  {
    "label": "FLiveLinkSubjectKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkSubjectKey(FGuid InSource, FName InSubjectName) : Source(InSource), SubjectName(InSubjectName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLiveLinkSubjectKey& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FLiveLinkSubjectKey& InSubjectKey)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<InSubjectKey . Source ; Ar<<InSubjectKey . SubjectName ; return Ar ; } uint32)",
    "insertText": "GetTypeHash(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() public: FLiveLinkWorldTime() : Offset(0.0)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (Time =)",
    "insertText": "Seconds()"
  },
  {
    "label": "FLiveLinkWorldTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkWorldTime(const double InTime) : Time(InTime)"
  },
  {
    "label": "FLiveLinkWorldTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkWorldTime(const double InTime, const double InOffset) : Time(InTime) , Offset(InOffset)"
  },
  {
    "label": "GetSourceTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetSourceTime()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=\"LiveLink\")"
  },
  {
    "label": "FLiveLinkTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkTime() : WorldTime(0.0) , SceneTime()"
  },
  {
    "label": "FLiveLinkTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkTime(double InWorldTime, const FQualifiedFrameTime& InSceneTime) : WorldTime(InWorldTime) , SceneTime(InSceneTime)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"LiveLink\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetLiveLinkTime()",
    "kind": "Method",
    "detail": "Function (FLiveLinkTime ArrivalTime ; FLiveLinkFrameIdentifier FrameId = INDEX_NONE ; FLiveLinkTime)",
    "insertText": "GetLiveLinkTime()"
  },
  {
    "label": "FindPropertyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPropertyValue(const FLiveLinkBaseFrameData& FrameData, const FName PropertyName, float& OutValue)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 FoundIndex = PropertyNames .)",
    "insertText": "Find(PropertyName)"
  },
  {
    "label": "FLiveLinkBaseBlueprintData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkBaseBlueprintData()"
  },
  {
    "label": "FLiveLinkBaseDataStruct()",
    "kind": "Method",
    "detail": "Function (} ; template<BaseType> class FLiveLinkBaseDataStruct { public :)",
    "insertText": "FLiveLinkBaseDataStruct()"
  },
  {
    "label": "FLiveLinkBaseDataStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkBaseDataStruct(const UScriptStruct* InType, BaseType* InData) : WrappedStruct(InType, reinterpret_cast<uint8*>(InData))"
  },
  {
    "label": "FLiveLinkBaseDataStruct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkBaseDataStruct(const UScriptStruct* InType) : WrappedStruct(InType)"
  },
  {
    "label": "FLiveLinkBaseDataStruct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkBaseDataStruct(FLiveLinkBaseDataStruct&& InOther) : WrappedStruct(MoveTemp(InOther.WrappedStruct))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetBaseData()",
    "kind": "Method",
    "detail": "Function (} BaseType*)",
    "insertText": "GetBaseData()"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (} const UScriptStruct*)",
    "insertText": "GetStruct()"
  },
  {
    "label": "InitializeWith()",
    "kind": "Method",
    "detail": "Function (} template<DataType> void)",
    "insertText": "InitializeWith(const DataType* InData)"
  },
  {
    "label": "InitializeWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWith(DataType::StaticStruct(), InData)"
  },
  {
    "label": "InitializeWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeWith(const UScriptStruct* InOtherStruct, const BaseType* InData)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (WrappedStruct .)",
    "insertText": "Initialize(InOtherStruct)"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStruct()->CopyScriptStruct(GetBaseData(), InData)"
  },
  {
    "label": "InitializeWith()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitializeWith(const FLiveLinkBaseDataStruct& InOther)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (WrappedStruct .)",
    "insertText": "Initialize(InOther.GetStruct())"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStruct()->CopyScriptStruct(GetBaseData(), InOther.GetBaseData())"
  },
  {
    "label": "CloneData()",
    "kind": "Method",
    "detail": "Function (} } BaseType*)",
    "insertText": "CloneData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BaseType* DataStruct = nullptr ;)",
    "insertText": "if(const UScriptStruct* ScriptStructPtr = ::Cast<UScriptStruct>(WrappedStruct.GetStruct()))"
  },
  {
    "label": "DataStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataStruct(BaseType*)FMemory::Malloc(ScriptStructPtr->GetStructureSize() ? ScriptStructPtr->GetStructureSize() : 1)"
  },
  {
    "label": "InitializeStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStructPtr ->)",
    "insertText": "InitializeStruct(DataStruct)"
  },
  {
    "label": "CopyScriptStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStructPtr ->)",
    "insertText": "CopyScriptStruct(DataStruct, GetBaseData())"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} return DataStruct ; } template<Type> Type*)",
    "insertText": "Cast()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FLiveLinkBaseDataStruct&)",
    "insertText": "operator(FLiveLinkBaseDataStruct&& InOther)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (WrappedStruct =)",
    "insertText": "MoveTemp(InOther.WrappedStruct)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "operator(const FLiveLinkBaseDataStruct& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FLiveLinkBaseDataStruct& InStruct)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString StructPath ; Ar<<StructPath ;)",
    "insertText": "if(!StructPath.IsEmpty())"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct* ScriptStructPtr = FindObject<)",
    "insertText": "UScriptStruct(nullptr, *StructPath, false)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SetError()"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (ScriptStructPtr ->)",
    "insertText": "SerializeItem(Ar, InStruct.GetBaseData(), nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { FString StructPath ;)",
    "insertText": "if(UScriptStruct* ScriptStructPtr = const_cast<UScriptStruct*>(::Cast<UScriptStruct>(InStruct.GetStruct())))"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (StructPath = ScriptStructPtr ->)",
    "insertText": "GetPathName()"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} else { Ar<<StructPath ; } } return Ar ; } protected : template<Type> struct FCastImpl { Type*)",
    "insertText": "Cast(const UScriptStruct* ScriptStruct, BaseType* BaseData)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(TIsDerivedFrom<typename TRemoveReference<Type>::Type, BaseType>::IsDerived, \"'Type' template parameter must be derived from 'BaseType' to Cast.\")"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } } const Type*)",
    "insertText": "ConstCast(const UScriptStruct* ScriptStruct, const BaseType* BaseData)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} else { return const_cast<const)",
    "insertText": "Type(Cast(ScriptStruct, const_cast<BaseType*>(BaseData)))"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } } ; protected : FStructOnScope WrappedStruct ; } ; using FLiveLinkStaticDataStruct = FLiveLinkBaseDataStruct<FLiveLinkBaseStaticData> ; using FLiveLinkFrameDataStruct = FLiveLinkBaseDataStruct<FLiveLinkBaseFrameData> ; using FLiveLinkBlueprintDataStruct = FLiveLinkBaseDataStruct<FLiveLinkBaseBlueprintData> ; struct FLiveLinkSubjectFrameData { public : FLiveLinkStaticDataStruct StaticData ; FLiveLinkFrameDataStruct FrameData ; } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "USTRUCT() struct UE_DEPRECATED(4.20, \"FLiveLinkFrameRate is no longer used, please use FFrameRate from TimeManagement instead.\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FLiveLinkTimeCode_Base_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkTimeCode_Base_DEPRECATED() : Seconds(0), Frames(0), FrameRate()"
  },
  {
    "label": "FLiveLinkTimeCode_Base_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FLiveLinkTimeCode_Base_DEPRECATED(const int32 InSeconds, const int32 InFrames, const FLiveLinkFrameRate& InFrameRate) : Seconds(InSeconds), Frames(InFrames), FrameRate(InFrameRate)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; } ;)",
    "insertText": "USTRUCT() struct UE_DEPRECATED(4.20, \"FLiveLinkTimeCode is no longer used, please use FQualifiedFrameTime from TimeManagement instead.\")"
  },
  {
    "label": "FQualifiedFrameTime()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FQualifiedFrameTime()"
  },
  {
    "label": "TotalFrameNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TotalFrameNumber(int32)FMath::RoundToZero(Seconds * (FrameRate.Numerator / (double)FrameRate.Denominator))"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime FrameTime =)",
    "insertText": "FFrameTime(TotalFrameNumber)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FLiveLinkTimeCode&)",
    "insertText": "operator(const FQualifiedFrameTime& InFrameTime)"
  },
  {
    "label": "CeilToInt32()",
    "kind": "Method",
    "detail": "Function (const int32 NumberOfFramesInSecond =)",
    "insertText": "CeilToInt32(InFrameTime.Rate.AsDecimal())"
  },
  {
    "label": "NumberOfFrames()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumberOfFrames(int32)(FMath::RoundToZero(InFrameTime.Time.AsDecimal()))"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seconds(int32)FMath::RoundToZero(NumberOfFrames / (double)NumberOfFramesInSecond)"
  },
  {
    "label": "FLiveLinkFrameRate()",
    "kind": "Method",
    "detail": "Function (Frames = NumberOfFrames % NumberOfFramesInSecond ; FrameRate =)",
    "insertText": "FLiveLinkFrameRate(InFrameTime.Rate.Numerator, InFrameTime.Rate.Denominator)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() FLiveLinkCurveElement() : CurveName(NAME_None) , CurveValue(0.f)"
  },
  {
    "label": "FLiveLinkCurveElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkCurveElement(FName InCurveName, float InCurveValue) : CurveName(InCurveName) , CurveValue(InCurveValue)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT() struct UE_DEPRECATED(4.23, \"FLiveLinkFrameData is no longer used, please use the LiveLink animation role instead.\")"
  },
  {
    "label": "FOptionalCurveElement()",
    "kind": "Method",
    "detail": "Function (float Value ; bool bValid ;)",
    "insertText": "FOptionalCurveElement(float InValue) : Value(InValue) , bValid(true)"
  },
  {
    "label": "FOptionalCurveElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalCurveElement() : Value(0.f) , bValid(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value = InValue ; bValid = true ; } FOptionalCurveElement&)",
    "insertText": "operator(const FLiveLinkCurveElement& InCurveElement)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(InCurveElement.CurveValue)"
  },
  {
    "label": "UpdateCurveKey()",
    "kind": "Method",
    "detail": "Function (TArray<FName> CurveNames ; FLiveLinkCurveIntegrationData)",
    "insertText": "UpdateCurveKey(const TArray<FLiveLinkCurveElement>& CurveElements)"
  },
  {
    "label": "ExtendCurveData()",
    "kind": "Method",
    "detail": "Function (TArray<FTransform> Transforms ; TArray<FOptionalCurveElement> Curves ; FLiveLinkMetaData MetaData ; FLiveLinkWorldTime WorldTime ; void)",
    "insertText": "ExtendCurveData(int32 ExtraCurves)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Curves .)",
    "insertText": "AddDefaulted(ExtraCurves)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FLiveLinkFrame& InFrame)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (Ar<<InFrame . Transforms ; Ar<<InFrame . Curves ;)",
    "insertText": "StaticStruct()->SerializeItem(Ar, (void*)& InFrame.WorldTime, nullptr)"
  }
]