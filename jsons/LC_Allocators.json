[
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Mallocator . h \" # include \" LC_PoolAllocator . h \" # include \" LC_MicroAllocator . h \" namespace memory { template<T> void)",
    "insertText": "Destruct(T* ptr)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (ptr -> ~)",
    "insertText": "T()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} } template<Allocator,T> void)",
    "insertText": "Free(Allocator* allocator, T* ptr, size_t size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (allocator ->)",
    "insertText": "Free(ptr, size)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} template<Allocator,T> void)",
    "insertText": "Delete(Allocator* allocator, T* ptr, size_t size)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(allocator, ptr, size)"
  },
  {
    "label": "LC_ALLOC()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "LC_ALLOC(_allocator, _size, _alignment) (_allocator)->Allocate((_size), (_alignment)) #define LC_FREE(_allocator, _ptr, _size) (_allocator)->Free((_ptr), (_size)) #define LC_NEW_ALIGNED(_allocator, _type, _alignment) new (LC_ALLOC(_allocator, sizeof(_type), _alignment)) _type #define LC_NEW(_allocator, _type) LC_NEW_ALIGNED(_allocator, _type, alignof(_type)) #define LC_DELETE(_allocator, _ptr, _size) memory::Delete((_allocator), (_ptr), (_size))"
  }
]