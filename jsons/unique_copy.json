[
  {
    "label": "__reread_from_input_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__reread_from_input_tag"
  },
  {
    "label": "__reread_from_output_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__reread_from_output_tag"
  },
  {
    "label": "__read_from_tmp_value_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__read_from_tmp_value_tag"
  },
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_InputAndOutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputAndOutputIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_UNIQUE_COPY_H # define _LIBCPP___ALGORITHM_UNIQUE_COPY_H # include<__algorithm / comp . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__type_traits / conditional . h> # include<__type_traits / is_base_of . h> # include<__type_traits / is_same . h> # include<__utility / move . h> # include<__utility / pair . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__unique_copy()",
    "kind": "Method",
    "detail": "Function (struct __reread_from_input_tag { } ; struct __reread_from_output_tag { } ; struct __read_from_tmp_value_tag { } ; } template<class _AlgPolicy,class _BinaryPredicate,class _InputIterator,class _Sent,class _OutputIterator> _LIBCPP_CONSTEXPR_AFTER_CXX17 _LIBCPP_HIDE_FROM_ABI pair<_InputIterator,_OutputIterator>)",
    "insertText": "__unique_copy(_InputIterator __first, _Sent __last, _OutputIterator __result, _BinaryPredicate&& __pred, __unique_copy_tags::__read_from_tmp_value_tag)"
  },
  {
    "label": "__t()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy>::template __value_type<_InputIterator>)",
    "insertText": "__t(*__first)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (* __result = __t ; + + __result ;)",
    "insertText": "while(++__first != __last)"
  },
  {
    "label": "_OutputIterator()",
    "kind": "Method",
    "detail": "Function (__t =* __first ;* __result = __t ; + + __result ; } } } return pair<_InputIterator,)",
    "insertText": "_OutputIterator(std::move(__first), std::move(__result))"
  },
  {
    "label": "__unique_copy()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _BinaryPredicate,class _ForwardIterator,class _Sent,class _OutputIterator> _LIBCPP_CONSTEXPR_AFTER_CXX17 _LIBCPP_HIDE_FROM_ABI pair<_ForwardIterator,_OutputIterator>)",
    "insertText": "__unique_copy(_ForwardIterator __first, _Sent __last, _OutputIterator __result, _BinaryPredicate&& __pred, __unique_copy_tags::__reread_from_input_tag)"
  },
  {
    "label": "__unique_copy()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _BinaryPredicate,class _InputIterator,class _Sent,class _InputAndOutputIterator> _LIBCPP_CONSTEXPR_AFTER_CXX17 _LIBCPP_HIDE_FROM_ABI pair<_InputIterator,_InputAndOutputIterator>)",
    "insertText": "__unique_copy(_InputIterator __first, _Sent __last, _InputAndOutputIterator __result, _BinaryPredicate&& __pred, __unique_copy_tags::__reread_from_output_tag)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (* __result =* __first ;)",
    "insertText": "while(++__first != __last) if (!__pred(*__result, *__first))"
  },
  {
    "label": "_InputAndOutputIterator()",
    "kind": "Method",
    "detail": "Function (+ + __result ; } return pair<_InputIterator,)",
    "insertText": "_InputAndOutputIterator(std::move(__first), std::move(__result))"
  },
  {
    "label": "unique_copy()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _OutputIterator,class _BinaryPredicate> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __pred)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (using __algo_tag = conditional<is_base_of<forward_iterator_tag,iterator_traits<_InputIterator>::iterator_category>::value,__unique_copy_tags::__reread_from_input_tag,conditional<is_base_of<forward_iterator_tag,iterator_traits<_OutputIterator>::iterator_category>::value&& is_same<iterator_traits<_InputIterator>::value_type,iterator_traits<_OutputIterator>::value_type>::value,__unique_copy_tags::__reread_from_output_tag,__unique_copy_tags::__read_from_tmp_value_tag>::type>::type ; return std::__unique_copy<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last), std::move(__result), __pred, __algo_tag())"
  },
  {
    "label": "unique_copy()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _OutputIterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"
  },
  {
    "label": "unique_copy()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_InputIterator>::value_type __v ; return)",
    "insertText": "unique_copy(std::move(__first), std::move(__last), std::move(__result), __equal_to<__v>())"
  }
]