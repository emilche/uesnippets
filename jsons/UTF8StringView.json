[
  {
    "label": "CUTF8StringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CUTF8StringView"
  },
  {
    "label": "UnicodeConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeConstIterator"
  },
  {
    "label": "OtherAllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherAllocatorType"
  },
  {
    "label": "TUTF8String",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUTF8String"
  },
  {
    "label": "TUTF8StringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUTF8StringBuilder"
  },
  {
    "label": "CUTF8StringView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Misc / CRC . h \" # include \" uLang / Common / Misc / MathUtils . h \" # include \" uLang / Common / Text / IdxRange . h \" # include \" uLang / Common / Text / Unicode . h \" # include<cstring> namespace uLang { class CUTF8StringView { public : const UTF8Char* _Begin ; const UTF8Char* _End ;)",
    "insertText": "CUTF8StringView() : _Begin(nullptr), _End(nullptr)"
  },
  {
    "label": "CUTF8StringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CUTF8StringView(ENoInit)"
  },
  {
    "label": "CUTF8StringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CUTF8StringView(const UTF8Char* Begin, const UTF8Char* End) : _Begin(Begin), _End(End)"
  },
  {
    "label": "CUTF8StringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CUTF8StringView(const char * NullterminatedString) : _Begin((UTF8Char *)NullterminatedString), _End((UTF8Char *)NullterminatedString + ::strlen(NullterminatedString))"
  },
  {
    "label": "CUTF8StringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CUTF8StringView(const char * String, size_t ByteLen) : _Begin((UTF8Char *)String), _End((UTF8Char *)String + ByteLen)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (_Begin = _End = nullptr ; } void)",
    "insertText": "Set(const UTF8Char* Begin, const UTF8Char* End)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (_Begin = Begin ; _End = End ; } ULANG_FORCEINLINE const UTF8Char*)",
    "insertText": "Data()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(ByteIndex >= 0 && _Begin + ByteIndex < _End, \"Invalid index: ByteIndex=%i ByteLen()=%i\", ByteIndex, ByteLen())"
  },
  {
    "label": "SecondByte()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char)",
    "insertText": "SecondByte()"
  },
  {
    "label": "LastByte()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char)",
    "insertText": "LastByte()"
  },
  {
    "label": "NextByte()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char)",
    "insertText": "NextByte(const CUTF8StringView& Enclosing)"
  },
  {
    "label": "NextNextByte()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char)",
    "insertText": "NextNextByte(const CUTF8StringView& Enclosing)"
  },
  {
    "label": "FirstCodePoint()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE SUniCodePointLength)",
    "insertText": "FirstCodePoint()"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "StartsWith(const CUTF8StringView& Text)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (} return true ; } ULANG_FORCEINLINE bool)",
    "insertText": "EndsWith(const CUTF8StringView& Text)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} return true ; } ULANG_FORCEINLINE int32_t)",
    "insertText": "Find(UTF8Char Char)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} } return IndexNone ; } ULANG_FORCEINLINE int32_t)",
    "insertText": "Find(const CUTF8StringView& Text)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (Continue : ; } return IndexNone ; } ULANG_FORCEINLINE bool)",
    "insertText": "Contains(UTF8Char Char)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "Contains(const CUTF8StringView& Text)"
  },
  {
    "label": "ContainsCaseIndependent()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "ContainsCaseIndependent(const CUTF8StringView& Text)"
  },
  {
    "label": "ByteLen()",
    "kind": "Method",
    "detail": "Function (const UTF8Char* EndChar = _End - Text .)",
    "insertText": "ByteLen()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "operator(const CUTF8StringView& Other)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(_End - _Begin < Other._End - Other._Begin)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(_End - _Begin > Other._End - Other._Begin)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const char* NullTerminatedString)"
  },
  {
    "label": "OtherChar()",
    "kind": "Method",
    "detail": "Function (const UTF8Char*)",
    "insertText": "OtherChar(UTF8Char*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* OtherChar = = 0 ; } bool)",
    "insertText": "operator(const char* NullterminatedString)"
  },
  {
    "label": "IsEqualCaseIndependent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqualCaseIndependent(const CUTF8StringView& Other)"
  },
  {
    "label": "PopFirstByte()",
    "kind": "Method",
    "detail": "Function (} return true ; } ULANG_FORCEINLINE UTF8Char)",
    "insertText": "PopFirstByte()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_End > _Begin, \"Can't pop front from empty string!\")"
  },
  {
    "label": "DecodeUTF8()",
    "kind": "Method",
    "detail": "Function (SUniCodePointLength CodePoint =)",
    "insertText": "DecodeUTF8(_Begin, _End - _Begin)"
  },
  {
    "label": "SubViewBegin()",
    "kind": "Method",
    "detail": "Function (_Begin + = CodePoint . _ByteLengthUTF8 ; return CodePoint ; } ULANG_FORCEINLINE CUTF8StringView)",
    "insertText": "SubViewBegin(int32_t ByteCount)"
  },
  {
    "label": "SubViewEnd()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE CUTF8StringView)",
    "insertText": "SubViewEnd(int32_t ByteCount)"
  },
  {
    "label": "SubViewTrimBegin()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE CUTF8StringView)",
    "insertText": "SubViewTrimBegin(int32_t ByteIndex)"
  },
  {
    "label": "SubViewTrimEnd()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE CUTF8StringView)",
    "insertText": "SubViewTrimEnd(int32_t ByteCount)"
  },
  {
    "label": "SubView()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE CUTF8StringView)",
    "insertText": "SubView(int32_t ByteIndex, int32_t ByteCount = INT32_MAX)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(ByteCount >= 0, \"ByteCount must be non-negative.\")"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const UTF8Char* MidBegin =)",
    "insertText": "Clamp(_Begin + ByteIndex, _Begin, _End)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const UTF8Char* MidEnd = MidBegin +)",
    "insertText": "Min(ByteCount, int32_t(_End - MidBegin))"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(Range._Begin <= uint32_t(ByteLen()) && Range._End <= uint32_t(ByteLen()), \"Range must be contained in string view.\")"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (const UTF8Char* NewBegin = _Begin + ByteIndex ;)",
    "insertText": "ULANG_ASSERTF(ByteIndex >= 0 && NewBegin <= _End, \"Index of of Bounds.\")"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(SubView._Begin >= _Begin && SubView._End <= _End, \"Index of of Bounds.\")"
  },
  {
    "label": "UnicodeConstIterator()",
    "kind": "Method",
    "detail": "Function (} class UnicodeConstIterator { public : ULANG_FORCEINLINE)",
    "insertText": "UnicodeConstIterator(const UTF8Char* CurrentByte, size_t CurrentByteLen) : _CurrentByte(CurrentByte) , _CurrentByteLen(CurrentByteLen)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Eval()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UnicodeConstIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (UnicodeConstIterator)",
    "insertText": "temp(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ +* this ; return temp ; } ULANG_FORCEINLINE UnicodeConstIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "DecodeUTF8()",
    "kind": "Method",
    "detail": "Function (_CurrentValue = _CurrentByteLen> 0 ?)",
    "insertText": "DecodeUTF8(_CurrentByte, _CurrentByteLen)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ; } SUniCodePointLength _CurrentValue ; const UTF8Char* _CurrentByte ; size_t _CurrentByteLen ; } ; ULANG_FORCEINLINE UnicodeConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UnicodeConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "InputByteIdxToDirectIdx()",
    "kind": "Method",
    "detail": "Function (} protected : ULANG_FORCEINLINE int32_t)",
    "insertText": "InputByteIdxToDirectIdx(int32_t InIdx)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (int32_t ByteLen =)",
    "insertText": "int32_t(_End - _Begin)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF((ByteLen + InIdx) >= 0, \"Index `%i` from end of string is out of bounds and resolved to `%i` bytes before the start of the string!\", InIdx, -(ByteLen + InIdx))"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF((ByteLen + InOutIdx) >= 0, \"Index `%i` from end of string is out of bounds and resolved to `%i` bytes before the start of the string!\", InOutIdx, -(ByteLen + InOutIdx))"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (InOutIdx + = ByteLen ; })",
    "insertText": "ULANG_ASSERTF(InOutIdx <= ByteLen, \"Index `%i` is out of bounds in `%i` byte string!\", InOutIdx, ByteLen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32_t CountMax = ByteLen - InOutIdx ;)",
    "insertText": "if(InOutSpan < 0)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (InOutSpan + = CountMax + 1 ; } InOutSpan =)",
    "insertText": "Clamp(InOutSpan, 0, CountMax)"
  }
]