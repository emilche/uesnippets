[
  {
    "label": "FTargetDeviceProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetDeviceProxy"
  },
  {
    "label": "IMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageContext"
  },
  {
    "label": "FTargetDeviceServiceDeployFinished",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceDeployFinished"
  },
  {
    "label": "FTargetDeviceServiceLaunchFinished",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceLaunchFinished"
  },
  {
    "label": "FTargetDeviceServicePong",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServicePong"
  },
  {
    "label": "FTargetDeviceProxyVariant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetDeviceProxyVariant"
  },
  {
    "label": "FTargetDeviceProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" IMessageContext . h \" # include \" MessageEndpoint . h \" # include \" ITargetDeviceProxy . h \" # include \" Misc / Optional . h \" class FTargetDeviceProxy ; class IMessageContext ; struct FTargetDeviceServiceDeployFinished ; struct FTargetDeviceServiceLaunchFinished ; struct FTargetDeviceServicePong ; typedef TSharedRef<class FTargetDeviceProxy> FTargetDeviceProxyRef ; class FTargetDeviceProxy : public ITargetDeviceProxy { public :)",
    "insertText": "FTargetDeviceProxy()"
  },
  {
    "label": "FTargetDeviceProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTargetDeviceProxy(const FString& InId)"
  },
  {
    "label": "FTargetDeviceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTargetDeviceProxy(const FString& InName, const FTargetDeviceServicePong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, bool InIsAggregated)"
  },
  {
    "label": "AddTimeout()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddTimeout(const FDateTime& NewTimeout)"
  },
  {
    "label": "HasTimedOut()",
    "kind": "Method",
    "detail": "Function (PingTimeout = NewTimeout ; } } bool)",
    "insertText": "HasTimedOut(const FDateTime& Now)"
  },
  {
    "label": "UpdateFromMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateFromMessage(const FTargetDeviceServicePong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "CanMultiLaunch()",
    "kind": "Method",
    "detail": "Function (public : const bool)",
    "insertText": "CanMultiLaunch()"
  },
  {
    "label": "GetVariants()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetVariants(TArray<FName>& OutVariants)"
  },
  {
    "label": "GetTargetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTargetDeviceVariant(const FString& InDeviceId)"
  },
  {
    "label": "GetTargetDeviceId()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetTargetDeviceId(FName InVariant)"
  },
  {
    "label": "GetTargetDeviceIds()",
    "kind": "Method",
    "detail": "Function (const TSet<FString>&)",
    "insertText": "GetTargetDeviceIds(FName InVariant)"
  },
  {
    "label": "GetTargetPlatformName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTargetPlatformName(FName InVariant)"
  },
  {
    "label": "GetTargetPlatformId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTargetPlatformId(FName InVariant)"
  },
  {
    "label": "GetVanillaPlatformId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetVanillaPlatformId(FName InVariant)"
  },
  {
    "label": "GetPlatformDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPlatformDisplayName(FName InVariant)"
  },
  {
    "label": "GetHostName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetHostName()"
  },
  {
    "label": "HasVariant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVariant(FName InVariant)"
  },
  {
    "label": "HasTargetPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTargetPlatform(FName InTargetPlatformId)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "TerminateLaunchedProcess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TerminateLaunchedProcess(FName InVariant, const FString& ProcessIdentifier)"
  },
  {
    "label": "PowerOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PowerOff(bool Force)"
  },
  {
    "label": "PowerOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PowerOn()"
  },
  {
    "label": "Reboot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reboot()"
  },
  {
    "label": "IsAggregated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAggregated()"
  }
]