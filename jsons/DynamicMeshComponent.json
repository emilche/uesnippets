[
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FDynamicMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshSceneProxy"
  },
  {
    "label": "FBaseDynamicMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseDynamicMeshSceneProxy"
  },
  {
    "label": "IRenderMeshPostProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRenderMeshPostProcessor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TAsyncComponentDataComputeQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAsyncComponentDataComputeQueue"
  },
  {
    "label": "FComputeJob",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputeJob"
  },
  {
    "label": "UDynamicMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDynamicMeshComponent"
  },
  {
    "label": "FTriMeshCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionData"
  },
  {
    "label": "FTriMeshCollisionDataEstimates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionDataEstimates"
  },
  {
    "label": "ECollisionTraceFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionTraceFlag"
  },
  {
    "label": "FKAggregateGeom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKAggregateGeom"
  },
  {
    "label": "IRenderMeshPostProcessor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BaseDynamicMeshComponent . h \" # include \" MeshConversionOptions . h \" # include \" Components / MeshRenderDecomposition . h \" # include \" DynamicMesh / MeshTangents . h \" # include \" TransformTypes . h \" # include \" Async / Future . h \" # include \" UDynamicMesh . h \" # include \" PhysicsEngine / BodySetup . h \" # include \" Misc / ScopeLock . h \" # include \" Tasks / Task . h \" # include \" Util / ProgressCancel . h \" # include \" DistanceFieldAtlas . h \" # include \" DynamicMeshComponent . generated . h \" struct FMeshDescription ; class FDynamicMeshSceneProxy ; class FBaseDynamicMeshSceneProxy ; class IRenderMeshPostProcessor { public : ~)",
    "insertText": "IRenderMeshPostProcessor()"
  },
  {
    "label": "ProcessMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMesh(const FDynamicMesh3& Mesh, FDynamicMesh3& OutRenderMesh)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "TAsyncComponentDataComputeQueue()",
    "kind": "Method",
    "detail": "Function (NoUpdate = 0,FullUpdate = 1,FastUpdate = 2 } ; template<DataType> struct TAsyncComponentDataComputeQueue { std::atomic<int> JobCounter = 0 ; bool bIsShuttingDown = false ; ~)",
    "insertText": "TAsyncComponentDataComputeQueue()"
  },
  {
    "label": "WaitForAllJobsDuringShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAllJobsDuringShutdown()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} struct FComputeJob { UE::Tasks::FTask Task ; int JobTimestamp = 0 ; TUniquePtr<FProgressCancel> Progress ; bool bCancelled = false ; bool bHasCompleted = false ; } ; TArray<TUniquePtr<FComputeJob>> PendingJobs ; FCriticalSection PendingJobsLock ; TFunction<)",
    "insertText": "void(TUniquePtr<DataType> NewData)"
  },
  {
    "label": "LaunchJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchJob(const TCHAR* DebugName, TFunction<TUniquePtr<DataType>(FProgressCancel& Progress)> JobWork)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PendingJobs [ k ] -> bCancelled = true ;)",
    "insertText": "if(PendingJobs[k]->bHasCompleted)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (PendingJobs .)",
    "insertText": "RemoveAtSwap(k, 1, EAllowShrinking::No)"
  },
  {
    "label": "FComputeJob()",
    "kind": "Method",
    "detail": "Function (k - - ; } } } TUniquePtr<FComputeJob> NewJob = MakeUnique<)",
    "insertText": "FComputeJob()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FComputeJob* JobPtr = NewJob .)",
    "insertText": "Get()"
  },
  {
    "label": "FProgressCancel()",
    "kind": "Method",
    "detail": "Function (NewJob -> Progress = MakeUnique<)",
    "insertText": "FProgressCancel()"
  },
  {
    "label": "JobPtr()",
    "kind": "Method",
    "detail": "Function (NewJob -> Progress -> CancelF = [ this,)",
    "insertText": "JobPtr()"
  },
  {
    "label": "AddJob()",
    "kind": "Method",
    "detail": "Function ({ FScopeLock)",
    "insertText": "AddJob(&PendingJobsLock)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PendingJobs .)",
    "insertText": "Add(MoveTemp(NewJob))"
  },
  {
    "label": "PendingLock()",
    "kind": "Method",
    "detail": "Function (bIsShuttingDown = true ; FScopeLock)",
    "insertText": "PendingLock(&PendingJobsLock)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Wait({PendingJobs[k]->Task})"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } } ;)",
    "insertText": "UCLASS(hidecategories = (LOD), meta = (BlueprintSpawnableComponent), ClassGroup = Rendering, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual FDynamicMesh3* GetMesh()"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (} const FDynamicMesh3*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "GetDynamicMesh()",
    "kind": "Method",
    "detail": "Function (} UDynamicMesh*)",
    "insertText": "GetDynamicMesh()"
  },
  {
    "label": "SetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMesh(UE::Geometry::FDynamicMesh3&& MoveMesh)"
  },
  {
    "label": "ProcessMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMesh(TFunctionRef<void(const UE::Geometry::FDynamicMesh3&)> ProcessFunc)"
  },
  {
    "label": "EditMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditMesh(TFunctionRef<void(UE::Geometry::FDynamicMesh3&)> EditFunc, EDynamicMeshComponentRenderUpdateMode UpdateMode = EDynamicMeshComponentRenderUpdateMode::FullUpdate)"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTransform(const FTransform3d& Transform, bool bInvert)"
  },
  {
    "label": "IsEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditable()"
  },
  {
    "label": "NotifyMeshUpdated()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "NotifyMeshUpdated()"
  },
  {
    "label": "FastNotifyColorsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyColorsUpdated()"
  },
  {
    "label": "FastNotifyPositionsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyPositionsUpdated(bool bNormals = false, bool bColors = false, bool bUVs = false)"
  },
  {
    "label": "FastNotifyVertexAttributesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyVertexAttributesUpdated(bool bNormals, bool bColors, bool bUVs)"
  },
  {
    "label": "FastNotifyVertexAttributesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyVertexAttributesUpdated(EMeshRenderAttributeFlags UpdatedAttributes)"
  },
  {
    "label": "FastNotifyUVsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyUVsUpdated()"
  },
  {
    "label": "FastNotifySecondaryTrianglesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifySecondaryTrianglesChanged()"
  },
  {
    "label": "FastNotifyTriangleVerticesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyTriangleVerticesUpdated(const TArray<int32>& Triangles, EMeshRenderAttributeFlags UpdatedAttributes)"
  },
  {
    "label": "FastNotifyTriangleVerticesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyTriangleVerticesUpdated(const TSet<int32>& Triangles, EMeshRenderAttributeFlags UpdatedAttributes)"
  },
  {
    "label": "FastNotifyTriangleVerticesUpdated_TryPrecompute()",
    "kind": "Method",
    "detail": "Function (TFuture<bool>)",
    "insertText": "FastNotifyTriangleVerticesUpdated_TryPrecompute(const TArray<int32>& Triangles, TArray<int32>& UpdateSetsOut, UE::Geometry::FAxisAlignedBox3d& BoundsOut)"
  },
  {
    "label": "FastNotifyTriangleVerticesUpdated_ApplyPrecompute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastNotifyTriangleVerticesUpdated_ApplyPrecompute(const TArray<int32>& Triangles, EMeshRenderAttributeFlags UpdatedAttributes, TFuture<bool>& Precompute, const TArray<int32>& UpdateSets, const UE::Geometry::FAxisAlignedBox3d& UpdateSetBounds)"
  },
  {
    "label": "ApplyChange()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ApplyChange(const FMeshVertexChange* Change, bool bRevert)"
  },
  {
    "label": "ApplyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyChange(const FMeshChange* Change, bool bRevert)"
  },
  {
    "label": "ApplyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyChange(const FMeshReplacementChange* Change, bool bRevert)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate OnMeshChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FMeshVerticesModified, UDynamicMeshComponent*, const FMeshVertexChange*, bool)"
  },
  {
    "label": "SetInvalidateProxyOnChangeEnabled()",
    "kind": "Method",
    "detail": "Function (FMeshVerticesModified OnMeshVerticesChanged ; void)",
    "insertText": "SetInvalidateProxyOnChangeEnabled(bool bEnabled)"
  },
  {
    "label": "GetInvalidateProxyOnChangeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInvalidateProxyOnChangeEnabled()"
  },
  {
    "label": "SetTriangleColorFunction()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetTriangleColorFunction(TUniqueFunction<FColor(const FDynamicMesh3*, int)> TriangleColorFuncIn, EDynamicMeshComponentRenderUpdateMode UpdateMode = EDynamicMeshComponentRenderUpdateMode::FastUpdate)"
  },
  {
    "label": "ClearTriangleColorFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTriangleColorFunction(EDynamicMeshComponentRenderUpdateMode UpdateMode = EDynamicMeshComponentRenderUpdateMode::FastUpdate)"
  },
  {
    "label": "HasTriangleColorFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTriangleColorFunction()"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (protected : TUniqueFunction<)",
    "insertText": "FColor(const FDynamicMesh3*, int)"
  },
  {
    "label": "GetTriangleColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetTriangleColor(const FDynamicMesh3* Mesh, int TriangleID)"
  },
  {
    "label": "GetGroupColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetGroupColor(const FDynamicMesh3* Mesh, int TriangleID)"
  },
  {
    "label": "SetVertexColorRemappingFunction()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetVertexColorRemappingFunction(TUniqueFunction<void(FVector4f&)> ColorMapFuncIn, EDynamicMeshComponentRenderUpdateMode UpdateMode = EDynamicMeshComponentRenderUpdateMode::FastUpdate)"
  },
  {
    "label": "ClearVertexColorRemappingFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearVertexColorRemappingFunction(EDynamicMeshComponentRenderUpdateMode UpdateMode = EDynamicMeshComponentRenderUpdateMode::FastUpdate)"
  },
  {
    "label": "HasVertexColorRemappingFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertexColorRemappingFunction()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (protected : TUniqueFunction<)",
    "insertText": "void(FVector4f&)"
  },
  {
    "label": "RemapVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapVertexColor(FVector4f& VertexColorInOut)"
  },
  {
    "label": "EnableSecondaryTriangleBuffers()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "EnableSecondaryTriangleBuffers(TUniqueFunction<bool(const FDynamicMesh3*, int32)> SecondaryTriFilterFunc)"
  },
  {
    "label": "DisableSecondaryTriangleBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableSecondaryTriangleBuffers()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (protected : TUniqueFunction<)",
    "insertText": "bool(const FDynamicMesh3*, int32)"
  },
  {
    "label": "SetExternalDecomposition()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetExternalDecomposition(TUniquePtr<FMeshRenderDecomposition> Decomposition)"
  },
  {
    "label": "SetRenderMeshPostProcessor()",
    "kind": "Method",
    "detail": "Function (protected : TUniquePtr<FMeshRenderDecomposition> Decomposition ; public : void)",
    "insertText": "SetRenderMeshPostProcessor(TUniquePtr<IRenderMeshPostProcessor> Processor)"
  },
  {
    "label": "GetRenderMesh()",
    "kind": "Method",
    "detail": "Function (FDynamicMesh3*)",
    "insertText": "GetRenderMesh()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (protected : TUniquePtr<IRenderMeshPostProcessor> RenderMeshPostProcessor ; TUniquePtr<FDynamicMesh3> RenderMesh ; public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FComponentChildrenChangedDelegate, USceneComponent*, bool)"
  },
  {
    "label": "InvalidateAutoCalculatedTangents()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "InvalidateAutoCalculatedTangents()"
  },
  {
    "label": "GetAutoCalculatedTangents()",
    "kind": "Method",
    "detail": "Function (const UE::Geometry::FMeshTangentsf*)",
    "insertText": "GetAutoCalculatedTangents()"
  },
  {
    "label": "UpdateAutoCalculatedTangents()",
    "kind": "Method",
    "detail": "Function (bool bAutoCalculatedTangentsValid = false ; UE::Geometry::FMeshTangentsf AutoCalculatedTangents ; void)",
    "insertText": "UpdateAutoCalculatedTangents()"
  },
  {
    "label": "UpdateDistanceField()",
    "kind": "Method",
    "detail": "Function (protected : FCriticalSection DistanceFieldLock ; TSharedPtr<FDistanceFieldVolumeData> CurrentDistanceField ; void)",
    "insertText": "UpdateDistanceField()"
  },
  {
    "label": "OnNewDistanceFieldData_Async()",
    "kind": "Method",
    "detail": "Function (TAsyncComponentDataComputeQueue<FDistanceFieldVolumeData> DistanceFieldComputeQueue ; void)",
    "insertText": "OnNewDistanceFieldData_Async(TUniquePtr<FDistanceFieldVolumeData> NewData)"
  },
  {
    "label": "OnNewDistanceFieldMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewDistanceFieldMode()"
  },
  {
    "label": "ComputeNewDistanceField_TaskFunction()",
    "kind": "Method",
    "detail": "Function (private : TUniquePtr<FDistanceFieldVolumeData>)",
    "insertText": "ComputeNewDistanceField_TaskFunction(FProgressCancel& Progress, const FDynamicMesh3& Mesh, bool bMostlyTwoSided)"
  },
  {
    "label": "GetPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPhysicsTriMeshData(struct FTriMeshCollisionData* CollisionData, bool InUseAllTriData)"
  },
  {
    "label": "GetTriMeshSizeEstimates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTriMeshSizeEstimates(struct FTriMeshCollisionDataEstimates& OutTriMeshEstimates, bool bInUseAllTriData)"
  },
  {
    "label": "ContainsPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPhysicsTriMeshData(bool InUseAllTriData)"
  },
  {
    "label": "WantsNegXTriMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsNegXTriMesh()"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (const UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "SetSimpleCollisionShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimpleCollisionShapes(const struct FKAggregateGeom& AggGeom, bool bUpdateCollision)"
  },
  {
    "label": "GetSimpleCollisionShapes()",
    "kind": "Method",
    "detail": "Function (const FKAggregateGeom&)",
    "insertText": "GetSimpleCollisionShapes()"
  },
  {
    "label": "SetTransientDeferCollisionUpdates()",
    "kind": "Method",
    "detail": "Function (bool bDeferCollisionUpdates = false ; void)",
    "insertText": "SetTransientDeferCollisionUpdates(bool bEnabled)"
  },
  {
    "label": "InvalidatePhysicsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePhysicsData()"
  },
  {
    "label": "RebuildPhysicsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildPhysicsData()"
  },
  {
    "label": "UpdateLocalBounds()",
    "kind": "Method",
    "detail": "Function (bool bTransientDeferCollisionUpdates = false ; bool bCollisionUpdatePending = false ; protected : UE::Geometry::FAxisAlignedBox3d LocalBounds ; void)",
    "insertText": "UpdateLocalBounds()"
  },
  {
    "label": "FinishPhysicsAsyncCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPhysicsAsyncCook(bool bSuccess, UBodySetup* FinishedBodySetup)"
  },
  {
    "label": "CreateBodySetupHelper()",
    "kind": "Method",
    "detail": "Function (UBodySetup*)",
    "insertText": "CreateBodySetupHelper()"
  },
  {
    "label": "SetBodySetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBodySetup(UBodySetup* NewSetup)"
  },
  {
    "label": "NotifyMaterialSetUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMaterialSetUpdated()"
  },
  {
    "label": "GetBaseSceneProxy()",
    "kind": "Method",
    "detail": "Function (bool bProxyValid = false ; bool bProxyVerifyUsedMaterials = true ; FBaseDynamicMeshSceneProxy*)",
    "insertText": "GetBaseSceneProxy()"
  },
  {
    "label": "GetCurrentSceneProxy()",
    "kind": "Method",
    "detail": "Function (} FDynamicMeshSceneProxy*)",
    "insertText": "GetCurrentSceneProxy()"
  },
  {
    "label": "ResetProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetProxy()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "OnChildAttached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildAttached(USceneComponent* ChildComponent)"
  },
  {
    "label": "OnChildDetached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildDetached(USceneComponent* ChildComponent)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "SetSceneProxyVerifyUsedMaterials()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "SetSceneProxyVerifyUsedMaterials(bool bState)"
  },
  {
    "label": "InternalOnMeshUpdated()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InternalOnMeshUpdated()"
  }
]