[
  {
    "label": "_Py_stat_struct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_Py_stat_struct"
  },
  {
    "label": "stat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stat"
  },
  {
    "label": "lconv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lconv"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_FILEUTILS_H # define Py_INTERNAL_FILEUTILS_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" Py_BUILD_CORE must be defined to include this header \" # endif # include<locale . h> typedef enum { _Py_ERROR_UNKNOWN = 0,_Py_ERROR_STRICT,_Py_ERROR_SURROGATEESCAPE,_Py_ERROR_REPLACE,_Py_ERROR_IGNORE,_Py_ERROR_BACKSLASHREPLACE,_Py_ERROR_SURROGATEPASS,_Py_ERROR_XMLCHARREFREPLACE,_Py_ERROR_OTHER } _Py_error_handler ;)",
    "insertText": "PyAPI_FUNC(_Py_error_handler) _Py_GetErrorHandler(const char *errors)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_DecodeLocaleEx( const char *arg, wchar_t **wstr, size_t *wlen, const char **reason, int current_locale, _Py_error_handler errors)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_EncodeLocaleEx( const wchar_t *text, char **str, size_t *error_pos, const char **reason, int current_locale, _Py_error_handler errors)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(char*) _Py_EncodeLocaleRaw( const wchar_t *text, size_t *error_pos)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject *) _Py_device_encoding(int)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(MS_WINDOWS) || defined(__APPLE__)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (unsigned long st_dev ; uint64_t st_ino ; unsigned short st_mode ; int st_nlink ; int st_uid ; int st_gid ; unsigned long st_rdev ; __int64 st_size ; time_t st_atime ; int st_atime_nsec ; time_t st_mtime ; int st_mtime_nsec ; time_t st_ctime ; int st_ctime_nsec ; unsigned long st_file_attributes ; unsigned long st_reparse_tag ; } ; # else # define _Py_stat_struct stat # endif)",
    "insertText": "PyAPI_FUNC(int) _Py_fstat( int fd, struct _Py_stat_struct *status)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_fstat_noraise( int fd, struct _Py_stat_struct *status)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_stat( PyObject *path, struct stat *status)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_open( const char *pathname, int flags)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_open_noraise( const char *pathname, int flags)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(FILE *) _Py_wfopen( const wchar_t *path, const wchar_t *mode)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_ssize_t) _Py_read( int fd, void *buf, size_t count)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_ssize_t) _Py_write( int fd, const void *buf, size_t count)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_ssize_t) _Py_write_noraise( int fd, const void *buf, size_t count)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifdef HAVE_READLINK)",
    "insertText": "PyAPI_FUNC(int) _Py_wreadlink( const wchar_t *path, wchar_t *buf, size_t buflen)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef HAVE_REALPATH)",
    "insertText": "PyAPI_FUNC(wchar_t*) _Py_wrealpath( const wchar_t *path, wchar_t *resolved_path, size_t resolved_path_len)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PyAPI_FUNC(wchar_t*) _Py_wgetcwd( wchar_t *buf, size_t buflen)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_get_inheritable(int fd)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_set_inheritable(int fd, int inheritable, int *atomic_flag_works)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_set_inheritable_async_safe(int fd, int inheritable, int *atomic_flag_works)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_dup(int fd)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef MS_WINDOWS)",
    "insertText": "PyAPI_FUNC(int) _Py_get_blocking(int fd)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_set_blocking(int fd, int blocking)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "PyAPI_FUNC(void*) _Py_get_osfhandle_noraise(int fd)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void*) _Py_get_osfhandle(int fd)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_open_osfhandle_noraise(void *handle, int flags)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_open_osfhandle(void *handle, int flags)"
  },
  {
    "label": "DECODE_LOCALE_ERR()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "DECODE_LOCALE_ERR(NAME, LEN) \\ ((LEN) == (size_t)-2) \\ ? _PyStatus_ERR(\"cannot decode \" NAME) \\ : _PyStatus_NO_MEMORY() PyAPI_DATA(int)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_DecodeUTF8Ex( const char *arg, Py_ssize_t arglen, wchar_t **wstr, size_t *wlen, const char **reason, _Py_error_handler errors)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_EncodeUTF8Ex( const wchar_t *text, char **str, size_t *error_pos, const char **reason, int raw_malloc, _Py_error_handler errors)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(wchar_t*) _Py_DecodeUTF8_surrogateescape( const char *arg, Py_ssize_t arglen, size_t *wlen)"
  },
  {
    "label": "_Py_wstat()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_wstat(const wchar_t *, struct stat *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_GetForceASCII(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_ResetForceASCII(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_GetLocaleconvNumeric( struct lconv *lc, PyObject **decimal_point, PyObject **thousands_sep)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_closerange(int first, int last)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(wchar_t*) _Py_GetLocaleEncoding(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) _Py_GetLocaleEncodingObject(void)"
  },
  {
    "label": "_Py_LocaleUsesNonUnicodeWchar()",
    "kind": "Method",
    "detail": "Function (# ifdef HAVE_NON_UNICODE_WCHAR_T_REPRESENTATION int)",
    "insertText": "_Py_LocaleUsesNonUnicodeWchar(void)"
  },
  {
    "label": "_Py_DecodeNonUnicodeWchar()",
    "kind": "Method",
    "detail": "Function (wchar_t*)",
    "insertText": "_Py_DecodeNonUnicodeWchar(const wchar_t* native, Py_ssize_t size)"
  },
  {
    "label": "_Py_EncodeNonUnicodeWchar_InPlace()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_EncodeNonUnicodeWchar_InPlace(wchar_t* unicode, Py_ssize_t size)"
  },
  {
    "label": "_Py_isabs()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "_Py_isabs(const wchar_t *path)"
  },
  {
    "label": "_Py_abspath()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_abspath(const wchar_t *path, wchar_t **abspath_p)"
  },
  {
    "label": "_PyOS_getfullpathname()",
    "kind": "Method",
    "detail": "Function (# ifdef MS_WINDOWS int)",
    "insertText": "_PyOS_getfullpathname(const wchar_t *path, wchar_t **abspath_p)"
  },
  {
    "label": "_Py_join_relfile()",
    "kind": "Method",
    "detail": "Function (# endif wchar_t*)",
    "insertText": "_Py_join_relfile(const wchar_t *dirname, const wchar_t *relfile)"
  },
  {
    "label": "_Py_add_relfile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_add_relfile(wchar_t *dirname, const wchar_t *relfile, size_t bufsize)"
  },
  {
    "label": "_Py_find_basename()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "_Py_find_basename(const wchar_t *filename)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(wchar_t*) _Py_normpath(wchar_t *path, Py_ssize_t size)"
  },
  {
    "label": "_Py_normpath_and_size()",
    "kind": "Method",
    "detail": "Function (wchar_t*)",
    "insertText": "_Py_normpath_and_size(wchar_t *path, Py_ssize_t size, Py_ssize_t *length)"
  },
  {
    "label": "_set_thread_local_invalid_parameter_handler()",
    "kind": "Method",
    "detail": "Function (# if defined _MSC_VER&& _MSC_VER> = 1 9 0 0 # include<stdlib . h> _invalid_parameter_handler _Py_silent_invalid_parameter_handler ; # define _Py_BEGIN_SUPPRESS_IPH \\ { _invalid_parameter_handler _Py_old_handler = \\)",
    "insertText": "_set_thread_local_invalid_parameter_handler(_Py_silent_invalid_parameter_handler)"
  },
  {
    "label": "_set_thread_local_invalid_parameter_handler()",
    "kind": "Method",
    "detail": "Function (# define _Py_END_SUPPRESS_IPH \\)",
    "insertText": "_set_thread_local_invalid_parameter_handler(_Py_old_handler)"
  }
]