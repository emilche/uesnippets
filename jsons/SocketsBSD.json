[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSocketBSD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketBSD"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FSocketBSD()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformTime . h \" # include \" BSDSockets / SocketSubsystemBSDPrivate . h \" # include<atomic> class FInternetAddr ; # if PLATFORM_HAS_BSD_SOCKETS | | PLATFORM_HAS_BSD_IPV6_SOCKETS # include \" Sockets . h \" enum class ESocketBSDParam : uint8 { CanRead,CanWrite,HasError,} ; enum class ESocketBSDReturn : uint8 { Yes,No,EncounteredError,} ; class FSocketBSD : public FSocket { public :)",
    "insertText": "FSocketBSD(SOCKET InSocket, ESocketType InSocketType, const FString& InSocketDescription, const FName& InSocketProtocol, ISocketSubsystem * InSubsystem) : FSocket(InSocketType, InSocketDescription, InSocketProtocol) , Socket(InSocket) , LastActivityTime(0.0) , SocketSubsystem(InSubsystem)"
  },
  {
    "label": "FSocketBSD()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSocketBSD()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GetNativeSocket()",
    "kind": "Method",
    "detail": "Function (} public : SOCKET)",
    "insertText": "GetNativeSocket()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Bind(const FInternetAddr& Addr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(const FInternetAddr& Addr)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Listen(int32 MaxBacklog)"
  },
  {
    "label": "WaitForPendingConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForPendingConnection(bool& bHasPendingConnection, const FTimespan& WaitTime)"
  },
  {
    "label": "HasPendingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingData(uint32& PendingDataSize)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (class FSocket*)",
    "insertText": "Accept(const FString& SocketDescription)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (class FSocket*)",
    "insertText": "Accept(FInternetAddr& OutAddr, const FString& SocketDescription)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendTo(const uint8* Data, int32 Count, int32& BytesSent, const FInternetAddr& Destination)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(const uint8* Data, int32 Count, int32& BytesSent)"
  },
  {
    "label": "RecvFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecvFrom(uint8* Data, int32 BufferSize, int32& BytesRead, FInternetAddr& Source, ESocketReceiveFlags::Type Flags = ESocketReceiveFlags::None)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recv(uint8* Data,int32 BufferSize,int32& BytesRead, ESocketReceiveFlags::Type Flags = ESocketReceiveFlags::None)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(ESocketWaitConditions::Type Condition, FTimespan WaitTime)"
  },
  {
    "label": "GetConnectionState()",
    "kind": "Method",
    "detail": "Function (ESocketConnectionState)",
    "insertText": "GetConnectionState()"
  },
  {
    "label": "GetAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAddress(FInternetAddr& OutAddr)"
  },
  {
    "label": "GetPeerAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPeerAddress(FInternetAddr& OutAddr)"
  },
  {
    "label": "SetNonBlocking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNonBlocking(bool bIsNonBlocking = true)"
  },
  {
    "label": "SetNoDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNoDelay(bool bIsNoDelay = true)"
  },
  {
    "label": "SetBroadcast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBroadcast(bool bAllowBroadcast = true)"
  },
  {
    "label": "JoinMulticastGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JoinMulticastGroup(const FInternetAddr& GroupAddress)"
  },
  {
    "label": "JoinMulticastGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JoinMulticastGroup(const FInternetAddr& GroupAddress, const FInternetAddr& InterfaceAddress)"
  },
  {
    "label": "LeaveMulticastGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LeaveMulticastGroup(const FInternetAddr& GroupAddress)"
  },
  {
    "label": "LeaveMulticastGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LeaveMulticastGroup(const FInternetAddr& GroupAddress, const FInternetAddr& InterfaceAddress)"
  },
  {
    "label": "SetMulticastLoopback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMulticastLoopback(bool bLoopback)"
  },
  {
    "label": "SetMulticastTtl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMulticastTtl(uint8 TimeToLive)"
  },
  {
    "label": "SetMulticastInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMulticastInterface(const FInternetAddr& InterfaceAddress)"
  },
  {
    "label": "SetReuseAddr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReuseAddr(bool bAllowReuse = true)"
  },
  {
    "label": "SetLinger()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLinger(bool bShouldLinger = true, int32 Timeout = 0)"
  },
  {
    "label": "SetRecvErr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvErr(bool bUseErrorQueue = true)"
  },
  {
    "label": "SetSendBufferSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendBufferSize(int32 Size,int32& NewSize)"
  },
  {
    "label": "SetReceiveBufferSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReceiveBufferSize(int32 Size,int32& NewSize)"
  },
  {
    "label": "GetPortNo()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPortNo()"
  },
  {
    "label": "SetIpPktInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIpPktInfo(bool bEnable)"
  },
  {
    "label": "RecvFromWithPktInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecvFromWithPktInfo(uint8* Data, int32 BufferSize, int32& BytesRead, FInternetAddr& Source, FInternetAddr& Destination, ESocketReceiveFlags::Type Flags = ESocketReceiveFlags::None)"
  },
  {
    "label": "SetIPv6Only()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIPv6Only(bool bIPv6Only)"
  },
  {
    "label": "HasState()",
    "kind": "Method",
    "detail": "Function (protected : ESocketBSDReturn)",
    "insertText": "HasState(ESocketBSDParam State, FTimespan WaitTime = FTimespan::Zero())"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (LastActivityTime =)",
    "insertText": "Seconds()"
  }
]