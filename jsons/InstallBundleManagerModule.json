[
  {
    "label": "IInstallBundleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallBundleManager"
  },
  {
    "label": "FInstallBundleManagerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstallBundleManagerModule"
  },
  {
    "label": "IInstallBundleManagerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallBundleManagerModule"
  },
  {
    "label": "InstallBundleManagerModuleImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstallBundleManagerModuleImpl"
  },
  {
    "label": "TInstallBundleManagerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInstallBundleManagerModule"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" HAL / Platform . h \" # include \" InstallBundleManagerInterface . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ConfigCacheIni . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / SharedPointer . h \" class IInstallBundleManager ; class FInstallBundleManagerModule : public IModuleInterface { public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "PreUnloadCallback()",
    "kind": "Method",
    "detail": "Function (} } ; class IInstallBundleManagerModule : public IModuleInterface { public : void)",
    "insertText": "PreUnloadCallback()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (InstallBundleManager = nullptr ;)",
    "insertText": "check(LastInstallBundleManager.IsValid() == false)"
  },
  {
    "label": "GetInstallBundleManager()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IInstallBundleManager>)",
    "insertText": "GetInstallBundleManager()"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (FString ModuleName ; # if WITH_EDITOR GConfig ->)",
    "insertText": "GetString(TEXT(\"InstallBundleManager\"), TEXT(\"EditorModuleName\"), ModuleName, GEngineIni)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (# else GConfig ->)",
    "insertText": "GetString(TEXT(\"InstallBundleManager\"), TEXT(\"ModuleName\"), ModuleName, GEngineIni)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(FModuleManager::Get().GetModule(*ModuleName) == this)"
  },
  {
    "label": "InstallBundleManagerModuleImpl()",
    "kind": "Method",
    "detail": "Function (InstallBundleManager = MakeShared<)",
    "insertText": "InstallBundleManagerModuleImpl()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (LastInstallBundleManager = InstallBundleManager ; InstallBundleManager ->)",
    "insertText": "Initialize()"
  }
]