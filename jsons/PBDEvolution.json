[
  {
    "label": "FPBDEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDEvolution"
  },
  {
    "label": "FParticleVievToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleVievToken"
  },
  {
    "label": "FPBDEvolution()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ArrayCollection . h \" # include \" Chaos / PBDActiveView . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" Chaos / KinematicGeometryParticles . h \" # endif # include \" Chaos / SoftsSolverCollisionParticles . h \" # include \" Chaos / VelocityField . h \" namespace Chaos::Softs { class FPBDEvolution : public TArrayCollection { public :)",
    "insertText": "FPBDEvolution(FSolverParticles&& InParticles, FSolverCollisionParticles&& InGeometryParticles, TArray<TVec3<int32>>&& CollisionTriangles, int32 NumIterations = 1, FSolverReal CollisionThickness = (FSolverReal)0., FSolverReal SelfCollisionsThickness = (FSolverReal)0., FSolverReal CoefficientOfFriction = (FSolverReal)0., FSolverReal Damping = (FSolverReal)0.04, FSolverReal LocalDamping = (FSolverReal)0., bool bDoQuasistatics = false, bool InbUsePerParticleDamping = false)"
  },
  {
    "label": "FPBDEvolution()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDEvolution()"
  },
  {
    "label": "AdvanceOneTimeStep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceOneTimeStep(const FSolverReal Dt)"
  },
  {
    "label": "ResetParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParticles()"
  },
  {
    "label": "AddParticleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddParticleRange(int32 NumParticles, uint32 GroupId, bool bActivate)"
  },
  {
    "label": "GetParticleRangeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParticleRangeSize(int32 Offset)"
  },
  {
    "label": "ActivateParticleRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateParticleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "ActivateRange()",
    "kind": "Method",
    "detail": "Function (MParticlesActiveView .)",
    "insertText": "ActivateRange(Offset, bActivate)"
  },
  {
    "label": "DeactivateParticleRanges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeactivateParticleRanges()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MParticlesActiveView .)",
    "insertText": "Reset(0)"
  },
  {
    "label": "AddParticleRange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddParticleRange(int32 NumItems, bool bActivate = true)"
  },
  {
    "label": "Particles()",
    "kind": "Method",
    "detail": "Function (} const FSolverParticles&)",
    "insertText": "Particles()"
  },
  {
    "label": "AddCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCollisionParticleRange(int32 NumParticles, uint32 GroupId, bool bActivate)"
  },
  {
    "label": "AddCollisionParticle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCollisionParticle(uint32 GroupId, bool bActivate)"
  },
  {
    "label": "RemoveCollisionParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCollisionParticle(int32 CollisionParticleIndex, int32 CollisionParticleViewIndex)"
  },
  {
    "label": "ActivateCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCollisionParticleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "GetCollisionParticleRangeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCollisionParticleRangeSize(int32 Offset)"
  },
  {
    "label": "CollisionParticles()",
    "kind": "Method",
    "detail": "Function (} const FSolverCollisionParticles&)",
    "insertText": "CollisionParticles()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MConstraintInits .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddConstraintInitRange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddConstraintInitRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "AddConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddConstraintRuleRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "AddPostCollisionConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddPostCollisionConstraintRuleRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "AddConstraintPostprocessingsRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddConstraintPostprocessingsRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "GetConstraintInitRangeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintInitRangeSize(int32 Offset)"
  },
  {
    "label": "GetConstraintRuleRangeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetConstraintRuleRangeSize(int32 Offset)"
  },
  {
    "label": "GetPostCollisionConstraintRuleRangeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPostCollisionConstraintRuleRangeSize(int32 Offset)"
  },
  {
    "label": "GetConstraintPostprocessingsRangeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetConstraintPostprocessingsRangeSize(int32 Offset)"
  },
  {
    "label": "ActivateConstraintInitRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateConstraintInitRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "ActivateConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateConstraintRuleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "ActivatePostCollisionConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivatePostCollisionConstraintRuleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "ActivateConstraintPostprocessingsRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateConstraintPostprocessingsRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} const TArray<TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal)>>& ConstraintInits()"
  },
  {
    "label": "SetCollisionKinematicUpdateFunction()",
    "kind": "Method",
    "detail": "Function (MKinematicUpdate = KinematicUpdate ; } void)",
    "insertText": "SetCollisionKinematicUpdateFunction(TFunction<void(FSolverCollisionParticles&, const FSolverReal, const FSolverReal, const int32)> KinematicUpdate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (MCollisionKinematicUpdate = KinematicUpdate ; } TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal, const int32)>& GetForceFunction(const uint32 GroupId = 0)"
  },
  {
    "label": "SetQuasistatics()",
    "kind": "Method",
    "detail": "Function (MGroupGravityAccelerations [ GroupId ] = Acceleration ; } void)",
    "insertText": "SetQuasistatics(const bool bDoQuasistaticsIn)"
  },
  {
    "label": "GetVelocityAndPressureField()",
    "kind": "Method",
    "detail": "Function (bDoQuasistatics = bDoQuasistaticsIn ; } FVelocityAndPressureField&)",
    "insertText": "GetVelocityAndPressureField(const uint32 GroupId = 0)"
  },
  {
    "label": "GetCollisionThickness()",
    "kind": "Method",
    "detail": "Function (MNumIterations = Iterations ; } FSolverReal)",
    "insertText": "GetCollisionThickness(const uint32 GroupId = 0)"
  },
  {
    "label": "GetCoefficientOfFriction()",
    "kind": "Method",
    "detail": "Function (MGroupCollisionThicknesses [ GroupId ] = CollisionThickness ; } FSolverReal)",
    "insertText": "GetCoefficientOfFriction(const uint32 GroupId = 0)"
  },
  {
    "label": "GetDamping()",
    "kind": "Method",
    "detail": "Function (MGroupCoefficientOfFrictions [ GroupId ] = CoefficientOfFriction ; } FSolverReal)",
    "insertText": "GetDamping(const uint32 GroupId = 0)"
  },
  {
    "label": "GetLocalDamping()",
    "kind": "Method",
    "detail": "Function (MGroupDampings [ GroupId ] = Damping ; } FSolverReal)",
    "insertText": "GetLocalDamping(const uint32 GroupId = 0)"
  },
  {
    "label": "GetUseCCD()",
    "kind": "Method",
    "detail": "Function (MGroupLocalDampings [ GroupId ] = LocalDamping ; } bool)",
    "insertText": "GetUseCCD(const uint32 GroupId = 0)"
  },
  {
    "label": "GetParticleDamping()",
    "kind": "Method",
    "detail": "Function (MGroupUseCCDs [ GroupId ] = bUseCCD ; } FSolverReal)",
    "insertText": "GetParticleDamping(const uint32 ParticleIndex = 0)"
  },
  {
    "label": "GetCollisionStatus()",
    "kind": "Method",
    "detail": "Function (MParticleDampings [ ParticleIndex ] = Damping ; } } const TArray<bool>&)",
    "insertText": "GetCollisionStatus()"
  },
  {
    "label": "ResetGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGroups()"
  },
  {
    "label": "PreIterationUpdate()",
    "kind": "Method",
    "detail": "Function (template<bool bForceRule,bool bVelocityField,bool bDampVelocityRule> void)",
    "insertText": "PreIterationUpdate(const FSolverReal Dt, const int32 Offset, const int32 Range, const int32 MinParallelBatchSize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct FParticleVievToken { int32 ParticleIndex = INDEX_NONE ; int32 ViewIndex = INDEX_NONE ; } ; private : FSolverParticles MParticles ; TPBDActiveView<FSolverParticles> MParticlesActiveView ; FSolverCollisionParticles MCollisionParticles ; TPBDActiveView<FSolverCollisionParticles> MCollisionParticlesActiveView ; TArray<FParticleVievToken> RemovedCollisionIndices ; TArrayCollectionArray<FSolverRigidTransform3> MCollisionTransforms ; TArrayCollectionArray<bool> MCollided ; TArrayCollectionArray<uint32> MCollisionParticleGroupIds ; TArrayCollectionArray<uint32> MParticleGroupIds ; TArray<FSolverVec3> MCollisionContacts ; TArray<FSolverVec3> MCollisionNormals ; TArray<FSolverReal> MCollisionPhis ; TArrayCollectionArray<FSolverVec3> MGroupGravityAccelerations ; TArrayCollectionArray<FVelocityAndPressureField> MGroupVelocityAndPressureFields ; TArrayCollectionArray<TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal, const int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArrayCollectionArray<FSolverReal> MGroupCollisionThicknesses ; TArrayCollectionArray<FSolverReal> MGroupCoefficientOfFrictions ; TArrayCollectionArray<FSolverReal> MGroupDampings ; TArrayCollectionArray<FSolverReal> MGroupLocalDampings ; TArrayCollectionArray<bool> MGroupUseCCDs ; TArrayCollectionArray<FSolverReal> MParticleDampings ; TArray<TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal, const FSolverReal, const int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(FSolverCollisionParticles&, const FSolverReal, const FSolverReal, const int32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (int32 MNumIterations ; FSolverVec3 MGravity ; FSolverReal MCollisionThickness ; FSolverReal MCoefficientOfFriction ; FSolverReal MDamping ; FSolverReal MLocalDamping ; FSolverReal MTime ; bool bDoQuasistatics = false ; bool bUsePerParticleDamping = false ; } ; } # if !)",
    "insertText": "defined(CHAOS_POST_ITERATION_UPDATES_ISPC_ENABLED)"
  }
]