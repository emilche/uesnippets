[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TDynamicParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicParticles"
  },
  {
    "label": "TDynamicParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / Particles . h \" namespace Chaos { template<class T,int d> class TDynamicParticles : public TParticles<T,d> { public :)",
    "insertText": "TDynamicParticles() : TParticles<T, d>()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MV)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MAcceleration)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MM)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MInvM)"
  },
  {
    "label": "TDynamicParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDynamicParticles(const TDynamicParticles<T, d>& Other)"
  },
  {
    "label": "TDynamicParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDynamicParticles(TDynamicParticles<T, d>&& Other) : TParticles<T, d>(MoveTemp(Other)), MV(MoveTemp(Other.MV)), MAcceleration(MoveTemp(Other.MAcceleration)), MM(MoveTemp(Other.MM)), MInvM(MoveTemp(Other.MInvM))"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "V(const int32 Index)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (MV [ Index ] = InV ; } const TArrayCollectionArray<TVector<T,d>>&)",
    "insertText": "GetV()"
  }
]