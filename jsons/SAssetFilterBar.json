[
  {
    "label": "SFilterSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterSearchBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "EDITORWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORWIDGETS_API"
  },
  {
    "label": "SAssetFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetFilterBar"
  },
  {
    "label": "SAssetFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetFilter"
  },
  {
    "label": "FCategoryMenu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCategoryMenu"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetDefinitionRegistry . h \" # include \" AssetRegistry / ARFilter . h \" # include \" AssetToolsModule . h \" # include \" AssetTypeCategories . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" Filters / CustomClassFilterData . h \" # include \" Filters / CustomTextFilters . h \" # include \" Filters / FilterBarConfig . h \" # include \" Filters / FilterBase . h \" # include \" Filters / SBasicFilterBar . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" HAL / Platform . h \" # include \" IAssetTools . h \" # include \" IAssetTypeActions . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Math / Color . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Attribute . h \" # include \" Misc / NamePermissionList . h \" # include \" Modules / ModuleManager . h \" # include \" SlateGlobals . h \" # include \" Styling / AppStyle . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateIconFinder . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Textures / SlateIcon . h \" # include \" ToolMenu . h \" # include \" ToolMenuContext . h \" # include \" ToolMenuDelegates . h \" # include \" ToolMenuSection . h \" # include \" ToolMenus . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Misc / AssetFilterData . h \" # include \" SAssetFilterBar . generated . h \" class SFilterSearchBox ; class SWidget ; # define LOCTEXT_NAMESPACE \" FilterBar \")",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnFilterAssetType, UClass*)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnPopulateAddAssetFilterMenu, UToolMenu*, TSharedPtr<FFilterCategory>, FOnFilterAssetType) UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetMutableConfig()",
    "kind": "Method",
    "detail": "Function (FOnPopulateAddAssetFilterMenu PopulateFilterMenu ; FOnFilterAssetType OnFilterAssetType ; FOnExtendAddFilterMenu OnExtendAddFilterMenu ; } ; class FFilterBarBase { protected : FFilterBarSettings*)",
    "insertText": "GetMutableConfig()"
  },
  {
    "label": "GetConstConfig()",
    "kind": "Method",
    "detail": "Function (const FFilterBarSettings*)",
    "insertText": "GetConstConfig()"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig()"
  },
  {
    "label": "InitializeConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeConfig()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (protected : FName FilterBarIdentifier ; } ; template<FilterType> class SAssetFilterBar : public SBasicFilterBar<FilterType>,public FFilterBarBase { public : using FOnFilterChanged = SBasicFilterBar<FilterType>::FOnFilterChanged ; using FCreateTextFilter = SBasicFilterBar<FilterType>::FCreateTextFilter ;)",
    "insertText": "SLATE_BEGIN_ARGS(SAssetFilterBar<FilterType> ) : _FilterMenuName(FName(\"FilterBar.FilterMenu\")) , _UseDefaultAssetFilters(true) , _FilterBarLayout(EFilterBarLayout::Horizontal) , _CanChangeOrientation(false) , _FilterPillStyle(EFilterPillStyle::Default) , _DefaultMenuExpansionCategory(EAssetCategoryPaths::Basic) , _bUseSectionsForCustomCategories(false)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnFilterChanged, OnFilterChanged ) SLATE_EVENT( FOnExtendAddFilterMenu, OnExtendAddFilterMenu ) SLATE_ARGUMENT( TArray<TSharedRef<FFilterBase<FilterType>>>, CustomFilters) SLATE_ARGUMENT( TArray<TSharedRef<FCustomClassFilterData>>, CustomClassFilters) SLATE_ARGUMENT(FCreateTextFilter, CreateTextFilter) SLATE_ARGUMENT(TSharedPtr<SFilterSearchBox>, FilterSearchBox) SLATE_ARGUMENT(FName, FilterMenuName) SLATE_ARGUMENT(FName, FilterBarIdentifier) SLATE_ARGUMENT(bool, UseDefaultAssetFilters) SLATE_ARGUMENT(EFilterBarLayout, FilterBarLayout) SLATE_ARGUMENT(bool, CanChangeOrientation) SLATE_ARGUMENT(EFilterPillStyle, FilterPillStyle) SLATE_ARGUMENT(TOptional<FAssetCategoryPath>, DefaultMenuExpansionCategory) SLATE_ARGUMENT(bool, bUseSectionsForCustomCategories) SLATE_END_ARGS() virtual ~SAssetFilterBar()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (bUseDefaultAssetFilters = InArgs . _UseDefaultAssetFilters ; CustomClassFilters = InArgs . _CustomClassFilters ; UserCustomClassFilters = InArgs . _CustomClassFilters ; FilterMenuName = InArgs . _FilterMenuName ; FilterBarIdentifier = InArgs . _FilterBarIdentifier ; DefaultMenuExpansionCategory = InArgs . _DefaultMenuExpansionCategory ; SBasicFilterBar<FilterType>::FArguments Args ; Args . _OnFilterChanged = InArgs . _OnFilterChanged ; Args . _CustomFilters = InArgs . _CustomFilters ; Args . _OnExtendAddFilterMenu = InArgs . _OnExtendAddFilterMenu ; Args . _CreateTextFilter = InArgs . _CreateTextFilter ; Args . _FilterSearchBox = InArgs . _FilterSearchBox ; Args . _FilterBarLayout = InArgs . _FilterBarLayout ; Args . _CanChangeOrientation = InArgs . _CanChangeOrientation ; Args . _FilterPillStyle = InArgs . _FilterPillStyle ; Args . _UseSectionsForCategories = InArgs . _bUseSectionsForCustomCategories ; SBasicFilterBar<FilterType)",
    "insertText": "Construct(Args)"
  },
  {
    "label": "CreateAssetTypeActionFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAssetTypeActionFilters()"
  },
  {
    "label": "FAssetToolsModule()",
    "kind": "Method",
    "detail": "Function (FAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<)",
    "insertText": "FAssetToolsModule(TEXT(\"AssetTools\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FPathPermissionList>& AssetClassPermissionList = AssetToolsModule .)",
    "insertText": "Get().GetAssetClassPathPermissionList(AssetClassAction)"
  },
  {
    "label": "OnFilterChanged()",
    "kind": "Method",
    "detail": "Function (AssetClassPermissionList ->)",
    "insertText": "OnFilterChanged().AddSP(this, &SAssetFilterBar<FilterType>::CreateAssetTypeActionFilters)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (AssetRegistryVersionChangeHandle =)",
    "insertText": "Get()->OnAssetDefinitionRegistryVersionChange().AddLambda([this](UAssetDefinitionRegistry*) { CreateAssetTypeActionFilters(); })"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveSettings()"
  },
  {
    "label": "SaveCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCustomTextFilters(FilterBarConfig)"
  },
  {
    "label": "SaveFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveFilters(FilterBarConfig)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FilterBarConfig -> bIsLayoutSaved = this -> bCanChangeOrientation ;)",
    "insertText": "if(this->bCanChangeOrientation)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadSettings()"
  },
  {
    "label": "LoadFilters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LoadFilters(FilterBarConfig)"
  },
  {
    "label": "LoadCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCustomTextFilters(FilterBarConfig)"
  },
  {
    "label": "SetFilterLayout()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetFilterLayout(FilterBarConfig->FilterBarLayout)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (} this -> OnFilterChanged .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} protected : FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "Handled().ReleaseMouseCapture()"
  },
  {
    "label": "MakeAddFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> MenuContent =)",
    "insertText": "MakeAddFilterMenu()"
  },
  {
    "label": "GetScreenSpacePosition()",
    "kind": "Method",
    "detail": "Function (FVector2D SummonLocation = MouseEvent .)",
    "insertText": "GetScreenSpacePosition()"
  },
  {
    "label": "GetEventPath()",
    "kind": "Method",
    "detail": "Function (FWidgetPath WidgetPath = MouseEvent .)",
    "insertText": "GetEventPath() != nullptr ? *MouseEvent.GetEventPath() : FWidgetPath()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PushMenu(this->AsShared(), WidgetPath, MenuContent.ToSharedRef(), SummonLocation, FPopupTransitionEffect(FPopupTransitionEffect::ContextMenu))"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return Reply ; } return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "SaveCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveCustomTextFilters(FFilterBarSettings* FilterBarConfig)"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterBase<FilterType>> CustomFilter = CustomTextFilter ->)",
    "insertText": "GetFilter().ToSharedRef()"
  },
  {
    "label": "IsFrontendFilterInUse()",
    "kind": "Method",
    "detail": "Function (bool bIsChecked = this ->)",
    "insertText": "IsFrontendFilterInUse(CustomFilter)"
  },
  {
    "label": "IsFilterActive()",
    "kind": "Method",
    "detail": "Function (bool bIsActive = this ->)",
    "insertText": "IsFilterActive(CustomFilter)"
  },
  {
    "label": "CreateCustomTextFilterData()",
    "kind": "Method",
    "detail": "Function (FCustomTextFilterData FilterData = CustomTextFilter ->)",
    "insertText": "CreateCustomTextFilterData()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FCustomTextFilterState FilterState ; FilterState . bIsChecked = bIsChecked ; FilterState . bIsActive = bIsActive ; FilterState . FilterData = FilterData ; FilterBarConfig -> CustomTextFilters .)",
    "insertText": "Add(FilterState)"
  },
  {
    "label": "SaveFilters()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SaveFilters(FFilterBarSettings* FilterBarConfig)"
  },
  {
    "label": "GetFilterName()",
    "kind": "Method",
    "detail": "Function (const FString FilterName = Filter ->)",
    "insertText": "GetFilterName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } else)",
    "insertText": "if(Filter->GetFrontendFilter().IsValid())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FilterBarConfig -> CustomFilters .)",
    "insertText": "Add(FilterName, Filter->IsEnabled())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } FilterBarConfig -> TypeFilters .)",
    "insertText": "Append(UnknownTypeFilters)"
  },
  {
    "label": "LoadCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadCustomTextFilters(const FFilterBarSettings* FilterBarConfig)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ICustomTextFilter<FilterType>> NewTextFilter = this -> CreateTextFilter .)",
    "insertText": "Execute().ToSharedRef()"
  },
  {
    "label": "SetFromCustomTextFilterData()",
    "kind": "Method",
    "detail": "Function (NewTextFilter ->)",
    "insertText": "SetFromCustomTextFilterData(FilterState.FilterData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this -> CustomTextFilters .)",
    "insertText": "Add(NewTextFilter)"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> AddedFilter = this ->)",
    "insertText": "AddFilterToBar(NewFilter)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (AddedFilter ->)",
    "insertText": "SetEnabled(FilterState.bIsActive, false)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetFrontendFilterActive(NewFilter, FilterState.bIsActive)"
  },
  {
    "label": "LoadFilters()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "LoadFilters(const FFilterBarSettings* FilterBarConfig)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterBase<FilterType>>& FrontendFilter =* FrontendFilterIt ; const FString& FilterName = FrontendFilter ->)",
    "insertText": "GetName()"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> NewFilter = this ->)",
    "insertText": "AddFilterToBar(FrontendFilter)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (NewFilter ->)",
    "insertText": "SetEnabled(*bIsActive, false)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetFrontendFilterActive(FrontendFilter, NewFilter->IsEnabled())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } UnknownTypeFilters = FilterBarConfig -> TypeFilters ;)",
    "insertText": "for(const TSharedRef<FCustomClassFilterData> &CustomClassFilter : this->CustomClassFilters)"
  },
  {
    "label": "AddAssetFilterToBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> NewFilter = this ->)",
    "insertText": "AddAssetFilterToBar(CustomClassFilter)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (UnknownTypeFilters .)",
    "insertText": "Remove(FilterName)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } } } typedef SBasicFilterBar<FilterType>::SFilter SFilter ; class SAssetFilter : public SFilter { using FOnRequestRemove = SBasicFilterBar<FilterType>::SFilter::FOnRequestRemove ; using FOnRequestEnableOnly = SBasicFilterBar<FilterType>::SFilter::FOnRequestEnableOnly ; using FOnRequestEnableAll = SBasicFilterBar<FilterType>::SFilter::FOnRequestEnableAll ; using FOnRequestDisableAll = SBasicFilterBar<FilterType>::SFilter::FOnRequestDisableAll ; using FOnRequestRemoveAll = SBasicFilterBar<FilterType>::SFilter::FOnRequestRemoveAll ; using FOnRequestRemoveAllButThis = SBasicFilterBar<FilterType>::SFilter::FOnRequestRemoveAllButThis ;)",
    "insertText": "SLATE_BEGIN_ARGS(SAssetFilter)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FCustomClassFilterData>, CustomClassFilter ) SLATE_ARGUMENT( TSharedPtr<FFilterBase<FilterType>>, FrontendFilter ) SLATE_EVENT( FOnFilterChanged, OnFilterChanged ) SLATE_EVENT( FOnRequestRemove, OnRequestRemove ) SLATE_EVENT( FOnRequestEnableOnly, OnRequestEnableOnly ) SLATE_EVENT( FOnRequestEnableAll, OnRequestEnableAll) SLATE_EVENT( FOnRequestDisableAll, OnRequestDisableAll ) SLATE_EVENT( FOnRequestRemoveAll, OnRequestRemoveAll ) SLATE_EVENT( FOnRequestRemoveAllButThis, OnRequestRemoveAllButThis ) SLATE_ARGUMENT(EFilterPillStyle, FilterPillStyle) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> bEnabled = false ; this -> OnFilterChanged = InArgs . _OnFilterChanged ; this -> OnRequestRemove = InArgs . _OnRequestRemove ; this -> OnRequestEnableOnly = InArgs . _OnRequestEnableOnly ; this -> OnRequestEnableAll = InArgs . _OnRequestEnableAll ; this -> OnRequestDisableAll = InArgs . _OnRequestDisableAll ; this -> OnRequestRemoveAll = InArgs . _OnRequestRemoveAll ; this -> OnRequestRemoveAllButThis = InArgs . _OnRequestRemoveAllButThis ; this -> FrontendFilter = InArgs . _FrontendFilter ; CustomClassFilter = InArgs . _CustomClassFilter ; this -> FilterColor = FLinearColor::White ;)",
    "insertText": "if(CustomClassFilter.IsValid())"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (this -> FilterColor = CustomClassFilter ->)",
    "insertText": "GetColor()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(this->FrontendFilter.IsValid())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (this -> FilterToolTip = TAttribute<FText)",
    "insertText": "Create(TAttribute<FText>::FGetter::CreateSP(this->FrontendFilter.ToSharedRef(), &FFilterBase<FilterType>::GetToolTipText))"
  },
  {
    "label": "Construct_Internal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Construct_Internal(InArgs._FilterPillStyle)"
  },
  {
    "label": "GetBackendFilter()",
    "kind": "Method",
    "detail": "Function (} public : FARFilter)",
    "insertText": "GetBackendFilter()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FARFilter Filter ;)",
    "insertText": "if(CustomClassFilter)"
  },
  {
    "label": "BuildBackendFilter()",
    "kind": "Method",
    "detail": "Function (CustomClassFilter ->)",
    "insertText": "BuildBackendFilter(Filter)"
  },
  {
    "label": "GetCustomClassFilterData()",
    "kind": "Method",
    "detail": "Function (} return Filter ; } const TSharedPtr<FCustomClassFilterData>&)",
    "insertText": "GetCustomClassFilterData()"
  },
  {
    "label": "GetFilterDisplayName()",
    "kind": "Method",
    "detail": "Function (CustomClassFilter = InCustomClassFilterData ; } FText)",
    "insertText": "GetFilterDisplayName()"
  },
  {
    "label": "GetCombinedBackendFilter()",
    "kind": "Method",
    "detail": "Function (} } protected : TSharedPtr<FCustomClassFilterData> CustomClassFilter ; } ; public : FARFilter)",
    "insertText": "GetCombinedBackendFilter()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FARFilter CombinedFilter ;)",
    "insertText": "for(int32 FilterIdx = 0; FilterIdx < AssetFilters.Num(); ++FilterIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<SAssetFilter> AssetFilter = AssetFilters [ FilterIdx ] ;)",
    "insertText": "if(AssetFilter.IsValid() && AssetFilter->IsEnabled())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CombinedFilter .)",
    "insertText": "Append(AssetFilter->GetBackendFilter())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(CombinedFilter.ClassPaths.Contains(FTopLevelAssetPath(TEXT(\"/Script/Engine\"), TEXT(\"Blueprint\"))))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (CombinedFilter . ClassPaths .)",
    "insertText": "AddUnique(FTopLevelAssetPath(TEXT(\"/Script/Engine\"), TEXT(\"BlueprintGeneratedClass\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CombinedFilter.bRecursiveClasses)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (const UClass* TypeClass = CustomClassFilter ->)",
    "insertText": "GetClass()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CombinedFilter . RecursiveClassPathsExclusionSet .)",
    "insertText": "Add(TypeClass->GetClassPathName())"
  },
  {
    "label": "DoesAssetTypeFilterExist()",
    "kind": "Method",
    "detail": "Function (} } } return CombinedFilter ; } bool)",
    "insertText": "DoesAssetTypeFilterExist(const FTopLevelAssetPath& InClassPath)"
  },
  {
    "label": "IsClassTypeInUse()",
    "kind": "Method",
    "detail": "Function (bool FilterChecked =)",
    "insertText": "IsClassTypeInUse(CustomClassFilterData)"
  },
  {
    "label": "AddAssetFilterToBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> NewFilter =)",
    "insertText": "AddAssetFilterToBar(CustomClassFilterData)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (NewFilter ->)",
    "insertText": "SetEnabled(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(InCheckState == ECheckBoxState::Unchecked && FilterChecked)"
  },
  {
    "label": "RemoveAssetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetFilter(CustomClassFilterData)"
  },
  {
    "label": "GetAssetTypeFilterCheckState()",
    "kind": "Method",
    "detail": "Function (} } } } ECheckBoxState)",
    "insertText": "GetAssetTypeFilterCheckState(const FTopLevelAssetPath& InClassPath)"
  },
  {
    "label": "IsAssetTypeFilterActive()",
    "kind": "Method",
    "detail": "Function (} } return ECheckBoxState::Undetermined ; } bool)",
    "insertText": "IsAssetTypeFilterActive(const FTopLevelAssetPath& InClassPath)"
  },
  {
    "label": "ToggleAssetTypeFilterEnabled()",
    "kind": "Method",
    "detail": "Function (} } return false ; } void)",
    "insertText": "ToggleAssetTypeFilterEnabled(const FTopLevelAssetPath& InClassPath, bool bEnable)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (AssetFilter ->)",
    "insertText": "SetEnabled(bEnable)"
  },
  {
    "label": "RemoveAllFilters()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "RemoveAllFilters()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (AssetFilters .)",
    "insertText": "Empty()"
  },
  {
    "label": "RemoveAllButThis()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "RemoveAllButThis(const TSharedRef<SFilter>& FilterToKeep)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SAssetFilter> AssetFilterToKeep ;)",
    "insertText": "for(const TSharedPtr<SAssetFilter> AssetFilter : AssetFilters)"
  },
  {
    "label": "RemoveAllButThis()",
    "kind": "Method",
    "detail": "Function (AssetFilterToKeep = AssetFilter ; } } SBasicFilterBar<FilterType)",
    "insertText": "RemoveAllButThis(FilterToKeep)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AssetFilters .)",
    "insertText": "Add(AssetFilterToKeep.ToSharedRef())"
  },
  {
    "label": "AddAssetFilterToBar()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<SFilter>)",
    "insertText": "AddAssetFilterToBar(const TSharedPtr<FCustomClassFilterData>& CustomClassFilter)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SAssetFilter> NewFilter =)",
    "insertText": "SNew(SAssetFilter) .FilterPillStyle(this->FilterPillStyle) .CustomClassFilter(CustomClassFilter) .OnFilterChanged(this->OnFilterChanged) .OnRequestRemove(this, &SAssetFilterBar<FilterType>::RemoveFilterAndUpdate) .OnRequestEnableOnly(this, &SAssetFilterBar<FilterType>::EnableOnlyThisFilter) .OnRequestEnableAll(this, &SAssetFilterBar<FilterType>::EnableAllFilters) .OnRequestDisableAll(this, &SAssetFilterBar<FilterType>::DisableAllFilters) .OnRequestRemoveAll(this, &SAssetFilterBar<FilterType>::RemoveAllFilters) .OnRequestRemoveAllButThis(this, &SAssetFilterBar<FilterType>::RemoveAllButThis)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AssetFilters .)",
    "insertText": "Add(NewFilter)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (SBasicFilterBar<FilterType)",
    "insertText": "RemoveFilter(FilterToRemove)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (AssetFilters .)",
    "insertText": "RemoveAll([&FilterToRemove](TSharedRef<SAssetFilter>& AssetFilter) { return AssetFilter == FilterToRemove; })"
  },
  {
    "label": "RemoveAssetFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAssetFilter(const TSharedPtr<FCustomClassFilterData>& CustomClassData, bool ExecuteOnFilterChanged = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FilterToRemove = AssetFilter ; break ; } })",
    "insertText": "if(FilterToRemove.IsValid())"
  },
  {
    "label": "RemoveFilterAndUpdate()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RemoveFilterAndUpdate(FilterToRemove.ToSharedRef())"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "RemoveFilter(FilterToRemove.ToSharedRef())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} AssetFilters .)",
    "insertText": "Remove(FilterToRemove.ToSharedRef())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CustomClassFilters .)",
    "insertText": "Append(UserCustomClassFilters)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function ({ TSharedPtr<FFilterCategory> BasicCategory =)",
    "insertText": "MakeShareable(new FFilterCategory(LOCTEXT(\"BasicFilter\", \"Common\"), LOCTEXT(\"BasicFilterTooltip\", \"Filter by Common assets.\")))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AssetFilterCategories .)",
    "insertText": "Add(EAssetCategoryPaths::Basic.GetCategory(), BasicCategory)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} { TArray<TObjectPtr<UAssetDefinition>> AssetDefinitions =)",
    "insertText": "Get()->GetAllAssetDefinitions()"
  },
  {
    "label": "GetAssetClass()",
    "kind": "Method",
    "detail": "Function (TSoftClassPtr<UObject> AssetClass = AssetDefinition ->)",
    "insertText": "GetAssetClass()"
  },
  {
    "label": "GetFilters()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FAssetFilterDataCache> FilterCache = AssetDefinition ->)",
    "insertText": "GetFilters()"
  },
  {
    "label": "FCustomClassFilterData()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FCustomClassFilterData> CustomClassFilterData = MakeShared<)",
    "insertText": "FCustomClassFilterData(AssetDefinition, FilterData)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFilterCategory> FilterCategory = AssetFilterCategories .)",
    "insertText": "FindRef(CategoryPath.GetCategory())"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (const FText Tooltip =)",
    "insertText": "Format(LOCTEXT(\"WildcardFilterTooltip\", \"Filter by {0} Assets.\"), CategoryPath.GetCategoryText())"
  },
  {
    "label": "FFilterCategory()",
    "kind": "Method",
    "detail": "Function (FilterCategory = MakeShared<)",
    "insertText": "FFilterCategory(CategoryPath.GetCategoryText(), Tooltip)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AssetFilterCategories .)",
    "insertText": "Add(CategoryPath.GetCategory(), FilterCategory)"
  },
  {
    "label": "AddCategory()",
    "kind": "Method",
    "detail": "Function (} CustomClassFilterData ->)",
    "insertText": "AddCategory(FilterCategory)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} CustomClassFilters .)",
    "insertText": "Add(CustomClassFilterData)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } TArray<TSharedRef<SAssetFilter>> AssetFiltersToRemove ;)",
    "insertText": "for(TSharedRef<SAssetFilter>& AssetFilter : AssetFilters)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FCustomClassFilterData>* FoundCustomClassFilterData = CustomClassFilters .)",
    "insertText": "FindByPredicate([AssetFilter](const TSharedRef<FCustomClassFilterData>& CustomClassFilterData) { return CustomClassFilterData->GetFilterName() == AssetFilter->GetCustomClassFilterData()->GetFilterName(); })"
  },
  {
    "label": "SetCustomClassFilterData()",
    "kind": "Method",
    "detail": "Function (AssetFilter ->)",
    "insertText": "SetCustomClassFilterData(*FoundCustomClassFilterData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { AssetFiltersToRemove .)",
    "insertText": "Add(AssetFilter)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(TSharedRef<SAssetFilter>& AssetFilter : AssetFiltersToRemove)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter(AssetFilter)"
  },
  {
    "label": "CreateFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateFiltersMenuCategory(FToolMenuSection& Section, const TArray<TSharedPtr<FCustomClassFilterData>> CustomClassFilterDatas)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddMenuEntry(NAME_None, LabelText, FText::Format( LOCTEXT(\"FilterByTooltipPrefix\", \"Filter by {0}\"), LabelText ), FSlateIconFinder::FindIconForClass(CustomClassFilterData->GetClass()), FUIAction( FExecuteAction::CreateSP( const_cast< SAssetFilterBar<FilterType>* >(this), &SAssetFilterBar<FilterType>::FilterByTypeClicked, CustomClassFilterData ), FCanExecuteAction(), FIsActionChecked::CreateSP(this, &SAssetFilterBar<FilterType>::IsClassTypeInUse, CustomClassFilterData ) ), EUserInterfaceActionType::ToggleButton)"
  },
  {
    "label": "CreateFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateFiltersMenuCategory(UToolMenu* InMenu, const TArray<TSharedPtr<FCustomClassFilterData>> CustomClassFilterDatas)"
  },
  {
    "label": "CreateFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFiltersMenuCategory(InMenu->AddSection(\"Section\"), CustomClassFilterDatas)"
  },
  {
    "label": "CreateAssetFilterBarContext()",
    "kind": "Method",
    "detail": "Function (} UAssetFilterBarContext*)",
    "insertText": "CreateAssetFilterBarContext()"
  },
  {
    "label": "UAssetFilterBarContext()",
    "kind": "Method",
    "detail": "Function (UAssetFilterBarContext* FilterBarContext = NewObject<)",
    "insertText": "UAssetFilterBarContext()"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FilterBarContext -> PopulateFilterMenu =)",
    "insertText": "CreateSP(this, &SAssetFilterBar<FilterType>::PopulateAddFilterMenu)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FilterBarContext -> OnExtendAddFilterMenu = this -> OnExtendAddFilterMenu ;)",
    "insertText": "if(DefaultMenuExpansionCategory.IsSet() && AssetFilterCategories.Contains(DefaultMenuExpansionCategory->GetCategory()))"
  },
  {
    "label": "GetCategory()",
    "kind": "Method",
    "detail": "Function (FilterBarContext -> MenuExpansion = AssetFilterCategories [ DefaultMenuExpansionCategory ->)",
    "insertText": "GetCategory()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UToolMenu* Menu =)",
    "insertText": "Get()->RegisterMenu(FilterMenuName)"
  },
  {
    "label": "AddDynamicSection()",
    "kind": "Method",
    "detail": "Function (Menu -> bShouldCloseWindowAfterMenuSelection = true ; Menu -> bCloseSelfOnly = true ; Menu ->)",
    "insertText": "AddDynamicSection(NAME_None, FNewToolMenuDelegate::CreateLambda([](UToolMenu* InMenu) { if (UAssetFilterBarContext* Context = InMenu->FindContext<UAssetFilterBarContext>()) { Context->PopulateFilterMenu.ExecuteIfBound(InMenu, Context->MenuExpansion, Context->OnFilterAssetType); Context->OnExtendAddFilterMenu.ExecuteIfBound(InMenu); } }))"
  },
  {
    "label": "ToolMenuContext()",
    "kind": "Method",
    "detail": "Function (} FToolMenuContext)",
    "insertText": "ToolMenuContext(CreateAssetFilterBarContext())"
  },
  {
    "label": "PopulateAddFilterMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateAddFilterMenu(UToolMenu* Menu, TSharedPtr<FFilterCategory> MenuExpansion, FOnFilterAssetType OnFilterAssetType)"
  },
  {
    "label": "FCategoryMenu()",
    "kind": "Method",
    "detail": "Function (struct FCategoryMenu { TArray<TSharedPtr<FCustomClassFilterData>> Classes ; FName SectionExtensionHook ; FText SectionHeading ;)",
    "insertText": "FCategoryMenu(const FName& InSectionExtensionHook, const FText& InSectionHeading) : SectionExtensionHook(InSectionExtensionHook) , SectionHeading(InSectionHeading)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } ; TMap<TSharedPtr<FFilterCategory>,FCategoryMenu> CategoryToMenuMap ;)",
    "insertText": "for(const TSharedRef<FCustomClassFilterData> &CustomClassFilter : CustomClassFilters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bPassesExternalFilters = true ;)",
    "insertText": "if(OnFilterAssetType.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (bPassesExternalFilters = OnFilterAssetType .)",
    "insertText": "Execute(CustomClassFilter->GetClass())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bPassesExternalFilters)"
  },
  {
    "label": "GetCategories()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FFilterCategory>> Categories = CustomClassFilter ->)",
    "insertText": "GetCategories()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CategoryMenu -> Classes .)",
    "insertText": "Add(CustomClassFilter)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} else { const FText SectionHeading =)",
    "insertText": "Format(LOCTEXT(\"WildcardFilterHeadingHeadingTooltip\", \"{0} Filters\"), Category->Title)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (const FName ExtensionPoint =)",
    "insertText": "FName(FText::AsCultureInvariant(SectionHeading).ToString())"
  },
  {
    "label": "NewCategoryMenu()",
    "kind": "Method",
    "detail": "Function (FCategoryMenu)",
    "insertText": "NewCategoryMenu(ExtensionPoint, SectionHeading)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CategoryToMenuMap .)",
    "insertText": "Add(Category, NewCategoryMenu)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "for(auto MenuIt = CategoryToMenuMap.CreateIterator(); MenuIt; ++MenuIt)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CategoryToMenuMap .)",
    "insertText": "Remove(MenuIt.Key())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(TSharedPtr<FFilterCategory>* BasicCategory = AssetFilterCategories.Find(EAssetCategoryPaths::Basic.GetCategory()))"
  },
  {
    "label": "PopulateCommonFilterSections()",
    "kind": "Method",
    "detail": "Function (BasicMenu -> SectionExtensionHook = \" FilterBarFilterBasicAsset \" ; } } { this ->)",
    "insertText": "PopulateCommonFilterSections(Menu)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MenuExpansion)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FCategoryMenu* ExpandedCategory = CategoryToMenuMap .)",
    "insertText": "Find(MenuExpansion)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (FToolMenuSection& Section = Menu ->)",
    "insertText": "AddSection(ExpandedCategory->SectionExtensionHook, ExpandedCategory->SectionHeading)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddMenuEntry(FName(FText::AsCultureInvariant(ExpandedCategory->SectionHeading).ToString()), ExpandedCategory->SectionHeading, MenuExpansion->Tooltip, FSlateIcon(FAppStyle::Get().GetStyleSetName(), \"PlacementBrowser.Icons.Basic\"), FUIAction( FExecuteAction::CreateSP( this, &SAssetFilterBar<FilterType>::FilterByTypeCategoryClicked, MenuExpansion, ExpandedCategory->Classes ), FCanExecuteAction(), FGetActionCheckState::CreateSP(this, &SAssetFilterBar<FilterType>::IsTypeCategoryChecked, MenuExpansion, ExpandedCategory->Classes ) ), EUserInterfaceActionType::ToggleButton)"
  },
  {
    "label": "AddSeparator()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddSeparator(\"ExpandedCategorySeparator\")"
  },
  {
    "label": "CreateFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (SAssetFilterBar<FilterType)",
    "insertText": "CreateFiltersMenuCategory(Section, ExpandedCategory->Classes)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CategoryToMenuMap .)",
    "insertText": "Remove(MenuExpansion)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (} } FToolMenuSection& Section = Menu ->)",
    "insertText": "AddSection(\"AssetFilterBarFilterAdvancedAsset\", LOCTEXT(\"AdvancedAssetsMenuHeading\", \"Type Filters\"))"
  },
  {
    "label": "KeySort()",
    "kind": "Method",
    "detail": "Function (CategoryToMenuMap .)",
    "insertText": "KeySort([](const TSharedPtr<FFilterCategory>& A, const TSharedPtr<FFilterCategory>& B) { return A->Title.CompareTo(B->Title) < 0; })"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddSubMenu(FName(FText::AsCultureInvariant(CategoryMenuPair.Key->Title).ToString()), CategoryMenuPair.Key->Title, CategoryMenuPair.Key->Tooltip, FNewToolMenuDelegate::CreateSP(this, &SAssetFilterBar<FilterType>::CreateFiltersMenuCategory, CategoryMenuPair.Value.Classes), FUIAction( FExecuteAction::CreateSP(this, &SAssetFilterBar<FilterType>::FilterByTypeCategoryClicked, CategoryMenuPair.Key, CategoryMenuPair.Value.Classes), FCanExecuteAction(), FGetActionCheckState::CreateSP(this, &SAssetFilterBar<FilterType>::IsTypeCategoryChecked, CategoryMenuPair.Key, CategoryMenuPair.Value.Classes)), EUserInterfaceActionType::ToggleButton)"
  },
  {
    "label": "PopulateCustomFilters()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "PopulateCustomFilters(Menu)"
  },
  {
    "label": "FilterByTypeClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterByTypeClicked(TSharedPtr<FCustomClassFilterData> CustomClassFilterData)"
  },
  {
    "label": "IsClassTypeInUse()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsClassTypeInUse(TSharedPtr<FCustomClassFilterData> Class)"
  },
  {
    "label": "IsTypeCategoryInUse()",
    "kind": "Method",
    "detail": "Function (bool bFullCategoryInUse =)",
    "insertText": "IsTypeCategoryInUse(TypeCategory, Classes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool ExecuteOnFilterChanged = false ;)",
    "insertText": "for(const TSharedPtr<FCustomClassFilterData>& CustomClass : Classes)"
  },
  {
    "label": "RemoveAssetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetFilter(CustomClass)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ExecuteOnFilterChanged = true ; } else)",
    "insertText": "if(!IsClassTypeInUse(CustomClass))"
  },
  {
    "label": "AddAssetFilterToBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> NewFilter =)",
    "insertText": "AddAssetFilterToBar(CustomClass)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (NewFilter ->)",
    "insertText": "SetEnabled(true, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ExecuteOnFilterChanged = true ; } })",
    "insertText": "if(ExecuteOnFilterChanged)"
  },
  {
    "label": "IsTypeCategoryChecked()",
    "kind": "Method",
    "detail": "Function (} } ECheckBoxState)",
    "insertText": "IsTypeCategoryChecked(TSharedPtr<FFilterCategory> TypeCategory, TArray<TSharedPtr<FCustomClassFilterData>> Classes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bIsAnyActionInUse = false ; bool bIsAnyActionNotInUse = false ;)",
    "insertText": "for(const TSharedPtr<FCustomClassFilterData>& CustomClassFilter : Classes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsAnyActionInUse = true ; } else { bIsAnyActionNotInUse = true ; })",
    "insertText": "if(bIsAnyActionInUse && bIsAnyActionNotInUse)"
  },
  {
    "label": "IsTypeCategoryChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState AssetTypeCategoryCheckState =)",
    "insertText": "IsTypeCategoryChecked(TypeCategory, Classes)"
  },
  {
    "label": "OnAssetDefinitionRegistryVersionChange()",
    "kind": "Method",
    "detail": "Function (AssetDefinitionRegistry ->)",
    "insertText": "OnAssetDefinitionRegistryVersionChange().Remove(AssetRegistryVersionChangeHandle)"
  }
]