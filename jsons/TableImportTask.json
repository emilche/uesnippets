[
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "FColumnValueContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColumnValueContainer"
  },
  {
    "label": "FImportTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportTableRow"
  },
  {
    "label": "TImportTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImportTable"
  },
  {
    "label": "FTableImportTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableImportTask"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / StringStore . h \" # include \" Model / Tables . h \" # include \" TraceServices / Model / TableImport . h \" class FTokenizedMessage ; namespace TraceServices { struct FColumnValueContainer ; class FImportTableRow { public : FColumnValueContainer)",
    "insertText": "GetValue(uint64 ColumnIndex)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "SetValue(uint64 ColumnIndex, T Value)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Values [ static_cast<)",
    "insertText": "int32(ColumnIndex)"
  },
  {
    "label": "SetNumValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumValues(uint64 NumColumns)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "AddUninitialized(static_cast<int32>(NumColumns))"
  },
  {
    "label": "TImportTable()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FColumnValueContainer> Values ; } ; int GImportTableAllocatorSlabSize = 3 2<<2 0 ; template<RowType> class TImportTable : public TTable<RowType,GImportTableAllocatorSlabSize> { public :)",
    "insertText": "TImportTable() : TTable<RowType, GImportTableAllocatorSlabSize>() , StringStore(TTable<RowType, GImportTableAllocatorSlabSize>::Allocator)"
  },
  {
    "label": "TImportTable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TImportTable()"
  },
  {
    "label": "GetStringStore()",
    "kind": "Method",
    "detail": "Function (} FStringStore&)",
    "insertText": "GetStringStore()"
  },
  {
    "label": "FTableImportTask()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTableImportTask()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()()"
  },
  {
    "label": "ParseHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseHeader(const FString& HeaderLine)"
  },
  {
    "label": "CreateLayout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLayout(const FString& Line)"
  },
  {
    "label": "ParseData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseData(TArray<FString>& Lines)"
  },
  {
    "label": "ImportTable()",
    "kind": "Method",
    "detail": "Function (private : ETableImportResult)",
    "insertText": "ImportTable()"
  },
  {
    "label": "SplitLineIntoValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitLineIntoValues(const FString& InLine, TArray<FString>& OutValues)"
  },
  {
    "label": "LoadFileToStringArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToStringArray(const FString& InFilePath, TArray<FString>& Lines)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FText& Msg)"
  }
]