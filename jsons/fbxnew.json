[
  {
    "label": "FbxSimpleType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FbxSimpleType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_ARCH_NEW_H_ # define _FBXSDK_CORE_ARCH_NEW_H_ # include<fbxsdk / fbxsdk_def . h> # include<new> # if)",
    "insertText": "defined(FBXSDK_COMPILER_MSC) #pragma warning(push) #pragma warning(disable : 4345)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (enum { value = 0 } ; } ; template<T> struct FbxSimpleType<T*> { enum { value = 1 } ; } ; template<T> struct FbxSimpleType<const T> { enum { value = FbxSimpleType<T>::value } ; } ; template<T,size_t n> struct FbxSimpleType<T [ n ]> { enum { value = FbxSimpleType<T>::value } ; } ; # define)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(T)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (union { T t ; } catcherr ; enum { value = 1 } ; })",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(bool)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(char)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(unsigned char)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(short)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(unsigned short)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(int)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(unsigned int)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(long)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(unsigned long)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(float)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(double)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(long double)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(long long)"
  },
  {
    "label": "FBXSDK_DEFINE_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_DEFINE_SIMPLE_TYPE(unsigned long long)"
  },
  {
    "label": "FBXSDK_IS_SIMPLE_TYPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "FBXSDK_IS_SIMPLE_TYPE(T) ((bool)FbxSimpleType<T>::value) template<typename T> T* FbxNew()"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "p(T*)FbxMalloc(sizeof(T))"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1> T*)",
    "insertText": "FbxNew(T1& p1)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1> T*)",
    "insertText": "FbxNew(const T1& p1)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2> T*)",
    "insertText": "FbxNew(T1& p1, const T2& p2)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2, T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2, const T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(T1& p1, const T2& p2, T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(T1& p1, const T2& p2, const T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, const T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2, T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2, T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2, const T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2, const T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, const T2& p2, T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, const T2& p2, T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, const T2& p2, const T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(T1& p1, const T2& p2, const T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, const T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, const T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, const T4& p4)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(T1& p1, T2& p2, T3& p3, T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, T3& p3, T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, T3& p3, T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, const T3& p3, T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, T3& p3, const T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, T2& p2, T3& p3, T4& p4, const T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, T3& p3, const T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, T3& p3, T4& p4, const T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, const T4& p4, T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, T4& p4, const T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, const T4& p4, const T5& p5)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5,T6> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, const T4& p4, const T5& p5, const T6& p6)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5,T6,T7> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, const T4& p4, const T5& p5, const T6& p6, const T7& p7)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5,T6,T7,T8> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, const T4& p4, const T5& p5, const T6& p6, const T7& p7, const T8& p8)"
  },
  {
    "label": "FbxNew()",
    "kind": "Method",
    "detail": "Function (} template<T,T1,T2,T3,T4,T5,T6,T7,T8,T9> T*)",
    "insertText": "FbxNew(const T1& p1, const T2& p2, const T3& p3, const T4& p4, const T5& p5, const T6& p6, const T7& p7, const T8& p8, const T9& p9)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "FbxDelete(T* p)"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(p)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "FbxDelete(const T* p)"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(const_cast<T*>(p))"
  },
  {
    "label": "FbxNewArray()",
    "kind": "Method",
    "detail": "Function (} } # ifdef FBXSDK_CPU_32 # define MALLOC_HEADER_SIZE 8 # endif # ifdef FBXSDK_CPU_64 # define MALLOC_HEADER_SIZE 1 6 # endif template<T> T*)",
    "insertText": "FbxNewArray(const int n)"
  },
  {
    "label": "FbxAllocSize()",
    "kind": "Method",
    "detail": "Function (const size_t lSize =)",
    "insertText": "FbxAllocSize((size_t)n, sizeof(T))"
  },
  {
    "label": "FbxMalloc()",
    "kind": "Method",
    "detail": "Function (} else { void* const pTmp =)",
    "insertText": "FbxMalloc(lSize + MALLOC_HEADER_SIZE)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "int(pTmp)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* const p = reinterpret_cast<)",
    "insertText": "T(static_cast<char*>(pTmp) + MALLOC_HEADER_SIZE)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(p+i)"
  },
  {
    "label": "FbxDeleteArray()",
    "kind": "Method",
    "detail": "Function (} return p ; } } template<T> void)",
    "insertText": "FbxDeleteArray(T* p)"
  },
  {
    "label": "TMutable()",
    "kind": "Method",
    "detail": "Function (# ifndef USING_LIBSTDCPP typedef std::remove_const<T>::type TMutable ; TMutable* const pMutable = const_cast<)",
    "insertText": "TMutable(p)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (void* const pTmp = reinterpret_cast<)",
    "insertText": "char(pMutable)"
  },
  {
    "label": "pTmp()",
    "kind": "Method",
    "detail": "Function (# else void* const)",
    "insertText": "pTmp(char*)(p)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "n(int*)(pTmp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(int i = 0; i < n; ++i)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (p [ i ] . ~)",
    "insertText": "T()"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxFree(pTmp)"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "FbxFree((void*)p)"
  },
  {
    "label": "FBXSDK_FRIEND_NEW()",
    "kind": "Method",
    "detail": "Function (} } } # define)",
    "insertText": "FBXSDK_FRIEND_NEW()\\ template<typename T>\\ friend T* FBXSDK_NAMESPACE::FbxNew()"
  }
]