[
  {
    "label": "general_matrix_matrix_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_matrix_product"
  },
  {
    "label": "GEMM_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERAL_MATRIX_MATRIX_BLAS_H # define EIGEN_GENERAL_MATRIX_MATRIX_BLAS_H namespace Eigen { namespace internal { # define)",
    "insertText": "GEMM_SPECIALIZATION(EIGTYPE, EIGPREFIX, BLASTYPE, BLASFUNC)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ typedef gebp_traits<EIGTYPE,EIGTYPE> Traits ; \\ \\ void)",
    "insertText": "run(Index rows, Index cols, Index depth, \\ const EIGTYPE* _lhs, Index lhsStride, \\ const EIGTYPE* _rhs, Index rhsStride, \\ EIGTYPE* res, Index resIncr, Index resStride, \\ EIGTYPE alpha, \\ level3_blocking<EIGTYPE, EIGTYPE>& , \\ GemmParallelInfo<Index>*)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (\\ using std::conj ; \\ \\)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(resIncr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "eigen_assert(resIncr == 1)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (\\ char transa,transb ; \\ BlasIndex m,n,k,lda,ldb,ldc ; \\ const EIGTYPE* a,* b ; \\ EIGTYPE)",
    "insertText": "beta(1)"
  },
  {
    "label": "transa()",
    "kind": "Method",
    "detail": "Function (\\ MatrixX # # EIGPREFIX a_tmp,b_tmp ; \\ \\ \\)",
    "insertText": "transa(LhsStorageOrder==RowMajor) ? ((ConjugateLhs) ? 'C' : 'T')"
  },
  {
    "label": "transb()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "transb(RhsStorageOrder==RowMajor) ? ((ConjugateRhs) ? 'C' : 'T')"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ m = convert_index<)",
    "insertText": "BlasIndex(rows)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ n = convert_index<)",
    "insertText": "BlasIndex(cols)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ k = convert_index<)",
    "insertText": "BlasIndex(depth)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ lda = convert_index<)",
    "insertText": "BlasIndex(lhsStride)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldb = convert_index<)",
    "insertText": "BlasIndex(rhsStride)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldc = convert_index<)",
    "insertText": "BlasIndex(resStride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "if((LhsStorageOrder==ColMajor) && (ConjugateLhs))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "lhs(_lhs,m,k,OuterStride<>(lhsStride))"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (\\ a_tmp = lhs .)",
    "insertText": "conjugate()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (\\ a = a_tmp .)",
    "insertText": "data()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ lda = convert_index<)",
    "insertText": "BlasIndex(a_tmp.outerStride())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else a = _lhs ; \\ \\)",
    "insertText": "if((RhsStorageOrder==ColMajor) && (ConjugateRhs))"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "rhs(_rhs,k,n,OuterStride<>(rhsStride))"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldb = convert_index<)",
    "insertText": "BlasIndex(b_tmp.outerStride())"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\ } else b = _rhs ; \\ \\)",
    "insertText": "BLASFUNC(&transa, &transb, &m, &n, &k, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)a, &lda, (const BLASTYPE*)b, &ldb, (const BLASTYPE*)&numext::real_ref(beta), (BLASTYPE*)res, &ldc)"
  }
]