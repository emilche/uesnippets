[
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FActorViewportTransformable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ViewportTransformable . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" UObject / WeakObjectPtr . h \" class FActorViewportTransformable : public FViewportTransformable { public :)",
    "insertText": "FActorViewportTransformable() : ActorWeakPtr(), bShouldBeCarried( false)"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (} const FTransform)",
    "insertText": "GetTransform()"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTransform(const FTransform& NewTransform, const bool bSweep)"
  },
  {
    "label": "BuildBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "BuildBoundingBox(const FTransform& BoundingBoxToWorld)"
  },
  {
    "label": "IsPhysicallySimulated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPhysicallySimulated()"
  },
  {
    "label": "ShouldBeCarried()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeCarried()"
  },
  {
    "label": "SetLinearVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocity(const FVector& NewVelocity)"
  },
  {
    "label": "GetLinearVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLinearVelocity()"
  },
  {
    "label": "UpdateIgnoredActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIgnoredActorList(TArray<class AActor*>& IgnoredActors)"
  }
]