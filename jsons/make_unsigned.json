[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__make_unsigned",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__make_unsigned"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_MAKE_UNSIGNED_H # define _LIBCPP___TYPE_TRAITS_MAKE_UNSIGNED_H # include<__config> # include<__type_traits / apply_cv . h> # include<__type_traits / conditional . h> # include<__type_traits / is_enum . h> # include<__type_traits / is_integral . h> # include<__type_traits / is_unsigned . h> # include<__type_traits / nat . h> # include<__type_traits / remove_cv . h> # include<__type_traits / type_list . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<class _Tp,bool = is_integral<_Tp>::value | | is_enum<_Tp>::value> struct __make_unsigned { } ; template<class _Tp> struct __make_unsigned<_Tp,true> { typedef __find_first<__unsigned_types,)",
    "insertText": "sizeof(_Tp)"
  },
  {
    "label": "__to_unsigned_like()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct __make_unsigned<bool,true> { } ; template<> struct __make_unsigned<signed short,true> { typedef unsigned short type ; } ; template<> struct __make_unsigned<unsigned short,true> { typedef unsigned short type ; } ; template<> struct __make_unsigned<signed int,true> { typedef unsigned int type ; } ; template<> struct __make_unsigned<unsigned int,true> { typedef unsigned int type ; } ; template<> struct __make_unsigned<signed long,true> { typedef unsigned long type ; } ; template<> struct __make_unsigned<unsigned long,true> { typedef unsigned long type ; } ; template<> struct __make_unsigned<signed long long,true> { typedef unsigned long long type ; } ; template<> struct __make_unsigned<unsigned long long,true> { typedef unsigned long long type ; } ; # ifndef _LIBCPP_HAS_NO_INT128 template<> struct __make_unsigned<__int128_t,true> { typedef __uint128_t type ; } ; template<> struct __make_unsigned<__uint128_t,true> { typedef __uint128_t type ; } ; # endif template<class _Tp> struct _LIBCPP_TEMPLATE_VIS make_unsigned { typedef __apply_cv<_Tp,__make_unsigned<remove_cv<_Tp>::type>::type>::type type ; } ; # if _LIBCPP_STD_VER> 1 1 template<class _Tp> using make_unsigned_t = make_unsigned<_Tp>::type ; # endif # ifndef _LIBCPP_CXX03_LANG template<class _Tp> _LIBCPP_HIDE_FROM_ABI make_unsigned<_Tp>::type)",
    "insertText": "__to_unsigned_like(_Tp __x)"
  }
]