[
  {
    "label": "RtpPacketizerAv1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketizerAv1"
  },
  {
    "label": "Obu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Obu"
  },
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Packet"
  },
  {
    "label": "RtpPacketizerAv1()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_PACKETIZER_AV1_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_PACKETIZER_AV1_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" api / array_view . h \" # include \" api / video / video_frame_type . h \" # include \" modules / rtp_rtcp / source / rtp_format . h \" namespace webrtc { class RtpPacketizerAv1 : public RtpPacketizer { public :)",
    "insertText": "RtpPacketizerAv1(rtc::ArrayView<const uint8_t> payload, PayloadSizeLimits limits, VideoFrameType frame_type, bool is_last_frame_in_picture)"
  },
  {
    "label": "RtpPacketizerAv1()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpPacketizerAv1()"
  },
  {
    "label": "NumPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumPackets()"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NextPacket(RtpPacketToSend* packet)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (private : struct Obu { uint8_t header ; uint8_t extension_header ; rtc::ArrayView<const uint8_t> payload ; int size ; } ; struct Packet {)",
    "insertText": "Packet(int first_obu_index) : first_obu(first_obu_index)"
  },
  {
    "label": "ParseObus()",
    "kind": "Method",
    "detail": "Function (} int first_obu ; int num_obu_elements = 0 ; int first_obu_offset = 0 ; int last_obu_size ; int packet_size = 0 ; } ; std::vector<Obu>)",
    "insertText": "ParseObus(rtc::ArrayView<const uint8_t> payload)"
  },
  {
    "label": "AdditionalBytesForPreviousObuElement()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AdditionalBytesForPreviousObuElement(const Packet& packet)"
  },
  {
    "label": "Packetize()",
    "kind": "Method",
    "detail": "Function (std::vector<Packet>)",
    "insertText": "Packetize(rtc::ArrayView<const Obu> obus, PayloadSizeLimits limits)"
  },
  {
    "label": "AggregationHeader()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "AggregationHeader()"
  }
]