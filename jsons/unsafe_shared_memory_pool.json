[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_UNSAFE_SHARED_MEMORY_POOL_H_ # define BASE_MEMORY_UNSAFE_SHARED_MEMORY_POOL_H_ # include<memory> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / memory / ref_counted . h \" # include \" base / memory / unsafe_shared_memory_region . h \" # include \" base / synchronization / lock . h \" # include \" base / types / pass_key . h \" namespace base { class BASE_EXPORT UnsafeSharedMemoryPool : public RefCountedThreadSafe<UnsafeSharedMemoryPool> { public : class BASE_EXPORT Handle { public :)",
    "insertText": "Handle(PassKey<UnsafeSharedMemoryPool>, UnsafeSharedMemoryRegion region, WritableSharedMemoryMapping mapping, scoped_refptr<UnsafeSharedMemoryPool> pool)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Handle()"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Handle(const Handle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Handle&)",
    "insertText": "operator(const Handle&)"
  },
  {
    "label": "GetRegion()",
    "kind": "Method",
    "detail": "Function (const UnsafeSharedMemoryRegion&)",
    "insertText": "GetRegion()"
  },
  {
    "label": "GetMapping()",
    "kind": "Method",
    "detail": "Function (const WritableSharedMemoryMapping&)",
    "insertText": "GetMapping()"
  },
  {
    "label": "UnsafeSharedMemoryPool()",
    "kind": "Method",
    "detail": "Function (private : UnsafeSharedMemoryRegion region_ ; WritableSharedMemoryMapping mapping_ ; scoped_refptr<UnsafeSharedMemoryPool> pool_ ; } ;)",
    "insertText": "UnsafeSharedMemoryPool()"
  },
  {
    "label": "UnsafeSharedMemoryPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsafeSharedMemoryPool(const UnsafeSharedMemoryPool&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnsafeSharedMemoryPool&)",
    "insertText": "operator(const UnsafeSharedMemoryPool&)"
  },
  {
    "label": "MaybeAllocateBuffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Handle>)",
    "insertText": "MaybeAllocateBuffer(size_t size)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "ReleaseBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBuffer(UnsafeSharedMemoryRegion region, WritableSharedMemoryMapping mapping)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock lock_ ; size_t region_size_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]