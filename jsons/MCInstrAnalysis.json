[
  {
    "label": "MCInstrAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrAnalysis"
  },
  {
    "label": "Target",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Target"
  },
  {
    "label": "MCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCINSTRANALYSIS_H # define LLVM_MC_MCINSTRANALYSIS_H # include \" llvm / MC / MCInst . h \" # include \" llvm / MC / MCInstrDesc . h \" # include \" llvm / MC / MCInstrInfo . h \" namespace llvm { class MCInstrAnalysis { protected : class Target ; const MCInstrInfo* Info ; public :)",
    "insertText": "MCInstrAnalysis(const MCInstrInfo *Info) : Info(Info)"
  },
  {
    "label": "MCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCInstrAnalysis()"
  },
  {
    "label": "isBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBranch(const MCInst &Inst)"
  },
  {
    "label": "isConditionalBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConditionalBranch(const MCInst &Inst)"
  },
  {
    "label": "isUnconditionalBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnconditionalBranch(const MCInst &Inst)"
  },
  {
    "label": "isIndirectBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIndirectBranch(const MCInst &Inst)"
  },
  {
    "label": "isCall()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCall(const MCInst &Inst)"
  },
  {
    "label": "isReturn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isReturn(const MCInst &Inst)"
  },
  {
    "label": "isTerminator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTerminator(const MCInst &Inst)"
  },
  {
    "label": "evaluateBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "evaluateBranch(const MCInst &Inst, uint64_t Addr, uint64_t Size, uint64_t &Target)"
  }
]