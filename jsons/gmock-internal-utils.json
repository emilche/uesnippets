[
  {
    "label": "Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matcher"
  },
  {
    "label": "PointeeOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointeeOf"
  },
  {
    "label": "PointeeOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointeeOf"
  },
  {
    "label": "TypeKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TypeKind"
  },
  {
    "label": "KindOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KindOf"
  },
  {
    "label": "KindOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KindOf"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertible"
  },
  {
    "label": "FailureReporterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FailureReporterInterface"
  },
  {
    "label": "FailureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FailureType"
  },
  {
    "label": "LogSeverity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LogSeverity"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "WithoutMatchers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WithoutMatchers"
  },
  {
    "label": "StlContainerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StlContainerView"
  },
  {
    "label": "RawContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RawContainer"
  },
  {
    "label": "StlContainerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StlContainerView"
  },
  {
    "label": "StlContainerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StlContainerView"
  },
  {
    "label": "StlContainerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StlContainerView"
  },
  {
    "label": "StlContainerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StlContainerView"
  },
  {
    "label": "RemoveConstFromKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveConstFromKey"
  },
  {
    "label": "RemoveConstFromKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveConstFromKey"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Function"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Function"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Function"
  },
  {
    "label": "JoinAsTuple()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "JoinAsTuple(const Strings& fields)"
  },
  {
    "label": "ConvertIdentifierNameToWords()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ConvertIdentifierNameToWords(const char* id_name)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (NOLINT)",
    "insertText": "GMOCK_DECLARE_KIND_(unsigned short, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (NOLINT)",
    "insertText": "GMOCK_DECLARE_KIND_(int, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (NOLINT)",
    "insertText": "GMOCK_DECLARE_KIND_(unsigned long, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (GMOCK_WCHAR_T_IS_NATIVE_)",
    "insertText": "GMOCK_DECLARE_KIND_(wchar_t, kInteger)"
  },
  {
    "label": "LogIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LogIsVisible(LogSeverity severity)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(LogSeverity severity, const std::string& message,\n                    int stack_frames_to_skip)"
  },
  {
    "label": "GetWithoutMatchers()",
    "kind": "Method",
    "detail": "Function (WithoutMatchers)",
    "insertText": "GetWithoutMatchers()"
  },
  {
    "label": "GetWithoutMatchers()",
    "kind": "Method",
    "detail": "Function (WithoutMatchers)",
    "insertText": "GetWithoutMatchers()"
  },
  {
    "label": "IllegalDoDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IllegalDoDefault(const char* file, int line)"
  }
]