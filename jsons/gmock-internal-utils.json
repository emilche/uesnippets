[
  {
    "label": "Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matcher"
  },
  {
    "label": "PointeeOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointeeOf"
  },
  {
    "label": "TypeKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TypeKind"
  },
  {
    "label": "KindOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KindOf"
  },
  {
    "label": "LosslessArithmeticConvertibleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertibleImpl"
  },
  {
    "label": "LosslessArithmeticConvertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LosslessArithmeticConvertible"
  },
  {
    "label": "FailureReporterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FailureReporterInterface"
  },
  {
    "label": "FailureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FailureType"
  },
  {
    "label": "LogSeverity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LogSeverity"
  },
  {
    "label": "WithoutMatchers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WithoutMatchers"
  },
  {
    "label": "RawContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RawContainer"
  },
  {
    "label": "StlContainerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StlContainerView"
  },
  {
    "label": "RemoveConstFromKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveConstFromKey"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Function"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_ # define GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_ # include<stdio . h> # include<ostream> # include<string> # include<type_traits> # include \" gmock / internal / gmock - port . h \" # include \" gtest / gtest . h \" namespace testing { template<> class Matcher ; namespace internal { # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) # pragma warning(disable:4100) # pragma warning(disable:4805) #endif GTEST_API_ std::string JoinAsTuple(const Strings& fields)"
  },
  {
    "label": "ConvertIdentifierNameToWords()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ std::string)",
    "insertText": "ConvertIdentifierNameToWords(const char* id_name)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (template<Pointer> struct PointeeOf { typedef Pointer::element_type type ; } ; template<T> struct PointeeOf<T*> { typedef T type ; } ; template<Pointer> const Pointer::element_type*)",
    "insertText": "GetRawPointer(const Pointer& p)"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} template<Element> Element*)",
    "insertText": "GetRawPointer(Element* p)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (kBool,kInteger,kFloatingPoint,kOther } ; template<T> struct KindOf { enum { value = kOther } ; } ; # define)",
    "insertText": "GMOCK_DECLARE_KIND_(type, kind)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (enum { value = kind } ; })",
    "insertText": "GMOCK_DECLARE_KIND_(bool, kBool)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(char, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(signed char, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(unsigned char, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(short, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(unsigned short, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(int, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(unsigned int, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(long, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(unsigned long, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (# if GMOCK_WCHAR_T_IS_NATIVE_)",
    "insertText": "GMOCK_DECLARE_KIND_(wchar_t, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "GMOCK_DECLARE_KIND_(Int64, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(UInt64, kInteger)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(float, kFloatingPoint)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(double, kFloatingPoint)"
  },
  {
    "label": "GMOCK_DECLARE_KIND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_KIND_(long double, kFloatingPoint)"
  },
  {
    "label": "GMOCK_KIND_OF_()",
    "kind": "Method",
    "detail": "Function (# undef GMOCK_DECLARE_KIND_ # define)",
    "insertText": "GMOCK_KIND_OF_(type) \\ static_cast< ::testing::internal::TypeKind>( \\ ::testing::internal::KindOf<type>::value) #define GMOCK_IS_SIGNED_(T) (static_cast<T>(-1) < 0)"
  },
  {
    "label": "bool_constant()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct LosslessArithmeticConvertibleImpl<kBool,bool,kBool,bool> : public std::true_type { } ; template<To> struct LosslessArithmeticConvertibleImpl<kBool,bool,kInteger,To> : public std::true_type { } ; template<To> struct LosslessArithmeticConvertibleImpl<kBool,bool,kFloatingPoint,To> : public std::true_type { } ; template<From> struct LosslessArithmeticConvertibleImpl<kInteger,From,kBool,bool> : public std::false_type { } ; template<From,To> struct LosslessArithmeticConvertibleImpl<kInteger,From,kInteger,To> : public)",
    "insertText": "bool_constant((sizeof(From) < sizeof(To)) && (!GMOCK_IS_SIGNED_(From) || GMOCK_IS_SIGNED_(To))) || ((sizeof(From) == sizeof(To)) && (GMOCK_IS_SIGNED_(From) == GMOCK_IS_SIGNED_(To)))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; # undef GMOCK_IS_SIGNED_ template<From,To> struct LosslessArithmeticConvertibleImpl<kInteger,From,kFloatingPoint,To> : public std::false_type { } ; template<From> struct LosslessArithmeticConvertibleImpl<kFloatingPoint,From,kBool,bool> : public std::false_type { } ; template<From,To> struct LosslessArithmeticConvertibleImpl<kFloatingPoint,From,kInteger,To> : public std::false_type { } ; template<From,To> struct LosslessArithmeticConvertibleImpl<kFloatingPoint,From,kFloatingPoint,To> : public bool_constant<)",
    "insertText": "sizeof(From) <= sizeof(To)"
  },
  {
    "label": "GMOCK_KIND_OF_()",
    "kind": "Method",
    "detail": "Function (} ; template<From,To> struct LosslessArithmeticConvertible : public LosslessArithmeticConvertibleImpl<)",
    "insertText": "GMOCK_KIND_OF_(From), From, GMOCK_KIND_OF_(To)"
  },
  {
    "label": "FailureReporterInterface()",
    "kind": "Method",
    "detail": "Function (} ; class FailureReporterInterface { public : enum FailureType { kNonfatal,kFatal } ; ~)",
    "insertText": "FailureReporterInterface()"
  },
  {
    "label": "ReportFailure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportFailure(FailureType type, const char* file, int line, const std::string& message)"
  },
  {
    "label": "GetFailureReporter()",
    "kind": "Method",
    "detail": "Function (} ; GTEST_API_ FailureReporterInterface*)",
    "insertText": "GetFailureReporter()"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assert(bool condition, const char* file, int line, const std::string& msg)"
  },
  {
    "label": "GetFailureReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFailureReporter()->ReportFailure(FailureReporterInterface::kFatal, file, line, msg)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Assert(bool condition, const char* file, int line)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assert(condition, file, line, \"Assertion failed.\")"
  },
  {
    "label": "Expect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Expect(bool condition, const char* file, int line, const std::string& msg)"
  },
  {
    "label": "GetFailureReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFailureReporter()->ReportFailure(FailureReporterInterface::kNonfatal, file, line, msg)"
  },
  {
    "label": "Expect()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Expect(bool condition, const char* file, int line)"
  },
  {
    "label": "Expect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Expect(condition, file, line, \"Expectation failed.\")"
  },
  {
    "label": "LogIsVisible()",
    "kind": "Method",
    "detail": "Function (} enum LogSeverity { kInfo = 0,kWarning = 1 } ; const char kInfoVerbosity [ ] = \" info \" ; const char kWarningVerbosity [ ] = \" warning \" ; const char kErrorVerbosity [ ] = \" error \" ; GTEST_API_ bool)",
    "insertText": "LogIsVisible(LogSeverity severity)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "Log(LogSeverity severity, const std::string& message, int stack_frames_to_skip)"
  },
  {
    "label": "WithoutMatchers()",
    "kind": "Method",
    "detail": "Function (class WithoutMatchers { private :)",
    "insertText": "WithoutMatchers()"
  },
  {
    "label": "GetWithoutMatchers()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ WithoutMatchers)",
    "insertText": "GetWithoutMatchers()"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) # pragma warning(disable:4717) #endif template <typename T> inline T Invalid()"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assert(false, \"\", -1, \"Internal error: attempt to return invalid value\")"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} # ifdef _MSC_VER # pragma)",
    "insertText": "warning(pop)"
  },
  {
    "label": "ConstReference()",
    "kind": "Method",
    "detail": "Function (public : typedef RawContainer type ; typedef const type& const_reference ; const_reference)",
    "insertText": "ConstReference(const RawContainer& container)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} type)",
    "insertText": "Copy(const Element (&array)[N])"
  },
  {
    "label": "ConstReference()",
    "kind": "Method",
    "detail": "Function (} } ; template<ElementPointer,Size> class StlContainerView<::std::tuple<ElementPointer,Size>> { public : typedef std::remove_const<internal::PointeeOf<ElementPointer>::type>::type RawElement ; typedef internal::NativeArray<RawElement> type ; typedef const type const_reference ; const_reference)",
    "insertText": "ConstReference(const ::std::tuple<ElementPointer, Size>& array)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} type)",
    "insertText": "Copy(const ::std::tuple<ElementPointer, Size>& array)"
  },
  {
    "label": "IllegalDoDefault()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class StlContainerView<T&> ; template<T> struct RemoveConstFromKey { typedef T type ; } ; template<K,V> struct RemoveConstFromKey<std::pair<const K,V>> { typedef std::pair<K,V> type ; } ; GTEST_API_ void)",
    "insertText": "IllegalDoDefault(const char* file, int line)"
  },
  {
    "label": "ApplyImpl()",
    "kind": "Method",
    "detail": "Function (template<F,Tuple,size_t . . . Idx> auto)",
    "insertText": "ApplyImpl(F&& f, Tuple&& args, IndexSequence<Idx...>) -> decltype( std::forward<F>(f)(std::get<Idx>(std::forward<Tuple>(args))...))"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<F,Tuple> auto)",
    "insertText": "Apply(F&& f, Tuple&& args) -> decltype(ApplyImpl(std::forward<F>(f), std::forward<Tuple>(args), MakeIndexSequence<std::tuple_size<Tuple>::value>()))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} template<T> struct Function ; template<R,. . . Args> struct Function<)",
    "insertText": "R(Args...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using Result = R ; size_t ArgumentCount =)",
    "insertText": "sizeof(Args)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ArgumentTuple = std::tuple<Args . . .> ; using ArgumentMatcherTuple = std::tuple<Matcher<Args> . . .> ; using MakeResultVoid =)",
    "insertText": "void(Args...)"
  },
  {
    "label": "IgnoredValue()",
    "kind": "Method",
    "detail": "Function (using MakeResultIgnoredValue =)",
    "insertText": "IgnoredValue(Args...)"
  }
]