[
  {
    "label": "FCriticalSectionQueryable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriticalSectionQueryable"
  },
  {
    "label": "FScopeLockQueryable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeLockQueryable"
  },
  {
    "label": "FThreadOwnerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadOwnerSection"
  },
  {
    "label": "FCriticalSectionQueryable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformTLS . h \" # include \" Misc / ScopeLock . h \" # include<atomic> class FCriticalSectionQueryable { public :)",
    "insertText": "FCriticalSectionQueryable(const FCriticalSectionQueryable&)"
  },
  {
    "label": "FCriticalSectionQueryable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCriticalSectionQueryable(FCriticalSectionQueryable&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCriticalSectionQueryable&)",
    "insertText": "operator(const FCriticalSectionQueryable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCriticalSectionQueryable&)",
    "insertText": "operator(FCriticalSectionQueryable&&)"
  },
  {
    "label": "FCriticalSectionQueryable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCriticalSectionQueryable() : OwnerThreadId(0)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Lock()"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner()"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryLock()"
  },
  {
    "label": "ClearOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOwner()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (Inner .)",
    "insertText": "Unlock()"
  },
  {
    "label": "IsLockedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLockedOnCurrentThread()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (OwnerThreadId .)",
    "insertText": "store(FPlatformTLS::GetCurrentThreadId(), std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (OwnerThreadId .)",
    "insertText": "store(0, std::memory_order_relaxed)"
  },
  {
    "label": "FScopeLockQueryable()",
    "kind": "Method",
    "detail": "Function (} FCriticalSection Inner ; std::atomic<uint32> OwnerThreadId ; } ; class FScopeLockQueryable { public :)",
    "insertText": "FScopeLockQueryable()"
  },
  {
    "label": "FScopeLockQueryable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeLockQueryable(const FScopeLockQueryable& InScopeLock)"
  },
  {
    "label": "FScopeLockQueryable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeLockQueryable(FScopeLockQueryable&& InScopeLock)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopeLockQueryable&)",
    "insertText": "operator(FScopeLockQueryable& InScopeLock)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopeLockQueryable&)",
    "insertText": "operator(FScopeLockQueryable&& InScopeLock)"
  },
  {
    "label": "FScopeLockQueryable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeLockQueryable(FCriticalSectionQueryable* InSynchObject) : SynchObject(InSynchObject)"
  },
  {
    "label": "TryTakeOwnership()",
    "kind": "Method",
    "detail": "Function (SynchObject = nullptr ; } } private : FCriticalSectionQueryable* SynchObject ; } ; class FThreadOwnerSection { public : bool)",
    "insertText": "TryTakeOwnership(FCriticalSectionQueryable& NotYetEnteredAegisLock)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLockQueryable)",
    "insertText": "ScopeLock(&NotYetEnteredAegisLock)"
  },
  {
    "label": "TryTakeOwnership()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryTakeOwnership(FCriticalSection& NotYetEnteredAegisLock)"
  },
  {
    "label": "TryTakeOwnership()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryTakeOwnership(FScopeLockQueryable& AlreadyEnteredAegisScopeLock)"
  },
  {
    "label": "TryTakeOwnership()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryTakeOwnership(FScopeLock& AlreadyEnteredAegisScopeLock)"
  },
  {
    "label": "ReleaseOwnershipChecked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseOwnershipChecked(FCriticalSectionQueryable& NotYetEnteredAegisLock)"
  },
  {
    "label": "ReleaseOwnershipCheckedWithinLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOwnershipCheckedWithinLock()"
  },
  {
    "label": "ReleaseOwnershipChecked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseOwnershipChecked(FCriticalSection& NotYetEnteredAegisLock)"
  },
  {
    "label": "ReleaseOwnershipChecked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseOwnershipChecked(FScopeLockQueryable& AlreadyEnteredAegisScopeLock)"
  },
  {
    "label": "ReleaseOwnershipChecked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseOwnershipChecked(FScopeLock& AlreadyEnteredAegisScopeLock)"
  },
  {
    "label": "IsOwned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOwned(FScopeLockQueryable& AlreadyEnteredAegisScopeLock)"
  },
  {
    "label": "TryTakeOwnershipWithinLock()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "TryTakeOwnershipWithinLock()"
  }
]