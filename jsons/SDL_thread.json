[
  {
    "label": "SDL_Thread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_Thread"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_thread_h_ # define SDL_thread_h_ # include \" SDL_stdinc . h \" # include \" SDL_error . h \" # include \" SDL_atomic . h \" # include \" SDL_mutex . h \" #)",
    "insertText": "if(defined(__WIN32__) || defined(__GDK__)) && !defined(__WINRT__) #include <process.h> #endif #if defined(__OS2__)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# endif struct SDL_Thread ; typedef struct SDL_Thread SDL_Thread ; typedef unsigned long SDL_threadID ; typedef unsigned int SDL_TLSID ; typedef enum { SDL_THREAD_PRIORITY_LOW,SDL_THREAD_PRIORITY_NORMAL,SDL_THREAD_PRIORITY_HIGH,SDL_THREAD_PRIORITY_TIME_CRITICAL } SDL_ThreadPriority ; typedef)",
    "insertText": "int(SDLCALL * SDL_ThreadFunction) (void *data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(__WIN32__) || defined(__GDK__)) && !defined(__WINRT__) #define SDL_PASSED_BEGINTHREAD_ENDTHREAD typedef uintptr_t (__cdecl * pfnSDL_CurrentBeginThread) (void *, unsigned, unsigned (__stdcall *func)(void *), void * , unsigned, unsigned *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(__cdecl * pfnSDL_CurrentEndThread) (unsigned code)"
  },
  {
    "label": "SDL_CreateThread()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_beginthread # define SDL_beginthread _beginthreadex # endif # ifndef SDL_endthread # define SDL_endthread _endthreadex # endif DECLSPEC SDL_Thread* SDLCALL)",
    "insertText": "SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data, pfnSDL_CurrentBeginThread pfnBeginThread, pfnSDL_CurrentEndThread pfnEndThread)"
  },
  {
    "label": "SDL_CreateThreadWithStackSize()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_Thread* SDLCALL)",
    "insertText": "SDL_CreateThreadWithStackSize(SDL_ThreadFunction fn, const char *name, const size_t stacksize, void *data, pfnSDL_CurrentBeginThread pfnBeginThread, pfnSDL_CurrentEndThread pfnEndThread)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(SDL_CreateThread) && SDL_DYNAMIC_API #undef SDL_CreateThread #define SDL_CreateThread(fn, name, data) SDL_CreateThread_REAL(fn, name, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #undef SDL_CreateThreadWithStackSize #define SDL_CreateThreadWithStackSize(fn, name, stacksize, data) SDL_CreateThreadWithStackSize_REAL(fn, name, stacksize, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #else #define SDL_CreateThread(fn, name, data) SDL_CreateThread(fn, name, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #define SDL_CreateThreadWithStackSize(fn, name, stacksize, data) SDL_CreateThreadWithStackSize(fn, name, stacksize, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #endif #elif defined(__OS2__) #define SDL_PASSED_BEGINTHREAD_ENDTHREAD typedef int (*pfnSDL_CurrentBeginThread)(void (*func)(void *), void *, unsigned, void *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*pfnSDL_CurrentEndThread)(void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(SDL_CreateThread) && SDL_DYNAMIC_API #undef SDL_CreateThread #define SDL_CreateThread(fn, name, data) SDL_CreateThread_REAL(fn, name, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #undef SDL_CreateThreadWithStackSize #define SDL_CreateThreadWithStackSize(fn, name, stacksize, data) SDL_CreateThreadWithStackSize_REAL(fn, name, stacksize, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #else #define SDL_CreateThread(fn, name, data) SDL_CreateThread(fn, name, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #define SDL_CreateThreadWithStackSize(fn, name, stacksize, data) SDL_CreateThreadWithStackSize(fn, name, stacksize, data, (pfnSDL_CurrentBeginThread)SDL_beginthread, (pfnSDL_CurrentEndThread)SDL_endthread) #endif #else extern DECLSPEC SDL_Thread *SDLCALL SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data)"
  },
  {
    "label": "SDL_CreateThreadWithStackSize()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_Thread* SDLCALL)",
    "insertText": "SDL_CreateThreadWithStackSize(SDL_ThreadFunction fn, const char *name, const size_t stacksize, void *data)"
  },
  {
    "label": "SDL_GetThreadName()",
    "kind": "Method",
    "detail": "Function (# endif DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GetThreadName(SDL_Thread *thread)"
  },
  {
    "label": "SDL_ThreadID()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_threadID SDLCALL)",
    "insertText": "SDL_ThreadID(void)"
  },
  {
    "label": "SDL_GetThreadID()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_threadID SDLCALL)",
    "insertText": "SDL_GetThreadID(SDL_Thread * thread)"
  },
  {
    "label": "SDL_SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_SetThreadPriority(SDL_ThreadPriority priority)"
  },
  {
    "label": "SDL_WaitThread()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_WaitThread(SDL_Thread * thread, int *status)"
  },
  {
    "label": "SDL_DetachThread()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_DetachThread(SDL_Thread * thread)"
  },
  {
    "label": "SDL_TLSCreate()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_TLSID SDLCALL)",
    "insertText": "SDL_TLSCreate(void)"
  },
  {
    "label": "SDL_TLSGet()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_TLSGet(SDL_TLSID id)"
  },
  {
    "label": "SDL_TLSSet()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_TLSSet(SDL_TLSID id, const void *value, void (SDLCALL *destructor)(void*))"
  },
  {
    "label": "SDL_TLSCleanup()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_TLSCleanup(void)"
  }
]