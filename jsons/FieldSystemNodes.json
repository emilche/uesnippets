[
  {
    "label": "FUniformInteger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformInteger"
  },
  {
    "label": "FRadialIntMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRadialIntMask"
  },
  {
    "label": "FUniformScalar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformScalar"
  },
  {
    "label": "FWaveScalar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaveScalar"
  },
  {
    "label": "FRadialFalloff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRadialFalloff"
  },
  {
    "label": "FPlaneFalloff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlaneFalloff"
  },
  {
    "label": "FBoxFalloff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoxFalloff"
  },
  {
    "label": "FNoiseField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNoiseField"
  },
  {
    "label": "FUniformVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformVector"
  },
  {
    "label": "FRadialVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRadialVector"
  },
  {
    "label": "FRandomVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRandomVector"
  },
  {
    "label": "FSumScalar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSumScalar"
  },
  {
    "label": "FSumVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSumVector"
  },
  {
    "label": "InT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InT"
  },
  {
    "label": "OutT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutT"
  },
  {
    "label": "FConversionField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConversionField"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FCullingField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCullingField"
  },
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "FReturnResultsTerminal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReturnResultsTerminal"
  },
  {
    "label": "FUniformInteger()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Field / FieldSystem . h \" # include \" Math / Vector . h \" # include \" Chaos / Box . h \" class FUniformInteger : public FFieldNode<int32> { typedef FFieldNode<int32> Super ; public :)",
    "insertText": "FUniformInteger(int32 MagnitudeIn = 0) : Super() , Magnitude(MagnitudeIn)"
  },
  {
    "label": "NewCopy()",
    "kind": "Method",
    "detail": "Function (} FFieldNodeBase*)",
    "insertText": "NewCopy()"
  },
  {
    "label": "FUniformInteger()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FUniformInteger()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate(FFieldContext&, TFieldArrayView<int32>& Results)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FFieldNodeBase& Node)"
  },
  {
    "label": "SerializationType()",
    "kind": "Method",
    "detail": "Function (FFieldNodeBase::ESerializationType)",
    "insertText": "SerializationType()"
  },
  {
    "label": "FillSetupCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSetupCount(int32& NumOffsets, int32& NumParams)"
  },
  {
    "label": "FillSetupDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSetupDatas(TArray<int32>& NodesOffsets, TArray<float>& NodesParams, const float CommandTime)"
  },
  {
    "label": "EvalMaxMagnitude()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvalMaxMagnitude()"
  },
  {
    "label": "FRadialIntMask()",
    "kind": "Method",
    "detail": "Function (int32 Magnitude ; } ; class FRadialIntMask : public FFieldNode<int32> { typedef FFieldNode<int32> Super ; public :)",
    "insertText": "FRadialIntMask(float RadiusIn = 0, FVector PositionIn = FVector(0, 0, 0), int32 InteriorValueIn = 1.0, int32 ExteriorValueIn = 0, ESetMaskConditionType SetMaskConditionIn = ESetMaskConditionType::Field_Set_Always) : Super() , Radius(RadiusIn) , Position(PositionIn) , InteriorValue(InteriorValueIn) , ExteriorValue(ExteriorValueIn) , SetMaskCondition(SetMaskConditionIn)"
  },
  {
    "label": "FRadialIntMask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRadialIntMask()"
  },
  {
    "label": "ComputeFieldBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFieldBounds(FVector& MinBounds, FVector& MaxBounds, FVector& CenterPosition)"
  },
  {
    "label": "FUniformScalar()",
    "kind": "Method",
    "detail": "Function (float Radius ; FVector Position ; int32 InteriorValue ; int32 ExteriorValue ; ESetMaskConditionType SetMaskCondition ; } ; class FUniformScalar : public FFieldNode<float> { typedef FFieldNode<float> Super ; public :)",
    "insertText": "FUniformScalar(float MagnitudeIn = 1.f) : Super() , Magnitude(MagnitudeIn)"
  },
  {
    "label": "FUniformScalar()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FUniformScalar()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate(FFieldContext&, TFieldArrayView<float>& Results)"
  },
  {
    "label": "FWaveScalar()",
    "kind": "Method",
    "detail": "Function (float Magnitude ; } ; class FWaveScalar : public FFieldNode<float> { typedef FFieldNode<float> Super ; public :)",
    "insertText": "FWaveScalar(float MagnitudeIn = 1.f, const FVector& PositionIn = FVector(0,0,0), const float WavelengthIn = 1000, const float PeriodIn = 1.0, const EWaveFunctionType FunctionIn = EWaveFunctionType::Field_Wave_Cosine, const EFieldFalloffType FallofffIn = EFieldFalloffType::Field_Falloff_Linear) : Super() , Magnitude(MagnitudeIn) , Position(PositionIn) , Wavelength(WavelengthIn) , Period(PeriodIn) , Function(FunctionIn) , Falloff(FallofffIn)"
  },
  {
    "label": "FWaveScalar()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FWaveScalar()"
  },
  {
    "label": "FRadialFalloff()",
    "kind": "Method",
    "detail": "Function (float Magnitude ; FVector Position ; float Wavelength ; float Period ; EWaveFunctionType Function ; EFieldFalloffType Falloff ; } ; class FRadialFalloff : public FFieldNode<float> { typedef FFieldNode<float> Super ; public :)",
    "insertText": "FRadialFalloff(float MagnitudeIn = 1.f, float MinRangeIn = 0.f, float MaxRangeIn = 1.f, float DefaultIn = 0.f, float RadiusIn = 0.f, FVector PositionIn = FVector(0, 0, 0), EFieldFalloffType FalloffIn = EFieldFalloffType::Field_Falloff_Linear) : Super() , Magnitude(MagnitudeIn) , MinRange(MinRangeIn) , MaxRange(MaxRangeIn) , Default(DefaultIn) , Radius(RadiusIn) , Position(PositionIn) , Falloff(FalloffIn)"
  },
  {
    "label": "FRadialFalloff()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRadialFalloff()"
  },
  {
    "label": "Evaluator()",
    "kind": "Method",
    "detail": "Function (float Magnitude ; float MinRange ; float MaxRange ; float Default ; float Radius ; FVector Position ; EFieldFalloffType Falloff ; protected : template<EFieldFalloffType> void)",
    "insertText": "Evaluator(const FFieldContext& Context, TFieldArrayView<float>& Results)"
  },
  {
    "label": "FPlaneFalloff()",
    "kind": "Method",
    "detail": "Function (} ; class FPlaneFalloff : public FFieldNode<float> { typedef FFieldNode<float> Super ; public :)",
    "insertText": "FPlaneFalloff(float MagnitudeIn = 1.f, float MinRangeIn = 0.f, float MaxRangeIn = 1.f, float DefaultIn = 0.f, float DistanceIn = 0.f, FVector PositionIn = FVector(0, 0, 0), FVector NormalIn = FVector(0, 0, 1), EFieldFalloffType FalloffIn = EFieldFalloffType::Field_Falloff_Linear) : Super() , Magnitude(MagnitudeIn) , MinRange(MinRangeIn) , MaxRange(MaxRangeIn) , Default(DefaultIn) , Distance(DistanceIn) , Position(PositionIn) , Normal(NormalIn) , Falloff(FalloffIn)"
  },
  {
    "label": "FPlaneFalloff()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPlaneFalloff()"
  },
  {
    "label": "Evaluator()",
    "kind": "Method",
    "detail": "Function (float Magnitude ; float MinRange ; float MaxRange ; float Default ; float Distance ; FVector Position ; FVector Normal ; EFieldFalloffType Falloff ; protected : template<EFieldFalloffType> void)",
    "insertText": "Evaluator(const FFieldContext& Context, const FPlane& Plane, TFieldArrayView<float>& Results)"
  },
  {
    "label": "FBoxFalloff()",
    "kind": "Method",
    "detail": "Function (} ; class FBoxFalloff : public FFieldNode<float> { typedef FFieldNode<float> Super ; public :)",
    "insertText": "FBoxFalloff(float MagnitudeIn = 1.f, float MinRangeIn = 0.f, float MaxRangeIn = 1.f, float DefaultIn = 0.f, FTransform TransformIn = FTransform::Identity, EFieldFalloffType FalloffIn = EFieldFalloffType::Field_Falloff_Linear) : Super() , Magnitude(MagnitudeIn) , MinRange(MinRangeIn) , MaxRange(MaxRangeIn) , Default(DefaultIn) , Transform(TransformIn) , Falloff(FalloffIn)"
  },
  {
    "label": "FBoxFalloff()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBoxFalloff()"
  },
  {
    "label": "FNoiseField()",
    "kind": "Method",
    "detail": "Function (} ; class FNoiseField : public FFieldNode<float> { typedef FFieldNode<float> Super ; public :)",
    "insertText": "FNoiseField(float MinRangeIn = 0.f, float MaxRangeIn = 0.f, FTransform TransformIn = FTransform::Identity) : Super() , MinRange(MinRangeIn) , MaxRange(MaxRangeIn) , Transform(TransformIn)"
  },
  {
    "label": "FNoiseField()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FNoiseField()"
  },
  {
    "label": "FUniformVector()",
    "kind": "Method",
    "detail": "Function (float MinRange ; float MaxRange ; FTransform Transform ; } ; class FUniformVector : public FFieldNode<FVector> { typedef FFieldNode<FVector> Super ; public :)",
    "insertText": "FUniformVector(float MagnitudeIn = 1.f, FVector DirectionIn =FVector(0, 0, 0)) : Super() , Magnitude(MagnitudeIn) , Direction(DirectionIn)"
  },
  {
    "label": "FUniformVector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FUniformVector()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate(FFieldContext&, TFieldArrayView<FVector>& Results)"
  },
  {
    "label": "FRadialVector()",
    "kind": "Method",
    "detail": "Function (float Magnitude ; FVector Direction ; } ; class FRadialVector : public FFieldNode<FVector> { typedef FFieldNode<FVector> Super ; public :)",
    "insertText": "FRadialVector(float MagnitudeIn = 1.f, FVector PositionIn = FVector(0, 0, 0)) : Super() , Magnitude(MagnitudeIn) , Position(PositionIn)"
  },
  {
    "label": "FRadialVector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRadialVector()"
  },
  {
    "label": "FRandomVector()",
    "kind": "Method",
    "detail": "Function (float Magnitude ; FVector Position ; } ; class FRandomVector : public FFieldNode<FVector> { typedef FFieldNode<FVector> Super ; public :)",
    "insertText": "FRandomVector(float MagnitudeIn = 1.f) : Super() , Magnitude(MagnitudeIn)"
  },
  {
    "label": "FRandomVector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRandomVector()"
  },
  {
    "label": "FSumScalar()",
    "kind": "Method",
    "detail": "Function (float Magnitude ; } ; class FSumScalar : public FFieldNode<float> { typedef FFieldNode<float> Super ; public :)",
    "insertText": "FSumScalar(float MagnitudeIn = 1.f, FFieldNode<float> * ScalarRightIn = nullptr, FFieldNode<float> * ScalarLeftIn = nullptr, EFieldOperationType OperationIn = EFieldOperationType::Field_Multiply) : Super() , Magnitude(MagnitudeIn) , ScalarRight(TUniquePtr< FFieldNode<float> >(ScalarRightIn)) , ScalarLeft(TUniquePtr< FFieldNode<float> >(ScalarLeftIn)) , Operation(OperationIn)"
  },
  {
    "label": "FSumScalar()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSumScalar()"
  },
  {
    "label": "FillDefaultSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillDefaultSetup(TArray<int32>& NodesOffsets, TArray<float>& NodesParams)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesOffsets .)",
    "insertText": "Add(NodesParams.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(static_cast<float>(Super::StaticType()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(static_cast<float>(FFieldNodeBase::ESerializationType::FieldNode_FSumScalar))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(1.0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(static_cast<float>(EFieldOperationType::Field_Add))"
  },
  {
    "label": "FSumVector()",
    "kind": "Method",
    "detail": "Function (} float Magnitude ; TUniquePtr<FFieldNode<float>> ScalarRight ; TUniquePtr<FFieldNode<float>> ScalarLeft ; EFieldOperationType Operation ; } ; class FSumVector : public FFieldNode<FVector> { typedef FFieldNode<FVector> Super ; public :)",
    "insertText": "FSumVector(float MagnitudeIn = 1.f, FFieldNode<float> * ScalarIn = nullptr, FFieldNode<FVector> * VectorRightIn = nullptr, FFieldNode<FVector> * VectorLeftIn = nullptr, EFieldOperationType OperationIn = EFieldOperationType::Field_Multiply ) : Super() , Magnitude(MagnitudeIn) , Scalar(TUniquePtr< FFieldNode<float> >(ScalarIn) ) , VectorRight(TUniquePtr< FFieldNode<FVector> >(VectorRightIn) ) , VectorLeft(TUniquePtr< FFieldNode<FVector> >(VectorLeftIn) ) , Operation(OperationIn)"
  },
  {
    "label": "FSumVector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSumVector()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(static_cast<float>(FFieldNodeBase::ESerializationType::FieldNode_FSumVector))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(0.0)"
  },
  {
    "label": "FConversionField()",
    "kind": "Method",
    "detail": "Function (} float Magnitude ; TUniquePtr<FFieldNode<float>> Scalar ; TUniquePtr<FFieldNode<FVector>> VectorRight ; TUniquePtr<FFieldNode<FVector>> VectorLeft ; EFieldOperationType Operation ; } ; template<class InT,class OutT> class FConversionField : public FFieldNode<OutT> { typedef FFieldNode<OutT> Super ; public :)",
    "insertText": "FConversionField(FFieldNode<InT> * InFieldIn = nullptr) : Super() , InputField(TUniquePtr< FFieldNode<InT> >(InFieldIn))"
  },
  {
    "label": "FConversionField()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FConversionField()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate(FFieldContext&, TFieldArrayView<OutT>& Results)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(static_cast<float>(FFieldNodeBase::ESerializationType::FieldNode_FConversionField))"
  },
  {
    "label": "FCullingField()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FFieldNode<InT>> InputField ; } ; template<class T> class FCullingField : public FFieldNode<T> { typedef FFieldNode<T> Super ; public :)",
    "insertText": "FCullingField(FFieldNode<float> * CullingIn = nullptr, FFieldNode<T> * InputIn = nullptr, EFieldCullingOperationType OperationIn = EFieldCullingOperationType::Field_Culling_Inside) : Super() , Culling(TUniquePtr< FFieldNode<float> >(CullingIn)) , Input(TUniquePtr< FFieldNode<T> >(InputIn)) , Operation(OperationIn)"
  },
  {
    "label": "FCullingField()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCullingField()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate(FFieldContext&, TFieldArrayView<T>& Results)"
  },
  {
    "label": "FReturnResultsTerminal()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FFieldNode<float>> Culling ; TUniquePtr<FFieldNode<T>> Input ; EFieldCullingOperationType Operation ; } ; # if PLATFORM_MAC template class FCullingField<int32> ; template class FCullingField<float> ; template class FCullingField<FVector> ; # endif template<class T> class FReturnResultsTerminal : public FFieldNode<T> { typedef FFieldNode<T> Super ; public :)",
    "insertText": "FReturnResultsTerminal() : Super()"
  },
  {
    "label": "FReturnResultsTerminal()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FReturnResultsTerminal()"
  },
  {
    "label": "FieldNodeFactory()",
    "kind": "Method",
    "detail": "Function (} ; # if PLATFORM_MAC template class FReturnResultsTerminal<int32> ; template class FReturnResultsTerminal<float> ; template class FReturnResultsTerminal<FVector> ; # endif FFieldNodeBase*)",
    "insertText": "FieldNodeFactory(FFieldNodeBase::EFieldType BaseType, FFieldNodeBase::ESerializationType Type)"
  }
]