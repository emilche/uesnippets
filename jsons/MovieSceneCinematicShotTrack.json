[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FMovieSceneTrackEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackEvaluationData"
  },
  {
    "label": "TMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTree"
  },
  {
    "label": "UMovieSceneCinematicShotTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCinematicShotTrack"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compilation / MovieSceneSegmentCompiler . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / InlineValue . h \" # include \" MovieSceneTrack . h \" # include \" Templates / SubclassOf . h \" # include \" Tracks / MovieSceneSubTrack . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" MovieSceneCinematicShotTrack . generated . h \" class UMovieSceneSection ; class UMovieSceneSequence ; class UMovieSceneSubSection ; class UObject ; struct FMovieSceneTrackEvaluationData ; template<> struct TMovieSceneEvaluationTree ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: MOVIESCENETRACKS_API UMovieSceneCinematicShotTrack(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "SortSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortSections()"
  },
  {
    "label": "AddSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSubSection*)",
    "insertText": "AddSequence(UMovieSceneSequence* Sequence, FFrameNumber StartTime, int32 Duration)"
  },
  {
    "label": "AddSequenceOnRow()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneSubSection*)",
    "insertText": "AddSequenceOnRow(UMovieSceneSequence* Sequence, FFrameNumber StartTime, int32 Duration, int32 RowIndex)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSection(UMovieSceneSection& Section)"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneSection> SectionClass)"
  },
  {
    "label": "CreateNewSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "CreateNewSection()"
  },
  {
    "label": "RemoveSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSection(UMovieSceneSection& Section)"
  },
  {
    "label": "RemoveSectionAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSectionAt(int32 SectionIndex)"
  },
  {
    "label": "SupportsMultipleRows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMultipleRows()"
  },
  {
    "label": "PopulateEvaluationTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateEvaluationTree(TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutData)"
  },
  {
    "label": "GetEvaluationFieldVersion()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetEvaluationFieldVersion()"
  },
  {
    "label": "OnSectionMoved()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR EMovieSceneSectionMovedResult)",
    "insertText": "OnSectionMoved(UMovieSceneSection& Section, const FMovieSceneSectionMovedParams& Params)"
  },
  {
    "label": "GetDefaultDisplayName()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA FText)",
    "insertText": "GetDefaultDisplayName()"
  }
]