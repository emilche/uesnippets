[
  {
    "label": "GlRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlRenderer"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_GL_GL_RENDERER_H_ # define TEST_GL_GL_RENDERER_H_ # ifdef WEBRTC_MAC # include<OpenGL / gl . h> # else # include<GL / gl . h> # endif # include<stddef . h> # include<stdint . h> # include \" api / video / video_frame . h \" # include \" test / video_renderer . h \" namespace webrtc { namespace test { class GlRenderer : public VideoRenderer { public : void)",
    "insertText": "OnFrame(const webrtc::VideoFrame& frame)"
  },
  {
    "label": "GlRenderer()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "GlRenderer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "ResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeViewport(size_t width, size_t height)"
  },
  {
    "label": "ResizeVideo()",
    "kind": "Method",
    "detail": "Function (private : bool is_init_ ; uint8_t* buffer_ ; GLuint texture_ ; size_t width_,height_,buffer_size_ ; void)",
    "insertText": "ResizeVideo(size_t width, size_t height)"
  }
]