[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsCollector"
  },
  {
    "label": "FStatsCollectorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsCollectorFactory"
  },
  {
    "label": "FStatsScopedTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsScopedTimer"
  },
  {
    "label": "FStatsParallelScopeTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsParallelScopeTimer"
  },
  {
    "label": "FStatsCollector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace BuildPatchServices { enum class EStatFormat : uint8 { Timer,DataSize,DataSpeed,Percentage,Value } ; class FStatsCollector { public : typedef int64 FAtomicValue ; public : ~)",
    "insertText": "FStatsCollector()"
  },
  {
    "label": "CreateStat()",
    "kind": "Method",
    "detail": "Function (} volatile FAtomicValue*)",
    "insertText": "CreateStat(const FString& Name, EStatFormat Type, FAtomicValue InitialValue = 0)"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStats(float TimeBetweenLogs = 0.0f)"
  },
  {
    "label": "GetCycles()",
    "kind": "Method",
    "detail": "Function (public : uint64)",
    "insertText": "GetCycles()"
  },
  {
    "label": "GetSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetSeconds()"
  },
  {
    "label": "CyclesToSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CyclesToSeconds(uint64 Cycles)"
  },
  {
    "label": "SecondsToCycles()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "SecondsToCycles(double Seconds)"
  },
  {
    "label": "AccumulateTimeBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateTimeBegin(uint64& TempValue)"
  },
  {
    "label": "AccumulateTimeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateTimeEnd(volatile FAtomicValue* Stat, uint64& TempValue)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(volatile FAtomicValue* Stat, int64 Amount)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(volatile FAtomicValue* Stat, int64 Value)"
  },
  {
    "label": "SetAsPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsPercentage(volatile FAtomicValue* Stat, double Value)"
  },
  {
    "label": "GetAsPercentage()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAsPercentage(volatile FAtomicValue* Stat)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class FStatsCollectorFactory { public : FStatsCollector*)",
    "insertText": "Create()"
  },
  {
    "label": "FStatsScopedTimer()",
    "kind": "Method",
    "detail": "Function (} ; class FStatsScopedTimer { public :)",
    "insertText": "FStatsScopedTimer(volatile FStatsCollector::FAtomicValue* InStat) : Stat(InStat)"
  },
  {
    "label": "AccumulateTimeBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateTimeBegin(TempTime)"
  },
  {
    "label": "FStatsScopedTimer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStatsScopedTimer()"
  },
  {
    "label": "AccumulateTimeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateTimeEnd(Stat, TempTime)"
  },
  {
    "label": "FStatsParallelScopeTimer()",
    "kind": "Method",
    "detail": "Function (} private : uint64 TempTime ; volatile FStatsCollector::FAtomicValue* Stat ; } ; class FStatsParallelScopeTimer { public :)",
    "insertText": "FStatsParallelScopeTimer(volatile FStatsCollector::FAtomicValue* InStaticTempValue, volatile FStatsCollector::FAtomicValue* InTimerStat, volatile FStatsCollector::FAtomicValue* InCounterStat) : TempTime(InStaticTempValue) , TimerStat(InTimerStat) , CounterStat(InCounterStat)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (FStatsCollector::FAtomicValue OldValue =)",
    "insertText": "InterlockedAdd(CounterStat, 1)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedExchange(TempTime, FStatsCollector::FAtomicValue(FStatsCollector::GetCycles()))"
  },
  {
    "label": "FStatsParallelScopeTimer()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FStatsParallelScopeTimer()"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (FStatsCollector::FAtomicValue CurrTempTime =* TempTime ; FStatsCollector::FAtomicValue OldValue =)",
    "insertText": "InterlockedAdd(CounterStat, -1)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAdd(TimerStat, FStatsCollector::FAtomicValue(FStatsCollector::GetCycles() - CurrTempTime))"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (} } FStatsCollector::FAtomicValue)",
    "insertText": "GetCurrentTime()"
  }
]