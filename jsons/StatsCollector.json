[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsCollector"
  },
  {
    "label": "FStatsCollectorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsCollectorFactory"
  },
  {
    "label": "FStatsScopedTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsScopedTimer"
  },
  {
    "label": "FStatsParallelScopeTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsParallelScopeTimer"
  },
  {
    "label": "GetCycles()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCycles()"
  },
  {
    "label": "GetSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetSeconds()"
  },
  {
    "label": "CyclesToSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CyclesToSeconds(uint64 Cycles)"
  },
  {
    "label": "SecondsToCycles()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "SecondsToCycles(double Seconds)"
  },
  {
    "label": "AccumulateTimeBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateTimeBegin(uint64& TempValue)"
  },
  {
    "label": "AccumulateTimeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateTimeEnd(volatile FAtomicValue* Stat, uint64& TempValue)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(volatile FAtomicValue* Stat, int64 Amount)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(volatile FAtomicValue* Stat, int64 Value)"
  },
  {
    "label": "SetAsPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsPercentage(volatile FAtomicValue* Stat, double Value)"
  },
  {
    "label": "GetAsPercentage()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAsPercentage(volatile FAtomicValue* Stat)"
  }
]