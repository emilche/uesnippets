[
  {
    "label": "PartitionSuperPageExtentEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartitionSuperPageExtentEntry"
  },
  {
    "label": "SlotSpanMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SlotSpanMetadata"
  },
  {
    "label": "SubsequentPageMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubsequentPageMetadata"
  },
  {
    "label": "PartitionPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartitionPage"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_PAGE_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_PAGE_H_ # include<cstdint> # include<cstring> # include<limits> # include<utility> # include \" base / allocator / partition_allocator / address_pool_manager . h \" # include \" base / allocator / partition_allocator / address_pool_manager_types . h \" # include \" base / allocator / partition_allocator / freeslot_bitmap_constants . h \" # include \" base / allocator / partition_allocator / partition_address_space . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / bits . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_bucket . h \" # include \" base / allocator / partition_allocator / partition_freelist_entry . h \" # include \" base / allocator / partition_allocator / partition_tag_bitmap . h \" # include \" base / allocator / partition_allocator / partition_tag_types . h \" # include \" base / allocator / partition_allocator / reservation_offset_table . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(STARSCAN) #include \"base/allocator/partition_allocator/starscan/state_bitmap.h\" #endif #if BUILDFLAG(PUT_REF_COUNT_IN_PREVIOUS_SLOT)"
  },
  {
    "label": "IncrementNumberOfNonemptySlotSpans()",
    "kind": "Method",
    "detail": "Function (template<bool thread_safe> struct PartitionSuperPageExtentEntry { PartitionRoot<thread_safe>* root ; PartitionSuperPageExtentEntry<thread_safe>* next ; uint16_t number_of_consecutive_super_pages ; uint16_t number_of_nonempty_slot_spans ; PA_ALWAYS_INLINE void)",
    "insertText": "IncrementNumberOfNonemptySlotSpans()"
  },
  {
    "label": "DecrementNumberOfNonemptySlotSpans()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "DecrementNumberOfNonemptySlotSpans()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(PartitionSuperPageExtentEntry<ThreadSafe>) <= kPageMetadataSize, \"PartitionSuperPageExtentEntry must be able to fit in a metadata slot\")"
  },
  {
    "label": "SuperPagesBeginFromExtent()",
    "kind": "Method",
    "detail": "Function (template<bool thread_safe> PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SuperPagesBeginFromExtent(const PartitionSuperPageExtentEntry<thread_safe>* extent)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(0 < extent->number_of_consecutive_super_pages)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t extent_as_uintptr = reinterpret_cast<)",
    "insertText": "uintptr_t(extent)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(IsManagedByNormalBuckets(extent_as_uintptr))"
  },
  {
    "label": "SuperPagesEndFromExtent()",
    "kind": "Method",
    "detail": "Function (} template<bool thread_safe> PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SuperPagesEndFromExtent(const PartitionSuperPageExtentEntry<thread_safe>* extent)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(STARSCAN)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# endif # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : PartitionFreelistEntry* freelist_head = nullptr ; public : SlotSpanMetadata<thread_safe>* next_slot_span = nullptr ; PartitionBucket<thread_safe>* const bucket = nullptr ; # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) && BUILDFLAG(IS_APPLE) static constexpr size_t kMaxSlotsPerSlotSpan = 4 * (1 << 14)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_LINUX) && defined(ARCH_CPU_ARM64) static constexpr size_t kMaxSlotsPerSlotSpan = 4 * (1 << 14)"
  },
  {
    "label": "PartitionPageSize()",
    "kind": "Method",
    "detail": "Function (# else size_t kMaxSlotsPerSlotSpan =)",
    "insertText": "PartitionPageSize()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif size_t kMaxSlotsPerSlotSpanBits = 1 3 ;)",
    "insertText": "static_assert(kMaxSlotsPerSlotSpan < (1 << kMaxSlotsPerSlotSpanBits), \"\")"
  },
  {
    "label": "unused1_()",
    "kind": "Method",
    "detail": "Function (uint32_t marked_full : 1 ; uint32_t num_allocated_slots : kMaxSlotsPerSlotSpanBits ; uint32_t num_unprovisioned_slots : kMaxSlotsPerSlotSpanBits ; private : const uint32_t can_store_raw_size_ : 1 ; uint32_t freelist_is_sorted_ : 1 ; uint32_t)",
    "insertText": "unused1_(32 - 1 - 2 * kMaxSlotsPerSlotSpanBits - 1 - 1)"
  },
  {
    "label": "unused2_()",
    "kind": "Method",
    "detail": "Function (uint16_t in_empty_cache_ : 1 ; uint16_t empty_cache_index_ : kEmptyCacheIndexBits ; uint16_t)",
    "insertText": "unused2_(16 - 1 - kEmptyCacheIndexBits)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) explicit SlotSpanMetadata(PartitionBucket<thread_safe>* bucket)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) PA_NOINLINE void FreeSlowPath(size_t number_of_freed)"
  },
  {
    "label": "PopForAlloc()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "PopForAlloc(size_t size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "Free(uintptr_t ptr)"
  },
  {
    "label": "AppendFreeList()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "AppendFreeList(PartitionFreelistEntry* head, PartitionFreelistEntry* tail, size_t number_of_freed)"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decommit(PartitionRoot<thread_safe>* root)"
  },
  {
    "label": "DecommitIfPossible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecommitIfPossible(PartitionRoot<thread_safe>* root)"
  },
  {
    "label": "SortFreelist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortFreelist()"
  },
  {
    "label": "RegisterEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEmpty()"
  },
  {
    "label": "ToSlotSpanStart()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ToSlotSpanStart(const SlotSpanMetadata* slot_span)"
  },
  {
    "label": "FromAddr()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE SlotSpanMetadata*)",
    "insertText": "FromAddr(uintptr_t address)"
  },
  {
    "label": "FromSlotStart()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE SlotSpanMetadata*)",
    "insertText": "FromSlotStart(uintptr_t slot_start)"
  },
  {
    "label": "FromObject()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE SlotSpanMetadata*)",
    "insertText": "FromObject(void* object)"
  },
  {
    "label": "FromObjectInnerAddr()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE SlotSpanMetadata*)",
    "insertText": "FromObjectInnerAddr(uintptr_t address)"
  },
  {
    "label": "FromObjectInnerPtr()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE SlotSpanMetadata*)",
    "insertText": "FromObjectInnerPtr(void* ptr)"
  },
  {
    "label": "ToSuperPageExtent()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionSuperPageExtentEntry<thread_safe>*)",
    "insertText": "ToSuperPageExtent()"
  },
  {
    "label": "CanStoreRawSize()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "CanStoreRawSize()"
  },
  {
    "label": "GetRawSize()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE size_t)",
    "insertText": "GetRawSize()"
  },
  {
    "label": "DirectMapMTETag()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionTag*)",
    "insertText": "DirectMapMTETag()"
  },
  {
    "label": "get_freelist_head()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "get_freelist_head()"
  },
  {
    "label": "GetUtilizedSlotSize()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE size_t)",
    "insertText": "GetUtilizedSlotSize()"
  },
  {
    "label": "GetSlotSizeForBookkeeping()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE size_t)",
    "insertText": "GetSlotSizeForBookkeeping()"
  },
  {
    "label": "GetProvisionedSize()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE size_t)",
    "insertText": "GetProvisionedSize()"
  },
  {
    "label": "get_slots_per_span()",
    "kind": "Method",
    "detail": "Function (size_t num_provisioned_slots = bucket ->)",
    "insertText": "get_slots_per_span()"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (size_t provisioned_size = num_provisioned_slots* bucket -> slot_size ;)",
    "insertText": "PA_DCHECK(provisioned_size <= bucket->get_bytes_per_span())"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) static const SlotSpanMetadata* get_sentinel_slot_span()"
  },
  {
    "label": "get_sentinel_slot_span_non_const()",
    "kind": "Method",
    "detail": "Function (SlotSpanMetadata*)",
    "insertText": "get_sentinel_slot_span_non_const()"
  },
  {
    "label": "is_active()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "is_active()"
  },
  {
    "label": "is_full()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "is_full()"
  },
  {
    "label": "is_empty()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "is_empty()"
  },
  {
    "label": "is_decommitted()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "is_decommitted()"
  },
  {
    "label": "in_empty_cache()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "in_empty_cache()"
  },
  {
    "label": "SlotSpanMetadata()",
    "kind": "Method",
    "detail": "Function (freelist_is_sorted_ = true ; } private : const SlotSpanMetadata sentinel_slot_span_ ;)",
    "insertText": "SlotSpanMetadata() noexcept : marked_full(0), num_allocated_slots(0), num_unprovisioned_slots(0), can_store_raw_size_(false), freelist_is_sorted_(true), unused1_(0), in_empty_cache_(0), empty_cache_index_(0), unused2_(0)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (} } ; # pragma)",
    "insertText": "pack(pop) static_assert(sizeof(SlotSpanMetadata<ThreadSafe>) <= kPageMetadataSize, \"SlotSpanMetadata must fit into a Page Metadata slot.\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (union { SlotSpanMetadata<thread_safe> slot_span_metadata ; SubsequentPageMetadata subsequent_page_metadata ; char optional_padding [ kPageMetadataSize -)",
    "insertText": "sizeof(uint8_t) - sizeof(bool)"
  },
  {
    "label": "kMaxSlotSpanMetadataOffset()",
    "kind": "Method",
    "detail": "Function (} ; uint16_t kMaxSlotSpanMetadataBits = 6 ; uint16_t)",
    "insertText": "kMaxSlotSpanMetadataOffset(1 << kMaxSlotSpanMetadataBits)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (} ; # pragma)",
    "insertText": "pack(pop) static_assert(sizeof(PartitionPage<ThreadSafe>) == kPageMetadataSize, \"PartitionPage must be able to fit in a metadata slot\")"
  },
  {
    "label": "PartitionSuperPageToMetadataArea()",
    "kind": "Method",
    "detail": "Function (template<bool thread_safe> PA_ALWAYS_INLINE PartitionPage<thread_safe>*)",
    "insertText": "PartitionSuperPageToMetadataArea(uintptr_t super_page)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(IsReservationStart(super_page))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!(super_page & kSuperPageOffsetMask))"
  },
  {
    "label": "GetSubsequentPageMetadata()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE const SubsequentPageMetadata*)",
    "insertText": "GetSubsequentPageMetadata(const PartitionPage<ThreadSafe>* page)"
  },
  {
    "label": "GetSubsequentPageMetadata()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE SubsequentPageMetadata*)",
    "insertText": "GetSubsequentPageMetadata(PartitionPage<ThreadSafe>* page)"
  },
  {
    "label": "PartitionSuperPageToExtent()",
    "kind": "Method",
    "detail": "Function (} template<bool thread_safe> PA_ALWAYS_INLINE PartitionSuperPageExtentEntry<thread_safe>*)",
    "insertText": "PartitionSuperPageToExtent(uintptr_t super_page)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(STARSCAN) PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t ReservedStateBitmapSize()"
  },
  {
    "label": "CommittedStateBitmapSize()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "CommittedStateBitmapSize()"
  },
  {
    "label": "SuperPageStateBitmapAddr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SuperPageStateBitmapAddr(uintptr_t super_page)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!(super_page % kSuperPageAlignment))"
  },
  {
    "label": "SuperPageStateBitmap()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE AllocationStateMap*)",
    "insertText": "SuperPageStateBitmap(uintptr_t super_page)"
  },
  {
    "label": "ReservedStateBitmapSize()",
    "kind": "Method",
    "detail": "Function (} # else PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "ReservedStateBitmapSize()"
  },
  {
    "label": "SuperPagePayloadStartOffset()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SuperPagePayloadStartOffset(bool is_managed_by_normal_buckets, bool with_quarantine)"
  },
  {
    "label": "SuperPagePayloadBegin()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SuperPagePayloadBegin(uintptr_t super_page, bool with_quarantine)"
  },
  {
    "label": "SuperPagePayloadEndOffset()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SuperPagePayloadEndOffset()"
  },
  {
    "label": "SuperPagePayloadEnd()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SuperPagePayloadEnd(uintptr_t super_page)"
  },
  {
    "label": "SuperPagePayloadSize()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE size_t)",
    "insertText": "SuperPagePayloadSize(uintptr_t super_page, bool with_quarantine)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) uintptr_t super_page = base::bits::AlignDown( reinterpret_cast<uintptr_t>(this), kSuperPageAlignment)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((SuperPagePayloadSize(super_page, root->IsQuarantineAllowed()) / PartitionPageSize()) > number_of_nonempty_slot_spans)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(number_of_nonempty_slot_spans)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t super_page = reinterpret_cast<)",
    "insertText": "uintptr_t(this)"
  },
  {
    "label": "IsWithinSuperPagePayload()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsWithinSuperPagePayload(uintptr_t address, bool with_quarantine)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!with_quarantine || IsManagedByNormalBuckets(address))"
  },
  {
    "label": "SuperPagePayloadBegin()",
    "kind": "Method",
    "detail": "Function (uintptr_t super_page = address& kSuperPageBaseMask ; uintptr_t payload_start =)",
    "insertText": "SuperPagePayloadBegin(super_page, with_quarantine)"
  },
  {
    "label": "SuperPagePayloadEnd()",
    "kind": "Method",
    "detail": "Function (uintptr_t payload_end =)",
    "insertText": "SuperPagePayloadEnd(super_page)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (uintptr_t super_page = address& kSuperPageBaseMask ; # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) PA_DCHECK(IsReservationStart(super_page))"
  },
  {
    "label": "thread_safe()",
    "kind": "Method",
    "detail": "Function (auto* extent = PartitionSuperPageToExtent<)",
    "insertText": "thread_safe(super_page)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(IsWithinSuperPagePayload(address, IsManagedByNormalBuckets(address) && extent->root->IsQuarantineAllowed()))"
  },
  {
    "label": "partition_page_index()",
    "kind": "Method",
    "detail": "Function (# endif uintptr_t)",
    "insertText": "partition_page_index(address & kSuperPageOffsetMask) >> PartitionPageShift()"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(partition_page_index)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(partition_page_index < NumPartitionPagesPerSuperPage() - 1)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t pointer_as_uint = reinterpret_cast<)",
    "insertText": "uintptr_t(slot_span)"
  },
  {
    "label": "super_page_offset()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "super_page_offset(pointer_as_uint & kSuperPageOffsetMask)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(super_page_offset > SystemPageSize())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(super_page_offset < SystemPageSize() + (NumPartitionPagesPerSuperPage() * kPageMetadataSize))"
  },
  {
    "label": "partition_page_index()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "partition_page_index(super_page_offset - SystemPageSize())"
  },
  {
    "label": "super_page_base()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "super_page_base(pointer_as_uint & kSuperPageBaseMask)"
  },
  {
    "label": "FromAddr()",
    "kind": "Method",
    "detail": "Function (auto* page = PartitionPage<thread_safe)",
    "insertText": "FromAddr(address)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(page->is_valid)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!page->slot_span_metadata_offset)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (auto* slot_span =& page -> slot_span_metadata ;)",
    "insertText": "PA_DCHECK(PartitionRoot<thread_safe>::IsValidSlotSpan(slot_span))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(slot_span->bucket->slot_size)"
  },
  {
    "label": "FromAddr()",
    "kind": "Method",
    "detail": "Function (auto* slot_span =)",
    "insertText": "FromAddr(slot_start)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) uintptr_t slot_span_start = ToSlotSpanStart(slot_span)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!((slot_start - slot_span_start) % slot_span->bucket->slot_size))"
  },
  {
    "label": "ObjectPtr2Addr()",
    "kind": "Method",
    "detail": "Function (uintptr_t object_addr =)",
    "insertText": "ObjectPtr2Addr(object)"
  },
  {
    "label": "FromAddr()",
    "kind": "Method",
    "detail": "Function (auto* slot_span =)",
    "insertText": "FromAddr(object_addr)"
  },
  {
    "label": "FromSlotSpan()",
    "kind": "Method",
    "detail": "Function (auto* root = PartitionRoot<thread_safe)",
    "insertText": "FromSlotSpan(slot_span)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((object_addr - slot_span_start) % slot_span->bucket->slot_size == root->flags.extras_offset)"
  },
  {
    "label": "shift_from_slot_start()",
    "kind": "Method",
    "detail": "Function (bucket->slot_size)",
    "insertText": "shift_from_slot_start(address - slot_span_start)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(shift_from_slot_start >= root->flags.extras_offset)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(shift_from_slot_start <= root->flags.extras_offset + slot_span->GetUsableSize(root))"
  },
  {
    "label": "SetRawSize()",
    "kind": "Method",
    "detail": "Function (} template<bool thread_safe> PA_ALWAYS_INLINE void SlotSpanMetadata<thread_safe)",
    "insertText": "SetRawSize(size_t raw_size)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(CanStoreRawSize())"
  },
  {
    "label": "GetSubsequentPageMetadata()",
    "kind": "Method",
    "detail": "Function (auto* subsequent_page_metadata =)",
    "insertText": "GetSubsequentPageMetadata(reinterpret_cast<PartitionPage<thread_safe>*>(this))"
  },
  {
    "label": "GetSubsequentPageMetadata()",
    "kind": "Method",
    "detail": "Function (const auto* subsequent_page_metadata =)",
    "insertText": "GetSubsequentPageMetadata(reinterpret_cast<const PartitionPage<thread_safe>*>(this))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(bucket->is_direct_mapped())"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) uintptr_t new_head_untagged = UntagPtr(new_head)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!new_head || (reinterpret_cast<uintptr_t>(this) & kSuperPageBaseMask) == (new_head_untagged & kSuperPageBaseMask))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(size == bucket->slot_size)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (PartitionFreelistEntry* result = freelist_head ; freelist_head = freelist_head ->)",
    "insertText": "GetNext(size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (num_allocated_slots + + ; return result ; } template<bool thread_safe> PA_ALWAYS_INLINE void SlotSpanMetadata<thread_safe)",
    "insertText": "Free(uintptr_t slot_start) PA_EXCLUSIVE_LOCKS_REQUIRED( PartitionRoot<thread_safe>::FromSlotSpan(this)->lock_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) auto* root = PartitionRoot<thread_safe>::FromSlotSpan(this)"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (root -> lock_ .)",
    "insertText": "AssertAcquired()"
  },
  {
    "label": "PartitionFreelistEntry()",
    "kind": "Method",
    "detail": "Function (# endif auto* entry = static_cast<)",
    "insertText": "PartitionFreelistEntry(SlotStartAddr2Ptr(slot_start))"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(entry != freelist_head)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!freelist_head || entry != freelist_head->GetNext(bucket->slot_size))"
  },
  {
    "label": "SetNext()",
    "kind": "Method",
    "detail": "Function (entry ->)",
    "insertText": "SetNext(freelist_head)"
  },
  {
    "label": "SetFreelistHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFreelistHead(entry)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(num_allocated_slots)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - num_allocated_slots ;)",
    "insertText": "if(PA_UNLIKELY(marked_full || num_allocated_slots == 0))"
  },
  {
    "label": "FreeSlowPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeSlowPath(1)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PA_DCHECK(!CanStoreRawSize())"
  },
  {
    "label": "AppendFreeList()",
    "kind": "Method",
    "detail": "Function (} } template<bool thread_safe> PA_ALWAYS_INLINE void SlotSpanMetadata<thread_safe)",
    "insertText": "AppendFreeList(PartitionFreelistEntry* head, PartitionFreelistEntry* tail, size_t number_of_freed) PA_EXCLUSIVE_LOCKS_REQUIRED( PartitionRoot<thread_safe>::FromSlotSpan(this)->lock_)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!tail->GetNext(bucket->slot_size))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(number_of_freed)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(num_allocated_slots)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(number_of_freed == 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} { size_t number_of_entries = 0 ;)",
    "insertText": "for(auto* entry = head; entry; entry = entry->GetNext(bucket->slot_size), ++number_of_entries)"
  },
  {
    "label": "UntagPtr()",
    "kind": "Method",
    "detail": "Function (uintptr_t untagged_entry =)",
    "insertText": "UntagPtr(entry)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(ToSlotSpanStart(this) <= untagged_entry)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(untagged_entry < ToSlotSpanStart(this) + bucket->get_bytes_per_span())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PA_DCHECK(number_of_entries == number_of_freed)"
  },
  {
    "label": "SetFreelistHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFreelistHead(head)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(num_allocated_slots >= number_of_freed)"
  },
  {
    "label": "FreeSlowPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeSlowPath(number_of_freed)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(this != get_sentinel_slot_span())"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ret(num_allocated_slots > 0 && (freelist_head || num_unprovisioned_slots))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!marked_full)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(num_allocated_slots < bucket->get_slots_per_span())"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ret(num_allocated_slots == bucket->get_slots_per_span())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!freelist_head)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!num_unprovisioned_slots)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ret(!num_allocated_slots && freelist_head)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ret(!num_allocated_slots && !freelist_head)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!in_empty_cache_)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} return ret ; } template<bool thread_safe> PA_ALWAYS_INLINE void SlotSpanMetadata<thread_safe)",
    "insertText": "Reset()"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(is_decommitted())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(num_unprovisioned_slots)"
  },
  {
    "label": "ToSuperPageExtent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToSuperPageExtent()->IncrementNumberOfNonemptySlotSpans()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (next_slot_span = nullptr ; } # if)",
    "insertText": "BUILDFLAG(STARSCAN) PA_ALWAYS_INLINE AllocationStateMap* StateBitmapFromAddr(uintptr_t address)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(IsManagedByNormalBuckets(address))"
  },
  {
    "label": "SuperPageStateBitmap()",
    "kind": "Method",
    "detail": "Function (uintptr_t super_page = address& kSuperPageBaseMask ; return)",
    "insertText": "SuperPageStateBitmap(super_page)"
  },
  {
    "label": "IterateSlotSpans()",
    "kind": "Method",
    "detail": "Function (} # endif template<bool thread_safe,Callback> void)",
    "insertText": "IterateSlotSpans(uintptr_t super_page, bool with_quarantine, Callback callback)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) PA_DCHECK(!(super_page % kSuperPageAlignment))"
  },
  {
    "label": "FromAddr()",
    "kind": "Method",
    "detail": "Function (# endif using Page = PartitionPage<thread_safe> ; using SlotSpan = SlotSpanMetadata<thread_safe> ; auto* const first_page =)",
    "insertText": "FromAddr(SuperPagePayloadBegin(super_page, with_quarantine))"
  },
  {
    "label": "FromAddr()",
    "kind": "Method",
    "detail": "Function (auto* const last_page =)",
    "insertText": "FromAddr(SuperPagePayloadEnd(super_page) - PartitionPageSize())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Page* page ; SlotSpan* slot_span ;)",
    "insertText": "for(page = first_page; page <= last_page;)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + page ; continue ; } break ; } slot_span =& page -> slot_span_metadata ;)",
    "insertText": "if(callback(slot_span))"
  },
  {
    "label": "get_pages_per_slot_span()",
    "kind": "Method",
    "detail": "Function (page + = slot_span -> bucket ->)",
    "insertText": "get_pages_per_slot_span()"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PA_DCHECK(page > first_page)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(page == reinterpret_cast<Page*>(slot_span) + slot_span->bucket->get_pages_per_slot_span())"
  }
]