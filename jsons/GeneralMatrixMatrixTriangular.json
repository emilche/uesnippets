[
  {
    "label": "selfadjoint_rank1_update",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_rank1_update"
  },
  {
    "label": "tribb_kernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tribb_kernel"
  },
  {
    "label": "general_matrix_matrix_triangular_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_matrix_triangular_product"
  },
  {
    "label": "general_product_to_triangular_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_product_to_triangular_selector"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERAL_MATRIX_MATRIX_TRIANGULAR_H # define EIGEN_GENERAL_MATRIX_MATRIX_TRIANGULAR_H namespace Eigen { template<Scalar,Index,int StorageOrder,int UpLo,bool ConjLhs,bool ConjRhs> struct selfadjoint_rank1_update ; namespace internal { template<LhsScalar,RhsScalar,Index,int mr,int nr,bool ConjLhs,bool ConjRhs,int ResInnerStride,int UpLo> struct tribb_kernel ; template<Index,LhsScalar,int LhsStorageOrder,bool ConjugateLhs,RhsScalar,int RhsStorageOrder,bool ConjugateRhs,int ResStorageOrder,int ResInnerStride,int UpLo,int Version = Specialized> struct general_matrix_matrix_triangular_product ; template<Index,LhsScalar,int LhsStorageOrder,bool ConjugateLhs,RhsScalar,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride,int UpLo,int Version> struct general_matrix_matrix_triangular_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,RowMajor,ResInnerStride,UpLo,Version> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; EIGEN_STRONG_INLINE void)",
    "insertText": "run(Index size, Index depth,const LhsScalar* lhs, Index lhsStride, const RhsScalar* rhs, Index rhsStride, ResScalar* res, Index resIncr, Index resStride, const ResScalar& alpha, level3_blocking<RhsScalar,LhsScalar>& blocking)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (general_matrix_matrix_triangular_product<Index,RhsScalar,RhsStorageOrder = = RowMajor ? ColMajor : RowMajor,ConjugateRhs,LhsScalar,LhsStorageOrder = = RowMajor ? ColMajor : RowMajor,ConjugateLhs,ColMajor,ResInnerStride,UpLo = = Lower ? Upper : Lower)",
    "insertText": "run(size,depth,rhs,rhsStride,lhs,lhsStride,res,resIncr,resStride,alpha,blocking)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Index,LhsScalar,int LhsStorageOrder,bool ConjugateLhs,RhsScalar,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride,int UpLo,int Version> struct general_matrix_matrix_triangular_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,ColMajor,ResInnerStride,UpLo,Version> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; EIGEN_STRONG_INLINE void)",
    "insertText": "run(Index size, Index depth,const LhsScalar* _lhs, Index lhsStride, const RhsScalar* _rhs, Index rhsStride, ResScalar* _res, Index resIncr, Index resStride, const ResScalar& alpha, level3_blocking<LhsScalar,RhsScalar>& blocking)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (typedef gebp_traits<LhsScalar,RhsScalar> Traits ; typedef const_blas_data_mapper<LhsScalar,Index,LhsStorageOrder> LhsMapper ; typedef const_blas_data_mapper<RhsScalar,Index,RhsStorageOrder> RhsMapper ; typedef blas_data_mapper<Traits::ResScalar,Index,ColMajor,Unaligned,ResInnerStride> ResMapper ; LhsMapper)",
    "insertText": "lhs(_lhs,lhsStride)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsMapper)",
    "insertText": "rhs(_rhs,rhsStride)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (ResMapper)",
    "insertText": "res(_res, resStride, resIncr)"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (Index kc = blocking .)",
    "insertText": "kc()"
  },
  {
    "label": "mc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "mc(std::min)(size,blocking.mc())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (std::size_t sizeA = kc* mc ; std::size_t sizeB = kc* size ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(LhsScalar, blockA, sizeA, blocking.blockA())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(RhsScalar, blockB, sizeB, blocking.blockB())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (gemm_pack_lhs<LhsScalar,Index,LhsMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,LhsStorageOrder> pack_lhs ; gemm_pack_rhs<RhsScalar,Index,RhsMapper,Traits::nr,RhsStorageOrder> pack_rhs ; gebp_kernel<LhsScalar,RhsScalar,Index,ResMapper,Traits::mr,Traits::nr,ConjugateLhs,ConjugateRhs> gebp ; tribb_kernel<LhsScalar,RhsScalar,Index,Traits::mr,Traits::nr,ConjugateLhs,ConjugateRhs,ResInnerStride,UpLo> sybb ;)",
    "insertText": "for(Index k2=0; k2<depth; k2+=kc)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_kc(std::min)(k2+kc,depth)"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_rhs(blockB, rhs.getSubMapper(k2,0), actual_kc, size)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(i2+mc,size)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_lhs(blockA, lhs.getSubMapper(i2, k2), actual_kc, actual_mc)"
  },
  {
    "label": "sybb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sybb(_res+resStride*i2 + resIncr*i2, resIncr, resStride, blockA, blockB + actual_kc*i2, actual_mc, actual_kc, alpha)"
  },
  {
    "label": "gebp()",
    "kind": "Method",
    "detail": "Function (Index j2 = i2 + actual_mc ;)",
    "insertText": "gebp(res.getSubMapper(i2, j2), blockA, blockB+actual_kc*j2, actual_mc, actual_kc, (std::max)(Index(0), size-j2), alpha, -1, -1, 0, 0)"
  },
  {
    "label": "EIGEN_PLAIN_ENUM_MAX()",
    "kind": "Method",
    "detail": "Function (} } } } } ; template<LhsScalar,RhsScalar,Index,int mr,int nr,bool ConjLhs,bool ConjRhs,int ResInnerStride,int UpLo> struct tribb_kernel { typedef gebp_traits<LhsScalar,RhsScalar,ConjLhs,ConjRhs> Traits ; typedef Traits::ResScalar ResScalar ; enum { BlockSize = meta_least_common_multiple<)",
    "insertText": "EIGEN_PLAIN_ENUM_MAX(mr,nr),EIGEN_PLAIN_ENUM_MIN(mr,nr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(ResScalar* _res, Index resIncr, Index resStride, const LhsScalar* blockA, const RhsScalar* blockB, Index size, Index depth, const ResScalar& alpha)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (gebp_kernel<LhsScalar,RhsScalar,Index,ResMapper,mr,nr,ConjLhs,ConjRhs> gebp_kernel1 ; gebp_kernel<LhsScalar,RhsScalar,Index,BufferMapper,mr,nr,ConjLhs,ConjRhs> gebp_kernel2 ; Matrix<ResScalar,BlockSize,BlockSize,ColMajor>)",
    "insertText": "buffer((internal::constructor_without_unaligned_array_assert()))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index actualBlockSize = std::min<)",
    "insertText": "Index(BlockSize,size - j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const RhsScalar* actual_b = blockB + j* depth ;)",
    "insertText": "if(UpLo==Upper) gebp_kernel1(res.getSubMapper(0, j), blockA, actual_b, j, depth, actualBlockSize, alpha, -1, -1, 0, 0)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function ({ Index i = j ; buffer .)",
    "insertText": "setZero()"
  },
  {
    "label": "gebp_kernel2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel2(BufferMapper(buffer.data(), BlockSize), blockA+depth*i, actual_b, actualBlockSize, depth, actualBlockSize, alpha, -1, -1, 0, 0)"
  },
  {
    "label": "getLinearMapper()",
    "kind": "Method",
    "detail": "Function (ResMapper::LinearMapper r = res .)",
    "insertText": "getLinearMapper(i,j+j1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(UpLo==Lower)"
  },
  {
    "label": "gebp_kernel1()",
    "kind": "Method",
    "detail": "Function (Index i = j + actualBlockSize ;)",
    "insertText": "gebp_kernel1(res.getSubMapper(i, j), blockA+depth*i, actual_b, size-i, depth, actualBlockSize, alpha, -1, -1, 0, 0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } } ; } template<MatrixType,ProductType,int UpLo,bool IsOuterProduct> struct general_product_to_triangular_selector ; template<MatrixType,ProductType,int UpLo> struct general_product_to_triangular_selector<MatrixType,ProductType,UpLo,true> { void)",
    "insertText": "run(MatrixType& mat, const ProductType& prod, const typename MatrixType::Scalar& alpha, bool beta)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; typedef internal::remove_all<ProductType::LhsNested>::type Lhs ; typedef internal::blas_traits<Lhs> LhsBlasTraits ; typedef LhsBlasTraits::DirectLinearAccessType ActualLhs ; typedef internal::remove_all<ActualLhs>::type _ActualLhs ; internal::add_const_on_value_type<ActualLhs>::type actualLhs =)",
    "insertText": "extract(prod.lhs())"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_all<ProductType::RhsNested>::type Rhs ; typedef internal::blas_traits<Rhs> RhsBlasTraits ; typedef RhsBlasTraits::DirectLinearAccessType ActualRhs ; typedef internal::remove_all<ActualRhs>::type _ActualRhs ; internal::add_const_on_value_type<ActualRhs>::type actualRhs =)",
    "insertText": "extract(prod.rhs())"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (Scalar actualAlpha = alpha*)",
    "insertText": "extractScalarFactor(prod.lhs().derived()) * RhsBlasTraits::extractScalarFactor(prod.rhs().derived())"
  },
  {
    "label": "StorageOrder()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "StorageOrder(internal::traits<MatrixType>::Flags&RowMajorBit)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (internal::gemv_static_vector_if<Scalar,Lhs::SizeAtCompileTime,Lhs::MaxSizeAtCompileTime,! UseLhsDirectly> static_lhs ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, actualLhsPtr, actualLhs.size(), (UseLhsDirectly ? const_cast<Scalar*>(actualLhs.data()) : static_lhs.data()))"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (internal::gemv_static_vector_if<Scalar,Rhs::SizeAtCompileTime,Rhs::MaxSizeAtCompileTime,! UseRhsDirectly> static_rhs ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, actualRhsPtr, actualRhs.size(), (UseRhsDirectly ? const_cast<Scalar*>(actualRhs.data()) : static_rhs.data()))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (selfadjoint_rank1_update<Scalar,Index,StorageOrder,UpLo,LhsBlasTraits::NeedToConjugate&& NumTraits<Scalar>::IsComplex,RhsBlasTraits::NeedToConjugate&& NumTraits<Scalar>::IsComplex)",
    "insertText": "run(actualLhs.size(), mat.data(), mat.outerStride(), actualLhsPtr, actualRhsPtr, actualAlpha)"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "IsRowMajor(internal::traits<MatrixType>::Flags&RowMajorBit) ? 1 : 0, LhsIsRowMajor = _ActualLhs::Flags&RowMajorBit ? 1 : 0, RhsIsRowMajor = _ActualRhs::Flags&RowMajorBit ? 1 : 0, SkipDiag = (UpLo&(UnitDiag|ZeroDiag))"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index size = mat .)",
    "insertText": "cols()"
  },
  {
    "label": "blocking()",
    "kind": "Method",
    "detail": "Function (typedef internal::gemm_blocking_space<IsRowMajor ? RowMajor : ColMajor,Lhs::Scalar,Rhs::Scalar,MatrixType::MaxColsAtCompileTime,MatrixType::MaxColsAtCompileTime,_ActualRhs::MaxColsAtCompileTime> BlockingType ; BlockingType)",
    "insertText": "blocking(size, size, depth, 1, false)"
  },
  {
    "label": "UpLo()",
    "kind": "Method",
    "detail": "Function (internal::general_matrix_matrix_triangular_product<Index,Lhs::Scalar,LhsIsRowMajor ? RowMajor : ColMajor,LhsBlasTraits::NeedToConjugate,Rhs::Scalar,RhsIsRowMajor ? RowMajor : ColMajor,RhsBlasTraits::NeedToConjugate,IsRowMajor ? RowMajor : ColMajor,MatrixType::InnerStrideAtCompileTime,)",
    "insertText": "UpLo(Lower|Upper)> ::run(size, depth, &actualLhs.coeffRef(SkipDiag&&(UpLo&Lower)==Lower ? 1 : 0,0), actualLhs.outerStride(), &actualRhs.coeffRef(0,SkipDiag&&(UpLo&Upper)==Upper ? 1 : 0), actualRhs.outerStride(), mat.data() + (SkipDiag ? (bool(IsRowMajor) != ((UpLo&Lower)==Lower) ? mat.innerStride() : mat.outerStride() ) : 0), mat.innerStride(), mat.outerStride(), actualAlpha, blocking)"
  },
  {
    "label": "_assignProduct()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,unsigned int UpLo> template<ProductType> EIGEN_DEVICE_FUNC TriangularView<MatrixType,UpLo>& TriangularViewImpl<MatrixType,UpLo,Dense)",
    "insertText": "_assignProduct(const ProductType& prod, const Scalar& alpha, bool beta)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((UpLo&UnitDiag)==0, WRITING_TO_TRIANGULAR_PART_WITH_UNIT_DIAGONAL_IS_NOT_SUPPORTED)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(derived().nestedExpression().rows() == prod.rows() && derived().cols() == prod.cols())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (general_product_to_triangular_selector<MatrixType,ProductType,UpLo,internal::traits<ProductType>::InnerSize = = 1)",
    "insertText": "run(derived().nestedExpression().const_cast_derived(), prod, alpha, beta)"
  }
]