[
  {
    "label": "Status",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Status"
  },
  {
    "label": "StatusOr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatusOr"
  },
  {
    "label": "CheckOpMessageBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckOpMessageBuilder"
  },
  {
    "label": "ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_LOG_INTERNAL_CHECK_OP_H_ # define ABSL_LOG_INTERNAL_CHECK_OP_H_ # include<stdint . h> # include<ostream> # include<sstream> # include<string> # include<utility> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / base / optimization . h \" # include \" absl / log / internal / nullguard . h \" # include \" absl / log / internal / nullstream . h \" # include \" absl / log / internal / strip . h \" # ifdef ABSL_MIN_LOG_LEVEL # define)",
    "insertText": "ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(literal) \\ (::absl::LogSeverity::kFatal >= \\ static_cast<::absl::LogSeverity>(ABSL_MIN_LOG_LEVEL) \\ ? (literal) \\ : \"\") #else #define ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(literal) (literal) #endif #ifdef NDEBUG #define ABSL_LOG_INTERNAL_DCHECK_NOP(x, y) \\ while (false && ((void)(x), (void)(y), 0)) \\ ::absl::log_internal::NullStream().InternalStream() #endif #define ABSL_LOG_INTERNAL_CHECK_OP(name, op, val1, val2) \\ while ( \\ ::std::string* absl_log_internal_check_op_result ABSL_ATTRIBUTE_UNUSED = \\ ::absl::log_internal::name##Impl( \\ ::absl::log_internal::GetReferenceableValue(val1), \\ ::absl::log_internal::GetReferenceableValue(val2), \\ ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(#val1 \" \" #op \\ \" \" #val2))) \\ ABSL_LOG_INTERNAL_CHECK(*absl_log_internal_check_op_result).InternalStream() #define ABSL_LOG_INTERNAL_QCHECK_OP(name, op, val1, val2) \\ while (::std::string* absl_log_internal_qcheck_op_result = \\ ::absl::log_internal::name##Impl( \\ ::absl::log_internal::GetReferenceableValue(val1), \\ ::absl::log_internal::GetReferenceableValue(val2), \\ ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(#val1 \" \" #op \\ \" \" #val2))) \\ ABSL_LOG_INTERNAL_QCHECK(*absl_log_internal_qcheck_op_result).InternalStream() #define ABSL_LOG_INTERNAL_CHECK_STROP(func, op, expected, s1, s2) \\ while (::std::string* absl_log_internal_check_strop_result = \\ ::absl::log_internal::Check##func##expected##Impl( \\ (s1), (s2), \\ ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(#s1 \" \" #op \" \" #s2))) \\ ABSL_LOG_INTERNAL_CHECK(*absl_log_internal_check_strop_result) \\ .InternalStream() #define ABSL_LOG_INTERNAL_QCHECK_STROP(func, op, expected, s1, s2) \\ while (::std::string* absl_log_internal_qcheck_strop_result = \\ ::absl::log_internal::Check##func##expected##Impl( \\ (s1), (s2), \\ ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(#s1 \" \" #op \" \" #s2))) \\ ABSL_LOG_INTERNAL_QCHECK(*absl_log_internal_qcheck_strop_result) \\ .InternalStream() #define ABSL_LOG_INTERNAL_CHECK_OK(val) \\ for (::std::pair<const ::absl::Status*, ::std::string*> \\ absl_log_internal_check_ok_goo; \\ absl_log_internal_check_ok_goo.first = \\ ::absl::log_internal::AsStatus(val), \\ absl_log_internal_check_ok_goo.second = \\ ABSL_PREDICT_TRUE(absl_log_internal_check_ok_goo.first->ok()) \\ ? nullptr \\ : ::absl::status_internal::MakeCheckFailString( \\ absl_log_internal_check_ok_goo.first, \\ ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(#val \" is OK\")), \\ !ABSL_PREDICT_TRUE(absl_log_internal_check_ok_goo.first->ok());) \\ ABSL_LOG_INTERNAL_CHECK(*absl_log_internal_check_ok_goo.second) \\ .InternalStream() #define ABSL_LOG_INTERNAL_QCHECK_OK(val) \\ for (::std::pair<const ::absl::Status*, ::std::string*> \\ absl_log_internal_check_ok_goo; \\ absl_log_internal_check_ok_goo.first = \\ ::absl::log_internal::AsStatus(val), \\ absl_log_internal_check_ok_goo.second = \\ ABSL_PREDICT_TRUE(absl_log_internal_check_ok_goo.first->ok()) \\ ? nullptr \\ : ::absl::status_internal::MakeCheckFailString( \\ absl_log_internal_check_ok_goo.first, \\ ABSL_LOG_INTERNAL_STRIP_STRING_LITERAL(#val \" is OK\")), \\ !ABSL_PREDICT_TRUE(absl_log_internal_check_ok_goo.first->ok());) \\ ABSL_LOG_INTERNAL_QCHECK(*absl_log_internal_check_ok_goo.second) \\ .InternalStream()"
  },
  {
    "label": "MakeCheckFailString()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN class Status ; template<T> class StatusOr ; namespace status_internal { std::string*)",
    "insertText": "MakeCheckFailString(const absl::Status* status, const char* prefix)"
  },
  {
    "label": "AsStatus()",
    "kind": "Method",
    "detail": "Function (} namespace log_internal { const absl::Status*)",
    "insertText": "AsStatus(const absl::Status& s)"
  },
  {
    "label": "CheckOpMessageBuilder()",
    "kind": "Method",
    "detail": "Function (} class CheckOpMessageBuilder final { public :)",
    "insertText": "CheckOpMessageBuilder(const char* exprtext)"
  },
  {
    "label": "CheckOpMessageBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CheckOpMessageBuilder()"
  },
  {
    "label": "ForVar1()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "ForVar1()"
  },
  {
    "label": "NewString()",
    "kind": "Method",
    "detail": "Function (std::string*)",
    "insertText": "NewString()"
  },
  {
    "label": "MakeCheckOpValueString()",
    "kind": "Method",
    "detail": "Function (private : std::ostringstream stream_ ; } ; template<T> void)",
    "insertText": "MakeCheckOpValueString(std::ostream& os, const T& v)"
  },
  {
    "label": "Guard()",
    "kind": "Method",
    "detail": "Function (os<<log_internal::NullGuard<T)",
    "insertText": "Guard(v)"
  },
  {
    "label": "MakeCheckOpValueString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeCheckOpValueString(std::ostream& os, char v)"
  },
  {
    "label": "MakeCheckOpValueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCheckOpValueString(std::ostream& os, signed char v)"
  },
  {
    "label": "MakeCheckOpValueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCheckOpValueString(std::ostream& os, unsigned char v)"
  },
  {
    "label": "MakeCheckOpValueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCheckOpValueString(std::ostream& os, const void* p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace detect_specialization { int64_t)",
    "insertText": "operator(std::ostream&, short value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "operator(std::ostream&, unsigned short value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "operator(std::ostream&, int value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "operator(std::ostream&, unsigned int value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "operator(std::ostream&, long value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "operator(std::ostream&, unsigned long value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "operator(std::ostream&, long long value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "operator(std::ostream&, unsigned long long value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "operator(std::ostream&, float value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (long double)",
    "insertText": "operator(std::ostream&, long double value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(std::ostream&, bool value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "operator(std::ostream&, const void* value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "operator(std::ostream&, std::nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Traits> char)",
    "insertText": "operator(std::basic_ostream<char, Traits>&, char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Traits> signed char)",
    "insertText": "operator(std::basic_ostream<char, Traits>&, signed char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Traits> unsigned char)",
    "insertText": "operator(std::basic_ostream<char, Traits>&, unsigned char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Traits> const char*)",
    "insertText": "operator(std::basic_ostream<char, Traits>&, const char*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Traits> const signed char*)",
    "insertText": "operator(std::basic_ostream<char, Traits>&, const signed char*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Traits> const unsigned char*)",
    "insertText": "operator(std::basic_ostream<char, Traits>&, const unsigned char*)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<T,=)",
    "insertText": "decltype(std::declval<std::ostream&>() << std::declval<const T&>())> const T& Detect(int)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "decltype(detect_specialization::operator<<(std::declval<std::ostream&>(), std::declval<const T&>())) Detect(char)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<T> using CheckOpStreamType =)",
    "insertText": "decltype(detect_specialization::Detect<T>(0))"
  },
  {
    "label": "MakeCheckOpString()",
    "kind": "Method",
    "detail": "Function (template<T1,T2> ABSL_ATTRIBUTE_RETURNS_NONNULL std::string*)",
    "insertText": "MakeCheckOpString(T1 v1, T2 v2, const char* exprtext)"
  },
  {
    "label": "MakeCheckOpValueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCheckOpValueString(comb.ForVar1(), v1)"
  },
  {
    "label": "MakeCheckOpValueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCheckOpValueString(comb.ForVar2(), v2)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(x) \\ extern template std::string* MakeCheckOpString(x, x, const char*) ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(bool)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(int64_t)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(uint64_t)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(float)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(double)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(char)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(unsigned char)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(const std::string&)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(const absl::string_view&)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(const char*)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(const signed char*)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(const unsigned char*)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN(const void*)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_CHECK_OP_IMPL()",
    "kind": "Method",
    "detail": "Function (# undef ABSL_LOG_INTERNAL_DEFINE_MAKE_CHECK_OP_STRING_EXTERN # define)",
    "insertText": "ABSL_LOG_INTERNAL_CHECK_OP_IMPL(name, op) \\ template <typename T1, typename T2> \\ inline constexpr ::std::string* name##Impl(const T1& v1, const T2& v2, \\ const char* exprtext)"
  },
  {
    "label": "ABSL_PREDICT_TRUE()",
    "kind": "Method",
    "detail": "Function (\\ using U1 = CheckOpStreamType<T1> ; \\ using U2 = CheckOpStreamType<T2> ; \\ return)",
    "insertText": "ABSL_PREDICT_TRUE(v1 op v2) \\ ? nullptr \\ : MakeCheckOpString<U1, U2>(v1, v2, exprtext)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (\\ } \\::std::string* name # #)",
    "insertText": "Impl(int v1, int v2, \\ const char* exprtext)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (\\ return name # # Impl<int,)",
    "insertText": "int(v1, v2, exprtext)"
  },
  {
    "label": "ABSL_LOG_INTERNAL_CHECK_OP_IMPL()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "ABSL_LOG_INTERNAL_CHECK_OP_IMPL(Check_EQ, ==) ABSL_LOG_INTERNAL_CHECK_OP_IMPL(Check_NE, !=) ABSL_LOG_INTERNAL_CHECK_OP_IMPL(Check_LE, <=) ABSL_LOG_INTERNAL_CHECK_OP_IMPL(Check_LT, <) ABSL_LOG_INTERNAL_CHECK_OP_IMPL(Check_GE, >=) ABSL_LOG_INTERNAL_CHECK_OP_IMPL(Check_GT, >) #undef ABSL_LOG_INTERNAL_CHECK_OP_IMPL std::string* CheckstrcmptrueImpl(const char* s1, const char* s2, const char* exprtext)"
  },
  {
    "label": "CheckstrcmpfalseImpl()",
    "kind": "Method",
    "detail": "Function (std::string*)",
    "insertText": "CheckstrcmpfalseImpl(const char* s1, const char* s2, const char* exprtext)"
  },
  {
    "label": "CheckstrcasecmptrueImpl()",
    "kind": "Method",
    "detail": "Function (std::string*)",
    "insertText": "CheckstrcasecmptrueImpl(const char* s1, const char* s2, const char* exprtext)"
  },
  {
    "label": "CheckstrcasecmpfalseImpl()",
    "kind": "Method",
    "detail": "Function (std::string*)",
    "insertText": "CheckstrcasecmpfalseImpl(const char* s1, const char* s2, const char* exprtext)"
  },
  {
    "label": "GetReferenceableValue()",
    "kind": "Method",
    "detail": "Function (template<T> const T&)",
    "insertText": "GetReferenceableValue(const T& t)"
  }
]