[
  {
    "label": "PCScanTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PCScanTask"
  },
  {
    "label": "PCScanInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PCScanInternal"
  },
  {
    "label": "StarScanSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StarScanSnapshot"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_PCSCAN_INTERNAL_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_PCSCAN_INTERNAL_H_ # include<array> # include<functional> # include<memory> # include<mutex> # include<unordered_map> # include<utility> # include<vector> # include \" base / allocator / partition_allocator / partition_alloc_base / memory / scoped_refptr . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / no_destructor . h \" # include \" base / allocator / partition_allocator / starscan / metadata_allocator . h \" # include \" base / allocator / partition_allocator / starscan / pcscan . h \" # include \" base / allocator / partition_allocator / starscan / starscan_fwd . h \" # include \" base / allocator / partition_allocator / starscan / write_protector . h \" namespace partition_alloc::internal { class PCScanTask ; class PCScanInternal final { public : using Root = PCScan::Root ; using TaskHandle = scoped_refptr<PCScanTask> ; using SuperPages = std::vector<uintptr_t,MetadataAllocator<uintptr_t>> ; using RootsMap = std::unordered_map<Root*,SuperPages,std::hash<Root*>,std::equal_to<>,MetadataAllocator<std::pair<Root* const,SuperPages>>> ; PCScanInternal&)",
    "insertText": "Instance()"
  },
  {
    "label": "PCScanInternal()",
    "kind": "Method",
    "detail": "Function (internal::base::NoDestructor<PCScanInternal> instance ; return* instance ; })",
    "insertText": "PCScanInternal(const PCScanInternal&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PCScanInternal&)",
    "insertText": "operator(const PCScanInternal&)"
  },
  {
    "label": "PCScanInternal()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PCScanInternal()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(PCScan::InitConfig)"
  },
  {
    "label": "is_initialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_initialized()"
  },
  {
    "label": "PerformScanIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformScanIfNeeded(PCScan::InvocationMode)"
  },
  {
    "label": "PerformDelayedScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformDelayedScan(base::TimeDelta delay)"
  },
  {
    "label": "JoinScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinScan()"
  },
  {
    "label": "CurrentPCScanTask()",
    "kind": "Method",
    "detail": "Function (TaskHandle)",
    "insertText": "CurrentPCScanTask()"
  },
  {
    "label": "SetCurrentPCScanTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentPCScanTask(TaskHandle task)"
  },
  {
    "label": "ResetCurrentPCScanTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCurrentPCScanTask()"
  },
  {
    "label": "RegisterScannableRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterScannableRoot(Root*)"
  },
  {
    "label": "RegisterNonScannableRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNonScannableRoot(Root*)"
  },
  {
    "label": "scannable_roots()",
    "kind": "Method",
    "detail": "Function (RootsMap&)",
    "insertText": "scannable_roots()"
  },
  {
    "label": "SetProcessName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessName(const char* name)"
  },
  {
    "label": "process_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "process_name()"
  },
  {
    "label": "simd_support()",
    "kind": "Method",
    "detail": "Function (SimdSupport)",
    "insertText": "simd_support()"
  },
  {
    "label": "DisableStackScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableStackScanning()"
  },
  {
    "label": "IsStackScanningEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStackScanningEnabled()"
  },
  {
    "label": "EnableImmediateFreeing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableImmediateFreeing()"
  },
  {
    "label": "IsImmediateFreeingEnabled()",
    "kind": "Method",
    "detail": "Function (immediate_freeing_enabled_ = true ; } bool)",
    "insertText": "IsImmediateFreeingEnabled()"
  },
  {
    "label": "NotifyThreadDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyThreadDestroyed()"
  },
  {
    "label": "GetCurrentThreadStackTop()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCurrentThreadStackTop()"
  },
  {
    "label": "WriteProtectionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteProtectionEnabled()"
  },
  {
    "label": "ProtectPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProtectPages(uintptr_t begin, size_t size)"
  },
  {
    "label": "UnprotectPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnprotectPages(uintptr_t begin, size_t size)"
  },
  {
    "label": "ClearRootsForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRootsForTesting()"
  },
  {
    "label": "ReinitForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitForTesting(PCScan::InitConfig)"
  },
  {
    "label": "FinishScanForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishScanForTesting()"
  },
  {
    "label": "RegisterStatsReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStatsReporter(partition_alloc::StatsReporter* reporter)"
  },
  {
    "label": "GetReporter()",
    "kind": "Method",
    "detail": "Function (partition_alloc::StatsReporter&)",
    "insertText": "GetReporter()"
  }
]