[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_FRAME_POINTER_UNWINDER_H_ # define BASE_PROFILER_FRAME_POINTER_UNWINDER_H_ # include<vector> # include \" base / base_export . h \" # include \" base / profiler / unwinder . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT # if)",
    "insertText": "BUILDFLAG(IS_APPLE) API_AVAILABLE(ios(12))"
  },
  {
    "label": "FramePointerUnwinder()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FramePointerUnwinder()"
  },
  {
    "label": "FramePointerUnwinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FramePointerUnwinder(const FramePointerUnwinder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FramePointerUnwinder&)",
    "insertText": "operator(const FramePointerUnwinder&)"
  },
  {
    "label": "CanUnwindFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnwindFrom(const Frame& current_frame)"
  },
  {
    "label": "TryUnwind()",
    "kind": "Method",
    "detail": "Function (UnwindResult)",
    "insertText": "TryUnwind(RegisterContext* thread_context, uintptr_t stack_top, std::vector<Frame>* stack)"
  }
]