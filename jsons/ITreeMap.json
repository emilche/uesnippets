[
  {
    "label": "FTreeMapAttributeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeMapAttributeData"
  },
  {
    "label": "FTreeMapNodeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeMapNodeData"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTreeMapOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeMapOptions"
  },
  {
    "label": "FTreeMapNodeVisualInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeMapNodeVisualInfo"
  },
  {
    "label": "ITreeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITreeMap"
  },
  {
    "label": "FTreeMapAttributeData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Styling / CoreStyle . h \" class FTreeMapAttributeData ; class FTreeMapNodeData ; typedef TSharedRef<class FTreeMapAttributeData> FTreeMapAttributeDataRef ; typedef TSharedPtr<class FTreeMapAttributeData> FTreeMapAttributeDataPtr ; class FTreeMapAttributeData { public : FName Value ; public :)",
    "insertText": "FTreeMapAttributeData() : Value( NAME_None)"
  },
  {
    "label": "FTreeMapAttributeData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTreeMapAttributeData(const FName InitValue ) : Value( InitValue)"
  },
  {
    "label": "FTreeMapNodeData()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSharedRef<class FTreeMapNodeData> FTreeMapNodeDataRef ; typedef TSharedPtr<class FTreeMapNodeData> FTreeMapNodeDataPtr ; class FTreeMapNodeData : public TSharedFromThis<FTreeMapNodeData> { public : FString LogicalName ; FString Name ; FString Name2 ; FString CenterText ; float Size ; const struct FSlateBrush* BackgroundBrush ; FLinearColor Color ; TArray<FString> HashTags ; TMap<FName,FTreeMapAttributeDataPtr> Attributes ; FTreeMapNodeData* Parent ; TArray<FTreeMapNodeDataPtr> Children ; public :)",
    "insertText": "FTreeMapNodeData() : Size( 0.0 ), BackgroundBrush( nullptr ), Color( FLinearColor::White ), Parent( NULL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTreeMapNodeData& Other)"
  },
  {
    "label": "IsLeafNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLeafNode()"
  },
  {
    "label": "CopyNodeInto()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyNodeInto(FTreeMapNodeData& NodeCopy)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NodeCopy . LogicalName = this -> LogicalName ; NodeCopy . Name = this -> Name ; NodeCopy . Name2 = this -> Name2 ; NodeCopy . CenterText = this -> CenterText ; NodeCopy . BackgroundBrush = this -> BackgroundBrush ; NodeCopy . Size = this -> Size ; NodeCopy . Color = this -> Color ; NodeCopy . HashTags = this -> HashTags ;)",
    "insertText": "for(auto HashIter( this->Attributes.CreateConstIterator() ); HashIter; ++HashIter)"
  },
  {
    "label": "AttributeDataCopy()",
    "kind": "Method",
    "detail": "Function (FTreeMapAttributeDataRef)",
    "insertText": "AttributeDataCopy(new FTreeMapAttributeData())"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "Value()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodeCopy . Attributes .)",
    "insertText": "Add(HashIter.Key(), AttributeDataCopy)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} NodeCopy . Children .)",
    "insertText": "Empty()"
  },
  {
    "label": "CopyNodeRecursively()",
    "kind": "Method",
    "detail": "Function (NodeCopy . Parent = this -> Parent ; } FTreeMapNodeDataRef)",
    "insertText": "CopyNodeRecursively()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (FTreeMapNodeDataRef NodeCopy =)",
    "insertText": "MakeShareable(new FTreeMapNodeData())"
  },
  {
    "label": "CopyNodeInto()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "CopyNodeInto(*NodeCopy)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodeCopy -> Children .)",
    "insertText": "Add(ChildCopy)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ChildCopy -> Parent =& NodeCopy .)",
    "insertText": "Get()"
  },
  {
    "label": "FTreeMapOptions()",
    "kind": "Method",
    "detail": "Function (} return NodeCopy ; } } ; enum class ETreeMapType { Standard,Squarified,} ; struct FTreeMapOptions { float DisplayWidth ; float DisplayHeight ; ETreeMapType TreeMapType ; FSlateFontInfo NameFont ; FSlateFontInfo Name2Font ; FSlateFontInfo CenterTextFont ; int32 FontSizeChangeBasedOnDepth ; float TopLevelContainerOuterPadding ; float NestedContainerOuterPadding ; float ContainerInnerPadding ; float MinimumInteractiveNodeSize ; float MinimumVisibleNodeSize ;)",
    "insertText": "FTreeMapOptions() : DisplayWidth( 1.0f ), DisplayHeight( 1.0f ), TreeMapType( ETreeMapType::Standard ), NameFont( FCoreStyle::Get().GetFontStyle( TEXT( \"NormalText\" ) ) ), Name2Font( FCoreStyle::Get().GetFontStyle( TEXT( \"NormalText\" ) ) ), CenterTextFont( FCoreStyle::Get().GetFontStyle( TEXT( \"NormalText\" ) ) ), FontSizeChangeBasedOnDepth( 1 ), TopLevelContainerOuterPadding( 0.0f ), NestedContainerOuterPadding( 0.0f ), ContainerInnerPadding( 0.0f ), MinimumInteractiveNodeSize( 0.0f ), MinimumVisibleNodeSize( 0.0f)"
  },
  {
    "label": "GetVisuals()",
    "kind": "Method",
    "detail": "Function (NameFont . Size = 1 2 ; Name2Font . Size = 8 ; CenterTextFont . Size = 2 4 ; } } ; struct FTreeMapNodeVisualInfo { class FTreeMapNodeData* NodeData ; FVector2D Position ; FVector2D Size ; FLinearColor Color ; FSlateFontInfo NameFont ; FSlateFontInfo Name2Font ; FSlateFontInfo CenterTextFont ; bool bIsInteractive ; } ; class ITreeMap { public : TArray<FTreeMapNodeVisualInfo>)",
    "insertText": "GetVisuals()"
  },
  {
    "label": "CreateTreeMap()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITreeMap>)",
    "insertText": "CreateTreeMap(const FTreeMapOptions& Options, const FTreeMapNodeDataRef& RootNodeData)"
  },
  {
    "label": "ParseOPMLToTreeMapData()",
    "kind": "Method",
    "detail": "Function (FTreeMapNodeDataPtr)",
    "insertText": "ParseOPMLToTreeMapData(const FString& OPMLFilePath, FString& OutErrorMessage)"
  },
  {
    "label": "ITreeMap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ITreeMap()"
  }
]