[
  {
    "label": "FMinimalBoxMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMinimalBoxMeshGenerator"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshShapeGenerator . h \" # include \" OrientedBoxTypes . h \" # include \" Util / IndexUtil . h \" namespace UE { namespace Geometry { class FMinimalBoxMeshGenerator : public FMeshShapeGenerator { public : FOrientedBox3d Box ; bool bScaleUVByAspectRatio = true ; public : FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "SetBufferSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferSizes(8, 12, 24, 24)"
  },
  {
    "label": "GetCorner()",
    "kind": "Method",
    "detail": "Function (Vertices [ i ] = Box .)",
    "insertText": "GetCorner(i)"
  },
  {
    "label": "MaxAbsElement()",
    "kind": "Method",
    "detail": "Function (} double MaxDimension =)",
    "insertText": "MaxAbsElement(2.0*Box.Extents)"
  },
  {
    "label": "UVScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UVScale(bScaleUVByAspectRatio) ? (1.0f / (float)MaxDimension)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int TriIndex = 0 ; int AttribIndex = 0 ;)",
    "insertText": "for(int fi = 0; fi < 6; ++fi)"
  },
  {
    "label": "FaceNormal()",
    "kind": "Method",
    "detail": "Function (int NormalAxisIdx = IndexUtil::BoxFaceNormals [ fi ] ; FVector3f)",
    "insertText": "FaceNormal(FVector3f)((double)FMath::Sign(NormalAxisIdx) * Box.GetAxis(FMath::Abs(NormalAxisIdx) - 1))"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Normals [ AttribIndex ] = FaceNormal ; FVector2i CornerUV = IndexUtil::BoxFacesUV [ j ] ; UVs [ AttribIndex ] =)",
    "insertText": "FVector2f(float(WidthUVScale*CornerUV.X), float(HeightUVScale*CornerUV.Y))"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (ElementIndices [ j ] = AttribIndex ; AttribIndex + + ; })",
    "insertText": "SetTriangle(TriIndex, IndexUtil::BoxFaces[fi][0], IndexUtil::BoxFaces[fi][1], IndexUtil::BoxFaces[fi][2])"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrianglePolygon(TriIndex, fi)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(TriIndex, ElementIndices[0], ElementIndices[1], ElementIndices[2])"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(TriIndex, ElementIndices[0], ElementIndices[1], ElementIndices[2])"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (TriIndex + + ;)",
    "insertText": "SetTriangle(TriIndex, IndexUtil::BoxFaces[fi][0], IndexUtil::BoxFaces[fi][2], IndexUtil::BoxFaces[fi][3])"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(TriIndex, ElementIndices[0], ElementIndices[2], ElementIndices[3])"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(TriIndex, ElementIndices[0], ElementIndices[2], ElementIndices[3])"
  }
]