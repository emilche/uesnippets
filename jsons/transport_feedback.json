[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "TransportFeedback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportFeedback"
  },
  {
    "label": "ReceivedPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceivedPacket"
  },
  {
    "label": "LastChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LastChunk"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TRANSPORT_FEEDBACK_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TRANSPORT_FEEDBACK_H_ # include<array> # include<memory> # include<vector> # include \" absl / base / attributes . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / rtpfb . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class TransportFeedback : public Rtpfb { public : class ReceivedPacket { public :)",
    "insertText": "ReceivedPacket(uint16_t sequence_number, int16_t delta_ticks) : sequence_number_(sequence_number), delta_ticks_(delta_ticks), received_(true)"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReceivedPacket(uint16_t sequence_number) : sequence_number_(sequence_number), received_(false)"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReceivedPacket(const ReceivedPacket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReceivedPacket&)",
    "insertText": "operator(const ReceivedPacket&)"
  },
  {
    "label": "sequence_number()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "sequence_number()"
  },
  {
    "label": "TransportFeedback()",
    "kind": "Method",
    "detail": "Function (size_t kMaxReportedPackets = 0 xffff ;)",
    "insertText": "TransportFeedback()"
  },
  {
    "label": "TransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportFeedback(bool include_timestamps, bool include_lost = false)"
  },
  {
    "label": "TransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportFeedback(const TransportFeedback&)"
  },
  {
    "label": "TransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportFeedback(TransportFeedback&&)"
  },
  {
    "label": "SetBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBase(uint16_t base_sequence, Timestamp ref_timestamp)"
  },
  {
    "label": "SetFeedbackSequenceNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFeedbackSequenceNumber(uint8_t feedback_sequence)"
  },
  {
    "label": "AddReceivedPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddReceivedPacket(uint16_t sequence_number, Timestamp timestamp)"
  },
  {
    "label": "GetReceivedPackets()",
    "kind": "Method",
    "detail": "Function (const std::vector<ReceivedPacket>&)",
    "insertText": "GetReceivedPackets()"
  },
  {
    "label": "GetAllPackets()",
    "kind": "Method",
    "detail": "Function (const std::vector<ReceivedPacket>&)",
    "insertText": "GetAllPackets()"
  },
  {
    "label": "GetBaseSequence()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "GetBaseSequence()"
  },
  {
    "label": "GetPacketStatusCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetPacketStatusCount()"
  },
  {
    "label": "GetBaseDelta()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetBaseDelta(Timestamp prev_timestamp)"
  },
  {
    "label": "IncludeTimestamps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncludeTimestamps()"
  },
  {
    "label": "ParseFrom()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TransportFeedback>)",
    "insertText": "ParseFrom(const uint8_t* buffer, size_t length)"
  },
  {
    "label": "IsConsistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConsistent()"
  },
  {
    "label": "BlockLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "BlockLength()"
  },
  {
    "label": "PaddingLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "PaddingLength()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* position, size_t max_length, PacketReadyCallback callback)"
  },
  {
    "label": "LastChunk()",
    "kind": "Method",
    "detail": "Function (private : using DeltaSize = uint8_t ; class LastChunk { public : using DeltaSize = TransportFeedback::DeltaSize ; size_t kMaxRunLengthCapacity = 0 x1fff ;)",
    "insertText": "LastChunk()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Empty()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "CanAdd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAdd(DeltaSize delta_size)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(DeltaSize delta_size)"
  },
  {
    "label": "AddMissingPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMissingPackets(size_t num_missing)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "Emit()"
  },
  {
    "label": "EncodeLast()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "EncodeLast()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(uint16_t chunk, size_t max_size)"
  },
  {
    "label": "AppendTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTo(std::vector<DeltaSize>* deltas)"
  },
  {
    "label": "EncodeOneBit()",
    "kind": "Method",
    "detail": "Function (private : size_t kMaxOneBitCapacity = 1 4 ; size_t kMaxTwoBitCapacity = 7 ; size_t kMaxVectorCapacity = kMaxOneBitCapacity ; DeltaSize kLarge = 2 ; uint16_t)",
    "insertText": "EncodeOneBit()"
  },
  {
    "label": "DecodeOneBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeOneBit(uint16_t chunk, size_t max_size)"
  },
  {
    "label": "EncodeTwoBit()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "EncodeTwoBit(size_t size)"
  },
  {
    "label": "DecodeTwoBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeTwoBit(uint16_t chunk, size_t max_size)"
  },
  {
    "label": "EncodeRunLength()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "EncodeRunLength()"
  },
  {
    "label": "DecodeRunLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeRunLength(uint16_t chunk, size_t max_size)"
  },
  {
    "label": "AddDeltaSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddDeltaSize(DeltaSize delta_size)"
  },
  {
    "label": "AddMissingPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMissingPackets(size_t num_missing_packets)"
  }
]