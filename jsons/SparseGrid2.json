[
  {
    "label": "TSparseGrid2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSparseGrid2"
  },
  {
    "label": "TSparseGrid2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BoxTypes . h \" # include \" IntBoxTypes . h \" namespace UE { namespace Geometry { template<ElemType> class TSparseGrid2 { protected : TMap<FVector2i,ElemType*> Elements ; FAxisAlignedBox2i Bounds ; public :)",
    "insertText": "TSparseGrid2()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Bounds =)",
    "insertText": "Empty()"
  },
  {
    "label": "FreeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeAll()"
  },
  {
    "label": "TSparseGrid2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSparseGrid2(const TSparseGrid2& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSparseGrid2&)",
    "insertText": "operator(const TSparseGrid2& Other)"
  },
  {
    "label": "TSparseGrid2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSparseGrid2(TSparseGrid2&& Other) noexcept : Elements(MoveTemp(Other.Elements)), Bounds(MoveTemp(Other.Bounds))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Other . Elements .)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSparseGrid2&)",
    "insertText": "operator(TSparseGrid2&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elements =)",
    "insertText": "MoveTemp(Other.Elements)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Bounds =)",
    "insertText": "MoveTemp(Other.Bounds)"
  },
  {
    "label": "Has()",
    "kind": "Method",
    "detail": "Function (} return* this ; } bool)",
    "insertText": "Has(const FVector2i& Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const ElemType*)",
    "insertText": "Get(const FVector2i& Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ElemType*)",
    "insertText": "Get(const FVector2i& Index, bool bAllocateIfMissing)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (ElemType* result = Elements .)",
    "insertText": "FindRef(Index)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } bool)",
    "insertText": "Free(const FVector2i& Index)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (delete Elements [ Index ] ; Elements .)",
    "insertText": "Remove(Index)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetCount()"
  },
  {
    "label": "GetDensity()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDensity()"
  },
  {
    "label": "GetBoundsInclusive()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox2i)",
    "insertText": "GetBoundsInclusive()"
  },
  {
    "label": "AllocatedIteration()",
    "kind": "Method",
    "detail": "Function (} template<Func> void)",
    "insertText": "AllocatedIteration(Func ElementFunc)"
  },
  {
    "label": "ElementFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementFunc(Pair.Value)"
  },
  {
    "label": "RangeIteration()",
    "kind": "Method",
    "detail": "Function (} } template<Func> void)",
    "insertText": "RangeIteration(FVector2i MinIndex, FVector2i MaxIndex, Func ElementFunc)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (const ElemType* Found = Elements .)",
    "insertText": "FindRef(FVector2i(xi,yi))"
  },
  {
    "label": "ElementFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementFunc(*Found)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} } } } SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} protected : ElemType*)",
    "insertText": "Allocate(const FVector2i& index)"
  },
  {
    "label": "ElemType()",
    "kind": "Method",
    "detail": "Function (ElemType* NewElem = new)",
    "insertText": "ElemType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(index, NewElem)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Bounds .)",
    "insertText": "Contain(index)"
  }
]