[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FMaterialShaderMapId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMapId"
  },
  {
    "label": "FShaderCommonCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCommonCompileJob"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FUniformExpressionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformExpressionSet"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "FMaterialShadingModelField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShadingModelField"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "EMaterialShadingModel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialShadingModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterialKeyGeneratorContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialKeyGeneratorContext"
  },
  {
    "label": "FMaterialShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderType"
  },
  {
    "label": "CompiledShaderInitializerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompiledShaderInitializerType"
  },
  {
    "label": "FMaterialShaderTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderTypes"
  },
  {
    "label": "FMaterialShaders",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaders"
  },
  {
    "label": "IMPLEMENT_MATERIAL_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Shader . h \" # include \" GlobalShader . h \" # define)",
    "insertText": "IMPLEMENT_MATERIAL_SHADER_TYPE(TemplatePrefix,ShaderClass,SourceFilename,FunctionName,Frequency) \\ IMPLEMENT_SHADER_TYPE( \\ TemplatePrefix, \\ ShaderClass, \\ SourceFilename, \\ FunctionName, \\ Frequency \\)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (class FMaterial ; class FMaterialShaderMap ; class FMaterialShaderMapId ; class FShaderCommonCompileJob ; class FShaderCompileJob ; class FShaderKeyGenerator ; class FUniformExpressionSet ; class FVertexFactoryType ; struct FMaterialShaderParameters ; struct FMaterialShadingModelField ; enum EBlendMode : int ; enum EMaterialShadingModel : int ; enum class EShaderCompileJobPriority : uint8 ; # if WITH_EDITOR class FMaterialKeyGeneratorContext ; # endif)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FString, FShadingModelToStringDelegate, EMaterialShadingModel) extern ENGINE_API FString GetShadingModelString(EMaterialShadingModel ShadingModel)"
  },
  {
    "label": "GetShadingModelFieldString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShadingModelFieldString(FMaterialShadingModelField ShadingModels, const FShadingModelToStringDelegate& Delegate, const FString& Delimiter = \" \")"
  },
  {
    "label": "GetShadingModelFieldString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShadingModelFieldString(FMaterialShadingModelField ShadingModels)"
  },
  {
    "label": "GetBlendModeString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBlendModeString(EBlendMode BlendMode)"
  },
  {
    "label": "GetMaterialShaderMapKeyString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetMaterialShaderMapKeyString(const FMaterialShaderMapId& ShaderMapId, const FMaterialShaderParameters& ShaderParameters, EShaderPlatform Platform, bool bIncludeKeyStringShaderDependencies = true)"
  },
  {
    "label": "RecordOrEmitMaterialShaderMapKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordOrEmitMaterialShaderMapKey(FMaterialKeyGeneratorContext& Context, FMaterialShaderMapId& ShaderMapId, FMaterialShaderParameters& ShaderParameters)"
  },
  {
    "label": "RecordOrEmitMaterialShaderMapKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordOrEmitMaterialShaderMapKey(FMaterialKeyGeneratorContext& Context, const FMaterialShaderMapId& ShaderMapId, const FMaterialShaderParameters& ShaderParameters)"
  },
  {
    "label": "RecordOrEmitMaterialShaderMapKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordOrEmitMaterialShaderMapKey(FMaterialKeyGeneratorContext& Context, FMaterialShaderMapId& ShaderMapId, FMaterialShaderParameters&& ShaderParameters)"
  },
  {
    "label": "RecordOrEmitMaterialShaderMapKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordOrEmitMaterialShaderMapKey(Context, ShaderMapId, ShaderParameters)"
  },
  {
    "label": "UpdateMaterialShaderCompilingStats()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "UpdateMaterialShaderCompilingStats(const FMaterial* Material)"
  },
  {
    "label": "DumpMaterialStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMaterialStats(EShaderPlatform Platform)"
  },
  {
    "label": "CompiledShaderInitializerType()",
    "kind": "Method",
    "detail": "Function (class FMaterialShaderType : public FShaderType { public : struct CompiledShaderInitializerType : FGlobalShaderType::CompiledShaderInitializerType { const FUniformExpressionSet& UniformExpressionSet ; const FString DebugDescription ;)",
    "insertText": "CompiledShaderInitializerType(const FShaderType* InType, int32 InPermutationId, const FShaderCompilerOutput& CompilerOutput, const FUniformExpressionSet& InUniformExpressionSet, const FSHAHash& InMaterialShaderMapHash, const FShaderPipelineType* InShaderPipeline, const FVertexFactoryType* InVertexFactoryType, const FString& InDebugDescription ) : FGlobalShaderType::CompiledShaderInitializerType( InType, nullptr, InPermutationId, CompilerOutput, InMaterialShaderMapHash, InShaderPipeline, InVertexFactoryType ) , UniformExpressionSet(InUniformExpressionSet) , DebugDescription(InDebugDescription)"
  },
  {
    "label": "FMaterialShaderType()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FMaterialShaderType(FTypeLayoutDesc& InTypeLayout, const TCHAR* InName, const TCHAR* InSourceFilename, const TCHAR* InFunctionName, uint32 InFrequency, int32 InTotalPermutationCount, ConstructSerializedType InConstructSerializedRef, ConstructCompiledType InConstructCompiledRef, ShouldCompilePermutationType InShouldCompilePermutationRef, ShouldPrecachePermutationType InShouldPrecachePermutationRef, GetRayTracingPayloadTypeType InGetRayTracingPayloadTypeRef, GetShaderBindingLayoutType InGetShaderBindingLayoutTypeRef, #if WITH_EDITOR ModifyCompilationEnvironmentType InModifyCompilationEnvironmentRef, ValidateCompiledResultType InValidateCompiledResultRef, #endif uint32 InTypeSize, const FShaderParametersMetadata* InRootParametersMetadata = nullptr ): FShaderType(EShaderTypeForDynamicCast::Material, InTypeLayout, InName, InSourceFilename, InFunctionName, InFrequency, InTotalPermutationCount, InConstructSerializedRef, InConstructCompiledRef, InShouldCompilePermutationRef, InShouldPrecachePermutationRef, InGetRayTracingPayloadTypeRef, InGetShaderBindingLayoutTypeRef, #if WITH_EDITOR InModifyCompilationEnvironmentRef, InValidateCompiledResultRef, #endif InTypeSize, InRootParametersMetadata)"
  },
  {
    "label": "BeginCompileShader()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "BeginCompileShader(EShaderCompileJobPriority Priority, uint32 ShaderMapJobId, int32 PermutationId, const FMaterial* Material, const FMaterialShaderMapId& ShaderMapId, FSharedShaderCompilerEnvironment* MaterialEnvironment, EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, TArray<TRefCountPtr<FShaderCommonCompileJob>>& NewJobs, const FString& DebugGroupName, const TCHAR* DebugDescription, const TCHAR* DebugExtension)"
  },
  {
    "label": "BeginCompileShaderPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCompileShaderPipeline(EShaderCompileJobPriority Priority, uint32 ShaderMapJobId, EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, const FMaterial* Material, const FMaterialShaderMapId& ShaderMapId, FSharedShaderCompilerEnvironment* MaterialEnvironment, const FShaderPipelineType* ShaderPipeline, TArray<TRefCountPtr<FShaderCommonCompileJob>>& NewJobs, const FString& DebugGroupName, const TCHAR* DebugDescription, const TCHAR* DebugExtension)"
  },
  {
    "label": "FinishCompileShader()",
    "kind": "Method",
    "detail": "Function (FShader*)",
    "insertText": "FinishCompileShader(const FUniformExpressionSet& UniformExpressionSet, const FSHAHash& MaterialShaderMapHash, const FShaderCompileJob& CurrentJob, const FShaderPipelineType* ShaderPipeline, const FString& InDebugDescription)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ShouldCompilePermutation(EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, int32 PermutationId, EShaderPermutationFlags Flags)"
  },
  {
    "label": "ShouldCompilePipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePipeline(const FShaderPipelineType* ShaderPipelineType, EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, EShaderPermutationFlags Flags)"
  },
  {
    "label": "SetupCompileEnvironment()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetupCompileEnvironment(EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, int32 PermutationId, EShaderPermutationFlags Flags, FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "FMaterialShaderTypes()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FMaterialShaderTypes { const FShaderPipelineType* PipelineType ; const FShaderType* ShaderType [ SF_NumFrequencies ] ; int32 PermutationId [ SF_NumFrequencies ] ;)",
    "insertText": "FMaterialShaderTypes() : PipelineType(nullptr)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ShaderType)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(PermutationId)"
  },
  {
    "label": "AddShaderType()",
    "kind": "Method",
    "detail": "Function (} const FShaderType*)",
    "insertText": "AddShaderType(const FShaderType* InType, int32 InPermutationId = 0)"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (const EShaderFrequency Frequency = InType ->)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "AddShaderType()",
    "kind": "Method",
    "detail": "Function (ShaderType [ Frequency ] = InType ; PermutationId [ Frequency ] = InPermutationId ; return InType ; } template<ShaderType> const FShaderType*)",
    "insertText": "AddShaderType(int32 InPermutationId = 0)"
  },
  {
    "label": "FMaterialShaders()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMaterialShaders { const FShaderMapBase* ShaderMap ; FShaderPipeline* Pipeline ; FShader* Shaders [ SF_NumFrequencies ] ;)",
    "insertText": "FMaterialShaders() : ShaderMap(nullptr), Pipeline(nullptr)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Shaders)"
  },
  {
    "label": "TryGetPipeline()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetPipeline(FShaderPipelineRef& OutPipeline)"
  },
  {
    "label": "FShaderPipelineRef()",
    "kind": "Method",
    "detail": "Function (OutPipeline =)",
    "insertText": "FShaderPipelineRef(Pipeline, *ShaderMap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FShader* Shader = Shaders [ InFrequency ] ;)",
    "insertText": "if(Shader)"
  },
  {
    "label": "ShaderType()",
    "kind": "Method",
    "detail": "Function (OutShader = TShaderRef<)",
    "insertText": "ShaderType(static_cast<ShaderType*>(Shader), *ShaderMap)"
  },
  {
    "label": "TryGetPixelShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetPixelShader(TShaderRef<ShaderType>& OutShader)"
  },
  {
    "label": "TryGetGeometryShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetGeometryShader(TShaderRef<ShaderType>& OutShader)"
  },
  {
    "label": "TryGetMeshShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetMeshShader(TShaderRef<ShaderType>& OutShader)"
  },
  {
    "label": "TryGetComputeShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetComputeShader(TShaderRef<ShaderType>& OutShader)"
  },
  {
    "label": "TryGetWorkGraphShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetWorkGraphShader(TShaderRef<ShaderType>& OutShader)"
  },
  {
    "label": "TryGetVertexShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetVertexShader(TShaderRef<ShaderType>* OutShader)"
  },
  {
    "label": "TryGetPixelShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetPixelShader(TShaderRef<ShaderType>* OutShader)"
  },
  {
    "label": "TryGetGeometryShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetGeometryShader(TShaderRef<ShaderType>* OutShader)"
  },
  {
    "label": "TryGetMeshShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetMeshShader(TShaderRef<ShaderType>* OutShader)"
  },
  {
    "label": "TryGetComputeShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetComputeShader(TShaderRef<ShaderType>* OutShader)"
  },
  {
    "label": "TryGetWorkGraphShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> bool)",
    "insertText": "TryGetWorkGraphShader(TShaderRef<ShaderType>* OutShader)"
  }
]