[
  {
    "label": "ISocketSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketSubsystem"
  },
  {
    "label": "CalculateChecksum()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # ifndef PLATFORM_SUPPORTS_ICMP # if PLATFORM_WINDOWS # define PLATFORM_SUPPORTS_ICMP 1 # define PLATFORM_USES_POSIX_ICMP 0 # define PING_ALLOWS_CUSTOM_THREAD_SIZE 1 # elif PLATFORM_MAC # define PLATFORM_SUPPORTS_ICMP 1 # define PLATFORM_USES_POSIX_ICMP 1 # define PING_ALLOWS_CUSTOM_THREAD_SIZE 0 # elif PLATFORM_UNIX # define PLATFORM_SUPPORTS_ICMP 1 # define PLATFORM_USES_POSIX_ICMP 1 # define PING_ALLOWS_CUSTOM_THREAD_SIZE 0 # elif PLATFORM_ANDROID # define PLATFORM_SUPPORTS_ICMP 1 # define PLATFORM_USES_POSIX_ICMP 1 # define PING_ALLOWS_CUSTOM_THREAD_SIZE 0 # elif PLATFORM_IOS # define PLATFORM_SUPPORTS_ICMP 1 # define PLATFORM_USES_POSIX_ICMP 1 # define PING_ALLOWS_CUSTOM_THREAD_SIZE 1 # else # define PLATFORM_SUPPORTS_ICMP 0 # define PLATFORM_USES_POSIX_ICMP 0 # define PING_ALLOWS_CUSTOM_THREAD_SIZE 0 # endif # endif class ISocketSubsystem ; int)",
    "insertText": "CalculateChecksum(uint8* Address, int Length)"
  },
  {
    "label": "ResolveIp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveIp(ISocketSubsystem* SocketSub, const FString& HostName, FString& OutIp)"
  }
]