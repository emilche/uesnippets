[
  {
    "label": "FManagedArrayCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TIsWeightedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsWeightedType"
  },
  {
    "label": "FCollectionPropertyConstFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionPropertyConstFacade"
  },
  {
    "label": "FCollectionPropertyFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionPropertyFacade"
  },
  {
    "label": "FCollectionPropertyMutableFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionPropertyMutableFacade"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "F"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / NameTypes . h \" # include \" Containers / Map . h \" # include \" Math / Vector . h \" struct FManagedArrayCollection ; namespace Chaos::Softs { enum class ECollectionPropertyFlags : uint8 { None = 0,Enabled = 1<<0,Animatable = 1<<1,Legacy = 1<<2,Interpolable = 1<<3,Intrinsic = 1<<4,StringDirty = 1<<6,Dirty = 1<<7 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECollectionPropertyFlags)"
  },
  {
    "label": "FCollectionPropertyConstFacade()",
    "kind": "Method",
    "detail": "Function (bool Value = false ; } ; template<> struct TIsWeightedType<bool> { bool Value = true ; } ; template<> struct TIsWeightedType<int32> { bool Value = true ; } ; template<> struct TIsWeightedType<float> { bool Value = true ; } ; template<> struct TIsWeightedType<FVector3f> { bool Value = true ; } ; class FCollectionPropertyConstFacade { public :)",
    "insertText": "FCollectionPropertyConstFacade(const TSharedPtr<const FManagedArrayCollection>& InManagedArrayCollection)"
  },
  {
    "label": "FCollectionPropertyConstFacade()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCollectionPropertyConstFacade()"
  },
  {
    "label": "FCollectionPropertyConstFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionPropertyConstFacade(const FCollectionPropertyConstFacade&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollectionPropertyConstFacade&)",
    "insertText": "operator(const FCollectionPropertyConstFacade&)"
  },
  {
    "label": "FCollectionPropertyConstFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionPropertyConstFacade(FCollectionPropertyConstFacade&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollectionPropertyConstFacade&)",
    "insertText": "operator(FCollectionPropertyConstFacade&&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetKeyIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetKeyIndex(const FString& Key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* const Index = KeyIndices .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> T GetLowValue(int32 KeyIndex)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> T GetHighValue(int32 KeyIndex)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> TPair<T, T> GetWeightedValue(int32 KeyIndex)"
  },
  {
    "label": "GetWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetWeightedFloatValue(int32 KeyIndex)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> T GetValue(int32 KeyIndex)"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetStringValue(int32 KeyIndex)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} ECollectionPropertyFlags)",
    "insertText": "GetFlags(int32 KeyIndex)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled(int32 KeyIndex)"
  },
  {
    "label": "IsAnimatable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnimatable(int32 KeyIndex)"
  },
  {
    "label": "IsLegacy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLegacy(int32 KeyIndex)"
  },
  {
    "label": "IsIntrinsic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIntrinsic(int32 KeyIndex)"
  },
  {
    "label": "IsStringDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStringDirty(int32 KeyIndex)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirty(int32 KeyIndex)"
  },
  {
    "label": "IsInterpolable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInterpolable(int32 KeyIndex)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> T GetLowValue(const FString& Key, const T& Default = T(0), int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> T GetHighValue(const FString& Key, const T& Default = T(0), int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> TPair<T, T> GetWeightedValue(const FString& Key, const T& Default = T(0), int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "GetWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetWeightedFloatValue(const FString& Key, const float& Default = 0.f, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "GetWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetWeightedFloatValue(const FString& Key, const FVector2f& Default, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> T GetValue(const FString& Key, const T& Default = T(0), int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetStringValue(const FString& Key, const FString& Default = \"\", int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} ECollectionPropertyFlags)",
    "insertText": "GetFlags(const FString& Key, uint8 Default = 0, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled(const FString& Key, bool bDefault = false, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "IsAnimatable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnimatable(const FString& Key, bool bDefault = false, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "IsLegacy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLegacy(const FString& Key, bool bDefault = false, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "IsIntrinsic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIntrinsic(const FString& Key, bool bDefault = false, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "IsStringDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStringDirty(const FString& Key, bool bDefault = false, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirty(const FString& Key, bool bDefault = false, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "IsInterpolable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInterpolable(const FString& Key, bool bDefault = false, int32* OutKeyIndex = nullptr)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (}::uint32)",
    "insertText": "GetTypeHash(const Chaos::Softs::FCollectionPropertyConstFacade& PropertyFacade)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ;)",
    "insertText": "if(PropertyFacade.IsValid())"
  },
  {
    "label": "GetArrayHash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "GetArrayHash(PropertyFacade.KeyArray.GetData(), PropertyFacade.KeyArray.Num(), Hash)"
  },
  {
    "label": "GetArrayHash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "GetArrayHash(PropertyFacade.LowValueArray.GetData(), PropertyFacade.LowValueArray.Num(), Hash)"
  },
  {
    "label": "GetArrayHash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "GetArrayHash(PropertyFacade.HighValueArray.GetData(), PropertyFacade.HighValueArray.Num(), Hash)"
  },
  {
    "label": "GetArrayHash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "GetArrayHash(PropertyFacade.StringValueArray.GetData(), PropertyFacade.StringValueArray.Num(), Hash)"
  },
  {
    "label": "GetArrayHash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "GetArrayHash(PropertyFacade.FlagsArray.GetData(), PropertyFacade.FlagsArray.Num(), Hash)"
  },
  {
    "label": "FCollectionPropertyConstFacade()",
    "kind": "Method",
    "detail": "Function (} return Hash ; } protected :)",
    "insertText": "FCollectionPropertyConstFacade(const TSharedPtr<const FManagedArrayCollection>& InManagedArrayCollection, ENoInit)"
  },
  {
    "label": "UpdateArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateArrays()"
  },
  {
    "label": "RebuildKeyIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildKeyIndices()"
  },
  {
    "label": "SafeGet()",
    "kind": "Method",
    "detail": "Function (template<CallableType,ReturnType> ReturnType)",
    "insertText": "SafeGet(const FString& Key, CallableType&& Callable, ReturnType Default, int32* OutKeyIndex)"
  },
  {
    "label": "GetKeyIndex()",
    "kind": "Method",
    "detail": "Function (const int32 KeyIndex =)",
    "insertText": "GetKeyIndex(Key)"
  },
  {
    "label": "Callable()",
    "kind": "Method",
    "detail": "Function (* OutKeyIndex = KeyIndex ; } return KeyIndex ! = INDEX_NONE ?)",
    "insertText": "Callable(KeyIndex)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<T,ElementType> T)",
    "insertText": "GetValue(int32 KeyIndex, const TConstArrayView<ElementType>& ValueArray)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (template<T> TConstArrayView<T>)",
    "insertText": "GetArray(const FName& Name)"
  },
  {
    "label": "HasAnyFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyFlags(int32 KeyIndex, ECollectionPropertyFlags Flags)"
  },
  {
    "label": "FCollectionPropertyFacade()",
    "kind": "Method",
    "detail": "Function (} const FName PropertyGroup ; const FName KeyName ; const FName LowValueName ; const FName HighValueName ; const FName StringValueName ; const FName FlagsName ; TConstArrayView<FString> KeyArray ; TConstArrayView<FVector3f> LowValueArray ; TConstArrayView<FVector3f> HighValueArray ; TConstArrayView<FString> StringValueArray ; TConstArrayView<uint8> FlagsArray ; TMap<FString,int32> KeyIndices ; TSharedPtr<const FManagedArrayCollection> ManagedArrayCollection ; } ; class FCollectionPropertyFacade : public FCollectionPropertyConstFacade { public :)",
    "insertText": "FCollectionPropertyFacade(const TSharedPtr<FManagedArrayCollection>& InManagedArrayCollection)"
  },
  {
    "label": "FCollectionPropertyFacade()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCollectionPropertyFacade()"
  },
  {
    "label": "FCollectionPropertyFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionPropertyFacade(const FCollectionPropertyFacade&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollectionPropertyFacade&)",
    "insertText": "operator(const FCollectionPropertyFacade&)"
  },
  {
    "label": "FCollectionPropertyFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionPropertyFacade(FCollectionPropertyFacade&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollectionPropertyFacade&)",
    "insertText": "operator(FCollectionPropertyFacade&&)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> void SetLowValue(int32 KeyIndex, const T& Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(KeyIndex, GetLowValueArray(), FVector3f(Value))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> void SetHighValue(int32 KeyIndex, const T& Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(KeyIndex, GetHighValueArray(), FVector3f(Value))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> void SetWeightedValue(int32 KeyIndex, const T& LowValue, const T& HighValue)"
  },
  {
    "label": "SetLowValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowValue(KeyIndex, LowValue)"
  },
  {
    "label": "SetHighValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighValue(KeyIndex, HighValue)"
  },
  {
    "label": "SetWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWeightedFloatValue(int32 KeyIndex, const FVector2f& Value)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (SetLowValue<)",
    "insertText": "float(KeyIndex, Value.X)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (SetHighValue<)",
    "insertText": "float(KeyIndex, Value.Y)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> void SetValue(int32 KeyIndex, const T& Value)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeightedValue(KeyIndex, Value, Value)"
  },
  {
    "label": "SetStringValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStringValue(int32 KeyIndex, const FString& Value)"
  },
  {
    "label": "GetStringValueArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStringValueArray()"
  },
  {
    "label": "SetStringDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringDirty(KeyIndex)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetFlags(int32 KeyIndex, ECollectionPropertyFlags Flags)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(int32 KeyIndex, bool bEnabled)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(KeyIndex, ECollectionPropertyFlags::Enabled, bEnabled)"
  },
  {
    "label": "SetAnimatable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAnimatable(int32 KeyIndex, bool bAnimatable)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(KeyIndex, ECollectionPropertyFlags::Animatable, bAnimatable)"
  },
  {
    "label": "SetLegacy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLegacy(int32 KeyIndex, bool bLegacy)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(KeyIndex, ECollectionPropertyFlags::Legacy, bLegacy)"
  },
  {
    "label": "SetIntrinsic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIntrinsic(int32 KeyIndex)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(KeyIndex, ECollectionPropertyFlags::Intrinsic, true)"
  },
  {
    "label": "SetDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDirty(int32 KeyIndex)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(KeyIndex, ECollectionPropertyFlags::Dirty, true)"
  },
  {
    "label": "SetStringDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStringDirty(int32 KeyIndex)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(KeyIndex, ECollectionPropertyFlags::StringDirty, true)"
  },
  {
    "label": "SetInterpolable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInterpolable(int32 KeyIndex)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(KeyIndex, ECollectionPropertyFlags::Interpolable, true)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> int32 SetLowValue(const FString& Key, const T& Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> int32 SetHighValue(const FString& Key, const T& Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> int32 SetWeightedValue(const FString& Key, const T& LowValue, const T& HighValue)"
  },
  {
    "label": "SetWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetWeightedFloatValue(const FString& Key, const FVector2f& Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> int32 SetValue(const FString& Key, const T& Value)"
  },
  {
    "label": "SetStringValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetStringValue(const FString& Key, const FString& Value)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetFlags(const FString& Key, ECollectionPropertyFlags Flags)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetEnabled(const FString& Key, bool bEnabled)"
  },
  {
    "label": "SetAnimatable()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetAnimatable(const FString& Key, bool bAnimatable)"
  },
  {
    "label": "SetLegacy()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetLegacy(const FString& Key, bool bLegacy)"
  },
  {
    "label": "SetIntrinsic()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetIntrinsic(const FString& Key)"
  },
  {
    "label": "SetDirty()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetDirty(const FString& Key)"
  },
  {
    "label": "SetStringDirty()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetStringDirty(const FString& Key)"
  },
  {
    "label": "SetInterpolable()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetInterpolable(const FString& Key)"
  },
  {
    "label": "ClearDirtyFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearDirtyFlags()"
  },
  {
    "label": "UpdateProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProperties(const TSharedPtr<const FManagedArrayCollection>& InManagedArrayCollection)"
  },
  {
    "label": "FCollectionPropertyFacade()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FCollectionPropertyFacade(const TSharedPtr<FManagedArrayCollection>& InManagedArrayCollection, ENoInit)"
  },
  {
    "label": "GetManagedArrayCollection()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FManagedArrayCollection>)",
    "insertText": "GetManagedArrayCollection()"
  },
  {
    "label": "GetKeyArray()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<FString>&)",
    "insertText": "GetKeyArray()"
  },
  {
    "label": "GetLowValueArray()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<FVector3f>&)",
    "insertText": "GetLowValueArray()"
  },
  {
    "label": "GetHighValueArray()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<FVector3f>&)",
    "insertText": "GetHighValueArray()"
  },
  {
    "label": "GetFlagsArray()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<ECollectionPropertyFlags>&)",
    "insertText": "GetFlagsArray()"
  },
  {
    "label": "SafeSet()",
    "kind": "Method",
    "detail": "Function (} private : template<CallableType> int32)",
    "insertText": "SafeSet(const FString& Key, CallableType&& Callable)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} return KeyIndex ; } template<T> void)",
    "insertText": "SetValue(int32 KeyIndex, const TArrayView<T>& ValueArray, const T& Value)"
  },
  {
    "label": "EnableFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlags(int32 KeyIndex, ECollectionPropertyFlags Flags, bool bEnable)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ECollectionPropertyUpdateFlags : uint8 { None = 0,AppendNewProperties = 1<<0,UpdateExistingProperties = 1<<1,RemoveMissingProperties = 1<<2,DisableMissingProperties = 1<<3 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECollectionPropertyUpdateFlags)"
  },
  {
    "label": "FCollectionPropertyMutableFacade()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FCollectionPropertyMutableFacade(const TSharedPtr<FManagedArrayCollection>& InManagedArrayCollection)"
  },
  {
    "label": "FCollectionPropertyMutableFacade()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCollectionPropertyMutableFacade()"
  },
  {
    "label": "FCollectionPropertyMutableFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionPropertyMutableFacade(const FCollectionPropertyMutableFacade&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollectionPropertyMutableFacade&)",
    "insertText": "operator(const FCollectionPropertyMutableFacade&)"
  },
  {
    "label": "FCollectionPropertyMutableFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionPropertyMutableFacade(FCollectionPropertyMutableFacade&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCollectionPropertyMutableFacade&)",
    "insertText": "operator(FCollectionPropertyMutableFacade&&)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddProperty(const FString& Key, ECollectionPropertyFlags Flags = ECollectionPropertyFlags::Enabled)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddProperty(const FString& Key, bool bEnabled, bool bAnimatable = false, bool bIntrinsic = false)"
  },
  {
    "label": "AddProperties()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddProperties(const TArray<FString>& Keys, ECollectionPropertyFlags Flags = ECollectionPropertyFlags::Enabled)"
  },
  {
    "label": "AddProperties()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddProperties(const TArray<FString>& Keys, bool bEnabled, bool bAnimatable = false, bool bIntrinsic = false)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const TSharedPtr<const FManagedArrayCollection>& InManagedArrayCollection, bool bUpdateExistingProperties)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FManagedArrayCollection& InManagedArrayCollection)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const TSharedPtr<const FManagedArrayCollection>& InManagedArrayCollection, ECollectionPropertyUpdateFlags UpdateFlags)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> inline int32 AddWeightedValue(const FString& Key, const T& LowValue, const T& HighValue, ECollectionPropertyFlags Flags = ECollectionPropertyFlags::Enabled)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> inline int32 AddWeightedValue(const FString& Key, const T& LowValue, const T& HighValue, bool bEnabled, bool bAnimatable = false, bool bIntrinsic = false)"
  },
  {
    "label": "AddWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddWeightedFloatValue(const FString& Key, const FVector2f& Value, ECollectionPropertyFlags Flags = ECollectionPropertyFlags::Enabled)"
  },
  {
    "label": "AddWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddWeightedFloatValue(const FString& Key, const FVector2f& Value, bool bEnabled, bool bAnimatable, bool bIntrinsic = false)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> int32 AddValue(const FString& Key, const T& Value, ECollectionPropertyFlags Flags = ECollectionPropertyFlags::Enabled)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(TIsWeightedType<T>::Value)> int32 AddValue(const FString& Key, const T& Value, bool bEnabled, bool bAnimatable = false)"
  },
  {
    "label": "AddStringValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddStringValue(const FString& Key, const FString& Value, ECollectionPropertyFlags Flags = ECollectionPropertyFlags::Enabled)"
  },
  {
    "label": "AddStringValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddStringValue(const FString& Key, const FString& Value, bool bEnabled, bool bAnimatable = false, bool bIntrinsic = false)"
  },
  {
    "label": "SetDirty()",
    "kind": "Method",
    "detail": "Function (ValueArray [ KeyIndex ] = Value ;)",
    "insertText": "SetDirty(KeyIndex)"
  },
  {
    "label": "UE_REQUIRES_DEFINITION()",
    "kind": "Method",
    "detail": "Function (} } template<T)",
    "insertText": "UE_REQUIRES_DEFINITION(TIsWeightedType<T>::Value)> inline int32 FCollectionPropertyMutableFacade::AddWeightedValue(const FString& Key, const T& LowValue, const T& HighValue, ECollectionPropertyFlags Flags)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (const int32 KeyIndex =)",
    "insertText": "AddProperty(Key, Flags)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeightedValue(KeyIndex, LowValue, HighValue)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (const int32 KeyIndex =)",
    "insertText": "AddProperty(Key, bEnabled, bAnimatable, bIntrinsic)"
  },
  {
    "label": "Enabled()",
    "kind": "Method",
    "detail": "Function (\\ bool Is # # PropertyName # #)",
    "insertText": "Enabled(const FCollectionPropertyConstFacade& InPropertyCollection, bool bDefault)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (\\ return InPropertyCollection .)",
    "insertText": "IsEnabled(PropertyName##Name.ToString(), bDefault)"
  },
  {
    "label": "Animatable()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool Is # # PropertyName # #)",
    "insertText": "Animatable(const FCollectionPropertyConstFacade& InPropertyCollection, bool bDefault)"
  },
  {
    "label": "IsAnimatable()",
    "kind": "Method",
    "detail": "Function (\\ return InPropertyCollection .)",
    "insertText": "IsAnimatable(PropertyName##Name.ToString(), bDefault)"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ Type GetLow # #)",
    "insertText": "PropertyName(const FCollectionPropertyConstFacade& InPropertyCollection, const Type& Default)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (\\ return InPropertyCollection . GetLowValue<)",
    "insertText": "Type(PropertyName##Name.ToString(), Default)"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ FVector2f GetWeightedFloat # #)",
    "insertText": "PropertyName(const FCollectionPropertyConstFacade& InPropertyCollection, const float& Default)"
  },
  {
    "label": "GetWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (\\ return InPropertyCollection .)",
    "insertText": "GetWeightedFloatValue(PropertyName##Name.ToString(), Default)"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ FVector2f GetWeightedFloat # #)",
    "insertText": "PropertyName(const FCollectionPropertyConstFacade& InPropertyCollection, const FVector2f& Default)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (\\ } \\ FString Get # # PropertyName # #)",
    "insertText": "String(const FCollectionPropertyConstFacade& InPropertyCollection, const FString& Default)"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (\\ return InPropertyCollection .)",
    "insertText": "GetStringValue(PropertyName##Name.ToString(), Default)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(PropertyName, Type) \\ UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(PropertyName, Type) \\ Type GetLow##PropertyName(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "checkSlow(PropertyName##Index == PropertyCollection.GetKeyIndex(PropertyName##Name.ToString()))"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "checkf(PropertyName##Index != INDEX_NONE, TEXT(\"The default value getter that sets the property index must be called once prior to calling this function.\"))"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyCollection . GetLowValue<)",
    "insertText": "Type(PropertyName##Index)"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ Type GetHigh # #)",
    "insertText": "PropertyName(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "GetWeightedFloatValue()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyCollection .)",
    "insertText": "GetWeightedFloatValue(PropertyName##Index)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (\\ } \\ const FString& Get # # PropertyName # #)",
    "insertText": "String(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyCollection .)",
    "insertText": "GetStringValue(PropertyName##Index)"
  },
  {
    "label": "Enabled()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool Is # # PropertyName # #)",
    "insertText": "Enabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyCollection .)",
    "insertText": "IsEnabled(PropertyName##Index)"
  },
  {
    "label": "Animatable()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool Is # # PropertyName # #)",
    "insertText": "Animatable(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "IsAnimatable()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyCollection .)",
    "insertText": "IsAnimatable(PropertyName##Index)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool Is # # PropertyName # #)",
    "insertText": "Dirty(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyCollection .)",
    "insertText": "IsDirty(PropertyName##Index)"
  },
  {
    "label": "StringDirty()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool Is # # PropertyName # #)",
    "insertText": "StringDirty(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "IsStringDirty()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyCollection .)",
    "insertText": "IsStringDirty(PropertyName##Index)"
  },
  {
    "label": "Mutable()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool Is # # PropertyName # #)",
    "insertText": "Mutable(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "IsAnimatable()",
    "kind": "Method",
    "detail": "Function (\\ return PropertyName # # Index ! = INDEX_NONE&& \\ PropertyCollection .)",
    "insertText": "IsAnimatable(PropertyName##Index) && (PropertyCollection.IsDirty(PropertyName##Index))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (\\ } \\ struct F # # PropertyName # # Index \\ { \\ int32 Index = INDEX_NONE ; \\ F # # PropertyName # #)",
    "insertText": "Index(EForceInit) : Index(INDEX_NONE)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} \\ F # # PropertyName # #)",
    "insertText": "Index(const FCollectionPropertyConstFacade& PropertyCollection) : Index(PropertyCollection.GetKeyIndex(PropertyName##Name.ToString()))"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} \\ operator)",
    "insertText": "int32()"
  }
]