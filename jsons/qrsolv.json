[
  {
    "label": "qrsolv()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<Scalar> void)",
    "insertText": "qrsolv(Matrix< Scalar, Dynamic, Dynamic > &s, const VectorXi &ipvt, const Matrix< Scalar, Dynamic, 1 > &diag, const Matrix< Scalar, Dynamic, 1 > &qtb, Matrix< Scalar, Dynamic, 1 > &x, Matrix< Scalar, Dynamic, 1 > &sdiag)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (typedef DenseIndex Index ; Index i,j,k,l ; Scalar temp ; Index n = s .)",
    "insertText": "cols()"
  },
  {
    "label": "wa()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1>)",
    "insertText": "wa(n)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<Scalar> givens ; x = s .)",
    "insertText": "diagonal()"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (wa = qtb ; s .)",
    "insertText": "topLeftCorner(n,n).template triangularView<StrictlyLower>() = s.topLeftCorner(n,n).transpose()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (l = ipvt [ j ] ;)",
    "insertText": "if(diag[l] == 0.)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (sdiag .)",
    "insertText": "tail(n-j).setZero()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (sdiag [ j ] = diag [ l ] ; Scalar qtbpj = 0 . ;)",
    "insertText": "for(k = j; k < n; ++k)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (givens .)",
    "insertText": "makeGivens(-s(k,k), sdiag[k])"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(k,k) = givens.c() * s(k,k) + givens.s()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * wa[k] + givens.s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (qtbpj = - givens .)",
    "insertText": "s() * wa[k] + givens.c()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (wa [ k ] = temp ;)",
    "insertText": "for(i = k+1; i<n; ++i)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * s(i,k) + givens.s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (sdiag [ i ] = - givens .)",
    "insertText": "s() * s(i,k) + givens.c()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(i,k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } Index nsing ;)",
    "insertText": "for(nsing=0; nsing<n && sdiag[nsing]!=0; nsing++)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (} wa .)",
    "insertText": "tail(n-nsing).setZero()"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (s .)",
    "insertText": "topLeftCorner(nsing, nsing).transpose().template triangularView<Upper>().solveInPlace(wa.head(nsing))"
  }
]