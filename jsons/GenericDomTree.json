[
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "DominatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorBase"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "DominatorTreeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeBase"
  },
  {
    "label": "PostDominatorTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PostDominatorTree"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "DomTreeNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DomTreeNodeBase"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "DominatorTreeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeBase"
  },
  {
    "label": "PostDominatorTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PostDominatorTree"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "FuncT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuncT"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "DominatorTreeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeBase"
  },
  {
    "label": "InfoRec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InfoRec"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "FuncT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuncT"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "FT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FT"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "Calculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Calculate(DominatorTreeBase<typename GraphTraits<N>::NodeType> &DT,\n               FuncT &F)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNode(BB)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "dominates(A, B)"
  },
  {
    "label": "dominatedBySlowTreeWalk()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "dominatedBySlowTreeWalk(A, B)"
  },
  {
    "label": "DFSPass()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "DFSPass(DominatorTreeBase<typename GraphT::NodeType> &DT,\n                          typename GraphT::NodeType *V, unsigned N)"
  },
  {
    "label": "Calculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Calculate(DominatorTreeBase<typename GraphTraits<N>::NodeType> &DT, FuncT &F)"
  }
]