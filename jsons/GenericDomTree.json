[
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "DominatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorBase"
  },
  {
    "label": "DominatorTreeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeBase"
  },
  {
    "label": "PostDominatorTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PostDominatorTree"
  },
  {
    "label": "DomTreeNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DomTreeNodeBase"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "FuncT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuncT"
  },
  {
    "label": "InfoRec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InfoRec"
  },
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "FT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FT"
  },
  {
    "label": "DominatorBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_GENERICDOMTREE_H # define LLVM_SUPPORT_GENERICDOMTREE_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / DepthFirstIterator . h \" # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / raw_ostream . h \" # include<algorithm> namespace llvm { template<class NodeT> class DominatorBase { protected : std::vector<NodeT*> Roots ; bool IsPostDominators ;)",
    "insertText": "DominatorBase(bool isPostDom) : Roots(), IsPostDominators(isPostDom)"
  },
  {
    "label": "DominatorBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DominatorBase(DominatorBase &&Arg) : Roots(std::move(Arg.Roots)), IsPostDominators(std::move(Arg.IsPostDominators))"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Arg . Roots .)",
    "insertText": "clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DominatorBase&)",
    "insertText": "operator(DominatorBase &&RHS)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Roots =)",
    "insertText": "move(RHS.Roots)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (IsPostDominators =)",
    "insertText": "move(RHS.IsPostDominators)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "getBlock()",
    "kind": "Method",
    "detail": "Function (} NodeT*)",
    "insertText": "getBlock()"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<DomTreeNodeBase<NodeT>>)",
    "insertText": "addChild(std::unique_ptr<DomTreeNodeBase<NodeT>> C)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "push_back(C.get())"
  },
  {
    "label": "clearAllChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearAllChildren()"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "compare(const DomTreeNodeBase<NodeT> *Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SmallPtrSet<const NodeT*,4> OtherChildren ;)",
    "insertText": "for(const_iterator I = Other->begin(), E = Other->end(); I != E; ++I)"
  },
  {
    "label": "Nd()",
    "kind": "Method",
    "detail": "Function (const NodeT*)",
    "insertText": "Nd(*I)->getBlock()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (OtherChildren .)",
    "insertText": "insert(Nd)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const_iterator I = begin(), E = end(); I != E; ++I)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (const NodeT*)",
    "insertText": "N(*I)->getBlock()"
  },
  {
    "label": "setIDom()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "setIDom(DomTreeNodeBase<NodeT> *NewIDom)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IDom && \"No immediate dominator?\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::vector<DomTreeNodeBase<NodeT>*>::iterator I =)",
    "insertText": "find(IDom->Children.begin(), IDom->Children.end(), this)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != IDom->Children.end() && \"Not in immediate dominator children set!\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (IDom -> Children .)",
    "insertText": "erase(I)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (IDom = NewIDom ; IDom -> Children .)",
    "insertText": "push_back(this)"
  },
  {
    "label": "getDFSNumIn()",
    "kind": "Method",
    "detail": "Function (} } unsigned)",
    "insertText": "getDFSNumIn()"
  },
  {
    "label": "indent()",
    "kind": "Method",
    "detail": "Function (o .)",
    "insertText": "indent(2 * Lev)"
  },
  {
    "label": "Calculate()",
    "kind": "Method",
    "detail": "Function (} template<class FuncT,class N> void)",
    "insertText": "Calculate(DominatorTreeBase<typename GraphTraits<N>::NodeType> &DT, FuncT &F)"
  },
  {
    "label": "DominatorTreeBase()",
    "kind": "Method",
    "detail": "Function (template<class NodeT> class DominatorTreeBase : public DominatorBase<NodeT> {)",
    "insertText": "DominatorTreeBase(const DominatorTreeBase &)"
  },
  {
    "label": "dominatedBySlowTreeWalk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dominatedBySlowTreeWalk(const DomTreeNodeBase<NodeT> *A, const DomTreeNodeBase<NodeT> *B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(A != B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReachableFromEntry(B))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReachableFromEntry(A))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const DomTreeNodeBase<NodeT>* IDom ;)",
    "insertText": "while((IDom = B->getIDom()) != nullptr && IDom != A && IDom != B)"
  },
  {
    "label": "InfoRec()",
    "kind": "Method",
    "detail": "Function (RootNode = nullptr ; } protected : typedef DenseMap<NodeT*,std::unique_ptr<DomTreeNodeBase<NodeT>>> DomTreeNodeMapType ; DomTreeNodeMapType DomTreeNodes ; DomTreeNodeBase<NodeT>* RootNode ; bool DFSInfoValid ; unsigned int SlowQueries ; struct InfoRec { unsigned DFSNum ; unsigned Parent ; unsigned Semi ; NodeT* Label ;)",
    "insertText": "InfoRec() : DFSNum(0), Parent(0), Semi(0), Label(nullptr)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} } ; DenseMap<NodeT*,NodeT*> IDoms ; std::vector<NodeT*> Vertex ; DenseMap<NodeT*,InfoRec> Info ; void)",
    "insertText": "reset()"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (RootNode = nullptr ; DFSInfoValid = false ; SlowQueries = 0 ; } template<class N,class GraphT> void)",
    "insertText": "Split(DominatorTreeBase<typename GraphT::NodeType> &DT, typename GraphT::NodeType *NewBB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(std::distance(GraphT::child_begin(NewBB), GraphT::child_end(NewBB)) == 1 && \"NewBB should have a single successor!\")"
  },
  {
    "label": "child_begin()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* NewBBSucc =*)",
    "insertText": "child_begin(NewBB)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<GraphT::NodeType*> PredBlocks ; typedef GraphTraits<Inverse<N>> InvTraits ;)",
    "insertText": "for(typename InvTraits::ChildIteratorType PI = InvTraits::child_begin(NewBB), PE = InvTraits::child_end(NewBB); PI != PE; ++PI) PredBlocks.push_back(*PI)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!PredBlocks.empty() && \"No predblocks?\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool NewBBDominatesNewBBSucc = true ;)",
    "insertText": "for(typename InvTraits::ChildIteratorType PI = InvTraits::child_begin(NewBBSucc), E = InvTraits::child_end(NewBBSucc); PI != E; ++PI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InvTraits::NodeType* ND =* PI ;)",
    "insertText": "if(ND != NewBB && !DT.dominates(NewBBSucc, ND) && DT.isReachableFromEntry(ND))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NewBBDominatesNewBBSucc = false ; break ; } } NodeT* NewBBIDom = nullptr ; unsigned i = 0 ;)",
    "insertText": "for(i = 0; i < PredBlocks.size(); ++i) if (DT.isReachableFromEntry(PredBlocks[i]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewBBIDom = PredBlocks [ i ] ; break ; })",
    "insertText": "if(!NewBBIDom)"
  },
  {
    "label": "addNewBlock()",
    "kind": "Method",
    "detail": "Function (} DomTreeNodeBase<NodeT>* NewBBNode = DT .)",
    "insertText": "addNewBlock(NewBB, NewBBIDom)"
  },
  {
    "label": "changeImmediateDominator()",
    "kind": "Method",
    "detail": "Function (DT .)",
    "insertText": "changeImmediateDominator(NewBBSuccNode, NewBBNode)"
  },
  {
    "label": "DominatorTreeBase()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "DominatorTreeBase(bool isPostDom) : DominatorBase<NodeT>(isPostDom), DFSInfoValid(false), SlowQueries(0)"
  },
  {
    "label": "DominatorTreeBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DominatorTreeBase(DominatorTreeBase &&Arg) : DominatorBase<NodeT>( std::move(static_cast<DominatorBase<NodeT> &>(Arg))), DomTreeNodes(std::move(Arg.DomTreeNodes)), RootNode(std::move(Arg.RootNode)), DFSInfoValid(std::move(Arg.DFSInfoValid)), SlowQueries(std::move(Arg.SlowQueries)), IDoms(std::move(Arg.IDoms)), Vertex(std::move(Arg.Vertex)), Info(std::move(Arg.Info))"
  },
  {
    "label": "wipe()",
    "kind": "Method",
    "detail": "Function (Arg .)",
    "insertText": "wipe()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DominatorTreeBase&)",
    "insertText": "operator(DominatorTreeBase &&RHS)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (RootNode =)",
    "insertText": "move(RHS.RootNode)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (DFSInfoValid =)",
    "insertText": "move(RHS.DFSInfoValid)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (SlowQueries =)",
    "insertText": "move(RHS.SlowQueries)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (IDoms =)",
    "insertText": "move(RHS.IDoms)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Vertex =)",
    "insertText": "move(RHS.Vertex)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Info =)",
    "insertText": "move(RHS.Info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const DomTreeNodeMapType& OtherDomTreeNodes = Other . DomTreeNodes ;)",
    "insertText": "if(DomTreeNodes.size() != OtherDomTreeNodes.size())"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (NodeT* BB = I -> first ; DomTreeNodeMapType::const_iterator OI = OtherDomTreeNodes .)",
    "insertText": "find(BB)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} DomTreeNodeBase<NodeT>*)",
    "insertText": "getNode(NodeT *BB)"
  },
  {
    "label": "getRootNode()",
    "kind": "Method",
    "detail": "Function (} DomTreeNodeBase<NodeT>*)",
    "insertText": "getRootNode()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (const DomTreeNodeBase<NodeT>* RN =)",
    "insertText": "getNode(R)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SmallVector<const DomTreeNodeBase<NodeT>*,8> WL ; WL .)",
    "insertText": "push_back(RN)"
  },
  {
    "label": "pop_back_val()",
    "kind": "Method",
    "detail": "Function (const DomTreeNodeBase<NodeT>* N = WL .)",
    "insertText": "pop_back_val()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "push_back(N->getBlock())"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (WL .)",
    "insertText": "append(N->begin(), N->end())"
  },
  {
    "label": "properlyDominates()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "properlyDominates(const DomTreeNodeBase<NodeT> *A, const DomTreeNodeBase<NodeT> *B)"
  },
  {
    "label": "properlyDominates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "properlyDominates(const NodeT *A, const NodeT *B)"
  },
  {
    "label": "isReachableFromEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isReachableFromEntry(const NodeT *A)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!this->isPostDominator() && \"This is not implemented for post dominators\")"
  },
  {
    "label": "isReachableFromEntry()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isReachableFromEntry(const DomTreeNodeBase<NodeT> *A)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (# ifdef XDEBUG)",
    "insertText": "assert((!DFSInfoValid || (dominatedBySlowTreeWalk(A, B) == B->DominatedBy(A))) && \"Tree walk disagrees with dfs numbers!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(DFSInfoValid) return B->DominatedBy(A)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SlowQueries + + ;)",
    "insertText": "if(SlowQueries > 32)"
  },
  {
    "label": "updateDFSNumbers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateDFSNumbers()"
  },
  {
    "label": "dominatedBySlowTreeWalk()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "dominatedBySlowTreeWalk(A, B)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "dominates(const NodeT *A, const NodeT *B)"
  },
  {
    "label": "getRoot()",
    "kind": "Method",
    "detail": "Function (NodeT*)",
    "insertText": "getRoot()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->Roots.size() == 1 && \"Should always have entry node!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(A->getParent() == B->getParent() && \"Two blocks are not in same function\")"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (NodeT& Entry = A ->)",
    "insertText": "getParent()->front()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(dominates(B, A))"
  },
  {
    "label": "getIDom()",
    "kind": "Method",
    "detail": "Function (IDomA = IDomA ->)",
    "insertText": "getIDom()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } SmallPtrSet<DomTreeNodeBase<NodeT>*,1 6> NodeADoms ; NodeADoms .)",
    "insertText": "insert(NodeA)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (NodeADoms .)",
    "insertText": "insert(IDomA)"
  },
  {
    "label": "findNearestCommonDominator()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } const NodeT*)",
    "insertText": "findNearestCommonDominator(const NodeT *A, const NodeT *B)"
  },
  {
    "label": "addNewBlock()",
    "kind": "Method",
    "detail": "Function (} DomTreeNodeBase<NodeT>*)",
    "insertText": "addNewBlock(NodeT *BB, NodeT *DomBB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getNode(BB) == nullptr && \"Block already in dominator tree!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IDomNode && \"Not immediate dominator specified for block!\")"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (DFSInfoValid = false ;)",
    "insertText": "return(DomTreeNodes[BB] = IDomNode->addChild( llvm::make_unique<DomTreeNodeBase<NodeT>>(BB, IDomNode))).get()"
  },
  {
    "label": "changeImmediateDominator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "changeImmediateDominator(DomTreeNodeBase<NodeT> *N, DomTreeNodeBase<NodeT> *NewIDom)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N && NewIDom && \"Cannot change null node pointers!\")"
  },
  {
    "label": "setIDom()",
    "kind": "Method",
    "detail": "Function (DFSInfoValid = false ; N ->)",
    "insertText": "setIDom(NewIDom)"
  },
  {
    "label": "changeImmediateDominator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "changeImmediateDominator(NodeT *BB, NodeT *NewBB)"
  },
  {
    "label": "changeImmediateDominator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "changeImmediateDominator(getNode(BB), getNode(NewBB))"
  },
  {
    "label": "eraseNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "eraseNode(NodeT *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node && \"Removing node that isn't in dominator tree.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node->getChildren().empty() && \"Node is not a leaf node.\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::vector<DomTreeNodeBase<NodeT>*>::iterator I =)",
    "insertText": "find(IDom->Children.begin(), IDom->Children.end(), Node)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} DomTreeNodes .)",
    "insertText": "erase(BB)"
  },
  {
    "label": "splitBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "splitBlock(NodeT *NewBB)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &o)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (o<<\" = = = = = = = = = = = = = = = = = = = = = = = = = = = = = - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \\ n \" ;)",
    "insertText": "if(this->isPostDominator())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (o<<\" \\ n \" ;)",
    "insertText": "if(getRootNode()) PrintDomTree<NodeT>(getRootNode(), o, 1)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (} protected : template<class GraphT> GraphT::NodeType*)",
    "insertText": "Eval(DominatorTreeBase<typename GraphT::NodeType> &DT, typename GraphT::NodeType *V, unsigned LastLinked)"
  },
  {
    "label": "DFSPass()",
    "kind": "Method",
    "detail": "Function (template<class GraphT> unsigned)",
    "insertText": "DFSPass(DominatorTreeBase<typename GraphT::NodeType> &DT, typename GraphT::NodeType *V, unsigned N)"
  },
  {
    "label": "getIDom()",
    "kind": "Method",
    "detail": "Function (NodeT* IDom =)",
    "insertText": "getIDom(BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IDom || this->DomTreeNodes[nullptr])"
  },
  {
    "label": "getIDom()",
    "kind": "Method",
    "detail": "Function (} NodeT*)",
    "insertText": "getIDom(NodeT *BB)"
  },
  {
    "label": "addRoot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addRoot(NodeT *BB)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this -> Roots .)",
    "insertText": "push_back(BB)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (WorkStack .)",
    "insertText": "push_back(std::make_pair(ThisRoot, ThisRoot->begin()))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ThisRoot -> DFSNumIn = DFSNum + + ;)",
    "insertText": "while(!WorkStack.empty())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (const DomTreeNodeBase<NodeT>* Node = WorkStack .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (Node -> DFSNumOut = DFSNum + + ; WorkStack .)",
    "insertText": "pop_back()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (WorkStack .)",
    "insertText": "push_back(std::make_pair(Child, Child->begin()))"
  },
  {
    "label": "recalculate()",
    "kind": "Method",
    "detail": "Function (Child -> DFSNumIn = DFSNum + + ; } } SlowQueries = 0 ; DFSInfoValid = true ; } template<class FT> void)",
    "insertText": "recalculate(FT &F)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this -> Vertex .)",
    "insertText": "push_back(nullptr)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (NodeT* entry =)",
    "insertText": "getEntryNode(&F)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this -> Roots .)",
    "insertText": "push_back(entry)"
  },
  {
    "label": "NodeT()",
    "kind": "Method",
    "detail": "Function (this -> IDoms [ entry ] = nullptr ; this -> DomTreeNodes [ entry ] = nullptr ; Calculate<FT,)",
    "insertText": "NodeT(*this, F)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(typename TraitsTy::nodes_iterator I = TraitsTy::nodes_begin(&F), E = TraitsTy::nodes_end(&F); I != E; ++I)"
  }
]