[
  {
    "label": "FAllocationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationContext"
  },
  {
    "label": "FSubspace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubspace"
  },
  {
    "label": "FContextImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextImpl"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (struct FAllocationContext ; class FSubspace final { public : FSubspace*)",
    "insertText": "Create(size_t MinAlign = 1, size_t ReservationSize = 0, size_t ReservationAlignment = 1)"
  },
  {
    "label": "GetBase()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "GetBase()"
  },
  {
    "label": "TryAllocate()",
    "kind": "Method",
    "detail": "Function (} private : struct FAllocationContext ; struct FContextImpl ; std::byte*)",
    "insertText": "TryAllocate(size_t Size)"
  },
  {
    "label": "TryAllocate()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "TryAllocate(size_t Size, size_t Alignment)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "Allocate(size_t Size)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "Allocate(size_t Size, size_t Alignment)"
  },
  {
    "label": "FSubspace()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSubspace()"
  },
  {
    "label": "FSubspace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubspace(const FSubspace&)"
  }
]