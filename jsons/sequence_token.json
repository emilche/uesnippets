[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedSetSequenceTokenForCurrentThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedSetSequenceTokenForCurrentThread"
  },
  {
    "label": "SequenceToken()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SEQUENCE_TOKEN_H_ # define BASE_SEQUENCE_TOKEN_H_ # include \" base / base_export . h \" namespace base { class BASE_EXPORT SequenceToken { public :)",
    "insertText": "SequenceToken()"
  },
  {
    "label": "SequenceToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceToken(const SequenceToken& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceToken&)",
    "insertText": "operator(const SequenceToken& other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ToInternalValue()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ToInternalValue()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (SequenceToken)",
    "insertText": "Create()"
  },
  {
    "label": "GetForCurrentThread()",
    "kind": "Method",
    "detail": "Function (SequenceToken)",
    "insertText": "GetForCurrentThread()"
  },
  {
    "label": "SequenceToken()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "SequenceToken(int token) : token_(token)"
  },
  {
    "label": "TaskToken()",
    "kind": "Method",
    "detail": "Function (} int kInvalidSequenceToken = - 1 ; int token_ = kInvalidSequenceToken ; } ; class BASE_EXPORT TaskToken { public :)",
    "insertText": "TaskToken()"
  },
  {
    "label": "TaskToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskToken(const TaskToken& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskToken&)",
    "insertText": "operator(const TaskToken& other)"
  },
  {
    "label": "TaskToken()",
    "kind": "Method",
    "detail": "Function (private : class ScopedSetSequenceTokenForCurrentThread ;)",
    "insertText": "TaskToken(int token) : token_(token)"
  },
  {
    "label": "ScopedSetSequenceTokenForCurrentThread()",
    "kind": "Method",
    "detail": "Function (int kInvalidTaskToken = - 1 ; int token_ = kInvalidTaskToken ; } ; class BASE_EXPORT ScopedSetSequenceTokenForCurrentThread { public :)",
    "insertText": "ScopedSetSequenceTokenForCurrentThread(const SequenceToken& sequence_token)"
  },
  {
    "label": "ScopedSetSequenceTokenForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSetSequenceTokenForCurrentThread(const ScopedSetSequenceTokenForCurrentThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSetSequenceTokenForCurrentThread&)",
    "insertText": "operator(const ScopedSetSequenceTokenForCurrentThread&)"
  },
  {
    "label": "ScopedSetSequenceTokenForCurrentThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSetSequenceTokenForCurrentThread()"
  }
]