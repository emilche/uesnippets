[
  {
    "label": "FManifoldPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManifoldPoint"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FPBDCollisionSolverJacobi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionSolverJacobi"
  },
  {
    "label": "FSolverVec3SOA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverVec3SOA"
  },
  {
    "label": "FSolverRealSOA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverRealSOA"
  },
  {
    "label": "FPBDCollisionSolverJacobiManifoldPoints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionSolverJacobiManifoldPoints"
  },
  {
    "label": "FState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FState"
  },
  {
    "label": "FPBDCollisionSolverJacobiHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionSolverJacobiHelper"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Collision / ContactPoint . h \" # include \" Chaos / Defines . h \" # include \" Chaos / Evolution / SolverBody . h \" # include \" Chaos / Framework / UncheckedArray . h \" namespace Chaos { class FManifoldPoint ; class FPBDCollisionConstraint ; namespace Private { class FPBDCollisionSolverJacobi ; } namespace CVars { bool bChaos_PBDCollisionSolver_Velocity_FrictionEnabled ; float Chaos_PBDCollisionSolver_Position_StaticFrictionStiffness ; float Chaos_PBDCollisionSolver_JacobiStiffness ; float Chaos_PBDCollisionSolver_JacobiPositionTolerance ; float Chaos_PBDCollisionSolver_JacobiRotationTolerance ; } namespace Private { class FSolverVec3SOA { AlignedFloat4 VX ; AlignedFloat4 VY ; AlignedFloat4 VZ ; } ; class FSolverRealSOA { AlignedFloat4 V ; } ; class FPBDCollisionSolverJacobiManifoldPoints { public : const int32 MaxManifoldPoints = 4 ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "NumManifoldPoints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumManifoldPoints()"
  },
  {
    "label": "AddManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddManifoldPoint()"
  },
  {
    "label": "SetWorldContact()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorldContact(const int32 ManifoldPointIndex, const FSolverVec3& InRelativeContactPosition0, const FSolverVec3& InRelativeContactPosition1, const FSolverVec3& InWorldContactNormal, const FSolverVec3& InWorldContactTangentU, const FSolverVec3& InWorldContactTangentV, const FSolverReal InWorldContactDeltaNormal, const FSolverReal InWorldContactDeltaTangentU, const FSolverReal InWorldContactDeltaTangentV, const FSolverReal InWorldContactVelocityTargetNormal)"
  },
  {
    "label": "InitContact()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] . RelativeContactPosition0 = InRelativeContactPosition0 ; ManifoldPoints [ ManifoldPointIndex ] . RelativeContactPosition1 = InRelativeContactPosition1 ; ManifoldPoints [ ManifoldPointIndex ] . ContactNormal = InWorldContactNormal ; ManifoldPoints [ ManifoldPointIndex ] . ContactTangentU = InWorldContactTangentU ; ManifoldPoints [ ManifoldPointIndex ] . ContactTangentV = InWorldContactTangentV ; ManifoldPoints [ ManifoldPointIndex ] . ContactDeltaNormal = InWorldContactDeltaNormal ; ManifoldPoints [ ManifoldPointIndex ] . ContactDeltaTangentU = InWorldContactDeltaTangentU ; ManifoldPoints [ ManifoldPointIndex ] . ContactDeltaTangentV = InWorldContactDeltaTangentV ; ManifoldPoints [ ManifoldPointIndex ] . ContactTargetVelocityNormal = InWorldContactVelocityTargetNormal ; } void)",
    "insertText": "InitContact(const int32 ManifoldPointIndex, const FConstraintSolverBody& Body0, const FConstraintSolverBody& Body1)"
  },
  {
    "label": "FSolverReal()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] . NetPushOutNormal =)",
    "insertText": "FSolverReal(0)"
  },
  {
    "label": "UpdateMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMass(ManifoldPointIndex, Body0, Body1)"
  },
  {
    "label": "UpdateMass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateMass(const int32 ManifoldPointIndex, const FConstraintSolverBody& Body0, const FConstraintSolverBody& Body1)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 R0xN =)",
    "insertText": "CrossProduct(ManifoldPoints[ManifoldPointIndex].RelativeContactPosition0, ManifoldPoints[ManifoldPointIndex].ContactNormal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 R0xU =)",
    "insertText": "CrossProduct(ManifoldPoints[ManifoldPointIndex].RelativeContactPosition0, ManifoldPoints[ManifoldPointIndex].ContactTangentU)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 R0xV =)",
    "insertText": "CrossProduct(ManifoldPoints[ManifoldPointIndex].RelativeContactPosition0, ManifoldPoints[ManifoldPointIndex].ContactTangentV)"
  },
  {
    "label": "InvI()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33 InvI0 = Body0 .)",
    "insertText": "InvI()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] . ContactNormalAngular0 = InvI0* R0xN ; ManifoldPoints [ ManifoldPointIndex ] . ContactTangentUAngular0 = InvI0* R0xU ; ManifoldPoints [ ManifoldPointIndex ] . ContactTangentVAngular0 = InvI0* R0xV ; ContactMassInvNormal + =)",
    "insertText": "DotProduct(R0xN, ManifoldPoints[ManifoldPointIndex].ContactNormalAngular0) + Body0.InvM()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (ContactMassInvTangentU + =)",
    "insertText": "DotProduct(R0xU, ManifoldPoints[ManifoldPointIndex].ContactTangentUAngular0) + Body0.InvM()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (ContactMassInvTangentV + =)",
    "insertText": "DotProduct(R0xV, ManifoldPoints[ManifoldPointIndex].ContactTangentVAngular0) + Body0.InvM()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Body1.IsDynamic())"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 R1xN =)",
    "insertText": "CrossProduct(ManifoldPoints[ManifoldPointIndex].RelativeContactPosition1, ManifoldPoints[ManifoldPointIndex].ContactNormal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 R1xU =)",
    "insertText": "CrossProduct(ManifoldPoints[ManifoldPointIndex].RelativeContactPosition1, ManifoldPoints[ManifoldPointIndex].ContactTangentU)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 R1xV =)",
    "insertText": "CrossProduct(ManifoldPoints[ManifoldPointIndex].RelativeContactPosition1, ManifoldPoints[ManifoldPointIndex].ContactTangentV)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] . ContactNormalAngular1 = InvI1* R1xN ; ManifoldPoints [ ManifoldPointIndex ] . ContactTangentUAngular1 = InvI1* R1xU ; ManifoldPoints [ ManifoldPointIndex ] . ContactTangentVAngular1 = InvI1* R1xV ; ContactMassInvNormal + =)",
    "insertText": "DotProduct(R1xN, ManifoldPoints[ManifoldPointIndex].ContactNormalAngular1) + Body1.InvM()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (ContactMassInvTangentU + =)",
    "insertText": "DotProduct(R1xU, ManifoldPoints[ManifoldPointIndex].ContactTangentUAngular1) + Body1.InvM()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (ContactMassInvTangentV + =)",
    "insertText": "DotProduct(R1xV, ManifoldPoints[ManifoldPointIndex].ContactTangentVAngular1) + Body1.InvM()"
  },
  {
    "label": "ContactMassNormal()",
    "kind": "Method",
    "detail": "Function (} ManifoldPoints [ ManifoldPointIndex ] .)",
    "insertText": "ContactMassNormal(ContactMassInvNormal > FSolverReal(UE_SMALL_NUMBER)) ? FSolverReal(1) / ContactMassInvNormal : FSolverReal(0)"
  },
  {
    "label": "ContactMassTangentU()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] .)",
    "insertText": "ContactMassTangentU(ContactMassInvTangentU > FSolverReal(UE_SMALL_NUMBER)) ? FSolverReal(1) / ContactMassInvTangentU : FSolverReal(0)"
  },
  {
    "label": "ContactMassTangentV()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] .)",
    "insertText": "ContactMassTangentV(ContactMassInvTangentV > FSolverReal(UE_SMALL_NUMBER)) ? FSolverReal(1) / ContactMassInvTangentV : FSolverReal(0)"
  },
  {
    "label": "UpdateMassNormal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateMassNormal(const int32 ManifoldPointIndex, const FConstraintSolverBody& Body0, const FConstraintSolverBody& Body1)"
  },
  {
    "label": "GetNetPushOut()",
    "kind": "Method",
    "detail": "Function (} FSolverVec3)",
    "insertText": "GetNetPushOut(const int32 ManifoldPointIndex)"
  },
  {
    "label": "DP()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ContactDelta0 = Body0 .)",
    "insertText": "DP() + FSolverVec3::CrossProduct(Body0.DQ(), ManifoldPoints[ManifoldPointIndex].RelativeContactPosition0)"
  },
  {
    "label": "DP()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ContactDelta1 = Body1 .)",
    "insertText": "DP() + FSolverVec3::CrossProduct(Body1.DQ(), ManifoldPoints[ManifoldPointIndex].RelativeContactPosition1)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ContactDelta = ContactDelta0 - ContactDelta1 ; OutContactDeltaNormal = ManifoldPoints [ ManifoldPointIndex ] . ContactDeltaNormal +)",
    "insertText": "DotProduct(ContactDelta, ManifoldPoints[ManifoldPointIndex].ContactNormal)"
  },
  {
    "label": "CalculateContactPositionErrorTangential()",
    "kind": "Method",
    "detail": "Function (OutContactDeltaNormal = - MaxPushOut ; } } void)",
    "insertText": "CalculateContactPositionErrorTangential(const int32 ManifoldPointIndex, const FConstraintSolverBody& Body0, const FConstraintSolverBody& Body1, FSolverReal& OutContactDeltaTangentU, FSolverReal& OutContactDeltaTangentV)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ContactDelta = ContactDelta0 - ContactDelta1 ; OutContactDeltaTangentU = ManifoldPoints [ ManifoldPointIndex ] . ContactDeltaTangentU +)",
    "insertText": "DotProduct(ContactDelta, ManifoldPoints[ManifoldPointIndex].ContactTangentU)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (OutContactDeltaTangentV = ManifoldPoints [ ManifoldPointIndex ] . ContactDeltaTangentV +)",
    "insertText": "DotProduct(ContactDelta, ManifoldPoints[ManifoldPointIndex].ContactTangentV)"
  },
  {
    "label": "CalculatePositionCorrectionNormal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalculatePositionCorrectionNormal(const int32 ManifoldPointIndex, const FSolverReal Stiffness, FSolverReal ContactDeltaNormal, FConstraintSolverBody& Body0, FConstraintSolverBody& Body1, FSolverVec3& InOutDX0, FSolverVec3& InOutDR0, FSolverVec3& InOutDX1, FSolverVec3& InOutDR1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FSolverReal PushOutNormal = - Stiffness* ContactDeltaNormal* ManifoldPoints [ ManifoldPointIndex ] . ContactMassNormal ;)",
    "insertText": "if((ManifoldPoints[ManifoldPointIndex].NetPushOutNormal + PushOutNormal) > FSolverReal(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] . NetPushOutNormal + = PushOutNormal ; } else { PushOutNormal = - ManifoldPoints [ ManifoldPointIndex ] . NetPushOutNormal ; ManifoldPoints [ ManifoldPointIndex ] . NetPushOutNormal = 0 ; })",
    "insertText": "if(Body0.IsDynamic())"
  },
  {
    "label": "InOutDX0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOutDX0(Body0.InvM() * PushOutNormal)"
  },
  {
    "label": "InOutDX1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOutDX1(Body1.InvM() * PushOutNormal)"
  },
  {
    "label": "ApplyFrictionCone()",
    "kind": "Method",
    "detail": "Function (InOutDR1 - = ManifoldPoints [ ManifoldPointIndex ] . ContactNormalAngular1* PushOutNormal ; } } void)",
    "insertText": "ApplyFrictionCone(const int32 ManifoldPointIndex, const FSolverReal StaticFriction, const FSolverReal DynamicFriction, const FSolverReal MaxFrictionPushOut, FSolverReal& InOutPushOutTangentU, FSolverReal& InOutPushOutTangentV)"
  },
  {
    "label": "FSolverReal()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] . StaticFrictionRatio =)",
    "insertText": "FSolverReal(1)"
  },
  {
    "label": "InOutPushOutTangentU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOutPushOutTangentU(ManifoldPoints[ManifoldPointIndex].NetPushOutTangentU - InOutPushOutTangentU)"
  },
  {
    "label": "InOutPushOutTangentV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOutPushOutTangentV(ManifoldPoints[ManifoldPointIndex].NetPushOutTangentV - InOutPushOutTangentV)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (} else { const FSolverReal MaxStaticPushOutTangentSq =)",
    "insertText": "Square(StaticFriction * MaxFrictionPushOut)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (const FSolverReal NetPushOutTangentSq =)",
    "insertText": "Square(ManifoldPoints[ManifoldPointIndex].NetPushOutTangentU) + FMath::Square(ManifoldPoints[ManifoldPointIndex].NetPushOutTangentV)"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (const FSolverReal MaxDynamicPushOutTangent = DynamicFriction* MaxFrictionPushOut ; const FSolverReal FrictionMultiplier = MaxDynamicPushOutTangent*)",
    "insertText": "InvSqrt(NetPushOutTangentSq)"
  },
  {
    "label": "NetPushOutTangentU()",
    "kind": "Method",
    "detail": "Function (const FSolverReal NetPushOutTangentU = FrictionMultiplier* ManifoldPoints [ ManifoldPointIndex ] . NetPushOutTangentU ; const FSolverReal NetPushOutTangentV = FrictionMultiplier* ManifoldPoints [ ManifoldPointIndex ] . NetPushOutTangentV ; InOutPushOutTangentU =)",
    "insertText": "NetPushOutTangentU(ManifoldPoints[ManifoldPointIndex].NetPushOutTangentU - InOutPushOutTangentU)"
  },
  {
    "label": "NetPushOutTangentV()",
    "kind": "Method",
    "detail": "Function (InOutPushOutTangentV =)",
    "insertText": "NetPushOutTangentV(ManifoldPoints[ManifoldPointIndex].NetPushOutTangentV - InOutPushOutTangentV)"
  },
  {
    "label": "SolvePositionNoFriction()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ ManifoldPointIndex ] . NetPushOutTangentU = NetPushOutTangentU ; ManifoldPoints [ ManifoldPointIndex ] . NetPushOutTangentV = NetPushOutTangentV ; ManifoldPoints [ ManifoldPointIndex ] . StaticFrictionRatio = FrictionMultiplier ; } } } void)",
    "insertText": "SolvePositionNoFriction(const FSolverReal Stiffness, const FSolverReal MaxPushOut, FConstraintSolverBody& Body0, FConstraintSolverBody& Body1)"
  },
  {
    "label": "FSolverVec3()",
    "kind": "Method",
    "detail": "Function (FSolverVec3 DX0 =)",
    "insertText": "FSolverVec3(0)"
  },
  {
    "label": "CalculateContactPositionErrorNormal()",
    "kind": "Method",
    "detail": "Function (FSolverReal ContactDeltaNormal ;)",
    "insertText": "CalculateContactPositionErrorNormal(ManifoldPointIndex, Body0.SolverBody(), Body1.SolverBody(), MaxPushOut, ContactDeltaNormal)"
  },
  {
    "label": "bProcessManifoldPoint()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bProcessManifoldPoint(ContactDeltaNormal < FSolverReal(0)) || (ManifoldPoints[ManifoldPointIndex].NetPushOutNormal > FSolverReal(UE_SMALL_NUMBER))"
  },
  {
    "label": "CalculatePositionCorrectionNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePositionCorrectionNormal(ManifoldPointIndex, Stiffness, ContactDeltaNormal, Body0, Body1, DX0, DR0, DX1, DR1)"
  },
  {
    "label": "ApplyPositionDelta()",
    "kind": "Method",
    "detail": "Function (Body0 .)",
    "insertText": "ApplyPositionDelta(DX0)"
  },
  {
    "label": "ApplyRotationDelta()",
    "kind": "Method",
    "detail": "Function (Body0 .)",
    "insertText": "ApplyRotationDelta(DR0)"
  },
  {
    "label": "ApplyPositionDelta()",
    "kind": "Method",
    "detail": "Function (Body1 .)",
    "insertText": "ApplyPositionDelta(DX1)"
  },
  {
    "label": "ApplyRotationDelta()",
    "kind": "Method",
    "detail": "Function (Body1 .)",
    "insertText": "ApplyRotationDelta(DR1)"
  },
  {
    "label": "SolvePositionWithFriction()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "SolvePositionWithFriction(const FSolverReal Stiffness, const FSolverReal Dt, const FSolverReal StaticFriction, const FSolverReal DynamicFriction, const FSolverReal MaxPushOut, FConstraintSolverBody& Body0, FConstraintSolverBody& Body1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TotalPushOutNormal + = ManifoldPoints [ ManifoldPointIndex ] . NetPushOutNormal ; })",
    "insertText": "if((ManifoldPoints[ManifoldPointIndex].NetPushOutNormal != 0) || (ManifoldPoints[ManifoldPointIndex].NetPushOutTangentU != 0) || (ManifoldPoints[ManifoldPointIndex].NetPushOutTangentV != 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bApplyFriction [ ManifoldPointIndex ] = true ; + + NumFrictionContacts ; } })",
    "insertText": "if(NumFrictionContacts > 0)"
  },
  {
    "label": "FSolverReal()",
    "kind": "Method",
    "detail": "Function (const FSolverReal FrictionMaxPushOut = TotalPushOutNormal /)",
    "insertText": "FSolverReal(NumFrictionContacts)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FSolverReal FrictionStiffness = Stiffness* CVars::Chaos_PBDCollisionSolver_Position_StaticFrictionStiffness ;)",
    "insertText": "for(int32 ManifoldPointIndex = 0; ManifoldPointIndex < NumManifoldPoints(); ++ManifoldPointIndex)"
  },
  {
    "label": "CalculateContactPositionErrorTangential()",
    "kind": "Method",
    "detail": "Function (FSolverReal ContactDeltaTangentU,ContactDeltaTangentV ;)",
    "insertText": "CalculateContactPositionErrorTangential(ManifoldPointIndex, Body0.SolverBody(), Body1.SolverBody(), ContactDeltaTangentU, ContactDeltaTangentV)"
  },
  {
    "label": "ApplyFrictionCone()",
    "kind": "Method",
    "detail": "Function (FSolverReal PushOutTangentU = - Stiffness* ManifoldPoints [ ManifoldPointIndex ] . ContactMassTangentU* ContactDeltaTangentU ; FSolverReal PushOutTangentV = - Stiffness* ManifoldPoints [ ManifoldPointIndex ] . ContactMassTangentV* ContactDeltaTangentV ; ManifoldPoints [ ManifoldPointIndex ] . NetPushOutTangentU + = PushOutTangentU ; ManifoldPoints [ ManifoldPointIndex ] . NetPushOutTangentV + = PushOutTangentV ;)",
    "insertText": "ApplyFrictionCone(ManifoldPointIndex, StaticFriction, DynamicFriction, FrictionMaxPushOut, PushOutTangentU, PushOutTangentV)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (DX0 + = Body0 .)",
    "insertText": "InvM()"
  },
  {
    "label": "CalculateContactVelocityErrorNormal()",
    "kind": "Method",
    "detail": "Function (} } return false ; } void)",
    "insertText": "CalculateContactVelocityErrorNormal(const int32 ManifoldPointIndex, const FConstraintSolverBody& Body0, const FConstraintSolverBody& Body1, FSolverReal& OutContactVelocityDeltaNormal)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ContactVelocity0 = Body0 .)",
    "insertText": "V() + FSolverVec3::CrossProduct(Body0.W(), ManifoldPoints[ManifoldPointIndex].RelativeContactPosition0)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ContactVelocity1 = Body1 .)",
    "insertText": "V() + FSolverVec3::CrossProduct(Body1.W(), ManifoldPoints[ManifoldPointIndex].RelativeContactPosition1)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ContactVelocity = ContactVelocity0 - ContactVelocity1 ; const FSolverReal ContactVelocityNormal =)",
    "insertText": "DotProduct(ContactVelocity, ManifoldPoints[ManifoldPointIndex].ContactNormal)"
  },
  {
    "label": "OutContactVelocityDeltaNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutContactVelocityDeltaNormal(ContactVelocityNormal - ManifoldPoints[ManifoldPointIndex].ContactTargetVelocityNormal)"
  },
  {
    "label": "CalculateContactVelocityError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalculateContactVelocityError(const int32 ManifoldPointIndex, const FConstraintSolverBody& Body0, const FConstraintSolverBody& Body1, const FSolverReal DynamicFriction, const FSolverReal Dt, FSolverReal& OutContactVelocityDeltaNormal, FSolverReal& OutContactVelocityDeltaTangent0, FSolverReal& OutContactVelocityDeltaTangent1)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverReal ContactVelocityTangent0 =)",
    "insertText": "DotProduct(ContactVelocity, ManifoldPoints[ManifoldPointIndex].ContactTangentU)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverReal ContactVelocityTangent1 =)",
    "insertText": "DotProduct(ContactVelocity, ManifoldPoints[ManifoldPointIndex].ContactTangentV)"
  },
  {
    "label": "SolveVelocity()",
    "kind": "Method",
    "detail": "Function (OutContactVelocityDeltaTangent0 = ContactVelocityTangent0 ; OutContactVelocityDeltaTangent1 = ContactVelocityTangent1 ; } void)",
    "insertText": "SolveVelocity(const FSolverReal Stiffness, const FSolverReal Dt, const bool bApplyDynamicFriction, FConstraintSolverBody& Body0, FConstraintSolverBody& Body1)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FSolverReal MinImpulseNormal =)",
    "insertText": "Min(FSolverReal(0), -ManifoldPoints[ManifoldPointIndex].NetPushOutNormal / Dt)"
  },
  {
    "label": "CalculateContactVelocityErrorNormal()",
    "kind": "Method",
    "detail": "Function (FSolverReal ContactVelocityDeltaNormal ;)",
    "insertText": "CalculateContactVelocityErrorNormal(ManifoldPointIndex, Body0, Body1, ContactVelocityDeltaNormal)"
  },
  {
    "label": "ImpulseNormal()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "ImpulseNormal(Stiffness * ManifoldPoints[ManifoldPointIndex].ContactMassNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSolverReal NetImpulseNormal = ManifoldPoints [ ManifoldPointIndex ] . NetImpulseNormal + ImpulseNormal ;)",
    "insertText": "if(NetImpulseNormal < MinImpulseNormal)"
  },
  {
    "label": "ApplyVelocityDelta()",
    "kind": "Method",
    "detail": "Function (Body0 .)",
    "insertText": "ApplyVelocityDelta(DV0, DW0)"
  },
  {
    "label": "ApplyVelocityDelta()",
    "kind": "Method",
    "detail": "Function (Body1 .)",
    "insertText": "ApplyVelocityDelta(DV1, DW1)"
  },
  {
    "label": "ShouldSolveVelocity()",
    "kind": "Method",
    "detail": "Function (} } public : class FPBDCollisionSolverJacobi ; bool)",
    "insertText": "ShouldSolveVelocity(const int32 ManifoldPointIndex)"
  },
  {
    "label": "MakeInitialized()",
    "kind": "Method",
    "detail": "Function (} struct FManifoldPoint { FSolverVec3 RelativeContactPosition0 ; FSolverVec3 RelativeContactPosition1 ; FSolverVec3 ContactNormal ; FSolverVec3 ContactTangentU ; FSolverVec3 ContactTangentV ; FSolverReal ContactDeltaNormal ; FSolverReal ContactDeltaTangentU ; FSolverReal ContactDeltaTangentV ; FSolverReal ContactTargetVelocityNormal ; FSolverVec3 ContactNormalAngular0 ; FSolverVec3 ContactTangentUAngular0 ; FSolverVec3 ContactTangentVAngular0 ; FSolverVec3 ContactNormalAngular1 ; FSolverVec3 ContactTangentUAngular1 ; FSolverVec3 ContactTangentVAngular1 ; FSolverReal ContactMassNormal ; FSolverReal ContactMassTangentU ; FSolverReal ContactMassTangentV ; FSolverReal NetPushOutNormal ; FSolverReal NetPushOutTangentU ; FSolverReal NetPushOutTangentV ; FSolverReal NetImpulseNormal ; FSolverReal NetImpulseTangentU ; FSolverReal NetImpulseTangentV ; FSolverReal StaticFrictionRatio ; } ; TCArray<FManifoldPoint,MaxManifoldPoints> ManifoldPoints ; } ; class FPBDCollisionSolverJacobi { public : const int32 MaxConstrainedBodies = 2 ; const int32 MaxPointsPerConstraint = 4 ; FPBDCollisionSolverJacobi)",
    "insertText": "MakeInitialized()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionSolverJacobi Solver ; Solver . State .)",
    "insertText": "Init()"
  },
  {
    "label": "FPBDCollisionSolverJacobi()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDCollisionSolverJacobi()"
  },
  {
    "label": "ResetManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetManifold()"
  },
  {
    "label": "StaticFriction()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "StaticFriction()"
  },
  {
    "label": "SetStiffness()",
    "kind": "Method",
    "detail": "Function (State . StaticFriction = InStaticFriction ; State . DynamicFriction = InDynamicFriction ; State . VelocityFriction = InVelocityFriction ; } void)",
    "insertText": "SetStiffness(const FSolverReal InStiffness)"
  },
  {
    "label": "SetSolverBodies()",
    "kind": "Method",
    "detail": "Function (State . Stiffness = InStiffness ; } void)",
    "insertText": "SetSolverBodies(FSolverBody& SolverBody0, FSolverBody& SolverBody1)"
  },
  {
    "label": "SetSolverBody()",
    "kind": "Method",
    "detail": "Function (State . SolverBodies [ 0 ] .)",
    "insertText": "SetSolverBody(SolverBody0)"
  },
  {
    "label": "SetSolverBody()",
    "kind": "Method",
    "detail": "Function (State . SolverBodies [ 1 ] .)",
    "insertText": "SetSolverBody(SolverBody1)"
  },
  {
    "label": "GetNetImpulse()",
    "kind": "Method",
    "detail": "Function (} FSolverVec3)",
    "insertText": "GetNetImpulse(const int32 ManifoldPointIndex)"
  },
  {
    "label": "GetStaticFrictionRatio()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "GetStaticFrictionRatio(const int32 ManifoldPointIndex)"
  },
  {
    "label": "SetManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetManifoldPoint(const int32 ManifoldPointIndex, const FSolverVec3& InRelativeContactPosition0, const FSolverVec3& InRelativeContactPosition1, const FSolverVec3& InWorldContactNormal, const FSolverVec3& InWorldContactTangentU, const FSolverVec3& InWorldContactTangentV, const FSolverReal InWorldContactDeltaNormal, const FSolverReal InWorldContactDeltaTangentU, const FSolverReal InWorldContactDeltaTangentV, const FSolverReal InWorldContactVelocityTargetNormal)"
  },
  {
    "label": "InitManifoldPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitManifoldPoint(ManifoldPointIndex, InRelativeContactPosition0, InRelativeContactPosition1, InWorldContactNormal, InWorldContactTangentU, InWorldContactTangentV, InWorldContactDeltaNormal, InWorldContactDeltaTangentU, InWorldContactDeltaTangentV, InWorldContactVelocityTargetNormal)"
  },
  {
    "label": "FinalizeManifoldPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeManifoldPoint(ManifoldPointIndex)"
  },
  {
    "label": "InitManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitManifoldPoint(const int32 ManifoldPointIndex, const FSolverVec3& InRelativeContactPosition0, const FSolverVec3& InRelativeContactPosition1, const FSolverVec3& InWorldContactNormal, const FSolverVec3& InWorldContactTangentU, const FSolverVec3& InWorldContactTangentV, const FSolverReal InWorldContactDeltaNormal, const FSolverReal InWorldContactDeltaTangentU, const FSolverReal InWorldContactDeltaTangentV, const FSolverReal InWorldContactVelocityTargetNormal)"
  },
  {
    "label": "SetWorldContact()",
    "kind": "Method",
    "detail": "Function (State . ManifoldPoints .)",
    "insertText": "SetWorldContact(ManifoldPointIndex, InRelativeContactPosition0, InRelativeContactPosition1, InWorldContactNormal, InWorldContactTangentU, InWorldContactTangentV, InWorldContactDeltaNormal, InWorldContactDeltaTangentU, InWorldContactDeltaTangentV, InWorldContactVelocityTargetNormal)"
  },
  {
    "label": "FinalizeManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinalizeManifoldPoint(const int32 ManifoldPointIndex)"
  },
  {
    "label": "InitContact()",
    "kind": "Method",
    "detail": "Function (State . ManifoldPoints .)",
    "insertText": "InitContact(ManifoldPointIndex, State.SolverBodies[0], State.SolverBodies[1])"
  },
  {
    "label": "SolverBody0()",
    "kind": "Method",
    "detail": "Function (} FConstraintSolverBody&)",
    "insertText": "SolverBody0()"
  },
  {
    "label": "EnableVelocityShockPropagation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVelocityShockPropagation()"
  },
  {
    "label": "DisableShockPropagation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableShockPropagation()"
  },
  {
    "label": "SolverBody1()",
    "kind": "Method",
    "detail": "Function (FConstraintSolverBody& Body1 =)",
    "insertText": "SolverBody1()"
  },
  {
    "label": "SolvePositionNoFriction()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Stiffness = CVars::Chaos_PBDCollisionSolver_JacobiStiffness* State . Stiffness ; State . ManifoldPoints .)",
    "insertText": "SolvePositionNoFriction(Stiffness, MaxPushOut, Body0, Body1)"
  },
  {
    "label": "SolvePositionWithFriction()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Stiffness = CVars::Chaos_PBDCollisionSolver_JacobiStiffness* State . Stiffness ; State . ManifoldPoints .)",
    "insertText": "SolvePositionWithFriction(Stiffness, Dt, State.StaticFriction, State.DynamicFriction, MaxPushOut, Body0, Body1)"
  },
  {
    "label": "SolveVelocity()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Stiffness = CVars::Chaos_PBDCollisionSolver_JacobiStiffness* State . Stiffness ; State . ManifoldPoints .)",
    "insertText": "SolveVelocity(Stiffness, Dt, bApplyDynamicFriction, Body0, Body1)"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (struct FState {)",
    "insertText": "FState()"
  },
  {
    "label": "SolvePositionNoFriction()",
    "kind": "Method",
    "detail": "Function (} FSolverReal StaticFriction ; FSolverReal DynamicFriction ; FSolverReal VelocityFriction ; FSolverReal Stiffness ; FConstraintSolverBody SolverBodies [ MaxConstrainedBodies ] ; FPBDCollisionSolverJacobiManifoldPoints ManifoldPoints ; } ; FState State ; } ; class FPBDCollisionSolverJacobiHelper { public : void)",
    "insertText": "SolvePositionNoFriction(const TArrayView<FPBDCollisionSolverJacobi>& CollisionSolvers, const FSolverReal Dt, const FSolverReal MaxPushOut)"
  },
  {
    "label": "SolvePositionWithFriction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolvePositionWithFriction(const TArrayView<FPBDCollisionSolverJacobi>& CollisionSolvers, const FSolverReal Dt, const FSolverReal MaxPushOut)"
  },
  {
    "label": "SolveVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveVelocity(const TArrayView<FPBDCollisionSolverJacobi>& CollisionSolvers, const FSolverReal Dt, const bool bApplyDynamicFriction)"
  },
  {
    "label": "CheckISPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckISPC()"
  }
]