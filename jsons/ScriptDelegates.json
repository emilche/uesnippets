[
  {
    "label": "TScriptDelegateTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScriptDelegateTraits"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "TScriptDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScriptDelegate"
  },
  {
    "label": "TMulticastScriptDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMulticastScriptDelegate"
  },
  {
    "label": "UObjectTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectTemplate"
  },
  {
    "label": "FCallDelegateHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCallDelegateHelper"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "FMulticastDelegateProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMulticastDelegateProperty"
  },
  {
    "label": "FMulticastInlineDelegateProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMulticastInlineDelegateProperty"
  },
  {
    "label": "FMulticastSparseDelegateProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMulticastSparseDelegateProperty"
  },
  {
    "label": "BackwardCompatibilityCheck()",
    "kind": "Method",
    "detail": "Function (using WeakPtrType = FWeakObjectPtr ; using ThreadSafetyMode = FNotThreadSafeDelegateMode ; using UnicastThreadSafetyModeForMulticasts = FNotThreadSafeNotCheckedDelegateMode ; } ; template<From,To> bool)",
    "insertText": "BackwardCompatibilityCheck()"
  },
  {
    "label": "TScriptDelegate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TScriptDelegate(const TScriptDelegate& Other)"
  },
  {
    "label": "GetReadAccessScope()",
    "kind": "Method",
    "detail": "Function (FReadAccessScope OtherReadScope = Other .)",
    "insertText": "GetReadAccessScope()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (Object = Other . Object ; FunctionName = Other . FunctionName ; } template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > TScriptDelegate(const TScriptDelegate<OtherThreadSafetyMode>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Object = Other . Object ; FunctionName = Other . FunctionName ; } TScriptDelegate&)",
    "insertText": "operator(const TScriptDelegate& Other)"
  },
  {
    "label": "GetWriteAccessScope()",
    "kind": "Method",
    "detail": "Function (OtherObject = Other . Object ; OtherFunctionName = Other . FunctionName ; } { FWriteAccessScope WriteScope =)",
    "insertText": "GetWriteAccessScope()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (Object = OtherObject ; FunctionName = OtherFunctionName ; } return* this ; } template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > TScriptDelegate& operator=(const TScriptDelegate<OtherThreadSafetyMode>& Other)"
  },
  {
    "label": "IsBound_Internal()",
    "kind": "Method",
    "detail": "Function (Object = OtherObject ; FunctionName = OtherFunctionName ; } return* this ; } private : template<class UObjectTemplate> bool)",
    "insertText": "IsBound_Internal()"
  },
  {
    "label": "BindUFunction()",
    "kind": "Method",
    "detail": "Function (} } return false ; } public : void)",
    "insertText": "BindUFunction(UObject* InObject, const FName& InFunctionName)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (Object = InObject ; FunctionName = InFunctionName ; } bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "IsBoundToObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBoundToObject(void const* InUserObject)"
  },
  {
    "label": "IsBoundToObjectEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBoundToObjectEvenIfUnreachable(void const* InUserObject)"
  },
  {
    "label": "IsCompactable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompactable()"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unbind()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Object = nullptr ; FunctionName = NAME_None ; } void)",
    "insertText": "Clear()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectTemplate> FString)",
    "insertText": "ToString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"<Unbound>\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TScriptDelegate& D)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<D . Object<<D . FunctionName ; return Ar ; } void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, TScriptDelegate& D)"
  },
  {
    "label": "EnterRecord()",
    "kind": "Method",
    "detail": "Function (FStructuredArchive::FRecord Record = Slot .)",
    "insertText": "EnterRecord()"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (Record<<)",
    "insertText": "SA_VALUE(TEXT(\"Object\"), D.Object) << SA_VALUE(TEXT(\"FunctionName\"),D.FunctionName)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (bResult = Object = = OtherObject&& FunctionName = = OtherFunctionName ; } return bResult ; } template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > FORCEINLINE bool operator==(const TScriptDelegate<OtherThreadSafetyMode>& Other)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > FORCEINLINE bool operator!=(const TScriptDelegate<OtherThreadSafetyMode>& Other)"
  },
  {
    "label": "GetUObject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetUObject()"
  },
  {
    "label": "GetUObjectEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetUObjectEvenIfUnreachable()"
  },
  {
    "label": "GetUObjectRef()",
    "kind": "Method",
    "detail": "Function (} WeakPtrType&)",
    "insertText": "GetUObjectRef()"
  },
  {
    "label": "TScriptDelegate()",
    "kind": "Method",
    "detail": "Function (UObjectTemplate* ObjectPtr ; UFunction* Function ; { FWriteAccessScope WriteScope = const_cast<)",
    "insertText": "TScriptDelegate(this)->GetWriteAccessScope()"
  },
  {
    "label": "UObjectTemplate()",
    "kind": "Method",
    "detail": "Function (ObjectPtr = static_cast<)",
    "insertText": "UObjectTemplate(Object.Get())"
  },
  {
    "label": "FindFunctionChecked()",
    "kind": "Method",
    "detail": "Function (Function = ObjectPtr ->)",
    "insertText": "FindFunctionChecked(FunctionName)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (} ObjectPtr ->)",
    "insertText": "ProcessEvent(Function, Parameters)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(const TScriptDelegate& Delegate)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} template<OtherThreadSafetyMode> TScriptDelegate)",
    "insertText": "CopyFrom(const TScriptDelegate<OtherThreadSafetyMode>& Other)"
  },
  {
    "label": "TMulticastScriptDelegate()",
    "kind": "Method",
    "detail": "Function (TScriptDelegate Copy ; Copy . Object = Other . Object ; Copy . FunctionName = Other . FunctionName ; return Copy ; } protected : WeakPtrType Object ; FName FunctionName ; class FCallDelegateHelper ; struct TIsZeroConstructType<TScriptDelegate> ; } ; template<ThreadSafetyMode> struct TIsZeroConstructType<TScriptDelegate<ThreadSafetyMode>> { bool Value = TIsZeroConstructType<UE::Core::Private::TScriptDelegateTraits<ThreadSafetyMode>::WeakPtrType>::Value&& TIsZeroConstructType<TScriptDelegate<ThreadSafetyMode>::Super>::Value ; } ; template<InThreadSafetyMode> class TMulticastScriptDelegate : public TDelegateAccessHandlerBase<UE::Core::Private::TScriptDelegateTraits<InThreadSafetyMode>::ThreadSafetyMode> { private : using Super = TDelegateAccessHandlerBase<InThreadSafetyMode> ; using Super::FReadAccessScope ; using Super::GetReadAccessScope ; using Super::FWriteAccessScope ; using Super::GetWriteAccessScope ; using UnicastDelegateType = TScriptDelegate<UE::Core::Private::TScriptDelegateTraits<InThreadSafetyMode>::UnicastThreadSafetyModeForMulticasts> ; public : using ThreadSafetyMode = UE::Core::Private::TScriptDelegateTraits<InThreadSafetyMode>::ThreadSafetyMode ; using InvocationListType = TArray<UnicastDelegateType> ;)",
    "insertText": "TMulticastScriptDelegate()"
  },
  {
    "label": "TMulticastScriptDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMulticastScriptDelegate(const TMulticastScriptDelegate& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (LocalCopy = Other . InvocationList ; } InvocationList =)",
    "insertText": "MoveTemp(LocalCopy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMulticastScriptDelegate&)",
    "insertText": "operator(const TMulticastScriptDelegate& Other)"
  },
  {
    "label": "TMulticastScriptDelegate()",
    "kind": "Method",
    "detail": "Function (} return* this ; })",
    "insertText": "TMulticastScriptDelegate(TMulticastScriptDelegate&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (LocalStorage =)",
    "insertText": "MoveTemp(Other.InvocationList)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} InvocationList =)",
    "insertText": "MoveTemp(LocalStorage)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMulticastScriptDelegate&)",
    "insertText": "operator(TMulticastScriptDelegate&& Other)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TScriptDelegate<ThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Object = InDelegate . Object .)",
    "insertText": "Get()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (FunctionName = InDelegate . FunctionName ; } return)",
    "insertText": "Contains(Object, FunctionName)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > bool Contains(const TScriptDelegate<OtherThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const UObject* InObject, FName InFunctionName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const TScriptDelegate<ThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (UnicastDelegateType LocalCopy =)",
    "insertText": "CopyFrom(InDelegate)"
  },
  {
    "label": "CompactInvocationList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactInvocationList()"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(MoveTemp(LocalCopy))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} } template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > void Add(const TScriptDelegate<OtherThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddUnique(const TScriptDelegate<ThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "AddUniqueInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniqueInternal(MoveTemp(LocalCopy))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} } template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > void AddUnique(const TScriptDelegate<OtherThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Remove(const TScriptDelegate<ThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "RemoveInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInternal(LocalCopy)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} } template<OtherThreadSafetyMode)",
    "insertText": "UE_REQUIRES(UE::Core::Private::BackwardCompatibilityCheck<InThreadSafetyMode, OtherThreadSafetyMode>()) > void Remove(const TScriptDelegate<OtherThreadSafetyMode>& InDelegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Remove(const UObject* InObject, FName InFunctionName)"
  },
  {
    "label": "RemoveInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInternal(InObject, InFunctionName)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAll(const UObject* Object)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const UnicastDelegateType& Binding = InvocationList [ BindingIndex ] ;)",
    "insertText": "if(Binding.IsBoundToObject(Object) || Binding.IsCompactable())"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "RemoveAtSwap(BindingIndex)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "Empty()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString AllDelegatesString =)",
    "insertText": "TEXT(\"[\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bAddComma = false ;)",
    "insertText": "for(typename InvocationListType::TConstIterator CurDelegate( InvocationList ); CurDelegate; ++CurDelegate)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (AllDelegatesString + =)",
    "insertText": "TEXT(\", \")"
  },
  {
    "label": "UObjectTemplate()",
    "kind": "Method",
    "detail": "Function (} bAddComma = true ; AllDelegatesString + = CurDelegate -> template ToString<)",
    "insertText": "UObjectTemplate()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} AllDelegatesString + =)",
    "insertText": "TEXT(\"]\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TMulticastScriptDelegate& D)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<D . InvocationList ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef TArray<UnicastDelegateType,TInlineAllocator<4>> FInlineInvocationList ; FInlineInvocationList CompactedList ;)",
    "insertText": "for(const UnicastDelegateType& Delegate : D.InvocationList)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CompactedList .)",
    "insertText": "Add(Delegate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } Ar<<CompactedList ; } return Ar ; } void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, TMulticastScriptDelegate& D)"
  },
  {
    "label": "GetUnderlyingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive& UnderlyingArchive = Slot .)",
    "insertText": "GetUnderlyingArchive()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Slot<<D . InvocationList ;)",
    "insertText": "if(UnderlyingArchive.IsLoading())"
  },
  {
    "label": "ProcessMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (} } template<class UObjectTemplate> void)",
    "insertText": "ProcessMulticastDelegate(void* Parameters)"
  },
  {
    "label": "TMulticastScriptDelegate()",
    "kind": "Method",
    "detail": "Function ({ FReadAccessScope ReadScope = const_cast<)",
    "insertText": "TMulticastScriptDelegate(this)->GetReadAccessScope()"
  },
  {
    "label": "FInlineInvocationList()",
    "kind": "Method",
    "detail": "Function (typedef TArray<UnicastDelegateType,TInlineAllocator<4>> FInlineInvocationList ; FInlineInvocationList InvocationListCopy =)",
    "insertText": "FInlineInvocationList(InvocationList)"
  },
  {
    "label": "UObjectTemplate()",
    "kind": "Method",
    "detail": "Function (FunctionIt -> template ProcessDelegate<)",
    "insertText": "UObjectTemplate(Parameters)"
  },
  {
    "label": "TMulticastScriptDelegate()",
    "kind": "Method",
    "detail": "Function (} } } } { FWriteAccessScope WriteScope = const_cast<)",
    "insertText": "TMulticastScriptDelegate(this)->GetWriteAccessScope()"
  },
  {
    "label": "GetAllObjects()",
    "kind": "Method",
    "detail": "Function (} } TArray<UObject*>)",
    "insertText": "GetAllObjects()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> OutputList ;)",
    "insertText": "for(typename InvocationListType::TIterator CurDelegate( InvocationList ); CurDelegate; ++CurDelegate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutputList .)",
    "insertText": "Add(CurObject)"
  },
  {
    "label": "GetAllObjectsEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (} } return OutputList ; } TArray<UObject*>)",
    "insertText": "GetAllObjectsEvenIfUnreachable()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> Result ;)",
    "insertText": "for(auto* Ref : GetAllObjectRefsEvenIfUnreachable())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(Ref->GetEvenIfUnreachable())"
  },
  {
    "label": "GetAllObjectRefsEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (} return Result ; } TArray<UnicastDelegateType::WeakPtrType*>)",
    "insertText": "GetAllObjectRefsEvenIfUnreachable()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutputList .)",
    "insertText": "Add(&CurObject)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} } return OutputList ; } SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AddInternal(UnicastDelegateType&& InDelegate)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (# if DO_ENSURE const int32 NumFunctions = InvocationList .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} # endif InvocationList .)",
    "insertText": "Add(MoveTemp(InDelegate))"
  },
  {
    "label": "AddUniqueInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUniqueInternal(UnicastDelegateType&& InDelegate)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "AddUnique(MoveTemp(InDelegate))"
  },
  {
    "label": "RemoveInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveInternal(const UnicastDelegateType& InDelegate)"
  },
  {
    "label": "RemoveSingleSwap()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "RemoveSingleSwap(InDelegate)"
  },
  {
    "label": "RemoveInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveInternal(const UObject* InObject, FName InFunctionName)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (int32 FoundDelegate = InvocationList .)",
    "insertText": "IndexOfByPredicate([=](const UnicastDelegateType& Delegate) { return Delegate.GetFunctionName() == InFunctionName && Delegate.IsBoundToObjectEvenIfUnreachable(InObject); })"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "RemoveAtSwap(FoundDelegate, EAllowShrinking::No)"
  },
  {
    "label": "RemoveAllSwap()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "RemoveAllSwap([](const UnicastDelegateType& Delegate){ return Delegate.IsCompactable(); })"
  }
]