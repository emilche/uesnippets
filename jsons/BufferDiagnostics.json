[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCheckedBufferState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckedBufferState"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (FFloat32)",
    "insertText": "F(InValue)"
  },
  {
    "label": "FindDenormalized()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindDenormalized(TArrayView<const float> InBuffer)"
  },
  {
    "label": "ContainsDenormalized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDenormalized(TArrayView<const float> InBuffer)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (FFloat32)",
    "insertText": "F(InValue)"
  },
  {
    "label": "FindInfinity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindInfinity(TArrayView<const float> InBuffer)"
  },
  {
    "label": "ContainsInfinity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsInfinity(TArrayView<const float> InBuffer)"
  },
  {
    "label": "FindNan()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNan(TArrayView<const float> InBuffer)"
  },
  {
    "label": "ContainsNan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsNan(TArrayView<const float> InBuffer)"
  },
  {
    "label": "ToDelimitedString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToDelimitedString(const ECheckBufferFlags InEnum)"
  },
  {
    "label": "CheckBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckBuffer(TArrayView<const float> InBuffer, const ECheckBufferFlags InFlags, ECheckBufferFlags& OutFailedFlags)"
  },
  {
    "label": "FCheckedBufferState()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FCheckedBufferState(const int32 InLine, const TCHAR* InFile, const TCHAR* InName,\n\t\t\tconst ECheckBufferFlags InCheckFlags = ECheckBufferFlags::None,\n\t\t\tconst EBufferCheckBehavior InCheckBehavior = EBufferCheckBehavior::Ensure)"
  },
  {
    "label": "DoCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCheck(TArrayView<const float> InBuffer)"
  }
]