[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCheckedBufferState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckedBufferState"
  },
  {
    "label": "IsDenormalized()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Containers / List . h \" # include \" Containers / UnrealString . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Math / Float32 . h \" # include \" Templates / Function . h \" namespace Audio { bool)",
    "insertText": "IsDenormalized(const float InValue)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (const FFloat32)",
    "insertText": "F(InValue)"
  },
  {
    "label": "ContainsDenormalized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDenormalized(TArrayView<const float> InBuffer)"
  },
  {
    "label": "ContainsInfinity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsInfinity(TArrayView<const float> InBuffer)"
  },
  {
    "label": "FindNan()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNan(TArrayView<const float> InBuffer)"
  },
  {
    "label": "ContainsNan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsNan(TArrayView<const float> InBuffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (enum class ECheckBufferFlags : uint32 { None = 0,Infinity = 1<<1,Nan = 1<<2,Denormalized = 1<<3,All = Infinity | Nan | Denormalized } ; ECheckBufferFlags)",
    "insertText": "operator(const ECheckBufferFlags A, const ECheckBufferFlags B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ECheckBufferFlags&)",
    "insertText": "operator(ECheckBufferFlags& Out, const ECheckBufferFlags Other)"
  },
  {
    "label": "ToDelimitedString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToDelimitedString(const ECheckBufferFlags InEnum)"
  },
  {
    "label": "CheckBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckBuffer(TArrayView<const float> InBuffer, const ECheckBufferFlags InFlags, ECheckBufferFlags& OutFailedFlags)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (enum class EBufferCheckBehavior : uint8 { Nothing,Ensure,Log,Break,} ; struct FCheckedBufferState { FCriticalSection ListCs ; FCheckedBufferState* Head ; void)",
    "insertText": "ForEach(TFunctionRef<void (FCheckedBufferState&)> InCmd)"
  },
  {
    "label": "FCheckedBufferState()",
    "kind": "Method",
    "detail": "Function (FCheckedBufferState* Next = nullptr ; const TCHAR* Name = nullptr ; int32 Line = 0 ; const TCHAR* File = nullptr ; ECheckBufferFlags CheckFlags = ECheckBufferFlags::None ; ECheckBufferFlags FailFlags = ECheckBufferFlags::None ; EBufferCheckBehavior Behavior = EBufferCheckBehavior::Ensure ;)",
    "insertText": "FCheckedBufferState(const int32 InLine, const TCHAR* InFile, const TCHAR* InName, const ECheckBufferFlags InCheckFlags = ECheckBufferFlags::None, const EBufferCheckBehavior InCheckBehavior = EBufferCheckBehavior::Ensure)"
  },
  {
    "label": "DoCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCheck(TArrayView<const float> InBuffer)"
  },
  {
    "label": "FailedBufferCheckImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailedBufferCheckImpl(const TCHAR* InFormat, ...)"
  },
  {
    "label": "WITH_AUDIO_BUFFERDIAGNOSTICS()",
    "kind": "Method",
    "detail": "Function (} ; } # ifndef WITH_AUDIO_BUFFERDIAGNOSTICS # define)",
    "insertText": "WITH_AUDIO_BUFFERDIAGNOSTICS(!UE_BUILD_SHIPPING) #endif #if WITH_AUDIO_BUFFERDIAGNOSTICS #define AUDIO_CHECK_BUFFER(BUFFER)\\ static FCheckedBufferState PREPROCESSOR_JOIN(BufferCheck, __LINE__)(__LINE__,TEXT(__FILE__),TEXT(PREPROCESSOR_TO_STRING(BUFFER)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!PREPROCESSOR_JOIN(BufferCheck, __LINE__).DoCheck(BUFFER))"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_JOIN(BufferCheck, __LINE__).FailedBufferCheckImpl(TEXT(\"\"))"
  },
  {
    "label": "AUDIO_CHECK_BUFFER_NAMED()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "AUDIO_CHECK_BUFFER_NAMED(BUFFER,NAME)\\ static FCheckedBufferState PREPROCESSOR_JOIN(BufferCheck, __LINE__)(__LINE__,TEXT(__FILE__),NAME)"
  },
  {
    "label": "AUDIO_CHECK_BUFFER_NAMED_MSG()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "AUDIO_CHECK_BUFFER_NAMED_MSG(BUFFER,NAME,MSG,...)\\ static FCheckedBufferState PREPROCESSOR_JOIN(BufferCheck, __LINE__)(__LINE__,TEXT(__FILE__),NAME)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_JOIN(BufferCheck, __LINE__).FailedBufferCheckImpl(MSG,__VA_ARGS__)"
  }
]