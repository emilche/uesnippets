[
  {
    "label": "FD3D12CommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContext"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FD3D12DepthStencilView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DepthStencilView"
  },
  {
    "label": "FD3D12ExplicitDescriptorCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ExplicitDescriptorCache"
  },
  {
    "label": "FD3D12RenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RenderTargetView"
  },
  {
    "label": "FD3D12ShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ShaderResourceView"
  },
  {
    "label": "FD3D12UnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UnorderedAccessView"
  },
  {
    "label": "FD3D12DescriptorCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DescriptorCache"
  },
  {
    "label": "FD3D12RootSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RootSignature"
  },
  {
    "label": "FD3D12DefaultViews",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DefaultViews"
  },
  {
    "label": "FD3D12VertexBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12VertexBufferCache"
  },
  {
    "label": "FD3D12IndexBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12IndexBufferCache"
  },
  {
    "label": "FD3D12ConstantBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ConstantBufferCache"
  },
  {
    "label": "FD3D12ShaderResourceViewCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ShaderResourceViewCache"
  },
  {
    "label": "FD3D12UnorderedAccessViewCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12UnorderedAccessViewCache"
  },
  {
    "label": "FD3D12SamplerStateCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12SamplerStateCache"
  },
  {
    "label": "FD3D12StateCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12StateCache"
  },
  {
    "label": "FD3D12SyncPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SyncPoint"
  },
  {
    "label": "FD3D12ConservativeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ConservativeMap"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "FD3D12SamplerArrayDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12SamplerArrayDesc"
  },
  {
    "label": "FD3D12UniqueSamplerTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12UniqueSamplerTable"
  },
  {
    "label": "FD3D12UniqueSamplerTableKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12UniqueSamplerTableKeyFuncs"
  },
  {
    "label": "FD3D12OnlineHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12OnlineHeap"
  },
  {
    "label": "FD3D12GlobalOnlineSamplerHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12GlobalOnlineSamplerHeap"
  },
  {
    "label": "FD3D12SubAllocatedOnlineHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SubAllocatedOnlineHeap"
  },
  {
    "label": "FD3D12LocalOnlineHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12LocalOnlineHeap"
  },
  {
    "label": "FSyncPointEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSyncPointEntry"
  },
  {
    "label": "FPoolEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoolEntry"
  },
  {
    "label": "FD3D12ConservativeMap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Containers / Set . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UnrealTemplate . h \" # include \" D3D12RHICommon . h \" # include \" D3D12Descriptors . h \" class FD3D12CommandContext ; class FD3D12DynamicRHI ; class FD3D12DepthStencilView ; class FD3D12ExplicitDescriptorCache ; class FD3D12RenderTargetView ; class FD3D12ShaderResourceView ; class FD3D12UnorderedAccessView ; class FD3D12DescriptorCache ; class FD3D12RootSignature ; struct FD3D12DefaultViews ; struct FD3D12VertexBufferCache ; struct FD3D12IndexBufferCache ; struct FD3D12ConstantBufferCache ; struct FD3D12ShaderResourceViewCache ; struct FD3D12UnorderedAccessViewCache ; struct FD3D12SamplerStateCache ; class FD3D12StateCache ; class FD3D12SyncPoint ; using FD3D12SyncPointRef = TRefCountPtr<FD3D12SyncPoint> ; template<KeyType,ValueType> class FD3D12ConservativeMap { public :)",
    "insertText": "FD3D12ConservativeMap(uint32 Size)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Table .)",
    "insertText": "AddUninitialized(Size)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const KeyType& Key, const ValueType& Value)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (uint32 Index =)",
    "insertText": "GetIndex(Key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Entry& Pair = Table [ Index ] ; Pair . Valid = true ; Pair . Key = Key ; Pair . Value = Value ; } ValueType*)",
    "insertText": "Find(const KeyType& Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Entry& Pair = Table [ Index ] ;)",
    "insertText": "if(Pair.Valid && (Pair.Key == Key))"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (Table [ i ] . Valid = false ; } } private : uint32)",
    "insertText": "GetIndex(const KeyType& Key)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct Entry { bool Valid ; KeyType Key ; ValueType Value ; } ; TArray<Entry> Table ; } ; struct FD3D12SamplerArrayDesc { uint32 Count ; uint16 SamplerID [ MAX_SAMPLERS ] ; bool)",
    "insertText": "operator(const FD3D12SamplerArrayDesc& rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } } ; uint32)",
    "insertText": "GetTypeHash(const D3D12_SAMPLER_DESC& Desc)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FD3D12SamplerArrayDesc& Key)"
  },
  {
    "label": "FD3D12UniqueSamplerTable()",
    "kind": "Method",
    "detail": "Function (typedef FD3D12ConservativeMap<FD3D12SamplerArrayDesc,D3D12_GPU_DESCRIPTOR_HANDLE> FD3D12SamplerMap ; struct FD3D12UniqueSamplerTable {)",
    "insertText": "FD3D12UniqueSamplerTable()"
  },
  {
    "label": "FD3D12UniqueSamplerTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12UniqueSamplerTable(FD3D12SamplerArrayDesc KeyIn, D3D12_CPU_DESCRIPTOR_HANDLE* Table)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&Key, &KeyIn, sizeof(Key))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(CPUTable, Table, Key.Count * sizeof(D3D12_CPU_DESCRIPTOR_HANDLE))"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} FD3D12SamplerArrayDesc Key { } ; D3D12_CPU_DESCRIPTOR_HANDLE CPUTable [ MAX_SAMPLERS ] { } ; D3D12_GPU_DESCRIPTOR_HANDLE GPUHandle { } ; } ; uint32)",
    "insertText": "GetTypeHash(const FD3D12UniqueSamplerTable& Table)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (struct FD3D12UniqueSamplerTableKeyFuncs : BaseKeyFuncs<FD3D12UniqueSamplerTable,FD3D12UniqueSamplerTable,false> { typedef TCallTraits<FD3D12UniqueSamplerTable>::ParamType KeyInitType ; typedef TCallTraits<FD3D12UniqueSamplerTable>::ParamType ElementInitType ; KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Element)"
  },
  {
    "label": "FD3D12OnlineHeap()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSet<FD3D12UniqueSamplerTable,FD3D12UniqueSamplerTableKeyFuncs> FD3D12SamplerSet ; class FD3D12OnlineHeap : public FD3D12DeviceChild { public :)",
    "insertText": "FD3D12OnlineHeap(FD3D12Device* Device, bool CanLoopAround)"
  },
  {
    "label": "FD3D12OnlineHeap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12OnlineHeap()"
  },
  {
    "label": "GetHeap()",
    "kind": "Method",
    "detail": "Function (ID3D12DescriptorHeap*)",
    "insertText": "GetHeap()"
  },
  {
    "label": "GetCPUSlotHandle()",
    "kind": "Method",
    "detail": "Function (} D3D12_CPU_DESCRIPTOR_HANDLE)",
    "insertText": "GetCPUSlotHandle(uint32 Slot)"
  },
  {
    "label": "GetGPUSlotHandle()",
    "kind": "Method",
    "detail": "Function (} D3D12_GPU_DESCRIPTOR_HANDLE)",
    "insertText": "GetGPUSlotHandle(uint32 Slot)"
  },
  {
    "label": "CanReserveSlots()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanReserveSlots(uint32 NumSlots)"
  },
  {
    "label": "ReserveSlots()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ReserveSlots(uint32 NumSlotsRequested)"
  },
  {
    "label": "SetNextSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextSlot(uint32 NextSlot)"
  },
  {
    "label": "GetNextSlotIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNextSlotIndex()"
  },
  {
    "label": "HeapLoopedAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapLoopedAround()"
  },
  {
    "label": "OpenCommandList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OpenCommandList()"
  },
  {
    "label": "CloseCommandList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CloseCommandList()"
  },
  {
    "label": "GetTotalSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTotalSize()"
  },
  {
    "label": "FD3D12GlobalOnlineSamplerHeap()",
    "kind": "Method",
    "detail": "Function (} protected : TRefCountPtr<FD3D12DescriptorHeap> Heap ; uint32 NextSlotIndex = 0 ; uint32 FirstUsedSlot = 0 ; const bool bCanLoopAround ; } ; class FD3D12GlobalOnlineSamplerHeap : public FD3D12OnlineHeap { public :)",
    "insertText": "FD3D12GlobalOnlineSamplerHeap(FD3D12Device* Device)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 TotalSize)"
  },
  {
    "label": "RollOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RollOver()"
  },
  {
    "label": "ConsolidateUniqueSamplerTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsolidateUniqueSamplerTables(TArrayView<FD3D12UniqueSamplerTable> UniqueTables)"
  },
  {
    "label": "GetUniqueDescriptorTables()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FD3D12SamplerSet>)",
    "insertText": "GetUniqueDescriptorTables()"
  },
  {
    "label": "FD3D12SubAllocatedOnlineHeap()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FD3D12SamplerSet> UniqueDescriptorTables ; FRWLock Mutex ; } ; class FD3D12SubAllocatedOnlineHeap : public FD3D12OnlineHeap { public :)",
    "insertText": "FD3D12SubAllocatedOnlineHeap(FD3D12DescriptorCache& DescriptorCache, FD3D12CommandContext& Context)"
  },
  {
    "label": "FD3D12LocalOnlineHeap()",
    "kind": "Method",
    "detail": "Function (FD3D12OnlineDescriptorBlock* CurrentBlock = nullptr ; FD3D12DescriptorCache& DescriptorCache ; FD3D12CommandContext& Context ; } ; class FD3D12LocalOnlineHeap : public FD3D12OnlineHeap { public :)",
    "insertText": "FD3D12LocalOnlineHeap(FD3D12DescriptorCache& DescriptorCache, FD3D12CommandContext& Context)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 InNumDescriptors, ERHIDescriptorHeapType InHeapType)"
  },
  {
    "label": "RecycleSlots()",
    "kind": "Method",
    "detail": "Function (private : struct FSyncPointEntry { FD3D12SyncPointRef SyncPoint ; uint32 LastSlotInUse = 0 ; } ; TQueue<FSyncPointEntry> SyncPoints ; struct FPoolEntry { TRefCountPtr<FD3D12DescriptorHeap> Heap ; FD3D12SyncPointRef SyncPoint ; } ; FPoolEntry Entry { } ; TQueue<FPoolEntry> ReclaimPool ; FD3D12DescriptorCache& DescriptorCache ; FD3D12CommandContext& Context ; void)",
    "insertText": "RecycleSlots()"
  },
  {
    "label": "FD3D12DescriptorCache()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D12DescriptorCache : public FD3D12DeviceChild,public FD3D12SingleNodeGPUObject { public :)",
    "insertText": "FD3D12DescriptorCache()"
  },
  {
    "label": "FD3D12DescriptorCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12DescriptorCache(FD3D12CommandContext& Context, FRHIGPUMask Node)"
  },
  {
    "label": "GetCurrentViewHeap()",
    "kind": "Method",
    "detail": "Function (FD3D12OnlineHeap*)",
    "insertText": "GetCurrentViewHeap()"
  },
  {
    "label": "SetVertexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexBuffers(FD3D12VertexBufferCache& Cache)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargets(FD3D12RenderTargetView** RenderTargetViewArray, uint32 Count, FD3D12DepthStencilView* DepthStencilTarget)"
  },
  {
    "label": "BuildUAVTable()",
    "kind": "Method",
    "detail": "Function (D3D12_GPU_DESCRIPTOR_HANDLE)",
    "insertText": "BuildUAVTable(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12UnorderedAccessViewCache& Cache, const UAVSlotMask& SlotsNeededMask, uint32 Count, uint32 &HeapSlot)"
  },
  {
    "label": "BuildSamplerTable()",
    "kind": "Method",
    "detail": "Function (D3D12_GPU_DESCRIPTOR_HANDLE)",
    "insertText": "BuildSamplerTable(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12SamplerStateCache& Cache, const SamplerSlotMask& SlotsNeededMask, uint32 Count, uint32& HeapSlot)"
  },
  {
    "label": "BuildSRVTable()",
    "kind": "Method",
    "detail": "Function (D3D12_GPU_DESCRIPTOR_HANDLE)",
    "insertText": "BuildSRVTable(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12ShaderResourceViewCache& Cache, const SRVSlotMask& SlotsNeededMask, uint32 Count, uint32& HeapSlot)"
  },
  {
    "label": "SetUAVTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAVTable(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12UnorderedAccessViewCache& Cache, uint32 SlotsNeeded, const D3D12_GPU_DESCRIPTOR_HANDLE& BindDescriptor)"
  },
  {
    "label": "SetSamplerTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSamplerTable(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12SamplerStateCache& Cache, uint32 SlotsNeeded, const D3D12_GPU_DESCRIPTOR_HANDLE& BindDescriptor)"
  },
  {
    "label": "SetSRVTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVTable(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12ShaderResourceViewCache& Cache, uint32 SlotsNeeded, const D3D12_GPU_DESCRIPTOR_HANDLE& BindDescriptor)"
  },
  {
    "label": "SetConstantBufferViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstantBufferViews(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12ConstantBufferCache& Cache, CBVSlotMask SlotsNeededMask, uint32 Count, uint32& HeapSlot)"
  },
  {
    "label": "SetRootConstantBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootConstantBuffers(EShaderFrequency ShaderStage, const FD3D12RootSignature* RootSignature, FD3D12ConstantBufferCache& Cache, CBVSlotMask SlotsNeededMask, FD3D12StateCache* StateCache)"
  },
  {
    "label": "PrepareBindlessViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareBindlessViews(EShaderFrequency ShaderStage, TConstArrayView<FD3D12ShaderResourceView*> SRVs, TConstArrayView<FD3D12UnorderedAccessView*> UAVs)"
  },
  {
    "label": "HeapRolledOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeapRolledOver(ERHIDescriptorHeapType InHeapType)"
  },
  {
    "label": "HeapLoopedAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapLoopedAround(ERHIDescriptorHeapType InHeapType)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 InNumLocalViewDescriptors, uint32 InNumSamplerDescriptors)"
  },
  {
    "label": "SwitchToContextLocalViewHeap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwitchToContextLocalViewHeap()"
  },
  {
    "label": "SwitchToContextLocalSamplerHeap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwitchToContextLocalSamplerHeap()"
  },
  {
    "label": "SwitchToGlobalSamplerHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchToGlobalSamplerHeap()"
  },
  {
    "label": "SwitchToNewBindlessResourceHeap()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING bool)",
    "insertText": "SwitchToNewBindlessResourceHeap(FD3D12DescriptorHeap* InHeap)"
  },
  {
    "label": "SetExplicitDescriptorCache()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetExplicitDescriptorCache(FD3D12ExplicitDescriptorCache& ExplicitDescriptorCache)"
  },
  {
    "label": "UnsetExplicitDescriptorCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetExplicitDescriptorCache()"
  },
  {
    "label": "UsingGlobalSamplerHeap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingGlobalSamplerHeap()"
  },
  {
    "label": "SetDescriptorHeaps()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetDescriptorHeaps(bool bForceHeapChanged = false)"
  },
  {
    "label": "SetBindlessResourcesHeapDirectly()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING void)",
    "insertText": "SetBindlessResourcesHeapDirectly(FD3D12DescriptorHeap* InHeap)"
  },
  {
    "label": "SetBindlessSamplersHeapDirectly()",
    "kind": "Method",
    "detail": "Function (BindlessResourcesHeap = InHeap ; } void)",
    "insertText": "SetBindlessSamplersHeapDirectly(FD3D12DescriptorHeap* InHeap)"
  },
  {
    "label": "GetBindlessResourcesHeap()",
    "kind": "Method",
    "detail": "Function (BindlessSamplersHeap = InHeap ; } FD3D12DescriptorHeap*)",
    "insertText": "GetBindlessResourcesHeap()"
  }
]