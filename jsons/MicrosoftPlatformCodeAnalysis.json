[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if)",
    "insertText": "defined(_PREFAST_ ) || defined( PVS_STUDIO ) || defined(__clang_analyzer__) #define USING_CODE_ANALYSIS 1 #else #define USING_CODE_ANALYSIS 0 #endif #if USING_CODE_ANALYSIS #if !defined(__clang_analyzer__) #define CA_IN __in #define CA_OUT __out #define CA_READ_ONLY [Pre(Access=Read)] #define CA_WRITE_ONLY [Pre(Access=Write)] #define CA_VALID_POINTER [Pre(Null=No,Valid=Yes)] #define CA_CHECK_RETVAL [returnvalue:Post(MustCheck=Yes)] #define CA_NO_RETURN __declspec(noreturn) #define CA_SUPPRESS( WarningNumber ) __pragma( warning( suppress: WarningNumber ) ) #if defined( PVS_STUDIO ) __declspec(dllimport, noreturn) void CA_AssumeNoReturn()"
  },
  {
    "label": "CA_ASSUME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CA_ASSUME(Expr ) (__builtin_expect(!bool(Expr), 0) ? CA_AssumeNoReturn() : (void)0) #else #define CA_ASSUME( Expr ) __analysis_assume( !!( Expr ) ) #endif #define CA_CONSTANT_IF(Condition) __pragma(warning(push)) __pragma(warning(disable:6326)) if (Condition) __pragma(warning(pop)) #pragma warning(disable : 6255) #pragma warning(disable : 6102) #pragma warning(disable : 6320) #pragma warning(disable : 6326) #pragma warning(disable : 6240) #pragma warning(disable : 6393) #else __declspec(dllimport, noreturn) void CA_AssumeNoReturn()"
  }
]