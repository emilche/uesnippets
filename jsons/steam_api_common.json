[
  {
    "label": "CCallbackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCallbackBase"
  },
  {
    "label": "CCallbackMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCallbackMgr"
  },
  {
    "label": "CCallbackImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCallbackImpl"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "P",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P"
  },
  {
    "label": "CCallResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCallResult"
  },
  {
    "label": "CCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCallback"
  },
  {
    "label": "CCallbackManual",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCallbackManual"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAM_API_COMMON_H # define STEAM_API_COMMON_H # include \" steamtypes . h \" # include \" steamclientpublic . h \" # if)",
    "insertText": "defined(_WIN32 ) && !defined( _X360 ) #if defined( STEAM_API_EXPORTS ) #define S_API extern \"C\" __declspec( dllexport ) #elif defined( STEAM_API_NODLL ) #define S_API extern \"C\" #else #define S_API extern \"C\" __declspec( dllimport ) #endif #elif defined( __GNUC__ ) #if defined( STEAM_API_EXPORTS ) #define S_API extern \"C\" __attribute__ ((visibility(\"default\"))) #else #define S_API extern \"C\" #endif #else #if defined( STEAM_API_EXPORTS ) #define S_API extern \"C\" #else #define S_API extern \"C\" #endif #endif #if ( defined(STEAM_API_EXPORTS) || defined(STEAM_API_NODLL) ) && !defined(API_GEN) #define STEAM_PRIVATE_API( ... ) __VA_ARGS__ #elif defined(STEAM_API_EXPORTS) && defined(API_GEN) #define STEAM_PRIVATE_API( ... ) #else #define STEAM_PRIVATE_API( ...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef int32 HSteamUser ; # ifndef _WIN32 # define __cdecl # endif \" C \" typedef)",
    "insertText": "void(S_CALLTYPE *SteamAPIWarningMessageHook_t )( int, const char *)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (\" C \" typedef)",
    "insertText": "uint32(S_CALLTYPE *SteamAPI_CheckCallbackRegistered_t )( int iCallbackNum)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__SNC__ ) #pragma diag_suppress=1700 #endif S_API void S_CALLTYPE SteamAPI_RunCallbacks()"
  },
  {
    "label": "STEAM_CALLBACK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "STEAM_CALLBACK(thisclass, func, ... ) \\ _STEAM_CALLBACK_SELECT( ( __VA_ARGS__, 4, 3 ), ( , thisclass, func, __VA_ARGS__ ) ) #define STEAM_CALLBACK_MANUAL( thisclass, func, callback_type, var)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "func(callback_type *pParam ) S_API void S_CALLTYPE SteamGameServer_RunCallbacks()"
  },
  {
    "label": "STEAM_GAMESERVER_CALLBACK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "STEAM_GAMESERVER_CALLBACK(thisclass, func, ... ) \\ _STEAM_CALLBACK_SELECT( ( __VA_ARGS__, GS, 3 ), ( this->SetGameserverFlag();, thisclass, func, __VA_ARGS__ ) ) #define STEAM_GAMESERVER_CALLBACK_MANUAL( thisclass, func, callback_type, var)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "func(callback_type *pParam)"
  },
  {
    "label": "CCallbackBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CCallbackBase()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (m_nCallbackFlags = 0 ; m_iCallback = 0 ; } void)",
    "insertText": "Run(void *pvParam)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(void *pvParam, bool bIOFailure, SteamAPICall_t hSteamAPICall)"
  },
  {
    "label": "GetICallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetICallback()"
  },
  {
    "label": "CCallbackBase()",
    "kind": "Method",
    "detail": "Function (protected : enum { k_ECallbackFlagsRegistered = 0 x01,k_ECallbackFlagsGameServer = 0 x02 } ; uint8 m_nCallbackFlags ; int m_iCallback ; class CCallbackMgr ; private :)",
    "insertText": "CCallbackBase(const CCallbackBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CCallbackBase&)",
    "insertText": "operator(const CCallbackBase&)"
  },
  {
    "label": "CCallbackImpl()",
    "kind": "Method",
    "detail": "Function (} ; template<int sizeof_P> class CCallbackImpl : protected CCallbackBase { public : ~)",
    "insertText": "CCallbackImpl()"
  },
  {
    "label": "SetGameserverFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGameserverFlag()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(void *pvParam, bool , SteamAPICall_t)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(pvParam)"
  },
  {
    "label": "GetCallbackSizeBytes()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetCallbackSizeBytes()"
  },
  {
    "label": "CCallResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CCallResult()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(SteamAPICall_t hAPICall, T *p, func_t func)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} SteamAPICall_t m_hAPICall ; T* m_pObj ; func_t m_Func ; } ; template<class T,class P,bool bGameserver = false> class CCallback : public CCallbackImpl<)",
    "insertText": "sizeof(P)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (public : typedef)",
    "insertText": "void(T::*func_t)(P*)"
  },
  {
    "label": "CCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CCallback(T *pObj, func_t func)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(T *pObj, func_t func)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister()"
  },
  {
    "label": "CCallbackManual()",
    "kind": "Method",
    "detail": "Function (T* m_pObj ; func_t m_Func ; } ; template<class T,class P,bool bGameServer = false> class CCallbackManual : public CCallback<T,P,bGameServer> { public :)",
    "insertText": "CCallbackManual() : CCallback< T, P, bGameServer >( nullptr, nullptr)"
  }
]