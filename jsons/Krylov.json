[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "LanczosCG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosCheck . h \" # include \" ChaosLog . h \" # include \" Chaos / Framework / Parallel . h \" # include \" GenericPlatform / GenericPlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Chaos / Vector . h \" namespace Chaos { template<Func,class T> void)",
    "insertText": "LanczosCG(Func multiplyA, TArray<T>& x, const TArray<T>& b, const int max_it, const T res = 1e-4, bool check_residual = false, int min_parallel_batch_size = 1000)"
  },
  {
    "label": "dotProduct()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "dotProduct(const TArray<T>& x, const TArray<T>& y)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T result =)",
    "insertText": "T(0)"
  },
  {
    "label": "min_parallel_batch_size()",
    "kind": "Method",
    "detail": "Function (result + = x [ i ]* y [ i ] ; } return result ; } ; auto AXPY = [)",
    "insertText": "min_parallel_batch_size(TArray<T>& y, T a, const TArray<T>& x)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(x.Num(), [&](const int32 i) { y[i] += a * x[i]; }, x.Num() < min_parallel_batch_size)"
  },
  {
    "label": "min_parallel_batch_size()",
    "kind": "Method",
    "detail": "Function (} ; auto scale = [)",
    "insertText": "min_parallel_batch_size(TArray<T>& y, T a)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(y.Num(), [&](const int32 i) { y[i] *= a; }, y.Num() < min_parallel_batch_size)"
  },
  {
    "label": "min_parallel_batch_size()",
    "kind": "Method",
    "detail": "Function (} ; auto set = [)",
    "insertText": "min_parallel_batch_size(TArray<T>& y, const TArray<T>& x)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(x.Num(), [&](const int32 i) { y[i] = x[i]; }, x.Num() < min_parallel_batch_size)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} ; LanczosCG<)",
    "insertText": "T(multiplyA, dotProduct, AXPY, scale, set, x, b, max_it, res, check_residual)"
  },
  {
    "label": "LanczosCG()",
    "kind": "Method",
    "detail": "Function (} template<class T,Func,int32 d = 3> void)",
    "insertText": "LanczosCG(Func multiplyA, TArray<TVector<T, d>>& x, const TArray<TVector<T, d>>& b, const int max_it, const T res = 1e-4, const TArray<int32>* use_list = nullptr)"
  },
  {
    "label": "use_list()",
    "kind": "Method",
    "detail": "Function (using TV = TVector<T,d> ; auto dot_product = [&)",
    "insertText": "use_list(const TArray<TV>& x, const TArray<TV>& y)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "j(*use_list)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(use_list->Num(), [&](const int32 i) { const int32 j = (*use_list)[i]; for (int32 alpha = 0; alpha < d; alpha++) { y[j][alpha] += a * x[j][alpha]; } }, use_list->Num() < 1000)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PhysicsParallelFor(x.Num(), [&](const int32 i) { for (int32 alpha = 0; alpha < d; alpha++) { y[i][alpha] += a * x[i][alpha]; } }, x.Num() < 1000)"
  },
  {
    "label": "use_list()",
    "kind": "Method",
    "detail": "Function (} } ; auto scale = [&)",
    "insertText": "use_list(TArray<TV>& y, T a)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(use_list->Num(), [&](const int32 i) { const int32 j = (*use_list)[i]; for (int32 alpha = 0; alpha < d; alpha++) { y[j][alpha] = a * y[j][alpha]; } })"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PhysicsParallelFor(y.Num(), [&](const int32 i) { for (size_t alpha = 0; alpha < d; alpha++) { y[i][alpha] = a * y[i][alpha]; } })"
  },
  {
    "label": "use_list()",
    "kind": "Method",
    "detail": "Function (} } ; auto set = [&)",
    "insertText": "use_list(TArray<TV>& y, const TArray<TV>& x)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(use_list->Num(), [&](const int32 i) { const int32 j = (*use_list)[i]; for (size_t alpha = 0; alpha < d; alpha++) { y[j][alpha] = x[j][alpha]; } })"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PhysicsParallelFor(y.Num(), [&](const int32 i) { for (int32 alpha = 0; alpha < d; alpha++) { y[i][alpha] = x[i][alpha]; } })"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} } ; LanczosCG<)",
    "insertText": "T(multiplyA, dot_product, AXPY, scale, set, x, b, max_it, res)"
  },
  {
    "label": "LanczosCG()",
    "kind": "Method",
    "detail": "Function (} template<T,TV,Func1,Func2,Func3,Func4,Func5> void)",
    "insertText": "LanczosCG(Func1 multiplyA, Func2 dotProduct, Func3 AXPY, Func4 scale, Func5 set, TArray<TV>& x, const TArray<TV>& b, const int max_it, const T res = T(1e-4), bool check_residual = false)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TV> v ; v .)",
    "insertText": "SetNum(x.Num())"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (T beta =)",
    "insertText": "Sqrt(T(dotProduct(b, b)))"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scale(q, T(1) / beta)"
  },
  {
    "label": "multiplyA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "multiplyA(v, q)"
  },
  {
    "label": "dotProduct()",
    "kind": "Method",
    "detail": "Function (T alpha =)",
    "insertText": "dotProduct(v, q)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (T d = alpha ; T p = beta / d ;)",
    "insertText": "set(c, q)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(x, c)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scale(x, p)"
  },
  {
    "label": "AXPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AXPY(v, -alpha, q)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (beta =)",
    "insertText": "Sqrt(T(dotProduct(v, v)))"
  },
  {
    "label": "multiplyA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "multiplyA(y, x)"
  },
  {
    "label": "AXPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AXPY(y, T(-1), b)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (residual =)",
    "insertText": "Sqrt(T(dotProduct(y, y)))"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(q, v)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (T d_new = alpha - mu* mu* d ; p = - p* d* mu / d_new ;)",
    "insertText": "scale(c, -mu)"
  },
  {
    "label": "AXPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AXPY(c, T(1), q)"
  },
  {
    "label": "AXPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AXPY(x, p, c)"
  },
  {
    "label": "AXPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AXPY(v, -beta, q_old)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (d = d_new ; })",
    "insertText": "if(check_residual)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogChaos, Verbose, TEXT(\"Lanczos used max iterations (%d).\"), max_it)"
  }
]