[
  {
    "label": "AudioStreamStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioStreamStats"
  },
  {
    "label": "DefaultAudioQualityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultAudioQualityAnalyzer"
  },
  {
    "label": "StatsSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsSample"
  },
  {
    "label": "DefaultAudioQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_AUDIO_DEFAULT_AUDIO_QUALITY_ANALYZER_H_ # define TEST_PC_E2E_ANALYZER_AUDIO_DEFAULT_AUDIO_QUALITY_ANALYZER_H_ # include<map> # include<string> # include \" absl / strings / string_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / test / audio_quality_analyzer_interface . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / test / track_id_stream_info_map . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { namespace webrtc_pc_e2e { struct AudioStreamStats { SamplesStatsCounter expand_rate ; SamplesStatsCounter accelerate_rate ; SamplesStatsCounter preemptive_rate ; SamplesStatsCounter speech_expand_rate ; SamplesStatsCounter average_jitter_buffer_delay_ms ; SamplesStatsCounter preferred_buffer_size_ms ; } ; class DefaultAudioQualityAnalyzer : public AudioQualityAnalyzerInterface { public :)",
    "insertText": "DefaultAudioQualityAnalyzer(test::MetricsLogger* const metrics_logger)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(std::string test_case_name, TrackIdStreamInfoMap* analyzer_helper)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetAudioStreamsStats()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,AudioStreamStats>)",
    "insertText": "GetAudioStreamsStats()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (private : struct StatsSample { uint64_t total_samples_received = 0 ; uint64_t concealed_samples = 0 ; uint64_t removed_samples_for_acceleration = 0 ; uint64_t inserted_samples_for_deceleration = 0 ; uint64_t silent_concealed_samples = 0 ; TimeDelta jitter_buffer_delay =)",
    "insertText": "Zero()"
  },
  {
    "label": "GetTestCaseName()",
    "kind": "Method",
    "detail": "Function (uint64_t jitter_buffer_emitted_count = 0 ; } ; std::string)",
    "insertText": "GetTestCaseName(const std::string& stream_label)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (test::MetricsLogger* const metrics_logger_ ; std::string test_case_name_ ; TrackIdStreamInfoMap* analyzer_helper_ ; Mutex lock_ ; std::map<std::string,AudioStreamStats> streams_stats_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]