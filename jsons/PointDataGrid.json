[
  {
    "label": "TestPointDataLeaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPointDataLeaf"
  },
  {
    "label": "SameLeafConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameLeafConfig"
  },
  {
    "label": "PointDataLeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointDataLeafNode"
  },
  {
    "label": "PointDataLeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointDataLeafNode"
  },
  {
    "label": "compatible",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "compatible"
  },
  {
    "label": "PointDataLeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointDataLeafNode"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "PointDataLeafNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointDataLeafNode"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "PointDataNodeChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointDataNodeChain"
  },
  {
    "label": "PointDataNodeChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointDataNodeChain"
  },
  {
    "label": "PointDataNodeChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointDataNodeChain"
  },
  {
    "label": "TreeConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeConverter"
  },
  {
    "label": "SameLeafConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameLeafConfig"
  },
  {
    "label": "makeDescriptorUnique()",
    "kind": "Method",
    "detail": "Function (AttributeSet::Descriptor::Ptr)",
    "insertText": "makeDescriptorUnique(PointDataTreeT& tree)"
  },
  {
    "label": "setStreamingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStreamingMode(PointDataTreeT& tree, bool on = true)"
  },
  {
    "label": "prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prefetch(PointDataTreeT& tree, bool position = true, bool otherAttributes = true)"
  },
  {
    "label": "stealAttributeSet()",
    "kind": "Method",
    "detail": "Function (AttributeSet::UniquePtr)",
    "insertText": "stealAttributeSet()"
  },
  {
    "label": "initializeAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeAttributes(const Descriptor::Ptr& descriptor, const Index arrayLength,\n        const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "clearAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearAttributes(const bool updateValueMask = true,\n        const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "appendAttribute(const Descriptor& expected, Descriptor::Ptr& replacement,\n                                        const size_t pos, const Index strideOrTotalSize = 1,\n                                        const bool constantStride = true,\n                                        const Metadata* metadata = nullptr,\n                                        const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAttributes(const std::vector<size_t>& pos,\n                        const Descriptor& expected, Descriptor::Ptr& replacement)"
  },
  {
    "label": "reorderAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reorderAttributes(const Descriptor::Ptr& replacement)"
  },
  {
    "label": "renameAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renameAttributes(const Descriptor& expected, Descriptor::Ptr& replacement)"
  },
  {
    "label": "compactAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compactAttributes()"
  },
  {
    "label": "replaceAttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceAttributeSet(AttributeSet* attributeSet, bool allowMismatchingDescriptors = false)"
  },
  {
    "label": "resetDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetDescriptor(const Descriptor::Ptr& replacement)"
  },
  {
    "label": "setOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffsets(const std::vector<ValueType>& offsets, const bool updateValueMask = true)"
  },
  {
    "label": "groupWriteHandle()",
    "kind": "Method",
    "detail": "Function (GroupWriteHandle)",
    "insertText": "groupWriteHandle(const AttributeSet::Descriptor::GroupIndex& index)"
  },
  {
    "label": "groupWriteHandle()",
    "kind": "Method",
    "detail": "Function (GroupWriteHandle)",
    "insertText": "groupWriteHandle(const Name& name)"
  },
  {
    "label": "updateValueMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateValueMask()"
  },
  {
    "label": "setOffsetOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffsetOn(Index offset, const ValueType& val)"
  },
  {
    "label": "setOffsetOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffsetOnly(Index offset, const ValueType& val)"
  },
  {
    "label": "readTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readTopology(std::istream& is, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream& is, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream& is, const CoordBBox&, bool fromHalf = false)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const CoordBBox&, const ValueType&, bool)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const ValueType&, bool)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (length)",
    "insertText": "for(size_t attributeIndex = 1; attributeIndex < mAttributeSet->size()"
  },
  {
    "label": "GroupHandle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GroupHandle(groupArray, index.second)"
  },
  {
    "label": "GroupWriteHandle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GroupWriteHandle(groupArray, index.second)"
  },
  {
    "label": "newFilter()",
    "kind": "Method",
    "detail": "Function (FilterT)",
    "insertText": "newFilter(filter)"
  },
  {
    "label": "ValueVoxelCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueVoxelCIter(start, end)"
  },
  {
    "label": "newFilter()",
    "kind": "Method",
    "detail": "Function (FilterT)",
    "insertText": "newFilter(filter)"
  },
  {
    "label": "Index64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Index64(0)"
  },
  {
    "label": "matchingKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "matchingKey(\"hasMatchingDescriptor\")"
  },
  {
    "label": "matchingKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "matchingKey(\"hasMatchingDescriptor\")"
  },
  {
    "label": "descriptorKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "descriptorKey(\"descriptorPtr\")"
  },
  {
    "label": "descriptorKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "descriptorKey(\"descriptorPtr\")"
  },
  {
    "label": "matchingKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "matchingKey(\"hasMatchingDescriptor\")"
  },
  {
    "label": "descriptorKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "descriptorKey(\"descriptorPtr\")"
  },
  {
    "label": "tempData()",
    "kind": "Method",
    "detail": "Function (std::vector<uint8_t>)",
    "insertText": "tempData(bytesToSkip)"
  },
  {
    "label": "descriptorKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "descriptorKey(\"descriptorPtr\")"
  },
  {
    "label": "matchingKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "matchingKey(\"hasMatchingDescriptor\")"
  },
  {
    "label": "matchingKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "matchingKey(\"hasMatchingDescriptor\")"
  },
  {
    "label": "descriptorKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "descriptorKey(\"descriptorPtr\")"
  },
  {
    "label": "matchingKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "matchingKey(\"hasMatchingDescriptor\")"
  },
  {
    "label": "descriptorKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "descriptorKey(\"descriptorPtr\")"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "header(1)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "header(0)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize()"
  },
  {
    "label": "uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uninitialize()"
  }
]