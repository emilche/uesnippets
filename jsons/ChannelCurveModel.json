[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCurveAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveAttributes"
  },
  {
    "label": "FCurveEditorScreenSpace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpace"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "FKeyDrawInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDrawInfo"
  },
  {
    "label": "FKeyPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPosition"
  },
  {
    "label": "ChannelType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelType"
  },
  {
    "label": "ChannelValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelValue"
  },
  {
    "label": "KeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyType"
  },
  {
    "label": "FChannelCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelCurveModel"
  },
  {
    "label": "FChannelCurveModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneBoolChannel . h \" # include \" Channels / MovieSceneChannelHandle . h \" # include \" Channels / MovieSceneDoubleChannel . h \" # include \" Channels / MovieSceneFloatChannel . h \" # include \" Channels / MovieSceneIntegerChannel . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" CurveEditorTypes . h \" # include \" CurveModel . h \" # include \" Curves / KeyHandle . h \" # include \" Delegates / IDelegateInstance . h \" # include \" IBufferedCurveModel . h \" # include \" Misc / OptionalFwd . h \" # include \" MovieSceneSection . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Misc / Guid . h \" class FCurveEditor ; class FString ; class ISequencer ; class UMovieSceneSection ; class UObject ; struct FCurveAttributes ; struct FCurveEditorScreenSpace ; struct FKeyAttributes ; struct FKeyDrawInfo ; struct FKeyPosition ; template<class ChannelType,class ChannelValue,class KeyType> class FChannelCurveModel : public FCurveModel { public :)",
    "insertText": "FChannelCurveModel(TMovieSceneChannelHandle<ChannelType> InChannel, UMovieSceneSection* InOwningSection, TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "FChannelCurveModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChannelCurveModel(TMovieSceneChannelHandle<ChannelType> InChannel, UMovieSceneSection* InOwningSection, UObject* InOwningObject, TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "FChannelCurveModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChannelCurveModel()"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetCurve()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Modify()"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurve(const FCurveEditor& CurveEditor, const FCurveEditorScreenSpace& ScreenSpace, TArray<TTuple<double, double>>& OutInterpolatingPoints)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeys(double MinTime, double MaxTime, double MinValue, double MaxValue, TArray<FKeyHandle>& OutKeyHandles)"
  },
  {
    "label": "GetKeyDrawInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyDrawInfo(ECurvePointType PointType, const FKeyHandle InKeyHandle, FKeyDrawInfo& OutDrawInfo)"
  },
  {
    "label": "GetKeyPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyPosition> OutKeyPositions)"
  },
  {
    "label": "SetKeyPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<const FKeyPosition> InKeyPositions, EPropertyChangeType::Type ChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "GetCurveAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurveAttributes(FCurveAttributes& OutCurveAttributes)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeRange(double& MinTime, double& MaxTime)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(double& MinValue, double& MaxValue)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "GetNeighboringKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNeighboringKeys(const FKeyHandle InKeyHandle, TOptional<FKeyHandle>& OutPreviousKeyHandle, TOptional<FKeyHandle>& OutNextKeyHandle)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(double ProspectiveTime, double& OutValue)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeys(TArrayView<const FKeyPosition> InKeyPositions, TArrayView<const FKeyAttributes> InAttributes, TArrayView<TOptional<FKeyHandle>>* OutKeyHandles)"
  },
  {
    "label": "RemoveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeys(TArrayView<const FKeyHandle> InKeys)"
  },
  {
    "label": "GetCurveTransform()",
    "kind": "Method",
    "detail": "Function (FTransform2d)",
    "insertText": "GetCurveTransform()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetOwningObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetOwningObject()"
  },
  {
    "label": "HasChangedAndResetTest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasChangedAndResetTest()"
  },
  {
    "label": "UMovieSceneSignedObject()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSignedObject* SignedOwner = Cast<)",
    "insertText": "UMovieSceneSignedObject(WeakOwningObject.Get())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SignedOwner = WeakSection .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SignedOwner)"
  },
  {
    "label": "GetSignature()",
    "kind": "Method",
    "detail": "Function (LastSignature = SignedOwner ->)",
    "insertText": "GetSignature()"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (protected : double)",
    "insertText": "GetKeyValue(TArrayView<const ChannelValue> Values, int32 Index)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(int32 Index, double KeyValue)"
  },
  {
    "label": "GetChannelHandle()",
    "kind": "Method",
    "detail": "Function (public : const TMovieSceneChannelHandle<ChannelType>&)",
    "insertText": "GetChannelHandle()"
  }
]