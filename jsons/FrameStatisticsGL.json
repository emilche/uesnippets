[
  {
    "label": "FrameStatisticsGL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameStatisticsGL"
  },
  {
    "label": "ThisFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThisFrame"
  },
  {
    "label": "EGLFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EGLFrame"
  },
  {
    "label": "FrameStatisticsGL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<array> # include<atomic> # include<map> # include<vector> # include \" EGL . h \" # include \" FrameStatistics . h \" # include \" SwappyCommon . h \" # include \" Thread . h \" using TimePoint = std::chrono::steady_clock::time_point ; using namespace std::chrono_literals ; namespace swappy { class FrameStatisticsGL { public :)",
    "insertText": "FrameStatisticsGL(const EGL& egl, const SwappyCommon& swappyCommon)"
  },
  {
    "label": "FrameStatisticsGL()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameStatisticsGL()"
  },
  {
    "label": "enableStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableStats(bool enabled)"
  },
  {
    "label": "capture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "capture(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "getStats()",
    "kind": "Method",
    "detail": "Function (SwappyStats)",
    "insertText": "getStats()"
  },
  {
    "label": "clearStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearStats()"
  },
  {
    "label": "lastLatencyRecorded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastLatencyRecorded()"
  },
  {
    "label": "getThisFrame()",
    "kind": "Method",
    "detail": "Function (protected : int MAX_FRAME_LAG = 1 0 ; struct ThisFrame { TimePoint startTime ; std::unique_ptr<EGL::FrameTimestamps> stats ; } ; ThisFrame)",
    "insertText": "getThisFrame(EGLDisplay dpy, EGLSurface surface)"
  }
]