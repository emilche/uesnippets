[
  {
    "label": "FSplitterStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplitterStyle"
  },
  {
    "label": "STabDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STabDrawer"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "STabDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STabDrawer"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedRef<SDockTab> InTab, TWeakPtr<SWidget> InTabButton, ETabDrawerOpenDirection InOpenDirection)"
  },
  {
    "label": "SetCurrentSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSize(float InSize)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open(bool bAnimateOpen=true)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateAnimation(double CurrentTime, float DeltaTime)"
  },
  {
    "label": "OnGlobalFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGlobalFocusChanging(const FFocusEvent& FocusEvent, const FWeakWidgetPath& OldFocusedWidgetPath, const TSharedPtr<SWidget>& OldFocusedWidget, const FWidgetPath& NewFocusedWidgetPath, const TSharedPtr<SWidget>& NewFocusedWidget)"
  },
  {
    "label": "OnActiveTabChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveTabChanged(TSharedPtr<SDockTab> NewlyActivated, TSharedPtr<SDockTab> PreviouslyActive)"
  }
]