[
  {
    "label": "FSplitterStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplitterStyle"
  },
  {
    "label": "STabDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STabDrawer"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Application / ThrottleManager . h \" # include \" Animation / CurveSequence . h \" struct FSplitterStyle ; class STabDrawer ; class SDockTab ; enum class ETabDrawerOpenDirection : uint8 { Left,Right,Bottom } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnDrawerTargetSizeChanged, TSharedRef<STabDrawer>, float)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnDrawerFocusLost, TSharedRef<STabDrawer>)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnDrawerClosed, TSharedRef<STabDrawer>)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class STabDrawer : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(STabDrawer)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; _ShadowOffset =)",
    "insertText": "FVector2D(8.0f, 8.0f)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_ARGUMENT(float, MinDrawerSize) SLATE_ARGUMENT(float, MaxDrawerSize) SLATE_ARGUMENT(float, TargetDrawerSize) SLATE_EVENT(FOnDrawerTargetSizeChanged, OnTargetDrawerSizeChanged) SLATE_EVENT(FOnDrawerFocusLost, OnDrawerFocusLost) SLATE_EVENT(FOnDrawerClosed, OnDrawerClosed) SLATE_ARGUMENT(FVector2D, ShadowOffset) SLATE_END_ARGS() ~STabDrawer()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedRef<SDockTab> InTab, TWeakPtr<SWidget> InTabButton, ETabDrawerOpenDirection InOpenDirection)"
  },
  {
    "label": "SetCurrentSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSize(float InSize)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open(bool bAnimateOpen=true)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "IsClosing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosing()"
  },
  {
    "label": "GetTab()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<SDockTab>)",
    "insertText": "GetTab()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& AllottedGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& AllottedGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& AllottedGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetRenderTransformedGeometry()",
    "kind": "Method",
    "detail": "Function (private : FGeometry)",
    "insertText": "GetRenderTransformedGeometry(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "GetResizeHandleGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetResizeHandleGeometry(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateAnimation(double CurrentTime, float DeltaTime)"
  },
  {
    "label": "OnGlobalFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGlobalFocusChanging(const FFocusEvent& FocusEvent, const FWeakWidgetPath& OldFocusedWidgetPath, const TSharedPtr<SWidget>& OldFocusedWidget, const FWidgetPath& NewFocusedWidgetPath, const TSharedPtr<SWidget>& NewFocusedWidget)"
  },
  {
    "label": "OnActiveTabChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveTabChanged(TSharedPtr<SDockTab> NewlyActivated, TSharedPtr<SDockTab> PreviouslyActive)"
  }
]