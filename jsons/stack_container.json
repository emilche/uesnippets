[
  {
    "label": "StackAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackAllocator"
  },
  {
    "label": "Source",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Source"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind"
  },
  {
    "label": "StackContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackContainer"
  },
  {
    "label": "StackVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackVector"
  },
  {
    "label": "Source()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_STACK_CONTAINER_H_ # define BASE_CONTAINERS_STACK_CONTAINER_H_ # include<stddef . h> # include<memory> # include<vector> # include \" base / compiler_specific . h \" # include \" base / memory / raw_ptr_exclusion . h \" # include \" build / build_config . h \" namespace base { template<T,size_t stack_capacity,FallbackAllocator> class StackAllocator : public FallbackAllocator { public : using pointer = std::allocator_traits<FallbackAllocator>::pointer ; using size_type = std::allocator_traits<FallbackAllocator>::size_type ; struct Source {)",
    "insertText": "Source() : used_stack_buffer_(false)"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NO_SANITIZE(\"cfi-unrelated-cast\") T* stack_buffer()"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NO_SANITIZE(\"cfi-unrelated-cast\") const T* stack_buffer()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "alignas(T) char stack_buffer_[sizeof(T[stack_capacity])"
  }
]