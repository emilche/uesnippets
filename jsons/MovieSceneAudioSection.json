[
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "UMovieSceneAudioSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneAudioSection"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneAudioTriggerChannel . h \" # include \" Channels / MovieSceneBoolChannel . h \" # include \" Channels / MovieSceneFloatChannel . h \" # include \" Channels / MovieSceneIntegerChannel . h \" # include \" Channels / MovieSceneStringChannel . h \" # include \" Components / AudioComponent . h \" # include \" CoreMinimal . h \" # include \" EntitySystem / IMovieSceneEntityProvider . h \" # include \" MovieSceneSection . h \" # include \" Sections / MovieSceneActorReferenceSection . h \" # include \" Sound / SoundAttenuation . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneAudioSection . generated . h \" class USoundBase ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UFUNCTION(BlueprintCallable, Category=\"Sequencer|Section\") MOVIESCENETRACKS_API void SetSound(class USoundBase* InSound)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (float OutValue = 0 . f ; SoundVolume .)",
    "insertText": "Evaluate(InTime, OutValue)"
  },
  {
    "label": "GetAttachActorData()",
    "kind": "Method",
    "detail": "Function (AttenuationSettings = InAttenuationSettings ; } const FMovieSceneActorReferenceData&)",
    "insertText": "GetAttachActorData()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "SetOnQueueSubtitles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnQueueSubtitles(const FOnQueueSubtitles& InOnQueueSubtitles)"
  },
  {
    "label": "GetOnQueueSubtitles()",
    "kind": "Method",
    "detail": "Function (OnQueueSubtitles = InOnQueueSubtitles ; } const FOnQueueSubtitles&)",
    "insertText": "GetOnQueueSubtitles()"
  },
  {
    "label": "GetOnAudioFinished()",
    "kind": "Method",
    "detail": "Function (OnAudioFinished = InOnAudioFinished ; } const FOnAudioFinished&)",
    "insertText": "GetOnAudioFinished()"
  },
  {
    "label": "GetOnAudioPlaybackPercent()",
    "kind": "Method",
    "detail": "Function (OnAudioPlaybackPercent = InOnAudioPlaybackPercent ; } const FOnAudioPlaybackPercent&)",
    "insertText": "GetOnAudioPlaybackPercent()"
  },
  {
    "label": "ForEachInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachInput(TFunction<void(FName, const FMovieSceneStringChannel&)> InFunction)"
  },
  {
    "label": "ForEachInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachInput(TFunction<void(FName, const FMovieSceneIntegerChannel&)> InFunction)"
  },
  {
    "label": "ForEachInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachInput(TFunction<void(FName, const FMovieSceneFloatChannel&)> InFunction)"
  },
  {
    "label": "ForEachInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachInput(TFunction<void(FName, const FMovieSceneAudioTriggerChannel&)> InFunction)"
  },
  {
    "label": "GetAutoSizeRange()",
    "kind": "Method",
    "detail": "Function (} public : TOptional<TRange<FFrameNumber>>)",
    "insertText": "GetAutoSizeRange()"
  },
  {
    "label": "TrimSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimSection(FQualifiedFrameTime TrimTime, bool bTrimLeft, bool bDeleteKeys)"
  },
  {
    "label": "SplitSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "SplitSection(FQualifiedFrameTime SplitTime, bool bDeleteKeys)"
  },
  {
    "label": "GetOffsetTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "GetOffsetTime()"
  },
  {
    "label": "MigrateFrameTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MigrateFrameTimes(FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "CacheChannelProxy()",
    "kind": "Method",
    "detail": "Function (EMovieSceneChannelProxyType)",
    "insertText": "CacheChannelProxy()"
  },
  {
    "label": "PopulateEvaluationFieldImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateEvaluationFieldImpl(const TRange<FFrameNumber>& EffectiveRange, const FMovieSceneEvaluationFieldEntityMetaData& InMetaData, FMovieSceneEntityComponentFieldBuilder* OutFieldBuilder)"
  },
  {
    "label": "ImportEntityImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportEntityImpl(UMovieSceneEntitySystemLinker* EntityLinker, const FEntityImportParams& Params, FImportedEntity* OutImportedEntity)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "ForEachInternal()",
    "kind": "Method",
    "detail": "Function (# endif private : template<ChannelType,ForEachFunction> void)",
    "insertText": "ForEachInternal(ForEachFunction InFunction, const TMap<FName, ChannelType>& InMapToIterate)"
  },
  {
    "label": "InFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunction(Item.Key, Item.Value)"
  },
  {
    "label": "SetupSoundInputParameters()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetupSoundInputParameters(USoundBase* InSoundBase)"
  }
]