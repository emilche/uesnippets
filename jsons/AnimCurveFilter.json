[
  {
    "label": "FCurveUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveUtils"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveFilterElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveFilterElement"
  },
  {
    "label": "FCurveFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveFilter"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreMinimal . h \" # include \" Algo / Sort . h \" # include \" AnimCurveElementFlags . h \" # include \" NamedValueArray . h \" # include \" Misc / MemStack . h \" namespace UE::Anim { struct FCurveUtils ; enum class ECurveFilterFlags : uint8 { None = 0,Disallowed = 0 x01,Filtered = 0 x02,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECurveFilterFlags)"
  },
  {
    "label": "FCurveFilterElement()",
    "kind": "Method",
    "detail": "Function (enum class ECurveFilterMode : uint8 { None,DisallowAll,AllowOnlyFiltered,DisallowFiltered,} ; struct FCurveFilterElement {)",
    "insertText": "FCurveFilterElement()"
  },
  {
    "label": "FCurveFilterElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCurveFilterElement(FName InName) : Name(InName)"
  },
  {
    "label": "FCurveFilterElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCurveFilterElement(FName InName, ECurveFilterFlags InFlags) : Name(InName) , Flags(InFlags)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} FName Name = NAME_None ; ECurveFilterFlags Flags = ECurveFilterFlags::None ; } ; struct FCurveFilter : TNamedValueArray<FDefaultAllocator,FCurveFilterElement> { typedef TNamedValueArray<AllocatorType,FCurveFilterElement> Super ; FCurveUtils ; void)",
    "insertText": "Empty()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (FilterMode = ECurveFilterMode::None ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FName InName, ECurveFilterFlags InFlags = ECurveFilterFlags::Filtered)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Emplace(InName, InFlags)"
  },
  {
    "label": "AppendNames()",
    "kind": "Method",
    "detail": "Function (bSorted = false ; } void)",
    "insertText": "AppendNames(TArrayView<const FName> InNameArray)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Reserve(Elements.Num() + InNameArray.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Emplace(Name, ECurveFilterFlags::Filtered)"
  },
  {
    "label": "AppendNamedFlags()",
    "kind": "Method",
    "detail": "Function (} bSorted = false ; } void)",
    "insertText": "AppendNamedFlags(std::initializer_list<TTuple<const FName, ECurveFilterFlags>> InInputArgs)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Reserve(Elements.Num() + InInputArgs.size())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Emplace(Arg.Get<0>(), Arg.Get<1>())"
  },
  {
    "label": "SetFilterMode()",
    "kind": "Method",
    "detail": "Function (} bSorted = false ; } void)",
    "insertText": "SetFilterMode(ECurveFilterMode InFilterMode)"
  }
]