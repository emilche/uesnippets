[
  {
    "label": "TSharedString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedString"
  },
  {
    "label": "TSharedString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" CoreTypes . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / CString . h \" # include<atomic> namespace UE { template<CharType> class TSharedString { public : using ElementType = CharType ;)",
    "insertText": "TSharedString()"
  },
  {
    "label": "TSharedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSharedString(TSharedString&& String)"
  },
  {
    "label": "TSharedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSharedString(const TSharedString& String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSharedString&)",
    "insertText": "operator(TSharedString&& String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSharedString&)",
    "insertText": "operator(const TSharedString& String)"
  },
  {
    "label": "TSharedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSharedString(TStringView<CharType> String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSharedString&)",
    "insertText": "operator(TStringView<CharType> String)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(Chars)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (Chars = nullptr ; } [ [ nodiscard ] ] bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const CharType*)",
    "insertText": "operator()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const TSharedString& String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TSharedString& Lhs, const TSharedString& Rhs)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRef(CharType* Chars)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(CharType* Chars)"
  },
  {
    "label": "TSharedString()",
    "kind": "Method",
    "detail": "Function (CharType* Chars = nullptr ; CharType NullChar { } ; } ; template<CharType> const TSharedString<CharType> TSharedString<CharType>::Empty ; template<CharType> TSharedString<CharType)",
    "insertText": "TSharedString(TSharedString&& String) : Chars(String.Chars)"
  },
  {
    "label": "TSharedString()",
    "kind": "Method",
    "detail": "Function (String . Chars = nullptr ; } template<CharType> TSharedString<CharType)",
    "insertText": "TSharedString(const TSharedString& String) : Chars(String.Chars)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef(Chars)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (CharType* OldChars = Chars ; CharType* NewChars = String . Chars ;)",
    "insertText": "AddRef(NewChars)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(OldChars)"
  },
  {
    "label": "TSharedString()",
    "kind": "Method",
    "detail": "Function (Chars = NewChars ; return* this ; } template<CharType> TSharedString<CharType)",
    "insertText": "TSharedString(const TStringView<CharType> String)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const SIZE_T Size =)",
    "insertText": "sizeof(int32) + sizeof(int32) + sizeof(CharType) + sizeof(CharType)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32* const Header = static_cast<)",
    "insertText": "int32(FMemory::Malloc(Size))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)&Header[0]) std::atomic<int32>(1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)&Header[1]) int32(Length)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (Chars = reinterpret_cast<)",
    "insertText": "CharType(&Header[2])"
  },
  {
    "label": "CopyString()",
    "kind": "Method",
    "detail": "Function (String .)",
    "insertText": "CopyString(Chars, Length)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (Chars [ Length ] =)",
    "insertText": "CharType(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<CharType> TSharedString<CharType>& TSharedString<CharType)",
    "insertText": "operator(const TStringView<CharType> String)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} template<CharType> void TSharedString<CharType)",
    "insertText": "AddRef(CharType* const MaybeNullChars)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32* const Header = reinterpret_cast<)",
    "insertText": "int32(MaybeNullChars)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (std::atomic<int32>& RefCount = reinterpret_cast<std::atomic<)",
    "insertText": "int32(Header[0])"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (RefCount .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} } template<CharType> void TSharedString<CharType)",
    "insertText": "Release(CharType* const MaybeNullChars)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Header)"
  }
]