[
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScope"
  },
  {
    "label": "FAwaitable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAwaitable"
  },
  {
    "label": "FCoroSpinLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoroSpinLock"
  },
  {
    "label": "CoroSpinLock_Detail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoroSpinLock_Detail"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Coroutine . h \" # if WITH_CPP_COROUTINES namespace CoroSpinLock_Detail { class FScope ; class FAwaitable ; } class FCoroSpinLock { class CoroSpinLock_Detail::FScope ; class CoroSpinLock_Detail::FAwaitable ; std::atomic_uint Taken { 0 } ; public : CoroSpinLock_Detail::FAwaitable)",
    "insertText": "Lock(bool WriteLock = true)"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (} ; namespace CoroSpinLock_Detail { class [ [ nodiscard ] ] FScope { FCoroSpinLock* CoroSpinLock = nullptr ; bool WriteLock = true ; public :)",
    "insertText": "FScope()"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScope(FCoroSpinLock* InCoroSpinLock, bool InWriteLock) : CoroSpinLock(InCoroSpinLock), WriteLock(InWriteLock)"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScope(FScope&& Other)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (WriteLock = Other . WriteLock ; CoroSpinLock = Other . CoroSpinLock ; Other . CoroSpinLock = nullptr ; } void)",
    "insertText": "Release()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(CoroSpinLock->Taken.load(std::memory_order_relaxed) == 1)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (CoroSpinLock -> Taken .)",
    "insertText": "store(0, std::memory_order_release)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} else { uint32 Next ; uint32 Previous = CoroSpinLock -> Taken .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Next = Previous - 2 ; })",
    "insertText": "while(!CoroSpinLock->Taken.compare_exchange_weak(Previous, Next, std::memory_order_release, std::memory_order_relaxed))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FScope&)",
    "insertText": "operator(FScope&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> WriteLock = Other . WriteLock ; this -> CoroSpinLock =)",
    "insertText": "MoveTemp(Other.CoroSpinLock)"
  },
  {
    "label": "TryTakeLock()",
    "kind": "Method",
    "detail": "Function (Other . CoroSpinLock = nullptr ; } return* this ; } } ; class [ [ nodiscard ] ] FAwaitable { FCoroSpinLock* CoroSpinLock = nullptr ; TLaunchedCoroTask<void> Task ; bool WriteLock = true ; private : bool)",
    "insertText": "TryTakeLock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Timeout = 8 ; uint32 Previous = 0 ;)",
    "insertText": "if(!WriteLock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} do { uint32 Next ;)",
    "insertText": "if(WriteLock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Previous = 0 ; Next = 1 ; } else { Previous = Previous& ~ 0 x1 ; Next = Previous + 2 ; })",
    "insertText": "if(CoroSpinLock->Taken.compare_exchange_weak(Previous, Next, std::memory_order_acquire, std::memory_order_relaxed))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Timeout - - ; })",
    "insertText": "while(Timeout >= 0)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(FAwaitable* Self) noexcept -> CORO_TASK(void)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(CoroTask_ScopeLock)"
  },
  {
    "label": "suspend_always()",
    "kind": "Method",
    "detail": "Function (co_return ; } co_await)",
    "insertText": "suspend_always()"
  },
  {
    "label": "FAwaitable()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FAwaitable(FCoroSpinLock* InCoroSpinLock, bool InWriteLock) : CoroSpinLock(InCoroSpinLock), WriteLock(InWriteLock)"
  },
  {
    "label": "await_ready()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "await_ready()"
  },
  {
    "label": "await_suspend()",
    "kind": "Method",
    "detail": "Function (} template<PromiseType> void)",
    "insertText": "await_suspend(coroutine_handle<PromiseType> Continuation)"
  },
  {
    "label": "LaunchTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchTask()"
  },
  {
    "label": "promise()",
    "kind": "Method",
    "detail": "Function (Continuation .)",
    "insertText": "promise().Suspend(Task.GetPromise())"
  },
  {
    "label": "await_resume()",
    "kind": "Method",
    "detail": "Function (} FScope)",
    "insertText": "await_resume()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} } ; } CoroSpinLock_Detail::FAwaitable)",
    "insertText": "Lock(bool WriteLock)"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScope(FRWLock* InLockObject, bool InWriteLock) : LockObject(InLockObject), WriteLock(InWriteLock)"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (LockObject ->)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (} else { LockObject ->)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> WriteLock = Other . WriteLock ; this -> LockObject =)",
    "insertText": "MoveTemp(Other.LockObject)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (CS .)",
    "insertText": "WriteLock()"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (} else { CS .)",
    "insertText": "ReadLock()"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FScope(&CS, WriteLock)"
  }
]