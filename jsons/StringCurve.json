[
  {
    "label": "FStringCurveKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStringCurveKey"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FStringCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStringCurve"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Curves / KeyHandle . h \" # include \" Curves / IndexedCurve . h \" # include \" StringCurve . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=\"Key\")"
  },
  {
    "label": "FStringCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStringCurveKey() : Time(0.0f)"
  },
  {
    "label": "FStringCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStringCurveKey(float InTime, const FString& InValue) : Time(InTime) , Value(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "operator(const FStringCurveKey& Other)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FStringCurveKey& Key)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Key .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() virtual ~FStringCurve()"
  },
  {
    "label": "HasAnyData()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "HasAnyData()"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (} FKeyHandle)",
    "insertText": "AddKey(float InTime, const FString& InValue, FKeyHandle KeyHandle = FKeyHandle())"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Eval(float Time, const FString& InDefaultValue)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "FindKey(float KeyTime, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultValue()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (FStringCurveKey)",
    "insertText": "GetKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (const TArray<FStringCurveKey>&)",
    "insertText": "GetKeys()"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetKeyValue(FKeyHandle KeyHandle)"
  },
  {
    "label": "SetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultValue(const FString& InDefaultValue)"
  },
  {
    "label": "ClearDefaultValue()",
    "kind": "Method",
    "detail": "Function (DefaultValue = InDefaultValue ; } void)",
    "insertText": "ClearDefaultValue()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (DefaultValue .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyTime(FKeyHandle KeyHandle, float NewTime)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(FKeyHandle KeyHandle, FString NewValue)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "UpdateOrAddKey(float InTime, const FString& InValue, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys()"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} FIndexedCurve*)",
    "insertText": "Duplicate()"
  }
]