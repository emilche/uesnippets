[
  {
    "label": "TargetTransformInfoImplBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransformInfoImplBase"
  },
  {
    "label": "TargetTransformInfoImplCRTPBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransformInfoImplCRTPBase"
  },
  {
    "label": "TargetTransformInfoImplBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_TARGETTRANSFORMINFOIMPL_H # define LLVM_ANALYSIS_TARGETTRANSFORMINFOIMPL_H # include \" llvm / Analysis / TargetTransformInfo . h \" # include \" llvm / IR / CallSite . h \" # include \" llvm / IR / DataLayout . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Operator . h \" # include \" llvm / IR / Type . h \" namespace llvm { class TargetTransformInfoImplBase { protected : typedef TargetTransformInfo TTI ; const DataLayout& DL ;)",
    "insertText": "TargetTransformInfoImplBase(const DataLayout &DL) : DL(DL)"
  },
  {
    "label": "TargetTransformInfoImplBase()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TargetTransformInfoImplBase(const TargetTransformInfoImplBase &Arg) : DL(Arg.DL)"
  },
  {
    "label": "TargetTransformInfoImplBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TargetTransformInfoImplBase(TargetTransformInfoImplBase &&Arg) : DL(Arg.DL)"
  },
  {
    "label": "getDataLayout()",
    "kind": "Method",
    "detail": "Function (} const DataLayout&)",
    "insertText": "getDataLayout()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default : return TTI::TCC_Basic ; case Instruction::GetElementPtr :)",
    "insertText": "llvm_unreachable(\"Use getGEPCost for GEP operations!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(FTy && \"FunctionType must be provided to this routine.\")"
  },
  {
    "label": "getIntrinsicCost()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getIntrinsicCost(Intrinsic::ID IID, Type *RetTy, ArrayRef<Type *> ParamTys)"
  },
  {
    "label": "hasBranchDivergence()",
    "kind": "Method",
    "detail": "Function (default : return TTI::TCC_Basic ; case Intrinsic::annotation : case Intrinsic::assume : case Intrinsic::dbg_declare : case Intrinsic::dbg_value : case Intrinsic::invariant_start : case Intrinsic::invariant_end : case Intrinsic::lifetime_start : case Intrinsic::lifetime_end : case Intrinsic::objectsize : case Intrinsic::ptr_annotation : case Intrinsic::var_annotation : case Intrinsic::experimental_gc_result_int : case Intrinsic::experimental_gc_result_float : case Intrinsic::experimental_gc_result_ptr : case Intrinsic::experimental_gc_result : case Intrinsic::experimental_gc_relocate : return TTI::TCC_Free ; } } bool)",
    "insertText": "hasBranchDivergence()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (StringRef Name = F ->)",
    "insertText": "getName()"
  },
  {
    "label": "isLegalAddImmediate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLegalAddImmediate(int64_t Imm)"
  },
  {
    "label": "isLegalMaskedStore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLegalMaskedStore(Type *DataType, int Consecutive)"
  },
  {
    "label": "TargetTransformInfoImplCRTPBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class TargetTransformInfoImplCRTPBase : public TargetTransformInfoImplBase { private : typedef TargetTransformInfoImplBase BaseT ; protected :)",
    "insertText": "TargetTransformInfoImplCRTPBase(const DataLayout &DL) : BaseT(DL)"
  },
  {
    "label": "TargetTransformInfoImplCRTPBase()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TargetTransformInfoImplCRTPBase(const TargetTransformInfoImplCRTPBase &Arg) : BaseT(static_cast<const BaseT &>(Arg))"
  },
  {
    "label": "TargetTransformInfoImplCRTPBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TargetTransformInfoImplCRTPBase(TargetTransformInfoImplCRTPBase &&Arg) : BaseT(std::move(static_cast<BaseT &>(Arg)))"
  },
  {
    "label": "getCallCost()",
    "kind": "Method",
    "detail": "Function (} using BaseT::getCallCost ; unsigned)",
    "insertText": "getCallCost(const Function *F, int NumArgs)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(F && \"A concrete function must be provided to this routine.\")"
  },
  {
    "label": "getFunctionType()",
    "kind": "Method",
    "detail": "Function (FunctionType* FTy = F ->)",
    "insertText": "getFunctionType()"
  },
  {
    "label": "ParamTys()",
    "kind": "Method",
    "detail": "Function (SmallVector<Type*,8>)",
    "insertText": "ParamTys(FTy->param_begin(), FTy->param_end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!static_cast<T *>(this)->isLoweredToCall(F))"
  },
  {
    "label": "getCallCost()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getCallCost(const Function *F, ArrayRef<const Value *> Arguments)"
  },
  {
    "label": "getIntrinsicCost()",
    "kind": "Method",
    "detail": "Function (} using BaseT::getIntrinsicCost ; unsigned)",
    "insertText": "getIntrinsicCost(Intrinsic::ID IID, Type *RetTy, ArrayRef<const Value *> Arguments)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (SmallVector<Type*,8> ParamTys ; ParamTys .)",
    "insertText": "reserve(Arguments.size())"
  },
  {
    "label": "getUserCost()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getUserCost(const User *U)"
  },
  {
    "label": "Indices()",
    "kind": "Method",
    "detail": "Function (SmallVector<const Value*,4>)",
    "insertText": "Indices(GEP->idx_begin(), GEP->idx_end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(auto CS = ImmutableCallSite(U))"
  },
  {
    "label": "getCalledFunction()",
    "kind": "Method",
    "detail": "Function (const Function* F = CS .)",
    "insertText": "getCalledFunction()"
  },
  {
    "label": "getCalledValue()",
    "kind": "Method",
    "detail": "Function (Type* FTy = CS .)",
    "insertText": "getCalledValue()->getType()->getPointerElementType()"
  },
  {
    "label": "Arguments()",
    "kind": "Method",
    "detail": "Function (} SmallVector<const Value*,8>)",
    "insertText": "Arguments(CS.arg_begin(), CS.arg_end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(const CastInst *CI = dyn_cast<CastInst>(U))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "T(this)->getOperationCost( Operator::getOpcode(U), U->getType(), U->getNumOperands() == 1 ? U->getOperand(0)->getType() : nullptr)"
  }
]