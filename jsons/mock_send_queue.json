[
  {
    "label": "MockSendQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockSendQueue"
  },
  {
    "label": "MockSendQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TX_MOCK_SEND_QUEUE_H_ # define NET_DCSCTP_TX_MOCK_SEND_QUEUE_H_ # include<cstdint> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / tx / send_queue . h \" # include \" test / gmock . h \" namespace dcsctp { class MockSendQueue : public SendQueue { public :)",
    "insertText": "MockSendQueue()"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, Produce).WillByDefault([](TimeMs now, size_t max_size) { return absl::nullopt; })"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(absl::optional<SendQueue::DataToSend>, Produce, (TimeMs now, size_t max_size), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, Discard, (IsUnordered unordered, StreamID stream_id, MID message_id), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, PrepareResetStream, (StreamID stream_id), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, HasStreamsReadyToBeReset, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(std::vector<StreamID>, GetStreamsReadyToBeReset, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, CommitResetStreams, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, RollbackResetStreams, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Reset, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(size_t, buffered_amount, (StreamID stream_id), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(size_t, total_buffered_amount, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(size_t, buffered_amount_low_threshold, (StreamID stream_id), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetBufferedAmountLowThreshold, (StreamID stream_id, size_t bytes), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, EnableMessageInterleaving, (bool enabled), (override))"
  }
]