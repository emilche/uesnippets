[
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FOnlineSessionSearchResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnlineSessionSearchResult"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UOnlineSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UOnlineSession"
  },
  {
    "label": "EPlayNetMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlayNetMode"
  },
  {
    "label": "FLatentActionManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLatentActionManager"
  },
  {
    "label": "FNetDriverReplicationSystemConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetDriverReplicationSystemConfig"
  },
  {
    "label": "ULevelEditorPlaySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelEditorPlaySettings"
  },
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FGameInstancePIEResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameInstancePIEResult"
  },
  {
    "label": "FGameInstancePIEParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameInstancePIEParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEngine"
  },
  {
    "label": "FReplayPlaylistParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayPlaylistParams"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Online / CoreOnlineFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Engine / NetworkDelegates . h \" # include \" Subsystems / GameInstanceSubsystem . h \" # include \" Subsystems / SubsystemCollection . h \" # include \" GameFramework / OnlineReplStructs . h \" # include \" ReplayTypes . h \" # include \" GameInstance . generated . h \" class AGameModeBase ; class APlayerController ; class FOnlineSessionSearchResult ; class FTimerManager ; class UGameViewportClient ; class ULocalPlayer ; class UOnlineSession ; enum EPlayNetMode : int ; struct FLatentActionManager ; struct FNetDriverReplicationSystemConfig ; class ULevelEditorPlaySettings ; class IAnalyticsProvider ; namespace ERHIFeatureLevel { enum Type : int ; } namespace GameInstanceState { const FName Playing ; } class FOnlineSessionSearchResult ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnPreClientTravel, const FString& , ETravelType , bool)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (typedef FOnPreClientTravel::FDelegate FOnPreClientTravelDelegate ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnPawnControllerChanged, APawn*, Pawn, AController*, Controller)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FOnUserInputDeviceConnectionChange, EInputDeviceConnectionState, NewConnectionState, FPlatformUserId, PlatformUserId, FInputDeviceId, InputDeviceId)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FOnUserInputDevicePairingChange, FInputDeviceId, InputDeviceId, FPlatformUserId, NewUserPlatformId, FPlatformUserId, OldUserPlatformId)"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR struct FGameInstancePIEResult { public : FText FailureReason ; bool bSuccess ; public : FGameInstancePIEResult)",
    "insertText": "Success()"
  },
  {
    "label": "Failure()",
    "kind": "Method",
    "detail": "Function (} FGameInstancePIEResult)",
    "insertText": "Failure(const FText& InReason)"
  },
  {
    "label": "IsSuccess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSuccess()"
  },
  {
    "label": "FGameInstancePIEParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGameInstancePIEParameters {)",
    "insertText": "FGameInstancePIEParameters()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (bool bSimulateInEditor ; bool bAnyBlueprintErrors ; bool bStartInSpectatorMode ; bool bRunAsDedicated ; bool bIsPrimaryPIEClient ; double PIEStartTime = 0 ; ERHIFeatureLevel::Type WorldFeatureLevel ; ULevelEditorPlaySettings* EditorPlaySettings ; EPlayNetMode NetMode ; FString OverrideMapURL ; } ; # endif enum class EInputDeviceConnectionState : uint8 ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnLocalPlayerEvent, ULocalPlayer*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config=Game, transient, BlueprintType, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "HandleOpenCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleOpenCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDisconnectCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisconnectCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleReconnectCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleReconnectCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleTravelCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTravelCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "OnPlayTogetherEventReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlayTogetherEventReceived(int32 UserIndex, const TArray<const FUniqueNetId&>& UserList)"
  },
  {
    "label": "OnConsoleInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConsoleInput(const FString& Command)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle OnPlayTogetherEventReceivedDelegateHandle ; public : FString PIEMapName ; # if WITH_EDITOR double PIEStartTime = 0 ; bool bReportedPIEStartupTime = false ; # endif # if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Out = *GLog)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (# endif class UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "HandleInputDeviceConnectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputDeviceConnectionChange(EInputDeviceConnectionState NewConnectionState, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId)"
  },
  {
    "label": "HandleInputDevicePairingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputDevicePairingChange(FInputDeviceId InputDeviceId, FPlatformUserId NewUserPlatformId, FPlatformUserId OldUserPlatformId)"
  },
  {
    "label": "InitializeStandalone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeStandalone(const FName InWorldName = NAME_None, UPackage* InWorldPackage = nullptr)"
  },
  {
    "label": "InitializeForMinimalNetRPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForMinimalNetRPC(const FName InPackageName)"
  },
  {
    "label": "CreateMinimalNetRPCWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMinimalNetRPCWorld(const FName InPackageName, UPackage*& OutWorldPackage, UWorld*& OutWorld)"
  },
  {
    "label": "InitializeForPlayInEditor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FGameInstancePIEResult)",
    "insertText": "InitializeForPlayInEditor(int32 PIEInstanceIndex, const FGameInstancePIEParameters& Params)"
  },
  {
    "label": "StartPlayInEditorGameInstance()",
    "kind": "Method",
    "detail": "Function (FGameInstancePIEResult)",
    "insertText": "StartPlayInEditorGameInstance(ULocalPlayer* LocalPlayer, const FGameInstancePIEParameters& Params)"
  },
  {
    "label": "PostCreateGameModeForPIE()",
    "kind": "Method",
    "detail": "Function (FGameInstancePIEResult)",
    "insertText": "PostCreateGameModeForPIE(const FGameInstancePIEParameters& Params, AGameModeBase* GameMode)"
  },
  {
    "label": "ReportPIEStartupTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPIEStartupTime()"
  },
  {
    "label": "GetEngine()",
    "kind": "Method",
    "detail": "Function (# endif class UEngine*)",
    "insertText": "GetEngine()"
  },
  {
    "label": "GetWorldContext()",
    "kind": "Method",
    "detail": "Function (struct FWorldContext*)",
    "insertText": "GetWorldContext()"
  },
  {
    "label": "OnWorldChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldChanged(UWorld* OldWorld, UWorld* NewWorld)"
  },
  {
    "label": "StartGameInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartGameInstance()"
  },
  {
    "label": "JoinSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JoinSession(ULocalPlayer* LocalPlayer, int32 SessionIndexInSearchResults)"
  },
  {
    "label": "CreateInitialPlayer()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "CreateInitialPlayer(FString& OutError)"
  },
  {
    "label": "CreateLocalPlayer()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "CreateLocalPlayer(int32 ControllerId, FString& OutError, bool bSpawnPlayerController)"
  },
  {
    "label": "CreateLocalPlayer()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "CreateLocalPlayer(FPlatformUserId UserId, FString& OutError, bool bSpawnPlayerController)"
  },
  {
    "label": "AddLocalPlayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddLocalPlayer(ULocalPlayer* NewPlayer, FPlatformUserId UserId)"
  },
  {
    "label": "RemoveLocalPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLocalPlayer(ULocalPlayer * ExistingPlayer)"
  },
  {
    "label": "GetNumLocalPlayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumLocalPlayers()"
  },
  {
    "label": "GetLocalPlayerByIndex()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "GetLocalPlayerByIndex(const int32 Index)"
  },
  {
    "label": "GetFirstGamePlayer()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "GetFirstGamePlayer()"
  },
  {
    "label": "GetFirstLocalPlayerController()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "GetFirstLocalPlayerController(const UWorld* World = nullptr)"
  },
  {
    "label": "FindLocalPlayerFromControllerId()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "FindLocalPlayerFromControllerId(const int32 ControllerId)"
  },
  {
    "label": "FindLocalPlayerFromPlatformUserId()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "FindLocalPlayerFromPlatformUserId(const FPlatformUserId UserId)"
  },
  {
    "label": "FindLocalPlayerFromUniqueNetId()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "FindLocalPlayerFromUniqueNetId(FUniqueNetIdPtr UniqueNetId)"
  },
  {
    "label": "FindLocalPlayerFromUniqueNetId()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "FindLocalPlayerFromUniqueNetId(const FUniqueNetId& UniqueNetId)"
  },
  {
    "label": "FindLocalPlayerFromUniqueNetId()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "FindLocalPlayerFromUniqueNetId(const FUniqueNetIdRepl& UniqueNetId)"
  },
  {
    "label": "GetLocalPlayerIterator()",
    "kind": "Method",
    "detail": "Function (TArray<ULocalPlayer*>::TConstIterator)",
    "insertText": "GetLocalPlayerIterator()"
  },
  {
    "label": "GetLocalPlayers()",
    "kind": "Method",
    "detail": "Function (const TArray<ULocalPlayer*>&)",
    "insertText": "GetLocalPlayers()"
  },
  {
    "label": "GetPrimaryPlayerController()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "GetPrimaryPlayerController(bool bRequiresValidUniqueId = true)"
  },
  {
    "label": "GetPrimaryPlayerUniqueIdRepl()",
    "kind": "Method",
    "detail": "Function (FUniqueNetIdRepl)",
    "insertText": "GetPrimaryPlayerUniqueIdRepl()"
  },
  {
    "label": "CleanupGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupGameViewport()"
  },
  {
    "label": "HandleDemoPlaybackFailure()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "HandleDemoPlaybackFailure(const UE::Net::TNetResult<EReplayResult>& Result)"
  },
  {
    "label": "HandleDemoRecordFailure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDemoRecordFailure(const UE::Net::TNetResult<EReplayResult>& Result)"
  },
  {
    "label": "OnSeamlessTravelDuringReplay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSeamlessTravelDuringReplay()"
  },
  {
    "label": "GetTimerManager()",
    "kind": "Method",
    "detail": "Function (} FTimerManager&)",
    "insertText": "GetTimerManager()"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem()"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem(const UGameInstance* GameInstance)"
  },
  {
    "label": "GetSubsystemArrayCopy()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TArray<TSubsystemClass*>)",
    "insertText": "GetSubsystemArrayCopy()"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> void)",
    "insertText": "ForEachSubsystem(TFunctionRef<void(TSubsystemClass*)> Operation)"
  },
  {
    "label": "StartRecordingReplay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartRecordingReplay(const FString& InName, const FString& FriendlyName, const TArray<FString>& AdditionalOptions = TArray<FString>(), TSharedPtr<IAnalyticsProvider> AnalyticsProvider = nullptr)"
  },
  {
    "label": "StopRecordingReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingReplay()"
  },
  {
    "label": "PlayReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayReplay(const FString& InName, UWorld* WorldOverride = nullptr, const TArray<FString>& AdditionalOptions = TArray<FString>())"
  },
  {
    "label": "PlayReplayPlaylist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayReplayPlaylist(const struct FReplayPlaylistParams& PlaylistParams)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "EnableListenServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableListenServer(bool bEnable, int32 PortOverride = 0)"
  },
  {
    "label": "HandleGameNetControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGameNetControlMessage(class UNetConnection* Connection, uint8 MessageByte, const FString& MessageStr)"
  },
  {
    "label": "ReceivedNetworkEncryptionToken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReceivedNetworkEncryptionToken(const FString& EncryptionToken, const FOnEncryptionKeyResponse& Delegate)"
  },
  {
    "label": "ReceivedNetworkEncryptionAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedNetworkEncryptionAck(const FOnEncryptionKeyResponse& Delegate)"
  },
  {
    "label": "ReceivedNetworkEncryptionFailure()",
    "kind": "Method",
    "detail": "Function (EEncryptionFailureAction)",
    "insertText": "ReceivedNetworkEncryptionFailure(UNetConnection* Connection)"
  },
  {
    "label": "PreloadContentForURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadContentForURL(FURL InURL)"
  },
  {
    "label": "CreateGameModeForURL()",
    "kind": "Method",
    "detail": "Function (class AGameModeBase*)",
    "insertText": "CreateGameModeForURL(FURL InURL, UWorld* InWorld)"
  },
  {
    "label": "SetPersistentTravelURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPersistentTravelURL(FURL InURL)"
  },
  {
    "label": "OverrideGameModeClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<AGameModeBase>)",
    "insertText": "OverrideGameModeClass(TSubclassOf<AGameModeBase> GameModeClass, const FString& MapName, const FString& Options, const FString& Portal)"
  },
  {
    "label": "ModifyClientTravelLevelURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyClientTravelLevelURL(FString& LevelName)"
  },
  {
    "label": "DelayPendingNetGameTravel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DelayPendingNetGameTravel()"
  },
  {
    "label": "IsDedicatedServerInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDedicatedServerInstance()"
  },
  {
    "label": "GetOnlinePlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetOnlinePlatformName()"
  },
  {
    "label": "ClientTravelToSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClientTravelToSession(int32 ControllerId, FName InSessionName)"
  },
  {
    "label": "NotifyPreClientTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreClientTravel(const FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel)"
  },
  {
    "label": "OnNotifyPreClientTravel()",
    "kind": "Method",
    "detail": "Function (FOnPreClientTravel&)",
    "insertText": "OnNotifyPreClientTravel()"
  },
  {
    "label": "RegisterReferencedObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReferencedObject(UObject* ObjectToReference)"
  },
  {
    "label": "UnregisterReferencedObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterReferencedObject(UObject* ObjectToReference)"
  },
  {
    "label": "GetDesiredReplicationSystem()",
    "kind": "Method",
    "detail": "Function (EReplicationSystem)",
    "insertText": "GetDesiredReplicationSystem(FName InNetDriverDefinition)"
  },
  {
    "label": "OverrideIrisReplicationSystemConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideIrisReplicationSystemConfig(FNetDriverReplicationSystemConfig& OutConfig, bool bIsServer)"
  },
  {
    "label": "BroadcastOnStart()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "BroadcastOnStart()"
  },
  {
    "label": "OnStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStart()"
  },
  {
    "label": "GetMapOverrideName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMapOverrideName(const TCHAR* CmdLine, FString& OverrideMapName)"
  }
]