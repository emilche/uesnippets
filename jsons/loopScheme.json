[
  {
    "label": "GetTopologicalSplitType()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_SDC_LOOP_SCHEME_H # define OPENSUBDIV3_SDC_LOOP_SCHEME_H # include \" . . / version . h \" # include \" . . / sdc / scheme . h \" # include<cassert> # include<cmath> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Sdc { template<> Split Scheme<SCHEME_LOOP)",
    "insertText": "GetTopologicalSplitType()"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumVertexWeights(2)"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumEdgeWeights(0)"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumFaceWeights(0)"
  },
  {
    "label": "SetFaceWeightsForFaceCenters()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetFaceWeightsForFaceCenters(false)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(0)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(1)"
  },
  {
    "label": "assignSmoothMaskForEdge()",
    "kind": "Method",
    "detail": "Function (} template<> template<EDGE,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignSmoothMaskForEdge(EDGE const& edge, MASK& mask)"
  },
  {
    "label": "GetNumFaces()",
    "kind": "Method",
    "detail": "Function (int faceCount = edge .)",
    "insertText": "GetNumFaces()"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumFaceWeights(faceCount)"
  },
  {
    "label": "AreFaceWeightsForFaceCenters()",
    "kind": "Method",
    "detail": "Function (typedef MASK::Weight Weight ; Weight vWeight = mask .)",
    "insertText": "AreFaceWeightsForFaceCenters()"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "FaceWeight(0)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "FaceWeight(1)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (} else { fWeight* = 2 . 0)",
    "insertText": "f(Weight)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "FaceWeight(i)"
  },
  {
    "label": "assignCornerMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} } } template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignCornerMaskForVertex(VERTEX const&, MASK& mask)"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumVertexWeights(1)"
  },
  {
    "label": "assignCreaseMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignCreaseMaskForVertex(VERTEX const& vertex, MASK& mask, int const creaseEnds[2])"
  },
  {
    "label": "GetNumEdges()",
    "kind": "Method",
    "detail": "Function (typedef MASK::Weight Weight ; int valence = vertex .)",
    "insertText": "GetNumEdges()"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumEdgeWeights(valence)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "EdgeWeight(i)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (} mask .)",
    "insertText": "EdgeWeight(creaseEnds[0])"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "EdgeWeight(creaseEnds[1])"
  },
  {
    "label": "assignSmoothMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignSmoothMaskForVertex(VERTEX const& vertex, MASK& mask)"
  },
  {
    "label": "eWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "eWeight(Weight)"
  },
  {
    "label": "vWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "vWeight(Weight)"
  },
  {
    "label": "vWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vWeight(Weight) (1.0f - (eWeight * dValence))"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (} } template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignCornerLimitMask(VERTEX const& , MASK& posMask)"
  },
  {
    "label": "assignCreaseLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignCreaseLimitMask(VERTEX const& vertex, MASK& posMask, int const creaseEnds[2])"
  },
  {
    "label": "vWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "vWeight(Weight) (4.0 / 6.0)"
  },
  {
    "label": "eWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "eWeight(Weight) (1.0 / 6.0)"
  },
  {
    "label": "assignSmoothLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignSmoothLimitMask(VERTEX const& vertex, MASK& posMask)"
  },
  {
    "label": "eWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "eWeight(Weight) (1.0 / 12.0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(1)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(2)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(3)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(4)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(5)"
  },
  {
    "label": "dValence()",
    "kind": "Method",
    "detail": "Function (} else { double)",
    "insertText": "dValence(double)"
  },
  {
    "label": "eWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "eWeight(Weight) (1.0f / (dValence + 3.0f / (8.0f * gamma)))"
  },
  {
    "label": "assignCornerLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} } } template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignCornerLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask)"
  },
  {
    "label": "assignCreaseLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} } template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignCreaseLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask, int const creaseEnds[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} int interiorEdgeCount = creaseEnds [ 1 ] - creaseEnds [ 0 ] - 1 ;)",
    "insertText": "if(interiorEdgeCount == 2)"
  },
  {
    "label": "Root3()",
    "kind": "Method",
    "detail": "Function (Weight const)",
    "insertText": "Root3(Weight)"
  },
  {
    "label": "Root3by2()",
    "kind": "Method",
    "detail": "Function (Weight const)",
    "insertText": "Root3by2(Weight) (Root3 * 0.5)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[0] + 1)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[0] + 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(interiorEdgeCount > 2)"
  },
  {
    "label": "cWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "cWeight(Weight) (-3.0f * std::sin(theta))"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[0] + i) = (Weight) (eCoeff * std::sin(i * theta))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(interiorEdgeCount == 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = creaseEnds[1] + 1; i < valence; ++i)"
  },
  {
    "label": "assignSmoothLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} } template<> template<VERTEX,MASK> void Scheme<SCHEME_LOOP)",
    "insertText": "assignSmoothLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask)"
  },
  {
    "label": "Root3by2()",
    "kind": "Method",
    "detail": "Function (Weight const)",
    "insertText": "Root3by2(Weight)(0.5 * 1.73205080756887729352)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { double alpha = 2 . 0 f* M_PI / valence ;)",
    "insertText": "for(int i = 0; i < valence; ++i)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(i) = (Weight) std::sin(alphaI)"
  }
]