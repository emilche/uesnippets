[
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SLayersViewRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLayersViewRow"
  },
  {
    "label": "ColumnID_LayerLabel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Misc / Attribute . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" LayerViewModel . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" class SButton ; namespace LayersView { const FName)",
    "insertText": "ColumnID_LayerLabel(\"Layer\")"
  },
  {
    "label": "ColumnID_Visibility()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "ColumnID_Visibility(\"Visibility\")"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} class SLayersViewRow : public SMultiColumnTableRow<TSharedPtr<FLayerViewModel>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SLayersViewRow)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, HighlightText ) SLATE_EVENT(FOnDragDetected, OnDragDetected) SLATE_END_ARGS() void Construct( const FArguments& InArgs, TSharedRef< FLayerViewModel > InViewModel, TSharedRef< STableViewBase > InOwnerTableView)"
  },
  {
    "label": "SLayersViewRow()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SLayersViewRow()"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnID)"
  },
  {
    "label": "OnRenameLayerTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameLayerTextCommitted(const FText& InText, ETextCommit::Type eInCommitType)"
  },
  {
    "label": "OnRenameLayerTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRenameLayerTextChanged(const FText& NewText, FText& OutErrorMessage)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (private : FSlateColor)",
    "insertText": "GetColorAndOpacity()"
  },
  {
    "label": "OnToggleVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleVisibility()"
  },
  {
    "label": "ToggleVisibility()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "ToggleVisibility()"
  },
  {
    "label": "GetVisibilityBrushForLayer()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetVisibilityBrushForLayer()"
  }
]