[
  {
    "label": "FTextFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormat"
  },
  {
    "label": "FDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDateTime"
  },
  {
    "label": "FLogTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogTemplate"
  },
  {
    "label": "FLogTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogTime"
  },
  {
    "label": "FLogRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogRecord"
  },
  {
    "label": "CSerializableForLog",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CSerializableForLog"
  },
  {
    "label": "FStaticLogDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLogDynamicData"
  },
  {
    "label": "FStaticLogRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLogRecord"
  },
  {
    "label": "FStaticLocalizedLogRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLocalizedLogRecord"
  },
  {
    "label": "FLogField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogField"
  },
  {
    "label": "TLogFieldName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLogFieldName"
  },
  {
    "label": "FLogFieldCreator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogFieldCreator"
  },
  {
    "label": "TFieldArgType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFieldArgType"
  },
  {
    "label": "UE_LOGFMT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Concepts / Insertable . h \" # include \" Containers / StringFwd . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / OptionalFwd . h \" # include \" Serialization / CompactBinary . h \" # include \" Serialization / CompactBinaryWriter . h \" # include \" Templates / IsArrayOrRefOfType . h \" # include \" Templates / Models . h \" # include \" Templates / Requires . h \" # include \" Templates / UnrealTypeTraits . h \" # include<atomic> # include<type_traits> class FTextFormat ; # define # if ! NO_LOGGING # define)",
    "insertText": "UE_LOGFMT(CategoryName, Verbosity, Format, ...) UE_PRIVATE_LOGFMT_CALL(UE_LOGFMT_EX, (CategoryName, Verbosity, Format UE_PRIVATE_LOGFMT_FIELDS(__VA_ARGS__))) #define UE_LOGFMT_EX(CategoryName, Verbosity, Format, ...) UE_PRIVATE_LOGFMT(CategoryName, Verbosity, Format, ##__VA_ARGS__) #define UE_LOGFMT_LOC(CategoryName, Verbosity, Key, Format, ...) \\ UE_LOGFMT_NSLOC(CategoryName, Verbosity, LOCTEXT_NAMESPACE, Key, Format, ##__VA_ARGS__) #define UE_LOGFMT_NSLOC(CategoryName, Verbosity, Namespace, Key, Format, ...) \\ UE_PRIVATE_LOGFMT_CALL(UE_LOGFMT_NSLOC_EX, (CategoryName, Verbosity, Namespace, Key, Format UE_PRIVATE_LOGFMT_FIELDS(__VA_ARGS__))) #define UE_LOGFMT_LOC_EX(CategoryName, Verbosity, Key, Format, ...) \\ UE_LOGFMT_NSLOC_EX(CategoryName, Verbosity, LOCTEXT_NAMESPACE, Key, Format, ##__VA_ARGS__) #define UE_LOGFMT_NSLOC_EX(CategoryName, Verbosity, Namespace, Key, Format, ...) \\ UE_PRIVATE_LOGFMT_LOC(CategoryName, Verbosity, Namespace, Key, Format, ##__VA_ARGS__) #define UE_LOGFMT_FIELD(Name, Value) UE_PRIVATE_LOGFMT_FIELD((Name, Value)) #define UE_LOGFMT_VALUE(Value) Value #else #define UE_LOGFMT(...) #define UE_LOGFMT_EX(...) #define UE_LOGFMT_LOC(...) #define UE_LOGFMT_NSLOC(...) #define UE_LOGFMT_LOC_EX(...) #define UE_LOGFMT_NSLOC_EX(...) #define UE_LOGFMT_FIELD(Name, Value) #define UE_LOGFMT_VALUE(Value)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (namespace UE { class FLogTemplate ; class FLogTime { public : FLogTime)",
    "insertText": "Now()"
  },
  {
    "label": "FromUtcTime()",
    "kind": "Method",
    "detail": "Function (FLogTime)",
    "insertText": "FromUtcTime(const FDateTime& UtcTime)"
  },
  {
    "label": "FLogTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLogTime()"
  },
  {
    "label": "GetUtcTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetUtcTime()"
  },
  {
    "label": "GetCategory()",
    "kind": "Method",
    "detail": "Function (private : int64 UtcTicks = 0 ; } ; class FLogRecord { public : const FName&)",
    "insertText": "GetCategory()"
  },
  {
    "label": "GetVerbosity()",
    "kind": "Method",
    "detail": "Function (Category = InCategory ; } ELogVerbosity::Type)",
    "insertText": "GetVerbosity()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (Verbosity = InVerbosity ; } const FLogTime&)",
    "insertText": "GetTime()"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (Time = InTime ; } const TCHAR*)",
    "insertText": "GetFormat()"
  },
  {
    "label": "GetFields()",
    "kind": "Method",
    "detail": "Function (Template = InTemplate ; } const FCbObject&)",
    "insertText": "GetFields()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Fields =)",
    "insertText": "MoveTemp(InFields)"
  },
  {
    "label": "GetFile()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "GetFile()"
  },
  {
    "label": "GetLine()",
    "kind": "Method",
    "detail": "Function (File = InFile ; } int32)",
    "insertText": "GetLine()"
  },
  {
    "label": "GetTextNamespace()",
    "kind": "Method",
    "detail": "Function (Line = ; } const TCHAR*)",
    "insertText": "GetTextNamespace()"
  },
  {
    "label": "GetTextKey()",
    "kind": "Method",
    "detail": "Function (TextNamespace = InTextNamespace ; } const TCHAR*)",
    "insertText": "GetTextKey()"
  },
  {
    "label": "FormatMessageTo()",
    "kind": "Method",
    "detail": "Function (TextKey = InTextKey ; } void)",
    "insertText": "FormatMessageTo(FUtf8StringBuilderBase& Out)"
  },
  {
    "label": "FormatMessageTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FormatMessageTo(FWideStringBuilderBase& Out)"
  },
  {
    "label": "DispatchDynamicLogRecord()",
    "kind": "Method",
    "detail": "Function (private : const TCHAR* Format = nullptr ; const ANSICHAR* File = nullptr ; int32 Line = 0 ; FName Category ; ELogVerbosity::Type Verbosity = ELogVerbosity::Log ; FLogTime Time ; FCbObject Fields ; const FLogTemplate* Template = nullptr ; const TCHAR* TextNamespace = nullptr ; const TCHAR* TextKey = nullptr ; } ; void)",
    "insertText": "DispatchDynamicLogRecord(const FLogRecord& Record)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<ValueType)",
    "insertText": "UE_REQUIRES(TModels_V<CInsertable<FCbWriter&>, ValueType>)> inline void SerializeForLog(FCbWriter& Writer, ValueType&& Value)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Writer(ValueType&&)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} struct CSerializableForLog { template<ValueType> auto)",
    "insertText": "Requires(FCbWriter& Writer, ValueType&& Value) -> decltype( SerializeForLog(Writer, (ValueType&&)Value))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} ; template<ValueType)",
    "insertText": "UE_REQUIRES(TModels_V<CSerializableForLog, ValueType>)> inline void CallSerializeForLog(FCbWriter& Writer, ValueType&& Value)"
  },
  {
    "label": "SerializeForLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForLog(Writer, (ValueType&&)Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} } template<ValueType)",
    "insertText": "UE_REQUIRES(TModels_V<UE::CSerializableForLog, ValueType>)> inline void SerializeForLog(FCbWriter& Writer, const TOptional<ValueType>& Optional)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "BeginArray()"
  },
  {
    "label": "CallSerializeForLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallSerializeForLog(Writer, Optional.GetValue())"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (} Writer .)",
    "insertText": "EndArray()"
  },
  {
    "label": "FStaticLogRecord()",
    "kind": "Method",
    "detail": "Function (} namespace UE::Logging::Private { struct FStaticLogDynamicData { std::atomic<FLogTemplate*> Template ; } ; struct FStaticLogRecord { const TCHAR* Format = nullptr ; const ANSICHAR* File = nullptr ; int32 Line = 0 ; ELogVerbosity::Type Verbosity = ELogVerbosity::Log ; FStaticLogDynamicData& DynamicData ;)",
    "insertText": "FStaticLogRecord(const TCHAR* InFormat, const ANSICHAR* InFile, int32 InLine, ELogVerbosity::Type InVerbosity, FStaticLogDynamicData& InDynamicData) : Format(InFormat) , File(InFile) , Line(InLine) , Verbosity(InVerbosity) , DynamicData(InDynamicData)"
  },
  {
    "label": "FStaticLocalizedLogRecord()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStaticLocalizedLogRecord { const TCHAR* TextNamespace = nullptr ; const TCHAR* TextKey = nullptr ; const TCHAR* Format = nullptr ; const ANSICHAR* File = nullptr ; int32 Line = 0 ; ELogVerbosity::Type Verbosity = ELogVerbosity::Log ; FStaticLogDynamicData& DynamicData ;)",
    "insertText": "FStaticLocalizedLogRecord(const TCHAR* InTextNamespace, const TCHAR* InTextKey, const TCHAR* InFormat, const ANSICHAR* InFile, int32 InLine, ELogVerbosity::Type InVerbosity, FStaticLogDynamicData& InDynamicData) : TextNamespace(InTextNamespace) , TextKey(InTextKey) , Format(InFormat) , File(InFile) , Line(InLine) , Verbosity(InVerbosity) , DynamicData(InDynamicData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLogField { using FWriteFn =)",
    "insertText": "void(FCbWriter& Writer, const void* Value)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (const ANSICHAR* Name ; const void* Value ; FWriteFn* WriteValue ; template<ValueType> void)",
    "insertText": "Write(FCbWriter& Writer, const void* Value)"
  },
  {
    "label": "SerializeForLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForLog(Writer, *(const ValueType*)Value)"
  },
  {
    "label": "LogWithNoFields()",
    "kind": "Method",
    "detail": "Function (} } ; } # if ! NO_LOGGING namespace UE::Logging::Private { void)",
    "insertText": "LogWithNoFields(const FLogCategoryBase& Category, const FStaticLogRecord& Log)"
  },
  {
    "label": "LogWithFieldArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogWithFieldArray(const FLogCategoryBase& Category, const FStaticLogRecord& Log, const FLogField* Fields, int32 FieldCount)"
  },
  {
    "label": "FatalLogWithNoFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLogWithNoFields(const FLogCategoryBase& Category, const FStaticLogRecord& Log)"
  },
  {
    "label": "FatalLogWithFieldArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLogWithFieldArray(const FLogCategoryBase& Category, const FStaticLogRecord& Log, const FLogField* Fields, int32 FieldCount)"
  },
  {
    "label": "LogWithNoFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogWithNoFields(const FLogCategoryBase& Category, const FStaticLocalizedLogRecord& Log)"
  },
  {
    "label": "LogWithFieldArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogWithFieldArray(const FLogCategoryBase& Category, const FStaticLocalizedLogRecord& Log, const FLogField* Fields, int32 FieldCount)"
  },
  {
    "label": "FatalLogWithNoFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLogWithNoFields(const FLogCategoryBase& Category, const FStaticLocalizedLogRecord& Log)"
  },
  {
    "label": "FatalLogWithFieldArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLogWithFieldArray(const FLogCategoryBase& Category, const FStaticLocalizedLogRecord& Log, const FLogField* Fields, int32 FieldCount)"
  },
  {
    "label": "CheckFieldName()",
    "kind": "Method",
    "detail": "Function (template<NameType> struct TLogFieldName { NameType Name ; } ; template<NameType> TLogFieldName<NameType>)",
    "insertText": "CheckFieldName(NameType&& Name)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (} struct FLogFieldCreator { template<T> int32 ValueCount = 1 ; template<T> int32 ValueCount<TLogFieldName<T>> = 0 ; template<. . . FieldArgTypes> int32)",
    "insertText": "GetCount()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Create(FLogField* Fields)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<ValueType,. . . FieldArgTypes,std::enable_if_t<ValueCount<ValueType>>* = nullptr> void)",
    "insertText": "Create(FLogField* Fields, const ValueType& Value, FieldArgTypes&&... FieldArgs)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Fields)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (nullptr,& Value,FLogField::Write<std::remove_reference_t<ValueType>> } ;)",
    "insertText": "Create(Fields + 1, (FieldArgTypes&&)FieldArgs...)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<NameType,ValueType,. . . FieldArgTypes> void)",
    "insertText": "Create(FLogField* Fields, TLogFieldName<NameType> Name, const ValueType& Value, FieldArgTypes&&... FieldArgs)"
  },
  {
    "label": "LogWithFields()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TFieldArgType { using Type = TCallTraits<T>::ParamType ; } ; template<NameType> struct TFieldArgType<TLogFieldName<NameType>> { using Type = TLogFieldName<NameType> ; } ; template<. . . FieldArgTypes,LogType> UE_COLD UE_DEBUG_SECTION void)",
    "insertText": "LogWithFields(const FLogCategoryBase& Category, const LogType& Log, typename TFieldArgType<FieldArgTypes>::Type... FieldArgs)"
  },
  {
    "label": "FieldArgTypes()",
    "kind": "Method",
    "detail": "Function (int32 FieldCount = FLogFieldCreator::template GetCount<)",
    "insertText": "FieldArgTypes()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FLogField Fields [ FieldCount ] ;)",
    "insertText": "Create(Fields, (FieldArgTypes&&)FieldArgs...)"
  },
  {
    "label": "LogWithFieldArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogWithFieldArray(Category, Log, Fields, FieldCount)"
  },
  {
    "label": "FatalLogWithFields()",
    "kind": "Method",
    "detail": "Function (} template<. . . FieldArgTypes,LogType> void UE_COLD)",
    "insertText": "FatalLogWithFields(const FLogCategoryBase& Category, const LogType& Log, typename TFieldArgType<FieldArgTypes>::Type... FieldArgs)"
  },
  {
    "label": "FatalLogWithFieldArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLogWithFieldArray(Category, Log, Fields, FieldCount)"
  },
  {
    "label": "LogIfActive()",
    "kind": "Method",
    "detail": "Function (} template<LogCategoryType,ELogVerbosity::Type Verbosity,LogRecordType,. . . FieldArgTypes> void)",
    "insertText": "LogIfActive(const LogCategoryType& Category, const LogRecordType& Log, FieldArgTypes&&... FieldArgs)"
  },
  {
    "label": "FatalLogWithNoFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLogWithNoFields(Category, Log)"
  },
  {
    "label": "FieldArgTypes()",
    "kind": "Method",
    "detail": "Function (} else { FatalLogWithFields<)",
    "insertText": "FieldArgTypes(Category, Log, (FieldArgTypes&&)FieldArgs...)"
  },
  {
    "label": "CA_ASSUME()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CA_ASSUME(false)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr((Verbosity & ELogVerbosity::VerbosityMask) <= ELogVerbosity::COMPILED_IN_MINIMUM_VERBOSITY && (Verbosity & ELogVerbosity::VerbosityMask) <= LogCategoryType::CompileTimeVerbosity)"
  },
  {
    "label": "LogWithNoFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogWithNoFields(Category, Log)"
  },
  {
    "label": "UE_PRIVATE_LOGFMT()",
    "kind": "Method",
    "detail": "Function (} } } } } # define)",
    "insertText": "UE_PRIVATE_LOGFMT(CategoryName, Verbosity, Format, ...)"
  },
  {
    "label": "UE_PRIVATE_LOGFMT_AGGREGATE()",
    "kind": "Method",
    "detail": "Function (\\::UE::Logging::Private::FStaticLogDynamicData LOG_Dynamic ; \\::UE::Logging::Private::FStaticLogRecord LOG_Static)",
    "insertText": "UE_PRIVATE_LOGFMT_AGGREGATE(TEXT(Format), __builtin_FILE(), __builtin_LINE(), ::ELogVerbosity::Verbosity, LOG_Dynamic)"
  },
  {
    "label": "Verbosity()",
    "kind": "Method",
    "detail": "Function (\\::UE::Logging::Private::LogIfActive<FLogCategory # # CategoryName,::)",
    "insertText": "Verbosity(CategoryName, LOG_Static, ##__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "while(false) #define UE_PRIVATE_LOGFMT_LOC(CategoryName, Verbosity, Namespace, Key, Format, ...)"
  },
  {
    "label": "UE_PRIVATE_LOGFMT_AGGREGATE()",
    "kind": "Method",
    "detail": "Function (\\::UE::Logging::Private::FStaticLogDynamicData LOG_Dynamic ; \\::UE::Logging::Private::FStaticLocalizedLogRecord LOG_Static)",
    "insertText": "UE_PRIVATE_LOGFMT_AGGREGATE(TEXT(Namespace), TEXT(Key), TEXT(Format), __builtin_FILE(), __builtin_LINE(), ::ELogVerbosity::Verbosity, LOG_Dynamic)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "while(false) #define UE_PRIVATE_LOGFMT_AGGREGATE(...)"
  }
]