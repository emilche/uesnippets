[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_IMPORTANT_FILE_WRITER_H_ # define BASE_FILES_IMPORTANT_FILE_WRITER_H_ # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / files / file_path . h \" # include \" base / memory / raw_ptr . h \" # include \" base / sequence_checker . h \" # include \" base / strings / string_piece . h \" # include \" base / time / time . h \" # include \" base / timer / timer . h \" # include \" third_party / abseil - cpp / absl / types / variant . h \" namespace base { class SequencedTaskRunner ; class BASE_EXPORT ImportantFileWriter { public : using BackgroundDataProducerCallback = base::OnceCallback<)",
    "insertText": "bool(std::string*)"
  },
  {
    "label": "SerializeData()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT DataSerializer { public : bool)",
    "insertText": "SerializeData(std::string* data)"
  },
  {
    "label": "DataSerializer()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "DataSerializer()"
  },
  {
    "label": "GetSerializedDataProducerForBackgroundSequence()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT BackgroundDataSerializer { public : BackgroundDataProducerCallback)",
    "insertText": "GetSerializedDataProducerForBackgroundSequence()"
  },
  {
    "label": "BackgroundDataSerializer()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "BackgroundDataSerializer()"
  },
  {
    "label": "WriteFileAtomically()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "WriteFileAtomically(const FilePath& path, StringPiece data, StringPiece histogram_suffix = StringPiece())"
  },
  {
    "label": "ImportantFileWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportantFileWriter(const FilePath& path, scoped_refptr<SequencedTaskRunner> task_runner, StringPiece histogram_suffix = StringPiece())"
  },
  {
    "label": "ImportantFileWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportantFileWriter(const FilePath& path, scoped_refptr<SequencedTaskRunner> task_runner, TimeDelta interval, StringPiece histogram_suffix = StringPiece())"
  },
  {
    "label": "ImportantFileWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportantFileWriter(const ImportantFileWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ImportantFileWriter&)",
    "insertText": "operator(const ImportantFileWriter&)"
  },
  {
    "label": "ImportantFileWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ImportantFileWriter()"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (const FilePath&)",
    "insertText": "path()"
  },
  {
    "label": "WriteNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNow(std::unique_ptr<std::string> data)"
  },
  {
    "label": "ScheduleWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWrite(DataSerializer* serializer)"
  },
  {
    "label": "ScheduleWriteWithBackgroundDataSerializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWriteWithBackgroundDataSerializer(BackgroundDataSerializer* serializer)"
  },
  {
    "label": "DoScheduledWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoScheduledWrite()"
  },
  {
    "label": "RegisterOnNextWriteCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnNextWriteCallbacks(OnceClosure before_next_write_callback, OnceCallback<void(bool success)> after_next_write_callback)"
  },
  {
    "label": "commit_interval()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "commit_interval()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(UNIT_TEST) size_t previous_data_size()"
  },
  {
    "label": "timer()",
    "kind": "Method",
    "detail": "Function (previous_data_size_ = previous_data_size ; } private : const OneShotTimer&)",
    "insertText": "timer()"
  },
  {
    "label": "ProduceAndWriteStringToFileAtomically()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProduceAndWriteStringToFileAtomically(const FilePath& path, BackgroundDataProducerCallback data_producer_for_background_sequence, OnceClosure before_write_callback, OnceCallback<void(bool success)> after_write_callback, const std::string& histogram_suffix)"
  },
  {
    "label": "WriteFileAtomicallyImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFileAtomicallyImpl(const FilePath& path, StringPiece data, StringPiece histogram_suffix, bool from_instance)"
  },
  {
    "label": "ClearPendingWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingWrite()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (OnceClosure before_next_write_callback_ ; OnceCallback<)",
    "insertText": "void(bool success)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (const FilePath path_ ; const scoped_refptr<SequencedTaskRunner> task_runner_ ; OneShotTimer timer_ ; raw_ptr<OneShotTimer> timer_override_ = nullptr ; absl::variant<absl::monostate,DataSerializer*,BackgroundDataSerializer*> serializer_ ; const TimeDelta commit_interval_ ; const std::string histogram_suffix_ ; size_t previous_data_size_ = 0 ;)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]