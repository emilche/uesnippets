[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HbrCatmarkSubdivision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrCatmarkSubdivision"
  },
  {
    "label": "TriangleSubdivision",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TriangleSubdivision"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Refine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refine(HbrMesh<T>* mesh, HbrFace<T>* face)"
  },
  {
    "label": "GuaranteeNeighbor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GuaranteeNeighbor(HbrMesh<T>* mesh, HbrHalfedge<T>* edge)"
  },
  {
    "label": "GuaranteeNeighbors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GuaranteeNeighbors(HbrMesh<T>* mesh, HbrVertex<T>* vertex)"
  },
  {
    "label": "HasLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLimit(HbrMesh<T>* mesh, HbrFace<T>* face)"
  },
  {
    "label": "HasLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLimit(HbrMesh<T>* mesh, HbrHalfedge<T>* edge)"
  },
  {
    "label": "HasLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLimit(HbrMesh<T>* mesh, HbrVertex<T>* vertex)"
  },
  {
    "label": "transferFVarToChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transferFVarToChild(HbrMesh<T>* mesh, HbrFace<T>* face, HbrFace<T>* child, int index)"
  },
  {
    "label": "transferEditsToChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transferEditsToChild(HbrFace<T>* face, HbrFace<T>* child, int index)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (vertex)",
    "insertText": "assert(0)"
  },
  {
    "label": "GuaranteeNeighbor()",
    "kind": "Method",
    "detail": "Function (well)",
    "insertText": "GuaranteeNeighbor(mesh, parentEdge)"
  },
  {
    "label": "Refine()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "Refine(mesh, parentFace)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (curves)",
    "insertText": "for(int i = 0; i < face->GetNumVertices()"
  }
]