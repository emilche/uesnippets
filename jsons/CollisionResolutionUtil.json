[
  {
    "label": "FBVHParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBVHParticles"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Pair . h \" namespace Chaos { class FBVHParticles ; class FImplicitObject ; class FPBDCollisionConstraint ; namespace Collisions { FRigidTransform3)",
    "insertText": "GetTransform(const TGeometryParticleHandle<FReal, 3>* Particle)"
  },
  {
    "label": "ComputeFactorMatrix3()",
    "kind": "Method",
    "detail": "Function (template<TRealType> TMatrix33<TRealType>)",
    "insertText": "ComputeFactorMatrix3(const TVec3<TRealType>& V, const TMatrix33<TRealType>& M, const TRealType Im)"
  },
  {
    "label": "ComputeFactorDiagonal3()",
    "kind": "Method",
    "detail": "Function (} template<TRealType> TVec3<TRealType>)",
    "insertText": "ComputeFactorDiagonal3(const TVec3<TRealType>& V, const TMatrix33<TRealType>& M, const TRealType Im)"
  },
  {
    "label": "GetEnergyClampedImpulse()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetEnergyClampedImpulse(const TPBDRigidParticleHandle<FReal, 3>* PBDRigid0, const TPBDRigidParticleHandle<FReal, 3>* PBDRigid1, const FVec3& Impulse, const FVec3& VectorToPoint1, const FVec3& VectorToPoint2, const FVec3& Velocity1, const FVec3& Velocity2)"
  },
  {
    "label": "GetEnergyClampedImpulse()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetEnergyClampedImpulse(const FVec3& Impulse, FReal InvM0, const FMatrix33& InvI0, FReal InvM1, const FMatrix33& InvI1, const FRotation3& Q0, const FVec3& V0, const FVec3& W0, const FRotation3& Q1, const FVec3& V1, const FVec3& W1, const FVec3& ContactOffset0, const FVec3& ContactOffset1, const FVec3& ContactVelocity0, const FVec3& ContactVelocity1)"
  },
  {
    "label": "SampleObjectNoNormal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SampleObjectNoNormal(const FImplicitObject& Object, const FRigidTransform3& ObjectTransform, const FRigidTransform3& SampleToObjectTransform, const FVec3& SampleParticle, FReal Thickness, FContactPoint& ContactPoint)"
  },
  {
    "label": "SampleObjectNormalAverageHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SampleObjectNormalAverageHelper(const FImplicitObject& Object, const FRigidTransform3& ObjectTransform, const FRigidTransform3& SampleToObjectTransform, const FVec3& SampleParticle, FReal Thickness, FReal& TotalThickness, FContactPoint& ContactPoint)"
  },
  {
    "label": "SampleObject()",
    "kind": "Method",
    "detail": "Function (template<ECollisionUpdateType UpdateType> FContactPoint)",
    "insertText": "SampleObject(const FImplicitObject& Object, const FRigidTransform3& ObjectTransform, const FBVHParticles& SampleParticles, const FRigidTransform3& SampleParticlesTransform, FReal Thickness)"
  },
  {
    "label": "FindRelevantShapes()",
    "kind": "Method",
    "detail": "Function (TArray<Pair<const FImplicitObject*,FRigidTransform3>>)",
    "insertText": "FindRelevantShapes(const FImplicitObject* ParticleObj, const FRigidTransform3& ParticlesTM, const FImplicitObject& LevelsetObj, const FRigidTransform3& LevelsetTM, const FReal Thickness)"
  }
]