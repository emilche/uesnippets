[
  {
    "label": "FInstancedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedStruct"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "FItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FItem"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StructUtils / StructView . h \" # include \" InstancedStructContainer . generated . h \" struct FInstancedStruct ; class FReferenceCollector ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FItem()"
  },
  {
    "label": "FItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FItem(const UScriptStruct* InScriptStruct, const int32 InOffset) : ScriptStruct(InScriptStruct), Offset(InOffset)"
  },
  {
    "label": "GetStructureSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetStructureSize()"
  },
  {
    "label": "GetMinAlignment()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMinAlignment()"
  },
  {
    "label": "GetEndOffset()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEndOffset()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<const UScriptStruct> ScriptStruct = nullptr ; int32 Offset = 0 ; } ; public : int32 OverheadPerItem =)",
    "insertText": "sizeof(FItem)"
  },
  {
    "label": "FInstancedStructContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstancedStructContainer()"
  },
  {
    "label": "FInstancedStructContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstancedStructContainer(const FInstancedStructContainer& InOther)"
  },
  {
    "label": "FInstancedStructContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstancedStructContainer(FInstancedStructContainer&& InOther)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FInstancedStructContainer&)",
    "insertText": "operator(const FInstancedStructContainer& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstancedStructContainer&)",
    "insertText": "operator(FInstancedStructContainer&& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstancedStructContainer&)",
    "insertText": "operator(TConstArrayView<FInstancedStruct> InItems)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstancedStructContainer&)",
    "insertText": "operator(TConstArrayView<FStructView> InItems)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstancedStructContainer&)",
    "insertText": "operator(TConstArrayView<FConstStructView> InItems)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FInstancedStructContainer& Other)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(TConstArrayView<FInstancedStruct> NewItemValues)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(TConstArrayView<FConstStructView> NewItemValues)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAt(const int32 InsertAtIndex, const FInstancedStructContainer& Other)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAt(const int32 InsertAtIndex, TConstArrayView<FInstancedStruct> ValuesToInsert)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAt(const int32 InsertAtIndex, TConstArrayView<FStructView> ValuesToInsert)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAt(const int32 InsertAtIndex, TConstArrayView<FConstStructView> ValuesToInsert)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(const int32 RemoveAtIndex, const int32 Count)"
  },
  {
    "label": "ReserveBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveBytes(const int32 NumBytes, const int32 MinAlignment = DefaultMinAlignment)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNum(const int32 NewNum)"
  },
  {
    "label": "GetAllocatedMemory()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAllocatedMemory()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (const FItem& Item =)",
    "insertText": "GetItem(Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStructView)",
    "insertText": "operator(const int32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> struct TIterator { using StructViewType = std::conditional_t<TIsConst<T>::Value,FConstStructView,FStructView> ; StructViewType)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Index - - ; return* this ; } bool)",
    "insertText": "operator(const TIterator& RHS)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "RemoveAt(Index, 1)"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (Index - - ; } private :)",
    "insertText": "TIterator(T& InContainer, const int32 InIndex = 0) : Container(InContainer) , Index(InIndex)"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (} T& Container ; int32 Index = 0 ; FInstancedStructContainer ; } ; using FIterator = TIterator<FInstancedStructContainer> ; using FConstIterator = TIterator<const FInstancedStructContainer> ; FIterator)",
    "insertText": "CreateIterator()"
  },
  {
    "label": "CreateConstIterator()",
    "kind": "Method",
    "detail": "Function (} FConstIterator)",
    "insertText": "CreateConstIterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} FIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FIterator)",
    "insertText": "end()"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddStructReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FInstancedStructContainer* Other, uint32 PortFlags)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FInstancedStructContainer const& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText, FArchive* InSerializingArchive = nullptr)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (private : int32 DefaultMinAlignment =)",
    "insertText": "alignof(void*)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 ItemStride = static_cast<)",
    "insertText": "int32(Align(sizeof(FItem), alignof(FItem)))"
  },
  {
    "label": "GetItemOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetItemOffset(const int32 Index)"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (} FItem&)",
    "insertText": "GetItem(const int32 Index)"
  },
  {
    "label": "AllocatedSize()",
    "kind": "Method",
    "detail": "Function (const int32 Offset =)",
    "insertText": "AllocatedSize((Index + 1) * ItemStride)"
  }
]