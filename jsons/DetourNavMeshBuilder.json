[
  {
    "label": "dtOffMeshLinkCreateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtOffMeshLinkCreateParams"
  },
  {
    "label": "dtDynamicAreaCreateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtDynamicAreaCreateParams"
  },
  {
    "label": "dtNavMeshCreateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtNavMeshCreateParams"
  },
  {
    "label": "dtCreateNavMeshData()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURNAVMESHBUILDER_H # define DETOURNAVMESHBUILDER_H # include \" CoreMinimal . h \" # include \" Detour / DetourAlloc . h \" # include \" DetourLargeWorldCoordinates . h \" struct dtOffMeshLinkCreateParams { dtReal vertsA0 [ 3 ] ; dtReal vertsA1 [ 3 ] ; dtReal vertsB0 [ 3 ] ; dtReal vertsB1 [ 3 ] ; dtReal snapRadius ; dtReal snapHeight ; unsigned long long int userID ; unsigned short polyFlag ; unsigned char area ; unsigned char type ; } ; struct dtDynamicAreaCreateParams { unsigned char area ; dtReal minH ; dtReal maxH ; dtChunkArray<dtReal> verts ; } ; struct dtNavMeshCreateParams { const unsigned short* verts ; int vertCount ; const unsigned short* polys ; const unsigned short* polyFlags ; const unsigned char* polyAreas ; int polyCount ; int nvp ; # if WITH_NAVMESH_CLUSTER_LINKS unsigned short* polyClusters ; unsigned short clusterCount ; # endif const unsigned int* detailMeshes ; const dtReal* detailVerts ; int detailVertsCount ; const unsigned char* detailTris ; int detailTriCount ; const dtOffMeshLinkCreateParams* offMeshCons ; int offMeshConCount ; const dtDynamicAreaCreateParams* dynamicAreas ; int dynamicAreaCount ; unsigned int userId ; int tileX ; int tileY ; int tileLayer ; dtReal bmin [ 3 ] ; dtReal bmax [ 3 ] ; dtReal walkableHeight ; dtReal walkableRadius ; dtReal walkableClimb ; dtReal cs ; dtReal ch ; unsigned char tileResolutionLevel ; bool buildBvTree ; } ; bool)",
    "insertText": "dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData, int* outDataSize)"
  },
  {
    "label": "dtNavMeshHeaderSwapEndian()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtNavMeshHeaderSwapEndian(unsigned char* data, const int dataSize)"
  },
  {
    "label": "dtNavMeshDataSwapEndian()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtNavMeshDataSwapEndian(unsigned char* data, const int dataSize)"
  },
  {
    "label": "dtTransformTileData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtTransformTileData(unsigned char* data, const int dataSize, const int offsetX, const int offsetY, const dtReal tileWidth, const dtReal tileHeight, const dtReal rotationDeg, const dtReal bvQuantFactor)"
  },
  {
    "label": "dtComputeTileOffsetFromRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtComputeTileOffsetFromRotation(const dtReal* position, const dtReal* rotationCenter, const dtReal rotationDeg, const dtReal tileWidth, const dtReal tileHeight, int& deltaX, int& deltaY)"
  }
]