[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FCascade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCascade"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SCascadeEmitterCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCascadeEmitterCanvas"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UParticleEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleEmitter"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FInputKeyEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyEventArgs"
  },
  {
    "label": "FCascadeEmitterCanvasClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCascadeEmitterCanvasClient"
  },
  {
    "label": "ECascadeModuleMoveMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECascadeModuleMoveMode"
  },
  {
    "label": "ECascadeIcons",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECascadeIcons"
  },
  {
    "label": "ECascadeModuleSelection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECascadeModuleSelection"
  },
  {
    "label": "UParticleModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModule"
  },
  {
    "label": "FCascadeEmitterCanvasClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" EditorViewportClient . h \" # include \" Math / Color . h \" # include \" Math / IntPoint . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" Particles / ParticleModule . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" class FCanvas ; class FCascade ; class FMenuBuilder ; class FTexture ; class FViewport ; class SCascadeEmitterCanvas ; class SWidget ; class UParticleEmitter ; class UTexture2D ; struct FInputKeyEventArgs ; class FCascadeEmitterCanvasClient : public FEditorViewportClient { public :)",
    "insertText": "FCascadeEmitterCanvasClient(TSharedPtr<FCascade> InCascade, TWeakPtr<SCascadeEmitterCanvas> InCascadeViewport)"
  },
  {
    "label": "FCascadeEmitterCanvasClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCascadeEmitterCanvasClient()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& EventArgs)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapturedMouseMove(FViewport* Viewport, int32 X, int32 Y)"
  },
  {
    "label": "GetViewportVerticalScrollBarRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewportVerticalScrollBarRatio()"
  },
  {
    "label": "GetViewportHorizontalScrollBarRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewportHorizontalScrollBarRatio()"
  },
  {
    "label": "GetDraggedModule()",
    "kind": "Method",
    "detail": "Function (UParticleModule*)",
    "insertText": "GetDraggedModule()"
  },
  {
    "label": "GetDraggedModules()",
    "kind": "Method",
    "detail": "Function (TArray<UParticleModule*>&)",
    "insertText": "GetDraggedModules()"
  },
  {
    "label": "UpdateScrollBars()",
    "kind": "Method",
    "detail": "Function (private : enum ECascadeModuleMoveMode { MoveMode_None,MoveMode_Move,MoveMode_Instance,MoveMode_Copy } ; enum ECascadeIcons { Icon_RenderNormal = 0,Icon_RenderCross,Icon_RenderPoint,Icon_RenderNone,Icon_RenderLights,Icon_CurveEdit,Icon_3DDrawEnabled,Icon_3DDrawDisabled,Icon_ModuleEnabled,Icon_ModuleDisabled,Icon_SoloEnabled,Icon_SoloDisabled,Icon_COUNT } ; enum ECascadeModuleSelection { Selection_Unselected = 0,Selection_Selected = 1,Selection_COUNT = 2 } ; void)",
    "insertText": "UpdateScrollBars()"
  },
  {
    "label": "ChangeViewportScrollBarPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeViewportScrollBarPosition(EScrollDirection Direction)"
  },
  {
    "label": "GetViewportScrollBarPositions()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetViewportScrollBarPositions()"
  },
  {
    "label": "DrawEmitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEmitter(int32 Index, int32 XPos, UParticleEmitter* Emitter, FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "DrawHeaderBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHeaderBlock(int32 Index, int32 XPos, UParticleEmitter* Emitter, FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "DrawCollapsedHeaderBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCollapsedHeaderBlock(int32 Index, int32 XPos, UParticleEmitter* Emitter, FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "DrawTypeDataBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTypeDataBlock(int32 XPos, UParticleEmitter* Emitter, FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "DrawRequiredBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRequiredBlock(int32 XPos, UParticleEmitter* Emitter, FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "DrawSpawnBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSpawnBlock(int32 XPos, UParticleEmitter* Emitter, FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "DrawModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawModule(int32 XPos, int32 YPos, UParticleEmitter* Emitter, UParticleModule* Module, FViewport* Viewport, FCanvas* Canvas, bool bDrawEnableButton = true)"
  },
  {
    "label": "DrawModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawModule(FCanvas* Canvas, UParticleModule* Module, FColor ModuleBkgColor, UParticleEmitter* Emitter)"
  },
  {
    "label": "DrawDraggedModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDraggedModule(UParticleModule* Module, FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "DrawCurveButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurveButton(UParticleEmitter* Emitter, UParticleModule* Module, bool bHitTesting, FCanvas* Canvas)"
  },
  {
    "label": "DrawColorButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawColorButton(int32 XPos, UParticleEmitter* Emitter, UParticleModule* Module, bool bHitTesting, FCanvas* Canvas)"
  },
  {
    "label": "Draw3DDrawButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw3DDrawButton(UParticleEmitter* Emitter, UParticleModule* Module, bool bHitTesting, FCanvas* Canvas)"
  },
  {
    "label": "DrawEnableButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEnableButton(UParticleEmitter* Emitter, UParticleModule* Module, bool bHitTesting, FCanvas* Canvas)"
  },
  {
    "label": "DrawModuleDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawModuleDump(FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "FindDesiredModulePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindDesiredModulePosition(const FIntPoint& Pos, class UParticleEmitter* &OutEmitter, int32 &OutIndex)"
  },
  {
    "label": "FindModuleTopLeft()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "FindModuleTopLeft(class UParticleEmitter* Emitter, class UParticleModule* Module, FViewport* Viewport)"
  },
  {
    "label": "RemoveFromDraggedList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromDraggedList(UParticleModule* Module)"
  },
  {
    "label": "GetIconTexture()",
    "kind": "Method",
    "detail": "Function (FTexture*)",
    "insertText": "GetIconTexture(ECascadeIcons eIcon)"
  },
  {
    "label": "OpenModuleMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenModuleMenu()"
  },
  {
    "label": "OpenEmitterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenEmitterMenu()"
  },
  {
    "label": "OpenBackgroundMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenBackgroundMenu()"
  },
  {
    "label": "BuildMenuWidgetModule()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuWidgetModule()"
  },
  {
    "label": "BuildMenuWidgetEmitter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuWidgetEmitter()"
  },
  {
    "label": "BuildMenuWidgetBackround()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuWidgetBackround()"
  },
  {
    "label": "BuildNewModuleDataTypeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNewModuleDataTypeMenu(FMenuBuilder& Menu)"
  },
  {
    "label": "BuildNewModuleSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNewModuleSubMenu(FMenuBuilder& Menu, int32 i)"
  },
  {
    "label": "HasValidChildModules()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidChildModules(int32 i)"
  },
  {
    "label": "InitializeModuleEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeModuleEntries()"
  },
  {
    "label": "IsModuleSuitableForModuleMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModuleSuitableForModuleMenu(FString& InModuleName)"
  },
  {
    "label": "IsBaseModuleTypeDataPairSuitableForModuleMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBaseModuleTypeDataPairSuitableForModuleMenu(FString& InModuleName)"
  },
  {
    "label": "IsModuleTypeDataPairSuitableForModuleMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModuleTypeDataPairSuitableForModuleMenu(FString& InModuleName)"
  },
  {
    "label": "UpdateViewportClientWindowDPIScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateViewportClientWindowDPIScale()"
  }
]