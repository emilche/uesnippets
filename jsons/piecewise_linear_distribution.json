[
  {
    "label": "_RealType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RealType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_InputIteratorB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIteratorB"
  },
  {
    "label": "_InputIteratorW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIteratorW"
  },
  {
    "label": "_UnaryOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UnaryOperation"
  },
  {
    "label": "piecewise_linear_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "piecewise_linear_distribution"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_RT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RT"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_PIECEWISE_LINEAR_DISTRIBUTION_H # define _LIBCPP___RANDOM_PIECEWISE_LINEAR_DISTRIBUTION_H # include<__algorithm / upper_bound . h> # include<__config> # include<__random / is_valid . h> # include<__random / uniform_real_distribution . h> # include<iosfwd> # include<numeric> # include<vector> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (public : typedef _RealType result_type ; class _LIBCPP_TEMPLATE_VIS param_type { vector<result_type> __b_ ; vector<result_type> __densities_ ; vector<result_type> __areas_ ; public : typedef piecewise_linear_distribution distribution_type ;)",
    "insertText": "param_type()"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (template<class _InputIteratorB,class _InputIteratorW>)",
    "insertText": "param_type(_InputIteratorB __f_b, _InputIteratorB __l_b, _InputIteratorW __f_w)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_CXX03_LANG template<class _UnaryOperation>)",
    "insertText": "param_type(initializer_list<result_type> __bl, _UnaryOperation __fw)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# endif template<class _UnaryOperation>)",
    "insertText": "param_type(size_t __nw, result_type __xmin, result_type __xmax, _UnaryOperation __fw)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "param_type(param_type const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (param_type&)",
    "insertText": "operator(const param_type& __rhs)"
  },
  {
    "label": "intervals()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY vector<result_type>)",
    "insertText": "intervals()"
  },
  {
    "label": "__init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "__init()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class piecewise_linear_distribution ; template<class _CharT,class _Traits,class _RT> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const piecewise_linear_distribution<_RT>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _RT> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, piecewise_linear_distribution<_RT>& __x)"
  },
  {
    "label": "piecewise_linear_distribution()",
    "kind": "Method",
    "detail": "Function (} ; private : param_type __p_ ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "piecewise_linear_distribution()"
  },
  {
    "label": "piecewise_linear_distribution()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIteratorB,class _InputIteratorW> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "piecewise_linear_distribution(_InputIteratorB __f_b, _InputIteratorB __l_b, _InputIteratorW __f_w) : __p_(__f_b, __l_b, __f_w)"
  },
  {
    "label": "piecewise_linear_distribution()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG template<class _UnaryOperation> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "piecewise_linear_distribution(initializer_list<result_type> __bl, _UnaryOperation __fw) : __p_(__bl, __fw)"
  },
  {
    "label": "piecewise_linear_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _UnaryOperation> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "piecewise_linear_distribution(size_t __nw, result_type __xmin, result_type __xmax, _UnaryOperation __fw) : __p_(__nw, __xmin, __xmax, __fw)"
  },
  {
    "label": "piecewise_linear_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "piecewise_linear_distribution(const param_type& __p) : __p_(__p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> result_type)",
    "insertText": "operator()(_URNG& __g, const param_type& __p)"
  },
  {
    "label": "densities()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY vector<result_type>)",
    "insertText": "densities()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY param_type)",
    "insertText": "param()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__p_ = __p ; } _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "max()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const piecewise_linear_distribution& __x, const piecewise_linear_distribution& __y)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (__b_ .)",
    "insertText": "reserve(__rhs.__b_.size ())"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (__densities_ .)",
    "insertText": "reserve(__rhs.__densities_.size())"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (__areas_ .)",
    "insertText": "reserve(__rhs.__areas_.size())"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (__areas_ .)",
    "insertText": "assign(__densities_.size() - 1, result_type())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (result_type _Sp = 0 ;)",
    "insertText": "for(size_t __i = 0; __i < __areas_.size(); ++__i)"
  },
  {
    "label": "__i()",
    "kind": "Method",
    "detail": "Function (__areas_ [)",
    "insertText": "__i(__densities_[__i+1] + __densities_[__i]) * (__b_[__i+1] - __b_[__i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_Sp + = __areas_ [ __i ] ; })",
    "insertText": "for(size_t __i = __areas_.size(); __i > 1;)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - __i ; __areas_ [ __i ] = __areas_ [ __i - 1 ] / _Sp ; } __areas_ [ 0 ] = 0 ;)",
    "insertText": "for(size_t __i = 1; __i < __areas_.size(); ++__i)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (} template<class _RealType> piecewise_linear_distribution<_RealType>::)",
    "insertText": "param_type() : __b_(2), __densities_(2, 1.0), __areas_(1, 0.0)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (__b_ [ 1 ] = 1 ; } template<class _RealType> template<class _InputIteratorB,class _InputIteratorW> piecewise_linear_distribution<_RealType>::)",
    "insertText": "param_type(_InputIteratorB __f_b, _InputIteratorB __l_b, _InputIteratorW __f_w) : __b_(__f_b, __l_b)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (__b_ .)",
    "insertText": "resize(2)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (__b_ [ 0 ] = 0 ; __b_ [ 1 ] = 1 ; __densities_ .)",
    "insertText": "assign(2, 1.0)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (__areas_ .)",
    "insertText": "assign(1, 0.0)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} else { __densities_ .)",
    "insertText": "reserve(__b_.size())"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (} } # ifndef _LIBCPP_CXX03_LANG template<class _RealType> template<class _UnaryOperation> piecewise_linear_distribution<_RealType>::)",
    "insertText": "param_type(initializer_list<result_type> __bl, _UnaryOperation __fw) : __b_(__bl.begin(), __bl.end())"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (} } # endif template<class _RealType> template<class _UnaryOperation> piecewise_linear_distribution<_RealType>::)",
    "insertText": "param_type(size_t __nw, result_type __xmin, result_type __xmax, _UnaryOperation __fw) : __b_(__nw == 0 ? 2 : __nw + 1)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t __n = __b_ .)",
    "insertText": "size()"
  },
  {
    "label": "__d()",
    "kind": "Method",
    "detail": "Function (result_type)",
    "insertText": "__d(__xmax - __xmin)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (__b_ [ __i ] = __xmin + __i* __d ; __densities_ .)",
    "insertText": "push_back(__fw(__b_[__i]))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} __b_ [ __n ] = __xmax ; __densities_ .)",
    "insertText": "push_back(__fw(__b_[__n]))"
  },
  {
    "label": "_Gen()",
    "kind": "Method",
    "detail": "Function (typedef uniform_real_distribution<result_type> _Gen ; result_type __u =)",
    "insertText": "_Gen()(__g)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (ptrdiff_t __k =)",
    "insertText": "upper_bound(__p.__areas_.begin(), __p.__areas_.end(), __u) - __p.__areas_.begin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__u - = __p . __areas_ [ __k ] ; const result_type __dk = __p . __densities_ [ __k ] ; const result_type __dk1 = __p . __densities_ [ __k + 1 ] ; const result_type __deltad = __dk1 - __dk ; const result_type __bk = __p . __b_ [ __k ] ;)",
    "insertText": "if(__deltad == 0)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const result_type __bk1 = __p . __b_ [ __k + 1 ] ; const result_type __deltab = __bk1 - __bk ;)",
    "insertText": "return(__bk * __dk1 - __bk1 * __dk + _VSTD::sqrt(__deltab * (__deltab * __dk * __dk + 2 * __deltad * __u)))"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _OStream ; __os .)",
    "insertText": "flags(_OStream::dec | _OStream::left | _OStream::fixed | _OStream::scientific)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__os<<__n ;)",
    "insertText": "for(size_t __i = 0; __i < __n; ++__i)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (typedef piecewise_linear_distribution<_RT> _Eng ; typedef _Eng::result_type result_type ; __save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "__b()",
    "kind": "Method",
    "detail": "Function (size_t __n ; __is>> __n ; vector<result_type>)",
    "insertText": "__b(__n)"
  },
  {
    "label": "__densities()",
    "kind": "Method",
    "detail": "Function (__is>> __n ; vector<result_type>)",
    "insertText": "__densities(__n)"
  },
  {
    "label": "__areas()",
    "kind": "Method",
    "detail": "Function (__is>> __n ; vector<result_type>)",
    "insertText": "__areas(__n)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__x.__p_.__b_, __b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__x.__p_.__densities_, __densities)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__x.__p_.__areas_, __areas)"
  }
]