[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBlockRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockRange"
  },
  {
    "label": "FRangeId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRangeId"
  },
  {
    "label": "FDataReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataReference"
  },
  {
    "label": "FBlockFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockFile"
  },
  {
    "label": "FVirtualFileCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualFileCache"
  },
  {
    "label": "IFileTableReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IFileTableReader"
  },
  {
    "label": "FFileTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileTable"
  },
  {
    "label": "FBlockRangeSortStartIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockRangeSortStartIndex"
  },
  {
    "label": "FBlockRangeSortSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockRangeSortSize"
  },
  {
    "label": "FRWOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWOp"
  },
  {
    "label": "FLruCacheNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLruCacheNode"
  },
  {
    "label": "FLruCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLruCache"
  },
  {
    "label": "FFileTableLockingReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileTableLockingReference"
  },
  {
    "label": "FVirtualFileCacheThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualFileCacheThread"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VirtualFileCache . h \" # include \" CoreMinimal . h \" # include \" HAL / FileManager . h \" # include \" HAL / Runnable . h \" # include \" Logging / LogMacros . h \" # include \" Misc / Paths . h \" # include \" Misc / ScopeExit . h \" # include \" Misc / ScopeRWLock . h \" # include \" Async / MappedFileHandle . h \" # include \" Async / Future . h \" # include \" Containers / IntrusiveDoubleLinkedList . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVFC, Log, All)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"VFC\"), STATGROUP_VFC, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Files Added\"), STAT_FilesAdded, STATGROUP_VFC,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Bytes Added\"), STAT_BytesAdded, STATGROUP_VFC,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Files Removed\"), STAT_FilesRemoved, STATGROUP_VFC,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Bytes Removed\"), STAT_BytesRemoved, STATGROUP_VFC,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Files Evicted\"), STAT_FilesEvicted, STATGROUP_VFC,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Bytes Evicted\"), STAT_BytesEvicted, STATGROUP_VFC,)"
  },
  {
    "label": "Touch()",
    "kind": "Method",
    "detail": "Function (double VFC_ALLOWED_FRAGMENTATION = 4 . 0 f ; uint64 VFC_BLOCK_SIZE_MIN = 1 ; uint64 VFC_BLOCK_SIZE_MAX = 1<<2 4 ; using FMappedRange = TUniquePtr<IMappedFileRegion> ; enum class EVFCFileVersion { Invalid,Initial,Count,Current = Count - 1,} ; struct FBlockRange { int32 StartIndex ; int32 NumBlocks ; } ; struct FRangeId { int32 FileId ; FBlockRange Range ; } ; struct FDataReference { TArray<FRangeId> Ranges ; uint32 TotalSize = 0 ; int64 LastReferencedUnixTime = 0 ; void)",
    "insertText": "Touch()"
  },
  {
    "label": "FRWLock()",
    "kind": "Method",
    "detail": "Function (} ; struct FBlockFile { EVFCFileVersion FileVersion = EVFCFileVersion::Current ; int32 FileId = 0 ; int32 BlockSize = 0 ; int32 NumBlocks = 0 ; TArray<FBlockRange> FreeRanges ; TArray<FBlockRange> UsedRanges ; TUniquePtr<IFileHandle> WriteHandle ; TUniquePtr<IMappedFileHandle> MapHandle ; bool bWriteLocked = false ; TUniquePtr<FRWLock> FileHandleLock = MakeUnique<)",
    "insertText": "FRWLock()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (FileId = 0 ; BlockSize = 0 ; NumBlocks = 0 ; FreeRanges .)",
    "insertText": "Empty()"
  },
  {
    "label": "IFileTableReader()",
    "kind": "Method",
    "detail": "Function (} } ; using FFileMap = TMap<VFCKey,FDataReference> ; struct FVirtualFileCache ; struct IFileTableReader { ~)",
    "insertText": "IFileTableReader()"
  },
  {
    "label": "ValidateRanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateRanges()"
  },
  {
    "label": "FindDataReference()",
    "kind": "Method",
    "detail": "Function (const FDataReference*)",
    "insertText": "FindDataReference(const VFCKey& Id)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<TArray<uint8>>)",
    "insertText": "ReadData(VFCKey Id, int64 ReadOffset = 0, int64 ReadSizeOrZero = 0)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const VFCKey& Id)"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkExist(const VFCKey& Id)"
  },
  {
    "label": "CurrentFragmentation()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CurrentFragmentation()"
  },
  {
    "label": "GetUsedSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetUsedSize()"
  },
  {
    "label": "GetTotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTotalSize()"
  },
  {
    "label": "FFileTable()",
    "kind": "Method",
    "detail": "Function (} ; struct FFileTable : IFileTableReader {)",
    "insertText": "FFileTable(FVirtualFileCache* InParent) : Parent(InParent)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} private : FVirtualFileCache* Parent ; EVFCFileVersion FileVersion = EVFCFileVersion::Current ; TArray<FBlockFile> BlockFiles ; FFileMap FileMap ; int64 TotalSize = - 1 ; int64 UsedSize = - 1 ; int32 LastBlockFileId = 0 ; int32 WriteLockCount = 0 ; public : void)",
    "insertText": "Initialize(const FVirtualFileCacheSettings& Settings)"
  },
  {
    "label": "ReadTableFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadTableFile()"
  },
  {
    "label": "CreateBlockFile()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateBlockFile(int64 FileSize, int32 BlockSize)"
  },
  {
    "label": "DeleteBlockFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteBlockFile(int32 BlockFileId)"
  },
  {
    "label": "WriteTableFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTableFile()"
  },
  {
    "label": "Defragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Defragment()"
  },
  {
    "label": "CoalesceRanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CoalesceRanges()"
  },
  {
    "label": "CalculateSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSizes()"
  },
  {
    "label": "GetBlockFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBlockFilename(const FBlockFile& File)"
  },
  {
    "label": "GetFileForRange()",
    "kind": "Method",
    "detail": "Function (FBlockFile*)",
    "insertText": "GetFileForRange(FRangeId Id)"
  },
  {
    "label": "GetFileForId()",
    "kind": "Method",
    "detail": "Function (FBlockFile*)",
    "insertText": "GetFileForId(int32 BlockFileId)"
  },
  {
    "label": "BlockFileExistsOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlockFileExistsOnDisk(const FBlockFile& BlockFile)"
  },
  {
    "label": "DeleteBlockFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteBlockFile(FFileTable* FileTable, int32 BlockFileId)"
  },
  {
    "label": "RangeIsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RangeIsValid(FRangeId Block)"
  },
  {
    "label": "EraseData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EraseData(VFCKey Id)"
  },
  {
    "label": "AllocateSingleRange()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FRangeId>)",
    "insertText": "AllocateSingleRange(FBlockFile& File, int64 MaximumSize)"
  },
  {
    "label": "AllocateBlocksForSize()",
    "kind": "Method",
    "detail": "Function (TArray<FRangeId>)",
    "insertText": "AllocateBlocksForSize(uint64 Size)"
  },
  {
    "label": "AllocationSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "AllocationSize(FDataReference* DataRef)"
  },
  {
    "label": "FreeBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBlock(FRangeId RangeId)"
  },
  {
    "label": "EnsureSizeFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnsureSizeFor(int64 RequiredBytes)"
  },
  {
    "label": "EvictOne()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "EvictOne()"
  },
  {
    "label": "EvictAmount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvictAmount(int64 NumBytesToEvict)"
  },
  {
    "label": "MapBlockFile()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "MapBlockFile(FBlockFile& BlockFile)"
  },
  {
    "label": "MapFileRange()",
    "kind": "Method",
    "detail": "Function (FMappedRange)",
    "insertText": "MapFileRange(FRangeId Range)"
  },
  {
    "label": "ReadRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadRange(FRangeId RangeId, void* Dest, int64 ReadSize)"
  },
  {
    "label": "WriteData()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "WriteData(VFCKey Id, const uint8* Data, uint64 DataSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FFileTable& FileTable)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FBlockRangeSortStartIndex { bool)",
    "insertText": "operator()(const FBlockRange& L, const FBlockRange& R)"
  },
  {
    "label": "EvictToBelowMaxSize()",
    "kind": "Method",
    "detail": "Function (enum class ERWOp : int8 { Invalid = - 1,Read,Write,Erase,} ; struct FRWOp { ERWOp Op = ERWOp::Invalid ; VFCKey Target ; TSharedPtr<TArray<uint8>> DataToWrite ; TOptional<TPromise<TArray<uint8>>> ReadResult ; int64 ReadOffset = 0 ; int64 ReadSize = 0 ; } ; struct FLruCacheNode : public TIntrusiveDoubleLinkedListNode<FLruCacheNode> { VFCKey Key ; TSharedPtr<TArray<uint8>> Data ; uint64 RecordedSize ; } ; class FLruCache { void)",
    "insertText": "EvictToBelowMaxSize()"
  },
  {
    "label": "FreeSpaceFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FreeSpaceFor(int64 SizeToAdd)"
  },
  {
    "label": "FLruCache()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FLruCache()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} FLruCacheNode*)",
    "insertText": "Find(VFCKey Key)"
  },
  {
    "label": "ReadLockAndFindData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TArray<uint8>>)",
    "insertText": "ReadLockAndFindData(VFCKey Key)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(VFCKey Key, TSharedPtr<TArray<uint8>> Data)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(VFCKey Key)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetMaxSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSize(int64 NewMaxSize)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public : FRWLock Lock ; private : TMap<VFCKey,TUniquePtr<FLruCacheNode>> NodeMap ; TIntrusiveDoubleLinkedList<FLruCacheNode> LruList ; int64 CurrentSize = 0 ; int64 MaxSize = 0 ; } ; struct FVirtualFileCache ; template<TTableType,FRWScopeLockType LOCKTYPE> struct FFileTableLockingReference {)",
    "insertText": "static_assert(LOCKTYPE == SLT_ReadOnly || LOCKTYPE == SLT_Write)"
  },
  {
    "label": "FFileTableLockingReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileTableLockingReference(TTableType& InTable, FRWLock& InLock) : FileTable(&InTable) , Lock(&InLock)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (Lock ->)",
    "insertText": "ReadLock()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(LOCKTYPE == SLT_Write)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (Lock ->)",
    "insertText": "WriteLock()"
  },
  {
    "label": "FFileTableLockingReference()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FFileTableLockingReference()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (Lock ->)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (Lock ->)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "FFileTableLockingReference()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "FFileTableLockingReference(FFileTableLockingReference&& ToMove) : FileTable(ToMove.FileTable) , Lock(ToMove.Lock)"
  },
  {
    "label": "FFileTableLockingReference()",
    "kind": "Method",
    "detail": "Function (ToMove . Lock = nullptr ; })",
    "insertText": "FFileTableLockingReference(FFileTableLockingReference& ToMove)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileTableLockingReference)",
    "insertText": "operator(FFileTableLockingReference& ToMove)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileTableLockingReference&)",
    "insertText": "operator(FFileTableLockingReference&& ToMove)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TTableType*)",
    "insertText": "operator()"
  },
  {
    "label": "FVirtualFileCacheThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVirtualFileCacheThread()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "RequestRead()",
    "kind": "Method",
    "detail": "Function (TFuture<TArray<uint8>>)",
    "insertText": "RequestRead(VFCKey Target, int64 ReadOffset = 0, int64 ReadSizeOrZero = 0)"
  },
  {
    "label": "RequestWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestWrite(VFCKey Target, TArrayView<const uint8> Data)"
  },
  {
    "label": "RequestErase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestErase(VFCKey Target)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "ReadFileTable()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FFileTableReader)",
    "insertText": "ReadFileTable()"
  },
  {
    "label": "MutateFileTable()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FFileTableMutator)",
    "insertText": "MutateFileTable()"
  },
  {
    "label": "ModifyFileTable()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FFileTableWriter)",
    "insertText": "ModifyFileTable()"
  },
  {
    "label": "DeleteUnexpectedCacheFiles()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DeleteUnexpectedCacheFiles(TSet<FString>& ExpectedFiles)"
  },
  {
    "label": "GetTableFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTableFilename()"
  },
  {
    "label": "EnqueueOrRunOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueOrRunOp(TSharedPtr<FRWOp> Op)"
  },
  {
    "label": "GetNextOp()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRWOp>)",
    "insertText": "GetNextOp()"
  },
  {
    "label": "DoOneOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoOneOp(FRWOp* Op)"
  },
  {
    "label": "Touch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Touch(FDataReference& Id)"
  },
  {
    "label": "EraseTableFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseTableFile()"
  },
  {
    "label": "SetInMemoryCacheSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInMemoryCacheSize(int64 MaxSize)"
  },
  {
    "label": "GetTotalMemCacheHits()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTotalMemCacheHits()"
  },
  {
    "label": "GetTotalMemCacheMisses()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTotalMemCacheMisses()"
  },
  {
    "label": "FVirtualFileCache()",
    "kind": "Method",
    "detail": "Function (public : FVirtualFileCache* Parent ; FRunnableThread* Thread ; FEvent* Event ; FLruCache MemCache ; FRWLock OperationQueueLock ; TArray<TSharedPtr<FRWOp>> OperationQueue ; FString BasePath ; std::atomic_bool bStopRequested ; private : FRWLock FileTableLock ; FFileTable FileTableStorage ; uint64 TotalMemCacheHits = 0 ; uint64 TotalMemCacheMisses = 0 ; } ; struct FVirtualFileCache final : IVirtualFileCache {)",
    "insertText": "FVirtualFileCache() : Thread(this)"
  },
  {
    "label": "FVirtualFileCache()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVirtualFileCache()"
  },
  {
    "label": "FVirtualFileCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVirtualFileCache(const FVirtualFileCache&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVirtualFileCache&)",
    "insertText": "operator(const FVirtualFileCache&)"
  }
]