[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "homogeneous_left_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "homogeneous_left_product_impl"
  },
  {
    "label": "homogeneous_right_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "homogeneous_right_product_impl"
  },
  {
    "label": "Homogeneous",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Homogeneous"
  },
  {
    "label": "take_matrix_for_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "take_matrix_for_product"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "generic_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_product_impl"
  },
  {
    "label": "homogeneous_right_product_refactoring_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "homogeneous_right_product_refactoring_helper"
  },
  {
    "label": "product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_evaluator"
  },
  {
    "label": "homogeneous_left_product_refactoring_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "homogeneous_left_product_refactoring_helper"
  },
  {
    "label": "permutation_matrix_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "permutation_matrix_product"
  },
  {
    "label": "RowsPlusOne()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_HOMOGENEOUS_H # define EIGEN_HOMOGENEOUS_H namespace Eigen { namespace internal { template<MatrixType,int Direction> struct traits<Homogeneous<MatrixType,Direction>> : traits<MatrixType> { typedef traits<MatrixType>::StorageKind StorageKind ; typedef ref_selector<MatrixType>::type MatrixTypeNested ; typedef remove_reference<MatrixTypeNested>::type _MatrixTypeNested ; enum {)",
    "insertText": "RowsPlusOne(MatrixType::RowsAtCompileTime != Dynamic) ? int(MatrixType::RowsAtCompileTime) + 1 : Dynamic, ColsPlusOne = (MatrixType::ColsAtCompileTime != Dynamic) ? int(MatrixType::ColsAtCompileTime) + 1 : Dynamic, RowsAtCompileTime = Direction==Vertical ? RowsPlusOne : MatrixType::RowsAtCompileTime, ColsAtCompileTime = Direction==Horizontal ? ColsPlusOne : MatrixType::ColsAtCompileTime, MaxRowsAtCompileTime = RowsAtCompileTime, MaxColsAtCompileTime = ColsAtCompileTime, TmpFlags = _MatrixTypeNested::Flags & HereditaryBits, Flags = ColsAtCompileTime==1 ? (TmpFlags & ~RowMajorBit) : RowsAtCompileTime==1 ? (TmpFlags | RowMajorBit)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType,Lhs> struct homogeneous_left_product_impl ; template<MatrixType,Rhs> struct homogeneous_right_product_impl ; } template<MatrixType,int _Direction> class Homogeneous : public MatrixBase<Homogeneous<MatrixType,_Direction>>,internal::no_assignment_operator { public : typedef MatrixType NestedExpression ; enum { Direction = _Direction } ; typedef MatrixBase<Homogeneous> Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Homogeneous) EIGEN_DEVICE_FUNC explicit inline Homogeneous(const MatrixType& matrix) : m_matrix(matrix)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const NestedExpression&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(int(Direction)==Horizontal)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Lhs> EIGEN_DEVICE_FUNC const Product<Lhs,Homogeneous>)",
    "insertText": "operator(const MatrixBase<Lhs>& lhs, const Homogeneous& rhs)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(int(Direction)==Vertical)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,int Dim,int Mode,int Options> EIGEN_DEVICE_FUNC const Product<Transform<Scalar,Dim,Mode,Options>,Homogeneous>)",
    "insertText": "operator(const Transform<Scalar,Dim,Mode,Options>& lhs, const Homogeneous& rhs)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} template<Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::result_of<)",
    "insertText": "Func(Scalar,Scalar)>::type redux(const Func& func)"
  },
  {
    "label": "homogeneous()",
    "kind": "Method",
    "detail": "Function (} protected : MatrixType::Nested m_matrix ; } ; template<Derived> EIGEN_DEVICE_FUNC MatrixBase<Derived>::HomogeneousReturnType MatrixBase<Derived)",
    "insertText": "homogeneous()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"
  },
  {
    "label": "hnormalized()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC const MatrixBase<Derived>::HNormalizedReturnType MatrixBase<Derived)",
    "insertText": "hnormalized()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<MatrixOrTransformType> struct take_matrix_for_product { typedef MatrixOrTransformType type ; EIGEN_DEVICE_FUNC const type&)",
    "insertText": "run(const type &x)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,int Dim,int Options> struct take_matrix_for_product<Transform<Scalar,Dim,Projective,Options>> { typedef Transform<Scalar,Dim,Projective,Options> TransformType ; typedef TransformType::MatrixType type ; EIGEN_DEVICE_FUNC const type&)",
    "insertText": "run(const TransformType& x)"
  },
  {
    "label": "homogeneous_left_product_impl()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,Lhs> struct traits<homogeneous_left_product_impl<Homogeneous<MatrixType,Vertical>,Lhs>> { typedef take_matrix_for_product<Lhs>::type LhsMatrixType ; typedef remove_all<MatrixType>::type MatrixTypeCleaned ; typedef remove_all<LhsMatrixType>::type LhsMatrixTypeCleaned ; typedef make_proper_matrix_type<traits<MatrixTypeCleaned>::Scalar,LhsMatrixTypeCleaned::RowsAtCompileTime,MatrixTypeCleaned::ColsAtCompileTime,MatrixTypeCleaned::PlainObject::Options,LhsMatrixTypeCleaned::MaxRowsAtCompileTime,MatrixTypeCleaned::MaxColsAtCompileTime>::type ReturnType ; } ; template<MatrixType,Lhs> struct homogeneous_left_product_impl<Homogeneous<MatrixType,Vertical>,Lhs> : public ReturnByValue<homogeneous_left_product_impl<Homogeneous<MatrixType,Vertical>,Lhs>> { typedef traits<homogeneous_left_product_impl>::LhsMatrixType LhsMatrixType ; typedef remove_all<LhsMatrixType>::type LhsMatrixTypeCleaned ; typedef remove_all<LhsMatrixTypeCleaned::Nested>::type LhsMatrixTypeNested ; EIGEN_DEVICE_FUNC)",
    "insertText": "homogeneous_left_product_impl(const Lhs& lhs, const MatrixType& rhs) : m_lhs(take_matrix_for_product<Lhs>::run(lhs)), m_rhs(rhs)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(Dest& dst)"
  },
  {
    "label": "ColsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (dst = Block<const LhsMatrixTypeNested,LhsMatrixTypeNested::RowsAtCompileTime,LhsMatrixTypeNested::ColsAtCompileTime = = Dynamic ? Dynamic :)",
    "insertText": "ColsAtCompileTime(m_lhs,0,0,m_lhs.rows(),m_lhs.cols()-1)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (dst + = m_lhs .)",
    "insertText": "col(m_lhs.cols()-1).rowwise() .template replicate<MatrixType::ColsAtCompileTime>(m_rhs.cols())"
  },
  {
    "label": "homogeneous_right_product_impl()",
    "kind": "Method",
    "detail": "Function (} LhsMatrixTypeCleaned::Nested m_lhs ; MatrixType::Nested m_rhs ; } ; template<MatrixType,Rhs> struct traits<homogeneous_right_product_impl<Homogeneous<MatrixType,Horizontal>,Rhs>> { typedef make_proper_matrix_type<traits<MatrixType>::Scalar,MatrixType::RowsAtCompileTime,Rhs::ColsAtCompileTime,MatrixType::PlainObject::Options,MatrixType::MaxRowsAtCompileTime,Rhs::MaxColsAtCompileTime>::type ReturnType ; } ; template<MatrixType,Rhs> struct homogeneous_right_product_impl<Homogeneous<MatrixType,Horizontal>,Rhs> : public ReturnByValue<homogeneous_right_product_impl<Homogeneous<MatrixType,Horizontal>,Rhs>> { typedef remove_all<Rhs::Nested>::type RhsNested ; EIGEN_DEVICE_FUNC)",
    "insertText": "homogeneous_right_product_impl(const MatrixType& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)"
  },
  {
    "label": "ColsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (dst = m_lhs* Block<const RhsNested,RhsNested::RowsAtCompileTime = = Dynamic ? Dynamic : RhsNested::RowsAtCompileTime - 1,)",
    "insertText": "ColsAtCompileTime(m_rhs,0,0,m_rhs.rows()-1,m_rhs.cols())"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (dst + = m_rhs .)",
    "insertText": "row(m_rhs.rows()-1).colwise() .template replicate<MatrixType::RowsAtCompileTime>(m_lhs.rows())"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (} MatrixType::Nested m_lhs ; Rhs::Nested m_rhs ; } ; template<ArgType,int Direction> struct evaluator_traits<Homogeneous<ArgType,Direction>> { typedef storage_kind_to_evaluator_kind<ArgType::StorageKind>::Kind Kind ; typedef HomogeneousShape Shape ; } ; template<> struct AssignmentKind<DenseShape,HomogeneousShape> { typedef Dense2Dense Kind ; } ; template<ArgType,int Direction> struct unary_evaluator<Homogeneous<ArgType,Direction>,IndexBased> : evaluator<Homogeneous<ArgType,Direction>::PlainObject> { typedef Homogeneous<ArgType,Direction> XprType ; typedef XprType::PlainObject PlainObject ; typedef evaluator<PlainObject> Base ; EIGEN_DEVICE_FUNC)",
    "insertText": "unary_evaluator(const XprType& op) : Base(), m_temp(op)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_temp)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} protected : PlainObject m_temp ; } ; template<DstXprType,ArgType,Scalar> struct Assignment<DstXprType,Homogeneous<ArgType,Vertical>,internal::assign_op<Scalar,ArgType::Scalar>,Dense2Dense> { typedef Homogeneous<ArgType,Vertical> SrcXprType ; EIGEN_DEVICE_FUNC void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,typename ArgType::Scalar> &)"
  },
  {
    "label": "RowsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (dst . template topRows<)",
    "insertText": "RowsAtCompileTime(src.nestedExpression().rows()) = src.nestedExpression()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "row(dst.rows()-1).setOnes()"
  },
  {
    "label": "ColsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (dst . template leftCols<)",
    "insertText": "ColsAtCompileTime(src.nestedExpression().cols()) = src.nestedExpression()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "col(dst.cols()-1).setOnes()"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsArg,Rhs,int ProductTag> struct generic_product_impl<Homogeneous<LhsArg,Horizontal>,Rhs,HomogeneousShape,DenseShape,ProductTag> { template<Dest> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(Dest& dst, const Homogeneous<LhsArg,Horizontal>& lhs, const Rhs& rhs)"
  },
  {
    "label": "Rhs()",
    "kind": "Method",
    "detail": "Function (homogeneous_right_product_impl<Homogeneous<LhsArg,Horizontal>,)",
    "insertText": "Rhs(lhs.nestedExpression(), rhs).evalTo(dst)"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs> struct homogeneous_right_product_refactoring_helper { enum { Dim = Lhs::ColsAtCompileTime,Rows = Lhs::RowsAtCompileTime } ; typedef Rhs::template ConstNRowsBlockXpr<Dim>::Type LinearBlockConst ; typedef remove_const<LinearBlockConst>::type LinearBlock ; typedef Rhs::ConstRowXpr ConstantColumn ; typedef Replicate<const ConstantColumn,Rows,1> ConstantBlock ; typedef Product<Lhs,LinearBlock,LazyProduct> LinearProduct ; typedef CwiseBinaryOp<internal::scalar_sum_op<Lhs::Scalar,Rhs::Scalar>,const LinearProduct,const ConstantBlock> Xpr ; } ; template<Lhs,Rhs,int ProductTag> struct product_evaluator<Product<Lhs,Rhs,LazyProduct>,ProductTag,HomogeneousShape,DenseShape> : public evaluator<homogeneous_right_product_refactoring_helper<Lhs::NestedExpression,Rhs>::Xpr> { typedef Product<Lhs,Rhs,LazyProduct> XprType ; typedef homogeneous_right_product_refactoring_helper<Lhs::NestedExpression,Rhs> helper ; typedef helper::ConstantBlock ConstantBlock ; typedef helper::Xpr RefactoredXpr ; typedef evaluator<RefactoredXpr> Base ; EIGEN_DEVICE_FUNC)",
    "insertText": "product_evaluator(const XprType& xpr) : Base( xpr.lhs().nestedExpression() .lazyProduct( xpr.rhs().template topRows<helper::Dim>(xpr.lhs().nestedExpression().cols()) ) + ConstantBlock(xpr.rhs().row(xpr.rhs().rows()-1),xpr.lhs().rows(), 1))"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,RhsArg,int ProductTag> struct generic_product_impl<Lhs,Homogeneous<RhsArg,Vertical>,DenseShape,HomogeneousShape,ProductTag> { template<Dest> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(Dest& dst, const Lhs& lhs, const Homogeneous<RhsArg,Vertical>& rhs)"
  },
  {
    "label": "Lhs()",
    "kind": "Method",
    "detail": "Function (homogeneous_left_product_impl<Homogeneous<RhsArg,Vertical>,)",
    "insertText": "Lhs(lhs, rhs.nestedExpression()).evalTo(dst)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "noalias() = lhs * rhs.eval()"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs> struct homogeneous_left_product_refactoring_helper { enum { Dim = Rhs::RowsAtCompileTime,Cols = Rhs::ColsAtCompileTime } ; typedef Lhs::template ConstNColsBlockXpr<Dim>::Type LinearBlockConst ; typedef remove_const<LinearBlockConst>::type LinearBlock ; typedef Lhs::ConstColXpr ConstantColumn ; typedef Replicate<const ConstantColumn,1,Cols> ConstantBlock ; typedef Product<LinearBlock,Rhs,LazyProduct> LinearProduct ; typedef CwiseBinaryOp<internal::scalar_sum_op<Lhs::Scalar,Rhs::Scalar>,const LinearProduct,const ConstantBlock> Xpr ; } ; template<Lhs,Rhs,int ProductTag> struct product_evaluator<Product<Lhs,Rhs,LazyProduct>,ProductTag,DenseShape,HomogeneousShape> : public evaluator<homogeneous_left_product_refactoring_helper<Lhs,Rhs::NestedExpression>::Xpr> { typedef Product<Lhs,Rhs,LazyProduct> XprType ; typedef homogeneous_left_product_refactoring_helper<Lhs,Rhs::NestedExpression> helper ; typedef helper::ConstantBlock ConstantBlock ; typedef helper::Xpr RefactoredXpr ; typedef evaluator<RefactoredXpr> Base ; EIGEN_DEVICE_FUNC)",
    "insertText": "product_evaluator(const XprType& xpr) : Base( xpr.lhs().template leftCols<helper::Dim>(xpr.rhs().nestedExpression().rows()) .lazyProduct( xpr.rhs().nestedExpression() ) + ConstantBlock(xpr.lhs().col(xpr.lhs().cols()-1),1,xpr.rhs().cols()))"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,int Dim,int Mode,int Options,RhsArg,int ProductTag> struct generic_product_impl<Transform<Scalar,Dim,Mode,Options>,Homogeneous<RhsArg,Vertical>,DenseShape,HomogeneousShape,ProductTag> { typedef Transform<Scalar,Dim,Mode,Options> TransformType ; template<Dest> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(Dest& dst, const TransformType& lhs, const Homogeneous<RhsArg,Vertical>& rhs)"
  },
  {
    "label": "TransformType()",
    "kind": "Method",
    "detail": "Function (homogeneous_left_product_impl<Homogeneous<RhsArg,Vertical>,)",
    "insertText": "TransformType(lhs, rhs.nestedExpression()).evalTo(dst)"
  }
]