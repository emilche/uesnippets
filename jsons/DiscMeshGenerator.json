[
  {
    "label": "FDiscMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiscMeshGenerator"
  },
  {
    "label": "FPuncturedDiscMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPuncturedDiscMeshGenerator"
  },
  {
    "label": "FDiscMeshGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IndexTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" MeshShapeGenerator . h \" namespace UE { namespace Geometry { class FDiscMeshGenerator : public FMeshShapeGenerator { public : float Radius ; FVector3f Normal ; int AngleSamples ; int RadialSamples ; float StartAngle ; float EndAngle ; bool bSinglePolygroup = false ; FIndex2i IndicesMap ; public :)",
    "insertText": "FDiscMeshGenerator()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "MakeVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "MakeVertex(double x, double y)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "v(0, 0, 0)"
  },
  {
    "label": "FPuncturedDiscMeshGenerator()",
    "kind": "Method",
    "detail": "Function (v [ IndicesMap . A ] = x ; v [ IndicesMap . B ] = y ; return v ; } } ; class FPuncturedDiscMeshGenerator : public FDiscMeshGenerator { public : float HoleRadius ; public :)",
    "insertText": "FPuncturedDiscMeshGenerator()"
  }
]