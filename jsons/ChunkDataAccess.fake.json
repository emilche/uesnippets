[
  {
    "label": "FFakeChunkDataAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeChunkDataAccess"
  },
  {
    "label": "FFakeChunkDataAccess()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Data / ChunkData . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FFakeChunkDataAccess : public IChunkDataAccess { public :)",
    "insertText": "FFakeChunkDataAccess() :ChunkData(nullptr)"
  },
  {
    "label": "FFakeChunkDataAccess()",
    "kind": "Method",
    "detail": "Function (ChunkHeader . DataSizeCompressed = 0 ; ChunkHeader . DataSizeUncompressed = 0 ; } ~)",
    "insertText": "FFakeChunkDataAccess()"
  },
  {
    "label": "OnDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleted()"
  },
  {
    "label": "GetDataLock()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetDataLock(const uint8** OutChunkData, const FChunkHeader** OutChunkHeader)"
  },
  {
    "label": "GetDataLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataLock(uint8** OutChunkData, FChunkHeader** OutChunkHeader)"
  },
  {
    "label": "ReleaseDataLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseDataLock()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetGuid()"
  }
]