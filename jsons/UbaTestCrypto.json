[
  {
    "label": "TestCrypto()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaCrypto . h \" # include \" UbaNetwork . h \" namespace uba { bool)",
    "insertText": "TestCrypto(Logger& logger, const StringBufferBase& rootDir)"
  },
  {
    "label": "CreateKey()",
    "kind": "Method",
    "detail": "Function (u64 key128 [ ] = { 0 x1234567812345678llu,0 x1234567812345678llu } ; CryptoKey encryptKey =)",
    "insertText": "CreateKey(logger, (const u8*)key128)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CryptoKey decryptKey = encryptKey ; u8* originalData = new u8 [ dataSize ] ;)",
    "insertText": "for(u32 i=0;i!=dataSize; ++i) originalData[i] = u8(rand() % 256)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (u8* encryptedData = new u8 [ dataSize ] ;)",
    "insertText": "memcpy(encryptedData, originalData, dataSize)"
  },
  {
    "label": "DestroyKey()",
    "kind": "Method",
    "detail": "Function (} delete [ ] encryptedData ; delete [ ] originalData ;)",
    "insertText": "DestroyKey(decryptKey)"
  },
  {
    "label": "DestroyKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DestroyKey(encryptKey)"
  }
]