[
  {
    "label": "FColorVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorVertexBuffer"
  },
  {
    "label": "FLightingBuildOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightingBuildOptions"
  },
  {
    "label": "FMeshMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMapBuildData"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FStaticMeshStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStaticLightingMesh"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UNavCollisionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavCollisionBase"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "FNavigationRelevantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantData"
  },
  {
    "label": "FStaticMeshComponentLODInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshComponentLODInfo"
  },
  {
    "label": "FStaticLightingPrimitiveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingPrimitiveInfo"
  },
  {
    "label": "FStaticMeshLODResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshLODResources"
  },
  {
    "label": "FResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResources"
  },
  {
    "label": "FMaterialAudit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialAudit"
  },
  {
    "label": "FPaintedVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintedVertex"
  },
  {
    "label": "FLightmassPrimitiveSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassPrimitiveSettings"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UActorTextureStreamingBuildDataComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorTextureStreamingBuildDataComponent"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UStaticMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshSocket"
  },
  {
    "label": "FStaticMeshComponentInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshComponentInstanceData"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext"
  },
  {
    "label": "FStaticMeshVertexColorLODData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexColorLODData"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHIResources . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" UObject / Class . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / TextureStreamingTypes . h \" # include \" Components / MeshComponent . h \" # include \" Components / ActorStaticMeshComponentInterface . h \" # include \" PackedNormal . h \" # include \" Templates / UniquePtr . h \" # include \" Runtime / Launch / Resources / Version . h \" # include \" UObject / RenderingObjectVersion . h \" # include \" SceneTypes . h \" # include \" DrawDebugHelpers . h \" # include \" StaticMeshComponent . generated . h \" class FColorVertexBuffer ; class FLightingBuildOptions ; class FMeshMapBuildData ; class FPrimitiveSceneProxy ; class FStaticMeshStaticLightingMesh ; class FVertexFactoryType ; class ULightComponent ; class UStaticMesh ; class UStaticMeshComponent ; class UNavCollisionBase ; struct FConvexVolume ; struct FEngineShowFlags ; struct FNavigableGeometryExport ; struct FNavigationRelevantData ; struct FStaticMeshComponentLODInfo ; struct FStaticLightingPrimitiveInfo ; struct FStaticMeshLODResources ; # define STATICMESH_ENABLE_DEBUG_RENDERING ENABLE_DRAW_DEBUG namespace Nanite { struct FResources ; struct FMaterialAudit ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FPaintedVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPaintedVertex() : Position(ForceInit) , Color(ForceInit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPaintedVertex& PaintedVertex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<PaintedVertex . Position ;)",
    "insertText": "if(Ar.CustomVer(FRenderingObjectVersion::GUID) < FRenderingObjectVersion::IncreaseNormalPrecision)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FDeprecatedSerializedPackedNormal Temp ; Ar<<Temp ; PaintedVertex . Normal = Temp ; } else { Ar<<PaintedVertex . Normal ; } Ar<<PaintedVertex . Color ; return Ar ; } } ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup=(Rendering, Common), hidecategories=(Object,Activation,\"Components|Activation\"), ShowCategories=(Mobility), editinlinenew, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, AdvancedDisplay, BlueprintReadOnly, Category=LOD)"
  },
  {
    "label": "SetStaticMeshInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStaticMeshInternal(UStaticMesh* StaticMesh)"
  },
  {
    "label": "NotifyIfStaticMeshChanged()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR class UStaticMesh* KnownStaticMesh = nullptr ; # endif void)",
    "insertText": "NotifyIfStaticMeshChanged()"
  },
  {
    "label": "GetMemberNameChecked_StaticMesh()",
    "kind": "Method",
    "detail": "Function (public : const FName)",
    "insertText": "GetMemberNameChecked_StaticMesh()"
  },
  {
    "label": "UStaticMeshComponent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UStaticMeshComponent()"
  },
  {
    "label": "GetStaticMesh()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UStaticMesh>)",
    "insertText": "GetStaticMesh()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "if(KnownStaticMesh != StaticMesh)"
  },
  {
    "label": "OutdatedKnownStaticMeshDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutdatedKnownStaticMeshDetected()"
  },
  {
    "label": "GetNaniteResources()",
    "kind": "Method",
    "detail": "Function (} # endif return StaticMesh ; } const Nanite::FResources*)",
    "insertText": "GetNaniteResources()"
  },
  {
    "label": "HasValidNaniteData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidNaniteData()"
  },
  {
    "label": "UseNaniteOverrideMaterials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseNaniteOverrideMaterials()"
  },
  {
    "label": "SetCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps=true)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "ExportCustomProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportCustomProperties(FOutputDevice& Out, uint32 Indent)"
  },
  {
    "label": "ImportCustomProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportCustomProperties(const TCHAR* SourceText, FFeedbackContext* Warn)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostReinitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReinitProperties()"
  },
  {
    "label": "PostApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostApplyToComponent()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditUndo()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCacheForCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachedCookedPlatformDataLoaded(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBounds()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "AreNativePropertiesIdenticalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreNativePropertiesIdenticalTo(UObject* Other)"
  },
  {
    "label": "GetDetailedInfoInternal()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDetailedInfoInternal()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetMaterialPropertyPath()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetMaterialPropertyPath(int32 ElementIndex, UObject*& OutOwner, FString& OutPropertyPath, FProperty*& OutProperty)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (# endif FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "HasAnySockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnySockets()"
  },
  {
    "label": "QuerySupportedSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuerySupportedSockets(TArray<FComponentSocketDescription>& OutSockets)"
  },
  {
    "label": "GetSocketTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSocketTransform(FName InSocketName, ERelativeTransformSpace TransformSpace = RTS_World)"
  },
  {
    "label": "DoesSocketExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSocketExist(FName InSocketName)"
  },
  {
    "label": "ShouldCollideWhenPlacing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCollideWhenPlacing()"
  },
  {
    "label": "UE_DECLARE_COMPONENT_ACTOR_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "UE_DECLARE_COMPONENT_ACTOR_INTERFACE(StaticMeshComponent) protected: ENGINE_API virtual void OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "RequiresGameThreadEndOfFrameRecreate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresGameThreadEndOfFrameRecreate()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "OnCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreatePhysicsState()"
  },
  {
    "label": "OnDestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyPhysicsState()"
  },
  {
    "label": "ShouldCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreatePhysicsState()"
  },
  {
    "label": "ShouldCreateRenderState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateRenderState()"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InvalidateLightingCacheDetailed(bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly)"
  },
  {
    "label": "AdditionalStatObject()",
    "kind": "Method",
    "detail": "Function (UObject const*)",
    "insertText": "AdditionalStatObject()"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (# endif TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "IsHLODRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLODRelevant()"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "GetStaticLightingInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetStaticLightingInfo(FStaticLightingPrimitiveInfo& OutPrimitiveInfo,const TArray<ULightComponent*>& InRelevantLights,const FLightingBuildOptions& Options)"
  },
  {
    "label": "AddMapBuildDataGUIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMapBuildDataGUIDs(TSet<FGuid>& InGUIDs)"
  },
  {
    "label": "GetEmissiveBoost()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "GetEmissiveBoost(int32 ElementIndex)"
  },
  {
    "label": "GetDiffuseBoost()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDiffuseBoost(int32 ElementIndex)"
  },
  {
    "label": "GetShadowIndirectOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShadowIndirectOnly()"
  },
  {
    "label": "IsPrecomputedLightingValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecomputedLightingValid()"
  },
  {
    "label": "GetTextureStreamingTransformScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTextureStreamingTransformScale()"
  },
  {
    "label": "GetMaterialStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaterialStreamingData(int32 MaterialIndex, FPrimitiveMaterialInfo& MaterialData)"
  },
  {
    "label": "BuildTextureStreamingDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTextureStreamingDataImpl(ETextureStreamingBuildType BuildType, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel, TSet<FGuid>& DependentResources, bool& bOutSupportsBuildTextureStreamingData)"
  },
  {
    "label": "GetStreamingRenderAssetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStreamingRenderAssetInfo(FStreamingTextureLevelContext& LevelContext, TArray<FStreamingRenderAssetPrimitiveInfo>& OutStreamingRenderAssets)"
  },
  {
    "label": "GetUsedTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedTextures(TArray<UTexture*>& OutTextures, EMaterialQualityLevel::Type QualityLevel)"
  },
  {
    "label": "RemapActorTextureStreamingBuiltDataToLevel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "RemapActorTextureStreamingBuiltDataToLevel(const class UActorTextureStreamingBuildDataComponent* InActorTextureBuildData)"
  },
  {
    "label": "ComputeHashTextureStreamingBuiltData()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeHashTextureStreamingBuiltData()"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (# endif class UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "CanEditSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditSimulatePhysics()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "ShouldRecreateProxyOnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecreateProxyOnUpdateTransform()"
  },
  {
    "label": "UsesOnlyUnlitMaterials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesOnlyUnlitMaterials()"
  },
  {
    "label": "GetLightMapResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLightMapResolution(int32& Width, int32& Height)"
  },
  {
    "label": "GetStaticLightMapResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStaticLightMapResolution()"
  },
  {
    "label": "HasValidSettingsForStaticLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidSettingsForStaticLighting(bool bOverlookInvalidComponents)"
  },
  {
    "label": "GetLightAndShadowMapMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightAndShadowMapMemoryUsage(int32& LightMapMemoryUsage, int32& ShadowMapMemoryUsage)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 MaterialIndex)"
  },
  {
    "label": "GetEditorMaterial()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR UMaterialInterface*)",
    "insertText": "GetEditorMaterial(int32 MaterialIndex)"
  },
  {
    "label": "GetMaterialIndex()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetMaterialIndex(FName MaterialSlotName)"
  },
  {
    "label": "GetMaterialFromCollisionFaceIndex()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialFromCollisionFaceIndex(int32 FaceIndex, int32& SectionIndex)"
  },
  {
    "label": "GetMaterialSlotNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetMaterialSlotNames()"
  },
  {
    "label": "IsMaterialSlotNameValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialSlotNameValid(FName MaterialSlotName)"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShown(const FEngineShowFlags& ShowFlags)"
  },
  {
    "label": "OnMeshRebuild()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnMeshRebuild(bool bRenderDataChanged)"
  },
  {
    "label": "PreStaticMeshCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreStaticMeshCompilation()"
  },
  {
    "label": "PostStaticMeshCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostStaticMeshCompilation()"
  },
  {
    "label": "ComponentIsTouchingSelectionBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentIsTouchingSelectionBox(const FBox& InSelBBox, const bool bConsiderOnlyBSP, const bool bMustEncompassEntireComponent)"
  },
  {
    "label": "ComponentIsTouchingSelectionFrustum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentIsTouchingSelectionFrustum(const FConvexVolume& InSelBBox, const bool bConsiderOnlyBSP, const bool bMustEncompassEntireComponent)"
  },
  {
    "label": "GetStreamingScale()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "GetStreamingScale()"
  },
  {
    "label": "SupportsWorldPositionOffsetVelocity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsWorldPositionOffsetVelocity()"
  },
  {
    "label": "CreateMeshHitProxy()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR HHitProxy*)",
    "insertText": "CreateMeshHitProxy(int32 SectionIndex, int32 MaterialIndex)"
  },
  {
    "label": "RegisterLODStreamingCallback()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RegisterLODStreamingCallback(FLODStreamingCallback&& Callback, int32 LODIdx, float TimeoutSecs, bool bOnStreamIn)"
  },
  {
    "label": "RegisterLODStreamingCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLODStreamingCallback(FLODStreamingCallback&& CallbackStreamingStart, FLODStreamingCallback&& CallbackStreamingDone, float TimeoutStartSecs, float TimeoutDoneSecs)"
  },
  {
    "label": "PrestreamMeshLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrestreamMeshLODs(float Seconds)"
  },
  {
    "label": "GetMeshPaintTexture()",
    "kind": "Method",
    "detail": "Function (UTexture*)",
    "insertText": "GetMeshPaintTexture()"
  },
  {
    "label": "SetMeshPaintTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshPaintTexture(UTexture* Texture)"
  },
  {
    "label": "SetMeshPaintTextureOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshPaintTextureOverride(UTexture* OverrideTexture)"
  },
  {
    "label": "GetMeshPaintTextureCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshPaintTextureCoordinateIndex()"
  },
  {
    "label": "IsNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationRelevant()"
  },
  {
    "label": "GetNavigationBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavigationBounds()"
  },
  {
    "label": "GetNavigationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavigationData(FNavigationRelevantData& Data)"
  },
  {
    "label": "UsesTextureLightmaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTextureLightmaps(int32 InWidth, int32 InHeight)"
  },
  {
    "label": "HasLightmapTextureCoordinates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLightmapTextureCoordinates()"
  },
  {
    "label": "GetTextureLightAndShadowMapMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureLightAndShadowMapMemoryUsage(int32 InWidth, int32 InHeight, int32& OutLightMapMemoryUsage, int32& OutShadowMapMemoryUsage)"
  },
  {
    "label": "GetEstimatedLightMapResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEstimatedLightMapResolution(int32& Width, int32& Height)"
  },
  {
    "label": "GetEstimatedLightAndShadowMapMemoryUsage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEstimatedLightAndShadowMapMemoryUsage(int32& TextureLightMapMemoryUsage, int32& TextureShadowMapMemoryUsage, int32& VertexLightMapMemoryUsage, int32& VertexShadowMapMemoryUsage, int32& StaticLightingResolution, bool& bIsUsingTextureMapping, bool& bHasLightmapTexCoords)"
  },
  {
    "label": "RequiresOverrideVertexColorsFixup()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "RequiresOverrideVertexColorsFixup()"
  },
  {
    "label": "FixupOverrideColorsIfNecessary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupOverrideColorsIfNecessary(bool bRebuildingStaticMesh = false)"
  },
  {
    "label": "CachePaintedDataIfNecessary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePaintedDataIfNecessary()"
  },
  {
    "label": "CopyInstanceVertexColorsIfCompatible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyInstanceVertexColorsIfCompatible(const UStaticMeshComponent* SourceComponent)"
  },
  {
    "label": "RemoveInstanceVertexColorsFromLOD()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RemoveInstanceVertexColorsFromLOD(int32 LODToRemoveColorsFrom)"
  },
  {
    "label": "RemoveInstanceVertexColors()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "RemoveInstanceVertexColors()"
  },
  {
    "label": "SetSectionPreview()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "SetSectionPreview(int32 InSectionIndexPreview)"
  },
  {
    "label": "SetMaterialPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialPreview(int32 InMaterialIndexPreview)"
  },
  {
    "label": "UpdateCollisionFromStaticMesh()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateCollisionFromStaticMesh()"
  },
  {
    "label": "SupportsDefaultCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDefaultCollision()"
  },
  {
    "label": "SupportsDitheredLODTransitions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDitheredLODTransitions(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetNaniteAuditMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetNaniteAuditMaterial(int32 MaterialIndex)"
  },
  {
    "label": "CanMeshPaintVertexColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMeshPaintVertexColors()"
  },
  {
    "label": "CanMeshPaintTextureColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMeshPaintTextureColors()"
  },
  {
    "label": "GetMeshPaintTextureResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshPaintTextureResolution()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitResources()"
  },
  {
    "label": "PrivateFixupOverrideColors()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PrivateFixupOverrideColors()"
  },
  {
    "label": "ClearStreamingTextureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStreamingTextureData()"
  },
  {
    "label": "UseNaniteOverrideMaterials()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "UseNaniteOverrideMaterials(bool bDoingMaterialAudit)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 MaterialIndex, bool bDoingNaniteMaterialAudit)"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CollectPSOPrecacheData(const FPSOPrecacheParams& BasePrecachePSOParams, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using GetPSOVertexElementsFn = TFunctionRef<)",
    "insertText": "void(const FStaticMeshLODResources& LODRenderData, int32 LODIndex, bool bSupportsManualVertexFetch, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "CollectPSOPrecacheDataImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOPrecacheDataImpl(const FVertexFactoryType* VFType, const FPSOPrecacheParams& BasePrecachePSOParams, GetPSOVertexElementsFn GetVertexElements, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "SupportsStaticLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsStaticLighting()"
  },
  {
    "label": "CreateStaticMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateStaticMeshSceneProxy(Nanite::FMaterialAudit& NaniteMaterials, bool bCreateNanite)"
  },
  {
    "label": "ShouldExportAsObstacle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExportAsObstacle(const UNavCollisionBase& InNavCollision)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "AllocateStaticLightingMesh()",
    "kind": "Method",
    "detail": "Function (FStaticMeshStaticLightingMesh*)",
    "insertText": "AllocateStaticLightingMesh(int32 LODIndex, const TArray<ULightComponent*>& InRelevantLights)"
  },
  {
    "label": "SetLODDataCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLODDataCount(const uint32 MinSize, const uint32 MaxSize)"
  },
  {
    "label": "SetStaticLightingMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetStaticLightingMapping(bool bTextureMapping, int32 ResolutionToUse)"
  },
  {
    "label": "GetSocketByName()",
    "kind": "Method",
    "detail": "Function (class UStaticMeshSocket const*)",
    "insertText": "GetSocketByName(FName InSocketName)"
  },
  {
    "label": "GetWireframeColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetWireframeColor()"
  },
  {
    "label": "GetBlueprintCreatedComponentIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlueprintCreatedComponentIndex()"
  },
  {
    "label": "ApplyComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyComponentInstanceData(struct FStaticMeshComponentInstanceData* ComponentInstanceData)"
  },
  {
    "label": "PropagateLightingScenarioChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateLightingScenarioChange()"
  },
  {
    "label": "GetMeshMapBuildData()",
    "kind": "Method",
    "detail": "Function (const FMeshMapBuildData*)",
    "insertText": "GetMeshMapBuildData(const FStaticMeshComponentLODInfo& LODInfo, bool bCheckForResourceCluster = true)"
  },
  {
    "label": "UpdateMapBuildDataId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMapBuildDataId()"
  },
  {
    "label": "UpdateStaticLightingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStaticLightingData()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(const Nanite::FResources*, FOnGetNaniteResources)"
  },
  {
    "label": "OnGetNaniteResources()",
    "kind": "Method",
    "detail": "Function (FOnGetNaniteResources&)",
    "insertText": "OnGetNaniteResources()"
  },
  {
    "label": "OnStaticMeshChanged()",
    "kind": "Method",
    "detail": "Function (FOnStaticMeshChanged&)",
    "insertText": "OnStaticMeshChanged()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FStaticMeshComponentInstanceData()"
  },
  {
    "label": "FStaticMeshComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticMeshComponentInstanceData(const UStaticMeshComponent* SourceComponent)"
  },
  {
    "label": "FStaticMeshComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticMeshComponentInstanceData()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToComponent(UActorComponent* Component, const ECacheApplyPhase CacheApplyPhase)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddVertexColorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVertexColorData(const struct FStaticMeshComponentLODInfo& LODInfo, uint32 LODIndex)"
  },
  {
    "label": "ApplyVertexColorData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyVertexColorData(UStaticMeshComponent* StaticMeshComponent)"
  }
]