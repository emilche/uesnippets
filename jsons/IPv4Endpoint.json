[
  {
    "label": "FIPv4Endpoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIPv4Endpoint"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IPAddress . h \" # include \" Interfaces / IPv4 / IPv4Address . h \" # include \" Internationalization / Text . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" SocketSubsystem . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" struct FIPv4Endpoint { FIPv4Address Address ; uint16 Port ; public :)",
    "insertText": "FIPv4Endpoint()"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIPv4Endpoint(const FIPv4Address& InAddress, uint16 InPort) : Address(InAddress) , Port(InPort)"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIPv4Endpoint(const TSharedPtr<FInternetAddr>& InternetAddr)"
  },
  {
    "label": "GetIp()",
    "kind": "Method",
    "detail": "Function (int32 OutPort ; InternetAddr ->)",
    "insertText": "GetIp(Address.Value)"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (InternetAddr ->)",
    "insertText": "GetPort(OutPort)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (Port = static_cast<)",
    "insertText": "uint16(OutPort)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "operator(const FIPv4Endpoint& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FIPv4Endpoint& Endpoint)"
  },
  {
    "label": "CreateInternetAddr()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr> InternetAddr = CachedSocketSubsystem ->)",
    "insertText": "CreateInternetAddr()"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function ({ InternetAddr ->)",
    "insertText": "SetIp(Address.Value)"
  },
  {
    "label": "SetPort()",
    "kind": "Method",
    "detail": "Function (InternetAddr ->)",
    "insertText": "SetPort(Port)"
  },
  {
    "label": "ToInternetAddrIPV4()",
    "kind": "Method",
    "detail": "Function (} return InternetAddr ; } TSharedRef<FInternetAddr>)",
    "insertText": "ToInternetAddrIPV4()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function ({ TArray<uint8> RawAddress ; RawAddress .)",
    "insertText": "Add(Address.A)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RawAddress .)",
    "insertText": "Add(Address.B)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RawAddress .)",
    "insertText": "Add(Address.C)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RawAddress .)",
    "insertText": "Add(Address.D)"
  },
  {
    "label": "SetRawIp()",
    "kind": "Method",
    "detail": "Function (InternetAddr ->)",
    "insertText": "SetRawIp(RawAddress)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} return InternetAddr ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToText()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} public : uint32)",
    "insertText": "GetTypeHash(const FIPv4Endpoint& Endpoint)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const FString& EndpointString, FIPv4Endpoint& OutEndpoint)"
  },
  {
    "label": "FromHostAndPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromHostAndPort(const FString& HostAndPortString, FIPv4Endpoint& OutEndpoint)"
  }
]