[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TraceFormatTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceFormatTraits"
  },
  {
    "label": "MessageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageType"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACED_VALUE_SUPPORT_H_ # define BASE_TRACE_EVENT_TRACED_VALUE_SUPPORT_H_ # include \" base / memory / scoped_refptr . h \" # include \" base / memory / weak_ptr . h \" # include \" base / strings / string_piece . h \" # include \" base / strings / utf_string_conversions . h \" # include \" base / time / time . h \" # include \" base / unguessable_token . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # include \" third_party / perfetto / include / perfetto / tracing / traced_proto . h \" # include \" third_party / perfetto / include / perfetto / tracing / traced_value . h \" namespace perfetto { template<class T> struct TraceFormatTraits<scoped_refptr<T>,perfetto::check_traced_value_support_t<T>> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const scoped_refptr<T>& value)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(context).WritePointer(nullptr)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} template<class MessageType> void)",
    "insertText": "WriteIntoTrace(perfetto::TracedProto<MessageType> context, const scoped_refptr<T>& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct TraceFormatTraits<::base::WeakPtr<T>,perfetto::check_traced_value_support_t<T>> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const ::base::WeakPtr<T>& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct TraceFormatTraits<::absl::optional<T>,perfetto::check_traced_value_support_t<T>> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const ::absl::optional<T>& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, ::absl::optional<T>& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<::base::TimeDelta> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const ::base::TimeDelta& value)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(context).WriteInt64(value.InMicroseconds())"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<::base::TimeTicks> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const ::base::TimeTicks& value)"
  },
  {
    "label": "WriteIntoTracedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteIntoTracedValue(std::move(context), value.since_origin())"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<::base::Time> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const ::base::Time& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<::base::UnguessableToken> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const ::base::UnguessableToken& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<std::u16string> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const std::u16string& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<size_t N> struct TraceFormatTraits<char16_t [ N ]> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const char16_t value[N])"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<const char16_t*> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const char16_t* value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<std::wstring> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const std::wstring& value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<size_t N> struct TraceFormatTraits<wchar_t [ N ]> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const wchar_t value[N])"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<const wchar_t*> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, const wchar_t* value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<::base::StringPiece> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, ::base::StringPiece value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<::base::StringPiece16> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, ::base::StringPiece16 value)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TraceFormatTraits<::base::WStringPiece> { void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context, ::base::WStringPiece value)"
  }
]