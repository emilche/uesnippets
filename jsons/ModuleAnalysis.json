[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "IModuleAnalysisProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModuleAnalysisProvider"
  },
  {
    "label": "FModuleAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleAnalyzer"
  },
  {
    "label": "FModuleAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Analyzer . h \" namespace TraceServices { class IAnalysisSession ; class IModuleAnalysisProvider ; class FModuleAnalyzer : public UE::Trace::IAnalyzer { public :)",
    "insertText": "FModuleAnalyzer(IAnalysisSession& Session)"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "GetBaseAddress()",
    "kind": "Method",
    "detail": "Function (private : uint64)",
    "insertText": "GetBaseAddress(const FEventData& EventData)"
  }
]