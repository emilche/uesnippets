[
  {
    "label": "FVirtualShadowMapArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArray"
  },
  {
    "label": "FViewFamilyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewFamilyInfo"
  },
  {
    "label": "FSceneInstanceCullingQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInstanceCullingQuery"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSharedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedContext"
  },
  {
    "label": "FRasterContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterContext"
  },
  {
    "label": "FRasterResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterResults"
  },
  {
    "label": "FConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfiguration"
  },
  {
    "label": "IRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRenderer"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NaniteShared . h \" # include \" NaniteSceneProxy . h \" # include \" NaniteVisibility . h \" # include \" PSOPrecacheMaterial . h \" class FVirtualShadowMapArray ; class FViewFamilyInfo ; class FSceneInstanceCullingQuery ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FRasterParameters,) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<uint>, OutDepthBuffer) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2DArray<uint>, OutDepthBufferArray) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<UlongType>, OutVisBuffer64) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<UlongType>, OutDbgBuffer64) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<uint>, OutDbgBuffer32) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "CollectRasterPSOInitializers()",
    "kind": "Method",
    "detail": "Function (enum class ERasterScheduling : uint8 { HardwareOnly = 0,HardwareThenSoftware = 1,HardwareAndSoftwareOverlap = 2,} ; enum class EOutputBufferMode : uint8 { VisBuffer,DepthOnly,} ; enum class EPipeline : uint8 { Primary,Shadows,Lumen,HitProxy } ; struct FSharedContext { FGlobalShaderMap* ShaderMap ; ERHIFeatureLevel::Type FeatureLevel ; EPipeline Pipeline ; } ; struct FRasterContext { FVector2f RcpViewSize ; FIntPoint TextureSize ; EOutputBufferMode RasterMode ; ERasterScheduling RasterScheduling ; FRasterParameters Parameters ; FRDGTextureRef DepthBuffer ; FRDGTextureRef VisBuffer64 ; FRDGTextureRef DbgBuffer64 ; FRDGTextureRef DbgBuffer32 ; bool VisualizeActive ; bool VisualizeModeOverdraw ; bool bCustomPass ; } ; struct FRasterResults { FIntVector4 PageConstants ; uint32 MaxVisibleClusters ; uint32 MaxCandidatePatches ; uint32 MaxNodes ; uint32 MaxPatchesPerGroup ; uint32 MeshPass ; float InvDiceRate ; uint32 RenderFlags ; uint32 DebugFlags ; FRDGBufferRef ViewsBuffer = nullptr ; FRDGBufferRef VisibleClustersSWHW = nullptr ; FRDGBufferRef RasterBinMeta = nullptr ; FRDGTextureRef VisBuffer64 = nullptr ; FRDGTextureRef DbgBuffer64 = nullptr ; FRDGTextureRef DbgBuffer32 = nullptr ; FRDGTextureRef ShadingMask = nullptr ; FRDGBufferRef ClearTileArgs = nullptr ; FRDGBufferRef ClearTileBuffer = nullptr ; FNaniteVisibilityQuery* VisibilityQuery = nullptr ; TArray<FVisualizeResult,TInlineAllocator<3 2>> Visualizations ; } ; void)",
    "insertText": "CollectRasterPSOInitializers(const FSceneTexturesConfig& SceneTexturesConfig, const FMaterial& Material, const FPSOPrecacheParams& PreCacheParams, EShaderPlatform ShaderPlatform, int32 PSOCollectorIndex, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "InitRasterContext()",
    "kind": "Method",
    "detail": "Function (FRasterContext)",
    "insertText": "InitRasterContext(FRDGBuilder& GraphBuilder, const FSharedContext& SharedContext, const FViewFamilyInfo& ViewFamily, FIntPoint TextureSize, FIntRect TextureRect, EOutputBufferMode RasterMode = EOutputBufferMode::VisBuffer, bool bClearTarget = true, bool bAsyncCompute = true, FRDGBufferSRVRef RectMinMaxBufferSRV = nullptr, uint32 NumRects = 0, FRDGTextureRef ExternalDepthBuffer = nullptr, bool bCustomPass = false, bool bVisualize = false, bool bVisualizeOverdraw = false)"
  },
  {
    "label": "SetViewFlags()",
    "kind": "Method",
    "detail": "Function (struct FConfiguration { uint32 bTwoPassOcclusion : 1 ; uint32 bUpdateStreaming : 1 ; uint32 bSupportsMultiplePasses : 1 ; uint32 bForceHWRaster : 1 ; uint32 bPrimaryContext : 1 ; uint32 bDrawOnlyRootGeometry : 1 ; uint32 bIsShadowPass : 1 ; uint32 bIsSceneCapture : 1 ; uint32 bIsReflectionCapture : 1 ; uint32 bIsLumenCapture : 1 ; uint32 bIsGameView : 1 ; uint32 bEditorShowFlag : 1 ; uint32 bGameShowFlag : 1 ; uint32 bDisableProgrammable : 1 ; uint32 bExtractStats : 1 ; EFilterFlags HiddenFilterFlags ; void)",
    "insertText": "SetViewFlags(const FViewInfo& View)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class IRenderer { public : TUniquePtr<IRenderer>)",
    "insertText": "Create(FRDGBuilder& GraphBuilder, const FScene& Scene, const FViewInfo& SceneView, FSceneUniformBuffer& SceneUniformBuffer, const FSharedContext& SharedContext, const FRasterContext& RasterContext, const FConfiguration& Configuration, const FIntRect& ViewRect, const TRefCountPtr<IPooledRenderTarget>& PrevHZB, FVirtualShadowMapArray* VirtualShadowMapArray = nullptr)"
  },
  {
    "label": "IRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRenderer()"
  },
  {
    "label": "DrawGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGeometry(FNaniteRasterPipelines& RasterPipelines, const FNaniteVisibilityQuery* VisibilityQuery, const FPackedViewArray& ViewArray, FSceneInstanceCullingQuery* OptionalSceneInstanceCullingQuery, const TConstArrayView<FInstanceDraw>* OptionalInstanceDraws)"
  },
  {
    "label": "DrawGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGeometry(FNaniteRasterPipelines& RasterPipelines, const FNaniteVisibilityQuery* VisibilityQuery, const FPackedViewArray& ViewArray)"
  },
  {
    "label": "DrawGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGeometry(RasterPipelines, VisibilityQuery, ViewArray, nullptr, nullptr)"
  },
  {
    "label": "DrawGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawGeometry(FNaniteRasterPipelines& RasterPipelines, const FNaniteVisibilityQuery* VisibilityQuery, const FPackedViewArray& ViewArray, const TConstArrayView<FInstanceDraw> &InstanceDraws)"
  },
  {
    "label": "DrawGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGeometry(RasterPipelines, VisibilityQuery, ViewArray, nullptr, &InstanceDraws)"
  },
  {
    "label": "DrawGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawGeometry(FNaniteRasterPipelines& RasterPipelines, const FNaniteVisibilityQuery* VisibilityQuery, const FPackedViewArray& ViewArray, FSceneInstanceCullingQuery* OptionalSceneInstanceCullingQuery)"
  },
  {
    "label": "DrawGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGeometry(RasterPipelines, VisibilityQuery, ViewArray, OptionalSceneInstanceCullingQuery, nullptr)"
  },
  {
    "label": "ExtractResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtractResults(FRasterResults& RasterResults)"
  }
]