[
  {
    "label": "TYCombinator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TYCombinator"
  },
  {
    "label": "TLocalWorkQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLocalWorkQueue"
  },
  {
    "label": "FInternalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternalData"
  },
  {
    "label": "TYCombinator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Fundamental / Task . h \" # include \" Async / Fundamental / Scheduler . h \" # include \" Async / EventCount . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Experimental / Containers / FAAArrayQueue . h \" # include \" Experimental / ConcurrentLinearAllocator . h \" # include \" Templates / RefCounting . h \" # include<atomic> template<LAMBDA> class TYCombinator { LAMBDA Lambda ; public :)",
    "insertText": "TYCombinator(LAMBDA&& InLambda): Lambda(MoveTemp(InLambda))"
  },
  {
    "label": "TYCombinator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYCombinator(const LAMBDA& InLambda): Lambda(InLambda)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<. . . ARGS> auto)",
    "insertText": "operator()(ARGS&&... Args) const -> decltype(Lambda(static_cast<const TYCombinator<LAMBDA>&>(*this), Forward<ARGS>(Args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<. . . ARGS> auto)",
    "insertText": "operator()(ARGS&&... Args) -> decltype(Lambda(static_cast<TYCombinator<LAMBDA>&>(*this), Forward<ARGS>(Args)...))"
  },
  {
    "label": "MakeYCombinator()",
    "kind": "Method",
    "detail": "Function (} } ; template<LAMBDA> auto)",
    "insertText": "MakeYCombinator(LAMBDA&& Lambda)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} template<TaskType> class TLocalWorkQueue {)",
    "insertText": "UE_NONCOPYABLE(TLocalWorkQueue)"
  },
  {
    "label": "FInternalData()",
    "kind": "Method",
    "detail": "Function (struct FInternalData : public TConcurrentLinearObject<FInternalData,FTaskGraphBlockAllocationTag>,public FThreadSafeRefCountedObject { FAAArrayQueue<TaskType> TaskQueue ; std::atomic_int ActiveWorkers { 0 } ; std::atomic_bool CheckDone { false } ; UE::FEventCount FinishedEvent ; ~)",
    "insertText": "FInternalData()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; TRefCountPtr<FInternalData> InternalData ; LowLevelTasks::ETaskPriority Priority ; TFunctionRef<)",
    "insertText": "void(TaskType*)"
  },
  {
    "label": "TLocalWorkQueue()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TLocalWorkQueue(TaskType* InitialWork, LowLevelTasks::ETaskPriority InPriority = LowLevelTasks::ETaskPriority::Count) : Priority(InPriority)"
  },
  {
    "label": "GetActiveTask()",
    "kind": "Method",
    "detail": "Function (const LowLevelTasks::FTask* ActiveTask = LowLevelTasks::)",
    "insertText": "GetActiveTask()"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (Priority = ActiveTask ->)",
    "insertText": "GetPriority()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Priority = LowLevelTasks::ETaskPriority::BackgroundNormal ; } else)",
    "insertText": "if(Priority == LowLevelTasks::ETaskPriority::BackgroundNormal)"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTask(InitialWork)"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "AddTask(TaskType* NewWork)"
  },
  {
    "label": "enqueue()",
    "kind": "Method",
    "detail": "Function (InternalData -> TaskQueue .)",
    "insertText": "enqueue(NewWork)"
  },
  {
    "label": "AddWorkers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddWorkers(uint16 NumWorkers)"
  },
  {
    "label": "ThreadSafe()",
    "kind": "Method",
    "detail": "Function (using FTaskHandle = TSharedPtr<LowLevelTasks::FTask,ESPMode::ThreadSafe> ; FTaskHandle TaskHandle = MakeShared<LowLevelTasks::FTask,)",
    "insertText": "ThreadSafe()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TaskHandle ->)",
    "insertText": "Init(TEXT(\"TLocalWorkQueue::AddWorkers\"), Priority, [LocalDoWork, InternalData = InternalData, TaskHandle]() { TRACE_CPUPROFILER_EVENT_SCOPE(TLocalWorkQueue::AddWorkers); InternalData->ActiveWorkers.fetch_add(1, std::memory_order_acquire); while (TaskType* Work = InternalData->TaskQueue.dequeue()) { check(!InternalData->CheckDone.load(std::memory_order_relaxed)); (*LocalDoWork)(Work); } if (InternalData->ActiveWorkers.fetch_sub(1, std::memory_order_release) == 1) { InternalData->FinishedEvent.Notify(); } })"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Run(TFunctionRef<void(TaskType*)> InDoWork)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (bool bNoActiveWorkers = InternalData -> ActiveWorkers .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "InDoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InDoWork(Work)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bNoActiveWorkers && InternalData->ActiveWorkers.load(std::memory_order_acquire) == 0)"
  },
  {
    "label": "PrepareWait()",
    "kind": "Method",
    "detail": "Function (break ; } else { auto Token = InternalData -> FinishedEvent .)",
    "insertText": "PrepareWait()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(TLocalWorkQueue::WaitingForWorkers)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (InternalData -> FinishedEvent .)",
    "insertText": "Wait(Token)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} } InternalData -> CheckDone .)",
    "insertText": "store(true)"
  }
]