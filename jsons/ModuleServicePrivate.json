[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FModuleService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleService"
  },
  {
    "label": "FModuleService()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TraceServices / ModuleService . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Misc / ScopeLock . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { class IAnalysisSession ; class FModuleService : public IModuleService { public :)",
    "insertText": "FModuleService()"
  },
  {
    "label": "GetAvailableModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableModules(TArray<FModuleInfo>& OutModules)"
  },
  {
    "label": "GetAvailableModulesEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableModulesEx(TArray<FModuleInfoEx>& OutModules)"
  },
  {
    "label": "GetEnabledModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEnabledModules(TArray<FModuleInfo>& OutModules)"
  },
  {
    "label": "SetModuleEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModuleEnabled(const FName& ModuleName, bool bEnabled)"
  },
  {
    "label": "GenerateReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateReports(const IAnalysisSession& Session, const TCHAR* CmdLine, const TCHAR* OutputDirectory)"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(IAnalysisSession& Session)"
  },
  {
    "label": "GetModuleLoggers()",
    "kind": "Method",
    "detail": "Function (TArray<const TCHAR*>)",
    "insertText": "GetModuleLoggers(const FName& ModuleName)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetEnabledModulesFromCommandLine()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetEnabledModulesFromCommandLine(const TCHAR* CommandLine)"
  }
]