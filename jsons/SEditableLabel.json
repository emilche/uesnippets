[
  {
    "label": "SEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableText"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATE_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SEditableLabel) : _CanEdit(true) , _EditableTextStyle(&FCoreStyle::Get().GetWidgetStyle<FEditableTextStyle>(\"NormalEditableText\")) , _Font( FCoreStyle::Get().GetFontStyle(TEXT(\"NormalFont\"))) , _HighlightColor() , _HighlightShape() , _HighlightText() , _MinDesiredWidth(0.0f) , _ShadowColorAndOpacity() , _ShadowOffset() , _TextStyle(&FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"NormalText\")) , _Text() , _ColorAndOpacity()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, CanEdit) SLATE_STYLE_ARGUMENT(FEditableTextStyle, EditableTextStyle) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE(FLinearColor, HighlightColor) SLATE_ATTRIBUTE(const FSlateBrush*, HighlightShape) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_ATTRIBUTE( float, MinDesiredWidth ) SLATE_ATTRIBUTE(FLinearColor, ShadowColorAndOpacity) SLATE_ATTRIBUTE(FVector2D, ShadowOffset) SLATE_STYLE_ARGUMENT(FTextBlockStyle, TextStyle) SLATE_ATTRIBUTE(FText, Text) SLATE_ATTRIBUTE(FSlateColor, ColorAndOpacity) SLATE_EVENT(FOnTextChanged, OnTextChanged) SLATE_END_ARGS() SEditableLabel()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "EnterTextMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterTextMode()"
  },
  {
    "label": "ExitTextMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitTextMode()"
  },
  {
    "label": "HasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasKeyboardFocus()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HandleEditableTextTextCommitted()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleEditableTextTextCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "HandleTextBlockDoubleClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleTextBlockDoubleClicked()"
  }
]