[
  {
    "label": "FErrorReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FErrorReporter"
  },
  {
    "label": "FErrorReporter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosLog . h \" # include \" Logging / LogMacros . h \" namespace Chaos { class FErrorReporter { public :)",
    "insertText": "FErrorReporter(FString ErrorPrefix = \"\") : bEncountedErrors(false) , bUnhandledErrors(false) , Prefix(ErrorPrefix)"
  },
  {
    "label": "HandleLatestError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleLatestError()"
  },
  {
    "label": "ContainsUnhandledError()",
    "kind": "Method",
    "detail": "Function (bUnhandledErrors = false ; } bool)",
    "insertText": "ContainsUnhandledError()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogChaos, Log, TEXT(\"ErrorReporter: %s\"), *Prefix, ErrorMsg)"
  },
  {
    "label": "ReportWarning()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReportWarning(const TCHAR* ErrorMsg)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogChaos, Warning, TEXT(\"ErrorReporter: %s\"), *Prefix, ErrorMsg)"
  },
  {
    "label": "ReportError()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReportError(const TCHAR* ErrorMsg)"
  },
  {
    "label": "ReportWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportWarning(ErrorMsg)"
  },
  {
    "label": "EncounteredAnyErrors()",
    "kind": "Method",
    "detail": "Function (bEncountedErrors = true ; bUnhandledErrors = true ; } bool)",
    "insertText": "EncounteredAnyErrors()"
  },
  {
    "label": "GetPrefix()",
    "kind": "Method",
    "detail": "Function (Prefix = NewPrefix ; } FString)",
    "insertText": "GetPrefix()"
  }
]