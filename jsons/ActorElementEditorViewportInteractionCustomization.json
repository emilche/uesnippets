[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FActorElementEditorViewportInteractionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorElementEditorViewportInteractionCustomization"
  },
  {
    "label": "GizmoManipulationStarted()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Framework / TypedElementViewportInteraction . h \" # include \" Elements / Framework / TypedElementAssetEditorToolkitHostMixin . h \" class AActor ; class FActorElementEditorViewportInteractionCustomization : public FTypedElementViewportInteractionCustomization { public : void)",
    "insertText": "GizmoManipulationStarted(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GizmoManipulationDeltaUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GizmoManipulationDeltaUpdate(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode, const EAxisList::Type InDragAxis, const FInputDeviceState& InInputState, const FTransform& InDeltaTransform, const FVector& InPivotLocation)"
  },
  {
    "label": "GizmoManipulationStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GizmoManipulationStopped(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode, const ETypedElementViewportInteractionGizmoManipulationType InManipulationType)"
  },
  {
    "label": "MirrorElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorElement(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const FVector& InMirrorScale, const FVector& InPivotLocation)"
  },
  {
    "label": "GetFocusBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFocusBounds(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "ApplyDeltaToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToActor(AActor* InActor, const bool InIsDelta, const FVector* InDeltaTranslationPtr, const FRotator* InDeltaRotationPtr, const FVector* InDeltaScalePtr, const FVector& InPivotLocation, const FInputDeviceState& InInputState)"
  }
]