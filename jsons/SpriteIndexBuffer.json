[
  {
    "label": "FSpriteIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpriteIndexBuffer"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" # include \" RHI . h \" # include \" RHICommandList . h \" template<uint32 NumSprites> class FSpriteIndexBuffer : public FIndexBuffer { public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32 Size =)",
    "insertText": "sizeof(uint16)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"FSpriteIndexBuffer\"))"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (IndexBufferRHI = RHICmdList .)",
    "insertText": "CreateBuffer(Size, BUF_Static | BUF_IndexBuffer, Stride, ERHIAccess::VertexOrIndexBuffer, CreateInfo)"
  },
  {
    "label": "Indices()",
    "kind": "Method",
    "detail": "Function (uint16*)",
    "insertText": "Indices(uint16*)RHICmdList.LockBuffer( IndexBufferRHI, 0, Size, RLM_WriteOnly)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (Indices [ SpriteIndex* 6 + 0 ] = SpriteIndex* 4 + 0 ; Indices [ SpriteIndex* 6 + 1 ] = SpriteIndex* 4 + 3 ; Indices [ SpriteIndex* 6 + 2 ] = SpriteIndex* 4 + 2 ; Indices [ SpriteIndex* 6 + 3 ] = SpriteIndex* 4 + 0 ; Indices [ SpriteIndex* 6 + 4 ] = SpriteIndex* 4 + 1 ; Indices [ SpriteIndex* 6 + 5 ] = SpriteIndex* 4 + 3 ; } RHICmdList .)",
    "insertText": "UnlockBuffer(IndexBufferRHI)"
  }
]