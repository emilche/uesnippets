[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ScrollingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScrollingParams"
  },
  {
    "label": "ScreenShareConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScreenShareConfig"
  },
  {
    "label": "VideoSimulcastConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSimulcastConfig"
  },
  {
    "label": "EmulatedSFUConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmulatedSFUConfig"
  },
  {
    "label": "VideoResolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoResolution"
  },
  {
    "label": "VideoDumpOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoDumpOptions"
  },
  {
    "label": "VideoConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoConfig"
  },
  {
    "label": "AudioConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioConfig"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "VideoCodecConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoCodecConfig"
  },
  {
    "label": "VideoSubscription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSubscription"
  },
  {
    "label": "EchoEmulationConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EchoEmulationConfig"
  },
  {
    "label": "ScreenShareConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_PCLF_MEDIA_CONFIGURATION_H_ # define API_TEST_PCLF_MEDIA_CONFIGURATION_H_ # include<stddef . h> # include<stdint . h> # include<functional> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / async_resolver_factory . h \" # include \" api / audio / audio_mixer . h \" # include \" api / audio_options . h \" # include \" api / call / call_factory_interface . h \" # include \" api / fec_controller . h \" # include \" api / function_view . h \" # include \" api / media_stream_interface . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_event_log / rtc_event_log_factory_interface . h \" # include \" api / rtp_parameters . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / audio_quality_analyzer_interface . h \" # include \" api / test / frame_generator_interface . h \" # include \" api / test / peer_network_dependencies . h \" # include \" api / test / simulated_network . h \" # include \" api / test / stats_observer_interface . h \" # include \" api / test / track_id_stream_info_map . h \" # include \" api / test / video / video_frame_writer . h \" # include \" api / test / video_quality_analyzer_interface . h \" # include \" api / transport / network_control . h \" # include \" api / units / time_delta . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / network . h \" # include \" rtc_base / rtc_certificate_generator . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / thread . h \" namespace webrtc { namespace webrtc_pc_e2e { size_t kDefaultSlidesWidth = 1 8 5 0 ; size_t kDefaultSlidesHeight = 1 1 1 0 ; enum class CapturingDeviceIndex : size_t { } ; struct ScrollingParams { TimeDelta duration ; size_t source_width = kDefaultSlidesWidth ; size_t source_height = kDefaultSlidesHeight ; } ; struct ScreenShareConfig {)",
    "insertText": "ScreenShareConfig(TimeDelta slide_change_interval)"
  },
  {
    "label": "VideoSimulcastConfig()",
    "kind": "Method",
    "detail": "Function (TimeDelta slide_change_interval ; bool generate_slides = false ; absl::optional<ScrollingParams> scrolling_params ; std::vector<std::string> slides_yuv_file_names ; } ; struct VideoSimulcastConfig {)",
    "insertText": "VideoSimulcastConfig(int simulcast_streams_count)"
  },
  {
    "label": "EmulatedSFUConfig()",
    "kind": "Method",
    "detail": "Function (int simulcast_streams_count ; } ; struct EmulatedSFUConfig {)",
    "insertText": "EmulatedSFUConfig()"
  },
  {
    "label": "EmulatedSFUConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmulatedSFUConfig(int target_layer_index)"
  },
  {
    "label": "EmulatedSFUConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmulatedSFUConfig(absl::optional<int> target_layer_index, absl::optional<int> target_temporal_index)"
  },
  {
    "label": "VideoResolution()",
    "kind": "Method",
    "detail": "Function (absl::optional<int> target_layer_index ; absl::optional<int> target_temporal_index ; } ; class VideoResolution { public : enum class Spec { kNone,kMaxFromSender } ;)",
    "insertText": "VideoResolution(size_t width, size_t height, int32_t fps)"
  },
  {
    "label": "VideoResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoResolution(Spec spec = Spec::kNone)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const VideoResolution& other)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "width()"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (width_ = width ; } size_t)",
    "insertText": "height()"
  },
  {
    "label": "fps()",
    "kind": "Method",
    "detail": "Function (height_ = height ; } int32_t)",
    "insertText": "fps()"
  },
  {
    "label": "IsRegular()",
    "kind": "Method",
    "detail": "Function (fps_ = fps ; } bool)",
    "insertText": "IsRegular()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "VideoDumpOptions()",
    "kind": "Method",
    "detail": "Function (private : size_t width_ = 0 ; size_t height_ = 0 ; int32_t fps_ = 0 ; Spec spec_ = Spec::kNone ; } ; class VideoDumpOptions { public : int kDefaultSamplingModulo = 1 ;)",
    "insertText": "VideoDumpOptions(absl::string_view output_directory, int sampling_modulo = kDefaultSamplingModulo, bool export_frame_ids = false, std::function<std::unique_ptr<test::VideoFrameWriter>( absl::string_view file_name_prefix, const VideoResolution& resolution)> video_frame_writer_factory = Y4mVideoFrameWriterFactory)"
  },
  {
    "label": "VideoDumpOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoDumpOptions(absl::string_view output_directory, bool export_frame_ids)"
  },
  {
    "label": "VideoDumpOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoDumpOptions(const VideoDumpOptions&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoDumpOptions&)",
    "insertText": "operator(const VideoDumpOptions&)"
  },
  {
    "label": "VideoDumpOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoDumpOptions(VideoDumpOptions&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoDumpOptions&)",
    "insertText": "operator(VideoDumpOptions&&)"
  },
  {
    "label": "output_directory()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "output_directory()"
  },
  {
    "label": "CreateOutputDumpVideoFrameWriter()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::VideoFrameWriter>)",
    "insertText": "CreateOutputDumpVideoFrameWriter(absl::string_view stream_label, absl::string_view receiver, const VideoResolution& resolution)"
  },
  {
    "label": "Y4mVideoFrameWriterFactory()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<test::VideoFrameWriter>)",
    "insertText": "Y4mVideoFrameWriterFactory(absl::string_view file_name_prefix, const VideoResolution& resolution)"
  },
  {
    "label": "GetInputDumpFileName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetInputDumpFileName(absl::string_view stream_label, const VideoResolution& resolution)"
  },
  {
    "label": "GetInputFrameIdsDumpFileName()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "GetInputFrameIdsDumpFileName(absl::string_view stream_label, const VideoResolution& resolution)"
  },
  {
    "label": "GetOutputDumpFileName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetOutputDumpFileName(absl::string_view stream_label, absl::string_view receiver, const VideoResolution& resolution)"
  },
  {
    "label": "GetOutputFrameIdsDumpFileName()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "GetOutputFrameIdsDumpFileName(absl::string_view stream_label, absl::string_view receiver, const VideoResolution& resolution)"
  },
  {
    "label": "VideoFrameWriter()",
    "kind": "Method",
    "detail": "Function (std::string output_directory_ ; int sampling_modulo_ = 1 ; bool export_frame_ids_ = false ; std::function<std::unique_ptr<)",
    "insertText": "VideoFrameWriter(absl::string_view file_name_prefix, const VideoResolution& resolution)"
  },
  {
    "label": "VideoConfig()",
    "kind": "Method",
    "detail": "Function (} ; struct VideoConfig {)",
    "insertText": "VideoConfig(const VideoResolution& resolution)"
  },
  {
    "label": "VideoConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoConfig(size_t width, size_t height, int32_t fps)"
  },
  {
    "label": "VideoConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoConfig(std::string stream_label, size_t width, size_t height, int32_t fps)"
  },
  {
    "label": "GetResolution()",
    "kind": "Method",
    "detail": "Function (size_t width ; size_t height ; int32_t fps ; VideoResolution)",
    "insertText": "GetResolution()"
  },
  {
    "label": "AudioConfig()",
    "kind": "Method",
    "detail": "Function (} absl::optional<std::string> stream_label ; absl::optional<VideoTrackInterface::ContentHint> content_hint ; absl::optional<VideoSimulcastConfig> simulcast_config ; absl::optional<EmulatedSFUConfig> emulated_sfu_config ; std::vector<RtpEncodingParameters> encoding_params ; absl::optional<int> temporal_layers_count ; absl::optional<VideoDumpOptions> input_dump_options ; absl::optional<VideoDumpOptions> output_dump_options ; bool output_dump_use_fixed_framerate = false ; bool show_on_screen = false ; absl::optional<std::string> sync_group ; absl::optional<DegradationPreference> degradation_preference ; } ; struct AudioConfig { enum Mode { kGenerated,kFile,} ;)",
    "insertText": "AudioConfig()"
  },
  {
    "label": "AudioConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioConfig(std::string stream_label)"
  },
  {
    "label": "VideoCodecConfig()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string> stream_label ; Mode mode = kGenerated ; absl::optional<std::string> input_file_name ; absl::optional<std::string> input_dump_file_name ; absl::optional<std::string> output_dump_file_name ; cricket::AudioOptions audio_options ; int sampling_frequency_in_hz = 4 8 0 0 0 ; absl::optional<std::string> sync_group ; } ; struct VideoCodecConfig {)",
    "insertText": "VideoCodecConfig(std::string name)"
  },
  {
    "label": "VideoCodecConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoCodecConfig(std::string name, std::map<std::string, std::string> required_params)"
  },
  {
    "label": "GetMaxResolution()",
    "kind": "Method",
    "detail": "Function (std::string name ; std::map<std::string,std::string> required_params ; } ; class VideoSubscription { public : absl::optional<VideoResolution>)",
    "insertText": "GetMaxResolution(rtc::ArrayView<const VideoConfig> video_configs)"
  },
  {
    "label": "GetMaxResolution()",
    "kind": "Method",
    "detail": "Function (absl::optional<VideoResolution>)",
    "insertText": "GetMaxResolution(rtc::ArrayView<const VideoResolution> resolutions)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const VideoSubscription& other)"
  },
  {
    "label": "SubscribeToPeer()",
    "kind": "Method",
    "detail": "Function (VideoSubscription&)",
    "insertText": "SubscribeToPeer(absl::string_view peer_name, VideoResolution resolution = VideoResolution(VideoResolution::Spec::kMaxFromSender))"
  },
  {
    "label": "SubscribeToAllPeers()",
    "kind": "Method",
    "detail": "Function (VideoSubscription&)",
    "insertText": "SubscribeToAllPeers(VideoResolution resolution = VideoResolution(VideoResolution::Spec::kMaxFromSender))"
  },
  {
    "label": "GetResolutionForPeer()",
    "kind": "Method",
    "detail": "Function (absl::optional<VideoResolution>)",
    "insertText": "GetResolutionForPeer(absl::string_view peer_name)"
  },
  {
    "label": "GetSubscribedPeers()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "GetSubscribedPeers()"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<VideoResolution> default_resolution_ = absl::nullopt ; std::map<std::string,VideoResolution> peers_resolution_ ; } ; struct EchoEmulationConfig { TimeDelta echo_delay =)",
    "insertText": "Millis(50)"
  }
]