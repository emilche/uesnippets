[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FSelectedSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedSocketInfo"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "FSkeletonSelectionEditMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonSelectionEditMode"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "FSkeletonSelectionEditMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UnrealWidgetFwd . h \" # include \" IPersonaEditMode . h \" class FCanvas ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class USkeletalMeshSocket ; class USkeletalMeshComponent ; struct FViewportClick ; struct FSelectedSocketInfo ; class FViewportClient ; struct FReferenceSkeleton ; struct FGizmoState ; class FSkeletonSelectionEditMode : public IPersonaEditMode { public :)",
    "insertText": "FSkeletonSelectionEditMode()"
  },
  {
    "label": "GetCameraTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCameraTarget(FSphere& OutTarget)"
  },
  {
    "label": "GetAnimPreviewScene()",
    "kind": "Method",
    "detail": "Function (class IPersonaPreviewScene&)",
    "insertText": "GetAnimPreviewScene()"
  },
  {
    "label": "GetOnScreenDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOnScreenDebugInfo(TArray<FText>& OutDebugInfo)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "EndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTransform(const FGizmoState& InState)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (protected : FTransform)",
    "insertText": "GetBoneTransform(const int32 BoneIndex)"
  },
  {
    "label": "GetSocketTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSocketTransform(const USkeletalMeshSocket* Socket)"
  },
  {
    "label": "GetWorldSpaceBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetWorldSpaceBoneTransform(const FReferenceSkeleton& ReferenceSkeleton, const int32 BoneIndex)"
  },
  {
    "label": "GetReferenceSkeletonForComponent()",
    "kind": "Method",
    "detail": "Function (const FReferenceSkeleton&)",
    "insertText": "GetReferenceSkeletonForComponent(const USkeletalMeshComponent* Component)"
  },
  {
    "label": "DuplicateAndSelectSocket()",
    "kind": "Method",
    "detail": "Function (private : FSelectedSocketInfo)",
    "insertText": "DuplicateAndSelectSocket(const FSelectedSocketInfo& SocketInfoToDuplicate)"
  },
  {
    "label": "IsSelectedBoneRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedBoneRequired()"
  },
  {
    "label": "GetDPIUnscaledSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetDPIUnscaledSize(FViewport* Viewport, FViewportClient* Client)"
  }
]