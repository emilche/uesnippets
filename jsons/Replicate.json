[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Replicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Replicate"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_REPLICATE_H # define EIGEN_REPLICATE_H namespace Eigen { namespace internal { template<MatrixType,int RowFactor,int ColFactor> struct traits<Replicate<MatrixType,RowFactor,ColFactor>> : traits<MatrixType> { typedef MatrixType::Scalar Scalar ; typedef traits<MatrixType>::StorageKind StorageKind ; typedef traits<MatrixType>::XprKind XprKind ; typedef ref_selector<MatrixType>::type MatrixTypeNested ; typedef remove_reference<MatrixTypeNested>::type _MatrixTypeNested ; enum { RowsAtCompileTime = RowFactor = = Dynamic | |)",
    "insertText": "int(MatrixType::RowsAtCompileTime)==Dynamic ? Dynamic : RowFactor * MatrixType::RowsAtCompileTime, ColsAtCompileTime = ColFactor==Dynamic || int(MatrixType::ColsAtCompileTime)==Dynamic ? Dynamic : ColFactor * MatrixType::ColsAtCompileTime, MaxRowsAtCompileTime = RowsAtCompileTime, MaxColsAtCompileTime = ColsAtCompileTime, IsRowMajor = MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1 ? 1 : MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1 ? 0 : (MatrixType::Flags & RowMajorBit)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<MatrixType,int RowFactor,int ColFactor> class Replicate : public internal::dense_xpr_base<Replicate<MatrixType,RowFactor,ColFactor>>::type { typedef internal::traits<Replicate>::MatrixTypeNested MatrixTypeNested ; typedef internal::traits<Replicate>::_MatrixTypeNested _MatrixTypeNested ; public : typedef internal::dense_xpr_base<Replicate>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Replicate)"
  },
  {
    "label": "Replicate()",
    "kind": "Method",
    "detail": "Function (template<OriginalMatrixType> EIGEN_DEVICE_FUNC)",
    "insertText": "Replicate(const OriginalMatrixType& matrix) : m_matrix(matrix), m_rowFactor(RowFactor), m_colFactor(ColFactor)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<typename internal::remove_const<MatrixType>::type,OriginalMatrixType>::value), THE_MATRIX_OR_EXPRESSION_THAT_YOU_PASSED_DOES_NOT_HAVE_THE_EXPECTED_TYPE) eigen_assert(RowFactor!=Dynamic && ColFactor!=Dynamic)"
  },
  {
    "label": "Replicate()",
    "kind": "Method",
    "detail": "Function (} template<OriginalMatrixType> EIGEN_DEVICE_FUNC)",
    "insertText": "Replicate(const OriginalMatrixType& matrix, Index rowFactor, Index colFactor) : m_matrix(matrix), m_rowFactor(rowFactor), m_colFactor(colFactor)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<typename internal::remove_const<MatrixType>::type,OriginalMatrixType>::value), THE_MATRIX_OR_EXPRESSION_THAT_YOU_PASSED_DOES_NOT_HAVE_THE_EXPECTED_TYPE) } EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR inline Index rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const _MatrixTypeNested&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "replicate()",
    "kind": "Method",
    "detail": "Function (} template<ExpressionType,int Direction> EIGEN_DEVICE_FUNC const VectorwiseOp<ExpressionType,Direction>::ReplicateReturnType VectorwiseOp<ExpressionType,Direction)",
    "insertText": "replicate(Index factor)"
  }
]