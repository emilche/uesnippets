[
  {
    "label": "Curl_multi",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Curl_multi"
  },
  {
    "label": "CURLMsg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CURLMsg"
  },
  {
    "label": "curl_waitfd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "curl_waitfd"
  },
  {
    "label": "curl_pushheaders",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "curl_pushheaders"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CURLINC_MULTI_H # define CURLINC_MULTI_H # include \" curl . h \" # ifdef __cplusplus \" C \" { # endif # if)",
    "insertText": "defined(BUILDING_LIBCURL) || defined(CURL_STRICTER)"
  },
  {
    "label": "curl_multi_init()",
    "kind": "Method",
    "detail": "Function (# else typedef void CURLM ; # endif typedef enum { CURLM_CALL_MULTI_PERFORM = - 1,CURLM_OK,CURLM_BAD_HANDLE,CURLM_BAD_EASY_HANDLE,CURLM_OUT_OF_MEMORY,CURLM_INTERNAL_ERROR,CURLM_BAD_SOCKET,CURLM_UNKNOWN_OPTION,CURLM_ADDED_ALREADY,CURLM_RECURSIVE_API_CALL,CURLM_WAKEUP_FAILURE,CURLM_BAD_FUNCTION_ARGUMENT,CURLM_ABORTED_BY_CALLBACK,CURLM_UNRECOVERABLE_POLL,CURLM_LAST } CURLMcode ; # define CURLM_CALL_MULTI_SOCKET CURLM_CALL_MULTI_PERFORM # define CURLPIPE_NOTHING 0 L # define CURLPIPE_HTTP1 1 L # define CURLPIPE_MULTIPLEX 2 L typedef enum { CURLMSG_NONE,CURLMSG_DONE,CURLMSG_LAST } CURLMSG ; struct CURLMsg { CURLMSG msg ; CURL* easy_handle ; union { void* whatever ; CURLcode result ; } data ; } ; typedef struct CURLMsg CURLMsg ; # define CURL_WAIT_POLLIN 0 x0001 # define CURL_WAIT_POLLPRI 0 x0002 # define CURL_WAIT_POLLOUT 0 x0004 struct curl_waitfd { curl_socket_t fd ; short events ; short revents ; } ; CURL_EXTERN CURLM*)",
    "insertText": "curl_multi_init(void)"
  },
  {
    "label": "curl_multi_add_handle()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_add_handle(CURLM *multi_handle, CURL *curl_handle)"
  },
  {
    "label": "curl_multi_remove_handle()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_remove_handle(CURLM *multi_handle, CURL *curl_handle)"
  },
  {
    "label": "curl_multi_fdset()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_fdset(CURLM *multi_handle, fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set, int *max_fd)"
  },
  {
    "label": "curl_multi_wait()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_wait(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)"
  },
  {
    "label": "curl_multi_poll()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_poll(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *ret)"
  },
  {
    "label": "curl_multi_wakeup()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_wakeup(CURLM *multi_handle)"
  },
  {
    "label": "curl_multi_perform()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_perform(CURLM *multi_handle, int *running_handles)"
  },
  {
    "label": "curl_multi_cleanup()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_cleanup(CURLM *multi_handle)"
  },
  {
    "label": "curl_multi_info_read()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMsg*)",
    "insertText": "curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue)"
  },
  {
    "label": "curl_multi_strerror()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN const char*)",
    "insertText": "curl_multi_strerror(CURLMcode)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# define CURL_POLL_NONE 0 # define CURL_POLL_IN 1 # define CURL_POLL_OUT 2 # define CURL_POLL_INOUT 3 # define CURL_POLL_REMOVE 4 # define CURL_SOCKET_TIMEOUT CURL_SOCKET_BAD # define CURL_CSELECT_IN 0 x01 # define CURL_CSELECT_OUT 0 x02 # define CURL_CSELECT_ERR 0 x04 typedef)",
    "insertText": "int(*curl_socket_callback)(CURL *easy, curl_socket_t s, int what, void *userp, void *socketp)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*curl_multi_timer_callback)(CURLM *multi, long timeout_ms, void *userp)"
  },
  {
    "label": "CURL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "CURL_DEPRECATED(7.19.5, \"Use curl_multi_socket_action()\") curl_multi_socket(CURLM *multi_handle, curl_socket_t s, int *running_handles)"
  },
  {
    "label": "curl_multi_socket_action()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_socket_action(CURLM *multi_handle, curl_socket_t s, int ev_bitmask, int *running_handles)"
  },
  {
    "label": "CURL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "CURL_DEPRECATED(7.19.5, \"Use curl_multi_socket_action()\") curl_multi_socket_all(CURLM *multi_handle, int *running_handles)"
  },
  {
    "label": "curl_multi_socket()",
    "kind": "Method",
    "detail": "Function (# ifndef CURL_ALLOW_OLD_MULTI_SOCKET # define)",
    "insertText": "curl_multi_socket(x,y,z) curl_multi_socket_action(x,y,0,z) #endif CURL_EXTERN CURLMcode curl_multi_timeout(CURLM *multi_handle, long *milliseconds)"
  },
  {
    "label": "CURLOPT()",
    "kind": "Method",
    "detail": "Function (typedef enum {)",
    "insertText": "CURLOPT(CURLMOPT_SOCKETFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 1), CURLOPT(CURLMOPT_SOCKETDATA, CURLOPTTYPE_OBJECTPOINT, 2), CURLOPT(CURLMOPT_PIPELINING, CURLOPTTYPE_LONG, 3), CURLOPT(CURLMOPT_TIMERFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 4), CURLOPT(CURLMOPT_TIMERDATA, CURLOPTTYPE_OBJECTPOINT, 5), CURLOPT(CURLMOPT_MAXCONNECTS, CURLOPTTYPE_LONG, 6), CURLOPT(CURLMOPT_MAX_HOST_CONNECTIONS, CURLOPTTYPE_LONG, 7), CURLOPT(CURLMOPT_MAX_PIPELINE_LENGTH, CURLOPTTYPE_LONG, 8), CURLOPT(CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE, CURLOPTTYPE_OFF_T, 9), CURLOPT(CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE, CURLOPTTYPE_OFF_T, 10), CURLOPT(CURLMOPT_PIPELINING_SITE_BL, CURLOPTTYPE_OBJECTPOINT, 11), CURLOPT(CURLMOPT_PIPELINING_SERVER_BL, CURLOPTTYPE_OBJECTPOINT, 12), CURLOPT(CURLMOPT_MAX_TOTAL_CONNECTIONS, CURLOPTTYPE_LONG, 13), CURLOPT(CURLMOPT_PUSHFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 14), CURLOPT(CURLMOPT_PUSHDATA, CURLOPTTYPE_OBJECTPOINT, 15), CURLOPT(CURLMOPT_MAX_CONCURRENT_STREAMS, CURLOPTTYPE_LONG, 16)"
  },
  {
    "label": "curl_multi_setopt()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_setopt(CURLM *multi_handle, CURLMoption option, ...)"
  },
  {
    "label": "curl_multi_assign()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURLMcode)",
    "insertText": "curl_multi_assign(CURLM *multi_handle, curl_socket_t sockfd, void *sockp)"
  },
  {
    "label": "curl_multi_get_handles()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN CURL**)",
    "insertText": "curl_multi_get_handles(CURLM *multi_handle)"
  },
  {
    "label": "curl_pushheader_bynum()",
    "kind": "Method",
    "detail": "Function (# define CURL_PUSH_OK 0 # define CURL_PUSH_DENY 1 # define CURL_PUSH_ERROROUT 2 struct curl_pushheaders ; CURL_EXTERN char*)",
    "insertText": "curl_pushheader_bynum(struct curl_pushheaders *h, size_t num)"
  },
  {
    "label": "curl_pushheader_byname()",
    "kind": "Method",
    "detail": "Function (CURL_EXTERN char*)",
    "insertText": "curl_pushheader_byname(struct curl_pushheaders *h, const char *name)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*curl_push_callback)(CURL *parent, CURL *easy, size_t num_headers, struct curl_pushheaders *headers, void *userp)"
  }
]