[
  {
    "label": "FNavigationReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationReply"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SLATEREFLECTOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATEREFLECTOR_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSimulatedReply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulatedReply"
  },
  {
    "label": "FSimulationResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulationResult"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Events . h \" # include \" Layout / ArrangedWidget . h \" # include \" Layout / WidgetPath . h \" # include \" Misc / Optional . h \" # include \" Types / SlateEnums . h \" class FNavigationReply ; class SWidget ; class SWindow ; class FSlateNavigationEventSimulator { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TOptional<FWidgetPath>, FHandleNavigation, uint32 , const TSharedPtr<SWidget>&)"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (enum class ENavigationStyle { FourCardinalDirections,ConceptualNextAndPrevious,} ; FText)",
    "insertText": "ToText(ENavigationStyle NavigationStyle)"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (enum class ERoutedReason { BoundaryRule,Window,LastWidget,} ; FText)",
    "insertText": "ToText(ERoutedReason RoutedReason)"
  },
  {
    "label": "FSimulatedReply()",
    "kind": "Method",
    "detail": "Function (struct FSimulatedReply {)",
    "insertText": "FSimulatedReply()"
  },
  {
    "label": "FSimulatedReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimulatedReply(const FNavigationReply&)"
  },
  {
    "label": "IsHandled()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> EventHandler ; TSharedPtr<SWidget> FocusRecipient ; EUINavigationRule BoundaryRule ; } ; struct FSimulationResult { FWidgetPath NavigationSource ; FWidgetPath NavigationDestination ; EUINavigation NavigationType = EUINavigation::Invalid ; FSimulatedReply NavigationReply ; ERoutedReason RoutedReason = ERoutedReason::LastWidget ; TSharedPtr<SWidget> WidgetThatShouldReceivedFocus ; TSharedPtr<SWidget> FocusedWidgetPath ; bool bIsDynamic = false ; bool bAlwaysHandleNavigationAttempt = false ; bool bCanFindWidgetForSetFocus = false ; bool bRoutedHandlerHasNavigationMeta = false ; bool bHandledByViewport = false ; bool)",
    "insertText": "IsHandled()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SimulateForEachWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<FSimulationResult>)",
    "insertText": "SimulateForEachWidgets(const TSharedRef<SWindow>& Window, int32 UserIndex, ENavigationGenesis Genesis, ENavigationStyle Navigation)"
  },
  {
    "label": "SimulateForEachWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<FSimulationResult>)",
    "insertText": "SimulateForEachWidgets(const FWidgetPath& WidgetPath, int32 UserIndex, ENavigationGenesis Genesis, EUINavigation Navigation)"
  },
  {
    "label": "SimulateForEachWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<FSimulationResult>)",
    "insertText": "SimulateForEachWidgets(const TSharedRef<SWindow>& Window, int32 UserIndex, ENavigationGenesis Genesis, EUINavigation Navigation)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (TArray<FSimulationResult>)",
    "insertText": "Simulate(const FWidgetPath& WidgetPath, int32 UserIndex, ENavigationGenesis Genesis, ENavigationStyle Navigation)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (FSimulationResult)",
    "insertText": "Simulate(const FWidgetPath& WidgetPath, int32 UserIndex, ENavigationGenesis Genesis, EUINavigation Navigation)"
  },
  {
    "label": "InterpretResult()",
    "kind": "Method",
    "detail": "Function (public : FHandleNavigation OnViewportHandleNavigation ; private : FSimulationResult)",
    "insertText": "InterpretResult(const FWidgetPath& WidgetPath, const FNavigationEvent& NavigationEvent, const FNavigationReply& Reply, const FArrangedWidget& BoundaryWidget)"
  }
]