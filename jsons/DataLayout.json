[
  {
    "label": "LLVMOpaqueTargetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LLVMOpaqueTargetData"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "IntegerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntegerType"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "StructLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructLayout"
  },
  {
    "label": "Triple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Triple"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "ArrayRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayRef"
  },
  {
    "label": "AlignTypeEnum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AlignTypeEnum"
  },
  {
    "label": "LayoutAlignElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LayoutAlignElem"
  },
  {
    "label": "PointerAlignElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointerAlignElem"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "ManglingModeT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ManglingModeT"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_DATALAYOUT_H # define LLVM_IR_DATALAYOUT_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / IR / DerivedTypes . h \" # include \" llvm / IR / Type . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / DataTypes . h \" typedef struct LLVMOpaqueTargetData* LLVMTargetDataRef ; namespace llvm { class Value ; class Type ; class IntegerType ; class StructType ; class StructLayout ; class Triple ; class GlobalVariable ; class LLVMContext ; template<T> class ArrayRef ; enum AlignTypeEnum { INVALID_ALIGN = 0,INTEGER_ALIGN = ' i ',VECTOR_ALIGN = ' v ',FLOAT_ALIGN = ' f ',AGGREGATE_ALIGN = ' a ' } ; struct LayoutAlignElem { unsigned AlignType : 8 ; unsigned TypeBitWidth : 2 4 ; unsigned ABIAlign : 1 6 ; unsigned PrefAlign : 1 6 ; LayoutAlignElem)",
    "insertText": "get(AlignTypeEnum align_type, unsigned abi_align, unsigned pref_align, uint32_t bit_width)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const LayoutAlignElem &rhs)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} ; struct PointerAlignElem { unsigned ABIAlign ; unsigned PrefAlign ; uint32_t TypeByteWidth ; uint32_t AddressSpace ; PointerAlignElem)",
    "insertText": "get(uint32_t AddressSpace, unsigned ABIAlign, unsigned PrefAlign, uint32_t TypeByteWidth)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const PointerAlignElem &rhs)"
  },
  {
    "label": "findPointerLowerBound()",
    "kind": "Method",
    "detail": "Function (} ; class DataLayout { private : bool BigEndian ; unsigned StackNaturalAlign ; enum ManglingModeT { MM_None,MM_ELF,MM_MachO,MM_WinCOFF,MM_WinCOFFX86,MM_Mips } ; ManglingModeT ManglingMode ; SmallVector<unsigned char,8> LegalIntWidths ; SmallVector<LayoutAlignElem,1 6> Alignments ; std::string StringRepresentation ; typedef SmallVector<PointerAlignElem,8> PointersTy ; PointersTy Pointers ; PointersTy::const_iterator)",
    "insertText": "findPointerLowerBound(uint32_t AddressSpace)"
  },
  {
    "label": "setAlignment()",
    "kind": "Method",
    "detail": "Function (const LayoutAlignElem InvalidAlignmentElem ; const PointerAlignElem InvalidPointerElem ; void* LayoutMap ; void)",
    "insertText": "setAlignment(AlignTypeEnum align_type, unsigned abi_align, unsigned pref_align, uint32_t bit_width)"
  },
  {
    "label": "getAlignmentInfo()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getAlignmentInfo(AlignTypeEnum align_type, uint32_t bit_width, bool ABIAlign, Type *Ty)"
  },
  {
    "label": "setPointerAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPointerAlignment(uint32_t AddrSpace, unsigned ABIAlign, unsigned PrefAlign, uint32_t TypeByteWidth)"
  },
  {
    "label": "getAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getAlignment(Type *Ty, bool abi_or_pref)"
  },
  {
    "label": "validAlignment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validAlignment(const LayoutAlignElem &align)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "DataLayout()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DataLayout(StringRef LayoutDescription) : LayoutMap(nullptr)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(LayoutDescription)"
  },
  {
    "label": "DataLayout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DataLayout(const Module *M)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const Module *M)"
  },
  {
    "label": "DataLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataLayout(const DataLayout &DL) : LayoutMap(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = DL ; } DataLayout&)",
    "insertText": "operator(const DataLayout &DL)"
  },
  {
    "label": "isBigEndian()",
    "kind": "Method",
    "detail": "Function (StringRepresentation = DL . StringRepresentation ; BigEndian = DL .)",
    "insertText": "isBigEndian()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StackNaturalAlign = DL . StackNaturalAlign ; ManglingMode = DL . ManglingMode ; LegalIntWidths = DL . LegalIntWidths ; Alignments = DL . Alignments ; Pointers = DL . Pointers ; return* this ; } bool)",
    "insertText": "operator(const DataLayout &Other)"
  },
  {
    "label": "DataLayout()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DataLayout()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(StringRef LayoutDescription)"
  },
  {
    "label": "isLittleEndian()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLittleEndian()"
  },
  {
    "label": "isLegalInteger()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLegalInteger(unsigned Width)"
  },
  {
    "label": "exceedsNaturalStackAlignment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "exceedsNaturalStackAlignment(unsigned Align)"
  },
  {
    "label": "getStackAlignment()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getStackAlignment()"
  },
  {
    "label": "getPrivateGlobalPrefix()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getPrivateGlobalPrefix()"
  },
  {
    "label": "getManglingComponent()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getManglingComponent(const Triple &T)"
  },
  {
    "label": "fitsInLegalInteger()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fitsInLegalInteger(unsigned Width)"
  },
  {
    "label": "getPointerPrefAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPointerPrefAlignment(unsigned AS = 0)"
  },
  {
    "label": "getPointerSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPointerSize(unsigned AS = 0)"
  },
  {
    "label": "getPointerSizeInBits()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPointerSizeInBits(unsigned AS = 0)"
  },
  {
    "label": "getPointerTypeSizeInBits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getPointerTypeSizeInBits(Type *)"
  },
  {
    "label": "getPointerTypeSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPointerTypeSize(Type *Ty)"
  },
  {
    "label": "getTypeSizeInBits()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getTypeSizeInBits(Type *Ty)"
  },
  {
    "label": "getTypeStoreSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getTypeStoreSize(Type *Ty)"
  },
  {
    "label": "getTypeStoreSizeInBits()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getTypeStoreSizeInBits(Type *Ty)"
  },
  {
    "label": "getTypeAllocSize()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getTypeAllocSize(Type *Ty)"
  },
  {
    "label": "getTypeAllocSizeInBits()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getTypeAllocSizeInBits(Type *Ty)"
  },
  {
    "label": "getABITypeAlignment()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getABITypeAlignment(Type *Ty)"
  },
  {
    "label": "getABIIntegerTypeAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getABIIntegerTypeAlignment(unsigned BitWidth)"
  },
  {
    "label": "getPrefTypeAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPrefTypeAlignment(Type *Ty)"
  },
  {
    "label": "getPreferredTypeAlignmentShift()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPreferredTypeAlignmentShift(Type *Ty)"
  },
  {
    "label": "getIntPtrType()",
    "kind": "Method",
    "detail": "Function (IntegerType*)",
    "insertText": "getIntPtrType(LLVMContext &C, unsigned AddressSpace = 0)"
  },
  {
    "label": "getIntPtrType()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "getIntPtrType(Type *)"
  },
  {
    "label": "getSmallestLegalIntType()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "getSmallestLegalIntType(LLVMContext &C, unsigned Width = 0)"
  },
  {
    "label": "getLargestLegalIntType()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "getLargestLegalIntType(LLVMContext &C)"
  },
  {
    "label": "getLargestLegalIntTypeSize()",
    "kind": "Method",
    "detail": "Function (unsigned LargestSize =)",
    "insertText": "getLargestLegalIntTypeSize()"
  },
  {
    "label": "getIndexedOffset()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getIndexedOffset(Type *Ty, ArrayRef<Value *> Indices)"
  },
  {
    "label": "getStructLayout()",
    "kind": "Method",
    "detail": "Function (const StructLayout*)",
    "insertText": "getStructLayout(StructType *Ty)"
  },
  {
    "label": "getPreferredAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPreferredAlignment(const GlobalVariable *GV)"
  },
  {
    "label": "getPreferredAlignmentLog()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPreferredAlignmentLog(const GlobalVariable *GV)"
  },
  {
    "label": "unwrap()",
    "kind": "Method",
    "detail": "Function (} ; DataLayout*)",
    "insertText": "unwrap(LLVMTargetDataRef P)"
  },
  {
    "label": "wrap()",
    "kind": "Method",
    "detail": "Function (} LLVMTargetDataRef)",
    "insertText": "wrap(const DataLayout *P)"
  },
  {
    "label": "getSizeInBytes()",
    "kind": "Method",
    "detail": "Function (} class StructLayout { uint64_t StructSize ; unsigned StructAlignment ; unsigned NumElements ; uint64_t MemberOffsets [ 1 ] ; public : uint64_t)",
    "insertText": "getSizeInBytes()"
  },
  {
    "label": "getElementOffset()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getElementOffset(unsigned Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < NumElements && \"Invalid element idx!\")"
  },
  {
    "label": "StructLayout()",
    "kind": "Method",
    "detail": "Function (} private : class DataLayout ;)",
    "insertText": "StructLayout(StructType *ST, const DataLayout &DL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ty->isSized() && \"Cannot getTypeInfo() on a type that is unsized!\")"
  },
  {
    "label": "getStructLayout()",
    "kind": "Method",
    "detail": "Function (} case Type::StructTyID : return)",
    "insertText": "getStructLayout(cast<StructType>(Ty))->getSizeInBits()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (} default :)",
    "insertText": "llvm_unreachable(\"DataLayout::getTypeSizeInBits(): Unsupported type\")"
  }
]