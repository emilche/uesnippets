[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialCompilationOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompilationOutput"
  },
  {
    "label": "FStaticParameterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticParameterSet"
  },
  {
    "label": "FPreshaderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreshaderData"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNode"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScope"
  },
  {
    "label": "FStatement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatement"
  },
  {
    "label": "FExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpression"
  },
  {
    "label": "FFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunction"
  },
  {
    "label": "FExpressionLocalPHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionLocalPHI"
  },
  {
    "label": "FRequestedType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestedType"
  },
  {
    "label": "FEmitContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitContext"
  },
  {
    "label": "FEmitScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitScope"
  },
  {
    "label": "FEmitShaderExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitShaderExpression"
  },
  {
    "label": "FErrorHandlerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FErrorHandlerInterface"
  },
  {
    "label": "FNullErrorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullErrorHandler"
  },
  {
    "label": "FTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTree"
  },
  {
    "label": "FOwnedNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOwnedNode"
  },
  {
    "label": "FEmitPreshaderScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitPreshaderScope"
  },
  {
    "label": "FPreparedComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreparedComponent"
  },
  {
    "label": "FPreparedType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreparedType"
  },
  {
    "label": "FPrepareValueResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrepareValueResult"
  },
  {
    "label": "FEmitValueShaderResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitValueShaderResult"
  },
  {
    "label": "FEmitCustomHLSLParameterResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitCustomHLSLParameterResult"
  },
  {
    "label": "FEmitValuePreshaderResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitValuePreshaderResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FExpressionDerivatives",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionDerivatives"
  },
  {
    "label": "FExpressionForward",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionForward"
  },
  {
    "label": "FExpressionPreviousFrameSwitch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionPreviousFrameSwitch"
  },
  {
    "label": "FExpressionFunctionCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionFunctionCall"
  },
  {
    "label": "FExpressionOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionOperation"
  },
  {
    "label": "FExpressionSetStructField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSetStructField"
  },
  {
    "label": "FOwnerScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOwnerScope"
  },
  {
    "label": "AddErrorInternal()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringView . h \" # include \" Containers / BitArray . h \" # include \" Containers / List . h \" # include \" Misc / StringBuilder . h \" # include \" Misc / MemStack . h \" # include \" Misc / GeneratedTypeName . h \" # include \" Hash / xxhash . h \" # include \" HLSLTree / HLSLTreeTypes . h \" # include \" HLSLTree / HLSLTreeHash . h \" class FMaterial ; class FMaterialCompilationOutput ; struct FStaticParameterSet ; namespace UE::Shader { class FPreshaderData ; } namespace UE::HLSLTree { class FNode ; class FScope ; class FStatement ; class FExpression ; class FFunction ; class FExpressionLocalPHI ; class FRequestedType ; class FEmitContext ; class FEmitScope ; class FEmitShaderExpression ; int32 MaxNumPreviousScopes = 2 ; class FErrorHandlerInterface { public : void)",
    "insertText": "AddErrorInternal(TConstArrayView<UObject*> InOwners, FStringView InError)"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (} } ; class FNode { public : ~)",
    "insertText": "FNode()"
  },
  {
    "label": "GetOwners()",
    "kind": "Method",
    "detail": "Function (} private : FNode* NextNode = nullptr ; class FTree ; } ; class FOwnedNode : public FNode { public : TConstArrayView<UObject*>)",
    "insertText": "GetOwners()"
  },
  {
    "label": "FEmitPreshaderScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FEmitPreshaderScope {)",
    "insertText": "FEmitPreshaderScope()"
  },
  {
    "label": "FEmitPreshaderScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEmitPreshaderScope(FEmitScope* InScope, const FExpression* InValue) : Scope(InScope), Value(InValue)"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (} FEmitScope* Scope = nullptr ; const FExpression* Value = nullptr ; } ; class FStatement : public FOwnedNode { public : UObject*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "IsLoop()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLoop()"
  },
  {
    "label": "EmitShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitShader(FEmitContext& Context, FEmitScope& Scope)"
  },
  {
    "label": "EmitPreshader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitPreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, TArrayView<const FEmitPreshaderScope> Scopes, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (private : UObject* Owner = nullptr ; FScope* ParentScope = nullptr ; class FTree ; class FEmitContext ; class FExpressionLocalPHI ; } ; class FRequestedType { public :)",
    "insertText": "FRequestedType()"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestedType(FRequestedType&&)"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestedType(const FRequestedType&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRequestedType&)",
    "insertText": "operator(FRequestedType&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRequestedType&)",
    "insertText": "operator(const FRequestedType&)"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestedType(const Shader::FType& InType, bool bDefaultRequest = true)"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestedType(const FRequestedType& InType, bool bDefaultRequest)"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRequestedType(Shader::EValueType InType, bool bDefaultRequest = true) : FRequestedType(Shader::FType(InType), bDefaultRequest)"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRequestedType(const Shader::FStructType* InType, bool bDefaultRequest = true) : FRequestedType(Shader::FType(InType), bDefaultRequest)"
  },
  {
    "label": "FRequestedType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRequestedType(const FName& InType, bool bDefaultRequest = true) : FRequestedType(Shader::FType(InType), bDefaultRequest)"
  },
  {
    "label": "GetValueComponentType()",
    "kind": "Method",
    "detail": "Function (} Shader::EValueComponentType)",
    "insertText": "GetValueComponentType()"
  },
  {
    "label": "IsComponentRequested()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentRequested(int32 Index)"
  },
  {
    "label": "IsNumericVectorRequested()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericVectorRequested()"
  },
  {
    "label": "IsVoid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVoid()"
  },
  {
    "label": "IsStruct()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStruct()"
  },
  {
    "label": "IsObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObject()"
  },
  {
    "label": "IsNumeric()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumeric()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "SetComponentRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetComponentRequest(int32 Index, bool bRequest = true)"
  },
  {
    "label": "SetFieldRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFieldRequested(const Shader::FStructField* Field, bool bRequest = true)"
  },
  {
    "label": "ClearFieldRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFieldRequested(const Shader::FStructField* Field)"
  },
  {
    "label": "SetFieldRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFieldRequested(Field, false)"
  },
  {
    "label": "SetFieldRequested()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFieldRequested(const Shader::FStructField* Field, const FRequestedType& InRequest)"
  },
  {
    "label": "GetField()",
    "kind": "Method",
    "detail": "Function (FRequestedType)",
    "insertText": "GetField(const Shader::FStructField* Field)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Shader::FType Type ; TBitArray<> RequestedComponents ; } ; bool)",
    "insertText": "operator(const FRequestedType& Lhs, const FRequestedType& Rhs)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const FRequestedType& Value)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.Type)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.RequestedComponents)"
  },
  {
    "label": "FPreparedComponent()",
    "kind": "Method",
    "detail": "Function (} struct FPreparedComponent {)",
    "insertText": "FPreparedComponent()"
  },
  {
    "label": "FPreparedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPreparedComponent(EExpressionEvaluation InEvaluation) : Evaluation(InEvaluation)"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNone()"
  },
  {
    "label": "GetEvaluation()",
    "kind": "Method",
    "detail": "Function (} EExpressionEvaluation)",
    "insertText": "GetEvaluation(const FEmitScope& Scope)"
  },
  {
    "label": "SetLoopEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoopEvaluation(FEmitScope& Scope)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEmitScope* LoopScope = nullptr ; Shader::FComponentBounds Bounds ; EExpressionEvaluation Evaluation = EExpressionEvaluation::None ; } ; bool)",
    "insertText": "operator(const FPreparedComponent& Lhs, const FPreparedComponent& Rhs)"
  },
  {
    "label": "CombineComponents()",
    "kind": "Method",
    "detail": "Function (} FPreparedComponent)",
    "insertText": "CombineComponents(const FPreparedComponent& Lhs, const FPreparedComponent& Rhs)"
  },
  {
    "label": "FPreparedType()",
    "kind": "Method",
    "detail": "Function (class FPreparedType { public :)",
    "insertText": "FPreparedType()"
  },
  {
    "label": "FPreparedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPreparedType(const Shader::FType& InType, const FPreparedComponent& InComponent = FPreparedComponent())"
  },
  {
    "label": "FPreparedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPreparedType(Shader::EValueType InType, const FPreparedComponent& InComponent = FPreparedComponent()) : FPreparedType(Shader::FType(InType), InComponent)"
  },
  {
    "label": "FPreparedType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPreparedType(const Shader::FStructType* InType, const FPreparedComponent& InComponent = FPreparedComponent()) : FPreparedType(Shader::FType(InType), InComponent)"
  },
  {
    "label": "FPreparedType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPreparedType(const FName& InType, const FPreparedComponent& InComponent = FPreparedComponent()) : FPreparedType(Shader::FType(InType), InComponent)"
  },
  {
    "label": "SetEvaluation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEvaluation(EExpressionEvaluation Evaluation)"
  },
  {
    "label": "MergeEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeEvaluation(EExpressionEvaluation Evaluation)"
  },
  {
    "label": "SetLoopEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoopEvaluation(FEmitScope& Scope, const FRequestedType& RequestedType)"
  },
  {
    "label": "SetField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetField(const Shader::FStructField* Field, const FPreparedType& FieldType)"
  },
  {
    "label": "GetFieldType()",
    "kind": "Method",
    "detail": "Function (FPreparedType)",
    "insertText": "GetFieldType(const Shader::FStructField* Field)"
  },
  {
    "label": "GetNumPreparedComponents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPreparedComponents()"
  },
  {
    "label": "GetResultType()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetResultType()"
  },
  {
    "label": "GetRequestedType()",
    "kind": "Method",
    "detail": "Function (FRequestedType)",
    "insertText": "GetRequestedType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "IsNumericScalar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericScalar()"
  },
  {
    "label": "GetEvaluation()",
    "kind": "Method",
    "detail": "Function (EExpressionEvaluation)",
    "insertText": "GetEvaluation(const FEmitScope& Scope, const FRequestedType& RequestedType)"
  },
  {
    "label": "GetFieldEvaluation()",
    "kind": "Method",
    "detail": "Function (EExpressionEvaluation)",
    "insertText": "GetFieldEvaluation(const FEmitScope& Scope, const FRequestedType& RequestedType, int32 ComponentIndex, int32 NumComponents)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (Shader::FComponentBounds)",
    "insertText": "GetBounds(const FRequestedType& RequestedType)"
  },
  {
    "label": "GetMergedComponent()",
    "kind": "Method",
    "detail": "Function (FPreparedComponent)",
    "insertText": "GetMergedComponent()"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (FPreparedComponent)",
    "insertText": "GetComponent(int32 Index)"
  },
  {
    "label": "GetComponentBounds()",
    "kind": "Method",
    "detail": "Function (Shader::FComponentBounds)",
    "insertText": "GetComponentBounds(int32 Index)"
  },
  {
    "label": "SetComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetComponent(int32 Index, const FPreparedComponent& InComponent)"
  },
  {
    "label": "SetComponentBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentBounds(int32 Index, const Shader::FComponentBounds Bounds)"
  },
  {
    "label": "MergeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeComponent(int32 Index, const FPreparedComponent& InComponent)"
  },
  {
    "label": "EnsureNumComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureNumComponents(int32 NumComponents)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Shader::FType Type ; TArray<FPreparedComponent,TInlineAllocator<4>> PreparedComponents ; } ; bool)",
    "insertText": "operator(const FPreparedType& Lhs, const FPreparedType& Rhs)"
  },
  {
    "label": "MergePreparedTypes()",
    "kind": "Method",
    "detail": "Function (} FPreparedType)",
    "insertText": "MergePreparedTypes(const FPreparedType& Lhs, const FPreparedType& Rhs)"
  },
  {
    "label": "MakeNonLWCType()",
    "kind": "Method",
    "detail": "Function (FPreparedType)",
    "insertText": "MakeNonLWCType(const FPreparedType& Type)"
  },
  {
    "label": "GetPreparedType()",
    "kind": "Method",
    "detail": "Function (class FPrepareValueResult { public : const FPreparedType&)",
    "insertText": "GetPreparedType()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetType(FEmitContext& Context, const FRequestedType& RequestedType, EExpressionEvaluation Evaluation, const Shader::FType& Type)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetType(FEmitContext& Context, const FRequestedType& RequestedType, const FPreparedType& Type)"
  },
  {
    "label": "TryMergePreparedType()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryMergePreparedType(FEmitContext& Context, const Shader::FType& Type)"
  },
  {
    "label": "FEmitValuePreshaderResult()",
    "kind": "Method",
    "detail": "Function (FPreparedType PreparedType ; bool bPreparingValue = false ; class FExpression ; class FEmitContext ; } ; struct FEmitValueShaderResult { FEmitShaderExpression* Code = nullptr ; } ; struct FEmitCustomHLSLParameterResult { FStringBuilderBase* DeclarationCode = nullptr ; FStringBuilderBase* ForwardCode = nullptr ; } ; struct FEmitValuePreshaderResult {)",
    "insertText": "FEmitValuePreshaderResult(Shader::FPreshaderData& InPreshader) : Preshader(InPreshader)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Shader::FPreshaderData& Preshader ; Shader::FType Type ; } ; enum class EDerivativeCoordinate : uint8 { Ddx,Ddy,} ; struct FExpressionDerivatives { const FExpression* ExpressionDdx = nullptr ; const FExpression* ExpressionDdy = nullptr ; const FExpression*)",
    "insertText": "Get(EDerivativeCoordinate Coord)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetValuePreshader()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const FPreparedType& PreparedType, const Shader::FType& ResultType, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "GetValueConstant()",
    "kind": "Method",
    "detail": "Function (Shader::FValue)",
    "insertText": "GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const FPreparedType& PreparedType, const Shader::FType& ResultType)"
  },
  {
    "label": "GetValueShader()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "GetValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType)"
  },
  {
    "label": "GetValueShader()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "GetValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType)"
  },
  {
    "label": "GetValueShader()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "GetValueShader(FEmitContext& Context, FEmitScope& Scope, const Shader::FType& ResultType)"
  },
  {
    "label": "GetValueShader()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "GetValueShader(FEmitContext& Context, FEmitScope& Scope, Shader::EValueType ResultType)"
  },
  {
    "label": "GetValuePreshader()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "GetValuePreshader()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "GetValuePreshader()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, const Shader::FType& ResultType, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "GetValuePreshader()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetValuePreshader(FEmitContext& Context, FEmitScope& Scope, Shader::EValueType ResultType, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "GetValueConstant()",
    "kind": "Method",
    "detail": "Function (Shader::FValue)",
    "insertText": "GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const FPreparedType& PreparedType)"
  },
  {
    "label": "GetValueConstant()",
    "kind": "Method",
    "detail": "Function (Shader::FValue)",
    "insertText": "GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType)"
  },
  {
    "label": "GetValueConstant()",
    "kind": "Method",
    "detail": "Function (Shader::FValue)",
    "insertText": "GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType)"
  },
  {
    "label": "GetValueConstant()",
    "kind": "Method",
    "detail": "Function (Shader::FValue)",
    "insertText": "GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FPreparedType& PreparedType, const Shader::FType& ResultType)"
  },
  {
    "label": "GetValueConstant()",
    "kind": "Method",
    "detail": "Function (Shader::FValue)",
    "insertText": "GetValueConstant(FEmitContext& Context, FEmitScope& Scope, const FPreparedType& PreparedType, Shader::EValueType ResultType)"
  },
  {
    "label": "GetValueObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetValueObject(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, void* OutObjectBase)"
  },
  {
    "label": "GetValueObject()",
    "kind": "Method",
    "detail": "Function (template<ObjectType> bool)",
    "insertText": "GetValueObject(FEmitContext& Context, FEmitScope& Scope, ObjectType& OutObject)"
  },
  {
    "label": "CheckObjectSupportsCustomHLSL()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckObjectSupportsCustomHLSL(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName)"
  },
  {
    "label": "GetObjectCustomHLSLParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectCustomHLSLParameter(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, const TCHAR* ParameterName, FStringBuilderBase& OutDeclarationCode, FStringBuilderBase& OutForwardCode)"
  },
  {
    "label": "ComputeAnalyticDerivatives()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ComputeAnalyticDerivatives(FTree& Tree, FExpressionDerivatives& OutResult)"
  },
  {
    "label": "ComputePreviousFrame()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "ComputePreviousFrame(FTree& Tree, const FRequestedType& RequestedType)"
  },
  {
    "label": "GetPreviewExpression()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "GetPreviewExpression(FTree& Tree)"
  },
  {
    "label": "PrepareValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareValue(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FPrepareValueResult& OutResult)"
  },
  {
    "label": "EmitValueShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FEmitValueShaderResult& OutResult)"
  },
  {
    "label": "EmitValuePreshader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FEmitValuePreshaderResult& OutResult)"
  },
  {
    "label": "EmitValueObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitValueObject(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, void* OutObjectBase)"
  },
  {
    "label": "EmitCustomHLSLParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitCustomHLSLParameter(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, const TCHAR* ParameterName, FEmitCustomHLSLParameterResult& OutResult)"
  },
  {
    "label": "GetRootScope()",
    "kind": "Method",
    "detail": "Function (private : TArray<UObject*,TInlineAllocator<2>> Owners ; class FTree ; class FEmitContext ; class FExpressionForward ; class FExpressionPreviousFrameSwitch ; class FExpressionFunctionCall ; class FExpressionOperation ; class FExpressionSetStructField ; } ; class FFunction final : public FNode { public : FScope&)",
    "insertText": "GetRootScope()"
  },
  {
    "label": "GetParentScope()",
    "kind": "Method",
    "detail": "Function (FScope*)",
    "insertText": "GetParentScope()"
  },
  {
    "label": "HasParentScope()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasParentScope(const FScope& ParentScope)"
  },
  {
    "label": "AddPreviousScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPreviousScope(FScope& Scope)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (private : class FTree ; class FExpression ; class FEmitContext ; FScope* ParentScope = nullptr ; FStatement* OwnerStatement = nullptr ; FStatement* ContainedStatement = nullptr ; FScope* PreviousScope [ MaxNumPreviousScopes ] ; TMap<FName,const FExpression*> LocalMap ; int32 NumPreviousScopes = 0 ; int32 NestedLevel = 0 ; } ; class FTree { public : FTree*)",
    "insertText": "Create(FMemStackBase& Allocator)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(FTree* Tree)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (FMemStackBase&)",
    "insertText": "GetAllocator()"
  },
  {
    "label": "PushOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushOwner(UObject* Owner)"
  },
  {
    "label": "PopOwner()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "PopOwner()"
  },
  {
    "label": "GetCurrentOwner()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetCurrentOwner()"
  },
  {
    "label": "EmitShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitShader(FEmitContext& Context, FStringBuilderBase& OutCode)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (FHasher Hasher ;)",
    "insertText": "AppendHash(Hasher, GetGeneratedTypeName<T>())"
  },
  {
    "label": "AppendHashes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHashes(Hasher, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (const FXxHash64 Hash = Hasher .)",
    "insertText": "Finalize()"
  },
  {
    "label": "FindExpression()",
    "kind": "Method",
    "detail": "Function (FExpression* Expression =)",
    "insertText": "FindExpression(Hash)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* TypedExpression = NewNode<)",
    "insertText": "T(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "RegisterExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExpression(TypedExpression, Hash)"
  },
  {
    "label": "AddCurrentOwner()",
    "kind": "Method",
    "detail": "Function (Expression = TypedExpression ; } else {)",
    "insertText": "AddCurrentOwner(Expression)"
  },
  {
    "label": "NewStatement()",
    "kind": "Method",
    "detail": "Function (} return Expression ; } template<T,. . . ArgTypes> T*)",
    "insertText": "NewStatement(FScope& Scope, ArgTypes&&... Args)"
  },
  {
    "label": "RegisterStatement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStatement(Scope, Statement)"
  },
  {
    "label": "AcquireLocal()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "AcquireLocal(FScope& Scope, const FName& LocalName)"
  },
  {
    "label": "NewFunctionCall()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewFunctionCall(FScope& Scope, FFunction* Function, int32 OutputIndex)"
  },
  {
    "label": "GetAnalyticDerivatives()",
    "kind": "Method",
    "detail": "Function (FExpressionDerivatives)",
    "insertText": "GetAnalyticDerivatives(const FExpression* InExpression)"
  },
  {
    "label": "GetPreviousFrame()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "GetPreviousFrame(const FExpression* InExpression, const FRequestedType& RequestedType)"
  },
  {
    "label": "GetPreview()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "GetPreview(const FExpression* InExpression)"
  },
  {
    "label": "NewScope()",
    "kind": "Method",
    "detail": "Function (FScope*)",
    "insertText": "NewScope(FScope& Scope)"
  },
  {
    "label": "NewOwnedScope()",
    "kind": "Method",
    "detail": "Function (FScope*)",
    "insertText": "NewOwnedScope(FStatement& Owner)"
  },
  {
    "label": "NewFunction()",
    "kind": "Method",
    "detail": "Function (FFunction*)",
    "insertText": "NewFunction()"
  },
  {
    "label": "NewConstant()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewConstant(const Shader::FValue& Value)"
  },
  {
    "label": "NewSwizzle()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewSwizzle(const FSwizzleParameters& Params, const FExpression* Input)"
  },
  {
    "label": "NewUnaryOp()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewUnaryOp(EOperation Op, const FExpression* Input)"
  },
  {
    "label": "NewBinaryOp()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewBinaryOp(EOperation Op, const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewTernaryOp()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewTernaryOp(EOperation Op, const FExpression* Input0, const FExpression* Input1, const FExpression* Input2)"
  },
  {
    "label": "NewAbs()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewAbs(const FExpression* Input)"
  },
  {
    "label": "NewNeg()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewNeg(const FExpression* Input)"
  },
  {
    "label": "NewSaturate()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSaturate(const FExpression* Input)"
  },
  {
    "label": "NewSum()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSum(const FExpression* Input)"
  },
  {
    "label": "NewRcp()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewRcp(const FExpression* Input)"
  },
  {
    "label": "NewSqrt()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSqrt(const FExpression* Input)"
  },
  {
    "label": "NewRsqrt()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewRsqrt(const FExpression* Input)"
  },
  {
    "label": "NewLog2()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewLog2(const FExpression* Input)"
  },
  {
    "label": "NewExp()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewExp(const FExpression* Input)"
  },
  {
    "label": "NewExp2()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewExp2(const FExpression* Input)"
  },
  {
    "label": "NewFrac()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewFrac(const FExpression* Input)"
  },
  {
    "label": "NewLength()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewLength(const FExpression* Input)"
  },
  {
    "label": "NewNormalize()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewNormalize(const FExpression* Input)"
  },
  {
    "label": "NewSin()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSin(const FExpression* Input)"
  },
  {
    "label": "NewCos()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewCos(const FExpression* Input)"
  },
  {
    "label": "NewAdd()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewAdd(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewSub()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSub(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewMul()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewMul(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewDiv()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewDiv(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewFmod()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewFmod(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewModulo()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewModulo(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewStep()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewStep(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewPowClamped()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewPowClamped(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewMin()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewMin(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewMax()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewMax(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewLess()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewLess(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewGreater()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewGreater(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewLessEqual()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewLessEqual(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewGreaterEqual()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewGreaterEqual(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewSmoothStep()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSmoothStep(const FExpression* Input0, const FExpression* Input1, const FExpression* Input2)"
  },
  {
    "label": "NewLog()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewLog(const FExpression* Input)"
  },
  {
    "label": "NewPow2()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewPow2(const FExpression* Input)"
  },
  {
    "label": "NewCross()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewCross(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewDot()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "NewDot(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewLerp()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewLerp(const FExpression* A, const FExpression* B, const FExpression* T)"
  },
  {
    "label": "NewTruncateLWC()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewTruncateLWC(const FExpression* Input)"
  },
  {
    "label": "NewAppend()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewAppend(const FExpression* Lhs, const FExpression* Rhs)"
  },
  {
    "label": "NewAppend()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes> const FExpression*)",
    "insertText": "NewAppend(const FExpression* Lhs, ArgTypes&&... Rhs)"
  },
  {
    "label": "NewNode()",
    "kind": "Method",
    "detail": "Function (} FActiveStructFieldStack ActiveStructFieldStack ; private : template<T,. . . ArgTypes> T*)",
    "insertText": "NewNode(ArgTypes&&... Args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (T* Node =)",
    "insertText": "new(*Allocator) T(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "RegisterNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNode(Node)"
  },
  {
    "label": "RegisterExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExpression(FExpression* Expression, FXxHash64 Hash)"
  },
  {
    "label": "RegisterExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExpression(FExpressionLocalPHI* Expression, FXxHash64 Hash)"
  },
  {
    "label": "AddCurrentOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentOwner(FExpression* Expression)"
  },
  {
    "label": "RegisterStatement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStatement(FScope& Scope, FStatement* Statement)"
  },
  {
    "label": "FindExpression()",
    "kind": "Method",
    "detail": "Function (FExpression*)",
    "insertText": "FindExpression(FXxHash64 Hash)"
  },
  {
    "label": "FOwnerScope()",
    "kind": "Method",
    "detail": "Function (FMemStackBase* Allocator = nullptr ; FNode* Nodes = nullptr ; FScope* RootScope = nullptr ; TArray<UObject*,TInlineAllocator<8>> OwnerStack ; TMap<FXxHash64,FExpression*> ExpressionMap ; TArray<FExpressionLocalPHI*> PHIExpressions ; TMap<const FExpression*,FExpressionDerivatives> ExpressionDerivativesMap ; TMap<FXxHash64,const FExpression*> PreviousFrameExpressionMap ; class FExpressionLocalPHI ; } ; struct FOwnerScope : private FNoncopyable {)",
    "insertText": "FOwnerScope(FTree& InTree, UObject* InOwner, bool bPushOwner = true) : Tree(bPushOwner ? &InTree : nullptr), Owner(InOwner)"
  },
  {
    "label": "PushOwner()",
    "kind": "Method",
    "detail": "Function (Tree ->)",
    "insertText": "PushOwner(InOwner)"
  },
  {
    "label": "FOwnerScope()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FOwnerScope()"
  }
]