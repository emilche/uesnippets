[
  {
    "label": "SCENEOUTLINER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCENEOUTLINER_API"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" ActorBaseTreeItem . h \" # include \" UObject / ObjectKey . h \" struct FActorTreeItem : IActorBaseTreeItem { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FFilterPredicate, const AActor*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FInteractivePredicate, const AActor*)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Filter(FFilterPredicate Pred)"
  },
  {
    "label": "GetInteractiveState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInteractiveState(FInteractivePredicate Pred)"
  },
  {
    "label": "FActorTreeItem()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<AActor> Actor ; const FObjectKey ID ; const FSceneOutlinerTreeItemType Type ;)",
    "insertText": "FActorTreeItem(AActor* InActor)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (} FSceneOutlinerTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (FFolder::FRootObject)",
    "insertText": "GetRootObject()"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "CanInteract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteract()"
  },
  {
    "label": "GenerateLabelWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateLabelWidget(ISceneOutliner& Outliner, const STableRow<FSceneOutlinerTreeItemPtr>& InRow)"
  },
  {
    "label": "OnVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVisibilityChanged(const bool bNewVisibility)"
  },
  {
    "label": "HasVisibilityInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVisibilityInfo()"
  },
  {
    "label": "ShouldShowPinnedState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowPinnedState()"
  },
  {
    "label": "ShouldShowVisibilityState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowVisibilityState()"
  },
  {
    "label": "HasPinnedStateInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPinnedStateInfo()"
  },
  {
    "label": "OnLabelChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLabelChanged()"
  },
  {
    "label": "GenerateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateContextMenu(UToolMenu* Menu, SSceneOutliner& Outliner)"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPackageName()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetGuid()"
  },
  {
    "label": "FActorTreeItem()",
    "kind": "Method",
    "detail": "Function (bool bExistsInCurrentWorldAndPIE ; protected :)",
    "insertText": "FActorTreeItem(FSceneOutlinerTreeItemType TypeIn, AActor* InActor)"
  },
  {
    "label": "UpdateDisplayString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisplayString()"
  },
  {
    "label": "UpdateDisplayStringInternal()",
    "kind": "Method",
    "detail": "Function (FString DisplayString ; private : void)",
    "insertText": "UpdateDisplayStringInternal()"
  }
]