[
  {
    "label": "MultiplyCheckOverflow()",
    "kind": "Method",
    "detail": "Function (# ifndef _CHECKBMI_H_ # define _CHECKBMI_H_ # ifdef __cplusplus \" C \" { # endif __inline BOOL)",
    "insertText": "MultiplyCheckOverflow(DWORD a, DWORD b, __deref_out_range(==, a * b) DWORD *pab)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pab = a* b ;)",
    "insertText": "if((a == 0) || (((*pab) / a) == b))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DWORD dwWidthInBytes ; DWORD dwBpp ; DWORD dwWidthInBits ; DWORD dwHeight ; DWORD dwSizeImage ; DWORD dwClrUsed ;)",
    "insertText": "if(cbSize < sizeof(BITMAPINFOHEADER) || pbmi->biSize < sizeof(BITMAPINFOHEADER) || pbmi->biSize > 4096)"
  },
  {
    "label": "dwClrUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dwClrUsed(1 << pbmi->biBitCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { dwClrUsed = pbmi -> biClrUsed ; })",
    "insertText": "if(cbSize < pbmi->biSize + dwClrUsed * sizeof(RGBQUAD) + (pbmi->biCompression == BI_BITFIELDS ? 3 * sizeof(DWORD) : 0))"
  },
  {
    "label": "dwBits()",
    "kind": "Method",
    "detail": "Function (biBitCount)",
    "insertText": "dwBits(DWORD)pbmi->biWidth * (DWORD)"
  },
  {
    "label": "dwWidthInBytes()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "dwWidthInBytes((DWORD)((dwBits+31) & (~31)) / 8)"
  },
  {
    "label": "dwTotalSize()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "dwTotalSize(DWORD)abs(pbmi->biHeight)"
  }
]