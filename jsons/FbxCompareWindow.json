[
  {
    "label": "EFBXCompareSection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFBXCompareSection"
  },
  {
    "label": "FCompMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompMaterial"
  },
  {
    "label": "FCompJoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompJoint"
  },
  {
    "label": "FCompSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompSkeleton"
  },
  {
    "label": "FCompMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompMesh"
  },
  {
    "label": "FSkeletonCompareData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonCompareData"
  },
  {
    "label": "FCompareRowData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompareRowData"
  },
  {
    "label": "SCompareRowDataTableListViewRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCompareRowDataTableListViewRow"
  },
  {
    "label": "SFbxSkeltonConflictWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFbxSkeltonConflictWindow"
  },
  {
    "label": "FCompMaterial()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" Widgets / SNullWidget . h \" # include \" Styling / AppStyle . h \" enum EFBXCompareSection { EFBXCompareSection_Skeleton = 0,EFBXCompareSection_References,EFBXCompareSection_Count } ; class FCompMaterial { public :)",
    "insertText": "FCompMaterial(FName InMaterialSlotName, FName InImportedMaterialSlotName) : MaterialSlotName(InMaterialSlotName) , ImportedMaterialSlotName(InImportedMaterialSlotName)"
  },
  {
    "label": "FCompJoint()",
    "kind": "Method",
    "detail": "Function (} FName MaterialSlotName ; FName ImportedMaterialSlotName ; } ; class FCompJoint { public :)",
    "insertText": "FCompJoint() : Name(NAME_None) , ParentIndex(INDEX_NONE)"
  },
  {
    "label": "FCompJoint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCompJoint()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ChildIndexes .)",
    "insertText": "Empty()"
  },
  {
    "label": "FCompSkeleton()",
    "kind": "Method",
    "detail": "Function (} FName Name ; int32 ParentIndex ; TArray<int32> ChildIndexes ; } ; class FCompSkeleton { public :)",
    "insertText": "FCompSkeleton() : bSkeletonFitMesh(true)"
  },
  {
    "label": "FCompSkeleton()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCompSkeleton()"
  },
  {
    "label": "FCompMesh()",
    "kind": "Method",
    "detail": "Function (} TArray<FCompJoint> Joints ; bool bSkeletonFitMesh ; } ; class FCompMesh { public : ~)",
    "insertText": "FCompMesh()"
  },
  {
    "label": "FSkeletonCompareData()",
    "kind": "Method",
    "detail": "Function (} FCompSkeleton CompSkeleton ; TArray<FString> ErrorMessages ; TArray<FString> WarningMessages ; } ; class FSkeletonCompareData : public TSharedFromThis<FSkeletonCompareData> { public :)",
    "insertText": "FSkeletonCompareData() : CurrentJointIndex(INDEX_NONE) , FbxJointIndex(INDEX_NONE) , JointName(NAME_None) , ParentJoint(nullptr) , bMatchJoint(false) , bChildConflict(false) , bInitialAutoExpand(false)"
  },
  {
    "label": "FCompareRowData()",
    "kind": "Method",
    "detail": "Function (} int32 CurrentJointIndex ; int32 FbxJointIndex ; FName JointName ; TSharedPtr<FSkeletonCompareData> ParentJoint ; bool bMatchJoint ; bool bChildConflict ; bool bInitialAutoExpand ; TArray<int32> ChildJointIndexes ; TArray<TSharedPtr<FSkeletonCompareData>> ChildJoints ; } ; class FCompareRowData : public TSharedFromThis<FCompareRowData> { public :)",
    "insertText": "FCompareRowData() : RowIndex(INDEX_NONE) , CurrentData(nullptr) , FbxData(nullptr)"
  },
  {
    "label": "FCompareRowData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCompareRowData()"
  },
  {
    "label": "ConstructCellCurrent()",
    "kind": "Method",
    "detail": "Function (} int32 RowIndex ; FCompMesh* CurrentData ; FCompMesh* FbxData ; TSharedRef<SWidget>)",
    "insertText": "ConstructCellCurrent()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FCompareRowData>, CompareRowData) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (CompareRowData = InArgs . _CompareRowData ;)",
    "insertText": "check(CompareRowData.IsValid())"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (SMultiColumnTableRow<TSharedPtr<FCompareRowData>)",
    "insertText": "Construct(FSuperRowType::FArguments() .Style(FAppStyle::Get(), \"DataTableEditor.CellListViewRow\"), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == FName(TEXT(\"Current\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == FName(TEXT(\"Fbx\")))"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } private : TSharedPtr<FCompareRowData> CompareRowData ; } ; class SFbxSkeltonConflictWindow : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SFbxSkeltonConflictWindow) : _WidgetWindow() , _AssetReferencingSkeleton(nullptr) , _SourceData(nullptr) , _ResultData(nullptr) , _SourceObject(nullptr) , _bIsPreviewConflict(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SWindow>, WidgetWindow ) SLATE_ARGUMENT( TArray<TSharedPtr<FString>>*, AssetReferencingSkeleton) SLATE_ARGUMENT( FCompMesh*, SourceData) SLATE_ARGUMENT( FCompMesh*, ResultData) SLATE_ARGUMENT( UObject*, SourceObject ) SLATE_ARGUMENT( bool, bIsPreviewConflict ) SLATE_END_ARGS() public: bool HasConflict()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (bool bRevertReimport ; void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (WidgetWindow .)",
    "insertText": "Pin()->RequestDestroyWindow()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} bRevertReimport = false ; return)",
    "insertText": "Handled()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "SFbxSkeltonConflictWindow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SFbxSkeltonConflictWindow()"
  },
  {
    "label": "SetSectionVisible()",
    "kind": "Method",
    "detail": "Function (} private : TWeakPtr<SWindow> WidgetWindow ; UObject* SourceObject ; bool bIsPreviewConflict ; bool bShowSectionFlag [ EFBXCompareSection_Count ] ; FReply)",
    "insertText": "SetSectionVisible(EFBXCompareSection SectionIndex)"
  },
  {
    "label": "IsSectionVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsSectionVisible(EFBXCompareSection SectionIndex)"
  },
  {
    "label": "GetCollapsableArrow()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetCollapsableArrow(EFBXCompareSection SectionIndex)"
  },
  {
    "label": "FilSkeletonTreeItem()",
    "kind": "Method",
    "detail": "Function (FCompMesh* SourceData ; FCompMesh* ResultData ; TSharedPtr<STreeView<TSharedPtr<FSkeletonCompareData>>> CompareTree ; TArray<TSharedPtr<FSkeletonCompareData>> DisplaySkeletonTreeItem ; TArray<TSharedPtr<FSkeletonCompareData>> CurrentSkeletonTreeItem ; TArray<TSharedPtr<FSkeletonCompareData>> FbxSkeletonTreeItem ; TArray<TSharedPtr<FString>> AssetReferencingSkeleton ; void)",
    "insertText": "FilSkeletonTreeItem()"
  },
  {
    "label": "RecursiveMatchJointInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveMatchJointInfo(TSharedPtr<FSkeletonCompareData> CurrentItem)"
  },
  {
    "label": "SetMatchJointInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMatchJointInfo()"
  },
  {
    "label": "ConstructSkeletonComparison()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ConstructSkeletonComparison()"
  },
  {
    "label": "ConstructSkeletonReference()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ConstructSkeletonReference()"
  },
  {
    "label": "OnGenerateRowCompareTreeView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowCompareTreeView(TSharedPtr<FSkeletonCompareData> RowData, const TSharedRef<STableViewBase>& Table)"
  },
  {
    "label": "OnGetChildrenRowCompareTreeView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildrenRowCompareTreeView(TSharedPtr<FSkeletonCompareData> InParent, TArray< TSharedPtr<FSkeletonCompareData> >& OutChildren)"
  },
  {
    "label": "OnGenerateRowAssetReferencingSkeleton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowAssetReferencingSkeleton(TSharedPtr<FString> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  }
]