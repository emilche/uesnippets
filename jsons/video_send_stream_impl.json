[
  {
    "label": "PacingConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacingConfig"
  },
  {
    "label": "VideoSendStreamImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSendStreamImpl"
  },
  {
    "label": "VbaSendContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VbaSendContext"
  },
  {
    "label": "PacingConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_SEND_STREAM_IMPL_H_ # define VIDEO_VIDEO_SEND_STREAM_IMPL_H_ # include<stddef . h> # include<stdint . h> # include<atomic> # include<map> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" api / video / video_bitrate_allocator . h \" # include \" api / video_codecs / video_encoder . h \" # include \" call / bitrate_allocator . h \" # include \" call / rtp_config . h \" # include \" call / rtp_transport_controller_send_interface . h \" # include \" call / rtp_video_sender_interface . h \" # include \" modules / include / module_common_types . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / utility / maybe_worker_thread . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" # include \" video / config / video_encoder_config . h \" # include \" video / send_statistics_proxy . h \" # include \" video / video_stream_encoder_interface . h \" namespace webrtc { namespace internal { struct PacingConfig {)",
    "insertText": "PacingConfig(const FieldTrialsView& field_trials)"
  },
  {
    "label": "PacingConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacingConfig(const PacingConfig&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PacingConfig&)",
    "insertText": "operator(const PacingConfig&)"
  },
  {
    "label": "PacingConfig()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PacingConfig()"
  },
  {
    "label": "VideoSendStreamImpl()",
    "kind": "Method",
    "detail": "Function (FieldTrialParameter<double> pacing_factor ; FieldTrialParameter<TimeDelta> max_pacing_delay ; } ; class VideoSendStreamImpl : public webrtc::BitrateAllocatorObserver,public VideoStreamEncoderInterface::EncoderSink { public :)",
    "insertText": "VideoSendStreamImpl(Clock* clock, SendStatisticsProxy* stats_proxy, RtpTransportControllerSendInterface* transport, BitrateAllocatorInterface* bitrate_allocator, VideoStreamEncoderInterface* video_stream_encoder, const VideoSendStream::Config* config, int initial_encoder_max_bitrate, double initial_encoder_bitrate_priority, VideoEncoderConfig::ContentType content_type, RtpVideoSenderInterface* rtp_video_sender, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VideoSendStreamImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoSendStreamImpl()"
  },
  {
    "label": "DeliverRtcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "UpdateActiveSimulcastLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveSimulcastLayers(std::vector<bool> active_layers)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetRtpStates()",
    "kind": "Method",
    "detail": "Function (std::map<uint32_t,RtpState>)",
    "insertText": "GetRtpStates()"
  },
  {
    "label": "GetRtpPayloadStates()",
    "kind": "Method",
    "detail": "Function (std::map<uint32_t,RtpPayloadState>)",
    "insertText": "GetRtpPayloadStates()"
  },
  {
    "label": "configured_pacing_factor()",
    "kind": "Method",
    "detail": "Function (const absl::optional<float>&)",
    "insertText": "configured_pacing_factor()"
  },
  {
    "label": "OnEncoderConfigurationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderConfigurationChanged(std::vector<VideoStream> streams, bool is_svc, VideoEncoderConfig::ContentType content_type, int min_transmit_bitrate_bps)"
  },
  {
    "label": "OnBitrateAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateAllocationUpdated(const VideoBitrateAllocation& allocation)"
  },
  {
    "label": "OnVideoLayersAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoLayersAllocationUpdated(VideoLayersAllocation allocation)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImageCallback::Result)",
    "insertText": "OnEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "OnDroppedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrame(EncodedImageCallback::DropReason reason)"
  },
  {
    "label": "StartupVideoSendStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupVideoSendStream()"
  },
  {
    "label": "StopVideoSendStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopVideoSendStream() RTC_RUN_ON(rtp_transport_queue_)"
  },
  {
    "label": "ConfigureProtection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureProtection()"
  },
  {
    "label": "ConfigureSsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureSsrcs()"
  },
  {
    "label": "SignalEncoderTimedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalEncoderTimedOut()"
  },
  {
    "label": "SignalEncoderActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalEncoderActive()"
  },
  {
    "label": "GetAllocationConfig()",
    "kind": "Method",
    "detail": "Function (MediaStreamAllocationConfig)",
    "insertText": "GetAllocationConfig() const RTC_RUN_ON(rtp_transport_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker thread_checker_ ; Clock* const clock_ ; const bool has_alr_probing_ ; const PacingConfig pacing_config_ ; SendStatisticsProxy* const stats_proxy_ ; const VideoSendStream::Config* const config_ ; MaybeWorkerThread* const rtp_transport_queue_ ; RepeatingTaskHandle check_encoder_activity_task_)",
    "insertText": "RTC_GUARDED_BY(rtp_transport_queue_)"
  },
  {
    "label": "CreateDetached()",
    "kind": "Method",
    "detail": "Function (RtpTransportControllerSendInterface* const transport_ ; BitrateAllocatorInterface* const bitrate_allocator_ ; bool disable_padding_ ; int max_padding_bitrate_ ; int encoder_min_bitrate_bps_ ; uint32_t encoder_max_bitrate_bps_ ; uint32_t encoder_target_rate_bps_ ; double encoder_bitrate_priority_ ; VideoStreamEncoderInterface* const video_stream_encoder_ ; RtcpBandwidthObserver* const bandwidth_observer_ ; RtpVideoSenderInterface* const rtp_video_sender_ ; rtc::scoped_refptr<PendingTaskSafetyFlag> transport_queue_safety_ =)",
    "insertText": "CreateDetached()"
  }
]