[
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreGlobals . h \" # include \" HAL / Platform . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogTestableEnsures, Log, All)"
  },
  {
    "label": "AITEST_SCOPED_CHECK()",
    "kind": "Method",
    "detail": "Function (namespace UE::AITestSuite { int32 TestsInProgress ; } # define)",
    "insertText": "AITEST_SCOPED_CHECK(PartialTextToExpect, NumOccurrences) \\ GetTestRunner().AddExpectedError(PartialTextToExpect, EAutomationExpectedErrorFlags::Contains, NumOccurrences)"
  },
  {
    "label": "testableEnsureMsgf()",
    "kind": "Method",
    "detail": "Function (\\ ON_SCOPE_EXIT \\ { \\ - - UE::AITestSuite::TestsInProgress ; \\ } ; \\ + + UE::AITestSuite::TestsInProgress \\ # define)",
    "insertText": "testableEnsureMsgf(InExpression, InFormat, ... ) \\ (LIKELY(!!(InExpression)) || ([&]() \\ { \\ if (UNLIKELY(UE::AITestSuite::TestsInProgress > 0)) \\ { \\ UE_LOG(LogTestableEnsures, Warning, InFormat, ##__VA_ARGS__); \\ } \\ else \\ { \\ ensureMsgf(false, InFormat, ##__VA_ARGS__); \\ } \\ return false; \\ } ())) #define testableCheckf(InExpression, InFormat, ... ) \\ if (UNLIKELY(UE::AITestSuite::TestsInProgress > 0))"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_CLOG(!(InExpression), LogTestableEnsures, Error, InFormat, ##__VA_ARGS__)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (\\ return ; \\ } \\ else \\ { \\)",
    "insertText": "checkf(InExpression, InFormat, ##__VA_ARGS__)"
  },
  {
    "label": "testableCheckfReturn()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "testableCheckfReturn(InExpression, ReturnExpression, InFormat, ... ) \\ if (UNLIKELY(UE::AITestSuite::TestsInProgress > 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(InExpression))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_LOG(LogTestableEnsures, Error, InFormat, ##__VA_ARGS__)"
  }
]