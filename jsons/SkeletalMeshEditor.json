[
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "IPersonaViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaViewport"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UClothingAssetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClothingAssetBase"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "HActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HActor"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FSkeletalMeshClothBuildParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshClothBuildParams"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "SSkeletalMeshEditorToolbox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletalMeshEditorToolbox"
  },
  {
    "label": "FSkeletalMeshEditorBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshEditorBinding"
  },
  {
    "label": "FSkeletalMeshEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshEditor"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FReimportParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReimportParameters"
  },
  {
    "label": "FSkeletalMeshEditorNotifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshEditorNotifier"
  },
  {
    "label": "FSkeletalMeshEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / GCObject . h \" # include \" TickableEditorObject . h \" # include \" EditorUndoClient . h \" # include \" Toolkits / IToolkitHost . h \" # include \" ISkeletalMeshEditor . h \" # include \" SkeletalMeshNotifier . h \" # include \" Containers / ArrayView . h \" # include \" Async / Future . h \" class IDetailLayoutBuilder ; class IDetailsView ; class IPersonaToolkit ; class IPersonaViewport ; class ISkeletonTree ; class USkeletalMesh ; class UClothingAssetBase ; class ISkeletonTreeItem ; struct HActor ; struct FViewportClick ; struct FSkeletalMeshClothBuildParams ; struct FToolMenuContext ; class UToolMenu ; class SSkeletalMeshEditorToolbox ; class FSkeletalMeshEditorBinding ; namespace SkeletalMeshEditorModes { const FName SkeletalMeshEditorMode ; } namespace SkeletalMeshEditorTabs { const FName DetailsTab ; const FName SkeletonTreeTab ; const FName ViewportTab ; const FName AdvancedPreviewTab ; const FName AssetDetailsTab ; const FName MorphTargetsTab ; const FName MeshDetailsTab ; const FName AnimationMappingTab ; const FName CurveMetadataTab ; const FName FindReplaceTab ; } class FSkeletalMeshEditor : public ISkeletalMeshEditor,public FGCObject,public FEditorUndoClient,public FTickableEditorObject { public :)",
    "insertText": "FSkeletalMeshEditor()"
  },
  {
    "label": "InitSkeletalMeshEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSkeletalMeshEditor(const EToolkitMode::Type Mode, const TSharedPtr<class IToolkitHost>& InitToolkitHost, class USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "GetPersonaToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IPersonaToolkit>)",
    "insertText": "GetPersonaToolkit()"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "UnregisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "InitToolMenuContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitToolMenuContext(FToolMenuContext& MenuContext)"
  },
  {
    "label": "AddViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportOverlayWidget(TSharedRef<SWidget> InOverlaidWidget, int32 ZOrder = INDEX_NONE)"
  },
  {
    "label": "RemoveViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportOverlayWidget(TSharedRef<SWidget> InOverlaidWidget)"
  },
  {
    "label": "ProcessCommandBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCommandBindings(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnRequestClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRequestClose(EAssetEditorCloseReason InCloseReason)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetSkeletonTree()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class ISkeletonTree>)",
    "insertText": "GetSkeletonTree()"
  },
  {
    "label": "HandleDetailsCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDetailsCreated(const TSharedRef<class IDetailsView>& InDetailsView)"
  },
  {
    "label": "HandleMeshDetailsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMeshDetailsCreated(const TSharedRef<class IDetailsView>& InDetailsView)"
  },
  {
    "label": "HandleViewportCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportCreated(const TSharedRef<class IPersonaViewport>& InViewport)"
  },
  {
    "label": "HandleGetAsset()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "HandleGetAsset()"
  },
  {
    "label": "HandleObjectsSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsSelected(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "GetHostedToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolkit>)",
    "insertText": "GetHostedToolkit()"
  },
  {
    "label": "HandleObjectSelected()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleObjectSelected(UObject* InObject)"
  },
  {
    "label": "HandleSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectionChanged(const TArrayView<TSharedPtr<ISkeletonTreeItem>>& InSelectedItems, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "FReimportParameters()",
    "kind": "Method",
    "detail": "Function (struct FReimportParameters {)",
    "insertText": "FReimportParameters(int32 InSourceFileIndex, bool bInWithNewFile, bool bInReimportWithDialog) : SourceFileIndex(InSourceFileIndex) , bWithNewFile(bInWithNewFile) , bReimportWithDialog(bInReimportWithDialog)"
  },
  {
    "label": "HandleReimportMesh()",
    "kind": "Method",
    "detail": "Function (} int32 SourceFileIndex = INDEX_NONE ; bool bWithNewFile = false ; bool bReimportWithDialog = false ; } ; void)",
    "insertText": "HandleReimportMesh(const FReimportParameters ReimportParameters)"
  },
  {
    "label": "HandleReimportMeshInternal()",
    "kind": "Method",
    "detail": "Function (TFuture<bool>)",
    "insertText": "HandleReimportMeshInternal(const FReimportParameters& ReimportParameters)"
  },
  {
    "label": "HandleReimportAllMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReimportAllMesh(const FReimportParameters ReimportParameters)"
  },
  {
    "label": "HandleReimportAllMeshInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReimportAllMeshInternal(const FReimportParameters& ReimportParameters)"
  },
  {
    "label": "HandleOnPreviewSceneSettingsCustomized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnPreviewSceneSettingsCustomized(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "IsMeshSectionSelectionChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMeshSectionSelectionChecked()"
  },
  {
    "label": "HandleMeshClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMeshClick(HActor* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "FillApplyClothingAssetMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillApplyClothingAssetMenu(FMenuBuilder& MenuBuilder, int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "FillCreateClothingMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillCreateClothingMenu(FMenuBuilder& MenuBuilder, int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "FillCreateClothingLodMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillCreateClothingLodMenu(FMenuBuilder& MenuBuilder, int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "OnRemoveClothingAssetMenuItemClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveClothingAssetMenuItemClicked(int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "OnCreateClothingAssetMenuItemClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateClothingAssetMenuItemClicked(FSkeletalMeshClothBuildParams& Params)"
  },
  {
    "label": "OnApplyClothingAssetClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplyClothingAssetClicked(UClothingAssetBase* InAssetToApply, int32 InMeshLodIndex, int32 InMeshSectionIndex, int32 InClothLodIndex)"
  },
  {
    "label": "CanApplyClothing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanApplyClothing(int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "CanRemoveClothing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveClothing(int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "CanCreateClothing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateClothing(int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "CanCreateClothingLod()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateClothingLod(int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "ApplyClothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyClothing(UClothingAssetBase* InAsset, int32 InLodIndex, int32 InSectionIndex, int32 InClothingLod)"
  },
  {
    "label": "RemoveClothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClothing(int32 InLodIndex, int32 InSectionIndex)"
  },
  {
    "label": "OnRemoveSectionFromLodAndBelowMenuItemClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSectionFromLodAndBelowMenuItemClicked(int32 LodIndex, int32 SectionIndex)"
  },
  {
    "label": "RegisterReimportContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReimportContextMenu(const FName InBaseMenuName, bool bWithDialog)"
  },
  {
    "label": "GetSkeletalMeshEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSkeletalMeshEditor>)",
    "insertText": "GetSkeletalMeshEditor(const FToolMenuContext& InMenuContext)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ExtendMenu()"
  },
  {
    "label": "BakeMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeMaterials()"
  },
  {
    "label": "ExtendToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolbar()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "FSkeletalMeshEditorNotifier()",
    "kind": "Method",
    "detail": "Function (public : FSimpleMulticastDelegate OnPostUndo ; FSimpleMulticastDelegate OnCurvesChanged ; private : TObjectPtr<USkeletalMesh> SkeletalMesh ; TSharedPtr<FExtender> ToolbarExtender ; TSharedPtr<FExtender> MenuExtender ; TSharedPtr<class IPersonaToolkit> PersonaToolkit ; TSharedPtr<class ISkeletonTree> SkeletonTree ; TSharedPtr<class IPersonaViewport> Viewport ; TSharedPtr<class IDetailsView> DetailsView ; TSharedPtr<IToolkit> HostedToolkit ; TSharedPtr<SSkeletalMeshEditorToolbox> ToolboxWidget ; TSharedPtr<FSkeletalMeshEditorBinding> Binding ; } ; class FSkeletalMeshEditorNotifier : public ISkeletalMeshNotifier { public :)",
    "insertText": "FSkeletalMeshEditorNotifier(TSharedRef<FSkeletalMeshEditor> InEditor)"
  },
  {
    "label": "HandleNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNotification(const TArray<FName>& BoneNames, const ESkeletalMeshNotifyType InNotifyType)"
  },
  {
    "label": "FSkeletalMeshEditorBinding()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FSkeletalMeshEditor> Editor ; } ; class FSkeletalMeshEditorBinding : public ISkeletalMeshEditorBinding { public :)",
    "insertText": "FSkeletalMeshEditorBinding(TSharedRef<FSkeletalMeshEditor> InEditor)"
  },
  {
    "label": "GetNotifier()",
    "kind": "Method",
    "detail": "Function (ISkeletalMeshNotifier&)",
    "insertText": "GetNotifier()"
  },
  {
    "label": "GetNameFunction()",
    "kind": "Method",
    "detail": "Function (NameFunction)",
    "insertText": "GetNameFunction()"
  },
  {
    "label": "GetSelectedBones()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetSelectedBones()"
  }
]