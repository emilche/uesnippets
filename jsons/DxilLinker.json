[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "DxilModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilModule"
  },
  {
    "label": "DxilResourceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilResourceBase"
  },
  {
    "label": "DxilLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilLinker"
  },
  {
    "label": "DxilLinker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / HLSL / DxilExportMap . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / ErrorOr . h \" # include<memory> # include<unordered_map> # include<unordered_set> namespace llvm { class Function ; class GlobalVariable ; class Constant ; class Module ; class LLVMContext ; } namespace hlsl { class DxilModule ; class DxilResourceBase ; class DxilLinker { public : ~)",
    "insertText": "DxilLinker()"
  },
  {
    "label": "CreateLinker()",
    "kind": "Method",
    "detail": "Function (} DxilLinker*)",
    "insertText": "CreateLinker(llvm::LLVMContext &Ctx, unsigned valMajor, unsigned valMinor)"
  },
  {
    "label": "SetValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValidatorVersion(unsigned valMajor, unsigned valMinor)"
  },
  {
    "label": "HasLibNameRegistered()",
    "kind": "Method",
    "detail": "Function (m_valMajor = valMajor,m_valMinor = valMinor ; } bool)",
    "insertText": "HasLibNameRegistered(llvm::StringRef name)"
  },
  {
    "label": "RegisterLib()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterLib(llvm::StringRef name, std::unique_ptr<llvm::Module> pModule, std::unique_ptr<llvm::Module> pDebugModule)"
  },
  {
    "label": "AttachLib()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttachLib(llvm::StringRef name)"
  },
  {
    "label": "DetachLib()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetachLib(llvm::StringRef name)"
  },
  {
    "label": "DetachAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachAll()"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<llvm::Module>)",
    "insertText": "Link(llvm::StringRef entry, llvm::StringRef profile, dxilutil::ExportMap &exportMap)"
  },
  {
    "label": "DxilLinker()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "DxilLinker(llvm::LLVMContext &Ctx, unsigned valMajor, unsigned valMinor) : m_ctx(Ctx), m_valMajor(valMajor), m_valMinor(valMinor)"
  }
]