[
  {
    "label": "DispatcherImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DispatcherImpl"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_DISPATCHER_INTERNAL_DISPATCHER_INTERNAL_H_ # define BASE_ALLOCATOR_DISPATCHER_INTERNAL_DISPATCHER_INTERNAL_H_ # include \" base / allocator / buildflags . h \" # include \" base / allocator / dispatcher / configuration . h \" # include \" base / allocator / dispatcher / internal / dispatch_data . h \" # include \" base / allocator / dispatcher / internal / tools . h \" # include \" base / allocator / dispatcher / reentry_guard . h \" # include \" base / allocator / dispatcher / subsystem . h \" # include \" base / compiler_specific . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC) #include \"base/allocator/partition_allocator/partition_alloc.h\" #endif #if BUILDFLAG(USE_ALLOCATOR_SHIM)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_ALLOCATOR_SHIM)"
  },
  {
    "label": "PerformObserverCheck()",
    "kind": "Method",
    "detail": "Function (# endif template<CheckObserverPredicate,. . . ObserverTypes,size_t . . . Indices> void)",
    "insertText": "PerformObserverCheck(const std::tuple<ObserverTypes...>& observers, std::index_sequence<Indices...>, CheckObserverPredicate check_observer)"
  },
  {
    "label": "PerformAllocationNotification()",
    "kind": "Method",
    "detail": "Function (} template<. . . ObserverTypes,size_t . . . Indices> ALWAYS_INLINE void)",
    "insertText": "PerformAllocationNotification(const std::tuple<ObserverTypes...>& observers, std::index_sequence<Indices...>, void* address, size_t size, AllocationSubsystem subSystem, const char* type_name)"
  },
  {
    "label": "PerformFreeNotification()",
    "kind": "Method",
    "detail": "Function (} template<. . . ObserverTypes,size_t . . . Indices> ALWAYS_INLINE void)",
    "insertText": "PerformFreeNotification(const std::tuple<ObserverTypes...>& observers, std::index_sequence<Indices...>, void* address)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (} template<. . . ObserverTypes> struct DispatcherImpl { using AllObservers = std::index_sequence_for<ObserverTypes . . .> ; template<std::enable_if_t<)",
    "insertText": "LessEqual(sizeof...(ObserverTypes), configuration::kMaximumNumberOfObservers), bool> = true> static DispatchData GetNotificationHooks( std::tuple<ObserverTypes*...> observers)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (s_observers =)",
    "insertText": "move(observers)"
  },
  {
    "label": "PerformObserverCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformObserverCheck(s_observers, AllObservers{}, IsValidObserver{})"
  },
  {
    "label": "CreateDispatchData()",
    "kind": "Method",
    "detail": "Function (} private : DispatchData)",
    "insertText": "CreateDispatchData()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC) static void PartitionAllocatorAllocationHook(void* address, size_t size, const char* type_name)"
  },
  {
    "label": "PartitionAllocatorFreeHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PartitionAllocatorFreeHook(void* address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # endif # if)",
    "insertText": "BUILDFLAG(USE_ALLOCATOR_SHIM) static void* AllocFn(const AllocatorDispatch* self, size_t size, void* context)"
  },
  {
    "label": "alloc_function()",
    "kind": "Method",
    "detail": "Function (ReentryGuard guard ; void* const address = self -> next ->)",
    "insertText": "alloc_function(self->next, size, context)"
  },
  {
    "label": "AllocUncheckedFn()",
    "kind": "Method",
    "detail": "Function (} return address ; } void*)",
    "insertText": "AllocUncheckedFn(const AllocatorDispatch* self, size_t size, void* context)"
  },
  {
    "label": "alloc_unchecked_function()",
    "kind": "Method",
    "detail": "Function (ReentryGuard guard ; void* const address = self -> next ->)",
    "insertText": "alloc_unchecked_function(self->next, size, context)"
  },
  {
    "label": "AllocZeroInitializedFn()",
    "kind": "Method",
    "detail": "Function (} return address ; } void*)",
    "insertText": "AllocZeroInitializedFn(const AllocatorDispatch* self, size_t n, size_t size, void* context)"
  },
  {
    "label": "alloc_zero_initialized_function()",
    "kind": "Method",
    "detail": "Function (ReentryGuard guard ; void* const address = self -> next ->)",
    "insertText": "alloc_zero_initialized_function(self->next, n, size, context)"
  },
  {
    "label": "AllocAlignedFn()",
    "kind": "Method",
    "detail": "Function (} return address ; } void*)",
    "insertText": "AllocAlignedFn(const AllocatorDispatch* self, size_t alignment, size_t size, void* context)"
  },
  {
    "label": "alloc_aligned_function()",
    "kind": "Method",
    "detail": "Function (ReentryGuard guard ; void* const address = self -> next ->)",
    "insertText": "alloc_aligned_function(self->next, alignment, size, context)"
  },
  {
    "label": "ReallocFn()",
    "kind": "Method",
    "detail": "Function (} return address ; } void*)",
    "insertText": "ReallocFn(const AllocatorDispatch* self, void* address, size_t size, void* context)"
  },
  {
    "label": "DoNotifyFree()",
    "kind": "Method",
    "detail": "Function (ReentryGuard guard ;)",
    "insertText": "DoNotifyFree(address)"
  },
  {
    "label": "realloc_function()",
    "kind": "Method",
    "detail": "Function (void* const reallocated_address = self -> next ->)",
    "insertText": "realloc_function(self->next, address, size, context)"
  },
  {
    "label": "FreeFn()",
    "kind": "Method",
    "detail": "Function (} return reallocated_address ; } void)",
    "insertText": "FreeFn(const AllocatorDispatch* self, void* address, void* context)"
  },
  {
    "label": "free_function()",
    "kind": "Method",
    "detail": "Function (self -> next ->)",
    "insertText": "free_function(self->next, address, context)"
  },
  {
    "label": "GetSizeEstimateFn()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetSizeEstimateFn(const AllocatorDispatch* self, void* address, void* context)"
  },
  {
    "label": "BatchMallocFn()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "BatchMallocFn(const AllocatorDispatch* self, size_t size, void** results, unsigned num_requested, void* context)"
  },
  {
    "label": "batch_malloc_function()",
    "kind": "Method",
    "detail": "Function (ReentryGuard guard ; unsigned const num_allocated = self -> next ->)",
    "insertText": "batch_malloc_function(self->next, size, results, num_requested, context)"
  },
  {
    "label": "BatchFreeFn()",
    "kind": "Method",
    "detail": "Function (} } return num_allocated ; } void)",
    "insertText": "BatchFreeFn(const AllocatorDispatch* self, void** to_be_freed, unsigned num_to_be_freed, void* context)"
  },
  {
    "label": "batch_free_function()",
    "kind": "Method",
    "detail": "Function (} self -> next ->)",
    "insertText": "batch_free_function(self->next, to_be_freed, num_to_be_freed, context)"
  },
  {
    "label": "FreeDefiniteSizeFn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeDefiniteSizeFn(const AllocatorDispatch* self, void* address, size_t size, void* context)"
  },
  {
    "label": "free_definite_size_function()",
    "kind": "Method",
    "detail": "Function (self -> next ->)",
    "insertText": "free_definite_size_function(self->next, address, size, context)"
  },
  {
    "label": "AlignedMallocFn()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "AlignedMallocFn(const AllocatorDispatch* self, size_t size, size_t alignment, void* context)"
  },
  {
    "label": "aligned_malloc_function()",
    "kind": "Method",
    "detail": "Function (ReentryGuard guard ; void* const address = self -> next ->)",
    "insertText": "aligned_malloc_function(self->next, size, alignment, context)"
  },
  {
    "label": "AlignedReallocFn()",
    "kind": "Method",
    "detail": "Function (} return address ; } void*)",
    "insertText": "AlignedReallocFn(const AllocatorDispatch* self, void* address, size_t size, size_t alignment, void* context)"
  },
  {
    "label": "aligned_realloc_function()",
    "kind": "Method",
    "detail": "Function (address = self -> next ->)",
    "insertText": "aligned_realloc_function(self->next, address, size, alignment, context)"
  },
  {
    "label": "AlignedFreeFn()",
    "kind": "Method",
    "detail": "Function (} return address ; } void)",
    "insertText": "AlignedFreeFn(const AllocatorDispatch* self, void* address, void* context)"
  },
  {
    "label": "aligned_free_function()",
    "kind": "Method",
    "detail": "Function (self -> next ->)",
    "insertText": "aligned_free_function(self->next, address, context)"
  },
  {
    "label": "DoNotifyAllocation()",
    "kind": "Method",
    "detail": "Function (} AllocatorDispatch allocator_dispatch_ ; # endif ALWAYS_INLINE void)",
    "insertText": "DoNotifyAllocation(void* address, size_t size, AllocationSubsystem subSystem, const char* type_name = nullptr)"
  },
  {
    "label": "PerformAllocationNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAllocationNotification(s_observers, AllObservers{}, address, size, subSystem, type_name)"
  },
  {
    "label": "DoNotifyFree()",
    "kind": "Method",
    "detail": "Function (} ALWAYS_INLINE void)",
    "insertText": "DoNotifyFree(void* address)"
  },
  {
    "label": "PerformFreeNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformFreeNotification(s_observers, AllObservers{}, address)"
  },
  {
    "label": "GetNotificationHooks()",
    "kind": "Method",
    "detail": "Function (& AllocFn,& AllocUncheckedFn,& AllocZeroInitializedFn,& AllocAlignedFn,& ReallocFn,& FreeFn,& GetSizeEstimateFn,& BatchMallocFn,& BatchFreeFn,& FreeDefiniteSizeFn,& AlignedMallocFn,& AlignedReallocFn,& AlignedFreeFn,nullptr } ; # endif template<> struct DispatcherImpl<> { DispatchData)",
    "insertText": "GetNotificationHooks(std::tuple<>)"
  },
  {
    "label": "GetNotificationHooks()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . ObserverTypes> DispatchData)",
    "insertText": "GetNotificationHooks(std::tuple<ObserverTypes*...> observers)"
  }
]