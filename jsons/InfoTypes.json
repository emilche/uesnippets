[
  {
    "label": "FVertexInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexInfo"
  },
  {
    "label": "FMeshTriEdgeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshTriEdgeID"
  },
  {
    "label": "FMeshTriOrderedEdgeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshTriOrderedEdgeID"
  },
  {
    "label": "FEdgeSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeSplitInfo"
  },
  {
    "label": "FEdgeFlipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeFlipInfo"
  },
  {
    "label": "FEdgeCollapseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeCollapseInfo"
  },
  {
    "label": "FMergeEdgesInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeEdgesInfo"
  },
  {
    "label": "FMergeVerticesInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeVerticesInfo"
  },
  {
    "label": "FPokeTriangleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPokeTriangleInfo"
  },
  {
    "label": "FVertexSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexSplitInfo"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IndexTypes . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { struct FVertexInfo { FVector3d Position {)",
    "insertText": "Zero()"
  },
  {
    "label": "FVertexInfo()",
    "kind": "Method",
    "detail": "Function (bool bHaveN { },bHaveC { },bHaveUV { } ;)",
    "insertText": "FVertexInfo()"
  },
  {
    "label": "FVertexInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexInfo(const FVector3d& PositionIn)"
  },
  {
    "label": "FVertexInfo()",
    "kind": "Method",
    "detail": "Function (PositionIn } { })",
    "insertText": "FVertexInfo(const FVector3d& PositionIn, const FVector3f& NormalIn)"
  },
  {
    "label": "FVertexInfo()",
    "kind": "Method",
    "detail": "Function (PositionIn },Normal { NormalIn },bHaveN { true } { })",
    "insertText": "FVertexInfo(const FVector3d& PositionIn, const FVector3f& NormalIn, const FVector3f& ColorIn)"
  },
  {
    "label": "FVertexInfo()",
    "kind": "Method",
    "detail": "Function (PositionIn },Normal { NormalIn },Color { ColorIn },bHaveN { true },bHaveC { true } { })",
    "insertText": "FVertexInfo(const FVector3d& PositionIn, const FVector3f& NormalIn, const FVector3f& ColorIn, const FVector2f& UVIn)"
  },
  {
    "label": "FMeshTriEdgeID()",
    "kind": "Method",
    "detail": "Function (PositionIn },Normal { NormalIn },Color { ColorIn },UV { UVIn },bHaveN { true },bHaveC { true },bHaveUV { true } { } } ; struct FMeshTriEdgeID { unsigned TriEdgeIndex : 2 ; unsigned TriangleID : 3 0 ;)",
    "insertText": "FMeshTriEdgeID()"
  },
  {
    "label": "FMeshTriEdgeID()",
    "kind": "Method",
    "detail": "Function (TriEdgeIndex = 0 ; TriangleID = 0 ; })",
    "insertText": "FMeshTriEdgeID(int32 TriangleIDIn, int32 EdgeIndexIn)"
  },
  {
    "label": "TriEdgeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriEdgeIndex(unsigned int)"
  },
  {
    "label": "TriangleID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleID(unsigned int)"
  },
  {
    "label": "FMeshTriEdgeID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshTriEdgeID(uint32 EncodedEdgeKey)"
  },
  {
    "label": "TriEdgeIndex()",
    "kind": "Method",
    "detail": "Function (TriangleID = EncodedEdgeKey& 0 x8FFFFFFF ;)",
    "insertText": "TriEdgeIndex(EncodedEdgeKey & 0xC0000000)"
  },
  {
    "label": "Encoded()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Encoded()"
  },
  {
    "label": "FMeshTriOrderedEdgeID()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMeshTriOrderedEdgeID { int32 TriangleID ; unsigned VertIndexA : 2 ; unsigned VertIndexB : 2 ;)",
    "insertText": "FMeshTriOrderedEdgeID()"
  },
  {
    "label": "FMeshTriOrderedEdgeID()",
    "kind": "Method",
    "detail": "Function (TriangleID = IndexConstants::InvalidID ; VertIndexA = 0 ; VertIndexB = 0 ; })",
    "insertText": "FMeshTriOrderedEdgeID(int32 TriangleIDIn, int32 VertexIndexA, int32 VertexIndexB)"
  }
]