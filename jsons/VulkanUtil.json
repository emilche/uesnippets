[
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "TDataKeyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDataKeyBase"
  },
  {
    "label": "DataReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataReceiver"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "TDataKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDataKey"
  },
  {
    "label": "ArchiveWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArchiveWriter"
  },
  {
    "label": "ObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "VerifyVulkanResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Serialization / MemoryWriter . h \" # include \" Templates / UniquePtr . h \" # include \" VulkanThirdParty . h \" class FVulkanDevice ; namespace VulkanRHI { void)",
    "insertText": "VerifyVulkanResult(VkResult Result, const ANSICHAR* VkFuntion, const ANSICHAR* Filename, uint32 Line)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (VkBuffer)",
    "insertText": "CreateBuffer(FVulkanDevice* InDevice, VkDeviceSize Size, VkBufferUsageFlags BufferUsageFlags, VkMemoryRequirements& OutMemoryRequirements)"
  },
  {
    "label": "VERIFYVULKANRESULT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VERIFYVULKANRESULT(VkFunction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const VkResult ScopedResult = VkFunction ;)",
    "insertText": "if(ScopedResult != VK_SUCCESS)"
  },
  {
    "label": "VerifyVulkanResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyVulkanResult(ScopedResult, #VkFunction, __FILE__, __LINE__)"
  },
  {
    "label": "VERIFYVULKANRESULT_EXPANDED()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYVULKANRESULT_EXPANDED(VkFunction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const VkResult ScopedResult = VkFunction ;)",
    "insertText": "if(ScopedResult < VK_SUCCESS)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (} } template<T> bool)",
    "insertText": "CopyAndReturnNotEqual(T& A, T B)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const bool bOut = A ! = B ; A = B ; return bOut ; } template<int Version> class TDataKeyBase ; template<> class TDataKeyBase<0> { protected : template<class DataReceiver> void)",
    "insertText": "GetData(DataReceiver&& ReceiveData)"
  },
  {
    "label": "ReceiveData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> TempData ;)",
    "insertText": "ReceiveData(TempData)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetData(const void* InData, uint32 InSize)"
  },
  {
    "label": "CopyDataDeep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyDataDeep(TDataKeyBase& Result)"
  },
  {
    "label": "CopyDataShallow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyDataShallow(TDataKeyBase& Result)"
  },
  {
    "label": "IsDataEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDataEquals(const TDataKeyBase& Other)"
  },
  {
    "label": "ReceiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveData(*Data)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Data ->)",
    "insertText": "SetNum(InSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data->GetData(), InData, InSize)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Result . DataStorage = MakeUnique<TArray<)",
    "insertText": "uint8(*Data)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result . Data = Result . DataStorage .)",
    "insertText": "Get()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (DataStorage = MakeUnique<TArray<)",
    "insertText": "uint8()"
  },
  {
    "label": "AlwaysCompareData()",
    "kind": "Method",
    "detail": "Function (} } ; template<class Derived,bool AlwaysCompareData = false> class TDataKey : public TDataKeyBase<)",
    "insertText": "AlwaysCompareData(DO_CHECK != 0)"
  },
  {
    "label": "GenerateFromArchive()",
    "kind": "Method",
    "detail": "Function (public : template<class ArchiveWriter> void)",
    "insertText": "GenerateFromArchive(ArchiveWriter&& WriteToArchive, int32 DataReserve = 0)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetData([&](TArray<uint8>& InData) { FMemoryWriter Ar(InData); InData.Reset(DataReserve); WriteToArchive(Ar); this->Hash = FCrc::MemCrc32(InData.GetData(), InData.Num()); })"
  },
  {
    "label": "GenerateFromObject()",
    "kind": "Method",
    "detail": "Function (} template<class ObjectType> void)",
    "insertText": "GenerateFromObject(const ObjectType& Object)"
  },
  {
    "label": "GenerateFromData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFromData(&Object, sizeof(Object))"
  },
  {
    "label": "GenerateFromData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateFromData(const void* InData, uint32 InSize)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetData(InData, InSize)"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (this -> Hash =)",
    "insertText": "MemCrc32(InData, InSize)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "CopyDataDeep()",
    "kind": "Method",
    "detail": "Function (Derived Result ; Result . Hash = this -> Hash ; this ->)",
    "insertText": "CopyDataDeep(Result)"
  },
  {
    "label": "CopyDataShallow()",
    "kind": "Method",
    "detail": "Function (Derived Result ; Result . Hash = this -> Hash ; this ->)",
    "insertText": "CopyDataShallow(Result)"
  }
]