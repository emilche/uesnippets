[
  {
    "label": "FDisplayDebugManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayDebugManager"
  },
  {
    "label": "FForceFeedbackValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFeedbackValues"
  },
  {
    "label": "UForceFeedbackEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackEffect"
  },
  {
    "label": "FForceFeedbackManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForceFeedbackManager"
  },
  {
    "label": "UForceFeedbackComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackComponent"
  },
  {
    "label": "UForceFeedbackAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackAttenuation"
  },
  {
    "label": "FForceFeedbackAttenuationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFeedbackAttenuationSettings"
  },
  {
    "label": "FForceFeedbackManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GameFramework / ForceFeedbackAttenuation . h \" # include \" Components / SceneComponent . h \" # include \" Tickable . h \" # include \" UObject / GCObject . h \" # include \" ForceFeedbackComponent . generated . h \" struct FDisplayDebugManager ; struct FForceFeedbackValues ; class UForceFeedbackEffect ; class FForceFeedbackManager : public FTickableGameObject,FGCObject { private :)",
    "insertText": "FForceFeedbackManager(UWorld* InWorld) : World(InWorld)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} public : FForceFeedbackManager*)",
    "insertText": "Get(UWorld* World, bool bCreateIfMissing = false)"
  },
  {
    "label": "AddActiveComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActiveComponent(UForceFeedbackComponent* ForceFeedbackComponent)"
  },
  {
    "label": "RemoveActiveComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveComponent(UForceFeedbackComponent* ForceFeedbackComponent)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FVector Location, FForceFeedbackValues& Values, const FPlatformUserId UserId)"
  },
  {
    "label": "DrawDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebug(const FVector Location, FDisplayDebugManager& DisplayDebugManager, const FPlatformUserId UserId)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetTickableGameObjectWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetTickableGameObjectWorld()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UWorld> World ; TArray<TObjectPtr<UForceFeedbackComponent>> ActiveForceFeedbackComponents ; void)",
    "insertText": "OnWorldCleanup(UWorld* World, bool bSessionEnded, bool bCleanupResources)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (TArray<FForceFeedbackManager*> PerWorldForceFeedbackManagers ; FDelegateHandle OnWorldCleanupHandle ; } ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnForceFeedbackFinished, UForceFeedbackComponent*, ForceFeedbackComponent)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup=(Utility), hidecategories=(Object, ActorComponent, Physics, Rendering, Mobility, LOD), ShowCategories=Trigger, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UForceFeedbackComponent(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Activate(bool bReset=false)"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "AdditionalStatObject()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "AdditionalStatObject()"
  },
  {
    "label": "IsReadyForOwnerToAutoDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForOwnerToAutoDestroy()"
  },
  {
    "label": "GetAttenuationSettingsToApply()",
    "kind": "Method",
    "detail": "Function (const FForceFeedbackAttenuationSettings*)",
    "insertText": "GetAttenuationSettingsToApply()"
  },
  {
    "label": "CollectAttenuationShapesForVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAttenuationShapesForVisualization(TMultiMap<EAttenuationShape::Type, FBaseAttenuationSettings::AttenuationShapeDetails>& ShapeDetailsMap)"
  },
  {
    "label": "UpdateSpriteTexture()",
    "kind": "Method",
    "detail": "Function (private : float PlayTime ; # if WITH_EDITORONLY_DATA void)",
    "insertText": "UpdateSpriteTexture()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "Advance(float DeltaTime)"
  },
  {
    "label": "StopInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopInternal(bool bRemoveFromManager = true)"
  }
]