[
  {
    "label": "MakeComplex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeComplex"
  },
  {
    "label": "PartOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartOf"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorFFTOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorFFTOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_FFT_H # define EIGEN_CXX11_TENSOR_TENSOR_FFT_H namespace Eigen { template<bool NeedUprade> struct MakeComplex { template<T> EIGEN_DEVICE_FUNC T)",
    "insertText": "operator() (const T& val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct MakeComplex<false> { template<T> EIGEN_DEVICE_FUNC std::complex<T>)",
    "insertText": "operator() (const std::complex<T>& val)"
  },
  {
    "label": "TensorFFTOp()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<FFT,XprType,int FFTResultType,int FFTDir> struct traits<TensorFFTOp<FFT,XprType,FFTResultType,FFTDir>> : public traits<XprType> { typedef traits<XprType> XprTraits ; typedef NumTraits<XprTraits::Scalar>::Real RealScalar ; typedef std::complex<RealScalar> ComplexScalar ; typedef XprTraits::Scalar InputScalar ; typedef conditional<FFTResultType = = RealPart | | FFTResultType = = ImagPart,RealScalar,ComplexScalar>::type OutputScalar ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef traits<XprType>::PointerType PointerType ; } ; template<FFT,XprType,int FFTResultType,int FFTDirection> struct eval<TensorFFTOp<FFT,XprType,FFTResultType,FFTDirection>,Eigen::Dense> { typedef const TensorFFTOp<FFT,XprType,FFTResultType,FFTDirection>& type ; } ; template<FFT,XprType,int FFTResultType,int FFTDirection> struct nested<TensorFFTOp<FFT,XprType,FFTResultType,FFTDirection>,1,eval<TensorFFTOp<FFT,XprType,FFTResultType,FFTDirection>>::type> { typedef TensorFFTOp<FFT,XprType,FFTResultType,FFTDirection> type ; } ; } template<FFT,XprType,int FFTResultType,int FFTDir> class TensorFFTOp : public TensorBase<TensorFFTOp<FFT,XprType,FFTResultType,FFTDir>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorFFTOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef std::complex<RealScalar> ComplexScalar ; typedef internal::conditional<FFTResultType = = RealPart | | FFTResultType = = ImagPart,RealScalar,ComplexScalar>::type OutputScalar ; typedef OutputScalar CoeffReturnType ; typedef Eigen::internal::nested<TensorFFTOp>::type Nested ; typedef Eigen::internal::traits<TensorFFTOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorFFTOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorFFTOp(const XprType& expr, const FFT& fft) : m_xpr(expr), m_fft(fft)"
  },
  {
    "label": "fft()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const FFT&)",
    "insertText": "fft()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const TensorEvaluator<ArgType,Device>::Dimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(input_dims[i] > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = input_dims [ i ] ; })",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_strides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_strides [ i ] = m_strides [ i - 1 ]* m_dimensions [ i - 1 ] ; } } else { m_strides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (m_strides [ i ] = m_strides [ i + 1 ]* m_dimensions [ i + 1 ] ; } } m_size = m_dimensions .)",
    "insertText": "TotalSize()"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalToBuf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalToBuf(data)"
  },
  {
    "label": "evalToBuf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalToBuf(m_data)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate(m_data)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_data = NULL ; } m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "evalToBuf()",
    "kind": "Method",
    "detail": "Function (} # endif private : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "evalToBuf(EvaluatorPointerType data)"
  },
  {
    "label": "write_to_out()",
    "kind": "Method",
    "detail": "Function (const bool write_to_out = internal::is_same<OutputScalar,ComplexScalar>::value ; ComplexScalar* buf =)",
    "insertText": "write_to_out(ComplexScalar*)data : (ComplexScalar*)m_device.allocate(sizeof(ComplexScalar) * m_size)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (buf [ i ] = MakeComplex<internal::is_same<InputScalar,RealScalar)",
    "insertText": "value()(m_impl.coeff(i))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t i = 0; i < m_fft.size(); ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (Index dim = m_fft [ i ] ;)",
    "insertText": "eigen_assert(dim >= 0 && dim < NumDims)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (Index line_len = m_dimensions [ dim ] ;)",
    "insertText": "eigen_assert(line_len >= 1)"
  },
  {
    "label": "line_buf()",
    "kind": "Method",
    "detail": "Function (ComplexScalar*)",
    "insertText": "line_buf(ComplexScalar*)m_device.allocate(sizeof(ComplexScalar) * line_len)"
  },
  {
    "label": "isPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (const bool is_power_of_two =)",
    "insertText": "isPowerOfTwo(line_len)"
  },
  {
    "label": "findGoodComposite()",
    "kind": "Method",
    "detail": "Function (const Index good_composite = is_power_of_two ? 0 :)",
    "insertText": "findGoodComposite(line_len)"
  },
  {
    "label": "getLog2()",
    "kind": "Method",
    "detail": "Function (const Index log_len = is_power_of_two ?)",
    "insertText": "getLog2(line_len) : getLog2(good_composite)"
  },
  {
    "label": "NULL()",
    "kind": "Method",
    "detail": "Function (ComplexScalar* a = is_power_of_two ?)",
    "insertText": "NULL(ComplexScalar*)m_device.allocate(sizeof(ComplexScalar) * good_composite)"
  },
  {
    "label": "NULL()",
    "kind": "Method",
    "detail": "Function (ComplexScalar* pos_j_base_powered = is_power_of_two ?)",
    "insertText": "NULL(ComplexScalar*)m_device.allocate(sizeof(ComplexScalar) * (line_len + 1))"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (std::complex<double>)",
    "insertText": "tmp(numext::cos(arg), numext::sin(arg))"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (pos_j_base_powered [ j ] = static_cast<)",
    "insertText": "ComplexScalar(tmp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(Index partial_index = 0; partial_index < m_size / line_len; ++partial_index)"
  },
  {
    "label": "getBaseOffsetFromIndex()",
    "kind": "Method",
    "detail": "Function (const Index base_offset =)",
    "insertText": "getBaseOffsetFromIndex(partial_index, dim)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index stride = m_strides [ dim ] ;)",
    "insertText": "if(stride == 1)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "memcpy(line_buf, &buf[base_offset], line_len*sizeof(ComplexScalar))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { Index offset = base_offset ;)",
    "insertText": "for(int j = 0; j < line_len; ++j, offset += stride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (line_buf [ j ] = buf [ offset ] ; } })",
    "insertText": "if(is_power_of_two)"
  },
  {
    "label": "processDataLineCooleyTukey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "processDataLineCooleyTukey(line_buf, line_len, log_len)"
  },
  {
    "label": "processDataLineBluestein()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "processDataLineBluestein(line_buf, line_len, good_composite, log_len, a, b, pos_j_base_powered)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FFTDir == FFT_FORWARD && stride == 1)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "memcpy(&buf[base_offset], line_buf, line_len*sizeof(ComplexScalar))"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (} else { Index offset = base_offset ; const ComplexScalar div_factor =)",
    "insertText": "ComplexScalar(1.0 / line_len, 0)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (buf [)",
    "insertText": "offset(FFTDir == FFT_FORWARD)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} } } m_device .)",
    "insertText": "deallocate(line_buf)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate(a)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate(b)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate(pos_j_base_powered)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!write_to_out)"
  },
  {
    "label": "FFTResultType()",
    "kind": "Method",
    "detail": "Function (data [ i ] = PartOf<)",
    "insertText": "FFTResultType()(buf[i])"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} m_device .)",
    "insertText": "deallocate(buf)"
  },
  {
    "label": "isPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "isPowerOfTwo(Index x)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(x > 0)"
  },
  {
    "label": "findGoodComposite()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "findGoodComposite(Index n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = 2 ;)",
    "insertText": "while(i < 2 * n - 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index log2m = 0 ;)",
    "insertText": "while(m >>= 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(isPowerOfTwo(line_len))"
  },
  {
    "label": "scramble_FFT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scramble_FFT(line_buf, line_len)"
  },
  {
    "label": "FFTDir()",
    "kind": "Method",
    "detail": "Function (compute_1D_Butterfly<)",
    "insertText": "FFTDir(line_buf, line_len, log_len)"
  },
  {
    "label": "processDataLineBluestein()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "processDataLineBluestein(ComplexScalar* line_buf, Index line_len, Index good_composite, Index log_len, ComplexScalar* a, ComplexScalar* b, const ComplexScalar* pos_j_base_powered)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index n = line_len ; Index m = good_composite ; ComplexScalar* data = line_buf ;)",
    "insertText": "for(Index i = 0; i < n; ++i)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (a [ i ] = data [ i ]*)",
    "insertText": "conj(pos_j_base_powered[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { a [ i ] = data [ i ]* pos_j_base_powered [ i ] ; } })",
    "insertText": "for(Index i = n; i < m; ++i)"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (a [ i ] =)",
    "insertText": "ComplexScalar(0, 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(Index i = n; i < m - n; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i = m - n; i < m; ++i)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (b [ i ] = pos_j_base_powered [ m - i ] ; } else { b [ i ] =)",
    "insertText": "conj(pos_j_base_powered[m-i])"
  },
  {
    "label": "scramble_FFT()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "scramble_FFT(a, m)"
  },
  {
    "label": "FFT_FORWARD()",
    "kind": "Method",
    "detail": "Function (compute_1D_Butterfly<)",
    "insertText": "FFT_FORWARD(a, m, log_len)"
  },
  {
    "label": "scramble_FFT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scramble_FFT(b, m)"
  },
  {
    "label": "FFT_FORWARD()",
    "kind": "Method",
    "detail": "Function (compute_1D_Butterfly<)",
    "insertText": "FFT_FORWARD(b, m, log_len)"
  },
  {
    "label": "FFT_REVERSE()",
    "kind": "Method",
    "detail": "Function (compute_1D_Butterfly<)",
    "insertText": "FFT_REVERSE(a, m, log_len)"
  },
  {
    "label": "scramble_FFT()",
    "kind": "Method",
    "detail": "Function (} else { data [ i ] = a [ i ]* pos_j_base_powered [ i ] ; } } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "scramble_FFT(ComplexScalar* data, Index n)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(isPowerOfTwo(n))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index j = 1 ;)",
    "insertText": "for(Index i = 1; i < n; ++i)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(data[j-1], data[i-1])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} Index m = n>> 1 ;)",
    "insertText": "while(m >= 2 && j > m)"
  },
  {
    "label": "butterfly_2()",
    "kind": "Method",
    "detail": "Function (j - = m ; m>> = 1 ; } j + = m ; } } template<int Dir> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "butterfly_2(ComplexScalar* data)"
  },
  {
    "label": "butterfly_4()",
    "kind": "Method",
    "detail": "Function (ComplexScalar tmp = data [ 1 ] ; data [ 1 ] = data [ 0 ] - data [ 1 ] ; data [ 0 ] + = tmp ; } template<int Dir> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "butterfly_4(ComplexScalar* data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ComplexScalar tmp [ 4 ] ; tmp [ 0 ] = data [ 0 ] + data [ 1 ] ; tmp [ 1 ] = data [ 0 ] - data [ 1 ] ; tmp [ 2 ] = data [ 2 ] + data [ 3 ] ;)",
    "insertText": "if(Dir == FFT_FORWARD)"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (tmp [ 3 ] =)",
    "insertText": "ComplexScalar(0.0, -1.0) * (data[2] - data[3])"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (} else { tmp [ 3 ] =)",
    "insertText": "ComplexScalar(0.0, 1.0) * (data[2] - data[3])"
  },
  {
    "label": "butterfly_8()",
    "kind": "Method",
    "detail": "Function (} data [ 0 ] = tmp [ 0 ] + tmp [ 2 ] ; data [ 1 ] = tmp [ 1 ] + tmp [ 3 ] ; data [ 2 ] = tmp [ 0 ] - tmp [ 2 ] ; data [ 3 ] = tmp [ 1 ] - tmp [ 3 ] ; } template<int Dir> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "butterfly_8(ComplexScalar* data)"
  },
  {
    "label": "tmp_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp_1(data[2] - data[3]) * ComplexScalar(0, -1)"
  },
  {
    "label": "tmp_1()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "tmp_1(data[2] - data[3]) * ComplexScalar(0, 1)"
  },
  {
    "label": "tmp_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp_1(data[6] - data[7]) * ComplexScalar(0, -1)"
  },
  {
    "label": "tmp_1()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "tmp_1(data[6] - data[7]) * ComplexScalar(0, 1)"
  },
  {
    "label": "tmp_2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp_2(tmp_1[5] + tmp_1[7]) * ComplexScalar(SQRT2DIV2, -SQRT2DIV2)"
  },
  {
    "label": "tmp_2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp_2(tmp_1[4] - tmp_1[6]) * ComplexScalar(0, -1)"
  },
  {
    "label": "tmp_2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp_2(tmp_1[5] - tmp_1[7]) * ComplexScalar(-SQRT2DIV2, -SQRT2DIV2)"
  },
  {
    "label": "tmp_2()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "tmp_2(tmp_1[5] + tmp_1[7]) * ComplexScalar(SQRT2DIV2, SQRT2DIV2)"
  },
  {
    "label": "tmp_2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp_2(tmp_1[4] - tmp_1[6]) * ComplexScalar(0, 1)"
  },
  {
    "label": "tmp_2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp_2(tmp_1[5] - tmp_1[7]) * ComplexScalar(-SQRT2DIV2, SQRT2DIV2)"
  },
  {
    "label": "butterfly_1D_merge()",
    "kind": "Method",
    "detail": "Function (} data [ 0 ] = tmp_2 [ 0 ] + tmp_2 [ 4 ] ; data [ 1 ] = tmp_2 [ 1 ] + tmp_2 [ 5 ] ; data [ 2 ] = tmp_2 [ 2 ] + tmp_2 [ 6 ] ; data [ 3 ] = tmp_2 [ 3 ] + tmp_2 [ 7 ] ; data [ 4 ] = tmp_2 [ 0 ] - tmp_2 [ 4 ] ; data [ 5 ] = tmp_2 [ 1 ] - tmp_2 [ 5 ] ; data [ 6 ] = tmp_2 [ 2 ] - tmp_2 [ 6 ] ; data [ 7 ] = tmp_2 [ 3 ] - tmp_2 [ 7 ] ; } template<int Dir> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "butterfly_1D_merge(ComplexScalar* data, Index n, Index n_power_of_2)"
  },
  {
    "label": "wpi()",
    "kind": "Method",
    "detail": "Function (const RealScalar wtemp = m_sin_PI_div_n_LUT [ n_power_of_2 ] ; const RealScalar)",
    "insertText": "wpi(Dir == FFT_FORWARD)"
  },
  {
    "label": "wp()",
    "kind": "Method",
    "detail": "Function (const ComplexScalar)",
    "insertText": "wp(wtemp, wpi)"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (const ComplexScalar wp_one = wp +)",
    "insertText": "ComplexScalar(1, 0)"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (const ComplexScalar wp_one_2 = wp_one* wp_one ; const ComplexScalar wp_one_3 = wp_one_2* wp_one ; const ComplexScalar wp_one_4 = wp_one_3* wp_one ; const Index n2 = n / 2 ; ComplexScalar)",
    "insertText": "w(1.0, 0.0)"
  },
  {
    "label": "temp0()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "temp0(data[i + n2] * w)"
  },
  {
    "label": "temp1()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "temp1(data[i + 1 + n2] * w * wp_one)"
  },
  {
    "label": "temp2()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "temp2(data[i + 2 + n2] * w * wp_one_2)"
  },
  {
    "label": "temp3()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "temp3(data[i + 3 + n2] * w * wp_one_3)"
  },
  {
    "label": "compute_1D_Butterfly()",
    "kind": "Method",
    "detail": "Function (w = w* wp_one_4 ; data [ i + n2 ] = data [ i ] - temp0 ; data [ i ] + = temp0 ; data [ i + 1 + n2 ] = data [ i + 1 ] - temp1 ; data [ i + 1 ] + = temp1 ; data [ i + 2 + n2 ] = data [ i + 2 ] - temp2 ; data [ i + 2 ] + = temp2 ; data [ i + 3 + n2 ] = data [ i + 3 ] - temp3 ; data [ i + 3 ] + = temp3 ; } } template<int Dir> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "compute_1D_Butterfly(ComplexScalar* data, Index n, Index n_power_of_2)"
  },
  {
    "label": "Dir()",
    "kind": "Method",
    "detail": "Function (compute_1D_Butterfly<)",
    "insertText": "Dir(data, n / 2, n_power_of_2 - 1)"
  },
  {
    "label": "Dir()",
    "kind": "Method",
    "detail": "Function (compute_1D_Butterfly<)",
    "insertText": "Dir(data + n / 2, n / 2, n_power_of_2 - 1)"
  },
  {
    "label": "Dir()",
    "kind": "Method",
    "detail": "Function (butterfly_1D_merge<)",
    "insertText": "Dir(data, n, n_power_of_2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(n == 8)"
  },
  {
    "label": "Dir()",
    "kind": "Method",
    "detail": "Function (butterfly_8<)",
    "insertText": "Dir(data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(n == 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(n == 2)"
  },
  {
    "label": "getBaseOffsetFromIndex()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "getBaseOffsetFromIndex(Index index, Index omitted_dim)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index partial_m_stride = m_strides [ i ] / m_dimensions [ omitted_dim ] ; const Index idx = index / partial_m_stride ; index - = idx* partial_m_stride ; result + = idx* m_strides [ i ] ; } result + = index ; } else {)",
    "insertText": "for(Index i = 0; i < omitted_dim; ++i)"
  },
  {
    "label": "getIndexFromOffset()",
    "kind": "Method",
    "detail": "Function (const Index partial_m_stride = m_strides [ i ] / m_dimensions [ omitted_dim ] ; const Index idx = index / partial_m_stride ; index - = idx* partial_m_stride ; result + = idx* m_strides [ i ] ; } result + = index ; } return result ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "getIndexFromOffset(Index base, Index omitted_dim, Index offset)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (Index result = base + offset* m_strides [ omitted_dim ] ; return result ; } protected : Index m_size ; const FFT EIGEN_DEVICE_REF m_fft ; Dimensions m_dimensions ; array<Index,NumDims> m_strides ; TensorEvaluator<ArgType,Device> m_impl ; EvaluatorPointerType m_data ; const Device EIGEN_DEVICE_REF m_device ; const RealScalar m_sin_PI_div_n_LUT [ 3 2 ] = {)",
    "insertText": "RealScalar(0.0), RealScalar(-2), RealScalar(-0.999999999999999), RealScalar(-0.292893218813453), RealScalar(-0.0761204674887130), RealScalar(-0.0192147195967696), RealScalar(-0.00481527332780311), RealScalar(-0.00120454379482761), RealScalar(-3.01181303795779e-04), RealScalar(-7.52981608554592e-05), RealScalar(-1.88247173988574e-05), RealScalar(-4.70619042382852e-06), RealScalar(-1.17654829809007e-06), RealScalar(-2.94137117780840e-07), RealScalar(-7.35342821488550e-08), RealScalar(-1.83835707061916e-08), RealScalar(-4.59589268710903e-09), RealScalar(-1.14897317243732e-09), RealScalar(-2.87243293150586e-10), RealScalar( -7.18108232902250e-11), RealScalar(-1.79527058227174e-11), RealScalar(-4.48817645568941e-12), RealScalar(-1.12204411392298e-12), RealScalar(-2.80511028480785e-13), RealScalar(-7.01277571201985e-14), RealScalar(-1.75319392800498e-14), RealScalar(-4.38298482001247e-15), RealScalar(-1.09574620500312e-15), RealScalar(-2.73936551250781e-16), RealScalar(-6.84841378126949e-17), RealScalar(-1.71210344531737e-17), RealScalar(-4.28025861329343e-18)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar m_minus_sin_2_PI_div_n_LUT [ 3 2 ] = {)",
    "insertText": "RealScalar(0.0), RealScalar(0.0), RealScalar(-1.00000000000000e+00), RealScalar(-7.07106781186547e-01), RealScalar(-3.82683432365090e-01), RealScalar(-1.95090322016128e-01), RealScalar(-9.80171403295606e-02), RealScalar(-4.90676743274180e-02), RealScalar(-2.45412285229123e-02), RealScalar(-1.22715382857199e-02), RealScalar(-6.13588464915448e-03), RealScalar(-3.06795676296598e-03), RealScalar(-1.53398018628477e-03), RealScalar(-7.66990318742704e-04), RealScalar(-3.83495187571396e-04), RealScalar(-1.91747597310703e-04), RealScalar(-9.58737990959773e-05), RealScalar(-4.79368996030669e-05), RealScalar(-2.39684498084182e-05), RealScalar(-1.19842249050697e-05), RealScalar(-5.99211245264243e-06), RealScalar(-2.99605622633466e-06), RealScalar(-1.49802811316901e-06), RealScalar(-7.49014056584716e-07), RealScalar(-3.74507028292384e-07), RealScalar(-1.87253514146195e-07), RealScalar(-9.36267570730981e-08), RealScalar(-4.68133785365491e-08), RealScalar(-2.34066892682746e-08), RealScalar(-1.17033446341373e-08), RealScalar(-5.85167231706864e-09), RealScalar(-2.92583615853432e-09)"
  }
]