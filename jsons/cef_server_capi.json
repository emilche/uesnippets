[
  {
    "label": "_cef_server_handler_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_server_handler_t"
  },
  {
    "label": "_cef_server_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_server_t"
  },
  {
    "label": "_cef_task_runner_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_task_runner_t"
  },
  {
    "label": "_cef_request_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_request_t"
  },
  {
    "label": "_cef_callback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_callback_t"
  },
  {
    "label": "_cef_task_runner_t()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CAPI_CEF_SERVER_CAPI_H_ # define CEF_INCLUDE_CAPI_CEF_SERVER_CAPI_H_ # pragma once # include \" include / capi / cef_base_capi . h \" # include \" include / capi / cef_callback_capi . h \" # include \" include / capi / cef_request_capi . h \" # include \" include / capi / cef_task_capi . h \" # ifdef __cplusplus \" C \" { # endif struct _cef_server_handler_t ; typedef struct _cef_server_t { cef_base_ref_counted_t base ; struct)",
    "insertText": "_cef_task_runner_t(CEF_CALLBACK* get_task_runner)( struct _cef_server_t* self)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* shutdown)(struct _cef_server_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* is_running)(struct _cef_server_t* self)"
  },
  {
    "label": "cef_string_userfree_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_userfree_t(CEF_CALLBACK* get_address)(struct _cef_server_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* has_connection)(struct _cef_server_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* is_valid_connection)(struct _cef_server_t* self, int connection_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* send_http200response)(struct _cef_server_t* self, int connection_id, const cef_string_t* content_type, const void* data, size_t data_size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* send_http404response)(struct _cef_server_t* self, int connection_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* send_http500response)(struct _cef_server_t* self, int connection_id, const cef_string_t* error_message)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* send_http_response)(struct _cef_server_t* self, int connection_id, int response_code, const cef_string_t* content_type, int64 content_length, cef_string_multimap_t extra_headers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* send_raw_data)(struct _cef_server_t* self, int connection_id, const void* data, size_t data_size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* close_connection)(struct _cef_server_t* self, int connection_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* send_web_socket_message)(struct _cef_server_t* self, int connection_id, const void* data, size_t data_size)"
  },
  {
    "label": "cef_server_create()",
    "kind": "Method",
    "detail": "Function (} cef_server_t ; CEF_EXPORT void)",
    "insertText": "cef_server_create(const cef_string_t* address, uint16 port, int backlog, struct _cef_server_handler_t* handler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef struct _cef_server_handler_t { cef_base_ref_counted_t base ;)",
    "insertText": "void(CEF_CALLBACK* on_server_created)(struct _cef_server_handler_t* self, struct _cef_server_t* server)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_server_destroyed)(struct _cef_server_handler_t* self, struct _cef_server_t* server)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_client_connected)(struct _cef_server_handler_t* self, struct _cef_server_t* server, int connection_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_client_disconnected)(struct _cef_server_handler_t* self, struct _cef_server_t* server, int connection_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_http_request)(struct _cef_server_handler_t* self, struct _cef_server_t* server, int connection_id, const cef_string_t* client_address, struct _cef_request_t* request)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_web_socket_request)(struct _cef_server_handler_t* self, struct _cef_server_t* server, int connection_id, const cef_string_t* client_address, struct _cef_request_t* request, struct _cef_callback_t* callback)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_web_socket_connected)( struct _cef_server_handler_t* self, struct _cef_server_t* server, int connection_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_web_socket_message)(struct _cef_server_handler_t* self, struct _cef_server_t* server, int connection_id, const void* data, size_t data_size)"
  }
]