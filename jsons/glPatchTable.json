[
  {
    "label": "PatchTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchTable"
  },
  {
    "label": "GLPatchTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GLPatchTable"
  },
  {
    "label": "GLPatchTable()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_OSD_GL_PATCH_TABLE_H # define OPENSUBDIV3_OSD_GL_PATCH_TABLE_H # include \" . . / version . h \" # include \" . . / osd / nonCopyable . h \" # include \" . . / osd / opengl . h \" # include \" . . / osd / types . h \" # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class PatchTable ; } ; namespace Osd { class GLPatchTable : private NonCopyable<GLPatchTable> { public : typedef GLuint VertexBufferBinding ; ~)",
    "insertText": "GLPatchTable()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (GLPatchTable*)",
    "insertText": "Create(Far::PatchTable const *farPatchTable, void *deviceContext = NULL)"
  },
  {
    "label": "GetPatchArrays()",
    "kind": "Method",
    "detail": "Function (PatchArrayVector const&)",
    "insertText": "GetPatchArrays()"
  },
  {
    "label": "GetFVarPatchArrays()",
    "kind": "Method",
    "detail": "Function (} PatchArrayVector const&)",
    "insertText": "GetFVarPatchArrays(int fvarChannel = 0)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "allocate(Far::PatchTable const *farPatchTable)"
  }
]