[
  {
    "label": "FMultichannelLinearResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultichannelLinearResampler"
  },
  {
    "label": "FMultichannelLinearResampler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DSP / BufferVectorOperations . h \" # include \" DSP / Dsp . h \" # include \" DSP / MultichannelBuffer . h \" namespace Audio { class FMultichannelLinearResampler { float MinFrameRatioFrameDelta = 0 . 0 0 1 f ; public : const float MaxFrameRatio ; const float MinFrameRatio ;)",
    "insertText": "FMultichannelLinearResampler(int32 InNumChannels)"
  },
  {
    "label": "SetFrameRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameRatio(float InRatio, int32 InNumFramesToInterpolate=0)"
  },
  {
    "label": "MapInputFrameToOutputFrame()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MapInputFrameToOutputFrame(float InInputFrameIndex)"
  },
  {
    "label": "MapOutputFrameToInputFrame()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MapOutputFrameToInputFrame(float InOutputFrameIndex)"
  },
  {
    "label": "GetNumInputFramesNeededToProduceOutputFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumInputFramesNeededToProduceOutputFrames(int32 InNumOutputFrames)"
  },
  {
    "label": "ProcessAndConsumeAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ProcessAndConsumeAudio(FMultichannelCircularBuffer& InAudio, FMultichannelBuffer& OutAudio)"
  },
  {
    "label": "ProcessAndConsumeAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ProcessAndConsumeAudio(FMultichannelCircularBuffer& InAudio, FMultichannelBufferView& OutAudio)"
  },
  {
    "label": "ProcessAndConsumeAudioInternal()",
    "kind": "Method",
    "detail": "Function (private : template<OutputMultichannelBufferType> int32)",
    "insertText": "ProcessAndConsumeAudioInternal(FMultichannelCircularBuffer& InAudio, OutputMultichannelBufferType& OutAudio)"
  },
  {
    "label": "ProcessChannelAudioInternal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ProcessChannelAudioInternal(TArrayView<const float> InAudio, TArrayView<float> OutAudio)"
  },
  {
    "label": "GetNumBufferFramesToProduceOutputFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBufferFramesToProduceOutputFrames(int32 InNumOutputFrames)"
  }
]