[
  {
    "label": "TGaussian1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGaussian1"
  },
  {
    "label": "TDiscreteKernel2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDiscreteKernel2"
  },
  {
    "label": "TGaussian2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGaussian2"
  },
  {
    "label": "TGaussian3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGaussian3"
  },
  {
    "label": "TGaussian1()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IntVectorTypes . h \" # include \" MathUtil . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TGaussian1 { public : RealType Sigma ;)",
    "insertText": "TGaussian1(RealType SigmaIn = 1.0) : Sigma(SigmaIn)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Evaluate(RealType X)"
  },
  {
    "label": "InvTwoSigmaSqr()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "InvTwoSigmaSqr(2.0 * Sigma * Sigma)"
  },
  {
    "label": "EvaluateSqr()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "EvaluateSqr(RealType XSquared)"
  },
  {
    "label": "EvaluateUnscaled()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "EvaluateUnscaled(RealType X)"
  },
  {
    "label": "EvaluateSqrUnscaled()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "EvaluateSqrUnscaled(RealType XSquared)"
  },
  {
    "label": "EvaluateFromOffset()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TGaussian1<float> TGaussian1f ; typedef TGaussian1<double> TGaussian1d ; template<RealType> class TDiscreteKernel2 { public : int32 IntRadius ; TArray<RealType> Kernel ; RealType)",
    "insertText": "EvaluateFromOffset(const FVector2i& Offset)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (int32 X = Offset . X + IntRadius ; int32 Y = Offset . Y + IntRadius ; return Kernel [)",
    "insertText": "Y(2*IntRadius+1)"
  },
  {
    "label": "TGaussian2()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TDiscreteKernel2<float> TDiscreteKernel2f ; typedef TDiscreteKernel2<double> TDiscreteKernel2d ; template<RealType> class TGaussian2 { public : RealType Sigma ;)",
    "insertText": "TGaussian2(RealType SigmaIn = 1.0) : Sigma(SigmaIn)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Evaluate(const UE::Math::TVector2<RealType>& XY)"
  },
  {
    "label": "EvaluateSqrUnscaled()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "EvaluateSqrUnscaled(const UE::Math::TVector2<RealType>& XY)"
  },
  {
    "label": "MakeKernelFromWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeKernelFromWidth(int32 IntRadius, RealType Sigma, TArray<RealType>& KernelOut, bool bNormalized = true)"
  },
  {
    "label": "Gaussian()",
    "kind": "Method",
    "detail": "Function (TGaussian2<RealType>)",
    "insertText": "Gaussian(Sigma)"
  },
  {
    "label": "KernelSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "KernelSize(2 * IntRadius)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (int32 N = KernelSize* KernelSize ; KernelOut .)",
    "insertText": "SetNum(N)"
  },
  {
    "label": "InvTwoSigmaSqr()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "InvTwoSigmaSqr(RealType)1 / ((RealType)2 * Sigma * Sigma)"
  },
  {
    "label": "NormalizeFactor()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "NormalizeFactor(bNormalized) ? (RealType)1 : (TMathUtil<RealType>::InvPi * InvTwoSigmaSqr)"
  },
  {
    "label": "CenterIdx()",
    "kind": "Method",
    "detail": "Function (FVector2i)",
    "insertText": "CenterIdx(IntRadius, IntRadius)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealType KernelSum = 0 ;)",
    "insertText": "for(int32 Y = 0; Y < KernelSize; ++Y)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (FVector2i RelPos =)",
    "insertText": "FVector2i(X,Y)"
  },
  {
    "label": "DistSqr()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "DistSqr(RealType)RelPos.SquaredLength()"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (KernelOut [ Y* KernelSize + X ] = NormalizeFactor* TMathUtil<RealType)",
    "insertText": "Exp(-DistSqr * InvTwoSigmaSqr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (KernelSum + = KernelOut [ Y* KernelSize + X ] ; } })",
    "insertText": "if(bNormalized)"
  },
  {
    "label": "MakeKernelFromRadius()",
    "kind": "Method",
    "detail": "Function (KernelOut [ k ] / = KernelSum ; } } } void)",
    "insertText": "MakeKernelFromRadius(RealType Radius, TArray<RealType>& KernelOut, int32& IntRadiusOut, bool bNormalized = true)"
  },
  {
    "label": "IntRadiusOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntRadiusOut(int32)TMathUtil<RealType>::Ceil(Radius)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (RealType Sigma =)",
    "insertText": "Radius(RealType)"
  },
  {
    "label": "MakeKernelFromWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeKernelFromWidth(IntRadiusOut, Sigma, KernelOut, bNormalized)"
  },
  {
    "label": "MakeKernelFromRadius()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeKernelFromRadius(RealType Radius, TDiscreteKernel2<RealType>& KernelOut, bool bNormalized = true)"
  },
  {
    "label": "IntRadius()",
    "kind": "Method",
    "detail": "Function (KernelOut .)",
    "insertText": "IntRadius(int32)TMathUtil<RealType>::Ceil(Radius)"
  },
  {
    "label": "MakeKernelFromWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeKernelFromWidth(KernelOut.IntRadius, Sigma, KernelOut.Kernel, bNormalized)"
  },
  {
    "label": "TGaussian3()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TGaussian2<float> TGaussian2f ; typedef TGaussian2<double> TGaussian2d ; template<RealType> class TGaussian3 { public : RealType Sigma ;)",
    "insertText": "TGaussian3(RealType SigmaIn = 1.0) : Sigma(SigmaIn)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Evaluate(const TVector<RealType>& XYZ)"
  },
  {
    "label": "EvaluateSqrUnscaled()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "EvaluateSqrUnscaled(const TVector<RealType>& XYZ)"
  }
]