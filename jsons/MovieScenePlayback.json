[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneEvaluationRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationRange"
  },
  {
    "label": "FMovieSceneContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneContext"
  },
  {
    "label": "FMovieScenePlaybackPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePlaybackPosition"
  },
  {
    "label": "FMovieSceneEvaluationRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Evaluation / MovieSceneSequenceTransform . h \" # include \" Evaluation / MovieSceneTimeTransform . h \" # include \" Evaluation / MovieSceneTimeWarping . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / NumericLimits . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Optional . h \" # include \" MovieSceneFwd . h \" # include \" MovieSceneTimeHelpers . h \" enum class EPlayDirection { Forwards,Backwards } ; struct FMovieSceneEvaluationRange {)",
    "insertText": "FMovieSceneEvaluationRange(FFrameTime InTime, FFrameRate InFrameRate)"
  },
  {
    "label": "FMovieSceneEvaluationRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneEvaluationRange(TRange<FFrameTime> InRange, FFrameRate InFrameRate, EPlayDirection InDirection)"
  },
  {
    "label": "FMovieSceneEvaluationRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneEvaluationRange(FFrameTime InCurrentTime, FFrameTime InPreviousTime, FFrameRate InFrameRate, bool bInclusivePreviousTime = false)"
  },
  {
    "label": "TimeRangeToNumberRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "TimeRangeToNumberRange(const TRange<FFrameTime>& InFrameTimeRange)"
  },
  {
    "label": "NumberRangeToTimeRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameTime>)",
    "insertText": "NumberRangeToTimeRange(const TRange<FFrameNumber>& InFrameTimeRange)"
  },
  {
    "label": "GetTraversedFrameNumberRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "GetTraversedFrameNumberRange()"
  },
  {
    "label": "GetEvaluationFieldTime()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber)",
    "insertText": "GetEvaluationFieldTime()"
  },
  {
    "label": "GetFrameNumberRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber> Range =)",
    "insertText": "GetFrameNumberRange()"
  },
  {
    "label": "DiscreteInclusiveLower()",
    "kind": "Method",
    "detail": "Function (} else { return UE::)",
    "insertText": "DiscreteInclusiveLower(Range)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (} } FFrameTime)",
    "insertText": "GetDelta()"
  },
  {
    "label": "GetPreviousTime()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "GetPreviousTime()"
  },
  {
    "label": "GetOffsetTime()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "GetOffsetTime(FFrameTime InOffset)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime Now =)",
    "insertText": "GetTime()"
  },
  {
    "label": "GetFrameRate()",
    "kind": "Method",
    "detail": "Function (TimeOverride = InTimeOverride ; } FFrameRate)",
    "insertText": "GetFrameRate()"
  },
  {
    "label": "FMovieSceneContext()",
    "kind": "Method",
    "detail": "Function (protected : TRange<FFrameTime> EvaluationRange ; FFrameRate CurrentFrameRate ; EPlayDirection Direction ; FFrameNumber TimeOverride ; } ; struct FMovieSceneContext : FMovieSceneEvaluationRange {)",
    "insertText": "FMovieSceneContext() : FMovieSceneEvaluationRange(TRange<FFrameTime>::Empty(), FFrameRate(60, 1), EPlayDirection::Forwards) , Status(EMovieScenePlayerStatus::Stopped) , PrePostRollStartEndTime(TNumericLimits<int32>::Lowest()) , HierarchicalBias(0) , bHasJumped(false) , bSilent(false) , bSectionPreRoll(false) , bSectionPostRoll(false) , bHasPreRollEndTime(false) , bHasPostRollStartTime(false)"
  },
  {
    "label": "FMovieSceneContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneContext(FMovieSceneEvaluationRange InRange) : FMovieSceneEvaluationRange(InRange) , Status(EMovieScenePlayerStatus::Stopped) , PrePostRollStartEndTime(TNumericLimits<int32>::Lowest()) , HierarchicalBias(0) , bHasJumped(false) , bSilent(false) , bSectionPreRoll(false) , bSectionPostRoll(false) , bHasPreRollEndTime(false) , bHasPostRollStartTime(false)"
  },
  {
    "label": "FMovieSceneContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneContext(FMovieSceneEvaluationRange InRange, EMovieScenePlayerStatus::Type InStatus) : FMovieSceneEvaluationRange(InRange) , Status(InStatus) , PrePostRollStartEndTime(TNumericLimits<int32>::Lowest()) , HierarchicalBias(0) , bHasJumped(false) , bSilent(false) , bSectionPreRoll(false) , bSectionPostRoll(false) , bHasPreRollEndTime(false) , bHasPostRollStartTime(false)"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (} EMovieScenePlayerStatus::Type)",
    "insertText": "GetStatus()"
  },
  {
    "label": "GetSequenceToRootSequenceTransform()",
    "kind": "Method",
    "detail": "Function (FMovieSceneInverseSequenceTransform)",
    "insertText": "GetSequenceToRootSequenceTransform()"
  },
  {
    "label": "SetHasJumped()",
    "kind": "Method",
    "detail": "Function (bSectionPreRoll = bInLeadingRegion ; bSectionPostRoll = bInTrailingRegion ; } else { bSectionPreRoll = bInTrailingRegion ; bSectionPostRoll = bInLeadingRegion ; } } public : FMovieSceneContext&)",
    "insertText": "SetHasJumped(bool bInHasJumped)"
  },
  {
    "label": "SetIsSilent()",
    "kind": "Method",
    "detail": "Function (bHasJumped = bInHasJumped ; return* this ; } FMovieSceneContext&)",
    "insertText": "SetIsSilent(bool bInIsSilent)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (bSilent = bInIsSilent ; return* this ; } FMovieSceneContext)",
    "insertText": "Clamp(TRange<FFrameTime> NewRange)"
  },
  {
    "label": "Intersection()",
    "kind": "Method",
    "detail": "Function (FMovieSceneContext NewContext =* this ; NewContext . EvaluationRange = TRange<FFrameTime)",
    "insertText": "Intersection(NewRange, NewContext.EvaluationRange)"
  },
  {
    "label": "SetHierarchicalBias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHierarchicalBias(int32 InHierarchicalBias)"
  },
  {
    "label": "GetHierarchicalBias()",
    "kind": "Method",
    "detail": "Function (HierarchicalBias = InHierarchicalBias ; } int32)",
    "insertText": "GetHierarchicalBias()"
  },
  {
    "label": "GetUpperBoundValue()",
    "kind": "Method",
    "detail": "Function (PrePostRollStartEndTime = InLeadingRange .)",
    "insertText": "GetUpperBoundValue()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasPreRollEndTime = Direction = = EPlayDirection::Forwards ; bHasPostRollStartTime = ! bHasPreRollEndTime ; } else)",
    "insertText": "if(InTrailingRange.Contains(Now) && InTrailingRange.HasLowerBound())"
  },
  {
    "label": "GetLowerBoundValue()",
    "kind": "Method",
    "detail": "Function (PrePostRollStartEndTime = InTrailingRange .)",
    "insertText": "GetLowerBoundValue()"
  },
  {
    "label": "FFrameNumber()",
    "kind": "Method",
    "detail": "Function (bHasPreRollEndTime = Direction = = EPlayDirection::Backwards ; bHasPostRollStartTime = ! bHasPreRollEndTime ; } else { bHasPreRollEndTime = bHasPostRollStartTime = false ; PrePostRollStartEndTime =)",
    "insertText": "FFrameNumber(TNumericLimits<int32>::Lowest())"
  },
  {
    "label": "FMovieScenePlaybackPosition()",
    "kind": "Method",
    "detail": "Function (} } protected : FMovieSceneSequenceTransform RootToSequenceTransform ; FMovieSceneWarpCounter RootToSequenceWarpCounter ; EMovieScenePlayerStatus::Type Status ; FFrameNumber PrePostRollStartEndTime ; int32 HierarchicalBias ; protected : bool bHasJumped : 1 ; bool bSilent : 1 ; bool bSectionPreRoll : 1 ; bool bSectionPostRoll : 1 ; bool bHasPreRollEndTime : 1 ; bool bHasPostRollStartTime : 1 ; } ; struct FMovieScenePlaybackPosition {)",
    "insertText": "FMovieScenePlaybackPosition() : InputRate(0,0), OutputRate(0,0), EvaluationType(EMovieSceneEvaluationType::WithSubFrames)"
  },
  {
    "label": "GetEvaluationType()",
    "kind": "Method",
    "detail": "Function (} EMovieSceneEvaluationType)",
    "insertText": "GetEvaluationType()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(FFrameTime StartPos)"
  },
  {
    "label": "GetCurrentPosition()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetCurrentPosition()"
  },
  {
    "label": "PlayTo()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationRange)",
    "insertText": "PlayTo(FFrameTime NewPosition)"
  },
  {
    "label": "GetLastRange()",
    "kind": "Method",
    "detail": "Function (TOptional<FMovieSceneEvaluationRange>)",
    "insertText": "GetLastRange()"
  },
  {
    "label": "GetCurrentPositionAsRange()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationRange)",
    "insertText": "GetCurrentPositionAsRange()"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CheckInvariants()"
  }
]