[
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "FGameplayDebuggerCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCategory"
  },
  {
    "label": "UAIPerceptionSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionSystem"
  },
  {
    "label": "UAISenseEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseEvent"
  },
  {
    "label": "UAISense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISense"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Perception / AIPerceptionTypes . h \" # include \" AISense . generated . h \" class APawn ; class FGameplayDebuggerCategory ; class UAIPerceptionSystem ; class UAISenseEvent ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPerceptionListenerUpdateDelegate, const FPerceptionListener&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup = AI, abstract, config = Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (float TimeUntilNextUpdate ; FAISenseID SenseID ; protected : FOnPerceptionListenerUpdateDelegate OnNewListenerDelegate ; FOnPerceptionListenerUpdateDelegate OnListenerUpdateDelegate ; FOnPerceptionListenerUpdateDelegate OnListenerRemovedDelegate ; public : UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "HardcodeSenseID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HardcodeSenseID(TSubclassOf<UAISense> SenseClass, FAISenseID HardcodedID)"
  },
  {
    "label": "GetSenseID()",
    "kind": "Method",
    "detail": "Function (FAISenseID)",
    "insertText": "GetSenseID(const TSubclassOf<UAISense> SenseClass)"
  },
  {
    "label": "GetSenseID()",
    "kind": "Method",
    "detail": "Function (} template<TSense> FAISenseID)",
    "insertText": "GetSenseID()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "ProgressTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProgressTime(float DeltaSeconds)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (TimeUntilNextUpdate - = DeltaSeconds ; return TimeUntilNextUpdate<= 0 . f ; } void)",
    "insertText": "Tick()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (TimeUntilNextUpdate =)",
    "insertText": "Update()"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RegisterSource(AActor& SourceActors)"
  },
  {
    "label": "UnregisterSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterSource(AActor& SourceActors)"
  },
  {
    "label": "RegisterWrappedEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterWrappedEvent(UAISenseEvent& PerceptionEvent)"
  },
  {
    "label": "UpdateSenseID()",
    "kind": "Method",
    "detail": "Function (FAISenseID)",
    "insertText": "UpdateSenseID()"
  },
  {
    "label": "NeedsNotificationOnForgetting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsNotificationOnForgetting()"
  },
  {
    "label": "OnListenerForgetsAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListenerForgetsAll(const FPerceptionListener& Listener)"
  },
  {
    "label": "OnNewListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnNewListener(const FPerceptionListener& NewListener)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnNewListenerDelegate .)",
    "insertText": "ExecuteIfBound(NewListener)"
  },
  {
    "label": "OnListenerUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListenerUpdate(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnListenerUpdateDelegate .)",
    "insertText": "ExecuteIfBound(UpdatedListener)"
  },
  {
    "label": "OnListenerRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListenerRemoved(const FPerceptionListener& RemovedListener)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnListenerRemovedDelegate .)",
    "insertText": "ExecuteIfBound(RemovedListener)"
  },
  {
    "label": "OnListenerConfigUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListenerConfigUpdated(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "OnListenerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerUpdate(UpdatedListener)"
  },
  {
    "label": "WantsNewPawnNotification()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WantsNewPawnNotification()"
  },
  {
    "label": "OnNewPawn()",
    "kind": "Method",
    "detail": "Function (# endif protected : UAIPerceptionSystem ; void)",
    "insertText": "OnNewPawn(APawn& NewPawn)"
  },
  {
    "label": "RequestUpdateInSeconds()",
    "kind": "Method",
    "detail": "Function (TimeUntilNextUpdate = 0 . f ; } void)",
    "insertText": "RequestUpdateInSeconds(float UpdateInSeconds)"
  },
  {
    "label": "GetPerceptionSystem()",
    "kind": "Method",
    "detail": "Function (TimeUntilNextUpdate = UpdateInSeconds ; } UAIPerceptionSystem*)",
    "insertText": "GetPerceptionSystem()"
  },
  {
    "label": "GetListeners()",
    "kind": "Method",
    "detail": "Function (AIPerception::FListenerMap*)",
    "insertText": "GetListeners()"
  },
  {
    "label": "ForceSenseID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceSenseID(FAISenseID SenseID)"
  }
]