[
  {
    "label": "FSlateTextBlockLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextBlockLayout"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCheckBox"
  },
  {
    "label": "SSidebarButtonText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarButtonText"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWidgetDrawerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetDrawerConfig"
  },
  {
    "label": "SSidebarButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarButton"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Framework / SlateDelegates . h \" # include \" Misc / Optional . h \" # include \" Sidebar / SidebarDrawer . h \" # include \" Sidebar / SSidebar . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SLeafWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class FSlateTextBlockLayout ; class SBorder ; class SButton ; class SCheckBox ; class SSidebarButtonText ; class SWidget ; enum class ESidebarTabLocation : uint8 ; struct FWidgetDrawerConfig ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSidebarButtonPressed, const TSharedRef<FSidebarDrawer>&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSidebarPinToggled, const TSharedRef<FSidebarDrawer>&, const bool)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSidebarDockToggled, const TSharedRef<FSidebarDrawer>&, const bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SSidebarButton : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSidebarButton)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(float, MinButtonSize) SLATE_ARGUMENT(float, MaxButtonSize) SLATE_ARGUMENT(float, ButtonThickness) SLATE_EVENT(FOnSidebarButtonPressed, OnPressed) SLATE_EVENT(FOnSidebarPinToggled, OnPinToggled) SLATE_EVENT(FOnSidebarPinToggled, OnDockToggled) SLATE_EVENT(FOnGetContent, OnGetContextMenuContent) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<FSidebarDrawer>& InDrawer, const ESidebarTabLocation InTabLocation)"
  },
  {
    "label": "UpdateAppearance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAppearance(const TSharedPtr<FSidebarDrawer>& InLastDrawerOpen)"
  },
  {
    "label": "OnTabRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabRenamed(const TWeakPtr<FSidebarDrawer>& InDrawer)"
  },
  {
    "label": "GetHAlignFromTabLocation()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "GetHAlignFromTabLocation(const ESidebarTabLocation InTabLocation)"
  },
  {
    "label": "GetVAlignFromTabLocation()",
    "kind": "Method",
    "detail": "Function (EVerticalAlignment)",
    "insertText": "GetVAlignFromTabLocation(const ESidebarTabLocation InTabLocation)"
  },
  {
    "label": "GetActiveTabIndicatorVisibility()",
    "kind": "Method",
    "detail": "Function (protected : EVisibility)",
    "insertText": "GetActiveTabIndicatorVisibility()"
  },
  {
    "label": "GetPinVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPinVisibility()"
  },
  {
    "label": "GetPinToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPinToolTipText()"
  },
  {
    "label": "IsPinChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsPinChecked()"
  },
  {
    "label": "GetPinImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetPinImage()"
  },
  {
    "label": "OnPinStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPinStateChanged(const ECheckBoxState InNewState)"
  },
  {
    "label": "GetDockVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDockVisibility()"
  },
  {
    "label": "GetDockToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDockToolTipText()"
  },
  {
    "label": "IsDockChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsDockChecked()"
  },
  {
    "label": "GetDockImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetDockImage()"
  },
  {
    "label": "OnDockStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDockStateChanged(const ECheckBoxState InNewState)"
  },
  {
    "label": "GetForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetForegroundColor()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  }
]