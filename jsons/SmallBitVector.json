[
  {
    "label": "SmallBitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallBitVector"
  },
  {
    "label": "reference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "reference"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SMALLBITVECTOR_H # define LLVM_ADT_SMALLBITVECTOR_H # include \" llvm / ADT / BitVector . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / MathExtras . h \" # include<cassert> namespace llvm { class SmallBitVector { uintptr_t X ; enum { NumBaseBits =)",
    "insertText": "sizeof(uintptr_t) * CHAR_BIT, SmallNumRawBits = NumBaseBits - 1, SmallNumSizeBits = (NumBaseBits == 32 ? 5 : NumBaseBits == 64 ? 6 : SmallNumRawBits)"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (public : typedef unsigned size_type ; class reference { SmallBitVector& TheVector ; unsigned BitPos ; public :)",
    "insertText": "reference(SmallBitVector &b, unsigned Idx) : TheVector(b), BitPos(Idx)"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "reference(const reference&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (reference&)",
    "insertText": "operator(reference t)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "bool(t)"
  },
  {
    "label": "isSmall()",
    "kind": "Method",
    "detail": "Function (} } ; private : bool)",
    "insertText": "isSmall()"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} BitVector*)",
    "insertText": "getPointer()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isSmall())"
  },
  {
    "label": "switchToSmall()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "switchToSmall(uintptr_t NewSmallBits, size_t NewSize)"
  },
  {
    "label": "setSmallSize()",
    "kind": "Method",
    "detail": "Function (X = 1 ;)",
    "insertText": "setSmallSize(NewSize)"
  },
  {
    "label": "setSmallBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSmallBits(NewSmallBits)"
  },
  {
    "label": "switchToLarge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "switchToLarge(BitVector *BV)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (X = reinterpret_cast<)",
    "insertText": "uintptr_t(BV)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isSmall() && \"Tried to use an unaligned pointer\")"
  },
  {
    "label": "getSmallRawBits()",
    "kind": "Method",
    "detail": "Function (} uintptr_t)",
    "insertText": "getSmallRawBits()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isSmall())"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(NewRawBits << 1) | uintptr_t(1)"
  },
  {
    "label": "getSmallSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getSmallSize()"
  },
  {
    "label": "setSmallSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSmallSize(size_t Size)"
  },
  {
    "label": "setSmallRawBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSmallRawBits(getSmallBits() | (Size << SmallNumDataBits))"
  },
  {
    "label": "getSmallBits()",
    "kind": "Method",
    "detail": "Function (} uintptr_t)",
    "insertText": "getSmallBits()"
  },
  {
    "label": "setSmallBits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSmallBits(uintptr_t NewBits)"
  },
  {
    "label": "setSmallRawBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSmallRawBits((NewBits & ~(~uintptr_t(0) << getSmallSize())) | (getSmallSize() << SmallNumDataBits))"
  },
  {
    "label": "SmallBitVector()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "SmallBitVector() : X(1)"
  },
  {
    "label": "SmallBitVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallBitVector(unsigned s, bool t = false)"
  },
  {
    "label": "SmallBitVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallBitVector(const SmallBitVector &RHS)"
  },
  {
    "label": "SmallBitVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallBitVector(SmallBitVector &&RHS) : X(RHS.X)"
  },
  {
    "label": "SmallBitVector()",
    "kind": "Method",
    "detail": "Function (RHS . X = 1 ; } ~)",
    "insertText": "SmallBitVector()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count()"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "getPointer()->count()"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "any()"
  },
  {
    "label": "all()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "all()"
  },
  {
    "label": "none()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "none()"
  },
  {
    "label": "find_first()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "find_first()"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "getPointer()->find_first()"
  },
  {
    "label": "find_next()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "find_next(unsigned Prev)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (Bits& = ~)",
    "insertText": "uintptr_t(0) << (Prev + 1)"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "getPointer()->find_next(Prev)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(unsigned N, bool t = false)"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getPointer()->resize(N, t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SmallNumDataBits >= N)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t NewBits = t ? ~)",
    "insertText": "uintptr_t(0) << getSmallSize()"
  },
  {
    "label": "setSmallSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSmallSize(N)"
  },
  {
    "label": "setSmallBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSmallBits(NewBits | getSmallBits())"
  },
  {
    "label": "BitVector()",
    "kind": "Method",
    "detail": "Function (} else { BitVector* BV = new)",
    "insertText": "BitVector(N, t)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "reserve(unsigned N)"
  },
  {
    "label": "BitVector()",
    "kind": "Method",
    "detail": "Function (BitVector* BV = new)",
    "insertText": "BitVector(SmallSize)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (BV ->)",
    "insertText": "reserve(N)"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "getPointer()->reserve(N)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} } SmallBitVector&)",
    "insertText": "set()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx <= static_cast<unsigned>( std::numeric_limits<uintptr_t>::digits) && \"undefined behavior\")"
  },
  {
    "label": "setSmallBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSmallBits(getSmallBits() | (uintptr_t(1) << Idx))"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "getPointer()->set(Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I <= E && \"Attempted to set backwards range!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(E <= size() && \"Attempted to set out-of-bounds range!\")"
  },
  {
    "label": "EMask()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "EMask((uintptr_t)1)"
  },
  {
    "label": "IMask()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "IMask((uintptr_t)1)"
  },
  {
    "label": "setSmallBits()",
    "kind": "Method",
    "detail": "Function (uintptr_t Mask = EMask - IMask ;)",
    "insertText": "setSmallBits(getSmallBits() | Mask)"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "getPointer()->set(I, E)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I <= E && \"Attempted to reset backwards range!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(E <= size() && \"Attempted to reset out-of-bounds range!\")"
  },
  {
    "label": "setSmallBits()",
    "kind": "Method",
    "detail": "Function (uintptr_t Mask = EMask - IMask ;)",
    "insertText": "setSmallBits(getSmallBits() & ~Mask)"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "getPointer()->reset(I, E)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator(unsigned Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < size() && \"Out-of-bounds Bit access.\")"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "test(unsigned Idx)"
  },
  {
    "label": "anyCommon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "anyCommon(const SmallBitVector &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const SmallBitVector &RHS)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(std::max(size(), RHS.size()))"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getPointer()->operator&=(*Copy.getPointer())"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} return* this ; } SmallBitVector&)",
    "insertText": "reset(const SmallBitVector &RHS)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned i,e ;)",
    "insertText": "for(i = 0, e = std::min(size(), RHS.size()); i != e; ++i) if (test(i) && !RHS.test(i))"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getPointer()->operator|=(*Copy.getPointer())"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getPointer()->operator^=(*Copy.getPointer())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!RHS.isSmall()) *getPointer() = *RHS.getPointer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (X = RHS . X ; } } return* this ; } const SmallBitVector&)",
    "insertText": "operator(SmallBitVector &&RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} return* this ; } void)",
    "insertText": "swap(SmallBitVector &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(X, RHS.X)"
  },
  {
    "label": "setBitsInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "clearBitsInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "setBitsNotInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "clearBitsNotInMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u)"
  },
  {
    "label": "applyMask()",
    "kind": "Method",
    "detail": "Function (} private : template<bool AddBits,bool InvertMask> void)",
    "insertText": "applyMask(const uint32_t *Mask, unsigned MaskWords)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (uint64_t M =)",
    "insertText": "Mask(uint64_t(Mask[1]) << 32)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} else { # pragma)",
    "insertText": "warning(push ) #pragma warning( disable: 4319)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "warning(pop)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SmallBitVector)",
    "insertText": "operator(const SmallBitVector &LHS, const SmallBitVector &RHS)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (SmallBitVector)",
    "insertText": "Result(LHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Result ^ = RHS ; return Result ; } } namespace std { void)",
    "insertText": "swap(llvm::SmallBitVector &LHS, llvm::SmallBitVector &RHS)"
  }
]