[
  {
    "label": "FSurfaceAreaHeuristic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfaceAreaHeuristic"
  },
  {
    "label": "FIgnoreDirty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIgnoreDirty"
  },
  {
    "label": "FTrackDirty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackDirty"
  },
  {
    "label": "FSingleRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleRoot"
  },
  {
    "label": "FRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRoot"
  },
  {
    "label": "FRootForest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootForest"
  },
  {
    "label": "FRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRoot"
  },
  {
    "label": "FLowestCostList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLowestCostList"
  },
  {
    "label": "FDynamicBVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicBVH"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "FMortonArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMortonArray"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "FSortPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortPair"
  },
  {
    "label": "FCreateNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateNode"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector3f( Position - Offset )"
  },
  {
    "label": "FDynamicBVH()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FDynamicBVH()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add( const TBounds<T>& Bounds, uint32 Index )"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update( const TBounds<T>& Bounds, uint32 Index )"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove( uint32 Index )"
  },
  {
    "label": "SwapIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapIndexes( uint32 Index0, uint32 Index1 )"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build( const TArray< FBounds3f >& BoundsArray, uint32 FirstIndex )"
  },
  {
    "label": "ForAllDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllDirty( const FFuncType& Func )"
  },
  {
    "label": "FindClosest()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindClosest( const UE::Math::TVector<T>& Position, const FFuncType& LeafDistSqr )"
  },
  {
    "label": "FindBestInsertion_BranchAndBound()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindBestInsertion_BranchAndBound( uint32 NodeIndex, const FBounds3f& RESTRICT Bounds )"
  },
  {
    "label": "FindBestInsertion_Greedy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindBestInsertion_Greedy( uint32 NodeIndex, const FBounds3f& RESTRICT Bounds )"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Insert( FRoot& RESTRICT Root, const FBounds3f& RESTRICT Bounds, uint32 NodeIndex )"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Extract( uint32 NodeIndex )"
  },
  {
    "label": "RemoveAndSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAndSwap( uint32 NodeIndex )"
  },
  {
    "label": "RecursivePromoteChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecursivePromoteChild( uint32 NodeIndex )"
  },
  {
    "label": "PromoteChild()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PromoteChild( uint32 NodeIndex )"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate( uint32 NodeIndex )"
  },
  {
    "label": "AllocNode()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AllocNode()"
  },
  {
    "label": "FreeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeNode( uint32 NodeIndex )"
  },
  {
    "label": "CA_SUPPRESS()",
    "kind": "Method",
    "detail": "Function (bounds)",
    "insertText": "CA_SUPPRESS(6385)"
  },
  {
    "label": "FreeNode()",
    "kind": "Method",
    "detail": "Function (Children)",
    "insertText": "FreeNode( BestIndex )"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (Leaf)",
    "insertText": "Func( FirstChild >> 1 )"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (Leaf)",
    "insertText": "Func( FirstChild >> 1 )"
  },
  {
    "label": "FMortonArray()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FMortonArray( const TArray< FBounds3f >& InBounds )"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Split( const FRange& Range )"
  },
  {
    "label": "RegenerateCodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateCodes( const FRange& Range )"
  },
  {
    "label": "MortonArray()",
    "kind": "Method",
    "detail": "Function (FMortonArray)",
    "insertText": "MortonArray( BoundsArray )"
  }
]