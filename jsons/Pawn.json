[
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "APhysicsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APhysicsVolume"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "UPawnMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPawnMovementComponent"
  },
  {
    "label": "UPawnNoiseEmitterComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPawnNoiseEmitterComponent"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "FDamageEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDamageEvent"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / CoreNet . h \" # include \" Engine / EngineTypes . h \" # include \" GameFramework / Actor . h \" # include \" AI / Navigation / NavAgentInterface . h \" # include \" Pawn . generated . h \" class AController ; class APhysicsVolume ; class APlayerController ; class APlayerState ; class FDebugDisplayInfo ; class UCanvas ; class UDamageType ; class UInputComponent ; class UPawnMovementComponent ; class UPawnNoiseEmitterComponent ; class UPlayer ; class UPrimitiveComponent ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogDamage, Warning, All)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FPawnRestartedSignature, APawn, ReceiveRestartedDelegate, APawn*, Pawn)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_ThreeParams(FPawnControllerChangedSignature, APawn, ReceiveControllerChangedDelegate, APawn*, Pawn, AController*, OldController, AController*, NewController)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPawnBeginPlay, APawn*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config=Game, BlueprintType, Blueprintable, hideCategories=(Navigation), meta=(ShortTooltip=\"A Pawn is an actor that can be 'possessed' and receive input from a controller.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API APawn(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "PreReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReplication(IRepChangedPropertyTracker & ChangedPropertyTracker)"
  },
  {
    "label": "GetMovementBase()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent*)",
    "insertText": "GetMovementBase()"
  },
  {
    "label": "GetPawnNoiseEmitterComponent()",
    "kind": "Method",
    "detail": "Function (UPawnNoiseEmitterComponent*)",
    "insertText": "GetPawnNoiseEmitterComponent()"
  },
  {
    "label": "IsLocalPlayerControllerViewingAPawn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalPlayerControllerViewingAPawn()"
  },
  {
    "label": "SetPlayerState()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetPlayerState(APlayerState* NewPlayerState)"
  },
  {
    "label": "GetPlayerState()",
    "kind": "Method",
    "detail": "Function (APlayerState*)",
    "insertText": "GetPlayerState()"
  },
  {
    "label": "GetPlayerStateChecked()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetPlayerStateChecked()"
  },
  {
    "label": "OnPlayerStateChanged()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "OnPlayerStateChanged(APlayerState* NewPlayerState, APlayerState* OldPlayerState)"
  },
  {
    "label": "TurnOff()",
    "kind": "Method",
    "detail": "Function (float AllowedYawError ; void)",
    "insertText": "TurnOff()"
  },
  {
    "label": "PawnStartFire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PawnStartFire(uint8 FireModeNum = 0)"
  },
  {
    "label": "SetRemoteViewPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteViewPitch(float NewRemoteViewPitch)"
  },
  {
    "label": "GetPhysicsVolume()",
    "kind": "Method",
    "detail": "Function (APhysicsVolume*)",
    "insertText": "GetPhysicsVolume()"
  },
  {
    "label": "ReachedDesiredRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReachedDesiredRotation()"
  },
  {
    "label": "GetDefaultHalfHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDefaultHalfHeight()"
  },
  {
    "label": "GetController()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetController()"
  },
  {
    "label": "GetVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetVelocity()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetHumanReadableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHumanReadableName()"
  },
  {
    "label": "ShouldTickIfViewportsOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTickIfViewportsOnly()"
  },
  {
    "label": "IsNetRelevantFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector& SrcLocation)"
  },
  {
    "label": "PostNetReceiveLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceiveLocationAndRotation()"
  },
  {
    "label": "PostNetReceiveVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceiveVelocity(const FVector& NewVelocity)"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "GetActorEyesViewPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorEyesViewPoint(FVector& Location, FRotator& Rotation)"
  },
  {
    "label": "OutsideWorldBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutsideWorldBounds()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "PreInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreInitializeComponents()"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "GetNetOwner()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "GetNetOwner()"
  },
  {
    "label": "GetNetOwningPlayer()",
    "kind": "Method",
    "detail": "Function (UPlayer*)",
    "insertText": "GetNetOwningPlayer()"
  },
  {
    "label": "GetNetConnection()",
    "kind": "Method",
    "detail": "Function (class UNetConnection*)",
    "insertText": "GetNetConnection()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  },
  {
    "label": "TakeDamage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "TakeDamage(float Damage, struct FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser)"
  },
  {
    "label": "BecomeViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BecomeViewTarget(APlayerController* PC)"
  },
  {
    "label": "EndViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndViewTarget(APlayerController* PC)"
  },
  {
    "label": "EnableInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableInput(APlayerController* PlayerController)"
  },
  {
    "label": "DisableInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableInput(APlayerController* PlayerController)"
  },
  {
    "label": "TeleportSucceeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeleportSucceeded(bool bIsATest)"
  },
  {
    "label": "IsBasedOnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBasedOnActor(const AActor* Other)"
  },
  {
    "label": "CanBeBaseForCharacter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeBaseForCharacter(APawn* APawn)"
  },
  {
    "label": "UpdateNavigationRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavigationRelevance()"
  },
  {
    "label": "GetNavAgentPropertiesRef()",
    "kind": "Method",
    "detail": "Function (} const FNavAgentProperties&)",
    "insertText": "GetNavAgentPropertiesRef()"
  },
  {
    "label": "GetMoveGoalReachTest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMoveGoalReachTest(const AActor* MovingActor, const FVector& MoveOffset, FVector& GoalOffset, float& GoalRadius, float& GoalHalfHeight)"
  },
  {
    "label": "UpdateNavAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavAgent()"
  },
  {
    "label": "ShouldTakeDamage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTakeDamage(float Damage, FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser)"
  },
  {
    "label": "EditorApplyRotation()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "EditorApplyRotation(const FRotator& DeltaRotation, bool bAltDown, bool bShiftDown, bool bCtrlDown)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetGravityDirection()",
    "kind": "Method",
    "detail": "Function (# endif FVector)",
    "insertText": "GetGravityDirection()"
  },
  {
    "label": "GetGravityTransform()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetGravityTransform()"
  },
  {
    "label": "SetPlayerDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerDefaults()"
  },
  {
    "label": "RecalculateBaseEyeHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateBaseEyeHeight()"
  },
  {
    "label": "InputEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputEnabled()"
  },
  {
    "label": "UnPossessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnPossessed()"
  },
  {
    "label": "NotifyControllerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyControllerChanged()"
  },
  {
    "label": "NotifyRestarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRestarted()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart()"
  },
  {
    "label": "PawnClientRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PawnClientRestart()"
  },
  {
    "label": "DispatchRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchRestart(bool bCallClientRestart)"
  },
  {
    "label": "GetViewRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "GetViewRotation()"
  },
  {
    "label": "GetPawnViewLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPawnViewLocation()"
  },
  {
    "label": "InFreeCam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InFreeCam()"
  },
  {
    "label": "FaceRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FaceRotation(FRotator NewControlRotation, float DeltaTime = 0.f)"
  },
  {
    "label": "GetDamageInstigator()",
    "kind": "Method",
    "detail": "Function (protected : AController*)",
    "insertText": "GetDamageInstigator(AController* InstigatedBy, const UDamageType& DamageType)"
  },
  {
    "label": "CreatePlayerInputComponent()",
    "kind": "Method",
    "detail": "Function (UInputComponent*)",
    "insertText": "CreatePlayerInputComponent()"
  },
  {
    "label": "DestroyPlayerInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPlayerInputComponent()"
  },
  {
    "label": "SetupPlayerInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)"
  },
  {
    "label": "Internal_AddMovementInput()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Internal_AddMovementInput(FVector WorldAccel, bool bForce = false)"
  },
  {
    "label": "Internal_GetPendingMovementInputVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Internal_GetPendingMovementInputVector()"
  },
  {
    "label": "MoveIgnoreActorAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveIgnoreActorAdd(AActor* ActorToIgnore)"
  },
  {
    "label": "MoveIgnoreActorRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveIgnoreActorRemove(AActor* ActorToIgnore)"
  }
]