[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCoroTimeoutAwaitable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoroTimeoutAwaitable"
  },
  {
    "label": "Suspend_Named()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Coroutine . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Timespan . h \" # if WITH_CPP_COROUTINES enum class ECoroTimeoutFlags : uint8 {)",
    "insertText": "Suspend_Named(1U << 1U), Suspend_Worker = (1U << 2U)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ECoroTimeoutFlags)"
  },
  {
    "label": "FCoroTimeoutAwaitable()",
    "kind": "Method",
    "detail": "Function (FTimespan SuspendTime ; FTimespan Timedelta ; ECoroTimeoutFlags Flags ; public :)",
    "insertText": "FCoroTimeoutAwaitable(FTimespan InTimedelta = FTimespan::FromMilliseconds(33), ECoroTimeoutFlags InFlags = ECoroTimeoutFlags::Suspend_Worker) : Timedelta(InTimedelta), Flags(InFlags)"
  },
  {
    "label": "FromSeconds()",
    "kind": "Method",
    "detail": "Function (SuspendTime =)",
    "insertText": "FromSeconds(FPlatformTime::Seconds())"
  },
  {
    "label": "await_ready()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "await_ready()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool Ready = false ;)",
    "insertText": "if(LowLevelTasks::FTask::GetActiveTask() != nullptr)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (Ready = !)",
    "insertText": "EnumHasAnyFlags(Flags, ECoroTimeoutFlags::Suspend_Worker)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (} else { Ready = !)",
    "insertText": "EnumHasAnyFlags(Flags, ECoroTimeoutFlags::Suspend_Named)"
  },
  {
    "label": "await_suspend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "await_suspend(coroutine_handle_base)"
  },
  {
    "label": "await_resume()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "await_resume()"
  }
]