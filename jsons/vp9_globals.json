[
  {
    "label": "TemporalStructureMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TemporalStructureMode"
  },
  {
    "label": "GofInfoVP9",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GofInfoVP9"
  },
  {
    "label": "RTPVideoHeaderVP9",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTPVideoHeaderVP9"
  },
  {
    "label": "SetGofInfoVP9()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP9_INCLUDE_VP9_GLOBALS_H_ # define MODULES_VIDEO_CODING_CODECS_VP9_INCLUDE_VP9_GLOBALS_H_ # include<stdint . h> # include \" modules / video_coding / codecs / interface / common_constants . h \" # include \" rtc_base / checks . h \" namespace webrtc { const int16_t kMaxOneBytePictureId = 0 x7F ; const int16_t kMaxTwoBytePictureId = 0 x7FFF ; const uint8_t kNoSpatialIdx = 0 xFF ; const uint8_t kNoGofIdx = 0 xFF ; const uint8_t kNumVp9Buffers = 8 ; const size_t kMaxVp9RefPics = 3 ; const size_t kMaxVp9FramesInGof = 0 xFF ; const size_t kMaxVp9NumberOfSpatialLayers = 8 ; const size_t kMinVp9SpatialLayerLongSideLength = 2 4 0 ; const size_t kMinVp9SpatialLayerShortSideLength = 1 3 5 ; enum TemporalStructureMode { kTemporalStructureMode1,kTemporalStructureMode2,kTemporalStructureMode3,} ; struct GofInfoVP9 { void)",
    "insertText": "SetGofInfoVP9(TemporalStructureMode tm)"
  },
  {
    "label": "CopyGofInfoVP9()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CopyGofInfoVP9(const GofInfoVP9& src)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (num_frames_in_gof = src . num_frames_in_gof ;)",
    "insertText": "for(size_t i = 0; i < num_frames_in_gof; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (temporal_idx [ i ] = src . temporal_idx [ i ] ; temporal_up_switch [ i ] = src . temporal_up_switch [ i ] ; num_ref_pics [ i ] = src . num_ref_pics [ i ] ;)",
    "insertText": "for(uint8_t r = 0; r < num_ref_pics[i]; ++r)"
  },
  {
    "label": "InitRTPVideoHeaderVP9()",
    "kind": "Method",
    "detail": "Function (pid_diff [ i ] [ r ] = src . pid_diff [ i ] [ r ] ; } } } size_t num_frames_in_gof ; uint8_t temporal_idx [ kMaxVp9FramesInGof ] ; bool temporal_up_switch [ kMaxVp9FramesInGof ] ; uint8_t num_ref_pics [ kMaxVp9FramesInGof ] ; uint8_t pid_diff [ kMaxVp9FramesInGof ] [ kMaxVp9RefPics ] ; uint16_t pid_start ; } ; struct RTPVideoHeaderVP9 { void)",
    "insertText": "InitRTPVideoHeaderVP9()"
  }
]