[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "AudioBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioBuffer"
  },
  {
    "label": "GainControlImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GainControlImpl"
  },
  {
    "label": "MonoAgcState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MonoAgcState"
  },
  {
    "label": "GainControlImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_GAIN_CONTROL_IMPL_H_ # define MODULES_AUDIO_PROCESSING_GAIN_CONTROL_IMPL_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / agc / gain_control . h \" namespace webrtc { class ApmDataDumper ; class AudioBuffer ; class GainControlImpl : public GainControl { public :)",
    "insertText": "GainControlImpl()"
  },
  {
    "label": "GainControlImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GainControlImpl(const GainControlImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GainControlImpl&)",
    "insertText": "operator(const GainControlImpl&)"
  },
  {
    "label": "ProcessRenderAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRenderAudio(rtc::ArrayView<const int16_t> packed_render_audio)"
  },
  {
    "label": "AnalyzeCaptureAudio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AnalyzeCaptureAudio(const AudioBuffer& audio)"
  },
  {
    "label": "ProcessCaptureAudio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ProcessCaptureAudio(AudioBuffer* audio, bool stream_has_echo)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(size_t num_proc_channels, int sample_rate_hz)"
  },
  {
    "label": "PackRenderAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackRenderAudioBuffer(const AudioBuffer& audio, std::vector<int16_t>* packed_buffer)"
  },
  {
    "label": "stream_analog_level()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stream_analog_level()"
  },
  {
    "label": "is_limiter_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_limiter_enabled()"
  },
  {
    "label": "compression_gain_db()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "compression_gain_db()"
  },
  {
    "label": "set_compression_gain_db()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "set_compression_gain_db(int gain)"
  },
  {
    "label": "set_target_level_dbfs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "set_target_level_dbfs(int level)"
  },
  {
    "label": "enable_limiter()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "enable_limiter(bool enable)"
  },
  {
    "label": "set_stream_analog_level()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "set_stream_analog_level(int level)"
  },
  {
    "label": "target_level_dbfs()",
    "kind": "Method",
    "detail": "Function (private : struct MonoAgcState ; int)",
    "insertText": "target_level_dbfs()"
  }
]