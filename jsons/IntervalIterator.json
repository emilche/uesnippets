[
  {
    "label": "NodeTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeTy"
  },
  {
    "label": "OrigContainer_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OrigContainer_t"
  },
  {
    "label": "GT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GT"
  },
  {
    "label": "IGT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGT"
  },
  {
    "label": "IntervalIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalIterator"
  },
  {
    "label": "getNodeHeader()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_INTERVALITERATOR_H # define LLVM_ANALYSIS_INTERVALITERATOR_H # include \" llvm / Analysis / IntervalPartition . h \" # include \" llvm / IR / CFG . h \" # include \" llvm / IR / Function . h \" # include<algorithm> # include<set> # include<vector> namespace llvm { BasicBlock*)",
    "insertText": "getNodeHeader(BasicBlock *BB)"
  },
  {
    "label": "getSourceGraphNode()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getSourceGraphNode(Function *, BasicBlock *BB)"
  },
  {
    "label": "addNodeToInterval()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addNodeToInterval(Interval *Int, BasicBlock *BB)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Int -> Nodes .)",
    "insertText": "push_back(BB)"
  },
  {
    "label": "addNodeToInterval()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addNodeToInterval(Interval *Int, Interval *I)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Int -> Nodes .)",
    "insertText": "insert(Int->Nodes.end(), I->Nodes.begin(), I->Nodes.end())"
  },
  {
    "label": "IntervalIterator()",
    "kind": "Method",
    "detail": "Function (} template<class NodeTy,class OrigContainer_t,class GT = GraphTraits<NodeTy*>,class IGT = GraphTraits<Inverse<NodeTy*>>> class IntervalIterator { std::vector<std::pair<Interval*,Interval::succ_iterator>> IntStack ; std::set<BasicBlock*> Visited ; OrigContainer_t* OrigContainer ; bool IOwnMem ; public : typedef std::forward_iterator_tag iterator_category ;)",
    "insertText": "IntervalIterator()"
  },
  {
    "label": "IntervalIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IntervalIterator(Function *M, bool OwnMemory) : IOwnMem(OwnMemory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OrigContainer = M ;)",
    "insertText": "if(!ProcessInterval(&M->front()))"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"ProcessInterval should never fail for first interval!\")"
  },
  {
    "label": "IntervalIterator()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "IntervalIterator(IntervalIterator &&x) : IntStack(std::move(x.IntStack)), Visited(std::move(x.Visited)), OrigContainer(x.OrigContainer), IOwnMem(x.IOwnMem)"
  },
  {
    "label": "IntervalIterator()",
    "kind": "Method",
    "detail": "Function (x . IOwnMem = false ; })",
    "insertText": "IntervalIterator(IntervalPartition &IP, bool OwnMemory) : IOwnMem(OwnMemory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OrigContainer =& IP ;)",
    "insertText": "if(!ProcessInterval(IP.getRootInterval()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete)",
    "insertText": "operator()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (IntStack .)",
    "insertText": "pop_back()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const IntervalIterator &x)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!IntStack.empty() && \"Attempting to use interval iterator at end!\")"
  },
  {
    "label": "ProcessInterval()",
    "kind": "Method",
    "detail": "Function (bool Done =)",
    "insertText": "ProcessInterval(getSourceGraphNode(OrigContainer, *SuccIt))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + SuccIt ;)",
    "insertText": "if(Done)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IOwnMem) delete IntStack.back()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!IntStack.empty())"
  },
  {
    "label": "ProcessInterval()",
    "kind": "Method",
    "detail": "Function (IntervalIterator tmp =* this ; + +* this ; return tmp ; } private : bool)",
    "insertText": "ProcessInterval(NodeTy *Node)"
  },
  {
    "label": "getNodeHeader()",
    "kind": "Method",
    "detail": "Function (BasicBlock* Header =)",
    "insertText": "getNodeHeader(Node)"
  },
  {
    "label": "Interval()",
    "kind": "Method",
    "detail": "Function (Interval* Int = new)",
    "insertText": "Interval(Header)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (IntStack .)",
    "insertText": "push_back(std::make_pair(Int, succ_begin(Int)))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Int && \"Null interval == bad!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node && \"Null Node == bad!\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(typename IGT::ChildIteratorType I = IGT::child_begin(Node), E = IGT::child_end(Node); I != E; ++I)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Visited .)",
    "insertText": "insert(NodeHeader)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Int -> Successors .)",
    "insertText": "erase(std::remove(Int->Successors.begin(), Int->Successors.end(), NodeHeader), Int->Successors.end())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(typename GT::ChildIteratorType It = GT::child_begin(Node), End = GT::child_end(Node); It != End; ++It) ProcessNode(Int, getSourceGraphNode(OrigContainer, *It))"
  },
  {
    "label": "intervals_begin()",
    "kind": "Method",
    "detail": "Function (} } } ; typedef IntervalIterator<BasicBlock,Function> function_interval_iterator ; typedef IntervalIterator<Interval,IntervalPartition> interval_part_interval_iterator ; function_interval_iterator)",
    "insertText": "intervals_begin(Function *F, bool DeleteInts = true)"
  },
  {
    "label": "intervals_end()",
    "kind": "Method",
    "detail": "Function (} function_interval_iterator)",
    "insertText": "intervals_end(Function *)"
  },
  {
    "label": "intervals_begin()",
    "kind": "Method",
    "detail": "Function (} interval_part_interval_iterator)",
    "insertText": "intervals_begin(IntervalPartition &IP, bool DeleteIntervals = true)"
  },
  {
    "label": "intervals_end()",
    "kind": "Method",
    "detail": "Function (} interval_part_interval_iterator)",
    "insertText": "intervals_end(IntervalPartition &IP)"
  }
]