[
  {
    "label": "StreamIDTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamIDTag"
  },
  {
    "label": "PPIDTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PPIDTag"
  },
  {
    "label": "TimeoutTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeoutTag"
  },
  {
    "label": "IsUnorderedTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IsUnorderedTag"
  },
  {
    "label": "StreamPriorityTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamPriorityTag"
  },
  {
    "label": "DurationMs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DurationMs"
  },
  {
    "label": "DurationMsTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DurationMsTag"
  },
  {
    "label": "TimeMs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeMs"
  },
  {
    "label": "TimeMsTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeMsTag"
  },
  {
    "label": "MaxRetransmits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaxRetransmits"
  },
  {
    "label": "MaxRetransmitsTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaxRetransmitsTag"
  },
  {
    "label": "LifecycleId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LifecycleId"
  },
  {
    "label": "LifecycleIdTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LifecycleIdTag"
  },
  {
    "label": "DurationMs()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PUBLIC_TYPES_H_ # define NET_DCSCTP_PUBLIC_TYPES_H_ # include<cstdint> # include<limits> # include \" rtc_base / strong_alias . h \" namespace dcsctp { using StreamID = webrtc::StrongAlias<class StreamIDTag,uint16_t> ; using PPID = webrtc::StrongAlias<class PPIDTag,uint32_t> ; using TimeoutID = webrtc::StrongAlias<class TimeoutTag,uint64_t> ; using IsUnordered = webrtc::StrongAlias<class IsUnorderedTag,bool> ; using StreamPriority = webrtc::StrongAlias<class StreamPriorityTag,uint16_t> ; class DurationMs : public webrtc::StrongAlias<class DurationMsTag,int32_t> { public :)",
    "insertText": "DurationMs(const UnderlyingType& v) : webrtc::StrongAlias<class DurationMsTag, int32_t>(v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DurationMs&)",
    "insertText": "operator(DurationMs d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (value_ - = d . value_ ; return* this ; } template<T> DurationMs&)",
    "insertText": "operator(T factor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (value_* = factor ; return* this ; } } ; DurationMs)",
    "insertText": "operator(DurationMs lhs, DurationMs rhs)"
  },
  {
    "label": "TimeMs()",
    "kind": "Method",
    "detail": "Function (} class TimeMs : public webrtc::StrongAlias<class TimeMsTag,int64_t> { public :)",
    "insertText": "TimeMs(const UnderlyingType& v) : webrtc::StrongAlias<class TimeMsTag, int64_t>(v)"
  },
  {
    "label": "InfiniteFuture()",
    "kind": "Method",
    "detail": "Function (value_ - =* d ; return* this ; } TimeMs)",
    "insertText": "InfiniteFuture()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; TimeMs)",
    "insertText": "operator(TimeMs lhs, DurationMs rhs)"
  },
  {
    "label": "MaxRetransmits()",
    "kind": "Method",
    "detail": "Function (} class MaxRetransmits : public webrtc::StrongAlias<class MaxRetransmitsTag,uint16_t> { public :)",
    "insertText": "MaxRetransmits(const UnderlyingType& v) : webrtc::StrongAlias<class MaxRetransmitsTag, uint16_t>(v)"
  },
  {
    "label": "NoLimit()",
    "kind": "Method",
    "detail": "Function (} MaxRetransmits)",
    "insertText": "NoLimit()"
  },
  {
    "label": "LifecycleId()",
    "kind": "Method",
    "detail": "Function (} } ; class LifecycleId : public webrtc::StrongAlias<class LifecycleIdTag,uint64_t> { public :)",
    "insertText": "LifecycleId(const UnderlyingType& v) : webrtc::StrongAlias<class LifecycleIdTag, uint64_t>(v)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  }
]