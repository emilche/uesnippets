[
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_MATH_QUANTIZED_UNIT_VEC_HAS_BEEN_INCLUDED # define OPENVDB_MATH_QUANTIZED_UNIT_VEC_HAS_BEEN_INCLUDED # include<openvdb / Platform . h> # include<openvdb / version . h> # include \" Vec3 . h \" namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace math { class QuantizedUnitVec { public : template<T> uint16_t)",
    "insertText": "pack(const Vec3<T>& vec)"
  },
  {
    "label": "unpack()",
    "kind": "Method",
    "detail": "Function (Vec3s)",
    "insertText": "unpack(const uint16_t data)"
  },
  {
    "label": "flipSignBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flipSignBits(uint16_t&)"
  },
  {
    "label": "QuantizedUnitVec()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "QuantizedUnitVec()"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (uint16_t data = 0 ; T)",
    "insertText": "x(vec[0]), y(vec[1]), z(vec[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data | = MASK_XSIGN ; x = - x ; })",
    "insertText": "if(y < T(0.0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data | = MASK_YSIGN ; y = - y ; })",
    "insertText": "if(z < T(0.0))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (data | = MASK_ZSIGN ; z = - z ; } T w =)",
    "insertText": "T(126.0) / (x + y + z)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (uint16_t xbits = static_cast<)",
    "insertText": "uint16_t((x * w))"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (uint16_t ybits = static_cast<)",
    "insertText": "uint16_t((y * w))"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (xbits = static_cast<)",
    "insertText": "uint16_t(127 - xbits)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (ybits = static_cast<)",
    "insertText": "uint16_t(127 - ybits)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (} data = static_cast<)",
    "insertText": "uint16_t(data | (xbits << 7))"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (data = static_cast<)",
    "insertText": "uint16_t(data | ybits)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (const float w = sNormalizationWeights [ data& MASK_SLOTS ] ; uint16_t xbits = static_cast<)",
    "insertText": "uint16_t((data & MASK_XSLOT) >> 7)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (uint16_t ybits = static_cast<)",
    "insertText": "uint16_t(data & MASK_YSLOT)"
  },
  {
    "label": "vec()",
    "kind": "Method",
    "detail": "Function (} Vec3s)",
    "insertText": "vec(float(xbits) * w, float(ybits) * w, float(126 - xbits - ybits) * w)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (v = static_cast<)",
    "insertText": "uint16_t((v & MASK_SLOTS) | (~v & ~MASK_SLOTS))"
  }
]