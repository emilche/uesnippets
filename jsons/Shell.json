[
  {
    "label": "FBody",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBody"
  },
  {
    "label": "FCADKernelArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCADKernelArchive"
  },
  {
    "label": "FDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatabase"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FTopologyReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologyReport"
  },
  {
    "label": "FFaceSubset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFaceSubset"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "UnlinkFromOther()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / CADEntity . h \" # include \" Core / HaveStates . h \" # include \" Core / MetadataDictionary . h \" # include \" Core / OrientedEntity . h \" # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Topo / TopologicalFace . h \" # include \" Topo / TopologicalShapeEntity . h \" namespace UE::CADKernel { class FBody ; class FCADKernelArchive ; class FDatabase ; class FTopologicalFace ; class FTopologyReport ; struct FFaceSubset ; namespace ShellTools { void)",
    "insertText": "UnlinkFromOther(TArray<FTopologicalFace*>& Faces, TArray<FTopologicalVertex*>& VerticesToLink)"
  },
  {
    "label": "FOrientedFace()",
    "kind": "Method",
    "detail": "Function (} class FOrientedFace : public TOrientedEntity<FTopologicalFace> { public :)",
    "insertText": "FOrientedFace(TSharedPtr<FTopologicalFace>& InEntity, EOrientation InOrientation) : TOrientedEntity(InEntity, InOrientation)"
  },
  {
    "label": "FOrientedFace()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOrientedFace() : TOrientedEntity()"
  },
  {
    "label": "FShell()",
    "kind": "Method",
    "detail": "Function (} } ; class FShell : public FTopologicalShapeEntity { class FEntity ; private : TArray<FOrientedFace> TopologicalFaces ;)",
    "insertText": "FShell()"
  },
  {
    "label": "FShell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShell(const TArray<FOrientedFace> InTopologicalFaces, bool bIsInnerShell = false) : FTopologicalShapeEntity() , TopologicalFaces(InTopologicalFaces)"
  },
  {
    "label": "SetInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInner()"
  },
  {
    "label": "FShell()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FShell(const TArray<TSharedPtr<FTopologicalFace>>& InTopologicalFaces, bool bIsInnerShell = true)"
  },
  {
    "label": "FShell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShell(const TArray<TSharedPtr<FTopologicalFace>>& InTopologicalFaces, const TArray<EOrientation>& InOrientations, bool bIsInnerShell = true)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, (TArray<TOrientedEntity<FEntity>>&) TopologicalFaces)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities((TArray<TOrientedEntity<FEntity>>&) TopologicalFaces)"
  },
  {
    "label": "RemoveFaces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFaces()"
  },
  {
    "label": "RemoveDeletedOrDegeneratedFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeletedOrDegeneratedFaces()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TSharedRef<FTopologicalFace> InTopologicalFace, EOrientation InOrientation)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TArray<FTopologicalFace*>& Faces)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (# endif EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "ReplaceFaces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceFaces(TArray<FOrientedFace>& NewFaces)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(TopologicalFaces, NewFaces)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NewFaces .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFaces()",
    "kind": "Method",
    "detail": "Function (} const TArray<FOrientedFace>&)",
    "insertText": "GetFaces()"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(TSharedPtr<FShell>& Shell)"
  },
  {
    "label": "PropagateBodyOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateBodyOrientation()"
  },
  {
    "label": "CompleteMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteMetaData()"
  },
  {
    "label": "UpdateShellOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShellOrientation()"
  },
  {
    "label": "CheckTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckTopology(TArray<FFaceSubset>& Subshells)"
  },
  {
    "label": "UnlinkFromOther()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkFromOther(TArray<FTopologicalVertex*>& OutVerticesToLink)"
  },
  {
    "label": "GetFaces()",
    "kind": "Method",
    "detail": "Function (TArray<FTopologicalFace*> Faces ;)",
    "insertText": "GetFaces(Faces)"
  },
  {
    "label": "UnlinkFromOther()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkFromOther(Faces, OutVerticesToLink)"
  },
  {
    "label": "FillTopologyReport()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV void)",
    "insertText": "FillTopologyReport(FTopologyReport& Report)"
  },
  {
    "label": "IsOpenShell()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsOpenShell()"
  },
  {
    "label": "IsInner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInner()"
  },
  {
    "label": "IsOuter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOuter()"
  },
  {
    "label": "SetOuter()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::IsInner ; } void)",
    "insertText": "SetOuter()"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::IsInner ; } int32)",
    "insertText": "Orient()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FTopologicalShapeEntity*)"
  }
]