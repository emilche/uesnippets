[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "ConvertibleToStringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConvertibleToStringView"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "SplitIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SplitIterator"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "HasMappedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasMappedType"
  },
  {
    "label": "HasMappedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasMappedType"
  },
  {
    "label": "HasValueType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasValueType"
  },
  {
    "label": "HasValueType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasValueType"
  },
  {
    "label": "HasConstIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasConstIterator"
  },
  {
    "label": "HasConstIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasConstIterator"
  },
  {
    "label": "HasEmplace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasEmplace"
  },
  {
    "label": "HasEmplace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasEmplace"
  },
  {
    "label": "IsInitializerList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsInitializerList"
  },
  {
    "label": "SplitterIsConvertibleToImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplitterIsConvertibleToImpl"
  },
  {
    "label": "SplitterIsConvertibleToImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplitterIsConvertibleToImpl"
  },
  {
    "label": "SplitterIsConvertibleToImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplitterIsConvertibleToImpl"
  },
  {
    "label": "SplitterIsConvertibleTo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplitterIsConvertibleTo"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "may",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "may"
  },
  {
    "label": "Splitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Splitter"
  },
  {
    "label": "ConvertToContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertToContainer"
  },
  {
    "label": "ConvertToContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertToContainer"
  },
  {
    "label": "raw_view",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "raw_view"
  },
  {
    "label": "ConvertToContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertToContainer"
  },
  {
    "label": "ConvertToContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertToContainer"
  },
  {
    "label": "old()",
    "kind": "Method",
    "detail": "Function (SplitIterator)",
    "insertText": "old(*this)"
  },
  {
    "label": "IsInitializerListDispatch()",
    "kind": "Method",
    "detail": "Function (std::false_type)",
    "insertText": "IsInitializerListDispatch(...)"
  },
  {
    "label": "IsInitializerListDispatch()",
    "kind": "Method",
    "detail": "Function (std::true_type)",
    "insertText": "IsInitializerListDispatch(std::initializer_list<T>*)"
  }
]