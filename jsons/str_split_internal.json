[
  {
    "label": "ConvertibleToStringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConvertibleToStringView"
  },
  {
    "label": "SplitIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SplitIterator"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "HasMappedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasMappedType"
  },
  {
    "label": "HasValueType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasValueType"
  },
  {
    "label": "HasConstIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasConstIterator"
  },
  {
    "label": "HasEmplace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasEmplace"
  },
  {
    "label": "IsInitializerList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsInitializerList"
  },
  {
    "label": "SplitterIsConvertibleToImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplitterIsConvertibleToImpl"
  },
  {
    "label": "SplitterIsConvertibleTo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplitterIsConvertibleTo"
  },
  {
    "label": "Splitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Splitter"
  },
  {
    "label": "ConvertToContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertToContainer"
  },
  {
    "label": "raw_view",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "raw_view"
  },
  {
    "label": "ConvertibleToStringView()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STR_SPLIT_INTERNAL_H_ # define ABSL_STRINGS_INTERNAL_STR_SPLIT_INTERNAL_H_ # include<array> # include<initializer_list> # include<iterator> # include<tuple> # include<type_traits> # include<utility> # include<vector> # include \" absl / base / macros . h \" # include \" absl / base / port . h \" # include \" absl / meta / type_traits . h \" # include \" absl / strings / string_view . h \" # ifdef _GLIBCXX_DEBUG # include \" absl / strings / internal / stl_type_traits . h \" # endif namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { class ConvertibleToStringView { public :)",
    "insertText": "ConvertibleToStringView(const char* s) : value_(s)"
  },
  {
    "label": "ConvertibleToStringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConvertibleToStringView(char* s) : value_(s)"
  },
  {
    "label": "ConvertibleToStringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConvertibleToStringView(absl::string_view s) : value_(s)"
  },
  {
    "label": "ConvertibleToStringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConvertibleToStringView(const std::string& s) : value_(s)"
  },
  {
    "label": "ConvertibleToStringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConvertibleToStringView(std::string&& s)"
  },
  {
    "label": "ConvertibleToStringView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertibleToStringView(const std::string&& s)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "value()"
  },
  {
    "label": "text()",
    "kind": "Method",
    "detail": "Function (state_ = kEndState ; pos_ = splitter_ ->)",
    "insertText": "text().size()"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)"
  },
  {
    "label": "at_end()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "at_end()"
  },
  {
    "label": "text()",
    "kind": "Method",
    "detail": "Function (state_ = kEndState ; return* this ; } const absl::string_view text = splitter_ ->)",
    "insertText": "text()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const absl::string_view d = delimiter_ .)",
    "insertText": "Find(text, pos_)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (curr_ = text .)",
    "insertText": "substr(pos_, static_cast<size_t>(d.data() - (text.data() + pos_)))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (pos_ + = curr_ .)",
    "insertText": "size() + d.size()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!predicate_(curr_))"
  },
  {
    "label": "old()",
    "kind": "Method",
    "detail": "Function (SplitIterator)",
    "insertText": "old(*this)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} private : size_t pos_ ; State state_ ; absl::string_view curr_ ; const Splitter* splitter_ ; Splitter::DelimiterType delimiter_ ; Splitter::PredicateType predicate_ ; } ; template<T,= void> struct HasMappedType : std::false_type { } ; template<T> struct HasMappedType<T,absl::void_t<T::mapped_type>> : std::true_type { } ; template<T,= void> struct HasValueType : std::false_type { } ; template<T> struct HasValueType<T,absl::void_t<T::value_type>> : std::true_type { } ; template<T,= void> struct HasConstIterator : std::false_type { } ; template<T> struct HasConstIterator<T,absl::void_t<T::const_iterator>> : std::true_type { } ; template<T,= void> struct HasEmplace : std::false_type { } ; template<T> struct HasEmplace<T,absl::void_t<)",
    "insertText": "decltype(std::declval<T>().emplace())"
  },
  {
    "label": "IsInitializerListDispatch()",
    "kind": "Method",
    "detail": "Function (} ; std::false_type)",
    "insertText": "IsInitializerListDispatch(...)"
  },
  {
    "label": "IsInitializerListDispatch()",
    "kind": "Method",
    "detail": "Function (template<T> std::true_type)",
    "insertText": "IsInitializerListDispatch(std::initializer_list<T>*)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<T> struct IsInitializerList :)",
    "insertText": "decltype(IsInitializerListDispatch(static_cast<T*>(nullptr)))"
  },
  {
    "label": "Splitter()",
    "kind": "Method",
    "detail": "Function (} ; template<C,bool has_value_type,bool has_mapped_type> struct SplitterIsConvertibleToImpl : std::false_type { } ; template<C> struct SplitterIsConvertibleToImpl<C,true,false> : std::is_constructible<C::value_type,absl::string_view> { } ; template<C> struct SplitterIsConvertibleToImpl<C,true,true> : absl::conjunction<std::is_constructible<C::key_type,absl::string_view>,std::is_constructible<C::mapped_type,absl::string_view>> { } ; template<C> struct SplitterIsConvertibleTo : SplitterIsConvertibleToImpl<C,# ifdef _GLIBCXX_DEBUG ! IsStrictlyBaseOfAndConvertibleToSTLContainer<C>::value&& # endif ! IsInitializerList<std::remove_reference<C>::type>::value&& HasValueType<C>::value&& HasConstIterator<C>::value,HasMappedType<C>::value> { } ; template<Delimiter,Predicate,StringType> class Splitter { public : using DelimiterType = Delimiter ; using PredicateType = Predicate ; using const_iterator = strings_internal::SplitIterator<Splitter> ; using value_type = std::iterator_traits<const_iterator>::value_type ;)",
    "insertText": "Splitter(StringType input_text, Delimiter d, Predicate p) : text_(std::move(input_text)), delimiter_(std::move(d)), predicate_(std::move(p))"
  },
  {
    "label": "Second()",
    "kind": "Method",
    "detail": "Function (} template<First,Second> operator std::pair<First,)",
    "insertText": "Second()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (absl::string_view first,second ; auto it =)",
    "insertText": "begin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (first =* it ;)",
    "insertText": "if(++it != end())"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (second =* it ; } } return {)",
    "insertText": "First(first), Second(second)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : template<Container,ValueType,bool is_map = false> struct ConvertToContainer { Container)",
    "insertText": "operator()(const Splitter& splitter)"
  },
  {
    "label": "inserter()",
    "kind": "Method",
    "detail": "Function (Container c ; auto it =)",
    "insertText": "inserter(c, c.end())"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (* it + + =)",
    "insertText": "ValueType(sp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return c ; } } ; template<A> struct ConvertToContainer<std::vector<absl::string_view,A>,absl::string_view,false> { std::vector<absl::string_view,A>)",
    "insertText": "operator()( const Splitter& splitter)"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (struct raw_view { const char* data ; size_t size ; operator)",
    "insertText": "string_view()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (size_t index = 0 ; do { ar [ index ] . data = it ->)",
    "insertText": "data()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (ar [ index ] . size = it ->)",
    "insertText": "size()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + it ; })",
    "insertText": "while(++index != ar.size() && !it.at_end())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "insert(v.end(), ar.begin(), ar.begin() + index)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (const std::vector<absl::string_view> v = splitter ; return std::vector<std::string,)",
    "insertText": "A(v.begin(), v.end())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Container m ; iterator it ; bool insert = true ;)",
    "insertText": "for(const absl::string_view sv : splitter)"
  },
  {
    "label": "InsertOrEmplace()",
    "kind": "Method",
    "detail": "Function (it =)",
    "insertText": "InsertOrEmplace(&m, sv)"
  },
  {
    "label": "Second()",
    "kind": "Method",
    "detail": "Function (} else { it -> second =)",
    "insertText": "Second(sv)"
  },
  {
    "label": "InsertOrEmplace()",
    "kind": "Method",
    "detail": "Function (} insert = ! insert ; } return m ; } template<M> absl::enable_if_t<HasEmplace<M>::value,iterator>)",
    "insertText": "InsertOrEmplace(M* m, absl::string_view key)"
  },
  {
    "label": "ToIter()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "ToIter(std::pair<iterator, bool> pair)"
  }
]