[
  {
    "label": "FNavMeshNodeFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshNodeFlags"
  },
  {
    "label": "FNavMeshPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshPath"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FNavMeshNodeFlags()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" NavigationPath . h \" # define RECAST_STRAIGHTPATH_OFFMESH_CONNECTION 0 x04 struct FNavMeshNodeFlags { uint8 PathFlags ; uint8 Area ; uint16 AreaFlags ;)",
    "insertText": "FNavMeshNodeFlags() : PathFlags(0), Area(0), AreaFlags(0)"
  },
  {
    "label": "FNavMeshNodeFlags()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavMeshNodeFlags(const uint32 Flags) : PathFlags((uint8)Flags), Area((uint8)(Flags >> 8)), AreaFlags((uint16)(Flags >> 16))"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Pack()"
  },
  {
    "label": "IsNavLink()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNavLink()"
  },
  {
    "label": "AddAreaFlags()",
    "kind": "Method",
    "detail": "Function (} FNavMeshNodeFlags&)",
    "insertText": "AddAreaFlags(const uint16 InAreaFlags)"
  },
  {
    "label": "AreaFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AreaFlags(AreaFlags | InAreaFlags)"
  },
  {
    "label": "FNavMeshPath()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNavMeshPath()"
  },
  {
    "label": "FNavMeshPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavMeshPath(const FNavMeshPath&)"
  },
  {
    "label": "FNavMeshPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavMeshPath(FNavMeshPath&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavMeshPath&)",
    "insertText": "operator(const FNavMeshPath& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavMeshPath&)",
    "insertText": "operator(FNavMeshPath&& Other)"
  },
  {
    "label": "WantsStringPulling()",
    "kind": "Method",
    "detail": "Function (bWantsStringPulling = bNewWantsStringPulling ; } bool)",
    "insertText": "WantsStringPulling()"
  },
  {
    "label": "WantsPathCorridor()",
    "kind": "Method",
    "detail": "Function (bWantsPathCorridor = bNewWantsPathCorridor ; } bool)",
    "insertText": "WantsPathCorridor()"
  },
  {
    "label": "SetPathCorridorEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPathCorridorEdges(const TArray<FNavigationPortalEdge>& InPathCorridorEdges)"
  },
  {
    "label": "OnPathCorridorUpdated()",
    "kind": "Method",
    "detail": "Function (PathCorridorEdges = InPathCorridorEdges ; bCorridorEdgesGenerated = true ; } void)",
    "insertText": "OnPathCorridorUpdated()"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (bCorridorEdgesGenerated = false ; } void)",
    "insertText": "DebugDraw(const ANavigationData* NavData, const FColor PathColor, UCanvas* Canvas, const bool bPersistent, const float LifeTime, const uint32 NextPathPointIndex = 0)"
  },
  {
    "label": "ContainsWithSameEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsWithSameEnd(const FNavMeshPath* Other)"
  },
  {
    "label": "OffsetFromCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetFromCorners(FVector::FReal Distance)"
  },
  {
    "label": "ApplyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFlags(int32 NavDataFlags)"
  },
  {
    "label": "ResetForRepath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForRepath()"
  },
  {
    "label": "GetNodeFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNodeFlags(int32 NodeIdx, FNavMeshNodeFlags& Flags)"
  },
  {
    "label": "GetCostFromNode()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetCostFromNode(NavNodeRef PathNode)"
  },
  {
    "label": "GetCostFromIndex()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "GetCostFromIndex(int32 PathPointIndex)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (FVector::FReal TotalCost = 0 . f ; const FVector::FReal* Cost = PathCorridorCost .)",
    "insertText": "GetData()"
  },
  {
    "label": "GetTotalPathLength()",
    "kind": "Method",
    "detail": "Function (TotalCost + =* Cost ; } return TotalCost ; } FVector::FReal)",
    "insertText": "GetTotalPathLength()"
  },
  {
    "label": "GetNodeRefIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNodeRefIndex(const NavNodeRef NodeRef)"
  },
  {
    "label": "ContainsNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsNode(NavNodeRef NodeRef)"
  },
  {
    "label": "ContainsCustomLink()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsCustomLink(FNavLinkId UniqueLinkId)"
  },
  {
    "label": "ContainsAnyCustomLink()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsAnyCustomLink()"
  },
  {
    "label": "IsPathSegmentANavLink()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPathSegmentANavLink(const int32 PathSegmentStartIndex)"
  },
  {
    "label": "DoesIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesIntersectBox(const FBox& Box, uint32 StartingIndex = 0, int32* IntersectingSegmentIndex = NULL, FVector* AgentExtent = NULL)"
  },
  {
    "label": "DoesIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesIntersectBox(const FBox& Box, const FVector& AgentLocation, uint32 StartingIndex = 0, int32* IntersectingSegmentIndex = NULL, FVector* AgentExtent = NULL)"
  },
  {
    "label": "GetSegmentDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetSegmentDirection(uint32 SegmentEndIndex)"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invert()"
  },
  {
    "label": "DoesPathIntersectBoxImplementation()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "DoesPathIntersectBoxImplementation(const FBox& Box, const FVector& StartLocation, uint32 StartingIndex, int32* IntersectingSegmentIndex, FVector* AgentExtent)"
  },
  {
    "label": "InternalResetNavMeshPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalResetNavMeshPath()"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (public : # if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetStringPulledLength()",
    "kind": "Method",
    "detail": "Function (# endif protected : FVector::FReal)",
    "insertText": "GetStringPulledLength(const int32 StartingPoint)"
  },
  {
    "label": "GetPathCorridorLength()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetPathCorridorLength(const int32 StartingEdge)"
  },
  {
    "label": "GeneratePathCorridorEdges()",
    "kind": "Method",
    "detail": "Function (const TArray<FNavigationPortalEdge>&)",
    "insertText": "GeneratePathCorridorEdges()"
  }
]