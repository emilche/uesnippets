[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstIterator"
  },
  {
    "label": "FrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameBuffer"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_FRAME_BUFFER_H # define INCLUDED_IMF_FRAME_BUFFER_H # include \" ImfForward . h \" # include \" ImfName . h \" # include \" ImfPixelType . h \" # include<ImathBox . h> # include<cstdint> # include<map> # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER struct IMF_EXPORT_TYPE Slice { PixelType type ; char* base ; size_t xStride ; size_t yStride ; int xSampling ; int ySampling ; double fillValue ; bool xTileCoords ; bool yTileCoords ; IMF_EXPORT)",
    "insertText": "Slice(PixelType type = HALF, char* base = 0, size_t xStride = 0, size_t yStride = 0, int xSampling = 1, int ySampling = 1, double fillValue = 0.0, bool xTileCoords = false, bool yTileCoords = false)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Slice)",
    "insertText": "Make(PixelType type, const void* ptr, const IMATH_NAMESPACE::V2i& origin, int64_t w, int64_t h, size_t xStride = 0, size_t yStride = 0, int xSampling = 1, int ySampling = 1, double fillValue = 0.0, bool xTileCoords = false, bool yTileCoords = false)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Slice)",
    "insertText": "Make(PixelType type, const void* ptr, const IMATH_NAMESPACE::Box2i& dataWindow, size_t xStride = 0, size_t yStride = 0, int xSampling = 1, int ySampling = 1, double fillValue = 0.0, bool xTileCoords = false, bool yTileCoords = false)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} ; class IMF_EXPORT_TYPE FrameBuffer { public : IMF_EXPORT void)",
    "insertText": "insert(const char name[], const Slice& slice)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "insert(const std::string& name, const Slice& slice)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Slice&)",
    "insertText": "operator(const char name[])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Slice&)",
    "insertText": "operator(const std::string& name)"
  },
  {
    "label": "findSlice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Slice*)",
    "insertText": "findSlice(const char name[])"
  },
  {
    "label": "findSlice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Slice*)",
    "insertText": "findSlice(const std::string& name)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef std::map<Name,Slice> SliceMap ; class Iterator ; class ConstIterator ; IMF_EXPORT Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "find(const char name[])"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "find(const std::string& name)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (private : SliceMap _map ; } ; class IMF_EXPORT_TYPE FrameBuffer::Iterator { public : IMF_EXPORT)",
    "insertText": "Iterator()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Iterator(const FrameBuffer::SliceMap::iterator& i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "name()"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Slice&)",
    "insertText": "slice()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (private : class FrameBuffer::ConstIterator ; FrameBuffer::SliceMap::iterator _i ; } ; class IMF_EXPORT_TYPE FrameBuffer::ConstIterator { public : IMF_EXPORT)",
    "insertText": "ConstIterator()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const FrameBuffer::SliceMap::const_iterator& i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const FrameBuffer::Iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "operator(const ConstIterator&, const ConstIterator&)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (FrameBuffer::SliceMap::const_iterator _i ; } ; FrameBuffer::)",
    "insertText": "Iterator() : _i ()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} FrameBuffer::)",
    "insertText": "Iterator(const FrameBuffer::SliceMap::iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} FrameBuffer::)",
    "insertText": "ConstIterator(const FrameBuffer::SliceMap::const_iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} FrameBuffer::)",
    "insertText": "ConstIterator(const FrameBuffer::Iterator& other) : _i (other._i)"
  }
]