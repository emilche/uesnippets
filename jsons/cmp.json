[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_IsSameAsAny",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_IsSameAsAny"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___UTILITY_CMP_H # define _LIBCPP___UTILITY_CMP_H # include<__config> # include<__utility / forward . h> # include<__utility / move . h> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "cmp_equal()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> concept __is_safe_integral_cmp = is_integral_v<_Tp>&& ! _IsSameAsAny<_Tp,bool,char,char16_t,char32_t # ifndef _LIBCPP_HAS_NO_CHAR8_T,char8_t # endif # ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS,wchar_t # endif>::value ; template<__is_safe_integral_cmp _Tp,__is_safe_integral_cmp _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "cmp_equal(_Tp __t, _Up __u)"
  },
  {
    "label": "cmp_not_equal()",
    "kind": "Method",
    "detail": "Function (} template<__is_safe_integral_cmp _Tp,__is_safe_integral_cmp _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "cmp_not_equal(_Tp __t, _Up __u)"
  },
  {
    "label": "cmp_less()",
    "kind": "Method",
    "detail": "Function (} template<__is_safe_integral_cmp _Tp,__is_safe_integral_cmp _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "cmp_less(_Tp __t, _Up __u)"
  },
  {
    "label": "cmp_greater()",
    "kind": "Method",
    "detail": "Function (} template<__is_safe_integral_cmp _Tp,__is_safe_integral_cmp _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "cmp_greater(_Tp __t, _Up __u)"
  },
  {
    "label": "cmp_less_equal()",
    "kind": "Method",
    "detail": "Function (} template<__is_safe_integral_cmp _Tp,__is_safe_integral_cmp _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "cmp_less_equal(_Tp __t, _Up __u)"
  },
  {
    "label": "cmp_greater_equal()",
    "kind": "Method",
    "detail": "Function (} template<__is_safe_integral_cmp _Tp,__is_safe_integral_cmp _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "cmp_greater_equal(_Tp __t, _Up __u)"
  },
  {
    "label": "in_range()",
    "kind": "Method",
    "detail": "Function (} template<__is_safe_integral_cmp _Tp,__is_safe_integral_cmp _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "in_range(_Up __u)"
  }
]