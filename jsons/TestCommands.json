[
  {
    "label": "CQTEST_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CQTEST_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWaitUntil()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / AutomationTest . h \" class FWaitUntil : public IAutomationLatentCommand { public :)",
    "insertText": "FWaitUntil(FAutomationTestBase& InTestRunner, TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10), const TCHAR* InDescription = nullptr) : TestRunner(InTestRunner) , Query(MoveTemp(Query)) , Timeout(Timeout) , Description(InDescription)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Update()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (FAutomationTestBase& TestRunner ; TFunction<)",
    "insertText": "bool()"
  },
  {
    "label": "FWaitDelay()",
    "kind": "Method",
    "detail": "Function (FTimespan Timeout ; FDateTime StartTime ; const TCHAR* Description ; bool bHasTimerStarted = false ; } ; class FWaitDelay : public IAutomationLatentCommand { public :)",
    "insertText": "FWaitDelay(FAutomationTestBase& InTestRunner, FTimespan Timeout, const TCHAR* InDescription = nullptr) : TestRunner(InTestRunner) , Timeout(Timeout) , Description(InDescription)"
  },
  {
    "label": "FExecute()",
    "kind": "Method",
    "detail": "Function (FAutomationTestBase& TestRunner ; FTimespan Timeout ; FDateTime EndTime ; const TCHAR* Description ; bool bHasTimerStarted = false ; } ; enum class ECQTestFailureBehavior { Skip,Run } ; class FExecute : public IAutomationLatentCommand { public :)",
    "insertText": "FExecute(FAutomationTestBase& InTestRunner, TFunction<void()> Func, const TCHAR* InDescription = nullptr, ECQTestFailureBehavior InFailureBehavior = ECQTestFailureBehavior::Skip) : TestRunner(InTestRunner) , Func(MoveTemp(Func)) , Description(InDescription) , FailureBehavior(InFailureBehavior)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (FAutomationTestBase& TestRunner ; TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FRunSequence()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Description = nullptr ; ECQTestFailureBehavior FailureBehavior ; } ; class FRunSequence : public IAutomationLatentCommand { public :)",
    "insertText": "FRunSequence(const TArray<TSharedPtr<IAutomationLatentCommand>>& ToAdd) : Commands(ToAdd)"
  },
  {
    "label": "FRunSequence()",
    "kind": "Method",
    "detail": "Function (} template<class . . . Cmds>)",
    "insertText": "FRunSequence(Cmds... Commands) : FRunSequence(TArray<TSharedPtr<IAutomationLatentCommand>>{ Commands... })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(TSharedPtr<IAutomationLatentCommand> ToAdd)"
  },
  {
    "label": "AppendAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAll(TArray < TSharedPtr<IAutomationLatentCommand>> ToAdd)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepend(TSharedPtr<IAutomationLatentCommand> ToAdd)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  }
]