[
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Instruction"
  },
  {
    "label": "SizedInstruction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SizedInstruction"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<cinttypes> namespace Assembler { namespace Opcode { const uint8_t NOP1 [ 1 u ] ; const uint8_t NOP2 [ 2 u ] ; const uint8_t NOP3 [ 3 u ] ; const uint8_t NOP4 [ 4 u ] ; const uint8_t NOP5 [ 5 u ] ; const uint8_t NOP6 [ 6 u ] ; const uint8_t NOP7 [ 7 u ] ; const uint8_t NOP8 [ 8 u ] ; const uint8_t NOP9 [ 9 u ] ; const uint8_t NOP10 [ 1 0 u ] ; const uint8_t NOP11 [ 1 1 u ] ; const uint8_t NOP12 [ 1 2 u ] ; const uint8_t NOP13 [ 1 3 u ] ; const uint8_t NOP14 [ 1 4 u ] ; const uint8_t NOP15 [ 1 5 u ] ; const uint8_t RET [ 1 u ] ; const uint8_t JMP_REL8 [ 1 u ] ; const uint8_t JMP_REL32 [ 1 u ] ; const uint8_t JMP_INDIRECT_RIP32 [ 2 u ] ; const uint8_t CALL_INDIRECT_RIP32 [ 2 u ] ; const uint8_t MOV_RAX_TCB [ 9 u ] ; const uint8_t ADD_RAX_INDIRECT_RIP32 [ 3 u ] ; } namespace InstructionSize { enum Enum : uint8_t { NOP1 =)",
    "insertText": "sizeof(Opcode::NOP1), NOP2 = sizeof(Opcode::NOP2), NOP3 = sizeof(Opcode::NOP3), NOP4 = sizeof(Opcode::NOP4), NOP5 = sizeof(Opcode::NOP5), NOP6 = sizeof(Opcode::NOP6), NOP7 = sizeof(Opcode::NOP7), NOP8 = sizeof(Opcode::NOP8), NOP9 = sizeof(Opcode::NOP9), NOP10 = sizeof(Opcode::NOP10), NOP11 = sizeof(Opcode::NOP11), NOP12 = sizeof(Opcode::NOP12), NOP13 = sizeof(Opcode::NOP13), NOP14 = sizeof(Opcode::NOP14), NOP15 = sizeof(Opcode::NOP15), RET = sizeof(Opcode::RET), JMP_REL8 = sizeof(Opcode::JMP_REL8) + 1u, JMP_REL32 = sizeof(Opcode::JMP_REL32) + 4u, JMP_INDIRECT_RIP32 = sizeof(Opcode::JMP_INDIRECT_RIP32) + 4u, CALL_INDIRECT_RIP32 = sizeof(Opcode::CALL_INDIRECT_RIP32) + 4u, MOV_RAX_TCB = sizeof(Opcode::MOV_RAX_TCB), ADD_RAX_INDIRECT_RIP32 = sizeof(Opcode::ADD_RAX_INDIRECT_RIP32)"
  },
  {
    "label": "MakeNOP()",
    "kind": "Method",
    "detail": "Function (} struct Instruction { const unsigned int MAXIMUM_LENGTH = 1 5 u ; uint8_t size ; uint8_t machineCode [ MAXIMUM_LENGTH ] ; } ; template<uint8_t N> struct SizedInstruction { uint8_t machineCode [ N ] ; } ; Instruction)",
    "insertText": "MakeNOP(uint8_t size)"
  },
  {
    "label": "MakeRET()",
    "kind": "Method",
    "detail": "Function (SizedInstruction<InstructionSize::RET>)",
    "insertText": "MakeRET(void)"
  },
  {
    "label": "MakeJMP8Relative()",
    "kind": "Method",
    "detail": "Function (SizedInstruction<InstructionSize::JMP_REL8>)",
    "insertText": "MakeJMP8Relative(int8_t displacement)"
  },
  {
    "label": "MakeJMP32Relative()",
    "kind": "Method",
    "detail": "Function (SizedInstruction<InstructionSize::JMP_REL32>)",
    "insertText": "MakeJMP32Relative(int32_t displacement)"
  },
  {
    "label": "MakeJMP32IndirectRIPRelative()",
    "kind": "Method",
    "detail": "Function (SizedInstruction<InstructionSize::JMP_INDIRECT_RIP32>)",
    "insertText": "MakeJMP32IndirectRIPRelative(int32_t ripOffset)"
  },
  {
    "label": "MakeCALL32IndirectRIPRelative()",
    "kind": "Method",
    "detail": "Function (SizedInstruction<InstructionSize::CALL_INDIRECT_RIP32>)",
    "insertText": "MakeCALL32IndirectRIPRelative(int32_t ripOffset)"
  },
  {
    "label": "MakeMOVLoadTCB()",
    "kind": "Method",
    "detail": "Function (SizedInstruction<InstructionSize::MOV_RAX_TCB>)",
    "insertText": "MakeMOVLoadTCB(void)"
  },
  {
    "label": "MakeADD32IndirectRIPRelative()",
    "kind": "Method",
    "detail": "Function (SizedInstruction<InstructionSize::ADD_RAX_INDIRECT_RIP32>)",
    "insertText": "MakeADD32IndirectRIPRelative(int32_t ripOffset)"
  }
]