[
  {
    "label": "TRawMessageCatchall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRawMessageCatchall"
  },
  {
    "label": "TRawMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRawMessageHandler"
  },
  {
    "label": "FFunctionMessageCatchall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunctionMessageCatchall"
  },
  {
    "label": "TFunctionMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionMessageHandler"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IMessageContext . h \" # include \" IMessageHandler . h \" template<HandlerType> class TRawMessageCatchall : public IMessageHandler { public : typedef)",
    "insertText": "void(HandlerType::*FuncType)(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>&)"
  },
  {
    "label": "TRawMessageCatchall()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TRawMessageCatchall(HandlerType* InHandler, FuncType InFunc) : Handler(InHandler) , Func(InFunc)"
  },
  {
    "label": "TRawMessageCatchall()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TRawMessageCatchall()"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "HandleMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : HandlerType* Handler ; FuncType Func ; } ; template<MessageType,HandlerType> class TRawMessageHandler : public IMessageHandler { public : typedef)",
    "insertText": "void(HandlerType::*FuncType)(const MessageType&, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>&)"
  },
  {
    "label": "TRawMessageHandler()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TRawMessageHandler(HandlerType* InHandler, FuncType InFunc) : Handler(InHandler) , Func(InFunc)"
  },
  {
    "label": "TRawMessageHandler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TRawMessageHandler()"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (UStruct* Struct =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } private : HandlerType* Handler ; FuncType Func ; } ; class FFunctionMessageCatchall : public IMessageHandler { public : typedef TFunction<)",
    "insertText": "void(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>&)"
  },
  {
    "label": "FFunctionMessageCatchall()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FFunctionMessageCatchall(FuncType InFunc) : Func(MoveTemp(InFunc))"
  },
  {
    "label": "FFunctionMessageCatchall()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFunctionMessageCatchall()"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : FuncType Func ; } ; template<MessageType> class TFunctionMessageHandler : public IMessageHandler { public : typedef TFunction<)",
    "insertText": "void(const MessageType&, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>&)"
  },
  {
    "label": "TFunctionMessageHandler()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TFunctionMessageHandler(FuncType InFunc) : Func(MoveTemp(InFunc))"
  },
  {
    "label": "TFunctionMessageHandler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TFunctionMessageHandler()"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(*static_cast<const MessageType*>(Context->GetMessage()), Context)"
  }
]