[
  {
    "label": "FMetalRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRHICommandContext"
  },
  {
    "label": "FMetalEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalEventNode"
  },
  {
    "label": "FMetalEventNodeFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalEventNodeFrame"
  },
  {
    "label": "FMetalContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalContext"
  },
  {
    "label": "FMetalGPUTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalGPUTiming"
  },
  {
    "label": "IMetalStatsScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMetalStatsScope"
  },
  {
    "label": "FMetalCPUStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalCPUStats"
  },
  {
    "label": "FMetalDisplayStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalDisplayStats"
  },
  {
    "label": "EMTLFenceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMTLFenceType"
  },
  {
    "label": "FMetalCommandBufferStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalCommandBufferStats"
  },
  {
    "label": "FMetalCommandBufferTiming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalCommandBufferTiming"
  },
  {
    "label": "FMetalCommandBufferTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandBufferTimer"
  },
  {
    "label": "FMetalGPUProfiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalGPUProfiler"
  },
  {
    "label": "FMetalProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalProfiler"
  },
  {
    "label": "FScopedMetalCPUStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedMetalCPUStats"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" GPUProfiler . h \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FMetalCommandBufferCompletionHandler, MTL::CommandBuffer*)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"MakeDrawable time\"),STAT_MetalMakeDrawableTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Draw call time\"),STAT_MetalDrawCallTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PrepareDraw time\"),STAT_MetalPrepareDrawTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SwitchToNone time\"),STAT_MetalSwitchToNoneTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SwitchToRender time\"),STAT_MetalSwitchToRenderTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SwitchToCompute time\"),STAT_MetalSwitchToComputeTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SwitchToBlit time\"),STAT_MetalSwitchToBlitTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PrepareToRender time\"),STAT_MetalPrepareToRenderTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PrepareToDispatch time\"),STAT_MetalPrepareToDispatchTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CommitRenderResourceTables time\"),STAT_MetalCommitRenderResourceTablesTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SetRenderState time\"),STAT_MetalSetRenderStateTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SetRenderPipelineState time\"),STAT_MetalSetRenderPipelineStateTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PipelineState time\"),STAT_MetalPipelineStateTime,STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Buffer Page-Off time\"), STAT_MetalBufferPageOffTime, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Texture Page-Off time\"), STAT_MetalTexturePageOffTime, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Uniform Memory Allocated Per-Frame\"), STAT_MetalUniformMemAlloc, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Uniform Memory Freed Per-Frame\"), STAT_MetalUniformMemFreed, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Vertex Memory Allocated Per-Frame\"), STAT_MetalVertexMemAlloc, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Vertex Memory Freed Per-Frame\"), STAT_MetalVertexMemFreed, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Index Memory Allocated Per-Frame\"), STAT_MetalIndexMemAlloc, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Index Memory Freed Per-Frame\"), STAT_MetalIndexMemFreed, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Texture Memory Updated Per-Frame\"), STAT_MetalTextureMemUpdate, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Buffer Memory\"), STAT_MetalBufferMemory, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Texture Memory\"), STAT_MetalTextureMemory, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Heap Memory\"), STAT_MetalHeapMemory, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Unused Buffer Memory\"), STAT_MetalBufferUnusedMemory, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Unused Texture Memory\"), STAT_MetalTextureUnusedMemory, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Uniform Memory In Flight\"), STAT_MetalUniformMemoryInFlight, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Allocated Uniform Pool Memory\"), STAT_MetalUniformAllocatedMemory, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Uniform Memory Per Frame\"), STAT_MetalUniformBytesPerFrame, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Allocated Frame Temp Memory\"), STAT_MetalTempAllocatorAllocatedMemory, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Buffer Count\"), STAT_MetalBufferCount, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Texture Count\"), STAT_MetalTextureCount, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Heap Count\"), STAT_MetalHeapCount, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Fence Count\"), STAT_MetalFenceCount, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Texture Page-On time\"), STAT_MetalTexturePageOnTime, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"GPU Work time\"), STAT_MetalGPUWorkTime, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"GPU Idle time\"), STAT_MetalGPUIdleTime, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Present time\"), STAT_MetalPresentTime, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CustomPresent time\"), STAT_MetalCustomPresentTime, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# if STATS int64 volatile GMetalTexturePageOnTime ; int64 volatile GMetalGPUWorkTime ; int64 volatile GMetalGPUIdleTime ; int64 volatile GMetalPresentTime ; # endif)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Number Command Buffers Created Per-Frame\"), STAT_MetalCommandBufferCreatedPerFrame, STATGROUP_MetalRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Number Command Buffers Committed Per-Frame\"), STAT_MetalCommandBufferCommittedPerFrame, STATGROUP_MetalRHI,)"
  },
  {
    "label": "FMetalEventNode()",
    "kind": "Method",
    "detail": "Function (class FMetalRHICommandContext ; class FMetalEventNode : public FGPUProfilerEventNode { public :)",
    "insertText": "FMetalEventNode(FMetalRHICommandContext& InContext, const TCHAR* InName, FGPUProfilerEventNode* InParent, bool bIsRoot, bool bInFullProfiling) : FGPUProfilerEventNode(InName, InParent) , StartTime(0) , EndTime(0) , Context(InContext) , bRoot(bIsRoot) , bFullProfiling(bInFullProfiling)"
  },
  {
    "label": "FMetalEventNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMetalEventNode()"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTiming()"
  },
  {
    "label": "StartTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTiming()"
  },
  {
    "label": "StopTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTiming()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (FMetalCommandBufferCompletionHandler)",
    "insertText": "Start(void)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (FMetalCommandBufferCompletionHandler)",
    "insertText": "Stop(void)"
  },
  {
    "label": "IsRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRoot()"
  },
  {
    "label": "FMetalEventNodeFrame()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMetalEventNodeFrame()"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (delete RootNode ; RootNode = nullptr ; } void)",
    "insertText": "StartFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "GetRootTimingResults()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRootTimingResults()"
  },
  {
    "label": "LogDisjointQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogDisjointQuery()"
  },
  {
    "label": "FMetalGPUTiming()",
    "kind": "Method",
    "detail": "Function (FMetalEventNode* RootNode ; bool bFullProfiling ; } ; class FMetalContext ; class FMetalGPUTiming : public FGPUTiming { public :)",
    "insertText": "FMetalGPUTiming(FMetalRHICommandContext& Context)"
  },
  {
    "label": "StaticInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticInitialize((void*)&Context, PlatformStaticInitialize)"
  },
  {
    "label": "SetCalibrationTimestamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCalibrationTimestamp(uint64 GPU, uint64 CPU)"
  },
  {
    "label": "SetCalibrationTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCalibrationTimestamp({ GPU, CPU })"
  },
  {
    "label": "PlatformStaticInitialize()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "PlatformStaticInitialize(void* UserData)"
  },
  {
    "label": "IMetalStatsScope()",
    "kind": "Method",
    "detail": "Function (} ; struct IMetalStatsScope { FString Name ; FString Parent ; TArray<IMetalStatsScope*> Children ; uint64 CPUStartTime ; uint64 CPUEndTime ; uint64 GPUStartTime ; uint64 GPUEndTime ; uint64 CPUThreadIndex ; uint64 GPUThreadIndex ; ~)",
    "insertText": "IMetalStatsScope()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(MTLCommandBufferPtr& CommandBuffer)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End(MTLCommandBufferPtr& CommandBuffer)"
  },
  {
    "label": "GetJSONRepresentation()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetJSONRepresentation(uint32 PID)"
  },
  {
    "label": "FMetalCPUStats()",
    "kind": "Method",
    "detail": "Function (} ; struct FMetalCPUStats : public IMetalStatsScope {)",
    "insertText": "FMetalCPUStats(FString const& Name)"
  },
  {
    "label": "FMetalCPUStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalCPUStats()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End(void)"
  },
  {
    "label": "FMetalDisplayStats()",
    "kind": "Method",
    "detail": "Function (} ; struct FMetalDisplayStats : public IMetalStatsScope {)",
    "insertText": "FMetalDisplayStats(uint32 DisplayID, double OutputSeconds, double Duration)"
  },
  {
    "label": "FMetalDisplayStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalDisplayStats()"
  },
  {
    "label": "FMetalCommandBufferStats()",
    "kind": "Method",
    "detail": "Function (} ; enum EMTLFenceType { EMTLFenceTypeWait,EMTLFenceTypeUpdate,} ; struct FMetalCommandBufferStats : public IMetalStatsScope {)",
    "insertText": "FMetalCommandBufferStats(MTLCommandBufferPtr CommandBuffer, uint64 GPUThreadIndex)"
  },
  {
    "label": "FMetalCommandBufferStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalCommandBufferStats()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MTLCommandBufferPtr CmdBuffer ; } ; struct FMetalCommandBufferTiming { CFTimeInterval StartTime ; CFTimeInterval EndTime ; bool)",
    "insertText": "operator(const FMetalCommandBufferTiming& RHS)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&Mutex)"
  },
  {
    "label": "AddTiming()",
    "kind": "Method",
    "detail": "Function (Counter + + ; } void)",
    "insertText": "AddTiming(FMetalCommandBufferTiming Timing)"
  },
  {
    "label": "FrameEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameEnd()"
  },
  {
    "label": "RecordFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordFrame()"
  },
  {
    "label": "GetTimings()",
    "kind": "Method",
    "detail": "Function (const TArray<FMetalCommandBufferTiming>&)",
    "insertText": "GetTimings()"
  },
  {
    "label": "FMetalGPUProfiler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMetalGPUProfiler()"
  },
  {
    "label": "CreateEventNode()",
    "kind": "Method",
    "detail": "Function (} FGPUProfilerEventNode*)",
    "insertText": "CreateEventNode(const TCHAR* InName, FGPUProfilerEventNode* InParent)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "PushEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEvent(const TCHAR* Name, FColor Color)"
  },
  {
    "label": "PopEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopEvent()"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "RecordFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordFrame(FMetalCommandBufferTimer& Timer)"
  },
  {
    "label": "RecordPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordPresent(MTL::CommandBuffer* CommandBuffer)"
  },
  {
    "label": "ResetFrameBufferTimings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFrameBufferTimings()"
  },
  {
    "label": "GetFrameBufferTimer()",
    "kind": "Method",
    "detail": "Function (FMetalCommandBufferTimer&)",
    "insertText": "GetFrameBufferTimer()"
  },
  {
    "label": "FMetalProfiler()",
    "kind": "Method",
    "detail": "Function (FMetalGPUTiming TimingSupport ; FMetalRHICommandContext& Context ; FMetalCommandBufferTimer* Timer ; } ; class FMetalProfiler : public FMetalGPUProfiler { FMetalProfiler* Self ; public :)",
    "insertText": "FMetalProfiler(FMetalRHICommandContext& InContext)"
  },
  {
    "label": "FMetalProfiler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalProfiler()"
  },
  {
    "label": "CreateProfiler()",
    "kind": "Method",
    "detail": "Function (FMetalProfiler*)",
    "insertText": "CreateProfiler(FMetalRHICommandContext& InContext)"
  },
  {
    "label": "GetProfiler()",
    "kind": "Method",
    "detail": "Function (FMetalProfiler*)",
    "insertText": "GetProfiler()"
  },
  {
    "label": "DestroyProfiler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyProfiler()"
  },
  {
    "label": "BeginCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCapture(int InNumFramesToCapture = -1)"
  },
  {
    "label": "EndCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCapture()"
  },
  {
    "label": "TracingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TracingEnabled()"
  },
  {
    "label": "AddDisplayVBlank()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDisplayVBlank(uint32 DisplayID, double OutputSeconds, double OutputDuration)"
  },
  {
    "label": "EncodeDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeDraw(FMetalCommandBufferStats* CmdBufStats, char const* DrawCall, uint32 RHIPrimitives, uint32 RHIVertices, uint32 RHIInstances)"
  },
  {
    "label": "EncodeBlit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeBlit(FMetalCommandBufferStats* CmdBufStats, char const* DrawCall)"
  },
  {
    "label": "EncodeBlit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeBlit(FMetalCommandBufferStats* CmdBufStats, FString DrawCall)"
  },
  {
    "label": "EncodeDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeDispatch(FMetalCommandBufferStats* CmdBufStats, char const* DrawCall)"
  },
  {
    "label": "AddCPUStat()",
    "kind": "Method",
    "detail": "Function (FMetalCPUStats*)",
    "insertText": "AddCPUStat(FString const& Name)"
  },
  {
    "label": "AllocateCommandBuffer()",
    "kind": "Method",
    "detail": "Function (FMetalCommandBufferStats*)",
    "insertText": "AllocateCommandBuffer(MTLCommandBufferPtr CommandBuffer, uint64 GPUThreadIndex)"
  },
  {
    "label": "AddCommandBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommandBuffer(FMetalCommandBufferStats* CommandBuffer)"
  },
  {
    "label": "SaveTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveTrace()"
  },
  {
    "label": "FScopedMetalCPUStats()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection Mutex ; TArray<FMetalCommandBufferStats*> TracedBuffers ; TArray<FMetalDisplayStats*> DisplayStats ; TArray<FMetalCPUStats*> CPUStats ; int32 NumFramesToCapture ; int32 CaptureFrameNumber ; bool bRequestStartCapture ; bool bRequestStopCapture ; bool bEnabled ; } ; struct FScopedMetalCPUStats {)",
    "insertText": "FScopedMetalCPUStats(FString const& Name) : Stats(nullptr)"
  },
  {
    "label": "AddCPUStat()",
    "kind": "Method",
    "detail": "Function (Stats = Profiler ->)",
    "insertText": "AddCPUStat(Name)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (Stats ->)",
    "insertText": "Start()"
  },
  {
    "label": "FScopedMetalCPUStats()",
    "kind": "Method",
    "detail": "Function (} } } ~)",
    "insertText": "FScopedMetalCPUStats()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (Stats ->)",
    "insertText": "End()"
  }
]