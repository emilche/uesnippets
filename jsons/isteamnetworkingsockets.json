[
  {
    "label": "SteamNetAuthenticationStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetAuthenticationStatus_t"
  },
  {
    "label": "SteamNetworkingFakeIPResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingFakeIPResult_t"
  },
  {
    "label": "ISteamNetworkingConnectionSignaling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamNetworkingConnectionSignaling"
  },
  {
    "label": "ISteamNetworkingSignalingRecvContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamNetworkingSignalingRecvContext"
  },
  {
    "label": "ISteamNetworkingFakeUDPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamNetworkingFakeUDPPort"
  },
  {
    "label": "ISteamNetworkingSockets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamNetworkingSockets"
  },
  {
    "label": "SteamNetConnectionStatusChangedCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetConnectionStatusChangedCallback_t"
  },
  {
    "label": "CreateListenSocketIP()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMNETWORKINGSOCKETS # define ISTEAMNETWORKINGSOCKETS # pragma once # include \" steamnetworkingtypes . h \" # include \" steam_api_common . h \" struct SteamNetAuthenticationStatus_t ; struct SteamNetworkingFakeIPResult_t ; class ISteamNetworkingConnectionSignaling ; class ISteamNetworkingSignalingRecvContext ; class ISteamNetworkingFakeUDPPort ; class ISteamNetworkingSockets { public : HSteamListenSocket)",
    "insertText": "CreateListenSocketIP(const SteamNetworkingIPAddr &localAddress, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "ConnectByIPAddress()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "ConnectByIPAddress(const SteamNetworkingIPAddr &address, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "CreateListenSocketP2P()",
    "kind": "Method",
    "detail": "Function (HSteamListenSocket)",
    "insertText": "CreateListenSocketP2P(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "ConnectP2P()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "ConnectP2P(const SteamNetworkingIdentity &identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "AcceptConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "AcceptConnection(HSteamNetConnection hConn)"
  },
  {
    "label": "CloseConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseConnection(HSteamNetConnection hPeer, int nReason, const char *pszDebug, bool bEnableLinger)"
  },
  {
    "label": "CloseListenSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseListenSocket(HSteamListenSocket hSocket)"
  },
  {
    "label": "SetConnectionUserData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConnectionUserData(HSteamNetConnection hPeer, int64 nUserData)"
  },
  {
    "label": "GetConnectionUserData()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetConnectionUserData(HSteamNetConnection hPeer)"
  },
  {
    "label": "SetConnectionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnectionName(HSteamNetConnection hPeer, const char *pszName)"
  },
  {
    "label": "GetConnectionName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConnectionName(HSteamNetConnection hPeer, char *pszName, int nMaxLen)"
  },
  {
    "label": "SendMessageToConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "SendMessageToConnection(HSteamNetConnection hConn, const void *pData, uint32 cbData, int nSendFlags, int64 *pOutMessageNumber)"
  },
  {
    "label": "SendMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessages(int nMessages, SteamNetworkingMessage_t *const *pMessages, int64 *pOutMessageNumberOrResult)"
  },
  {
    "label": "FlushMessagesOnConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "FlushMessagesOnConnection(HSteamNetConnection hConn)"
  },
  {
    "label": "ReceiveMessagesOnConnection()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReceiveMessagesOnConnection(HSteamNetConnection hConn, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)"
  },
  {
    "label": "GetConnectionInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConnectionInfo(HSteamNetConnection hConn, SteamNetConnectionInfo_t *pInfo)"
  },
  {
    "label": "GetConnectionRealTimeStatus()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "GetConnectionRealTimeStatus(HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t *pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t *pLanes)"
  },
  {
    "label": "GetDetailedConnectionStatus()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDetailedConnectionStatus(HSteamNetConnection hConn, char *pszBuf, int cbBuf)"
  },
  {
    "label": "GetListenSocketAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetListenSocketAddress(HSteamListenSocket hSocket, SteamNetworkingIPAddr *address)"
  },
  {
    "label": "CreateSocketPair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateSocketPair(HSteamNetConnection *pOutConnection1, HSteamNetConnection *pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity *pIdentity1, const SteamNetworkingIdentity *pIdentity2)"
  },
  {
    "label": "ConfigureConnectionLanes()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "ConfigureConnectionLanes(HSteamNetConnection hConn, int nNumLanes, const int *pLanePriorities, const uint16 *pLaneWeights)"
  },
  {
    "label": "GetIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIdentity(SteamNetworkingIdentity *pIdentity)"
  },
  {
    "label": "InitAuthentication()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingAvailability)",
    "insertText": "InitAuthentication()"
  },
  {
    "label": "GetAuthenticationStatus()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingAvailability)",
    "insertText": "GetAuthenticationStatus(SteamNetAuthenticationStatus_t *pDetails)"
  },
  {
    "label": "CreatePollGroup()",
    "kind": "Method",
    "detail": "Function (HSteamNetPollGroup)",
    "insertText": "CreatePollGroup()"
  },
  {
    "label": "DestroyPollGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyPollGroup(HSteamNetPollGroup hPollGroup)"
  },
  {
    "label": "SetConnectionPollGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConnectionPollGroup(HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)"
  },
  {
    "label": "ReceiveMessagesOnPollGroup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReceiveMessagesOnPollGroup(HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)"
  },
  {
    "label": "ReceivedRelayAuthTicket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedRelayAuthTicket(const void *pvTicket, int cbTicket, SteamDatagramRelayAuthTicket *pOutParsedTicket)"
  },
  {
    "label": "FindRelayAuthTicketForServer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindRelayAuthTicketForServer(const SteamNetworkingIdentity &identityGameServer, int nRemoteVirtualPort, SteamDatagramRelayAuthTicket *pOutParsedTicket)"
  },
  {
    "label": "ConnectToHostedDedicatedServer()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "ConnectToHostedDedicatedServer(const SteamNetworkingIdentity &identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "GetHostedDedicatedServerPort()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetHostedDedicatedServerPort()"
  },
  {
    "label": "GetHostedDedicatedServerPOPID()",
    "kind": "Method",
    "detail": "Function (SteamNetworkingPOPID)",
    "insertText": "GetHostedDedicatedServerPOPID()"
  },
  {
    "label": "GetHostedDedicatedServerAddress()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "GetHostedDedicatedServerAddress(SteamDatagramHostedAddress *pRouting)"
  },
  {
    "label": "CreateHostedDedicatedServerListenSocket()",
    "kind": "Method",
    "detail": "Function (HSteamListenSocket)",
    "insertText": "CreateHostedDedicatedServerListenSocket(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "GetGameCoordinatorServerLogin()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "GetGameCoordinatorServerLogin(SteamDatagramGameCoordinatorServerLogin *pLoginInfo, int *pcbSignedBlob, void *pBlob)"
  },
  {
    "label": "ConnectP2PCustomSignaling()",
    "kind": "Method",
    "detail": "Function (HSteamNetConnection)",
    "insertText": "ConnectP2PCustomSignaling(ISteamNetworkingConnectionSignaling *pSignaling, const SteamNetworkingIdentity *pPeerIdentity, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "ReceivedP2PCustomSignal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedP2PCustomSignal(const void *pMsg, int cbMsg, ISteamNetworkingSignalingRecvContext *pContext)"
  },
  {
    "label": "GetCertificateRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCertificateRequest(int *pcbBlob, void *pBlob, SteamNetworkingErrMsg &errMsg)"
  },
  {
    "label": "SetCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCertificate(const void *pCertificate, int cbCertificate, SteamNetworkingErrMsg &errMsg)"
  },
  {
    "label": "ResetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIdentity(const SteamNetworkingIdentity *pIdentity)"
  },
  {
    "label": "RunCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCallbacks()"
  },
  {
    "label": "BeginAsyncRequestFakeIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginAsyncRequestFakeIP(int nNumPorts)"
  },
  {
    "label": "GetFakeIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFakeIP(int idxFirstPort, SteamNetworkingFakeIPResult_t *pInfo)"
  },
  {
    "label": "CreateListenSocketP2PFakeIP()",
    "kind": "Method",
    "detail": "Function (HSteamListenSocket)",
    "insertText": "CreateListenSocketP2PFakeIP(int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)"
  },
  {
    "label": "GetRemoteFakeIPForConnection()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "GetRemoteFakeIPForConnection(HSteamNetConnection hConn, SteamNetworkingIPAddr *pOutAddr)"
  },
  {
    "label": "CreateFakeUDPPort()",
    "kind": "Method",
    "detail": "Function (ISteamNetworkingFakeUDPPort*)",
    "insertText": "CreateFakeUDPPort(int idxFakeServerPort)"
  },
  {
    "label": "ISteamNetworkingSockets()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "ISteamNetworkingSockets()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMNETWORKINGSOCKETS_INTERFACE_VERSION \" SteamNetworkingSockets012 \" # ifdef STEAMNETWORKINGSOCKETS_STANDALONELIB)",
    "insertText": "static_assert(STEAMNETWORKINGSOCKETS_INTERFACE_VERSION[24] == '2', \"Version mismatch\")"
  },
  {
    "label": "SteamNetworkingSockets_LibV12()",
    "kind": "Method",
    "detail": "Function (STEAMNETWORKINGSOCKETS_INTERFACE ISteamNetworkingSockets*)",
    "insertText": "SteamNetworkingSockets_LibV12()"
  },
  {
    "label": "SteamNetworkingSockets_Lib()",
    "kind": "Method",
    "detail": "Function (ISteamNetworkingSockets*)",
    "insertText": "SteamNetworkingSockets_Lib()"
  },
  {
    "label": "SteamGameServerNetworkingSockets_LibV12()",
    "kind": "Method",
    "detail": "Function (} STEAMNETWORKINGSOCKETS_INTERFACE ISteamNetworkingSockets*)",
    "insertText": "SteamGameServerNetworkingSockets_LibV12()"
  },
  {
    "label": "SteamGameServerNetworkingSockets_Lib()",
    "kind": "Method",
    "detail": "Function (ISteamNetworkingSockets*)",
    "insertText": "SteamGameServerNetworkingSockets_Lib()"
  },
  {
    "label": "SteamNetworkingSockets()",
    "kind": "Method",
    "detail": "Function (} # ifndef STEAMNETWORKINGSOCKETS_STEAMAPI ISteamNetworkingSockets*)",
    "insertText": "SteamNetworkingSockets()"
  },
  {
    "label": "SteamGameServerNetworkingSockets()",
    "kind": "Method",
    "detail": "Function (} ISteamNetworkingSockets*)",
    "insertText": "SteamGameServerNetworkingSockets()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # ifdef STEAMNETWORKINGSOCKETS_STEAMAPI)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamNetworkingSockets *, SteamNetworkingSockets_SteamAPI, STEAMNETWORKINGSOCKETS_INTERFACE_VERSION)"
  },
  {
    "label": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR(ISteamNetworkingSockets *, SteamGameServerNetworkingSockets_SteamAPI, STEAMNETWORKINGSOCKETS_INTERFACE_VERSION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]