[
  {
    "label": "FGaussSeidelCorotatedConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGaussSeidelCorotatedConstraints"
  },
  {
    "label": "FGaussSeidelCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / NewtonCorotatedCache . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Deformable / GaussSeidelWeakConstraints . h \" namespace Chaos::Softs { template<T,ParticleType> class FGaussSeidelCorotatedConstraints : public FXPBDCorotatedConstraints<T,ParticleType> { typedef FXPBDCorotatedConstraints<T,ParticleType> Base ; using Base::MeshConstraints ; using Base::LambdaArray ; using Base::Measure ; using Base::DmInverse ; using Base::MuElementArray ; using Base::LambdaElementArray ; using Base::CorotatedParams ; using Base::F ; public :)",
    "insertText": "FGaussSeidelCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const TArray<T>& EMeshArray, const TArray<T>& NuMeshArray, TArray<T>&& AlphaJMeshArray, TArray<TArray<int32>>&& IncidentElementsIn, TArray<TArray<int32>>&& IncidentElementsLocalIn, const int32 ParticleStartIndexIn, const int32 ParticleEndIndexIn, const bool bDoQuasistaticsIn = false, const bool bDoSORIn = true, const T InOmegaSOR = (T)1.6, const FDeformableXPBDCorotatedParams& InParams = FDeformableXPBDCorotatedParams(), const T& NuMesh = (T).3, const bool bRecordMetricIn = false ) : Base(InParticles, InMesh, EMeshArray, NuMeshArray, MoveTemp(AlphaJMeshArray), InParams, NuMesh, bRecordMetricIn, false), IncidentElements(IncidentElementsIn), IncidentElementsLocal(IncidentElementsLocalIn), ParticleStartIndex(ParticleStartIndexIn), ParticleEndIndex(ParticleEndIndexIn), bDoQuasistatics(bDoQuasistaticsIn), bDoSOR(bDoSORIn), OmegaSOR(InOmegaSOR)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Base::LambdaArray .)",
    "insertText": "SetNum(0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Particle2Incident .)",
    "insertText": "Init(INDEX_NONE, ParticleEndIndexIn - ParticleStartIndexIn)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Particle2Incident [ i ] = i ; })",
    "insertText": "for(int32 e = 0; e < InMesh.Num(); e++)"
  },
  {
    "label": "DmInverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DmInverse(3 * 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(!bDoQuasistatics)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (xtilde .)",
    "insertText": "Init(TVector<T, 3>(T(0.)), ParticleEndIndex - ParticleStartIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDoSOR)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InitColor(InParticles)"
  },
  {
    "label": "InitializeCorotatedLambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCorotatedLambdas()"
  },
  {
    "label": "FGaussSeidelCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGaussSeidelCorotatedConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(ParticleType& Particles, const T Dt)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosGaussSeidelApply)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumBatch = ParticlesPerColor [ i ] .)",
    "insertText": "Num()"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (NumBatch + = 1 ; })",
    "insertText": "PhysicsParallelFor(NumBatch, [&](const int32 BatchIndex) { for (int32 BatchSubIndex = 0; BatchSubIndex < CorotatedParams.XPBDCorotatedBatchSize; BatchSubIndex++) { int32 TaskIndex = CorotatedParams.XPBDCorotatedBatchSize * BatchIndex + BatchSubIndex; if (TaskIndex < ParticlesPerColor[i].Num()) { int32 ParticleIndex = ParticlesPerColor[i][TaskIndex]; Chaos::TVector<T, 3> Dx = ComputeDeltax(ParticleIndex, Particle2Incident[ParticleIndex - ParticleStartIndex], Particles, Dt); Particles.P(ParticleIndex) += Dx; } } }, NumBatch < CorotatedParams.XPBDCorotatedBatchThreshold)"
  },
  {
    "label": "ApplySOR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ApplySOR(Particles, Dt)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (CurrentIt + = 1 ; } void)",
    "insertText": "Init(const T Dt, const ParticleType& Particles)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (xtilde [ i ] = Particles .)",
    "insertText": "X(ParticleStartIndex + i) + Dt * Particles.V(ParticleStartIndex + i)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } CurrentIt = 0 ; } void)",
    "insertText": "Init()"
  },
  {
    "label": "GetIncidentElements()",
    "kind": "Method",
    "detail": "Function (} TArray<TArray<int32>>&)",
    "insertText": "GetIncidentElements()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ParticlesPerColor =)",
    "insertText": "MoveTemp(InParticlesPerColor)"
  },
  {
    "label": "GetMeshArray()",
    "kind": "Method",
    "detail": "Function (} TArray<TArray<int32>>)",
    "insertText": "GetMeshArray()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> MeshArray ; MeshArray .)",
    "insertText": "SetNum(MeshConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (MeshArray [ i ] .)",
    "insertText": "SetNum(4)"
  },
  {
    "label": "ApplySOR()",
    "kind": "Method",
    "detail": "Function (MeshArray [ i ] [ ie ] = MeshConstraints [ i ] [ ie ] ; } } return MeshArray ; } void)",
    "insertText": "ApplySOR(ParticleType& Particles, const T Dt)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleEndIndex - ParticleStartIndex, [&](const int32 i) { int32 ParticleIndex = i + ParticleStartIndex; if (Particles.InvM(ParticleIndex) != T(0) && CurrentIt > 3) { Particles.P(ParticleIndex) = OmegaSOR * (Particles.P(ParticleIndex) - X_k_1[i]) + X_k_1[i]; } X_k_1[i] = X_k[i]; X_k[i] = Particles.P(ParticleIndex); }, ParticleEndIndex - ParticleStartIndex < 1000)"
  },
  {
    "label": "ComputePerParticleResidual()",
    "kind": "Method",
    "detail": "Function (} } Chaos::TVector<T,3>)",
    "insertText": "ComputePerParticleResidual(const int32 p, const int32 IncidentIndex, const ParticleType& Particles, const T Dt, const bool AddMass = true)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (Chaos::TVector<T,3>)",
    "insertText": "res(T(0))"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (res [ alpha ] = Particles .)",
    "insertText": "M(p) * (Particles.P(p)[alpha] - xtilde[p - ParticleStartIndex][alpha])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 j = 0; j < IncidentElements[IncidentIndex].Num(); j++)"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (int32 local_index = IncidentElementsLocal [ IncidentIndex ] [ j ] ; int32 e = IncidentElements [ IncidentIndex ] [ j ] ; Chaos::PMatrix<T,3,3> DmInvT =)",
    "insertText": "ElementDmInv(e).GetTransposed()"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> Fe =)",
    "insertText": "F(e, Particles)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3>)",
    "insertText": "P((T)0.)"
  },
  {
    "label": "ComputeStress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeStress(Fe, MuElementArray[e], LambdaElementArray[e], P)"
  },
  {
    "label": "dx()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> force_term = - Measure [ e ]* DmInvT* P ; Chaos::TVector<T,3>)",
    "insertText": "dx((T)0.)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (dx [ c ] + = force_term .)",
    "insertText": "GetAt(c, local_index - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int32 c = 0; c < 3; c++)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (dx [ c ] - = force_term .)",
    "insertText": "GetAt(c, h)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(int32 ll = 0; ll < 3; ll++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (dx [ ll ]* = Dt* Dt ; })",
    "insertText": "for(int32 alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "ComputePerParticleCorotatedHessianSimple()",
    "kind": "Method",
    "detail": "Function (res [ alpha ] - = dx [ alpha ] ; } } return res ; } Chaos::PMatrix<T,3,3>)",
    "insertText": "ComputePerParticleCorotatedHessianSimple(const int32 p, const int32 IncidentIndex, const ParticleType& Particles, const T Dt, const bool AddMass = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> final_hessian = Chaos::PMatrix<T,3,3>::Zero ;)",
    "insertText": "if(AddMass)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (final_hessian .)",
    "insertText": "SetAt(alpha, alpha, Particles.M(p))"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (int32 local_index = IncidentElementsLocal [ IncidentIndex ] [ j ] ; int32 ElementIndex = IncidentElements [ IncidentIndex ] [ j ] ; Chaos::PMatrix<T,3,3> DmInv =)",
    "insertText": "ElementDmInv(ElementIndex)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> Fe =)",
    "insertText": "F(ElementIndex, Particles)"
  },
  {
    "label": "ComputeHessianHelper()",
    "kind": "Method",
    "detail": "Function (T Coeff = Dt* Dt* Measure [ ElementIndex ] ;)",
    "insertText": "ComputeHessianHelper(Fe, DmInv, MuElementArray[ElementIndex], LambdaElementArray[ElementIndex], local_index, Coeff, final_hessian)"
  },
  {
    "label": "AddHyperelasticResidualAndHessian()",
    "kind": "Method",
    "detail": "Function (} return final_hessian ; } void)",
    "insertText": "AddHyperelasticResidualAndHessian(const ParticleType& Particles, const int32 ElementIndex, const int32 ElementIndexLocal, const T Dt, TVec3<T>& ParticleResidual, Chaos::PMatrix<T, 3, 3>& ParticleHessian)"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> DmInvT =)",
    "insertText": "ElementDmInv(ElementIndex).GetTransposed()"
  },
  {
    "label": "ComputeStress()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ComputeStress(Fe, MuElementArray[ElementIndex], LambdaElementArray[ElementIndex], P)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (dx [ c ] + = force_term .)",
    "insertText": "GetAt(c, ElementIndexLocal - 1)"
  },
  {
    "label": "ComputeHessianHelper()",
    "kind": "Method",
    "detail": "Function (ParticleResidual [ alpha ] - = dx [ alpha ] ; })",
    "insertText": "ComputeHessianHelper(Fe, Base::ElementDmInv(ElementIndex), MuElementArray[ElementIndex], LambdaElementArray[ElementIndex], ElementIndexLocal, Dt * Dt * Measure[ElementIndex], ParticleHessian)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "InitColor(const ParticleType& Particles)"
  },
  {
    "label": "ComputeNodalColoring()",
    "kind": "Method",
    "detail": "Function (ParticlesPerColor =)",
    "insertText": "ComputeNodalColoring(MeshConstraints, Particles, ParticleStartIndex, ParticleEndIndex, IncidentElements, IncidentElementsLocal)"
  },
  {
    "label": "ComputeStress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeStress(const Chaos::PMatrix<T, 3, 3>& Fe, const T mu, const T lambda, Chaos::PMatrix<T, 3, 3>& P)"
  },
  {
    "label": "PCorotated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCorotated(Fe, mu, lambda, P)"
  },
  {
    "label": "ComputeHessianHelper()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ComputeHessianHelper(const Chaos::PMatrix<T, 3, 3>& Fe, const Chaos::PMatrix<T, 3, 3>& DmInv, const T mu, const T lambda, const int32 local_index, const T Coeff, Chaos::PMatrix<T, 3, 3>& final_hessian)"
  },
  {
    "label": "JFinvT()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3>)",
    "insertText": "JFinvT((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 0, Fe.GetAt(1, 1) * Fe.GetAt(2, 2) - Fe.GetAt(2, 1) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 1, Fe.GetAt(2, 0) * Fe.GetAt(1, 2) - Fe.GetAt(1, 0) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 2, Fe.GetAt(1, 0) * Fe.GetAt(2, 1) - Fe.GetAt(2, 0) * Fe.GetAt(1, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 0, Fe.GetAt(2, 1) * Fe.GetAt(0, 2) - Fe.GetAt(0, 1) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 1, Fe.GetAt(0, 0) * Fe.GetAt(2, 2) - Fe.GetAt(2, 0) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 2, Fe.GetAt(2, 0) * Fe.GetAt(0, 1) - Fe.GetAt(0, 0) * Fe.GetAt(2, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 0, Fe.GetAt(0, 1) * Fe.GetAt(1, 2) - Fe.GetAt(1, 1) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 1, Fe.GetAt(1, 0) * Fe.GetAt(0, 2) - Fe.GetAt(0, 0) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 2, Fe.GetAt(0, 0) * Fe.GetAt(1, 1) - Fe.GetAt(1, 0) * Fe.GetAt(0, 1))"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> JFinv = JFinvT .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T DmInvsum =)",
    "insertText": "T(0)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (localDmsum + = DmInv .)",
    "insertText": "GetAt(k, nu)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (final_hessian .)",
    "insertText": "SetAt(alpha, alpha, final_hessian.GetAt(alpha, alpha) + Coeff * T(2) * mu * DmInvsum)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (} Chaos::PMatrix<T,3,3> DmInvJFinv = JFinv* DmInv ; Chaos::TVector<T,3>)",
    "insertText": "l((T)0.)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (l [ alpha ] + = DmInvJFinv .)",
    "insertText": "GetAt(k, alpha)"
  },
  {
    "label": "SetRow()",
    "kind": "Method",
    "detail": "Function (final_hessian .)",
    "insertText": "SetRow(alpha, final_hessian.GetRow(alpha) + Coeff * lambda * l[alpha] * l)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (DmInvsum + = DmInv .)",
    "insertText": "GetAt(local_index - 1, nu) * DmInv.GetAt(local_index - 1, nu)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (l [ alpha ] = DmInvJFinv .)",
    "insertText": "GetAt(local_index - 1, alpha)"
  },
  {
    "label": "AddAdditionalRes()",
    "kind": "Method",
    "detail": "Function (} } } ;)",
    "insertText": "AddAdditionalRes(const ParticleType& InParticles, const int32 p, const T Dt, TVec3<T>& res)"
  },
  {
    "label": "AddAdditionalHessian()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "AddAdditionalHessian(const ParticleType& InParticles, const int32 p, const T Dt, Chaos::PMatrix<T, 3, 3>& hessian)"
  },
  {
    "label": "ComputeDeltax()",
    "kind": "Method",
    "detail": "Function (} ; } private : TVector<T,3>)",
    "insertText": "ComputeDeltax(const int32 p, const int32 IncidentIndex, const ParticleType& Particles, const T Dt)"
  },
  {
    "label": "ComputePerParticleResidual()",
    "kind": "Method",
    "detail": "Function (Chaos::TVector<T,3> ParticleResidual =)",
    "insertText": "ComputePerParticleResidual(p, Particle2Incident[p], Particles, Dt, !bDoQuasistatics)"
  },
  {
    "label": "AddAdditionalRes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdditionalRes(Particles, p, Dt, ParticleResidual)"
  },
  {
    "label": "ComputePerParticleCorotatedHessianSimple()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> SimplifiedHessian =)",
    "insertText": "ComputePerParticleCorotatedHessianSimple(p, Particle2Incident[p], Particles, Dt, !bDoQuasistatics)"
  },
  {
    "label": "AddAdditionalHessian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdditionalHessian(Particles, p, Dt, SimplifiedHessian)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (T HessianDet = SimplifiedHessian .)",
    "insertText": "Determinant()"
  },
  {
    "label": "SymmetricCofactorMatrix()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> HessianInv = SimplifiedHessian .)",
    "insertText": "SymmetricCofactorMatrix()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (HessianInv* =)",
    "insertText": "T(1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} } return TVector<)",
    "insertText": "T((T)0.)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} protected : TArray<int32> Particle2Incident ; TArray<TArray<int32>> IncidentElements ; TArray<TArray<int32>> IncidentElementsLocal ; T LocalNewtonTol =)",
    "insertText": "T(1e-5)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> ParticlesPerColor ; int32 ParticleStartIndex ; int32 ParticleEndIndex ; TArray<Chaos::TVector<T,3>> xtilde ; TArray<Chaos::TVector<T,3>> X_k_1 ; TArray<Chaos::TVector<T,3>> X_k ; bool bDoQuasistatics = false ; bool bDoSOR = true ; T OmegaSOR =)",
    "insertText": "T(1.6)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (int32 CurrentIt = 0 ; TFunction<)",
    "insertText": "void(const Chaos::PMatrix<T, 3, 3>&, const T, const T, Chaos::PMatrix<T, 3, 3>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const Chaos::PMatrix<T, 3, 3>&, const Chaos::PMatrix<T, 3, 3>&, const T, const T, const int32, const T, Chaos::PMatrix<T, 3, 3>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (public : TFunction<)",
    "insertText": "void(const ParticleType&, const int32, const T, TVec3<T>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const ParticleType&, const int32, const T, Chaos::PMatrix<T, 3, 3>&)"
  }
]