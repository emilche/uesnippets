[
  {
    "label": "FPImplRecastNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPImplRecastNavMesh"
  },
  {
    "label": "FRecastQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRecastQueryFilter"
  },
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UNavArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavArea"
  },
  {
    "label": "UNavigationDataChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationDataChunk"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "URecastNavMeshDataChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URecastNavMeshDataChunk"
  },
  {
    "label": "ARecastNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARecastNavMesh"
  },
  {
    "label": "FRecastAreaNavModifierElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastAreaNavModifierElement"
  },
  {
    "label": "dtNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMesh"
  },
  {
    "label": "dtQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtQueryFilter"
  },
  {
    "label": "FRecastNavMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRecastNavMeshGenerator"
  },
  {
    "label": "dtMeshTile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtMeshTile"
  },
  {
    "label": "UNavigationSystemV1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemV1"
  },
  {
    "label": "UNavigationSystemBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemBase"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDetourTileSizeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetourTileSizeInfo"
  },
  {
    "label": "FDetourTileLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetourTileLayout"
  },
  {
    "label": "FRecastDebugPathfindingNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastDebugPathfindingNode"
  },
  {
    "label": "FRecastDebugPathfindingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastDebugPathfindingData"
  },
  {
    "label": "FRecastDebugGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastDebugGeometry"
  },
  {
    "label": "EOffMeshLinkEnd",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOffMeshLinkEnd"
  },
  {
    "label": "FOffMeshLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOffMeshLink"
  },
  {
    "label": "FCluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCluster"
  },
  {
    "label": "FClusterLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterLink"
  },
  {
    "label": "FOffMeshSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOffMeshSegment"
  },
  {
    "label": "FNavTileRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavTileRef"
  },
  {
    "label": "FNavPoly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavPoly"
  },
  {
    "label": "FNavigationWallEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationWallEdge"
  },
  {
    "label": "FRecastNavMeshTileGenerationDebug",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastNavMeshTileGenerationDebug"
  },
  {
    "label": "FNavMeshDirtyTileElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshDirtyTileElement"
  },
  {
    "label": "FNavMeshTileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshTileData"
  },
  {
    "label": "FNavData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavData"
  },
  {
    "label": "FRecastNamedFiltersCreator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastNamedFiltersCreator"
  },
  {
    "label": "FNavMeshResolutionParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshResolutionParam"
  },
  {
    "label": "FRaycastResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRaycastResult"
  },
  {
    "label": "FPropertyChangedChainEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedChainEvent"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "FRecastInternalDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastInternalDebugData"
  },
  {
    "label": "FNavigationPortalEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPortalEdge"
  },
  {
    "label": "FRecastGraphWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastGraphWrapper"
  },
  {
    "label": "FUpdateActiveTilesWorkingMem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateActiveTilesWorkingMem"
  },
  {
    "label": "FRecastNavMeshCachedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastNavMeshCachedData"
  },
  {
    "label": "RECAST_DEFAULT_AREA()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" EngineDefines . h \" # include \" LinkGenerationConfig . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" AI / Navigation / NavigationDataResolution . h \" # include \" NavigationSystemTypes . h \" # include \" NavigationData . h \" # include \" NavMesh / NavMeshPath . h \" # include \" RecastNavMesh . generated . h \" # define RECAST_MAX_SEARCH_NODES 2 0 4 8 # define RECAST_MIN_TILE_SIZE 3 0 0 . f # define RECAST_MAX_AREAS 6 4 # define)",
    "insertText": "RECAST_DEFAULT_AREA(RECAST_MAX_AREAS - 1) #define RECAST_LOW_AREA (RECAST_MAX_AREAS - 2) #define RECAST_NULL_AREA 0 #define RECAST_UNWALKABLE_POLY_COST FLT_MAX #ifndef RECAST_ASYNC_REBUILDING #define RECAST_ASYNC_REBUILDING 1 #endif #ifndef ALLOW_TIME_SLICE_NAV_REGEN #define ALLOW_TIME_SLICE_NAV_REGEN 0 #endif #define TIME_SLICE_NAV_REGEN (ALLOW_TIME_SLICE_NAV_REGEN && !RECAST_ASYNC_REBUILDING)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (class FRecastQueryFilter ; class INavLinkCustomInterface ; class UCanvas ; class UNavArea ; class UNavigationDataChunk ; class UPrimitiveComponent ; class URecastNavMeshDataChunk ; class ARecastNavMesh ; struct FRecastAreaNavModifierElement ; class dtNavMesh ; class dtQueryFilter ; class FRecastNavMeshGenerator ; struct dtMeshTile ; class UNavigationSystemV1 ; class UNavigationSystemBase ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FDetourTileLayout()",
    "kind": "Method",
    "detail": "Function (Recast,None,UseStepHeightFromAgentMaxSlope } ; struct FDetourTileSizeInfo { unsigned short VertCount = 0 ; unsigned short PolyCount = 0 ; unsigned short MaxLinkCount = 0 ; unsigned short DetailMeshCount = 0 ; unsigned short DetailVertCount = 0 ; unsigned short DetailTriCount = 0 ; unsigned short BvNodeCount = 0 ; unsigned short OffMeshConCount = 0 ; unsigned short OffMeshSegConCount = 0 ; unsigned short ClusterCount = 0 ; unsigned short OffMeshBase = 0 ; } ; struct FDetourTileLayout {)",
    "insertText": "FDetourTileLayout(const dtMeshTile& tile)"
  },
  {
    "label": "FDetourTileLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDetourTileLayout(const FDetourTileSizeInfo& SizeInfo)"
  },
  {
    "label": "InitFromSizeInfo()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitFromSizeInfo(const FDetourTileSizeInfo& SizeInfo)"
  },
  {
    "label": "SkipStringPulling()",
    "kind": "Method",
    "detail": "Function (public : int32 HeaderSize = 0 ; int32 VertsSize = 0 ; int32 PolysSize = 0 ; int32 LinksSize = 0 ; int32 DetailMeshesSize = 0 ; int32 DetailVertsSize = 0 ; int32 DetailTrisSize = 0 ; int32 BvTreeSize = 0 ; int32 OffMeshConsSize = 0 ; int32 OffMeshSegsSize = 0 ; int32 ClustersSize = 0 ; int32 PolyClustersSize = 0 ; int32 TileSize = 0 ; } ; namespace ERecastPathFlags { const int32)",
    "insertText": "SkipStringPulling(1 << 0)"
  },
  {
    "label": "GenerateCorridor()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GenerateCorridor(1 << 1)"
  },
  {
    "label": "FRecastDebugPathfindingNode()",
    "kind": "Method",
    "detail": "Function (const uint8 FirstAvailableFlag = 2 ; } # if WITH_RECAST struct FRecastDebugPathfindingNode { NavNodeRef PolyRef ; NavNodeRef ParentRef ; FVector::FReal Cost = 0 . ; FVector::FReal TotalCost = 0 . ; FVector::FReal Length = 0 . ; FVector NodePos ; TArray<FVector3f,TInlineAllocator<6>> Verts ; uint8 NumVerts ; uint8 bOpenSet : 1 ; uint8 bOffMeshLink : 1 ; uint8 bModified : 1 ;)",
    "insertText": "FRecastDebugPathfindingNode() : PolyRef(0), ParentRef(0), NumVerts(0), bOpenSet(0), bOffMeshLink(0), bModified(0)"
  },
  {
    "label": "FRecastDebugPathfindingNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRecastDebugPathfindingNode(NavNodeRef InPolyRef) : PolyRef(InPolyRef), ParentRef(0), NumVerts(0), bOpenSet(0), bOffMeshLink(0), bModified(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const NavNodeRef& OtherPolyRef)"
  },
  {
    "label": "GetHeuristicCost()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "GetHeuristicCost()"
  },
  {
    "label": "FRecastDebugPathfindingData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRecastDebugPathfindingData(ERecastDebugPathfindingFlags::Type InFlags) : Flags(InFlags)"
  },
  {
    "label": "FRecastDebugGeometry()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRecastDebugGeometry { enum EOffMeshLinkEnd { OMLE_None = 0 x0,OMLE_Left = 0 x1,OMLE_Right = 0 x2,OMLE_Both = OMLE_Left | OMLE_Right } ; struct FOffMeshLink { FVector Left ; FVector Right ; uint8 AreaID ; uint8 Direction ; uint8 ValidEnds ; bool bIsGenerated ; float Radius ; float Height ; FColor Color ; } ; # if WITH_NAVMESH_CLUSTER_LINKS struct FCluster { TArray<int32> MeshIndices ; } ; struct FClusterLink { FVector FromCluster ; FVector ToCluster ; } ; # endif # if WITH_NAVMESH_SEGMENT_LINKS struct FOffMeshSegment { FVector LeftStart,LeftEnd ; FVector RightStart,RightEnd ; uint8 AreaID ; uint8 Direction ; uint8 ValidEnds ; } ; # endif int32 BuildTimeBucketsCount = 5 ; TArray<FVector> MeshVerts ; TArray<int32> AreaIndices [ RECAST_MAX_AREAS ] ; TArray<int32> ForbiddenIndices ; TArray<int32> BuiltMeshIndices ; TArray<int32> TileBuildTimesIndices [ BuildTimeBucketsCount ] ; TArray<FVector> PolyEdges ; TArray<FVector> NavMeshEdges ; TArray<FOffMeshLink> OffMeshLinks ; TArray<FOffMeshLink> ForbiddenLinks ; # if WITH_NAVMESH_CLUSTER_LINKS TArray<FCluster> Clusters ; TArray<FClusterLink> ClusterLinks ; # endif # if WITH_NAVMESH_SEGMENT_LINKS TArray<FOffMeshSegment> OffMeshSegments ; TArray<int32> OffMeshSegmentAreas [ RECAST_MAX_AREAS ] ; # endif # if RECAST_INTERNAL_DEBUG_DATA TArray<FIntPoint> TilesToDisplayInternalData ; # endif uint32 bGatherPolyEdges : 1 ; uint32 bGatherNavMeshEdges : 1 ; uint32 bMarkForbiddenPolys : 1 ; uint32 bGatherTileBuildTimesHeatMap : 1 ; double MinTileBuildTime = DBL_MAX ; double MaxTileBuildTime = 0 . ;)",
    "insertText": "FRecastDebugGeometry() : bGatherPolyEdges(false), bGatherNavMeshEdges(false), bMarkForbiddenPolys(false), bGatherTileBuildTimesHeatMap(false)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "FNavTileRef()",
    "kind": "Method",
    "detail": "Function (} ; struct FNavTileRef {)",
    "insertText": "FNavTileRef()"
  },
  {
    "label": "FNavTileRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavTileRef(const uint64 InTileRef) : TileRef(InTileRef)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "uint64()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FNavTileRef InRef)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FNavTileRef& NavTileRef)"
  },
  {
    "label": "DeprecatedGetTileIdsFromNavTileRefs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeprecatedGetTileIdsFromNavTileRefs(const FPImplRecastNavMesh* RecastNavMeshImpl, const TArray<FNavTileRef>& InTileRefs, TArray<uint32>& OutTileIds)"
  },
  {
    "label": "DeprecatedMakeTileRefsFromTileIds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeprecatedMakeTileRefsFromTileIds(const FPImplRecastNavMesh* RecastNavMeshImpl, const TArray<uint32>& InTileIds, TArray<FNavTileRef>& OutTileRefs)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Solid = 0,Walkable } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() NAVIGATIONSYSTEM_API FRecastNavMeshTileGenerationDebug()"
  },
  {
    "label": "TestPtr()",
    "kind": "Method",
    "detail": "Function (} ; struct FNavMeshDirtyTileElement { FIntPoint Coordinates ; FVector::FReal InvokerDistanceSquared ; ENavigationInvokerPriority InvokerPriority ; } ; struct FNavMeshTileData { struct FNavData { void)",
    "insertText": "TestPtr()"
  },
  {
    "label": "FNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavData(uint8* InNavData, const int32 InDataSize) : RawNavData(InNavData)"
  },
  {
    "label": "GetAllocSize()",
    "kind": "Method",
    "detail": "Function (uint8 Temp = 0 ; Temp =* RawNavData ; AllocatedSize =)",
    "insertText": "GetAllocSize((void*)RawNavData)"
  },
  {
    "label": "FNavData()",
    "kind": "Method",
    "detail": "Function (} else { AllocatedSize = 0 ; } } ~)",
    "insertText": "FNavData()"
  },
  {
    "label": "GetRawNavData()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetRawNavData()"
  },
  {
    "label": "FNavMeshTileData()",
    "kind": "Method",
    "detail": "Function (RawNavData = nullptr ; AllocatedSize = 0 ; } protected : uint8* RawNavData ; SIZE_T AllocatedSize ; } ; int32 LayerIndex ; FBox LayerBBox ; int32 DataSize ; TSharedPtr<FNavData,ESPMode::ThreadSafe> NavData ;)",
    "insertText": "FNavMeshTileData() : LayerIndex(0), DataSize(0)"
  },
  {
    "label": "FNavMeshTileData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FNavMeshTileData()"
  },
  {
    "label": "FNavMeshTileData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavMeshTileData(uint8* RawData, int32 RawDataSize, int32 LayerIdx = 0, FBox LayerBounds = FBox(ForceInit))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetDataSafe()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetDataSafe()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const uint8* RawData)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "Release()"
  },
  {
    "label": "MakeUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUnique()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnNavMeshUpdate)"
  },
  {
    "label": "FRecastNamedFiltersCreator()",
    "kind": "Method",
    "detail": "Function (namespace FNavMeshConfig { struct FRecastNamedFiltersCreator {)",
    "insertText": "FRecastNamedFiltersCreator(bool bVirtualFilters)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() bool IsValid()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config=Engine, defaultconfig, hidecategories=(Input,Rendering,Tags,Transformation,Actor,Layers,Replication), notplaceable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "FRaycastResult()",
    "kind": "Method",
    "detail": "Function (FNavPolyFlags NavLinkFlag ; FVector::FReal DrawDistanceSq ; float MinimumSizeForChaosNavMeshInfluenceSq ; public : struct FRaycastResult { enum { MAX_PATH_CORRIDOR_POLYS = 1 2 8 } ; NavNodeRef CorridorPolys [ MAX_PATH_CORRIDOR_POLYS ] ; float CorridorCost [ MAX_PATH_CORRIDOR_POLYS ] ; int32 CorridorPolysCount ; FVector::FReal HitTime ; FVector HitNormal ; uint32 bIsRaycastEndInCorridor : 1 ;)",
    "insertText": "FRaycastResult() : CorridorPolysCount(0) , HitTime(TNumericLimits<FVector::FReal>::Max()) , HitNormal(0.f) , bIsRaycastEndInCorridor(false)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(CorridorPolys)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(CorridorCost)"
  },
  {
    "label": "GetMaxCorridorSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxCorridorSize()"
  },
  {
    "label": "GetLastNodeRef()",
    "kind": "Method",
    "detail": "Function (} NavNodeRef)",
    "insertText": "GetLastNodeRef()"
  },
  {
    "label": "SetDrawDistance()",
    "kind": "Method",
    "detail": "Function (FOnNavMeshUpdate OnNavMeshUpdate ; void)",
    "insertText": "SetDrawDistance(FVector::FReal NewDistance)"
  },
  {
    "label": "GetDrawDistanceSq()",
    "kind": "Method",
    "detail": "Function (DrawDistanceSq = NewDistance* NewDistance ; } FVector::FReal)",
    "insertText": "GetDrawDistanceSq()"
  },
  {
    "label": "GetMinimumSizeForChaosNavMeshInfluenceSq()",
    "kind": "Method",
    "detail": "Function (MinimumSizeForChaosNavMeshInfluenceSq = NewSize* NewSize ; } float)",
    "insertText": "GetMinimumSizeForChaosNavMeshInfluenceSq()"
  },
  {
    "label": "ARecastNavMesh()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ARecastNavMesh()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (# if WITH_RECAST public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  },
  {
    "label": "PostUnregisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUnregisterAllComponents()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeChainProperty(struct FPropertyChangedChainEvent& PropertyChangedChainEvent)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "ShouldExport()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "ShouldExport()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "GetRandomPoint()",
    "kind": "Method",
    "detail": "Function (FNavLocation)",
    "insertText": "GetRandomPoint(FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "GetRandomReachablePointInRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomReachablePointInRadius(const FVector& Origin, float Radius, FNavLocation& OutResult, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "GetRandomPointInNavigableRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPointInNavigableRadius(const FVector& Origin, float Radius, FNavLocation& OutResult, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "FindMoveAlongSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindMoveAlongSurface(const FNavLocation& StartLocation, const FVector& TargetPosition, FNavLocation& OutLocation, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "FindOverlappingEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOverlappingEdges(const FNavLocation& StartLocation, TConstArrayView<FVector> ConvexPolygon, TArray<FVector>& OutEdges, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "GetPathSegmentBoundaryEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPathSegmentBoundaryEdges(const FNavigationPath& Path, const FNavPathPoint& StartPoint, const FNavPathPoint& EndPoint, const TConstArrayView<FVector> SearchArea, TArray<FVector>& OutEdges, const float MaxAreaEnterCost, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "ProjectPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectPoint(const FVector& Point, FNavLocation& OutLocation, const FVector& Extent, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "IsNodeRefValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeRefValid(NavNodeRef NodeRef)"
  },
  {
    "label": "BatchProjectPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchProjectPoints(TArray<FNavigationProjectionWork>& Workload, const FVector& Extent, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "BatchProjectPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchProjectPoints(TArray<FNavigationProjectionWork>& Workload, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "CalcPathCost()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "CalcPathCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathCost, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "CalcPathLength()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "CalcPathLength(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathLength, FSharedConstNavQueryFilter QueryFilter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "CalcPathLengthAndCost()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "CalcPathLengthAndCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathLength, FVector::FReal& OutPathCost, FSharedConstNavQueryFilter QueryFilter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "DoesNodeContainLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesNodeContainLocation(NavNodeRef NodeRef, const FVector& WorldSpaceLocation)"
  },
  {
    "label": "ConstructRenderingComponent()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent*)",
    "insertText": "ConstructRenderingComponent()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBounds()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "FillNavigationDataChunkActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNavigationDataChunkActor(const FBox& InQueryBounds, class ANavigationDataChunkActor& DataChunkActor, FBox& OutTilesBounds)"
  },
  {
    "label": "OnStreamingNavDataAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamingNavDataAdded(class ANavigationDataChunkActor& InActor)"
  },
  {
    "label": "OnStreamingNavDataRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamingNavDataRemoved(class ANavigationDataChunkActor& InActor)"
  },
  {
    "label": "OnStreamingLevelAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamingLevelAdded(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnStreamingLevelRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamingLevelRemoved(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "GetWorldPartitionNavigationDataBuilderOverlap()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR double)",
    "insertText": "GetWorldPartitionNavigationDataBuilderOverlap()"
  },
  {
    "label": "AttachNavMeshDataChunk()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AttachNavMeshDataChunk(URecastNavMeshDataChunk& NavDataChunk)"
  },
  {
    "label": "DetachNavMeshDataChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachNavMeshDataChunk(URecastNavMeshDataChunk& NavDataChunk)"
  },
  {
    "label": "GetActiveTileSet()",
    "kind": "Method",
    "detail": "Function (const TSet<FIntPoint>&)",
    "insertText": "GetActiveTileSet()"
  },
  {
    "label": "LogRecastTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogRecastTile(const TCHAR* Caller, const FName& Prefix, const FName& OperationName, const dtNavMesh& DetourMesh, const int32 TileX, const int32 TileY, const int32 LayerIndex, const uint64 TileRef)"
  },
  {
    "label": "SerializeRecastNavMesh()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SerializeRecastNavMesh(FArchive& Ar, FPImplRecastNavMesh*& NavMesh, int32 NavMeshVersion)"
  },
  {
    "label": "RestrictBuildingToActiveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestrictBuildingToActiveTiles(bool InRestrictBuildingToActiveTiles)"
  },
  {
    "label": "OnRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegistered()"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (public : float)",
    "insertText": "GetCellSize(const ENavigationDataResolution Resolution)"
  },
  {
    "label": "SetCellSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCellSize(const ENavigationDataResolution Resolution, const float Size)"
  },
  {
    "label": "NavMeshResolutionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavMeshResolutionParams(uint8)"
  },
  {
    "label": "GetCellHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCellHeight(const ENavigationDataResolution Resolution)"
  },
  {
    "label": "SetCellHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCellHeight(const ENavigationDataResolution Resolution, const float Height)"
  },
  {
    "label": "GetAgentMaxStepHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetAgentMaxStepHeight(const ENavigationDataResolution Resolution)"
  },
  {
    "label": "SetAgentMaxStepHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAgentMaxStepHeight(const ENavigationDataResolution Resolution, const float MaxStepHeight)"
  },
  {
    "label": "GetTileSizeUU()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTileSizeUU()"
  },
  {
    "label": "IsResizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResizable()"
  },
  {
    "label": "GetNavMeshBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavMeshBounds()"
  },
  {
    "label": "GetNavMeshTileBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavMeshTileBounds(FNavTileRef TileRef)"
  },
  {
    "label": "GetNavMeshTileXY()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavMeshTileXY(FNavTileRef TileRef, int32& OutX, int32& OutY, int32& Layer)"
  },
  {
    "label": "GetNavMeshTileXY()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavMeshTileXY(const FVector& Point, int32& OutX, int32& OutY)"
  },
  {
    "label": "GetNavmeshTileResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavmeshTileResolution(FNavTileRef TileRef, ENavigationDataResolution& OutResolution)"
  },
  {
    "label": "CheckTileIndicesInValidRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckTileIndicesInValidRange(const FVector& Point, bool& bOutInRange)"
  },
  {
    "label": "GetNavMeshTilesAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavMeshTilesAt(int32 TileX, int32 TileY, TArray<FNavTileRef>& OutRefs)"
  },
  {
    "label": "GetNavMeshTilesCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNavMeshTilesCount()"
  },
  {
    "label": "GetAllNavMeshTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllNavMeshTiles(TArray<FNavTileRef>& OutRefs)"
  },
  {
    "label": "RemoveTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTileCacheLayers(int32 TileX, int32 TileY)"
  },
  {
    "label": "AddTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTileCacheLayers(int32 TileX, int32 TileY, const TArray<FNavMeshTileData>& InLayers)"
  },
  {
    "label": "RemoveTileDebugData()",
    "kind": "Method",
    "detail": "Function (# if RECAST_INTERNAL_DEBUG_DATA void)",
    "insertText": "RemoveTileDebugData(int32 TileX, int32 TileY)"
  },
  {
    "label": "AddTileDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTileDebugData(int32 TileX, int32 TileY, const struct FRecastInternalDebugData& InTileDebugData)"
  },
  {
    "label": "MarkEmptyTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "MarkEmptyTileCacheLayers(int32 TileX, int32 TileY)"
  },
  {
    "label": "GetTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (TArray<FNavMeshTileData>)",
    "insertText": "GetTileCacheLayers(int32 TileX, int32 TileY)"
  },
  {
    "label": "GetCompressedTileCacheSize()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING int32)",
    "insertText": "GetCompressedTileCacheSize()"
  },
  {
    "label": "GetEdgesForPathCorridor()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetEdgesForPathCorridor(const TArray<NavNodeRef>* PathCorridor, TArray<struct FNavigationPortalEdge>* PathCorridorEdges)"
  },
  {
    "label": "UpdateDrawing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDrawing()"
  },
  {
    "label": "RequestDrawingUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDrawingUpdate(bool bForce = false)"
  },
  {
    "label": "OnNavMeshTilesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavMeshTilesUpdated(const TArray<FNavTileRef>& ChangedTiles)"
  },
  {
    "label": "OnNavMeshGenerationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavMeshGenerationFinished()"
  },
  {
    "label": "EnsureBuildCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBuildCompletion()"
  },
  {
    "label": "SetConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConfig(const FNavDataConfig& Src)"
  },
  {
    "label": "FillConfig()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "FillConfig(FNavDataConfig& Dest)"
  },
  {
    "label": "IsVoxelCacheEnabled()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsVoxelCacheEnabled()"
  },
  {
    "label": "GetDebugGeometryForTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDebugGeometryForTile(FRecastDebugGeometry& OutGeometry, FNavTileRef TileRef)"
  },
  {
    "label": "DrawDebugPathCorridor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPathCorridor(NavNodeRef const* PathPolys, int32 NumPathPolys, bool bPersistent=true)"
  },
  {
    "label": "LogMemUsed()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING uint32)",
    "insertText": "LogMemUsed()"
  },
  {
    "label": "UpdateNavMeshDrawing()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateNavMeshDrawing()"
  },
  {
    "label": "OnNavAreaChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaChanged()"
  },
  {
    "label": "OnNavAreaAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaAdded(const UClass* NavAreaClass, int32 AgentIndex)"
  },
  {
    "label": "OnNavAreaRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaRemoved(const UClass* NavAreaClass)"
  },
  {
    "label": "GetNewAreaID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNewAreaID(const UClass* AreaClass)"
  },
  {
    "label": "GetMaxSupportedAreas()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxSupportedAreas()"
  },
  {
    "label": "SetDefaultForbiddenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultForbiddenFlags(uint16 ForbiddenAreaFlags)"
  },
  {
    "label": "SortAreasForGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortAreasForGenerator(TArray<FRecastAreaNavModifierElement>& Areas)"
  },
  {
    "label": "RecreateDefaultFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateDefaultFilter()"
  },
  {
    "label": "GetMaxSimultaneousTileGenerationJobsCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxSimultaneousTileGenerationJobsCount()"
  },
  {
    "label": "GetModifiedQueryExtent()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetModifiedQueryExtent(const FVector& QueryExtent)"
  },
  {
    "label": "UpdateCustomLink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateCustomLink(const INavLinkCustomInterface* CustomLink)"
  },
  {
    "label": "UpdateNavigationLinkArea()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateNavigationLinkArea(FNavLinkId UserId, TSubclassOf<UNavArea> AreaClass)"
  },
  {
    "label": "UpdateSegmentLinkArea()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_SEGMENT_LINKS void)",
    "insertText": "UpdateSegmentLinkArea(int32 UserId, TSubclassOf<UNavArea> AreaClass)"
  },
  {
    "label": "BeginBatchQuery()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginBatchQuery()"
  },
  {
    "label": "FinishBatchQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishBatchQuery()"
  },
  {
    "label": "GetRecastMesh()",
    "kind": "Method",
    "detail": "Function (dtNavMesh*)",
    "insertText": "GetRecastMesh()"
  },
  {
    "label": "GetNavLinkUserId()",
    "kind": "Method",
    "detail": "Function (} FNavLinkId)",
    "insertText": "GetNavLinkUserId(NavNodeRef LinkPolyID)"
  },
  {
    "label": "GetAreaIDColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetAreaIDColor(uint8 AreaID)"
  },
  {
    "label": "FindPolysAroundCircle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPolysAroundCircle(const FVector& CenterPos, const NavNodeRef CenterNodeRef, const FVector::FReal Radius, const FSharedConstNavQueryFilter& Filter, const UObject* QueryOwner, TArray<NavNodeRef>* OutPolys = nullptr, TArray<NavNodeRef>* OutPolysParent = nullptr, TArray<float>* OutPolysCost = nullptr, int32* OutPolysCount = nullptr)"
  },
  {
    "label": "FindNearestPoly()",
    "kind": "Method",
    "detail": "Function (NavNodeRef)",
    "insertText": "FindNearestPoly(FVector const& Loc, FVector const& Extent, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "FindDistanceToWall()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "FindDistanceToWall(const FVector& StartLoc, FSharedConstNavQueryFilter Filter = nullptr, FVector::FReal MaxDistance = TNumericLimits<FVector::FReal>::Max(), FVector* OutClosestPointOnWall = nullptr)"
  },
  {
    "label": "GetPolyCenter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyCenter(NavNodeRef PolyID, FVector& OutCenter)"
  },
  {
    "label": "GetPolyVerts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyVerts(NavNodeRef PolyID, TArray<FVector>& OutVerts)"
  },
  {
    "label": "GetRandomPointInPoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPointInPoly(NavNodeRef PolyID, FVector& OutPoint)"
  },
  {
    "label": "GetPolySurfaceArea()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetPolySurfaceArea(NavNodeRef PolyID)"
  },
  {
    "label": "GetPolyAreaID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPolyAreaID(NavNodeRef PolyID)"
  },
  {
    "label": "SetPolyArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPolyArea(NavNodeRef PolyID, TSubclassOf<UNavArea> AreaClass)"
  },
  {
    "label": "SetPolyArrayArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolyArrayArea(const TArray<FNavPoly>& Polys, TSubclassOf<UNavArea> AreaClass)"
  },
  {
    "label": "ReplaceAreaInTileBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReplaceAreaInTileBounds(const FBox& Bounds, TSubclassOf<UNavArea> OldArea, TSubclassOf<UNavArea> NewArea, bool ReplaceLinks = true, TArray<NavNodeRef>* OutTouchedNodes = nullptr)"
  },
  {
    "label": "GetPolyFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyFlags(NavNodeRef PolyID, uint16& PolyFlags, uint16& AreaFlags)"
  },
  {
    "label": "GetPolyFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyFlags(NavNodeRef PolyID, FNavMeshNodeFlags& Flags)"
  },
  {
    "label": "GetPolyNeighbors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyNeighbors(NavNodeRef PolyID, TArray<FNavigationPortalEdge>& Neighbors)"
  },
  {
    "label": "GetPolyNeighbors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyNeighbors(NavNodeRef PolyID, TArray<NavNodeRef>& Neighbors)"
  },
  {
    "label": "GetPolyEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyEdges(NavNodeRef PolyID, TArray<FNavigationPortalEdge>& Neighbors)"
  },
  {
    "label": "GetPolyWallSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyWallSegments(NavNodeRef PolyID, FSharedConstNavQueryFilter Filter, const UObject* QueryOwner, TArray<FNavigationPortalEdge>& OutNeighbors)"
  },
  {
    "label": "GetClosestPointOnPoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClosestPointOnPoly(NavNodeRef PolyID, const FVector& TestPt, FVector& PointOnPoly)"
  },
  {
    "label": "GetPolyTileIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyTileIndex(NavNodeRef PolyID, uint32& PolyIndex, uint32& TileIndex)"
  },
  {
    "label": "GetLinkEndPoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLinkEndPoints(NavNodeRef LinkPolyID, FVector& PointA, FVector& PointB)"
  },
  {
    "label": "GetClusterBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClusterBounds(NavNodeRef ClusterRef, FBox& OutBounds)"
  },
  {
    "label": "GetRandomPointInCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPointInCluster(NavNodeRef ClusterRef, FNavLocation& OutLocation)"
  },
  {
    "label": "GetClusterRef()",
    "kind": "Method",
    "detail": "Function (NavNodeRef)",
    "insertText": "GetClusterRef(NavNodeRef PolyRef)"
  },
  {
    "label": "GetPolysWithinPathingDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolysWithinPathingDistance(FVector const& StartLoc, const FVector::FReal PathingDistance, TArray<NavNodeRef>& FoundPolys, FSharedConstNavQueryFilter Filter = nullptr, const UObject* Querier = nullptr, FRecastDebugPathfindingData* DebugData = nullptr)"
  },
  {
    "label": "FilterPolys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterPolys(TArray<NavNodeRef>& PolyRefs, const FRecastQueryFilter* Filter, const UObject* Querier = NULL)"
  },
  {
    "label": "GetPolysInTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolysInTile(FNavTileRef TileRef, TArray<FNavPoly>& Polys)"
  },
  {
    "label": "GetPolysInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolysInBox(const FBox& Box, TArray<FNavPoly>& Polys, FSharedConstNavQueryFilter Filter = nullptr, const UObject* Owner = nullptr)"
  },
  {
    "label": "FindEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindEdges(const NavNodeRef CenterNodeRef, const FVector Center, const FVector::FReal Radius, const FSharedConstNavQueryFilter Filter, TArray<FNavigationWallEdge>& OutEdges)"
  },
  {
    "label": "GetEdgesInTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEdgesInTile(FNavTileRef TileRef, TArray<FNavigationWallEdge>& OutEdges)"
  },
  {
    "label": "GetNavLinksInTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavLinksInTile(const int32 TileIndex, TArray<FNavPoly>& Polys, const bool bIncludeLinksFromNeighborTiles)"
  },
  {
    "label": "ProjectPointMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectPointMulti(const FVector& Point, TArray<FNavLocation>& OutLocations, const FVector& Extent, FVector::FReal MinZ, FVector::FReal MaxZ, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (FPathFindingResult)",
    "insertText": "FindPath(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query)"
  },
  {
    "label": "TestPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestPath(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query, int32* NumVisitedNodes)"
  },
  {
    "label": "TestHierarchicalPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestHierarchicalPath(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query, int32* NumVisitedNodes)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavMeshRaycast(const ANavigationData* Self, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier, FRaycastResult& Result)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavMeshRaycast(const ANavigationData* Self, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavMeshRaycast(const ANavigationData* Self, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavMeshRaycast(const ANavigationData* Self, NavNodeRef RayStartNode, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavMeshRaycast(const ANavigationData* Self, NavNodeRef RayStartNode, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL)"
  },
  {
    "label": "BatchRaycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchRaycast(TArray<FNavigationRaycastWork>& Workload, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL)"
  },
  {
    "label": "AdjustLocationWithFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdjustLocationWithFilter(const FVector& StartLoc, FVector& OutAdjustedLocation, const FNavigationQueryFilter& Filter, const UObject* Querier = NULL)"
  },
  {
    "label": "HasCompleteDataInRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompleteDataInRadius(const FVector& TestLocation, FVector::FReal TestRadius)"
  },
  {
    "label": "HasCompleteDataAroundSegment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompleteDataAroundSegment(const FVector& StartLocation, const FVector& EndLocation, FVector::FReal TestRadius)"
  },
  {
    "label": "IsSegmentOnNavmesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSegmentOnNavmesh(const FVector& SegmentStart, const FVector& SegmentEnd, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "IsCustomLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomLink(NavNodeRef PolyRef)"
  },
  {
    "label": "FindStraightPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindStraightPath(const FVector& StartLoc, const FVector& EndLoc, const TArray<NavNodeRef>& PathCorridor, TArray<FNavPathPoint>& PathPoints, TArray<FNavLinkId>* CustomLinks = NULL)"
  },
  {
    "label": "DebugPathfinding()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DebugPathfinding(const FPathFindingQuery& Query, TArray<FRecastDebugPathfindingData>& Steps)"
  },
  {
    "label": "GetNamedFilter()",
    "kind": "Method",
    "detail": "Function (const FRecastQueryFilter*)",
    "insertText": "GetNamedFilter(ERecastNamedFilter::Type FilterType)"
  },
  {
    "label": "SupportsRuntimeGeneration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsRuntimeGeneration()"
  },
  {
    "label": "SupportsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsStreaming()"
  },
  {
    "label": "IsWorldPartitionedDynamicNavmesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldPartitionedDynamicNavmesh()"
  },
  {
    "label": "IsUsingActiveTilesGeneration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingActiveTilesGeneration(const UNavigationSystemV1& NavSys)"
  },
  {
    "label": "PostLoadPreRebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadPreRebuild()"
  },
  {
    "label": "ConditionalConstructGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalConstructGenerator()"
  },
  {
    "label": "ShouldGatherDataOnGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGatherDataOnGameThread()"
  },
  {
    "label": "RemoveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTiles(const TArray<FIntPoint>& Tiles)"
  },
  {
    "label": "RebuildTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTile(const TArray<FNavMeshDirtyTileElement>& Tiles)"
  },
  {
    "label": "DirtyTilesInBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyTilesInBounds(const FBox& Bounds)"
  },
  {
    "label": "GetDebugDataMap()",
    "kind": "Method",
    "detail": "Function (# if RECAST_INTERNAL_DEBUG_DATA const TMap<FIntPoint,struct FRecastInternalDebugData>*)",
    "insertText": "GetDebugDataMap()"
  },
  {
    "label": "UpdatePolyRefBitsPreview()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "UpdatePolyRefBitsPreview()"
  },
  {
    "label": "InvalidateAffectedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAffectedPaths(const TArray<FNavTileRef>& ChangedTiles)"
  },
  {
    "label": "CreateGeneratorInstance()",
    "kind": "Method",
    "detail": "Function (FRecastNavMeshGenerator*)",
    "insertText": "CreateGeneratorInstance()"
  },
  {
    "label": "CheckToDiscardSubLevelNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckToDiscardSubLevelNavData(const UNavigationSystemBase& NavSys)"
  },
  {
    "label": "RegisterGeneratedLinksProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGeneratedLinksProxy()"
  },
  {
    "label": "UnregisterGeneratedLinksProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterGeneratedLinksProxy()"
  },
  {
    "label": "CreateAndRegisterJumpDownLinksProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndRegisterJumpDownLinksProxy(const FNavLinkId LinkProxyId = FNavLinkId::GenerateUniqueId())"
  },
  {
    "label": "DestroyRecastPImpl()",
    "kind": "Method",
    "detail": "Function (private : struct FRecastGraphWrapper ; FRecastNavMeshGenerator ; class FPImplRecastNavMesh ; class URecastNavMeshDataChunk ; void)",
    "insertText": "DestroyRecastPImpl()"
  },
  {
    "label": "UpdateNavVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavVersion()"
  },
  {
    "label": "UpdateNavObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavObject()"
  },
  {
    "label": "GetNavigationDataChunk()",
    "kind": "Method",
    "detail": "Function (URecastNavMeshDataChunk*)",
    "insertText": "GetNavigationDataChunk(ULevel* InLevel)"
  },
  {
    "label": "GetNavigationDataChunk()",
    "kind": "Method",
    "detail": "Function (URecastNavMeshDataChunk*)",
    "insertText": "GetNavigationDataChunk(const ANavigationDataChunkActor& InActor)"
  },
  {
    "label": "HasCompleteDataInTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompleteDataInTile(const int32 TileX, const int32 TileY)"
  },
  {
    "label": "GetRecastNavMeshImpl()",
    "kind": "Method",
    "detail": "Function (protected : FPImplRecastNavMesh*)",
    "insertText": "GetRecastNavMeshImpl()"
  },
  {
    "label": "GetNavigationDataChunk()",
    "kind": "Method",
    "detail": "Function (# endif TMap<FIntPoint,FNavMeshDirtyTileElement> TilesInMinDistanceMap ; TSet<FIntPoint> TilesInMaxDistance ; TArray<FIntPoint> TileToAppend ; } ; FUpdateActiveTilesWorkingMem UpdateActiveTilesWorkingMem ; private : URecastNavMeshDataChunk*)",
    "insertText": "GetNavigationDataChunk(const TArray<UNavigationDataChunk*>& InChunks)"
  },
  {
    "label": "BatchRaycast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BatchRaycast(TArray<FNavigationRaycastWork>& Workload, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = nullptr)"
  },
  {
    "label": "FindMoveAlongSurface()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindMoveAlongSurface(const FNavLocation& StartLocation, const FVector& TargetPosition, FNavLocation& OutLocation, FSharedConstNavQueryFilter Filter = nullptr, const UObject* Querier = nullptr)"
  },
  {
    "label": "GetRandomReachablePointInRadius()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRandomReachablePointInRadius(const FVector& Origin, float Radius, FNavLocation& OutResult, FSharedConstNavQueryFilter Filter = nullptr, const UObject* Querier = nullptr)"
  },
  {
    "label": "BatchProjectPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BatchProjectPoints(TArray<FNavigationProjectionWork>& Workload, FSharedConstNavQueryFilter Filter = nullptr, const UObject* Querier = nullptr)"
  },
  {
    "label": "CalcPathCost()",
    "kind": "Method",
    "detail": "Function (} ENavigationQueryResult::Type)",
    "insertText": "CalcPathCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathCost, FSharedConstNavQueryFilter QueryFilter = nullptr, const UObject* Querier = nullptr)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_RECAST bool)",
    "insertText": "NavMeshRaycast(const ANavigationData* Self, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NavMeshRaycast(const ANavigationData* Self, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier)"
  },
  {
    "label": "NavMeshRaycast()",
    "kind": "Method",
    "detail": "Function (FRaycastResult Result ; const bool bDidHit =)",
    "insertText": "NavMeshRaycast(Self, RayStart, RayEnd, HitLocation, QueryFilter, Querier, Result)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (AdditionalResults -> bIsRayEndInCorridor = Result . bIsRaycastEndInCorridor ; } return bDidHit ; } struct FRecastNavMeshCachedData { ARecastNavMesh::FNavPolyFlags FlagsPerArea [ RECAST_MAX_AREAS ] ; ARecastNavMesh::FNavPolyFlags FlagsPerOffMeshLinkArea [ RECAST_MAX_AREAS ] ; TMap<const UClass*,int32> AreaClassToIdMap ; TWeakObjectPtr<const ARecastNavMesh> ActorOwner ; uint32 bUseSortFunction : 1 ; FRecastNavMeshCachedData)",
    "insertText": "Construct(const ARecastNavMesh* RecastNavMeshActor)"
  },
  {
    "label": "OnAreaAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAreaAdded(const UClass* AreaClass, int32 AreaID)"
  },
  {
    "label": "OnAreaRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAreaRemoved(const UClass* AreaClass)"
  }
]