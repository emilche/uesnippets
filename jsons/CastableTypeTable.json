[
  {
    "label": "TViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TViewModelTypeID"
  },
  {
    "label": "TImplements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplements"
  },
  {
    "label": "ICastable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICastable"
  },
  {
    "label": "IDynamicExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDynamicExtension"
  },
  {
    "label": "FCastableTypeTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCastableTypeTable"
  },
  {
    "label": "FCastableTypeTableGenerator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCastableTypeTableGenerator"
  },
  {
    "label": "FCastableTypeTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / Platform . h \" # include \" Templates / UnrealTemplate . h \" # include \" Containers / SparseBitSet . h \" # include \" UObject / NameTypes . h \" # include<type_traits> namespace UE::Sequencer { template<T> struct TViewModelTypeID ; template<. . . T> struct TImplements ; class ICastable ; class IDynamicExtension ; struct FCastableTypeTable {)",
    "insertText": "FCastableTypeTable(uint8* InTypeMaskStorage)"
  },
  {
    "label": "FCastableTypeTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCastableTypeTable(const FCastableTypeTable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FCastableTypeTable&)"
  },
  {
    "label": "FCastableTypeTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCastableTypeTable(FCastableTypeTable&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FCastableTypeTable&&)"
  },
  {
    "label": "MakeTypeTable()",
    "kind": "Method",
    "detail": "Function (template<T> FCastableTypeTable*)",
    "insertText": "MakeTypeTable(const void* Unused, uint32 TypeID, FName InName)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FCastableTypeTableGenerator Generator ; Generator . Generate<)",
    "insertText": "T()"
  },
  {
    "label": "MakeTypeTable()",
    "kind": "Method",
    "detail": "Function (} template<T> FCastableTypeTable*)",
    "insertText": "MakeTypeTable(const IDynamicExtension* Unused, uint32 TypeID, FName InName)"
  },
  {
    "label": "FindTypeByName()",
    "kind": "Method",
    "detail": "Function (} const FCastableTypeTable*)",
    "insertText": "FindTypeByName(FName InName)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "Cast(const ICastable* BasePtr, uint32 ToType)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "Cast(const IDynamicExtension* BasePtr, uint32 ToType)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetSparseBucketIndex()",
    "kind": "Method",
    "detail": "Function (const int32 SparseTypeIndex = TypeMask .)",
    "insertText": "GetSparseBucketIndex(ToType)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } private : struct FCastableTypeTableGenerator { template<T> void)",
    "insertText": "Generate()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const int16 StartOffset = ComputeStartOffset<)",
    "insertText": "T((T*)0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (AddStaticType<)",
    "insertText": "T((T*)nullptr, StartOffset)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} FCastableTypeTable*)",
    "insertText": "Commit(uint32 TypeID, FName InName)"
  },
  {
    "label": "ClassOffsetFrom()",
    "kind": "Method",
    "detail": "Function (template<FromType,ToType> int16)",
    "insertText": "ClassOffsetFrom()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(FromType) uint8 Buffer[sizeof(FromType)"
  },
  {
    "label": "FromType()",
    "kind": "Method",
    "detail": "Function (FromType* From = reinterpret_cast<)",
    "insertText": "FromType(Buffer)"
  },
  {
    "label": "ToType()",
    "kind": "Method",
    "detail": "Function (ToType* To = static_cast<)",
    "insertText": "ToType(From)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = static_cast<)",
    "insertText": "int32((uint8*)To - (uint8*)From)"
  },
  {
    "label": "ComputeStartOffset()",
    "kind": "Method",
    "detail": "Function (} template<T> int16)",
    "insertText": "ComputeStartOffset(const ICastable*)"
  },
  {
    "label": "ComputeStartOffset()",
    "kind": "Method",
    "detail": "Function (} template<T> int16)",
    "insertText": "ComputeStartOffset(const IDynamicExtension*)"
  },
  {
    "label": "ByteSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ByteSize()"
  },
  {
    "label": "ConsumeImplements()",
    "kind": "Method",
    "detail": "Function (} template<StartClass,T,U = T::Implements> void)",
    "insertText": "ConsumeImplements(T*, int16 StartOffset)"
  },
  {
    "label": "StartClass()",
    "kind": "Method",
    "detail": "Function (ConsumeImplementsImpl<)",
    "insertText": "StartClass((typename T::Implements*)nullptr, StartOffset)"
  },
  {
    "label": "ConsumeImplements()",
    "kind": "Method",
    "detail": "Function (} template<StartClass> void)",
    "insertText": "ConsumeImplements(...)"
  },
  {
    "label": "ConsumeImplementsImpl()",
    "kind": "Method",
    "detail": "Function (} template<StartClass,. . . Types> void)",
    "insertText": "ConsumeImplementsImpl(TImplements<Types...>*, int16 StartOffset)"
  },
  {
    "label": "ConsumeImplements()",
    "kind": "Method",
    "detail": "Function (} template<StartClass,T> void)",
    "insertText": "ConsumeImplements(void*, int16 StartOffset)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<StartClass,T,U =)",
    "insertText": "decltype(T::ID)> void AddStaticType(T*, int16 StartOffset)"
  },
  {
    "label": "GetSparseBucketIndex()",
    "kind": "Method",
    "detail": "Function (int32 SparseIndex = TypeMask .)",
    "insertText": "GetSparseBucketIndex(ID.GetTypeID())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (StaticTypeOffsets .)",
    "insertText": "Insert(OffsetFromBase, SparseIndex)"
  },
  {
    "label": "AddStaticType()",
    "kind": "Method",
    "detail": "Function (} } template<StartClass> void)",
    "insertText": "AddStaticType(void*, int16 StartOffset)"
  }
]