[
  {
    "label": "FDelinquencyNameTimePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelinquencyNameTimePair"
  },
  {
    "label": "FDelinquencyKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelinquencyKeyFuncs"
  },
  {
    "label": "FDelinquencyAnalytics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelinquencyAnalytics"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FNetAsyncLoadDelinquencyAnalytics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetAsyncLoadDelinquencyAnalytics"
  },
  {
    "label": "FNetQueuedActorDelinquencyAnalytics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetQueuedActorDelinquencyAnalytics"
  },
  {
    "label": "FNetConnectionSaturationAnalytics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetConnectionSaturationAnalytics"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "FNetConnectionPacketAnalytics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetConnectionPacketAnalytics"
  },
  {
    "label": "TPacketLossData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPacketLossData"
  },
  {
    "label": "FDelinquencyNameTimePair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FDelinquencyNameTimePair { public :)",
    "insertText": "FDelinquencyNameTimePair(FName InName, float InTimeSeconds) : Name(InName) , TimeSeconds(InTimeSeconds)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FName Name ; float TimeSeconds ; } ; FString)",
    "insertText": "LexToString(const FDelinquencyNameTimePair& Value)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} struct FDelinquencyKeyFuncs : public BaseKeyFuncs<FDelinquencyNameTimePair,FDelinquencyNameTimePair,false> { KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Element)"
  },
  {
    "label": "FDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDelinquencyAnalytics { public :)",
    "insertText": "FDelinquencyAnalytics(const uint32 InNumberOfTopOffendersToTrack)"
  },
  {
    "label": "FDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDelinquencyAnalytics(FDelinquencyAnalytics&& Other)"
  },
  {
    "label": "FDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDelinquencyAnalytics(const FDelinquencyAnalytics&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FDelinquencyAnalytics&)",
    "insertText": "operator(const FDelinquencyAnalytics&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDelinquencyAnalytics&)",
    "insertText": "operator(FDelinquencyAnalytics&&)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emplace(FName Name, float TimeSeconds)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FDelinquencyNameTimePair(Name, TimeSeconds))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FDelinquencyNameTimePair&& ToTrack)"
  },
  {
    "label": "GetTopOffenders()",
    "kind": "Method",
    "detail": "Function (const TArray<FDelinquencyNameTimePair>&)",
    "insertText": "GetTopOffenders()"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(class FArchive& Ar)"
  },
  {
    "label": "FNetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (private : TArray<FDelinquencyNameTimePair> TopOffenders ; TSet<FDelinquencyNameTimePair,FDelinquencyKeyFuncs> AllDelinquents ; float TotalTime ; uint32 NumberOfTopOffendersToTrack ; } ; struct FNetAsyncLoadDelinquencyAnalytics {)",
    "insertText": "FNetAsyncLoadDelinquencyAnalytics() : DelinquentAsyncLoads(0) , MaxConcurrentAsyncLoads(0)"
  },
  {
    "label": "FNetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetAsyncLoadDelinquencyAnalytics(const uint32 NumberOfTopOffendersToTrack) : DelinquentAsyncLoads(NumberOfTopOffendersToTrack), MaxConcurrentAsyncLoads(0)"
  },
  {
    "label": "FNetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetAsyncLoadDelinquencyAnalytics(FNetAsyncLoadDelinquencyAnalytics&& Other) : DelinquentAsyncLoads(MoveTemp(Other.DelinquentAsyncLoads)), MaxConcurrentAsyncLoads(Other.MaxConcurrentAsyncLoads)"
  },
  {
    "label": "FNetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetAsyncLoadDelinquencyAnalytics(const FNetAsyncLoadDelinquencyAnalytics&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FNetAsyncLoadDelinquencyAnalytics&)",
    "insertText": "operator(const FNetAsyncLoadDelinquencyAnalytics&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetAsyncLoadDelinquencyAnalytics&)",
    "insertText": "operator(FNetAsyncLoadDelinquencyAnalytics&&)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (DelinquentAsyncLoads .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FNetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (MaxConcurrentAsyncLoads = 0 ; } FDelinquencyAnalytics DelinquentAsyncLoads ; uint32 MaxConcurrentAsyncLoads ; } ; struct FNetQueuedActorDelinquencyAnalytics {)",
    "insertText": "FNetQueuedActorDelinquencyAnalytics() : DelinquentQueuedActors(0) , MaxConcurrentQueuedActors(0)"
  },
  {
    "label": "FNetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetQueuedActorDelinquencyAnalytics(const uint32 NumberOfTopOffendersToTrack) : DelinquentQueuedActors(NumberOfTopOffendersToTrack), MaxConcurrentQueuedActors(0)"
  },
  {
    "label": "FNetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetQueuedActorDelinquencyAnalytics(FNetQueuedActorDelinquencyAnalytics&& Other) : DelinquentQueuedActors(MoveTemp(Other.DelinquentQueuedActors)), MaxConcurrentQueuedActors(Other.MaxConcurrentQueuedActors)"
  },
  {
    "label": "FNetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetQueuedActorDelinquencyAnalytics(const FNetQueuedActorDelinquencyAnalytics&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FNetQueuedActorDelinquencyAnalytics&)",
    "insertText": "operator(const FNetQueuedActorDelinquencyAnalytics&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetQueuedActorDelinquencyAnalytics&)",
    "insertText": "operator(FNetQueuedActorDelinquencyAnalytics&&)"
  },
  {
    "label": "FNetConnectionSaturationAnalytics()",
    "kind": "Method",
    "detail": "Function (MaxConcurrentQueuedActors = 0 ; } FDelinquencyAnalytics DelinquentQueuedActors ; uint32 MaxConcurrentQueuedActors ; } ; struct FNetConnectionSaturationAnalytics { public :)",
    "insertText": "FNetConnectionSaturationAnalytics() : NumberOfTrackedFrames(0) , NumberOfSaturatedFrames(0) , LongestRunOfSaturatedFrames(0) , NumberOfReplications(0) , NumberOfSaturatedReplications(0) , LongestRunOfSaturatedReplications(0) , CurrentRunOfSaturatedFrames(0) , CurrentRunOfSaturatedReplications(0)"
  },
  {
    "label": "GetNumberOfTrackedFrames()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetNumberOfTrackedFrames()"
  },
  {
    "label": "TrackFrame()",
    "kind": "Method",
    "detail": "Function (private : class UNetConnection ; void)",
    "insertText": "TrackFrame(const bool bIsSaturated)"
  },
  {
    "label": "TrackReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackReplication(const bool bIsSaturated)"
  },
  {
    "label": "FNetConnectionPacketAnalytics()",
    "kind": "Method",
    "detail": "Function (uint32 NumberOfTrackedFrames ; uint32 NumberOfSaturatedFrames ; uint32 LongestRunOfSaturatedFrames ; uint32 NumberOfReplications ; uint32 NumberOfSaturatedReplications ; uint32 LongestRunOfSaturatedReplications ; uint32 CurrentRunOfSaturatedFrames ; uint32 CurrentRunOfSaturatedReplications ; } ; struct FNetConnectionPacketAnalytics { public :)",
    "insertText": "FNetConnectionPacketAnalytics() : bSawPacketLossBurstThisFrame(false) , NumberOfAcksThisFrame(0) , NumberOfNaksThisFrame(0) , NumberOfMissingPacketsThisFrame(0) , NumberOfPacketsThisFrame(0) , CurrentRunOfDroppedOutPackets(0) , LongestRunOfDroppedOutPackets(0) , LongestRunOfDroppedInPackets(0) , NumberOfFramesWithBurstsOfPacketLoss(0) , NumberOfFramesWithNoPackets(0) , NumberOfTrackedFrames(0)"
  },
  {
    "label": "GetLongestRunOfDroppedInPackets()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetLongestRunOfDroppedInPackets()"
  },
  {
    "label": "TrackAck()",
    "kind": "Method",
    "detail": "Function (private : class UNetConnection ; void)",
    "insertText": "TrackAck(int32 PacketId)"
  },
  {
    "label": "TrackNak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackNak(int32 PacketId)"
  },
  {
    "label": "TrackInPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackInPacket(uint32 InPacketId, uint32 NumberOfMissingPackets)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "GetLossPercentage()",
    "kind": "Method",
    "detail": "Function (bool bSawPacketLossBurstThisFrame : 1 ; uint32 NumberOfAcksThisFrame ; uint32 NumberOfNaksThisFrame ; uint32 NumberOfMissingPacketsThisFrame ; uint32 NumberOfPacketsThisFrame ; uint32 CurrentRunOfDroppedOutPackets ; uint32 LongestRunOfDroppedOutPackets ; uint32 LongestRunOfDroppedInPackets ; uint32 NumberOfFramesWithBurstsOfPacketLoss ; uint32 NumberOfFramesWithNoPackets ; uint64 NumberOfTrackedFrames ; } ; template<uint32 NbPeriodsForAverage> struct TPacketLossData { public : float)",
    "insertText": "GetLossPercentage()"
  },
  {
    "label": "PacketsDuringLastPeriod()",
    "kind": "Method",
    "detail": "Function (const int32 PacketsDuringLastPeriod = TotalPackets - TotalPacketsAtPeriodStart ; LossPercentage =)",
    "insertText": "PacketsDuringLastPeriod((float)NbPacketsLost / (float)PacketsDuringLastPeriod)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 SampleIndex = SampleCount % NbPeriodsForAverage ; LossSamples [ SampleIndex ] = LossPercentage ; float RollingAverage = 0 . 0 f ;)",
    "insertText": "for(float LossSample : LossSamples)"
  }
]