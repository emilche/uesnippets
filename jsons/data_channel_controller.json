[
  {
    "label": "PeerConnectionInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionInternal"
  },
  {
    "label": "DataChannelController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataChannelController"
  },
  {
    "label": "DataChannelController()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_DATA_CHANNEL_CONTROLLER_H_ # define PC_DATA_CHANNEL_CONTROLLER_H_ # include<string> # include<vector> # include \" api / data_channel_interface . h \" # include \" api / rtc_error . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / transport / data_channel_transport_interface . h \" # include \" media / base / media_channel . h \" # include \" pc / data_channel_utils . h \" # include \" pc / sctp_data_channel . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_base / weak_ptr . h \" namespace webrtc { class PeerConnectionInternal ; class DataChannelController : public SctpDataChannelControllerInterface,public DataChannelSink { public :)",
    "insertText": "DataChannelController(PeerConnectionInternal* pc) : pc_(pc)"
  },
  {
    "label": "DataChannelController()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DataChannelController()"
  },
  {
    "label": "DataChannelController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataChannelController(DataChannelController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DataChannelController&)",
    "insertText": "operator(const DataChannelController& other)"
  },
  {
    "label": "DataChannelController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataChannelController(DataChannelController&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DataChannelController&)",
    "insertText": "operator(DataChannelController&& other)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendData(int sid, const SendDataParams& params, const rtc::CopyOnWriteBuffer& payload, cricket::SendDataResult* result)"
  },
  {
    "label": "ConnectDataChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectDataChannel(SctpDataChannel* webrtc_data_channel)"
  },
  {
    "label": "DisconnectDataChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectDataChannel(SctpDataChannel* webrtc_data_channel)"
  },
  {
    "label": "AddSctpDataStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSctpDataStream(int sid)"
  },
  {
    "label": "RemoveSctpDataStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSctpDataStream(int sid)"
  },
  {
    "label": "ReadyToSendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToSendData()"
  },
  {
    "label": "OnDataReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataReceived(int channel_id, DataMessageType type, const rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "OnChannelClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChannelClosing(int channel_id)"
  },
  {
    "label": "OnChannelClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChannelClosed(int channel_id)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend()"
  },
  {
    "label": "OnTransportClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportClosed(RTCError error)"
  },
  {
    "label": "SetupDataChannelTransport_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDataChannelTransport_n()"
  },
  {
    "label": "TeardownDataChannelTransport_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownDataChannelTransport_n()"
  },
  {
    "label": "OnTransportChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportChanged(DataChannelTransportInterface* data_channel_transport)"
  },
  {
    "label": "GetDataChannelStats()",
    "kind": "Method",
    "detail": "Function (std::vector<DataChannelStats>)",
    "insertText": "GetDataChannelStats()"
  },
  {
    "label": "InternalCreateDataChannelWithProxy()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<DataChannelInterface>)",
    "insertText": "InternalCreateDataChannelWithProxy(const std::string& label, const InternalDataChannelInit* config)"
  },
  {
    "label": "AllocateSctpSids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateSctpSids(rtc::SSLRole role)"
  },
  {
    "label": "HasDataChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDataChannels()"
  },
  {
    "label": "HasSctpDataChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSctpDataChannels()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread())"
  },
  {
    "label": "data_channel_transport()",
    "kind": "Method",
    "detail": "Function (} DataChannelTransportInterface*)",
    "insertText": "data_channel_transport()"
  },
  {
    "label": "set_data_channel_transport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_data_channel_transport(DataChannelTransportInterface* transport)"
  },
  {
    "label": "SignalSctpDataChannelCreated()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<SctpDataChannel*>&)",
    "insertText": "SignalSctpDataChannelCreated()"
  },
  {
    "label": "OnSctpDataChannelClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSctpDataChannelClosed(SctpDataChannel* channel)"
  },
  {
    "label": "InternalCreateSctpDataChannel()",
    "kind": "Method",
    "detail": "Function (private : rtc::scoped_refptr<SctpDataChannel>)",
    "insertText": "InternalCreateSctpDataChannel(const std::string& label, const InternalDataChannelInit* config)"
  },
  {
    "label": "HandleOpenMessage_s()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleOpenMessage_s(const cricket::ReceiveDataParams& params, const rtc::CopyOnWriteBuffer& buffer) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnDataChannelOpenMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataChannelOpenMessage(const std::string& label, const InternalDataChannelInit& config) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "DataChannelSendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DataChannelSendData(int sid, const SendDataParams& params, const rtc::CopyOnWriteBuffer& payload, cricket::SendDataResult* result)"
  },
  {
    "label": "NotifyDataChannelsOfTransportCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDataChannelsOfTransportCreated()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "signaling_thread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "signaling_thread()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (DataChannelTransportInterface* data_channel_transport_ = nullptr ; bool data_channel_transport_ready_to_send_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread())"
  }
]