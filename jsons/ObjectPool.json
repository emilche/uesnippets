[
  {
    "label": "TObjectPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectPool"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlock"
  },
  {
    "label": "TObjectPoolDeleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectPoolDeleter"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Templates / AlignmentTemplates . h \" # include \" Templates / UnrealTemplate . h \" namespace Chaos { template<T> using TRequiresDestructor = std::enable_if_t<! std::is_trivially_destructible_v<T>> ; template<T> using TTrivialDestruct = std::enable_if_t<std::is_trivially_destructible_v<T>> ; template<ObjectType> class TObjectPool { public : int32 ItemAlign =)",
    "insertText": "alignof(ObjectType)"
  },
  {
    "label": "TObjectPool()",
    "kind": "Method",
    "detail": "Function (using FObject = ObjectType ; using FPtr = ObjectType* ;)",
    "insertText": "TObjectPool(int32 InNumPerBlock, int32 InitialBlocks = 1) : NumPerBlock(InNumPerBlock)"
  },
  {
    "label": "ReserveBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveBlocks(InitialBlocks)"
  },
  {
    "label": "TObjectPool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TObjectPool()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "TObjectPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TObjectPool(const TObjectPool&)"
  },
  {
    "label": "TObjectPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TObjectPool(TObjectPool&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TObjectPool&)",
    "insertText": "operator(const TObjectPool&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TObjectPool&)",
    "insertText": "operator(TObjectPool&&)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (template<. . . TArgs> FPtr)",
    "insertText": "Alloc(TArgs&&... Args)"
  },
  {
    "label": "AddBlock()",
    "kind": "Method",
    "detail": "Function (ObjectType* NewPtr =)",
    "insertText": "AddBlock().GetNextFree()"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (Construct<)",
    "insertText": "ObjectType(NewPtr, Forward<TArgs>(Args)...)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (- - FreeCount ; return NewPtr ; })",
    "insertText": "check(Blocks.Num() > 0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 SelectedIndex = INDEX_NONE ; int32 SelectedNumFree = TNumericLimits<int32)",
    "insertText": "Max()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 BlockNumFree = Blocks [ Index ] . NumFree ;)",
    "insertText": "if((BlockNumFree > 0) && (BlockNumFree < SelectedNumFree))"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (SelectedNumFree = BlockNumFree ; SelectedIndex = Index ; } })",
    "insertText": "checkf(SelectedIndex != INDEX_NONE, TEXT(\"Could not find an empty block\"))"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Blocks[0], Blocks[SelectedIndex])"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "GetNextFree()",
    "kind": "Method",
    "detail": "Function (ObjectType* NewPtr = Blocks [ 0 ] .)",
    "insertText": "GetNextFree()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (- - FreeCount ; return NewPtr ; } void)",
    "insertText": "Free(FPtr Object)"
  },
  {
    "label": "FindBlock()",
    "kind": "Method",
    "detail": "Function (int32 BlockIndex =)",
    "insertText": "FindBlock(Object)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (Blocks [ BlockIndex ] .)",
    "insertText": "Free(Object)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} FreeCount = Blocks .)",
    "insertText": "Num()"
  },
  {
    "label": "GetNumAllocatedBlocks()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumAllocatedBlocks()"
  },
  {
    "label": "GetNumPerBlock()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPerBlock()"
  },
  {
    "label": "ShrinkTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShrinkTo(int32 NumDesiredEmptyBlocks)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 CurrentNumEmpty = 0 ; int32 Index = 0 ;)",
    "insertText": "while(Index < Blocks.Num())"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (+ + CurrentNumEmpty ; } else { Blocks .)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "ReserveBlocks()",
    "kind": "Method",
    "detail": "Function (continue ; } } + + Index ; } } void)",
    "insertText": "ReserveBlocks(int32 NumBlocks)"
  },
  {
    "label": "AddBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBlock()"
  },
  {
    "label": "ReserveItems()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReserveItems(int32 NumItems)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 ItemsSize = NumItems* PaddedItemSize ; const int32 BlockSize = NumPerBlock* PaddedItemSize ; const int32 NumBlocks =)",
    "insertText": "int32(FMath::CeilToInt(static_cast<double>(ItemsSize) / BlockSize))"
  },
  {
    "label": "ReserveBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveBlocks(NumBlocks)"
  },
  {
    "label": "GetRatio()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetRatio()"
  },
  {
    "label": "GetNumAllocated()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumAllocated()"
  },
  {
    "label": "GetNumFree()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumFree()"
  },
  {
    "label": "TItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TItem() : NextFree(INDEX_NONE)"
  },
  {
    "label": "SetLive()",
    "kind": "Method",
    "detail": "Function (} ObjectType Object ; int32 NextFree ; void)",
    "insertText": "SetLive(bool)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} } ; template<T_> struct)",
    "insertText": "alignas(ItemAlign)"
  },
  {
    "label": "SetLive()",
    "kind": "Method",
    "detail": "Function (} ObjectType Object ; int32 NextFree ; bool bLive : 1 ; void)",
    "insertText": "SetLive(bool bInLive)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (bLive = bInLive ; } } ; using FItem = TItem<ObjectType> ; int32 PaddedItemSize =)",
    "insertText": "Align(int32(sizeof(FItem)), ItemAlign)"
  },
  {
    "label": "FBlock()",
    "kind": "Method",
    "detail": "Function (struct FBlock {)",
    "insertText": "FBlock()"
  },
  {
    "label": "FBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlock(int32 InNum) : Begin(static_cast<FItem*>(FMemory::Malloc(PaddedItemSize * InNum, ItemAlign))) , Next(Begin) , NumInBlock(InNum) , NumFree(NumInBlock)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Begin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FItem* NewItem = Begin + FreeList ; FreeList = NewItem -> NextFree ; NewItem -> NextFree = INDEX_NONE ; - - NumFree ; return& NewItem -> Object ; })",
    "insertText": "if(NumValid < NumInBlock)"
  },
  {
    "label": "SetLive()",
    "kind": "Method",
    "detail": "Function (FItem* NewItem = Next + + ; NewItem -> NextFree = INDEX_NONE ; NewItem ->)",
    "insertText": "SetLive(false)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (- - NumFree ; + + NumValid ; return& NewItem -> Object ; })",
    "insertText": "checkf(false, TEXT(\"Attempt to request a free item from a full block (Freelist is empty, NumValid is %d, NumInBlock is %d, NumFree is %d)\"), NumValid, NumInBlock, NumFree)"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (ConditionalDestruct<)",
    "insertText": "ObjectType(Object)"
  },
  {
    "label": "FItem()",
    "kind": "Method",
    "detail": "Function (FItem* const AsItem = reinterpret_cast<)",
    "insertText": "FItem(Object)"
  },
  {
    "label": "UPTRINT()",
    "kind": "Method",
    "detail": "Function (const UPTRINT Offset = reinterpret_cast<)",
    "insertText": "UPTRINT(AsItem) - reinterpret_cast<UPTRINT>(Begin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const UPTRINT IndexInBlock = Offset / PaddedItemSize ;)",
    "insertText": "if(FreeList != INDEX_NONE)"
  },
  {
    "label": "FreeList()",
    "kind": "Method",
    "detail": "Function (AsItem -> NextFree = FreeList ; })",
    "insertText": "FreeList(int32)"
  },
  {
    "label": "DestructAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructAll()"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (FItem* ToDestroy = Begin + i ; ConditionalDestruct<)",
    "insertText": "ObjectType(&ToDestroy->Object)"
  },
  {
    "label": "Owns()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Owns(ObjectType* InPtr)"
  },
  {
    "label": "FItem()",
    "kind": "Method",
    "detail": "Function (FItem* AsItem = reinterpret_cast<)",
    "insertText": "FItem(InPtr)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Blocks .)",
    "insertText": "Emplace(NumPerBlock)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (Capacity + = NumPerBlock ; FreeCount + = NumPerBlock ; return Blocks .)",
    "insertText": "Last()"
  },
  {
    "label": "FindBlock()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindBlock(ObjectType* InPtr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(At) ObjectType(Forward<TArgs>(Args)...)"
  },
  {
    "label": "FItem()",
    "kind": "Method",
    "detail": "Function (FItem* AsItem = reinterpret_cast<)",
    "insertText": "FItem(At)"
  },
  {
    "label": "ConditionalDestruct()",
    "kind": "Method",
    "detail": "Function (AsItem -> bLive = true ; return At ; } template<ObjectType_ = ObjectType,TRequiresDestructor<ObjectType_>* = nullptr> void)",
    "insertText": "ConditionalDestruct(ObjectType* At)"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (At -> ~)",
    "insertText": "ObjectType()"
  },
  {
    "label": "ConditionalDestruct()",
    "kind": "Method",
    "detail": "Function (AsItem -> bLive = false ; } } template<ObjectType_ = ObjectType,TTrivialDestruct<ObjectType_>* = nullptr> void)",
    "insertText": "ConditionalDestruct(ObjectType*)"
  },
  {
    "label": "TObjectPoolDeleter()",
    "kind": "Method",
    "detail": "Function (} TArray<FBlock> Blocks ; int32 NumPerBlock = 0 ; int32 Capacity = 0 ; int32 FreeCount = 0 ; } ; template<ObjectPoolType> class TObjectPoolDeleter { public : using FObjectPool = ObjectPoolType ; using FObject = FObjectPool::FObject ;)",
    "insertText": "TObjectPoolDeleter() : Pool(nullptr)"
  },
  {
    "label": "TObjectPoolDeleter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObjectPoolDeleter(FObjectPool& InPool) : Pool(&InPool)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(FObject* Object)"
  }
]