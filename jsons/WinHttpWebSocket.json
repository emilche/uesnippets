[
  {
    "label": "FWinHttpConnectionWebSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpConnectionWebSocket"
  },
  {
    "label": "FWinHttpSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpSession"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWinHttpWebSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpWebSocket"
  },
  {
    "label": "FWinHttpWebSocketsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpWebSocketsManager"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_WEBSOCKETS&& WITH_WINHTTPWEBSOCKETS # include \" CoreMinimal . h \" # include \" IWebSocket . h \" class FWinHttpConnectionWebSocket ; class FWinHttpSession ; enum class EWebSocketMessageType : uint8 ; enum class EWebSocketConnectionState : uint8 { NotStarted,Connecting,Connected,FailedToConnect,Disconnected,Closed } ; const TCHAR*)",
    "insertText": "LexToString(const EWebSocketConnectionState)"
  },
  {
    "label": "FWinHttpWebSocket()",
    "kind": "Method",
    "detail": "Function (class FWinHttpWebSocket : public IWebSocket,public TSharedFromThis<FWinHttpWebSocket> { public :)",
    "insertText": "FWinHttpWebSocket(const FString& Url, const TArray<FString>& Protocols, const TMap<FString, FString>& UpgradeHeaders)"
  },
  {
    "label": "FWinHttpWebSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWinHttpWebSocket()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(const int32 Code = 1000, const FString& Reason = FString())"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(const FString& Data)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(const void* Data, SIZE_T Size, bool bIsBinary)"
  },
  {
    "label": "SetTextMessageMemoryLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextMessageMemoryLimit(uint64 TextMessageMemoryLimit)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FWinHttpWebSocket, IWebSocket::FWebSocketConnectedEvent, FWebSocketConnectedEvent)"
  },
  {
    "label": "OnConnected()",
    "kind": "Method",
    "detail": "Function (FWebSocketConnectedEvent&)",
    "insertText": "OnConnected()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FWinHttpWebSocket, IWebSocket::FWebSocketConnectionErrorEvent, FWebSocketConnectionErrorEvent)"
  },
  {
    "label": "OnConnectionError()",
    "kind": "Method",
    "detail": "Function (FWebSocketConnectionErrorEvent&)",
    "insertText": "OnConnectionError()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FWinHttpWebSocket, IWebSocket::FWebSocketClosedEvent, FWebSocketClosedEvent)"
  },
  {
    "label": "OnClosed()",
    "kind": "Method",
    "detail": "Function (FWebSocketClosedEvent&)",
    "insertText": "OnClosed()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FWinHttpWebSocket, IWebSocket::FWebSocketMessageEvent, FWebSocketMessageEvent)"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (FWebSocketMessageEvent&)",
    "insertText": "OnMessage()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FWinHttpWebSocket, IWebSocket::FWebSocketRawMessageEvent, FWebSocketRawMessageEvent)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FWinHttpWebSocket, IWebSocket::FWebSocketBinaryMessageEvent, FWebSocketBinaryMessageEvent)"
  },
  {
    "label": "OnBinaryMessage()",
    "kind": "Method",
    "detail": "Function (FWebSocketBinaryMessageEvent&)",
    "insertText": "OnBinaryMessage()"
  },
  {
    "label": "OnRawMessage()",
    "kind": "Method",
    "detail": "Function (FWebSocketRawMessageEvent&)",
    "insertText": "OnRawMessage()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FWinHttpWebSocket, IWebSocket::FWebSocketMessageSentEvent, FWebSocketMessageSentEvent)"
  },
  {
    "label": "OnMessageSent()",
    "kind": "Method",
    "detail": "Function (FWebSocketMessageSentEvent&)",
    "insertText": "OnMessageSent()"
  },
  {
    "label": "HandleSessionCreated()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "HandleSessionCreated(FWinHttpSession* HttpSessionPtr)"
  },
  {
    "label": "HandleCloseComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCloseComplete(const EWebSocketConnectionState NewState, const uint16 Code, const FString& Reason)"
  },
  {
    "label": "GameThreadTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThreadTick()"
  },
  {
    "label": "HandleWebSocketConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWebSocketConnected()"
  },
  {
    "label": "HandleWebSocketMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWebSocketMessage(EWebSocketMessageType MessageType, TArray<uint8>& MessagePayload)"
  },
  {
    "label": "HandleWebSocketClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWebSocketClosed(uint16 Code, const FString& Reason, bool bGracefulDisconnect)"
  }
]