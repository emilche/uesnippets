[
  {
    "label": "LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LOCKABLE"
  },
  {
    "label": "SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCOPED_LOCKABLE"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_COMMON_CHECKED_LOCK_H_ # define BASE_TASK_COMMON_CHECKED_LOCK_H_ # include<memory> # include \" base / check_op . h \" # include \" base / dcheck_is_on . h \" # include \" base / synchronization / condition_variable . h \" # include \" base / synchronization / lock . h \" # include \" base / task / common / checked_lock_impl . h \" # include \" base / thread_annotations . h \" namespace base { namespace internal { # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "CheckedLock()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CheckedLock()"
  },
  {
    "label": "CheckedLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckedLock(const CheckedLock* predecessor) : CheckedLockImpl(predecessor)"
  },
  {
    "label": "CheckedLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckedLock(UniversalPredecessor universal_predecessor) : CheckedLockImpl(universal_predecessor)"
  },
  {
    "label": "CheckedLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckedLock(UniversalSuccessor universal_successor) : CheckedLockImpl(universal_successor)"
  },
  {
    "label": "CheckedLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckedLock(const CheckedLock*)"
  },
  {
    "label": "CheckedLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckedLock(UniversalPredecessor)"
  },
  {
    "label": "CheckedLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckedLock(UniversalSuccessor)"
  },
  {
    "label": "AssertNoLockHeldOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssertNoLockHeldOnCurrentThread()"
  },
  {
    "label": "CreateConditionVariable()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<ConditionVariable>)",
    "insertText": "CreateConditionVariable()"
  },
  {
    "label": "AnnotateAcquiredLockAlias()",
    "kind": "Method",
    "detail": "Function (} } ; # endif using CheckedAutoLock = internal::BasicAutoLock<CheckedLock> ; using CheckedAutoUnlock = internal::BasicAutoUnlock<CheckedLock> ; using CheckedAutoLockMaybe = internal::BasicAutoLockMaybe<CheckedLock> ; class SCOPED_LOCKABLE AnnotateAcquiredLockAlias { public :)",
    "insertText": "AnnotateAcquiredLockAlias(const CheckedLock& acquired_lock, const CheckedLock& lock_alias) EXCLUSIVE_LOCK_FUNCTION(lock_alias) : acquired_lock_(acquired_lock)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(&acquired_lock, &lock_alias)"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (acquired_lock_ .)",
    "insertText": "AssertAcquired()"
  },
  {
    "label": "AnnotateAcquiredLockAlias()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnnotateAcquiredLockAlias(const AnnotateAcquiredLockAlias&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AnnotateAcquiredLockAlias&)",
    "insertText": "operator(const AnnotateAcquiredLockAlias&)"
  },
  {
    "label": "AnnotateAcquiredLockAlias()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AnnotateAcquiredLockAlias() UNLOCK_FUNCTION()"
  }
]