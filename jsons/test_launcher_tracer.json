[
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "TestLauncherTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLauncherTracer"
  },
  {
    "label": "Event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Event"
  },
  {
    "label": "TestLauncherTracer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_LAUNCHER_TEST_LAUNCHER_TRACER_H_ # define BASE_TEST_LAUNCHER_TEST_LAUNCHER_TRACER_H_ # include<string> # include<vector> # include \" base / synchronization / lock . h \" # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" namespace base { class FilePath ; class TestLauncherTracer { public :)",
    "insertText": "TestLauncherTracer()"
  },
  {
    "label": "TestLauncherTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestLauncherTracer(const TestLauncherTracer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestLauncherTracer&)",
    "insertText": "operator(const TestLauncherTracer&)"
  },
  {
    "label": "RecordProcessExecution()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecordProcessExecution(TimeTicks start_time, TimeDelta duration)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Dump(const FilePath& path)"
  }
]