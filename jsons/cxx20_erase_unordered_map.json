[
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "KeyEqual",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyEqual"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "EraseIf()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_CXX20_ERASE_UNORDERED_MAP_H_ # define BASE_CONTAINERS_CXX20_ERASE_UNORDERED_MAP_H_ # include<unordered_map> # include \" base / containers / cxx20_erase_internal . h \" namespace base { template<class Key,class T,class Hash,class KeyEqual,class Allocator,class Predicate> size_t)",
    "insertText": "EraseIf(std::unordered_map<Key, T, Hash, KeyEqual, Allocator>& container, Predicate pred)"
  },
  {
    "label": "EraseIf()",
    "kind": "Method",
    "detail": "Function (} template<class Key,class T,class Hash,class KeyEqual,class Allocator,class Predicate> size_t)",
    "insertText": "EraseIf(std::unordered_multimap<Key, T, Hash, KeyEqual, Allocator>& container, Predicate pred)"
  }
]