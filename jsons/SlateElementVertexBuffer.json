[
  {
    "label": "TSlateElementVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlateElementVertexBuffer"
  },
  {
    "label": "FSlateStencilClipVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateStencilClipVertexBuffer"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Rendering / RenderingCommon . h \" # include \" SlateGlobals . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIResourceUtils . h \" # include \" RenderResource . h \" # include \" Containers / ResourceArray . h \")",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Vertex Buffer Memory (GPU)\"), STAT_SlateVertexBufferMemory, STATGROUP_SlateMemory,)"
  },
  {
    "label": "TSlateElementVertexBuffer()",
    "kind": "Method",
    "detail": "Function (template<VertexType> class TSlateElementVertexBuffer : public FVertexBuffer { public :)",
    "insertText": "TSlateElementVertexBuffer() : BufferSize(0) , MinBufferSize(0) , BufferUsageSize(0)"
  },
  {
    "label": "TSlateElementVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TSlateElementVertexBuffer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Init(int32 MinNumVertices)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (MinBufferSize =)",
    "insertText": "sizeof(VertexType) * FMath::Max( MinNumVertices, 100)"
  },
  {
    "label": "InitResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResource(FRHICommandListImmediate::Get())"
  },
  {
    "label": "BeginInitResource()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "BeginInitResource(this)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Destroy()"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "BeginReleaseResource()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "BeginReleaseResource(this)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"SlateElementVertices\"))"
  },
  {
    "label": "CreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (VertexBufferRHI = RHICmdList .)",
    "insertText": "CreateVertexBuffer(MinBufferSize, BUF_Dynamic, CreateInfo)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (VertexBufferRHI .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "SetBufferSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferSize(0)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "PreFillBuffer()",
    "kind": "Method",
    "detail": "Function (BufferUsageSize = 0 ; } void)",
    "insertText": "PreFillBuffer(FRHICommandListBase& RHICmdList, int32 RequiredVertexCount, bool bShrinkToMinSize)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_SlatePreFullBufferTime)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if ! SLATE_USE_32BIT_INDICES)",
    "insertText": "checkf(RequiredVertexCount < 0xFFFF, TEXT(\"Slate vertex buffer is too large (%d) to work with uint16 indices\"), RequiredVertexCount)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# endif int32 RequiredBufferSize = RequiredVertexCount*)",
    "insertText": "sizeof(VertexType)"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeBuffer(RHICmdList, RequiredBufferSize)"
  },
  {
    "label": "GetMinBufferSize()",
    "kind": "Method",
    "detail": "Function (} BufferUsageSize = RequiredBufferSize ; } } int32)",
    "insertText": "GetMinBufferSize()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(Slate_RTResizeBuffer)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 FinalSize =)",
    "insertText": "Max(NewSizeBytes, MinBufferSize)"
  },
  {
    "label": "CreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (VertexBufferRHI = RHICmdList .)",
    "insertText": "CreateVertexBuffer(FinalSize, BUF_Dynamic, CreateInfo)"
  },
  {
    "label": "SetBufferSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferSize(FinalSize)"
  },
  {
    "label": "SetBufferSize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBufferSize(int32 NewBufferSize)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_SlateVertexBufferMemory, BufferSize)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (BufferSize = NewBufferSize ;)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_SlateVertexBufferMemory, BufferSize)"
  },
  {
    "label": "TSlateElementVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} private : int32 BufferSize ; int32 MinBufferSize ; int32 BufferUsageSize ;)",
    "insertText": "TSlateElementVertexBuffer(const TSlateElementVertexBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TSlateElementVertexBuffer&)"
  },
  {
    "label": "FSlateStencilClipVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateStencilClipVertexBuffer : public FVertexBuffer { public :)",
    "insertText": "FSlateStencilClipVertexBuffer()"
  },
  {
    "label": "CreateVertexBufferFromArray()",
    "kind": "Method",
    "detail": "Function (const uint32 Verts [ ] = { 0,1,2,3 } ; VertexBufferRHI = UE::)",
    "insertText": "CreateVertexBufferFromArray(RHICmdList, TEXT(\"SlateStencilClipVertexBuffer\"), EBufferUsageFlags::Static, MakeConstArrayView(Verts))"
  }
]