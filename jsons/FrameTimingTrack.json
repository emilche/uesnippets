[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTimingEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEvent"
  },
  {
    "label": "FTimingEventSearchParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventSearchParameters"
  },
  {
    "label": "FFrameTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameTimingTrack"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FFrameTimingViewCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameTimingViewCommands"
  },
  {
    "label": "FFrameSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameSharedState"
  },
  {
    "label": "FFrameTimingViewCommands()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Framework / Commands / Commands . h \" # include \" TraceServices / Model / Frames . h \" # include \" Insights / ITimingViewExtender . h \" # include \" Insights / ViewModels / TimingEventSearch . h \" # include \" Insights / ViewModels / TimingEventsTrack . h \" # include \" Insights / ViewModels / TrackHeader . h \" struct FSlateBrush ; class FTimingEvent ; class FTimingEventSearchParameters ; namespace UE::Insights::TimingProfiler { class FFrameTimingTrack ; class STimingView ; class FFrameTimingViewCommands : public TCommands<FFrameTimingViewCommands> { public :)",
    "insertText": "FFrameTimingViewCommands()"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "FFrameSharedState()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<FUICommandInfo> ShowHideAllFrameTracks ; } ; class FFrameSharedState : public Timing::ITimingViewExtender,public TSharedFromThis<FFrameSharedState> { public :)",
    "insertText": "FFrameSharedState(STimingView* InTimingView) : TimingView(InTimingView)"
  },
  {
    "label": "FFrameSharedState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFrameSharedState()"
  },
  {
    "label": "GetFrameTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFrameTimingTrack>)",
    "insertText": "GetFrameTrack(uint32 InFrameType)"
  },
  {
    "label": "IsFrameTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFrameTrackVisible(uint32 InFrameType)"
  },
  {
    "label": "OnBeginSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "OnEndSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(Timing::ITimingViewSession& InSession, const TraceServices::IAnalysisSession& InAnalysisSession)"
  },
  {
    "label": "ExtendOtherTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendOtherTracksFilterMenu(Timing::ITimingViewSession& InSession, FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "IsAllFrameTracksToggleOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllFrameTracksToggleOn()"
  },
  {
    "label": "ShowAllFrameTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllFrameTracks()"
  },
  {
    "label": "SetAllFrameTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllFrameTracksToggle(true)"
  },
  {
    "label": "HideAllFrameTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideAllFrameTracks()"
  },
  {
    "label": "SetAllFrameTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllFrameTracksToggle(false)"
  },
  {
    "label": "ShowHideAllFrameTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowHideAllFrameTracks()"
  },
  {
    "label": "SetAllFrameTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllFrameTracksToggle(!IsAllFrameTracksToggleOn())"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} private : STimingView* TimingView ; bool bShowHideAllFrameTracks ; TMap<uint32,TSharedPtr<FFrameTimingTrack>> FrameTracks ; } ; class FFrameTimingTrack : public FTimingEventsTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FFrameTimingTrack, FTimingEventsTrack) public: explicit FFrameTimingTrack(FFrameSharedState& InSharedState, const FString& InName, uint32 InFrameType) : FTimingEventsTrack(InName) , FrameType(InFrameType) , Header(*this)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FFrameTimingTrack()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFrameTimingTrack()"
  },
  {
    "label": "GetFrameType()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetFrameType()"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Expand()"
  },
  {
    "label": "SetIsCollapsed()",
    "kind": "Method",
    "detail": "Function (Header .)",
    "insertText": "SetIsCollapsed(false)"
  },
  {
    "label": "Collapse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Collapse()"
  },
  {
    "label": "SetIsCollapsed()",
    "kind": "Method",
    "detail": "Function (Header .)",
    "insertText": "SetIsCollapsed(true)"
  },
  {
    "label": "ToggleCollapsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleCollapsed()"
  },
  {
    "label": "GetShortFrameName()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetShortFrameName(const uint64 FrameIndex)"
  },
  {
    "label": "GetFrameName()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetFrameName(const uint64 FrameIndex)"
  },
  {
    "label": "GetCompleteFrameName()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetCompleteFrameName(const uint64 FrameIndex, const double FrameDuration)"
  },
  {
    "label": "BuildDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "BuildFilteredDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFilteredDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "PostDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDraw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "SearchEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "SearchEvent(const FTimingEventSearchParameters& InSearchParameters)"
  },
  {
    "label": "OnEventSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEventSelected(const ITimingEvent& InSelectedEvent)"
  },
  {
    "label": "OnClipboardCopyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClipboardCopyEvent(const ITimingEvent& InSelectedEvent)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "DrawSelectedEventInfo()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DrawSelectedEventInfo(const FTimingEvent& SelectedEvent, const FTimingTrackViewport& Viewport, const FDrawContext& DrawContext, const FSlateBrush* WhiteBrush, const FSlateFontInfo& Font)"
  },
  {
    "label": "FindFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFrame(const FTimingEvent& InTimingEvent, TFunctionRef<void(double, double, uint32, const TraceServices::FFrame&)> InFoundPredicate)"
  },
  {
    "label": "FindFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFrame(const FTimingEventSearchParameters& InParameters, TFunctionRef<void(double, double, uint32, const TraceServices::FFrame&)> InFoundPredicate)"
  }
]