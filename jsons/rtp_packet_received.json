[
  {
    "label": "RtpPacketReceived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketReceived"
  },
  {
    "label": "RtpPacketReceived()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_PACKET_RECEIVED_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_PACKET_RECEIVED_H_ # include<stdint . h> # include<utility> # include \" api / array_view . h \" # include \" api / ref_counted_base . h \" # include \" api / rtp_headers . h \" # include \" api / scoped_refptr . h \" # include \" api / units / timestamp . h \" # include \" modules / rtp_rtcp / source / rtp_packet . h \" namespace webrtc { class RtpPacketReceived : public RtpPacket { public :)",
    "insertText": "RtpPacketReceived()"
  },
  {
    "label": "RtpPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketReceived(const ExtensionManager* extensions, webrtc::Timestamp arrival_time = webrtc::Timestamp::MinusInfinity())"
  },
  {
    "label": "RtpPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketReceived(const RtpPacketReceived& packet)"
  },
  {
    "label": "RtpPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketReceived(RtpPacketReceived&& packet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketReceived&)",
    "insertText": "operator(const RtpPacketReceived& packet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketReceived&)",
    "insertText": "operator(RtpPacketReceived&& packet)"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeader(RTPHeader* header)"
  },
  {
    "label": "arrival_time()",
    "kind": "Method",
    "detail": "Function (webrtc::Timestamp)",
    "insertText": "arrival_time()"
  },
  {
    "label": "recovered()",
    "kind": "Method",
    "detail": "Function (arrival_time_ = time ; } bool)",
    "insertText": "recovered()"
  },
  {
    "label": "payload_type_frequency()",
    "kind": "Method",
    "detail": "Function (recovered_ = value ; } int)",
    "insertText": "payload_type_frequency()"
  },
  {
    "label": "additional_data()",
    "kind": "Method",
    "detail": "Function (payload_type_frequency_ = value ; } rtc::scoped_refptr<rtc::RefCountedBase>)",
    "insertText": "additional_data()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (additional_data_ =)",
    "insertText": "move(data)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (} private : webrtc::Timestamp arrival_time_ =)",
    "insertText": "MinusInfinity()"
  }
]