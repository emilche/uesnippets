[
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNode_SkeletalControlBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SkeletalControlBase"
  },
  {
    "label": "HActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HActor"
  },
  {
    "label": "ANIMGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMGRAPH_API"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "ValueType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueType"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BonePose . h \" # include \" AnimGraphNode_Base . h \" # include \" AnimGraphNode_SkeletalControlBase . generated . h \" class FCompilerResultsLog ; class USkeletalMeshComponent ; struct FAnimNode_SkeletalControlBase ; struct HActor ;)",
    "insertText": "UCLASS(Abstract)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual FLinearColor GetNodeTitleColor()"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "ShowVisualWarning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowVisualWarning()"
  },
  {
    "label": "GetVisualWarningTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetVisualWarningTooltipText()"
  },
  {
    "label": "GetNodeCategory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNodeCategory()"
  },
  {
    "label": "CreateOutputPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOutputPins()"
  },
  {
    "label": "ValidateAnimNodePostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAnimNodePostCompile(FCompilerResultsLog& MessageLog, UAnimBlueprintGeneratedClass* CompiledClass, int32 CompiledNodeIndex)"
  },
  {
    "label": "CustomizePinData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizePinData(UEdGraphPin* Pin, FName SourcePropertyName, int32 ArrayIndex)"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "CopyNodeDataToPreviewNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyNodeDataToPreviewNode(OutAnimNode)"
  },
  {
    "label": "IsPinShown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPinShown(const FName PinName)"
  },
  {
    "label": "SetDefaultValue()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetDefaultValue(const FName InDefaultValueName, const FVector& InValue)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultValue(const FName UpdateDefaultValueName, FVector& OutVec)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultValue(const FName PropName, FRotator& OutValue)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (FVector Value ;)",
    "insertText": "GetDefaultValue(PropName, Value)"
  },
  {
    "label": "GetNodeValue()",
    "kind": "Method",
    "detail": "Function (OutValue . Pitch = Value . X ; OutValue . Yaw = Value . Y ; OutValue . Roll = Value . Z ; } template<class ValueType> ValueType)",
    "insertText": "GetNodeValue(const FName PropName, const ValueType& CompileNodeValue)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (ValueType Val ;)",
    "insertText": "GetDefaultValue(PropName, Val)"
  },
  {
    "label": "VecValue()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VecValue(InValue.Pitch, InValue.Yaw, InValue.Roll)"
  },
  {
    "label": "SetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultValue(PropName, VecValue)"
  },
  {
    "label": "SetNodeValue()",
    "kind": "Method",
    "detail": "Function (} template<class ValueType> void)",
    "insertText": "SetNodeValue(const FName PropName, ValueType& CompileNodeValue, const ValueType& InValue)"
  },
  {
    "label": "SetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultValue(PropName, InValue)"
  },
  {
    "label": "GetControllerDescription()",
    "kind": "Method",
    "detail": "Function (} CompileNodeValue = InValue ; } protected : FText)",
    "insertText": "GetControllerDescription()"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (const FAnimNode_SkeletalControlBase*)",
    "insertText": "GetNode() const PURE_VIRTUAL(UAnimGraphNode_SkeletalControlBase::GetNode, return nullptr;)"
  },
  {
    "label": "GetDebuggedNode()",
    "kind": "Method",
    "detail": "Function (FAnimNode_SkeletalControlBase*)",
    "insertText": "GetDebuggedNode()"
  }
]