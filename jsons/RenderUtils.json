[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "IPooledRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPooledRenderTarget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackedPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedPosition"
  },
  {
    "label": "EConstructTextureFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstructTextureFlags"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "RenderUtilsInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderUtilsInit()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FVector3f& InVector)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FVector3d& InVector)"
  },
  {
    "label": "CalcTextureMipMapSize3D()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "CalcTextureMipMapSize3D( uint32 TextureSizeX, uint32 TextureSizeY, uint32 TextureSizeZ, EPixelFormat Format, uint32 MipIndex)"
  },
  {
    "label": "CalcMipMapExtent3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcMipMapExtent3D( uint32 TextureSizeX, uint32 TextureSizeY, uint32 TextureSizeZ, EPixelFormat Format, uint32 MipIndex, uint32& OutXExtent, uint32& OutYExtent, uint32& OutZExtent )"
  },
  {
    "label": "CalcMipMapExtent()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "CalcMipMapExtent( uint32 TextureSizeX, uint32 TextureSizeY, EPixelFormat Format, uint32 MipIndex )"
  },
  {
    "label": "CalcTextureMipMapSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "CalcTextureMipMapSize( uint32 TextureSizeX, uint32 TextureSizeY, EPixelFormat Format, uint32 MipIndex )"
  },
  {
    "label": "CalcTextureSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "CalcTextureSize( uint32 SizeX, uint32 SizeY, EPixelFormat Format, uint32 MipCount )"
  },
  {
    "label": "CalcTextureSize3D()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "CalcTextureSize3D( uint32 SizeX, uint32 SizeY, uint32 SizeZ, EPixelFormat Format, uint32 MipCount )"
  },
  {
    "label": "CopyTextureData2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureData2D(const void* Source,void* Dest,uint32 SizeY,EPixelFormat Format,uint32 SourceStride,uint32 DestStride)"
  },
  {
    "label": "GetPixelFormatValidChannels()",
    "kind": "Method",
    "detail": "Function (EPixelFormatChannelFlags)",
    "insertText": "GetPixelFormatValidChannels(EPixelFormat InPixelFormat)"
  },
  {
    "label": "GetCubeFaceFromName()",
    "kind": "Method",
    "detail": "Function (ECubeFace)",
    "insertText": "GetCubeFaceFromName(const FString& Name)"
  },
  {
    "label": "PlatformGPUSceneUsesUniformBufferView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformGPUSceneUsesUniformBufferView(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileRequiresSceneDepthAux()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileRequiresSceneDepthAux(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileAllowFramebufferFetch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileAllowFramebufferFetch(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "SupportsTextureCubeArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTextureCubeArray(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "MaskedInEarlyPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaskedInEarlyPass(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "AllowPixelDepthOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowPixelDepthOffset(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "AllowPerPixelShadingModels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowPerPixelShadingModels(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetPlatformShadingModelsMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPlatformShadingModelsMask(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMobileAmbientOcclusionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileAmbientOcclusionEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "AreMobileScreenSpaceReflectionsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMobileScreenSpaceReflectionsEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMobileDistanceFieldEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileDistanceFieldEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMobileMovableSpotlightShadowsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileMovableSpotlightShadowsEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMobileCapsuleShadowsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileCapsuleShadowsEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMobileCapsuleDirectShadowsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileCapsuleDirectShadowsEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileForwardEnableClusteredReflections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileForwardEnableClusteredReflections(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileUsesShadowMaskTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileUsesShadowMaskTexture(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileUsesExtenedGBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileUsesExtenedGBuffer(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileUsesGBufferCustomData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileUsesGBufferCustomData(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileBasePassAlwaysUsesCSM()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileBasePassAlwaysUsesCSM(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileUsesFullDepthPrepass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileUsesFullDepthPrepass(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "ShouldForceFullDepthPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForceFullDepthPass(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "SupportsGen4TAA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsGen4TAA(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "SupportsTSR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTSR(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "PlatformSupportsVelocityRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformSupportsVelocityRendering(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsUsingDBuffers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingDBuffers(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsForwardShadingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForwardShadingEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "ForwardShadingForcesSkyLightCubemapBlending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForwardShadingForcesSkyLightCubemapBlending(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsUsingGBuffers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingGBuffers(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsUsingBasePassVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingBasePassVelocity(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsUsingSelectiveBasePassOutputs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingSelectiveBasePassOutputs(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsUsingDistanceFields()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingDistanceFields(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsWaterDistanceFieldShadowEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWaterDistanceFieldShadowEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsWaterSeparateMainDirLightEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWaterSeparateMainDirLightEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "UseGPUScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseGPUScene(const FStaticShaderPlatform Platform, const FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "UseGPUScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseGPUScene(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "ForceSimpleSkyDiffuse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForceSimpleSkyDiffuse(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "VelocityEncodeDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VelocityEncodeDepth(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "VelocityEncodeHasPixelAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VelocityEncodeHasPixelAnimation(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "QuantizeSceneBufferSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuantizeSceneBufferSize(const FIntPoint& InBufferSize, FIntPoint& OutBufferSize, const uint32 SuggestedDivisor = 0)"
  },
  {
    "label": "UseVirtualTexturing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseVirtualTexturing(const FStaticShaderPlatform InShaderPlatform, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "UseVirtualTexturing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseVirtualTexturing(const FStaticFeatureLevel InFeatureLevel, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "NaniteAtomicsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NaniteAtomicsSupported()"
  },
  {
    "label": "NaniteWorkGraphMaterialsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NaniteWorkGraphMaterialsSupported()"
  },
  {
    "label": "NaniteSplineMeshesSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NaniteSplineMeshesSupported()"
  },
  {
    "label": "NaniteSkinnedMeshesSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NaniteSkinnedMeshesSupported()"
  },
  {
    "label": "UseNaniteFastTileClear()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseNaniteFastTileClear()"
  },
  {
    "label": "UseNaniteTessellation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseNaniteTessellation()"
  },
  {
    "label": "DoesPlatformSupportNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportNanite(EShaderPlatform Platform, bool bCheckForProjectSetting = true)"
  },
  {
    "label": "DoesRuntimeSupportNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesRuntimeSupportNanite(EShaderPlatform ShaderPlatform, bool bCheckForAtomicSupport, bool bCheckForProjectSetting)"
  },
  {
    "label": "DoesTargetPlatformSupportNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesTargetPlatformSupportNanite(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "UseNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseNanite(EShaderPlatform ShaderPlatform, bool bCheckForAtomicSupport = true, bool bCheckForProjectSetting = true)"
  },
  {
    "label": "UseVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseVirtualShadowMaps(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UseVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseVirtualShadowMaps(EShaderPlatform ShaderPlatform, const FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "DoesPlatformSupportVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportVirtualShadowMaps(EShaderPlatform Platform)"
  },
  {
    "label": "DoesPlatformSupportNonNaniteVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportNonNaniteVirtualShadowMaps(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UseNonNaniteVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseNonNaniteVirtualShadowMaps(EShaderPlatform ShaderPlatform, FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "IsWaterVirtualShadowMapFilteringEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWaterVirtualShadowMapFilteringEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "DoesPlatformSupportHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportHeterogeneousVolumes(EShaderPlatform Platform)"
  },
  {
    "label": "IsSingleLayerWaterDepthPrepassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSingleLayerWaterDepthPrepassEnabled(const FStaticShaderPlatform Platform, FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "UseVirtualTextureLightmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseVirtualTextureLightmap(const FStaticShaderPlatform Platform, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "UseVirtualTextureLightmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseVirtualTextureLightmap(const FStaticFeatureLevel InFeatureLevel, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "UseNaniteLandscapeMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseNaniteLandscapeMesh(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ExcludeNonPipelinedShaderTypes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExcludeNonPipelinedShaderTypes(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UseShaderPipelines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseShaderPipelines(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UseRemoveUnsedInterpolators()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseRemoveUnsedInterpolators(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "AreSkinCacheShadersEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreSkinCacheShadersEnabled(EShaderPlatform Platform)"
  },
  {
    "label": "IsGPUSkinCacheAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGPUSkinCacheAllowed(EShaderPlatform Platform)"
  },
  {
    "label": "IsGPUSkinCacheAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGPUSkinCacheAvailable(EShaderPlatform Platform)"
  },
  {
    "label": "IsGPUSkinPassThroughSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGPUSkinPassThroughSupported(EShaderPlatform Platform)"
  },
  {
    "label": "DoesRuntimeSupportOnePassPointLightShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesRuntimeSupportOnePassPointLightShadows(EShaderPlatform Platform)"
  },
  {
    "label": "AllowTranslucencyPerObjectShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowTranslucencyPerObjectShadows(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "PlatformRequires128bitRT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformRequires128bitRT(EPixelFormat PixelFormat)"
  },
  {
    "label": "IsRayTracingEnabledForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingEnabledForProject(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ShouldCompileRayTracingShadersForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileRayTracingShadersForProject(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ShouldCompileRayTracingCallableShadersForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileRayTracingCallableShadersForProject(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "IsRayTracingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingEnabled()"
  },
  {
    "label": "IsRayTracingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingEnabled(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "IsRayTracingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingAllowed()"
  },
  {
    "label": "GetRayTracingMode()",
    "kind": "Method",
    "detail": "Function (ERayTracingMode)",
    "insertText": "GetRayTracingMode()"
  },
  {
    "label": "IsRayTracingUsingReferenceBasedResidency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingUsingReferenceBasedResidency()"
  },
  {
    "label": "IsRayTracingEnableOnDemandSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingEnableOnDemandSupported()"
  },
  {
    "label": "DoesPlatformSupportLumenGI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportLumenGI(EShaderPlatform Platform, bool bSkipProjectCheck = false)"
  },
  {
    "label": "DoesProjectSupportLumenRayTracedTranslucentRefraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesProjectSupportLumenRayTracedTranslucentRefraction()"
  },
  {
    "label": "DoesProjectSupportExpFogMatchesVolumetricFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesProjectSupportExpFogMatchesVolumetricFog()"
  },
  {
    "label": "UseSplineMeshSceneResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSplineMeshSceneResources(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RenderRectLightsAsSpotLights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderRectLightsAsSpotLights(const FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "IsSubstrateEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubstrateEnabled()"
  },
  {
    "label": "IsRoughDiffuseEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRoughDiffuseEnabled()"
  },
  {
    "label": "IsGlintEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGlintEnabled()"
  },
  {
    "label": "IsGlintEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGlintEnabled(EShaderPlatform InPlatform)"
  },
  {
    "label": "GlintLUTIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GlintLUTIndex()"
  },
  {
    "label": "GlintLevelBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GlintLevelBias()"
  },
  {
    "label": "GlintLevelMin()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GlintLevelMin()"
  },
  {
    "label": "IsSpecularProfileEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpecularProfileEnabled()"
  },
  {
    "label": "IsSpecularProfileEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpecularProfileEnabled(EShaderPlatform InPlatform)"
  },
  {
    "label": "IsBackCompatibilityEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBackCompatibilityEnabled()"
  },
  {
    "label": "IsDBufferPassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDBufferPassEnabled(EShaderPlatform InPlatform)"
  },
  {
    "label": "IsOpaqueRoughRefractionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueRoughRefractionEnabled()"
  },
  {
    "label": "IsAdvancedVisualizationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdvancedVisualizationEnabled()"
  },
  {
    "label": "GetRayTracingMaterialPayloadSizeInBytes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRayTracingMaterialPayloadSizeInBytes(bool bFullySimplifiedMaterial)"
  },
  {
    "label": "GetBytePerPixel()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBytePerPixel()"
  },
  {
    "label": "GetBytePerPixel()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBytePerPixel(EShaderPlatform InPlatform)"
  },
  {
    "label": "GetClosurePerPixel()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetClosurePerPixel(EShaderPlatform InPlatform)"
  },
  {
    "label": "GetNormalQuality()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNormalQuality()"
  },
  {
    "label": "GetSheenQuality()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSheenQuality()"
  },
  {
    "label": "GetSheenQuality()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSheenQuality(EShaderPlatform InPlatform)"
  },
  {
    "label": "GetShadingQuality()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetShadingQuality()"
  },
  {
    "label": "GetShadingQuality()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetShadingQuality(EShaderPlatform InPlatform)"
  },
  {
    "label": "GetLightFunctionAtlasFormat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLightFunctionAtlasFormat()"
  },
  {
    "label": "GetSingleLayerWaterUsesLightFunctionAtlas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSingleLayerWaterUsesLightFunctionAtlas()"
  },
  {
    "label": "GetTranslucentUsesLightFunctionAtlas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTranslucentUsesLightFunctionAtlas()"
  },
  {
    "label": "GetTranslucentUsesLightRectLights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTranslucentUsesLightRectLights()"
  },
  {
    "label": "GetTranslucentUsesLightIESProfiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTranslucentUsesLightIESProfiles()"
  },
  {
    "label": "GetHairStrandsUsesTriangleStrips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHairStrandsUsesTriangleStrips()"
  },
  {
    "label": "GetHairStrandsLODMode()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHairStrandsLODMode()"
  },
  {
    "label": "EV100ToLuminance()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EV100ToLuminance(1.0f, EV100)"
  },
  {
    "label": "HardwareVariableRateShadingSupportedByPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HardwareVariableRateShadingSupportedByPlatform(EShaderPlatform ShaderPlatform)"
  }
]