[
  {
    "label": "FChaosVDDataWrapperUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDDataWrapperUtils"
  },
  {
    "label": "ESpatialAccelerationCollectionBucketInnerIdx",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESpatialAccelerationCollectionBucketInnerIdx"
  },
  {
    "label": "TSpatialAccelerationBucketEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSpatialAccelerationBucketEntry"
  },
  {
    "label": "TSpatialCollectionBucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSpatialCollectionBucket"
  },
  {
    "label": "TSpatialTypeTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSpatialTypeTuple"
  },
  {
    "label": "TSpatialTypeTupleGetter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSpatialTypeTupleGetter"
  },
  {
    "label": "TSpatialAccelerationCollectionHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSpatialAccelerationCollectionHelper"
  },
  {
    "label": "TSpatialAccelerationCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpatialAccelerationCollection"
  },
  {
    "label": "FreeObjHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ISpatialAccelerationCollection . h \" # include \" Chaos / Box . h \" # include \" Chaos / Collision / SpatialAccelerationBroadPhase . h \" # include \" Chaos / Collision / StatsData . h \" # include \" ChaosStats . h \" # include \" GeometryParticlesfwd . h \" # include \" Misc / OutputDevice . h \" # include<tuple> class FChaosVDDataWrapperUtils ; namespace Chaos { enum ESpatialAccelerationCollectionBucketInnerIdx { Default = 0,Dynamic = 1,DefaultQueryOnly = 2,DynamicQueryOnly = 3 } ; template<T> void)",
    "insertText": "FreeObjHelper(T*& RawPtr)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (RawPtr = nullptr ; } template<TPayloadType,T,int d> struct TSpatialAccelerationBucketEntry { TUniquePtr<ISpatialAcceleration<TPayloadType,T,d>> Acceleration ; uint16 TypeInnerIdx ; void)",
    "insertText": "CopyFrom(TSpatialAccelerationBucketEntry<TPayloadType, T, d>& Src)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (Acceleration = Src . Acceleration ->)",
    "insertText": "Copy()"
  },
  {
    "label": "TSpatialAccelerationBucketEntry()",
    "kind": "Method",
    "detail": "Function (TypeInnerIdx = Src . TypeInnerIdx ; })",
    "insertText": "TSpatialAccelerationBucketEntry()"
  },
  {
    "label": "TSpatialAccelerationBucketEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSpatialAccelerationBucketEntry(const TSpatialAccelerationBucketEntry<TPayloadType, T, d>& Other)"
  },
  {
    "label": "TSpatialAccelerationBucketEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSpatialAccelerationBucketEntry(TSpatialAccelerationBucketEntry<TPayloadType, T, d>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationBucketEntry<TPayloadType,T,d>&)",
    "insertText": "operator(TSpatialAccelerationBucketEntry<TPayloadType, T, d>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationBucketEntry<TPayloadType,T,d>&)",
    "insertText": "operator(TSpatialAccelerationBucketEntry<TPayloadType, T, d>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<TPayloadType,T,int d> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TSpatialAccelerationBucketEntry<TPayloadType, T, d>& BucketEntry)"
  },
  {
    "label": "FreeObjHelper()",
    "kind": "Method",
    "detail": "Function (Ar<<BucketEntry . Acceleration ; Ar<<BucketEntry . TypeInnerIdx ; return Ar ; } template<TPayloadType,T,int d> void)",
    "insertText": "FreeObjHelper(TSpatialAccelerationBucketEntry<TPayloadType, T, d >& BucketEntry)"
  },
  {
    "label": "CopyFromHelper()",
    "kind": "Method",
    "detail": "Function (BucketEntry . Acceleration = nullptr ; } template<T> T)",
    "insertText": "CopyFromHelper(const T& Src)"
  },
  {
    "label": "TSpatialCollectionBucket()",
    "kind": "Method",
    "detail": "Function (Copy . TypeInnerIdx = Src . TypeInnerIdx ; return Copy ; } template<TObj> struct TSpatialCollectionBucket {)",
    "insertText": "TSpatialCollectionBucket()"
  },
  {
    "label": "TSpatialCollectionBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSpatialCollectionBucket(const TSpatialCollectionBucket<TObj>& Other)"
  },
  {
    "label": "TSpatialCollectionBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSpatialCollectionBucket(TSpatialCollectionBucket<TObj>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSpatialCollectionBucket<TObj>&)",
    "insertText": "operator(const TSpatialCollectionBucket<TObj>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSpatialCollectionBucket<TObj>&)",
    "insertText": "operator(TSpatialCollectionBucket<TObj>&& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<TObj> Objects ; TArray<uint16> FreeIndices ; int32)",
    "insertText": "Add(TObj&& Obj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint16 Idx ;)",
    "insertText": "if(FreeIndices.Num())"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Idx = FreeIndices .)",
    "insertText": "Pop()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Objects [ Idx ] =)",
    "insertText": "MoveTemp(Obj)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} else { Idx = static_cast<)",
    "insertText": "uint16(Objects.Add(MoveTemp(Obj)))"
  },
  {
    "label": "UpdateOrAddAt()",
    "kind": "Method",
    "detail": "Function (} return Idx ; } void)",
    "insertText": "UpdateOrAddAt(uint16 Idx, TObj&& Obj)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16 ObjectNum = static_cast<)",
    "insertText": "uint16(Objects.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Objects .)",
    "insertText": "SetNum(Idx + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FreeIndices .)",
    "insertText": "Add(FreeIndex)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } else { FreeIndices .)",
    "insertText": "Remove(Idx)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(uint16 Idx)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Objects .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "FreeObjHelper()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "FreeObjHelper(Objects[Idx])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FreeIndices .)",
    "insertText": "Add(Idx)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CopyFrom(const TSpatialCollectionBucket& Src)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Objects .)",
    "insertText": "SetNum(Src.Objects.Num())"
  },
  {
    "label": "CopyFromHelper()",
    "kind": "Method",
    "detail": "Function (Objects [ ObjIdx ] =)",
    "insertText": "CopyFromHelper(Src.Objects[ObjIdx])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FreeIndices = Src . FreeIndices ; } } ; template<TObj> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TSpatialCollectionBucket<TObj>& Bucket)"
  },
  {
    "label": "TSpatialTypeTuple()",
    "kind": "Method",
    "detail": "Function (Ar<<Bucket . Objects ; Ar<<Bucket . FreeIndices ; return Ar ; } template<. . . TRemaining> struct TSpatialTypeTuple { } ; template<TAcceleration,. . . TRemaining> struct TSpatialTypeTuple<TAcceleration,TRemaining . . .> { using FirstType = TAcceleration ; TSpatialCollectionBucket<TAcceleration*> First ; TSpatialTypeTuple<TRemaining . . .> Remaining ;)",
    "insertText": "TSpatialTypeTuple()"
  },
  {
    "label": "TSpatialTypeTuple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSpatialTypeTuple(const TSpatialTypeTuple<TAcceleration, TRemaining...>& Other)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; template<int Idx,. . . Rest> struct TSpatialTypeTupleGetter { } ; template<int Idx,First,. . . Rest> struct TSpatialTypeTupleGetter<Idx,First,Rest . . .> { auto&)",
    "insertText": "Get(TSpatialTypeTuple<First, Rest...>& Types)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const auto&)",
    "insertText": "Get(const TSpatialTypeTuple<First, Rest...>& Types)"
  },
  {
    "label": "GetAccelerationsPerType()",
    "kind": "Method",
    "detail": "Function (} template<int Idx,First,. . . Rest> const auto&)",
    "insertText": "GetAccelerationsPerType(const TSpatialTypeTuple<First, Rest...>& Types)"
  },
  {
    "label": "RaycastFast()",
    "kind": "Method",
    "detail": "Function (} template<int TypeIdx,int NumTypes,Tuple,TPayloadType,T,int d> struct TSpatialAccelerationCollectionHelper { template<SQVisitor> bool)",
    "insertText": "RaycastFast(const Tuple& Types, const TVector<T, d>& Start, FQueryFastData& CurData, SQVisitor& Visitor, const FVec3& Dir, const FVec3 InvDir, const bool bParallel[3])"
  },
  {
    "label": "TypeIdx()",
    "kind": "Method",
    "detail": "Function (const auto& Accelerations = GetAccelerationsPerType<)",
    "insertText": "TypeIdx(Types)"
  },
  {
    "label": "SweepFast()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<SQVisitor> bool)",
    "insertText": "SweepFast(const Tuple& Types, const TVector<T, d>& Start, FQueryFastData& CurData, const TVector<T, d> QueryHalfExtents, SQVisitor& Visitor, const FVec3& Dir, const FVec3 InvDir, const bool bParallel[3])"
  },
  {
    "label": "OverlapFast()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<SQVisitor> bool)",
    "insertText": "OverlapFast(const Tuple& Types, const TAABB<T, d> QueryBounds, SQVisitor& Visitor)"
  },
  {
    "label": "GlobalObjects()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "GlobalObjects(const Tuple& Types, TArray<TPayloadBoundsElement<TPayloadType, T>>& ObjList)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ObjList .)",
    "insertText": "Append(Accelerator->GlobalObjects())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } int NextType = TypeIdx + 1 ;)",
    "insertText": "if(NextType < NumTypes)"
  },
  {
    "label": "GlobalObjects()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<NextType<NumTypes ? NextType : 0,NumTypes,Tuple,TPayloadType,T,d)",
    "insertText": "GlobalObjects(Types, ObjList)"
  },
  {
    "label": "SetNumFrom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNumFrom(const Tuple& TypesSrc, Tuple& TypesDest)"
  },
  {
    "label": "TypeIdx()",
    "kind": "Method",
    "detail": "Function (const auto& SrcAccelerations = GetAccelerationsPerType<)",
    "insertText": "TypeIdx(TypesSrc)"
  },
  {
    "label": "TypeIdx()",
    "kind": "Method",
    "detail": "Function (auto& DestAccelerations = GetAccelerationsPerType<)",
    "insertText": "TypeIdx(TypesDest)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (DestAccelerations .)",
    "insertText": "SetNum(SrcAccelerations.Num())"
  },
  {
    "label": "SetNumFrom()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<NextType<NumTypes ? NextType : 0,NumTypes,Tuple,TPayloadType,T,d)",
    "insertText": "SetNumFrom(TypesSrc, TypesDest)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset(const Tuple& Types)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Accelerator ->)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<NextType<NumTypes ? NextType : 0,NumTypes,Tuple,TPayloadType,T,d)",
    "insertText": "Reset(Types)"
  },
  {
    "label": "CacheOverlappingLeaves()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CacheOverlappingLeaves(const Tuple& Types)"
  },
  {
    "label": "CacheOverlappingLeaves()",
    "kind": "Method",
    "detail": "Function (Accelerator ->)",
    "insertText": "CacheOverlappingLeaves()"
  },
  {
    "label": "CacheOverlappingLeaves()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<NextType<NumTypes ? NextType : 0,NumTypes,Tuple,TPayloadType,T,d)",
    "insertText": "CacheOverlappingLeaves(Types)"
  },
  {
    "label": "FindTypeIdx()",
    "kind": "Method",
    "detail": "Function (} } uint16)",
    "insertText": "FindTypeIdx(const Tuple& Types, SpatialAccelerationType Type)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using AccelType = std::remove_pointer<)",
    "insertText": "decltype(GetAccelerationsPerType<TypeIdx>(Types).Objects)"
  },
  {
    "label": "PBDComputeConstraintsLowLevel_Helper()",
    "kind": "Method",
    "detail": "Function (} else { return NumTypes ; } } } ; template<SpatialAccelerationCollection> std::enable_if_t<std::is_same_v<SpatialAccelerationCollection::TPayloadType,FAccelerationStructureHandle>,void>)",
    "insertText": "PBDComputeConstraintsLowLevel_Helper(FReal Dt, const SpatialAccelerationCollection& Accel, FSpatialAccelerationBroadPhase& BroadPhase, Private::FCollisionConstraintAllocator* Allocator, const FCollisionDetectorSettings& Settings, IResimCacheBase* ResimCache)"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (BroadPhase .)",
    "insertText": "ProduceOverlaps(Dt, Accel, Allocator, Settings, ResimCache)"
  },
  {
    "label": "TSpatialAccelerationCollection()",
    "kind": "Method",
    "detail": "Function (} template<. . . TSpatialAccelerationTypes> class TSpatialAccelerationCollection : public ISpatialAccelerationCollection<std::tuple_element<0,std::tuple<TSpatialAccelerationTypes . . .>>::type::PayloadType,std::tuple_element<0,std::tuple<TSpatialAccelerationTypes . . .>>::type::TType,std::tuple_element<0,std::tuple<TSpatialAccelerationTypes . . .>>::type::D> { public : using FirstAccelerationType = std::tuple_element<0,std::tuple<TSpatialAccelerationTypes . . .>>::type ; using TPayloadType = FirstAccelerationType::PayloadType ; using T = FirstAccelerationType::TType ; int d = FirstAccelerationType::D ; using BucketEntryType = TSpatialAccelerationBucketEntry<TPayloadType,T,d> ; using BucketType = TSpatialCollectionBucket<BucketEntryType> ;)",
    "insertText": "TSpatialAccelerationCollection()"
  },
  {
    "label": "AddSubstructure()",
    "kind": "Method",
    "detail": "Function (} FSpatialAccelerationIdx)",
    "insertText": "AddSubstructure(TUniquePtr<ISpatialAcceleration<TPayloadType, T, d>>&& Substructure, uint16 BucketIdx, uint16 BucketInnerIdx)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FSpatialAccelerationIdx Result ; Result . Bucket = BucketIdx ; ISpatialAcceleration<TPayloadType,T,d>* AccelPtr = Substructure .)",
    "insertText": "Get()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BucketEntryType BucketEntry ; BucketEntry . Acceleration =)",
    "insertText": "MoveTemp(Substructure)"
  },
  {
    "label": "GetTypeIdx()",
    "kind": "Method",
    "detail": "Function (const int32 TypeIdx =)",
    "insertText": "GetTypeIdx(AccelPtr)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : BucketEntry . TypeInnerIdx = static_cast<)",
    "insertText": "uint16(GetAccelerationsPerType<ClampedIdx(1)>(Types).Add(&AccelPtr->template AsChecked<typename std::tuple_element<ClampedIdx(1), std::tuple<TSpatialAccelerationTypes...>>::type>()))"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : BucketEntry . TypeInnerIdx = static_cast<)",
    "insertText": "uint16(GetAccelerationsPerType<ClampedIdx(2)>(Types).Add(&AccelPtr->template AsChecked<typename std::tuple_element<ClampedIdx(2), std::tuple<TSpatialAccelerationTypes...>>::type>()))"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : BucketEntry . TypeInnerIdx = static_cast<)",
    "insertText": "uint16(GetAccelerationsPerType<ClampedIdx(3)>(Types).Add(&AccelPtr->template AsChecked<typename std::tuple_element<ClampedIdx(3), std::tuple<TSpatialAccelerationTypes...>>::type>()))"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : BucketEntry . TypeInnerIdx = static_cast<)",
    "insertText": "uint16(GetAccelerationsPerType<ClampedIdx(4)>(Types).Add(&AccelPtr->template AsChecked<typename std::tuple_element<ClampedIdx(4), std::tuple<TSpatialAccelerationTypes...>>::type>()))"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (break ; case 5 : BucketEntry . TypeInnerIdx = static_cast<)",
    "insertText": "uint16(GetAccelerationsPerType<ClampedIdx(5)>(Types).Add(&AccelPtr->template AsChecked<typename std::tuple_element<ClampedIdx(5), std::tuple<TSpatialAccelerationTypes...>>::type>()))"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (break ; case 6 : BucketEntry . TypeInnerIdx = static_cast<)",
    "insertText": "uint16(GetAccelerationsPerType<ClampedIdx(6)>(Types).Add(&AccelPtr->template AsChecked<typename std::tuple_element<ClampedIdx(6), std::tuple<TSpatialAccelerationTypes...>>::type>()))"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (break ; case 7 : BucketEntry . TypeInnerIdx = static_cast<)",
    "insertText": "uint16(GetAccelerationsPerType<ClampedIdx(7)>(Types).Add(&AccelPtr->template AsChecked<typename std::tuple_element<ClampedIdx(7), std::tuple<TSpatialAccelerationTypes...>>::type>()))"
  },
  {
    "label": "ActiveBucketsMask()",
    "kind": "Method",
    "detail": "Function (break ; } this ->)",
    "insertText": "ActiveBucketsMask(1 << BucketIdx)"
  },
  {
    "label": "UpdateOrAddAt()",
    "kind": "Method",
    "detail": "Function (Result . InnerIdx = BucketInnerIdx ; Buckets [ BucketIdx ] .)",
    "insertText": "UpdateOrAddAt(BucketInnerIdx, MoveTemp(BucketEntry))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<0,NumTypes,)",
    "insertText": "decltype(Types), TPayloadType, T, d>::CacheOverlappingLeaves(Types)"
  },
  {
    "label": "RemoveSubstructure()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<ISpatialAcceleration<TPayloadType,T,d>>)",
    "insertText": "RemoveSubstructure(FSpatialAccelerationIdx Idx)"
  },
  {
    "label": "GetTypeIdx()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISpatialAcceleration<TPayloadType,T,d>> Removed ; { BucketEntryType& BucketEntry = Buckets [ Idx . Bucket ] . Objects [ Idx . InnerIdx ] ; const int32 TypeIdx =)",
    "insertText": "GetTypeIdx(BucketEntry.Acceleration.Get())"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(1)>(Types).Remove(BucketEntry.TypeInnerIdx)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(2)>(Types).Remove(BucketEntry.TypeInnerIdx)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(3)>(Types).Remove(BucketEntry.TypeInnerIdx)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(4)>(Types).Remove(BucketEntry.TypeInnerIdx)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 5 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(5)>(Types).Remove(BucketEntry.TypeInnerIdx)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 6 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(6)>(Types).Remove(BucketEntry.TypeInnerIdx)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 7 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(7)>(Types).Remove(BucketEntry.TypeInnerIdx)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (break ; } Removed =)",
    "insertText": "MoveTemp(BucketEntry.Acceleration)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} Buckets [ Idx . Bucket ] .)",
    "insertText": "Remove(Idx.InnerIdx)"
  },
  {
    "label": "ActiveBucketsMask()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ActiveBucketsMask(1 << Idx.Bucket)"
  },
  {
    "label": "GetSubstructure()",
    "kind": "Method",
    "detail": "Function (} return Removed ; } ISpatialAcceleration<TPayloadType,T,d>*)",
    "insertText": "GetSubstructure(FSpatialAccelerationIdx Idx)"
  },
  {
    "label": "SwapSubstructure()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "SwapSubstructure(ISpatialAccelerationCollection<TPayloadType, T, d>& InOther, FSpatialAccelerationIdx Idx)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using ThisType =)",
    "insertText": "decltype(this)"
  },
  {
    "label": "ThisType()",
    "kind": "Method",
    "detail": "Function (ThisType Other = static_cast<)",
    "insertText": "ThisType(&InOther)"
  },
  {
    "label": "RemoveSubstructure()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISpatialAcceleration<TPayloadType,T,d>> OtherSubStructure = Other ->)",
    "insertText": "RemoveSubstructure(Idx)"
  },
  {
    "label": "AddSubstructure()",
    "kind": "Method",
    "detail": "Function (Other ->)",
    "insertText": "AddSubstructure(MoveTemp(ThisSubStructure), Idx.Bucket, Idx.InnerIdx)"
  },
  {
    "label": "AddSubstructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubstructure(MoveTemp(OtherSubStructure), Idx.Bucket, Idx.InnerIdx)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_AccelerationStructureReset)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<0,NumTypes,)",
    "insertText": "decltype(Types), TPayloadType, T, d>::Reset(Types)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Raycast(const TVector<T, d>& Start, const TVector<T, d>& Dir, const T Length, ISpatialVisitor<TPayloadType, T>& Visitor)"
  },
  {
    "label": "ProxyVisitor()",
    "kind": "Method",
    "detail": "Function (TSpatialVisitor<TPayloadType,T>)",
    "insertText": "ProxyVisitor(Visitor)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Raycast(Start, Dir, Length, ProxyVisitor)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} template<SQVisitor> void)",
    "insertText": "Raycast(const TVector<T, d>& Start, const TVector<T, d>& Dir, const T Length, SQVisitor& Visitor)"
  },
  {
    "label": "QueryFastData()",
    "kind": "Method",
    "detail": "Function (FQueryFastData)",
    "insertText": "QueryFastData(Dir, Length)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<0,NumTypes,)",
    "insertText": "decltype(Types), TPayloadType, T, d>::RaycastFast(Types, Start, QueryFastData, Visitor, QueryFastData.Dir, QueryFastData.InvDir, QueryFastData.bParallel)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sweep(const TVector<T, d>& Start, const TVector<T, d>& Dir, const T Length, const TVector<T, d> QueryHalfExtents, ISpatialVisitor<TPayloadType, T>& Visitor)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sweep(Start, Dir, Length, QueryHalfExtents, ProxyVisitor)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (} template<SQVisitor> void)",
    "insertText": "Sweep(const TVector<T, d>& Start, const TVector<T, d>& Dir, const T Length, const TVector<T, d> QueryHalfExtents, SQVisitor& Visitor)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<0,NumTypes,)",
    "insertText": "decltype(Types), TPayloadType, T, d>::SweepFast(Types, Start, QueryFastData, QueryHalfExtents, Visitor, QueryFastData.Dir, QueryFastData.InvDir, QueryFastData.bParallel)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Overlap(const TAABB<T, d>& QueryBounds, ISpatialVisitor<TPayloadType, T>& Visitor)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Overlap(QueryBounds, ProxyVisitor)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (} template<SQVisitor> std::enable_if_t<! std::is_same_v<SQVisitor,Private::FSimOverlapVisitor>,void>)",
    "insertText": "Overlap(const TAABB<T, 3>& QueryBounds, SQVisitor& Visitor)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<0,NumTypes,)",
    "insertText": "decltype(Types), TPayloadType, T, d>::OverlapFast(Types, QueryBounds, Visitor)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const BucketType& Bucket = Buckets [ 0 ] ; { int BucketInnerIdx = 0 ;)",
    "insertText": "for(const BucketEntryType& BucketEntry : Bucket.Objects)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto AccelStructure = static_cast<Chaos::TAABBTree<TPayloadType,Chaos::TAABBTreeLeafArray<Chaos::FAccelerationStructureHandle,true,T>,true,)",
    "insertText": "T(BucketEntry.Acceleration.Get())"
  },
  {
    "label": "OverlapFast()",
    "kind": "Method",
    "detail": "Function (AccelStructure ->)",
    "insertText": "OverlapFast(QueryBounds, Visitor)"
  },
  {
    "label": "GlobalObjects()",
    "kind": "Method",
    "detail": "Function (} BucketInnerIdx + + ; } } } TArray<TPayloadBoundsElement<TPayloadType,T>>)",
    "insertText": "GlobalObjects()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TArray<TPayloadBoundsElement<TPayloadType,T>> ObjList ; TSpatialAccelerationCollectionHelper<0,NumTypes,)",
    "insertText": "decltype(Types), TPayloadType, T, d>::GlobalObjects(Types, ObjList)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint16 BucketIdx = 0 ;)",
    "insertText": "for(const BucketType& Bucket : Buckets)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint16 InnerIdx = 0 ;)",
    "insertText": "for(const BucketEntryType& Entry : Bucket.Objects)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visitor(FSpatialAccelerationIdx{ BucketIdx, InnerIdx })"
  },
  {
    "label": "GetAllSpatialIndices()",
    "kind": "Method",
    "detail": "Function (} + + InnerIdx ; } + + BucketIdx ; } } TArray<FSpatialAccelerationIdx>)",
    "insertText": "GetAllSpatialIndices()"
  },
  {
    "label": "VisitAllSpatialIndices()",
    "kind": "Method",
    "detail": "Function (uint16 BucketIdx = 0 ; TArray<FSpatialAccelerationIdx> Indices ;)",
    "insertText": "VisitAllSpatialIndices([&Indices](FSpatialAccelerationIdx Idx) { Indices.Add(Idx); })"
  },
  {
    "label": "UseBucket()",
    "kind": "Method",
    "detail": "Function (const uint16)",
    "insertText": "UseBucket((1 << SpatialIdx.Bucket) & this->ActiveBucketsMask)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (bool bSuccess = Buckets [ UseBucket ] . Objects [ SpatialIdx . InnerIdx ] . Acceleration ->)",
    "insertText": "RemoveElement(Payload)"
  },
  {
    "label": "VisitAllSpatialIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAllSpatialIndices([this, &Payload, &SpatialIdx, &bSuccess](FSpatialAccelerationIdx Idx) { if (!(Idx == SpatialIdx)) { const uint16 Buckt = ((1 << Idx.Bucket) & this->ActiveBucketsMask) ? Idx.Bucket : 0; const bool bRemoved = Buckets[Buckt].Objects[Idx.InnerIdx].Acceleration->RemoveElement(Payload); bSuccess |= bRemoved; } })"
  },
  {
    "label": "UpdateElementIn()",
    "kind": "Method",
    "detail": "Function (} return bSuccess ; } bool)",
    "insertText": "UpdateElementIn(const TPayloadType& Payload, const TAABB<T, d>& NewBounds, bool bHasBounds, FSpatialAccelerationIdx SpatialIdx)"
  },
  {
    "label": "UpdateElement()",
    "kind": "Method",
    "detail": "Function (bool bElementExisted = Buckets [ UseBucket ] . Objects [ SpatialIdx . InnerIdx ] . Acceleration ->)",
    "insertText": "UpdateElement(Payload, NewBounds, bHasBounds)"
  },
  {
    "label": "VisitAllSpatialIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAllSpatialIndices([this, &Payload, &SpatialIdx, &bElementExisted](FSpatialAccelerationIdx Idx) { if (!(Idx == SpatialIdx)) { const uint16 Buckt = ((1 << Idx.Bucket) & this->ActiveBucketsMask) ? Idx.Bucket : 0; const bool Removed = Buckets[Buckt].Objects[Idx.InnerIdx].Acceleration->RemoveElement(Payload); bElementExisted = bElementExisted || Removed; } })"
  },
  {
    "label": "PBDComputeConstraintsLowLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PBDComputeConstraintsLowLevel(T Dt, FSpatialAccelerationBroadPhase& BroadPhase, Private::FCollisionConstraintAllocator* Allocator, const FCollisionDetectorSettings& Settings, IResimCacheBase* ResimCache)"
  },
  {
    "label": "PBDComputeConstraintsLowLevel_Helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PBDComputeConstraintsLowLevel_Helper(Dt, *this, BroadPhase, Allocator, Settings, ResimCache)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_BUILD_SHIPPING void)",
    "insertText": "DebugDraw(ISpacialDebugDrawInterface<T>* InInterface)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (Entry . Acceleration ->)",
    "insertText": "DebugDraw(InInterface)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} } } } # endif void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Buckets [ BucketIdx ] ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "GetTypeIdx()",
    "kind": "Method",
    "detail": "Function (const int32 TypeIdx =)",
    "insertText": "GetTypeIdx(RawPtr)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(1)>(Types).Objects[Entry.TypeInnerIdx] = &RawPtr->template AsChecked<typename std::tuple_element<ClampedIdx(1), std::tuple<TSpatialAccelerationTypes...>>::type>()"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(2)>(Types).Objects[Entry.TypeInnerIdx] = &RawPtr->template AsChecked<typename std::tuple_element<ClampedIdx(2), std::tuple<TSpatialAccelerationTypes...>>::type>()"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(3)>(Types).Objects[Entry.TypeInnerIdx] = &RawPtr->template AsChecked<typename std::tuple_element<ClampedIdx(3), std::tuple<TSpatialAccelerationTypes...>>::type>()"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(4)>(Types).Objects[Entry.TypeInnerIdx] = &RawPtr->template AsChecked<typename std::tuple_element<ClampedIdx(4), std::tuple<TSpatialAccelerationTypes...>>::type>()"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 5 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(5)>(Types).Objects[Entry.TypeInnerIdx] = &RawPtr->template AsChecked<typename std::tuple_element<ClampedIdx(5), std::tuple<TSpatialAccelerationTypes...>>::type>()"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 6 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(6)>(Types).Objects[Entry.TypeInnerIdx] = &RawPtr->template AsChecked<typename std::tuple_element<ClampedIdx(6), std::tuple<TSpatialAccelerationTypes...>>::type>()"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (break ; case 7 : GetAccelerationsPerType<)",
    "insertText": "ClampedIdx(7)>(Types).Objects[Entry.TypeInnerIdx] = &RawPtr->template AsChecked<typename std::tuple_element<ClampedIdx(7), std::tuple<TSpatialAccelerationTypes...>>::type>()"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (break ; } } } } } # if ! UE_BUILD_SHIPPING void)",
    "insertText": "DumpStats()"
  },
  {
    "label": "DumpStatsTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStatsTo(*GLog)"
  },
  {
    "label": "DumpStatsTo()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DumpStatsTo(FOutputDevice& Ar)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (const BucketType& Bucket = Buckets [ BucketIdx ] ; Ar .)",
    "insertText": "Logf(TEXT(\"Bucket %d (%d entries):\"), BucketIdx, Bucket.Objects.Num())"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"\\tEntry %d\"), EntryIdx)"
  },
  {
    "label": "DumpStatsTo()",
    "kind": "Method",
    "detail": "Function (Bucket . Objects [ EntryIdx ] . Acceleration ->)",
    "insertText": "DumpStatsTo(Ar)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"\"))"
  },
  {
    "label": "TSpatialAccelerationCollection()",
    "kind": "Method",
    "detail": "Function (} } } # endif private :)",
    "insertText": "TSpatialAccelerationCollection(const TSpatialAccelerationCollection<TSpatialAccelerationTypes...>& Other)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TSpatialAccelerationCollectionHelper<0,NumTypes,)",
    "insertText": "decltype(Types), TPayloadType, T, d>::SetNumFrom(Other.Types, Types)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (this -> ActiveBucketsMask = Other . ActiveBucketsMask ;)",
    "insertText": "for(int BucketIdx = 0; BucketIdx < MaxBuckets; ++BucketIdx)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (Buckets [ BucketIdx ] .)",
    "insertText": "CopyFrom(Other.Buckets[BucketIdx])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bFirst = true ;)",
    "insertText": "for(const BucketEntryType& Entry : Buckets[BucketIdx].Objects)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (break ; } } } } TSpatialAccelerationCollection<TSpatialAccelerationTypes . . .>&)",
    "insertText": "operator(const TSpatialAccelerationCollection<TSpatialAccelerationTypes...>& Other)"
  },
  {
    "label": "DeepAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepAssign(const ISpatialAcceleration<TPayloadType, FReal, 3>& Other)"
  },
  {
    "label": "ClampedIdx()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ClampedIdx(uint32 Idx)"
  }
]