[
  {
    "label": "BundleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BundleManager"
  },
  {
    "label": "JsepTransportCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsepTransportCollection"
  },
  {
    "label": "BundleManager()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_JSEP_TRANSPORT_COLLECTION_H_ # define PC_JSEP_TRANSPORT_COLLECTION_H_ # include<functional> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" api / jsep . h \" # include \" api / peer_connection_interface . h \" # include \" api / sequence_checker . h \" # include \" pc / jsep_transport . h \" # include \" pc / session_description . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class BundleManager { public :)",
    "insertText": "BundleManager(PeerConnectionInterface::BundlePolicy bundle_policy) : bundle_policy_(bundle_policy)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (sequence_checker_ .)",
    "insertText": "Detach()"
  },
  {
    "label": "bundle_groups()",
    "kind": "Method",
    "detail": "Function (} const std::vector<std::unique_ptr<cricket::ContentGroup>>&)",
    "insertText": "bundle_groups()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "LookupGroupByMid()",
    "kind": "Method",
    "detail": "Function (cricket::ContentGroup*)",
    "insertText": "LookupGroupByMid(const std::string& mid)"
  },
  {
    "label": "IsFirstMidInGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFirstMidInGroup(const std::string& mid)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const cricket::SessionDescription* description, SdpType type)"
  },
  {
    "label": "DeleteMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMid(const cricket::ContentGroup* bundle_group, const std::string& mid)"
  },
  {
    "label": "DeleteGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteGroup(const cricket::ContentGroup* bundle_group)"
  },
  {
    "label": "Rollback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rollback()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit()"
  },
  {
    "label": "RefreshEstablishedBundleGroupsByMid()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RefreshEstablishedBundleGroupsByMid() RTC_RUN_ON(sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker sequence_checker_ ; PeerConnectionInterface::BundlePolicy bundle_policy_ ; std::vector<std::unique_ptr<cricket::ContentGroup>> bundle_groups_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "JsepTransportCollection()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,cricket::ContentGroup*> established_bundle_groups_by_mid_ ; } ; class JsepTransportCollection { public :)",
    "insertText": "JsepTransportCollection(std::function<bool(const std::string& mid, cricket::JsepTransport* transport)> map_change_callback, std::function<void()> state_change_callback) : map_change_callback_(map_change_callback), state_change_callback_(state_change_callback)"
  },
  {
    "label": "RegisterTransport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterTransport(const std::string& mid, std::unique_ptr<cricket::JsepTransport> transport)"
  },
  {
    "label": "Transports()",
    "kind": "Method",
    "detail": "Function (std::vector<cricket::JsepTransport*>)",
    "insertText": "Transports()"
  },
  {
    "label": "ActiveTransports()",
    "kind": "Method",
    "detail": "Function (std::vector<cricket::JsepTransport*>)",
    "insertText": "ActiveTransports()"
  },
  {
    "label": "DestroyAllTransports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllTransports()"
  },
  {
    "label": "GetTransportByName()",
    "kind": "Method",
    "detail": "Function (cricket::JsepTransport*)",
    "insertText": "GetTransportByName(const std::string& mid)"
  },
  {
    "label": "GetTransportForMid()",
    "kind": "Method",
    "detail": "Function (cricket::JsepTransport*)",
    "insertText": "GetTransportForMid(const std::string& mid)"
  },
  {
    "label": "GetTransportForMid()",
    "kind": "Method",
    "detail": "Function (cricket::JsepTransport*)",
    "insertText": "GetTransportForMid(absl::string_view mid)"
  },
  {
    "label": "SetTransportForMid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTransportForMid(const std::string& mid, cricket::JsepTransport* jsep_transport)"
  },
  {
    "label": "RemoveTransportForMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTransportForMid(const std::string& mid)"
  },
  {
    "label": "RollbackTransports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RollbackTransports()"
  },
  {
    "label": "CommitTransports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitTransports()"
  },
  {
    "label": "TransportInUse()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TransportInUse(cricket::JsepTransport* jsep_transport)"
  },
  {
    "label": "TransportNeededForRollback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransportNeededForRollback(cricket::JsepTransport* jsep_transport)"
  },
  {
    "label": "MaybeDestroyJsepTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeDestroyJsepTransport(cricket::JsepTransport* transport)"
  },
  {
    "label": "DestroyUnusedTransports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyUnusedTransports()"
  },
  {
    "label": "IsConsistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConsistent()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const std::function<)",
    "insertText": "bool(const std::string& mid, cricket::JsepTransport* transport)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const std::function<)",
    "insertText": "void()"
  }
]