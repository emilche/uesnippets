[
  {
    "label": "IFileSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileSystem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChunkHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkHeader"
  },
  {
    "label": "FChunkPart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkPart"
  },
  {
    "label": "FFileChunkPart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileChunkPart"
  },
  {
    "label": "FChunkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkInfo"
  },
  {
    "label": "FChunkLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkLocation"
  },
  {
    "label": "FChunkDatabaseHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkDatabaseHeader"
  },
  {
    "label": "IChunkDataAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkDataAccess"
  },
  {
    "label": "FChunkDataAccessFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkDataAccessFactory"
  },
  {
    "label": "FScopeLockedChunkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeLockedChunkData"
  },
  {
    "label": "IChunkDataSerialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkDataSerialization"
  },
  {
    "label": "FChunkDataSerializationFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkDataSerializationFactory"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / SecureHash . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" BuildPatchFeatureLevel . h \" namespace BuildPatchServices { class IFileSystem ; const uint32 LegacyFixedChunkWindow = 1 0 2 4* 1 0 2 4 ; enum class EChunkStorageFlags : uint8 { None = 0 x00,Compressed = 0 x01,Encrypted = 0 x02,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChunkStorageFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EChunkHashFlags : uint8 { None = 0 x00,RollingPoly64 = 0 x01,Sha1 = 0 x02,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChunkHashFlags)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (enum class EChunkLoadResult : uint8 { Success = 0,OpenFileFail,BadArchive,CorruptHeader,IncorrectFileSize,UnsupportedStorage,MissingHashInfo,SerializationError,DecompressFailure,HashCheckFailed,Aborted } ; const TCHAR*)",
    "insertText": "ToString(const EChunkLoadResult& ChunkLoadResult)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (enum class EChunkSaveResult : uint8 { Success = 0,FileCreateFail,BadArchive,SerializationError } ; const TCHAR*)",
    "insertText": "ToString(const EChunkSaveResult& ChunkSaveResult)"
  },
  {
    "label": "FChunkHeader()",
    "kind": "Method",
    "detail": "Function (struct FChunkHeader {)",
    "insertText": "FChunkHeader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FChunkHeader& Header)"
  },
  {
    "label": "IsPadding()",
    "kind": "Method",
    "detail": "Function (uint32 Version ; uint32 HeaderSize ; FGuid Guid ; uint32 DataSizeCompressed ; uint32 DataSizeUncompressed ; EChunkStorageFlags StoredAs ; EChunkHashFlags HashType ; uint64 RollingHash ; FSHAHash SHAHash ; } ; namespace PaddingChunk { const int32 ChunkIdA = 0 x00000001 ; const int32 ChunkIdB = 0 x00000000 ; const int32 ChunkIdC = 0 x00000000 ; const uint32 ChunkSize = LegacyFixedChunkWindow ; bool)",
    "insertText": "IsPadding(const FGuid& Guid)"
  },
  {
    "label": "FChunkPart()",
    "kind": "Method",
    "detail": "Function (} } struct FChunkPart {)",
    "insertText": "FChunkPart()"
  },
  {
    "label": "FChunkPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChunkPart(const FGuid& Guid, const uint32 Offset, const uint32 Size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FChunkPart& ChunkPart)"
  },
  {
    "label": "IsPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPadding()"
  },
  {
    "label": "GetPaddingByte()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetPaddingByte()"
  },
  {
    "label": "FFileChunkPart()",
    "kind": "Method",
    "detail": "Function (} FGuid Guid ; uint32 Offset ; uint32 Size ; } ; struct FFileChunkPart {)",
    "insertText": "FFileChunkPart()"
  },
  {
    "label": "FChunkInfo()",
    "kind": "Method",
    "detail": "Function (FString Filename ; uint64 FileOffset ; FChunkPart ChunkPart ; } ; struct FChunkInfo {)",
    "insertText": "FChunkInfo()"
  },
  {
    "label": "FChunkDatabaseHeader()",
    "kind": "Method",
    "detail": "Function (FGuid Guid ; uint64 Hash ; FSHAHash ShaHash ; uint8 GroupNumber ; uint32 WindowSize ; int64 FileSize ; } ; struct FChunkLocation { FGuid ChunkId ; uint64 ByteStart ; uint32 ByteSize ; } ; struct FChunkDatabaseHeader {)",
    "insertText": "FChunkDatabaseHeader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FChunkDatabaseHeader& Header)"
  },
  {
    "label": "IChunkDataAccess()",
    "kind": "Method",
    "detail": "Function (uint32 Version ; uint32 HeaderSize ; uint64 DataSize ; TArray<FChunkLocation> Contents ; } ; class IChunkDataAccess { public : ~)",
    "insertText": "IChunkDataAccess()"
  },
  {
    "label": "GetDataLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataLock(const uint8** OutChunkData, const FChunkHeader** OutChunkHeader)"
  },
  {
    "label": "GetDataLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDataLock(uint8** OutChunkData, FChunkHeader** OutChunkHeader)"
  },
  {
    "label": "ReleaseDataLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDataLock()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class FChunkDataAccessFactory { public : IChunkDataAccess*)",
    "insertText": "Create(uint32 DataSize)"
  },
  {
    "label": "FScopeLockedChunkData()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopeLockedChunkData { public :)",
    "insertText": "FScopeLockedChunkData(IChunkDataAccess* ChunkDataAccess)"
  },
  {
    "label": "FScopeLockedChunkData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopeLockedChunkData()"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (FChunkHeader*)",
    "insertText": "GetHeader()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "IChunkDataSerialization()",
    "kind": "Method",
    "detail": "Function (private : IChunkDataAccess* ChunkDataAccess ; FChunkHeader* ChunkHeader ; uint8* ChunkData ; } ; class IChunkDataSerialization { public : ~)",
    "insertText": "IChunkDataSerialization()"
  },
  {
    "label": "LoadFromFile()",
    "kind": "Method",
    "detail": "Function (} IChunkDataAccess*)",
    "insertText": "LoadFromFile(const FString& Filename, EChunkLoadResult& OutLoadResult)"
  },
  {
    "label": "LoadFromMemory()",
    "kind": "Method",
    "detail": "Function (IChunkDataAccess*)",
    "insertText": "LoadFromMemory(const TArray<uint8>& Memory, EChunkLoadResult& OutLoadResult)"
  },
  {
    "label": "LoadFromArchive()",
    "kind": "Method",
    "detail": "Function (IChunkDataAccess*)",
    "insertText": "LoadFromArchive(FArchive& Archive, EChunkLoadResult& OutLoadResult)"
  },
  {
    "label": "SaveToFile()",
    "kind": "Method",
    "detail": "Function (EChunkSaveResult)",
    "insertText": "SaveToFile(const FString& Filename, const IChunkDataAccess* ChunkDataAccess)"
  },
  {
    "label": "SaveToMemory()",
    "kind": "Method",
    "detail": "Function (EChunkSaveResult)",
    "insertText": "SaveToMemory(TArray<uint8>& Memory, const IChunkDataAccess* ChunkDataAccess)"
  },
  {
    "label": "SaveToArchive()",
    "kind": "Method",
    "detail": "Function (EChunkSaveResult)",
    "insertText": "SaveToArchive(FArchive& Archive, const IChunkDataAccess* ChunkDataAccess)"
  },
  {
    "label": "SaveToArchiveUncompressed()",
    "kind": "Method",
    "detail": "Function (EChunkSaveResult)",
    "insertText": "SaveToArchiveUncompressed(FArchive& Archive, const IChunkDataAccess* ChunkDataAccess)"
  },
  {
    "label": "InjectShaToChunkData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InjectShaToChunkData(TArray<uint8>& Memory, const FSHAHash& ShaHashData)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class FChunkDataSerializationFactory { public : IChunkDataSerialization*)",
    "insertText": "Create(IFileSystem* FileSystem, EFeatureLevel FeatureLevel = EFeatureLevel::Latest)"
  }
]