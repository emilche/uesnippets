[
  {
    "label": "TIntrRay3Triangle3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrRay3Triangle3"
  },
  {
    "label": "TIntrRay3Triangle3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" VectorUtil . h \" # include \" Math / Ray . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TIntrRay3Triangle3 { public : TRay<Real> Ray ; TTriangle3<Real> Triangle ; Real RayParameter ; FVector3d TriangleBaryCoords ; EIntersectionType IntersectionType ;)",
    "insertText": "TIntrRay3Triangle3(const TRay<Real>& RayIn, const TTriangle3<Real>& TriangleIn)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (Ray = RayIn ; Triangle = TriangleIn ; } bool)",
    "insertText": "Test()"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (TVector<Real> diff = Ray . Origin - Triangle . V [ 0 ] ; TVector<Real> edge1 = Triangle . V [ 1 ] - Triangle . V [ 0 ] ; TVector<Real> edge2 = Triangle . V [ 2 ] - Triangle . V [ 0 ] ; TVector<Real> normal = edge1 .)",
    "insertText": "Cross(edge2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real DdN = Ray . Direction .)",
    "insertText": "Dot(normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real sign ;)",
    "insertText": "if(DdN > TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "sign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sign(Real)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(DdN < -TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (DdN = - DdN ; } else { IntersectionType = EIntersectionType::Empty ; return false ; } Real DdQxE2 = sign* Ray . Direction .)",
    "insertText": "Dot(diff.Cross(edge2))"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real DdE1xQ = sign* Ray . Direction .)",
    "insertText": "Dot(edge1.Cross(diff))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (IntersectionType = EIntersectionType::Point ; return true ; } } } } IntersectionType = EIntersectionType::Empty ; return false ; } bool)",
    "insertText": "Find()"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "inv((Real)1)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (RayParameter = QdN* inv ; TriangleBaryCoords . Y = DdQxE2* inv ; TriangleBaryCoords . Z = DdE1xQ* inv ; TriangleBaryCoords .)",
    "insertText": "X(Real)"
  }
]