[
  {
    "label": "StorageServerCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StorageServerCreateInfo"
  },
  {
    "label": "StorageServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StorageServer"
  },
  {
    "label": "WaitEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WaitEntry"
  },
  {
    "label": "ActiveStore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActiveStore"
  },
  {
    "label": "ActiveFetch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActiveFetch"
  },
  {
    "label": "ExternalFileMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExternalFileMapping"
  },
  {
    "label": "ProxyEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProxyEntry"
  },
  {
    "label": "Info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Info"
  },
  {
    "label": "StorageServerCreateInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaNetworkServer . h \" # include \" UbaStorage . h \" namespace uba { struct StorageServerCreateInfo : StorageCreateInfo {)",
    "insertText": "StorageServerCreateInfo(NetworkServer& s, const tchar* rootDir_, LogWriter& writer) : StorageCreateInfo(rootDir_, writer), server(s)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (workManager =& server ; } void)",
    "insertText": "Apply(Config& config)"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (NetworkServer& server ; bool allowFallback = true ; bool writeRecievedCasFilesToDisk = false ; const tchar* zone =)",
    "insertText": "TC(\"\")"
  },
  {
    "label": "StorageServer()",
    "kind": "Method",
    "detail": "Function (} ; class StorageServer final : public StorageImpl { public :)",
    "insertText": "StorageServer(const StorageServerCreateInfo& info)"
  },
  {
    "label": "StorageServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StorageServer()"
  },
  {
    "label": "RegisterDisallowedPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDisallowedPath(const tchar* path)"
  },
  {
    "label": "GetServer()",
    "kind": "Method",
    "detail": "Function (NetworkServer&)",
    "insertText": "GetServer()"
  },
  {
    "label": "GetZone()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GetZone(StringBufferBase& out)"
  },
  {
    "label": "RetrieveCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetrieveCasFile(RetrieveResult& out, const CasKey& casKey, const tchar* hint, FileMappingBuffer* mappingBuffer = nullptr, u64 memoryMapAlignment = 1, bool allowProxy = true)"
  },
  {
    "label": "StoreCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreCasFile(CasKey& out, StringKey fileNameKey, const tchar* fileName, FileMappingHandle mappingHandle, u64 mappingOffset, u64 fileSize, const tchar* hint, bool deferCreation = false, bool keepMappingInMemory = false)"
  },
  {
    "label": "WriteCompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteCompressed(WriteResult& out, const tchar* from, const tchar* toFile)"
  },
  {
    "label": "IsDisallowedPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisallowedPath(const tchar* fileName)"
  },
  {
    "label": "SetTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrace(Trace* trace, bool detailed)"
  },
  {
    "label": "HasProxy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProxy(u32 clientId)"
  },
  {
    "label": "OnDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDisconnected(u32 clientId)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMessage(const ConnectionInfo& connectionInfo, u8 messageType, BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "WaitForWritten()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForWritten(CasEntry& casEntry, ScopedWriteLock& entryLock, const ConnectionInfo& connectionInfo, const tchar* hint)"
  },
  {
    "label": "PopId()",
    "kind": "Method",
    "detail": "Function (u16)",
    "insertText": "PopId()"
  },
  {
    "label": "PushId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushId(u16 id)"
  },
  {
    "label": "WaitEntry()",
    "kind": "Method",
    "detail": "Function (NetworkServer& m_server ; bool m_traceFetch = false ; bool m_traceStore = false ; Guid m_uid ; u8 ServiceId = StorageServiceId ; ReaderWriterLock m_waitEntriesLock ; struct WaitEntry {)",
    "insertText": "WaitEntry() : done(false)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} Event done ; bool Success = false ; u32 refCount = 0 ; } ; UnorderedMap<CasKey,WaitEntry> m_waitEntries ; struct ActiveStore { u32 clientId = ~ 0 u ; MappedView mappedView ; FileAccessor* fileAccessor = nullptr ; CasEntry* casEntry = nullptr ; Atomic<u64> totalWritten ; Atomic<u64> recvCasTime ; u64 fileSize = 0 ; u64 actualSize = 0 ; } ; ReaderWriterLock m_activeStoresLock ; UnorderedMap<u16,ActiveStore> m_activeStores ; struct ActiveFetch { u32 clientId = ~ 0 u ; Atomic<u64> left ; CasKey casKey ; Atomic<u64> sendCasTime ; FileHandle readFileHandle = InvalidFileHandle ; MappedView mappedView ; u8* memoryBegin = nullptr ; u8* memoryPos = nullptr ; bool ownsMapping = false ; void)",
    "insertText": "Release(StorageServer& server, const tchar* reason)"
  }
]