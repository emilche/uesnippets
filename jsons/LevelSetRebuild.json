[
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "PointListTransform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointListTransform"
  },
  {
    "label": "PrimCpy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrimCpy"
  },
  {
    "label": "levelSetRebuild()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVELSETREBUILD_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVELSETREBUILD_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / Exceptions . h> # include<openvdb / math / Math . h> # include<openvdb / math / Transform . h> # include<openvdb / tools / VolumeToMesh . h> # include<openvdb / tools / MeshToVolume . h> # include<openvdb / util / NullInterrupter . h> # include<openvdb / util / Util . h> # include<tbb / blocked_range . h> # include<tbb / parallel_for . h> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<class GridType> GridType::Ptr)",
    "insertText": "levelSetRebuild(const GridType& grid, float isovalue = 0, float halfWidth = float(LEVEL_SET_HALF_WIDTH), const math::Transform* xform = nullptr)"
  },
  {
    "label": "levelSetRebuild()",
    "kind": "Method",
    "detail": "Function (template<class GridType> GridType::Ptr)",
    "insertText": "levelSetRebuild(const GridType& grid, float isovalue, float exBandWidth, float inBandWidth, const math::Transform* xform = nullptr)"
  },
  {
    "label": "levelSetRebuild()",
    "kind": "Method",
    "detail": "Function (template<class GridType,InterruptT> GridType::Ptr)",
    "insertText": "levelSetRebuild(const GridType& grid, float isovalue, float exBandWidth, float inBandWidth, const math::Transform* xform = nullptr, InterruptT* interrupter = nullptr)"
  },
  {
    "label": "PointListTransform()",
    "kind": "Method",
    "detail": "Function (namespace internal { class PointListTransform { public :)",
    "insertText": "PointListTransform(const PointList& pointsIn, std::vector<Vec3s>& pointsOut, const math::Transform& xform) : mPointsIn(pointsIn) , mPointsOut(&pointsOut) , mXform(xform)"
  },
  {
    "label": "runParallel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "runParallel()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, mPointsOut->size()), *this)"
  },
  {
    "label": "runSerial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "runSerial()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "PrimCpy()",
    "kind": "Method",
    "detail": "Function (} } private : const PointList& mPointsIn ; std::vector<Vec3s>* const mPointsOut ; const math::Transform& mXform ; } ; class PrimCpy { public :)",
    "insertText": "PrimCpy(const PolygonPoolList& primsIn, const std::vector<size_t>& indexList, std::vector<Vec4I>& primsOut) : mPrimsIn(primsIn) , mIndexList(indexList) , mPrimsOut(&primsOut)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, mIndexList.size()), *this)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (openvdb::Vec4I quad ; quad [ 3 ] = openvdb::util::INVALID_IDX ; std::vector<Vec4I>& primsOut =* mPrimsOut ;)",
    "insertText": "for(size_t n = range.begin(); n < range.end(); ++n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t index = mIndexList [ n ] ; PolygonPool& polygons = mPrimsIn [ n ] ;)",
    "insertText": "for(size_t i = 0, I = polygons.numQuads(); i < I; ++i)"
  },
  {
    "label": "quad()",
    "kind": "Method",
    "detail": "Function (primsOut [ index + + ] = polygons .)",
    "insertText": "quad(i)"
  },
  {
    "label": "clearQuads()",
    "kind": "Method",
    "detail": "Function (} polygons .)",
    "insertText": "clearQuads()"
  },
  {
    "label": "triangle()",
    "kind": "Method",
    "detail": "Function (const openvdb::Vec3I& triangle = polygons .)",
    "insertText": "triangle(i)"
  },
  {
    "label": "clearTriangles()",
    "kind": "Method",
    "detail": "Function (quad [ 0 ] = triangle [ 0 ] ; quad [ 1 ] = triangle [ 1 ] ; quad [ 2 ] = triangle [ 2 ] ; primsOut [ index + + ] = quad ; } polygons .)",
    "insertText": "clearTriangles()"
  },
  {
    "label": "doLevelSetRebuild()",
    "kind": "Method",
    "detail": "Function (} } private : const PolygonPoolList& mPrimsIn ; const std::vector<size_t>& mIndexList ; std::vector<Vec4I>* const mPrimsOut ; } ; } template<class GridType,InterruptT> std::enable_if<std::is_floating_point<GridType::ValueType>::value,GridType::Ptr>::type)",
    "insertText": "doLevelSetRebuild(const GridType& grid, typename GridType::ValueType iso, typename GridType::ValueType exWidth, typename GridType::ValueType inWidth, const math::Transform* xform, InterruptT* interrupter)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float isovalue =)",
    "insertText": "float(iso), exBandWidth = float(exWidth), inBandWidth = float(inWidth)"
  },
  {
    "label": "mesher()",
    "kind": "Method",
    "detail": "Function (tools::VolumeToMesh)",
    "insertText": "mesher(isovalue)"
  },
  {
    "label": "mesher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mesher(grid)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (math::Transform::Ptr)",
    "insertText": "transform(xform != nullptr) ? xform->copy() : grid.transform().copy()"
  },
  {
    "label": "points()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec3s>)",
    "insertText": "points(mesher.pointListSize())"
  },
  {
    "label": "ptnXForm()",
    "kind": "Method",
    "detail": "Function ({ internal::PointListTransform)",
    "insertText": "ptnXForm(mesher.pointList(), points, *transform)"
  },
  {
    "label": "pointList()",
    "kind": "Method",
    "detail": "Function (mesher .)",
    "insertText": "pointList().reset(nullptr)"
  },
  {
    "label": "polygonPoolList()",
    "kind": "Method",
    "detail": "Function (} std::vector<Vec4I> primitives ; { PolygonPoolList& polygonPoolList = mesher .)",
    "insertText": "polygonPoolList()"
  },
  {
    "label": "indexlist()",
    "kind": "Method",
    "detail": "Function (size_t numPrimitives = 0 ; std::vector<size_t>)",
    "insertText": "indexlist(mesher.polygonPoolListSize())"
  },
  {
    "label": "numQuads()",
    "kind": "Method",
    "detail": "Function (const openvdb::tools::PolygonPool& polygons = polygonPoolList [ n ] ; indexlist [ n ] = numPrimitives ; numPrimitives + = polygons .)",
    "insertText": "numQuads()"
  },
  {
    "label": "numTriangles()",
    "kind": "Method",
    "detail": "Function (numPrimitives + = polygons .)",
    "insertText": "numTriangles()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} primitives .)",
    "insertText": "resize(numPrimitives)"
  },
  {
    "label": "primCpy()",
    "kind": "Method",
    "detail": "Function (internal::PrimCpy)",
    "insertText": "primCpy(polygonPoolList, indexlist, primitives)"
  },
  {
    "label": "mesh()",
    "kind": "Method",
    "detail": "Function (} QuadAndTriangleDataAdapter<Vec3s,Vec4I>)",
    "insertText": "mesh(points, primitives)"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (} return meshToVolume<)",
    "insertText": "GridType(mesh, *transform, exBandWidth, inBandWidth, DISABLE_RENORMALIZATION, nullptr)"
  },
  {
    "label": "doLevelSetRebuild()",
    "kind": "Method",
    "detail": "Function (} template<class GridType,InterruptT> std::enable_if<! std::is_floating_point<GridType::ValueType>::value,GridType::Ptr>::type)",
    "insertText": "doLevelSetRebuild(const GridType&, typename GridType::ValueType , typename GridType::ValueType , typename GridType::ValueType , const math::Transform*, InterruptT*)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, \"level set rebuild is supported only for scalar, floating-point grids\")"
  },
  {
    "label": "levelSetRebuild()",
    "kind": "Method",
    "detail": "Function (} template<class GridType,InterruptT> GridType::Ptr)",
    "insertText": "levelSetRebuild(const GridType& grid, float iso, float exWidth, float inWidth, const math::Transform* xform, InterruptT* interrupter)"
  },
  {
    "label": "isovalue()",
    "kind": "Method",
    "detail": "Function (using ValueT = GridType::ValueType ; ValueT)",
    "insertText": "isovalue(zeroVal<ValueT>() + ValueT(iso)), exBandWidth(zeroVal<ValueT>() + ValueT(exWidth)), inBandWidth(zeroVal<ValueT>() + ValueT(inWidth))"
  },
  {
    "label": "levelSetRebuild()",
    "kind": "Method",
    "detail": "Function (} template<class GridType> GridType::Ptr)",
    "insertText": "levelSetRebuild(const GridType& grid, float iso, float exWidth, float inWidth, const math::Transform* xform)"
  },
  {
    "label": "levelSetRebuild()",
    "kind": "Method",
    "detail": "Function (} template<class GridType> GridType::Ptr)",
    "insertText": "levelSetRebuild(const GridType& grid, float iso, float halfVal, const math::Transform* xform)"
  },
  {
    "label": "isovalue()",
    "kind": "Method",
    "detail": "Function (using ValueT = GridType::ValueType ; ValueT)",
    "insertText": "isovalue(zeroVal<ValueT>() + ValueT(iso)), halfWidth(zeroVal<ValueT>() + ValueT(halfVal))"
  }
]