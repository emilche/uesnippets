[
  {
    "label": "rwupdt()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<Scalar> void)",
    "insertText": "rwupdt(Matrix< Scalar, Dynamic, Dynamic > &r, const Matrix< Scalar, Dynamic, 1> &w, Matrix< Scalar, Dynamic, 1> &b, Scalar alpha)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (typedef DenseIndex Index ; const Index n = r .)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(r.rows()>=n)"
  },
  {
    "label": "givens()",
    "kind": "Method",
    "detail": "Function (std::vector<JacobiRotation<Scalar>>)",
    "insertText": "givens(n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Scalar temp,rowj ;)",
    "insertText": "for(Index j = 0; j < n; ++j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (rowj = w [ j ] ;)",
    "insertText": "for(Index i = 0; i < j; ++i)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens [ i ] .)",
    "insertText": "c() * r(i,j) + givens[i].s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (rowj = - givens [ i ] .)",
    "insertText": "s() * r(i,j) + givens[i].c()"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "r(i,j)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (} givens [ j ] .)",
    "insertText": "makeGivens(-r(j,j), rowj)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "r(j,j) = givens[j].c() * r(j,j) + givens[j].s()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens [ j ] .)",
    "insertText": "c() * b[j] + givens[j].s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (alpha = - givens [ j ] .)",
    "insertText": "s() * b[j] + givens[j].c()"
  }
]