[
  {
    "label": "FbxStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxStatus"
  },
  {
    "label": "FbxNodeAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNodeAttribute"
  },
  {
    "label": "FbxCachedEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCachedEffect"
  },
  {
    "label": "FbxLODGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLODGroup"
  },
  {
    "label": "FbxNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNull"
  },
  {
    "label": "FbxMarker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxMarker"
  },
  {
    "label": "FbxSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxSkeleton"
  },
  {
    "label": "FbxGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxGeometry"
  },
  {
    "label": "FbxMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxMesh"
  },
  {
    "label": "FbxNurbs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNurbs"
  },
  {
    "label": "FbxNurbsCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNurbsCurve"
  },
  {
    "label": "FbxLine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLine"
  },
  {
    "label": "FbxNurbsSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNurbsSurface"
  },
  {
    "label": "FbxTrimNurbsSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxTrimNurbsSurface"
  },
  {
    "label": "FbxPatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxPatch"
  },
  {
    "label": "FbxCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCamera"
  },
  {
    "label": "FbxCameraStereo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCameraStereo"
  },
  {
    "label": "FbxCameraSwitcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCameraSwitcher"
  },
  {
    "label": "FbxLight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLight"
  },
  {
    "label": "FbxOpticalReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxOpticalReference"
  },
  {
    "label": "FbxSubDiv",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxSubDiv"
  },
  {
    "label": "FbxCharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCharacter"
  },
  {
    "label": "FbxSurfaceMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxSurfaceMaterial"
  },
  {
    "label": "FbxAnimStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAnimStack"
  },
  {
    "label": "FbxAnimCurveFilterMatrixConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAnimCurveFilterMatrixConverter"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EShadingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShadingMode"
  },
  {
    "label": "EPivotSet",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPivotSet"
  },
  {
    "label": "EPivotState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPivotState"
  },
  {
    "label": "ECullingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECullingType"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_NODE_H_ # define _FBXSDK_SCENE_GEOMETRY_NODE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / core / math / fbxtransforms . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxStatus ; class FbxNodeAttribute ; class FbxCachedEffect ; class FbxLODGroup ; class FbxNull ; class FbxMarker ; class FbxSkeleton ; class FbxGeometry ; class FbxMesh ; class FbxNurbs ; class FbxNurbsCurve ; class FbxLine ; class FbxNurbsSurface ; class FbxTrimNurbsSurface ; class FbxPatch ; class FbxCamera ; class FbxCameraStereo ; class FbxCameraSwitcher ; class FbxLight ; class FbxOpticalReference ; class FbxSubDiv ; class FbxCharacter ; class FbxSurfaceMaterial ; class FbxAnimStack ; class FbxAnimCurveFilterMatrixConverter ; class FBXSDK_DLL FbxNode : public FbxObject {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxNode, FbxObject)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (public : FbxNode*)",
    "insertText": "GetParent()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddChild(FbxNode* pNode)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "RemoveChild(FbxNode* pNode)"
  },
  {
    "label": "GetChildCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetChildCount(bool pRecursive = false)"
  },
  {
    "label": "GetChild()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "GetChild(int pIndex)"
  },
  {
    "label": "FindChild()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "FindChild(const char* pName, bool pRecursive=true, bool pInitial=false)"
  },
  {
    "label": "SetTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTarget(FbxNode* pNode)"
  },
  {
    "label": "GetTarget()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "GetTarget()"
  },
  {
    "label": "SetPostTargetRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostTargetRotation(FbxVector4 pVector)"
  },
  {
    "label": "GetPostTargetRotation()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetPostTargetRotation()"
  },
  {
    "label": "SetTargetUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetUp(FbxNode* pNode)"
  },
  {
    "label": "GetTargetUp()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "GetTargetUp()"
  },
  {
    "label": "SetTargetUpVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetUpVector(FbxVector4 pVector)"
  },
  {
    "label": "GetTargetUpVector()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetTargetUpVector()"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(bool pIsVisible)"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "SetShadingMode()",
    "kind": "Method",
    "detail": "Function (enum EShadingMode { eHardShading,eWireFrame,eFlatShading,eLightShading,eTextureShading,eFullShading } ; void)",
    "insertText": "SetShadingMode(EShadingMode pShadingMode)"
  },
  {
    "label": "GetShadingMode()",
    "kind": "Method",
    "detail": "Function (EShadingMode)",
    "insertText": "GetShadingMode()"
  },
  {
    "label": "SetNodeAttribute()",
    "kind": "Method",
    "detail": "Function (FbxNodeAttribute*)",
    "insertText": "SetNodeAttribute(FbxNodeAttribute* pNodeAttribute)"
  },
  {
    "label": "GetNodeAttribute()",
    "kind": "Method",
    "detail": "Function (FbxNodeAttribute*)",
    "insertText": "GetNodeAttribute()"
  },
  {
    "label": "GetNodeAttributeCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNodeAttributeCount()"
  },
  {
    "label": "GetDefaultNodeAttributeIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDefaultNodeAttributeIndex()"
  },
  {
    "label": "SetDefaultNodeAttributeIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDefaultNodeAttributeIndex(int pIndex, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "GetNodeAttributeByIndex()",
    "kind": "Method",
    "detail": "Function (FbxNodeAttribute*)",
    "insertText": "GetNodeAttributeByIndex(int pIndex)"
  },
  {
    "label": "GetNodeAttributeIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNodeAttributeIndex(FbxNodeAttribute* pNodeAttribute, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "AddNodeAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNodeAttribute(FbxNodeAttribute* pNodeAttribute, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "RemoveNodeAttribute()",
    "kind": "Method",
    "detail": "Function (FbxNodeAttribute*)",
    "insertText": "RemoveNodeAttribute(FbxNodeAttribute* pNodeAttribute)"
  },
  {
    "label": "RemoveNodeAttributeByIndex()",
    "kind": "Method",
    "detail": "Function (FbxNodeAttribute*)",
    "insertText": "RemoveNodeAttributeByIndex(int pIndex)"
  },
  {
    "label": "GetCachedEffect()",
    "kind": "Method",
    "detail": "Function (FbxCachedEffect*)",
    "insertText": "GetCachedEffect()"
  },
  {
    "label": "GetLodGroup()",
    "kind": "Method",
    "detail": "Function (FbxLODGroup*)",
    "insertText": "GetLodGroup()"
  },
  {
    "label": "GetNull()",
    "kind": "Method",
    "detail": "Function (FbxNull*)",
    "insertText": "GetNull()"
  },
  {
    "label": "GetMarker()",
    "kind": "Method",
    "detail": "Function (FbxMarker*)",
    "insertText": "GetMarker()"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (FbxSkeleton*)",
    "insertText": "GetSkeleton()"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (FbxGeometry*)",
    "insertText": "GetGeometry()"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (FbxMesh*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "GetNurbs()",
    "kind": "Method",
    "detail": "Function (FbxNurbs*)",
    "insertText": "GetNurbs()"
  },
  {
    "label": "GetNurbsSurface()",
    "kind": "Method",
    "detail": "Function (FbxNurbsSurface*)",
    "insertText": "GetNurbsSurface()"
  },
  {
    "label": "GetNurbsCurve()",
    "kind": "Method",
    "detail": "Function (FbxNurbsCurve*)",
    "insertText": "GetNurbsCurve()"
  },
  {
    "label": "GetLine()",
    "kind": "Method",
    "detail": "Function (FbxLine*)",
    "insertText": "GetLine()"
  },
  {
    "label": "GetTrimNurbsSurface()",
    "kind": "Method",
    "detail": "Function (FbxTrimNurbsSurface*)",
    "insertText": "GetTrimNurbsSurface()"
  },
  {
    "label": "GetSubdiv()",
    "kind": "Method",
    "detail": "Function (FbxSubDiv*)",
    "insertText": "GetSubdiv()"
  },
  {
    "label": "GetPatch()",
    "kind": "Method",
    "detail": "Function (FbxPatch*)",
    "insertText": "GetPatch()"
  },
  {
    "label": "GetCamera()",
    "kind": "Method",
    "detail": "Function (FbxCamera*)",
    "insertText": "GetCamera()"
  },
  {
    "label": "GetCameraStereo()",
    "kind": "Method",
    "detail": "Function (FbxCameraStereo*)",
    "insertText": "GetCameraStereo()"
  },
  {
    "label": "GetCameraSwitcher()",
    "kind": "Method",
    "detail": "Function (FbxCameraSwitcher*)",
    "insertText": "GetCameraSwitcher()"
  },
  {
    "label": "GetLight()",
    "kind": "Method",
    "detail": "Function (FbxLight*)",
    "insertText": "GetLight()"
  },
  {
    "label": "GetOpticalReference()",
    "kind": "Method",
    "detail": "Function (FbxOpticalReference*)",
    "insertText": "GetOpticalReference()"
  },
  {
    "label": "SetTransformationInheritType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformationInheritType(FbxTransform::EInheritType pInheritType)"
  },
  {
    "label": "GetTransformationInheritType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTransformationInheritType(FbxTransform::EInheritType& pInheritType)"
  },
  {
    "label": "SetPivotState()",
    "kind": "Method",
    "detail": "Function (enum EPivotSet { eSourcePivot,eDestinationPivot } ; enum EPivotState { ePivotActive,ePivotReference } ; void)",
    "insertText": "SetPivotState(EPivotSet pPivotSet, EPivotState pPivotState)"
  },
  {
    "label": "GetPivotState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPivotState(EPivotSet pPivotSet, EPivotState& pPivotState)"
  },
  {
    "label": "SetRotationOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationOrder(EPivotSet pPivotSet, EFbxRotationOrder pRotationOrder)"
  },
  {
    "label": "GetRotationOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRotationOrder(EPivotSet pPivotSet, EFbxRotationOrder& pRotationOrder)"
  },
  {
    "label": "SetUseRotationSpaceForLimitOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseRotationSpaceForLimitOnly(EPivotSet pPivotSet, bool pUseForLimitOnly)"
  },
  {
    "label": "GetUseRotationSpaceForLimitOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseRotationSpaceForLimitOnly(EPivotSet pPivotSet)"
  },
  {
    "label": "SetRotationActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationActive(bool pVal)"
  },
  {
    "label": "GetRotationActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRotationActive()"
  },
  {
    "label": "SetQuaternionInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQuaternionInterpolation(EPivotSet pPivotSet, EFbxQuatInterpMode pQuatIterp)"
  },
  {
    "label": "GetQuaternionInterpolation()",
    "kind": "Method",
    "detail": "Function (EFbxQuatInterpMode)",
    "insertText": "GetQuaternionInterpolation(EPivotSet pPivotSet)"
  },
  {
    "label": "SetRotationStiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationStiffness(FbxVector4 pRotationStiffness)"
  },
  {
    "label": "GetRotationStiffness()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetRotationStiffness()"
  },
  {
    "label": "SetMinDampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDampRange(FbxVector4 pMinDampRange)"
  },
  {
    "label": "GetMinDampRange()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetMinDampRange()"
  },
  {
    "label": "SetMaxDampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDampRange(FbxVector4 pMaxDampRange)"
  },
  {
    "label": "GetMaxDampRange()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetMaxDampRange()"
  },
  {
    "label": "SetMinDampStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDampStrength(FbxVector4 pMinDampStrength)"
  },
  {
    "label": "GetMinDampStrength()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetMinDampStrength()"
  },
  {
    "label": "SetMaxDampStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDampStrength(FbxVector4 pMaxDampStrength)"
  },
  {
    "label": "GetMaxDampStrength()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetMaxDampStrength()"
  },
  {
    "label": "SetPreferedAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreferedAngle(FbxVector4 pPreferedAngle)"
  },
  {
    "label": "GetPreferedAngle()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetPreferedAngle()"
  },
  {
    "label": "SetRotationOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationOffset(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetRotationOffset()",
    "kind": "Method",
    "detail": "Function (const FbxVector4&)",
    "insertText": "GetRotationOffset(EPivotSet pPivotSet)"
  },
  {
    "label": "SetRotationPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationPivot(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetRotationPivot()",
    "kind": "Method",
    "detail": "Function (const FbxVector4&)",
    "insertText": "GetRotationPivot(EPivotSet pPivotSet)"
  },
  {
    "label": "SetPreRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreRotation(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetPreRotation()",
    "kind": "Method",
    "detail": "Function (const FbxVector4&)",
    "insertText": "GetPreRotation(EPivotSet pPivotSet)"
  },
  {
    "label": "SetPostRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostRotation(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetPostRotation()",
    "kind": "Method",
    "detail": "Function (const FbxVector4&)",
    "insertText": "GetPostRotation(EPivotSet pPivotSet)"
  },
  {
    "label": "SetScalingOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalingOffset(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetScalingOffset()",
    "kind": "Method",
    "detail": "Function (const FbxVector4&)",
    "insertText": "GetScalingOffset(EPivotSet pPivotSet)"
  },
  {
    "label": "SetScalingPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalingPivot(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetScalingPivot()",
    "kind": "Method",
    "detail": "Function (const FbxVector4&)",
    "insertText": "GetScalingPivot(EPivotSet pPivotSet)"
  },
  {
    "label": "SetGeometricTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometricTranslation(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetGeometricTranslation()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetGeometricTranslation(EPivotSet pPivotSet)"
  },
  {
    "label": "SetGeometricRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometricRotation(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetGeometricRotation()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetGeometricRotation(EPivotSet pPivotSet)"
  },
  {
    "label": "SetGeometricScaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometricScaling(EPivotSet pPivotSet, FbxVector4 pVector)"
  },
  {
    "label": "GetGeometricScaling()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetGeometricScaling(EPivotSet pPivotSet)"
  },
  {
    "label": "ResetPivotSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPivotSet(FbxNode::EPivotSet pPivotSet)"
  },
  {
    "label": "ConvertPivotAnimationRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPivotAnimationRecursive(FbxAnimStack* pAnimStack, EPivotSet pConversionTarget, double pFrameRate, bool pKeyReduce=true)"
  },
  {
    "label": "ResetPivotSetAndConvertAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPivotSetAndConvertAnimation(double pFrameRate=30.0, bool pKeyReduce=false, bool pToNodeCenter=true, bool pForceResetLimits=false)"
  },
  {
    "label": "SetRotationPivotAsCenterRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationPivotAsCenterRecursive(FbxVector4 pParentGeometricOffset=FbxVector4())"
  },
  {
    "label": "GetAnimationEvaluator()",
    "kind": "Method",
    "detail": "Function (FbxAnimEvaluator*)",
    "insertText": "GetAnimationEvaluator()"
  },
  {
    "label": "EvaluateGlobalTransform()",
    "kind": "Method",
    "detail": "Function (FbxAMatrix&)",
    "insertText": "EvaluateGlobalTransform(FbxTime pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)"
  },
  {
    "label": "EvaluateLocalTransform()",
    "kind": "Method",
    "detail": "Function (FbxAMatrix&)",
    "insertText": "EvaluateLocalTransform(FbxTime pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)"
  },
  {
    "label": "EvaluateLocalTranslation()",
    "kind": "Method",
    "detail": "Function (FbxVector4&)",
    "insertText": "EvaluateLocalTranslation(FbxTime pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)"
  },
  {
    "label": "EvaluateLocalRotation()",
    "kind": "Method",
    "detail": "Function (FbxVector4&)",
    "insertText": "EvaluateLocalRotation(FbxTime pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)"
  },
  {
    "label": "EvaluateLocalScaling()",
    "kind": "Method",
    "detail": "Function (FbxVector4&)",
    "insertText": "EvaluateLocalScaling(FbxTime pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)"
  },
  {
    "label": "EvaluateGlobalBoundingBoxMinMaxCenter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateGlobalBoundingBoxMinMaxCenter(FbxVector4& pBBoxMin, FbxVector4& pBBoxMax, FbxVector4& pBBoxCenter, const FbxTime& pTime=FBXSDK_TIME_INFINITE)"
  },
  {
    "label": "EvaluateRayIntersectionPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateRayIntersectionPoint(FbxVector4& pOut, const FbxVector4& pRayOrigin, const FbxVector4& pRayDir, bool pCulling=false, const FbxTime& pTime=FBXSDK_TIME_INFINITE)"
  },
  {
    "label": "GetCharacterLinkCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCharacterLinkCount()"
  },
  {
    "label": "GetCharacterLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCharacterLink(int pIndex, FbxCharacter** pCharacter, int* pCharacterLinkType, int* pNodeId, int* pNodeSubId)"
  },
  {
    "label": "FindCharacterLink()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindCharacterLink(FbxCharacter* pCharacter, int pCharacterLinkType, int pNodeId, int pNodeSubId)"
  },
  {
    "label": "GetAnimationInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnimationInterval(FbxTimeSpan& pInterval, FbxAnimStack* pAnimStack=NULL, int pAnimLayerId=0)"
  },
  {
    "label": "AddMaterial()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddMaterial(FbxSurfaceMaterial* pMaterial)"
  },
  {
    "label": "RemoveMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveMaterial(FbxSurfaceMaterial* pMaterial)"
  },
  {
    "label": "GetMaterialCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaterialCount()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (FbxSurfaceMaterial*)",
    "insertText": "GetMaterial(int pIndex)"
  },
  {
    "label": "RemoveAllMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllMaterials()"
  },
  {
    "label": "GetMaterialIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaterialIndex(const char* pName)"
  },
  {
    "label": "Pivot()",
    "kind": "Method",
    "detail": "Function (FbxPropertyT<FbxDouble3> LclTranslation ; FbxPropertyT<FbxDouble3> LclRotation ; FbxPropertyT<FbxDouble3> LclScaling ; FbxPropertyT<FbxDouble> Visibility ; FbxPropertyT<FbxBool> VisibilityInheritance ; FbxPropertyT<EFbxQuatInterpMode> QuaternionInterpolate ; FbxPropertyT<FbxDouble3> RotationOffset ; FbxPropertyT<FbxDouble3> RotationPivot ; FbxPropertyT<FbxDouble3> ScalingOffset ; FbxPropertyT<FbxDouble3> ScalingPivot ; FbxPropertyT<FbxBool> TranslationActive ; FbxPropertyT<FbxDouble3> TranslationMin ; FbxPropertyT<FbxDouble3> TranslationMax ; FbxPropertyT<FbxBool> TranslationMinX ; FbxPropertyT<FbxBool> TranslationMinY ; FbxPropertyT<FbxBool> TranslationMinZ ; FbxPropertyT<FbxBool> TranslationMaxX ; FbxPropertyT<FbxBool> TranslationMaxY ; FbxPropertyT<FbxBool> TranslationMaxZ ; FbxPropertyT<EFbxRotationOrder> RotationOrder ; FbxPropertyT<FbxBool> RotationSpaceForLimitOnly ; FbxPropertyT<FbxDouble> RotationStiffnessX ; FbxPropertyT<FbxDouble> RotationStiffnessY ; FbxPropertyT<FbxDouble> RotationStiffnessZ ; FbxPropertyT<FbxDouble> AxisLen ; FbxPropertyT<FbxDouble3> PreRotation ; FbxPropertyT<FbxDouble3> PostRotation ; FbxPropertyT<FbxBool> RotationActive ; FbxPropertyT<FbxDouble3> RotationMin ; FbxPropertyT<FbxDouble3> RotationMax ; FbxPropertyT<FbxBool> RotationMinX ; FbxPropertyT<FbxBool> RotationMinY ; FbxPropertyT<FbxBool> RotationMinZ ; FbxPropertyT<FbxBool> RotationMaxX ; FbxPropertyT<FbxBool> RotationMaxY ; FbxPropertyT<FbxBool> RotationMaxZ ; FbxPropertyT<FbxTransform::EInheritType> InheritType ; FbxPropertyT<FbxBool> ScalingActive ; FbxPropertyT<FbxDouble3> ScalingMin ; FbxPropertyT<FbxDouble3> ScalingMax ; FbxPropertyT<FbxBool> ScalingMinX ; FbxPropertyT<FbxBool> ScalingMinY ; FbxPropertyT<FbxBool> ScalingMinZ ; FbxPropertyT<FbxBool> ScalingMaxX ; FbxPropertyT<FbxBool> ScalingMaxY ; FbxPropertyT<FbxBool> ScalingMaxZ ; FbxPropertyT<FbxDouble3> GeometricTranslation ; FbxPropertyT<FbxDouble3> GeometricRotation ; FbxPropertyT<FbxDouble3> GeometricScaling ; FbxPropertyT<FbxDouble> MinDampRangeX ; FbxPropertyT<FbxDouble> MinDampRangeY ; FbxPropertyT<FbxDouble> MinDampRangeZ ; FbxPropertyT<FbxDouble> MaxDampRangeX ; FbxPropertyT<FbxDouble> MaxDampRangeY ; FbxPropertyT<FbxDouble> MaxDampRangeZ ; FbxPropertyT<FbxDouble> MinDampStrengthX ; FbxPropertyT<FbxDouble> MinDampStrengthY ; FbxPropertyT<FbxDouble> MinDampStrengthZ ; FbxPropertyT<FbxDouble> MaxDampStrengthX ; FbxPropertyT<FbxDouble> MaxDampStrengthY ; FbxPropertyT<FbxDouble> MaxDampStrengthZ ; FbxPropertyT<FbxDouble> PreferedAngleX ; FbxPropertyT<FbxDouble> PreferedAngleY ; FbxPropertyT<FbxDouble> PreferedAngleZ ; FbxPropertyT<FbxReference> LookAtProperty ; FbxPropertyT<FbxReference> UpVectorProperty ; FbxPropertyT<FbxBool> Show ; FbxPropertyT<FbxBool> NegativePercentShapeSupport ; FbxPropertyT<FbxInt> DefaultAttributeIndex ; FbxPropertyT<FbxBool> Freeze ; FbxPropertyT<FbxBool> LODBox ; # ifndef DOXYGEN_SHOULD_SKIP_THIS class FBXSDK_DLL Pivot { public : const FbxVector4 sZeroVector ; const FbxVector4 sOneVector ;)",
    "insertText": "Pivot()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (mRotationOffset = NULL ; mRotationPivot = NULL ; mPreRotation = NULL ; mPostRotation = NULL ; mScalingOffset = NULL ; mScalingPivot = NULL ; mGeometricTranslation = NULL ; mGeometricRotation = NULL ; mGeometricScaling = NULL ;)",
    "insertText": "Reset()"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mRotationOffset)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mRotationPivot)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mPreRotation)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mPostRotation)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mScalingOffset)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mScalingPivot)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mGeometricTranslation)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mGeometricRotation)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mGeometricScaling)"
  },
  {
    "label": "GetRotationOffset()",
    "kind": "Method",
    "detail": "Function (mRotationOrder = eEulerXYZ ; mRotationSpaceForLimitOnly = false ; mPivotState = FbxNode::ePivotReference ; mQuaternionInterpolate = eQuatInterpOff ; } const FbxVector4&)",
    "insertText": "GetRotationOffset()"
  },
  {
    "label": "SetRotationOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotationOffset(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mRotationOffset = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "FbxVector4()",
    "kind": "Method",
    "detail": "Function (# else mRotationOffset = FbxNew<)",
    "insertText": "FbxVector4(pV)"
  },
  {
    "label": "GetRotationPivot()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mRotationOffset = pV ; } } const FbxVector4&)",
    "insertText": "GetRotationPivot()"
  },
  {
    "label": "SetRotationPivot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotationPivot(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mRotationPivot = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetPreRotation()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mRotationPivot = pV ; } } const FbxVector4&)",
    "insertText": "GetPreRotation()"
  },
  {
    "label": "SetPreRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreRotation(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mPreRotation = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetPostRotation()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mPreRotation = pV ; } } const FbxVector4&)",
    "insertText": "GetPostRotation()"
  },
  {
    "label": "SetPostRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPostRotation(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mPostRotation = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetScalingOffset()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mPostRotation = pV ; } } const FbxVector4&)",
    "insertText": "GetScalingOffset()"
  },
  {
    "label": "SetScalingOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScalingOffset(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mScalingOffset = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetScalingPivot()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mScalingOffset = pV ; } } const FbxVector4&)",
    "insertText": "GetScalingPivot()"
  },
  {
    "label": "SetScalingPivot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScalingPivot(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mScalingPivot = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetGeometricTranslation()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mScalingPivot = pV ; } } const FbxVector4&)",
    "insertText": "GetGeometricTranslation()"
  },
  {
    "label": "SetGeometricTranslation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeometricTranslation(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mGeometricTranslation = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetGeometricRotation()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mGeometricTranslation = pV ; } } const FbxVector4&)",
    "insertText": "GetGeometricRotation()"
  },
  {
    "label": "SetGeometricRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeometricRotation(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mGeometricRotation = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetGeometricScaling()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mGeometricRotation = pV ; } } const FbxVector4&)",
    "insertText": "GetGeometricScaling()"
  },
  {
    "label": "SetGeometricScaling()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeometricScaling(const FbxVector4& pV)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (__GNUC__ < 4) mGeometricScaling = FbxNew< FbxVector4 >((FbxVector4&)pV)"
  },
  {
    "label": "GetRotationOrder()",
    "kind": "Method",
    "detail": "Function (# endif } else {* mGeometricScaling = pV ; } } EFbxRotationOrder)",
    "insertText": "GetRotationOrder()"
  },
  {
    "label": "GetRotationSpaceForLimitOnly()",
    "kind": "Method",
    "detail": "Function (mRotationOrder = pROrder ; } bool)",
    "insertText": "GetRotationSpaceForLimitOnly()"
  },
  {
    "label": "GetQuaternionInterpolate()",
    "kind": "Method",
    "detail": "Function (mRotationSpaceForLimitOnly = pVal ; } EFbxQuatInterpMode)",
    "insertText": "GetQuaternionInterpolate()"
  },
  {
    "label": "GetPivotState()",
    "kind": "Method",
    "detail": "Function (mQuaternionInterpolate = pVal ; } FbxNode::EPivotState)",
    "insertText": "GetPivotState()"
  },
  {
    "label": "Pivots()",
    "kind": "Method",
    "detail": "Function (mPivotState = pVal ; } private : FbxVector4* mRotationOffset ; FbxVector4* mRotationPivot ; FbxVector4* mPreRotation ; FbxVector4* mPostRotation ; FbxVector4* mScalingOffset ; FbxVector4* mScalingPivot ; FbxVector4* mGeometricTranslation ; FbxVector4* mGeometricRotation ; FbxVector4* mGeometricScaling ; EFbxRotationOrder mRotationOrder ; bool mRotationSpaceForLimitOnly ; EFbxQuatInterpMode mQuaternionInterpolate ; FbxNode::EPivotState mPivotState ; } ; class FBXSDK_DLL Pivots { public :)",
    "insertText": "Pivots()"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(mPivot[0])"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(mPivot[1])"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Pivot&)",
    "insertText": "Get(int id)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(id == 0 || id == 1)"
  },
  {
    "label": "SetPivotState()",
    "kind": "Method",
    "detail": "Function (smDefaultPivot .)",
    "insertText": "SetPivotState(mPivotState[id])"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mPivot[id] != NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ Pivot* p = mPivot [ id ] ; \\)",
    "insertText": "if(p == NULL)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ return p -> Get # #)",
    "insertText": "name()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void Set # #)",
    "insertText": "name(int id, const FbxVector4& pV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(mIsDefault[id] && pV[0] == defVect[0] && pV[1] == defVect[1] && pV[2] == defVect[2])"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (\\ mIsDefault [ id ] = false ; \\)",
    "insertText": "Get(id).Set##name(pV)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(RotationOffset, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(RotationPivot, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(PreRotation, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(PostRotation, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(ScalingOffset, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(ScalingPivot, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(GeometricTranslation, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(GeometricRotation, Pivot::sZeroVector)"
  },
  {
    "label": "MACRO_PIVOT_VECTOR_FCTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MACRO_PIVOT_VECTOR_FCTS(GeometricScaling, Pivot::sOneVector)"
  },
  {
    "label": "MACRO_PIVOT_BOOL_FCTS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MACRO_PIVOT_BOOL_FCTS(name) \\ inline bool Get##name(int id)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void Set # #)",
    "insertText": "name(int id, bool pV)"
  },
  {
    "label": "MACRO_PIVOT_BOOL_FCTS()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "MACRO_PIVOT_BOOL_FCTS(RotationSpaceForLimitOnly)"
  },
  {
    "label": "GetQuaternionInterpolate()",
    "kind": "Method",
    "detail": "Function (EFbxQuatInterpMode)",
    "insertText": "GetQuaternionInterpolate(int id)"
  },
  {
    "label": "SetQuaternionInterpolate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetQuaternionInterpolate(int id, EFbxQuatInterpMode pV)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (mIsDefault [ id ] = false ;)",
    "insertText": "Get(id).SetQuaternionInterpolate(pV)"
  },
  {
    "label": "GetRotationOrder()",
    "kind": "Method",
    "detail": "Function (} EFbxRotationOrder)",
    "insertText": "GetRotationOrder(int id)"
  },
  {
    "label": "SetRotationOrder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotationOrder(int id, EFbxRotationOrder pROrder)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (mIsDefault [ id ] = false ;)",
    "insertText": "Get(id).SetRotationOrder(pROrder)"
  },
  {
    "label": "GetPivotState()",
    "kind": "Method",
    "detail": "Function (} FbxNode::EPivotState)",
    "insertText": "GetPivotState(int id)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mPivotState [ id ] = pVal ;)",
    "insertText": "if(mPivot[id]) mPivot[id]->SetPivotState(pVal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mIsDefault [ i ] = true ; mPivotState [ i ] = FbxNode::ePivotReference ;)",
    "insertText": "if(mPivot[i]) mPivot[i]->Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } private : Pivot* mPivot [ 2 ] ; FbxNode::EPivotState mPivotState [ 2 ] ; bool mIsDefault [ 2 ] ; Pivot smDefaultPivot ; } ; class FBXSDK_DLL LinkToCharacter { public : bool)",
    "insertText": "operator(LinkToCharacter& pLinkToCharacter)"
  },
  {
    "label": "GetChildName()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "GetChildName(FbxUInt pIndex)"
  },
  {
    "label": "GetChildNameCount()",
    "kind": "Method",
    "detail": "Function (FbxUInt)",
    "insertText": "GetChildNameCount()"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (FbxTransform&)",
    "insertText": "GetTransform()"
  },
  {
    "label": "GetTranslationLimits()",
    "kind": "Method",
    "detail": "Function (FbxLimits&)",
    "insertText": "GetTranslationLimits()"
  },
  {
    "label": "GetRotationLimits()",
    "kind": "Method",
    "detail": "Function (FbxLimits&)",
    "insertText": "GetRotationLimits()"
  },
  {
    "label": "GetScalingLimits()",
    "kind": "Method",
    "detail": "Function (FbxLimits&)",
    "insertText": "GetScalingLimits()"
  },
  {
    "label": "GetPivots()",
    "kind": "Method",
    "detail": "Function (Pivots&)",
    "insertText": "GetPivots()"
  },
  {
    "label": "UpdatePivotsAndLimitsFromProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePivotsAndLimitsFromProperties()"
  },
  {
    "label": "UpdatePropertiesFromPivotsAndLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePropertiesFromPivotsAndLimits()"
  },
  {
    "label": "SetRotationActiveProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationActiveProperty(bool pVal)"
  },
  {
    "label": "PivotSetToMBTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PivotSetToMBTransform(EPivotSet pPivotSet)"
  },
  {
    "label": "AddCharacterLink()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddCharacterLink(FbxCharacter* pCharacter, int pCharacterLinkType, int pNodeId, int pNodeSubId)"
  },
  {
    "label": "RemoveCharacterLink()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemoveCharacterLink(FbxCharacter* pCharacter, int pCharacterLinkType, int pNodeId, int pNodeSubId)"
  },
  {
    "label": "DeepCloneWithNodeAttributes()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "DeepCloneWithNodeAttributes()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetTypeFlags()",
    "kind": "Method",
    "detail": "Function (FbxStringList)",
    "insertText": "GetTypeFlags()"
  },
  {
    "label": "PropertyNotify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyNotify(EPropertyNotifyType pType, FbxProperty& pProperty)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (enum ECullingType { eCullingOff,eCullingOnCCW,eCullingOnCW } ; ECullingType mCullingType ; bool mCorrectInheritType ; protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(bool pRecursive)"
  },
  {
    "label": "GetAnimationIntervalRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnimationIntervalRecursive(FbxTimeSpan& pTimeInterval, FbxAnimLayer* pAnimLayer)"
  },
  {
    "label": "ResetLimitsRecursive()",
    "kind": "Method",
    "detail": "Function (private : typedef FbxSet<FbxHandle> GeomInstSet ; void)",
    "insertText": "ResetLimitsRecursive(FbxNode* pNode)"
  },
  {
    "label": "ConvertPivotAnimationRecurseLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPivotAnimationRecurseLoop(FbxAnimStack* pAnimStack, const EPivotSet pConversionTarget, const double pFrameRate, const bool pKeyReduce, GeomInstSet& pGeomInstSet)"
  },
  {
    "label": "ConvertPivotAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPivotAnimation(FbxAnimStack* pAnimStack, const EPivotSet pConversionTarget, const double pFrameRate, const bool pKeyReduce, GeomInstSet& pGeomInstSet)"
  },
  {
    "label": "ConvertPivotAnimation_SetupMatrixConverter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertPivotAnimation_SetupMatrixConverter(FbxAnimCurveFilterMatrixConverter& pConverter, const EPivotSet& pSrcSet, const EPivotSet& pDstSet, const double pFrameRate, const bool pKeyReduce, GeomInstSet& pGeomInstSet)"
  },
  {
    "label": "ConvertPivotAnimation_ApplyGeometryPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPivotAnimation_ApplyGeometryPivot(const EPivotSet& pSrcSet, const EPivotSet& pDstSet, GeomInstSet& pGeomInstSet)"
  },
  {
    "label": "FbxTypeOf()",
    "kind": "Method",
    "detail": "Function (FbxTransform mTransform ; Pivots mPivots ; FbxObject* mAnimCurveNodeContainer ; FbxArray<FbxString*> mChildrenNameList ; FbxVector4 mPostTargetRotation ; FbxVector4 mTargetUpVector ; FbxNode::EShadingMode mShadingMode ; FbxArray<LinkToCharacter> mLinkToCharacter ; # endif } ; EFbxType)",
    "insertText": "FbxTypeOf(const EFbxRotationOrder&)"
  }
]