[
  {
    "label": "UMovieSceneEntityGroupingSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntityGroupingSystem"
  },
  {
    "label": "FAddGroupMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddGroupMutation"
  },
  {
    "label": "FUpdateGroupsTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateGroupsTask"
  },
  {
    "label": "CBatchGroupingPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CBatchGroupingPolicy"
  },
  {
    "label": "MOVIESCENE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENE_API"
  },
  {
    "label": "IEntityGroupingHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IEntityGroupingHandler"
  },
  {
    "label": "TEntityGroupingHandlerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityGroupingHandlerImpl"
  },
  {
    "label": "TEntityGroupingHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityGroupingHandler"
  },
  {
    "label": "TEntityGroupingHandlerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityGroupingHandlerBase"
  },
  {
    "label": "TTupleGroupingPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTupleGroupingPolicy"
  },
  {
    "label": "FEntityGroupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityGroupInfo"
  },
  {
    "label": "FEntityGroupingHandlerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityGroupingHandlerInfo"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" CoreTypes . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / MovieSceneComponentTypeInfo . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" EntitySystem / MovieSceneEntitySystemTask . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" MovieSceneEntityGroupingSystem . generated . h \" class UMovieSceneEntityGroupingSystem ; namespace UE::MovieScene { struct FAddGroupMutation ; struct FUpdateGroupsTask ; struct CBatchGroupingPolicy { template<T> auto)",
    "insertText": "Requires(T& In) -> decltype(&T::InitializeGroupKeys)"
  },
  {
    "label": "FEntityGroupBuilder()",
    "kind": "Method",
    "detail": "Function (} ; struct FEntityGroupBuilder {)",
    "insertText": "FEntityGroupBuilder(UMovieSceneEntityGroupingSystem* InOwner, FEntityGroupingPolicyKey InPolicyKey)"
  },
  {
    "label": "MakeGroupID()",
    "kind": "Method",
    "detail": "Function (FEntityGroupID)",
    "insertText": "MakeGroupID(int32 GroupIndex)"
  },
  {
    "label": "MakeInvalidGroupID()",
    "kind": "Method",
    "detail": "Function (} FEntityGroupID)",
    "insertText": "MakeInvalidGroupID()"
  },
  {
    "label": "AddEntityToGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEntityToGroup(const FMovieSceneEntityID& InEntity, const FEntityGroupID& InNewGroupID)"
  },
  {
    "label": "RemoveEntityFromGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveEntityFromGroup(const FMovieSceneEntityID& InEntity, const FEntityGroupID& InPreviousGroupID)"
  },
  {
    "label": "AllocateGroupIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AllocateGroupIndex()"
  },
  {
    "label": "FreeGroupIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeGroupIndex(int32 InGroupIndex)"
  },
  {
    "label": "IEntityGroupingHandler()",
    "kind": "Method",
    "detail": "Function (private : UMovieSceneEntityGroupingSystem* Owner ; FEntityGroupingPolicyKey PolicyKey ; } ; struct IEntityGroupingHandler { ~)",
    "insertText": "IEntityGroupingHandler()"
  },
  {
    "label": "PreTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreTask(FEntityGroupBuilder* Builder)"
  },
  {
    "label": "ProcessAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessAllocation(FEntityAllocationIteratorItem Item, FReadEntityIDs EntityIDs, TWrite<FEntityGroupID> GroupIDs, FEntityGroupBuilder* Builder)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(bool bFreeGroupIDs, FEntityGroupBuilder* Builder)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<GroupingPolicy,ComponentIndices,. . . ComponentTypes> struct TEntityGroupingHandlerImpl ; template<GroupingPolicy,. . . ComponentTypes> struct TEntityGroupingHandler : TEntityGroupingHandlerImpl<GroupingPolicy,TMakeIntegerSequence<int,)",
    "insertText": "sizeof(ComponentTypes)"
  },
  {
    "label": "TEntityGroupingHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEntityGroupingHandler(GroupingPolicy&& InPolicy, TComponentTypeID<ComponentTypes>... InComponents) : TEntityGroupingHandlerImpl<GroupingPolicy, TMakeIntegerSequence<int, sizeof...(ComponentTypes)>, ComponentTypes...>( MoveTemp(InPolicy), InComponents...)"
  },
  {
    "label": "GetOrAllocateGroupIndex()",
    "kind": "Method",
    "detail": "Function (} } ; template<GroupingPolicy> struct TEntityGroupingHandlerBase { using GroupKeyType = GroupingPolicy::GroupKeyType ; int32)",
    "insertText": "GetOrAllocateGroupIndex(typename TCallTraits<GroupKeyType>::ParamType InGroupKey, FEntityGroupBuilder* Builder)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (int32& GroupIndex = GroupKeyToIndex .)",
    "insertText": "FindOrAdd(InGroupKey, INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(EmptyGroupIndices.IsValidIndex(GroupIndex))"
  },
  {
    "label": "TEntityGroupingHandlerImpl()",
    "kind": "Method",
    "detail": "Function (EmptyGroupIndices [ GroupIndex ] = false ; } } return GroupIndex ; } protected : TMap<GroupKeyType,int32> GroupKeyToIndex ; TBitArray<> EmptyGroupIndices ; } ; template<GroupingPolicy,int . . . ComponentIndices,. . . ComponentTypes> struct TEntityGroupingHandlerImpl<GroupingPolicy,TIntegerSequence<int,ComponentIndices . . .>,ComponentTypes . . .> : TEntityGroupingHandlerBase<GroupingPolicy>,IEntityGroupingHandler { using GroupKeyType = GroupingPolicy::GroupKeyType ; GroupingPolicy Policy ; TTuple<TComponentTypeID<ComponentTypes> . . .> Components ;)",
    "insertText": "TEntityGroupingHandlerImpl(GroupingPolicy&& InPolicy, TComponentTypeID<ComponentTypes>... InComponents) : Policy(MoveTemp(InPolicy)) , Components(InComponents...)"
  },
  {
    "label": "PreTaskImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreTaskImpl(void*, ...)"
  },
  {
    "label": "PreTaskImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PreTaskImpl(T* InPolicy, FEntityGroupBuilder* Builder, decltype(&T::PreTask)* = 0)"
  },
  {
    "label": "PreTask()",
    "kind": "Method",
    "detail": "Function (InPolicy ->)",
    "insertText": "PreTask(Builder)"
  },
  {
    "label": "PreTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreTaskImpl(&Policy, Builder)"
  },
  {
    "label": "PreAllocationCallbackImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PreAllocationCallbackImpl(void*, ...)"
  },
  {
    "label": "PreAllocationCallbackImpl()",
    "kind": "Method",
    "detail": "Function (const bool bProcessAllocation =)",
    "insertText": "PreAllocationCallbackImpl(&Policy, Item)"
  },
  {
    "label": "GetAllocationType()",
    "kind": "Method",
    "detail": "Function (const FComponentMask& AllocationType = Item .)",
    "insertText": "GetAllocationType()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const bool bNeedsLink = AllocationType .)",
    "insertText": "Contains(BuiltInComponents->Tags.NeedsLink)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const bool bNeedsUnlink = AllocationType .)",
    "insertText": "Contains(BuiltInComponents->Tags.NeedsUnlink)"
  },
  {
    "label": "VisitLinkedEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitLinkedEntities(Item, EntityIDs, GroupIDs, Builder)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bNeedsUnlink)"
  },
  {
    "label": "VisitUnlinkedEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitUnlinkedEntities(Item, EntityIDs, GroupIDs, Builder)"
  },
  {
    "label": "PostAllocationCallbackImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PostAllocationCallbackImpl(&Policy, Item)"
  },
  {
    "label": "VisitLinkedEntities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitLinkedEntities(FEntityAllocationIteratorItem Item, FReadEntityIDs EntityIDs, TWrite<FEntityGroupID> GroupIDs, FEntityGroupBuilder* Builder)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (const FEntityAllocation* Allocation = Item .)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "InitializeGroupKeys()",
    "kind": "Method",
    "detail": "Function (Policy .)",
    "insertText": "InitializeGroupKeys(*this, Builder, Item, EntityIDs, GroupIDs, Allocation->ReadComponents(Components.template Get<ComponentIndices>())...)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Allocation ->)",
    "insertText": "Num()"
  },
  {
    "label": "ComponentReaders()",
    "kind": "Method",
    "detail": "Function (TTuple<TComponentReader<ComponentTypes> . . .>)",
    "insertText": "ComponentReaders(Allocation->ReadComponents(Components.template Get<ComponentIndices>())...)"
  },
  {
    "label": "GetGroupKey()",
    "kind": "Method",
    "detail": "Function (GroupKeyType GroupKey ; const bool bValidGroupKey = Policy .)",
    "insertText": "GetGroupKey(ComponentReaders.template Get<ComponentIndices>()[Index]..., GroupKey)"
  },
  {
    "label": "EntityID()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneEntityID)",
    "insertText": "EntityID(EntityIDs[Index])"
  },
  {
    "label": "GroupID()",
    "kind": "Method",
    "detail": "Function (FEntityGroupID&)",
    "insertText": "GroupID(GroupIDs[Index])"
  },
  {
    "label": "GetOrAllocateGroupIndex()",
    "kind": "Method",
    "detail": "Function (int32 NewGroupIndex = this ->)",
    "insertText": "GetOrAllocateGroupIndex(GroupKey, Builder)"
  },
  {
    "label": "MakeGroupID()",
    "kind": "Method",
    "detail": "Function (FEntityGroupID NewGroupID = Builder ->)",
    "insertText": "MakeGroupID(NewGroupIndex)"
  },
  {
    "label": "AddEntityToGroup()",
    "kind": "Method",
    "detail": "Function (Builder ->)",
    "insertText": "AddEntityToGroup(EntityID, NewGroupID)"
  },
  {
    "label": "VisitUnlinkedEntities()",
    "kind": "Method",
    "detail": "Function (GroupID = NewGroupID ; } else { GroupID = InvalidGroupID ; } } } } void)",
    "insertText": "VisitUnlinkedEntities(FEntityAllocationIteratorItem Item, FReadEntityIDs EntityIDs, TWrite<FEntityGroupID> GroupIDs, FEntityGroupBuilder* Builder)"
  },
  {
    "label": "RemoveEntityFromGroup()",
    "kind": "Method",
    "detail": "Function (const bool bIsGroupEmpty = Builder ->)",
    "insertText": "RemoveEntityFromGroup(EntityID, GroupID)"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (this -> EmptyGroupIndices .)",
    "insertText": "PadToNum(GroupID.GroupIndex + 1, false)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (this -> EmptyGroupIndices [ GroupID . GroupIndex ] = true ; })",
    "insertText": "ensure(!EnumHasAllFlags(GroupID.Flags , EEntityGroupFlags::RemovedFromGroup))"
  },
  {
    "label": "PostAllocationCallbackImpl()",
    "kind": "Method",
    "detail": "Function (GroupID . Flags | = EEntityGroupFlags::RemovedFromGroup ; } } } void)",
    "insertText": "PostAllocationCallbackImpl(void*, ...)"
  },
  {
    "label": "PostAllocationCallbackImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PostAllocationCallbackImpl(T* InPolicy, FEntityAllocationIteratorItem Item, decltype(&T::PostProcessGroups)* = 0)"
  },
  {
    "label": "PostProcessGroups()",
    "kind": "Method",
    "detail": "Function (InPolicy ->)",
    "insertText": "PostProcessGroups(Item)"
  },
  {
    "label": "PostTaskImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostTaskImpl(void*, ...)"
  },
  {
    "label": "PostTaskImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PostTaskImpl(T* InPolicy, FEntityGroupBuilder* Builder, bool bInFreeGroupIDs, decltype(&T::PostTask)* = 0)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (InPolicy ->)",
    "insertText": "PostTask(Builder, bInFreeGroupIDs)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostTask(bool bInFreeGroupIDs, FEntityGroupBuilder* Builder)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<int32,GroupKeyType> GroupIndexToKey ;)",
    "insertText": "for(const TPair<GroupKeyType, int32>& Pair : this->GroupKeyToIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GroupIndexToKey .)",
    "insertText": "Add(Pair.Value, Pair.Key)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(TConstSetBitIterator<> It(this->EmptyGroupIndices); It; ++It)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const GroupKeyType* GroupKey = GroupIndexToKey .)",
    "insertText": "Find(It.GetIndex())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (const int NumRemoved = this -> GroupKeyToIndex .)",
    "insertText": "Remove(*GroupKey)"
  },
  {
    "label": "FreeGroupIndex()",
    "kind": "Method",
    "detail": "Function (} Builder ->)",
    "insertText": "FreeGroupIndex(It.GetIndex())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} this -> EmptyGroupIndices .)",
    "insertText": "Reset()"
  },
  {
    "label": "PostTaskImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PostTaskImpl(&Policy, Builder, bInFreeGroupIDs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GroupKeyType NewKey = Pair . Key ;)",
    "insertText": "if(Policy.OnObjectsReplaced(NewKey, ReplacementMap))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReplacedKeys .)",
    "insertText": "Add(Pair.Key, NewKey)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const TPair<GroupKeyType, GroupKeyType>& Pair : ReplacedKeys)"
  },
  {
    "label": "RemoveAndCopyValue()",
    "kind": "Method",
    "detail": "Function (int32 GroupIndex ; const bool bRemoved = this -> GroupKeyToIndex .)",
    "insertText": "RemoveAndCopyValue(Pair.Key, GroupIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this -> GroupKeyToIndex .)",
    "insertText": "Add(Pair.Value, GroupIndex)"
  },
  {
    "label": "ReplaceGroupKeyObjectElement()",
    "kind": "Method",
    "detail": "Function (} } } # endif } ; namespace Private { template<T> bool)",
    "insertText": "ReplaceGroupKeyObjectElement(T&& InElem, const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UObject* CurrentObject = InOutElem ;)",
    "insertText": "if(UObject* const* NewObject = ReplacementMap.Find(CurrentObject))"
  },
  {
    "label": "GetGroupKey()",
    "kind": "Method",
    "detail": "Function (InOutElem = NewObject ; return true ; } return false ; } } template<. . . ComponentTypes> struct TTupleGroupingPolicy { using GroupKeyType = TTuple<ComponentTypes . . .> ; bool)",
    "insertText": "GetGroupKey(ComponentTypes... InComponents, GroupKeyType& OutGroupKey)"
  },
  {
    "label": "MakeTuple()",
    "kind": "Method",
    "detail": "Function (OutGroupKey =)",
    "insertText": "MakeTuple(InComponents...)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (bool bReplaced = false ;)",
    "insertText": "VisitTupleElements([&ReplacementMap, &bReplaced](auto& InElem) { bReplaced |= Private::ReplaceGroupKeyObjectElement(InElem, ReplacementMap); }, InOutKey)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public : using FEntityGroupID = UE::MovieScene::FEntityGroupID ; using FEntityGroupingPolicyKey = UE::MovieScene::FEntityGroupingPolicyKey ; using IEntityGroupingHandler = UE::MovieScene::IEntityGroupingHandler ; using FMovieSceneEntityID = UE::MovieScene::FMovieSceneEntityID ;)",
    "insertText": "GENERATED_BODY() UMovieSceneEntityGroupingSystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "AddGrouping()",
    "kind": "Method",
    "detail": "Function (template<GroupingPolicy,. . . ComponentTypes> FEntityGroupingPolicyKey)",
    "insertText": "AddGrouping(GroupingPolicy&& InPolicy, TComponentTypeID<ComponentTypes>... InComponents)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; using NewGroupHandlerType = TEntityGroupingHandler<GroupingPolicy,ComponentTypes . . .> ;)",
    "insertText": "static_assert(sizeof(NewGroupHandlerType) <= 256, \"Handler type too big! Please increase the TInlineValue size.\")"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (const int32 HandlerIndex = GroupHandlers .)",
    "insertText": "Emplace()"
  },
  {
    "label": "NewGroupHandlerType()",
    "kind": "Method",
    "detail": "Function (FEntityGroupingHandlerInfo& HandlerInfo = GroupHandlers [ HandlerIndex ] ; HandlerInfo . Handler . Emplace<)",
    "insertText": "NewGroupHandlerType(MoveTemp(InPolicy), InComponents...)"
  },
  {
    "label": "FComponentMask()",
    "kind": "Method",
    "detail": "Function (HandlerInfo . ComponentMask =)",
    "insertText": "FComponentMask({ InComponents... })"
  },
  {
    "label": "AddGrouping()",
    "kind": "Method",
    "detail": "Function (FEntityGroupingPolicyKey NewPolicyKey { HandlerIndex } ; return NewPolicyKey ; } template<. . . ComponentTypes> FEntityGroupingPolicyKey)",
    "insertText": "AddGrouping(TComponentTypeID<ComponentTypes>... InComponents)"
  },
  {
    "label": "AddGrouping()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::TTupleGroupingPolicy<ComponentTypes . . .> TuplePolicy ; return)",
    "insertText": "AddGrouping(MoveTemp(TuplePolicy), InComponents...)"
  },
  {
    "label": "RemoveGrouping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveGrouping(FEntityGroupingPolicyKey InPolicyKey)"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (TArrayView<const UE::MovieScene::FMovieSceneEntityID>)",
    "insertText": "GetGroup(const FEntityGroupID& InGroupID)"
  },
  {
    "label": "FreeGroupIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeGroupIndex(int32 Index)"
  },
  {
    "label": "NumGroups()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumGroups()"
  },
  {
    "label": "IsRelevantImpl()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "IsRelevantImpl(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "OnLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLink()"
  },
  {
    "label": "OnUnlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnlink()"
  },
  {
    "label": "OnCleanTaggedGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCleanTaggedGarbage()"
  },
  {
    "label": "ProcessModifiedGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessModifiedGroups()"
  }
]