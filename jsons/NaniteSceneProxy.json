[
  {
    "label": "FPerInstanceRenderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerInstanceRenderData"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "USkinnedMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedMeshComponent"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FSkeletalMeshObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObject"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureResource"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "ECollisionTraceFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionTraceFlag"
  },
  {
    "label": "EMaterialDomain",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialDomain"
  },
  {
    "label": "FStaticMeshVertexFactories",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexFactories"
  },
  {
    "label": "FStaticMeshSceneProxyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshSceneProxyDesc"
  },
  {
    "label": "FInstancedStaticMeshSceneProxyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedStaticMeshSceneProxyDesc"
  },
  {
    "label": "FMaterialAuditEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialAuditEntry"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "FResourceMeshInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceMeshInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSceneProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneProxyBase"
  },
  {
    "label": "FMaterialSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialSection"
  },
  {
    "label": "FSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneProxy"
  },
  {
    "label": "FMeshInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshInfo"
  },
  {
    "label": "FFallbackLODInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFallbackLODInfo"
  },
  {
    "label": "FSectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionInfo"
  },
  {
    "label": "FSkinnedSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedSceneProxy"
  },
  {
    "label": "FMaterialAudit()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PrimitiveSceneProxy . h \" # include \" PrimitiveViewRelevance . h \" # include \" Rendering / NaniteResources . h \" # include \" RayTracingInstance . h \" # include \" RayTracingGeometry . h \" # include \" LocalVertexFactory . h \" # include \" Matrix3x4 . h \" struct FPerInstanceRenderData ; class UStaticMeshComponent ; class USkinnedMeshComponent ; class USkinnedAsset ; class FSkeletalMeshObject ; class FSkeletalMeshRenderData ; class FSkeletalMeshLODRenderData ; class FTextureResource ; class UWorld ; enum ECollisionTraceFlag : int ; enum EMaterialDomain : int ; struct FStaticMeshVertexFactories ; using FStaticMeshVertexFactoriesArray = TArray<FStaticMeshVertexFactories> ; struct FStaticMeshSceneProxyDesc ; struct FInstancedStaticMeshSceneProxyDesc ; namespace Nanite { struct FMaterialAuditEntry { UMaterialInterface* Material = nullptr ; FName MaterialSlotName ; int32 MaterialIndex = INDEX_NONE ; uint8 bHasAnyError : 1 ; uint8 bHasNullMaterial : 1 ; uint8 bHasWorldPositionOffset : 1 ; uint8 bHasUnsupportedBlendMode : 1 ; uint8 bHasUnsupportedShadingModel : 1 ; uint8 bHasPixelDepthOffset : 1 ; uint8 bHasTessellationEnabled : 1 ; uint8 bHasVertexInterpolator : 1 ; uint8 bHasVertexUVs : 1 ; uint8 bHasPerInstanceRandomID : 1 ; uint8 bHasPerInstanceCustomData : 1 ; uint8 bHasInvalidUsage : 1 ; FVector4f LocalUVDensities ; } ; struct FMaterialAudit { FString AssetName ; TArray<FMaterialAuditEntry,TInlineAllocator<4>> Entries ; UMaterialInterface* FallbackMaterial ; uint8 bHasAnyError : 1 ; uint8 bHasMasked : 1 ; uint8 bHasSky : 1 ;)",
    "insertText": "FMaterialAudit() : FallbackMaterial(nullptr) , bHasAnyError(false) , bHasMasked(false) , bHasSky(false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid(bool bAllowMasked)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (} UMaterialInterface*)",
    "insertText": "GetMaterial(int32 MaterialIndex)"
  },
  {
    "label": "HasPerInstanceRandomID()",
    "kind": "Method",
    "detail": "Function (const FMaterialAuditEntry& AuditEntry = Entries [ MaterialIndex ] ; return AuditEntry . bHasAnyError ? FallbackMaterial : AuditEntry . Material ; } return nullptr ; } bool)",
    "insertText": "HasPerInstanceRandomID(int32 MaterialIndex)"
  },
  {
    "label": "AuditMaterials()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "AuditMaterials(const USkinnedMeshComponent* Component, FMaterialAudit& Audit, bool bSetMaterialUsage = true)"
  },
  {
    "label": "AuditMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AuditMaterials(const UStaticMeshComponent* Component, FMaterialAudit& Audit, bool bSetMaterialUsage = true)"
  },
  {
    "label": "AuditMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AuditMaterials(const FStaticMeshSceneProxyDesc* ProxyDesc, FMaterialAudit& Audit, bool bSetMaterialUsage = true)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(EBlendMode Mode)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsSupportedMaterialDomain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedMaterialDomain(EMaterialDomain Domain)"
  },
  {
    "label": "IsSupportedShadingModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedShadingModel(FMaterialShadingModelField ShadingModelField)"
  },
  {
    "label": "IsMaskingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaskingAllowed(UWorld* World, bool bForceNaniteForMasked)"
  },
  {
    "label": "StaticMesh()",
    "kind": "Method",
    "detail": "Function (struct FResourceMeshInfo { TArray<uint32> SegmentMapping ; uint32 NumClusters = 0 ; uint32 NumNodes = 0 ; uint32 NumVertices = 0 ; uint32 NumTriangles = 0 ; uint32 NumMaterials = 0 ; uint32 NumSegments = 0 ; uint32 NumResidentClusters = 0 ; FDebugName DebugName ; } ; enum class EFilterFlags : uint8 { None = 0 u,)",
    "insertText": "StaticMesh(1u << 0u), InstancedStaticMesh = (1u << 1u), Foliage = (1u << 2u), Grass = (1u << 3u), Landscape = (1u << 4u), StaticMobility = (1u << 5u), NonStaticMobility = (1u << 6u), SkeletalMesh = (1u << 7u)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EFilterFlags)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR enum class EHitProxyMode : uint8 { MaterialSection,PerInstance,} ; # endif struct FMaterialSection { FMaterialRenderProxy* RasterMaterialProxy = nullptr ; FMaterialRenderProxy* ShadingMaterialProxy = nullptr ; # if WITH_EDITOR HHitProxy* HitProxy = nullptr ; # endif int32 MaterialIndex = INDEX_NONE ; float MaxWPOExtent = 0 . 0 f ; FDisplacementScaling DisplacementScaling ; FDisplacementFadeRange DisplacementFadeRange ; FMaterialRelevance MaterialRelevance ; FVector4f LocalUVDensities =)",
    "insertText": "FVector4f(1.0f)"
  },
  {
    "label": "ResetToDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (uint8 bHasPerInstanceRandomID : 1 = false ; uint8 bHasPerInstanceCustomData : 1 = false ; uint8 bHidden : 1 = false ; uint8 bCastShadow : 1 = false ; uint8 bAlwaysEvaluateWPO : 1 = false ; # if WITH_EDITORONLY_DATA uint8 bSelected : 1 = false ; # endif void)",
    "insertText": "ResetToDefaultMaterial(bool bShading = true, bool bRaster = true)"
  },
  {
    "label": "IsProgrammableRaster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProgrammableRaster(bool bEvaluateWPO)"
  },
  {
    "label": "IsVertexProgrammableRaster()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexProgrammableRaster(bool bEvaluateWPO)"
  },
  {
    "label": "bEnableWPO()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bEnableWPO(bEvaluateWPO && MaterialRelevance.bUsesWorldPositionOffset)"
  },
  {
    "label": "IsPixelProgrammableRaster()",
    "kind": "Method",
    "detail": "Function (const bool bEnableVertexUVs = MaterialRelevance . bUsesCustomizedUVs&&)",
    "insertText": "IsPixelProgrammableRaster()"
  },
  {
    "label": "SupportsAlwaysVisible()",
    "kind": "Method",
    "detail": "Function (bIsNaniteMesh = true ; bIsAlwaysVisible =)",
    "insertText": "SupportsAlwaysVisible()"
  },
  {
    "label": "FSceneProxyBase()",
    "kind": "Method",
    "detail": "Function (bHasVertexProgrammableRaster = false ; bHasPixelProgrammableRaster = false ; bHasDynamicDisplacement = false ; bReverseCulling = false ; bHasPerClusterDisplacementFallbackRaster = false ; # if WITH_EDITOR bHasSelectedInstances = false ; # endif })",
    "insertText": "FSceneProxyBase(const UPrimitiveComponent* Component) : FPrimitiveSceneProxy(Component)"
  },
  {
    "label": "FSceneProxyBase()",
    "kind": "Method",
    "detail": "Function (bHasVertexProgrammableRaster = false ; bHasPixelProgrammableRaster = false ; bHasDynamicDisplacement = false ; bReverseCulling = false ; bHasPerClusterDisplacementFallbackRaster = false ; # if WITH_EDITOR bHasSelectedInstances = false ; # endif } ~)",
    "insertText": "FSceneProxyBase()"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR HHitProxy*)",
    "insertText": "CreateHitProxies(IPrimitiveComponent* Component, TArray<TRefCountPtr<HHitProxy>>& OutHitProxies)"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (HHitProxy*)",
    "insertText": "CreateHitProxies(UPrimitiveComponent* Component, TArray<TRefCountPtr<HHitProxy>>& OutHitProxies)"
  },
  {
    "label": "IsUsingDistanceCullFade()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsUsingDistanceCullFade()"
  },
  {
    "label": "HasDynamicDisplacement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDynamicDisplacement()"
  },
  {
    "label": "GetCombinedMaterialRelevance()",
    "kind": "Method",
    "detail": "Function (# if SUPPORT_REVERSE_CULLING_IN_NANITE return bReverseCulling ; # else return false ; # endif } const FMaterialRelevance&)",
    "insertText": "GetCombinedMaterialRelevance()"
  },
  {
    "label": "SetRayTracingId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRayTracingId(uint32 InRayTracingId)"
  },
  {
    "label": "GetRayTracingId()",
    "kind": "Method",
    "detail": "Function (RayTracingId = InRayTracingId ; } uint32)",
    "insertText": "GetRayTracingId()"
  },
  {
    "label": "GetRayTracingDataOffset()",
    "kind": "Method",
    "detail": "Function (RayTracingDataOffset = InRayTracingDataOffset ; } uint32)",
    "insertText": "GetRayTracingDataOffset()"
  },
  {
    "label": "GetMaterialDisplacementFadeOutSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMaterialDisplacementFadeOutSize()"
  },
  {
    "label": "HasPerClusterDisplacementFallbackRaster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPerClusterDisplacementFallbackRaster()"
  },
  {
    "label": "OnMaterialsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaterialsUpdated(bool bOverrideMaterialRelevance = false)"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FMaterialSection> MaterialSections ; # if WITH_EDITOR TArray<FHitProxyId> HitProxyIds ; EHitProxyMode HitProxyMode = EHitProxyMode::MaterialSection ; # endif int32 MaterialMaxIndex = INDEX_NONE ; uint32 InstanceWPODisableDistance = 0 ; float PixelProgrammableDistance = 0 . 0 f ; float MaterialDisplacementFadeOutSize = 0 . 0 f ; EFilterFlags FilterFlags = EFilterFlags::None ; uint8 bHasVertexProgrammableRaster : 1 ; uint8 bHasPixelProgrammableRaster : 1 ; uint8 bHasDynamicDisplacement : 1 ; uint8 bReverseCulling : 1 ; uint8 bHasPerClusterDisplacementFallbackRaster : 1 ; # if WITH_EDITOR uint8 bHasSelectedInstances : 1 ; # endif private : uint32 RayTracingId = INDEX_NONE ; uint32 RayTracingDataOffset = INDEX_NONE ; } ; class FSceneProxy : public FSceneProxyBase { public : using Super = FSceneProxyBase ;)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, const FStaticMeshSceneProxyDesc& ProxyDesc, const TSharedPtr<FInstanceDataSceneProxy, ESPMode::ThreadSafe>& InInstanceDataSceneProxy = {})"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, const FInstancedStaticMeshSceneProxyDesc& ProxyDesc)"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, UStaticMeshComponent* Component, const TSharedPtr<FInstanceDataSceneProxy, ESPMode::ThreadSafe>& InInstanceDataSceneProxy = {})"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, UInstancedStaticMeshComponent* Component)"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, UHierarchicalInstancedStaticMeshComponent* Component)"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSceneProxy()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "GetLightRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightRelevance(const FLightSceneProxy* LightSceneProxy, bool& bDynamic, bool& bRelevant, bool& bLightMapped, bool& bShadowMapped)"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR HHitProxy*)",
    "insertText": "CreateHitProxies(UPrimitiveComponent* Component,TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (HHitProxy*)",
    "insertText": "CreateHitProxies(IPrimitiveComponent* ComponentInterface,TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "DrawStaticElements()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DrawStaticElements(FStaticPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetCollisionMeshElement()",
    "kind": "Method",
    "detail": "Function (# if NANITE_ENABLE_DEBUG_RENDERING bool)",
    "insertText": "GetCollisionMeshElement(int32 LODIndex, int32 BatchIndex, int32 ElementIndex, uint8 InDepthPriorityGroup, const FMaterialRenderProxy* RenderProxy, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "HasRayTracingRepresentation()",
    "kind": "Method",
    "detail": "Function (# endif # if RHI_RAYTRACING bool)",
    "insertText": "HasRayTracingRepresentation()"
  },
  {
    "label": "IsRayTracingRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingRelevant()"
  },
  {
    "label": "GetCachedRayTracingInstance()",
    "kind": "Method",
    "detail": "Function (ERayTracingPrimitiveFlags)",
    "insertText": "GetCachedRayTracingInstance(FRayTracingInstance& RayTracingInstance)"
  },
  {
    "label": "GetCoarseMeshStreamingHandle()",
    "kind": "Method",
    "detail": "Function (Nanite::CoarseMeshStreamingHandle)",
    "insertText": "GetCoarseMeshStreamingHandle()"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (# endif uint32)",
    "insertText": "GetMemoryFootprint()"
  },
  {
    "label": "GetLCIs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLCIs(FLCIArray& LCIs)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FLightCacheInterface* LCI =& MeshInfo ; LCIs .)",
    "insertText": "Add(LCI)"
  },
  {
    "label": "GetDistanceFieldAtlasData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDistanceFieldAtlasData(const FDistanceFieldVolumeData*& OutDistanceFieldData, float& SelfShadowBias)"
  },
  {
    "label": "HasDistanceFieldRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDistanceFieldRepresentation()"
  },
  {
    "label": "GetMeshCardRepresentation()",
    "kind": "Method",
    "detail": "Function (const FCardRepresentationData*)",
    "insertText": "GetMeshCardRepresentation()"
  },
  {
    "label": "GetLightMapCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLightMapCoordinateIndex()"
  },
  {
    "label": "GetNaniteResourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNaniteResourceInfo(uint32& OutResourceID, uint32& OutHierarchyOffset, uint32& OutImposterIndex)"
  },
  {
    "label": "GetResourceMeshInfo()",
    "kind": "Method",
    "detail": "Function (OutResourceID = Resources -> RuntimeResourceID ; OutHierarchyOffset = Resources -> HierarchyOffset ; OutImposterIndex = Resources -> ImposterIndex ; } FResourceMeshInfo)",
    "insertText": "GetResourceMeshInfo()"
  },
  {
    "label": "GetInstanceDrawDistanceMinMax()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInstanceDrawDistanceMinMax(FVector2f& OutCullRange)"
  },
  {
    "label": "GetInstanceWorldPositionOffsetDisableDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInstanceWorldPositionOffsetDisableDistance(float& OutWPODisableDistance)"
  },
  {
    "label": "SetWorldPositionOffsetDisableDistance_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldPositionOffsetDisableDistance_GameThread(int32 NewValue)"
  },
  {
    "label": "SetInstanceCullDistance_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceCullDistance_RenderThread(float StartCullDistance, float EndCullDistance)"
  },
  {
    "label": "GetInstanceDataUpdateTaskInfo()",
    "kind": "Method",
    "detail": "Function (FInstanceDataUpdateTaskInfo*)",
    "insertText": "GetInstanceDataUpdateTaskInfo()"
  },
  {
    "label": "GetMeshPaintTextureDescriptor()",
    "kind": "Method",
    "detail": "Function (FUintVector2)",
    "insertText": "GetMeshPaintTextureDescriptor()"
  },
  {
    "label": "OnEvaluateWorldPositionOffsetChanged_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEvaluateWorldPositionOffsetChanged_RenderThread()"
  },
  {
    "label": "FMeshInfo()",
    "kind": "Method",
    "detail": "Function (class FMeshInfo : public FLightCacheInterface { public :)",
    "insertText": "FMeshInfo(const FStaticMeshSceneProxyDesc& InProxyDesc)"
  },
  {
    "label": "GetInteraction()",
    "kind": "Method",
    "detail": "Function (FLightInteraction)",
    "insertText": "GetInteraction(const FLightSceneProxy* LightSceneProxy)"
  },
  {
    "label": "IsCollisionView()",
    "kind": "Method",
    "detail": "Function (private : TArray<FGuid> IrrelevantLights ; } ; bool)",
    "insertText": "IsCollisionView(const FEngineShowFlags& EngineShowFlags, bool& bDrawSimpleCollision, bool& bDrawComplexCollision)"
  },
  {
    "label": "GetFirstValidRaytracingGeometryLODIndex()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING int32)",
    "insertText": "GetFirstValidRaytracingGeometryLODIndex()"
  },
  {
    "label": "SetupRayTracingMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupRayTracingMaterials(int32 LODIndex, TArray<FMeshBatch>& OutMaterials)"
  },
  {
    "label": "SetupFallbackRayTracingMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupFallbackRayTracingMaterials(int32 LODIndex, TArray<FMeshBatch>& OutMaterials)"
  },
  {
    "label": "SetMeshElementGeometrySource()",
    "kind": "Method",
    "detail": "Function (# endif # if RHI_RAYTRACING | | NANITE_ENABLE_DEBUG_RENDERING uint32)",
    "insertText": "SetMeshElementGeometrySource(int32 LODIndex, int32 ElementIndex, bool bWireframe, bool bUseInversedIndices, const ::FVertexFactory* VertexFactory, FMeshBatch& OutMeshElement)"
  },
  {
    "label": "IsReversedCullingNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReversedCullingNeeded(bool bUseReversedIndices)"
  },
  {
    "label": "FUintVector2()",
    "kind": "Method",
    "detail": "Function (# endif protected : FMeshInfo MeshInfo ; const FResources* Resources = nullptr ; const FStaticMeshRenderData* RenderData ; const FDistanceFieldVolumeData* DistanceFieldData ; const FCardRepresentationData* CardRepresentationData ; uint32 bHasMaterialErrors : 1 ; uint32 MeshPaintTextureCoordinateIndex : 2 ; const UStaticMesh* StaticMesh = nullptr ; FTextureResource* MeshPaintTextureResource = nullptr ; FUintVector2 MeshPaintTextureDescriptor =)",
    "insertText": "FUintVector2(0, 0)"
  },
  {
    "label": "CreateDynamicRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (uint32 EndCullDistance = 0 ; int32 ClampedMinLOD ; # if RHI_RAYTRACING void)",
    "insertText": "CreateDynamicRayTracingGeometries(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseDynamicRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDynamicRayTracingGeometries()"
  },
  {
    "label": "FSectionInfo()",
    "kind": "Method",
    "detail": "Function (TArray<FRayTracingGeometry,TInlineAllocator<MAX_MESH_LOD_COUNT>> DynamicRayTracingGeometries ; Nanite::CoarseMeshStreamingHandle CoarseMeshStreamingHandle = INDEX_NONE ; TArray<FMeshBatch> CachedRayTracingMaterials ; int16 CachedRayTracingMaterialsLODIndex = INDEX_NONE ; bool bHasRayTracingInstances : 1 = false ; bool bNeedsDynamicRayTracingGeometries : 1 = false ; RayTracing::GeometryGroupHandle RayTracingGeometryGroupHandle = INDEX_NONE ; # endif TSharedPtr<FInstanceDataSceneProxy,ESPMode::ThreadSafe> InstanceDataSceneProxy ; # if NANITE_ENABLE_DEBUG_RENDERING UObject* Owner ; int32 LightMapResolution ; UBodySetup* BodySetup ; ECollisionTraceFlag CollisionTraceFlag ; FCollisionResponseContainer CollisionResponse ; int32 ForcedLodModel ; int32 LODForCollision ; uint32 bDrawMeshCollisionIfComplex : 1 ; uint32 bDrawMeshCollisionIfSimple : 1 ; # endif # if RHI_RAYTRACING | | NANITE_ENABLE_DEBUG_RENDERING class FFallbackLODInfo { public : struct FSectionInfo {)",
    "insertText": "FSectionInfo() : MaterialProxy(nullptr) #if WITH_EDITOR , bSelected(false) , HitProxy(nullptr)"
  },
  {
    "label": "FFallbackLODInfo()",
    "kind": "Method",
    "detail": "Function (} FMaterialRenderProxy* MaterialProxy ; # if WITH_EDITOR bool bSelected ; HHitProxy* HitProxy ; # endif # if WITH_EDITORONLY_DATA int32 MaterialIndex ; # endif } ; TArray<FSectionInfo,TInlineAllocator<1>> Sections ; FColorVertexBuffer* OverrideColorVertexBuffer ; TUniformBufferRef<FLocalVertexFactoryUniformShaderParameters> OverrideColorVFUniformBuffer ;)",
    "insertText": "FFallbackLODInfo(const FStaticMeshSceneProxyDesc* InProxyDEsc, const FStaticMeshVertexFactoriesArray& InLODVertexFactories, int32 InLODIndex, int32 InClampedMinLOD)"
  },
  {
    "label": "FSkinnedSceneProxy()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FFallbackLODInfo> FallbackLODs ; # endif } ; class FSkinnedSceneProxy : public FSceneProxyBase { public : using Super = FSceneProxyBase ;)",
    "insertText": "FSkinnedSceneProxy(const FMaterialAudit& MaterialAudit, USkinnedMeshComponent* InComponent, FSkeletalMeshRenderData* InRenderData, bool bAllowScaling = true)"
  },
  {
    "label": "FSkinnedSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSkinnedSceneProxy()"
  },
  {
    "label": "CreateRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CreateRenderThreadResources(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR HHitProxy*)",
    "insertText": "CreateHitProxies(UPrimitiveComponent* Component, TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "DebugDrawSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawSkeleton(int32 ViewIndex, FMeshElementCollector& Collector, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "GetMaxBoneTransformCount()",
    "kind": "Method",
    "detail": "Function (OutResourceID = Resources -> RuntimeResourceID ; OutHierarchyOffset = Resources -> HierarchyOffset ; OutImposterIndex = Resources -> ImposterIndex ; } uint32)",
    "insertText": "GetMaxBoneTransformCount()"
  },
  {
    "label": "GetMaxBoneInfluenceCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxBoneInfluenceCount()"
  },
  {
    "label": "GetUniqueAnimationCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUniqueAnimationCount()"
  },
  {
    "label": "GetDesiredLODLevel_RenderThread()",
    "kind": "Method",
    "detail": "Function (FDesiredLODLevel)",
    "insertText": "GetDesiredLODLevel_RenderThread(const FSceneView* View)"
  },
  {
    "label": "GetCurrentFirstLODIdx_RenderThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetCurrentFirstLODIdx_RenderThread()"
  },
  {
    "label": "GetAnimationProviderData()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<uint64>)",
    "insertText": "GetAnimationProviderData(bool& bOutValid)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (bOutValid = true ; return TConstArrayView<)",
    "insertText": "uint64()"
  },
  {
    "label": "GetMeshObject()",
    "kind": "Method",
    "detail": "Function (} const FSkeletalMeshObject*)",
    "insertText": "GetMeshObject()"
  },
  {
    "label": "GetObjectSpaceFloatCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetObjectSpaceFloatCount()"
  },
  {
    "label": "FloatCount()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "FloatCount(HasScale() ? 3 : 0)"
  }
]