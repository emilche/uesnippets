[
  {
    "label": "FPerInstanceRenderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerInstanceRenderData"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "USkinnedMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedMeshComponent"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FSkeletalMeshObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObject"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureResource"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "ECollisionTraceFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionTraceFlag"
  },
  {
    "label": "EMaterialDomain",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialDomain"
  },
  {
    "label": "FStaticMeshVertexFactories",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexFactories"
  },
  {
    "label": "FStaticMeshSceneProxyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshSceneProxyDesc"
  },
  {
    "label": "FInstancedStaticMeshSceneProxyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedStaticMeshSceneProxyDesc"
  },
  {
    "label": "FMaterialAuditEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialAuditEntry"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "FResourceMeshInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceMeshInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSceneProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneProxyBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterialSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialSection"
  },
  {
    "label": "FSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneProxy"
  },
  {
    "label": "FMeshInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshInfo"
  },
  {
    "label": "FFallbackLODInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFallbackLODInfo"
  },
  {
    "label": "FSectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionInfo"
  },
  {
    "label": "FSkinnedSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedSceneProxy"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector4f(1.0f)"
  },
  {
    "label": "AuditMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AuditMaterials(const USkinnedMeshComponent* Component, FMaterialAudit& Audit, bool bSetMaterialUsage = true)"
  },
  {
    "label": "AuditMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AuditMaterials(const UStaticMeshComponent* Component, FMaterialAudit& Audit, bool bSetMaterialUsage = true)"
  },
  {
    "label": "AuditMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AuditMaterials(const FStaticMeshSceneProxyDesc* ProxyDesc, FMaterialAudit& Audit, bool bSetMaterialUsage = true)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(EBlendMode Mode)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsSupportedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsSupportedMaterialDomain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedMaterialDomain(EMaterialDomain Domain)"
  },
  {
    "label": "IsSupportedShadingModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedShadingModel(FMaterialShadingModelField ShadingModelField)"
  },
  {
    "label": "IsMaskingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaskingAllowed(UWorld* World, bool bForceNaniteForMasked)"
  },
  {
    "label": "ResetToDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefaultMaterial(bool bShading = true, bool bRaster = true)"
  },
  {
    "label": "DrawStaticElementsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStaticElementsInternal(FStaticPrimitiveDrawInterface* PDI, const FLightCacheInterface* LCI)"
  },
  {
    "label": "OnMaterialsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaterialsUpdated(bool bOverrideMaterialRelevance = false)"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, const FStaticMeshSceneProxyDesc& ProxyDesc, const TSharedPtr<FInstanceDataSceneProxy, ESPMode::ThreadSafe>& InInstanceDataSceneProxy = {})"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, const FInstancedStaticMeshSceneProxyDesc& ProxyDesc)"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, UStaticMeshComponent* Component, const TSharedPtr<FInstanceDataSceneProxy, ESPMode::ThreadSafe>& InInstanceDataSceneProxy = {})"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, UInstancedStaticMeshComponent* Component)"
  },
  {
    "label": "FSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSceneProxy(const FMaterialAudit& MaterialAudit, UHierarchicalInstancedStaticMeshComponent* Component)"
  },
  {
    "label": "FMeshInfo()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FMeshInfo(const FStaticMeshSceneProxyDesc& InProxyDesc)"
  },
  {
    "label": "CreateDynamicRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDynamicRayTracingGeometries(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseDynamicRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDynamicRayTracingGeometries()"
  },
  {
    "label": "FSkinnedSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSkinnedSceneProxy(\n\t\tconst FMaterialAudit& MaterialAudit,\n\t\tUSkinnedMeshComponent* InComponent,\n\t\tFSkeletalMeshRenderData* InRenderData,\n\t\tbool bAllowScaling = true\n\t)"
  }
]