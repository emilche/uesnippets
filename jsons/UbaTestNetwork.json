[
  {
    "label": "TestSockets()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaBinaryReaderWriter . h \" # include \" UbaPlatform . h \" # include \" UbaNetworkClient . h \" # include \" UbaNetworkServer . h \" # include \" UbaNetworkMessage . h \" # include \" UbaNetworkBackendTcp . h \" # include \" UbaNetworkBackendMemory . h \" namespace uba { bool)",
    "insertText": "TestSockets(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "tcp()",
    "kind": "Method",
    "detail": "Function (u16 port = 1 3 4 6 ; Atomic<u8> result ; NetworkBackendTcp)",
    "insertText": "tcp(logger.m_writer)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (Thread)",
    "insertText": "t([&]() { logger.Info(TC(\"Starting to Listen\")); tcp.StartListen(logger, port, TC(\"127.0.0.1\"), [&](void* connection, const sockaddr& remoteSocketAddr) { logger.Info(TC(\"Listen got connection\")); tcp.SetDisconnectCallback(connection, nullptr, [](void*, const Guid&, void*) {}); tcp.SetRecvCallbacks(connection, &result, 1, [](void* context, const Guid& connectionUid, u8* headerData, void*& outBodyContext, u8*& outBodyData, u32& outBodySize) { *(Atomic<u8>*)context = *headerData; return true; }, nullptr, TC(\"\")); return true; }); return 0; })"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(100)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Info(TC(\"Starting to Connect\"))"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (tcp .)",
    "insertText": "Connect(logger, TC(\"127.0.0.1\"), [&](void* connection, const sockaddr& remoteSocketAddr, bool* timedOut) { tcp.SetDisconnectCallback(connection, nullptr, [](void*, const Guid&, void*) {}); tcp.SetRecvCallbacks(connection, &tcp, 1, [](void* context, const Guid& connectionUid, u8* headerData, void*& outBodyContext, u8*& outBodyData, u32& outBodySize) { return true; }, nullptr, TC(\"\")); u8 b = 42; NetworkBackend::SendContext sc; tcp.Send(logger, connection, &b, 1, sc); return true; }, port)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(200)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (t .)",
    "insertText": "Wait()"
  },
  {
    "label": "networkBackend()",
    "kind": "Method",
    "detail": "Function (auto& logWriter = logger . m_writer ; NetworkBackendTcp)",
    "insertText": "networkBackend(logWriter)"
  },
  {
    "label": "server()",
    "kind": "Method",
    "detail": "Function (bool ctorSuccess = true ; NetworkServer)",
    "insertText": "server(ctorSuccess, logWriter)"
  },
  {
    "label": "client()",
    "kind": "Method",
    "detail": "Function (NetworkClient)",
    "insertText": "client(ctorSuccess, logWriter)"
  },
  {
    "label": "RegisterService()",
    "kind": "Method",
    "detail": "Function (server .)",
    "insertText": "RegisterService(1, [&](const ConnectionInfo& connectionInfo, MessageInfo& messageInfo, BinaryReader& reader, BinaryWriter& writer) { logger.Info(TC(\"Got ping!\")); UBA_ASSERT(messageInfo.type == SessionMessageType_Ping); writer.WriteByte(42); return true; })"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto ds =)",
    "insertText": "MakeGuard([&]() { server.DisconnectClients(); })"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto dg =)",
    "insertText": "MakeGuard([&]() { client.Disconnect(); })"
  },
  {
    "label": "msg()",
    "kind": "Method",
    "detail": "Function (StackBinaryWriter<1 2 8> writer ; NetworkMessage)",
    "insertText": "msg(client, 1, SessionMessageType_Ping, writer)"
  },
  {
    "label": "WriteU32()",
    "kind": "Method",
    "detail": "Function (writer .)",
    "insertText": "WriteU32(32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StackBinaryReader<3 2> reader ;)",
    "insertText": "if(!msg.Send(reader)) return logger.Error(TC(\"Failed to get message\"))"
  },
  {
    "label": "ReadByte()",
    "kind": "Method",
    "detail": "Function (u8 value = reader .)",
    "insertText": "ReadByte()"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Info(TC(\"Got value %u\"), value)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (u64 time =)",
    "insertText": "GetTime()"
  }
]