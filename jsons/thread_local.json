[
  {
    "label": "ThreadLocalPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadLocalPointer"
  },
  {
    "label": "ThreadLocalOwnedPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadLocalOwnedPointer"
  },
  {
    "label": "ThreadLocalBoolean",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadLocalBoolean"
  },
  {
    "label": "ThreadLocalPointer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_THREAD_LOCAL_H_ # define BASE_THREADING_THREAD_LOCAL_H_ # include<memory> # include \" base / dcheck_is_on . h \" # include \" base / memory / ptr_util . h \" # include \" base / threading / thread_local_internal . h \" # include \" base / threading / thread_local_storage . h \" namespace base { template<T> class ThreadLocalPointer { public :)",
    "insertText": "ThreadLocalPointer()"
  },
  {
    "label": "ThreadLocalPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadLocalPointer(const ThreadLocalPointer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadLocalPointer&)",
    "insertText": "operator(const ThreadLocalPointer&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "Get()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(T* ptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (slot_ .)",
    "insertText": "Set(const_cast<void*>(static_cast<const void*>(ptr)))"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (} private : ThreadLocalStorage::Slot slot_ ; } ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "ThreadLocalOwnedPointer()",
    "kind": "Method",
    "detail": "Function (# else template<T> class ThreadLocalOwnedPointer { public :)",
    "insertText": "ThreadLocalOwnedPointer()"
  },
  {
    "label": "ThreadLocalOwnedPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadLocalOwnedPointer(const ThreadLocalOwnedPointer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadLocalOwnedPointer&)",
    "insertText": "operator(const ThreadLocalOwnedPointer&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(nullptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<T>)",
    "insertText": "Set(std::unique_ptr<T> ptr)"
  },
  {
    "label": "WrapUnique()",
    "kind": "Method",
    "detail": "Function (auto existing =)",
    "insertText": "WrapUnique(Get())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (slot_ .)",
    "insertText": "Set(const_cast<void*>(static_cast<const void*>(ptr.release())))"
  },
  {
    "label": "DeleteTlsPtr()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "DeleteTlsPtr(void* ptr)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (delete static_cast<)",
    "insertText": "T(ptr)"
  },
  {
    "label": "ThreadLocalBoolean()",
    "kind": "Method",
    "detail": "Function (} ThreadLocalStorage::Slot slot_ {& DeleteTlsPtr } ; } ; # endif class ThreadLocalBoolean { public :)",
    "insertText": "ThreadLocalBoolean()"
  },
  {
    "label": "ThreadLocalBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadLocalBoolean(const ThreadLocalBoolean&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadLocalBoolean&)",
    "insertText": "operator(const ThreadLocalBoolean&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(bool val)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (tlp_ .)",
    "insertText": "Set(val ? this : nullptr)"
  }
]