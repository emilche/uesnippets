[
  {
    "label": "FileInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileInformation"
  },
  {
    "label": "DirectoryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DirectoryCache"
  },
  {
    "label": "CreatedDir",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreatedDir"
  },
  {
    "label": "INVALID_FILE_ATTRIBUTES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaLogger . h \" # include \" UbaMemory . h \" # include \" UbaPlatform . h \" namespace uba { # if ! PLATFORM_WINDOWS u32 ERROR_FILE_NOT_FOUND = ENOENT ; u32 ERROR_PATH_NOT_FOUND = ENOENT ; u32 ERROR_ALREADY_EXISTS = EEXIST ; u32 ERROR_ACCESS_DENIED = EACCES ; u32 MOVEFILE_REPLACE_EXISTING = 0 x00000001 ; u32 FILE_FLAG_NO_BUFFERING = 0 ; u32 FILE_FLAG_OVERLAPPED = 0 ; u32)",
    "insertText": "INVALID_FILE_ATTRIBUTES(u32)"
  },
  {
    "label": "GetFileInformationByHandle()",
    "kind": "Method",
    "detail": "Function (u32 CREATE_ALWAYS = 2 ; u32 GENERIC_WRITE = 0 x40000000L ; u32 DELETE = 0 x00010000L ; u32 GENERIC_READ = 0 x80000000L ; u32 FILE_SHARE_WRITE = 0 x00000002 ; u32 FILE_SHARE_READ = 0 x00000001 ; u32 FILE_FLAG_BACKUP_SEMANTICS = 0 x02000000 ; u32 OPEN_EXISTING = 3 ; u32 PAGE_READONLY = 0 x02 ; # endif u64 FileHandleFlagMask = 0 x0000 ' 0 0 0 0 ' ffff ' ffff ; # if PLATFORM_WINDOWS u64 OverlappedIoFlag = 0 x0000 ' 0 0 0 1 ' 0 0 0 0 ' 0 0 0 0 ; # endif struct FileInformation { u32 attributes ; u32 volumeSerialNumber ; u64 lastWriteTime ; u64 size ; u64 index ; } ; bool)",
    "insertText": "GetFileInformationByHandle(FileInformation& out, Logger& logger, const tchar* fileName, FileHandle hFile)"
  },
  {
    "label": "GetFileInformation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFileInformation(FileInformation& out, Logger& logger, const tchar* fileName)"
  },
  {
    "label": "ReadFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFile(Logger& logger, const tchar* fileName, FileHandle fileHandle, void* b, u64 bufferLen)"
  },
  {
    "label": "OpenFileSequentialRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileSequentialRead(Logger& logger, const tchar* fileName, FileHandle& outHandle, bool fileNotFoundIsError = true, bool overlapped = false)"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(Logger& logger, const tchar* fileName, u64* outSize = nullptr, u32* outAttributes = nullptr, u64* lastWriteTime = nullptr)"
  },
  {
    "label": "SetEndOfFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEndOfFile(Logger& logger, const tchar* fileName, FileHandle handle, u64 size)"
  },
  {
    "label": "GetDirectoryOfCurrentModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDirectoryOfCurrentModule(Logger& logger, StringBufferBase& out)"
  },
  {
    "label": "DeleteAllFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteAllFiles(Logger& logger, const tchar* dir, bool deleteDir = true, u32* count = nullptr)"
  },
  {
    "label": "SearchPathForFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchPathForFile(Logger& logger, StringBufferBase& out, const tchar* file, const tchar* applicationDir)"
  },
  {
    "label": "CreateFileW()",
    "kind": "Method",
    "detail": "Function (FileHandle)",
    "insertText": "CreateFileW(const tchar* fileName, u32 desiredAccess, u32 shareMode, u32 createDisp, u32 flagsAndAttributes)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseFile(const tchar* fileName, FileHandle h)"
  },
  {
    "label": "CreateDirectoryW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryW(const tchar* pathName)"
  },
  {
    "label": "RemoveDirectoryW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDirectoryW(const tchar* pathName)"
  },
  {
    "label": "DeleteFileW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFileW(const tchar* fileName)"
  },
  {
    "label": "CopyFileW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFileW(const tchar* existingFileName, const tchar* newFileName, bool bFailIfExists)"
  },
  {
    "label": "GetLongPathNameW()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetLongPathNameW(const tchar* lpszShortPath, tchar* lpszLongPath, u32 cchBuffer)"
  },
  {
    "label": "GetFileLastWriteTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFileLastWriteTime(u64& outTime, FileHandle hFile)"
  },
  {
    "label": "SetFileLastWriteTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFileLastWriteTime(FileHandle fileHandle, u64 writeTime)"
  },
  {
    "label": "MoveFileExW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFileExW(const tchar* existingFileName, const tchar* newFileName, u32 dwFlags)"
  },
  {
    "label": "GetFileSizeEx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFileSizeEx(u64& outFileSize, FileHandle hFile)"
  },
  {
    "label": "GetFileAttributesW()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetFileAttributesW(const tchar* fileName)"
  },
  {
    "label": "IsDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirectory(u32 attributes)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(u32 attributes)"
  },
  {
    "label": "DefaultAttributes()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "DefaultAttributes(bool execute = false)"
  },
  {
    "label": "CreateHardLinkW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateHardLinkW(const tchar* newFileName, const tchar* existingFileName)"
  },
  {
    "label": "GetFullPathNameW()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetFullPathNameW(const tchar* fileName, u32 nBufferLength, tchar* lpBuffer, tchar** lpFilePart)"
  },
  {
    "label": "SearchPathW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchPathW(const tchar* a, const tchar* b, const tchar* c, u32 d, tchar* e, tchar** f)"
  },
  {
    "label": "GetSystemTimeAsFileTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetSystemTimeAsFileTime()"
  },
  {
    "label": "GetFileTimeAsSeconds()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetFileTimeAsSeconds(u64 fileTime)"
  },
  {
    "label": "GetFileTimeAsTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetFileTimeAsTime(u64 fileTime)"
  },
  {
    "label": "GetSecondsAsFileTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetSecondsAsFileTime(u64 seconds)"
  },
  {
    "label": "GetCurrentDirectoryW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurrentDirectoryW(StringBufferBase& out)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (class DirectoryCache { public : bool)",
    "insertText": "CreateDirectory(Logger& logger, const tchar* dir)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ReadLines()",
    "kind": "Method",
    "detail": "Function (private : ReaderWriterLock m_createdDirsLock ; struct CreatedDir { ReaderWriterLock lock ; bool handled = false ; } ; UnorderedMap<TString,CreatedDir> m_createdDirs ; } ; template<LineFunc> bool)",
    "insertText": "ReadLines(Logger& logger, const tchar* file, const LineFunc& lineFunc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FileHandle handle ;)",
    "insertText": "if(!OpenFileSequentialRead(logger, file, handle)) return logger.Error(TC(\"Failed to open file %s\"), file)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto fg =)",
    "insertText": "MakeGuard([&]() { CloseFile(file, handle); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u64 fileSize = 0 ;)",
    "insertText": "if(!GetFileSizeEx(fileSize, handle)) return logger.Error(TC(\"Failed to get size of file %s\"), file)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (char buffer [ 5 1 2 ] ; u64 left = fileSize ; std::string line ;)",
    "insertText": "while(left)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (u64 toRead =)",
    "insertText": "Min(left, u64(sizeof(buffer)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (left - = toRead ;)",
    "insertText": "if(!ReadFile(logger, file, handle, buffer, toRead))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (u64 start = 0 ;)",
    "insertText": "for(u64 i=0;i!=toRead;++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u64 end = i ;)",
    "insertText": "if(i > 0 && buffer[i-1] == '\\r')"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (line .)",
    "insertText": "append(buffer + start, end - start)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (line .)",
    "insertText": "clear()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (start = i + 1 ; })",
    "insertText": "if(toRead && buffer[toRead - 1] == '\\r')"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (line .)",
    "insertText": "append(buffer + start, toRead - start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!line.empty()) if (!lineFunc(TString(line.begin(), line.end())))"
  }
]