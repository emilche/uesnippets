[
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "ProcessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessInfo"
  },
  {
    "label": "WindowsEncodingMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WindowsEncodingMethod"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_PROGRAM_H # define LLVM_SUPPORT_PROGRAM_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / Support / ErrorOr . h \" # include<system_error> namespace llvm { class StringRef ; namespace sys { # if)",
    "insertText": "defined(LLVM_ON_UNIX)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(LLVM_ON_WIN32)"
  },
  {
    "label": "ProcessInfo()",
    "kind": "Method",
    "detail": "Function (typedef void* HANDLE ; HANDLE ProcessHandle ; # else # error \" ProcessInfo is not defined for this platform ! \" # endif enum : ProcessId { InvalidPid = 0 } ; ProcessId Pid ; int ReturnCode ;)",
    "insertText": "ProcessInfo()"
  },
  {
    "label": "findProgramByName()",
    "kind": "Method",
    "detail": "Function (} ; ErrorOr<std::string>)",
    "insertText": "findProgramByName(StringRef Name, ArrayRef<StringRef> Paths = ArrayRef<StringRef>())"
  },
  {
    "label": "ChangeStdinToBinary()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "ChangeStdinToBinary()"
  },
  {
    "label": "ChangeStdoutToBinary()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "ChangeStdoutToBinary()"
  },
  {
    "label": "ExecuteAndWait()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ExecuteAndWait(StringRef Program, const char **args, const char **env = nullptr, const StringRef **redirects = nullptr, unsigned secondsToWait = 0, unsigned memoryLimit = 0, std::string *ErrMsg = nullptr, bool *ExecutionFailed = nullptr)"
  },
  {
    "label": "ExecuteNoWait()",
    "kind": "Method",
    "detail": "Function (ProcessInfo)",
    "insertText": "ExecuteNoWait(StringRef Program, const char **args, const char **env = nullptr, const StringRef **redirects = nullptr, unsigned memoryLimit = 0, std::string *ErrMsg = nullptr, bool *ExecutionFailed = nullptr)"
  },
  {
    "label": "argumentsFitWithinSystemLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "argumentsFitWithinSystemLimits(ArrayRef<const char*> Args)"
  },
  {
    "label": "writeFileWithEncoding()",
    "kind": "Method",
    "detail": "Function (enum WindowsEncodingMethod { WEM_UTF8,WEM_CurrentCodePage,WEM_UTF16 } ; std::error_code)",
    "insertText": "writeFileWithEncoding(StringRef FileName, StringRef Contents, WindowsEncodingMethod Encoding = WEM_UTF8)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (ProcessInfo)",
    "insertText": "Wait(const ProcessInfo &PI, unsigned SecondsToWait, bool WaitUntilTerminates, std::string *ErrMsg = nullptr)"
  }
]