[
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanAttachmentReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanAttachmentReference"
  },
  {
    "label": "FVulkanSubpassDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanSubpassDescription"
  },
  {
    "label": "FVulkanSubpassDependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanSubpassDependency"
  },
  {
    "label": "FVulkanAttachmentDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanAttachmentDescription"
  },
  {
    "label": "FVulkanRenderPassCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanRenderPassCreateInfo"
  },
  {
    "label": "FVulkanRenderPassFragmentDensityMapCreateInfoEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanRenderPassFragmentDensityMapCreateInfoEXT"
  },
  {
    "label": "FVulkanRenderPassMultiviewCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanRenderPassMultiviewCreateInfo"
  },
  {
    "label": "FVulkanFragmentShadingRateAttachmentInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanFragmentShadingRateAttachmentInfo"
  },
  {
    "label": "FVulkanDepthStencilResolveSubpassDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanDepthStencilResolveSubpassDesc"
  },
  {
    "label": "FVulkanRenderPassBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderPassBuilder"
  },
  {
    "label": "FVulkanRenderPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderPassManager"
  },
  {
    "label": "FFramebufferList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFramebufferList"
  },
  {
    "label": "FVulkanAttachmentReference()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" VulkanRHIPrivate . h \" # include \" VulkanResources . h \" # include \" VulkanPendingState . h \" class FVulkanCommandListContext ; template<TAttachmentReferenceType> struct FVulkanAttachmentReference : public TAttachmentReferenceType {)",
    "insertText": "FVulkanAttachmentReference()"
  },
  {
    "label": "ZeroStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroStruct()"
  },
  {
    "label": "FVulkanAttachmentReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVulkanAttachmentReference(const VkAttachmentReference& AttachmentReferenceIn, VkImageAspectFlags AspectMask)"
  },
  {
    "label": "SetAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttachment(AttachmentReferenceIn, AspectMask)"
  },
  {
    "label": "SetAttachment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttachment(const VkAttachmentReference& AttachmentReferenceIn, VkImageAspectFlags AspectMask)"
  },
  {
    "label": "SetAttachment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttachment(const FVulkanAttachmentReference<TAttachmentReferenceType>& AttachmentReferenceIn, VkImageAspectFlags AspectMask)"
  },
  {
    "label": "SetDepthStencilAttachment()",
    "kind": "Method",
    "detail": "Function (* this = AttachmentReferenceIn ; } void)",
    "insertText": "SetDepthStencilAttachment(const VkAttachmentReference& AttachmentReferenceIn, const VkAttachmentReferenceStencilLayout* StencilReference, VkImageAspectFlags AspectMask, bool bSupportsParallelRendering)"
  },
  {
    "label": "SetAspect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAspect(uint32 Aspect)"
  },
  {
    "label": "SetAttachment()",
    "kind": "Method",
    "detail": "Function (sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 ; pNext = nullptr ; attachment = AttachmentReferenceIn . attachment ; layout = AttachmentReferenceIn . layout ; aspectMask = AspectMask ; } template<> void FVulkanAttachmentReference<VkAttachmentReference2)",
    "insertText": "SetAttachment(const FVulkanAttachmentReference<VkAttachmentReference2>& AttachmentReferenceIn, VkImageAspectFlags AspectMask)"
  },
  {
    "label": "GetMergedDepthStencilLayout()",
    "kind": "Method",
    "detail": "Function (attachment = AttachmentReferenceIn . attachment ; const VkImageLayout StencilLayout = StencilReference ? StencilReference -> stencilLayout : VK_IMAGE_LAYOUT_UNDEFINED ; layout =)",
    "insertText": "GetMergedDepthStencilLayout(AttachmentReferenceIn.layout, StencilLayout)"
  },
  {
    "label": "pNext()",
    "kind": "Method",
    "detail": "Function (sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 ;)",
    "insertText": "pNext(bSupportsParallelRendering && StencilReference && StencilReference->stencilLayout != VK_IMAGE_LAYOUT_UNDEFINED)"
  },
  {
    "label": "GetMergedDepthStencilLayout()",
    "kind": "Method",
    "detail": "Function (attachment = AttachmentReferenceIn . attachment ; layout = bSupportsParallelRendering ? AttachmentReferenceIn . layout :)",
    "insertText": "GetMergedDepthStencilLayout(AttachmentReferenceIn.layout, StencilReference->stencilLayout)"
  },
  {
    "label": "FVulkanSubpassDescription()",
    "kind": "Method",
    "detail": "Function (aspectMask = Aspect ; } template<TSubpassDescriptionType> class FVulkanSubpassDescription { } ; template<> struct FVulkanSubpassDescription<VkSubpassDescription> : public VkSubpassDescription {)",
    "insertText": "FVulkanSubpassDescription()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(VkSubpassDescription))"
  },
  {
    "label": "SetColorAttachments()",
    "kind": "Method",
    "detail": "Function (pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS ; } void)",
    "insertText": "SetColorAttachments(const TArray<FVulkanAttachmentReference<VkAttachmentReference>>& ColorAttachmentReferences, int OverrideCount = -1)"
  },
  {
    "label": "colorAttachmentCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "colorAttachmentCount(OverrideCount == -1) ? ColorAttachmentReferences.Num()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (pColorAttachments = ColorAttachmentReferences .)",
    "insertText": "GetData()"
  },
  {
    "label": "SetResolveAttachments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResolveAttachments(const TArrayView<FVulkanAttachmentReference<VkAttachmentReference>>& ResolveAttachmentReferences)"
  },
  {
    "label": "SetDepthStencilAttachment()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetDepthStencilAttachment(FVulkanAttachmentReference<VkAttachmentReference>* DepthStencilAttachmentReference)"
  },
  {
    "label": "VkAttachmentReference()",
    "kind": "Method",
    "detail": "Function (pDepthStencilAttachment = static_cast<)",
    "insertText": "VkAttachmentReference(DepthStencilAttachmentReference)"
  },
  {
    "label": "SetInputAttachments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInputAttachments(FVulkanAttachmentReference<VkAttachmentReference>* InputAttachmentReferences, uint32 NumInputAttachmentReferences)"
  },
  {
    "label": "VkAttachmentReference()",
    "kind": "Method",
    "detail": "Function (pInputAttachments = static_cast<)",
    "insertText": "VkAttachmentReference(InputAttachmentReferences)"
  },
  {
    "label": "SetDepthStencilResolveAttachment()",
    "kind": "Method",
    "detail": "Function (inputAttachmentCount = NumInputAttachmentReferences ; } void)",
    "insertText": "SetDepthStencilResolveAttachment(VkSubpassDescriptionDepthStencilResolveKHR* DepthStencilResolveAttachmentDesc)"
  },
  {
    "label": "SetShadingRateAttachment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShadingRateAttachment(VkFragmentShadingRateAttachmentInfoKHR*)"
  },
  {
    "label": "SetMultiViewMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMultiViewMask(uint32_t Mask)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2)"
  },
  {
    "label": "SetColorAttachments()",
    "kind": "Method",
    "detail": "Function (pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS ; viewMask = 0 ; } void)",
    "insertText": "SetColorAttachments(const TArray<FVulkanAttachmentReference<VkAttachmentReference2>>& ColorAttachmentReferences, int OverrideCount = -1)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (colorAttachmentCount = OverrideCount = = - 1 ? ColorAttachmentReferences .)",
    "insertText": "Num()"
  },
  {
    "label": "SetResolveAttachments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResolveAttachments(const TArrayView<FVulkanAttachmentReference<VkAttachmentReference2>>& ResolveAttachmentReferences)"
  },
  {
    "label": "SetDepthStencilAttachment()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetDepthStencilAttachment(FVulkanAttachmentReference<VkAttachmentReference2>* DepthStencilAttachmentReference)"
  },
  {
    "label": "VkAttachmentReference2()",
    "kind": "Method",
    "detail": "Function (pDepthStencilAttachment = static_cast<)",
    "insertText": "VkAttachmentReference2(DepthStencilAttachmentReference)"
  },
  {
    "label": "SetInputAttachments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInputAttachments(FVulkanAttachmentReference<VkAttachmentReference2>* InputAttachmentReferences, uint32 NumInputAttachmentReferences)"
  },
  {
    "label": "VkAttachmentReference2()",
    "kind": "Method",
    "detail": "Function (pInputAttachments = static_cast<)",
    "insertText": "VkAttachmentReference2(InputAttachmentReferences)"
  },
  {
    "label": "SetShadingRateAttachment()",
    "kind": "Method",
    "detail": "Function (const void* Next = pNext ; pNext = DepthStencilResolveAttachmentDesc ; DepthStencilResolveAttachmentDesc -> pNext = Next ; } void)",
    "insertText": "SetShadingRateAttachment(VkFragmentShadingRateAttachmentInfoKHR* ShadingRateAttachmentInfo)"
  },
  {
    "label": "FVulkanSubpassDependency()",
    "kind": "Method",
    "detail": "Function (viewMask = Mask ; } } ; template<TSubpassDependencyType> struct FVulkanSubpassDependency : public TSubpassDependencyType { } ; template<> struct FVulkanSubpassDependency<VkSubpassDependency> : public VkSubpassDependency {)",
    "insertText": "FVulkanSubpassDependency()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(VkSubpassDependency))"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2)"
  },
  {
    "label": "FVulkanAttachmentDescription()",
    "kind": "Method",
    "detail": "Function (viewOffset = 0 ; } } ; template<TAttachmentDescriptionType> struct FVulkanAttachmentDescription { } ; template<> struct FVulkanAttachmentDescription<VkAttachmentDescription> : public VkAttachmentDescription {)",
    "insertText": "FVulkanAttachmentDescription()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(VkAttachmentDescription))"
  },
  {
    "label": "FVulkanAttachmentDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVulkanAttachmentDescription(const VkAttachmentDescription& InDesc)"
  },
  {
    "label": "FVulkanAttachmentDescription()",
    "kind": "Method",
    "detail": "Function (flags = InDesc . flags ; format = InDesc . format ; samples = InDesc . samples ; loadOp = InDesc . loadOp ; storeOp = InDesc . storeOp ; stencilLoadOp = InDesc . stencilLoadOp ; stencilStoreOp = InDesc . stencilStoreOp ; initialLayout = InDesc . initialLayout ; finalLayout = InDesc . finalLayout ; })",
    "insertText": "FVulkanAttachmentDescription(const VkAttachmentDescription& InDesc, const VkAttachmentDescriptionStencilLayout* InStencilDesc, bool bSupportsParallelRendering)"
  },
  {
    "label": "VulkanFormatHasStencil()",
    "kind": "Method",
    "detail": "Function (flags = InDesc . flags ; format = InDesc . format ; samples = InDesc . samples ; loadOp = InDesc . loadOp ; storeOp = InDesc . storeOp ; stencilLoadOp = InDesc . stencilLoadOp ; stencilStoreOp = InDesc . stencilStoreOp ; const bool bHasStencilLayout =)",
    "insertText": "VulkanFormatHasStencil(InDesc.format) && (InStencilDesc != nullptr)"
  },
  {
    "label": "GetMergedDepthStencilLayout()",
    "kind": "Method",
    "detail": "Function (const VkImageLayout StencilInitialLayout = bHasStencilLayout ? InStencilDesc -> stencilInitialLayout : VK_IMAGE_LAYOUT_UNDEFINED ; initialLayout =)",
    "insertText": "GetMergedDepthStencilLayout(InDesc.initialLayout, StencilInitialLayout)"
  },
  {
    "label": "GetMergedDepthStencilLayout()",
    "kind": "Method",
    "detail": "Function (const VkImageLayout StencilFinalLayout = bHasStencilLayout ? InStencilDesc -> stencilFinalLayout : VK_IMAGE_LAYOUT_UNDEFINED ; finalLayout =)",
    "insertText": "GetMergedDepthStencilLayout(InDesc.finalLayout, StencilFinalLayout)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2)"
  },
  {
    "label": "pNext()",
    "kind": "Method",
    "detail": "Function (sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 ;)",
    "insertText": "pNext(bHasStencilLayout && (InStencilDesc->stencilFinalLayout != VK_IMAGE_LAYOUT_UNDEFINED))"
  },
  {
    "label": "GetMergedDepthStencilLayout()",
    "kind": "Method",
    "detail": "Function (flags = InDesc . flags ; format = InDesc . format ; samples = InDesc . samples ; loadOp = InDesc . loadOp ; storeOp = InDesc . storeOp ; stencilLoadOp = InDesc . stencilLoadOp ; stencilStoreOp = InDesc . stencilStoreOp ; initialLayout = bSupportsParallelRendering ? InDesc . initialLayout :)",
    "insertText": "GetMergedDepthStencilLayout(InDesc.initialLayout, InStencilDesc->stencilInitialLayout)"
  },
  {
    "label": "GetMergedDepthStencilLayout()",
    "kind": "Method",
    "detail": "Function (finalLayout = bSupportsParallelRendering ? InDesc . finalLayout :)",
    "insertText": "GetMergedDepthStencilLayout(InDesc.finalLayout, InStencilDesc->stencilFinalLayout)"
  },
  {
    "label": "FVulkanRenderPassCreateInfo()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct FVulkanRenderPassCreateInfo { } ; template<> struct FVulkanRenderPassCreateInfo<VkRenderPassCreateInfo> : public VkRenderPassCreateInfo {)",
    "insertText": "FVulkanRenderPassCreateInfo()"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO)"
  },
  {
    "label": "SetCorrelationMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCorrelationMask(const uint32_t* MaskPtr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} VkRenderPass)",
    "insertText": "Create(FVulkanDevice& Device)"
  },
  {
    "label": "VERIFYVULKANRESULT_EXPANDED()",
    "kind": "Method",
    "detail": "Function (VkRenderPass Handle = VK_NULL_HANDLE ;)",
    "insertText": "VERIFYVULKANRESULT_EXPANDED(VulkanRHI::vkCreateRenderPass(Device.GetInstanceHandle(), this, VULKAN_CPU_ALLOCATOR, &Handle))"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT)"
  },
  {
    "label": "FVulkanRenderPassMultiviewCreateInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVulkanRenderPassMultiviewCreateInfo : public VkRenderPassMultiviewCreateInfo {)",
    "insertText": "FVulkanRenderPassMultiviewCreateInfo()"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2)"
  },
  {
    "label": "VERIFYVULKANRESULT_EXPANDED()",
    "kind": "Method",
    "detail": "Function (VkRenderPass Handle = VK_NULL_HANDLE ;)",
    "insertText": "VERIFYVULKANRESULT_EXPANDED(VulkanRHI::vkCreateRenderPass2KHR(Device.GetInstanceHandle(), this, VULKAN_CPU_ALLOCATOR, &Handle))"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR)"
  },
  {
    "label": "shadingRateAttachmentTexelSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shadingRateAttachmentTexelSize(uint32)GRHIVariableRateShadingImageTileMinWidth, (uint32)"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReference(FVulkanAttachmentReference<VkAttachmentReference2>* AttachmentReference)"
  },
  {
    "label": "FVulkanDepthStencilResolveSubpassDesc()",
    "kind": "Method",
    "detail": "Function (pFragmentShadingRateAttachment = AttachmentReference ; } } ; struct FVulkanDepthStencilResolveSubpassDesc : public VkSubpassDescriptionDepthStencilResolveKHR {)",
    "insertText": "FVulkanDepthStencilResolveSubpassDesc()"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(*this, VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE)"
  },
  {
    "label": "SetResolveModes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResolveModes(VkResolveModeFlagBits DepthMode, VkResolveModeFlagBits StencilMode)"
  },
  {
    "label": "FVulkanRenderPassBuilder()",
    "kind": "Method",
    "detail": "Function (pDepthStencilResolveAttachment = AttachmentReference ; } } ; int32 GVulkanInputAttachmentShaderRead ; template<TSubpassDescriptionClass,TSubpassDependencyClass,TAttachmentReferenceClass,TAttachmentDescriptionClass,TRenderPassCreateInfoClass> class FVulkanRenderPassBuilder { public :)",
    "insertText": "FVulkanRenderPassBuilder(FVulkanDevice& InDevice) : Device(InDevice) , CorrelationMask(0)"
  },
  {
    "label": "BuildCreateInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildCreateInfo(const FVulkanRenderTargetLayout& RTLayout)"
  },
  {
    "label": "MultiviewMask()",
    "kind": "Method",
    "detail": "Function (uint32 NumSubpasses = 0 ; uint32 NumDependencies = 0 ; uint32)",
    "insertText": "MultiviewMask(0b1 << RTLayout.GetMultiViewCount())"
  },
  {
    "label": "GetSubpassHint()",
    "kind": "Method",
    "detail": "Function (const bool bDeferredShadingSubpass = RTLayout .)",
    "insertText": "GetSubpassHint()"
  },
  {
    "label": "GetFragmentDensityAttachmentReference()",
    "kind": "Method",
    "detail": "Function (const bool bApplyFragmentShadingRate = GRHISupportsAttachmentVariableRateShading&& RTLayout .)",
    "insertText": "GetFragmentDensityAttachmentReference() != nullptr && Device.GetOptionalExtensions().HasKHRFragmentShadingRate && Device.GetOptionalExtensionProperties()"
  },
  {
    "label": "GetOptionalExtensions()",
    "kind": "Method",
    "detail": "Function (const bool bResolveDepth = GRHISupportsDepthStencilResolve&& Device .)",
    "insertText": "GetOptionalExtensions().HasKHRDepthStencilResolve && RTLayout.GetHasDepthStencilResolve()"
  },
  {
    "label": "bCustomResolveSubpass()",
    "kind": "Method",
    "detail": "Function (const bool bDepthReadSubpass =)",
    "insertText": "bCustomResolveSubpass(RTLayout.GetSubpassHint() == ESubpassHint::DepthReadSubpass)"
  },
  {
    "label": "bHasDepthStencilAttachmentReference()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bHasDepthStencilAttachmentReference(RTLayout.GetDepthAttachmentReference() != nullptr)"
  },
  {
    "label": "SetAttachment()",
    "kind": "Method",
    "detail": "Function (ShadingRateAttachmentReference .)",
    "insertText": "SetAttachment(*RTLayout.GetFragmentDensityAttachmentReference(), VkImageAspectFlagBits::VK_IMAGE_ASPECT_COLOR_BIT)"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (FragmentShadingRateAttachmentInfo .)",
    "insertText": "SetReference(&ShadingRateAttachmentReference)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bResolveDepth)"
  },
  {
    "label": "SetAttachment()",
    "kind": "Method",
    "detail": "Function (DepthStencilResolveAttachmentReference .)",
    "insertText": "SetAttachment(*RTLayout.GetDepthStencilResolveAttachmentReference(), VkImageAspectFlagBits::VK_IMAGE_ASPECT_NONE)"
  },
  {
    "label": "SetResolveModes()",
    "kind": "Method",
    "detail": "Function (DepthStencilResolveSubpassDesc .)",
    "insertText": "SetResolveModes(VK_RESOLVE_MODE_SAMPLE_ZERO_BIT, VK_RESOLVE_MODE_SAMPLE_ZERO_BIT)"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (DepthStencilResolveSubpassDesc .)",
    "insertText": "SetReference(&DepthStencilResolveAttachmentReference)"
  },
  {
    "label": "GetNumColorAttachments()",
    "kind": "Method",
    "detail": "Function (} uint32 NumColorAttachments = RTLayout .)",
    "insertText": "GetNumColorAttachments()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ColorAttachmentReferences .)",
    "insertText": "Add(TAttachmentReferenceClass(RTLayout.GetColorAttachmentReferences()[ColorAttachment], 0))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResolveAttachmentReferences .)",
    "insertText": "Add(TAttachmentReferenceClass(RTLayout.GetResolveAttachmentReferences()[ColorAttachment], 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bCustomResolveSubpass && (NumColorAttachments > 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumColorAttachments - - ; } uint32_t DepthInputAttachment = VK_ATTACHMENT_UNUSED ; VkImageLayout DepthInputAttachmentLayout = VK_IMAGE_LAYOUT_UNDEFINED ; VkImageAspectFlags DepthInputAspectMask = 0 ;)",
    "insertText": "if(bHasDepthStencilAttachmentReference)"
  },
  {
    "label": "SetDepthStencilAttachment()",
    "kind": "Method",
    "detail": "Function (DepthStencilAttachmentReference .)",
    "insertText": "SetDepthStencilAttachment(*RTLayout.GetDepthAttachmentReference(), RTLayout.GetStencilAttachmentReference(), 0, Device.SupportsParallelRendering())"
  },
  {
    "label": "GetDepthAttachmentReference()",
    "kind": "Method",
    "detail": "Function (attachment)",
    "insertText": "GetDepthAttachmentReference()"
  },
  {
    "label": "SetAspect()",
    "kind": "Method",
    "detail": "Function (DepthStencilAttachment .)",
    "insertText": "SetAspect(VK_IMAGE_ASPECT_DEPTH_BIT)"
  },
  {
    "label": "SetColorAttachments()",
    "kind": "Method",
    "detail": "Function (DepthStencilAttachment . layout = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL ; } else { DepthStencilAttachment . layout = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL ; DepthInputAttachment = DepthStencilAttachment . attachment ; DepthInputAttachmentLayout = DepthStencilAttachment . layout ; DepthInputAspectMask = VK_IMAGE_ASPECT_DEPTH_BIT ; } } } { TSubpassDescriptionClass& SubpassDesc = SubpassDescriptions [ NumSubpasses + + ] ; SubpassDesc .)",
    "insertText": "SetColorAttachments(ColorAttachmentReferences, NumColorAttachments)"
  },
  {
    "label": "SetDepthStencilAttachment()",
    "kind": "Method",
    "detail": "Function (SubpassDesc .)",
    "insertText": "SetDepthStencilAttachment(&DepthStencilAttachmentReference)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bDepthReadSubpass && bResolveDepth)"
  },
  {
    "label": "SetDepthStencilResolveAttachment()",
    "kind": "Method",
    "detail": "Function (SubpassDesc .)",
    "insertText": "SetDepthStencilResolveAttachment(&DepthStencilResolveSubpassDesc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bApplyFragmentShadingRate)"
  },
  {
    "label": "SetShadingRateAttachment()",
    "kind": "Method",
    "detail": "Function (SubpassDesc .)",
    "insertText": "SetShadingRateAttachment(&FragmentShadingRateAttachmentInfo)"
  },
  {
    "label": "SetMultiViewMask()",
    "kind": "Method",
    "detail": "Function (} SubpassDesc .)",
    "insertText": "SetMultiViewMask(MultiviewMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDepthReadSubpass)"
  },
  {
    "label": "SetColorAttachments()",
    "kind": "Method",
    "detail": "Function (TSubpassDescriptionClass& SubpassDesc = SubpassDescriptions [ NumSubpasses + + ] ; SubpassDesc .)",
    "insertText": "SetColorAttachments(ColorAttachmentReferences, 1)"
  },
  {
    "label": "SetAspect()",
    "kind": "Method",
    "detail": "Function (InputAttachments1 [ 0 ] . attachment = DepthInputAttachment ; InputAttachments1 [ 0 ] . layout = DepthInputAttachmentLayout ; InputAttachments1 [ 0 ] .)",
    "insertText": "SetAspect(DepthInputAspectMask)"
  },
  {
    "label": "SetInputAttachments()",
    "kind": "Method",
    "detail": "Function (SubpassDesc .)",
    "insertText": "SetInputAttachments(InputAttachments1, InputAttachment1Count)"
  },
  {
    "label": "SetDepthStencilAttachment()",
    "kind": "Method",
    "detail": "Function (SubpassDesc .)",
    "insertText": "SetDepthStencilAttachment(&DepthStencilAttachment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSubpassDependencyClass& SubpassDep = SubpassDependencies [ NumDependencies + + ] ; SubpassDep . srcSubpass = 0 ; SubpassDep . dstSubpass = 1 ; SubpassDep . srcStageMask = VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT ; SubpassDep . dstStageMask = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT ; SubpassDep . srcAccessMask = VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT ; SubpassDep . dstAccessMask = VK_ACCESS_INPUT_ATTACHMENT_READ_BIT ; SubpassDep . dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT ; })",
    "insertText": "if(bDeferredShadingSubpass)"
  },
  {
    "label": "SetColorAttachments()",
    "kind": "Method",
    "detail": "Function ({ TSubpassDescriptionClass& SubpassDesc = SubpassDescriptions [ NumSubpasses + + ] ; SubpassDesc .)",
    "insertText": "SetColorAttachments(ColorAttachmentReferences)"
  },
  {
    "label": "SetAspect()",
    "kind": "Method",
    "detail": "Function (InputAttachments2 [ 1 ] . attachment = VK_ATTACHMENT_UNUSED ; InputAttachments2 [ 1 ] . layout = VK_IMAGE_LAYOUT_UNDEFINED ; InputAttachments2 [ 1 ] .)",
    "insertText": "SetAspect(0)"
  },
  {
    "label": "SetAspect()",
    "kind": "Method",
    "detail": "Function (InputAttachments2 [ i ] . attachment = ColorAttachmentReferences [ i - 1 ] . attachment ; InputAttachments2 [ i ] . layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL ; InputAttachments2 [ i ] .)",
    "insertText": "SetAspect(VK_IMAGE_ASPECT_COLOR_BIT)"
  },
  {
    "label": "SetInputAttachments()",
    "kind": "Method",
    "detail": "Function (} SubpassDesc .)",
    "insertText": "SetInputAttachments(InputAttachments2, NumColorInputs + 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSubpassDependencyClass& SubpassDep = SubpassDependencies [ NumDependencies + + ] ; SubpassDep . srcSubpass = 1 ; SubpassDep . dstSubpass = 2 ; SubpassDep . srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT ; SubpassDep . dstStageMask = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT ; SubpassDep . srcAccessMask = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT ; SubpassDep . dstAccessMask = VK_ACCESS_INPUT_ATTACHMENT_READ_BIT ;)",
    "insertText": "if(GVulkanInputAttachmentShaderRead == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SubpassDep . dstAccessMask | = VK_ACCESS_SHADER_READ_BIT ; } SubpassDep . dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT ; } })",
    "insertText": "if(bCustomResolveSubpass)"
  },
  {
    "label": "SetInputAttachments()",
    "kind": "Method",
    "detail": "Function (} SubpassDesc .)",
    "insertText": "SetInputAttachments(InputAttachments3, 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSubpassDependencyClass& SubpassDep = SubpassDependencies [ NumDependencies + + ] ; SubpassDep . srcSubpass = 1 ; SubpassDep . dstSubpass = 2 ; SubpassDep . srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT ; SubpassDep . dstStageMask = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT ; SubpassDep . srcAccessMask = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT ; SubpassDep . dstAccessMask = VK_ACCESS_INPUT_ATTACHMENT_READ_BIT ; SubpassDep . dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT ; })",
    "insertText": "if(!bCustomResolveSubpass)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResolveAttachmentReferences .)",
    "insertText": "Add(TAttachmentReferenceClass{})"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (ResolveAttachmentReferences .)",
    "insertText": "Last()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ResolveAttachmentReferences.Last(), ResolveAttachmentReferences[0])"
  },
  {
    "label": "SetResolveAttachments()",
    "kind": "Method",
    "detail": "Function (SubpassDescriptions [ 0 ] .)",
    "insertText": "SetResolveAttachments(TArrayView<TAttachmentReferenceClass>(ResolveAttachmentReferences.GetData(), ResolveAttachmentReferences.Num() - 1))"
  },
  {
    "label": "SetResolveAttachments()",
    "kind": "Method",
    "detail": "Function (SubpassDescriptions [ NumSubpasses - 1 ] .)",
    "insertText": "SetResolveAttachments(TArrayView<TAttachmentReferenceClass>(&ResolveAttachmentReferences.Last(), 1))"
  },
  {
    "label": "SetResolveAttachments()",
    "kind": "Method",
    "detail": "Function (} else { SubpassDescriptions [ NumSubpasses - 1 ] .)",
    "insertText": "SetResolveAttachments(ResolveAttachmentReferences)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(uint32 Attachment = 0; Attachment < RTLayout.GetNumAttachmentDescriptions(); ++Attachment)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AttachmentDescriptions .)",
    "insertText": "Add(TAttachmentDescriptionClass(RTLayout.GetAttachmentDescriptions()[Attachment], RTLayout.GetStencilDesc(), Device.SupportsParallelRendering()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { AttachmentDescriptions .)",
    "insertText": "Add(TAttachmentDescriptionClass(RTLayout.GetAttachmentDescriptions()[Attachment]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CreateInfo . subpassCount = NumSubpasses ; CreateInfo . pSubpasses = SubpassDescriptions ; CreateInfo . dependencyCount = NumDependencies ; CreateInfo . pDependencies = SubpassDependencies ; ViewMask [ 0 ] = MultiviewMask ; ViewMask [ 1 ] = MultiviewMask ; CorrelationMask = MultiviewMask ;)",
    "insertText": "if(RTLayout.GetIsMultiView())"
  },
  {
    "label": "SetCorrelationMask()",
    "kind": "Method",
    "detail": "Function (CreateInfo .)",
    "insertText": "SetCorrelationMask(&CorrelationMask)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(Device.GetOptionalExtensions().HasKHRMultiview, TEXT(\"Layout is multiview but extension is not supported!\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MultiviewInfo . subpassCount = NumSubpasses ; MultiviewInfo . pViewMasks = ViewMask ; MultiviewInfo . dependencyCount = 0 ; MultiviewInfo . pViewOffsets = nullptr ; MultiviewInfo . correlationMaskCount = 1 ; MultiviewInfo . pCorrelationMasks =& CorrelationMask ; MultiviewInfo . pNext = CreateInfo . pNext ; CreateInfo . pNext =& MultiviewInfo ; } })",
    "insertText": "if(Device.GetOptionalExtensions().HasEXTFragmentDensityMap && RTLayout.GetHasFragmentDensityAttachment())"
  },
  {
    "label": "GetFragmentDensityAttachmentReference()",
    "kind": "Method",
    "detail": "Function (FragDensityCreateInfo . fragmentDensityMapAttachment =* RTLayout .)",
    "insertText": "GetFragmentDensityAttachmentReference()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FragDensityCreateInfo . pNext = CreateInfo . pNext ; CreateInfo . pNext =& FragDensityCreateInfo ; } } VkRenderPass)",
    "insertText": "Create(const FVulkanRenderTargetLayout& RTLayout)"
  },
  {
    "label": "BuildCreateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCreateInfo(RTLayout)"
  },
  {
    "label": "GetCreateInfo()",
    "kind": "Method",
    "detail": "Function (} TRenderPassCreateInfoClass&)",
    "insertText": "GetCreateInfo()"
  },
  {
    "label": "FVulkanRenderPassManager()",
    "kind": "Method",
    "detail": "Function (class FVulkanRenderPassManager : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanRenderPassManager(FVulkanDevice* InDevice) : VulkanRHI::FDeviceChild(InDevice)"
  },
  {
    "label": "FVulkanRenderPassManager()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanRenderPassManager()"
  },
  {
    "label": "GetOrCreateFramebuffer()",
    "kind": "Method",
    "detail": "Function (FVulkanFramebuffer*)",
    "insertText": "GetOrCreateFramebuffer(const FRHISetRenderTargetsInfo& RenderTargetsInfo, const FVulkanRenderTargetLayout& RTLayout, FVulkanRenderPass* RenderPass)"
  },
  {
    "label": "GetOrCreateRenderPass()",
    "kind": "Method",
    "detail": "Function (FVulkanRenderPass*)",
    "insertText": "GetOrCreateRenderPass(const FVulkanRenderTargetLayout& RTLayout)"
  },
  {
    "label": "GetRenderPassFullHash()",
    "kind": "Method",
    "detail": "Function (const uint32 RenderPassHash = RTLayout .)",
    "insertText": "GetRenderPassFullHash()"
  },
  {
    "label": "ScopedReadLock()",
    "kind": "Method",
    "detail": "Function ({ FRWScopeLock)",
    "insertText": "ScopedReadLock(RenderPassesLock, SLT_ReadOnly)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FVulkanRenderPass** FoundRenderPass = RenderPasses .)",
    "insertText": "Find(RenderPassHash)"
  },
  {
    "label": "ScopedWriteLock()",
    "kind": "Method",
    "detail": "Function ({ FRWScopeLock)",
    "insertText": "ScopedWriteLock(RenderPassesLock, SLT_Write)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (delete RenderPass ; return* FoundRenderPass ; } RenderPasses .)",
    "insertText": "Add(RenderPassHash, RenderPass)"
  },
  {
    "label": "BeginRenderPass()",
    "kind": "Method",
    "detail": "Function (} return RenderPass ; } void)",
    "insertText": "BeginRenderPass(FVulkanCommandListContext& Context, FVulkanDevice& InDevice, FVulkanCmdBuffer* CmdBuffer, const FRHIRenderPassInfo& RPInfo, const FVulkanRenderTargetLayout& RTLayout, FVulkanRenderPass* RenderPass, FVulkanFramebuffer* Framebuffer)"
  },
  {
    "label": "EndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRenderPass(FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "NotifyDeletedRenderTarget()",
    "kind": "Method",
    "detail": "Function (FRWLock RenderPassesLock ; FRWLock FramebuffersLock ; void)",
    "insertText": "NotifyDeletedRenderTarget(VkImage Image)"
  }
]