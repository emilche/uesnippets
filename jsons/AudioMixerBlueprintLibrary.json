[
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSwapAudioOutputResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwapAudioOutputResult"
  },
  {
    "label": "FAudioOutputDeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioOutputDeviceInfo"
  },
  {
    "label": "UAudioMixerBlueprintLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioMixerBlueprintLibrary"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" SubmixEffects / AudioMixerSubmixEffectDynamicsProcessor . h \" # include \" Sound / SoundEffectSource . h \" # include \" Sound / AudioBus . h \" # include \" SampleBuffer . h \" # include \" Sound / SoundCue . h \" # include \" Sound / SoundSubmixSend . h \" # include \" DSP / SpectrumAnalyzer . h \" # include \" AudioMixer . h \" # include \" AudioMixerTypes . h \" # include \" AudioMixerBlueprintLibrary . generated . h \" class USoundSubmix ;)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_TwoParams(FOnSoundLoadComplete, const class USoundWave*, LoadedSoundWave, const bool, WasCancelled)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (C = 0,Db = 1,D = 2,Eb = 3,E = 4,F = 5,Gb = 6,G = 7,Ab = 8,A = 9,Bb = 1 0,B = 1 1,} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "DataFormatAsString()",
    "kind": "Method",
    "detail": "Function (Unknown,Float,Int16,Unsupported } ; FString)",
    "insertText": "DataFormatAsString(EAudioMixerStreamDataFormatType type)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FrontLeft,FrontRight,FrontCenter,LowFrequency,BackLeft,BackRight,FrontLeftOfCenter,FrontRightOfCenter,BackCenter,SideLeft,SideRight,TopCenter,TopFrontLeft,TopFrontCenter,TopFrontRight,TopBackLeft,TopBackCenter,TopBackRight,Unknown,ChannelTypeCount,DefaultChannel = FrontLeft } ; const TCHAR*)",
    "insertText": "ToString(EAudioMixerChannelType InType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"UNSUPPORTED\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Failure,Success,None,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSwapAudioOutputResult()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FAudioOutputDeviceInfo() : Name(\"\") , DeviceId(\"\") , NumChannels(0) , SampleRate(0) , Format(EAudioMixerStreamDataFormatType::Unknown) , bIsSystemDefault(true) , bIsCurrentDevice(false)"
  },
  {
    "label": "FAudioOutputDeviceInfo()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FAudioOutputDeviceInfo(const Audio::FAudioPlatformDeviceInfo& InDeviceInfo)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FOnAudioOutputDevicesObtained, const TArray<FAudioOutputDeviceInfo>&, AvailableDevices)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FOnMainAudioOutputDeviceObtained, const FString&, CurrentDevice)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FOnCompletedDeviceSwap, const FSwapAudioOutputResult&, SwapResult)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(meta=(ScriptName=\"AudioMixerLibrary\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintPure, meta = (DisplayName = \"Audio Output Device Info To String\", CompactNodeTitle = \"->\", BlueprintAutocast), Category = \"Audio\") static AUDIOMIXER_API FString Conv_AudioOutputDeviceInfoToString(const FAudioOutputDeviceInfo& Info)"
  }
]