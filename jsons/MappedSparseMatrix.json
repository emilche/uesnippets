[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "MappedSparseMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappedSparseMatrix"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "MappedSparseMatrix()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MAPPED_SPARSEMATRIX_H # define EIGEN_MAPPED_SPARSEMATRIX_H namespace Eigen { namespace internal { template<_Scalar,int _Flags,_StorageIndex> struct traits<MappedSparseMatrix<_Scalar,_Flags,_StorageIndex>> : traits<SparseMatrix<_Scalar,_Flags,_StorageIndex>> { } ; } template<_Scalar,int _Flags,_StorageIndex> class MappedSparseMatrix : public Map<SparseMatrix<_Scalar,_Flags,_StorageIndex>> { typedef Map<SparseMatrix<_Scalar,_Flags,_StorageIndex>> Base ; public : typedef Base::StorageIndex StorageIndex ; typedef Base::Scalar Scalar ;)",
    "insertText": "MappedSparseMatrix(Index rows, Index cols, Index nnz, StorageIndex* outerIndexPtr, StorageIndex* innerIndexPtr, Scalar* valuePtr, StorageIndex* innerNonZeroPtr = 0) : Base(rows, cols, nnz, outerIndexPtr, innerIndexPtr, valuePtr, innerNonZeroPtr)"
  },
  {
    "label": "MappedSparseMatrix()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MappedSparseMatrix()"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<_Scalar,int _Options,_StorageIndex> struct evaluator<MappedSparseMatrix<_Scalar,_Options,_StorageIndex>> : evaluator<SparseCompressedBase<MappedSparseMatrix<_Scalar,_Options,_StorageIndex>>> { typedef MappedSparseMatrix<_Scalar,_Options,_StorageIndex> XprType ; typedef evaluator<SparseCompressedBase<XprType>> Base ;)",
    "insertText": "evaluator() : Base()"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "evaluator(const XprType &mat) : Base(mat)"
  }
]