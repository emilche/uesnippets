[
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "FGeometryDynamicCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryDynamicCollection"
  },
  {
    "label": "FFaceEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFaceEdge"
  },
  {
    "label": "PrintParentHierarchy()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "PrintParentHierarchy(const FGeometryCollection * Collection)"
  },
  {
    "label": "ContiguousArray()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ContiguousArray(TArray<int32> & Array, int32 Length)"
  },
  {
    "label": "BuildIncrementMask()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "BuildIncrementMask(const TArray<int32> & SortedDeletionList, const int32 & Size, TArray<int32> & Mask)"
  },
  {
    "label": "BuildLookupMask()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "BuildLookupMask(const TArray<int32> & SortedDeletionList, const int32 & Size, TArray<bool> & Mask)"
  },
  {
    "label": "BuildTransformGroupToGeometryGroupMap()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "BuildTransformGroupToGeometryGroupMap(const FGeometryCollection& GeometryCollection, TArray<int32> & TransformToGeometry)"
  },
  {
    "label": "BuildFaceGroupToGeometryGroupMap()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "BuildFaceGroupToGeometryGroupMap(const FGeometryCollection& GeometryCollection, const TArray<int32>& TransformToGeometryMap, TArray<int32> & FaceToGeometry)"
  },
  {
    "label": "ValidateSortedList()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ValidateSortedList(const TArray<int32>&SortedDeletionList, const int32 & ListSize)"
  },
  {
    "label": "HasMultipleRoots()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasMultipleRoots(FGeometryCollection * Collection)"
  },
  {
    "label": "HasCycle()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasCycle(const TManagedArray<int32>& Parents, int32 Node)"
  },
  {
    "label": "HasCycle()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasCycle(const TManagedArray<int32>& Parents, const TArray<int32>& SelectedBones)"
  },
  {
    "label": "ParentTransform()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ParentTransform(FManagedArrayCollection* ManagedArrayCollection, const int32 TransformIndex, const int32 ChildIndex)"
  },
  {
    "label": "ParentTransforms()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ParentTransforms(FManagedArrayCollection* ManagedArrayCollection, const int32 TransformIndex, const TArray<int32>& SelectedBones)"
  },
  {
    "label": "UnparentTransform()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "UnparentTransform(FManagedArrayCollection* ManagedArrayCollection, const int32 ChildIndex)"
  },
  {
    "label": "AveragePosition()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "AveragePosition(FGeometryCollection* Collection, const TArray<int32>& Indices)"
  },
  {
    "label": "GlobalMatrix()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrix(const TManagedArray<FTransform>& RelativeTransforms, const TManagedArray<int32>& Parents, int32 Index)"
  },
  {
    "label": "GlobalMatrix()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrix(const TManagedArray<FTransform3f>& RelativeTransforms, const TManagedArray<int32>& Parents, int32 Index)"
  },
  {
    "label": "GlobalMatrix()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrix(TArrayView<const FTransform> RelativeTransforms, TArrayView<const int32> Parents, int32 Index)"
  },
  {
    "label": "GlobalMatrix()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrix(TArrayView<const FTransform3f> RelativeTransforms, TArrayView<const int32> Parents, int32 Index)"
  },
  {
    "label": "GlobalMatrix3f()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrix3f(const TManagedArray<FTransform3f>& RelativeTransforms, const TManagedArray<int32>& Parents, int32 Index)"
  },
  {
    "label": "GlobalMatrices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrices(const TManagedArray<FTransform>& RelativeTransforms, const TManagedArray<int32>& Parents, const TArray<int32>& Indices, TArray<FTransform>& Transforms)"
  },
  {
    "label": "GlobalMatrices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrices(const TManagedArray<FTransform3f>& RelativeTransforms, const TManagedArray<int32>& Parents, const TArray<int32>& Indices, TArray<FTransform3f>& Transforms)"
  },
  {
    "label": "GlobalMatricesFromRoot()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatricesFromRoot(const int32 ParentTransformIndex, const TManagedArray<FTransform>& RelativeTransforms, const TManagedArray<TSet<int32>>& Children, TArray<FMatrix>& Transforms)"
  },
  {
    "label": "GlobalMatrices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrices(const TManagedArray<FTransform>& RelativeTransforms, const TManagedArray<int32>& Parents, const TManagedArray<FTransform>& UniformScale, TArray<MatrixType>& Transforms)"
  },
  {
    "label": "GlobalMatrices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrices(const TManagedArray<TransformType>& RelativeTransforms, const TManagedArray<int32>& Parents, TArray<MatrixType>& Transforms)"
  },
  {
    "label": "GetOverlappedPairs()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GetOverlappedPairs(FGeometryCollection* Collection, int Level, TSet<TTuple<int32, int32>>& OutOverlappedPairs)"
  },
  {
    "label": "PrepareForSimulation()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "PrepareForSimulation(FGeometryCollection* GeometryCollection, bool CenterAtOrigin=true)"
  },
  {
    "label": "ReCenterGeometryAroundCentreOfMass()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ReCenterGeometryAroundCentreOfMass(FGeometryCollection* GeometryCollection, bool CenterAtOrigin = true)"
  },
  {
    "label": "FindOpenBoundaries()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FindOpenBoundaries(const FGeometryCollection* GeometryCollection, const float CoincidentVertexTolerance, TArray<TArray<TArray<int32>>> &BoundaryVertexIndices)"
  },
  {
    "label": "TriangulateBoundaries()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "TriangulateBoundaries(FGeometryCollection* GeometryCollection, const TArray<TArray<TArray<int32>>> &BoundaryVertexIndices, bool bWoundClockwise = true, float MinTriangleAreaSq = 1e-4f)"
  },
  {
    "label": "AddFaces()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "AddFaces(FGeometryCollection* GeometryCollection, const TArray<TArray<FIntVector>> &Faces)"
  },
  {
    "label": "ResizeGeometries()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ResizeGeometries(FGeometryCollection* GeometryCollection, const TArray<int32>& FaceCounts, const TArray<int32>& VertexCounts, bool bDoValidation = true)"
  },
  {
    "label": "ComputeCoincidentVertices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ComputeCoincidentVertices(const FGeometryCollection* GeometryCollection, const float Tolerance, TMap<int32, int32>& CoincidentVerticesMap, TSet<int32>& VertexToDeleteSet)"
  },
  {
    "label": "DeleteCoincidentVertices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "DeleteCoincidentVertices(FGeometryCollection* GeometryCollection, float Tolerance = 1e-2f)"
  },
  {
    "label": "ComputeZeroAreaFaces()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ComputeZeroAreaFaces(const FGeometryCollection* GeometryCollection, const float Tolerance, TSet<int32>& FaceToDeleteSet)"
  },
  {
    "label": "DeleteZeroAreaFaces()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "DeleteZeroAreaFaces(FGeometryCollection* GeometryCollection, float Tolerance = 1e-4f)"
  },
  {
    "label": "ComputeHiddenFaces()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ComputeHiddenFaces(const FGeometryCollection* GeometryCollection, TSet<int32>& FaceToDeleteSet)"
  },
  {
    "label": "DeleteHiddenFaces()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "DeleteHiddenFaces(FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "ComputeStaleVertices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ComputeStaleVertices(const FGeometryCollection* GeometryCollection, TSet<int32>& VertexToDeleteSet)"
  },
  {
    "label": "DeleteStaleVertices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "DeleteStaleVertices(FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "ComputeEdgeInFaces()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ComputeEdgeInFaces(const FGeometryCollection* GeometryCollection, TMap<FFaceEdge, int32>& FaceEdgeMap)"
  },
  {
    "label": "PrintStatistics()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "PrintStatistics(const FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "HasValidFacesFor()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasValidFacesFor(const FGeometryCollection* GeometryCollection, int32 GeometryIndex)"
  },
  {
    "label": "HasValidIndicesFor()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasValidIndicesFor(const FGeometryCollection* GeometryCollection, int32 GeometryIndex)"
  },
  {
    "label": "HasInvalidIndicesFor()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasInvalidIndicesFor(const FGeometryCollection* GeometryCollection, int32 GeometryIndex)"
  },
  {
    "label": "HasResidualFaces()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasResidualFaces(const FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "HasResidualIndices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasResidualIndices(const FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "HasValidGeometryReferences()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "HasValidGeometryReferences(const FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "ComputeRecursiveOrder()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "ComputeRecursiveOrder(const FManagedArrayCollection& Collection)"
  },
  {
    "label": "GlobalMatrices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrices(const FGeometryDynamicCollection& DynamicCollection, TArray<FTransform>& Transforms)"
  },
  {
    "label": "GlobalMatrices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrices(const FGeometryDynamicCollection& DynamicCollection, TArray<FTransform3f>& Transforms)"
  },
  {
    "label": "GlobalMatrices()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrices(const FGeometryDynamicCollection& DynamicCollection, const TArray<int32>& Indices, TArray<FTransform>& OutGlobalTransforms)"
  },
  {
    "label": "GlobalMatrix()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GlobalMatrix(const FGeometryDynamicCollection& DynamicCollection, int32 Index)"
  }
]