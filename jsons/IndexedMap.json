[
  {
    "label": "IndexedMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexedMap"
  },
  {
    "label": "IndexedMap()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_INDEXEDMAP_H # define LLVM_ADT_INDEXEDMAP_H # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / SmallVector . h \" # include<cassert> # include<functional> namespace llvm { template<T,ToIndexT = llvm::identity<unsigned>> class IndexedMap { typedef ToIndexT::argument_type IndexT ; typedef SmallVector<T,0> StorageT ; StorageT storage_ ; T nullVal_ ; ToIndexT toIndex_ ; public :)",
    "insertText": "IndexedMap() : nullVal_(T())"
  },
  {
    "label": "IndexedMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IndexedMap(const T& val) : nullVal_(val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StorageT::reference)",
    "insertText": "operator(IndexT n)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(toIndex_(n) < storage_.size() && \"index out of bounds!\")"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserve(typename StorageT::size_type s)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (storage_ .)",
    "insertText": "reserve(s)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(typename StorageT::size_type s)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (storage_ .)",
    "insertText": "resize(s, nullVal_)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "grow(IndexT n)"
  },
  {
    "label": "toIndex_()",
    "kind": "Method",
    "detail": "Function (unsigned NewSize =)",
    "insertText": "toIndex_(n)"
  },
  {
    "label": "inBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "inBounds(IndexT n)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} StorageT::size_type)",
    "insertText": "size()"
  }
]