[
  {
    "label": "FCurveOwnerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveOwnerInterface"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FGradientStopMark",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGradientStopMark"
  },
  {
    "label": "SColorGradientEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorGradientEditor"
  },
  {
    "label": "FGradientStopMark()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Rendering / RenderingCommon . h \" # include \" Curves / KeyHandle . h \" # include \" Curves / RichCurve . h \" # include \" Widgets / SLeafWidget . h \" class FCurveOwnerInterface ; class FPaintArgs ; class FSlateWindowElementList ; struct FGradientStopMark { public :)",
    "insertText": "FGradientStopMark()"
  },
  {
    "label": "FGradientStopMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGradientStopMark(float InTime, FKeyHandle InRedKeyHandle, FKeyHandle InGreenKeyHandle, FKeyHandle InBlueKeyHandle, FKeyHandle InAlphaKeyHandle = FKeyHandle())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FGradientStopMark& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(FCurveOwnerInterface& CurveOwner)"
  },
  {
    "label": "IsValidAlphaMark()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAlphaMark(const TArray<FRichCurveEditInfo>& Curves)"
  },
  {
    "label": "IsValidColorMark()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidColorMark(const TArray<FRichCurveEditInfo>& Curves)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColor(FCurveOwnerInterface& CurveOwner)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(const FLinearColor& InColor, FCurveOwnerInterface& CurveOwner)"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTime(float NewTime, FCurveOwnerInterface& CurveOwner)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public : float Time ; FKeyHandle RedKeyHandle ; FKeyHandle GreenKeyHandle ; FKeyHandle BlueKeyHandle ; FKeyHandle AlphaKeyHandle ; } ; class SColorGradientEditor : public SLeafWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SColorGradientEditor ) : _ViewMinInput(0.0f) , _ViewMaxInput(0.0f) , _IsEditingEnabled( true ) , _ClampStopsToViewRange( false)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(float, ViewMinInput ) SLATE_ATTRIBUTE( float, ViewMaxInput ) SLATE_ATTRIBUTE( bool, IsEditingEnabled ) SLATE_ARGUMENT( bool, ClampStopsToViewRange ) SLATE_END_ARGS() UNREALED_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "SetCurveOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveOwner(FCurveOwnerInterface* InCurveOwner)"
  },
  {
    "label": "OpenGradientStopContextMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OpenGradientStopContextMenu(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OpenGradientStopColorPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenGradientStopColorPicker()"
  },
  {
    "label": "OnSelectedStopColorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedStopColorChanged(FLinearColor InNewColor)"
  },
  {
    "label": "OnCancelSelectedStopColorChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelSelectedStopColorChange(FLinearColor PreviousColor)"
  },
  {
    "label": "OnBeginChangeAlphaValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginChangeAlphaValue()"
  },
  {
    "label": "OnEndChangeAlphaValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndChangeAlphaValue(float NewValue)"
  },
  {
    "label": "OnAlphaValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlphaValueChanged(float NewValue)"
  },
  {
    "label": "OnAlphaValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlphaValueCommitted(float NewValue, ETextCommit::Type)"
  },
  {
    "label": "OnRemoveSelectedGradientStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSelectedGradientStop()"
  },
  {
    "label": "OnSetGradientStopTimeFromPopup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetGradientStopTimeFromPopup(const FText& NewText, ETextCommit::Type Type)"
  },
  {
    "label": "DrawGradientStopMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGradientStopMark(const FGradientStopMark& Mark, const FGeometry& Geometry, float XPos, const FLinearColor& Color, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FSlateRect& InClippingRect, ESlateDrawEffect DrawEffects, bool bColor, const FWidgetStyle& InWidgetStyle)"
  },
  {
    "label": "GetGradientStopAtPoint()",
    "kind": "Method",
    "detail": "Function (FGradientStopMark)",
    "insertText": "GetGradientStopAtPoint(const FVector2D& MousePos, const FGeometry& MyGeometry)"
  },
  {
    "label": "GetGradientStopMarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGradientStopMarks(TArray<FGradientStopMark>& OutColorMarks, TArray<FGradientStopMark>& OutAlphaMarks)"
  },
  {
    "label": "DeleteStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteStop(const FGradientStopMark& InMark)"
  },
  {
    "label": "AddStop()",
    "kind": "Method",
    "detail": "Function (FGradientStopMark)",
    "insertText": "AddStop(const FVector2D& Position, const FGeometry& MyGeometry, bool bColorStop)"
  },
  {
    "label": "MoveStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveStop(FGradientStopMark& Mark, float NewTime)"
  }
]