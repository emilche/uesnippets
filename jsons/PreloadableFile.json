[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "IFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileHandle"
  },
  {
    "label": "FPreloadableArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreloadableArchive"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "FSavedReadCompleteArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavedReadCompleteArguments"
  },
  {
    "label": "FPreloadableFileProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreloadableFileProxy"
  },
  {
    "label": "FPreloadableFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreloadableFile"
  },
  {
    "label": "FPreloadableArchiveProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreloadableArchiveProxy"
  },
  {
    "label": "FArchive()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" Templates / Atomic . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" class FEvent ; class IAsyncReadFileHandle ; class IAsyncReadRequest ; class IFileHandle ; # define FPRELOADABLEFILE_TEST_ENABLED 0 class FPreloadableArchive : public FArchive { public : typedef TUniqueFunction<)",
    "insertText": "FArchive()"
  },
  {
    "label": "IAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (typedef TUniqueFunction<)",
    "insertText": "IAsyncReadFileHandle()"
  },
  {
    "label": "FPreloadableArchive()",
    "kind": "Method",
    "detail": "Function (enum Flags { None = 0 x0,ModeBits = 0 x1,PreloadHandle = 0 x0,PreloadBytes = 0 x1,Prime = 0 x2,} ; enum { DefaultPrimeSize = 1 0 2 4,DefaultPageSize = 6 4* 1 0 2 4 } ;)",
    "insertText": "FPreloadableArchive(FStringView ArchiveName)"
  },
  {
    "label": "FPreloadableArchive()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPreloadableArchive()"
  },
  {
    "label": "SetPageSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPageSize(int64 PageSize)"
  },
  {
    "label": "InitializeAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAsync(FCreateArchive&& InCreateArchiveFunction, uint32 InFlags = Flags::None, int64 PrimeSize = DefaultPrimeSize)"
  },
  {
    "label": "InitializeAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAsync(FCreateAsyncArchive&& InCreateAsyncArchiveFunction, uint32 InFlags = Flags::None, int64 PrimeSize = DefaultPrimeSize)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "WaitForInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForInitialization()"
  },
  {
    "label": "StartPreload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartPreload()"
  },
  {
    "label": "StopPreload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPreload()"
  },
  {
    "label": "IsPreloading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreloading()"
  },
  {
    "label": "AllocateCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateCache()"
  },
  {
    "label": "ReleaseCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCache()"
  },
  {
    "label": "IsCacheAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheAllocated()"
  },
  {
    "label": "DetachLowerLevel()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "DetachLowerLevel()"
  },
  {
    "label": "HasValidData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Close()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "InitializeInternalAsync()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeInternalAsync(FCreateArchive&& InCreateArchiveFunction, FCreateAsyncArchive&& InCreateAsyncArchiveFunction, uint32 InFlags, int64 PrimeSize)"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInternal(FCreateArchive&& InCreateArchiveFunction, FCreateAsyncArchive&& InCreateAsyncArchiveFunction, uint32 Flags, int64 PrimeSize)"
  },
  {
    "label": "SerializeInternal()",
    "kind": "Method",
    "detail": "Function (# if FPRELOADABLEFILE_TEST_ENABLED void)",
    "insertText": "SerializeInternal(void* V, int64 Length)"
  },
  {
    "label": "PausePreload()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PausePreload()"
  },
  {
    "label": "ResumePreload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumePreload()"
  },
  {
    "label": "ResumePreloadNonRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResumePreloadNonRecursive()"
  },
  {
    "label": "OnReadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadComplete(bool bCanceled, IAsyncReadRequest* ReadRequest)"
  },
  {
    "label": "FreeRetiredRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeRetiredRequests()"
  },
  {
    "label": "SerializeSynchronously()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeSynchronously(void* V, int64 Length)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FString ArchiveName ; int64 Pos = 0 ; int64 Size = - 1 ; FEvent* PendingAsyncComplete = nullptr ; TAtomic<bool> bInitialized ; TAtomic<bool> bIsPreloading ; TAtomic<bool> bIsPreloadingPaused ; uint8* CacheBytes = nullptr ; TAtomic<int64> CacheEnd ; TUniquePtr<IAsyncReadFileHandle> AsynchronousHandle ; TUniquePtr<FArchive> SynchronousArchive ; # if FPRELOADABLEFILE_TEST_ENABLED TUniquePtr<FArchive> TestArchive ; # endif TArray<IAsyncReadRequest*> RetiredRequests ; int64 PageSize = DefaultPageSize ; FCriticalSection PreloadLock ; bool bReadCompleteWasCalledInline = false ; bool bIsInlineReadComplete = false ; struct FSavedReadCompleteArguments { public : void)",
    "insertText": "Set(bool bInCanceled, IAsyncReadRequest* InReadRequest)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bCanceled = bInCanceled ; ReadRequest = InReadRequest ; } void)",
    "insertText": "Get(bool& bOutCanceled, IAsyncReadRequest*& OutReadRequest)"
  },
  {
    "label": "FPreloadableFile()",
    "kind": "Method",
    "detail": "Function (bOutCanceled = bCanceled ; OutReadRequest = ReadRequest ; ReadRequest = nullptr ; } private : bool bCanceled = false ; IAsyncReadRequest* ReadRequest = nullptr ; } SavedReadCompleteArguments ; class FPreloadableFileProxy ; } ; class FPreloadableFile : public FPreloadableArchive { public :)",
    "insertText": "FPreloadableFile(FStringView FileName)"
  },
  {
    "label": "InitializeAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAsync(uint32 InFlags = Flags::None, int64 PrimeSize=DefaultPrimeSize)"
  },
  {
    "label": "TryRegister()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRegister(const TSharedPtr<FPreloadableFile>& PreloadableFile)"
  },
  {
    "label": "TryTakeArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "TryTakeArchive(const TCHAR* FileName)"
  },
  {
    "label": "UnRegister()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnRegister(const TSharedPtr<FPreloadableFile>& PreloadableFile)"
  },
  {
    "label": "FPreloadableArchiveProxy()",
    "kind": "Method",
    "detail": "Function (private : TMap<FString,TSharedPtr<FPreloadableFile>> RegisteredFiles ; } ; class FPreloadableArchiveProxy : public FArchive { public :)",
    "insertText": "FPreloadableArchiveProxy(const TSharedPtr<FPreloadableArchive>& InArchive) :Archive(InArchive)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (Archive ->)",
    "insertText": "Seek(InPos)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Archive ->)",
    "insertText": "Serialize(V, Length)"
  }
]