[
  {
    "label": "packet_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "packet_traits"
  },
  {
    "label": "unpacket_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unpacket_traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PACKET_MATH_ZVECTOR_H # define EIGEN_PACKET_MATH_ZVECTOR_H namespace Eigen { namespace internal { # ifndef EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD # define EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD 1 6 # endif # ifndef EIGEN_HAS_SINGLE_INSTRUCTION_MADD # define EIGEN_HAS_SINGLE_INSTRUCTION_MADD # endif # ifndef EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS # define EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS 3 2 # endif typedef __vector int Packet4i ; typedef __vector unsigned int Packet4ui ; typedef __vector __bool int Packet4bi ; typedef __vector short int Packet8i ; typedef __vector unsigned char Packet16uc ; typedef __vector double Packet2d ; typedef __vector unsigned long long Packet2ul ; typedef __vector long long Packet2l ; # if !)",
    "insertText": "defined(__ARCH__) || (defined(__ARCH__) && __ARCH__ >= 12)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_FAST_Packet4i()",
    "kind": "Method",
    "detail": "Function (# endif } Packet ; # define)",
    "insertText": "_EIGEN_DECLARE_CONST_FAST_Packet4i(NAME,X) \\ Packet4i p4i_##NAME = reinterpret_cast<Packet4i>(vec_splat_s32(X)) #define _EIGEN_DECLARE_CONST_FAST_Packet2d(NAME,X) \\ Packet2d p2d_##NAME = reinterpret_cast<Packet2d>(vec_splat_s64(X)) #define _EIGEN_DECLARE_CONST_FAST_Packet2l(NAME,X) \\ Packet2l p2l_##NAME = reinterpret_cast<Packet2l>(vec_splat_s64(X)) #define _EIGEN_DECLARE_CONST_Packet4i(NAME,X) \\ Packet4i p4i_##NAME = pset1<Packet4i>(X) #define _EIGEN_DECLARE_CONST_Packet2d(NAME,X) \\ Packet2d p2d_##NAME = pset1<Packet2d>(X) #define _EIGEN_DECLARE_CONST_Packet2l(NAME,X) \\ Packet2l p2l_##NAME = pset1<Packet2l>(X) static _EIGEN_DECLARE_CONST_FAST_Packet4i(ZERO, 0)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_FAST_Packet4i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_FAST_Packet4i(ONE, 1)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_FAST_Packet2d()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_FAST_Packet2d(ZERO, 0)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_FAST_Packet2l()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_FAST_Packet2l(ZERO, 0)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_FAST_Packet2l()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_FAST_Packet2l(ONE, 1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (Packet2d p2d_ONE = { 1 . 0,1 . 0 } ; Packet2d p2d_ZERO_ = { numext::bit_cast<double> 0 x8000000000000000ull ),numext::bit_cast<double> 0 x8000000000000000ull ) } ; # if !)",
    "insertText": "defined(__ARCH__) || (defined(__ARCH__) && __ARCH__ >= 12) #define _EIGEN_DECLARE_CONST_FAST_Packet4f(NAME,X) \\ Packet4f p4f_##NAME = reinterpret_cast<Packet4f>(vec_splat_s32(X)) #define _EIGEN_DECLARE_CONST_Packet4f(NAME,X) \\ Packet4f p4f_##NAME = pset1<Packet4f>(X) #define _EIGEN_DECLARE_CONST_Packet4f_FROM_INT(NAME,X) \\ const Packet4f p4f_##NAME = reinterpret_cast<Packet4f>(pset1<Packet4i>(X)) static _EIGEN_DECLARE_CONST_FAST_Packet4f(ZERO, 0)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_FAST_Packet4i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_FAST_Packet4i(MINUS1,-1)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet4f p4f_MZERO = { 0 x80000000,0 x80000000,0 x80000000,0 x80000000 } ; # endif Packet4i p4i_COUNTDOWN = { 0,1,2,3 } ; Packet4f p4f_COUNTDOWN = { 0 . 0,1 . 0,2 . 0,3 . 0 } ; Packet2d p2d_COUNTDOWN = reinterpret_cast<)",
    "insertText": "Packet2d(vec_sld(reinterpret_cast<Packet16uc>(p2d_ZERO), reinterpret_cast<Packet16uc>(p2d_ONE), 8))"
  },
  {
    "label": "_EIGEN_ALIGNED_PTR()",
    "kind": "Method",
    "detail": "Function (Packet16uc p16uc_PSET64_HI = { 0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7 } ; Packet16uc p16uc_DUPLICATE32_HI = { 0,1,2,3,0,1,2,3,4,5,6,7,4,5,6,7 } ; # define _EIGEN_MASK_ALIGNMENT 0 xfffffffffffffff0 # define)",
    "insertText": "_EIGEN_ALIGNED_PTR(x) ((std::ptrdiff_t)(x) & _EIGEN_MASK_ALIGNMENT)"
  },
  {
    "label": "vec_sld()",
    "kind": "Method",
    "detail": "Function (0,1,2,3,4,5,6,7,8,9,1 0,1 1,1 2,1 3,1 4,1 5 } ; Packet16uc p16uc_REVERSE32 = { 1 2,1 3,1 4,1 5,8,9,1 0,1 1,4,5,6,7,0,1,2,3 } ; Packet16uc p16uc_REVERSE64 = { 8,9,1 0,1 1,1 2,1 3,1 4,1 5,0,1,2,3,4,5,6,7 } ; Packet16uc p16uc_PSET32_WODD =)",
    "insertText": "vec_sld((Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 0), (Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 2), 8)"
  },
  {
    "label": "vec_sld()",
    "kind": "Method",
    "detail": "Function (Packet16uc p16uc_PSET32_WEVEN =)",
    "insertText": "vec_sld(p16uc_DUPLICATE32_HI, (Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 3), 8)"
  },
  {
    "label": "p16uc_PSET64_LO()",
    "kind": "Method",
    "detail": "Function (Packet16uc)",
    "insertText": "p16uc_PSET64_LO(Packet16uc) vec_mergel((Packet4ui)p16uc_PSET32_WODD, (Packet4ui)p16uc_PSET32_WEVEN)"
  },
  {
    "label": "vec_sld()",
    "kind": "Method",
    "detail": "Function (Packet16uc p16uc_TRANSPOSE64_HI = { 0,1,2,3,4,5,6,7,1 6,1 7,1 8,1 9,2 0,2 1,2 2,2 3 } ; Packet16uc p16uc_TRANSPOSE64_LO = { 8,9,1 0,1 1,1 2,1 3,1 4,1 5,2 4,2 5,2 6,2 7,2 8,2 9,3 0,3 1 } ; Packet16uc p16uc_COMPLEX32_REV =)",
    "insertText": "vec_sld(p16uc_REVERSE32, p16uc_REVERSE32, 8)"
  },
  {
    "label": "vec_sld()",
    "kind": "Method",
    "detail": "Function (Packet16uc p16uc_COMPLEX32_REV2 =)",
    "insertText": "vec_sld(p16uc_FORWARD, p16uc_FORWARD, 8)"
  },
  {
    "label": "EIGEN_HAS_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "EIGEN_HAS_BUILTIN(__builtin_prefetch) || EIGEN_COMP_GNUC #define EIGEN_ZVECTOR_PREFETCH(ADDR) __builtin_prefetch(ADDR)"
  },
  {
    "label": "EIGEN_ZVECTOR_PREFETCH()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "EIGEN_ZVECTOR_PREFETCH(ADDR) asm( \" pfd [%[addr]]\\n\" :: [addr] \"r\" (ADDR) : \"cc\")"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (# endif template<> struct packet_traits<int> : default_packet_traits { typedef Packet4i type ; typedef Packet4i half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 4,HasHalfPacket = 0,HasAdd = 1,HasSub = 1,HasMul = 1,HasDiv = 1,HasBlend = 1 } ; } ; template<> struct packet_traits<float> : default_packet_traits { typedef Packet4f type ; typedef Packet4f half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 4,HasHalfPacket = 0,HasAdd = 1,HasSub = 1,HasMul = 1,HasDiv = 1,HasMin = 1,HasMax = 1,HasAbs = 1,HasSin = 0,HasCos = 0,HasLog = 0,HasExp = 1,HasSqrt = 1,HasRsqrt = 1,HasTanh = 1,HasErf = 1,HasRound = 1,HasFloor = 1,HasCeil = 1,HasNegate = 1,HasBlend = 1 } ; } ; template<> struct packet_traits<double> : default_packet_traits { typedef Packet2d type ; typedef Packet2d half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 2,HasHalfPacket = 1,HasAdd = 1,HasSub = 1,HasMul = 1,HasDiv = 1,HasMin = 1,HasMax = 1,HasAbs = 1,HasSin = 0,HasCos = 0,HasLog = 0,HasExp = 1,HasSqrt = 1,HasRsqrt = 1,HasRound = 1,HasFloor = 1,HasCeil = 1,HasNegate = 1,HasBlend = 1 } ; } ; template<> struct unpacket_traits<Packet4i> { typedef int type ; enum { size = 4,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; typedef Packet4i half ; } ; template<> struct unpacket_traits<Packet4f> { typedef float type ; enum { size = 4,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; typedef Packet4f half ; } ; template<> struct unpacket_traits<Packet2d> { typedef double type ; enum { size = 2,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; typedef Packet2d half ; } ; EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet4f,4>& kernel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream & s, const Packet4i & v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Packet vt ; vt . v4i = v ; s<<vt . i [ 0 ]<<\",\"<<vt . i [ 1 ]<<\",\"<<vt . i [ 2 ]<<\",\"<<vt . i [ 3 ] ; return s ; } std::ostream&)",
    "insertText": "operator(std::ostream & s, const Packet4ui & v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Packet vt ; vt . v4ui = v ; s<<vt . ui [ 0 ]<<\",\"<<vt . ui [ 1 ]<<\",\"<<vt . ui [ 2 ]<<\",\"<<vt . ui [ 3 ] ; return s ; } std::ostream&)",
    "insertText": "operator(std::ostream & s, const Packet2l & v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Packet vt ; vt . v2l = v ; s<<vt . l [ 0 ]<<\",\"<<vt . l [ 1 ] ; return s ; } std::ostream&)",
    "insertText": "operator(std::ostream & s, const Packet2ul & v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Packet vt ; vt . v2ul = v ; s<<vt . ul [ 0 ]<<\",\"<<vt . ul [ 1 ] ; return s ; } std::ostream&)",
    "insertText": "operator(std::ostream & s, const Packet2d & v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (Packet vt ; vt . v2d = v ; s<<vt . d [ 0 ]<<\",\"<<vt . d [ 1 ] ; return s ; } # if !)",
    "insertText": "defined(__ARCH__) || (defined(__ARCH__) && __ARCH__ >= 12) inline std::ostream & operator <<(std::ostream & s, const Packet4f & v)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (Packet vt ; vt . v4f = v ; s<<vt . f [ 0 ]<<\",\"<<vt . f [ 1 ]<<\",\"<<vt . f [ 2 ]<<\",\"<<vt . f [ 3 ] ; return s ; } # endif template<> EIGEN_STRONG_INLINE Packet4i pload<)",
    "insertText": "Packet4i(const int* from)"
  },
  {
    "label": "vfrom()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_LOAD Packet* vfrom ;)",
    "insertText": "vfrom(Packet *)"
  },
  {
    "label": "vto()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE Packet* vto ;)",
    "insertText": "vto(Packet *)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (vto -> v4i = from ; } template<> EIGEN_STRONG_INLINE void pstore<)",
    "insertText": "double(double* to, const Packet2d& from)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (vto -> v2d = from ; } template<> EIGEN_STRONG_INLINE Packet4i pset1<)",
    "insertText": "Packet4i(const int& from)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pset1<)",
    "insertText": "Packet2d(const double& from)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pbroadcast4<)",
    "insertText": "Packet4i(const int *a, Packet4i& a0, Packet4i& a1, Packet4i& a2, Packet4i& a3)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (a3 = pload<)",
    "insertText": "Packet4i(a)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (a0 =)",
    "insertText": "vec_splat(a3, 0)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (a1 =)",
    "insertText": "vec_splat(a3, 1)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (a2 =)",
    "insertText": "vec_splat(a3, 2)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (a3 =)",
    "insertText": "vec_splat(a3, 3)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pbroadcast4<)",
    "insertText": "Packet2d(const double *a, Packet2d& a0, Packet2d& a1, Packet2d& a2, Packet2d& a3)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (a1 = pload<)",
    "insertText": "Packet2d(a)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (a0 =)",
    "insertText": "vec_splat(a1, 0)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (a1 =)",
    "insertText": "vec_splat(a1, 1)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (a3 = pload<)",
    "insertText": "Packet2d(a+2)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC Packet4i pgather<int,)",
    "insertText": "Packet4i(const int* from, Index stride)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (int EIGEN_ALIGN16 ai [ 4 ] ; ai [ 0 ] = from [ 0* stride ] ; ai [ 1 ] = from [ 1* stride ] ; ai [ 2 ] = from [ 2* stride ] ; ai [ 3 ] = from [ 3* stride ] ; return pload<)",
    "insertText": "Packet4i(ai)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC Packet2d pgather<double,)",
    "insertText": "Packet2d(const double* from, Index stride)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC void pscatter<int,)",
    "insertText": "Packet4i(int* to, const Packet4i& from, Index stride)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int EIGEN_ALIGN16 ai [ 4 ] ; pstore<)",
    "insertText": "int((int *)ai, from)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (to [ 0* stride ] = ai [ 0 ] ; to [ 1* stride ] = ai [ 1 ] ; to [ 2* stride ] = ai [ 2 ] ; to [ 3* stride ] = ai [ 3 ] ; } template<> EIGEN_DEVICE_FUNC void pscatter<double,)",
    "insertText": "Packet2d(double* to, const Packet2d& from, Index stride)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (to [ 0* stride ] = af [ 0 ] ; to [ 1* stride ] = af [ 1 ] ; } template<> EIGEN_STRONG_INLINE Packet4i padd<)",
    "insertText": "Packet4i(const Packet4i& a, const Packet4i& b)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d padd<)",
    "insertText": "Packet2d(const Packet2d& a, const Packet2d& b)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4i)",
    "insertText": "pnegate(const Packet4i& a)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pnegate(const Packet2d& a)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4i)",
    "insertText": "pconj(const Packet4i& a)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pmadd(const Packet2d& a, const Packet2d& b, const Packet2d& c)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4i plset<)",
    "insertText": "Packet4i(const int& a)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d plset<)",
    "insertText": "Packet2d(const double& a)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pround<)",
    "insertText": "Packet2d(const Packet2d& a)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d ploadu<)",
    "insertText": "Packet2d(const double* from)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (Packet4i p = pload<)",
    "insertText": "Packet4i(from)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d p = pload<)",
    "insertText": "Packet2d(from)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstoreu<)",
    "insertText": "int(int* to, const Packet4i& from)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (pstore<)",
    "insertText": "int(to, from)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (pstore<)",
    "insertText": "double(to, from)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "int(const int* addr)"
  },
  {
    "label": "EIGEN_ZVECTOR_PREFETCH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ZVECTOR_PREFETCH(addr)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "double(const double* addr)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE int pfirst<)",
    "insertText": "Packet4i(const Packet4i& a)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (int EIGEN_ALIGN16 x [ 4 ] ;)",
    "insertText": "pstore(x, a)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "preverse(const Packet2d& a)"
  },
  {
    "label": "vec_sld()",
    "kind": "Method",
    "detail": "Function (Packet4i b,sum ; b =)",
    "insertText": "vec_sld(a, a, 8)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (sum = padd<)",
    "insertText": "Packet4i(a, b)"
  },
  {
    "label": "vec_sld()",
    "kind": "Method",
    "detail": "Function (b =)",
    "insertText": "vec_sld(sum, sum, 4)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (sum = padd<)",
    "insertText": "Packet4i(sum, b)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d b,sum ; b = reinterpret_cast<)",
    "insertText": "Packet2d(vec_sld(reinterpret_cast<Packet4i>(a), reinterpret_cast<Packet4i>(a), 8))"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (sum = padd<)",
    "insertText": "Packet2d(a, b)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN16 int aux [ 4 ] ;)",
    "insertText": "pstore(aux, a)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (Packet4i b,res ; b = pmin<)",
    "insertText": "Packet4i(a, vec_sld(a, a, 8))"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (res = pmin<)",
    "insertText": "Packet4i(b, vec_sld(b, b, 4))"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet4i,4>& kernel)"
  },
  {
    "label": "vec_mergeh()",
    "kind": "Method",
    "detail": "Function (Packet4i t0 =)",
    "insertText": "vec_mergeh(kernel.packet[0], kernel.packet[2])"
  },
  {
    "label": "vec_mergel()",
    "kind": "Method",
    "detail": "Function (Packet4i t1 =)",
    "insertText": "vec_mergel(kernel.packet[0], kernel.packet[2])"
  },
  {
    "label": "vec_mergeh()",
    "kind": "Method",
    "detail": "Function (Packet4i t2 =)",
    "insertText": "vec_mergeh(kernel.packet[1], kernel.packet[3])"
  },
  {
    "label": "vec_mergel()",
    "kind": "Method",
    "detail": "Function (Packet4i t3 =)",
    "insertText": "vec_mergel(kernel.packet[1], kernel.packet[3])"
  },
  {
    "label": "vec_mergeh()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "vec_mergeh(t0, t2)"
  },
  {
    "label": "vec_mergel()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vec_mergel(t0, t2)"
  },
  {
    "label": "vec_mergeh()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] =)",
    "insertText": "vec_mergeh(t1, t3)"
  },
  {
    "label": "vec_mergel()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] =)",
    "insertText": "vec_mergel(t1, t3)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet2d,2>& kernel)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (Packet2d t0 =)",
    "insertText": "vec_perm(kernel.packet[0], kernel.packet[1], p16uc_TRANSPOSE64_HI)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (Packet2d t1 =)",
    "insertText": "vec_perm(kernel.packet[0], kernel.packet[1], p16uc_TRANSPOSE64_LO)"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] = t0 ; kernel . packet [ 1 ] = t1 ; } template<> EIGEN_STRONG_INLINE Packet4i)",
    "insertText": "pblend(const Selector<4>& ifPacket, const Packet4i& thenPacket, const Packet4i& elsePacket)"
  },
  {
    "label": "vec_cmpeq()",
    "kind": "Method",
    "detail": "Function (Packet4ui select = { ifPacket . select [ 0 ],ifPacket . select [ 1 ],ifPacket . select [ 2 ],ifPacket . select [ 3 ] } ; Packet4ui mask =)",
    "insertText": "vec_cmpeq(select, reinterpret_cast<Packet4ui>(p4i_ONE))"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pblend(const Selector<2>& ifPacket, const Packet2d& thenPacket, const Packet2d& elsePacket)"
  },
  {
    "label": "vec_cmpeq()",
    "kind": "Method",
    "detail": "Function (Packet2ul select = { ifPacket . select [ 0 ],ifPacket . select [ 1 ] } ; Packet2ul mask =)",
    "insertText": "vec_cmpeq(select, reinterpret_cast<Packet2ul>(p2l_ONE))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(__ARCH__) || (defined(__ARCH__) && __ARCH__ < 12) template<int element> EIGEN_STRONG_INLINE Packet4f vec_splat_packet4f(const Packet4f& from)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (Packet4f splat ;)",
    "insertText": "switch(element)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (splat . v4f [ 1 ] = splat . v4f [ 0 ] ; break ; case 1 : splat . v4f [ 0 ] =)",
    "insertText": "vec_splat(from.v4f[0], 1)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (splat . v4f [ 1 ] = splat . v4f [ 0 ] ; break ; case 2 : splat . v4f [ 0 ] =)",
    "insertText": "vec_splat(from.v4f[1], 0)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (splat . v4f [ 1 ] = splat . v4f [ 0 ] ; break ; case 3 : splat . v4f [ 0 ] =)",
    "insertText": "vec_splat(from.v4f[1], 1)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (splat . v4f [ 1 ] = splat . v4f [ 0 ] ; break ; } return splat ; } template<> EIGEN_STRONG_INLINE Packet4f pload<)",
    "insertText": "Packet4f(const float* from)"
  },
  {
    "label": "vec_ld2f()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_LOAD Packet4f vfrom ; vfrom . v4f [ 0 ] =)",
    "insertText": "vec_ld2f(&from[0])"
  },
  {
    "label": "vec_ld2f()",
    "kind": "Method",
    "detail": "Function (vfrom . v4f [ 1 ] =)",
    "insertText": "vec_ld2f(&from[2])"
  },
  {
    "label": "vec_st2f()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE)",
    "insertText": "vec_st2f(from.v4f[0], &to[0])"
  },
  {
    "label": "vec_st2f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vec_st2f(from.v4f[1], &to[2])"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4f pset1<)",
    "insertText": "Packet4f(const float& from)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet4f to ; to . v4f [ 0 ] = pset1<)",
    "insertText": "Packet2d(static_cast<const double&>(from))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (to . v4f [ 1 ] = to . v4f [ 0 ] ; return to ; } template<> EIGEN_STRONG_INLINE void pbroadcast4<)",
    "insertText": "Packet4f(const float *a, Packet4f& a0, Packet4f& a1, Packet4f& a2, Packet4f& a3)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (a3 = pload<)",
    "insertText": "Packet4f(a)"
  },
  {
    "label": "vec_splat_packet4f()",
    "kind": "Method",
    "detail": "Function (a0 =)",
    "insertText": "vec_splat_packet4f(a3)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC Packet4f pgather<float,)",
    "insertText": "Packet4f(const float* from, Index stride)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (float EIGEN_ALIGN16 ai [ 4 ] ; ai [ 0 ] = from [ 0* stride ] ; ai [ 1 ] = from [ 1* stride ] ; ai [ 2 ] = from [ 2* stride ] ; ai [ 3 ] = from [ 3* stride ] ; return pload<)",
    "insertText": "Packet4f(ai)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC void pscatter<float,)",
    "insertText": "Packet4f(float* to, const Packet4f& from, Index stride)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float EIGEN_ALIGN16 ai [ 4 ] ; pstore<)",
    "insertText": "float((float *)ai, from)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (to [ 0* stride ] = ai [ 0 ] ; to [ 1* stride ] = ai [ 1 ] ; to [ 2* stride ] = ai [ 2 ] ; to [ 3* stride ] = ai [ 3 ] ; } template<> EIGEN_STRONG_INLINE Packet4f padd<)",
    "insertText": "Packet4f(const Packet4f& a, const Packet4f& b)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (Packet4f c ; c . v4f [ 0 ] = a . v4f [ 0 ] / b . v4f [ 0 ] ; c . v4f [ 1 ] = a . v4f [ 1 ] / b . v4f [ 1 ] ; return c ; } template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "pnegate(const Packet4f& a)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f c ; c . v4f [ 0 ] = - a . v4f [ 0 ] ; c . v4f [ 1 ] = - a . v4f [ 1 ] ; return c ; } template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "pmadd(const Packet4f& a, const Packet4f& b, const Packet4f& c)"
  },
  {
    "label": "vec_madd()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "vec_madd(a.v4f[0], b.v4f[0], c.v4f[0])"
  },
  {
    "label": "vec_madd()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "vec_madd(a.v4f[1], b.v4f[1], c.v4f[1])"
  },
  {
    "label": "pmin()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pmin(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pmin()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pmin(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "pmax()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pmax(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pmax()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pmax(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pand(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pand(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "por(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "por(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pxor(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pxor(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pandnot(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pandnot(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "vec_round()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "vec_round(a.v4f[0])"
  },
  {
    "label": "vec_round()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "vec_round(a.v4f[1])"
  },
  {
    "label": "vec_ceil()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "vec_ceil(a.v4f[0])"
  },
  {
    "label": "vec_ceil()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "vec_ceil(a.v4f[1])"
  },
  {
    "label": "vec_floor()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "vec_floor(a.v4f[0])"
  },
  {
    "label": "vec_floor()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "vec_floor(a.v4f[1])"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet4f p = pload<)",
    "insertText": "Packet4f(from)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (p . v4f [ 1 ] =)",
    "insertText": "vec_splat(p.v4f[0], 1)"
  },
  {
    "label": "vec_splat()",
    "kind": "Method",
    "detail": "Function (p . v4f [ 0 ] =)",
    "insertText": "vec_splat(p.v4f[0], 0)"
  },
  {
    "label": "vec_st2f()",
    "kind": "Method",
    "detail": "Function (float EIGEN_ALIGN16 x [ 2 ] ;)",
    "insertText": "vec_st2f(a.v4f[0], &x[0])"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet4f rev ; rev . v4f [ 0 ] = preverse<)",
    "insertText": "Packet2d(a.v4f[1])"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (rev . v4f [ 1 ] = preverse<)",
    "insertText": "Packet2d(a.v4f[0])"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pabs(a.v4f[0])"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pabs(a.v4f[1])"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d sum ; sum = padd<)",
    "insertText": "Packet2d(a.v4f[0], a.v4f[1])"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE float predux_mul<)",
    "insertText": "Packet4f(const Packet4f& a)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (res = pmin<)",
    "insertText": "Packet2d(b, reinterpret_cast<Packet2d>(vec_sld(reinterpret_cast<Packet4i>(b), reinterpret_cast<Packet4i>(b), 8)))"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (PacketBlock<Packet2d,2> t0,t1,t2,t3 ; t0 . packet [ 0 ] = kernel . packet [ 0 ] . v4f [ 0 ] ; t0 . packet [ 1 ] = kernel . packet [ 1 ] . v4f [ 0 ] ; t1 . packet [ 0 ] = kernel . packet [ 0 ] . v4f [ 1 ] ; t1 . packet [ 1 ] = kernel . packet [ 1 ] . v4f [ 1 ] ; t2 . packet [ 0 ] = kernel . packet [ 2 ] . v4f [ 0 ] ; t2 . packet [ 1 ] = kernel . packet [ 3 ] . v4f [ 0 ] ; t3 . packet [ 0 ] = kernel . packet [ 2 ] . v4f [ 1 ] ; t3 . packet [ 1 ] = kernel . packet [ 3 ] . v4f [ 1 ] ;)",
    "insertText": "ptranspose(t0)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptranspose(t1)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptranspose(t2)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptranspose(t3)"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] . v4f [ 0 ] = t0 . packet [ 0 ] ; kernel . packet [ 0 ] . v4f [ 1 ] = t2 . packet [ 0 ] ; kernel . packet [ 1 ] . v4f [ 0 ] = t0 . packet [ 1 ] ; kernel . packet [ 1 ] . v4f [ 1 ] = t2 . packet [ 1 ] ; kernel . packet [ 2 ] . v4f [ 0 ] = t1 . packet [ 0 ] ; kernel . packet [ 2 ] . v4f [ 1 ] = t3 . packet [ 0 ] ; kernel . packet [ 3 ] . v4f [ 0 ] = t1 . packet [ 1 ] ; kernel . packet [ 3 ] . v4f [ 1 ] = t3 . packet [ 1 ] ; } template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "pblend(const Selector<4>& ifPacket, const Packet4f& thenPacket, const Packet4f& elsePacket)"
  },
  {
    "label": "vec_cmpeq()",
    "kind": "Method",
    "detail": "Function (Packet2ul select_hi = { ifPacket . select [ 0 ],ifPacket . select [ 1 ] } ; Packet2ul select_lo = { ifPacket . select [ 2 ],ifPacket . select [ 3 ] } ; Packet2ul mask_hi =)",
    "insertText": "vec_cmpeq(select_hi, reinterpret_cast<Packet2ul>(p2l_ONE))"
  },
  {
    "label": "vec_cmpeq()",
    "kind": "Method",
    "detail": "Function (Packet2ul mask_lo =)",
    "insertText": "vec_cmpeq(select_lo, reinterpret_cast<Packet2ul>(p2l_ONE))"
  },
  {
    "label": "vec_sel()",
    "kind": "Method",
    "detail": "Function (Packet4f result ; result . v4f [ 0 ] =)",
    "insertText": "vec_sel(elsePacket.v4f[0], thenPacket.v4f[0], mask_hi)"
  },
  {
    "label": "vec_sel()",
    "kind": "Method",
    "detail": "Function (result . v4f [ 1 ] =)",
    "insertText": "vec_sel(elsePacket.v4f[1], thenPacket.v4f[1], mask_lo)"
  },
  {
    "label": "pcmp_le()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pcmp_le(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pcmp_le()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pcmp_le(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pcmp_lt(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pcmp_lt(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet4f res ; res . v4f [ 0 ] =)",
    "insertText": "pcmp_eq(a.v4f[0], b.v4f[0])"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (res . v4f [ 1 ] =)",
    "insertText": "pcmp_eq(a.v4f[1], b.v4f[1])"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (float EIGEN_ALIGN16 af [ 4 ] ; af [ 0 ] = from [ 0* stride ] ; af [ 1 ] = from [ 1* stride ] ; af [ 2 ] = from [ 2* stride ] ; af [ 3 ] = from [ 3* stride ] ; return pload<)",
    "insertText": "Packet4f(af)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float EIGEN_ALIGN16 af [ 4 ] ; pstore<)",
    "insertText": "float((float*)af, from)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "preverse(const Packet4f& a)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (sum = padd<)",
    "insertText": "Packet4f(a, b)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (sum = padd<)",
    "insertText": "Packet4f(sum, b)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f prod ; prod =)",
    "insertText": "pmul(a, vec_sld(a, a, 8))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet4f b,res ; b = pmin<)",
    "insertText": "Packet4f(a, vec_sld(a, a, 8))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (res = pmin<)",
    "insertText": "Packet4f(b, vec_sld(b, b, 4))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} # endif template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "float(const float* addr)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstoreu<)",
    "insertText": "float(float* to, const Packet4f& from)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (pstore<)",
    "insertText": "float(to, from)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4f plset<)",
    "insertText": "Packet4f(const float& a)"
  }
]hPtrType ; # endif # ifndef EIGEN_VECTORIZE_AVX template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "float(const float* addr)"
  },
  {
    "label": "_mm_prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_prefetch((SsePrefetchPtrType)(addr), _MM_HINT_T0)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "double(const double* addr)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "int(const int* addr)"
  },
  {
    "label": "_mm_cvtsi128_si32()",
    "kind": "Method",
    "detail": "Function (int x =)",
    "insertText": "_mm_cvtsi128_si32(a)"
  },
  {
    "label": "_mm_cvtss_f32()",
    "kind": "Method",
    "detail": "Function (float x =)",
    "insertText": "_mm_cvtss_f32(a)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "preverse(const Packet4f& a)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "preverse(const Packet2d& a)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4i)",
    "insertText": "preverse(const Packet4i& a)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet16b)",
    "insertText": "preverse(const Packet16b& a)"
  },
  {
    "label": "_mm_set_epi8()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORIZE_SSSE3 __m128i mask =)",
    "insertText": "_mm_set_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (# else Packet16b tmp =)",
    "insertText": "_mm_shuffle_epi32(a, _MM_SHUFFLE(0, 1, 2, 3))"
  },
  {
    "label": "_mm_shufflehi_epi16()",
    "kind": "Method",
    "detail": "Function (tmp =)",
    "insertText": "_mm_shufflehi_epi16(_mm_shufflelo_epi16(tmp, _MM_SHUFFLE(2, 3, 0, 1)), _MM_SHUFFLE(2, 3, 0, 1))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (# endif } template<> EIGEN_STRONG_INLINE Packet4f pfrexp<)",
    "insertText": "Packet4f(const Packet4f& a, Packet4f& exponent)"
  },
  {
    "label": "pfrexp_generic_get_biased_exponent()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pfrexp_generic_get_biased_exponent(const Packet2d& a)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (const Packet2d cst_exp_mask = pset1frombits<)",
    "insertText": "Packet2d(static_cast<uint64_t>(0x7ff0000000000000ull))"
  },
  {
    "label": "_mm_srli_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i a_expo =)",
    "insertText": "_mm_srli_epi64(_mm_castpd_si128(pand(a, cst_exp_mask)), 52)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pfrexp<)",
    "insertText": "Packet2d(const Packet2d& a, Packet2d& exponent)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4f pldexp<)",
    "insertText": "Packet4f(const Packet4f& a, const Packet4f& exponent)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pldexp<)",
    "insertText": "Packet2d(const Packet2d& a, const Packet2d& exponent)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (const Packet2d max_exponent = pset1<)",
    "insertText": "Packet2d(2099.0)"
  },
  {
    "label": "pmin()",
    "kind": "Method",
    "detail": "Function (const Packet2d e =)",
    "insertText": "pmin(pmax(exponent, pnegate(max_exponent)), max_exponent)"
  },
  {
    "label": "vec4i_swizzle1()",
    "kind": "Method",
    "detail": "Function (const Packet4i ei =)",
    "insertText": "vec4i_swizzle1(_mm_cvtpd_epi32(e), 0, 3, 1, 3)"
  },
  {
    "label": "_mm_set_epi32()",
    "kind": "Method",
    "detail": "Function (const Packet4i bias =)",
    "insertText": "_mm_set_epi32(0, 1023, 0, 1023)"
  },
  {
    "label": "parithmetic_shift_right()",
    "kind": "Method",
    "detail": "Function (Packet4i b =)",
    "insertText": "parithmetic_shift_right(ei)"
  },
  {
    "label": "_mm_castsi128_pd()",
    "kind": "Method",
    "detail": "Function (Packet2d c =)",
    "insertText": "_mm_castsi128_pd(_mm_slli_epi64(padd(b, bias), 52))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet2d out =)",
    "insertText": "pmul(pmul(pmul(a, c), c), c)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (b =)",
    "insertText": "psub(psub(psub(ei, b), b), b)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "pmul(out, c)"
  },
  {
    "label": "vec4f_swizzle1()",
    "kind": "Method",
    "detail": "Function (a0 =)",
    "insertText": "vec4f_swizzle1(a3, 0,0,0,0)"
  },
  {
    "label": "vec4f_swizzle1()",
    "kind": "Method",
    "detail": "Function (a1 =)",
    "insertText": "vec4f_swizzle1(a3, 1,1,1,1)"
  },
  {
    "label": "vec4f_swizzle1()",
    "kind": "Method",
    "detail": "Function (a2 =)",
    "insertText": "vec4f_swizzle1(a3, 2,2,2,2)"
  },
  {
    "label": "vec4f_swizzle1()",
    "kind": "Method",
    "detail": "Function (a3 =)",
    "insertText": "vec4f_swizzle1(a3, 3,3,3,3)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pbroadcast4<)",
    "insertText": "Packet2d(const double *a, Packet2d& a0, Packet2d& a1, Packet2d& a2, Packet2d& a3)"
  },
  {
    "label": "_mm_loaddup_pd()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORIZE_SSE3 a0 =)",
    "insertText": "_mm_loaddup_pd(a+0)"
  },
  {
    "label": "_mm_loaddup_pd()",
    "kind": "Method",
    "detail": "Function (a1 =)",
    "insertText": "_mm_loaddup_pd(a+1)"
  },
  {
    "label": "_mm_loaddup_pd()",
    "kind": "Method",
    "detail": "Function (a2 =)",
    "insertText": "_mm_loaddup_pd(a+2)"
  },
  {
    "label": "_mm_loaddup_pd()",
    "kind": "Method",
    "detail": "Function (a3 =)",
    "insertText": "_mm_loaddup_pd(a+3)"
  },
  {
    "label": "vec2d_swizzle1()",
    "kind": "Method",
    "detail": "Function (a0 =)",
    "insertText": "vec2d_swizzle1(a1, 0,0)"
  },
  {
    "label": "vec2d_swizzle1()",
    "kind": "Method",
    "detail": "Function (a1 =)",
    "insertText": "vec2d_swizzle1(a1, 1,1)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (a3 = pload<)",
    "insertText": "Packet2d(a+2)"
  },
  {
    "label": "vec2d_swizzle1()",
    "kind": "Method",
    "detail": "Function (a2 =)",
    "insertText": "vec2d_swizzle1(a3, 0,0)"
  },
  {
    "label": "vec2d_swizzle1()",
    "kind": "Method",
    "detail": "Function (a3 =)",
    "insertText": "vec2d_swizzle1(a3, 1,1)"
  },
  {
    "label": "punpackp()",
    "kind": "Method",
    "detail": "Function (# endif } # endif EIGEN_STRONG_INLINE void)",
    "insertText": "punpackp(Packet4f* vecs)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (vecs [ 1 ] =)",
    "insertText": "_mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0x55))"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (vecs [ 2 ] =)",
    "insertText": "_mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0xAA))"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (vecs [ 3 ] =)",
    "insertText": "_mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0xFF))"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (vecs [ 0 ] =)",
    "insertText": "_mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(vecs[0]), 0x00))"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (Packet4f tmp =)",
    "insertText": "_mm_add_ps(a, _mm_movehl_ps(a,a))"
  },
  {
    "label": "_mm_hadd_epi32()",
    "kind": "Method",
    "detail": "Function (Packet4i tmp0 =)",
    "insertText": "_mm_hadd_epi32(a,a)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (Packet4i tmp =)",
    "insertText": "_mm_add_epi32(a, _mm_unpackhi_epi64(a,a))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (Packet4i tmp =)",
    "insertText": "_mm_or_si128(a, _mm_unpackhi_epi64(a,a))"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (Packet4f tmp =)",
    "insertText": "_mm_mul_ps(a, _mm_movehl_ps(a,a))"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN16 int aux [ 4 ] ;)",
    "insertText": "pstore(aux, a)"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (Packet4i tmp =)",
    "insertText": "_mm_and_si128(a, _mm_unpackhi_epi64(a,a))"
  },
  {
    "label": "_mm_min_ps()",
    "kind": "Method",
    "detail": "Function (Packet4f tmp =)",
    "insertText": "_mm_min_ps(a, _mm_movehl_ps(a,a))"
  },
  {
    "label": "_mm_min_epi32()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORIZE_SSE4_1 Packet4i tmp =)",
    "insertText": "_mm_min_epi32(a, _mm_shuffle_epi32(a, _MM_SHUFFLE(0,0,3,2)))"
  },
  {
    "label": "_mm_max_ps()",
    "kind": "Method",
    "detail": "Function (Packet4f tmp =)",
    "insertText": "_mm_max_ps(a, _mm_movehl_ps(a,a))"
  },
  {
    "label": "_mm_max_epi32()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORIZE_SSE4_1 Packet4i tmp =)",
    "insertText": "_mm_max_epi32(a, _mm_shuffle_epi32(a, _MM_SHUFFLE(0,0,3,2)))"
  },
  {
    "label": "predux_any()",
    "kind": "Method",
    "detail": "Function (int aux0 = aux [ 0 ]> aux [ 1 ] ? aux [ 0 ] : aux [ 1 ] ; int aux2 = aux [ 2 ]> aux [ 3 ] ? aux [ 2 ] : aux [ 3 ] ; return aux0> aux2 ? aux0 : aux2 ; # endif } template<> EIGEN_STRONG_INLINE bool)",
    "insertText": "predux_any(const Packet4f& x)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet4f,4>& kernel)"
  },
  {
    "label": "_MM_TRANSPOSE4_PS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_MM_TRANSPOSE4_PS(kernel.packet[0], kernel.packet[1], kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet2d,2>& kernel)"
  },
  {
    "label": "_mm_unpackhi_pd()",
    "kind": "Method",
    "detail": "Function (__m128d tmp =)",
    "insertText": "_mm_unpackhi_pd(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "_mm_unpacklo_pd()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "_mm_unpacklo_pd(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] = tmp ; } EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet4i,4>& kernel)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i T0 =)",
    "insertText": "_mm_unpacklo_epi32(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i T1 =)",
    "insertText": "_mm_unpacklo_epi32(kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i T2 =)",
    "insertText": "_mm_unpackhi_epi32(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i T3 =)",
    "insertText": "_mm_unpackhi_epi32(kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "_mm_unpacklo_epi64(T0, T1)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "_mm_unpackhi_epi64(T0, T1)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] =)",
    "insertText": "_mm_unpacklo_epi64(T2, T3)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] =)",
    "insertText": "_mm_unpackhi_epi64(T2, T3)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet16b,4>& kernel)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i T0 =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i T1 =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i T2 =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i T3 =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "_mm_unpacklo_epi16(T0, T2)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "_mm_unpackhi_epi16(T0, T2)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] =)",
    "insertText": "_mm_unpacklo_epi16(T1, T3)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] =)",
    "insertText": "_mm_unpackhi_epi16(T1, T3)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "ptranspose(PacketBlock<Packet16b,16>& kernel)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t4 =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[4], kernel.packet[5])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t5 =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[4], kernel.packet[5])"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t6 =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[6], kernel.packet[7])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t7 =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[6], kernel.packet[7])"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t8 =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[8], kernel.packet[9])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t9 =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[8], kernel.packet[9])"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i ta =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[10], kernel.packet[11])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i tb =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[10], kernel.packet[11])"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i tc =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[12], kernel.packet[13])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i td =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[12], kernel.packet[13])"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i te =)",
    "insertText": "_mm_unpacklo_epi8(kernel.packet[14], kernel.packet[15])"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i tf =)",
    "insertText": "_mm_unpackhi_epi8(kernel.packet[14], kernel.packet[15])"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s0 =)",
    "insertText": "_mm_unpacklo_epi16(t0, t2)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s1 =)",
    "insertText": "_mm_unpackhi_epi16(t0, t2)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s2 =)",
    "insertText": "_mm_unpacklo_epi16(t1, t3)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s3 =)",
    "insertText": "_mm_unpackhi_epi16(t1, t3)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s4 =)",
    "insertText": "_mm_unpacklo_epi16(t4, t6)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s5 =)",
    "insertText": "_mm_unpackhi_epi16(t4, t6)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s6 =)",
    "insertText": "_mm_unpacklo_epi16(t5, t7)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s7 =)",
    "insertText": "_mm_unpackhi_epi16(t5, t7)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s8 =)",
    "insertText": "_mm_unpacklo_epi16(t8, ta)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i s9 =)",
    "insertText": "_mm_unpackhi_epi16(t8, ta)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i sa =)",
    "insertText": "_mm_unpacklo_epi16(t9, tb)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i sb =)",
    "insertText": "_mm_unpackhi_epi16(t9, tb)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i sc =)",
    "insertText": "_mm_unpacklo_epi16(tc, te)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i sd =)",
    "insertText": "_mm_unpackhi_epi16(tc, te)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i se =)",
    "insertText": "_mm_unpacklo_epi16(td, tf)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i sf =)",
    "insertText": "_mm_unpackhi_epi16(td, tf)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u0 =)",
    "insertText": "_mm_unpacklo_epi32(s0, s4)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u1 =)",
    "insertText": "_mm_unpackhi_epi32(s0, s4)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u2 =)",
    "insertText": "_mm_unpacklo_epi32(s1, s5)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u3 =)",
    "insertText": "_mm_unpackhi_epi32(s1, s5)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u4 =)",
    "insertText": "_mm_unpacklo_epi32(s2, s6)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u5 =)",
    "insertText": "_mm_unpackhi_epi32(s2, s6)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u6 =)",
    "insertText": "_mm_unpacklo_epi32(s3, s7)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u7 =)",
    "insertText": "_mm_unpackhi_epi32(s3, s7)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u8 =)",
    "insertText": "_mm_unpacklo_epi32(s8, sc)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i u9 =)",
    "insertText": "_mm_unpackhi_epi32(s8, sc)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i ua =)",
    "insertText": "_mm_unpacklo_epi32(s9, sd)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i ub =)",
    "insertText": "_mm_unpackhi_epi32(s9, sd)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i uc =)",
    "insertText": "_mm_unpacklo_epi32(sa, se)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i ud =)",
    "insertText": "_mm_unpackhi_epi32(sa, se)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i ue =)",
    "insertText": "_mm_unpacklo_epi32(sb, sf)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i uf =)",
    "insertText": "_mm_unpackhi_epi32(sb, sf)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "_mm_unpacklo_epi64(u0, u8)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "_mm_unpackhi_epi64(u0, u8)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] =)",
    "insertText": "_mm_unpacklo_epi64(u1, u9)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] =)",
    "insertText": "_mm_unpackhi_epi64(u1, u9)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 4 ] =)",
    "insertText": "_mm_unpacklo_epi64(u2, ua)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 5 ] =)",
    "insertText": "_mm_unpackhi_epi64(u2, ua)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 6 ] =)",
    "insertText": "_mm_unpacklo_epi64(u3, ub)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 7 ] =)",
    "insertText": "_mm_unpackhi_epi64(u3, ub)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 8 ] =)",
    "insertText": "_mm_unpacklo_epi64(u4, uc)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 9 ] =)",
    "insertText": "_mm_unpackhi_epi64(u4, uc)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 0 ] =)",
    "insertText": "_mm_unpacklo_epi64(u5, ud)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 1 ] =)",
    "insertText": "_mm_unpackhi_epi64(u5, ud)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 2 ] =)",
    "insertText": "_mm_unpacklo_epi64(u6, ue)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 3 ] =)",
    "insertText": "_mm_unpackhi_epi64(u6, ue)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 4 ] =)",
    "insertText": "_mm_unpacklo_epi64(u7, uf)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 5 ] =)",
    "insertText": "_mm_unpackhi_epi64(u7, uf)"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4i)",
    "insertText": "pblend(const Selector<4>& ifPacket, const Packet4i& thenPacket, const Packet4i& elsePacket)"
  },
  {
    "label": "_mm_setzero_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i zero =)",
    "insertText": "_mm_setzero_si128()"
  },
  {
    "label": "_mm_set_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i select =)",
    "insertText": "_mm_set_epi32(ifPacket.select[3], ifPacket.select[2], ifPacket.select[1], ifPacket.select[0])"
  },
  {
    "label": "_mm_cmpeq_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i false_mask =)",
    "insertText": "_mm_cmpeq_epi32(select, zero)"
  },
  {
    "label": "_mm_blendv_epi8()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORIZE_SSE4_1 return)",
    "insertText": "_mm_blendv_epi8(thenPacket, elsePacket, false_mask)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "_mm_or_si128(_mm_andnot_si128(false_mask, thenPacket), _mm_and_si128(false_mask, elsePacket))"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (# endif } template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "pblend(const Selector<4>& ifPacket, const Packet4f& thenPacket, const Packet4f& elsePacket)"
  },
  {
    "label": "_mm_setzero_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 zero =)",
    "insertText": "_mm_setzero_ps()"
  },
  {
    "label": "_mm_set_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 select =)",
    "insertText": "_mm_set_ps(ifPacket.select[3], ifPacket.select[2], ifPacket.select[1], ifPacket.select[0])"
  },
  {
    "label": "_mm_cmpeq_ps()",
    "kind": "Method",
    "detail": "Function (__m128 false_mask =)",
    "insertText": "_mm_cmpeq_ps(select, zero)"
  },
  {
    "label": "_mm_blendv_ps()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORIZE_SSE4_1 return)",
    "insertText": "_mm_blendv_ps(thenPacket, elsePacket, false_mask)"
  },
  {
    "label": "_mm_or_ps()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "_mm_or_ps(_mm_andnot_ps(false_mask, thenPacket), _mm_and_ps(false_mask, elsePacket))"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (# endif } template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pblend(const Selector<2>& ifPacket, const Packet2d& thenPacket, const Packet2d& elsePacket)"
  },
  {
    "label": "_mm_setzero_pd()",
    "kind": "Method",
    "detail": "Function (const __m128d zero =)",
    "insertText": "_mm_setzero_pd()"
  },
  {
    "label": "_mm_set_pd()",
    "kind": "Method",
    "detail": "Function (const __m128d select =)",
    "insertText": "_mm_set_pd(ifPacket.select[1], ifPacket.select[0])"
  },
  {
    "label": "_mm_cmpeq_pd()",
    "kind": "Method",
    "detail": "Function (__m128d false_mask =)",
    "insertText": "_mm_cmpeq_pd(select, zero)"
  },
  {
    "label": "_mm_blendv_pd()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORIZE_SSE4_1 return)",
    "insertText": "_mm_blendv_pd(thenPacket, elsePacket, false_mask)"
  },
  {
    "label": "_mm_or_pd()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "_mm_or_pd(_mm_andnot_pd(false_mask, thenPacket), _mm_and_pd(false_mask, elsePacket))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (# endif } # ifdef EIGEN_VECTORIZE_FMA template<> EIGEN_STRONG_INLINE float)",
    "insertText": "pmadd(const float& a, const float& b, const float& c)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE double)",
    "insertText": "pmadd(const double& a, const double& b, const double& c)"
  },
  {
    "label": "Packet4h()",
    "kind": "Method",
    "detail": "Function (} # endif # if 0 typedef struct { __m64 x ; } Packet4h ; template<> struct is_arithmetic<Packet4h> { enum { value = true } ; } ; template<> struct packet_traits<Eigen::half> : default_packet_traits { typedef Packet4h type ; typedef Packet4h half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 4,HasHalfPacket = 0,HasAdd = 1,HasSub = 1,HasMul = 1,HasDiv = 1,HasNegate = 0,HasAbs = 0,HasAbs2 = 0,HasMin = 0,HasMax = 0,HasConj = 0,HasSetLinear = 0,HasSqrt = 0,HasRsqrt = 0,HasExp = 0,HasLog = 0,HasBlend = 0 } ; } ; template<> struct unpacket_traits<Packet4h> { typedef Eigen::half type ; enum { size = 4,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; typedef Packet4h half ; } ; template<> EIGEN_STRONG_INLINE Packet4h pset1<)",
    "insertText": "Packet4h(const Eigen::half& from)"
  },
  {
    "label": "_mm_set1_pi16()",
    "kind": "Method",
    "detail": "Function (Packet4h result ; result . x =)",
    "insertText": "_mm_set1_pi16(from.x)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4h)",
    "insertText": "pconj(const Packet4h& a)"
  },
  {
    "label": "_mm_cvtm64_si64()",
    "kind": "Method",
    "detail": "Function (__int64_t a64 =)",
    "insertText": "_mm_cvtm64_si64(a.x)"
  },
  {
    "label": "_mm_cvtm64_si64()",
    "kind": "Method",
    "detail": "Function (__int64_t b64 =)",
    "insertText": "_mm_cvtm64_si64(b.x)"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (Eigen::half h [ 4 ] ; Eigen::half ha =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(a64))"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (Eigen::half hb =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(b64))"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (h [ 0 ] = ha + hb ; ha =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(a64 >> 16))"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (hb =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(b64 >> 16))"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (h [ 1 ] = ha + hb ; ha =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(a64 >> 32))"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (hb =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(b64 >> 32))"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (h [ 2 ] = ha + hb ; ha =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(a64 >> 48))"
  },
  {
    "label": "raw_uint16_to_half()",
    "kind": "Method",
    "detail": "Function (hb =)",
    "insertText": "raw_uint16_to_half(static_cast<unsigned short>(b64 >> 48))"
  },
  {
    "label": "_mm_set_pi16()",
    "kind": "Method",
    "detail": "Function (h [ 3 ] = ha + hb ; Packet4h result ; result . x =)",
    "insertText": "_mm_set_pi16(h[3].x, h[2].x, h[1].x, h[0].x)"
  },
  {
    "label": "_mm_cvtsi64_m64()",
    "kind": "Method",
    "detail": "Function (Packet4h result ; result . x =)",
    "insertText": "_mm_cvtsi64_m64(*reinterpret_cast<const __int64_t*>(from))"
  },
  {
    "label": "_mm_cvtm64_si64()",
    "kind": "Method",
    "detail": "Function (__int64_t r =)",
    "insertText": "_mm_cvtm64_si64(from.x)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstoreu<)",
    "insertText": "half(Eigen::half* to, const Packet4h& from)"
  },
  {
    "label": "Packet4h()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4h ploadquad<)",
    "insertText": "Packet4h(const Eigen::half* from)"
  },
  {
    "label": "Packet4h()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4h pgather<Eigen::half,)",
    "insertText": "Packet4h(const Eigen::half* from, Index stride)"
  },
  {
    "label": "_mm_set_pi16()",
    "kind": "Method",
    "detail": "Function (Packet4h result ; result . x =)",
    "insertText": "_mm_set_pi16(from[3*stride].x, from[2*stride].x, from[1*stride].x, from[0*stride].x)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (to [ stride* 0 ] . x = static_cast<unsigned)",
    "insertText": "short(a)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (to [ stride* 1 ] . x = static_cast<unsigned)",
    "insertText": "short(a >> 16)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (to [ stride* 2 ] . x = static_cast<unsigned)",
    "insertText": "short(a >> 32)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (to [ stride* 3 ] . x = static_cast<unsigned)",
    "insertText": "short(a >> 48)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4h,4>& kernel)"
  },
  {
    "label": "_mm_unpacklo_pi16()",
    "kind": "Method",
    "detail": "Function (__m64 T0 =)",
    "insertText": "_mm_unpacklo_pi16(kernel.packet[0].x, kernel.packet[1].x)"
  },
  {
    "label": "_mm_unpacklo_pi16()",
    "kind": "Method",
    "detail": "Function (__m64 T1 =)",
    "insertText": "_mm_unpacklo_pi16(kernel.packet[2].x, kernel.packet[3].x)"
  },
  {
    "label": "_mm_unpackhi_pi16()",
    "kind": "Method",
    "detail": "Function (__m64 T2 =)",
    "insertText": "_mm_unpackhi_pi16(kernel.packet[0].x, kernel.packet[1].x)"
  },
  {
    "label": "_mm_unpackhi_pi16()",
    "kind": "Method",
    "detail": "Function (__m64 T3 =)",
    "insertText": "_mm_unpackhi_pi16(kernel.packet[2].x, kernel.packet[3].x)"
  },
  {
    "label": "_mm_unpacklo_pi32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] . x =)",
    "insertText": "_mm_unpacklo_pi32(T0, T1)"
  },
  {
    "label": "_mm_unpackhi_pi32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] . x =)",
    "insertText": "_mm_unpackhi_pi32(T0, T1)"
  },
  {
    "label": "_mm_unpacklo_pi32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] . x =)",
    "insertText": "_mm_unpacklo_pi32(T2, T3)"
  },
  {
    "label": "_mm_unpackhi_pi32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] . x =)",
    "insertText": "_mm_unpackhi_pi32(T2, T3)"
  },
  {
    "label": "_mm_castpd_ps()",
    "kind": "Method",
    "detail": "Function (} # endif } } # if EIGEN_COMP_PGI&& EIGEN_COMP_PGI<1 9 0 0 __m128)",
    "insertText": "_mm_castpd_ps(__m128d x)"
  },
  {
    "label": "_mm_castpd_si128()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "_mm_castpd_si128(__m128d x)"
  },
  {
    "label": "_mm_castps_pd()",
    "kind": "Method",
    "detail": "Function (} __m128d)",
    "insertText": "_mm_castps_pd(__m128 x)"
  },
  {
    "label": "_mm_castps_si128()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "_mm_castps_si128(__m128 x)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (} __m128)",
    "insertText": "_mm_castsi128_ps(__m128i x)"
  },
  {
    "label": "_mm_castsi128_pd()",
    "kind": "Method",
    "detail": "Function (} __m128d)",
    "insertText": "_mm_castsi128_pd(__m128i x)"
  }
]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      : "Method",
    "detail": "Function (int16x4_t sum =)",
    "insertText": "vadd_s16(vget_low_s16(a), vget_high_s16(a))"
  },
  {
    "label": "vpadd_s16()",
    "kind": "Method",
    "detail": "Function (sum =)",
    "insertText": "vpadd_s16(sum, sum)"
  },
  {
    "label": "vpadd_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x4_t sum =)",
    "insertText": "vpadd_u16(a,a)"
  },
  {
    "label": "vadd_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t sum =)",
    "insertText": "vadd_u16(vget_low_u16(a), vget_high_u16(a))"
  },
  {
    "label": "vpadd_u16()",
    "kind": "Method",
    "detail": "Function (sum =)",
    "insertText": "vpadd_u16(sum, sum)"
  },
  {
    "label": "vadd_s32()",
    "kind": "Method",
    "detail": "Function (const int32x2_t sum =)",
    "insertText": "vadd_s32(vget_low_s32(a), vget_high_s32(a))"
  },
  {
    "label": "vadd_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x2_t sum =)",
    "insertText": "vadd_u32(vget_low_u32(a), vget_high_u32(a))"
  },
  {
    "label": "predux_half_dowto4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4c)",
    "insertText": "predux_half_dowto4(const Packet8c& a)"
  },
  {
    "label": "predux_half_dowto4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8c)",
    "insertText": "predux_half_dowto4(const Packet16c& a)"
  },
  {
    "label": "predux_half_dowto4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4uc)",
    "insertText": "predux_half_dowto4(const Packet8uc& a)"
  },
  {
    "label": "predux_half_dowto4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8uc)",
    "insertText": "predux_half_dowto4(const Packet16uc& a)"
  },
  {
    "label": "predux_half_dowto4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4s)",
    "insertText": "predux_half_dowto4(const Packet8s& a)"
  },
  {
    "label": "predux_half_dowto4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4us)",
    "insertText": "predux_half_dowto4(const Packet8us& a)"
  },
  {
    "label": "vmul_s8()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_s8(prod, vrev16_s8(prod))"
  },
  {
    "label": "vmul_s8()",
    "kind": "Method",
    "detail": "Function (int8x8_t prod =)",
    "insertText": "vmul_s8(a, vrev16_s8(a))"
  },
  {
    "label": "vmul_s8()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_s8(prod, vrev32_s8(prod))"
  },
  {
    "label": "vmul_u8()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_u8(prod, vrev16_u8(prod))"
  },
  {
    "label": "vmul_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t prod =)",
    "insertText": "vmul_u8(a, vrev16_u8(a))"
  },
  {
    "label": "vmul_u8()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_u8(prod, vrev32_u8(prod))"
  },
  {
    "label": "vmul_s16()",
    "kind": "Method",
    "detail": "Function (const int16x4_t prod =)",
    "insertText": "vmul_s16(a, vrev32_s16(a))"
  },
  {
    "label": "vmul_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t prod ; prod =)",
    "insertText": "vmul_s16(vget_low_s16(a), vget_high_s16(a))"
  },
  {
    "label": "vmul_s16()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_s16(prod, vrev32_s16(prod))"
  },
  {
    "label": "vmul_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x4_t prod =)",
    "insertText": "vmul_u16(a, vrev32_u16(a))"
  },
  {
    "label": "vmul_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t prod ; prod =)",
    "insertText": "vmul_u16(vget_low_u16(a), vget_high_u16(a))"
  },
  {
    "label": "vmul_u16()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_u16(prod, vrev32_u16(prod))"
  },
  {
    "label": "vmin_f32()",
    "kind": "Method",
    "detail": "Function (const float32x2_t min =)",
    "insertText": "vmin_f32(vget_low_f32(a), vget_high_f32(a))"
  },
  {
    "label": "vpmin_s8()",
    "kind": "Method",
    "detail": "Function (int8x8_t min =)",
    "insertText": "vpmin_s8(a_dup, a_dup)"
  },
  {
    "label": "vpmin_s8()",
    "kind": "Method",
    "detail": "Function (min =)",
    "insertText": "vpmin_s8(min, min)"
  },
  {
    "label": "vpmin_s8()",
    "kind": "Method",
    "detail": "Function (int8x8_t min =)",
    "insertText": "vpmin_s8(a,a)"
  },
  {
    "label": "vmin_s8()",
    "kind": "Method",
    "detail": "Function (int8x8_t min =)",
    "insertText": "vmin_s8(vget_low_s8(a), vget_high_s8(a))"
  },
  {
    "label": "vpmin_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t min =)",
    "insertText": "vpmin_u8(a_dup, a_dup)"
  },
  {
    "label": "vpmin_u8()",
    "kind": "Method",
    "detail": "Function (min =)",
    "insertText": "vpmin_u8(min, min)"
  },
  {
    "label": "vpmin_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t min =)",
    "insertText": "vpmin_u8(a,a)"
  },
  {
    "label": "vmin_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t min =)",
    "insertText": "vmin_u8(vget_low_u8(a), vget_high_u8(a))"
  },
  {
    "label": "vpmin_s16()",
    "kind": "Method",
    "detail": "Function (const int16x4_t min =)",
    "insertText": "vpmin_s16(a,a)"
  },
  {
    "label": "vmin_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t min =)",
    "insertText": "vmin_s16(vget_low_s16(a), vget_high_s16(a))"
  },
  {
    "label": "vpmin_s16()",
    "kind": "Method",
    "detail": "Function (min =)",
    "insertText": "vpmin_s16(min, min)"
  },
  {
    "label": "vpmin_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x4_t min =)",
    "insertText": "vpmin_u16(a,a)"
  },
  {
    "label": "vmin_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t min =)",
    "insertText": "vmin_u16(vget_low_u16(a), vget_high_u16(a))"
  },
  {
    "label": "vpmin_u16()",
    "kind": "Method",
    "detail": "Function (min =)",
    "insertText": "vpmin_u16(min, min)"
  },
  {
    "label": "vmin_s32()",
    "kind": "Method",
    "detail": "Function (const int32x2_t min =)",
    "insertText": "vmin_s32(vget_low_s32(a), vget_high_s32(a))"
  },
  {
    "label": "vmin_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x2_t min =)",
    "insertText": "vmin_u32(vget_low_u32(a), vget_high_u32(a))"
  },
  {
    "label": "vmax_f32()",
    "kind": "Method",
    "detail": "Function (const float32x2_t max =)",
    "insertText": "vmax_f32(vget_low_f32(a), vget_high_f32(a))"
  },
  {
    "label": "vpmax_s8()",
    "kind": "Method",
    "detail": "Function (int8x8_t max =)",
    "insertText": "vpmax_s8(a_dup, a_dup)"
  },
  {
    "label": "vpmax_s8()",
    "kind": "Method",
    "detail": "Function (max =)",
    "insertText": "vpmax_s8(max, max)"
  },
  {
    "label": "vpmax_s8()",
    "kind": "Method",
    "detail": "Function (int8x8_t max =)",
    "insertText": "vpmax_s8(a,a)"
  },
  {
    "label": "vmax_s8()",
    "kind": "Method",
    "detail": "Function (int8x8_t max =)",
    "insertText": "vmax_s8(vget_low_s8(a), vget_high_s8(a))"
  },
  {
    "label": "vpmax_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t max =)",
    "insertText": "vpmax_u8(a_dup, a_dup)"
  },
  {
    "label": "vpmax_u8()",
    "kind": "Method",
    "detail": "Function (max =)",
    "insertText": "vpmax_u8(max, max)"
  },
  {
    "label": "vpmax_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t max =)",
    "insertText": "vpmax_u8(a,a)"
  },
  {
    "label": "vmax_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t max =)",
    "insertText": "vmax_u8(vget_low_u8(a), vget_high_u8(a))"
  },
  {
    "label": "vpmax_s16()",
    "kind": "Method",
    "detail": "Function (const int16x4_t max =)",
    "insertText": "vpmax_s16(a,a)"
  },
  {
    "label": "vmax_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t max =)",
    "insertText": "vmax_s16(vget_low_s16(a), vget_high_s16(a))"
  },
  {
    "label": "vpmax_s16()",
    "kind": "Method",
    "detail": "Function (max =)",
    "insertText": "vpmax_s16(max, max)"
  },
  {
    "label": "vpmax_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x4_t max =)",
    "insertText": "vpmax_u16(a,a)"
  },
  {
    "label": "vmax_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t max =)",
    "insertText": "vmax_u16(vget_low_u16(a), vget_high_u16(a))"
  },
  {
    "label": "vpmax_u16()",
    "kind": "Method",
    "detail": "Function (max =)",
    "insertText": "vpmax_u16(max, max)"
  },
  {
    "label": "vmax_s32()",
    "kind": "Method",
    "detail": "Function (const int32x2_t max =)",
    "insertText": "vmax_s32(vget_low_s32(a), vget_high_s32(a))"
  },
  {
    "label": "vmax_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x2_t max =)",
    "insertText": "vmax_u32(vget_low_u32(a), vget_high_u32(a))"
  },
  {
    "label": "predux_any()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE bool)",
    "insertText": "predux_any(const Packet4f& x)"
  },
  {
    "label": "vorr_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t tmp =)",
    "insertText": "vorr_u32(vget_low_u32( vreinterpretq_u32_f32(x)), vget_high_u32(vreinterpretq_u32_f32(x)))"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (} namespace detail { template<Packet> void)",
    "insertText": "zip_in_place(Packet& p1, Packet& p2)"
  },
  {
    "label": "Packet2f()",
    "kind": "Method",
    "detail": "Function (template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet2f(Packet2f& p1, Packet2f& p2)"
  },
  {
    "label": "vzip_f32()",
    "kind": "Method",
    "detail": "Function (const float32x2x2_t tmp =)",
    "insertText": "vzip_f32(p1, p2)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet4f(Packet4f& p1, Packet4f& p2)"
  },
  {
    "label": "vzipq_f32()",
    "kind": "Method",
    "detail": "Function (const float32x4x2_t tmp =)",
    "insertText": "vzipq_f32(p1, p2)"
  },
  {
    "label": "Packet8c()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet8c(Packet8c& p1, Packet8c& p2)"
  },
  {
    "label": "vzip_s8()",
    "kind": "Method",
    "detail": "Function (const int8x8x2_t tmp =)",
    "insertText": "vzip_s8(p1, p2)"
  },
  {
    "label": "Packet16c()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet16c(Packet16c& p1, Packet16c& p2)"
  },
  {
    "label": "vzipq_s8()",
    "kind": "Method",
    "detail": "Function (const int8x16x2_t tmp =)",
    "insertText": "vzipq_s8(p1, p2)"
  },
  {
    "label": "Packet8uc()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet8uc(Packet8uc& p1, Packet8uc& p2)"
  },
  {
    "label": "vzip_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x8x2_t tmp =)",
    "insertText": "vzip_u8(p1, p2)"
  },
  {
    "label": "Packet16uc()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet16uc(Packet16uc& p1, Packet16uc& p2)"
  },
  {
    "label": "vzipq_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16x2_t tmp =)",
    "insertText": "vzipq_u8(p1, p2)"
  },
  {
    "label": "Packet2i()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet2i(Packet2i& p1, Packet2i& p2)"
  },
  {
    "label": "vzip_s32()",
    "kind": "Method",
    "detail": "Function (const int32x2x2_t tmp =)",
    "insertText": "vzip_s32(p1, p2)"
  },
  {
    "label": "Packet4i()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet4i(Packet4i& p1, Packet4i& p2)"
  },
  {
    "label": "vzipq_s32()",
    "kind": "Method",
    "detail": "Function (const int32x4x2_t tmp =)",
    "insertText": "vzipq_s32(p1, p2)"
  },
  {
    "label": "Packet2ui()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet2ui(Packet2ui& p1, Packet2ui& p2)"
  },
  {
    "label": "vzip_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x2x2_t tmp =)",
    "insertText": "vzip_u32(p1, p2)"
  },
  {
    "label": "Packet4ui()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet4ui(Packet4ui& p1, Packet4ui& p2)"
  },
  {
    "label": "vzipq_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x4x2_t tmp =)",
    "insertText": "vzipq_u32(p1, p2)"
  },
  {
    "label": "Packet4s()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet4s(Packet4s& p1, Packet4s& p2)"
  },
  {
    "label": "vzip_s16()",
    "kind": "Method",
    "detail": "Function (const int16x4x2_t tmp =)",
    "insertText": "vzip_s16(p1, p2)"
  },
  {
    "label": "Packet8s()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet8s(Packet8s& p1, Packet8s& p2)"
  },
  {
    "label": "vzipq_s16()",
    "kind": "Method",
    "detail": "Function (const int16x8x2_t tmp =)",
    "insertText": "vzipq_s16(p1, p2)"
  },
  {
    "label": "Packet4us()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet4us(Packet4us& p1, Packet4us& p2)"
  },
  {
    "label": "vzip_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x4x2_t tmp =)",
    "insertText": "vzip_u16(p1, p2)"
  },
  {
    "label": "Packet8us()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet8us(Packet8us& p1, Packet8us& p2)"
  },
  {
    "label": "vzipq_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x8x2_t tmp =)",
    "insertText": "vzipq_u16(p1, p2)"
  },
  {
    "label": "ptranspose_impl()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } template<Packet> EIGEN_ALWAYS_INLINE void)",
    "insertText": "ptranspose_impl(PacketBlock<Packet, 2>& kernel)"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "ptranspose_impl()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_ALWAYS_INLINE void)",
    "insertText": "ptranspose_impl(PacketBlock<Packet, 4>& kernel)"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[0], kernel.packet[2])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[1], kernel.packet[3])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "ptranspose_impl()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_ALWAYS_INLINE void)",
    "insertText": "ptranspose_impl(PacketBlock<Packet, 8>& kernel)"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[0], kernel.packet[4])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[1], kernel.packet[5])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[2], kernel.packet[6])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[3], kernel.packet[7])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[4], kernel.packet[6])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[5], kernel.packet[7])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[4], kernel.packet[5])"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zip_in_place(kernel.packet[6], kernel.packet[7])"
  },
  {
    "label": "ptranspose_impl()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_ALWAYS_INLINE void)",
    "insertText": "ptranspose_impl(PacketBlock<Packet, 16>& kernel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i=0; i<4; ++i)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "m(1 << i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int j=0; j<m; ++j)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "n(1 << (3-i))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int k=0; k<n; ++k)"
  },
  {
    "label": "zip_in_place()",
    "kind": "Method",
    "detail": "Function (const int idx = 2* j* n + k ;)",
    "insertText": "zip_in_place(kernel.packet[idx], kernel.packet[idx + n])"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} } } } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet2f, 2>& kernel)"
  },
  {
    "label": "ptranspose_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptranspose_impl(kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4f, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4c, 4>& kernel)"
  },
  {
    "label": "vreinterpret_s8_s32()",
    "kind": "Method",
    "detail": "Function (const int8x8_t a =)",
    "insertText": "vreinterpret_s8_s32(vset_lane_s32(kernel.packet[2], vdup_n_s32(kernel.packet[0]), 1))"
  },
  {
    "label": "vreinterpret_s8_s32()",
    "kind": "Method",
    "detail": "Function (const int8x8_t b =)",
    "insertText": "vreinterpret_s8_s32(vset_lane_s32(kernel.packet[3], vdup_n_s32(kernel.packet[1]), 1))"
  },
  {
    "label": "vzip_s8()",
    "kind": "Method",
    "detail": "Function (const int8x8x2_t zip8 =)",
    "insertText": "vzip_s8(a,b)"
  },
  {
    "label": "vzip_s16()",
    "kind": "Method",
    "detail": "Function (const int16x4x2_t zip16 =)",
    "insertText": "vzip_s16(vreinterpret_s16_s8(zip8.val[0]), vreinterpret_s16_s8(zip8.val[1]))"
  },
  {
    "label": "vget_lane_s32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "vget_lane_s32(vreinterpret_s32_s16(zip16.val[0]), 0)"
  },
  {
    "label": "vget_lane_s32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vget_lane_s32(vreinterpret_s32_s16(zip16.val[0]), 1)"
  },
  {
    "label": "vget_lane_s32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] =)",
    "insertText": "vget_lane_s32(vreinterpret_s32_s16(zip16.val[1]), 0)"
  },
  {
    "label": "vget_lane_s32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] =)",
    "insertText": "vget_lane_s32(vreinterpret_s32_s16(zip16.val[1]), 1)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8c, 8>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8c, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet16c, 16>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet16c, 8>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet16c, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4uc, 4>& kernel)"
  },
  {
    "label": "vreinterpret_u8_u32()",
    "kind": "Method",
    "detail": "Function (const uint8x8_t a =)",
    "insertText": "vreinterpret_u8_u32(vset_lane_u32(kernel.packet[2], vdup_n_u32(kernel.packet[0]), 1))"
  },
  {
    "label": "vreinterpret_u8_u32()",
    "kind": "Method",
    "detail": "Function (const uint8x8_t b =)",
    "insertText": "vreinterpret_u8_u32(vset_lane_u32(kernel.packet[3], vdup_n_u32(kernel.packet[1]), 1))"
  },
  {
    "label": "vzip_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x8x2_t zip8 =)",
    "insertText": "vzip_u8(a,b)"
  },
  {
    "label": "vzip_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x4x2_t zip16 =)",
    "insertText": "vzip_u16(vreinterpret_u16_u8(zip8.val[0]), vreinterpret_u16_u8(zip8.val[1]))"
  },
  {
    "label": "vget_lane_u32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "vget_lane_u32(vreinterpret_u32_u16(zip16.val[0]), 0)"
  },
  {
    "label": "vget_lane_u32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vget_lane_u32(vreinterpret_u32_u16(zip16.val[0]), 1)"
  },
  {
    "label": "vget_lane_u32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] =)",
    "insertText": "vget_lane_u32(vreinterpret_u32_u16(zip16.val[1]), 0)"
  },
  {
    "label": "vget_lane_u32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] =)",
    "insertText": "vget_lane_u32(vreinterpret_u32_u16(zip16.val[1]), 1)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8uc, 8>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8uc, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet16uc, 16>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet16uc, 8>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet16uc, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4s, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8s, 8>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8s, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4us, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8us, 8>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8us, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet2i, 2>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4i, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet2ui, 2>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4ui, 4>& kernel)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet2l, 2>& kernel)"
  },
  {
    "label": "vzip1q_s64()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_ARCH_ARM64 const int64x2_t tmp1 =)",
    "insertText": "vzip1q_s64(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "vzip2q_s64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vzip2q_s64(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "vget_low_s64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] = tmp1 ; # else const int64x1_t tmp [ 2 ] [ 2 ] = { {)",
    "insertText": "vget_low_s64(kernel.packet[0]), vget_high_s64(kernel.packet[0])"
  },
  {
    "label": "vget_low_s64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vget_low_s64(kernel.packet[1]), vget_high_s64(kernel.packet[1])"
  },
  {
    "label": "vcombine_s64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "vcombine_s64(tmp[0][0], tmp[1][0])"
  },
  {
    "label": "vcombine_s64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vcombine_s64(tmp[0][1], tmp[1][1])"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (# endif } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet2ul, 2>& kernel)"
  },
  {
    "label": "vzip1q_u64()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_ARCH_ARM64 const uint64x2_t tmp1 =)",
    "insertText": "vzip1q_u64(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "vzip2q_u64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vzip2q_u64(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "vget_low_u64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] = tmp1 ; # else const uint64x1_t tmp [ 2 ] [ 2 ] = { {)",
    "insertText": "vget_low_u64(kernel.packet[0]), vget_high_u64(kernel.packet[0])"
  },
  {
    "label": "vget_low_u64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vget_low_u64(kernel.packet[1]), vget_high_u64(kernel.packet[1])"
  },
  {
    "label": "vcombine_u64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "vcombine_u64(tmp[0][0], tmp[1][0])"
  },
  {
    "label": "vcombine_u64()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vcombine_u64(tmp[0][1], tmp[1][1])"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (# endif } template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet2f)",
    "insertText": "pselect(const Packet2f& mask, const Packet2f& a, const Packet2f& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "pselect(const Packet4f& mask, const Packet4f& a, const Packet4f& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8c)",
    "insertText": "pselect(const Packet8c& mask, const Packet8c& a, const Packet8c& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet16c)",
    "insertText": "pselect(const Packet16c& mask, const Packet16c& a, const Packet16c& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8uc)",
    "insertText": "pselect(const Packet8uc& mask, const Packet8uc& a, const Packet8uc& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet16uc)",
    "insertText": "pselect(const Packet16uc& mask, const Packet16uc& a, const Packet16uc& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4s)",
    "insertText": "pselect(const Packet4s& mask, const Packet4s& a, const Packet4s& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8s)",
    "insertText": "pselect(const Packet8s& mask, const Packet8s& a, const Packet8s& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4us)",
    "insertText": "pselect(const Packet4us& mask, const Packet4us& a, const Packet4us& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8us)",
    "insertText": "pselect(const Packet8us& mask, const Packet8us& a, const Packet8us& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet2i)",
    "insertText": "pselect(const Packet2i& mask, const Packet2i& a, const Packet2i& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4i)",
    "insertText": "pselect(const Packet4i& mask, const Packet4i& a, const Packet4i& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet2ui)",
    "insertText": "pselect(const Packet2ui& mask, const Packet2ui& a, const Packet2ui& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4ui)",
    "insertText": "pselect(const Packet4ui& mask, const Packet4ui& a, const Packet4ui& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet2l)",
    "insertText": "pselect(const Packet2l& mask, const Packet2l& a, const Packet2l& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet2ul)",
    "insertText": "pselect(const Packet2ul& mask, const Packet2ul& a, const Packet2ul& b)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} # else template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "print(const Packet4f& a)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (const Packet4f limit = pset1<)",
    "insertText": "Packet4f(static_cast<float>(1<<23))"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (const Packet4f abs_a =)",
    "insertText": "pabs(a)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (Packet4f r =)",
    "insertText": "padd(abs_a, limit)"
  },
  {
    "label": "EIGEN_OPTIMIZATION_BARRIER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_OPTIMIZATION_BARRIER(r)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "psub(r, limit)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "pselect(pcmp_lt(abs_a, limit), pselect(pcmp_lt(a, pzero(a)), pnegate(r), r), a)"
  },
  {
    "label": "Packet2f()",
    "kind": "Method",
    "detail": "Function (const Packet2f limit = pset1<)",
    "insertText": "Packet2f(static_cast<float>(1<<23))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (const Packet4f cst_1 = pset1<)",
    "insertText": "Packet4f(1.0f)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet4f tmp = print<)",
    "insertText": "Packet4f(a)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (Packet4f mask =)",
    "insertText": "pcmp_lt(a, tmp)"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (mask =)",
    "insertText": "pand(mask, cst_1)"
  },
  {
    "label": "Packet2f()",
    "kind": "Method",
    "detail": "Function (const Packet2f cst_1 = pset1<)",
    "insertText": "Packet2f(1.0f)"
  },
  {
    "label": "Packet2f()",
    "kind": "Method",
    "detail": "Function (Packet2f tmp = print<)",
    "insertText": "Packet2f(a)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (Packet4f mask =)",
    "insertText": "pcmp_lt(tmp, a)"
  },
  {
    "label": "Packet2f()",
    "kind": "Method",
    "detail": "Function (const Packet2f cst_1 = pset1<)",
    "insertText": "Packet2f(1.0)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} # endif template<> EIGEN_STRONG_INLINE Packet4uc)",
    "insertText": "psqrt(const Packet4uc& a)"
  },
  {
    "label": "vdup_n_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t res =)",
    "insertText": "vdup_n_u8(0)"
  },
  {
    "label": "vdup_n_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t add =)",
    "insertText": "vdup_n_u8(0x8)"
  },
  {
    "label": "vorr_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x8_t temp =)",
    "insertText": "vorr_u8(res, add)"
  },
  {
    "label": "vbsl_u8()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vbsl_u8(vcge_u8(x, vmul_u8(temp, temp)), temp, res)"
  },
  {
    "label": "vshr_n_u8()",
    "kind": "Method",
    "detail": "Function (add =)",
    "insertText": "vshr_n_u8(add, 1)"
  },
  {
    "label": "vget_lane_u32()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "vget_lane_u32(vreinterpret_u32_u8(res), 0)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8uc)",
    "insertText": "psqrt(const Packet8uc& a)"
  },
  {
    "label": "vbsl_u8()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vbsl_u8(vcge_u8(a, vmul_u8(temp, temp)), temp, res)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} return res ; } template<> EIGEN_STRONG_INLINE Packet16uc)",
    "insertText": "psqrt(const Packet16uc& a)"
  },
  {
    "label": "vdupq_n_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t res =)",
    "insertText": "vdupq_n_u8(0)"
  },
  {
    "label": "vdupq_n_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t add =)",
    "insertText": "vdupq_n_u8(0x8)"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t temp =)",
    "insertText": "vorrq_u8(res, add)"
  },
  {
    "label": "vbslq_u8()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vbslq_u8(vcgeq_u8(a, vmulq_u8(temp, temp)), temp, res)"
  },
  {
    "label": "vshrq_n_u8()",
    "kind": "Method",
    "detail": "Function (add =)",
    "insertText": "vshrq_n_u8(add, 1)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} return res ; } template<> EIGEN_STRONG_INLINE Packet4us)",
    "insertText": "psqrt(const Packet4us& a)"
  },
  {
    "label": "vdup_n_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t res =)",
    "insertText": "vdup_n_u16(0)"
  },
  {
    "label": "vdup_n_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t add =)",
    "insertText": "vdup_n_u16(0x80)"
  },
  {
    "label": "vorr_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x4_t temp =)",
    "insertText": "vorr_u16(res, add)"
  },
  {
    "label": "vbsl_u16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vbsl_u16(vcge_u16(a, vmul_u16(temp, temp)), temp, res)"
  },
  {
    "label": "vshr_n_u16()",
    "kind": "Method",
    "detail": "Function (add =)",
    "insertText": "vshr_n_u16(add, 1)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} return res ; } template<> EIGEN_STRONG_INLINE Packet8us)",
    "insertText": "psqrt(const Packet8us& a)"
  },
  {
    "label": "vdupq_n_u16()",
    "kind": "Method",
    "detail": "Function (uint16x8_t res =)",
    "insertText": "vdupq_n_u16(0)"
  },
  {
    "label": "vdupq_n_u16()",
    "kind": "Method",
    "detail": "Function (uint16x8_t add =)",
    "insertText": "vdupq_n_u16(0x80)"
  },
  {
    "label": "vorrq_u16()",
    "kind": "Method",
    "detail": "Function (const uint16x8_t temp =)",
    "insertText": "vorrq_u16(res, add)"
  },
  {
    "label": "vbslq_u16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vbslq_u16(vcgeq_u16(a, vmulq_u16(temp, temp)), temp, res)"
  },
  {
    "label": "vshrq_n_u16()",
    "kind": "Method",
    "detail": "Function (add =)",
    "insertText": "vshrq_n_u16(add, 1)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} return res ; } template<> EIGEN_STRONG_INLINE Packet2ui)",
    "insertText": "psqrt(const Packet2ui& a)"
  },
  {
    "label": "vdup_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t res =)",
    "insertText": "vdup_n_u32(0)"
  },
  {
    "label": "vdup_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t add =)",
    "insertText": "vdup_n_u32(0x8000)"
  },
  {
    "label": "vorr_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x2_t temp =)",
    "insertText": "vorr_u32(res, add)"
  },
  {
    "label": "vbsl_u32()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vbsl_u32(vcge_u32(a, vmul_u32(temp, temp)), temp, res)"
  },
  {
    "label": "vshr_n_u32()",
    "kind": "Method",
    "detail": "Function (add =)",
    "insertText": "vshr_n_u32(add, 1)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} return res ; } template<> EIGEN_STRONG_INLINE Packet4ui)",
    "insertText": "psqrt(const Packet4ui& a)"
  },
  {
    "label": "vdupq_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x4_t res =)",
    "insertText": "vdupq_n_u32(0)"
  },
  {
    "label": "vdupq_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x4_t add =)",
    "insertText": "vdupq_n_u32(0x8000)"
  },
  {
    "label": "vorrq_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x4_t temp =)",
    "insertText": "vorrq_u32(res, add)"
  },
  {
    "label": "vbslq_u32()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vbslq_u32(vcgeq_u32(a, vmulq_u32(temp, temp)), temp, res)"
  },
  {
    "label": "vshrq_n_u32()",
    "kind": "Method",
    "detail": "Function (add =)",
    "insertText": "vshrq_n_u32(add, 1)"
  },
  {
    "label": "prsqrt()",
    "kind": "Method",
    "detail": "Function (} return res ; } template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "prsqrt(const Packet4f& a)"
  },
  {
    "label": "vrsqrteq_f32()",
    "kind": "Method",
    "detail": "Function (Packet4f x =)",
    "insertText": "vrsqrteq_f32(a)"
  },
  {
    "label": "vmulq_f32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vmulq_f32(vrsqrtsq_f32(vmulq_f32(a, x), x), x)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (const Packet4f infinity = pset1<)",
    "insertText": "Packet4f(NumTraits<float>::infinity())"
  },
  {
    "label": "prsqrt()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2f)",
    "insertText": "prsqrt(const Packet2f& a)"
  },
  {
    "label": "vrsqrte_f32()",
    "kind": "Method",
    "detail": "Function (Packet2f x =)",
    "insertText": "vrsqrte_f32(a)"
  },
  {
    "label": "vmul_f32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vmul_f32(vrsqrts_f32(vmul_f32(a, x), x), x)"
  },
  {
    "label": "Packet2f()",
    "kind": "Method",
    "detail": "Function (const Packet2f infinity = pset1<)",
    "insertText": "Packet2f(NumTraits<float>::infinity())"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_ARCH_ARM64 template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "psqrt(const Packet4f& _x)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2f)",
    "insertText": "psqrt(const Packet2f& _x)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} # else template<> EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "psqrt(const Packet4f& a)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (const Packet4f is_zero_or_inf =)",
    "insertText": "por(pcmp_eq(a, pzero(a)), pcmp_eq(a, infinity))"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2f)",
    "insertText": "psqrt(const Packet2f& a)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} # endif typedef eigen_packet_wrapper<uint16x4_t,1 9> Packet4bf ; template<> struct is_arithmetic<Packet4bf> { enum { value = true } ; } ; template<> struct packet_traits<bfloat16> : default_packet_traits { typedef Packet4bf type ; typedef Packet4bf half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 4,HasHalfPacket = 0,HasCmp = 1,HasAdd = 1,HasSub = 1,HasShift = 1,HasMul = 1,HasNegate = 1,HasAbs = 1,HasArg = 0,HasAbs2 = 1,HasAbsDiff = 1,HasMin = 1,HasMax = 1,HasConj = 1,HasSetLinear = 0,HasBlend = 0,HasDiv = 1,HasFloor = 1,HasCeil = 1,HasRint = 1,HasSin = EIGEN_FAST_MATH,HasCos = EIGEN_FAST_MATH,HasLog = 1,HasExp = 1,HasSqrt = 0,HasTanh = EIGEN_FAST_MATH,HasErf = EIGEN_FAST_MATH,HasBessel = 0,HasNdtri = 0 } ; } ; template<> struct unpacket_traits<Packet4bf> { typedef bfloat16 type ; typedef Packet4bf half ; enum { size = 4,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; } ; namespace detail { template<> EIGEN_ALWAYS_INLINE void zip_in_place<)",
    "insertText": "Packet4bf(Packet4bf& p1, Packet4bf& p2)"
  },
  {
    "label": "F32ToBf16()",
    "kind": "Method",
    "detail": "Function (p1 = tmp . val [ 0 ] ; p2 = tmp . val [ 1 ] ; } } EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "F32ToBf16(const Packet4f& p)"
  },
  {
    "label": "Packet4ui()",
    "kind": "Method",
    "detail": "Function (Packet4ui input = reinterpret_cast<)",
    "insertText": "Packet4ui(p)"
  },
  {
    "label": "vandq_u32()",
    "kind": "Method",
    "detail": "Function (Packet4ui lsb =)",
    "insertText": "vandq_u32(vshrq_n_u32(input, 16), vdupq_n_u32(1))"
  },
  {
    "label": "vaddq_u32()",
    "kind": "Method",
    "detail": "Function (Packet4ui rounding_bias =)",
    "insertText": "vaddq_u32(lsb, vdupq_n_u32(0x7fff))"
  },
  {
    "label": "vaddq_u32()",
    "kind": "Method",
    "detail": "Function (input =)",
    "insertText": "vaddq_u32(input, rounding_bias)"
  },
  {
    "label": "vshrq_n_u32()",
    "kind": "Method",
    "detail": "Function (input =)",
    "insertText": "vshrq_n_u32(input, 16)"
  },
  {
    "label": "vdupq_n_u32()",
    "kind": "Method",
    "detail": "Function (const Packet4ui bf16_nan =)",
    "insertText": "vdupq_n_u32(0x7fc0)"
  },
  {
    "label": "vceqq_f32()",
    "kind": "Method",
    "detail": "Function (const Packet4ui mask =)",
    "insertText": "vceqq_f32(p, p)"
  },
  {
    "label": "vbslq_u32()",
    "kind": "Method",
    "detail": "Function (input =)",
    "insertText": "vbslq_u32(mask, input, bf16_nan)"
  },
  {
    "label": "Bf16ToF32()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Packet4f)",
    "insertText": "Bf16ToF32(const Packet4bf& p)"
  },
  {
    "label": "F32MaskToBf16Mask()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "F32MaskToBf16Mask(const Packet4f& p)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf pset1<)",
    "insertText": "Packet4bf(const bfloat16& from)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE bfloat16 pfirst<)",
    "insertText": "Packet4bf(const Packet4bf& from)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf pload<)",
    "insertText": "Packet4bf(const bfloat16* from)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstore<)",
    "insertText": "bfloat16(bfloat16* to, const Packet4bf& from)"
  },
  {
    "label": "vst1_u16()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE)",
    "insertText": "vst1_u16(reinterpret_cast<uint16_t*>(to), from)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "pabs(const Packet4bf& a)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf pmin<PropagateNumbers,)",
    "insertText": "Packet4bf(const Packet4bf &a, const Packet4bf &b)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf plset<)",
    "insertText": "Packet4bf(const bfloat16& a)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "por(const Packet4bf& a,const Packet4bf& b)"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "pxor(const Packet4bf& a,const Packet4bf& b)"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "pand(const Packet4bf& a,const Packet4bf& b)"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "pandnot(const Packet4bf& a,const Packet4bf& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "pselect(const Packet4bf& mask, const Packet4bf& a, const Packet4bf& b)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf print<)",
    "insertText": "Packet4bf(const Packet4bf& a)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf)",
    "insertText": "pconj(const Packet4bf& a)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf psub<)",
    "insertText": "Packet4bf(const Packet4bf& a, const Packet4bf& b)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4bf pgather<bfloat16,)",
    "insertText": "Packet4bf(const bfloat16* from, Index stride)"
  },
  {
    "label": "Packet4bf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pscatter<bfloat16,)",
    "insertText": "Packet4bf(bfloat16* to, const Packet4bf& from, Index stride)"
  },
  {
    "label": "Packet4us()",
    "kind": "Method",
    "detail": "Function (pscatter<uint16_t,)",
    "insertText": "Packet4us(reinterpret_cast<uint16_t*>(to), from, stride)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4bf, 4>& kernel)"
  },
  {
    "label": "EIGEN_APPLE_DOUBLE_NEON_BUG()",
    "kind": "Method",
    "detail": "Function (} # ifdef __apple_build_version__ # define)",
    "insertText": "EIGEN_APPLE_DOUBLE_NEON_BUG(__apple_build_version__ < 6010000) #else #define EIGEN_APPLE_DOUBLE_NEON_BUG 0 #endif #if EIGEN_ARCH_ARM64 && !EIGEN_APPLE_DOUBLE_NEON_BUG template <typename T> uint64x2_t vreinterpretq_u64_f64(T a)"
  },
  {
    "label": "vreinterpretq_f64_u64()",
    "kind": "Method",
    "detail": "Function (} template<T> float64x2_t)",
    "insertText": "vreinterpretq_f64_u64(T a)"
  },
  {
    "label": "shuffle()",
    "kind": "Method",
    "detail": "Function (} typedef float64x2_t Packet2d ; typedef float64x1_t Packet1d ; EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "shuffle(const Packet2d& m, const Packet2d& n, int mask)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double* a = reinterpret_cast<const)",
    "insertText": "double(&m)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double* b = reinterpret_cast<const)",
    "insertText": "double(&n)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (Packet2d)",
    "insertText": "res(a + (mask & 1)), *(b + ((mask >> 1) & 1))"
  },
  {
    "label": "vec2d_unpacklo()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "vec2d_unpacklo(const Packet2d& a,const Packet2d& b)"
  },
  {
    "label": "vec2d_unpackhi()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "vec2d_unpackhi(const Packet2d& a,const Packet2d& b)"
  },
  {
    "label": "vec2d_duplane()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "vec2d_duplane(a, p) \\ vdupq_laneq_f64(a, p)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (typedef Packet2d type ; typedef Packet2d half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 2,HasHalfPacket = 0,HasCmp = 1,HasAdd = 1,HasSub = 1,HasShift = 1,HasMul = 1,HasNegate = 1,HasAbs = 1,HasArg = 0,HasAbs2 = 1,HasAbsDiff = 1,HasMin = 1,HasMax = 1,HasConj = 1,HasSetLinear = 0,HasBlend = 0,HasDiv = 1,HasFloor = 1,HasCeil = 1,HasRint = 1,HasSin = 0,HasCos = 0,HasLog = 1,HasExp = 1,HasSqrt = 1,HasRsqrt = 1,HasTanh = 0,HasErf = 0 } ; } ; template<> struct unpacket_traits<Packet2d> { typedef double type ; typedef Packet2d half ; typedef Packet2l integer_packet ; enum { size = 2,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; } ; template<> EIGEN_STRONG_INLINE Packet2d pset1<)",
    "insertText": "Packet2d(const double& from)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d plset<)",
    "insertText": "Packet2d(const double& a)"
  },
  {
    "label": "vaddq_f64()",
    "kind": "Method",
    "detail": "Function (const double c [ ] = { 0 . 0,1 . 0 } ; return)",
    "insertText": "vaddq_f64(pset1<Packet2d>(a), vld1q_f64(c))"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d padd<)",
    "insertText": "Packet2d(const Packet2d& a, const Packet2d& b)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pxor<)",
    "insertText": "Packet2d(const Packet2d& , const Packet2d&)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const Packet2d mask = { numext::bit_cast<)",
    "insertText": "double(0x8000000000000000ull)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pnegate(const Packet2d& a)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pconj(const Packet2d& a)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} # ifdef __ARM_FEATURE_FMA template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pmadd(const Packet2d& a, const Packet2d& b, const Packet2d& c)"
  },
  {
    "label": "pcmp_le()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pcmp_le(const Packet2d& a, const Packet2d& b)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pcmp_lt(const Packet2d& a, const Packet2d& b)"
  },
  {
    "label": "pcmp_lt_or_nan()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pcmp_lt_or_nan(const Packet2d& a, const Packet2d& b)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pcmp_eq(const Packet2d& a, const Packet2d& b)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pload<)",
    "insertText": "Packet2d(const double* from)"
  },
  {
    "label": "vld1q_f64()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_LOAD return)",
    "insertText": "vld1q_f64(from)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstore<)",
    "insertText": "double(double* to, const Packet2d& from)"
  },
  {
    "label": "vst1q_f64()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE)",
    "insertText": "vst1q_f64(to,from)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet2d pgather<double,)",
    "insertText": "Packet2d(const double* from, Index stride)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d res = pset1<)",
    "insertText": "Packet2d(0.0)"
  },
  {
    "label": "vld1q_lane_f64()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vld1q_lane_f64(from + 0*stride, res, 0)"
  },
  {
    "label": "vld1q_lane_f64()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vld1q_lane_f64(from + 1*stride, res, 1)"
  },
  {
    "label": "vst1q_lane_f64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_lane_f64(to + stride*0, from, 0)"
  },
  {
    "label": "vst1q_lane_f64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_lane_f64(to + stride*1, from, 1)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "double(const double* addr)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE double pfirst<)",
    "insertText": "Packet2d(const Packet2d& a)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "preverse(const Packet2d& a)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pabs(const Packet2d& a)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_COMP_CLANG&&)",
    "insertText": "defined(__apple_build_version__) template<> EIGEN_STRONG_INLINE double predux<Packet2d>(const Packet2d& a)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if EIGEN_COMP_CLANG&&)",
    "insertText": "defined(__apple_build_version__) template<> EIGEN_STRONG_INLINE double predux_mul<Packet2d>(const Packet2d& a)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet2d, 2>& kernel)"
  },
  {
    "label": "vzip1q_f64()",
    "kind": "Method",
    "detail": "Function (const float64x2_t tmp1 =)",
    "insertText": "vzip1q_f64(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "vzip2q_f64()",
    "kind": "Method",
    "detail": "Function (const float64x2_t tmp2 =)",
    "insertText": "vzip2q_f64(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] = tmp1 ; kernel . packet [ 1 ] = tmp2 ; } template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "pselect(const Packet2d& mask, const Packet2d& a, const Packet2d& b)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pldexp<)",
    "insertText": "Packet2d(const Packet2d& a, const Packet2d& exponent)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pfrexp<)",
    "insertText": "Packet2d(const Packet2d& a, Packet2d& exponent)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d pset1frombits<)",
    "insertText": "Packet2d(uint64_t from)"
  },
  {
    "label": "prsqrt()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "prsqrt(const Packet2d& a)"
  },
  {
    "label": "vrsqrteq_f64()",
    "kind": "Method",
    "detail": "Function (Packet2d x =)",
    "insertText": "vrsqrteq_f64(a)"
  },
  {
    "label": "vmulq_f64()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vmulq_f64(vrsqrtsq_f64(vmulq_f64(a, x), x), x)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (const Packet2d infinity = pset1<)",
    "insertText": "Packet2d(NumTraits<double>::infinity())"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2d)",
    "insertText": "psqrt(const Packet2d& _x)"
  },
  {
    "label": "Packet8hf()",
    "kind": "Method",
    "detail": "Function (} # endif # if EIGEN_HAS_ARM64_FP16_VECTOR_ARITHMETIC typedef float16x4_t Packet4hf ; typedef float16x8_t Packet8hf ; template<> struct packet_traits<Eigen::half> : default_packet_traits { typedef Packet8hf type ; typedef Packet4hf half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 8,HasHalfPacket = 1,HasCmp = 1,HasCast = 1,HasAdd = 1,HasSub = 1,HasShift = 1,HasMul = 1,HasNegate = 1,HasAbs = 1,HasArg = 0,HasAbs2 = 1,HasAbsDiff = 0,HasMin = 1,HasMax = 1,HasConj = 1,HasSetLinear = 0,HasBlend = 0,HasInsert = 1,HasReduxp = 1,HasDiv = 1,HasFloor = 1,HasCeil = 1,HasRint = 1,HasSin = 0,HasCos = 0,HasLog = 0,HasExp = 0,HasSqrt = 1,HasRsqrt = 1,HasErf = EIGEN_FAST_MATH,HasBessel = 0,HasNdtri = 0 } ; } ; template<> struct unpacket_traits<Packet4hf> { typedef Eigen::half type ; typedef Packet4hf half ; enum { size = 4,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; } ; template<> struct unpacket_traits<Packet8hf> { typedef Eigen::half type ; typedef Packet4hf half ; enum { size = 8,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; } ; template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4hf predux_half_dowto4<)",
    "insertText": "Packet8hf(const Packet8hf& a)"
  },
  {
    "label": "Packet8hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8hf pset1<)",
    "insertText": "Packet8hf(const Eigen::half& from)"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4hf pset1<)",
    "insertText": "Packet4hf(const Eigen::half& from)"
  },
  {
    "label": "Packet8hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8hf plset<)",
    "insertText": "Packet8hf(const Eigen::half& a)"
  },
  {
    "label": "vld1q_f16()",
    "kind": "Method",
    "detail": "Function (const float16_t f [ ] = { 0,1,2,3,4,5,6,7 } ; Packet8hf countdown =)",
    "insertText": "vld1q_f16(f)"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4hf plset<)",
    "insertText": "Packet4hf(const Eigen::half& a)"
  },
  {
    "label": "vld1_f16()",
    "kind": "Method",
    "detail": "Function (const float16_t f [ ] = { 0,1,2,3 } ; Packet4hf countdown =)",
    "insertText": "vld1_f16(f)"
  },
  {
    "label": "Packet8hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8hf padd<)",
    "insertText": "Packet8hf(const Packet8hf& a, const Packet8hf& b)"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4hf padd<)",
    "insertText": "Packet4hf(const Packet4hf& a, const Packet4hf& b)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8hf)",
    "insertText": "pnegate(const Packet8hf& a)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4hf)",
    "insertText": "pnegate(const Packet4hf& a)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8hf)",
    "insertText": "pconj(const Packet8hf& a)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8hf)",
    "insertText": "pmadd(const Packet8hf& a, const Packet8hf& b, const Packet8hf& c)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4hf)",
    "insertText": "pmadd(const Packet4hf& a, const Packet4hf& b, const Packet4hf& c)"
  },
  {
    "label": "EIGEN_MAKE_ARM_FP16_CMP_8()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "EIGEN_MAKE_ARM_FP16_CMP_8(name) \\ template <> \\ EIGEN_STRONG_INLINE Packet8hf pcmp_##name(const Packet8hf& a, const Packet8hf& b)"
  },
  {
    "label": "vreinterpretq_f16_u16()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vreinterpretq_f16_u16(vc##name##q_f16(a, b))"
  },
  {
    "label": "EIGEN_MAKE_ARM_FP16_CMP_4()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "EIGEN_MAKE_ARM_FP16_CMP_4(name) \\ template <> \\ EIGEN_STRONG_INLINE Packet4hf pcmp_##name(const Packet4hf& a, const Packet4hf& b)"
  },
  {
    "label": "vreinterpret_f16_u16()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vreinterpret_f16_u16(vc##name##_f16(a, b))"
  },
  {
    "label": "EIGEN_MAKE_ARM_FP16_CMP_8()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "EIGEN_MAKE_ARM_FP16_CMP_8(eq) EIGEN_MAKE_ARM_FP16_CMP_8(lt) EIGEN_MAKE_ARM_FP16_CMP_8(le) EIGEN_MAKE_ARM_FP16_CMP_4(eq) EIGEN_MAKE_ARM_FP16_CMP_4(lt) EIGEN_MAKE_ARM_FP16_CMP_4(le) #undef EIGEN_MAKE_ARM_FP16_CMP_8 #undef EIGEN_MAKE_ARM_FP16_CMP_4 template <> EIGEN_STRONG_INLINE Packet8hf pcmp_lt_or_nan<Packet8hf>(const Packet8hf& a, const Packet8hf& b)"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4hf print<)",
    "insertText": "Packet4hf(const Packet4hf& a)"
  },
  {
    "label": "Packet8hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet8hf pload<)",
    "insertText": "Packet8hf(const Eigen::half* from)"
  },
  {
    "label": "vld1q_f16()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_LOAD return)",
    "insertText": "vld1q_f16(reinterpret_cast<const float16_t*>(from))"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet4hf pload<)",
    "insertText": "Packet4hf(const Eigen::half* from)"
  },
  {
    "label": "vld1_f16()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_LOAD return)",
    "insertText": "vld1_f16(reinterpret_cast<const float16_t*>(from))"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (float16x4_t packet ; float16_t* tmp ;)",
    "insertText": "tmp(float16_t*)"
  },
  {
    "label": "vld1_dup_f16()",
    "kind": "Method",
    "detail": "Function (Packet4hf lo,hi ; lo =)",
    "insertText": "vld1_dup_f16(reinterpret_cast<const float16_t*>(from))"
  },
  {
    "label": "vld1_dup_f16()",
    "kind": "Method",
    "detail": "Function (hi =)",
    "insertText": "vld1_dup_f16(reinterpret_cast<const float16_t*>(from+1))"
  },
  {
    "label": "pinsertfirst()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8hf)",
    "insertText": "pinsertfirst(const Packet8hf& a, Eigen::half b)"
  },
  {
    "label": "pinsertfirst()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4hf)",
    "insertText": "pinsertfirst(const Packet4hf& a, Eigen::half b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8hf)",
    "insertText": "pselect(const Packet8hf& mask, const Packet8hf& a, const Packet8hf& b)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4hf)",
    "insertText": "pselect(const Packet4hf& mask, const Packet4hf& a, const Packet4hf& b)"
  },
  {
    "label": "pinsertlast()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8hf)",
    "insertText": "pinsertlast(const Packet8hf& a, Eigen::half b)"
  },
  {
    "label": "pinsertlast()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet4hf)",
    "insertText": "pinsertlast(const Packet4hf& a, Eigen::half b)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstore<)",
    "insertText": "half(Eigen::half* to, const Packet8hf& from)"
  },
  {
    "label": "vst1q_f16()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE)",
    "insertText": "vst1q_f16(reinterpret_cast<float16_t*>(to), from)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstore<)",
    "insertText": "half(Eigen::half* to, const Packet4hf& from)"
  },
  {
    "label": "vst1_f16()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE)",
    "insertText": "vst1_f16(reinterpret_cast<float16_t*>(to), from)"
  },
  {
    "label": "Packet8hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet8hf pgather<Eigen::half,)",
    "insertText": "Packet8hf(const Eigen::half* from, Index stride)"
  },
  {
    "label": "Packet8hf()",
    "kind": "Method",
    "detail": "Function (Packet8hf res = pset1<)",
    "insertText": "Packet8hf(Eigen::half(0.f))"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[0 * stride].x, res, 0)"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[1 * stride].x, res, 1)"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[2 * stride].x, res, 2)"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[3 * stride].x, res, 3)"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[4 * stride].x, res, 4)"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[5 * stride].x, res, 5)"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[6 * stride].x, res, 6)"
  },
  {
    "label": "vsetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vsetq_lane_f16(from[7 * stride].x, res, 7)"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (Packet4hf res = pset1<)",
    "insertText": "Packet4hf(Eigen::half(0.f))"
  },
  {
    "label": "vset_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vset_lane_f16(from[0 * stride].x, res, 0)"
  },
  {
    "label": "vset_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vset_lane_f16(from[1 * stride].x, res, 1)"
  },
  {
    "label": "vset_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vset_lane_f16(from[2 * stride].x, res, 2)"
  },
  {
    "label": "vset_lane_f16()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vset_lane_f16(from[3 * stride].x, res, 3)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 0 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 0)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 1 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 1)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 2 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 2)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 3 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 3)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 4 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 4)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 5 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 5)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 6 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 6)"
  },
  {
    "label": "vgetq_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 7 ] . x =)",
    "insertText": "vgetq_lane_f16(from, 7)"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void pscatter<Eigen::half,)",
    "insertText": "Packet4hf(Eigen::half* to, const Packet4hf& from, Index stride)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 0 ] . x =)",
    "insertText": "vget_lane_f16(from, 0)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 1 ] . x =)",
    "insertText": "vget_lane_f16(from, 1)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 2 ] . x =)",
    "insertText": "vget_lane_f16(from, 2)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (to [ stride* 3 ] . x =)",
    "insertText": "vget_lane_f16(from, 3)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<)",
    "insertText": "half(const Eigen::half* addr)"
  },
  {
    "label": "vst1q_f16()",
    "kind": "Method",
    "detail": "Function (float16_t x [ 8 ] ;)",
    "insertText": "vst1q_f16(x, a)"
  },
  {
    "label": "vst1_f16()",
    "kind": "Method",
    "detail": "Function (float16_t x [ 4 ] ;)",
    "insertText": "vst1_f16(x, a)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (Eigen::half h ; h . x = x [ 0 ] ; return h ; } template<> EIGEN_STRONG_INLINE Packet8hf)",
    "insertText": "preverse(const Packet8hf& a)"
  },
  {
    "label": "vrev64q_f16()",
    "kind": "Method",
    "detail": "Function (float16x4_t a_lo,a_hi ; Packet8hf a_r64 ; a_r64 =)",
    "insertText": "vrev64q_f16(a)"
  },
  {
    "label": "vget_low_f16()",
    "kind": "Method",
    "detail": "Function (a_lo =)",
    "insertText": "vget_low_f16(a_r64)"
  },
  {
    "label": "vget_high_f16()",
    "kind": "Method",
    "detail": "Function (a_hi =)",
    "insertText": "vget_high_f16(a_r64)"
  },
  {
    "label": "vget_low_f16()",
    "kind": "Method",
    "detail": "Function (float16x4_t a_lo,a_hi,sum ; a_lo =)",
    "insertText": "vget_low_f16(a)"
  },
  {
    "label": "vget_high_f16()",
    "kind": "Method",
    "detail": "Function (a_hi =)",
    "insertText": "vget_high_f16(a)"
  },
  {
    "label": "vpadd_f16()",
    "kind": "Method",
    "detail": "Function (sum =)",
    "insertText": "vpadd_f16(a_lo, a_hi)"
  },
  {
    "label": "vpadd_f16()",
    "kind": "Method",
    "detail": "Function (sum =)",
    "insertText": "vpadd_f16(sum, sum)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (Eigen::half h ; h . x =)",
    "insertText": "vget_lane_f16(sum, 0)"
  },
  {
    "label": "vpadd_f16()",
    "kind": "Method",
    "detail": "Function (float16x4_t sum ; sum =)",
    "insertText": "vpadd_f16(a, a)"
  },
  {
    "label": "vmul_f16()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_f16(a_lo, a_hi)"
  },
  {
    "label": "vmul_f16()",
    "kind": "Method",
    "detail": "Function (prod =)",
    "insertText": "vmul_f16(prod, vrev64_f16(prod))"
  },
  {
    "label": "vmulh_f16()",
    "kind": "Method",
    "detail": "Function (Eigen::half h ; h . x =)",
    "insertText": "vmulh_f16(vget_lane_f16(prod, 0), vget_lane_f16(prod, 1))"
  },
  {
    "label": "vmul_f16()",
    "kind": "Method",
    "detail": "Function (float16x4_t prod ; prod =)",
    "insertText": "vmul_f16(a, vrev64_f16(a))"
  },
  {
    "label": "vpmin_f16()",
    "kind": "Method",
    "detail": "Function (min =)",
    "insertText": "vpmin_f16(a_lo, a_hi)"
  },
  {
    "label": "vpmin_f16()",
    "kind": "Method",
    "detail": "Function (min =)",
    "insertText": "vpmin_f16(min, min)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (Eigen::half h ; h . x =)",
    "insertText": "vget_lane_f16(min, 0)"
  },
  {
    "label": "vpmin_f16()",
    "kind": "Method",
    "detail": "Function (Packet4hf tmp ; tmp =)",
    "insertText": "vpmin_f16(a, a)"
  },
  {
    "label": "vpmin_f16()",
    "kind": "Method",
    "detail": "Function (tmp =)",
    "insertText": "vpmin_f16(tmp, tmp)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (Eigen::half h ; h . x =)",
    "insertText": "vget_lane_f16(tmp, 0)"
  },
  {
    "label": "vpmax_f16()",
    "kind": "Method",
    "detail": "Function (max =)",
    "insertText": "vpmax_f16(a_lo, a_hi)"
  },
  {
    "label": "vpmax_f16()",
    "kind": "Method",
    "detail": "Function (max =)",
    "insertText": "vpmax_f16(max, max)"
  },
  {
    "label": "vget_lane_f16()",
    "kind": "Method",
    "detail": "Function (Eigen::half h ; h . x =)",
    "insertText": "vget_lane_f16(max, 0)"
  },
  {
    "label": "vpmax_f16()",
    "kind": "Method",
    "detail": "Function (Packet4hf tmp ; tmp =)",
    "insertText": "vpmax_f16(a, a)"
  },
  {
    "label": "vpmax_f16()",
    "kind": "Method",
    "detail": "Function (tmp =)",
    "insertText": "vpmax_f16(tmp, tmp)"
  },
  {
    "label": "vzipq_f16()",
    "kind": "Method",
    "detail": "Function (const float16x8x2_t zip16_1 =)",
    "insertText": "vzipq_f16(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "vzipq_f16()",
    "kind": "Method",
    "detail": "Function (const float16x8x2_t zip16_2 =)",
    "insertText": "vzipq_f16(kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "vzipq_f32()",
    "kind": "Method",
    "detail": "Function (const float32x4x2_t zip32_1 =)",
    "insertText": "vzipq_f32(vreinterpretq_f32_f16(zip16_1.val[0]), vreinterpretq_f32_f16(zip16_2.val[0]))"
  },
  {
    "label": "vzipq_f32()",
    "kind": "Method",
    "detail": "Function (const float32x4x2_t zip32_2 =)",
    "insertText": "vzipq_f32(vreinterpretq_f32_f16(zip16_1.val[1]), vreinterpretq_f32_f16(zip16_2.val[1]))"
  },
  {
    "label": "vreinterpretq_f16_f32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] =)",
    "insertText": "vreinterpretq_f16_f32(zip32_1.val[0])"
  },
  {
    "label": "vreinterpretq_f16_f32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] =)",
    "insertText": "vreinterpretq_f16_f32(zip32_1.val[1])"
  },
  {
    "label": "vreinterpretq_f16_f32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 2 ] =)",
    "insertText": "vreinterpretq_f16_f32(zip32_2.val[0])"
  },
  {
    "label": "vreinterpretq_f16_f32()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 3 ] =)",
    "insertText": "vreinterpretq_f16_f32(zip32_2.val[1])"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet4hf, 4>& kernel)"
  },
  {
    "label": "vld4_f16()",
    "kind": "Method",
    "detail": "Function (tmp_x4 =)",
    "insertText": "vld4_f16(tmp)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] = tmp_x4 . val [ 0 ] ; kernel . packet [ 1 ] = tmp_x4 . val [ 1 ] ; kernel . packet [ 2 ] = tmp_x4 . val [ 2 ] ; kernel . packet [ 3 ] = tmp_x4 . val [ 3 ] ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet8hf, 8>& kernel)"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (float16x8x2_t T_1 [ 4 ] ; T_1 [ 0 ] =)",
    "insertText": "vuzpq_f16(kernel.packet[0], kernel.packet[1])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_1 [ 1 ] =)",
    "insertText": "vuzpq_f16(kernel.packet[2], kernel.packet[3])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_1 [ 2 ] =)",
    "insertText": "vuzpq_f16(kernel.packet[4], kernel.packet[5])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_1 [ 3 ] =)",
    "insertText": "vuzpq_f16(kernel.packet[6], kernel.packet[7])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (float16x8x2_t T_2 [ 4 ] ; T_2 [ 0 ] =)",
    "insertText": "vuzpq_f16(T_1[0].val[0], T_1[1].val[0])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_2 [ 1 ] =)",
    "insertText": "vuzpq_f16(T_1[0].val[1], T_1[1].val[1])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_2 [ 2 ] =)",
    "insertText": "vuzpq_f16(T_1[2].val[0], T_1[3].val[0])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_2 [ 3 ] =)",
    "insertText": "vuzpq_f16(T_1[2].val[1], T_1[3].val[1])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (float16x8x2_t T_3 [ 4 ] ; T_3 [ 0 ] =)",
    "insertText": "vuzpq_f16(T_2[0].val[0], T_2[2].val[0])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_3 [ 1 ] =)",
    "insertText": "vuzpq_f16(T_2[0].val[1], T_2[2].val[1])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_3 [ 2 ] =)",
    "insertText": "vuzpq_f16(T_2[1].val[0], T_2[3].val[0])"
  },
  {
    "label": "vuzpq_f16()",
    "kind": "Method",
    "detail": "Function (T_3 [ 3 ] =)",
    "insertText": "vuzpq_f16(T_2[1].val[1], T_2[3].val[1])"
  }
]