[
  {
    "label": "ImmutableString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableString"
  },
  {
    "label": "ImageSectionDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageSectionDB"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Type"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<stdint . h> class ImmutableString ; namespace symbols { struct ImageSectionDB ; } namespace hook { struct Type { enum Enum { PREPATCH = 0,POSTPATCH,COMPILE_START,COMPILE_SUCCESS,COMPILE_ERROR,COMPILE_ERROR_MESSAGE,} ; } ; typedef)",
    "insertText": "void(*PrepatchFunction)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*PostpatchFunction)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*CompileStartFunction)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*CompileSuccessFunction)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*CompileErrorFunction)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*CompileErrorMessageFunction)(const wchar_t*)"
  },
  {
    "label": "FindFirstInSection()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FindFirstInSection(const symbols::ImageSectionDB* imageSectionDb, const ImmutableString& sectionName)"
  },
  {
    "label": "FindLastInSection()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FindLastInSection(const symbols::ImageSectionDB* imageSectionDb, const ImmutableString& sectionName)"
  },
  {
    "label": "CallHooksInRange()",
    "kind": "Method",
    "detail": "Function (template<T,. . . Args> void)",
    "insertText": "CallHooksInRange(const void* rangeBegin, const void* rangeEnd, Args&&... args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T* firstHook = static_cast<const)",
    "insertText": "T(rangeBegin)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T* lastHook = static_cast<const)",
    "insertText": "T(rangeEnd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T function =* hook ;)",
    "insertText": "if(function)"
  },
  {
    "label": "function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "function(args...)"
  }
]