[
  {
    "label": "Cond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cond"
  },
  {
    "label": "max_n_1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "max_n_1"
  },
  {
    "label": "PacketType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketType"
  },
  {
    "label": "PlusOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PlusOp"
  },
  {
    "label": "DivOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DivOp"
  },
  {
    "label": "Indx",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Indx"
  },
  {
    "label": "StepOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StepOp"
  },
  {
    "label": "static_for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "static_for"
  },
  {
    "label": "Vectorise",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vectorise"
  },
  {
    "label": "Tuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tuple"
  },
  {
    "label": "IndexPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexPair"
  },
  {
    "label": "is_base_of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_base_of"
  },
  {
    "label": "Host",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Host"
  },
  {
    "label": "choose()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_META_H # define EIGEN_CXX11_TENSOR_TENSOR_META_H namespace Eigen { template<bool cond> struct Cond { } ; template<T1,T2> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE const T1&)",
    "insertText": "choose(Cond<true>, const T1& first, const T2&)"
  },
  {
    "label": "divup()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE T)",
    "insertText": "divup(const T x, const T y)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<size_t n> struct max_n_1 { const size_t size = n ; } ; template<> struct max_n_1<0> { const size_t size = 1 ; } ; template<Scalar,Device> struct PacketType : internal::packet_traits<Scalar> { typedef internal::packet_traits<Scalar>::type type ; } ; # if)",
    "insertText": "defined(EIGEN_USE_GPU) && defined(EIGEN_HAS_GPU_FP16)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (template<> struct PacketType<half,GpuDevice> { typedef Packet4h2 type ; const int size = 8 ; enum { HasAdd = 1,HasSub = 1,HasMul = 1,HasNegate = 1,HasAbs = 1,HasArg = 0,HasAbs2 = 0,HasMin = 1,HasMax = 1,HasConj = 0,HasSetLinear = 0,HasBlend = 0,HasDiv = 1,HasSqrt = 1,HasRsqrt = 1,HasExp = 1,HasExpm1 = 0,HasLog = 1,HasLog1p = 0,HasLog10 = 0,HasPow = 1,} ; } ; # endif # if)",
    "insertText": "defined(EIGEN_USE_SYCL)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<Index,Index A,Index B> struct PlusOp { Index Value = A + B ; } ; template<Index,Index A,Index B> struct DivOp { Index Value = A / B ; } ; template<Index,Index start,Index end,Index step,template<class Indx,Indx . . .> class StepOp> struct static_for { template<UnaryOperator> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "loop(UnaryOperator op)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(start)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (static_for<Index,StepOp<Index,start,step>::Value,end,step,StepOp)",
    "insertText": "loop(op)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (} } ; template<Index,Index end,Index step,template<class Indx,Indx . . .> class StepOp> struct static_for<Index,end,end,step,StepOp> { template<UnaryOperator> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "loop(UnaryOperator)"
  },
  {
    "label": "roundUp()",
    "kind": "Method",
    "detail": "Function (} } ; template<OutScalar,Device,bool Vectorizable> struct Vectorise { const int PacketSize = 1 ; typedef OutScalar PacketReturnType ; } ; template<OutScalar,Device> struct Vectorise<OutScalar,Device,true> { const int PacketSize = Eigen::PacketType<OutScalar,Device>::size ; typedef Eigen::PacketType<OutScalar,Device>::type PacketReturnType ; } ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Index)",
    "insertText": "roundUp(Index x, Index y)"
  },
  {
    "label": "PACKET_TYPE()",
    "kind": "Method",
    "detail": "Function (} } } template<> struct PacketType<half,SyclDevice> { typedef half type ; const int size = 1 ; enum { HasAdd = 0,HasSub = 0,HasMul = 0,HasNegate = 0,HasAbs = 0,HasArg = 0,HasAbs2 = 0,HasMin = 0,HasMax = 0,HasConj = 0,HasSetLinear = 0,HasBlend = 0 } ; } ; template<Scalar> struct PacketType<Scalar,SyclDevice> : internal::default_packet_traits { typedef Scalar type ; typedef Scalar half ; enum { Vectorizable = 0,size = 1,AlignedOnScalar = 0,HasHalfPacket = 0 } ; enum { HasAdd = 0,HasSub = 0,HasMul = 0,HasNegate = 0,HasAbs = 0,HasAbs2 = 0,HasMin = 0,HasMax = 0,HasConj = 0,HasSetLinear = 0 } ; } ; template<Scalar> struct PacketType<Scalar,const SyclDevice> : PacketType<Scalar,SyclDevice> { } ; # ifndef EIGEN_DONT_VECTORIZE_SYCL # define)",
    "insertText": "PACKET_TYPE(CVQual, Type, val, lengths, DEV)"
  },
  {
    "label": "PACKET_TYPE()",
    "kind": "Method",
    "detail": "Function (\\ typedef internal::packet_traits<Type>::type type ; \\ typedef internal::packet_traits<Type>::half half ; \\ } ;)",
    "insertText": "PACKET_TYPE(const, float, 1, 4, SyclDevice) PACKET_TYPE(, float, 1, 4, SyclDevice) PACKET_TYPE(const, float, 1, 4, const SyclDevice) PACKET_TYPE(, float, 1, 4, const SyclDevice) PACKET_TYPE(const, double, 0, 2, SyclDevice) PACKET_TYPE(, double, 0, 2, SyclDevice) PACKET_TYPE(const, double, 0, 2, const SyclDevice) PACKET_TYPE(, double, 0, 2, const SyclDevice)"
  },
  {
    "label": "Tuple()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct PacketType<const half,const SyclDevice> : PacketType<half,SyclDevice> { } ; # endif # endif template<U,V> struct Tuple { public : U first ; V second ; typedef U first_type ; typedef V second_type ; EIGEN_CONSTEXPR EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tuple() : first(), second()"
  },
  {
    "label": "Tuple()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tuple(const U& f, const V& s) : first(f), second(s)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "swap(Tuple& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using numext::swap ;)",
    "insertText": "swap(first, rhs.first)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(second, rhs.second)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<U,V> EIGEN_CONSTEXPR EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "operator(const Tuple<U, V>& x, const Tuple<U, V>& y)"
  },
  {
    "label": "IndexPair()",
    "kind": "Method",
    "detail": "Function (} template<Idx> struct IndexPair { EIGEN_CONSTEXPR EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "IndexPair() : first(0), second(0)"
  },
  {
    "label": "IndexPair()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "IndexPair(Idx f, Idx s) : first(f), second(s)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "set(IndexPair<Idx> val)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (first = val . first ; second = val . second ; } Idx first ; Idx second ; } ; # ifdef EIGEN_HAS_SFINAE namespace internal { template<IndexType,Index,Index . . . Is> EIGEN_CONSTEXPR EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE array<Index,)",
    "insertText": "sizeof(Is)> customIndices2Array(IndexType& idx, numeric_list<Index, Is...>)"
  },
  {
    "label": "customIndices2Array()",
    "kind": "Method",
    "detail": "Function (} template<Index,std::size_t NumIndices,IndexType> EIGEN_CONSTEXPR EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE array<Index,NumIndices>)",
    "insertText": "customIndices2Array(IndexType& idx)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (} template<B,D> struct is_base_of { typedef)",
    "insertText": "char(&yes)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "char(&no)"
  },
  {
    "label": "BB()",
    "kind": "Method",
    "detail": "Function (template<BB,DD> struct Host { operator)",
    "insertText": "BB()"
  },
  {
    "label": "DD()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "DD()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} ; template<T> yes)",
    "insertText": "check(D*, T)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (no)",
    "insertText": "check(B*, int)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const bool value =)",
    "insertText": "sizeof(check(Host<B,D>(), int())) == sizeof(yes)"
  }
]