[
  {
    "label": "SolveWithGuess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SolveWithGuess"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "SolveWithGuess()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SOLVEWITHGUESS_H # define EIGEN_SOLVEWITHGUESS_H namespace Eigen { template<Decomposition,RhsType,GuessType> class SolveWithGuess ; namespace internal { template<Decomposition,RhsType,GuessType> struct traits<SolveWithGuess<Decomposition,RhsType,GuessType>> : traits<Solve<Decomposition,RhsType>> { } ; } template<Decomposition,RhsType,GuessType> class SolveWithGuess : public internal::generic_xpr_base<SolveWithGuess<Decomposition,RhsType,GuessType>,MatrixXpr,internal::traits<RhsType>::StorageKind>::type { public : typedef internal::traits<SolveWithGuess>::Scalar Scalar ; typedef internal::traits<SolveWithGuess>::PlainObject PlainObject ; typedef internal::generic_xpr_base<SolveWithGuess<Decomposition,RhsType,GuessType>,MatrixXpr,internal::traits<RhsType>::StorageKind>::type Base ; typedef internal::ref_selector<SolveWithGuess>::type Nested ;)",
    "insertText": "SolveWithGuess(const Decomposition &dec, const RhsType &rhs, const GuessType &guess) : m_dec(dec), m_rhs(rhs), m_guess(guess)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Decomposition&)",
    "insertText": "dec()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "coeff(Index i)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { template<Decomposition,RhsType,GuessType> struct evaluator<SolveWithGuess<Decomposition,RhsType,GuessType>> : public evaluator<SolveWithGuess<Decomposition,RhsType,GuessType>::PlainObject> { typedef SolveWithGuess<Decomposition,RhsType,GuessType> SolveType ; typedef SolveType::PlainObject PlainObject ; typedef evaluator<PlainObject> Base ;)",
    "insertText": "evaluator(const SolveType& solve) : m_result(solve.rows(), solve.cols())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_result)"
  },
  {
    "label": "guess()",
    "kind": "Method",
    "detail": "Function (m_result = solve .)",
    "insertText": "guess()"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (solve .)",
    "insertText": "dec()._solve_with_guess_impl(solve.rhs(), m_result)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} protected : PlainObject m_result ; } ; template<DstXprType,DecType,RhsType,GuessType,Scalar> struct Assignment<DstXprType,SolveWithGuess<DecType,RhsType,GuessType>,internal::assign_op<Scalar,Scalar>,Dense2Dense> { typedef SolveWithGuess<DecType,RhsType,GuessType> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "dec()._solve_with_guess_impl(src.rhs(), dst)"
  }
]