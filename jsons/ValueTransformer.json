[
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "MatMul",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatMul"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Average",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Average"
  },
  {
    "label": "MinOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MinOp"
  },
  {
    "label": "MaxOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaxOp"
  },
  {
    "label": "SumOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SumOp"
  },
  {
    "label": "SumOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SumOp"
  },
  {
    "label": "MultOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultOp"
  },
  {
    "label": "SharedOpApplier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedOpApplier"
  },
  {
    "label": "CopyableOpApplier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyableOpApplier"
  },
  {
    "label": "SharedOpTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedOpTransformer"
  },
  {
    "label": "SharedOpTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedOpTransformer"
  },
  {
    "label": "CopyableOpTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyableOpTransformer"
  },
  {
    "label": "CopyableOpTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyableOpTransformer"
  },
  {
    "label": "OpAccumulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpAccumulator"
  },
  {
    "label": "OpAccumulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpAccumulator"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "foreach(const IterT& iter, XformOp& op,\n    bool threaded = true, bool shareOp = true)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "foreach(const IterT& iter, const XformOp& op,\n    bool threaded = true, bool shareOp = true)"
  },
  {
    "label": "transformValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transformValues(const InIterT& inIter, OutGridT& outGrid,\n    XformOp& op, bool threaded = true, bool shareOp = true,\n    MergePolicy merge = MERGE_ACTIVE_STATES)"
  },
  {
    "label": "transformValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transformValues(const InIterT& inIter, OutGridT& outGrid,\n    const XformOp& op, bool threaded = true, bool shareOp = true,\n    MergePolicy merge = MERGE_ACTIVE_STATES)"
  },
  {
    "label": "accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "accumulate(const IterT& iter, XformOp& op, bool threaded = true)"
  },
  {
    "label": "setValueOnMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnMin(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "setValueOnMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnMax(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "setValueOnSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnSum(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "setValueOnMult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnMult(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (IterRange)",
    "insertText": "range(mIter)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (IterRange)",
    "insertText": "range(mIter)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (XformOp>)",
    "insertText": "proc(iter, op)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (Processor)",
    "insertText": "proc(iter, op)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (XformOp>)",
    "insertText": "proc(iter, op)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (IterRange)",
    "insertText": "range(mInputIter)"
  },
  {
    "label": "outAccessor()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<OutTreeT>)",
    "insertText": "outAccessor(*mOutputTree)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (IterRange)",
    "insertText": "range(mInputIter)"
  },
  {
    "label": "outAccessor()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<OutTreeT>)",
    "insertText": "outAccessor(*mOutputTree)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (IterRange)",
    "insertText": "range(mIter)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (XformOp>)",
    "insertText": "proc(iter, op)"
  }
]