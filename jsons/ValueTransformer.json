[
  {
    "label": "MinOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MinOp"
  },
  {
    "label": "MaxOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaxOp"
  },
  {
    "label": "SumOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SumOp"
  },
  {
    "label": "MultOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultOp"
  },
  {
    "label": "SharedOpApplier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedOpApplier"
  },
  {
    "label": "CopyableOpApplier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyableOpApplier"
  },
  {
    "label": "SharedOpTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedOpTransformer"
  },
  {
    "label": "CopyableOpTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyableOpTransformer"
  },
  {
    "label": "OpAccumulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpAccumulator"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_VALUETRANSFORMER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_VALUETRANSFORMER_HAS_BEEN_INCLUDED # include<algorithm> # include<tbb / parallel_for . h> # include<tbb / parallel_reduce . h> # include<openvdb / Types . h> # include<openvdb / Grid . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<IterT,XformOp> void)",
    "insertText": "foreach(const IterT& iter, XformOp& op, bool threaded = true, bool shareOp = true)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (template<IterT,XformOp> void)",
    "insertText": "foreach(const IterT& iter, const XformOp& op, bool threaded = true, bool shareOp = true)"
  },
  {
    "label": "transformValues()",
    "kind": "Method",
    "detail": "Function (template<InIterT,OutGridT,XformOp> void)",
    "insertText": "transformValues(const InIterT& inIter, OutGridT& outGrid, XformOp& op, bool threaded = true, bool shareOp = true, MergePolicy merge = MERGE_ACTIVE_STATES)"
  },
  {
    "label": "transformValues()",
    "kind": "Method",
    "detail": "Function (# ifndef _MSC_VER template<InIterT,OutGridT,XformOp> void)",
    "insertText": "transformValues(const InIterT& inIter, OutGridT& outGrid, const XformOp& op, bool threaded = true, bool shareOp = true, MergePolicy merge = MERGE_ACTIVE_STATES)"
  },
  {
    "label": "accumulate()",
    "kind": "Method",
    "detail": "Function (# endif template<IterT,XformOp> void)",
    "insertText": "accumulate(const IterT& iter, XformOp& op, bool threaded = true)"
  },
  {
    "label": "setValueOnMin()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "setValueOnMin(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "setValueOnMax()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "setValueOnMax(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "setValueOnSum()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "setValueOnSum(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "setValueOnMult()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "setValueOnMult(TreeT& tree, const Coord& xyz, const typename TreeT::ValueType& value)"
  },
  {
    "label": "MinOp()",
    "kind": "Method",
    "detail": "Function (namespace valxform { template<ValueType> struct MinOp { const ValueType val ;)",
    "insertText": "MinOp(const ValueType& v): val(v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(ValueType& v)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (v = std::min<)",
    "insertText": "ValueType(v, val)"
  },
  {
    "label": "MaxOp()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueType> struct MaxOp { const ValueType val ;)",
    "insertText": "MaxOp(const ValueType& v): val(v)"
  },
  {
    "label": "SumOp()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueType> struct SumOp { const ValueType val ;)",
    "insertText": "SumOp(const ValueType& v): val(v)"
  },
  {
    "label": "MultOp()",
    "kind": "Method",
    "detail": "Function (v = v | | val ; } } ; template<ValueType> struct MultOp { const ValueType val ;)",
    "insertText": "MultOp(const ValueType& v): val(v)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "modifyValue(xyz, valxform::MinOp<typename TreeT::ValueType>(value))"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "modifyValue(xyz, valxform::MaxOp<typename TreeT::ValueType>(value))"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "modifyValue(xyz, valxform::SumOp<typename TreeT::ValueType>(value))"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "modifyValue(xyz, valxform::MultOp<typename TreeT::ValueType>(value))"
  },
  {
    "label": "SharedOpApplier()",
    "kind": "Method",
    "detail": "Function (} namespace valxform { template<IterT,OpT> class SharedOpApplier { public : using IterRange = tree::IteratorRange<IterT> ;)",
    "insertText": "SharedOpApplier(const IterT& iter, OpT& op): mIter(iter), mOp(op)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "process(bool threaded = true)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (IterRange)",
    "insertText": "range(mIter)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(IterRange& r)"
  },
  {
    "label": "CopyableOpApplier()",
    "kind": "Method",
    "detail": "Function (} private : IterT mIter ; OpT& mOp ; } ; template<IterT,OpT> class CopyableOpApplier { public : using IterRange = tree::IteratorRange<IterT> ;)",
    "insertText": "CopyableOpApplier(const IterT& iter, const OpT& op): mIter(iter), mOp(op), mOrigOp(&op)"
  },
  {
    "label": "CopyableOpApplier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CopyableOpApplier(const CopyableOpApplier& other): mIter(other.mIter), mOp(*other.mOrigOp), mOrigOp(other.mOrigOp)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} private : IterT mIter ; OpT mOp ; OpT const* const mOrigOp ; } ; } template<IterT,XformOp> void)",
    "insertText": "foreach(const IterT& iter, XformOp& op, bool threaded, bool shared)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (valxform::SharedOpApplier<IterT,XformOp>)",
    "insertText": "proc(iter, op)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (proc .)",
    "insertText": "process(threaded)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} } template<IterT,XformOp> void)",
    "insertText": "foreach(const IterT& iter, const XformOp& op, bool threaded, bool)"
  },
  {
    "label": "SharedOpTransformer()",
    "kind": "Method",
    "detail": "Function (} namespace valxform { template<InIterT,OutTreeT,OpT> class SharedOpTransformer { public : using InTreeT = InIterT::TreeT ; using IterRange = tree::IteratorRange<InIterT> ; using OutValueT = OutTreeT::ValueType ;)",
    "insertText": "SharedOpTransformer(const InIterT& inIter, OutTreeT& outTree, OpT& op, MergePolicy merge): mIsRoot(true), mInputIter(inIter), mInputTree(inIter.getTree()), mOutputTree(&outTree), mOp(op), mMergePolicy(merge)"
  },
  {
    "label": "OPENVDB_LOG_INFO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_LOG_INFO(\"use tools::foreach(), not transformValues(),\" \" to transform a grid in place\")"
  },
  {
    "label": "SharedOpTransformer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "SharedOpTransformer(SharedOpTransformer& other, tbb::split): mIsRoot(false), mInputIter(other.mInputIter), mInputTree(other.mInputTree), mOutputTree(new OutTreeT(zeroVal<OutValueT>())), mOp(other.mOp), mMergePolicy(other.mMergePolicy)"
  },
  {
    "label": "SharedOpTransformer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SharedOpTransformer()"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (IterRange)",
    "insertText": "range(mInputIter)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(range, *this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(IterRange& range)"
  },
  {
    "label": "outAccessor()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<OutTreeT>)",
    "insertText": "outAccessor(*mOutputTree)"
  },
  {
    "label": "mOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mOp(range.iterator(), outAccessor)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "join(const SharedOpTransformer& other)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (mOutputTree ->)",
    "insertText": "merge(*other.mOutputTree, mMergePolicy)"
  },
  {
    "label": "CopyableOpTransformer()",
    "kind": "Method",
    "detail": "Function (} } private : bool mIsRoot ; InIterT mInputIter ; const InTreeT* mInputTree ; OutTreeT* mOutputTree ; OpT& mOp ; MergePolicy mMergePolicy ; } ; template<InIterT,OutTreeT,OpT> class CopyableOpTransformer { public : using InTreeT = InIterT::TreeT ; using IterRange = tree::IteratorRange<InIterT> ; using OutValueT = OutTreeT::ValueType ;)",
    "insertText": "CopyableOpTransformer(const InIterT& inIter, OutTreeT& outTree, const OpT& op, MergePolicy merge): mIsRoot(true), mInputIter(inIter), mInputTree(inIter.getTree()), mOutputTree(&outTree), mOp(op), mOrigOp(&op), mMergePolicy(merge)"
  },
  {
    "label": "CopyableOpTransformer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CopyableOpTransformer(CopyableOpTransformer& other, tbb::split): mIsRoot(false), mInputIter(other.mInputIter), mInputTree(other.mInputTree), mOutputTree(new OutTreeT(zeroVal<OutValueT>())), mOp(*other.mOrigOp), mOrigOp(other.mOrigOp), mMergePolicy(other.mMergePolicy)"
  },
  {
    "label": "CopyableOpTransformer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CopyableOpTransformer()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "join(const CopyableOpTransformer& other)"
  },
  {
    "label": "transformValues()",
    "kind": "Method",
    "detail": "Function (} } private : bool mIsRoot ; InIterT mInputIter ; const InTreeT* mInputTree ; OutTreeT* mOutputTree ; OpT mOp ; OpT const* const mOrigOp ; MergePolicy mMergePolicy ; } ; } template<InIterT,OutGridT,XformOp> void)",
    "insertText": "transformValues(const InIterT& inIter, OutGridT& outGrid, XformOp& op, bool threaded, bool shared, MergePolicy merge)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using Adapter = TreeAdapter<OutGridT> ; using OutTreeT = Adapter::TreeType ;)",
    "insertText": "if(shared)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (using Processor = valxform::SharedOpTransformer<InIterT,OutTreeT,XformOp> ; Processor)",
    "insertText": "proc(inIter, Adapter::tree(outGrid), op, merge)"
  },
  {
    "label": "transformValues()",
    "kind": "Method",
    "detail": "Function (} } # ifndef _MSC_VER template<InIterT,OutGridT,XformOp> void)",
    "insertText": "transformValues(const InIterT& inIter, OutGridT& outGrid, const XformOp& op, bool threaded, bool , MergePolicy merge)"
  },
  {
    "label": "OpAccumulator()",
    "kind": "Method",
    "detail": "Function (} # endif namespace valxform { template<IterT,OpT> class OpAccumulator { public : using IterRange = tree::IteratorRange<IterT> ;)",
    "insertText": "OpAccumulator(const IterT& iter, OpT& op): mIsRoot(true), mIter(iter), mOp(&op), mOrigOp(new OpT(op))"
  },
  {
    "label": "OpAccumulator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OpAccumulator(OpAccumulator& other, tbb::split): mIsRoot(false), mIter(other.mIter), mOp(new OpT(*other.mOrigOp)), mOrigOp(other.mOrigOp)"
  },
  {
    "label": "OpAccumulator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "OpAccumulator()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(OpAccumulator& other)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (mOp ->)",
    "insertText": "join(*other.mOp)"
  },
  {
    "label": "accumulate()",
    "kind": "Method",
    "detail": "Function (} private : const bool mIsRoot ; const IterT mIter ; OpT* mOp ; OpT const* const mOrigOp ; } ; } template<IterT,XformOp> void)",
    "insertText": "accumulate(const IterT& iter, XformOp& op, bool threaded)"
  }
]