[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FStructuredArchiveSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveSlot"
  },
  {
    "label": "FPackageId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageId"
  },
  {
    "label": "FPackageId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / StringFwd . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" UObject / NameTypes . h \" class FArchive ; class FStructuredArchiveSlot ; # ifndef WITH_PACKAGEID_NAME_MAP # define WITH_PACKAGEID_NAME_MAP WITH_EDITOR # endif class FPackageId { uint64 InvalidId = 0 ; uint64 Id = InvalidId ;)",
    "insertText": "FPackageId(uint64 InId): Id(InId)"
  },
  {
    "label": "FPackageId()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FPackageId()"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (FPackageId)",
    "insertText": "FromName(const FName& Name)"
  },
  {
    "label": "FromValue()",
    "kind": "Method",
    "detail": "Function (FPackageId)",
    "insertText": "FromValue(const uint64 Value)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackageId& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FStructuredArchiveSlot Slot, FPackageId& Value)"
  },
  {
    "label": "SerializeForLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForLog(FCbWriter& Writer, const FPackageId& Value)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (# if WITH_PACKAGEID_NAME_MAP FName)",
    "insertText": "GetName()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# endif } ; FString)",
    "insertText": "LexToString(const FPackageId& PackageId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FPackageId& PackageId)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "Appendf(CHARTEXT(CharType, \"0x%llX\"), PackageId.Value())"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (# if WITH_PACKAGEID_NAME_MAP)",
    "insertText": "Builder(\" << PackageId.GetName() << \")"
  }
]