[
  {
    "label": "IEX_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEX_EXPORT_TYPE"
  },
  {
    "label": "BaseExc()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IEXBASEEXC_H # define INCLUDED_IEXBASEEXC_H # include \" IexExport . h \" # include \" IexNamespace . h \" # include<exception> # include<sstream> # include<string> IEX_INTERNAL_NAMESPACE_HEADER_ENTER class IEX_EXPORT_TYPE BaseExc : public std::exception { public : IEX_EXPORT)",
    "insertText": "BaseExc(const char* s = nullptr)"
  },
  {
    "label": "BaseExc()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT)",
    "insertText": "BaseExc(const std::string& s)"
  },
  {
    "label": "BaseExc()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT)",
    "insertText": "BaseExc(std::string&& s)"
  },
  {
    "label": "BaseExc()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT)",
    "insertText": "BaseExc(std::stringstream& s)"
  },
  {
    "label": "BaseExc()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT)",
    "insertText": "BaseExc(const BaseExc& be)"
  },
  {
    "label": "BaseExc()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT)",
    "insertText": "BaseExc(BaseExc&& be)"
  },
  {
    "label": "BaseExc()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT ~)",
    "insertText": "BaseExc()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "operator(const BaseExc& be)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "operator(BaseExc&& be)"
  },
  {
    "label": "what()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT const char*)",
    "insertText": "what()"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "assign(std::stringstream& s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "operator(std::stringstream& s)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "append(std::stringstream& s)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "assign(const char* s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "operator(const char* s)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT BaseExc&)",
    "insertText": "append(const char* s)"
  },
  {
    "label": "message()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT const std::string&)",
    "insertText": "message()"
  },
  {
    "label": "stackTrace()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT const std::string&)",
    "insertText": "stackTrace()"
  },
  {
    "label": "DEFINE_EXC_EXP()",
    "kind": "Method",
    "detail": "Function (private : std::string _message ; std::string _stackTrace ; } ; # define)",
    "insertText": "DEFINE_EXC_EXP(exp, name, base)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ exp)",
    "insertText": "name()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ exp)",
    "insertText": "name(const char* text)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ exp)",
    "insertText": "name(const std::string& text)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ exp)",
    "insertText": "name(std::string&& text)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ exp)",
    "insertText": "name(std::stringstream& text)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ exp)",
    "insertText": "name(const name& other)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ exp)",
    "insertText": "name(name&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ exp name&)",
    "insertText": "operator(name& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ exp name&)",
    "insertText": "operator(name&& other)"
  },
  {
    "label": "DEFINE_EXC_EXP_IMPL()",
    "kind": "Method",
    "detail": "Function (\\ } ; # define)",
    "insertText": "DEFINE_EXC_EXP_IMPL(exp, name, base) \\ exp name::name () : base ()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} \\ exp)",
    "insertText": "name(const char* text) : base (text)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} \\ exp)",
    "insertText": "name(const std::string& text) : base (text)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} \\ exp)",
    "insertText": "name(std::string&& text) : base (std::move (text))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} \\ exp)",
    "insertText": "name(std::stringstream& text) : base (text)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} \\ exp)",
    "insertText": "name(const name& other) : base (other)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} \\ exp)",
    "insertText": "name(name&& other) noexcept : base (other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "operator(other)"
  },
  {
    "label": "DEFINE_EXC()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DEFINE_EXC(name, base) DEFINE_EXC_EXP (, name, base) DEFINE_EXC_EXP ( IEX_EXPORT, ArgExc, BaseExc) DEFINE_EXC_EXP ( IEX_EXPORT, LogicExc, BaseExc) DEFINE_EXC_EXP ( IEX_EXPORT, InputExc, BaseExc) DEFINE_EXC_EXP (IEX_EXPORT, IoExc, BaseExc) DEFINE_EXC_EXP ( IEX_EXPORT, MathExc, BaseExc) DEFINE_EXC_EXP ( IEX_EXPORT, ErrnoExc, BaseExc) DEFINE_EXC_EXP ( IEX_EXPORT, NoImplExc, BaseExc) DEFINE_EXC_EXP ( IEX_EXPORT, NullExc, BaseExc) DEFINE_EXC_EXP ( IEX_EXPORT, TypeExc, BaseExc) typedef std::string (*StackTracer) ()"
  },
  {
    "label": "setStackTracer()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT void)",
    "insertText": "setStackTracer(StackTracer stackTracer)"
  },
  {
    "label": "stackTracer()",
    "kind": "Method",
    "detail": "Function (IEX_EXPORT StackTracer)",
    "insertText": "stackTracer()"
  }
]