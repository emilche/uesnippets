[
  {
    "label": "FMockBuildPatchProgress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockBuildPatchProgress"
  },
  {
    "label": "SetPaused()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BuildPatchProgress . h \" # include \" Tests / TestHelpers . h \" # include \" Common / StatsCollector . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockBuildPatchProgress : public FBuildPatchProgress { public : typedef TTuple<double,EBuildPatchState,float> FSetStateProgress ; public : void)",
    "insertText": "SetPaused(bool bIsPaused)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::SetPaused\")"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Abort()"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::Abort\")"
  },
  {
    "label": "SetStateProgress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStateProgress(const EBuildPatchState& State, const float& Value)"
  },
  {
    "label": "SetStateProgressFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateProgressFunc(State, Value)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxSetStateProgress .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), State, Value)"
  },
  {
    "label": "SetStateWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStateWeight(const EBuildPatchState& State, const float& Value)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::SetStateWeight\")"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (} EBuildPatchState)",
    "insertText": "GetState()"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::GetState\")"
  },
  {
    "label": "GetProgress()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetProgress()"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::GetProgress\")"
  },
  {
    "label": "GetProgressNoMarquee()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetProgressNoMarquee()"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::GetProgressNoMarquee\")"
  },
  {
    "label": "GetStateProgress()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetStateProgress(const EBuildPatchState& State)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::GetStateProgress\")"
  },
  {
    "label": "GetStateWeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetStateWeight(const EBuildPatchState& State)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::GetStateWeight\")"
  },
  {
    "label": "TogglePauseState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TogglePauseState()"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::TogglePauseState\")"
  },
  {
    "label": "WaitWhilePaused()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "WaitWhilePaused()"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::WaitWhilePaused\")"
  },
  {
    "label": "GetPauseState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetPauseState()"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::GetPauseState\")"
  },
  {
    "label": "SetIsDownloading()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsDownloading(bool bInIsDownloading)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockBuildPatchProgress::SetIsDownloading\")"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} public : TArray<FSetStateProgress> RxSetStateProgress ; TFunction<)",
    "insertText": "void(const EBuildPatchState&, const float&)"
  }
]