[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "UK2Node_FormatText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_FormatText"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FFormatTextDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatTextDetails"
  },
  {
    "label": "IDetailCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCustomization"
  },
  {
    "label": "FFormatTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatTextLayout"
  },
  {
    "label": "FFormatTextArgumentLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatTextArgumentLayout"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformMath . h \" # include \" IDetailCustomNodeBuilder . h \" # include \" IDetailCustomization . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FDetailWidgetRow ; class IDetailChildrenBuilder ; class IDetailLayoutBuilder ; class SEditableTextBox ; class UK2Node_FormatText ; class UPackage ; class FFormatTextDetails : public IDetailCustomization { public : TSharedRef<class IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "FFormatTextDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatTextDetails() : TargetNode(NULL)"
  },
  {
    "label": "FFormatTextDetails()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFormatTextDetails()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailLayout)"
  },
  {
    "label": "OnForceRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnForceRefresh()"
  },
  {
    "label": "OnAddNewArgument()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnAddNewArgument()"
  },
  {
    "label": "OnEditorPackageModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorPackageModified(UPackage* Package)"
  },
  {
    "label": "CanEditArguments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditArguments()"
  },
  {
    "label": "FFormatTextLayout()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<class FFormatTextLayout> Layout ; UK2Node_FormatText* TargetNode ; } ; class FFormatTextLayout : public IDetailCustomNodeBuilder,public TSharedFromThis<FFormatTextLayout> { public :)",
    "insertText": "FFormatTextLayout(UK2Node_FormatText* InTargetNode) : TargetNode(InTargetNode)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Refresh()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnRebuildChildren .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "CausedChange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CausedChange()"
  },
  {
    "label": "SetOnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetOnRebuildChildren(FSimpleDelegate InOnRegenerateChildren)"
  },
  {
    "label": "GenerateHeaderRowContent()",
    "kind": "Method",
    "detail": "Function (OnRebuildChildren = InOnRegenerateChildren ; } void)",
    "insertText": "GenerateHeaderRowContent(FDetailWidgetRow& NodeRow)"
  },
  {
    "label": "GenerateChildContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateChildContent(IDetailChildrenBuilder& ChildrenBuilder)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RequiresTick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresTick()"
  },
  {
    "label": "OnMoveArgumentUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMoveArgumentUp()"
  },
  {
    "label": "OnMoveArgumentDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMoveArgumentDown()"
  },
  {
    "label": "OnArgumentRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArgumentRemove()"
  },
  {
    "label": "OnArgumentNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArgumentNameCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnArgumentNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArgumentNameChanged(const FText& NewText)"
  },
  {
    "label": "IsValidArgumentName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidArgumentName(const FText& InNewText)"
  }
]