[
  {
    "label": "ConjugateGradient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConjugateGradient"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "conjugate_gradient()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CONJUGATE_GRADIENT_H # define EIGEN_CONJUGATE_GRADIENT_H namespace Eigen { namespace internal { template<MatrixType,Rhs,Dest,Preconditioner> EIGEN_DONT_INLINE void)",
    "insertText": "conjugate_gradient(const MatrixType& mat, const Rhs& rhs, Dest& x, const Preconditioner& precond, Index& iters, typename Dest::RealScalar& tol_error)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; typedef Dest::RealScalar RealScalar ; typedef Dest::Scalar Scalar ; typedef Matrix<Scalar,Dynamic,1> VectorType ; RealScalar tol = tol_error ; Index maxIters = iters ; Index n = mat .)",
    "insertText": "cols()"
  },
  {
    "label": "squaredNorm()",
    "kind": "Method",
    "detail": "Function (VectorType residual = rhs - mat* x ; RealScalar rhsNorm2 = rhs .)",
    "insertText": "squaredNorm()"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "setZero()"
  },
  {
    "label": "considerAsZero()",
    "kind": "Method",
    "detail": "Function (iters = 0 ; tol_error = 0 ; return ; } const RealScalar)",
    "insertText": "considerAsZero(std::numeric_limits<RealScalar>::min)()"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (RealScalar threshold =)",
    "insertText": "maxi(RealScalar(tol*tol*rhsNorm2),considerAsZero)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (iters = 0 ; tol_error =)",
    "insertText": "sqrt(residualNorm2 / rhsNorm2)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (p = precond .)",
    "insertText": "solve(residual)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "z(n), tmp(n)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (RealScalar absNew =)",
    "insertText": "real(residual.dot(p))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "while(i < maxIters)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "noalias()"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (Scalar alpha = absNew / p .)",
    "insertText": "dot(tmp)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (RealScalar absOld = absNew ; absNew =)",
    "insertText": "real(residual.dot(z))"
  },
  {
    "label": "ConjugateGradient()",
    "kind": "Method",
    "detail": "Function (iters = i ; } } template<_MatrixType,int _UpLo = Lower,_Preconditioner = DiagonalPreconditioner<_MatrixType::Scalar>> class ConjugateGradient ; namespace internal { template<_MatrixType,int _UpLo,_Preconditioner> struct traits<ConjugateGradient<_MatrixType,_UpLo,_Preconditioner>> { typedef _MatrixType MatrixType ; typedef _Preconditioner Preconditioner ; } ; } template<_MatrixType,int _UpLo,_Preconditioner> class ConjugateGradient : public IterativeSolverBase<ConjugateGradient<_MatrixType,_UpLo,_Preconditioner>> { typedef IterativeSolverBase<ConjugateGradient> Base ; using Base::matrix ; using Base::m_error ; using Base::m_iterations ; using Base::m_info ; using Base::m_isInitialized ; public : typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef _Preconditioner Preconditioner ; enum { UpLo = _UpLo } ; public :)",
    "insertText": "ConjugateGradient() : Base()"
  },
  {
    "label": "ConjugateGradient()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived>)",
    "insertText": "ConjugateGradient(const EigenBase<MatrixDerived>& A) : Base(A.derived())"
  },
  {
    "label": "ConjugateGradient()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ConjugateGradient()"
  },
  {
    "label": "_solve_vector_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_vector_with_guess_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "TransposeInput()",
    "kind": "Method",
    "detail": "Function (typedef Base::MatrixWrapper MatrixWrapper ; typedef Base::ActualMatrixType ActualMatrixType ; enum {)",
    "insertText": "TransposeInput(!MatrixWrapper::MatrixFree) && (UpLo==(Lower|Upper)) && (!MatrixType::IsRowMajor) && (!NumTraits<Scalar>::IsComplex)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<TransposeInput,Transpose<const ActualMatrixType>,ActualMatrixType const&>::type RowMajorWrapper ;)",
    "insertText": "EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(MatrixWrapper::MatrixFree,UpLo==(Lower|Upper)),MATRIX_FREE_CONJUGATE_GRADIENT_IS_COMPATIBLE_WITH_UPPER_UNION_LOWER_MODE_ONLY)"
  },
  {
    "label": "UpLo()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<)",
    "insertText": "UpLo(Lower|Upper)"
  },
  {
    "label": "maxIterations()",
    "kind": "Method",
    "detail": "Function (m_iterations =)",
    "insertText": "maxIterations()"
  },
  {
    "label": "row_mat()",
    "kind": "Method",
    "detail": "Function (m_error = Base::m_tolerance ; RowMajorWrapper)",
    "insertText": "row_mat(matrix())"
  },
  {
    "label": "conjugate_gradient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "conjugate_gradient(SelfAdjointWrapper(row_mat), b, x, Base::m_preconditioner, m_iterations, m_error)"
  }
]