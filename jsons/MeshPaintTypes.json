[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshPaintParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshPaintParameters"
  },
  {
    "label": "FTexturePaintTriangleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTexturePaintTriangleInfo"
  },
  {
    "label": "FPaintableTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintableTexture"
  },
  {
    "label": "FPaintTexture2DData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintTexture2DData"
  },
  {
    "label": "FTextureTargetListInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureTargetListInfo"
  },
  {
    "label": "FMeshSelectedMaterialInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshSelectedMaterialInfo"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / Texture . h \" # include \" Engine / TextureRenderTarget2D . h \" # include \" Materials / MaterialInterface . h \" # include \" Templates / Requires . h \" # include<type_traits> # include \" MeshPaintTypes . generated . h \" enum class EMeshPaintAction : uint8 { Paint,Erase } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FPaintableTexture()",
    "kind": "Method",
    "detail": "Function (ComponentInstance,Mesh } ; class FMeshPaintParameters { public : EMeshPaintMode PaintMode ; EMeshPaintAction PaintAction ; FVector BrushPosition ; FVector BrushNormal ; FLinearColor BrushColor ; float SquaredBrushRadius ; float BrushRadialFalloffRange ; float InnerBrushRadius ; float BrushDepth ; float BrushDepthFalloffRange ; float InnerBrushDepth ; float BrushStrength ; FMatrix BrushToWorldMatrix ; FMatrix InverseBrushToWorldMatrix ; bool bWriteRed ; bool bWriteGreen ; bool bWriteBlue ; bool bWriteAlpha ; int32 TotalWeightCount ; int32 PaintWeightIndex ; int32 UVChannel ; } ; struct FTexturePaintTriangleInfo { FVector TriVertices [ 3 ] ; FVector2D TrianglePoints [ 3 ] ; FVector2D TriUVs [ 3 ] ; } ; struct FPaintableTexture { UTexture* Texture ; int32 UVChannelIndex ;)",
    "insertText": "FPaintableTexture() : Texture(nullptr) , UVChannelIndex(0)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<T, UTexture*>) > FPaintableTexture(T InTexture, uint32 InUVChannelIndex = 0) : Texture(InTexture) , UVChannelIndex(InUVChannelIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPaintableTexture& rhs)"
  },
  {
    "label": "FPaintTexture2DData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPaintTexture2DData { TObjectPtr<UTexture2D> PaintingTexture2D ; bool bIsPaintingTexture2DModified ; UTexture2D* PaintingTexture2DDuplicate ; TObjectPtr<UTextureRenderTarget2D> PaintRenderTargetTexture ; TObjectPtr<UTextureRenderTarget2D> CloneRenderTargetTexture ; TArray<TObjectPtr<UMaterialInterface>> PaintingMaterials ;)",
    "insertText": "FPaintTexture2DData() : PaintingTexture2D(nullptr), bIsPaintingTexture2DModified(false), PaintingTexture2DDuplicate(nullptr), PaintRenderTargetTexture(nullptr), CloneRenderTargetTexture(nullptr)"
  },
  {
    "label": "FPaintTexture2DData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPaintTexture2DData(UTexture2D* InPaintingTexture2D, bool InbIsPaintingTexture2DModified = false) : PaintingTexture2D(InPaintingTexture2D), bIsPaintingTexture2DModified(InbIsPaintingTexture2DModified), PaintRenderTargetTexture(nullptr), CloneRenderTargetTexture(nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(PaintingTexture2D)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(PaintRenderTargetTexture)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(CloneRenderTargetTexture)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(PaintingMaterials[Index])"
  },
  {
    "label": "FTextureTargetListInfo()",
    "kind": "Method",
    "detail": "Function (} } } ; namespace MeshPaintDefs { const int32 MaxSupportedPhysicalWeights = 4 ; const int32 MaxSupportedWeights = MaxSupportedPhysicalWeights + 1 ; } struct FTextureTargetListInfo { UTexture2D* TextureData ; bool bIsSelected ; uint32 UndoCount ; uint32 UVChannelIndex ;)",
    "insertText": "FTextureTargetListInfo(UTexture2D* InTextureData, int32 InUVChannelIndex, bool InbIsSelected = false) : TextureData(InTextureData) , bIsSelected(InbIsSelected) , UndoCount(0) , UVChannelIndex(InUVChannelIndex)"
  },
  {
    "label": "FMeshSelectedMaterialInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMeshSelectedMaterialInfo { int32 NumMaterials ; int32 SelectedMaterialIndex ;)",
    "insertText": "FMeshSelectedMaterialInfo(int32 InNumMaterials) : NumMaterials(InNumMaterials) , SelectedMaterialIndex(0)"
  }
]