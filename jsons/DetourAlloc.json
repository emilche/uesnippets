[
  {
    "label": "dtAllocHint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtAllocHint"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "dtScopedDelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtScopedDelete"
  },
  {
    "label": "dtIntArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtIntArray"
  },
  {
    "label": "dtChunkArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtChunkArray"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURALLOCATOR_H # define DETOURALLOCATOR_H # include \" CoreMinimal . h \" # include \" Detour / DetourAssert . h \" enum dtAllocHint { DT_ALLOC_TEMP,DT_ALLOC_PERM_AVOIDANCE,DT_ALLOC_PERM_CROWD,DT_ALLOC_PERM_LOOKUP,DT_ALLOC_PERM_NAVMESH,DT_ALLOC_PERM_NAVQUERY,DT_ALLOC_PERM_NODE_POOL,DT_ALLOC_PERM_PATH_CORRIDOR,DT_ALLOC_PERM_PATH_QUEUE,DT_ALLOC_PERM_PROXIMITY_GRID,DT_ALLOC_PERM_TILE_CACHE_LAYER,DT_ALLOC_PERM_TILE_DATA,DT_ALLOC_PERM_TILE_DYNLINK_OFFMESH,DT_ALLOC_PERM_TILE_DYNLINK_CLUSTER,DT_ALLOC_PERM_TILES,DT_ALLOC_PERM_TILE_LINK_BUILDER,} ; typedef)",
    "insertText": "void(dtAllocFunc)(int size, dtAllocHint hint)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(dtFreeFunc)(void* ptr, dtAllocHint hint)"
  },
  {
    "label": "dtAllocSetCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtAllocSetCustom(dtAllocFunc *allocFunc, dtFreeFunc *freeFunc)"
  },
  {
    "label": "dtAlloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "dtAlloc(int size, dtAllocHint hint)"
  },
  {
    "label": "dtFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFree(void* ptr, dtAllocHint hint)"
  },
  {
    "label": "dtMemCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtMemCpy(void* dst, void* src, int size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class T> class dtScopedDelete { T* ptr ; T*)",
    "insertText": "operator(T* p)"
  },
  {
    "label": "dtScopedDelete()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "dtScopedDelete() : ptr(0)"
  },
  {
    "label": "dtScopedDelete()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dtScopedDelete(int n)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "n(T*)dtAlloc(sizeof(T)*n, DT_ALLOC_TEMP)"
  },
  {
    "label": "dtScopedDelete()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dtScopedDelete(T* p) : ptr(p)"
  },
  {
    "label": "dtScopedDelete()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "dtScopedDelete()"
  },
  {
    "label": "dtFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFree(ptr, DT_ALLOC_TEMP)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (dtIntArray&)",
    "insertText": "operator(const dtIntArray&)"
  },
  {
    "label": "dtIntArray()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "dtIntArray() : m_data(0), m_size(0), m_cap(0)"
  },
  {
    "label": "dtIntArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dtIntArray(int n) : m_data(0), m_size(0), m_cap(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(n)"
  },
  {
    "label": "dtIntArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "dtIntArray()"
  },
  {
    "label": "dtFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFree(m_data, DT_ALLOC_TEMP)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(int n)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(int item)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(m_size+1)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (m_data [ m_size - 1 ] = item ; } int)",
    "insertText": "pop()"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "contains(int v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (dtChunkArray&)",
    "insertText": "operator(const dtChunkArray&)"
  },
  {
    "label": "dtChunkArray()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "dtChunkArray() : m_data(0), m_size(0), m_cap(0)"
  },
  {
    "label": "dtChunkArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dtChunkArray(int n) : m_data(0), m_size(0), m_cap(0)"
  },
  {
    "label": "dtChunkArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "dtChunkArray()"
  },
  {
    "label": "dtFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFree(m_data, TAllocHint)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(T item)"
  },
  {
    "label": "newData()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "newData(T*)dtAlloc(m_cap*sizeof(T), TAllocHint)"
  }
]