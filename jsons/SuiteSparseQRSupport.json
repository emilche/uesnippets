[
  {
    "label": "SPQR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPQR"
  },
  {
    "label": "SPQRMatrixQReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPQRMatrixQReturnType"
  },
  {
    "label": "SPQRMatrixQTransposeReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPQRMatrixQTransposeReturnType"
  },
  {
    "label": "SPQR_QProduct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPQR_QProduct"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SPQR()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SUITESPARSEQRSUPPORT_H # define EIGEN_SUITESPARSEQRSUPPORT_H namespace Eigen { template<MatrixType> class SPQR ; template<SPQRType> struct SPQRMatrixQReturnType ; template<SPQRType> struct SPQRMatrixQTransposeReturnType ; template<SPQRType,Derived> struct SPQR_QProduct ; namespace internal { template<SPQRType> struct traits<SPQRMatrixQReturnType<SPQRType>> { typedef SPQRType::MatrixType ReturnType ; } ; template<SPQRType> struct traits<SPQRMatrixQTransposeReturnType<SPQRType>> { typedef SPQRType::MatrixType ReturnType ; } ; template<SPQRType,Derived> struct traits<SPQR_QProduct<SPQRType,Derived>> { typedef Derived::PlainObject ReturnType ; } ; } template<_MatrixType> class SPQR : public SparseSolverBase<SPQR<_MatrixType>> { protected : typedef SparseSolverBase<SPQR<_MatrixType>> Base ; using Base::m_isInitialized ; public : typedef _MatrixType::Scalar Scalar ; typedef _MatrixType::RealScalar RealScalar ; typedef SuiteSparse_long StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> MatrixType ; typedef Map<PermutationMatrix<Dynamic,Dynamic,StorageIndex>> PermutationType ; enum { ColsAtCompileTime = Dynamic,MaxColsAtCompileTime = Dynamic } ; public :)",
    "insertText": "SPQR() : m_analysisIsOk(false), m_factorizationIsOk(false), m_isRUpToDate(false), m_ordering(SPQR_ORDERING_DEFAULT), m_allow_tol(SPQR_DEFAULT_TOL), m_tolerance (NumTraits<Scalar>::epsilon()), m_cR(0), m_E(0), m_H(0), m_HPinv(0), m_HTau(0), m_useDefaultThreshold(true)"
  },
  {
    "label": "cholmod_l_start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cholmod_l_start(&m_cc)"
  },
  {
    "label": "SPQR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SPQR(const _MatrixType& matrix) : m_analysisIsOk(false), m_factorizationIsOk(false), m_isRUpToDate(false), m_ordering(SPQR_ORDERING_DEFAULT), m_allow_tol(SPQR_DEFAULT_TOL), m_tolerance (NumTraits<Scalar>::epsilon()), m_cR(0), m_E(0), m_H(0), m_HPinv(0), m_HTau(0), m_useDefaultThreshold(true)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "SPQR()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SPQR()"
  },
  {
    "label": "SPQR_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SPQR_free()"
  },
  {
    "label": "cholmod_l_finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cholmod_l_finish(&m_cc)"
  },
  {
    "label": "cholmod_l_free_sparse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cholmod_l_free_sparse(&m_H, &m_cc)"
  },
  {
    "label": "cholmod_l_free_sparse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cholmod_l_free_sparse(&m_cR, &m_cc)"
  },
  {
    "label": "cholmod_l_free_dense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cholmod_l_free_dense(&m_HTau, &m_cc)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(m_E)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(m_HPinv)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute(const _MatrixType& matrix)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "mat(matrix)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealScalar pivotThreshold = m_tolerance ;)",
    "insertText": "if(m_useDefaultThreshold)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealScalar max2Norm = 0 . 0 ;)",
    "insertText": "for(int j = 0; j < mat.cols(); j++) max2Norm = numext::maxi(max2Norm, mat.col(j).norm())"
  },
  {
    "label": "pivotThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pivotThreshold(mat.rows() + mat.cols()) * max2Norm * NumTraits<RealScalar>::epsilon()"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (} cholmod_sparse A ; A =)",
    "insertText": "viewAsCholmod(mat)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (m_rows = matrix .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index col = matrix .)",
    "insertText": "cols()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (m_rank = SuiteSparseQR<)",
    "insertText": "Scalar(m_ordering, pivotThreshold, col, &A, &m_cR, &m_E, &m_H, &m_HPinv, &m_HTau, &m_cc)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \" The QR factorization should be computed first, call compute()\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(b.cols()==1 && \"This method is for vectors only\")"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (Dest::PlainObject y,y2 ; y =)",
    "insertText": "matrixQ().transpose()"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (Index rk = this ->)",
    "insertText": "rank()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (y2 = y ; y .)",
    "insertText": "resize((std::max)(cols(),Index(y.rows())),y.cols())"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (y .)",
    "insertText": "topRows(rk) = this->matrixR().topLeftCorner(rk, rk).template triangularView<Upper>().solve(y2.topRows(rk))"
  },
  {
    "label": "matrixR()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; } const MatrixType)",
    "insertText": "matrixR()"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (m_R = viewAsEigen<Scalar,ColMajor,)",
    "insertText": "StorageIndex(*m_cR)"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (m_isRUpToDate = true ; } return m_R ; } SPQRMatrixQReturnType<SPQR>)",
    "insertText": "matrixQ()"
  },
  {
    "label": "colsPermutation()",
    "kind": "Method",
    "detail": "Function (} PermutationType)",
    "insertText": "colsPermutation()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Decomposition is not initialized.\")"
  },
  {
    "label": "setPivotThreshold()",
    "kind": "Method",
    "detail": "Function (m_ordering = ord ; } void)",
    "insertText": "setPivotThreshold(const RealScalar& tol)"
  },
  {
    "label": "cholmodCommon()",
    "kind": "Method",
    "detail": "Function (m_useDefaultThreshold = false ; m_tolerance = tol ; } cholmod_common*)",
    "insertText": "cholmodCommon()"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResType> void)",
    "insertText": "evalTo(ResType& res)"
  },
  {
    "label": "viewAsCholmod()",
    "kind": "Method",
    "detail": "Function (y_cd =)",
    "insertText": "viewAsCholmod(m_other.const_cast_derived())"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (x_cd = SuiteSparseQR_qmult<)",
    "insertText": "Scalar(method, m_spqr.m_H, m_spqr.m_HTau, m_spqr.m_HPinv, &y_cd, cc)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (res = Matrix<Scalar,ResType::RowsAtCompileTime,ResType::ColsAtCompileTime)",
    "insertText": "Map(reinterpret_cast<Scalar*>(x_cd->x), x_cd->nrow, x_cd->ncol)"
  },
  {
    "label": "cholmod_l_free_dense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cholmod_l_free_dense(&x_cd, cc)"
  },
  {
    "label": "SPQRMatrixQReturnType()",
    "kind": "Method",
    "detail": "Function (} const SPQRType& m_spqr ; const Derived& m_other ; bool m_transpose ; } ; template<SPQRType> struct SPQRMatrixQReturnType {)",
    "insertText": "SPQRMatrixQReturnType(const SPQRType& spqr) : m_spqr(spqr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> SPQR_QProduct<SPQRType,Derived>)",
    "insertText": "operator(const MatrixBase<Derived>& other)"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} SPQRMatrixQTransposeReturnType<SPQRType>)",
    "insertText": "adjoint()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} SPQRMatrixQTransposeReturnType<SPQRType>)",
    "insertText": "transpose()"
  },
  {
    "label": "SPQRMatrixQTransposeReturnType()",
    "kind": "Method",
    "detail": "Function (} const SPQRType& m_spqr ; } ; template<SPQRType> struct SPQRMatrixQTransposeReturnType {)",
    "insertText": "SPQRMatrixQTransposeReturnType(const SPQRType& spqr) : m_spqr(spqr)"
  }
]