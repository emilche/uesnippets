[
  {
    "label": "RingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RingBuffer"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RING_BUFFER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RING_BUFFER_H_ # include<array> # include<cstring> # include<type_traits> # include \" api / array_view . h \" namespace webrtc { namespace rnn_vad { template<T,int S,int N> class RingBuffer {)",
    "insertText": "static_assert(S > 0, \"\")"
  },
  {
    "label": "RingBuffer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RingBuffer() : tail_(0)"
  },
  {
    "label": "RingBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RingBuffer(const RingBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RingBuffer&)",
    "insertText": "operator(const RingBuffer&)"
  },
  {
    "label": "RingBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RingBuffer()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (buffer_ .)",
    "insertText": "fill(0)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(rtc::ArrayView<const T, S> new_values)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer_.data() + S * tail_, new_values.data(), S * sizeof(T))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tail_ + = 1 ;)",
    "insertText": "if(tail_ == N)"
  },
  {
    "label": "GetArrayView()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const T,S>)",
    "insertText": "GetArrayView(int delay)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(0, delay)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(delay, N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int offset = tail_ - 1 - delay ;)",
    "insertText": "if(offset < 0)"
  }
]