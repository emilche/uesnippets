[
  {
    "label": "EDeformableConstraintType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDeformableConstraintType"
  },
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "FConstraintObjectAdded",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintObjectAdded"
  },
  {
    "label": "FConstraintObjectRemoved",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintObjectRemoved"
  },
  {
    "label": "FConstraintObjectUpdated",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintObjectUpdated"
  },
  {
    "label": "FConstraintObjectParticleHandel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintObjectParticleHandel"
  },
  {
    "label": "FConstraintManagerProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintManagerProxy"
  },
  {
    "label": "FConstraintsInputBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintsInputBuffer"
  },
  {
    "label": "FDeformableConstraintParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Deformable / ChaosDeformableSolverProxy . h \" # include \" CoreMinimal . h \" # include \" Chaos / Deformable / GaussSeidelWeakConstraints . h \" # include \" UObject / ObjectMacros . h \" namespace Chaos::Softs { enum EDeformableConstraintType { Kinematic,LinearSpring } ; struct FDeformableConstraintParameters {)",
    "insertText": "FDeformableConstraintParameters(float InStiffness = 100000.f, float InDamping = 1.f, EDeformableConstraintType InType = EDeformableConstraintType::Kinematic) : Type(InType) , Stiffness(InStiffness) , Damping(InDamping)"
  },
  {
    "label": "FConstraintObjectAdded()",
    "kind": "Method",
    "detail": "Function (} EDeformableConstraintType Type ; float Stiffness = 1 0 0 0 0 0 . f ; float Damping = 1 . f ; } ; typedef TTuple<const TObjectPtr<UObject>,const TObjectPtr<UObject>,EDeformableConstraintType> FConstraintObjectKey ; struct FConstraintObjectAdded : public FConstraintObjectKey {)",
    "insertText": "FConstraintObjectAdded(FConstraintObjectKey InKey = FConstraintObjectKey(), FDeformableConstraintParameters InParamaters = FDeformableConstraintParameters()) : FConstraintObjectKey(InKey) , Parameters(InParamaters)"
  },
  {
    "label": "FDeformableConstraintParameters()",
    "kind": "Method",
    "detail": "Function (} FDeformableConstraintParameters Parameters =)",
    "insertText": "FDeformableConstraintParameters()"
  },
  {
    "label": "FConstraintObjectRemoved()",
    "kind": "Method",
    "detail": "Function (} ; struct FConstraintObjectRemoved : public FConstraintObjectKey {)",
    "insertText": "FConstraintObjectRemoved(FConstraintObjectKey InKey = FConstraintObjectKey()) : FConstraintObjectKey(InKey)"
  },
  {
    "label": "FConstraintObjectUpdated()",
    "kind": "Method",
    "detail": "Function (} } ; struct FConstraintObjectUpdated : public FConstraintObjectKey {)",
    "insertText": "FConstraintObjectUpdated(FConstraintObjectKey InKey = FConstraintObjectKey(), FDeformableConstraintParameters InParamaters = FDeformableConstraintParameters()) : FConstraintObjectKey(InKey) , Parameters(InParamaters)"
  },
  {
    "label": "FConstraintObjectParticleHandel()",
    "kind": "Method",
    "detail": "Function (} ; struct FConstraintObjectParticleHandel {)",
    "insertText": "FConstraintObjectParticleHandel(int32 InSourceParticleIndex = INDEX_NONE, int32 InTargetParticleIndex = INDEX_NONE) : SourceParticleIndex(InSourceParticleIndex) , TargetParticleIndex(InTargetParticleIndex)"
  },
  {
    "label": "FConstraintManagerProxy()",
    "kind": "Method",
    "detail": "Function (} int32 SourceParticleIndex = INDEX_NONE ; int32 TargetParticleIndex = INDEX_NONE ; TArray<const Chaos::Softs::FGaussSeidelWeakConstraints<Softs::FSolverReal,Softs::FSolverParticles>::FGaussSeidelConstraintHandle*> Handles ; } ; class FConstraintManagerProxy : public FThreadingProxy { public : typedef FThreadingProxy Super ;)",
    "insertText": "FConstraintManagerProxy(UObject* InOwner) : Super(InOwner, TypeName())"
  },
  {
    "label": "TypeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "TypeName()"
  },
  {
    "label": "FConstraintsInputBuffer()",
    "kind": "Method",
    "detail": "Function (} class FConstraintsInputBuffer : public FThreadingProxy::FBuffer { typedef FThreadingProxy::FBuffer Super ; public : typedef FConstraintManagerProxy Source ;)",
    "insertText": "FConstraintsInputBuffer(const TArray<FConstraintObjectAdded>& InAdded , const TArray<FConstraintObjectRemoved>& InRemoved , const TArray<FConstraintObjectUpdated>& InUpdate , const UObject* InOwner) : Super(InOwner, FConstraintManagerProxy::TypeName()) , Added(InAdded) , Removed(InRemoved) , Updated(InUpdate)"
  }
]