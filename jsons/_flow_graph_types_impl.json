[
  {
    "label": "KeyTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KeyTrait"
  },
  {
    "label": "PT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PT"
  },
  {
    "label": "wrap_tuple_elements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wrap_tuple_elements"
  },
  {
    "label": "wrap_key_tuple_elements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wrap_key_tuple_elements"
  },
  {
    "label": "sequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sequence"
  },
  {
    "label": "make_sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_sequence"
  },
  {
    "label": "initializer_list_wrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "initializer_list_wrapper"
  },
  {
    "label": "Wrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Wrapper"
  },
  {
    "label": "_unwind_space",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_unwind_space"
  },
  {
    "label": "_unwind_class",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_unwind_class"
  },
  {
    "label": "T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T1"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "pick_one",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pick_one"
  },
  {
    "label": "Selector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Selector"
  },
  {
    "label": "pick_max",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pick_max"
  },
  {
    "label": "size_of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "size_of"
  },
  {
    "label": "Tuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tuple"
  },
  {
    "label": "pick_tuple_max",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pick_tuple_max"
  },
  {
    "label": "Q",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Q"
  },
  {
    "label": "is_element_of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_element_of"
  },
  {
    "label": "ERROR_Type_Not_allowed_In_Tagged_Msg_Not_Member_Of_Tuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ERROR_Type_Not_allowed_In_Tagged_Msg_Not_Member_Of_Tuple"
  },
  {
    "label": "do_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "do_if"
  },
  {
    "label": "tagged_null_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagged_null_type"
  },
  {
    "label": "tagged_msg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tagged_msg"
  },
  {
    "label": "variant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "variant"
  },
  {
    "label": "op_stat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "op_stat"
  },
  {
    "label": "initializer_list_wrapper()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__flow_graph_types_impl_H # define __TBB__flow_graph_types_impl_H # ifndef __TBB_flow_graph_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif namespace internal { template<Kp,KHashp,Tp> struct KeyTrait { typedef Kp K ; typedef Tp T ; typedef internal::type_to_key_function_body<T,K> TtoK ; typedef KHashp KHash ; } ; template<int N,template<class> class PT,TypeTuple> struct wrap_tuple_elements ; template<int N,template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements ; # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT&& __TBB_CPP11_VARIADIC_TUPLE_PRESENT template<int N,template<class> class PT,. . . Args> struct wrap_tuple_elements<N,PT,tbb::flow::tuple<Args . . .>> { typedef tbb::flow::tuple<PT<Args> . . .> type ; } ; template<int N,template<class> class PT,KeyTraits,. . . Args> struct wrap_key_tuple_elements<N,PT,KeyTraits,tbb::flow::tuple<Args . . .>> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef tbb::flow::tuple<PT<KeyTrait<K,KHash,Args>> . . .> type ; } ; # else template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<1,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<1,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef tbb::flow::tuple<PT<KeyTrait0>> type ; } ; template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<2,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<2,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>> type ; } ; template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<3,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<3,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>> type ; } ; template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<4,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>,PT<tbb::flow::tuple_element<3,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<4,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<3,TypeTuple>::type> KeyTrait3 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>,PT<KeyTrait3>> type ; } ; template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<5,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>,PT<tbb::flow::tuple_element<3,TypeTuple>::type>,PT<tbb::flow::tuple_element<4,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<5,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<3,TypeTuple>::type> KeyTrait3 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<4,TypeTuple>::type> KeyTrait4 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>,PT<KeyTrait3>,PT<KeyTrait4>> type ; } ; # if __TBB_VARIADIC_MAX> = 6 template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<6,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>,PT<tbb::flow::tuple_element<3,TypeTuple>::type>,PT<tbb::flow::tuple_element<4,TypeTuple>::type>,PT<tbb::flow::tuple_element<5,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<6,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<3,TypeTuple>::type> KeyTrait3 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<4,TypeTuple>::type> KeyTrait4 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<5,TypeTuple>::type> KeyTrait5 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>,PT<KeyTrait3>,PT<KeyTrait4>,PT<KeyTrait5>> type ; } ; # endif # if __TBB_VARIADIC_MAX> = 7 template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<7,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>,PT<tbb::flow::tuple_element<3,TypeTuple>::type>,PT<tbb::flow::tuple_element<4,TypeTuple>::type>,PT<tbb::flow::tuple_element<5,TypeTuple>::type>,PT<tbb::flow::tuple_element<6,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<7,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<3,TypeTuple>::type> KeyTrait3 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<4,TypeTuple>::type> KeyTrait4 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<5,TypeTuple>::type> KeyTrait5 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<6,TypeTuple>::type> KeyTrait6 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>,PT<KeyTrait3>,PT<KeyTrait4>,PT<KeyTrait5>,PT<KeyTrait6>> type ; } ; # endif # if __TBB_VARIADIC_MAX> = 8 template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<8,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>,PT<tbb::flow::tuple_element<3,TypeTuple>::type>,PT<tbb::flow::tuple_element<4,TypeTuple>::type>,PT<tbb::flow::tuple_element<5,TypeTuple>::type>,PT<tbb::flow::tuple_element<6,TypeTuple>::type>,PT<tbb::flow::tuple_element<7,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<8,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<3,TypeTuple>::type> KeyTrait3 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<4,TypeTuple>::type> KeyTrait4 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<5,TypeTuple>::type> KeyTrait5 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<6,TypeTuple>::type> KeyTrait6 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<7,TypeTuple>::type> KeyTrait7 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>,PT<KeyTrait3>,PT<KeyTrait4>,PT<KeyTrait5>,PT<KeyTrait6>,PT<KeyTrait7>> type ; } ; # endif # if __TBB_VARIADIC_MAX> = 9 template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<9,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>,PT<tbb::flow::tuple_element<3,TypeTuple>::type>,PT<tbb::flow::tuple_element<4,TypeTuple>::type>,PT<tbb::flow::tuple_element<5,TypeTuple>::type>,PT<tbb::flow::tuple_element<6,TypeTuple>::type>,PT<tbb::flow::tuple_element<7,TypeTuple>::type>,PT<tbb::flow::tuple_element<8,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<9,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<3,TypeTuple>::type> KeyTrait3 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<4,TypeTuple>::type> KeyTrait4 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<5,TypeTuple>::type> KeyTrait5 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<6,TypeTuple>::type> KeyTrait6 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<7,TypeTuple>::type> KeyTrait7 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<8,TypeTuple>::type> KeyTrait8 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>,PT<KeyTrait3>,PT<KeyTrait4>,PT<KeyTrait5>,PT<KeyTrait6>,PT<KeyTrait7>,PT<KeyTrait8>> type ; } ; # endif # if __TBB_VARIADIC_MAX> = 1 0 template<template<class> class PT,TypeTuple> struct wrap_tuple_elements<1 0,PT,TypeTuple> { typedef tbb::flow::tuple<PT<tbb::flow::tuple_element<0,TypeTuple>::type>,PT<tbb::flow::tuple_element<1,TypeTuple>::type>,PT<tbb::flow::tuple_element<2,TypeTuple>::type>,PT<tbb::flow::tuple_element<3,TypeTuple>::type>,PT<tbb::flow::tuple_element<4,TypeTuple>::type>,PT<tbb::flow::tuple_element<5,TypeTuple>::type>,PT<tbb::flow::tuple_element<6,TypeTuple>::type>,PT<tbb::flow::tuple_element<7,TypeTuple>::type>,PT<tbb::flow::tuple_element<8,TypeTuple>::type>,PT<tbb::flow::tuple_element<9,TypeTuple>::type>> type ; } ; template<template<class> class PT,KeyTraits,TypeTuple> struct wrap_key_tuple_elements<1 0,PT,KeyTraits,TypeTuple> { typedef KeyTraits::key_type K ; typedef KeyTraits::hash_compare_type KHash ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<0,TypeTuple>::type> KeyTrait0 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<1,TypeTuple>::type> KeyTrait1 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<2,TypeTuple>::type> KeyTrait2 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<3,TypeTuple>::type> KeyTrait3 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<4,TypeTuple>::type> KeyTrait4 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<5,TypeTuple>::type> KeyTrait5 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<6,TypeTuple>::type> KeyTrait6 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<7,TypeTuple>::type> KeyTrait7 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<8,TypeTuple>::type> KeyTrait8 ; typedef KeyTrait<K,KHash,tbb::flow::tuple_element<9,TypeTuple>::type> KeyTrait9 ; typedef tbb::flow::tuple<PT<KeyTrait0>,PT<KeyTrait1>,PT<KeyTrait2>,PT<KeyTrait3>,PT<KeyTrait4>,PT<KeyTrait5>,PT<KeyTrait6>,PT<KeyTrait7>,PT<KeyTrait8>,PT<KeyTrait9>> type ; } ; # endif # endif # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT template<int . . . S> class sequence { } ; template<int N,int . . . S> struct make_sequence : make_sequence<N - 1,N - 1,S . . .> { } ; template<int . . . S> struct make_sequence<0,S . . .> { typedef sequence<S . . .> type ; } ; # endif # if __TBB_INITIALIZER_LISTS_PRESENT template<T> class initializer_list_wrapper { public : typedef T value_type ; typedef const T& reference ; typedef const T& const_reference ; typedef size_t size_type ; typedef T* iterator ; typedef const T* const_iterator ;)",
    "insertText": "initializer_list_wrapper(std::initializer_list<T> il ) __TBB_NOEXCEPT( true ) : my_begin( static_cast<T*>(malloc( il.size()*sizeof( T ) )))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (iterator dst = my_begin ;)",
    "insertText": "for(typename std::initializer_list<T>::const_iterator src = il.begin(); src != il.end(); ++src ) new (dst++) T( *src)"
  },
  {
    "label": "initializer_list_wrapper()",
    "kind": "Method",
    "detail": "Function (my_end = dst ; })",
    "insertText": "initializer_list_wrapper(const initializer_list_wrapper<T>& ilw ) __TBB_NOEXCEPT( true ) : my_begin( static_cast<T*>(malloc( ilw.size()*sizeof( T ) )))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (iterator dst = my_begin ;)",
    "insertText": "for(typename std::initializer_list<T>::const_iterator src = ilw.begin(); src != ilw.end(); ++src ) new (dst++) T( *src)"
  },
  {
    "label": "initializer_list_wrapper()",
    "kind": "Method",
    "detail": "Function (my_end = dst ; } # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "initializer_list_wrapper(initializer_list_wrapper<T>&& ilw ) __TBB_NOEXCEPT( true ) : my_begin( ilw.my_begin ), my_end( ilw.my_end)"
  },
  {
    "label": "initializer_list_wrapper()",
    "kind": "Method",
    "detail": "Function (ilw . my_begin = ilw . my_end = NULL ; } # endif ~)",
    "insertText": "initializer_list_wrapper()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin() const __TBB_NOEXCEPT(true)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} private : iterator my_begin ; iterator my_end ; } ; # endif / ) const { } } ; template<T> struct Wrapper : public WrapperBase { typedef T value_type ; typedef T* pointer_type ; private : T value_space ; public : const value_type&)",
    "insertText": "value()"
  },
  {
    "label": "_unwind_space()",
    "kind": "Method",
    "detail": "Function (struct _unwind_space { pointer_type space ;)",
    "insertText": "_unwind_space(pointer_type p) : space(p)"
  },
  {
    "label": "_unwind_space()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "_unwind_space()"
  },
  {
    "label": "Wrapper()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "Wrapper(const T& other ) : value_space(other)"
  },
  {
    "label": "Wrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Wrapper(const Wrapper& other) : value_space(other.value_space)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTo(void* newSpace)"
  },
  {
    "label": "guard()",
    "kind": "Method",
    "detail": "Function (_unwind_space)",
    "insertText": "guard((pointer_type)newSpace)"
  },
  {
    "label": "Wrapper()",
    "kind": "Method",
    "detail": "Function (guard . space = NULL ; } ~)",
    "insertText": "Wrapper()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,size_t N> struct Wrapper<T [ N ]> : public WrapperBase { typedef T value_type ; typedef T* pointer_type ; typedef T ArrayType [ N ] ; private : const size_t space_size =)",
    "insertText": "sizeof(ArrayType) / sizeof(char)"
  },
  {
    "label": "_unwind_class()",
    "kind": "Method",
    "detail": "Function (char value_space [ space_size ] ; struct _unwind_class { pointer_type space ; int already_built ;)",
    "insertText": "_unwind_class(pointer_type p) : space(p), already_built(0)"
  },
  {
    "label": "_unwind_class()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "_unwind_class()"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* vp = const_cast<)",
    "insertText": "char(value_space)"
  },
  {
    "label": "Wrapper()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Wrapper(const ArrayType& other)"
  },
  {
    "label": "guard()",
    "kind": "Method",
    "detail": "Function (_unwind_class)",
    "insertText": "guard((pointer_type)value_space)"
  },
  {
    "label": "pointer_type()",
    "kind": "Method",
    "detail": "Function (pointer_type vp = reinterpret_cast<)",
    "insertText": "pointer_type(&value_space)"
  },
  {
    "label": "Wrapper()",
    "kind": "Method",
    "detail": "Function (} guard . space = NULL ; })",
    "insertText": "Wrapper(const Wrapper& other) : WrapperBase()"
  },
  {
    "label": "pointer_type()",
    "kind": "Method",
    "detail": "Function (pointer_type dp = reinterpret_cast<)",
    "insertText": "pointer_type(value_space)"
  },
  {
    "label": "pointer_type()",
    "kind": "Method",
    "detail": "Function (pointer_type sp = reinterpret_cast<)",
    "insertText": "pointer_type(const_cast<char *>(other.value_space))"
  },
  {
    "label": "pick_one()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool,class T1,class T2> struct pick_one ; template<class T1,class T2> struct pick_one<true,T1,T2> { typedef T1 type ; } ; template<class T1,class T2> struct pick_one<false,T1,T2> { typedef T2 type ; } ; template<template<class> class Selector,T1,T2> struct pick_max { typedef)",
    "insertText": "pick_one(Selector<T1>::value > Selector<T2>::value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct size_of { const int value =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} ; template<size_t N,class Tuple,template<class> class Selector> struct pick_tuple_max { typedef pick_tuple_max<N - 1,Tuple,Selector>::type LeftMaxType ; typedef tbb::flow::tuple_element<N - 1,Tuple>::type ThisType ; typedef pick_max<Selector,LeftMaxType,ThisType>::type type ; } ; template<class Tuple,template<class> class Selector> struct pick_tuple_max<0,Tuple,Selector> { typedef tbb::flow::tuple_element<0,Tuple>::type type ; } ; template<class Q,size_t N,class Tuple> struct is_element_of { typedef tbb::flow::tuple_element<N - 1,Tuple>::type T_i ; const bool value = tbb::internal::is_same_type<Q,T_i>::value | | is_element_of<Q,N - 1,Tuple>::value ; } ; template<class Q,class Tuple> struct is_element_of<Q,0,Tuple> { typedef tbb::flow::tuple_element<0,Tuple>::type T_i ; const bool value = tbb::internal::is_same_type<Q,T_i>::value ; } ; template<T> struct ERROR_Type_Not_allowed_In_Tagged_Msg_Not_Member_Of_Tuple ; template<T,bool BUILD_IT> struct do_if ; template<T> struct do_if<T,true> { void)",
    "insertText": "construct(void *mySpace, const T& x)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct do_if<T,false> { void)",
    "insertText": "construct(void * , const T& x)"
  },
  {
    "label": "bad_type()",
    "kind": "Method",
    "detail": "Function (ERROR_Type_Not_allowed_In_Tagged_Msg_Not_Member_Of_Tuple<T)",
    "insertText": "bad_type(x)"
  },
  {
    "label": "MaxNBytes()",
    "kind": "Method",
    "detail": "Function (} } ; using tbb::internal::punned_cast ; struct tagged_null_type { } ; template<TagType,T0,T1 = tagged_null_type,T2 = tagged_null_type,T3 = tagged_null_type,T4 = tagged_null_type,T5 = tagged_null_type,T6 = tagged_null_type,T7 = tagged_null_type,T8 = tagged_null_type,T9 = tagged_null_type> class tagged_msg { typedef tbb::flow::tuple<T0,T1,T2,T3,T4 # if __TBB_VARIADIC_MAX> = 6,T5 # endif # if __TBB_VARIADIC_MAX> = 7,T6 # endif # if __TBB_VARIADIC_MAX> = 8,T7 # endif # if __TBB_VARIADIC_MAX> = 9,T8 # endif # if __TBB_VARIADIC_MAX> = 1 0,T9 # endif> Tuple ; private : class variant { const size_t N = tbb::flow::tuple_size<Tuple>::value ; typedef pick_tuple_max<N,Tuple,alignment_of>::type AlignType ; typedef pick_tuple_max<N,Tuple,size_of>::type MaxSizeType ; const size_t)",
    "insertText": "MaxNBytes(sizeof(Wrapper<MaxSizeType>)+sizeof(AlignType)-1)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t MaxNElements = MaxNBytes /)",
    "insertText": "sizeof(AlignType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef tbb::aligned_space<AlignType,MaxNElements> SpaceType ; SpaceType my_space ; const size_t MaxSize =)",
    "insertText": "sizeof(SpaceType)"
  },
  {
    "label": "variant()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "variant()"
  },
  {
    "label": "variant()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "variant(const T& x)"
  },
  {
    "label": "variant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "variant(const variant& other)"
  },
  {
    "label": "WrapperBase()",
    "kind": "Method",
    "detail": "Function (const WrapperBase* h = punned_cast<const)",
    "insertText": "WrapperBase(&(other.my_space))"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (h ->)",
    "insertText": "CopyTo(&my_space)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const variant& rhs)"
  },
  {
    "label": "WrapperBase()",
    "kind": "Method",
    "detail": "Function (WrapperBase* h = punned_cast<)",
    "insertText": "WrapperBase(&my_space)"
  },
  {
    "label": "WrapperBase()",
    "kind": "Method",
    "detail": "Function (h -> ~)",
    "insertText": "WrapperBase()"
  },
  {
    "label": "WrapperBase()",
    "kind": "Method",
    "detail": "Function (const WrapperBase* ch = punned_cast<const)",
    "insertText": "WrapperBase(&(rhs.my_space))"
  },
  {
    "label": "variant_cast_to()",
    "kind": "Method",
    "detail": "Function (} } template<U> const U&)",
    "insertText": "variant_cast_to()"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (const Wrapper<U>* h = dynamic_cast<const Wrapper<)",
    "insertText": "U(punned_cast<const WrapperBase *>(&my_space))"
  },
  {
    "label": "throw_exception()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "throw_exception(tbb::internal::eid_bad_tagged_msg_cast)"
  },
  {
    "label": "variant_is_a()",
    "kind": "Method",
    "detail": "Function (} template<U> bool)",
    "insertText": "variant_is_a()"
  },
  {
    "label": "variant_is_default_constructed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "variant_is_default_constructed()"
  },
  {
    "label": "tagged_msg()",
    "kind": "Method",
    "detail": "Function (} } ; TagType my_tag ; variant my_msg ; public :)",
    "insertText": "tagged_msg(): my_tag(TagType(~0)), my_msg()"
  },
  {
    "label": "tagged_msg()",
    "kind": "Method",
    "detail": "Function (} template<T,R>)",
    "insertText": "tagged_msg(T const &index, R const &value) : my_tag(index), my_msg(value)"
  },
  {
    "label": "tagged_msg()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CONST_REF_TO_ARRAY_TEMPLATE_PARAM_BROKEN template<T,R,size_t N>)",
    "insertText": "tagged_msg(T const &index, R (&value)[N]) : my_tag(index), my_msg(value)"
  },
  {
    "label": "set_tag()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "set_tag(TagType const &index)"
  },
  {
    "label": "tag()",
    "kind": "Method",
    "detail": "Function (my_tag = index ; } TagType)",
    "insertText": "tag()"
  },
  {
    "label": "is_a()",
    "kind": "Method",
    "detail": "Function (} template<V> bool)",
    "insertText": "is_a()"
  },
  {
    "label": "is_default_constructed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_default_constructed()"
  },
  {
    "label": "cast_to()",
    "kind": "Method",
    "detail": "Function (} } ; template<V,T> const V&)",
    "insertText": "cast_to(T const &t)"
  },
  {
    "label": "is_a()",
    "kind": "Method",
    "detail": "Function (} template<V,T> bool)",
    "insertText": "is_a(T const &t)"
  }
]