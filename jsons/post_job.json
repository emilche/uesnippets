[
  {
    "label": "JobTaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JobTaskSource"
  },
  {
    "label": "PooledTaskRunnerDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PooledTaskRunnerDelegate"
  },
  {
    "label": "TaskTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTraits"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "JobDelegate()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_POST_JOB_H_ # define BASE_TASK_POST_JOB_H_ # include<limits> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / dcheck_is_on . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" namespace base { namespace internal { class JobTaskSource ; class PooledTaskRunnerDelegate ; } class TaskTraits ; enum class TaskPriority : uint8_t ; class BASE_EXPORT JobDelegate { public :)",
    "insertText": "JobDelegate(internal::JobTaskSource* task_source, internal::PooledTaskRunnerDelegate* pooled_task_runner_delegate)"
  },
  {
    "label": "JobDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JobDelegate(const JobDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JobDelegate&)",
    "insertText": "operator(const JobDelegate&)"
  },
  {
    "label": "JobDelegate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JobDelegate()"
  },
  {
    "label": "ShouldYield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldYield()"
  },
  {
    "label": "YieldIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YieldIfNeeded()"
  },
  {
    "label": "NotifyConcurrencyIncrease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyConcurrencyIncrease()"
  },
  {
    "label": "GetTaskId()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetTaskId()"
  },
  {
    "label": "IsJoiningThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsJoiningThread()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (const raw_ptr<internal::JobTaskSource> task_source_ ; const raw_ptr<internal::PooledTaskRunnerDelegate> pooled_task_runner_delegate_ ; uint8_t task_id_ = kInvalidTaskId ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "JobHandle()",
    "kind": "Method",
    "detail": "Function (# endif } ; class BASE_EXPORT JobHandle { public :)",
    "insertText": "JobHandle()"
  },
  {
    "label": "JobHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JobHandle(const JobHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JobHandle&)",
    "insertText": "operator(const JobHandle&)"
  },
  {
    "label": "JobHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JobHandle(JobHandle&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JobHandle&)",
    "insertText": "operator(JobHandle&&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(TaskPriority new_priority)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "CancelAndDetach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAndDetach()"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach()"
  },
  {
    "label": "JobHandle()",
    "kind": "Method",
    "detail": "Function (private : class internal::JobTaskSource ;)",
    "insertText": "JobHandle(scoped_refptr<internal::JobTaskSource> task_source)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<internal::JobTaskSource> task_source_ ; } ; using MaxConcurrencyCallback = RepeatingCallback<)",
    "insertText": "size_t(size_t)"
  },
  {
    "label": "PostJob()",
    "kind": "Method",
    "detail": "Function (JobHandle BASE_EXPORT)",
    "insertText": "PostJob(const Location& from_here, const TaskTraits& traits, RepeatingCallback<void(JobDelegate*)> worker_task, MaxConcurrencyCallback max_concurrency_callback)"
  },
  {
    "label": "CreateJob()",
    "kind": "Method",
    "detail": "Function (JobHandle BASE_EXPORT)",
    "insertText": "CreateJob(const Location& from_here, const TaskTraits& traits, RepeatingCallback<void(JobDelegate*)> worker_task, MaxConcurrencyCallback max_concurrency_callback)"
  }
]