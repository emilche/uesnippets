[
  {
    "label": "FMsg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMsg"
  },
  {
    "label": "FStaticBasicLogDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticBasicLogDynamicData"
  },
  {
    "label": "FStaticBasicLogRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticBasicLogRecord"
  },
  {
    "label": "FNoLoggingCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNoLoggingCategory"
  },
  {
    "label": "FLogCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategory"
  },
  {
    "label": "SendNotificationString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogScopedCategoryAndVerbosityOverride . h \" # include \" Logging / LogTrace . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Misc / VarArgs . h \" # include \" String / FormatStringSan . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Templates / IsValidVariadicFunctionArg . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include<type_traits> struct FMsg { void)",
    "insertText": "SendNotificationString(const TCHAR* Message)"
  },
  {
    "label": "SendNotificationStringf()",
    "kind": "Method",
    "detail": "Function (template<FmtType,. . . Types> void)",
    "insertText": "SendNotificationStringf(const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "SendNotificationStringfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendNotificationStringfImpl((const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Logf(const ANSICHAR* File, int32 Line, const FLogCategoryName& Category, ELogVerbosity::Type Verbosity, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "LogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogfImpl(File, Line, Category, Verbosity, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "Logf_Internal()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Logf_Internal(const ANSICHAR* File, int32 Line, const FLogCategoryName& Category, ELogVerbosity::Type Verbosity, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "Logf_InternalImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Logf_InternalImpl(File, Line, Category, Verbosity, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "LogV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogV(const ANSICHAR* File, int32 Line, const FLogCategoryName& Category, ELogVerbosity::Type Verbosity, const TCHAR* Fmt, va_list Args)"
  },
  {
    "label": "LogfImpl()",
    "kind": "Method",
    "detail": "Function (private : void VARARGS)",
    "insertText": "LogfImpl(const ANSICHAR* File, int32 Line, const FLogCategoryName& Category, ELogVerbosity::Type Verbosity, const TCHAR* Fmt, ...)"
  },
  {
    "label": "Logf_InternalImpl()",
    "kind": "Method",
    "detail": "Function (void VARARGS)",
    "insertText": "Logf_InternalImpl(const ANSICHAR* File, int32 Line, const FLogCategoryName& Category, ELogVerbosity::Type Verbosity, const TCHAR* Fmt, ...)"
  },
  {
    "label": "SendNotificationStringfImpl()",
    "kind": "Method",
    "detail": "Function (void VARARGS)",
    "insertText": "SendNotificationStringfImpl(const TCHAR* Fmt, ...)"
  },
  {
    "label": "UE_LOG_EXPAND_IS_FATAL()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef COMPILED_IN_MINIMUM_VERBOSITY # define COMPILED_IN_MINIMUM_VERBOSITY VeryVerbose # else # if ! IS_MONOLITHIC # error COMPILED_IN_MINIMUM_VERBOSITY can only be defined in monolithic builds . # endif # endif # define)",
    "insertText": "UE_LOG_EXPAND_IS_FATAL(Verbosity, ActiveBlock, InactiveBlock) PREPROCESSOR_JOIN(UE_LOG_EXPAND_IS_FATAL_, Verbosity)(ActiveBlock, InactiveBlock) #define UE_LOG_EXPAND_IS_FATAL_Fatal( ActiveBlock, InactiveBlock) ActiveBlock #define UE_LOG_EXPAND_IS_FATAL_Error( ActiveBlock, InactiveBlock) InactiveBlock #define UE_LOG_EXPAND_IS_FATAL_Warning( ActiveBlock, InactiveBlock) InactiveBlock #define UE_LOG_EXPAND_IS_FATAL_Display( ActiveBlock, InactiveBlock) InactiveBlock #define UE_LOG_EXPAND_IS_FATAL_Log( ActiveBlock, InactiveBlock) InactiveBlock #define UE_LOG_EXPAND_IS_FATAL_Verbose( ActiveBlock, InactiveBlock) InactiveBlock #define UE_LOG_EXPAND_IS_FATAL_VeryVerbose(ActiveBlock, InactiveBlock) InactiveBlock #define UE_LOG_EXPAND_IS_FATAL_All( ActiveBlock, InactiveBlock) InactiveBlock #define UE_LOG_EXPAND_IS_FATAL_SetColor( ActiveBlock, InactiveBlock) InactiveBlock #if DO_CHECK #define UE_LOG_SOURCE_FILE(File) File #else #define UE_LOG_SOURCE_FILE(File)"
  },
  {
    "label": "FStaticBasicLogRecord()",
    "kind": "Method",
    "detail": "Function (struct FStaticBasicLogDynamicData { std::atomic<bool> bInitialized = false ; } ; struct FStaticBasicLogRecord { const TCHAR* Format = nullptr ; const ANSICHAR* File = nullptr ; int32 Line = 0 ; ELogVerbosity::Type Verbosity = ELogVerbosity::Log ; FStaticBasicLogDynamicData& DynamicData ;)",
    "insertText": "FStaticBasicLogRecord(const TCHAR* InFormat, const ANSICHAR* InFile, int32 InLine, ELogVerbosity::Type InVerbosity, FStaticBasicLogDynamicData& InDynamicData) : Format(InFormat) , File(InFile) , Line(InLine) , Verbosity(InVerbosity) , DynamicData(InDynamicData)"
  },
  {
    "label": "BasicLog()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "BasicLog(const FLogCategoryBase& Category, const FStaticBasicLogRecord* Log, ...)"
  },
  {
    "label": "BasicFatalLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicFatalLog(const FLogCategoryBase& Category, const FStaticBasicLogRecord* Log, ...)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} # if NO_LOGGING struct FNoLoggingCategory { } ; # define)",
    "insertText": "UE_LOG(CategoryName, Verbosity, Format, ...)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ if)",
    "insertText": "constexpr((ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask) == ELogVerbosity::Fatal)"
  },
  {
    "label": "LowLevelFatalError()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "LowLevelFatalError(Format, ##__VA_ARGS__)"
  },
  {
    "label": "CA_ASSUME()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CA_ASSUME(false)"
  },
  {
    "label": "UE_LOG_REF()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UE_LOG_REF(CategoryRef, Verbosity, Format, ...)"
  },
  {
    "label": "UE_LOG_CLINKAGE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UE_LOG_CLINKAGE(CategoryName, Verbosity, Format, ...)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UE_CLOG(Condition, CategoryName, Verbosity, Format, ...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(Condition)"
  },
  {
    "label": "UE_LOG_ACTIVE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "UE_LOG_ACTIVE(...) (0) #define UE_LOG_ANY_ACTIVE(...) (0) #define UE_SUPPRESS(...)"
  },
  {
    "label": "UE_GET_LOG_VERBOSITY()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_GET_LOG_VERBOSITY(...) (ELogVerbosity::NoLogging) #define UE_SET_LOG_VERBOSITY(...) #define DECLARE_LOG_CATEGORY_EXTERN(CategoryName, DefaultVerbosity, CompileTimeVerbosity)"
  },
  {
    "label": "DEFINE_LOG_CATEGORY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DEFINE_LOG_CATEGORY(CategoryName, ...)"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(...) #define DECLARE_LOG_CATEGORY_CLASS(...) #define DEFINE_LOG_CATEGORY_CLASS(...)"
  },
  {
    "label": "IsLogActive()",
    "kind": "Method",
    "detail": "Function (template<int32 VerbosityToCheck,CategoryType> bool)",
    "insertText": "IsLogActive(const CategoryType& Category)"
  },
  {
    "label": "UE_LOG_ACTIVE()",
    "kind": "Method",
    "detail": "Function (} else { return false ; } } } # define)",
    "insertText": "UE_LOG_ACTIVE(CategoryName, Verbosity) (::UEAsserts_Private::IsLogActive<(int32)ELogVerbosity::Verbosity>(CategoryName)) #define UE_GET_LOG_VERBOSITY(CategoryName) \\ CategoryName.GetVerbosity() #define UE_SET_LOG_VERBOSITY(CategoryName, Verbosity) \\ CategoryName.SetVerbosity(ELogVerbosity::Verbosity)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_LOG(CategoryName, Verbosity, Format, ...) \\ UE_PRIVATE_LOG(PREPROCESSOR_NOTHING, constexpr, CategoryName, Verbosity, Format, ##__VA_ARGS__) #define UE_LOG_REF(CategoryRef, Verbosity, Format, ...) \\ UE_PRIVATE_LOG(PREPROCESSOR_NOTHING, PREPROCESSOR_NOTHING, CategoryRef, Verbosity, Format, ##__VA_ARGS__) #define UE_LOG_CLINKAGE UE_LOG #define UE_CLOG(Condition, CategoryName, Verbosity, Format, ...) \\ UE_PRIVATE_LOG(if (Condition), constexpr, CategoryName, Verbosity, Format, ##__VA_ARGS__) #define UE_PRIVATE_LOG(Condition, CategoryConst, Category, Verbosity, Format, ...)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(std::is_const_v<std::remove_reference_t<decltype(Format)>>, \"Formatting string must be a const TCHAR array.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(TIsArrayOrRefOfTypeByPredicate<decltype(Format), TIsCharEncodingCompatibleWithTCHAR>::Value, \"Formatting string must be a TCHAR array.\")"
  },
  {
    "label": "UE_VALIDATE_FORMAT_STRING()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_VALIDATE_FORMAT_STRING(Format, ##__VA_ARGS__)"
  },
  {
    "label": "PREPROCESSOR_IF()",
    "kind": "Method",
    "detail": "Function (\\::UE::Logging::Private::FStaticBasicLogDynamicData LOG_Dynamic ; \\ \\)",
    "insertText": "PREPROCESSOR_IF(PLATFORM_COMPILER_SUPPORTS_CONSTEXPR_BUILTIN_FILE_AND_LINE, constexpr, const) ::UE::Logging::Private::FStaticBasicLogRecord LOG_Static(Format, __builtin_FILE(), __builtin_LINE(), ::ELogVerbosity::Verbosity, LOG_Dynamic)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert((::ELogVerbosity::Verbosity & ::ELogVerbosity::VerbosityMask) < ::ELogVerbosity::NumVerbosity && ::ELogVerbosity::Verbosity > 0, \"Verbosity must be constant and in range.\")"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ if)",
    "insertText": "constexpr((::ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask) == ::ELogVerbosity::Fatal)"
  },
  {
    "label": "BasicFatalLog()",
    "kind": "Method",
    "detail": "Function (\\ Condition \\ { \\::UE::Logging::)",
    "insertText": "BasicFatalLog(Category, &LOG_Static, ##__VA_ARGS__)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ else if)",
    "insertText": "constexpr((::ELogVerbosity::Verbosity & ::ELogVerbosity::VerbosityMask) <= ::ELogVerbosity::COMPILED_IN_MINIMUM_VERBOSITY)"
  },
  {
    "label": "CategoryConst()",
    "kind": "Method",
    "detail": "Function (\\ if)",
    "insertText": "CategoryConst((::ELogVerbosity::Verbosity & ::ELogVerbosity::VerbosityMask) <= Category.GetCompileTimeVerbosity())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!Category.IsSuppressed(::ELogVerbosity::Verbosity))"
  },
  {
    "label": "BasicLog()",
    "kind": "Method",
    "detail": "Function (\\ Condition \\ { \\::UE::Logging::)",
    "insertText": "BasicLog(Category, &LOG_Static, ##__VA_ARGS__)"
  },
  {
    "label": "UE_SUPPRESS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ } \\ } # define)",
    "insertText": "UE_SUPPRESS(CategoryName, Verbosity, ExecuteIfUnsuppressed)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert((ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask) < ELogVerbosity::NumVerbosity && ELogVerbosity::Verbosity > 0, \"Verbosity must be constant and in range.\")"
  },
  {
    "label": "CA_CONSTANT_IF()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CA_CONSTANT_IF((ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask) <= ELogVerbosity::COMPILED_IN_MINIMUM_VERBOSITY && (ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask) <= FLogCategory##CategoryName::CompileTimeVerbosity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!CategoryName.IsSuppressed(ELogVerbosity::Verbosity))"
  },
  {
    "label": "CategoryName()",
    "kind": "Method",
    "detail": "Function (\\ FScopedCategoryAndVerbosityOverride TEMP__ # #)",
    "insertText": "CategoryName(CategoryName.GetCategoryName(), ELogVerbosity::Type(ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask))"
  },
  {
    "label": "PostTrigger()",
    "kind": "Method",
    "detail": "Function (\\ ExecuteIfUnsuppressed ; \\ CategoryName .)",
    "insertText": "PostTrigger(ELogVerbosity::Verbosity)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(CategoryName, DefaultVerbosity, CompileTimeVerbosity)"
  },
  {
    "label": "CategoryName()",
    "kind": "Method",
    "detail": "Function (\\ FLogCategory # #)",
    "insertText": "CategoryName() : FLogCategory(TEXT(#CategoryName))"
  },
  {
    "label": "DEFINE_LOG_CATEGORY()",
    "kind": "Method",
    "detail": "Function (} \\ } CategoryName ; # define)",
    "insertText": "DEFINE_LOG_CATEGORY(CategoryName)"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(CategoryName, DefaultVerbosity, CompileTimeVerbosity)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_CLASS()",
    "kind": "Method",
    "detail": "Function (} \\ } CategoryName ; # define)",
    "insertText": "DECLARE_LOG_CATEGORY_CLASS(CategoryName, DefaultVerbosity, CompileTimeVerbosity) \\ DEFINE_LOG_CATEGORY_STATIC(CategoryName, DefaultVerbosity, CompileTimeVerbosity) #define DEFINE_LOG_CATEGORY_CLASS(Class, CategoryName)"
  },
  {
    "label": "NOTIFY_CLIENT_OF_SECURITY_EVENT_IF_NOT_SHIPPING()",
    "kind": "Method",
    "detail": "Function (# endif # if UE_BUILD_SHIPPING # define)",
    "insertText": "NOTIFY_CLIENT_OF_SECURITY_EVENT_IF_NOT_SHIPPING(NetConnection, SecurityPrint)"
  },
  {
    "label": "NOTIFY_CLIENT_OF_SECURITY_EVENT_IF_NOT_SHIPPING()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "NOTIFY_CLIENT_OF_SECURITY_EVENT_IF_NOT_SHIPPING(NetConnection, SecurityPrint) \\ FNetControlMessage<NMT_SecurityViolation>::Send(NetConnection, SecurityPrint)"
  },
  {
    "label": "FlushNet()",
    "kind": "Method",
    "detail": "Function (\\ NetConnection ->)",
    "insertText": "FlushNet(true)"
  },
  {
    "label": "InternalLogNANDiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK&& ! USING_CODE_ANALYSIS namespace UEAsserts_Private { void VARARGS)",
    "insertText": "InternalLogNANDiagnosticMessage(const TCHAR* FormattedMsg, ...)"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "logOrEnsureNanError(_FormatString_, ...) \\ if (!GEnsureOnNANDiagnostic)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ bool OnceOnly = false ; \\)",
    "insertText": "if(!OnceOnly)"
  },
  {
    "label": "InternalLogNANDiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "InternalLogNANDiagnosticMessage(_FormatString_, ##__VA_ARGS__)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (\\ OnceOnly = true ; \\ } \\ } \\ else \\ { \\)",
    "insertText": "ensureMsgf(!GEnsureOnNANDiagnostic, _FormatString_, ##__VA_ARGS__)"
  }
]