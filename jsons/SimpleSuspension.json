[
  {
    "label": "FSimpleSuspensionSpringParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleSuspensionSpringParams"
  },
  {
    "label": "FSimpleSuspensionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleSuspensionParams"
  },
  {
    "label": "FSimpleSuspensionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleSuspensionState"
  },
  {
    "label": "FSimpleSuspension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleSuspension"
  },
  {
    "label": "FSimpleSuspensionHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleSuspensionHelpers"
  },
  {
    "label": "FSimpleSuspensionSpringParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / UnrealMath . h \" # include \" Templates / Function . h \" # include \" Containers / Array . h \" struct FSimpleSuspensionSpringParams {)",
    "insertText": "FSimpleSuspensionSpringParams() : Stiffness(0.f) , Damping(0.f) , Length(0.f) , Mass(0.f)"
  },
  {
    "label": "FSimpleSuspensionParams()",
    "kind": "Method",
    "detail": "Function (} float Stiffness ; float Damping ; float Length ; float Mass ; } ; struct FSimpleSuspensionParams {)",
    "insertText": "FSimpleSuspensionParams() : LocalCenterOfMass(FVector::ZeroVector) , LocalSuspensionNormal(FVector::UpVector) , LocalGroundDistance(0.f) , NaturalFrequency(10.f) , DampingRatio(.1f)"
  },
  {
    "label": "FSimpleSuspensionState()",
    "kind": "Method",
    "detail": "Function (} TArray<FSimpleSuspensionSpringParams> SpringParams ; TArray<FVector> LocalSpringOrigins ; FVector LocalCenterOfMass ; FVector LocalSuspensionNormal ; float LocalGroundDistance ; float NaturalFrequency ; float DampingRatio ; } ; struct FSimpleSuspensionState {)",
    "insertText": "FSimpleSuspensionState() : TotalForce(FVector::ZeroVector) , TotalTorqueRad(FVector::ZeroVector) , WorldCenterOfMass(FVector::ZeroVector) , WorldSuspensionNormal(FVector::UpVector)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} TArray<float> SpringDisplacements ; TArray<float> SpringForces ; TArray<bool> SpringContacts ; TArray<FVector> WorldSpringOrigins ; FVector TotalForce ; FVector TotalTorqueRad ; FVector WorldCenterOfMass ; FVector WorldSuspensionNormal ; } ; using FSimpleSuspensionRaycast = TFunction<)",
    "insertText": "bool(const FVector& RayBegin, const FVector& RayEnd, const int32 SpringIndex, FVector& OutRayHitLocation, FVector& OutRayHitNormal)"
  },
  {
    "label": "SimpleSuspensionRaycastGroundPlane()",
    "kind": "Method",
    "detail": "Function (const FSimpleSuspensionRaycast)",
    "insertText": "SimpleSuspensionRaycastGroundPlane(const FVector& RayBegin, const FVector& RayEnd, const int32 SpringIndex, FVector& OutRayHitLocation, FVector& OutRayHitNormal)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FVector Norm = FVector::UpVector ; const FVector Diff = RayEnd - RayBegin ; const FVector::FReal ProjA =)",
    "insertText": "DotProduct(RayBegin, Norm)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal ProjDiff =)",
    "insertText": "DotProduct(Diff, Norm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal Lambda = - ProjA / ProjDiff ;)",
    "insertText": "if(Lambda > 0.f && Lambda <= 1.f)"
  },
  {
    "label": "RayBegin()",
    "kind": "Method",
    "detail": "Function (OutRayHitLocation =)",
    "insertText": "RayBegin(Lambda * Diff)"
  },
  {
    "label": "FSimpleSuspension()",
    "kind": "Method",
    "detail": "Function (OutRayHitNormal = Norm ; return true ; } } return false ; } ; struct FSimpleSuspension {)",
    "insertText": "FSimpleSuspension()"
  },
  {
    "label": "FSimpleSuspension()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleSuspension(const FSimpleSuspensionParams& SuspensionParams)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(SuspensionParams)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (} FSimpleSuspensionParams SuspensionParams ; FSimpleSuspensionState SuspensionState ; void)",
    "insertText": "Setup(const FSimpleSuspensionParams& InSuspensionParams)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(const FSimpleSuspensionParams& InSuspensionParams, const float TotalMass, const float Gravity)"
  },
  {
    "label": "ComputeSpringParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSpringParams(const float TotalMass, const float Gravity)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FTransform& LocalToWorld, const FVector& LinearVelocity, const FVector& AngularVelocityRad, const FSimpleSuspensionRaycast& RaycastFunction = SimpleSuspensionRaycastGroundPlane)"
  },
  {
    "label": "ComputeSprungMasses()",
    "kind": "Method",
    "detail": "Function (} ; struct FSimpleSuspensionHelpers { bool)",
    "insertText": "ComputeSprungMasses(const TArray<FVector>& MassSpringPositions, const float TotalMass, TArray<float>& OutSprungMasses, FString* ErrMsg = nullptr)"
  },
  {
    "label": "ComputeSprungMasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeSprungMasses(const TArray<FVector>& LocalSpringPositions, const FVector& LocalCenterOfMass, const float TotalMass, TArray<float>& OutSprungMasses, FString* ErrMsg = nullptr)"
  },
  {
    "label": "ComputeSingleAxisLambda()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeSingleAxisLambda(const FVector::FReal AxisDot, const FVector::FReal SumAxis, const uint32 Count, TArray<FVector::FReal, TFixedAllocator<2>>& Lambdas, FString* ErrMsg = nullptr)"
  },
  {
    "label": "ComputeSpringNaturalFrequencyAndDampingRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSpringNaturalFrequencyAndDampingRatio(const float SprungMass, const float SpringStiffness, const float SpringDamping, float& OutNaturalFrequency, float& OutDampingRatio)"
  },
  {
    "label": "ComputeSpringStiffness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeSpringStiffness(const float SprungMass, const float NaturalFrequency)"
  },
  {
    "label": "ComputeSpringDamping()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeSpringDamping(const float SprungMass, const float NaturalFrequency, const float DampingRatio)"
  },
  {
    "label": "ComputeSpringCriticalDamping()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeSpringCriticalDamping(const float SprungMass, const float NaturalFrequency)"
  },
  {
    "label": "ComputeSpringRestLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeSpringRestLength(const float SpringStiffness, const float SprungMass, const float SuspendedLength, const float Gravity)"
  },
  {
    "label": "ComputeSpringParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSpringParams(const TArray<FVector>& LocalSuspensionOrigins, const FVector& LocalCenterOfMass, const float TotalMass, const FVector& LocalSuspensionNormal, const float LocalGroundDistance, const float NaturalFrequency, const float DampingRatio, const float Gravity, TArray<FSimpleSuspensionSpringParams>& OutSpringParams)"
  },
  {
    "label": "ComputeSpringParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSpringParams(const FSimpleSuspensionParams& SuspensionParams, const float TotalMass, const float Gravity, TArray<FSimpleSuspensionSpringParams>& OutSpringParams)"
  },
  {
    "label": "ComputeWorldSuspensionCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeWorldSuspensionCoordinates(const FVector& LocalCenterOfMass, const FVector& LocalSuspensionNormal, const TArray<FVector>& LocalSuspensionOrigins, const FTransform& LocalToWorld, FVector& OutWorldCenterOfMass, FVector& OutWorldSuspensionNormal, TArray<FVector>& OutWorldSuspensionOrigins)"
  },
  {
    "label": "ComputeWorldSuspensionCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeWorldSuspensionCoordinates(const FSimpleSuspensionParams& SuspensionParams, const FTransform& LocalToWorld, FSimpleSuspensionState& OutSuspensionState)"
  },
  {
    "label": "ComputeSuspensionDisplacements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSuspensionDisplacements(const TArray<FVector> WorldSuspensionOrigins, const TArray<FSimpleSuspensionSpringParams>& SpringParams, const FVector& WorldSuspensionNormal, const FSimpleSuspensionRaycast& RaycastFunction, TArray<float>& OutSpringDisplacements)"
  },
  {
    "label": "ComputeSuspensionDisplacements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSuspensionDisplacements(const FSimpleSuspensionParams& SuspensionParams, const FSimpleSuspensionRaycast& RaycastFunction, FSimpleSuspensionState InOutSuspensionState)"
  },
  {
    "label": "ComputeSpringForce()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeSpringForce(const float SpringStiffness, const float SpringDamping, const float SpringDisplacement, const float SpringVelocity)"
  },
  {
    "label": "ComputeSuspensionForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSuspensionForces(const FVector& LinearVelocity, const FVector& AngularVelocityRad, const FVector& WorldCenterOfMass, const FVector& WorldSuspensionNormal, const TArray<FVector> WorldSuspensionOrigins, const TArray<FSimpleSuspensionSpringParams>& SpringParams, const TArray<float>& SpringDisplacements, FVector& OutTotalForce, FVector& OutTotalTorque, TArray<float>& OutSpringForces)"
  },
  {
    "label": "ComputeSuspensionForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSuspensionForces(const FVector& LinearVelocity, const FVector& AngularVelocityRad, const FSimpleSuspensionState& SuspensionState, const TArray<FSimpleSuspensionSpringParams>& SpringParams, FSimpleSuspensionState& OutSuspensionState)"
  },
  {
    "label": "IntegrateSpring()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntegrateSpring(const float DeltaTime, const float SpringDisplacement, const float SpringVelocity, const FSimpleSuspensionSpringParams& SpringParams, const float SprungMass, float& OutNewSpringDisplacement, float& OutNewSpringVelocity)"
  },
  {
    "label": "IntegrateSprings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntegrateSprings(const float DeltaTime, const TArray<float>& SpringDisplacements, const TArray<float>& SpringVelocities, const TArray<FSimpleSuspensionSpringParams>& SuspensionParams, const TArray<float>& SprungMasses, TArray<float>& OutNewSpringDisplacements, TArray<float>& OutNewSpringVelocities)"
  },
  {
    "label": "ErrCheck()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ErrCheck(const bool bCondition, const FString& Message, FString* ErrMsg)"
  }
]