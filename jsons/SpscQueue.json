[
  {
    "label": "TSpscQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpscQueue"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / MemoryOps . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / UnrealTemplate . h \" # include \" Misc / Optional . h \" # include<atomic> template<T,AllocatorType = FMemory> class TSpscQueue final { public : using ElementType = T ;)",
    "insertText": "UE_NONCOPYABLE(TSpscQueue)"
  },
  {
    "label": "TSpscQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSpscQueue()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FNode* Node)",
    "insertText": "new(AllocatorType::Malloc(sizeof(FNode), alignof(FNode)))"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Tail .)",
    "insertText": "store(Node, std::memory_order_relaxed)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FNode* Node = First ; FNode* LocalTail = Tail .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (bContinue = Node ! = LocalTail ;)",
    "insertText": "Free(Node)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Node = Next ; })",
    "insertText": "while(bContinue)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem((ElementType*)&Node->Value)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Node = Next ; } } template<. . . ArgTypes> void)",
    "insertText": "Enqueue(ArgTypes&&... Args)"
  },
  {
    "label": "AllocNode()",
    "kind": "Method",
    "detail": "Function (FNode* Node =)",
    "insertText": "AllocNode()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)&Node->Value) ElementType(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Head -> Next .)",
    "insertText": "store(Node, std::memory_order_release)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (Head = Node ; } TOptional<ElementType>)",
    "insertText": "Dequeue()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FNode* LocalTailNext = LocalTail -> Next .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TOptional<ElementType> Value {)",
    "insertText": "MoveTemp(*TailNextValue)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(TailNextValue)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Tail .)",
    "insertText": "store(LocalTailNext, std::memory_order_release)"
  },
  {
    "label": "MoveTempIfPossible()",
    "kind": "Method",
    "detail": "Function (OutElem =)",
    "insertText": "MoveTempIfPossible(LocalElement.GetValue())"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (auto AllocFromCache = [)",
    "insertText": "this()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (FNode* Node = First ; First = First -> Next ; Node -> Next .)",
    "insertText": "store(nullptr, std::memory_order_relaxed)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "new(AllocatorType::Malloc(sizeof(FNode), alignof(FNode))) FNode()"
  }
]