[
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "UProjectileMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProjectileMovementComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # include \" Engine / HitResult . h \" # endif # include \" GameFramework / MovementComponent . h \" # include \" UObject / ObjectMacros . h \" # include \" ProjectileMovementComponent . generated . h \" struct FHitResult ;)",
    "insertText": "UCLASS(ClassGroup=Movement, meta=(BlueprintSpawnableComponent), ShowCategories=(Velocity), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( FOnProjectileBounceDelegate, const FHitResult&, ImpactResult, const FVector&, ImpactVelocity)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnProjectileStopDelegate, const FHitResult&, ImpactResult)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetMaxSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxSpeed()"
  },
  {
    "label": "UpdateTickRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTickRegistration()"
  },
  {
    "label": "CheckStillInWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckStillInWorld()"
  },
  {
    "label": "GetBuoyancy()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBuoyancy()"
  },
  {
    "label": "HasStoppedSimulation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStoppedSimulation()"
  },
  {
    "label": "GetSimulationTimeStep()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSimulationTimeStep(float RemainingTime, int32 Iterations)"
  },
  {
    "label": "ShouldUseSubStepping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseSubStepping()"
  },
  {
    "label": "GetInterpolatedComponent()",
    "kind": "Method",
    "detail": "Function (USceneComponent*)",
    "insertText": "GetInterpolatedComponent()"
  },
  {
    "label": "ComputeThrottleInterpolationMaxFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeThrottleInterpolationMaxFrames(float DeltaTime, USceneComponent* InterpComponent)"
  },
  {
    "label": "ResetThrottleInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetThrottleInterpolation(float DeltaTime)"
  },
  {
    "label": "HandleBlockingHit()",
    "kind": "Method",
    "detail": "Function (enum class EHandleBlockingHitResult { Deflect,AdvanceNextSubstep,Abort,} ; EHandleBlockingHitResult)",
    "insertText": "HandleBlockingHit(const FHitResult& Hit, float TimeTick, const FVector& MoveDelta, float& SubTickTimeRemaining)"
  },
  {
    "label": "HandleImpact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleImpact(const FHitResult& Hit, float TimeSlice=0.f, const FVector& MoveDelta = FVector::ZeroVector)"
  },
  {
    "label": "HandleDeflection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDeflection(FHitResult& Hit, const FVector& OldVelocity, const uint32 NumBounces, float& SubTickTimeRemaining)"
  },
  {
    "label": "HandleSliding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSliding(FHitResult& Hit, float& SubTickTimeRemaining)"
  },
  {
    "label": "ComputeBounceResult()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeBounceResult(const FHitResult& Hit, float TimeSlice, const FVector& MoveDelta)"
  },
  {
    "label": "ComputeMoveDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeMoveDelta(const FVector& InVelocity, float DeltaTime)"
  },
  {
    "label": "ComputeAcceleration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeAcceleration(const FVector& InVelocity, float DeltaTime)"
  },
  {
    "label": "ComputeHomingAcceleration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeHomingAcceleration(const FVector& InVelocity, float DeltaTime)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(FVector Force)"
  },
  {
    "label": "GetPendingForce()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPendingForce()"
  },
  {
    "label": "TickInterpolation()",
    "kind": "Method",
    "detail": "Function (protected : FVector PendingForceThisUpdate ; void)",
    "insertText": "TickInterpolation(float DeltaTime)"
  },
  {
    "label": "GetGravityZ()",
    "kind": "Method",
    "detail": "Function (FVector InterpLocationOffset ; FVector InterpInitialLocationOffset ; TWeakObjectPtr<USceneComponent> InterpolatedComponentPtr ; FQuat InterpRotationOffset ; FQuat InterpInitialRotationOffset ; private : FVector PendingForce ; public : float)",
    "insertText": "GetGravityZ()"
  }
]