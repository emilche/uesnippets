[
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "UProjectileMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProjectileMovementComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SetVelocityInLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVelocityInLocalSpace(FVector NewVelocity)"
  },
  {
    "label": "CheckStillInWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckStillInWorld()"
  },
  {
    "label": "StopSimulating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSimulating(const FHitResult& HitResult)"
  },
  {
    "label": "SetInterpolatedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpolatedComponent(USceneComponent* Component)"
  },
  {
    "label": "MoveInterpolationTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInterpolationTarget(const FVector& NewLocation, const FRotator& NewRotation)"
  },
  {
    "label": "ResetInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInterpolation()"
  },
  {
    "label": "UpdateThrottleInterpolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateThrottleInterpolation(float DeltaTime, USceneComponent* InterpComponent)"
  },
  {
    "label": "ComputeThrottleInterpolationMaxFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeThrottleInterpolationMaxFrames(float DeltaTime, USceneComponent* InterpComponent)"
  },
  {
    "label": "ResetThrottleInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetThrottleInterpolation(float DeltaTime)"
  },
  {
    "label": "HandleBlockingHit()",
    "kind": "Method",
    "detail": "Function (EHandleBlockingHitResult)",
    "insertText": "HandleBlockingHit(const FHitResult& Hit, float TimeTick, const FVector& MoveDelta, float& SubTickTimeRemaining)"
  },
  {
    "label": "HandleDeflection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDeflection(FHitResult& Hit, const FVector& OldVelocity, const uint32 NumBounces, float& SubTickTimeRemaining)"
  },
  {
    "label": "HandleSliding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSliding(FHitResult& Hit, float& SubTickTimeRemaining)"
  },
  {
    "label": "ComputeBounceResult()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeBounceResult(const FHitResult& Hit, float TimeSlice, const FVector& MoveDelta)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(FVector Force)"
  },
  {
    "label": "ClearPendingForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingForce(bool bClearImmediateForce = false)"
  },
  {
    "label": "TickInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickInterpolation(float DeltaTime)"
  }
]