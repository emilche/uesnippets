[
  {
    "label": "InactivePruneOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InactivePruneOp"
  },
  {
    "label": "TolerancePruneOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TolerancePruneOp"
  },
  {
    "label": "LevelSetPruneOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetPruneOp"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_PRUNE_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_PRUNE_HAS_BEEN_INCLUDED # include<openvdb / math / Math . h> # include<openvdb / Types . h> # include<openvdb / tree / NodeManager . h> # include<algorithm> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<TreeT> void)",
    "insertText": "prune(TreeT& tree, typename TreeT::ValueType tolerance = zeroVal<typename TreeT::ValueType>(), bool threaded = true, size_t grainSize = 1)"
  },
  {
    "label": "pruneTiles()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "pruneTiles(TreeT& tree, typename TreeT::ValueType tolerance = zeroVal<typename TreeT::ValueType>(), bool threaded = true, size_t grainSize = 1)"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "pruneInactive(TreeT& tree, bool threaded = true, size_t grainSize = 1)"
  },
  {
    "label": "pruneInactiveWithValue()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "pruneInactiveWithValue(TreeT& tree, const typename TreeT::ValueType& value, bool threaded = true, size_t grainSize = 1)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "pruneLevelSet(TreeT& tree, bool threaded = true, size_t grainSize = 1)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (template<TreeT> void)",
    "insertText": "pruneLevelSet(TreeT& tree, const typename TreeT::ValueType& outsideWidth, const typename TreeT::ValueType& insideWidth, bool threaded = true, size_t grainSize = 1)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<TreeT,Index TerminationLevel = 0> class InactivePruneOp { public : using ValueT = TreeT::ValueType ; using RootT = TreeT::RootNodeType ; using LeafT = TreeT::LeafNodeType ;)",
    "insertText": "static_assert(RootT::LEVEL > TerminationLevel, \"TerminationLevel out of range\")"
  },
  {
    "label": "InactivePruneOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InactivePruneOp(TreeT& tree) : mValue(tree.background())"
  },
  {
    "label": "clearAllAccessors()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "clearAllAccessors()"
  },
  {
    "label": "InactivePruneOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InactivePruneOp(TreeT& tree, const ValueT& v) : mValue(v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(LeafT&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<NodeT> void)",
    "insertText": "operator()(NodeT& node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "operator()(RootT& root)"
  },
  {
    "label": "eraseBackgroundTiles()",
    "kind": "Method",
    "detail": "Function (} root .)",
    "insertText": "eraseBackgroundTiles()"
  },
  {
    "label": "TolerancePruneOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TolerancePruneOp(TreeT& tree, const ValueT& tol) : mTolerance(tol)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueT value ; bool state ;)",
    "insertText": "for(typename RootT::ChildOnIter it = root.beginChildOn(); it; ++it)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueT value ; bool state ;)",
    "insertText": "for(typename NodeT::ChildOnIter it=node.beginChildOn(); it; ++it)"
  },
  {
    "label": "median()",
    "kind": "Method",
    "detail": "Function (} private : ValueT)",
    "insertText": "median(LeafT& leaf)"
  },
  {
    "label": "median()",
    "kind": "Method",
    "detail": "Function (} template<NodeT> NodeT::ValueType)",
    "insertText": "median(NodeT& node)"
  },
  {
    "label": "UnionT()",
    "kind": "Method",
    "detail": "Function (using UnionT = NodeT::UnionType ; UnionT* data = const_cast<)",
    "insertText": "UnionT(node.getTable())"
  },
  {
    "label": "midpoint()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "midpoint(NodeT::NUM_VALUES - 1)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "op(const UnionT& a, const UnionT& b)"
  },
  {
    "label": "nth_element()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "nth_element(data, data + midpoint, data + NodeT::NUM_VALUES, op)"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (} template<NodeT> std::enable_if<std::is_same<bool,NodeT::ValueType>::value,bool>::type)",
    "insertText": "isConstant(NodeT& node, bool& value, bool& state)"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (} template<NodeT> std::enable_if<! std::is_same<bool,NodeT::ValueType>::value,bool>::type)",
    "insertText": "isConstant(NodeT& node, ValueT& value, bool& state)"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (ValueT tmp ; const bool test = node .)",
    "insertText": "isConstant(value, tmp, state, mTolerance)"
  },
  {
    "label": "LevelSetPruneOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelSetPruneOp(TreeT& tree) : mOutside(tree.background()) , mInside(math::negative(mOutside))"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"LevelSetPruneOp: the background value cannot be negative!\")"
  },
  {
    "label": "LevelSetPruneOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LevelSetPruneOp(TreeT& tree, const ValueT& outside, const ValueT& inside) : mOutside(outside) , mInside(inside)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"LevelSetPruneOp: the outside value cannot be negative!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!math::isNegative(mInside))"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"LevelSetPruneOp: the inside value must be negative!\")"
  },
  {
    "label": "getTileValue()",
    "kind": "Method",
    "detail": "Function (} private : template<IterT> ValueT)",
    "insertText": "getTileValue(const IterT& iter)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (} const ValueT mOutside,mInside ; } ; template<TreeT> void)",
    "insertText": "prune(TreeT& tree, typename TreeT::ValueType tol, bool threaded, size_t grainSize)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::NodeManager<TreeT,TreeT::DEPTH - 2>)",
    "insertText": "nodes(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (TolerancePruneOp<TreeT>)",
    "insertText": "op(tree, tol)"
  },
  {
    "label": "foreachBottomUp()",
    "kind": "Method",
    "detail": "Function (nodes .)",
    "insertText": "foreachBottomUp(op, threaded, grainSize)"
  },
  {
    "label": "pruneTiles()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> void)",
    "insertText": "pruneTiles(TreeT& tree, typename TreeT::ValueType tol, bool threaded, size_t grainSize)"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> void)",
    "insertText": "pruneInactive(TreeT& tree, bool threaded, size_t grainSize)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InactivePruneOp<TreeT>)",
    "insertText": "op(tree)"
  },
  {
    "label": "pruneInactiveWithValue()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> void)",
    "insertText": "pruneInactiveWithValue(TreeT& tree, const typename TreeT::ValueType& v, bool threaded, size_t grainSize)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InactivePruneOp<TreeT>)",
    "insertText": "op(tree, v)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> void)",
    "insertText": "pruneLevelSet(TreeT& tree, const typename TreeT::ValueType& outside, const typename TreeT::ValueType& inside, bool threaded, size_t grainSize)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (LevelSetPruneOp<TreeT>)",
    "insertText": "op(tree, outside, inside)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> void)",
    "insertText": "pruneLevelSet(TreeT& tree, bool threaded, size_t grainSize)"
  }
]