[
  {
    "label": "FftSign",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FftSign"
  },
  {
    "label": "FftKernelSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FftKernelSet"
  },
  {
    "label": "WRAPPED_NAME()",
    "kind": "Method",
    "detail": "Function (# ifndef RADAUDIO_MDCT_INTERNAL_H # define RADAUDIO_MDCT_INTERNAL_H # include<stddef . h> # include \" rrCore . h \" # include \" radaudio_mdct . h \" enum FftSign { FftSign_Negative = 0,FftSign_Positive,} ; # ifdef RADAUDIO_WRAP # define)",
    "insertText": "WRAPPED_NAME(name) RR_STRING_JOIN(RADAUDIO_WRAP, name##_) #define radaudio_fft_impl WRAPPED_NAME(radaudio_fft_impl)"
  },
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (size_t const kMaxFFTLog2 = 9 ; size_t const kMaxFFTN = 1<<kMaxFFTLog2 ;)",
    "insertText": "FFT_ALIGN(float, s_fft_twiddles[kMaxFFTN * 2])"
  },
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT_ALIGN(float, s_mdct_long_twiddles[RADAUDIO_LONG_BLOCK_LEN])"
  },
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT_ALIGN(float, s_mdct_short_twiddles[RADAUDIO_SHORT_BLOCK_LEN])"
  },
  {
    "label": "burst_swizzle()",
    "kind": "Method",
    "detail": "Function (typedef U16 FFTIndex ; FFTIndex s_bit_reverse [ kMaxFFTN ] ; size_t kBurstSize = 1 6 ; size_t kBurstMask = kBurstSize - 1 ; size_t)",
    "insertText": "burst_swizzle(size_t i)"
  },
  {
    "label": "InitialPassesKernel()",
    "kind": "Method",
    "detail": "Function (} typedef size_t)",
    "insertText": "InitialPassesKernel(float * out, float const * in, size_t N, FftSign sign)"
  },
  {
    "label": "CFftKernel()",
    "kind": "Method",
    "detail": "Function (typedef void)",
    "insertText": "CFftKernel(float * out, size_t step, size_t swiz_N, FftSign sign)"
  },
  {
    "label": "ImdctPreFftKernel()",
    "kind": "Method",
    "detail": "Function (typedef void)",
    "insertText": "ImdctPreFftKernel(float * dest, float const * coeffs, float const * tw_re, float const * tw_im, size_t N)"
  },
  {
    "label": "ImdctPostFftKernel()",
    "kind": "Method",
    "detail": "Function (typedef void)",
    "insertText": "ImdctPostFftKernel(float * signal0, float * signal1, float const * dft, float const * tw_re, float const * tw_im, size_t N)"
  }
]