[
  {
    "label": "FftSign",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FftSign"
  },
  {
    "label": "FftKernelSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FftKernelSet"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (twiddle)",
    "insertText": "array(so 1/2 the table)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (from)",
    "insertText": "it(another 1/4 the table)"
  },
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (extern)",
    "insertText": "FFT_ALIGN(float, s_fft_twiddles[kMaxFFTN * 2])"
  },
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (extern)",
    "insertText": "FFT_ALIGN(float, s_mdct_long_twiddles[RADAUDIO_LONG_BLOCK_LEN])"
  },
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (extern)",
    "insertText": "FFT_ALIGN(float, s_mdct_short_twiddles[RADAUDIO_SHORT_BLOCK_LEN])"
  },
  {
    "label": "InitialPassesKernel()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "InitialPassesKernel(float * out, float const * in, size_t N, FftSign sign)"
  },
  {
    "label": "CFftKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFftKernel(float * out, size_t step, size_t swiz_N, FftSign sign)"
  },
  {
    "label": "ImdctPreFftKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImdctPreFftKernel(float * dest, float const * coeffs, float const * tw_re, float const * tw_im, size_t N)"
  },
  {
    "label": "ImdctPostFftKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImdctPostFftKernel(float * signal0, float * signal1, float const * dft, float const * tw_re, float const * tw_im, size_t N)"
  }
]