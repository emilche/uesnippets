[
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "GraphElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphElement"
  },
  {
    "label": "NodeGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeGraph"
  },
  {
    "label": "Backdrop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Backdrop"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "GraphElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphElement"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "NodeGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeGraph"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "Backdrop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Backdrop"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "setConnectedNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConnectedNode(const string& inputName, NodePtr node)"
  },
  {
    "label": "setConnectedNodeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConnectedNodeName(const string& inputName, const string& nodeName)"
  },
  {
    "label": "setConnectedOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConnectedOutput(const string& inputName, OutputPtr output)"
  },
  {
    "label": "getInputCount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getInputCount()"
  },
  {
    "label": "getNodeDefOutput()",
    "kind": "Method",
    "detail": "Function (OutputPtr)",
    "insertText": "getNodeDefOutput(ElementPtr connectingElement)"
  },
  {
    "label": "getNodeDef()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNodeDef(target)"
  },
  {
    "label": "addInputFromNodeDef()",
    "kind": "Method",
    "detail": "Function (InputPtr)",
    "insertText": "addInputFromNodeDef(const string& inputName)"
  },
  {
    "label": "addInputsFromNodeDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addInputsFromNodeDef()"
  },
  {
    "label": "addMaterialNode()",
    "kind": "Method",
    "detail": "Function (NodePtr)",
    "insertText": "addMaterialNode(const string& name = EMPTY_STRING, ConstNodePtr shaderNode = nullptr)"
  },
  {
    "label": "getNodesOfType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNodesOfType(MATERIAL_TYPE_STRING)"
  },
  {
    "label": "flattenSubgraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flattenSubgraphs(const string& target = EMPTY_STRING, NodePredicate filter = nullptr)"
  },
  {
    "label": "setNodeDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNodeDef(ConstNodeDefPtr nodeDef)"
  },
  {
    "label": "addInterfaceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addInterfaceName(const string& inputPath, const string& interfaceName)"
  },
  {
    "label": "removeInterfaceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeInterfaceName(const string& inputPath)"
  },
  {
    "label": "modifyInterfaceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyInterfaceName(const string& inputPath, const string& interfaceName)"
  },
  {
    "label": "hasAttribute()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasAttribute(CONTAINS_ATTRIBUTE)"
  },
  {
    "label": "getAttribute()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getAttribute(CONTAINS_ATTRIBUTE)"
  },
  {
    "label": "hasAttribute()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasAttribute(WIDTH_ATTRIBUTE)"
  },
  {
    "label": "hasAttribute()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasAttribute(HEIGHT_ATTRIBUTE)"
  },
  {
    "label": "setContainsElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setContainsElements(const vector<ConstTypedElementPtr>& nodes)"
  }
]