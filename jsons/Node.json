[
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "GraphElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphElement"
  },
  {
    "label": "NodeGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeGraph"
  },
  {
    "label": "Backdrop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Backdrop"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_NODE_H # define MATERIALX_NODE_H # include<MaterialXCore / Export . h> # include<MaterialXCore / Definition . h> MATERIALX_NAMESPACE_BEGIN class Node ; class GraphElement ; class NodeGraph ; class Backdrop ; using NodePtr = shared_ptr<Node> ; using ConstNodePtr = shared_ptr<const Node> ; using GraphElementPtr = shared_ptr<GraphElement> ; using ConstGraphElementPtr = shared_ptr<const GraphElement> ; using NodeGraphPtr = shared_ptr<NodeGraph> ; using ConstNodeGraphPtr = shared_ptr<const NodeGraph> ; using BackdropPtr = shared_ptr<Backdrop> ; using ConstBackdropPtr = shared_ptr<const Backdrop> ; using NodePredicate = std::function<)",
    "insertText": "bool(NodePtr node)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (class Node : public InterfaceElement { public :)",
    "insertText": "Node(ElementPtr parent, const string& name) : InterfaceElement(parent, CATEGORY, name)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Node()"
  },
  {
    "label": "setConnectedNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setConnectedNode(const string& inputName, NodePtr node)"
  },
  {
    "label": "getConnectedNode()",
    "kind": "Method",
    "detail": "Function (NodePtr)",
    "insertText": "getConnectedNode(const string& inputName)"
  },
  {
    "label": "setConnectedNodeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConnectedNodeName(const string& inputName, const string& nodeName)"
  },
  {
    "label": "getConnectedNodeName()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "getConnectedNodeName(const string& inputName)"
  },
  {
    "label": "setConnectedOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConnectedOutput(const string& inputName, OutputPtr output)"
  },
  {
    "label": "getConnectedOutput()",
    "kind": "Method",
    "detail": "Function (OutputPtr)",
    "insertText": "getConnectedOutput(const string& inputName)"
  },
  {
    "label": "getNodeDef()",
    "kind": "Method",
    "detail": "Function (NodeDefPtr)",
    "insertText": "getNodeDef(const string& target = EMPTY_STRING, bool allowRoughMatch = false)"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (InterfaceElementPtr)",
    "insertText": "getImplementation(const string& target = EMPTY_STRING)"
  },
  {
    "label": "getNodeDef()",
    "kind": "Method",
    "detail": "Function (NodeDefPtr nodeDef =)",
    "insertText": "getNodeDef(target)"
  },
  {
    "label": "getUpstreamEdge()",
    "kind": "Method",
    "detail": "Function (} Edge)",
    "insertText": "getUpstreamEdge(size_t index = 0)"
  },
  {
    "label": "getUpstreamEdgeCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getUpstreamEdgeCount()"
  },
  {
    "label": "getNodeDefOutput()",
    "kind": "Method",
    "detail": "Function (} OutputPtr)",
    "insertText": "getNodeDefOutput(ElementPtr connectingElement)"
  },
  {
    "label": "getDownstreamPorts()",
    "kind": "Method",
    "detail": "Function (vector<PortElementPtr>)",
    "insertText": "getDownstreamPorts()"
  },
  {
    "label": "getDeclaration()",
    "kind": "Method",
    "detail": "Function (ConstNodeDefPtr)",
    "insertText": "getDeclaration(const string& target = EMPTY_STRING)"
  },
  {
    "label": "addInputFromNodeDef()",
    "kind": "Method",
    "detail": "Function (} InputPtr)",
    "insertText": "addInputFromNodeDef(const string& inputName)"
  },
  {
    "label": "addInputsFromNodeDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addInputsFromNodeDef()"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validate(string* message = nullptr)"
  },
  {
    "label": "GraphElement()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; } ; class GraphElement : public InterfaceElement { protected :)",
    "insertText": "GraphElement(ElementPtr parent, const string& category, const string& name) : InterfaceElement(parent, category, name)"
  },
  {
    "label": "GraphElement()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "GraphElement()"
  },
  {
    "label": "addNode()",
    "kind": "Method",
    "detail": "Function (} NodePtr)",
    "insertText": "addNode(const string& category, const string& name = EMPTY_STRING, const string& type = DEFAULT_TYPE_STRING)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (NodePtr node = addChild<)",
    "insertText": "Node(name)"
  },
  {
    "label": "setCategory()",
    "kind": "Method",
    "detail": "Function (node ->)",
    "insertText": "setCategory(category)"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (node ->)",
    "insertText": "setType(type)"
  },
  {
    "label": "addNode()",
    "kind": "Method",
    "detail": "Function (NodePtr node =)",
    "insertText": "addNode(nodeDef->getNodeString(), name, nodeDef->getType())"
  },
  {
    "label": "setNodeDefString()",
    "kind": "Method",
    "detail": "Function (node ->)",
    "insertText": "setNodeDefString(nodeDef->getName())"
  },
  {
    "label": "getNodes()",
    "kind": "Method",
    "detail": "Function (} vector<NodePtr>)",
    "insertText": "getNodes(const string& category = EMPTY_STRING)"
  },
  {
    "label": "getNodesOfType()",
    "kind": "Method",
    "detail": "Function (} vector<NodePtr>)",
    "insertText": "getNodesOfType(const string& nodeType)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (vector<NodePtr> nodes ;)",
    "insertText": "for(auto node : getNodes())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (nodes .)",
    "insertText": "push_back(node)"
  },
  {
    "label": "removeNode()",
    "kind": "Method",
    "detail": "Function (} } return nodes ; } void)",
    "insertText": "removeNode(const string& name)"
  },
  {
    "label": "addMaterialNode()",
    "kind": "Method",
    "detail": "Function (} NodePtr)",
    "insertText": "addMaterialNode(const string& name = EMPTY_STRING, ConstNodePtr shaderNode = nullptr)"
  },
  {
    "label": "getMaterialNodes()",
    "kind": "Method",
    "detail": "Function (vector<NodePtr>)",
    "insertText": "getMaterialNodes()"
  },
  {
    "label": "addBackdrop()",
    "kind": "Method",
    "detail": "Function (} BackdropPtr)",
    "insertText": "addBackdrop(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getBackdrop()",
    "kind": "Method",
    "detail": "Function (} BackdropPtr)",
    "insertText": "getBackdrop(const string& name)"
  },
  {
    "label": "getBackdrops()",
    "kind": "Method",
    "detail": "Function (} vector<BackdropPtr>)",
    "insertText": "getBackdrops()"
  },
  {
    "label": "removeBackdrop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeBackdrop(const string& name)"
  },
  {
    "label": "Backdrop()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "Backdrop(name)"
  },
  {
    "label": "flattenSubgraphs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "flattenSubgraphs(const string& target = EMPTY_STRING, NodePredicate filter = nullptr)"
  },
  {
    "label": "topologicalSort()",
    "kind": "Method",
    "detail": "Function (vector<ElementPtr>)",
    "insertText": "topologicalSort()"
  },
  {
    "label": "asStringDot()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "asStringDot()"
  },
  {
    "label": "NodeGraph()",
    "kind": "Method",
    "detail": "Function (} ; class NodeGraph : public GraphElement { public :)",
    "insertText": "NodeGraph(ElementPtr parent, const string& name) : GraphElement(parent, CATEGORY, name)"
  },
  {
    "label": "NodeGraph()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "NodeGraph()"
  },
  {
    "label": "getMaterialOutputs()",
    "kind": "Method",
    "detail": "Function (} vector<OutputPtr>)",
    "insertText": "getMaterialOutputs()"
  },
  {
    "label": "setNodeDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNodeDef(ConstNodeDefPtr nodeDef)"
  },
  {
    "label": "getNodeDef()",
    "kind": "Method",
    "detail": "Function (NodeDefPtr)",
    "insertText": "getNodeDef()"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (InterfaceElementPtr)",
    "insertText": "getImplementation()"
  },
  {
    "label": "addInterfaceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addInterfaceName(const string& inputPath, const string& interfaceName)"
  },
  {
    "label": "removeInterfaceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeInterfaceName(const string& inputPath)"
  },
  {
    "label": "modifyInterfaceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyInterfaceName(const string& inputPath, const string& interfaceName)"
  },
  {
    "label": "Backdrop()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; } ; class Backdrop : public Element { public :)",
    "insertText": "Backdrop(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "Backdrop()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Backdrop()"
  },
  {
    "label": "setContainsString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setContainsString(const string& contains)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(CONTAINS_ATTRIBUTE, contains)"
  },
  {
    "label": "hasContainsString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasContainsString()"
  },
  {
    "label": "getContainsString()",
    "kind": "Method",
    "detail": "Function (} string)",
    "insertText": "getContainsString()"
  },
  {
    "label": "setWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setWidth(float width)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (setTypedAttribute<)",
    "insertText": "float(WIDTH_ATTRIBUTE, width)"
  },
  {
    "label": "hasWidth()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasWidth()"
  },
  {
    "label": "getWidth()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "getWidth()"
  },
  {
    "label": "setHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setHeight(float height)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (setTypedAttribute<)",
    "insertText": "float(HEIGHT_ATTRIBUTE, height)"
  },
  {
    "label": "hasHeight()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasHeight()"
  },
  {
    "label": "getHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "getHeight()"
  },
  {
    "label": "setContainsElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setContainsElements(const vector<ConstTypedElementPtr>& nodes)"
  },
  {
    "label": "getContainsElements()",
    "kind": "Method",
    "detail": "Function (vector<TypedElementPtr>)",
    "insertText": "getContainsElements()"
  }
]