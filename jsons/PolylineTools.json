[
  {
    "label": "FPolylineBBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolylineBBox"
  },
  {
    "label": "PointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointType"
  },
  {
    "label": "TPolylineApproximator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPolylineApproximator"
  },
  {
    "label": "CurvePointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurvePointType"
  },
  {
    "label": "FPolylineBBox()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / Aabb . h \" # include \" Math / Boundary . h \" # include \" Math / Geometry . h \" # include \" Math / Point . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / GeoPoint . h \" # include \" Utils / IndexOfCoordinateFinder . h \" # include \" Algo / ForEach . h \" # include \" Algo / Reverse . h \" namespace UE::CADKernel { struct FPolylineBBox { FPoint Max ; FPoint Min ; FPoint MaxPoints [ 3 ] ; FPoint MinPoints [ 3 ] ; double CoordinateOfMaxPoint [ 3 ] = { - HUGE_VALUE,- HUGE_VALUE,- HUGE_VALUE } ; double CoordinateOfMinPoint [ 3 ] = { HUGE_VALUE,HUGE_VALUE,HUGE_VALUE } ;)",
    "insertText": "FPolylineBBox() : Max(-HUGE_VALUE, -HUGE_VALUE, -HUGE_VALUE) , Min(HUGE_VALUE, HUGE_VALUE, HUGE_VALUE)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(const double Coordinate, const FPoint& Point)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Max [ Index ] = Point [ Index ] ; MaxPoints [ Index ] = Point ; CoordinateOfMaxPoint [ Index ] = Coordinate ; })",
    "insertText": "if(Point[Index] < Min[Index])"
  },
  {
    "label": "IsDichotomyToBePreferred()",
    "kind": "Method",
    "detail": "Function (Min [ Index ] = Point [ Index ] ; MinPoints [ Index ] = Point ; CoordinateOfMinPoint [ Index ] = Coordinate ; } } } } ; namespace PolylineTools { bool)",
    "insertText": "IsDichotomyToBePreferred(int32 InPolylineSize, int32 ResultSize)"
  },
  {
    "label": "SectionCoordinate()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SectionCoordinate(const TArray<double>& Array, const int32 Index, const double Coordinate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double DeltaU = Array [ Index + 1 ] - Array [ Index ] ;)",
    "insertText": "if(FMath::IsNearlyZero(DeltaU))"
  },
  {
    "label": "ComputeLength()",
    "kind": "Method",
    "detail": "Function (} template<PointType> double)",
    "insertText": "ComputeLength(const TArray<PointType>& Polyline)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (Length + = Polyline [ Index - 1 ] .)",
    "insertText": "Distance(Polyline[Index])"
  },
  {
    "label": "ComputeSquareToleranceForProjection()",
    "kind": "Method",
    "detail": "Function (} return Length ; } template<PointType> double)",
    "insertText": "ComputeSquareToleranceForProjection(const TArray<PointType>& Polyline)"
  },
  {
    "label": "ComputeLength()",
    "kind": "Method",
    "detail": "Function (const double Tolerance =)",
    "insertText": "ComputeLength(Polyline)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TArray<double> ElementLength ; const int32 InnerPointCount = InnerPolyline .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ElementLength .)",
    "insertText": "Reserve(InnerPointCount + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const FPoint* PrevPoint =& InnerPolyline [ 0 ] ; { ElementLength .)",
    "insertText": "Add(PrevPoint->Distance(StartPoint))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Index = 1; Index < InnerPointCount; ++Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const FPoint& CurrentPoint = InnerPolyline [ Index ] ; ElementLength .)",
    "insertText": "Add(PrevPoint->Distance(CurrentPoint))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PrevPoint =& CurrentPoint ; } { ElementLength .)",
    "insertText": "Add(PrevPoint->Distance(EndPoint))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } else { ElementLength .)",
    "insertText": "Reserve(1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementLength .)",
    "insertText": "Add(StartPoint.Distance(EndPoint))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "MoveTemp(ElementLength)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (} template<PointType> void)",
    "insertText": "ExtendTo(TArray<PointType>& Polyline, const PointType& DesiredEnd)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Polyline)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (PointType Delta = DesiredEnd - Polyline .)",
    "insertText": "Last()"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (Delta / = PolylineLength ; PolylineLength = 0 ; PolylineLength = Polyline [ 1 ] .)",
    "insertText": "Distance(Polyline[0])"
  },
  {
    "label": "ComputePoint()",
    "kind": "Method",
    "detail": "Function (} } template<class PointType> PointType)",
    "insertText": "ComputePoint(const TArray<double>& PolylineCoordinates, const TArray<PointType>& PolylinePoints, const int32 Index, const double PointCoordinate)"
  },
  {
    "label": "TPolylineApproximator()",
    "kind": "Method",
    "detail": "Function (} ; } template<class PointType> class TPolylineApproximator { protected : const TArray<double>& PolylineCoordinates ; const TArray<PointType>& PolylinePoints ; public :)",
    "insertText": "TPolylineApproximator(const TArray<double>& InPolylineCoordinates, const TArray<PointType>& InPolylinePoints) : PolylineCoordinates(InPolylineCoordinates) , PolylinePoints(InPolylinePoints)"
  },
  {
    "label": "ComputeCurvilinearCoordinatesOfPolyline()",
    "kind": "Method",
    "detail": "Function (} protected : double)",
    "insertText": "ComputeCurvilinearCoordinatesOfPolyline(const FLinearBoundary& InBoundary, TArray<double>& OutCurvilinearCoordinates, int32 BoundaryIndices[2])"
  },
  {
    "label": "GetStartEndIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStartEndIndex(InBoundary, BoundaryIndices)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutCurvilinearCoordinates .)",
    "insertText": "Reserve(BoundaryIndices[1] - BoundaryIndices[0] + 2)"
  },
  {
    "label": "ComputePoint()",
    "kind": "Method",
    "detail": "Function (PointType StartPoint =)",
    "insertText": "ComputePoint(BoundaryIndices[0], InBoundary.Min)"
  },
  {
    "label": "ComputePoint()",
    "kind": "Method",
    "detail": "Function (PointType PointIndice0 = PolylinePoints [ BoundaryIndices [ 0 ] ] ; PointType EndPoint =)",
    "insertText": "ComputePoint(BoundaryIndices[1], InBoundary.Max)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (PointType NextPointIndice1 = PolylinePoints [ BoundaryIndices [ 1 ] + 1 ] ; EdgeLength = StartPoint .)",
    "insertText": "Distance(PolylinePoints[BoundaryIndices[0] + 1])"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (LastEdgeSegmentLength = EndPoint .)",
    "insertText": "Distance(PolylinePoints[BoundaryIndices[1]])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCurvilinearCoordinates .)",
    "insertText": "Add(LengthOfSegments)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (const double SegLength = PolylinePoints [ Index ] .)",
    "insertText": "Distance(PolylinePoints[Index + 1])"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (EdgeLength = StartPoint .)",
    "insertText": "Distance(EndPoint)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCurvilinearCoordinates .)",
    "insertText": "Add(SegLength)"
  },
  {
    "label": "ComputePoint()",
    "kind": "Method",
    "detail": "Function (} return EdgeLength ; } PointType)",
    "insertText": "ComputePoint(const int32 Index, const double PointCoordinate)"
  },
  {
    "label": "ProjectPointToPolyline()",
    "kind": "Method",
    "detail": "Function (} ; double)",
    "insertText": "ProjectPointToPolyline(int32 BoundaryIndices[2], const PointType& InPointToProject, PointType& OutProjectedPoint)"
  },
  {
    "label": "ProjectPointOnSegment()",
    "kind": "Method",
    "detail": "Function (FPoint ProjectPoint =)",
    "insertText": "ProjectPointOnSegment(InPointToProject, PolylinePoints[Index], PolylinePoints[Index + 1], ParamU, true)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (continue ; } SquareDistance + =)",
    "insertText": "Square(ProjectPoint[1] - InPointToProject[1])"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (continue ; } SquareDistance + =)",
    "insertText": "Square(ProjectPoint[2] - InPointToProject[2])"
  },
  {
    "label": "LinearInterpolation()",
    "kind": "Method",
    "detail": "Function (continue ; } MinDistance = SquareDistance ; UForMinDistance = ParamU ; SegmentIndex = Index ; OutProjectedPoint = ProjectPoint ; } return)",
    "insertText": "LinearInterpolation(PolylineCoordinates, SegmentIndex, UForMinDistance)"
  },
  {
    "label": "GetStartEndIndex()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "GetStartEndIndex(const FLinearBoundary& InBoundary, int32 BoundaryIndices[2])"
  },
  {
    "label": "Finder()",
    "kind": "Method",
    "detail": "Function (FDichotomyFinder)",
    "insertText": "Finder(PolylineCoordinates)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (BoundaryIndices [ 0 ] = Finder .)",
    "insertText": "Find(InBoundary.Min)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (BoundaryIndices [ 1 ] = Finder .)",
    "insertText": "Find(InBoundary.Max)"
  },
  {
    "label": "ApproximatePoint()",
    "kind": "Method",
    "detail": "Function (} PointType)",
    "insertText": "ApproximatePoint(const double InCoordinate)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Index = Finder .)",
    "insertText": "Find(InCoordinate)"
  },
  {
    "label": "ApproximatePoint()",
    "kind": "Method",
    "detail": "Function (} template<class CurvePointType> void)",
    "insertText": "ApproximatePoint(double InCoordinate, CurvePointType& OutPoint, int32 InDerivativeOrder)"
  },
  {
    "label": "SectionCoordinate()",
    "kind": "Method",
    "detail": "Function (OutPoint . Point = PolylinePoints [ Index ] ; OutPoint . Gradient = FPoint::ZeroPoint ; OutPoint . Laplacian = FPoint::ZeroPoint ; return ; } double)",
    "insertText": "SectionCoordinate(InCoordinate - PolylineCoordinates[Index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPoint Tangent = PolylinePoints [ Index + 1 ] - PolylinePoints [ Index ] ; OutPoint . Point = PolylinePoints [ Index ] + Tangent* SectionCoordinate ;)",
    "insertText": "if(InDerivativeOrder > 0)"
  },
  {
    "label": "ApproximatePoints()",
    "kind": "Method",
    "detail": "Function (OutPoint . Gradient = Tangent ; OutPoint . Laplacian = FPoint::ZeroPoint ; } } template<class CurvePointType> void)",
    "insertText": "ApproximatePoints(const TArray<double>& InCoordinates, TArray<CurvePointType>& OutPoints, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Index = Finder .)",
    "insertText": "Find(InCoordinates[IPoint])"
  },
  {
    "label": "SectionCoordinate()",
    "kind": "Method",
    "detail": "Function (OutPoints [ IPoint ] . Point = PolylinePoints [ Index ] ; OutPoints [ IPoint ] . Gradient = FPoint::ZeroPoint ; OutPoints [ IPoint ] . Laplacian = FPoint::ZeroPoint ; continue ; } double)",
    "insertText": "SectionCoordinate(InCoordinates[IPoint] - PolylineCoordinates[Index])"
  },
  {
    "label": "DichotomyFinder()",
    "kind": "Method",
    "detail": "Function (OutPoints [ IPoint ] . Gradient = Tangent ; OutPoints [ IPoint ] . Laplacian = FPoint::ZeroPoint ; } } } ; FDichotomyFinder)",
    "insertText": "DichotomyFinder(PolylineCoordinates)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = DichotomyFinder .)",
    "insertText": "Find(InCoordinates[0])"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 EndIndex = DichotomyFinder .)",
    "insertText": "Find(InCoordinates.Last())"
  },
  {
    "label": "IsDichotomyToBePreferred()",
    "kind": "Method",
    "detail": "Function (bool bUseDichotomy =)",
    "insertText": "IsDichotomyToBePreferred(EndIndex - StartIndex, InCoordinates.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "SetNum(InCoordinates.Num(), EAllowShrinking::No)"
  },
  {
    "label": "ComputePoints()",
    "kind": "Method",
    "detail": "Function (DichotomyFinder . StartLower = StartIndex ; DichotomyFinder . StartUpper = EndIndex ;)",
    "insertText": "ComputePoints(DichotomyFinder)"
  },
  {
    "label": "LinearFinder()",
    "kind": "Method",
    "detail": "Function (} else { FLinearFinder)",
    "insertText": "LinearFinder(PolylineCoordinates, StartIndex)"
  },
  {
    "label": "ComputePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePoints(LinearFinder)"
  },
  {
    "label": "ApproximatePoints()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApproximatePoints(const TArray<double>& InCoordinates, TArray<PointType>& OutPoints)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Index = Finder .)",
    "insertText": "Find(Coordinate)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "Emplace(ComputePoint(Index, Coordinate))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "Empty(InCoordinates.Num())"
  },
  {
    "label": "SamplePolyline()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SamplePolyline(const FLinearBoundary& InBoundary, const double DesiredSegmentLength, TArray<double>& OutCoordinates)"
  },
  {
    "label": "ComputeCurvilinearCoordinatesOfPolyline()",
    "kind": "Method",
    "detail": "Function (int32 BoundaryIndices [ 2 ] ; TArray<double> CurvilinearCoordinates ; const double CurveLength =)",
    "insertText": "ComputeCurvilinearCoordinatesOfPolyline(InBoundary, CurvilinearCoordinates, BoundaryIndices)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "SetNum(3)"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (OutCoordinates [ 0 ] = InBoundary .)",
    "insertText": "GetMin()"
  },
  {
    "label": "GetMiddle()",
    "kind": "Method",
    "detail": "Function (OutCoordinates [ 1 ] = InBoundary .)",
    "insertText": "GetMiddle()"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (OutCoordinates [ 2 ] = InBoundary .)",
    "insertText": "GetMax()"
  },
  {
    "label": "CurveLength()",
    "kind": "Method",
    "detail": "Function (const double SectionLength =)",
    "insertText": "CurveLength(double)(SegmentNum)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "Empty()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "Reserve(SegmentNum + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "Add(InBoundary.Min)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "double(const int32, const int32, const double, const double)> ComputeSamplePointCoordinate = [&](const int32 IndexCurvilinear, const int32 IndexCoordinate, const double Length, const double Coordinate)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ; double CurvilinearLength = 0 . ; double LastCoordinate = InBoundary . Min ;)",
    "insertText": "for(int32 IndexCurvilinear = 1, IndexCoordinate = BoundaryIndices[0] + 1; IndexCurvilinear < CurvilinearCoordinates.Num(); ++IndexCurvilinear, ++IndexCoordinate)"
  },
  {
    "label": "ComputeSamplePointCoordinate()",
    "kind": "Method",
    "detail": "Function (const double Coordinate =)",
    "insertText": "ComputeSamplePointCoordinate(IndexCurvilinear, IndexCoordinate, FromStartSegmentLength, LastCoordinate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "Add(Coordinate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurvilinearLength + = SectionLength ; FromStartSegmentLength + = SectionLength ;)",
    "insertText": "if(CurvilinearLength > CurveLength || OutCoordinates.Num() == SegmentNum)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "Pop()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} OutCoordinates .)",
    "insertText": "Add(InBoundary.GetMax())"
  },
  {
    "label": "ProjectPointToPolyline()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ProjectPointToPolyline(const FLinearBoundary& InBoundary, const PointType& PointOnEdge, PointType& OutProjectedPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Coordinate > InBoundary.GetMax())"
  },
  {
    "label": "ApproximatePoint()",
    "kind": "Method",
    "detail": "Function (} OutProjectedPoint =)",
    "insertText": "ApproximatePoint(Coordinate)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutProjectedPointCoords .)",
    "insertText": "Empty(InPointsToProject.Num())"
  },
  {
    "label": "ProjectPointToPolyline()",
    "kind": "Method",
    "detail": "Function (PointType ProjectedPoint ; double Coordinate =)",
    "insertText": "ProjectPointToPolyline(BoundaryIndices, Point, ProjectedPoint)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutProjectedPointCoords .)",
    "insertText": "Emplace(Coordinate)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutProjectedPoints .)",
    "insertText": "Emplace(ProjectedPoint)"
  },
  {
    "label": "ProjectCoincidentalPolyline()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ProjectCoincidentalPolyline(const FLinearBoundary& InBoundary, const TArray<PointType>& InPointsToProject, bool bSameOrientation, TArray<double>& OutProjectedPointCoords, const double ToleranceOfProjection)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_PROJECT_COINCIDENTAL_POLYLINE int32 Counter = 0 ; + + Counter ; bool bDisplay = true ;)",
    "insertText": "if(bDisplay)"
  },
  {
    "label": "Session()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "Session(FString::Printf(TEXT(\"ProjectCoincidentalPolyline %d\"), Counter))"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function ({ F3DDebugSession)",
    "insertText": "_(TEXT(\"ProjectCoincidentalPolyline\"))"
  },
  {
    "label": "DisplayPolyline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPolyline(InPointsToProject, EVisuProperty::BlueCurve)"
  },
  {
    "label": "DisplayPolyline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPolyline(PolylinePoints, EVisuProperty::YellowCurve)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (} } # endif const double SquareTol = ToleranceOfProjection> 0 ?)",
    "insertText": "Square(ToleranceOfProjection) : PolylineTools::ComputeSquareToleranceForProjection(PolylinePoints)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = BoundaryIndices [ 0 ] ; const int32 EndIndex = BoundaryIndices [ 1 ] + 1 ; TFunction<)",
    "insertText": "double(const PointType&)> ProjectPointToPolyline = [&](const PointType& InPointToProject)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_PROJECT_COINCIDENTAL_POLYLINE PointType ClosePoint ; # endif double MinDistance = HUGE_VAL ; double UForMinDistance = 0 ; double ParamU = 0 . ; int32 SegmentIndex = 0 ;)",
    "insertText": "for(int32 Index = StartIndex; Index < EndIndex; ++Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(SquareDistance < MinDistance)"
  },
  {
    "label": "Session()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "Session(TEXT(\"ProjectPoint\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "DisplayPoint(InPointToProject, EVisuProperty::BluePoint)"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(ClosePoint, EVisuProperty::RedPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(bSameOrientation)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} } else { OutProjectedPointCoords .)",
    "insertText": "SetNum(InPointsToProject.Num())"
  },
  {
    "label": "ProjectPointToPolyline()",
    "kind": "Method",
    "detail": "Function (OutProjectedPointCoords [ Pndex ] =)",
    "insertText": "ProjectPointToPolyline(InPointsToProject[Index])"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "GetSubPolyline(const FLinearBoundary& InBoundary, const EOrientation Orientation, TArray<PointType>& OutPoints)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "Reserve(NewSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 PolylineStartIndex = BoundaryIndices [ 0 ] ; int32 PolylineEndIndex = BoundaryIndices [ 1 ] ;)",
    "insertText": "if(FMath::IsNearlyEqual(PolylineCoordinates[BoundaryIndices[0] + 1], InBoundary.Min, (double)DOUBLE_SMALL_NUMBER))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PolylineStartIndex + + ; })",
    "insertText": "if(FMath::IsNearlyEqual(PolylineCoordinates[BoundaryIndices[1]], InBoundary.Max, (double)DOUBLE_SMALL_NUMBER))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PolylineEndIndex - - ; })",
    "insertText": "if(Orientation)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "Emplace(ComputePoint(BoundaryIndices[0], InBoundary.Min))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "Append(PolylinePoints.GetData() + PolylineStartIndex + 1, PolylineEndIndex - PolylineStartIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} OutPoints .)",
    "insertText": "Emplace(ComputePoint(BoundaryIndices[1], InBoundary.Max))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "Emplace(PolylinePoints[Index])"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetSubPolyline(const FLinearBoundary& InBoundary, TArray<double>& OutCoordinates, TArray<PointType>& OutPoints)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (int32 NewSize = BoundaryIndices [ 1 ] - BoundaryIndices [ 0 ] + 2 ; OutCoordinates .)",
    "insertText": "Empty(NewSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BoundaryIndices [ 0 ] + + ; })",
    "insertText": "if(BoundaryIndices[1]> 0 && FMath::IsNearlyEqual(PolylineCoordinates[BoundaryIndices[1]], InBoundary.Max, (double)DOUBLE_SMALL_NUMBER))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutPoints .)",
    "insertText": "Append(PolylinePoints.GetData() + BoundaryIndices[0] + 1, BoundaryIndices[1] - BoundaryIndices[0])"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "Append(PolylineCoordinates.GetData() + BoundaryIndices[0] + 1, BoundaryIndices[1] - BoundaryIndices[0])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCoordinates .)",
    "insertText": "Add(InBoundary.Max)"
  },
  {
    "label": "UpdateSubPolylineBBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSubPolylineBBox(const FLinearBoundary& InBoundary, FPolylineBBox& OutBBox)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (BoundaryIndices [ 1 ] - - ; } } OutBBox .)",
    "insertText": "Update(InBoundary.Min, ComputePoint(BoundaryIndices[0], InBoundary.Min))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (OutBBox .)",
    "insertText": "Update(InBoundary.Max, ComputePoint(BoundaryIndices[1], InBoundary.Max))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (OutBBox .)",
    "insertText": "Update(PolylineCoordinates[Index], PolylinePoints[Index])"
  },
  {
    "label": "ComputeLength()",
    "kind": "Method",
    "detail": "Function (} } double)",
    "insertText": "ComputeLength()"
  },
  {
    "label": "ComputeLengthOfSubPolyline()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeLengthOfSubPolyline(const int BoundaryIndex[2], const FLinearBoundary& InBoundary)"
  },
  {
    "label": "ComputePoint()",
    "kind": "Method",
    "detail": "Function (PointType StartPoint =)",
    "insertText": "ComputePoint(BoundaryIndex[0], InBoundary.Min)"
  },
  {
    "label": "ComputePoint()",
    "kind": "Method",
    "detail": "Function (PointType EndPoint =)",
    "insertText": "ComputePoint(BoundaryIndex[1], InBoundary.Max)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (Length = StartPoint .)",
    "insertText": "Distance(PolylinePoints[BoundaryIndex[0] + 1])"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (Length + = EndPoint .)",
    "insertText": "Distance(PolylinePoints[BoundaryIndex[1]])"
  },
  {
    "label": "ComputeLengthOfSubPolyline()",
    "kind": "Method",
    "detail": "Function (} return Length ; } double)",
    "insertText": "ComputeLengthOfSubPolyline(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "ComputeBoundingBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeBoundingBox(const int BoundaryIndex[2], const FLinearBoundary& InBoundary, TAABB<PointType>& Aabb)"
  }
]