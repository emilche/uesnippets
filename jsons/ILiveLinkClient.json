[
  {
    "label": "ILiveLinkSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILiveLinkSource"
  },
  {
    "label": "ULiveLinkRole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULiveLinkRole"
  },
  {
    "label": "FLiveLinkSubjectFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkSubjectFrameData"
  },
  {
    "label": "FTimecode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimecode"
  },
  {
    "label": "ULiveLinkSourceSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULiveLinkSourceSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ILiveLinkClient_Base_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILiveLinkClient_Base_DEPRECATED"
  },
  {
    "label": "LIVELINKINTERFACE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LIVELINKINTERFACE_API"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / Delegate . h \" # include \" LiveLinkRefSkeleton . h \" # include \" Features / IModularFeature . h \" # include \" LiveLinkRole . h \" # include \" LiveLinkTypes . h \" # include \" LiveLinkPresetTypes . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" ILiveLinkClient . generated . h \" class ILiveLinkSource ; class ULiveLinkRole ; struct FLiveLinkSubjectFrameData ; struct FTimecode ; class ULiveLinkSourceSettings ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (Connected,Unresponsive,Disconnected,InvalidOrDisabled,Unknown } ;)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnLiveLinkSourceChangedDelegate, FGuid)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnLiveLinkSubjectChangedDelegate, FLiveLinkSubjectKey)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnLiveLinkSubjectStaticDataReceived, const FLiveLinkStaticDataStruct& ) DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnLiveLinkSubjectFrameDataReceived, const FLiveLinkFrameDataStruct& ) DECLARE_TS_MULTICAST_DELEGATE_ThreeParams(FOnLiveLinkSubjectStaticDataAdded, FLiveLinkSubjectKey , TSubclassOf<ULiveLinkRole> , const FLiveLinkStaticDataStruct& ) DECLARE_TS_MULTICAST_DELEGATE_ThreeParams(FOnLiveLinkSubjectFrameDataAdded, FLiveLinkSubjectKey , TSubclassOf<ULiveLinkRole> , const FLiveLinkFrameDataStruct& ) DECLARE_TS_MULTICAST_DELEGATE_FiveParams(FOnLiveLinkSubjectEvaluated, FLiveLinkSubjectKey , TSubclassOf<ULiveLinkRole> , const FLiveLinkTime& , bool , const FLiveLinkTime&)"
  },
  {
    "label": "ILiveLinkClient()",
    "kind": "Method",
    "detail": "Function (} ; PRAGMA_ENABLE_DEPRECATION_WARNINGS class ILiveLinkClient : public ILiveLinkClient_Base_DEPRECATED { public : const int32 LIVELINK_VERSION = 2 ; ~)",
    "insertText": "ILiveLinkClient()"
  },
  {
    "label": "AddSource()",
    "kind": "Method",
    "detail": "Function (} FName ModularFeatureName ; FGuid)",
    "insertText": "AddSource(TSharedPtr<ILiveLinkSource> Source)"
  },
  {
    "label": "AddVirtualSubjectSource()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "AddVirtualSubjectSource(FName SourceName)"
  },
  {
    "label": "CreateSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateSource(const FLiveLinkSourcePreset& SourcePreset)"
  },
  {
    "label": "RemoveSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSource(TSharedPtr<ILiveLinkSource> Source)"
  },
  {
    "label": "RemoveSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSource(FGuid SourceGuid)"
  },
  {
    "label": "HasSourceBeenAdded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSourceBeenAdded(TSharedPtr<ILiveLinkSource> Source)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "GetSources(bool bEvenIfPendingKill = false)"
  },
  {
    "label": "GetVirtualSources()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "GetVirtualSources(bool bEvenIfPendingKill = false)"
  },
  {
    "label": "GetSourcePreset()",
    "kind": "Method",
    "detail": "Function (FLiveLinkSourcePreset)",
    "insertText": "GetSourcePreset(FGuid SourceGuid, UObject* DuplicatedObjectOuter)"
  },
  {
    "label": "GetSourceType()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSourceType(FGuid SourceGuid)"
  },
  {
    "label": "GetSourceStatus()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSourceStatus(FGuid EntryGuid)"
  },
  {
    "label": "GetSourceMachineName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSourceMachineName(FGuid EntryGuid)"
  },
  {
    "label": "IsSourceStillValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceStillValid(FGuid EntryGuid)"
  },
  {
    "label": "PushSubjectStaticData_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSubjectStaticData_AnyThread(const FLiveLinkSubjectKey& SubjectKey, TSubclassOf<ULiveLinkRole> Role, FLiveLinkStaticDataStruct&& StaticData)"
  },
  {
    "label": "PushSubjectFrameData_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSubjectFrameData_AnyThread(const FLiveLinkSubjectKey& SubjectKey, FLiveLinkFrameDataStruct&& FrameData)"
  },
  {
    "label": "CreateSubject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateSubject(const FLiveLinkSubjectPreset& SubjectPreset)"
  },
  {
    "label": "AddVirtualSubject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddVirtualSubject(const FLiveLinkSubjectKey& VirtualSubjectKey, TSubclassOf<ULiveLinkVirtualSubject> VirtualSubjectClass)"
  },
  {
    "label": "RemoveVirtualSubject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVirtualSubject(const FLiveLinkSubjectKey& VirtualSubjectKey)"
  },
  {
    "label": "RemoveSubject_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubject_AnyThread(const FLiveLinkSubjectKey& SubjectName)"
  },
  {
    "label": "ClearSubjectsFrames_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubjectsFrames_AnyThread(FLiveLinkSubjectName SubjectName)"
  },
  {
    "label": "ClearSubjectsFrames_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubjectsFrames_AnyThread(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "ClearAllSubjectsFrames_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllSubjectsFrames_AnyThread()"
  },
  {
    "label": "GetSubjectRole_AnyThread()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<ULiveLinkRole>)",
    "insertText": "GetSubjectRole_AnyThread(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "GetSubjectRole_AnyThread()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<ULiveLinkRole>)",
    "insertText": "GetSubjectRole_AnyThread(FLiveLinkSubjectName SubjectName)"
  },
  {
    "label": "DoesSubjectSupportsRole_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSubjectSupportsRole_AnyThread(const FLiveLinkSubjectKey& SubjectKey, TSubclassOf<ULiveLinkRole> SupportedRole)"
  },
  {
    "label": "DoesSubjectSupportsRole_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSubjectSupportsRole_AnyThread(FLiveLinkSubjectName SubjectName, TSubclassOf<ULiveLinkRole> SupportedRole)"
  },
  {
    "label": "GetSubjectPreset()",
    "kind": "Method",
    "detail": "Function (FLiveLinkSubjectPreset)",
    "insertText": "GetSubjectPreset(const FLiveLinkSubjectKey& SubjectKey, UObject* DuplicatedObjectOuter)"
  },
  {
    "label": "GetSubjects()",
    "kind": "Method",
    "detail": "Function (TArray<FLiveLinkSubjectKey>)",
    "insertText": "GetSubjects(bool bIncludeDisabledSubject, bool bIncludeVirtualSubject)"
  },
  {
    "label": "IsSubjectValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubjectValid(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "IsSubjectValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubjectValid(FLiveLinkSubjectName SubjectName)"
  },
  {
    "label": "IsSubjectEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubjectEnabled(const FLiveLinkSubjectKey& SubjectKey, bool bForThisFrame)"
  },
  {
    "label": "IsSubjectEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubjectEnabled(FLiveLinkSubjectName SubjectName)"
  },
  {
    "label": "SetSubjectEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubjectEnabled(const FLiveLinkSubjectKey& SubjectKey, bool bEnabled)"
  },
  {
    "label": "IsSubjectTimeSynchronized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubjectTimeSynchronized(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "IsSubjectTimeSynchronized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubjectTimeSynchronized(FLiveLinkSubjectName SubjectName)"
  },
  {
    "label": "IsVirtualSubject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVirtualSubject(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "GetSubjectState()",
    "kind": "Method",
    "detail": "Function (ELiveLinkSubjectState)",
    "insertText": "GetSubjectState(FLiveLinkSubjectName InSubjectName)"
  },
  {
    "label": "GetSubjectsSupportingRole()",
    "kind": "Method",
    "detail": "Function (TArray<FLiveLinkSubjectKey>)",
    "insertText": "GetSubjectsSupportingRole(TSubclassOf<ULiveLinkRole> SupportedRole, bool bIncludeDisabledSubject, bool bIncludeVirtualSubject)"
  },
  {
    "label": "GetSubjectFrameTimes()",
    "kind": "Method",
    "detail": "Function (TArray<FLiveLinkTime>)",
    "insertText": "GetSubjectFrameTimes(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "GetSourceSettings()",
    "kind": "Method",
    "detail": "Function (ULiveLinkSourceSettings*)",
    "insertText": "GetSourceSettings(const FGuid& SourceKey)"
  },
  {
    "label": "GetSubjectFrameTimes()",
    "kind": "Method",
    "detail": "Function (TArray<FLiveLinkTime>)",
    "insertText": "GetSubjectFrameTimes(FLiveLinkSubjectName SubjectName)"
  },
  {
    "label": "GetSubjectSettings()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetSubjectSettings(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "GetSourceNameOverride()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSourceNameOverride(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "GetSubjectDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSubjectDisplayName(const FLiveLinkSubjectKey& SubjectKey)"
  },
  {
    "label": "GetSubjectStaticData_AnyThread()",
    "kind": "Method",
    "detail": "Function (const FLiveLinkStaticDataStruct*)",
    "insertText": "GetSubjectStaticData_AnyThread(const FLiveLinkSubjectKey& InSubjectKey, bool bGetOverrideData=true)"
  },
  {
    "label": "EvaluateFrameFromSource_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateFrameFromSource_AnyThread(const FLiveLinkSubjectKey& SubjectKey, TSubclassOf<ULiveLinkRole> Role, FLiveLinkSubjectFrameData& OutFrame)"
  },
  {
    "label": "EvaluateFrame_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateFrame_AnyThread(FLiveLinkSubjectName SubjectName, TSubclassOf<ULiveLinkRole> Role, FLiveLinkSubjectFrameData& OutFrame)"
  },
  {
    "label": "EvaluateFrameAtWorldTime_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateFrameAtWorldTime_AnyThread(FLiveLinkSubjectName SubjectName, double WorldTime, TSubclassOf<ULiveLinkRole> DesiredRole, FLiveLinkSubjectFrameData& OutFrame)"
  },
  {
    "label": "OnLiveLinkTicked()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "OnLiveLinkTicked()"
  },
  {
    "label": "ForceTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceTick()"
  },
  {
    "label": "HasPendingSubjectFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingSubjectFrames()"
  },
  {
    "label": "ClearOverrideStaticData_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOverrideStaticData_AnyThread(const FLiveLinkSubjectKey& InSubjectKey)"
  },
  {
    "label": "OnLiveLinkSourcesChanged()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "OnLiveLinkSourcesChanged()"
  },
  {
    "label": "OnLiveLinkSubjectsChanged()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "OnLiveLinkSubjectsChanged()"
  },
  {
    "label": "OnLiveLinkSourceAdded()",
    "kind": "Method",
    "detail": "Function (FOnLiveLinkSourceChangedDelegate&)",
    "insertText": "OnLiveLinkSourceAdded()"
  },
  {
    "label": "OnLiveLinkSourceRemoved()",
    "kind": "Method",
    "detail": "Function (FOnLiveLinkSourceChangedDelegate&)",
    "insertText": "OnLiveLinkSourceRemoved()"
  },
  {
    "label": "OnLiveLinkSubjectAdded()",
    "kind": "Method",
    "detail": "Function (FOnLiveLinkSubjectChangedDelegate&)",
    "insertText": "OnLiveLinkSubjectAdded()"
  },
  {
    "label": "OnLiveLinkSubjectRemoved()",
    "kind": "Method",
    "detail": "Function (FOnLiveLinkSubjectChangedDelegate&)",
    "insertText": "OnLiveLinkSubjectRemoved()"
  },
  {
    "label": "OnLiveLinkSubjectEvaluated()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FOnLiveLinkSubjectEvaluated&)",
    "insertText": "OnLiveLinkSubjectEvaluated()"
  },
  {
    "label": "RegisterForFrameDataReceived()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RegisterForFrameDataReceived(const FLiveLinkSubjectKey& InSubjectKey, const FOnLiveLinkSubjectStaticDataReceived::FDelegate& OnStaticDataReceived_AnyThread, const FOnLiveLinkSubjectFrameDataReceived::FDelegate& OnFrameDataReceived_AnyThread, FDelegateHandle& OutStaticDataReceivedHandle, FDelegateHandle& OutFrameDataReceivedHandleconst)"
  },
  {
    "label": "UnregisterForFrameDataReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterForFrameDataReceived(const FLiveLinkSubjectKey& InSubjectKey, FDelegateHandle InStaticDataReceivedHandle, FDelegateHandle InFrameDataReceivedHandle)"
  },
  {
    "label": "RegisterForSubjectFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterForSubjectFrames(FLiveLinkSubjectName SubjectName, const FOnLiveLinkSubjectStaticDataAdded::FDelegate& OnStaticDataAdded, const FOnLiveLinkSubjectFrameDataAdded::FDelegate& OnFrameDataAddedd, FDelegateHandle& OutStaticDataAddedHandle, FDelegateHandle& OutFrameDataAddeddHandle, TSubclassOf<ULiveLinkRole>& OutSubjectRole, FLiveLinkStaticDataStruct* OutStaticData = nullptr)"
  },
  {
    "label": "UnregisterSubjectFramesHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubjectFramesHandle(FLiveLinkSubjectName SubjectName, FDelegateHandle StaticDataAddedHandle, FDelegateHandle FrameDataAddedHandle)"
  }
]