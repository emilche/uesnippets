[
  {
    "label": "ResourceAdaptationProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResourceAdaptationProcessor"
  },
  {
    "label": "ResourceListenerDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResourceListenerDelegate"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MitigationResultAndLogMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MitigationResultAndLogMessage"
  },
  {
    "label": "ResourceAdaptationProcessor()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_ADAPTATION_RESOURCE_ADAPTATION_PROCESSOR_H_ # define CALL_ADAPTATION_RESOURCE_ADAPTATION_PROCESSOR_H_ # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / adaptation / resource . h \" # include \" api / rtp_parameters . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / video / video_adaptation_counters . h \" # include \" api / video / video_frame . h \" # include \" call / adaptation / resource_adaptation_processor_interface . h \" # include \" call / adaptation / video_source_restrictions . h \" # include \" call / adaptation / video_stream_adapter . h \" # include \" call / adaptation / video_stream_input_state . h \" # include \" call / adaptation / video_stream_input_state_provider . h \" # include \" video / video_stream_encoder_observer . h \" namespace webrtc { class ResourceAdaptationProcessor : public ResourceAdaptationProcessorInterface,public VideoSourceRestrictionsListener,public ResourceListener { public :)",
    "insertText": "ResourceAdaptationProcessor(VideoStreamAdapter* video_stream_adapter)"
  },
  {
    "label": "ResourceAdaptationProcessor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ResourceAdaptationProcessor()"
  },
  {
    "label": "AddResourceLimitationsListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceLimitationsListener(ResourceLimitationsListener* limitations_listener)"
  },
  {
    "label": "RemoveResourceLimitationsListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResourceLimitationsListener(ResourceLimitationsListener* limitations_listener)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "GetResources()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<Resource>>)",
    "insertText": "GetResources()"
  },
  {
    "label": "RemoveResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "OnResourceUsageStateMeasured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResourceUsageStateMeasured(rtc::scoped_refptr<Resource> resource, ResourceUsageState usage_state)"
  },
  {
    "label": "OnVideoSourceRestrictionsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoSourceRestrictionsUpdated(VideoSourceRestrictions restrictions, const VideoAdaptationCounters& adaptation_counters, rtc::scoped_refptr<Resource> reason, const VideoSourceRestrictions& unfiltered_restrictions)"
  },
  {
    "label": "ResourceListenerDelegate()",
    "kind": "Method",
    "detail": "Function (private : class ResourceListenerDelegate : public rtc::RefCountInterface,public ResourceListener { public :)",
    "insertText": "ResourceListenerDelegate(ResourceAdaptationProcessor* processor)"
  },
  {
    "label": "OnProcessorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProcessorDestroyed()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : TaskQueueBase* task_queue_ ; ResourceAdaptationProcessor* processor_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "MitigationResultAndLogMessage()",
    "kind": "Method",
    "detail": "Function (} ; enum class MitigationResult { kNotMostLimitedResource,kSharedMostLimitedResource,kRejectedByAdapter,kAdaptationApplied,} ; struct MitigationResultAndLogMessage {)",
    "insertText": "MitigationResultAndLogMessage()"
  },
  {
    "label": "MitigationResultAndLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MitigationResultAndLogMessage(MitigationResult result, absl::string_view message)"
  },
  {
    "label": "OnResourceUnderuse()",
    "kind": "Method",
    "detail": "Function (MitigationResult result ; std::string message ; } ; MitigationResultAndLogMessage)",
    "insertText": "OnResourceUnderuse(rtc::scoped_refptr<Resource> reason_resource)"
  },
  {
    "label": "OnResourceOveruse()",
    "kind": "Method",
    "detail": "Function (MitigationResultAndLogMessage)",
    "insertText": "OnResourceOveruse(rtc::scoped_refptr<Resource> reason_resource)"
  },
  {
    "label": "UpdateResourceLimitations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceLimitations(rtc::scoped_refptr<Resource> reason_resource, const VideoSourceRestrictions& restrictions, const VideoAdaptationCounters& counters) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "FindMostLimitedResources()",
    "kind": "Method",
    "detail": "Function (std::pair<std::vector<rtc::scoped_refptr<Resource>>,VideoStreamAdapter::RestrictionsWithCounters>)",
    "insertText": "FindMostLimitedResources() const RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "RemoveLimitationsImposedByResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLimitationsImposedByResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase* task_queue_ ; rtc::scoped_refptr<ResourceListenerDelegate> resource_listener_delegate_ ; Mutex resources_lock_ ; std::vector<rtc::scoped_refptr<Resource>> resources_)",
    "insertText": "RTC_GUARDED_BY(resources_lock_)"
  }
]