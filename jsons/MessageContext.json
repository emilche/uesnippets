[
  {
    "label": "FMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageContext"
  },
  {
    "label": "FMessageContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IMessageContext . h \" # include \" IMessageAttachment . h \" class FMessageContext : public IMessageContext { public :)",
    "insertText": "FMessageContext() : Message(nullptr) , TypeInfo(nullptr)"
  },
  {
    "label": "FMessageContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMessageContext(void* InMessage, UScriptStruct* InTypeInfo, const TMap<FName, FString>& InAnnotations, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& InAttachment, const FMessageAddress& InSender, const TArray<FMessageAddress>& InRecipients, EMessageScope InScope, EMessageFlags InFlags, const FDateTime& InTimeSent, const FDateTime& InExpiration, ENamedThreads::Type InSenderThread ) : Annotations(InAnnotations) , Attachment(InAttachment) , Expiration(InExpiration) , Message(InMessage) , Recipients(InRecipients) , Scope(InScope) , Flags(InFlags) , Sender(InSender) , SenderThread(InSenderThread) , TimeSent(InTimeSent) , TypeInfo(InTypeInfo)"
  },
  {
    "label": "FMessageContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMessageContext(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& InContext, const FMessageAddress& InForwarder, const TArray<FMessageAddress>& NewRecipients, EMessageScope NewScope, const FDateTime& InTimeForwarded, ENamedThreads::Type InForwarderThread ) : Message(nullptr) , OriginalContext(InContext) , Recipients(NewRecipients) , Scope(NewScope) , Flags(EMessageFlags::None) , Sender(InForwarder) , SenderThread(InForwarderThread) , TimeSent(InTimeForwarded)"
  },
  {
    "label": "FMessageContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMessageContext()"
  },
  {
    "label": "GetAnnotations()",
    "kind": "Method",
    "detail": "Function (public : const TMap<FName,FString>&)",
    "insertText": "GetAnnotations()"
  },
  {
    "label": "GetAttachment()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMessageAttachment,ESPMode::ThreadSafe>)",
    "insertText": "GetAttachment()"
  },
  {
    "label": "GetExpiration()",
    "kind": "Method",
    "detail": "Function (const FDateTime&)",
    "insertText": "GetExpiration()"
  },
  {
    "label": "GetMessage()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetMessage()"
  },
  {
    "label": "GetMessageTypeInfo()",
    "kind": "Method",
    "detail": "Function (const TWeakObjectPtr<UScriptStruct>&)",
    "insertText": "GetMessageTypeInfo()"
  },
  {
    "label": "GetOriginalContext()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMessageContext,ESPMode::ThreadSafe>)",
    "insertText": "GetOriginalContext()"
  },
  {
    "label": "GetRecipients()",
    "kind": "Method",
    "detail": "Function (const TArray<FMessageAddress>&)",
    "insertText": "GetRecipients()"
  },
  {
    "label": "GetScope()",
    "kind": "Method",
    "detail": "Function (EMessageScope)",
    "insertText": "GetScope()"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (EMessageFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "GetSender()",
    "kind": "Method",
    "detail": "Function (const FMessageAddress&)",
    "insertText": "GetSender()"
  },
  {
    "label": "GetForwarder()",
    "kind": "Method",
    "detail": "Function (const FMessageAddress&)",
    "insertText": "GetForwarder()"
  },
  {
    "label": "GetSenderThread()",
    "kind": "Method",
    "detail": "Function (ENamedThreads::Type)",
    "insertText": "GetSenderThread()"
  },
  {
    "label": "GetTimeForwarded()",
    "kind": "Method",
    "detail": "Function (const FDateTime&)",
    "insertText": "GetTimeForwarded()"
  },
  {
    "label": "GetTimeSent()",
    "kind": "Method",
    "detail": "Function (const FDateTime&)",
    "insertText": "GetTimeSent()"
  }
]