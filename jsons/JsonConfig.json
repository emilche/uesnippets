[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "EDITORCONFIG_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORCONFIG_API"
  },
  {
    "label": "FPart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPart"
  },
  {
    "label": "FJsonPath()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Async . h \" # include \" Async / Future . h \" # include \" Concepts / EqualityComparable . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Dom / JsonObject . h \" # include \" Templates / SharedPointer . h \" class FJsonObject ; class FJsonValue ; class FName ; class FText ; namespace UE { class FJsonPath { public : struct FPart { FString Name ; int32 Index = INDEX_NONE ; } ;)",
    "insertText": "FJsonPath()"
  },
  {
    "label": "FJsonPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJsonPath(const TCHAR* Path)"
  },
  {
    "label": "FJsonPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJsonPath(FStringView Path)"
  },
  {
    "label": "FJsonPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJsonPath(const FJsonPath& Other)"
  },
  {
    "label": "FJsonPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJsonPath(FJsonPath&& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "Length()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(FStringView Name)"
  },
  {
    "label": "SetArrayIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrayIndex(int32 Index)"
  },
  {
    "label": "GetSubPath()",
    "kind": "Method",
    "detail": "Function (FJsonPath)",
    "insertText": "GetSubPath(int32 NumParts)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FPart&)",
    "insertText": "operator(int32 Idx)"
  },
  {
    "label": "FJsonConfig()",
    "kind": "Method",
    "detail": "Function (private : TArray<FPart> PathParts ; } ; using FJsonValuePair = TPair<TSharedPtr<FJsonValue>,TSharedPtr<FJsonValue>> ; class FJsonConfig { public :)",
    "insertText": "FJsonConfig()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParent(const TSharedPtr<FJsonConfig>& Parent)"
  },
  {
    "label": "LoadFromFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromFile(FStringView FilePath)"
  },
  {
    "label": "LoadFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromString(FStringView Content)"
  },
  {
    "label": "SaveToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveToFile(FStringView FilePath)"
  },
  {
    "label": "SaveToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveToString(FString& OutResult)"
  },
  {
    "label": "GetParentConfig()",
    "kind": "Method",
    "detail": "Function (} const FJsonConfig*)",
    "insertText": "GetParentConfig()"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "TryGetNumber(const FJsonPath& Path, T& OutValue)"
  },
  {
    "label": "TryGetBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetBool(const FJsonPath& Path, bool& OutValue)"
  },
  {
    "label": "TryGetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetString(const FJsonPath& Path, FString& OutValue)"
  },
  {
    "label": "TryGetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetString(const FJsonPath& Path, FName& OutValue)"
  },
  {
    "label": "TryGetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetString(const FJsonPath& Path, FText& OutValue)"
  },
  {
    "label": "TryGetJsonValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetJsonValue(const FJsonPath& Path, TSharedPtr<FJsonValue>& OutValue)"
  },
  {
    "label": "TryGetJsonObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetJsonObject(const FJsonPath& Path, TSharedPtr<FJsonObject>& OutValue)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<TSharedPtr<FJsonValue>>& OutArray)"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject>)",
    "insertText": "GetRootObject()"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<bool>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<int8>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<int16>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<int32>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<int64>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<uint8>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<uint16>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<uint32>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<uint64>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<float>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<double>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<FString>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<FText>& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArray(const FJsonPath& Path, TArray<FName>& OutArray)"
  },
  {
    "label": "TryGetMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetMap(const FJsonPath& Path, TArray<FJsonValuePair>& OutMap)"
  },
  {
    "label": "SetNumber()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "SetNumber(const FJsonPath& Path, T Value)"
  },
  {
    "label": "SetBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBool(const FJsonPath& Path, bool Value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetString(const FJsonPath& Path, FStringView Value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetString(const FJsonPath& Path, const FText& Value)"
  },
  {
    "label": "SetJsonValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetJsonValue(const FJsonPath& Path, const TSharedPtr<FJsonValue>& Value)"
  },
  {
    "label": "SetJsonObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetJsonObject(const FJsonPath& Path, const TSharedPtr<FJsonObject>& Object)"
  },
  {
    "label": "SetJsonArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetJsonArray(const FJsonPath& Path, const TArray<TSharedPtr<FJsonValue>>& Array)"
  },
  {
    "label": "SetRootObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRootObject(const TSharedPtr<FJsonObject>& Object)"
  },
  {
    "label": "HasOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOverride(const FJsonPath& Path)"
  },
  {
    "label": "TryGetArrayHelper()",
    "kind": "Method",
    "detail": "Function (private : template<T,TGetter> bool)",
    "insertText": "TryGetArrayHelper(const FJsonPath& Path, TArray<T>& OutArray, TGetter Getter)"
  },
  {
    "label": "TryGetNumericArrayHelper()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "TryGetNumericArrayHelper(const FJsonPath& Path, TArray<T>& OutArray)"
  },
  {
    "label": "SetJsonValueInMerged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetJsonValueInMerged(const FJsonPath& Path, const TSharedPtr<FJsonValue>& Value)"
  },
  {
    "label": "SetJsonValueInOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetJsonValueInOverride(const FJsonPath& Path, const TSharedPtr<FJsonValue>& NewValue, const TSharedPtr<FJsonValue>& PreviousValue, const TSharedPtr<FJsonValue>& ParentValue)"
  },
  {
    "label": "SetArrayValueInOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetArrayValueInOverride(const TSharedPtr<FJsonValue>& CurrentValue, const TArray<TSharedPtr<FJsonValue>>& NewArray, const TSharedPtr<FJsonValue>& ParentValue)"
  },
  {
    "label": "SetObjectValueInOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetObjectValueInOverride(const TSharedPtr<FJsonObject>& CurrentObject, const TSharedPtr<FJsonObject>& NewObject, const TSharedPtr<FJsonValue>& ParentValue)"
  },
  {
    "label": "RemoveJsonValueFromOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveJsonValueFromOverride(const FJsonPath& Path, const TSharedPtr<FJsonValue>& PreviousValue)"
  },
  {
    "label": "MergeThisWithParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeThisWithParent()"
  },
  {
    "label": "OnParentConfigChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParentConfigChanged()"
  }
]