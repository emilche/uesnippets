[
  {
    "label": "indexed_based_stl_iterator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "indexed_based_stl_iterator_traits"
  },
  {
    "label": "indexed_based_stl_iterator_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "indexed_based_stl_iterator_base"
  },
  {
    "label": "indexed_based_stl_reverse_iterator_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "indexed_based_stl_reverse_iterator_base"
  },
  {
    "label": "pointer_based_stl_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pointer_based_stl_iterator"
  },
  {
    "label": "generic_randaccess_stl_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_randaccess_stl_iterator"
  },
  {
    "label": "subvector_stl_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "subvector_stl_iterator"
  },
  {
    "label": "subvector_stl_iterator_ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "subvector_stl_iterator_ptr"
  },
  {
    "label": "subvector_stl_reverse_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "subvector_stl_reverse_iterator"
  },
  {
    "label": "subvector_stl_reverse_iterator_ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "subvector_stl_reverse_iterator_ptr"
  },
  {
    "label": "indexed_based_stl_iterator_base()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_STLITERATORS_H # define EIGEN_STLITERATORS_H namespace Eigen { namespace internal { template<IteratorType> struct indexed_based_stl_iterator_traits ; template<Derived> class indexed_based_stl_iterator_base { protected : typedef indexed_based_stl_iterator_traits<Derived> traits ; typedef traits::XprType XprType ; typedef indexed_based_stl_iterator_base<traits::non_const_iterator> non_const_iterator ; typedef indexed_based_stl_iterator_base<traits::const_iterator> const_iterator ; typedef internal::conditional<internal::is_const<XprType>::value,non_const_iterator,const_iterator>::type other_iterator ; class indexed_based_stl_iterator_base<traits::const_iterator> ; class indexed_based_stl_iterator_base<traits::non_const_iterator> ; public : typedef Index difference_type ; typedef std::random_access_iterator_tag iterator_category ;)",
    "insertText": "indexed_based_stl_iterator_base() EIGEN_NO_THROW : mp_xpr(0), m_index(0)"
  },
  {
    "label": "indexed_based_stl_iterator_base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexed_based_stl_iterator_base(XprType& xpr, Index index) EIGEN_NO_THROW : mp_xpr(&xpr), m_index(index)"
  },
  {
    "label": "indexed_based_stl_iterator_base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexed_based_stl_iterator_base(const non_const_iterator& other) EIGEN_NO_THROW : mp_xpr(other.mp_xpr), m_index(other.m_index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} indexed_based_stl_iterator_base&)",
    "insertText": "operator(const non_const_iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mp_xpr = other . mp_xpr ; m_index = other . m_index ; return* this ; } Derived&)",
    "insertText": "operator()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (+ + m_index ; return)",
    "insertText": "derived()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Derived)",
    "insertText": "operator(int)"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "prev(derived())"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "ret(a.derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ret + = b ; return ret ; } Derived)",
    "insertText": "operator(const indexed_based_stl_iterator_base& a, Index b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ret - = b ; return ret ; } Derived)",
    "insertText": "operator(Index a, const indexed_based_stl_iterator_base& b)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "ret(b.derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ret - = a ; return ret ; } Derived&)",
    "insertText": "operator(Index b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} difference_type)",
    "insertText": "operator(const indexed_based_stl_iterator_base& other)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(mp_xpr == other.mp_xpr)"
  },
  {
    "label": "indexed_based_stl_reverse_iterator_base()",
    "kind": "Method",
    "detail": "Function (} XprType* mp_xpr ; Index m_index ; } ; template<Derived> class indexed_based_stl_reverse_iterator_base { protected : typedef indexed_based_stl_iterator_traits<Derived> traits ; typedef traits::XprType XprType ; typedef indexed_based_stl_reverse_iterator_base<traits::non_const_iterator> non_const_iterator ; typedef indexed_based_stl_reverse_iterator_base<traits::const_iterator> const_iterator ; typedef internal::conditional<internal::is_const<XprType>::value,non_const_iterator,const_iterator>::type other_iterator ; class indexed_based_stl_reverse_iterator_base<traits::const_iterator> ; class indexed_based_stl_reverse_iterator_base<traits::non_const_iterator> ; public : typedef Index difference_type ; typedef std::random_access_iterator_tag iterator_category ;)",
    "insertText": "indexed_based_stl_reverse_iterator_base() : mp_xpr(0), m_index(0)"
  },
  {
    "label": "indexed_based_stl_reverse_iterator_base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexed_based_stl_reverse_iterator_base(XprType& xpr, Index index) : mp_xpr(&xpr), m_index(index)"
  },
  {
    "label": "indexed_based_stl_reverse_iterator_base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexed_based_stl_reverse_iterator_base(const non_const_iterator& other) : mp_xpr(other.mp_xpr), m_index(other.m_index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ret + = b ; return ret ; } Derived)",
    "insertText": "operator(const indexed_based_stl_reverse_iterator_base& a, Index b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ret - = b ; return ret ; } Derived)",
    "insertText": "operator(Index a, const indexed_based_stl_reverse_iterator_base& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} difference_type)",
    "insertText": "operator(const indexed_based_stl_reverse_iterator_base& other)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} XprType* mp_xpr ; Index m_index ; } ; template<XprType> class pointer_based_stl_iterator { enum { is_lvalue = internal::is_lvalue<XprType>::value } ; typedef pointer_based_stl_iterator<internal::remove_const<XprType>::type> non_const_iterator ; typedef pointer_based_stl_iterator<internal::add_const<XprType>::type> const_iterator ; typedef internal::conditional<internal::is_const<XprType>::value,non_const_iterator,const_iterator>::type other_iterator ; class pointer_based_stl_iterator<internal::add_const<XprType>::type> ; class pointer_based_stl_iterator<internal::remove_const<XprType>::type> ; public : typedef Index difference_type ; typedef XprType::Scalar value_type ; typedef std::random_access_iterator_tag iterator_category ; typedef internal::conditional<)",
    "insertText": "bool(is_lvalue)"
  },
  {
    "label": "pointer_based_stl_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pointer_based_stl_iterator() EIGEN_NO_THROW : m_ptr(0)"
  },
  {
    "label": "pointer_based_stl_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pointer_based_stl_iterator(XprType& xpr, Index index) EIGEN_NO_THROW : m_incr(xpr.innerStride())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (m_ptr = xpr .)",
    "insertText": "data() + index * m_incr.value()"
  },
  {
    "label": "pointer_based_stl_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pointer_based_stl_iterator(const non_const_iterator& other) EIGEN_NO_THROW : m_ptr(other.m_ptr), m_incr(other.m_incr)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (m_ptr = other . m_ptr ; m_incr .)",
    "insertText": "setValue(other.m_incr)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_ptr + = m_incr .)",
    "insertText": "value()"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (pointer_based_stl_iterator)",
    "insertText": "prev(*this)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (pointer_based_stl_iterator)",
    "insertText": "ret(a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ret + = b ; return ret ; } pointer_based_stl_iterator)",
    "insertText": "operator(const pointer_based_stl_iterator& a, Index b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ret - = b ; return ret ; } pointer_based_stl_iterator)",
    "insertText": "operator(Index a, const pointer_based_stl_iterator& b)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (pointer_based_stl_iterator)",
    "insertText": "ret(b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} difference_type)",
    "insertText": "operator(const other_iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const pointer_based_stl_iterator& other)"
  },
  {
    "label": "generic_randaccess_stl_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "generic_randaccess_stl_iterator() : Base()"
  },
  {
    "label": "generic_randaccess_stl_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "generic_randaccess_stl_iterator(XprType& xpr, Index index) : Base(xpr,index)"
  },
  {
    "label": "generic_randaccess_stl_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "generic_randaccess_stl_iterator(const typename Base::non_const_iterator& other) : Base(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator(Index i)"
  },
  {
    "label": "subvector_stl_iterator_ptr()",
    "kind": "Method",
    "detail": "Function (typedef reference::PlainObject value_type ; private : class subvector_stl_iterator_ptr { public :)",
    "insertText": "subvector_stl_iterator_ptr(const reference &subvector) : m_subvector(subvector)"
  },
  {
    "label": "subvector_stl_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "subvector_stl_iterator(XprType& xpr, Index index) : Base(xpr,index)"
  },
  {
    "label": "subvector_stl_reverse_iterator_ptr()",
    "kind": "Method",
    "detail": "Function (typedef reference::PlainObject value_type ; private : class subvector_stl_reverse_iterator_ptr { public :)",
    "insertText": "subvector_stl_reverse_iterator_ptr(const reference &subvector) : m_subvector(subvector)"
  },
  {
    "label": "subvector_stl_reverse_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "subvector_stl_reverse_iterator(XprType& xpr, Index index) : Base(xpr,index)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> DenseBase<Derived>::iterator DenseBase<Derived)",
    "insertText": "begin()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} template<Derived> DenseBase<Derived>::const_iterator DenseBase<Derived)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<Derived> DenseBase<Derived>::iterator DenseBase<Derived)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} template<Derived> DenseBase<Derived>::const_iterator DenseBase<Derived)",
    "insertText": "cend()"
  }
]