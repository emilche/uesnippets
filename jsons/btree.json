[
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "StringBtreeDefaultLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringBtreeDefaultLess"
  },
  {
    "label": "StringBtreeDefaultGreater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringBtreeDefaultGreater"
  },
  {
    "label": "checked_compare_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "checked_compare_base"
  },
  {
    "label": "checked_compare_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "checked_compare_base"
  },
  {
    "label": "BtreeTestOnlyCheckedCompareOptOutBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BtreeTestOnlyCheckedCompareOptOutBase"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "key_compare_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_compare_adapter"
  },
  {
    "label": "checked_compare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "checked_compare"
  },
  {
    "label": "key_compare_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_compare_adapter"
  },
  {
    "label": "key_compare_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_compare_adapter"
  },
  {
    "label": "key_compare_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_compare_adapter"
  },
  {
    "label": "key_compare_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_compare_adapter"
  },
  {
    "label": "key_compare_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_compare_adapter"
  },
  {
    "label": "key_compare_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_compare_adapter"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "has_linear_node_search_preference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_linear_node_search_preference"
  },
  {
    "label": "prefers_linear_node_search",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "prefers_linear_node_search"
  },
  {
    "label": "has_linear_node_search_preference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_linear_node_search_preference"
  },
  {
    "label": "prefers_linear_node_search",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "prefers_linear_node_search"
  },
  {
    "label": "map_value_compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "map_value_compare"
  },
  {
    "label": "btree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree"
  },
  {
    "label": "common_params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "common_params"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "upper_bound_adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "upper_bound_adapter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SearchResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SearchResult"
  },
  {
    "label": "SearchResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SearchResult"
  },
  {
    "label": "btree_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_node"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "btree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree"
  },
  {
    "label": "btree_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_iterator"
  },
  {
    "label": "BtreeNodePeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BtreeNodePeer"
  },
  {
    "label": "btree_access",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "btree_access"
  },
  {
    "label": "btree_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_iterator"
  },
  {
    "label": "btree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree"
  },
  {
    "label": "btree_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_container"
  },
  {
    "label": "btree_set_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_set_container"
  },
  {
    "label": "btree_map_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_map_container"
  },
  {
    "label": "btree_multiset_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_multiset_container"
  },
  {
    "label": "base_checker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base_checker"
  },
  {
    "label": "btree_access",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "btree_access"
  },
  {
    "label": "btree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "node_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "node_stats"
  },
  {
    "label": "btree_access",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "btree_access"
  },
  {
    "label": "btree_access",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "btree_access"
  },
  {
    "label": "comp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "comp()"
  },
  {
    "label": "comp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "comp(lhs.first, rhs.first)"
  },
  {
    "label": "layout_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "layout_type(\n        /*parent*/ 1,\n        /*generation*/ params_type::kEnableGenerations ? 1 : 0,\n        /*position, start, finish, max_count*/ 4,\n        /*slots*/ slot_count,\n        /*children*/ 0)"
  },
  {
    "label": "layout_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "layout_type(\n        /*parent*/ 1,\n        /*generation*/ params_type::kEnableGenerations ? 1 : 0,\n        /*position, start, finish, max_count*/ 4,\n        /*slots*/ kNodeSlots,\n        /*children*/ kNodeSlots + 1)"
  },
  {
    "label": "emplace_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace_value(field_type i, allocator_type *alloc, Args &&...args)"
  },
  {
    "label": "remove_values()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove_values(field_type i, field_type to_erase, allocator_type *alloc)"
  },
  {
    "label": "rebalance_right_to_left()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rebalance_right_to_left(field_type to_move, btree_node *right,\n                               allocator_type *alloc)"
  },
  {
    "label": "rebalance_left_to_right()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rebalance_left_to_right(field_type to_move, btree_node *right,\n                               allocator_type *alloc)"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "split(int insert_position, btree_node *dest, allocator_type *alloc)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(btree_node *src, allocator_type *alloc)"
  },
  {
    "label": "clear_and_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear_and_delete(btree_node *node, allocator_type *alloc)"
  },
  {
    "label": "distance_slow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "distance_slow(other)"
  },
  {
    "label": "increment_slow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "increment_slow()"
  },
  {
    "label": "decrement_slow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decrement_slow()"
  },
  {
    "label": "copy_or_move_values_in_order()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy_or_move_values_in_order(Btree &other)"
  },
  {
    "label": "static_assert_validation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "static_assert_validation()"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (iterator>)",
    "insertText": "equal_range(const K &key)"
  },
  {
    "label": "insert_unique()",
    "kind": "Method",
    "detail": "Function (bool>)",
    "insertText": "insert_unique(const K &key, Args &&...args)"
  },
  {
    "label": "insert_hint_unique()",
    "kind": "Method",
    "detail": "Function (bool>)",
    "insertText": "insert_hint_unique(iterator position, const K &key,\n                                               Args &&...args)"
  },
  {
    "label": "insert_iterator_unique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert_iterator_unique(InputIterator b, InputIterator e, int)"
  },
  {
    "label": "insert_iterator_unique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert_iterator_unique(InputIterator b, InputIterator e, char)"
  },
  {
    "label": "insert_multi()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert_multi(const key_type &key, ValueType &&v)"
  },
  {
    "label": "insert_hint_multi()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert_hint_multi(iterator position, ValueType &&v)"
  },
  {
    "label": "insert_iterator_multi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert_iterator_multi(InputIterator b, InputIterator e)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator iter)"
  },
  {
    "label": "erase_range()",
    "kind": "Method",
    "detail": "Function (iterator>)",
    "insertText": "erase_range(iterator begin, iterator end)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(btree &other)"
  },
  {
    "label": "allocator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "allocator()"
  },
  {
    "label": "rebalance_after_delete()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "rebalance_after_delete(iterator iter)"
  },
  {
    "label": "rebalance_or_split()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rebalance_or_split(iterator *iter)"
  },
  {
    "label": "merge_nodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge_nodes(node_type *left, node_type *right)"
  },
  {
    "label": "try_merge_or_rebalance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "try_merge_or_rebalance(iterator *iter)"
  },
  {
    "label": "try_shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "try_shrink()"
  },
  {
    "label": "internal_emplace()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "internal_emplace(iterator iter, Args &&...args)"
  },
  {
    "label": "internal_last()",
    "kind": "Method",
    "detail": "Function (IterType)",
    "insertText": "internal_last(IterType iter)"
  },
  {
    "label": "node_stats()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "node_stats(0, 0)"
  },
  {
    "label": "node_stats()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "node_stats(1, 0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (node_stats)",
    "insertText": "res(0, 1)"
  },
  {
    "label": "save()",
    "kind": "Method",
    "detail": "Function (btree_iterator)",
    "insertText": "save(*this)"
  },
  {
    "label": "save()",
    "kind": "Method",
    "detail": "Function (btree_iterator)",
    "insertText": "save(*this)"
  },
  {
    "label": "internal_iter()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "internal_iter(iter)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "res(iter)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "internal_last()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_last(iter)"
  }
]