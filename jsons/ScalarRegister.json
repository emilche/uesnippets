[
  {
    "label": "ScalarRegister",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarRegister"
  },
  {
    "label": "TCustomLerp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomLerp"
  },
  {
    "label": "ScalarRegister()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / VectorRegister . h \" # ifndef ENABLE_VECTORIZED_TRANSFORM # define ENABLE_VECTORIZED_TRANSFORM PLATFORM_ENABLE_VECTORINTRINSICS # endif # if ENABLE_VECTORIZED_TRANSFORM class ScalarRegister { public : using RegisterType = VectorRegister4Float ; RegisterType Value ;)",
    "insertText": "ScalarRegister()"
  },
  {
    "label": "ScalarRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScalarRegister(const float& ScalarValue)"
  },
  {
    "label": "ScalarRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScalarRegister(RegisterType VectorValue)"
  },
  {
    "label": "ScalarRegister()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScalarRegister(const ScalarRegister& VectorValue)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "VectorLoadFloat1(&ScalarValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value = VectorValue ; } ScalarRegister)",
    "insertText": "operator(const ScalarRegister& RHS)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "VectorAdd(Value, RHS.Value)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "VectorSubtract(Value, RHS.Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value = RHS . Value ; return* this ; } ScalarRegister&)",
    "insertText": "operator(const RegisterType& RHS)"
  },
  {
    "label": "RegisterType()",
    "kind": "Method",
    "detail": "Function (Value = RHS ; return* this ; } ScalarRegister::operator)",
    "insertText": "RegisterType()"
  },
  {
    "label": "ScalarMax()",
    "kind": "Method",
    "detail": "Function (} ScalarRegister)",
    "insertText": "ScalarMax(const ScalarRegister& A, const ScalarRegister& B)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (} template<> struct TCustomLerp<ScalarRegister> { bool Value = true ; ScalarRegister)",
    "insertText": "Lerp(const ScalarRegister& A, const ScalarRegister& B, const ScalarRegister& Alpha)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const ScalarRegister::RegisterType Delta =)",
    "insertText": "VectorSubtract(B.Value, A.Value)"
  },
  {
    "label": "ScalarReciprocal()",
    "kind": "Method",
    "detail": "Function (} } ; ScalarRegister)",
    "insertText": "ScalarReciprocal(const ScalarRegister& A)"
  }
]