[
  {
    "label": "UnicodeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeSet"
  },
  {
    "label": "USet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "USet"
  },
  {
    "label": "LocalUConverterPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalUConverterPointer"
  },
  {
    "label": "UConverterUnicodeSet",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UConverterUnicodeSet"
  },
  {
    "label": "ucnv_compareNames()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_compareNames(const char *name1, const char *name2)"
  },
  {
    "label": "ucnv_open()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_open(const char *converterName, UErrorCode *err)"
  },
  {
    "label": "ucnv_openU()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_openU(const UChar *name,\n           UErrorCode *err)"
  },
  {
    "label": "ucnv_openCCSID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_openCCSID(int32_t codepage,\n               UConverterPlatform platform,\n               UErrorCode * err)"
  },
  {
    "label": "ucnv_openPackage()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_openPackage(const char *packageName, const char *converterName, UErrorCode *err)"
  },
  {
    "label": "ucnv_safeClone()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_safeClone(const UConverter *cnv,\n               void             *stackBuffer,\n               int32_t          *pBufferSize,\n               UErrorCode       *status)"
  },
  {
    "label": "ucnv_close()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_close(UConverter * converter)"
  },
  {
    "label": "ucnv_getSubstChars()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getSubstChars(const UConverter *converter,\n                   char *subChars,\n                   int8_t *len,\n                   UErrorCode *err)"
  },
  {
    "label": "ucnv_setSubstChars()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_setSubstChars(UConverter *converter,\n                   const char *subChars,\n                   int8_t len,\n                   UErrorCode *err)"
  },
  {
    "label": "ucnv_setSubstString()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_setSubstString(UConverter *cnv,\n                    const UChar *s,\n                    int32_t length,\n                    UErrorCode *err)"
  },
  {
    "label": "ucnv_getInvalidChars()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getInvalidChars(const UConverter *converter,\n                     char *errBytes,\n                     int8_t *len,\n                     UErrorCode *err)"
  },
  {
    "label": "ucnv_getInvalidUChars()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getInvalidUChars(const UConverter *converter,\n                      UChar *errUChars,\n                      int8_t *len,\n                      UErrorCode *err)"
  },
  {
    "label": "ucnv_reset()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_reset(UConverter *converter)"
  },
  {
    "label": "ucnv_resetToUnicode()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_resetToUnicode(UConverter *converter)"
  },
  {
    "label": "ucnv_resetFromUnicode()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_resetFromUnicode(UConverter *converter)"
  },
  {
    "label": "ucnv_getMaxCharSize()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getMaxCharSize(const UConverter *converter)"
  },
  {
    "label": "ucnv_getMinCharSize()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getMinCharSize(const UConverter *converter)"
  },
  {
    "label": "ucnv_getDisplayName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getDisplayName(const UConverter *converter,\n                    const char *displayLocale,\n                    UChar *displayName,\n                    int32_t displayNameCapacity,\n                    UErrorCode *err)"
  },
  {
    "label": "ucnv_getName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getName(const UConverter *converter, UErrorCode *err)"
  },
  {
    "label": "ucnv_getCCSID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getCCSID(const UConverter *converter,\n              UErrorCode *err)"
  },
  {
    "label": "ucnv_getPlatform()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getPlatform(const UConverter *converter,\n                 UErrorCode *err)"
  },
  {
    "label": "ucnv_getType()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getType(const UConverter * converter)"
  },
  {
    "label": "ucnv_getStarters()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getStarters(const UConverter* converter,\n                 UBool starters[256],\n                 UErrorCode* err)"
  },
  {
    "label": "ucnv_getUnicodeSet()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getUnicodeSet(const UConverter *cnv,\n                   USet *setFillIn,\n                   UConverterUnicodeSet whichSet,\n                   UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getToUCallBack()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getToUCallBack(const UConverter * converter,\n                     UConverterToUCallback *action,\n                     const void **context)"
  },
  {
    "label": "ucnv_getFromUCallBack()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getFromUCallBack(const UConverter * converter,\n                       UConverterFromUCallback *action,\n                       const void **context)"
  },
  {
    "label": "ucnv_setToUCallBack()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_setToUCallBack(UConverter * converter,\n                     UConverterToUCallback newAction,\n                     const void* newContext,\n                     UConverterToUCallback *oldAction,\n                     const void** oldContext,\n                     UErrorCode * err)"
  },
  {
    "label": "ucnv_setFromUCallBack()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_setFromUCallBack(UConverter * converter,\n                       UConverterFromUCallback newAction,\n                       const void *newContext,\n                       UConverterFromUCallback *oldAction,\n                       const void **oldContext,\n                       UErrorCode * err)"
  },
  {
    "label": "ucnv_fromUnicode()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_fromUnicode(UConverter * converter,\n                  char **target,\n                  const char *targetLimit,\n                  const UChar ** source,\n                  const UChar * sourceLimit,\n                  int32_t* offsets,\n                  UBool flush,\n                  UErrorCode * err)"
  },
  {
    "label": "ucnv_toUnicode()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_toUnicode(UConverter *converter,\n               UChar **target,\n               const UChar *targetLimit,\n               const char **source,\n               const char *sourceLimit,\n               int32_t *offsets,\n               UBool flush,\n               UErrorCode *err)"
  },
  {
    "label": "ucnv_fromUChars()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_fromUChars(UConverter *cnv,\n                char *dest, int32_t destCapacity,\n                const UChar *src, int32_t srcLength,\n                UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_toUChars()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_toUChars(UConverter *cnv,\n              UChar *dest, int32_t destCapacity,\n              const char *src, int32_t srcLength,\n              UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getNextUChar()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getNextUChar(UConverter * converter,\n                  const char **source,\n                  const char * sourceLimit,\n                  UErrorCode * err)"
  },
  {
    "label": "ucnv_convertEx()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_convertEx(UConverter *targetCnv, UConverter *sourceCnv,\n               char **target, const char *targetLimit,\n               const char **source, const char *sourceLimit,\n               UChar *pivotStart, UChar **pivotSource,\n               UChar **pivotTarget, const UChar *pivotLimit,\n               UBool reset, UBool flush,\n               UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_convert()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_convert(const char *toConverterName,\n             const char *fromConverterName,\n             char *target,\n             int32_t targetCapacity,\n             const char *source,\n             int32_t sourceLength,\n             UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_toAlgorithmic()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_toAlgorithmic(UConverterType algorithmicType,\n                   UConverter *cnv,\n                   char *target, int32_t targetCapacity,\n                   const char *source, int32_t sourceLength,\n                   UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_fromAlgorithmic()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_fromAlgorithmic(UConverter *cnv,\n                     UConverterType algorithmicType,\n                     char *target, int32_t targetCapacity,\n                     const char *source, int32_t sourceLength,\n                     UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_flushCache()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_flushCache(void)"
  },
  {
    "label": "ucnv_countAvailable()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_countAvailable(void)"
  },
  {
    "label": "ucnv_getAvailableName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getAvailableName(int32_t n)"
  },
  {
    "label": "ucnv_openAllNames()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_openAllNames(UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_countAliases()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_countAliases(const char *alias, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getAlias()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getAlias(const char *alias, uint16_t n, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getAliases()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getAliases(const char *alias, const char **aliases, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_openStandardNames()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_openStandardNames(const char *convName,\n                       const char *standard,\n                       UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_countStandards()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_countStandards(void)"
  },
  {
    "label": "ucnv_getStandard()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getStandard(uint16_t n, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getStandardName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getStandardName(const char *name, const char *standard, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getCanonicalName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getCanonicalName(const char *alias, const char *standard, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getDefaultName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_getDefaultName(void)"
  },
  {
    "label": "ucnv_setDefaultName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_setDefaultName(const char *name)"
  },
  {
    "label": "ucnv_fixFileSeparator()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_fixFileSeparator(const UConverter *cnv, UChar *source, int32_t sourceLen)"
  },
  {
    "label": "ucnv_isAmbiguous()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_isAmbiguous(const UConverter *cnv)"
  },
  {
    "label": "ucnv_setFallback()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_setFallback(UConverter *cnv, UBool usesFallback)"
  },
  {
    "label": "ucnv_usesFallback()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_usesFallback(const UConverter *cnv)"
  },
  {
    "label": "ucnv_detectUnicodeSignature()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_detectUnicodeSignature(const char* source,\n                            int32_t sourceLength,\n                            int32_t *signatureLength,\n                            UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_fromUCountPending()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_fromUCountPending(const UConverter* cnv, UErrorCode* status)"
  },
  {
    "label": "ucnv_toUCountPending()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_toUCountPending(const UConverter* cnv, UErrorCode* status)"
  },
  {
    "label": "ucnv_isFixedWidth()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucnv_isFixedWidth(UConverter *cnv, UErrorCode *status)"
  }
]