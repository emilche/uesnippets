[
  {
    "label": "USet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "USet"
  },
  {
    "label": "UConverterUnicodeSet",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UConverterUnicodeSet"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef UCNV_H # define UCNV_H # include \" unicode / ucnv_err . h \" # include \" unicode / uenum . h \" # include \" unicode / localpointer . h \" # if !)",
    "insertText": "defined(USET_DEFINED) && !defined(U_IN_DOXYGEN)"
  },
  {
    "label": "UCNV_MAX_FULL_FILE_NAME_LENGTH()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UCONFIG_NO_CONVERSION U_CDECL_BEGIN # define UCNV_MAX_CONVERTER_NAME_LENGTH 6 0 # define)",
    "insertText": "UCNV_MAX_FULL_FILE_NAME_LENGTH(600+UCNV_MAX_CONVERTER_NAME_LENGTH)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (UCNV_UNSUPPORTED_CONVERTER = - 1,UCNV_SBCS = 0,UCNV_DBCS = 1,UCNV_MBCS = 2,UCNV_LATIN_1 = 3,UCNV_UTF8 = 4,UCNV_UTF16_BigEndian = 5,UCNV_UTF16_LittleEndian = 6,UCNV_UTF32_BigEndian = 7,UCNV_UTF32_LittleEndian = 8,UCNV_EBCDIC_STATEFUL = 9,UCNV_ISO_2022 = 1 0,UCNV_LMBCS_1 = 1 1,UCNV_LMBCS_2,UCNV_LMBCS_3,UCNV_LMBCS_4,UCNV_LMBCS_5,UCNV_LMBCS_6,UCNV_LMBCS_8,UCNV_LMBCS_11,UCNV_LMBCS_16,UCNV_LMBCS_17,UCNV_LMBCS_18,UCNV_LMBCS_19,UCNV_LMBCS_LAST = UCNV_LMBCS_19,UCNV_HZ,UCNV_SCSU,UCNV_ISCII,UCNV_US_ASCII,UCNV_UTF7,UCNV_BOCU1,UCNV_UTF16,UCNV_UTF32,UCNV_CESU8,UCNV_IMAP_MAILBOX,UCNV_COMPOUND_TEXT,UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES } UConverterType ; typedef enum { UCNV_UNKNOWN = - 1,UCNV_IBM = 0 } UConverterPlatform ; typedef)",
    "insertText": "void(U_EXPORT2 *UConverterToUCallback) ( const void* context, UConverterToUnicodeArgs *args, const char *codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode *pErrorCode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(U_EXPORT2 *UConverterFromUCallback) ( const void* context, UConverterFromUnicodeArgs *args, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_compareNames()",
    "kind": "Method",
    "detail": "Function (U_CDECL_END # define UCNV_OPTION_SEP_CHAR ',' # define UCNV_OPTION_SEP_STRING \",\" # define UCNV_VALUE_SEP_CHAR ' = ' # define UCNV_VALUE_SEP_STRING \" = \" # define UCNV_LOCALE_OPTION_STRING \",locale = \" # define UCNV_VERSION_OPTION_STRING \",version = \" # define UCNV_SWAP_LFNL_OPTION_STRING \",swaplfnl \" U_STABLE int U_EXPORT2)",
    "insertText": "ucnv_compareNames(const char *name1, const char *name2)"
  },
  {
    "label": "ucnv_open()",
    "kind": "Method",
    "detail": "Function (U_STABLE UConverter* U_EXPORT2)",
    "insertText": "ucnv_open(const char *converterName, UErrorCode *err)"
  },
  {
    "label": "ucnv_openU()",
    "kind": "Method",
    "detail": "Function (U_STABLE UConverter* U_EXPORT2)",
    "insertText": "ucnv_openU(const UChar *name, UErrorCode *err)"
  },
  {
    "label": "ucnv_openCCSID()",
    "kind": "Method",
    "detail": "Function (U_STABLE UConverter* U_EXPORT2)",
    "insertText": "ucnv_openCCSID(int32_t codepage, UConverterPlatform platform, UErrorCode * err)"
  },
  {
    "label": "ucnv_openPackage()",
    "kind": "Method",
    "detail": "Function (U_STABLE UConverter* U_EXPORT2)",
    "insertText": "ucnv_openPackage(const char *packageName, const char *converterName, UErrorCode *err)"
  },
  {
    "label": "ucnv_safeClone()",
    "kind": "Method",
    "detail": "Function (U_STABLE UConverter* U_EXPORT2)",
    "insertText": "ucnv_safeClone(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)"
  },
  {
    "label": "ucnv_close()",
    "kind": "Method",
    "detail": "Function (# ifndef # define U_CNV_SAFECLONE_BUFFERSIZE 1 0 2 4 # endif U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_close(UConverter * converter)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUConverterPointer, UConverter, ucnv_close)"
  },
  {
    "label": "ucnv_getSubstChars()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getSubstChars(const UConverter *converter, char *subChars, int8_t *len, UErrorCode *err)"
  },
  {
    "label": "ucnv_setSubstChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_setSubstChars(UConverter *converter, const char *subChars, int8_t len, UErrorCode *err)"
  },
  {
    "label": "ucnv_setSubstString()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_setSubstString(UConverter *cnv, const UChar *s, int32_t length, UErrorCode *err)"
  },
  {
    "label": "ucnv_getInvalidChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getInvalidChars(const UConverter *converter, char *errBytes, int8_t *len, UErrorCode *err)"
  },
  {
    "label": "ucnv_getInvalidUChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getInvalidUChars(const UConverter *converter, UChar *errUChars, int8_t *len, UErrorCode *err)"
  },
  {
    "label": "ucnv_reset()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_reset(UConverter *converter)"
  },
  {
    "label": "ucnv_resetToUnicode()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_resetToUnicode(UConverter *converter)"
  },
  {
    "label": "ucnv_resetFromUnicode()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_resetFromUnicode(UConverter *converter)"
  },
  {
    "label": "ucnv_getMaxCharSize()",
    "kind": "Method",
    "detail": "Function (U_STABLE int8_t U_EXPORT2)",
    "insertText": "ucnv_getMaxCharSize(const UConverter *converter)"
  },
  {
    "label": "UCNV_GET_MAX_BYTES_FOR_STRING()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UCNV_GET_MAX_BYTES_FOR_STRING(length, maxCharSize) \\ (((int32_t)(length)+10)*(int32_t)(maxCharSize)) U_STABLE int8_t U_EXPORT2 ucnv_getMinCharSize(const UConverter *converter)"
  },
  {
    "label": "ucnv_getDisplayName()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_getDisplayName(const UConverter *converter, const char *displayLocale, UChar *displayName, int32_t displayNameCapacity, UErrorCode *err)"
  },
  {
    "label": "ucnv_getName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_getName(const UConverter *converter, UErrorCode *err)"
  },
  {
    "label": "ucnv_getCCSID()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_getCCSID(const UConverter *converter, UErrorCode *err)"
  },
  {
    "label": "ucnv_getPlatform()",
    "kind": "Method",
    "detail": "Function (U_STABLE UConverterPlatform U_EXPORT2)",
    "insertText": "ucnv_getPlatform(const UConverter *converter, UErrorCode *err)"
  },
  {
    "label": "ucnv_getType()",
    "kind": "Method",
    "detail": "Function (U_STABLE UConverterType U_EXPORT2)",
    "insertText": "ucnv_getType(const UConverter * converter)"
  },
  {
    "label": "ucnv_getStarters()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getStarters(const UConverter* converter, UBool starters[256], UErrorCode* err)"
  },
  {
    "label": "ucnv_getUnicodeSet()",
    "kind": "Method",
    "detail": "Function (typedef enum UConverterUnicodeSet { UCNV_ROUNDTRIP_SET,UCNV_ROUNDTRIP_AND_FALLBACK_SET,# ifndef UCNV_SET_COUNT # endif } UConverterUnicodeSet ; U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getUnicodeSet(const UConverter *cnv, USet *setFillIn, UConverterUnicodeSet whichSet, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getToUCallBack()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getToUCallBack(const UConverter * converter, UConverterToUCallback *action, const void **context)"
  },
  {
    "label": "ucnv_getFromUCallBack()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getFromUCallBack(const UConverter * converter, UConverterFromUCallback *action, const void **context)"
  },
  {
    "label": "ucnv_setToUCallBack()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_setToUCallBack(UConverter * converter, UConverterToUCallback newAction, const void* newContext, UConverterToUCallback *oldAction, const void** oldContext, UErrorCode * err)"
  },
  {
    "label": "ucnv_setFromUCallBack()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_setFromUCallBack(UConverter * converter, UConverterFromUCallback newAction, const void *newContext, UConverterFromUCallback *oldAction, const void **oldContext, UErrorCode * err)"
  },
  {
    "label": "ucnv_fromUnicode()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_fromUnicode(UConverter * converter, char **target, const char *targetLimit, const UChar ** source, const UChar * sourceLimit, int32_t* offsets, UBool flush, UErrorCode * err)"
  },
  {
    "label": "ucnv_toUnicode()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_toUnicode(UConverter *converter, UChar **target, const UChar *targetLimit, const char **source, const char *sourceLimit, int32_t *offsets, UBool flush, UErrorCode *err)"
  },
  {
    "label": "ucnv_fromUChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_fromUChars(UConverter *cnv, char *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_toUChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_toUChars(UConverter *cnv, UChar *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getNextUChar()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "ucnv_getNextUChar(UConverter * converter, const char **source, const char * sourceLimit, UErrorCode * err)"
  },
  {
    "label": "ucnv_convertEx()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_convertEx(UConverter *targetCnv, UConverter *sourceCnv, char **target, const char *targetLimit, const char **source, const char *sourceLimit, UChar *pivotStart, UChar **pivotSource, UChar **pivotTarget, const UChar *pivotLimit, UBool reset, UBool flush, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_convert()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_convert(const char *toConverterName, const char *fromConverterName, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_toAlgorithmic()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_toAlgorithmic(UConverterType algorithmicType, UConverter *cnv, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_fromAlgorithmic()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_fromAlgorithmic(UConverter *cnv, UConverterType algorithmicType, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_flushCache()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_flushCache(void)"
  },
  {
    "label": "ucnv_countAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_countAvailable(void)"
  },
  {
    "label": "ucnv_getAvailableName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_getAvailableName(int32_t n)"
  },
  {
    "label": "ucnv_openAllNames()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucnv_openAllNames(UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_countAliases()",
    "kind": "Method",
    "detail": "Function (U_STABLE uint16_t U_EXPORT2)",
    "insertText": "ucnv_countAliases(const char *alias, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getAlias()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_getAlias(const char *alias, uint16_t n, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getAliases()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_getAliases(const char *alias, const char **aliases, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_openStandardNames()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucnv_openStandardNames(const char *convName, const char *standard, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_countStandards()",
    "kind": "Method",
    "detail": "Function (U_STABLE uint16_t U_EXPORT2)",
    "insertText": "ucnv_countStandards(void)"
  },
  {
    "label": "ucnv_getStandard()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_getStandard(uint16_t n, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getStandardName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_getStandardName(const char *name, const char *standard, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getCanonicalName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_getCanonicalName(const char *alias, const char *standard, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_getDefaultName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_getDefaultName(void)"
  },
  {
    "label": "ucnv_setDefaultName()",
    "kind": "Method",
    "detail": "Function (# ifndef U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_setDefaultName(const char *name)"
  },
  {
    "label": "ucnv_fixFileSeparator()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_fixFileSeparator(const UConverter *cnv, UChar *source, int32_t sourceLen)"
  },
  {
    "label": "ucnv_isAmbiguous()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucnv_isAmbiguous(const UConverter *cnv)"
  },
  {
    "label": "ucnv_setFallback()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucnv_setFallback(UConverter *cnv, UBool usesFallback)"
  },
  {
    "label": "ucnv_usesFallback()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucnv_usesFallback(const UConverter *cnv)"
  },
  {
    "label": "ucnv_detectUnicodeSignature()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucnv_detectUnicodeSignature(const char* source, int32_t sourceLength, int32_t *signatureLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucnv_fromUCountPending()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_fromUCountPending(const UConverter* cnv, UErrorCode* status)"
  },
  {
    "label": "ucnv_toUCountPending()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucnv_toUCountPending(const UConverter* cnv, UErrorCode* status)"
  },
  {
    "label": "ucnv_isFixedWidth()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucnv_isFixedWidth(UConverter *cnv, UErrorCode *status)"
  }
]