[
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "FSkeletonRemapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonRemapping"
  },
  {
    "label": "FBlendedCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedCurve"
  },
  {
    "label": "FAnimCurveType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimCurveType"
  },
  {
    "label": "FSkelMeshRefPoseOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRefPoseOverride"
  },
  {
    "label": "FVirtualBoneCompactPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualBoneCompactPoseData"
  },
  {
    "label": "FCurveEvaluationOption",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEvaluationOption"
  },
  {
    "label": "FCurveFilterSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveFilterSettings"
  },
  {
    "label": "FOrientAndScaleRetargetingCachedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOrientAndScaleRetargetingCachedData"
  },
  {
    "label": "FCachedSkeletonCurveMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedSkeletonCurveMapping"
  },
  {
    "label": "FRetargetSourceCachedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetargetSourceCachedData"
  },
  {
    "label": "FCompactPoseBoneIndexIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPoseBoneIndexIterator"
  },
  {
    "label": "FCompactPoseBoneIndexReverseIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPoseBoneIndexReverseIterator"
  },
  {
    "label": "FRetargetSourceCachedDataKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetargetSourceCachedDataKey"
  },
  {
    "label": "FRangedForSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRangedForSupport"
  },
  {
    "label": "FRangedForReverseSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRangedForReverseSupport"
  },
  {
    "label": "FVirtualBoneCompactPoseData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakObjectPtr . h \" # include \" BoneIndices . h \" # include \" ReferenceSkeleton . h \" # include \" Animation / AnimCurveFilter . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / BoneReference . h \" # include \" Animation / AnimCurveMetadata . h \" # include \" Animation / AnimBulkCurves . h \" class USkeletalMesh ; struct FBoneContainer ; struct FSkeletonRemapping ; struct FBlendedCurve ; struct FAnimCurveType ; namespace SmartName { typedef uint16 UID_Type ; } struct FSkelMeshRefPoseOverride { TArray<FMatrix44f> RefBasesInvMatrix ; TArray<FTransform> RefBonePoses ; } ; struct FVirtualBoneCompactPoseData { FCompactPoseBoneIndex VBIndex ; FCompactPoseBoneIndex SourceIndex ; FCompactPoseBoneIndex TargetIndex ;)",
    "insertText": "FVirtualBoneCompactPoseData(FCompactPoseBoneIndex InVBIndex, FCompactPoseBoneIndex InSourceIndex, FCompactPoseBoneIndex InTargetIndex) : VBIndex(InVBIndex) , SourceIndex(InSourceIndex) , TargetIndex(InTargetIndex)"
  },
  {
    "label": "FCurveFilterSettings()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE::Anim { struct FCurveFilterSettings {)",
    "insertText": "FCurveFilterSettings(UE::Anim::ECurveFilterMode InFilterMode = UE::Anim::ECurveFilterMode::DisallowFiltered, const TArray<FName>* InFilterCurves = nullptr, int32 InLODIndex = 0) : FilterCurves(InFilterCurves) , FilterMode(InFilterMode) , LODIndex(InLODIndex)"
  },
  {
    "label": "FOrientAndScaleRetargetingCachedData()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>* FilterCurves = nullptr ; UE::Anim::ECurveFilterMode FilterMode = UE::Anim::ECurveFilterMode::DisallowFiltered ; int32 LODIndex = 0 ; } ; } struct FOrientAndScaleRetargetingCachedData { FQuat TranslationDeltaOrient ; float TranslationScale ; FVector SourceTranslation ; FVector TargetTranslation ;)",
    "insertText": "FOrientAndScaleRetargetingCachedData(const FQuat& InTranslationDeltaOrient, const float InTranslationScale, const FVector& InSourceTranslation, const FVector& InTargetTranslation ) : TranslationDeltaOrient(InTranslationDeltaOrient) , TranslationScale(InTranslationScale) , SourceTranslation(InSourceTranslation) , TargetTranslation(InTargetTranslation)"
  },
  {
    "label": "FCompactPoseBoneIndexIterator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCachedSkeletonCurveMapping { TArray<SmartName::UID_Type> UIDToArrayIndices ; bool bIsDirty = true ; } ; struct FRetargetSourceCachedData { TArray<FOrientAndScaleRetargetingCachedData> OrientAndScaleData ; TArray<int32> CompactPoseIndexToOrientAndScaleIndex ; } ; struct FCompactPoseBoneIndexIterator { int32 Index ;)",
    "insertText": "FCompactPoseBoneIndexIterator(int32 InIndex) : Index(InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (+ + Index ;)",
    "insertText": "return(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FCompactPoseBoneIndexIterator& Rhs)"
  },
  {
    "label": "FCompactPoseBoneIndexReverseIterator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCompactPoseBoneIndexReverseIterator { int32 Index ;)",
    "insertText": "FCompactPoseBoneIndexReverseIterator(int32 InIndex) : Index(InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FCompactPoseBoneIndexReverseIterator& Rhs)"
  },
  {
    "label": "FRetargetSourceCachedDataKey()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRetargetSourceCachedDataKey { FTopLevelAssetPath SourceSkeletonPath ; FName SourceRetargetName ;)",
    "insertText": "FRetargetSourceCachedDataKey(const UObject* Skeleton, const FName& InSourceRetargetName) : SourceSkeletonPath(Skeleton) , SourceRetargetName(InSourceRetargetName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRetargetSourceCachedDataKey& Other)"
  },
  {
    "label": "FBoneContainer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBoneContainer { private : TArray<FBoneIndexType> BoneIndicesArray ; TBitArray<> BoneSwitchArray ; TWeakObjectPtr<UObject> Asset ; TWeakObjectPtr<USkeletalMesh> AssetSkeletalMesh ; TWeakObjectPtr<USkeleton> AssetSkeleton ; const FReferenceSkeleton* RefSkeleton ; TArray<int32> SkeletonToPoseBoneIndexArray ; TArray<int32> PoseToSkeletonBoneIndexArray ; TArray<int32> CompactPoseToSkeletonIndex ; TArray<FCompactPoseBoneIndex> SkeletonToCompactPose ; TArray<FCompactPoseBoneIndex> CompactPoseParentBones ; TArray<FVirtualBoneCompactPoseData> VirtualBoneCompactPoseData ; UE::Anim::FCurveFilter CurveFilter ; UE::Anim::FBulkCurveFlags CurveFlags ; TSharedPtr<FSkelMeshRefPoseOverride> RefPoseOverride ; uint16 SerialNumber ; # if DO_CHECK int32 CalculatedForLOD ; # endif bool bDisableRetargeting ; bool bUseRAWData ; bool bUseSourceData ; public :)",
    "insertText": "FBoneContainer()"
  },
  {
    "label": "FBoneContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoneContainer(const TArrayView<const FBoneIndexType>& InRequiredBoneIndexArray, const UE::Anim::FCurveFilterSettings& InCurveFilterSettings, UObject& InAsset)"
  },
  {
    "label": "InitializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTo(const TArrayView<const FBoneIndexType>& InRequiredBoneIndexArray, const UE::Anim::FCurveFilterSettings& InCurveFilterSettings, UObject& InAsset)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetAsset()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetAsset()"
  },
  {
    "label": "GetSkeletalMeshAsset()",
    "kind": "Method",
    "detail": "Function (} USkeletalMesh*)",
    "insertText": "GetSkeletalMeshAsset()"
  },
  {
    "label": "GetSkeletonAsset()",
    "kind": "Method",
    "detail": "Function (} USkeleton*)",
    "insertText": "GetSkeletonAsset(bool bEvenIfUnreachable = false)"
  },
  {
    "label": "SetDisableRetargeting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisableRetargeting(bool InbDisableRetargeting)"
  },
  {
    "label": "GetDisableRetargeting()",
    "kind": "Method",
    "detail": "Function (bDisableRetargeting = InbDisableRetargeting ; } bool)",
    "insertText": "GetDisableRetargeting()"
  },
  {
    "label": "ShouldUseRawData()",
    "kind": "Method",
    "detail": "Function (bUseRAWData = InbUseRAWData ; } bool)",
    "insertText": "ShouldUseRawData()"
  },
  {
    "label": "ShouldUseSourceData()",
    "kind": "Method",
    "detail": "Function (bUseSourceData = InbUseSourceData ; } bool)",
    "insertText": "ShouldUseSourceData()"
  },
  {
    "label": "GetCompactPoseParentBoneArray()",
    "kind": "Method",
    "detail": "Function (} const TArray<FCompactPoseBoneIndex>&)",
    "insertText": "GetCompactPoseParentBoneArray()"
  },
  {
    "label": "GetCompactPoseNumBones()",
    "kind": "Method",
    "detail": "Function (const int32 CompactPoseBoneCount =)",
    "insertText": "GetCompactPoseNumBones()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutTransforms .)",
    "insertText": "Reset(CompactPoseBoneCount)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutTransforms .)",
    "insertText": "Append(RefPoseOverride->RefBonePoses)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { OutTransforms .)",
    "insertText": "SetNumUninitialized(CompactPoseBoneCount)"
  },
  {
    "label": "GetRefBonePose()",
    "kind": "Method",
    "detail": "Function (const TArray<FTransform>& RefPoseTransforms = RefSkeleton ->)",
    "insertText": "GetRefBonePose()"
  },
  {
    "label": "GetRefPoseTransform()",
    "kind": "Method",
    "detail": "Function (OutTransforms [ CompactBoneIndex ] = RefPoseTransforms [ BoneIndicesArray [ CompactBoneIndex ] ] ; } } } const FTransform&)",
    "insertText": "GetRefPoseTransform(const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "GetRefBonePose()",
    "kind": "Method",
    "detail": "Function (} else { return RefSkeleton ->)",
    "insertText": "GetRefBonePose()[BoneIndicesArray[BoneIndex.GetInt()"
  },
  {
    "label": "SetRefPoseOverride()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetRefPoseOverride(const TSharedPtr<FSkelMeshRefPoseOverride>& InRefPoseOverride)"
  },
  {
    "label": "GetReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (RefPoseOverride = InRefPoseOverride ; } } const FReferenceSkeleton&)",
    "insertText": "GetReferenceSkeleton()"
  },
  {
    "label": "GetPoseBoneIndexForBoneName()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPoseBoneIndexForBoneName(const FName& BoneName)"
  },
  {
    "label": "GetParentBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParentBoneIndex(const int32 BoneIndex)"
  },
  {
    "label": "GetParentBoneIndex()",
    "kind": "Method",
    "detail": "Function (FCompactPoseBoneIndex)",
    "insertText": "GetParentBoneIndex(const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "GetDepthBetweenBones()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDepthBetweenBones(const int32 BoneIndex, const int32 ParentBoneIndex)"
  },
  {
    "label": "BoneIsChildOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoneIsChildOf(const int32 BoneIndex, const int32 ParentBoneIndex)"
  },
  {
    "label": "BoneIsChildOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoneIsChildOf(const FCompactPoseBoneIndex& BoneIndex, const FCompactPoseBoneIndex& ParentBoneIndex)"
  },
  {
    "label": "GetCurveFilter()",
    "kind": "Method",
    "detail": "Function (const UE::Anim::FCurveFilter&)",
    "insertText": "GetCurveFilter()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FBoneContainer& B)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (Ar<<B . BoneIndicesArray<<B . BoneSwitchArray<<B . Asset<<B . AssetSkeletalMesh<<B . AssetSkeleton<<B . SkeletonToPoseBoneIndexArray<<B . PoseToSkeletonBoneIndexArray<<B . bDisableRetargeting<<B . bUseRAWData<<B . bUseSourceData ; return Ar ; } bool)",
    "insertText": "Contains(FBoneIndexType NewIndex)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ; IterType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} IterType)",
    "insertText": "end()"
  },
  {
    "label": "FRangedForReverseSupport()",
    "kind": "Method",
    "detail": "Function (} } ; template<IterType> struct FRangedForReverseSupport { const FBoneContainer& BoneContainer ;)",
    "insertText": "FRangedForReverseSupport(const FBoneContainer& InBoneContainer) : BoneContainer(InBoneContainer)"
  },
  {
    "label": "ForEachCompactPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (} } ; FRangedForSupport<FCompactPoseBoneIndexIterator>)",
    "insertText": "ForEachCompactPoseBoneIndex()"
  },
  {
    "label": "ForEachCompactPoseBoneIndexReverse()",
    "kind": "Method",
    "detail": "Function (} FRangedForReverseSupport<FCompactPoseBoneIndexReverseIterator>)",
    "insertText": "ForEachCompactPoseBoneIndexReverse()"
  },
  {
    "label": "MakeBeginIter()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexIterator)",
    "insertText": "MakeBeginIter()"
  },
  {
    "label": "MakeEndIter()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexIterator)",
    "insertText": "MakeEndIter()"
  },
  {
    "label": "MakeBeginIterReverse()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexReverseIterator)",
    "insertText": "MakeBeginIterReverse()"
  },
  {
    "label": "MakeEndIterReverse()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexReverseIterator)",
    "insertText": "MakeEndIterReverse()"
  },
  {
    "label": "GetMeshPoseIndexFromSkeletonPoseIndex()",
    "kind": "Method",
    "detail": "Function (} FMeshPoseBoneIndex)",
    "insertText": "GetMeshPoseIndexFromSkeletonPoseIndex(const FSkeletonPoseBoneIndex& SkeletonIndex)"
  },
  {
    "label": "FMeshPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FMeshPoseBoneIndex(INDEX_NONE)"
  },
  {
    "label": "GetSkeletonPoseIndexFromMeshPoseIndex()",
    "kind": "Method",
    "detail": "Function (} FSkeletonPoseBoneIndex)",
    "insertText": "GetSkeletonPoseIndexFromMeshPoseIndex(const FMeshPoseBoneIndex& MeshIndex)"
  },
  {
    "label": "FSkeletonPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FSkeletonPoseBoneIndex(INDEX_NONE)"
  },
  {
    "label": "GetSkeletonIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSkeletonIndex(const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "GetSkeletonPoseIndexFromCompactPoseIndex()",
    "kind": "Method",
    "detail": "Function (} FSkeletonPoseBoneIndex)",
    "insertText": "GetSkeletonPoseIndexFromCompactPoseIndex(const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "GetCompactPoseIndexFromSkeletonIndex()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndex)",
    "insertText": "GetCompactPoseIndexFromSkeletonIndex(const int32 SkeletonIndex)"
  },
  {
    "label": "GetCompactPoseIndexFromSkeletonPoseIndex()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndex)",
    "insertText": "GetCompactPoseIndexFromSkeletonPoseIndex(const FSkeletonPoseBoneIndex& SkeletonIndex)"
  },
  {
    "label": "FCompactPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FCompactPoseBoneIndex(INDEX_NONE)"
  },
  {
    "label": "IsSkeletonPoseIndexValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSkeletonPoseIndexValid(const FSkeletonPoseBoneIndex& SkeletonIndex)"
  },
  {
    "label": "MakeMeshPoseIndex()",
    "kind": "Method",
    "detail": "Function (} FMeshPoseBoneIndex)",
    "insertText": "MakeMeshPoseIndex(const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "MakeCompactPoseIndex()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndex)",
    "insertText": "MakeCompactPoseIndex(const FMeshPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "CurveFilterSettings()",
    "kind": "Method",
    "detail": "Function (const UE::Anim::FCurveFilterSettings)",
    "insertText": "CurveFilterSettings(CurveEvalOption.bAllowCurveEvaluation ? UE::Anim::ECurveFilterMode::None : UE::Anim::ECurveFilterMode::DisallowAll, CurveEvalOption.DisallowedList, CurveEvalOption.LODIndex)"
  },
  {
    "label": "CacheRequiredAnimCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRequiredAnimCurves(CurveFilterSettings)"
  },
  {
    "label": "CacheRequiredAnimCurves()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheRequiredAnimCurves(const UE::Anim::FCurveFilterSettings& InCurveFilterSettings)"
  },
  {
    "label": "GetRetargetSourceCachedData()",
    "kind": "Method",
    "detail": "Function (const FRetargetSourceCachedData&)",
    "insertText": "GetRetargetSourceCachedData(const FName& InRetargetSource)"
  },
  {
    "label": "GetRetargetSourceCachedData()",
    "kind": "Method",
    "detail": "Function (const FRetargetSourceCachedData&)",
    "insertText": "GetRetargetSourceCachedData(const FName& InSourceName, const FSkeletonRemapping& InRemapping, const TArray<FTransform>& InRetargetTransforms)"
  },
  {
    "label": "GetCalculatedForLOD()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK int32)",
    "insertText": "GetCalculatedForLOD()"
  },
  {
    "label": "MarkAllCachedCurveMappingsDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAllCachedCurveMappingsDirty()"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "RemapFromSkelMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapFromSkelMesh(USkeletalMesh const & SourceSkeletalMesh, USkeleton& TargetSkeleton)"
  },
  {
    "label": "RemapFromSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapFromSkeleton(USkeleton const & SourceSkeleton)"
  },
  {
    "label": "RegenerateSerialNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateSerialNumber()"
  }
]