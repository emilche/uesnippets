[
  {
    "label": "PointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointType"
  },
  {
    "label": "TSamplerBasedOnChordError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSamplerBasedOnChordError"
  },
  {
    "label": "FCurveSamplerOnChord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveSamplerOnChord"
  },
  {
    "label": "FCurve2DSamplerOnChord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurve2DSamplerOnChord"
  },
  {
    "label": "FIsoCurve3DSamplerOnChord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoCurve3DSamplerOnChord"
  },
  {
    "label": "TSamplerBasedOnChordError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / Surfaces / Surface . h \" # include \" Geo / Curves / Curve . h \" # include \" Geo / Sampler / SamplerAbstract . h \" # include \" Geo / Sampling / Polyline . h \" # include \" Geo / Sampling / SurfacicSampling . h \" # include \" Math / Boundary . h \" # include \" Math / Point . h \" # include \" Utils / ArrayUtils . h \" namespace UE::CADKernel { template<class PointType> class TSamplerBasedOnChordError : public TCurveSamplerAbstract<TPolyline<PointType>,PointType> { public :)",
    "insertText": "TSamplerBasedOnChordError(const FLinearBoundary& InBoundary, double InMaxAllowedError, TPolyline<PointType>& OutPolyline) : TCurveSamplerAbstract<TPolyline<PointType>, PointType>(InBoundary, OutPolyline, InMaxAllowedError)"
  },
  {
    "label": "CheckSamplingError()",
    "kind": "Method",
    "detail": "Function (} ; protected : int32)",
    "insertText": "CheckSamplingError(int32 FirstIndex, int32 EndIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const PointType& APoint = this -> Sampling . Points [ this -> StartSamplingSegmentIndex ] ; double ACoordinate = this -> Sampling . Coordinates [ this -> StartSamplingSegmentIndex ] ; const PointType& BPoint = this -> EndStudySegment . Polyline -> Points [ this -> EndStudySegment . Index ] ; double BCoordinate = this -> EndStudySegment . Polyline -> Coordinates [ this -> EndStudySegment . Index ] ; double MaxChord = 0 ;)",
    "insertText": "for(int32 Index = FirstIndex; Index < EndIndex; ++Index)"
  },
  {
    "label": "GetPointAt()",
    "kind": "Method",
    "detail": "Function (const PointType& Middle = this -> CandidatePoints .)",
    "insertText": "GetPointAt(Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MaxChord = Chord ; })",
    "insertText": "if(MaxChord > this->DesiredChordError)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } # ifdef DEBUG_CHECKCHORDERROR)",
    "insertText": "if(bDisplay)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function ({ int32 Index = 0 ; F3DDebugSession)",
    "insertText": "G(FString::Printf(TEXT(\"CheckChord %f %d\"), MaxChord, FirstIndex))"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Display(APoint, EVisuProperty::BluePoint)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Display(BPoint, EVisuProperty::BluePoint)"
  },
  {
    "label": "GetPoints()",
    "kind": "Method",
    "detail": "Function (const PointType& Middle = CandidatePoints .)",
    "insertText": "GetPoints()"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Display(Middle, EVisuProperty::YellowPoint)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DisplaySegment(APoint, BPoint, 0, EVisuProperty::BlueCurve)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(APoint, CandidatePoints.GetPoints()[FirstIndex], 0, EVisuProperty::YellowCurve)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(BPoint, CandidatePoints.GetPoints()[EndIndex - 1], 0, EVisuProperty::YellowCurve)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(CandidatePoints.GetPoints()[Index], CandidatePoints.GetPoints()[Index + 1], 0, EVisuProperty::YellowCurve)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } # endif)",
    "insertText": "if(MaxChord < this->DesiredChordError / 4)"
  },
  {
    "label": "CountOfNeededPointsToRespectChordError()",
    "kind": "Method",
    "detail": "Function (} else { return this ->)",
    "insertText": "CountOfNeededPointsToRespectChordError(APoint, BPoint, MaxChord)"
  },
  {
    "label": "FCurveSamplerOnChord()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef DEBUG_CHECKCHORDERROR bool bDisplay = true ; # endif } ; class FCurveSamplerOnChord : public TSamplerBasedOnChordError<FPoint> { public :)",
    "insertText": "FCurveSamplerOnChord(const FCurve& InCurve, const FLinearBoundary& InBoundary, double InMaxAllowedError, FPolyline3D& OutPolyline) : TSamplerBasedOnChordError<FPoint>(InBoundary, InMaxAllowedError, OutPolyline) , Curve(InCurve)"
  },
  {
    "label": "EvaluatesNewCandidatePoints()",
    "kind": "Method",
    "detail": "Function (} ; protected : const FCurve& Curve ; void)",
    "insertText": "EvaluatesNewCandidatePoints()"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (Curve .)",
    "insertText": "EvaluatePoints(CandidatePoints.Coordinates, CandidatePoints.Points)"
  },
  {
    "label": "GetNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetNotDerivableCoordinates(TArray<double>& OutNotDerivableCoordinates)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (Curve .)",
    "insertText": "FindNotDerivableCoordinates(Boundary, 2, OutNotDerivableCoordinates)"
  },
  {
    "label": "FCurve2DSamplerOnChord()",
    "kind": "Method",
    "detail": "Function (} } ; class FCurve2DSamplerOnChord : public TSamplerBasedOnChordError<FPoint2D> { public :)",
    "insertText": "FCurve2DSamplerOnChord(const FCurve& InCurve, const FLinearBoundary& InBoundary, double InMaxAllowedError, FPolyline2D& OutPolyline) : TSamplerBasedOnChordError<FPoint2D>(InBoundary, InMaxAllowedError, OutPolyline) , Curve(InCurve)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (Curve .)",
    "insertText": "Evaluate2DPoints(CandidatePoints.Coordinates, CandidatePoints.Points)"
  },
  {
    "label": "FIsoCurve3DSamplerOnChord()",
    "kind": "Method",
    "detail": "Function (} } ; class FIsoCurve3DSamplerOnChord : public TSamplerBasedOnChordError<FPoint> { public :)",
    "insertText": "FIsoCurve3DSamplerOnChord(const FSurface& InSurface, double InMaxAllowedError, FPolyline3D& OutPolyline) : TSamplerBasedOnChordError<FPoint>(FLinearBoundary(), InMaxAllowedError, OutPolyline) , Surface(InSurface)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Set(EIso InIsoType, double InIsoCoordinate, const FLinearBoundary& CurveBounds)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (IsoType = InIsoType ; IsoCoordinate .)",
    "insertText": "Empty(1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IsoCoordinate .)",
    "insertText": "Add(InIsoCoordinate)"
  },
  {
    "label": "LinesNotDerivables()",
    "kind": "Method",
    "detail": "Function (Surface .)",
    "insertText": "LinesNotDerivables(Surface.GetBoundary(), 2, NotDerivableCoordinates)"
  },
  {
    "label": "GetIsoTolerance()",
    "kind": "Method",
    "detail": "Function (bNotDerivableFound = true ; } EIso CurveIso = IsoType = = EIso::IsoU ? EIso::IsoV : EIso::IsoU ; const TArray<double>& SurfaceIsoNotDerivableCoordinates = NotDerivableCoordinates [ CurveIso ] ; double Tolerance = Surface .)",
    "insertText": "GetIsoTolerance(CurveIso)"
  },
  {
    "label": "SubArrayWithoutBoundary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubArrayWithoutBoundary(SurfaceIsoNotDerivableCoordinates, Boundary, Tolerance, OutNotDerivableCoordinates)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(TArray<double>&, TArray<double>&)> Evaluates = [&](TArray<double>& UCoordinates, TArray<double>& VCoordinates)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (FSurfacicSampling PointGrid ; FCoordinateGrid Grid ; Grid .)",
    "insertText": "Swap(UCoordinates, VCoordinates)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (Surface .)",
    "insertText": "EvaluatePointGrid(Grid, PointGrid)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(CandidatePoints.Points, PointGrid.Points3D)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(CandidatePoints.Coordinates.Num() > 0)"
  },
  {
    "label": "Evaluates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluates(IsoCoordinate, CandidatePoints.Coordinates)"
  },
  {
    "label": "Evaluates()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Evaluates(CandidatePoints.Coordinates, IsoCoordinate)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} } else { CandidatePoints . Points .)",
    "insertText": "SetNum(0)"
  }
]