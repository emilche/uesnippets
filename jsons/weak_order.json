[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_Dp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Dp"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___COMPARE_WEAK_ORDER # define _LIBCPP___COMPARE_WEAK_ORDER # include<__compare / compare_three_way . h> # include<__compare / ordering . h> # include<__compare / strong_order . h> # include<__config> # include<__utility / forward . h> # include<__utility / priority_tag . h> # include<cmath> # include<type_traits> # ifndef _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER # pragma GCC system_header # endif _LIBCPP_BEGIN_NAMESPACE_STD # if _LIBCPP_STD_VER> 1 7 namespace __weak_order { struct __fn { template<class _Tp,class _Up> requires is_same_v<decay_t<_Tp>,decay_t<_Up>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__go(_Tp&& __t, _Up&& __u, __priority_tag<3>) noexcept(noexcept(weak_ordering(weak_order(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u))))) -> decltype( weak_ordering(weak_order(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u))))"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up,class _Dp = decay_t<_Tp>> requires is_same_v<_Dp,decay_t<_Up>>&& is_floating_point_v<_Dp> _LIBCPP_HIDE_FROM_ABI weak_ordering)",
    "insertText": "__go(_Tp&& __t, _Up&& __u, __priority_tag<2>)"
  },
  {
    "label": "__po()",
    "kind": "Method",
    "detail": "Function (partial_ordering)",
    "insertText": "__po(__t <=> __u)"
  },
  {
    "label": "isnan()",
    "kind": "Method",
    "detail": "Function (bool __u_is_nan =)",
    "insertText": "isnan(__u)"
  },
  {
    "label": "signbit()",
    "kind": "Method",
    "detail": "Function (bool __t_is_negative =)",
    "insertText": "signbit(__t)"
  },
  {
    "label": "signbit()",
    "kind": "Method",
    "detail": "Function (bool __u_is_negative =)",
    "insertText": "signbit(__u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(__t_is_nan)"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> requires is_same_v<decay_t<_Tp>,decay_t<_Up>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__go(_Tp&& __t, _Up&& __u, __priority_tag<0>) noexcept(noexcept(weak_ordering(_VSTD::strong_order(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u))))) -> decltype( weak_ordering(_VSTD::strong_order(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u))))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Tp&& __t, _Up&& __u) const noexcept(noexcept(__go(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u), __priority_tag<3>()))) -> decltype( __go(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u), __priority_tag<3>()))"
  }
]