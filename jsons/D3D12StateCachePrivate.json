[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12SamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SamplerState"
  },
  {
    "label": "FD3D12ComputePipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ComputePipelineState"
  },
  {
    "label": "FD3D12GraphicsPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12GraphicsPipelineState"
  },
  {
    "label": "FD3D12PipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PipelineState"
  },
  {
    "label": "FD3D12ShaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ShaderData"
  },
  {
    "label": "FD3D12VertexBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12VertexBufferCache"
  },
  {
    "label": "FD3D12IndexBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12IndexBufferCache"
  },
  {
    "label": "FD3D12ResourceCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResourceCache"
  },
  {
    "label": "FD3D12ConstantBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ConstantBufferCache"
  },
  {
    "label": "FD3D12ShaderResourceViewCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ShaderResourceViewCache"
  },
  {
    "label": "FD3D12UnorderedAccessViewCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12UnorderedAccessViewCache"
  },
  {
    "label": "FD3D12SamplerStateCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12SamplerStateCache"
  },
  {
    "label": "FD3D12StateCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12StateCache"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FGraphicsState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphicsState"
  },
  {
    "label": "COMPILED_PLATFORM_HEADER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12ConstantBuffer . h \" # include \" D3D12DirectCommandListManager . h \" # include \" D3D12DescriptorCache . h \" # include)",
    "insertText": "COMPILED_PLATFORM_HEADER(D3D12PipelineState.h)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (class FD3D12SamplerState ; struct FD3D12ComputePipelineState ; struct FD3D12GraphicsPipelineState ; struct FD3D12PipelineState ; struct FD3D12ShaderData ; # define D3D12_STATE_CACHE_RUNTIME_TOGGLE 0 # define NUM_SAMPLER_DESCRIPTORS D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE # define D3D12_STATE_CACHE_INLINE # if D3D12_STATE_CACHE_RUNTIME_TOGGLE bool GD3D12SkipStateCaching ; # else const bool GD3D12SkipStateCaching = false ; # endif int32 GGlobalResourceDescriptorHeapSize ; int32 GGlobalSamplerDescriptorHeapSize ; int32 GGlobalSamplerHeapSize ; int32 GOnlineDescriptorHeapSize ; int32 GOnlineDescriptorHeapBlockSize ; int32 GBindlessOnlineDescriptorHeapSize ; int32 GBindlessOnlineDescriptorHeapBlockSize ; enum class ED3D12PipelineType : uint8 { Graphics,Compute,RayTracing,} ; namespace ED3D12VRSCombinerStages { int32 PerPrimitive = 0 ; int32 ScreenSpace = PerPrimitive + 1 ; int32 Num = ScreenSpace + 1 ; } ; # define MAX_VBS D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT typedef uint32 VBSlotMask ;)",
    "insertText": "static_assert((8 * sizeof(VBSlotMask)) >= MAX_VBS, \"VBSlotMask isn't large enough to cover all VBs. Please increase the size.\")"
  },
  {
    "label": "FD3D12VertexBufferCache()",
    "kind": "Method",
    "detail": "Function (struct FD3D12VertexBufferCache {)",
    "insertText": "FD3D12VertexBufferCache()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(CurrentVertexBufferViews, sizeof(CurrentVertexBufferViews))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(CurrentVertexBufferResources, sizeof(CurrentVertexBufferResources))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Resources, sizeof(Resources))"
  },
  {
    "label": "FD3D12IndexBufferCache()",
    "kind": "Method",
    "detail": "Function (MaxBoundVertexBufferIndex = INDEX_NONE ; BoundVBMask = 0 ; } D3D12_VERTEX_BUFFER_VIEW CurrentVertexBufferViews [ MAX_VBS ] ; FD3D12ResourceLocation* CurrentVertexBufferResources [ MAX_VBS ] ; FD3D12Resource* Resources [ MAX_VBS ] ; int32 MaxBoundVertexBufferIndex ; VBSlotMask BoundVBMask ; } ; struct FD3D12IndexBufferCache {)",
    "insertText": "FD3D12IndexBufferCache()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(&CurrentIndexBufferView, sizeof(CurrentIndexBufferView))"
  },
  {
    "label": "CleanSlot()",
    "kind": "Method",
    "detail": "Function (} D3D12_INDEX_BUFFER_VIEW CurrentIndexBufferView ; } ; template<ResourceSlotMask> struct FD3D12ResourceCache { void)",
    "insertText": "CleanSlot(ResourceSlotMask& SlotMask, uint32 SlotIndex)"
  },
  {
    "label": "SlotMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlotMask((ResourceSlotMask)1 << SlotIndex)"
  },
  {
    "label": "CleanSlots()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CleanSlots(ResourceSlotMask& SlotMask, uint32 NumSlots)"
  },
  {
    "label": "SlotMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlotMask(NumSlots >= std::numeric_limits<ResourceSlotMask>::digits) ? 0 : ~(((ResourceSlotMask)1 << NumSlots) - 1)"
  },
  {
    "label": "DirtySlot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DirtySlot(ResourceSlotMask& SlotMask, uint32 SlotIndex)"
  },
  {
    "label": "IsSlotDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSlotDirty(const ResourceSlotMask& SlotMask, uint32 SlotIndex)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Dirty(EShaderFrequency ShaderFrequency, const ResourceSlotMask& SlotMask = -1)"
  },
  {
    "label": "DirtyGraphics()",
    "kind": "Method",
    "detail": "Function (DirtySlotMask [ ShaderFrequency ] | = SlotMask ; } void)",
    "insertText": "DirtyGraphics(const ResourceSlotMask& SlotMask = -1)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dirty(SF_Vertex, SlotMask)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dirty(SF_Mesh, SlotMask)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dirty(SF_Amplification, SlotMask)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dirty(SF_Pixel, SlotMask)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dirty(SF_Geometry, SlotMask)"
  },
  {
    "label": "DirtyCompute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DirtyCompute(const ResourceSlotMask& SlotMask = -1)"
  },
  {
    "label": "Dirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dirty(SF_Compute, SlotMask)"
  },
  {
    "label": "DirtyAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DirtyAll(const ResourceSlotMask& SlotMask = -1)"
  },
  {
    "label": "DirtyGraphics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyGraphics(SlotMask)"
  },
  {
    "label": "DirtyCompute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyCompute(SlotMask)"
  },
  {
    "label": "FD3D12ConstantBufferCache()",
    "kind": "Method",
    "detail": "Function (} ResourceSlotMask DirtySlotMask [ SF_NumStandardFrequencies ] ; } ; struct FD3D12ConstantBufferCache : public FD3D12ResourceCache<CBVSlotMask> {)",
    "insertText": "FD3D12ConstantBufferCache()"
  },
  {
    "label": "DirtyAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyAll()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(CurrentGPUVirtualAddress, sizeof(CurrentGPUVirtualAddress))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_CONSTANT_BUFFER_VIEWS)",
    "insertText": "Memzero(CBHandles, sizeof(CBHandles))"
  },
  {
    "label": "FD3D12ShaderResourceViewCache()",
    "kind": "Method",
    "detail": "Function (# endif } # if D3D12RHI_USE_CONSTANT_BUFFER_VIEWS D3D12_CPU_DESCRIPTOR_HANDLE CBHandles [ SF_NumStandardFrequencies ] [ MAX_CBS ] ; # endif D3D12_GPU_VIRTUAL_ADDRESS CurrentGPUVirtualAddress [ SF_NumStandardFrequencies ] [ MAX_CBS ] ; FD3D12Resource* Resources [ SF_NumStandardFrequencies ] [ MAX_CBS ] ; } ; struct FD3D12ShaderResourceViewCache : public FD3D12ResourceCache<SRVSlotMask> {)",
    "insertText": "FD3D12ShaderResourceViewCache()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Resources)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(BoundMask)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index = INDEX_NONE ; })",
    "insertText": "for(int32 FrequencyIdx = 0; FrequencyIdx < SF_NumStandardFrequencies; ++FrequencyIdx)"
  },
  {
    "label": "FD3D12UnorderedAccessViewCache()",
    "kind": "Method",
    "detail": "Function (Views [ FrequencyIdx ] [ SRVIdx ] = nullptr ; } } } FD3D12ShaderResourceView* Views [ SF_NumStandardFrequencies ] [ MAX_SRVS ] ; FD3D12Resource* Resources [ SF_NumStandardFrequencies ] [ MAX_SRVS ] ; SRVSlotMask BoundMask [ SF_NumStandardFrequencies ] ; int32 MaxBoundIndex [ SF_NumStandardFrequencies ] ; } ; struct FD3D12UnorderedAccessViewCache : public FD3D12ResourceCache<UAVSlotMask> {)",
    "insertText": "FD3D12UnorderedAccessViewCache()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Views)"
  },
  {
    "label": "FD3D12SamplerStateCache()",
    "kind": "Method",
    "detail": "Function (Index = INDEX_NONE ; } } FD3D12UnorderedAccessView* Views [ SF_NumStandardFrequencies ] [ MAX_UAVS ] ; FD3D12Resource* Resources [ SF_NumStandardFrequencies ] [ MAX_UAVS ] ; uint32 StartSlot [ SF_NumStandardFrequencies ] ; } ; struct FD3D12SamplerStateCache : public FD3D12ResourceCache<SamplerSlotMask> {)",
    "insertText": "FD3D12SamplerStateCache()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(States)"
  },
  {
    "label": "GetD3D12PrimitiveType()",
    "kind": "Method",
    "detail": "Function (} FD3D12SamplerState* States [ SF_NumStandardFrequencies ] [ MAX_SAMPLERS ] ; } ; D3D_PRIMITIVE_TOPOLOGY)",
    "insertText": "GetD3D12PrimitiveType(uint32 PrimitiveType)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (const uint8 D3D12PrimitiveType [ ] = { D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,D3D_PRIMITIVE_TOPOLOGY_LINELIST,0,D3D_PRIMITIVE_TOPOLOGY_POINTLIST,# if)",
    "insertText": "defined(D3D12RHI_PRIMITIVE_TOPOLOGY_RECTLIST)"
  },
  {
    "label": "D3DType()",
    "kind": "Method",
    "detail": "Function (D3D_PRIMITIVE_TOPOLOGY)",
    "insertText": "D3DType(D3D_PRIMITIVE_TOPOLOGY)"
  },
  {
    "label": "FUint32Vector4()",
    "kind": "Method",
    "detail": "Function (Combiner = EVRSRateCombiner::VRSRB_Passthrough ; } } } Graphics = { } ; struct { TRefCountPtr<FD3D12ComputePipelineState> CurrentPipelineStateObject = nullptr ; bool bNeedSetRootSignature ; EAsyncComputeBudget ComputeBudget = EAsyncComputeBudget::EAll_4 ; } Compute = { } ; struct { FD3D12ShaderResourceViewCache SRVCache = { } ; FD3D12ConstantBufferCache CBVCache = { } ; FD3D12UnorderedAccessViewCache UAVCache = { } ; FD3D12SamplerStateCache SamplerCache = { } ; ID3D12PipelineState* CurrentPipelineStateObject = nullptr ; bool bNeedSetPSO ; bool bNeedSetRootConstants ; FUint32Vector4 ShaderRootConstants =)",
    "insertText": "FUint32Vector4(0, 0, 0, 0)"
  },
  {
    "label": "InternalSetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentShaderSamplerCounts [ SF_NumStandardFrequencies ] = { } ; uint32 CurrentShaderSRVCounts [ SF_NumStandardFrequencies ] = { } ; uint32 CurrentShaderCBCounts [ SF_NumStandardFrequencies ] = { } ; uint32 CurrentShaderUAVCounts [ SF_NumStandardFrequencies ] = { } ; # if PLATFORM_SUPPORTS_BINDLESS_RENDERING TArray<FD3D12ShaderResourceView*> QueuedBindlessSRVs [ SF_NumStandardFrequencies ] ; TArray<FD3D12UnorderedAccessView*> QueuedBindlessUAVs [ SF_NumStandardFrequencies ] ; # endif } Common = { } ; } PipelineState = { } ; FD3D12DescriptorCache DescriptorCache ; void)",
    "insertText": "InternalSetIndexBuffer(FD3D12Resource* Resource)"
  },
  {
    "label": "InternalSetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetStreamSource(FD3D12ResourceLocation* VertexBufferLocation, uint32 StreamIndex, uint32 Stride, uint32 Offset)"
  },
  {
    "label": "InternalSetRootSignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalSetRootSignature(ED3D12PipelineType InPipelineType, const FD3D12RootSignature* InRootSignature)"
  },
  {
    "label": "InternalSetPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetPipelineState(FD3D12PipelineState* InPipelineState)"
  },
  {
    "label": "SetDirtyUniformBuffers()",
    "kind": "Method",
    "detail": "Function (private : template<ContextType> void)",
    "insertText": "SetDirtyUniformBuffers(ContextType& Context, EShaderFrequency Frequency)"
  },
  {
    "label": "GetDescriptorCache()",
    "kind": "Method",
    "detail": "Function (Context . DirtyUniformBuffers [ Frequency ] = 0 xffff ; } public : FD3D12DescriptorCache*)",
    "insertText": "GetDescriptorCache()"
  },
  {
    "label": "ClearResourceViewCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResourceViewCaches(EShaderFrequency ShaderFrequency, FD3D12ResourceLocation*& ResourceLocation, EShaderParameterTypeMask ShaderParameterTypeMask)"
  },
  {
    "label": "SetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderResourceView(EShaderFrequency ShaderFrequency, FD3D12ShaderResourceView* SRV, uint32 ResourceIndex)"
  },
  {
    "label": "SetScissorRects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRects(uint32 Count, const D3D12_RECT* const ScissorRects)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRect(const D3D12_RECT& ScissorRect)"
  },
  {
    "label": "GetScissorRect()",
    "kind": "Method",
    "detail": "Function (D3D12_STATE_CACHE_INLINE const D3D12_RECT&)",
    "insertText": "GetScissorRect(int32 Index = 0)"
  },
  {
    "label": "SetViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewports(uint32 Count, const D3D12_VIEWPORT* const Viewports)"
  },
  {
    "label": "GetNumViewports()",
    "kind": "Method",
    "detail": "Function (D3D12_STATE_CACHE_INLINE uint32)",
    "insertText": "GetNumViewports()"
  },
  {
    "label": "StorageSizeCount()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "StorageSizeCount(int32)(*Count)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 CopyCount =)",
    "insertText": "Min(FMath::Min(StorageSizeCount, (int32)PipelineState.Graphics.CurrentNumberOfViewports), D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Viewports, &PipelineState.Graphics.CurrentViewport[0], sizeof(D3D12_VIEWPORT) * CopyCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(StorageSizeCount > CopyCount)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(&Viewports[CopyCount], 0, sizeof(D3D12_VIEWPORT) * (StorageSizeCount - CopyCount))"
  },
  {
    "label": "SetSamplerState()",
    "kind": "Method",
    "detail": "Function (} }* Count = PipelineState . Graphics . CurrentNumberOfViewports ; } D3D12_STATE_CACHE_INLINE void)",
    "insertText": "SetSamplerState(EShaderFrequency ShaderFrequency, FD3D12SamplerState* SamplerState, uint32 SamplerIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto& Samplers = PipelineState . Common . SamplerCache . States [ ShaderFrequency ] ;)",
    "insertText": "if((Samplers[SamplerIndex] != SamplerState) || GD3D12SkipStateCaching)"
  },
  {
    "label": "DirtySlot()",
    "kind": "Method",
    "detail": "Function (Samplers [ SamplerIndex ] = SamplerState ;)",
    "insertText": "DirtySlot(PipelineState.Common.SamplerCache.DirtySlotMask[ShaderFrequency], SamplerIndex)"
  },
  {
    "label": "SetConstantsFromUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} } D3D12_STATE_CACHE_INLINE void)",
    "insertText": "SetConstantsFromUniformBuffer(EShaderFrequency ShaderFrequency, uint32 SlotIndex, FD3D12UniformBuffer* UniformBuffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FD3D12ConstantBufferCache& CBVCache = PipelineState . Common . CBVCache ; D3D12_GPU_VIRTUAL_ADDRESS& CurrentGPUVirtualAddress = CBVCache . CurrentGPUVirtualAddress [ ShaderFrequency ] [ SlotIndex ] ;)",
    "insertText": "if(UniformBuffer && UniformBuffer->ResourceLocation.GetGPUVirtualAddress())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FD3D12ResourceLocation& ResourceLocation = UniformBuffer -> ResourceLocation ;)",
    "insertText": "if(ResourceLocation.GetGPUVirtualAddress() != CurrentGPUVirtualAddress)"
  },
  {
    "label": "GetGPUVirtualAddress()",
    "kind": "Method",
    "detail": "Function (CurrentGPUVirtualAddress = ResourceLocation .)",
    "insertText": "GetGPUVirtualAddress()"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (CBVCache . Resources [ ShaderFrequency ] [ SlotIndex ] = ResourceLocation .)",
    "insertText": "GetResource()"
  },
  {
    "label": "DirtySlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtySlot(CBVCache.DirtySlotMask[ShaderFrequency], SlotIndex)"
  },
  {
    "label": "GetOfflineCpuHandle()",
    "kind": "Method",
    "detail": "Function (} # if D3D12RHI_USE_CONSTANT_BUFFER_VIEWS CBVCache . CBHandles [ ShaderFrequency ] [ SlotIndex ] = UniformBuffer -> View ->)",
    "insertText": "GetOfflineCpuHandle()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif } else)",
    "insertText": "if(CurrentGPUVirtualAddress != 0)"
  },
  {
    "label": "SetConstantBuffer()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_CONSTANT_BUFFER_VIEWS CBVCache . CBHandles [ ShaderFrequency ] [ SlotIndex ] . ptr = 0 ; # endif } else { # if D3D12RHI_USE_CONSTANT_BUFFER_VIEWS CBVCache . CBHandles [ ShaderFrequency ] [ SlotIndex ] . ptr = 0 ; # endif } } D3D12_STATE_CACHE_INLINE void)",
    "insertText": "SetConstantBuffer(EShaderFrequency ShaderFrequency, FD3D12ConstantBuffer& Buffer, bool bDiscardSharedConstants)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (FD3D12ResourceLocation)",
    "insertText": "Location(GetParentDevice())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const uint32 SlotIndex = 0 ; FD3D12ConstantBufferCache& CBVCache = PipelineState . Common . CBVCache ; D3D12_GPU_VIRTUAL_ADDRESS& CurrentGPUVirtualAddress = CBVCache . CurrentGPUVirtualAddress [ ShaderFrequency ] [ SlotIndex ] ;)",
    "insertText": "check(Location.GetGPUVirtualAddress() != CurrentGPUVirtualAddress)"
  },
  {
    "label": "SetBlendFactor()",
    "kind": "Method",
    "detail": "Function (# endif } } void)",
    "insertText": "SetBlendFactor(const float BlendFactor[4])"
  },
  {
    "label": "SetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (FRHIShader*)",
    "insertText": "GetShader(EShaderFrequency InFrequency)"
  },
  {
    "label": "SetNewShaderData()",
    "kind": "Method",
    "detail": "Function (default : return nullptr ; } } void)",
    "insertText": "SetNewShaderData(EShaderFrequency InFrequency, const FD3D12ShaderData* InShaderData)"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineState(FD3D12GraphicsPipelineState* GraphicsPipelineState)"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputePipelineState(FD3D12ComputePipelineState* ComputePipelineState)"
  },
  {
    "label": "SetStreamSource()",
    "kind": "Method",
    "detail": "Function (D3D12_STATE_CACHE_INLINE void)",
    "insertText": "SetStreamSource(FD3D12ResourceLocation* VertexBufferLocation, uint32 StreamIndex, uint32 Stride, uint32 Offset)"
  },
  {
    "label": "InternalSetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetStreamSource(VertexBufferLocation, StreamIndex, Stride, Offset)"
  },
  {
    "label": "SetStreamSource()",
    "kind": "Method",
    "detail": "Function (} D3D12_STATE_CACHE_INLINE void)",
    "insertText": "SetStreamSource(FD3D12ResourceLocation* VertexBufferLocation, uint32 StreamIndex, uint32 Offset)"
  },
  {
    "label": "InternalSetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetStreamSource(VertexBufferLocation, StreamIndex, PipelineState.Graphics.StreamStrides[StreamIndex], Offset)"
  },
  {
    "label": "ClearVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} D3D12_STATE_CACHE_INLINE void)",
    "insertText": "ClearVertexBuffer(const FD3D12ResourceLocation* VertexBufferLocation)"
  },
  {
    "label": "SetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (PipelineState . Graphics . VBCache . CurrentVertexBufferResources [ index ] = nullptr ; } } } public : D3D12_STATE_CACHE_INLINE void)",
    "insertText": "SetIndexBuffer(const FD3D12ResourceLocation& IndexBufferLocation, DXGI_FORMAT Format, uint32 Offset)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (UINT SizeInBytes = IndexBufferLocation .)",
    "insertText": "GetSize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (D3D12_INDEX_BUFFER_VIEW& CurrentView = PipelineState . Graphics . IBCache . CurrentIndexBufferView ;)",
    "insertText": "if(BufferLocation != CurrentView.BufferLocation || SizeInBytes != CurrentView.SizeInBytes || Format != CurrentView.Format || GD3D12SkipStateCaching)"
  },
  {
    "label": "InternalSetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (CurrentView . BufferLocation = BufferLocation ; CurrentView . SizeInBytes = SizeInBytes ; CurrentView . Format = Format ;)",
    "insertText": "InternalSetIndexBuffer(IndexBufferLocation.GetResource())"
  },
  {
    "label": "FD3D12StateCache()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FD3D12StateCache(FD3D12CommandContext& CmdContext, FRHIGPUMask Node)"
  },
  {
    "label": "FD3D12StateCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12StateCache()"
  },
  {
    "label": "TransitionComputeState()",
    "kind": "Method",
    "detail": "Function (# if D3D12_RHI_RAYTRACING void)",
    "insertText": "TransitionComputeState(ED3D12PipelineType PipelineType)"
  },
  {
    "label": "ApplyState()",
    "kind": "Method",
    "detail": "Function (PipelineState . Common . bNeedSetPSO = true ; PipelineState . Common . bNeedSetRootConstants = true ; PipelineState . Compute . bNeedSetRootSignature = true ; LastComputePipelineType = PipelineType ; } } ED3D12PipelineType LastComputePipelineType = ED3D12PipelineType::Compute ; # endif void)",
    "insertText": "ApplyState(ERHIPipeline HardwarePipe, ED3D12PipelineType PipelineType, bool bBindlessHeapsWereJustSet)"
  },
  {
    "label": "ApplySamplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySamplers(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "ApplyResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyResources(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "ApplyBindlessResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBindlessResources(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "ApplyConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyConstants(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "DirtyStateForNewCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyStateForNewCommandList()"
  },
  {
    "label": "DirtyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyState()"
  },
  {
    "label": "DirtyViewDescriptorTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyViewDescriptorTables()"
  },
  {
    "label": "DirtySamplerDescriptorTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtySamplerDescriptorTables()"
  },
  {
    "label": "AssertResourceStates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertResourceStates(ED3D12PipelineType PipelineType)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargets(uint32 NumSimultaneousRenderTargets, FD3D12RenderTargetView** RTArray, FD3D12DepthStencilView* DSTarget)"
  },
  {
    "label": "GetRenderTargets()",
    "kind": "Method",
    "detail": "Function (D3D12_STATE_CACHE_INLINE void)",
    "insertText": "GetRenderTargets(FD3D12RenderTargetView **RTArray, uint32* NumSimultaneousRTs, FD3D12DepthStencilView** DepthStencilTarget)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(RTArray, PipelineState.Graphics.RenderTargetArray, sizeof(FD3D12RenderTargetView*)* D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* NumSimultaneousRTs = PipelineState . Graphics . CurrentNumberOfRenderTargets ; })",
    "insertText": "if(DepthStencilTarget)"
  },
  {
    "label": "SetRootConstants()",
    "kind": "Method",
    "detail": "Function (* DepthStencilTarget = PipelineState . Graphics . CurrentDepthStencilTarget ; } } void)",
    "insertText": "SetRootConstants(const FUint32Vector4& Constants)"
  },
  {
    "label": "SetUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAV(EShaderFrequency ShaderStage, uint32 SlotIndex, FD3D12UnorderedAccessView* UAV, uint32 InitialCount = -1)"
  },
  {
    "label": "ClearUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUAVs(EShaderFrequency ShaderStage)"
  },
  {
    "label": "SetDepthBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "SetShadingRate()",
    "kind": "Method",
    "detail": "Function (PipelineState . Graphics . MinDepth = MinDepth ; PipelineState . Graphics . MaxDepth = MaxDepth ; bNeedSetDepthBounds = GSupportsDepthBoundsTest ; } } void)",
    "insertText": "SetShadingRate(EVRSShadingRate ShadingRate, EVRSRateCombiner PerPrimitiveCombiner, EVRSRateCombiner ScreenSpaceCombiner)"
  },
  {
    "label": "SetShadingRateImage()",
    "kind": "Method",
    "detail": "Function (PipelineState . Graphics . DrawShadingRate = ShadingRate ; PipelineState . Graphics . Combiners [ ED3D12VRSCombinerStages::PerPrimitive ] = PerPrimitiveCombiner ; PipelineState . Graphics . Combiners [ ED3D12VRSCombinerStages::ScreenSpace ] = ScreenSpaceCombiner ; bNeedSetShadingRate = GRHISupportsPipelineVariableRateShading ; } } void)",
    "insertText": "SetShadingRateImage(FD3D12Resource* ShadingRateImage)"
  },
  {
    "label": "SetComputeBudget()",
    "kind": "Method",
    "detail": "Function (PipelineState . Graphics . ShadingRateImage = ShadingRateImage ; bNeedSetShadingRateImage = GRHISupportsAttachmentVariableRateShading ; } } void)",
    "insertText": "SetComputeBudget(EAsyncComputeBudget ComputeBudget)"
  },
  {
    "label": "FlushComputeShaderCache()",
    "kind": "Method",
    "detail": "Function (PipelineState . Compute . ComputeBudget = ComputeBudget ; } void)",
    "insertText": "FlushComputeShaderCache(bool bForce = false)"
  },
  {
    "label": "ClearState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearState()"
  },
  {
    "label": "ForceSetComputeRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceSetComputeRootSignature()"
  },
  {
    "label": "ForceSetGraphicsRootSignature()",
    "kind": "Method",
    "detail": "Function (PipelineState . Compute . bNeedSetRootSignature = true ; } void)",
    "insertText": "ForceSetGraphicsRootSignature()"
  },
  {
    "label": "QueueBindlessSRV()",
    "kind": "Method",
    "detail": "Function (PipelineState . Graphics . bNeedSetRootSignature = true ; } # if PLATFORM_SUPPORTS_BINDLESS_RENDERING void)",
    "insertText": "QueueBindlessSRV(EShaderFrequency ShaderFrequency, FD3D12ShaderResourceView* SRV)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (PipelineState . Common . QueuedBindlessSRVs [ ShaderFrequency ] .)",
    "insertText": "Emplace(SRV)"
  },
  {
    "label": "QueueBindlessSRVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueueBindlessSRVs(EShaderFrequency ShaderFrequency, TConstArrayView<FD3D12ShaderResourceView*> SRVs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PipelineState . Common . QueuedBindlessSRVs [ ShaderFrequency ] .)",
    "insertText": "Append(SRVs)"
  },
  {
    "label": "QueueBindlessUAV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueueBindlessUAV(EShaderFrequency ShaderFrequency, FD3D12UnorderedAccessView* UAV)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (PipelineState . Common . QueuedBindlessUAVs [ ShaderFrequency ] .)",
    "insertText": "Emplace(UAV)"
  },
  {
    "label": "QueueBindlessUAVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueueBindlessUAVs(EShaderFrequency ShaderFrequency, TConstArrayView<FD3D12UnorderedAccessView*> UAVs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PipelineState . Common . QueuedBindlessUAVs [ ShaderFrequency ] .)",
    "insertText": "Append(UAVs)"
  }
]