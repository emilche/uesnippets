[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12SamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SamplerState"
  },
  {
    "label": "FD3D12ComputePipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ComputePipelineState"
  },
  {
    "label": "FD3D12GraphicsPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12GraphicsPipelineState"
  },
  {
    "label": "FD3D12PipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PipelineState"
  },
  {
    "label": "FD3D12ShaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ShaderData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12VertexBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12VertexBufferCache"
  },
  {
    "label": "FD3D12IndexBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12IndexBufferCache"
  },
  {
    "label": "FD3D12ResourceCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResourceCache"
  },
  {
    "label": "FD3D12ConstantBufferCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ConstantBufferCache"
  },
  {
    "label": "FD3D12ShaderResourceViewCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ShaderResourceViewCache"
  },
  {
    "label": "FD3D12UnorderedAccessViewCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12UnorderedAccessViewCache"
  },
  {
    "label": "FD3D12SamplerStateCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12SamplerStateCache"
  },
  {
    "label": "FD3D12StateCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12StateCache"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FGraphicsState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphicsState"
  },
  {
    "label": "InternalSetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetIndexBuffer(FD3D12Resource* Resource)"
  },
  {
    "label": "InternalSetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetStreamSource(FD3D12ResourceLocation* VertexBufferLocation, uint32 StreamIndex, uint32 Stride, uint32 Offset)"
  },
  {
    "label": "InternalSetRootSignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalSetRootSignature(ED3D12PipelineType InPipelineType, const FD3D12RootSignature* InRootSignature)"
  },
  {
    "label": "InternalSetPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetPipelineState(FD3D12PipelineState* InPipelineState)"
  },
  {
    "label": "ClearSRVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSRVs()"
  },
  {
    "label": "ClearResourceViewCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResourceViewCaches(EShaderFrequency ShaderFrequency, FD3D12ResourceLocation*& ResourceLocation, EShaderParameterTypeMask ShaderParameterTypeMask)"
  },
  {
    "label": "SetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderResourceView(EShaderFrequency ShaderFrequency, FD3D12ShaderResourceView* SRV, uint32 ResourceIndex)"
  },
  {
    "label": "SetScissorRects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRects(uint32 Count, const D3D12_RECT* const ScissorRects)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRect(const D3D12_RECT& ScissorRect)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewport(const D3D12_VIEWPORT& Viewport)"
  },
  {
    "label": "SetViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewports(uint32 Count, const D3D12_VIEWPORT* const Viewports)"
  },
  {
    "label": "SetBlendFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendFactor(const float BlendFactor[4])"
  },
  {
    "label": "SetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "SetNewShaderData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewShaderData(EShaderFrequency InFrequency, const FD3D12ShaderData* InShaderData)"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineState(FD3D12GraphicsPipelineState* GraphicsPipelineState)"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputePipelineState(FD3D12ComputePipelineState* ComputePipelineState)"
  },
  {
    "label": "ApplyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyState(ERHIPipeline HardwarePipe, ED3D12PipelineType PipelineType, bool bBindlessHeapsWereJustSet)"
  },
  {
    "label": "ApplySamplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySamplers(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "ApplyResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyResources(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "ApplyBindlessResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBindlessResources(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "ApplyConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyConstants(const FD3D12RootSignature* const pRootSignature, uint32 StartStage, uint32 EndStage)"
  },
  {
    "label": "DirtyStateForNewCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyStateForNewCommandList()"
  },
  {
    "label": "DirtyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyState()"
  },
  {
    "label": "DirtyViewDescriptorTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyViewDescriptorTables()"
  },
  {
    "label": "DirtySamplerDescriptorTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtySamplerDescriptorTables()"
  },
  {
    "label": "AssertResourceStates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertResourceStates(ED3D12PipelineType PipelineType)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargets(uint32 NumSimultaneousRenderTargets, FD3D12RenderTargetView** RTArray, FD3D12DepthStencilView* DSTarget)"
  },
  {
    "label": "SetRootConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootConstants(const FUint32Vector4& Constants)"
  },
  {
    "label": "SetUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAV(EShaderFrequency ShaderStage, uint32 SlotIndex, FD3D12UnorderedAccessView* UAV, uint32 InitialCount = -1)"
  },
  {
    "label": "ClearUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUAVs(EShaderFrequency ShaderStage)"
  },
  {
    "label": "FlushComputeShaderCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushComputeShaderCache(bool bForce = false)"
  },
  {
    "label": "ClearState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearState()"
  }
]