[
  {
    "label": "BufferPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BufferPool"
  },
  {
    "label": "VP9Common",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9Common"
  },
  {
    "label": "vpx_internal_error_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_internal_error_info"
  },
  {
    "label": "loopfilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "loopfilter"
  },
  {
    "label": "segmentation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "segmentation"
  },
  {
    "label": "postproc_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "postproc_state"
  },
  {
    "label": "macroblockd_plane",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "macroblockd_plane"
  },
  {
    "label": "REF_FRAMES()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_ONYXC_INT_H_ # define VPX_VP9_COMMON_VP9_ONYXC_INT_H_ # include \" . / vpx_config . h \" # include \" vpx / internal / vpx_codec_internal . h \" # include \" vpx_util / vpx_thread . h \" # include \" . / vp9_rtcd . h \" # include \" vp9 / common / vp9_alloccommon . h \" # include \" vp9 / common / vp9_loopfilter . h \" # include \" vp9 / common / vp9_entropymv . h \" # include \" vp9 / common / vp9_entropy . h \" # include \" vp9 / common / vp9_entropymode . h \" # include \" vp9 / common / vp9_frame_buffers . h \" # include \" vp9 / common / vp9_quant_common . h \" # include \" vp9 / common / vp9_tile_common . h \" # if CONFIG_VP9_POSTPROC # include \" vp9 / common / vp9_postproc . h \" # endif # ifdef __cplusplus \" C \" { # endif # define REFS_PER_FRAME 3 # define REF_FRAMES_LOG2 3 # define)",
    "insertText": "REF_FRAMES(1 << REF_FRAMES_LOG2) #define FRAME_BUFFERS (REF_FRAMES + 1 + REFS_PER_FRAME) #define FRAME_CONTEXTS_LOG2 2 #define FRAME_CONTEXTS (1 << FRAME_CONTEXTS_LOG2)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (PARTITION_CONTEXT above ; PARTITION_CONTEXT left ; } partition_context_lookup [ BLOCK_SIZES ] ; typedef enum { SINGLE_REFERENCE = 0,COMPOUND_REFERENCE = 1,REFERENCE_MODE_SELECT = 2,REFERENCE_MODES = 3,} REFERENCE_MODE ; typedef struct { int_mv mv [ 2 ] ; MV_REFERENCE_FRAME ref_frame [ 2 ] ; } MV_REF ; typedef struct { int ref_count ; MV_REF* mvs ; int mi_rows ; int mi_cols ; uint8_t released ; int frame_index ; int frame_coding_index ; vpx_codec_frame_buffer_t raw_frame_buffer ; YV12_BUFFER_CONFIG buf ; } RefCntBuffer ; typedef struct BufferPool { void* cb_priv ; vpx_get_frame_buffer_cb_fn_t get_fb_cb ; vpx_release_frame_buffer_cb_fn_t release_fb_cb ; RefCntBuffer frame_bufs [ FRAME_BUFFERS ] ; InternalFrameBufferList int_frame_buffers ; } BufferPool ; typedef struct VP9Common { struct vpx_internal_error_info error ; vpx_color_space_t color_space ; vpx_color_range_t color_range ; int width ; int height ; int render_width ; int render_height ; int last_width ; int last_height ; int subsampling_x ; int subsampling_y ; # if CONFIG_VP9_HIGHBITDEPTH int use_highbitdepth ; # endif YV12_BUFFER_CONFIG* frame_to_show ; RefCntBuffer* prev_frame ; RefCntBuffer* cur_frame ; int ref_frame_map [ REF_FRAMES ] ; int next_ref_frame_map [ REF_FRAMES ] ; RefBuffer frame_refs [ REFS_PER_FRAME ] ; int new_fb_idx ; int cur_show_frame_fb_idx ; # if CONFIG_VP9_POSTPROC YV12_BUFFER_CONFIG post_proc_buffer ; YV12_BUFFER_CONFIG post_proc_buffer_int ; # endif FRAME_TYPE last_frame_type ; FRAME_TYPE frame_type ; int show_frame ; int last_show_frame ; int show_existing_frame ; uint8_t intra_only ; uint8_t last_intra_only ; int allow_high_precision_mv ; int reset_frame_context ; int MBs ; int mb_rows,mi_rows ; int mb_cols,mi_cols ; int mi_stride ; TX_MODE tx_mode ; int base_qindex ; int y_dc_delta_q ; int uv_dc_delta_q ; int uv_ac_delta_q ; int16_t y_dequant [ MAX_SEGMENTS ] [ 2 ] ; int16_t uv_dequant [ MAX_SEGMENTS ] [ 2 ] ; int mi_alloc_size ; MODE_INFO* mip ; MODE_INFO* mi ; MODE_INFO* prev_mip ; MODE_INFO* prev_mi ;)",
    "insertText": "int(*alloc_mi)(struct VP9Common *cm, int mi_size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*free_mi)(struct VP9Common *cm)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*setup_mi)(struct VP9Common *cm)"
  },
  {
    "label": "init_frame_indexes()",
    "kind": "Method",
    "detail": "Function (MODE_INFO** mi_grid_base ; MODE_INFO** mi_grid_visible ; MODE_INFO** prev_mi_grid_base ; MODE_INFO** prev_mi_grid_visible ; int use_prev_frame_mvs ; int seg_map_idx ; int prev_seg_map_idx ; uint8_t* seg_map_array [ NUM_PING_PONG_BUFFERS ] ; uint8_t* last_frame_seg_map ; uint8_t* current_frame_seg_map ; int seg_map_alloc_size ; INTERP_FILTER interp_filter ; loop_filter_info_n lf_info ; int refresh_frame_context ; int ref_frame_sign_bias [ MAX_REF_FRAMES ] ; struct loopfilter lf ; struct segmentation seg ; MV_REFERENCE_FRAME comp_fixed_ref ; MV_REFERENCE_FRAME comp_var_ref [ 2 ] ; REFERENCE_MODE reference_mode ; FRAME_CONTEXT* fc ; FRAME_CONTEXT* frame_contexts ; unsigned int frame_context_idx ; FRAME_COUNTS counts ; unsigned int current_video_frame ; int current_frame_coding_index ; BITSTREAM_PROFILE profile ; vpx_bit_depth_t bit_depth ; vpx_bit_depth_t dequant_bit_depth ; # if CONFIG_VP9_POSTPROC struct postproc_state postproc_state ; # endif int error_resilient_mode ; int frame_parallel_decoding_mode ; int log2_tile_cols,log2_tile_rows ; int byte_alignment ; int skip_loop_filter ; BufferPool* buffer_pool ; PARTITION_CONTEXT* above_seg_context ; ENTROPY_CONTEXT* above_context ; int above_context_alloc_cols ; int lf_row ; } VP9_COMMON ; void)",
    "insertText": "init_frame_indexes(VP9_COMMON *cm)"
  },
  {
    "label": "update_frame_indexes()",
    "kind": "Method",
    "detail": "Function (cm -> current_video_frame = 0 ; cm -> current_frame_coding_index = 0 ; } void)",
    "insertText": "update_frame_indexes(VP9_COMMON *cm, int show_frame)"
  },
  {
    "label": "init_frame_info()",
    "kind": "Method",
    "detail": "Function (+ + cm -> current_video_frame ; } + + cm -> current_frame_coding_index ; } typedef struct { int frame_width ; int frame_height ; int render_frame_width ; int render_frame_height ; int mi_rows ; int mi_cols ; int mb_rows ; int mb_cols ; int num_mbs ; vpx_bit_depth_t bit_depth ; } FRAME_INFO ; void)",
    "insertText": "init_frame_info(FRAME_INFO *frame_info, const VP9_COMMON *cm)"
  },
  {
    "label": "get_buf_frame()",
    "kind": "Method",
    "detail": "Function (frame_info -> frame_width = cm -> width ; frame_info -> frame_height = cm -> height ; frame_info -> render_frame_width = cm -> render_width ; frame_info -> render_frame_height = cm -> render_height ; frame_info -> mi_cols = cm -> mi_cols ; frame_info -> mi_rows = cm -> mi_rows ; frame_info -> mb_cols = cm -> mb_cols ; frame_info -> mb_rows = cm -> mb_rows ; frame_info -> num_mbs = cm -> MBs ; frame_info -> bit_depth = cm -> bit_depth ; } YV12_BUFFER_CONFIG*)",
    "insertText": "get_buf_frame(VP9_COMMON *cm, int index)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(cm->ref_frame_map[index] < FRAME_BUFFERS)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RefCntBuffer* const frame_bufs = cm -> buffer_pool -> frame_bufs ; int i ;)",
    "insertText": "for(i = 0; i < FRAME_BUFFERS; ++i) if (frame_bufs[i].ref_count == 0)"
  },
  {
    "label": "ref_cnt_fb()",
    "kind": "Method",
    "detail": "Function (frame_bufs [ i ] . ref_count = 1 ; } else { i = INVALID_IDX ; } return i ; } void)",
    "insertText": "ref_cnt_fb(RefCntBuffer *bufs, int *idx, int new_idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int ref_index =* idx ;)",
    "insertText": "if(ref_index >= 0 && bufs[ref_index].ref_count > 0)"
  },
  {
    "label": "mi_cols_aligned_to_sb()",
    "kind": "Method",
    "detail": "Function (* idx = new_idx ; bufs [ new_idx ] . ref_count + + ; } int)",
    "insertText": "mi_cols_aligned_to_sb(int n_mis)"
  },
  {
    "label": "frame_is_intra_only()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "frame_is_intra_only(const VP9_COMMON *const cm)"
  },
  {
    "label": "frame_is_intra_only()",
    "kind": "Method",
    "detail": "Function (fc->partition_prob)",
    "insertText": "frame_is_intra_only(cm) ? &vp9_kf_partition_probs[0] : (const vpx_prob(*)[PARTITION_TYPES - 1])"
  },
  {
    "label": "vp9_init_macroblockd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp9_init_macroblockd(VP9_COMMON *cm, MACROBLOCKD *xd, tran_low_t *dqcoeff)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i = 0; i < MAX_MB_PLANE; ++i)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (xd -> plane [ i ] . dqcoeff = dqcoeff ; xd -> above_context [ i ] = cm -> above_context + i*)",
    "insertText": "sizeof(*cm->above_context) * 2 * mi_cols_aligned_to_sb(cm->mi_cols)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(xd->plane[i].seg_dequant, cm->y_dequant, sizeof(cm->y_dequant))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "memcpy(xd->plane[i].seg_dequant, cm->uv_dequant, sizeof(cm->uv_dequant))"
  },
  {
    "label": "set_partition_probs()",
    "kind": "Method",
    "detail": "Function (} xd -> fc = cm -> fc ; } xd -> above_seg_context = cm -> above_seg_context ; xd -> mi_stride = cm -> mi_stride ; xd -> error_info =& cm -> error ;)",
    "insertText": "set_partition_probs(cm, xd)"
  },
  {
    "label": "get_partition_probs()",
    "kind": "Method",
    "detail": "Function (} const vpx_prob*)",
    "insertText": "get_partition_probs(const MACROBLOCKD *xd, int ctx)"
  },
  {
    "label": "left_idx()",
    "kind": "Method",
    "detail": "Function (const int above_idx = mi_col* 2 ; const int)",
    "insertText": "left_idx(mi_row * 2)"
  },
  {
    "label": "calc_mi_size()",
    "kind": "Method",
    "detail": "Function (struct macroblockd_plane* const pd =& xd -> plane [ i ] ; pd -> above_context =& xd -> above_context [ i ] [ above_idx>> pd -> subsampling_x ] ; pd -> left_context =& xd -> left_context [ i ] [ left_idx>> pd -> subsampling_y ] ; } } int)",
    "insertText": "calc_mi_size(int len)"
  },
  {
    "label": "mb_to_top_edge()",
    "kind": "Method",
    "detail": "Function (xd ->)",
    "insertText": "mb_to_top_edge((mi_row * MI_SIZE) * 8)"
  },
  {
    "label": "mb_to_bottom_edge()",
    "kind": "Method",
    "detail": "Function (xd ->)",
    "insertText": "mb_to_bottom_edge((mi_rows - bh - mi_row) * MI_SIZE)"
  },
  {
    "label": "mb_to_left_edge()",
    "kind": "Method",
    "detail": "Function (xd ->)",
    "insertText": "mb_to_left_edge((mi_col * MI_SIZE) * 8)"
  },
  {
    "label": "mb_to_right_edge()",
    "kind": "Method",
    "detail": "Function (xd ->)",
    "insertText": "mb_to_right_edge((mi_cols - bw - mi_col) * MI_SIZE)"
  },
  {
    "label": "above_mi()",
    "kind": "Method",
    "detail": "Function (mi[-xd->mi_stride] : NULL)",
    "insertText": "above_mi(mi_row != 0)"
  },
  {
    "label": "left_mi()",
    "kind": "Method",
    "detail": "Function (mi[-1] : NULL)",
    "insertText": "left_mi(mi_col > tile->mi_col_start)"
  },
  {
    "label": "update_partition_context()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "update_partition_context(MACROBLOCKD *xd, int mi_row, int mi_col, BLOCK_SIZE subsize, BLOCK_SIZE bsize)"
  },
  {
    "label": "left_seg_context()",
    "kind": "Method",
    "detail": "Function (PARTITION_CONTEXT* const above_ctx = xd -> above_seg_context + mi_col ; PARTITION_CONTEXT* const left_ctx = xd ->)",
    "insertText": "left_seg_context(mi_row & MI_MASK)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (const int bs = num_8x8_blocks_wide_lookup [ bsize ] ;)",
    "insertText": "memset(above_ctx, partition_context_lookup[subsize].above, bs)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(left_ctx, partition_context_lookup[subsize].left, bs)"
  },
  {
    "label": "partition_plane_context()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "partition_plane_context(const MACROBLOCKD *xd, int mi_row, int mi_col, BLOCK_SIZE bsize)"
  },
  {
    "label": "above()",
    "kind": "Method",
    "detail": "Function (const int bsl = mi_width_log2_lookup [ bsize ] ; int)",
    "insertText": "above(*above_ctx >> bsl) & 1, left = (*left_ctx >> bsl)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(b_width_log2_lookup[bsize] == b_height_log2_lookup[bsize])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(bsl >= 0)"
  }
]