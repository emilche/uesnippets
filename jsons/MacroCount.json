[
  {
    "label": "silk_SaveCount()",
    "kind": "Method",
    "detail": "Function (# ifndef SIGPROCFIX_API_MACROCOUNT_H # define SIGPROCFIX_API_MACROCOUNT_H # ifdef silk_MACRO_COUNT # include<stdio . h> # define varDefine opus_int64 ops_count = 0 ; opus_int64 ops_count ; OPUS_INLINE opus_int64)",
    "insertText": "silk_SaveCount()"
  },
  {
    "label": "silk_SaveResetCount()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE opus_int64)",
    "insertText": "silk_SaveResetCount()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ret = ops_count ; ops_count = 0 ;)",
    "insertText": "return(ret)"
  },
  {
    "label": "silk_PrintCount()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE)",
    "insertText": "silk_PrintCount()"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"ops_count = %d \\n \", (opus_int32)ops_count)"
  },
  {
    "label": "silk_MUL()",
    "kind": "Method",
    "detail": "Function (} # undef silk_MUL OPUS_INLINE opus_int32)",
    "insertText": "silk_MUL(opus_int32 a32, opus_int32 b32)"
  },
  {
    "label": "silk_MUL_uint()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 4 ; ret = a32* b32 ; return ret ; } # undef silk_MUL_uint OPUS_INLINE opus_uint32)",
    "insertText": "silk_MUL_uint(opus_uint32 a32, opus_uint32 b32)"
  },
  {
    "label": "silk_MLA()",
    "kind": "Method",
    "detail": "Function (opus_uint32 ret ; ops_count + = 4 ; ret = a32* b32 ; return ret ; } # undef silk_MLA OPUS_INLINE opus_int32)",
    "insertText": "silk_MLA(opus_int32 a32, opus_int32 b32, opus_int32 c32)"
  },
  {
    "label": "silk_MLA_uint()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 4 ; ret = a32 + b32* c32 ; return ret ; } # undef silk_MLA_uint OPUS_INLINE opus_int32)",
    "insertText": "silk_MLA_uint(opus_uint32 a32, opus_uint32 b32, opus_uint32 c32)"
  },
  {
    "label": "silk_SMULWB()",
    "kind": "Method",
    "detail": "Function (opus_uint32 ret ; ops_count + = 4 ; ret = a32 + b32* c32 ; return ret ; } # undef silk_SMULWB OPUS_INLINE opus_int32)",
    "insertText": "silk_SMULWB(opus_int32 a32, opus_int32 b32)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 5 ;)",
    "insertText": "ret(a32 >> 16) * (opus_int32)((opus_int16)b32) + (((a32 & 0x0000FFFF) * (opus_int32)((opus_int16)b32)) >> 16)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 5 ;)",
    "insertText": "ret((a32) + ((((b32) >> 16) * (opus_int32)((opus_int16)(c32))) + ((((b32) & 0x0000FFFF) * (opus_int32)((opus_int16)(c32))) >> 16)))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 4 ;)",
    "insertText": "ret(a32 >> 16) * (b32 >> 16) + (((a32 & 0x0000FFFF) * (b32 >> 16)) >> 16)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 4 ; ret =)",
    "insertText": "a32((b32 >> 16) * (c32 >> 16)) + (((b32 & 0x0000FFFF) * ((c32 >> 16)) >> 16))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ;)",
    "insertText": "ret(opus_int32)((opus_int16)a32) * (opus_int32)((opus_int16)b32)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret =)",
    "insertText": "a32(opus_int32)((opus_int16)b32) * (opus_int32)((opus_int16)c32)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 4 ;)",
    "insertText": "ret((opus_int32)((opus_int16)a32)) * (b32 >> 16)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret =)",
    "insertText": "a32((opus_int32)((opus_int16)b32)) * (c32 >> 16)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ;)",
    "insertText": "ret(a32 >> 16) * (b32 >> 16)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret =)",
    "insertText": "a32(b32 >> 16) * (c32 >> 16)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ops_count + = 8 ;)",
    "insertText": "ret((opus_int64)(a32) * (b32))"
  },
  {
    "label": "a64()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ops_count + = 8 ; ret =)",
    "insertText": "a64((opus_int64)(b32) * (c32))"
  },
  {
    "label": "a64()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ops_count + = 4 ; ret =)",
    "insertText": "a64((opus_int64)(b16) * (c16))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int32 out32 = 0 ; ops_count + = 1 0 ;)",
    "insertText": "if(in16 == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (in16>> = 1 2 ; } else { out32 + = 4 ; in16>> = 8 ; } } else {)",
    "insertText": "if(in16 & 0xFFF0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (out32 + = 8 ; in16>> = 4 ; } else { out32 + = 1 2 ; } })",
    "insertText": "if(in16 & 0xC)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ops_count + = 2 ;)",
    "insertText": "if(in32 & 0xFFFF0000)"
  },
  {
    "label": "SigProcFIX_CLZ16()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "SigProcFIX_CLZ16((opus_int16)in32)"
  },
  {
    "label": "silk_DIV32()",
    "kind": "Method",
    "detail": "Function (} } # undef silk_DIV32 OPUS_INLINE opus_int32)",
    "insertText": "silk_DIV32(opus_int32 a32, opus_int32 b32)"
  },
  {
    "label": "silk_DIV32_16()",
    "kind": "Method",
    "detail": "Function (ops_count + = 6 4 ; return a32 / b32 ; } # undef silk_DIV32_16 OPUS_INLINE opus_int32)",
    "insertText": "silk_DIV32_16(opus_int32 a32, opus_int32 b32)"
  },
  {
    "label": "silk_SAT8()",
    "kind": "Method",
    "detail": "Function (ops_count + = 3 2 ; return a32 / b32 ; } # undef silk_SAT8 OPUS_INLINE opus_int8)",
    "insertText": "silk_SAT8(opus_int64 a)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (opus_int8 tmp ; ops_count + = 1 ;)",
    "insertText": "tmp(opus_int8)((a) > silk_int8_MAX ? silk_int8_MAX : \\ ((a) < silk_int8_MIN ? silk_int8_MIN : (a)))"
  },
  {
    "label": "silk_SAT16()",
    "kind": "Method",
    "detail": "Function (} # undef silk_SAT16 OPUS_INLINE opus_int16)",
    "insertText": "silk_SAT16(opus_int64 a)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (opus_int16 tmp ; ops_count + = 1 ;)",
    "insertText": "tmp(opus_int16)((a) > silk_int16_MAX ? silk_int16_MAX : \\ ((a) < silk_int16_MIN ? silk_int16_MIN : (a)))"
  },
  {
    "label": "silk_SAT32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_SAT32 OPUS_INLINE opus_int32)",
    "insertText": "silk_SAT32(opus_int64 a)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (opus_int32 tmp ; ops_count + = 1 ;)",
    "insertText": "tmp(opus_int32)((a) > silk_int32_MAX ? silk_int32_MAX : \\ ((a) < silk_int32_MIN ? silk_int32_MIN : (a)))"
  },
  {
    "label": "silk_POS_SAT32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_POS_SAT32 OPUS_INLINE opus_int32)",
    "insertText": "silk_POS_SAT32(opus_int64 a)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (opus_int32 tmp ; ops_count + = 1 ;)",
    "insertText": "tmp(opus_int32)((a) > silk_int32_MAX ? silk_int32_MAX : (a))"
  },
  {
    "label": "silk_ADD_POS_SAT8()",
    "kind": "Method",
    "detail": "Function (} # undef silk_ADD_POS_SAT8 OPUS_INLINE opus_int8)",
    "insertText": "silk_ADD_POS_SAT8(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (opus_int8 tmp ; ops_count + = 1 ;)",
    "insertText": "tmp(opus_int8)((((a)+(b)) & 0x80) ? silk_int8_MAX : ((a)+(b)))"
  },
  {
    "label": "silk_ADD_POS_SAT16()",
    "kind": "Method",
    "detail": "Function (} # undef silk_ADD_POS_SAT16 OPUS_INLINE opus_int16)",
    "insertText": "silk_ADD_POS_SAT16(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (opus_int16 tmp ; ops_count + = 1 ;)",
    "insertText": "tmp(opus_int16)((((a)+(b)) & 0x8000) ? silk_int16_MAX : ((a)+(b)))"
  },
  {
    "label": "silk_ADD_POS_SAT32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_ADD_POS_SAT32 OPUS_INLINE opus_int32)",
    "insertText": "silk_ADD_POS_SAT32(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (opus_int32 tmp ; ops_count + = 1 ;)",
    "insertText": "tmp(opus_int32)((((a)+(b)) & 0x80000000) ? silk_int32_MAX : ((a)+(b)))"
  },
  {
    "label": "silk_LSHIFT8()",
    "kind": "Method",
    "detail": "Function (} # undef silk_LSHIFT8 OPUS_INLINE opus_int8)",
    "insertText": "silk_LSHIFT8(opus_int8 a, opus_int32 shift)"
  },
  {
    "label": "silk_LSHIFT16()",
    "kind": "Method",
    "detail": "Function (opus_int8 ret ; ops_count + = 1 ; ret = a<<shift ; return ret ; } # undef silk_LSHIFT16 OPUS_INLINE opus_int16)",
    "insertText": "silk_LSHIFT16(opus_int16 a, opus_int32 shift)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; ops_count + = 1 ; ret = a<<shift ; return ret ; } # undef silk_LSHIFT32 OPUS_INLINE opus_int32)",
    "insertText": "silk_LSHIFT32(opus_int32 a, opus_int32 shift)"
  },
  {
    "label": "silk_LSHIFT64()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret = a<<shift ; return ret ; } # undef silk_LSHIFT64 OPUS_INLINE opus_int64)",
    "insertText": "silk_LSHIFT64(opus_int64 a, opus_int shift)"
  },
  {
    "label": "silk_LSHIFT_ovflw()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return a<<shift ; } # undef silk_LSHIFT_ovflw OPUS_INLINE opus_int32)",
    "insertText": "silk_LSHIFT_ovflw(opus_int32 a, opus_int32 shift)"
  },
  {
    "label": "silk_LSHIFT_uint()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return a<<shift ; } # undef silk_LSHIFT_uint OPUS_INLINE opus_uint32)",
    "insertText": "silk_LSHIFT_uint(opus_uint32 a, opus_int32 shift)"
  },
  {
    "label": "silk_RSHIFT8()",
    "kind": "Method",
    "detail": "Function (opus_uint32 ret ; ops_count + = 1 ; ret = a<<shift ; return ret ; } # undef silk_RSHIFT8 OPUS_INLINE opus_int8)",
    "insertText": "silk_RSHIFT8(opus_int8 a, opus_int32 shift)"
  },
  {
    "label": "silk_RSHIFT16()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return a>> shift ; } # undef silk_RSHIFT16 OPUS_INLINE opus_int16)",
    "insertText": "silk_RSHIFT16(opus_int16 a, opus_int32 shift)"
  },
  {
    "label": "silk_RSHIFT32()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return a>> shift ; } # undef silk_RSHIFT32 OPUS_INLINE opus_int32)",
    "insertText": "silk_RSHIFT32(opus_int32 a, opus_int32 shift)"
  },
  {
    "label": "silk_RSHIFT64()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return a>> shift ; } # undef silk_RSHIFT64 OPUS_INLINE opus_int64)",
    "insertText": "silk_RSHIFT64(opus_int64 a, opus_int64 shift)"
  },
  {
    "label": "silk_RSHIFT_uint()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return a>> shift ; } # undef silk_RSHIFT_uint OPUS_INLINE opus_uint32)",
    "insertText": "silk_RSHIFT_uint(opus_uint32 a, opus_int32 shift)"
  },
  {
    "label": "silk_ADD_LSHIFT()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return a>> shift ; } # undef silk_ADD_LSHIFT OPUS_INLINE opus_int32)",
    "insertText": "silk_ADD_LSHIFT(opus_int32 a, opus_int32 b, opus_int32 shift)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret =)",
    "insertText": "a(b << shift)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret =)",
    "insertText": "a(b >> shift)"
  },
  {
    "label": "shift()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 3 ; ret =)",
    "insertText": "shift(a >> 1) + (a & 1) : ((a >> (shift - 1)) + 1)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ;)",
    "insertText": "return(((a) > 0) ? (a) : -(a))"
  },
  {
    "label": "silk_abs_int32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_abs_int32 OPUS_INLINE opus_int32)",
    "insertText": "silk_abs_int32(opus_int32 a)"
  },
  {
    "label": "silk_abs()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ; return)",
    "insertText": "silk_abs(a)"
  },
  {
    "label": "silk_min()",
    "kind": "Method",
    "detail": "Function (} # undef silk_min)",
    "insertText": "silk_min(a, b)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ;)",
    "insertText": "return(((a) < (b)) ? (a) : (b))"
  },
  {
    "label": "silk_max()",
    "kind": "Method",
    "detail": "Function (} # undef silk_max)",
    "insertText": "silk_max(a, b)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ;)",
    "insertText": "return(((a) > (b)) ? (a) : (b))"
  },
  {
    "label": "silk_sign()",
    "kind": "Method",
    "detail": "Function (} # undef silk_sign)",
    "insertText": "silk_sign(a)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (ops_count + = 1 ;)",
    "insertText": "return((a) > 0 ? 1 : ( (a) < 0 ? -1 : 0 ))"
  },
  {
    "label": "silk_ADD16()",
    "kind": "Method",
    "detail": "Function (} # undef silk_ADD16 OPUS_INLINE opus_int16)",
    "insertText": "silk_ADD16(opus_int16 a, opus_int16 b)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; ops_count + = 1 ; ret = a + b ; return ret ; } # undef silk_ADD32 OPUS_INLINE opus_int32)",
    "insertText": "silk_ADD32(opus_int32 a, opus_int32 b)"
  },
  {
    "label": "silk_ADD64()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret = a + b ; return ret ; } # undef silk_ADD64 OPUS_INLINE opus_int64)",
    "insertText": "silk_ADD64(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "silk_SUB16()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ops_count + = 2 ; ret = a + b ; return ret ; } # undef silk_SUB16 OPUS_INLINE opus_int16)",
    "insertText": "silk_SUB16(opus_int16 a, opus_int16 b)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; ops_count + = 1 ; ret = a - b ; return ret ; } # undef silk_SUB32 OPUS_INLINE opus_int32)",
    "insertText": "silk_SUB32(opus_int32 a, opus_int32 b)"
  },
  {
    "label": "silk_SUB64()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ops_count + = 1 ; ret = a - b ; return ret ; } # undef silk_SUB64 OPUS_INLINE opus_int64)",
    "insertText": "silk_SUB64(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "silk_ADD_SAT16()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ops_count + = 2 ; ret = a - b ; return ret ; } # undef silk_ADD_SAT16 OPUS_INLINE opus_int16)",
    "insertText": "silk_ADD_SAT16(opus_int16 a16, opus_int16 b16)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int16 res ;)",
    "insertText": "res(opus_int16)silk_SAT16( silk_ADD32( (opus_int32)(a16), (b16) ))"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int32 res ; ops_count + = 1 ;)",
    "insertText": "res((((a32) + (b32)) & 0x80000000) == 0 ? \\ ((((a32) & (b32)) & 0x80000000) != 0 ? silk_int32_MIN : (a32)+(b32)) : \\ ((((a32) | (b32)) & 0x80000000) == 0 ? silk_int32_MAX : (a32)+(b32)))"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ; ops_count + = 1 ;)",
    "insertText": "res((((a64) + (b64)) & 0x8000000000000000LL) == 0 ? \\ ((((a64) & (b64)) & 0x8000000000000000LL) != 0 ? silk_int64_MIN : (a64)+(b64)) : \\ ((((a64) | (b64)) & 0x8000000000000000LL) == 0 ? silk_int64_MAX : (a64)+(b64)))"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (opus_int16 res ;)",
    "insertText": "silk_assert(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(opus_int16)silk_SAT16( silk_SUB32( (opus_int32)(a16), (b16) ))"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int32 res ; ops_count + = 1 ;)",
    "insertText": "res((((a32)-(b32)) & 0x80000000) == 0 ? \\ (( (a32) & ((b32)^0x80000000) & 0x80000000) ? silk_int32_MIN : (a32)-(b32)) : \\ ((((a32)^0x80000000) & (b32) & 0x80000000) ? silk_int32_MAX : (a32)-(b32)))"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ; ops_count + = 1 ;)",
    "insertText": "res((((a64)-(b64)) & 0x8000000000000000LL) == 0 ? \\ (( (a64) & ((b64)^0x8000000000000000LL) & 0x8000000000000000LL) ? silk_int64_MIN : (a64)-(b64)) : \\ ((((a64)^0x8000000000000000LL) & (b64) & 0x8000000000000000LL) ? silk_int64_MAX : (a64)-(b64)))"
  },
  {
    "label": "silk_MLA()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "silk_MLA(silk_SMULWB((a32), (b32)), (a32), silk_RSHIFT_ROUND((b32), 16))"
  },
  {
    "label": "silk_MLA()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "silk_MLA(silk_SMLAWB((a32), (b32), (c32)), (b32), silk_RSHIFT_ROUND((c32), 16))"
  },
  {
    "label": "silk_min_16()",
    "kind": "Method",
    "detail": "Function (} # undef silk_min_16 OPUS_INLINE opus_int16)",
    "insertText": "silk_min_16(opus_int16 a, opus_int16 b)"
  },
  {
    "label": "silk_min_32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_min_32 OPUS_INLINE opus_int32)",
    "insertText": "silk_min_32(opus_int32 a, opus_int32 b)"
  },
  {
    "label": "silk_min_64()",
    "kind": "Method",
    "detail": "Function (} # undef silk_min_64 OPUS_INLINE opus_int64)",
    "insertText": "silk_min_64(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "silk_max_int()",
    "kind": "Method",
    "detail": "Function (} # undef silk_max_int OPUS_INLINE opus_int)",
    "insertText": "silk_max_int(opus_int a, opus_int b)"
  },
  {
    "label": "silk_max_16()",
    "kind": "Method",
    "detail": "Function (} # undef silk_max_16 OPUS_INLINE opus_int16)",
    "insertText": "silk_max_16(opus_int16 a, opus_int16 b)"
  },
  {
    "label": "silk_max_32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_max_32 OPUS_INLINE opus_int32)",
    "insertText": "silk_max_32(opus_int32 a, opus_int32 b)"
  },
  {
    "label": "silk_max_64()",
    "kind": "Method",
    "detail": "Function (} # undef silk_max_64 OPUS_INLINE opus_int64)",
    "insertText": "silk_max_64(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "silk_LIMIT_int()",
    "kind": "Method",
    "detail": "Function (} # undef silk_LIMIT_int OPUS_INLINE opus_int)",
    "insertText": "silk_LIMIT_int(opus_int a, opus_int limit1, opus_int limit2)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int ret ; ops_count + = 6 ;)",
    "insertText": "ret((limit1) > (limit2) ? ((a) > (limit1) ? (limit1) : ((a) < (limit2) ? (limit2) : (a))) \\ : ((a) > (limit2) ? (limit2) : ((a) < (limit1) ? (limit1) : (a))))"
  },
  {
    "label": "silk_LIMIT_16()",
    "kind": "Method",
    "detail": "Function (} # undef silk_LIMIT_16 OPUS_INLINE opus_int16)",
    "insertText": "silk_LIMIT_16(opus_int16 a, opus_int16 limit1, opus_int16 limit2)"
  },
  {
    "label": "silk_LIMIT_32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_LIMIT_32 OPUS_INLINE opus_int32)",
    "insertText": "silk_LIMIT_32(opus_int32 a, opus_int32 limit1, opus_int32 limit2)"
  }
]