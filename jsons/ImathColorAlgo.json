[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "hsv2rgb_d()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHCOLORALGO_H # define INCLUDED_IMATHCOLORALGO_H # include \" ImathNamespace . h \" # include \" ImathExport . h \" # include \" ImathColor . h \" # include \" ImathMath . h \" IMATH_INTERNAL_NAMESPACE_HEADER_ENTER IMATH_EXPORT Vec3<double>)",
    "insertText": "hsv2rgb_d(const Vec3<double>& hsv)"
  },
  {
    "label": "hsv2rgb_d()",
    "kind": "Method",
    "detail": "Function (IMATH_EXPORT Color4<double>)",
    "insertText": "hsv2rgb_d(const Color4<double>& hsv)"
  },
  {
    "label": "rgb2hsv_d()",
    "kind": "Method",
    "detail": "Function (IMATH_EXPORT Vec3<double>)",
    "insertText": "rgb2hsv_d(const Vec3<double>& rgb)"
  },
  {
    "label": "rgb2hsv_d()",
    "kind": "Method",
    "detail": "Function (IMATH_EXPORT Color4<double>)",
    "insertText": "rgb2hsv_d(const Color4<double>& rgb)"
  },
  {
    "label": "hsv2rgb()",
    "kind": "Method",
    "detail": "Function (template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Vec3<T>)",
    "insertText": "hsv2rgb(const Vec3<T>& hsv)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Vec3<double> v = Vec3<)",
    "insertText": "double(hsv.x / double (std::numeric_limits<T>::max()), hsv.y / double (std::numeric_limits<T>::max()), hsv.z / double (std::numeric_limits<T>::max()))"
  },
  {
    "label": "hsv2rgb_d()",
    "kind": "Method",
    "detail": "Function (Vec3<double> c =)",
    "insertText": "hsv2rgb_d(v)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} else { Vec3<double> v = Vec3<)",
    "insertText": "double(hsv.x, hsv.y, hsv.z)"
  },
  {
    "label": "hsv2rgb()",
    "kind": "Method",
    "detail": "Function (} } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Color4<T>)",
    "insertText": "hsv2rgb(const Color4<T>& hsv)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Color4<double> v = Color4<)",
    "insertText": "double(hsv.r / float (std::numeric_limits<T>::max()), hsv.g / float (std::numeric_limits<T>::max()), hsv.b / float (std::numeric_limits<T>::max()), hsv.a / float (std::numeric_limits<T>::max()))"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} else { Color4<double> v = Color4<)",
    "insertText": "double(hsv.r, hsv.g, hsv.b, hsv.a)"
  },
  {
    "label": "rgb2hsv()",
    "kind": "Method",
    "detail": "Function (} } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Vec3<T>)",
    "insertText": "rgb2hsv(const Vec3<T>& rgb)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Vec3<double> v = Vec3<)",
    "insertText": "double(rgb.x / double (std::numeric_limits<T>::max()), rgb.y / double (std::numeric_limits<T>::max()), rgb.z / double (std::numeric_limits<T>::max()))"
  },
  {
    "label": "rgb2hsv_d()",
    "kind": "Method",
    "detail": "Function (Vec3<double> c =)",
    "insertText": "rgb2hsv_d(v)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} else { Vec3<double> v = Vec3<)",
    "insertText": "double(rgb.x, rgb.y, rgb.z)"
  },
  {
    "label": "rgb2hsv()",
    "kind": "Method",
    "detail": "Function (} } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Color4<T>)",
    "insertText": "rgb2hsv(const Color4<T>& rgb)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Color4<double> v = Color4<)",
    "insertText": "double(rgb.r / float (std::numeric_limits<T>::max()), rgb.g / float (std::numeric_limits<T>::max()), rgb.b / float (std::numeric_limits<T>::max()), rgb.a / float (std::numeric_limits<T>::max()))"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} else { Color4<double> v = Color4<)",
    "insertText": "double(rgb.r, rgb.g, rgb.b, rgb.a)"
  },
  {
    "label": "rgb2packed()",
    "kind": "Method",
    "detail": "Function (} } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 PackedColor)",
    "insertText": "rgb2packed(const Vec3<T>& c)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float x = c . x /)",
    "insertText": "float(std::numeric_limits<T>::max())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return((PackedColor) (c.x * 255) | (((PackedColor) (c.y * 255)) << 8) | (((PackedColor) (c.z * 255)) << 16) | 0xFF000000)"
  },
  {
    "label": "rgb2packed()",
    "kind": "Method",
    "detail": "Function (} } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 PackedColor)",
    "insertText": "rgb2packed(const Color4<T>& c)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return((PackedColor) (c.r * 255) | (((PackedColor) (c.g * 255)) << 8) | (((PackedColor) (c.b * 255)) << 16) | (((PackedColor) (c.a * 255)) << 24))"
  },
  {
    "label": "packed2rgb()",
    "kind": "Method",
    "detail": "Function (} } template<class T> IMATH_HOSTDEVICE void)",
    "insertText": "packed2rgb(PackedColor packed, Vec3<T>& out)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (T f = std::numeric_limits<T)",
    "insertText": "max() / ((PackedColor) 0xFF)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "x(packed & 0xFF)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "y((packed & 0xFF00) >> 8)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "z((packed & 0xFF0000) >> 16)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { T f =)",
    "insertText": "T(1) / T (255)"
  },
  {
    "label": "packed2rgb()",
    "kind": "Method",
    "detail": "Function (} } template<class T> IMATH_HOSTDEVICE void)",
    "insertText": "packed2rgb(PackedColor packed, Color4<T>& out)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "r(packed & 0xFF)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "g((packed & 0xFF00) >> 8)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "b((packed & 0xFF0000) >> 16)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "a((packed & 0xFF000000) >> 24)"
  }
]