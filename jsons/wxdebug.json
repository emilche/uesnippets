[
  {
    "label": "tag_ObjectDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tag_ObjectDesc"
  },
  {
    "label": "CGuidNameList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CGuidNameList"
  },
  {
    "label": "CDispBasic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDispBasic"
  },
  {
    "label": "CDisp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDisp"
  },
  {
    "label": "CAutoTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAutoTrace"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# ifndef __WXDEBUG__ # define __WXDEBUG__ enum { LOG_TIMING = 0 x01,LOG_TRACE = 0 x02,LOG_MEMORY = 0 x04,LOG_LOCKING = 0 x08,LOG_ERROR = 0 x10,LOG_CUSTOM1 = 0 x20,LOG_CUSTOM2 = 0 x40,LOG_CUSTOM3 = 0 x80,LOG_CUSTOM4 = 0 x100,LOG_CUSTOM5 = 0 x200,} ; # define LOG_FORCIBLY_SET 0 x80000000 enum { CDISP_HEX = 0 x01,CDISP_DEC = 0 x02 } ; typedef struct tag_ObjectDesc { LPCSTR m_szName ; LPCWSTR m_wszName ; DWORD m_dwCookie ; tag_ObjectDesc* m_pNext ; } ObjectDesc ; # define DLLIMPORT)",
    "insertText": "__declspec(dllimport) #define DLLEXPORT __declspec(dllexport) #ifdef DEBUG #define NAME(x) TEXT(x) void WINAPI DbgInitKeyLevels(HKEY hKey, bool fTakeMax)"
  },
  {
    "label": "DbgInitGlobalSettings()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgInitGlobalSettings(bool fTakeMax)"
  },
  {
    "label": "DbgInitModuleSettings()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgInitModuleSettings(bool fTakeMax)"
  },
  {
    "label": "DbgInitModuleName()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgInitModuleName()"
  },
  {
    "label": "DbgRegisterObjectCreation()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "DbgRegisterObjectCreation(LPCSTR szObjectName, LPCWSTR wszObjectName)"
  },
  {
    "label": "DbgRegisterObjectDestruction()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "DbgRegisterObjectDestruction(DWORD dwCookie)"
  },
  {
    "label": "DbgCheckModuleLevel()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "DbgCheckModuleLevel(DWORD Type,DWORD Level)"
  },
  {
    "label": "DbgSetModuleLevel()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgSetModuleLevel(DWORD Type,DWORD Level)"
  },
  {
    "label": "DbgSetAutoRefreshLevels()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgSetAutoRefreshLevels(bool fAuto)"
  },
  {
    "label": "DbgInitialise()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgInitialise(HINSTANCE hInst)"
  },
  {
    "label": "DbgTerminate()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgTerminate()"
  },
  {
    "label": "DbgDumpObjectRegister()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgDumpObjectRegister()"
  },
  {
    "label": "DbgAssert()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgAssert(LPCTSTR pCondition,LPCTSTR pFileName,INT iLine)"
  },
  {
    "label": "DbgBreakPoint()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgBreakPoint(LPCTSTR pCondition,LPCTSTR pFileName,INT iLine)"
  },
  {
    "label": "DbgBreakPoint()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgBreakPoint(LPCTSTR pFileName,INT iLine,__format_string LPCTSTR szFormatString,...)"
  },
  {
    "label": "DbgKernelAssert()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgKernelAssert(LPCTSTR pCondition,LPCTSTR pFileName,INT iLine)"
  },
  {
    "label": "DbgLogInfo()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgLogInfo(DWORD Type,DWORD Level,__format_string LPCTSTR pFormat,...)"
  },
  {
    "label": "DbgLogInfo()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE void WINAPI)",
    "insertText": "DbgLogInfo(DWORD Type,DWORD Level,__format_string LPCSTR pFormat,...)"
  },
  {
    "label": "DbgAssert()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgAssert(LPCSTR pCondition,LPCSTR pFileName,INT iLine)"
  },
  {
    "label": "DbgBreakPoint()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgBreakPoint(LPCSTR pCondition,LPCSTR pFileName,INT iLine)"
  },
  {
    "label": "DbgKernelAssert()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgKernelAssert(LPCSTR pCondition,LPCSTR pFileName,INT iLine)"
  },
  {
    "label": "DbgOutString()",
    "kind": "Method",
    "detail": "Function (# endif void WINAPI)",
    "insertText": "DbgOutString(LPCTSTR psz)"
  },
  {
    "label": "DbgWaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "DbgWaitForSingleObject(HANDLE h)"
  },
  {
    "label": "DbgWaitForMultipleObjects()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "DbgWaitForMultipleObjects(DWORD nCount, __in_ecount(nCount) CONST HANDLE *lpHandles, BOOL bWaitAll)"
  },
  {
    "label": "DbgSetWaitTimeout()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DbgSetWaitTimeout(DWORD dwTimeout)"
  },
  {
    "label": "DisplayType()",
    "kind": "Method",
    "detail": "Function (# ifdef __strmif_h__ void WINAPI)",
    "insertText": "DisplayType(LPCTSTR label, const AM_MEDIA_TYPE *pmtIn)"
  },
  {
    "label": "DumpGraph()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DumpGraph(IFilterGraph *pGraph, DWORD dwLevel)"
  },
  {
    "label": "KASSERT()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "KASSERT(_x_) if (!(_x_)) \\ DbgKernelAssert(TEXT(#_x_),TEXT(__FILE__),__LINE__) #define KDbgBreak(_x_) \\ DbgKernelAssert(TEXT(#_x_),TEXT(__FILE__),__LINE__) #ifndef ASSERT #define ASSERT(_x_) if (!(_x_)) \\ DbgAssert(#_x_,__FILE__,__LINE__) #endif #define DbgAssertAligned( _ptr_, _alignment_ ) ASSERT( ((DWORD_PTR) (_ptr_)) % (_alignment_) == 0) #define DbgBreak(_x_) \\ DbgBreakPoint(#_x_,__FILE__,__LINE__) #define EXECUTE_ASSERT(_x_) ASSERT(_x_) #define DbgLog(_x_) DbgLogInfo _x_ #define NOTE(_x_) DbgLog((LOG_TRACE,5,TEXT(_x_))) #define NOTE1(_x_,a) DbgLog((LOG_TRACE,5,TEXT(_x_),a)) #define NOTE2(_x_,a,b) DbgLog((LOG_TRACE,5,TEXT(_x_),a,b)) #define NOTE3(_x_,a,b,c) DbgLog((LOG_TRACE,5,TEXT(_x_),a,b,c)) #define NOTE4(_x_,a,b,c,d) DbgLog((LOG_TRACE,5,TEXT(_x_),a,b,c,d)) #define NOTE5(_x_,a,b,c,d,e) DbgLog((LOG_TRACE,5,TEXT(_x_),a,b,c,d,e)) #else #define NAME(_x_) ((LPTSTR) NULL) #define DbgInitialise(hInst) #define DbgTerminate() #define DbgLog(_x_) 0 #define DbgOutString(psz) #define DbgAssertAligned( _ptr_, _alignment_ ) 0 #define DbgRegisterObjectCreation(pObjectName) #define DbgRegisterObjectDestruction(dwCookie) #define DbgDumpObjectRegister() #define DbgCheckModuleLevel(Type,Level) #define DbgSetModuleLevel(Type,Level) #define DbgSetAutoRefreshLevels(fAuto) #define DbgWaitForSingleObject(h) WaitForSingleObject(h, INFINITE) #define DbgWaitForMultipleObjects(nCount, lpHandles, bWaitAll) \\ WaitForMultipleObjects(nCount, lpHandles, bWaitAll, INFINITE) #define DbgSetWaitTimeout(dwTimeout) #define KDbgBreak(_x_) #define DbgBreak(_x_) #define KASSERT(_x_) ((void)0) #ifndef ASSERT #define ASSERT(_x_) ((void)0) #endif #define EXECUTE_ASSERT(_x_) ((void)(_x_)) #define NOTE(_x_) ((void)0) #define NOTE1(_x_,a) ((void)0) #define NOTE2(_x_,a,b) ((void)0) #define NOTE3(_x_,a,b,c) ((void)0) #define NOTE4(_x_,a,b,c,d) ((void)0) #define NOTE5(_x_,a,b,c,d,e) ((void)0) #define DisplayType(label, pmtIn) ((void)0) #define DumpGraph(pGraph, label) ((void)0) #endif #define CheckPointer(p,ret)"
  },
  {
    "label": "ValidateReadPtr()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ValidateReadPtr(p,cb) 0 #define ValidateWritePtr(p,cb) 0 #define ValidateReadWritePtr(p,cb) 0 #define ValidateStringPtr(p) 0 #define ValidateStringPtrA(p) 0 #define ValidateStringPtrW(p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CHAR* szName ; GUID guid ; } GUID_STRING_ENTRY ; class CGuidNameList { public : CHAR*)",
    "insertText": "operator(const GUID& guid)"
  },
  {
    "label": "QUOTE()",
    "kind": "Method",
    "detail": "Function (} ; CGuidNameList GuidNames ; # endif # ifndef REMIND # define)",
    "insertText": "QUOTE(x) #x #define QQUOTE(y) QUOTE(y) #define REMIND(str) __FILE__ \"(\" QQUOTE(__LINE__) \")"
  },
  {
    "label": "CDispBasic()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CDispBasic()"
  },
  {
    "label": "CDisp()",
    "kind": "Method",
    "detail": "Function (protected : PTCHAR m_pString ; TCHAR m_String [ 5 0 ] ; } ; class CDisp : public CDispBasic { public :)",
    "insertText": "CDisp(LONGLONG ll, int Format = CDISP_HEX)"
  },
  {
    "label": "CDisp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CDisp(REFCLSID clsid)"
  },
  {
    "label": "CDisp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CDisp(double d)"
  },
  {
    "label": "CDisp()",
    "kind": "Method",
    "detail": "Function (# ifdef __strmif_h__ # ifdef __STREAMS__)",
    "insertText": "CDisp(CRefTime t)"
  },
  {
    "label": "CDisp()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "CDisp(IPin *pPin)"
  },
  {
    "label": "CDisp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CDisp(IUnknown *pUnk)"
  },
  {
    "label": "CDisp()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CDisp()"
  },
  {
    "label": "LPCTSTR()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "LPCTSTR()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } ; # if)",
    "insertText": "defined(DEBUG)"
  },
  {
    "label": "CAutoTrace()",
    "kind": "Method",
    "detail": "Function (private : LPCTSTR _szBlkName ; const int _level ; const TCHAR _szEntering [ ] ; const TCHAR _szLeaving [ ] ; public :)",
    "insertText": "CAutoTrace(LPCTSTR szBlkName, const int level = 15) : _szBlkName(szBlkName), _level(level)"
  },
  {
    "label": "DbgLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DbgLog((LOG_TRACE, _level, _szEntering, _szBlkName))"
  },
  {
    "label": "CAutoTrace()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CAutoTrace()"
  },
  {
    "label": "DbgLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DbgLog((LOG_TRACE, _level, _szLeaving, _szBlkName))"
  }
]