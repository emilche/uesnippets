[
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "_Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Op"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_COPY_BACKWARD_H # define _LIBCPP___ALGORITHM_RANGES_COPY_BACKWARD_H # include<__algorithm / copy_backward . h> # include<__algorithm / in_out_result . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / reverse_iterator . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Ip,class _Op> using copy_backward_result = in_out_result<_Ip,_Op> ; namespace __copy_backward { struct __fn { template<bidirectional_iterator _InIter1,sentinel_for<_InIter1> _Sent1,bidirectional_iterator _InIter2> requires indirectly_copyable<_InIter1,_InIter2> _LIBCPP_HIDE_FROM_ABI copy_backward_result<_InIter1,_InIter2>)",
    "insertText": "operator()(_InIter1 __first, _Sent1 __last, _InIter2 __result)"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__copy_backward<)",
    "insertText": "_RangeAlgPolicy(std::move(__first), std::move(__last), std::move(__result))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<bidirectional_range _Range,bidirectional_iterator _Iter> requires indirectly_copyable<iterator_t<_Range>,_Iter> _LIBCPP_HIDE_FROM_ABI copy_backward_result<borrowed_iterator_t<_Range>,_Iter>)",
    "insertText": "operator()(_Range&& __r, _Iter __result)"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__copy_backward<)",
    "insertText": "_RangeAlgPolicy(ranges::begin(__r), ranges::end(__r), std::move(__result))"
  }
]