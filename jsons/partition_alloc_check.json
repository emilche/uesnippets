[
  {
    "label": "PA_DEBUGKV_ALIGN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PA_DEBUGKV_ALIGN"
  },
  {
    "label": "PA_STRINGIFY_IMPL()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_CHECK_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_CHECK_H_ # include<cstdint> # include \" base / allocator / partition_allocator / page_allocator_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / check . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / alias . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / immediate_crash . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" build / build_config . h \" # define)",
    "insertText": "PA_STRINGIFY_IMPL(s) #s #define PA_STRINGIFY(s) PA_STRINGIFY_IMPL(s) #if BUILDFLAG(ENABLE_PARTITION_ALLOC_AS_MALLOC_SUPPORT) #if !CHECK_WILL_STREAM() #define PA_CHECK(condition) \\ PA_UNLIKELY(!(condition)) ? PA_IMMEDIATE_CRASH() \\ : PA_EAT_CHECK_STREAM_PARAMS() #else #define PA_CHECK(condition) \\ PA_UNLIKELY(!(condition)) \\ ? ::partition_alloc::internal::logging::RawCheck( \\ __FILE__ \"(\" PA_STRINGIFY(__LINE__) \") Check failed: \" #condition) \\ : PA_EAT_CHECK_STREAM_PARAMS() #endif #if BUILDFLAG(PA_DCHECK_IS_ON) #define PA_DCHECK(condition) PA_CHECK(condition) #else #define PA_DCHECK(condition) PA_EAT_CHECK_STREAM_PARAMS(!(condition)) #endif #define PA_PCHECK(condition) \\ if (!(condition))"
  },
  {
    "label": "Alias()",
    "kind": "Method",
    "detail": "Function (\\ int error = errno ; \\::partition_alloc::internal::base::)",
    "insertText": "Alias(&error)"
  },
  {
    "label": "PA_IMMEDIATE_CRASH()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PA_IMMEDIATE_CRASH()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (\\ } # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) #define PA_DPCHECK(condition) PA_PCHECK(condition) #else #define PA_DPCHECK(condition) PA_EAT_CHECK_STREAM_PARAMS(!(condition)) #endif #else #define PA_CHECK(condition) PA_BASE_CHECK(condition) #define PA_DCHECK(condition) PA_BASE_DCHECK(condition) #define PA_PCHECK(condition) PA_BASE_PCHECK(condition) #define PA_DPCHECK(condition) PA_BASE_DPCHECK(condition) #endif #if !defined(NDEBUG) #define PA_SCAN_DCHECK_IS_ON() BUILDFLAG(PA_DCHECK_IS_ON) #else #define PA_SCAN_DCHECK_IS_ON() 0 #endif #if PA_SCAN_DCHECK_IS_ON() #define PA_SCAN_DCHECK(expr) PA_DCHECK(expr) #else #define PA_SCAN_DCHECK(expr) PA_EAT_CHECK_STREAM_PARAMS(!(expr)) #endif #if defined(PAGE_ALLOCATOR_CONSTANTS_ARE_CONSTEXPR) #define STATIC_ASSERT_OR_PA_CHECK(condition, message) \\ static_assert(condition, message) #else #define STATIC_ASSERT_OR_PA_CHECK(condition, message)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PA_CHECK(condition) << (message)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) #endif #if BUILDFLAG(IS_ANDROID) && defined(ARCH_CPU_X86_FAMILY) && \\ defined(ARCH_CPU_32_BITS) #define PA_DEBUGKV_ALIGN alignas(8) #else #define PA_DEBUGKV_ALIGN alignas(16)"
  },
  {
    "label": "DebugKv()",
    "kind": "Method",
    "detail": "Function (struct PA_DEBUGKV_ALIGN DebugKv { char k [ 8 ] = { } ; uint64_t v = 0 ;)",
    "insertText": "DebugKv(const char* key, uint64_t value) : v(value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (k [ index ] = ' ' ; })",
    "insertText": "for(int index = 0; index < 8; index++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (k [ index ] = key [ index ] ;)",
    "insertText": "if(key[index] == '\\0')"
  },
  {
    "label": "PA_CONCAT()",
    "kind": "Method",
    "detail": "Function (} } } ; } # define)",
    "insertText": "PA_CONCAT(x, y) x##y #define PA_CONCAT2(x, y) PA_CONCAT(x, y) #define PA_DEBUG_UNIQUE_NAME PA_CONCAT2(kv, __LINE__) #define PA_DEBUG_DATA_ON_STACK(name, value)"
  },
  {
    "label": "Alias()",
    "kind": "Method",
    "detail": "Function (name,value } ; \\::partition_alloc::internal::base::)",
    "insertText": "Alias(&PA_DEBUG_UNIQUE_NAME)"
  }
]