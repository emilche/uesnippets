[
  {
    "label": "UMovieSceneCondition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCondition"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / Extensions / HierarchicalCacheExtension . h \" class UMovieSceneCondition ; namespace UE { namespace Sequencer { enum class EConditionableConditionState { None,HasConditionEvaluatingFalse,HasConditionEvaluatingTrue,HasConditionEditorForceTrue,} ; class IConditionableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IConditionableExtension) virtual ~IConditionableExtension()"
  },
  {
    "label": "GetCondition()",
    "kind": "Method",
    "detail": "Function (} const UMovieSceneCondition*)",
    "insertText": "GetCondition()"
  },
  {
    "label": "GetConditionState()",
    "kind": "Method",
    "detail": "Function (EConditionableConditionState)",
    "insertText": "GetConditionState()"
  },
  {
    "label": "SetConditionEditorForceTrue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConditionEditorForceTrue(bool bEditorForceTrue)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ECachedConditionState { None = 0,HasCondition = 1<<0,ConditionEvaluatingTrue = 1<<1,EditorForceTrue = 1<<2,ChildHasCondition = 1<<3,SectionHasCondition = 1<<4,ParentHasCondition = 1<<5,ParentHasConditionEvaluatingTrue = 1<<6,InheritedFromChildren = ChildHasCondition,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECachedConditionState)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FConditionStateCacheExtension)"
  },
  {
    "label": "ComputeFlagsForModel()",
    "kind": "Method",
    "detail": "Function (private : ECachedConditionState)",
    "insertText": "ComputeFlagsForModel(const FViewModelPtr& ViewModel)"
  },
  {
    "label": "PostComputeChildrenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostComputeChildrenFlags(const FViewModelPtr& ViewModel, ECachedConditionState& OutThisModelFlags, ECachedConditionState& OutPropagateToParentFlags)"
  }
]