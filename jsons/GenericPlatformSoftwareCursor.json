[
  {
    "label": "FGenericPlatformSoftwareCursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericPlatformSoftwareCursor"
  },
  {
    "label": "FGenericPlatformSoftwareCursor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ICursor . h \" # include \" Math / IntRect . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # if ! PLATFORM_WINDOWS&& ! PLATFORM_HOLOLENS class FGenericPlatformSoftwareCursor : public ICursor { public :)",
    "insertText": "FGenericPlatformSoftwareCursor()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetPosition()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const EMouseCursor::Type InNewCursor)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetType()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(bool bInShow)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(const RECT* const Bounds)"
  },
  {
    "label": "SetTypeShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTypeShape(EMouseCursor::Type InCursorType, void* CursorHandle)"
  },
  {
    "label": "UpdateCursorClipping()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "UpdateCursorClipping(FVector2D& CursorPosition)"
  }
]