[
  {
    "label": "FUndoHistoryUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUndoHistoryUtils"
  },
  {
    "label": "FBasicPropertyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasicPropertyInfo"
  },
  {
    "label": "FBasicPropertyInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / SoftObjectPath . h \" # include \" Widgets / IReflectionDataProvider . h \" class FUndoHistoryUtils { public : struct FBasicPropertyInfo { FString PropertyName ; TOptional<FString> PropertyType ; TOptional<EPropertyFlags> PropertyFlags ;)",
    "insertText": "FBasicPropertyInfo(FString InPropertyName, TOptional<FString> InPropertyType, TOptional<EPropertyFlags> InPropertyFlags) : PropertyName(MoveTemp(InPropertyName)) , PropertyType(MoveTemp(InPropertyType)) , PropertyFlags(InPropertyFlags)"
  },
  {
    "label": "GetChangedPropertiesInfo()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FBasicPropertyInfo>)",
    "insertText": "GetChangedPropertiesInfo(const UE::UndoHistory::IReflectionDataProvider& ReflectionData, const FSoftClassPath& InObjectClass, const TArray<FName>& InChangedProperties)"
  },
  {
    "label": "GetChangedPropertiesWithoutReflectionInfo()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "GetChangedPropertiesWithoutReflectionInfo(InChangedProperties)"
  },
  {
    "label": "GetChangedPropertiesInfoUsingReflectionInterface()",
    "kind": "Method",
    "detail": "Function (} } private : TArray<FBasicPropertyInfo>)",
    "insertText": "GetChangedPropertiesInfoUsingReflectionInterface(const UE::UndoHistory::IReflectionDataProvider& ReflectionData, const FSoftClassPath& InObjectClass, const TArray<FName>& InChangedProperties)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using namespace UE::UndoHistory ; TArray<FBasicPropertyInfo> Properties ;)",
    "insertText": "for(const FName& PropertyName : InChangedProperties)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString ClassName ;)",
    "insertText": "if(PropertyData->PropertyType == UE::UndoHistory::EPropertyType::ObjectProperty || PropertyData->PropertyType == UE::UndoHistory::EPropertyType::StructProperty || PropertyData->PropertyType == UE::UndoHistory::EPropertyType::EnumProperty)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ClassName = PropertyData -> CppMacroType ; } else)",
    "insertText": "if(PropertyData->PropertyType == UE::UndoHistory::EPropertyType::ArrayProperty)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (ClassName = PropertyData -> CppMacroType ; ClassName =)",
    "insertText": "Printf(TEXT(\"TArray<%s>\"), *ClassName)"
  },
  {
    "label": "RemoveFromEnd()",
    "kind": "Method",
    "detail": "Function (} else { ClassName = PropertyData -> ; ClassName .)",
    "insertText": "RemoveFromEnd(\"Property\")"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} Properties .)",
    "insertText": "Emplace(PropertyName.ToString(), MoveTemp(ClassName), PropertyData->PropertyFlags)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} else { Properties .)",
    "insertText": "Emplace(PropertyName.ToString(), TOptional<FString>{}, TOptional<EPropertyFlags>{})"
  },
  {
    "label": "GetChangedPropertiesWithoutReflectionInfo()",
    "kind": "Method",
    "detail": "Function (} } return Properties ; } TArray<FBasicPropertyInfo>)",
    "insertText": "GetChangedPropertiesWithoutReflectionInfo(const TArray<FName>& InChangedProperties)"
  }
]