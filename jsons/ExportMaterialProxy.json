[
  {
    "label": "FExportMaterialCompiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportMaterialCompiler"
  },
  {
    "label": "FExportMaterialProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExportMaterialProxy"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "ERefractionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERefractionMode"
  },
  {
    "label": "FExportMaterialCompiler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MaterialDomain . h \" # include \" MaterialShared . h \" # include \" MaterialCompiler . h \" # include \" TextureCompiler . h \" # include \" Materials / MaterialParameterCollection . h \" # include \" Engine / TextureLODSettings . h \" # include \" Engine / Texture2D . h \" # include \" Engine / Texture . h \" # include \" Engine / TextureCube . h \" # include \" Engine / Texture2DArray . h \" # include \" DataDrivenShaderPlatformInfo . h \" # include \" DeviceProfiles / DeviceProfileManager . h \" # include \" DeviceProfiles / DeviceProfile . h \" # include \" Materials / MaterialInterface . h \" # include \" Materials / MaterialRenderProxy . h \" # include \" SceneTypes . h \" # include \" Materials / Material . h \" # include \" Materials / MaterialAttributeDefinitionMap . h \" # include \" Materials / MaterialExpressionCustomOutput . h \" struct FExportMaterialCompiler : public FProxyMaterialCompiler {)",
    "insertText": "FExportMaterialCompiler(FMaterialCompiler* InCompiler) : FProxyMaterialCompiler(InCompiler)"
  },
  {
    "label": "GetCurrentShaderFrequency()",
    "kind": "Method",
    "detail": "Function (} EShaderFrequency)",
    "insertText": "GetCurrentShaderFrequency()"
  },
  {
    "label": "GetCompiledShadingModels()",
    "kind": "Method",
    "detail": "Function (} FMaterialShadingModelField)",
    "insertText": "GetCompiledShadingModels()"
  },
  {
    "label": "WorldPosition()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "WorldPosition(EWorldPositionIncludedOffsets WorldPositionIncludedOffsets)"
  },
  {
    "label": "MaterialBakingWorldPosition()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return)",
    "insertText": "MaterialBakingWorldPosition()"
  },
  {
    "label": "WorldPosition()",
    "kind": "Method",
    "detail": "Function (# else return Compiler ->)",
    "insertText": "WorldPosition(WorldPositionIncludedOffsets)"
  },
  {
    "label": "DistanceCullFade()",
    "kind": "Method",
    "detail": "Function (# endif } int32)",
    "insertText": "DistanceCullFade()"
  },
  {
    "label": "ParticleRelativeTime()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleRelativeTime()"
  },
  {
    "label": "ParticleMotionBlurFade()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleMotionBlurFade()"
  },
  {
    "label": "PixelNormalWS()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PixelNormalWS()"
  },
  {
    "label": "ParticleRandom()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleRandom()"
  },
  {
    "label": "ParticleDirection()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleDirection()"
  },
  {
    "label": "ParticleSpeed()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleSpeed()"
  },
  {
    "label": "ParticleSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleSize()"
  },
  {
    "label": "ParticleSpriteRotation()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleSpriteRotation()"
  },
  {
    "label": "CameraVector()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CameraVector()"
  },
  {
    "label": "ReflectionAboutCustomWorldNormal()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ReflectionAboutCustomWorldNormal(int32 CustomWorldNormal, int32 bNormalizeCustomWorldNormal)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (N = Compiler ->)",
    "insertText": "Div(N, Compiler->SquareRoot(Compiler->Dot(N, N)))"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (} return Compiler ->)",
    "insertText": "Sub(Compiler->Mul(Compiler->Constant(2.0f), Compiler->Mul(Compiler->Dot(N, C), N)), C)"
  },
  {
    "label": "PreSkinnedPosition()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PreSkinnedPosition()"
  },
  {
    "label": "PreSkinnedNormal()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PreSkinnedNormal()"
  },
  {
    "label": "VertexInterpolator()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VertexInterpolator(uint32 InterpolatorIndex)"
  },
  {
    "label": "ReflectionVector()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ReflectionVector()"
  },
  {
    "label": "AccessCollectionParameter()",
    "kind": "Method",
    "detail": "Function (} # endif int32)",
    "insertText": "AccessCollectionParameter(UMaterialParameterCollection* ParameterCollection, int32 ParameterIndex, int32 ComponentIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumScalarParameters = ParameterNames .)",
    "insertText": "Num()"
  },
  {
    "label": "GetParameterNames()",
    "kind": "Method",
    "detail": "Function (ParameterCollection ->)",
    "insertText": "GetParameterNames(ParameterNames, true)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Index ;)",
    "insertText": "for(Index = 0; Index < ParameterNames.Num(); Index++)"
  },
  {
    "label": "GetParameterId()",
    "kind": "Method",
    "detail": "Function (FGuid ParameterId = ParameterCollection ->)",
    "insertText": "GetParameterId(ParameterNames[Index])"
  },
  {
    "label": "GetParameterIndex()",
    "kind": "Method",
    "detail": "Function (int32 CheckParameterIndex,CheckComponentIndex ; ParameterCollection ->)",
    "insertText": "GetParameterIndex(ParameterId, CheckParameterIndex, CheckComponentIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(Index >= ParameterNames.Num())"
  },
  {
    "label": "GetScalarParameterByName()",
    "kind": "Method",
    "detail": "Function (const FCollectionScalarParameter* ScalarParameter = ParameterCollection ->)",
    "insertText": "GetScalarParameterByName(ParameterNames[Index])"
  },
  {
    "label": "GetVectorParameterByName()",
    "kind": "Method",
    "detail": "Function (} else { const FCollectionVectorParameter* VectorParameter = ParameterCollection ->)",
    "insertText": "GetVectorParameterByName(ParameterNames[Index])"
  },
  {
    "label": "Constant4()",
    "kind": "Method",
    "detail": "Function (const FLinearColor& Color = VectorParameter -> DefaultValue ; return)",
    "insertText": "Constant4(Color.R, Color.G, Color.B, Color.A)"
  },
  {
    "label": "GetCompilerType()",
    "kind": "Method",
    "detail": "Function (} } EMaterialCompilerType)",
    "insertText": "GetCompilerType()"
  },
  {
    "label": "SetQualityLevelProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQualityLevelProperties(GMaxRHIFeatureLevel)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (Material = InMaterialInterface ->)",
    "insertText": "GetMaterial()"
  },
  {
    "label": "GetReferencedTextures()",
    "kind": "Method",
    "detail": "Function (ReferencedTextures = InMaterialInterface ->)",
    "insertText": "GetReferencedTextures()"
  },
  {
    "label": "GetReferencedTextureCollections()",
    "kind": "Method",
    "detail": "Function (ReferencedTextureCollections = InMaterialInterface ->)",
    "insertText": "GetReferencedTextureCollections()"
  },
  {
    "label": "GetMaterialResource()",
    "kind": "Method",
    "detail": "Function (const FMaterialResource* Resource = InMaterialInterface ->)",
    "insertText": "GetMaterialResource(GMaxRHIFeatureLevel)"
  },
  {
    "label": "GetShaderMapId()",
    "kind": "Method",
    "detail": "Function (FMaterialShaderMapId ResourceId ; Resource ->)",
    "insertText": "GetShaderMapId(GMaxRHIShaderPlatform, nullptr, ResourceId)"
  },
  {
    "label": "GetDependentShaderAndVFTypes()",
    "kind": "Method",
    "detail": "Function ({ TArray<FShaderType*> ShaderTypes ; TArray<FVertexFactoryType*> VFTypes ; TArray<const FShaderPipelineType*> ShaderPipelineTypes ;)",
    "insertText": "GetDependentShaderAndVFTypes(GMaxRHIShaderPlatform, ResourceId.LayoutParams, ShaderTypes, ShaderPipelineTypes, VFTypes)"
  },
  {
    "label": "SetShaderDependencies()",
    "kind": "Method",
    "detail": "Function (ResourceId .)",
    "insertText": "SetShaderDependencies(ShaderTypes, ShaderPipelineTypes, VFTypes, GMaxRHIShaderPlatform)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "switch(InPropertyToCompile)"
  },
  {
    "label": "SetAllowPixelDepthOffset()",
    "kind": "Method",
    "detail": "Function (break ; } ; Usage = ResourceId . Usage ; ResourceId . BaseMaterialId = Material -> StateId ;)",
    "insertText": "SetAllowPixelDepthOffset(bAllowPixelDepthOffset)"
  },
  {
    "label": "CacheShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheShaders(ResourceId, GMaxRHIShaderPlatform)"
  },
  {
    "label": "RequiresSynchronousCompilation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresSynchronousCompilation()"
  },
  {
    "label": "FindVertexFactoryType()",
    "kind": "Method",
    "detail": "Function (const bool bCorrectVertexFactory = VertexFactoryType = =)",
    "insertText": "FindVertexFactoryType(FName(TEXT(\"FLocalVertexFactory\"), FNAME_Find))"
  },
  {
    "label": "IsConsolePlatform()",
    "kind": "Method",
    "detail": "Function (const bool bPCPlatform = !)",
    "insertText": "IsConsolePlatform(Platform)"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (const bool bCorrectFrequency = ShaderType ->)",
    "insertText": "GetFrequency() == SF_Vertex || ShaderType->GetFrequency()"
  },
  {
    "label": "GetStaticParameterSet()",
    "kind": "Method",
    "detail": "Function (Resource ->)",
    "insertText": "GetStaticParameterSet(Platform, OutSet)"
  },
  {
    "label": "GetMaterialNoFallback()",
    "kind": "Method",
    "detail": "Function (} } const FMaterial*)",
    "insertText": "GetMaterialNoFallback(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetParameterValue(EMaterialParameterType Type, const FHashedMaterialParameterInfo& ParameterInfo, FMaterialParameterValue& OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "CompilePropertyAndSetMaterialProperty()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CompilePropertyAndSetMaterialProperty(EMaterialProperty Property, FMaterialCompiler* Compiler, EShaderFrequency OverrideShaderFrequency, bool bUsePreviousFrameTime)"
  },
  {
    "label": "SetMaterialProperty()",
    "kind": "Method",
    "detail": "Function (Compiler ->)",
    "insertText": "SetMaterialProperty(Property, OverrideShaderFrequency, bUsePreviousFrameTime)"
  },
  {
    "label": "CompilePropertyAndSetMaterialPropertyWithoutCast()",
    "kind": "Method",
    "detail": "Function (const int32 Ret =)",
    "insertText": "CompilePropertyAndSetMaterialPropertyWithoutCast(Property, Compiler)"
  },
  {
    "label": "CompilePropertyAndSetMaterialPropertyWithoutCast()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CompilePropertyAndSetMaterialPropertyWithoutCast(EMaterialProperty Property, FMaterialCompiler* Compiler)"
  },
  {
    "label": "ProxyCompiler()",
    "kind": "Method",
    "detail": "Function (FExportMaterialCompiler)",
    "insertText": "ProxyCompiler(Compiler)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const uint32 ForceCast_Exact_Replicate = MFCF_ForceCast | MFCF_ExactMatch | MFCF_ReplicateValue ;)",
    "insertText": "switch(PropertyToCompile)"
  },
  {
    "label": "CompileShadingModelEncoding()",
    "kind": "Method",
    "detail": "Function (} break ; case MP_ShadingModel : return)",
    "insertText": "CompileShadingModelEncoding(Compiler, MaterialInterface->CompileProperty(&ProxyCompiler, MP_ShadingModel))"
  },
  {
    "label": "CompileInputForCustomOutput()",
    "kind": "Method",
    "detail": "Function (int32 InputIndex = 0 ; return)",
    "insertText": "CompileInputForCustomOutput(&ProxyCompiler, CustomAttribute, InputIndex, ForceCast_Exact_Replicate)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (} break ; default : return Compiler ->)",
    "insertText": "Constant(1.0f)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (} return Compiler ->)",
    "insertText": "Constant(0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property == MP_WorldPositionOffset || Property == MP_Displacement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property >= MP_CustomizedUVs0 && Property <= MP_CustomizedUVs7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property == MP_ShadingModel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property == MP_SurfaceThickness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property == MP_FrontMaterial)"
  },
  {
    "label": "GetShaderMapUsage()",
    "kind": "Method",
    "detail": "Function (} } EMaterialShaderMapUsage::Type)",
    "insertText": "GetShaderMapUsage()"
  },
  {
    "label": "GetMaterialDomain()",
    "kind": "Method",
    "detail": "Function (} EMaterialDomain)",
    "insertText": "GetMaterialDomain()"
  },
  {
    "label": "IsTwoSided()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsTwoSided()"
  },
  {
    "label": "IsThinSurface()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsThinSurface()"
  },
  {
    "label": "IsDitheredLODTransition()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsDitheredLODTransition()"
  },
  {
    "label": "IsLightFunction()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsLightFunction()"
  },
  {
    "label": "IsDeferredDecal()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsDeferredDecal()"
  },
  {
    "label": "IsWireframe()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsWireframe()"
  },
  {
    "label": "IsMasked()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsMasked()"
  },
  {
    "label": "GetRootNodeOverridesDefaultRefraction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRootNodeOverridesDefaultRefraction()"
  },
  {
    "label": "IsPersistent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPersistent()"
  },
  {
    "label": "GetAllExpressionsForCustomInterpolators()",
    "kind": "Method",
    "detail": "Function (Material ->)",
    "insertText": "GetAllExpressionsForCustomInterpolators(OutExpressions)"
  },
  {
    "label": "CheckInValidStateForCompilation()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CheckInValidStateForCompilation(FMaterialCompiler* Compiler)"
  },
  {
    "label": "CompileInputForCustomOutput()",
    "kind": "Method",
    "detail": "Function (} private : int32)",
    "insertText": "CompileInputForCustomOutput(FMaterialCompiler* Compiler, const FMaterialCustomOutputAttributeDefintion* CustomAttribute, int32 InputIndex, uint32 ForceCastFlags)"
  },
  {
    "label": "GetCustomOutputExpression()",
    "kind": "Method",
    "detail": "Function (UMaterialExpressionCustomOutput* Expression =)",
    "insertText": "GetCustomOutputExpression(CustomAttribute->FunctionName)"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (FExpressionInput* ExpressionInput = Expression ? Expression ->)",
    "insertText": "GetInput(InputIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Result ;)",
    "insertText": "if(ExpressionInput)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (Result = ExpressionInput ->)",
    "insertText": "Compile(Compiler)"
  },
  {
    "label": "CompileDefaultValue()",
    "kind": "Method",
    "detail": "Function (} else { Result = CustomAttribute ->)",
    "insertText": "CompileDefaultValue(Compiler)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CustomOutputToCompile == TEXT(\"ClearCoatBottomNormal\"))"
  },
  {
    "label": "CompileNormalEncoding()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "CompileNormalEncoding(Compiler, CompileNormalTransform(Compiler, Result))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ForceCastFlags & MFCF_ForceCast)"
  },
  {
    "label": "ForceCast()",
    "kind": "Method",
    "detail": "Function (Result = Compiler ->)",
    "insertText": "ForceCast(Result, CustomAttribute->ValueType, ForceCastFlags)"
  },
  {
    "label": "GetCustomOutputExpression()",
    "kind": "Method",
    "detail": "Function (} return Result ; } UMaterialExpressionCustomOutput*)",
    "insertText": "GetCustomOutputExpression(const FString& FunctionName)"
  },
  {
    "label": "UMaterialExpressionCustomOutput()",
    "kind": "Method",
    "detail": "Function (UMaterialExpressionCustomOutput* CustomOutputExpression = Cast<)",
    "insertText": "UMaterialExpressionCustomOutput(Expression)"
  },
  {
    "label": "CompileNormalEncoding()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CompileNormalEncoding(FMaterialCompiler* Compiler, int32 NormalInput)"
  },
  {
    "label": "CompileRefractionEncoding()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CompileRefractionEncoding(FMaterialCompiler* Compiler, int32 RefractionInput)"
  },
  {
    "label": "CompileShadingModelEncoding()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CompileShadingModelEncoding(FMaterialCompiler* Compiler, int32 ShadingModelInput)"
  }
]