[
  {
    "label": "TIntPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIntPoint"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Parse . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / UnrealString . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / TypeHash . h \" # include \" Misc / LargeWorldCoordinatesSerializer . h \" namespace UE::Math { template<InIntType> struct TIntPoint { using IntType = InIntType ;)",
    "insertText": "static_assert(std::is_integral_v<IntType>, \"An integer type is required.\")"
  },
  {
    "label": "TIntPoint()",
    "kind": "Method",
    "detail": "Function (} ; const TIntPoint ZeroValue ; const TIntPoint NoneValue ;)",
    "insertText": "TIntPoint()"
  },
  {
    "label": "TIntPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntPoint(IntType InX, IntType InY) : X(InX) , Y(InY)"
  },
  {
    "label": "TIntPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntPoint(IntType InXY) : X(InXY) , Y(InXY)"
  },
  {
    "label": "TIntPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntPoint(EForceInit) : X(0) , Y(0)"
  },
  {
    "label": "TIntPoint()",
    "kind": "Method",
    "detail": "Function (} template<OtherIntType>)",
    "insertText": "TIntPoint(TIntPoint<OtherIntType> Other) : X(IntCastChecked<IntType>(Other.X)) , Y(IntCastChecked<IntType>(Other.Y))"
  },
  {
    "label": "TIntPoint()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "TIntPoint(TIntPoint&&)"
  },
  {
    "label": "TIntPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntPoint(const TIntPoint&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntPoint&)",
    "insertText": "operator(TIntPoint&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntPoint&)",
    "insertText": "operator(const TIntPoint&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS const IntType&)",
    "insertText": "operator()(int32 PointIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XY [ PointIndex ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const TIntPoint& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TIntPoint&)",
    "insertText": "operator(IntType Scale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (X* = Scale ; Y* = Scale ; return* this ; } TIntPoint&)",
    "insertText": "operator(IntType Divisor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} IntType&)",
    "insertText": "operator(IntType Index)"
  },
  {
    "label": "ComponentMin()",
    "kind": "Method",
    "detail": "Function (} TIntPoint)",
    "insertText": "ComponentMin(const TIntPoint& Other)"
  },
  {
    "label": "ComponentMax()",
    "kind": "Method",
    "detail": "Function (} TIntPoint)",
    "insertText": "ComponentMax(const TIntPoint& Other)"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "GetMax()"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "GetMin()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "Size()"
  },
  {
    "label": "LocalX64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "LocalX64(int64)"
  },
  {
    "label": "LocalY64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "LocalY64(int64)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "InitFromString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitFromString(const FString& InSourceString)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (X = Y = 0 ; const bool bSuccessful =)",
    "insertText": "Value(*InSourceString, TEXT(\"X=\"), X) && FParse::Value(*InSourceString, TEXT(\"Y=\"), Y)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (} TIntPoint)",
    "insertText": "DivideAndRoundUp(TIntPoint lhs, TIntPoint Divisor)"
  },
  {
    "label": "DivideAndRoundDown()",
    "kind": "Method",
    "detail": "Function (} TIntPoint)",
    "insertText": "DivideAndRoundDown(TIntPoint lhs, IntType Divisor)"
  },
  {
    "label": "DivideAndRoundDown()",
    "kind": "Method",
    "detail": "Function (} TIntPoint)",
    "insertText": "DivideAndRoundDown(TIntPoint lhs, TIntPoint Divisor)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "EnterRecord()",
    "kind": "Method",
    "detail": "Function (FStructuredArchive::FRecord Record = Slot .)",
    "insertText": "EnterRecord()"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (Record<<)",
    "insertText": "SA_VALUE(TEXT(\"X\"), Point.X) << SA_VALUE(TEXT(\"Y\"), Point.Y)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } bool)",
    "insertText": "SerializeFromMismatchedTag(FName StructTag, FArchive& Ar)"
  },
  {
    "label": "ZeroValue()",
    "kind": "Method",
    "detail": "Function (} ; template<IntType> const TIntPoint<IntType> TIntPoint<IntType)",
    "insertText": "ZeroValue(0, 0)"
  },
  {
    "label": "NoneValue()",
    "kind": "Method",
    "detail": "Function (template<IntType> const TIntPoint<IntType> TIntPoint<IntType)",
    "insertText": "NoneValue(static_cast<IntType>(INDEX_NONE), static_cast<IntType>(INDEX_NONE))"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (template<IntType> uint32)",
    "insertText": "GetTypeHash(const TIntPoint<IntType>& InPoint)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} template<> FString TIntPoint<int64)",
    "insertText": "ToString()"
  }
]