[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RtpPacketInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef API_RTP_PACKET_INFO_H_ # define API_RTP_PACKET_INFO_H_ # include<cstdint> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / rtp_headers . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT RtpPacketInfo { public :)",
    "insertText": "RtpPacketInfo()"
  },
  {
    "label": "RtpPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketInfo(uint32_t ssrc, std::vector<uint32_t> csrcs, uint32_t rtp_timestamp, Timestamp receive_time)"
  },
  {
    "label": "RtpPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketInfo(const RTPHeader& rtp_header, Timestamp receive_time)"
  },
  {
    "label": "RtpPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketInfo(const RtpPacketInfo& other)"
  },
  {
    "label": "RtpPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketInfo(RtpPacketInfo&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketInfo&)",
    "insertText": "operator(const RtpPacketInfo& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketInfo&)",
    "insertText": "operator(RtpPacketInfo&& other)"
  },
  {
    "label": "ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ssrc()"
  },
  {
    "label": "csrcs()",
    "kind": "Method",
    "detail": "Function (ssrc_ = value ; } const std::vector<uint32_t>&)",
    "insertText": "csrcs()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (csrcs_ =)",
    "insertText": "move(value)"
  },
  {
    "label": "rtp_timestamp()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "rtp_timestamp()"
  },
  {
    "label": "receive_time()",
    "kind": "Method",
    "detail": "Function (rtp_timestamp_ = value ; } Timestamp)",
    "insertText": "receive_time()"
  },
  {
    "label": "audio_level()",
    "kind": "Method",
    "detail": "Function (receive_time_ = value ; } absl::optional<uint8_t>)",
    "insertText": "audio_level()"
  },
  {
    "label": "absolute_capture_time()",
    "kind": "Method",
    "detail": "Function (audio_level_ = value ; return* this ; } const absl::optional<AbsoluteCaptureTime>&)",
    "insertText": "absolute_capture_time()"
  },
  {
    "label": "local_capture_clock_offset()",
    "kind": "Method",
    "detail": "Function (absolute_capture_time_ = value ; return* this ; } const absl::optional<TimeDelta>&)",
    "insertText": "local_capture_clock_offset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (local_capture_clock_offset_ = value ; return* this ; } private : uint32_t ssrc_ ; std::vector<uint32_t> csrcs_ ; uint32_t rtp_timestamp_ ; Timestamp receive_time_ ; absl::optional<uint8_t> audio_level_ ; absl::optional<AbsoluteCaptureTime> absolute_capture_time_ ; absl::optional<TimeDelta> local_capture_clock_offset_ ; } ; bool)",
    "insertText": "operator(const RtpPacketInfo& lhs, const RtpPacketInfo& rhs)"
  }
]