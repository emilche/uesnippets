[
  {
    "label": "StrBuf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrBuf"
  },
  {
    "label": "StrNum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrNum"
  },
  {
    "label": "StrPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrPtr"
  },
  {
    "label": "StrRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrRef"
  },
  {
    "label": "CaseUse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CaseUse"
  },
  {
    "label": "StrFixed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrFixed"
  },
  {
    "label": "StrHuman",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrHuman"
  },
  {
    "label": "Text()",
    "kind": "Method",
    "detail": "Function (class StrBuf ; class StrNum ; # define SIZE_LINESTR 2 5 6 # define SIZE_SMALLSTR 1 0 2 4 # define SIZE_MEDSTR 4 0 9 6 class StrPtr { public : char*)",
    "insertText": "Text()"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (} p4size_t)",
    "insertText": "Length()"
  },
  {
    "label": "UEnd()",
    "kind": "Method",
    "detail": "Function (} unsigned char*)",
    "insertText": "UEnd()"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Atoi()"
  },
  {
    "label": "IsNumeric()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumeric()"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartsWith(const char *s, int l)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EndsWith(const char *s, int l)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (P4INT64)",
    "insertText": "Atoi64()"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Atoi64(const char *p, P4INT64 *result)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Atoi64(P4INT64 *result)"
  },
  {
    "label": "SetLength()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLength()"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "length(p4size_t)strlen( buffer)"
  },
  {
    "label": "SetLength()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLength(p4size_t len)"
  },
  {
    "label": "SetEnd()",
    "kind": "Method",
    "detail": "Function (length = len ; } void)",
    "insertText": "SetEnd(char *p)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "length(p4size_t)(p - buffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} char)",
    "insertText": "operator(p4size_t x)"
  },
  {
    "label": "CCompare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "CCompare(const StrPtr &s)"
  },
  {
    "label": "SCompare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SCompare(const StrPtr &s)"
  },
  {
    "label": "NCompare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NCompare(const StrPtr &s)"
  },
  {
    "label": "CCompare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "CCompare(const char *a, const char *b)"
  },
  {
    "label": "SCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SCompare(const char *a, const char *b)"
  },
  {
    "label": "NCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NCompare(const char *a, const char *b)"
  },
  {
    "label": "SCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SCompare(unsigned char a, unsigned char b)"
  },
  {
    "label": "SEqual()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SEqual(unsigned char a, unsigned char b)"
  },
  {
    "label": "SEqualF()",
    "kind": "Method",
    "detail": "Function (default : return 0 ; case 0 : return 1 ; case ' A ' ^ ' a ' : return)",
    "insertText": "SEqualF(a, b)"
  },
  {
    "label": "SCompareN()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "SCompareN(const StrPtr &s)"
  },
  {
    "label": "XCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "XCompare(const StrPtr &s)"
  },
  {
    "label": "XCompare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "XCompare(const char *a, const char *b)"
  },
  {
    "label": "XCompareN()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "XCompareN(const StrPtr &s)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "Contains(const StrPtr &s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const char *buf)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const StrPtr &s)"
  },
  {
    "label": "StrCpy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StrCpy(char *b)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(b, buffer, length + 1)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StrCat(char *b)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(b + strlen( b ), buffer, length + 1)"
  },
  {
    "label": "CheckSame()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckSame(const StrPtr *a)"
  },
  {
    "label": "CheckOverlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckOverlap(const StrPtr *a)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Atoi(const char *b)"
  },
  {
    "label": "Itoa()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "Itoa(int v, char *e)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} P4INT64)",
    "insertText": "Atoi64(const char *buffer)"
  },
  {
    "label": "Itoa64()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "Itoa64(P4INT64 v, char *endbuf)"
  },
  {
    "label": "Itox()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "Itox(unsigned int v, char *endbuf)"
  },
  {
    "label": "CaseFolding()",
    "kind": "Method",
    "detail": "Function (class StrBuf ; class StrRef ; protected : char* buffer ; p4size_t length ; public : bool)",
    "insertText": "CaseFolding()"
  },
  {
    "label": "CaseFoldingAlreadySet()",
    "kind": "Method",
    "detail": "Function (foldingSet = true ; } bool)",
    "insertText": "CaseFoldingAlreadySet()"
  },
  {
    "label": "SCompareF()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SCompareF(unsigned char a, unsigned char b)"
  },
  {
    "label": "NCompareLeft()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NCompareLeft(const unsigned char *a, const unsigned char *b)"
  },
  {
    "label": "NCompareRight()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NCompareRight(const unsigned char *a, const unsigned char *b)"
  },
  {
    "label": "StrRef()",
    "kind": "Method",
    "detail": "Function (} ; class StrRef : public StrPtr { public :)",
    "insertText": "StrRef()"
  },
  {
    "label": "StrRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrRef(const StrRef &s)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(&s)"
  },
  {
    "label": "StrRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrRef(const StrPtr &s)"
  },
  {
    "label": "StrRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrRef(const char *buf)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set((char *)buf)"
  },
  {
    "label": "StrRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrRef(const char *buf, p4size_t len)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set((char *)buf, len)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (} const StrPtr&)",
    "insertText": "Null()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (buffer + = l ; length - = l ; } void)",
    "insertText": "Set(char *buf)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(buf, (p4size_t)strlen( buf ))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(char *buf, p4size_t len)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (buffer = buf ; length = len ; } void)",
    "insertText": "Set(const StrPtr *s)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(s->buffer, s->length)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const StrPtr &s)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(s.buffer, s.length)"
  },
  {
    "label": "StrBuf()",
    "kind": "Method",
    "detail": "Function (} private : StrRef null ; } ; class StrBuf : public StrPtr { public :)",
    "insertText": "StrBuf()"
  },
  {
    "label": "StringInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringInit()"
  },
  {
    "label": "StrBuf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrBuf(const StrBuf &s)"
  },
  {
    "label": "StrBuf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrBuf(const StrRef &s)"
  },
  {
    "label": "StrBuf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrBuf(const StrPtr &s)"
  },
  {
    "label": "StrBuf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrBuf(const char *buf)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(buf)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const StrBuf&)",
    "insertText": "operator(const StrBuf &s)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (length = 0 ; } void)",
    "insertText": "Reset(void)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (delete [ ] buffer ; length = size = 0 ; buffer = nullStrBuf ; } } void)",
    "insertText": "Reset(const char *buf)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAppend(buf)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const StrPtr *s)"
  },
  {
    "label": "UAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAppend(s)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const StrPtr &s)"
  },
  {
    "label": "UAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAppend(&s)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const char *buf)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(buf)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Set(const char *buf, p4size_t len)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(buf, len)"
  },
  {
    "label": "Extend()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Extend(const char *buf, p4size_t len)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(Alloc( len ), buf, len)"
  },
  {
    "label": "Extend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Extend(char c)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "Alloc(1)"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Terminate()"
  },
  {
    "label": "Extend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Extend(0)"
  },
  {
    "label": "TruncateBlanks()",
    "kind": "Method",
    "detail": "Function (- - length ; } void)",
    "insertText": "TruncateBlanks()"
  },
  {
    "label": "TrimBlanks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimBlanks()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const char *buf)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const StrPtr *s)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const char *buf, p4size_t len)"
  },
  {
    "label": "UAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAppend(const char *buf)"
  },
  {
    "label": "UAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAppend(const StrPtr *s)"
  },
  {
    "label": "UAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAppend(const char *buf, p4size_t len)"
  },
  {
    "label": "BlockAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockAppend(const char *buf)"
  },
  {
    "label": "BlockAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockAppend(const StrPtr *s)"
  },
  {
    "label": "BlockAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockAppend(const char *buf, p4size_t len)"
  },
  {
    "label": "UBlockAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBlockAppend(const char *buf)"
  },
  {
    "label": "UBlockAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBlockAppend(const StrPtr *s)"
  },
  {
    "label": "UBlockAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBlockAppend(const char *buf, p4size_t len)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "Alloc(p4size_t len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p4size_t oldlen = length ;)",
    "insertText": "if(( length += len ) > size ) Grow( oldlen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p4size_t oldlen = length ;)",
    "insertText": "if(( length += len ) > size ) Reserve( oldlen)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(const char *buf)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(buf, Length())"
  },
  {
    "label": "BufSize()",
    "kind": "Method",
    "detail": "Function (} p4size_t)",
    "insertText": "BufSize()"
  },
  {
    "label": "UnCompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnCompress(StrPtr *s)"
  },
  {
    "label": "EncodeTail()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EncodeTail(StrPtr &s, const char *replaceBytes)"
  },
  {
    "label": "DecodeTail()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeTail(StrPtr &s, const char *replaceBytes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StrBuf&)",
    "insertText": "operator(const char *s)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(s)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(&s)"
  },
  {
    "label": "UAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAppend((const StrPtr *)&s)"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (private : p4size_t size ; void)",
    "insertText": "Grow(p4size_t len)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(p4size_t oldlen)"
  },
  {
    "label": "StrFixed()",
    "kind": "Method",
    "detail": "Function (char nullStrBuf [ 8 ] ; } ; class StrFixed : public StrPtr { public :)",
    "insertText": "StrFixed(p4size_t l)"
  },
  {
    "label": "StrFixed()",
    "kind": "Method",
    "detail": "Function (this -> length = l ; this -> buffer = new char [ l ] ; } ~)",
    "insertText": "StrFixed()"
  },
  {
    "label": "SetBufferSize()",
    "kind": "Method",
    "detail": "Function (delete [ ] buffer ; } void)",
    "insertText": "SetBufferSize(p4size_t l)"
  },
  {
    "label": "StrNum()",
    "kind": "Method",
    "detail": "Function (} ; class StrNum : public StrPtr { public :)",
    "insertText": "StrNum()"
  },
  {
    "label": "StrNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrNum(int v)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(v)"
  },
  {
    "label": "StrNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrNum(int ok, int v)"
  },
  {
    "label": "Itoa()",
    "kind": "Method",
    "detail": "Function (buffer =)",
    "insertText": "Itoa(v, buf + sizeof( buf ))"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "length(p4size_t)(buf + sizeof( buf ) - buffer - 1)"
  },
  {
    "label": "SetHex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHex(int v)"
  },
  {
    "label": "Itox()",
    "kind": "Method",
    "detail": "Function (buffer =)",
    "insertText": "Itox(v, buf + sizeof( buf ))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int v, int digits)"
  },
  {
    "label": "StrNum()",
    "kind": "Method",
    "detail": "Function (} # ifdef HAVE_INT64)",
    "insertText": "StrNum(long v)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set((P4INT64)v)"
  },
  {
    "label": "StrNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrNum(P4INT64 v)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(P4INT64 v)"
  },
  {
    "label": "Itoa64()",
    "kind": "Method",
    "detail": "Function (buffer =)",
    "insertText": "Itoa64(v, buf + sizeof( buf ))"
  },
  {
    "label": "StrHuman()",
    "kind": "Method",
    "detail": "Function (} # endif private : char buf [ 2 4 ] ; } ; class StrHuman : public StrPtr { public :)",
    "insertText": "StrHuman()"
  },
  {
    "label": "StrHuman()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrHuman(long v, int f = 1024)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert((P4INT64)v, f)"
  },
  {
    "label": "StrHuman()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StrHuman(P4INT64 v, int f = 1024)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(v, f)"
  },
  {
    "label": "Itoa64()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "Itoa64(P4INT64 v, char *endbuf, int f)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Convert(P4INT64 v, int f)"
  },
  {
    "label": "Itoa64()",
    "kind": "Method",
    "detail": "Function (buffer =)",
    "insertText": "Itoa64(v, buf + sizeof( buf ), f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} char buf [ 2 4 ] ; } ; StrBuf&)",
    "insertText": "operator(int v)"
  }
]