[
  {
    "label": "Int16Frame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Int16Frame"
  },
  {
    "label": "SimulationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SimulationSettings"
  },
  {
    "label": "AudioProcessingSimulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioProcessingSimulator"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_TEST_AUDIO_PROCESSING_SIMULATOR_H_ # define MODULES_AUDIO_PROCESSING_TEST_AUDIO_PROCESSING_SIMULATOR_H_ # include<algorithm> # include<fstream> # include<limits> # include<memory> # include<string> # include \" absl / types / optional . h \" # include \" common_audio / channel_buffer . h \" # include \" common_audio / include / audio_util . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" modules / audio_processing / test / api_call_statistics . h \" # include \" modules / audio_processing / test / fake_recording_device . h \" # include \" modules / audio_processing / test / test_utils . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" rtc_base / time_utils . h \" namespace webrtc { namespace test { const int kChunksPerSecond = 1 0 0 0 / AudioProcessing::kChunkSizeMs ; struct Int16Frame { void)",
    "insertText": "SetFormat(int sample_rate_hz, int num_channels)"
  },
  {
    "label": "CheckedDivExact()",
    "kind": "Method",
    "detail": "Function (this -> sample_rate_hz = sample_rate_hz ; samples_per_channel =)",
    "insertText": "CheckedDivExact(sample_rate_hz, kChunksPerSecond)"
  },
  {
    "label": "StreamConfig()",
    "kind": "Method",
    "detail": "Function (this -> num_channels = num_channels ; config =)",
    "insertText": "StreamConfig(sample_rate_hz, num_channels)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "resize(num_channels * samples_per_channel)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTo(ChannelBuffer<float>* dest)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(dest)"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(num_channels, dest->num_channels())"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(samples_per_channel, dest->num_frames())"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (std::vector<float>)",
    "insertText": "tmp(samples_per_channel * num_channels)"
  },
  {
    "label": "S16ToFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "S16ToFloat(data.data(), tmp.size(), tmp.data())"
  },
  {
    "label": "Deinterleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinterleave(tmp.data(), samples_per_channel, num_channels, dest->channels())"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyFrom(const ChannelBuffer<float>& src)"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(src.num_channels(), num_channels)"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(src.num_frames(), samples_per_channel)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (int16_t* dest_data = data .)",
    "insertText": "data()"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (dest_data [ sample* num_channels + ch ] = src .)",
    "insertText": "channels()"
  },
  {
    "label": "SimulationSettings()",
    "kind": "Method",
    "detail": "Function (} } } int sample_rate_hz ; int samples_per_channel ; int num_channels ; StreamConfig config ; std::vector<int16_t> data ; } ; struct SimulationSettings {)",
    "insertText": "SimulationSettings()"
  },
  {
    "label": "SimulationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulationSettings(const SimulationSettings&)"
  },
  {
    "label": "AudioProcessingSimulator()",
    "kind": "Method",
    "detail": "Function (absl::optional<int> stream_delay ; absl::optional<bool> use_stream_delay ; absl::optional<int> output_sample_rate_hz ; absl::optional<int> output_num_channels ; absl::optional<int> reverse_output_sample_rate_hz ; absl::optional<int> reverse_output_num_channels ; absl::optional<std::string> output_filename ; absl::optional<std::string> reverse_output_filename ; absl::optional<std::string> input_filename ; absl::optional<std::string> reverse_input_filename ; absl::optional<std::string> artificial_nearend_filename ; absl::optional<std::string> linear_aec_output_filename ; absl::optional<bool> use_aec ; absl::optional<bool> use_aecm ; absl::optional<bool> use_ed ; absl::optional<std::string> ed_graph_output_filename ; absl::optional<bool> use_agc ; absl::optional<bool> use_agc2 ; absl::optional<bool> use_pre_amplifier ; absl::optional<bool> use_capture_level_adjustment ; absl::optional<bool> use_analog_mic_gain_emulation ; absl::optional<bool> use_hpf ; absl::optional<bool> use_ns ; absl::optional<int> use_ts ; absl::optional<bool> use_analog_agc ; absl::optional<bool> use_all ; absl::optional<bool> analog_agc_use_digital_adaptive_controller ; absl::optional<int> agc_mode ; absl::optional<int> agc_target_level ; absl::optional<bool> use_agc_limiter ; absl::optional<int> agc_compression_gain ; absl::optional<bool> agc2_use_adaptive_gain ; absl::optional<float> agc2_fixed_gain_db ; absl::optional<float> pre_amplifier_gain_factor ; absl::optional<float> pre_gain_factor ; absl::optional<float> post_gain_factor ; absl::optional<float> analog_mic_gain_emulation_initial_level ; absl::optional<int> ns_level ; absl::optional<bool> ns_analysis_on_linear_aec_output ; absl::optional<bool> override_key_pressed ; absl::optional<int> maximum_internal_processing_rate ; int initial_mic_level ; bool simulate_mic_gain = false ; absl::optional<bool> multi_channel_render ; absl::optional<bool> multi_channel_capture ; absl::optional<int> simulated_mic_kind ; absl::optional<int> frame_for_sending_capture_output_used_false ; absl::optional<int> frame_for_sending_capture_output_used_true ; bool report_performance = false ; absl::optional<std::string> performance_report_output_filename ; bool report_bitexactness = false ; bool use_verbose_logging = false ; bool use_quiet_output = false ; bool discard_all_settings_in_aecdump = true ; absl::optional<std::string> aec_dump_input_filename ; absl::optional<std::string> aec_dump_output_filename ; bool fixed_interface = false ; bool store_intermediate_output = false ; bool print_aec_parameter_values = false ; bool dump_internal_data = false ; WavFile::SampleFormat wav_output_format = WavFile::SampleFormat::kInt16 ; absl::optional<std::string> dump_internal_data_output_dir ; absl::optional<int> dump_set_to_use ; absl::optional<std::string> call_order_input_filename ; absl::optional<std::string> call_order_output_filename ; absl::optional<std::string> aec_settings_filename ; absl::optional<absl::string_view> aec_dump_input_string ; std::vector<float>* processed_capture_samples = nullptr ; bool analysis_only = false ; absl::optional<int> dump_start_frame ; absl::optional<int> dump_end_frame ; absl::optional<int> init_to_process ; } ; class AudioProcessingSimulator { public :)",
    "insertText": "AudioProcessingSimulator(const SimulationSettings& settings, rtc::scoped_refptr<AudioProcessing> audio_processing, std::unique_ptr<AudioProcessingBuilder> ap_builder)"
  },
  {
    "label": "AudioProcessingSimulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioProcessingSimulator()"
  },
  {
    "label": "AudioProcessingSimulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioProcessingSimulator(const AudioProcessingSimulator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioProcessingSimulator&)",
    "insertText": "operator(const AudioProcessingSimulator&)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process()"
  },
  {
    "label": "GetApiCallStatistics()",
    "kind": "Method",
    "detail": "Function (const ApiCallStatistics&)",
    "insertText": "GetApiCallStatistics()"
  },
  {
    "label": "OutputWasBitexact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OutputWasBitexact()"
  },
  {
    "label": "ProcessReverseStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReverseStream(bool fixed_interface)"
  },
  {
    "label": "ConfigureAudioProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureAudioProcessor()"
  },
  {
    "label": "DetachAecDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachAecDump()"
  },
  {
    "label": "SetupBuffersConfigsOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupBuffersConfigsOutputs(int input_sample_rate_hz, int output_sample_rate_hz, int reverse_input_sample_rate_hz, int reverse_output_sample_rate_hz, int input_num_channels, int output_num_channels, int reverse_input_num_channels, int reverse_output_num_channels)"
  },
  {
    "label": "SelectivelyToggleDataDumping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectivelyToggleDataDumping(int init_index, int capture_frames_since_init)"
  },
  {
    "label": "SetupOutput()",
    "kind": "Method",
    "detail": "Function (const SimulationSettings settings_ ; rtc::scoped_refptr<AudioProcessing> ap_ ; std::unique_ptr<ChannelBuffer<float>> in_buf_ ; std::unique_ptr<ChannelBuffer<float>> out_buf_ ; std::unique_ptr<ChannelBuffer<float>> reverse_in_buf_ ; std::unique_ptr<ChannelBuffer<float>> reverse_out_buf_ ; std::vector<std::array<float,1 6 0>> linear_aec_output_buf_ ; StreamConfig in_config_ ; StreamConfig out_config_ ; StreamConfig reverse_in_config_ ; StreamConfig reverse_out_config_ ; std::unique_ptr<ChannelBufferWavReader> buffer_reader_ ; std::unique_ptr<ChannelBufferWavReader> reverse_buffer_reader_ ; Int16Frame rev_frame_ ; Int16Frame fwd_frame_ ; bool bitexact_output_ = true ; absl::optional<int> aec_dump_applied_input_level_ = 0 ; protected : size_t output_reset_counter_ = 0 ; private : void)",
    "insertText": "SetupOutput()"
  }
]