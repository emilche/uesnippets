[
  {
    "label": "FChaosRefCountedObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosRefCountedObject"
  },
  {
    "label": "ERCM_RefCountMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERCM_RefCountMode"
  },
  {
    "label": "FChaosRefCountedObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<atomic> # include \" AutoRTFM / AutoRTFM . h \" namespace Chaos { class FChaosRefCountedObject { public :)",
    "insertText": "FChaosRefCountedObject()"
  },
  {
    "label": "UE_AUTORTFM_ONCOMMIT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_ONCOMMIT(this)"
  },
  {
    "label": "FChaosRefCountedObject()",
    "kind": "Method",
    "detail": "Function (} ; } })",
    "insertText": "FChaosRefCountedObject(const FChaosRefCountedObject& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChaosRefCountedObject&)",
    "insertText": "operator(const FChaosRefCountedObject& Rhs)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "bIsFirstReference()",
    "kind": "Method",
    "detail": "Function (bool bIsFirstReference ; UE_AUTORTFM_OPEN {)",
    "insertText": "bIsFirstReference(++NumRefs == 1)"
  },
  {
    "label": "UE_AUTORTFM_ONABORT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UE_AUTORTFM_ONABORT(=, this)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (- - NumRefs ; } else {)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (delete this ; } } ; return 0 ; } uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Ret ; UE_AUTORTFM_OPEN { Ret =)",
    "insertText": "uint32(NumRefs.load())"
  },
  {
    "label": "MakePersistent()",
    "kind": "Method",
    "detail": "Function (} ; return Ret ; } void)",
    "insertText": "MakePersistent()"
  }
]