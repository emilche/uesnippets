[
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_TRACEBACK_H # define Py_INTERNAL_TRACEBACK_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif)",
    "insertText": "PyAPI_FUNC(void) _Py_DumpTraceback( int fd, PyThreadState *tstate)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(const char*) _Py_DumpTracebackThreads( int fd, PyInterpreterState *interp, PyThreadState *current_tstate)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_DumpASCII(int fd, PyObject *text)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_DumpDecimal( int fd, size_t value)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_DumpHexadecimal( int fd, uintptr_t value, Py_ssize_t width)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) _PyTraceBack_FromFrame( PyObject *tb_next, PyFrameObject *frame)"
  },
  {
    "label": "Traceback()",
    "kind": "Method",
    "detail": "Function (# define EXCEPTION_TB_HEADER \")",
    "insertText": "Traceback(most recent call last):\\n\" #define EXCEPTION_GROUP_TB_HEADER \"Exception Group Traceback (most recent call last):\\n\" PyAPI_FUNC(int) _PyTraceBack_Print_Indented( PyObject *tb, int indent, const char* margin, const char *header_margin, const char *header, PyObject *f)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_WriteIndentedMargin(int, const char*, PyObject *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_WriteIndent(int, PyObject *)"
  }
]