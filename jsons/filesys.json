[
  {
    "label": "FileSysType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileSysType"
  },
  {
    "label": "FileStatFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileStatFlags"
  },
  {
    "label": "FileSysAttr",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileSysAttr"
  },
  {
    "label": "FileOpenMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileOpenMode"
  },
  {
    "label": "FilePerm",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FilePerm"
  },
  {
    "label": "LFNModeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LFNModeFlags"
  },
  {
    "label": "FileDigestType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileDigestType"
  },
  {
    "label": "StrArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrArray"
  },
  {
    "label": "CharSetCvt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharSetCvt"
  },
  {
    "label": "MD5",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MD5"
  },
  {
    "label": "StrBuf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrBuf"
  },
  {
    "label": "DateTimeHighPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateTimeHighPrecision"
  },
  {
    "label": "DiskSpaceInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiskSpaceInfo"
  },
  {
    "label": "FileSys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileSys"
  },
  {
    "label": "default_delete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "default_delete"
  },
  {
    "label": "DOUNICODE()",
    "kind": "Method",
    "detail": "Function (# ifdef OS_NT # define)",
    "insertText": "DOUNICODE(CharSetApi::isUnicode((CharSetApi::CharSet)GetCharSetPriv()))"
  },
  {
    "label": "DiskSpaceInfo()",
    "kind": "Method",
    "detail": "Function (FST_TEXT = 0 x0001,FST_BINARY = 0 x0002,FST_DIRECTORY = 0 x0005,FST_SYMLINK = 0 x0006,FST_RESOURCE = 0 x0007,FST_SPECIAL = 0 x0008,FST_MISSING = 0 x0009,FST_CANTTELL = 0 x000A,FST_EMPTY = 0 x000B,FST_UNICODE = 0 x000C,FST_UTF16 = 0 x000E,FST_UTF8 = 0 x000F,FST_MASK = 0 x000F,FST_C_ASIS = 0 x0400,FST_C_GZIP = 0 x0800,FST_C_GUNZIP = 0 x0c00,FST_C_MASK = 0 x0c00,FST_M_APPEND = 0 x0010,FST_M_EXCL = 0 x0020,FST_M_SYNC = 0 x0040,FST_M_EXEC = 0 x0100,FST_M_APPLE = 0 x0200,FST_M_COMP = 0 x0400,FST_M_MASK = 0 x0ff0,FST_L_LOCAL = 0 x0000,FST_L_LF = 0 x1000,FST_L_CR = 0 x2000,FST_L_CRLF = 0 x3000,FST_L_LFCRLF = 0 x4000,FST_L_MASK = 0 xf000,FST_ATEXT = 0 x0011,FST_XTEXT = 0 x0101,FST_RTEXT = 0 x1001,FST_RXTEXT = 0 x1101,FST_CBINARY = 0 x0402,FST_XBINARY = 0 x0102,FST_APPLETEXT = 0 x0201,FST_APPLEFILE = 0 x0202,FST_XAPPLEFILE = 0 x0302,FST_XUNICODE = 0 x010C,FST_XUTF16 = 0 x010E,FST_XUTF8 = 0 x010F,FST_RCS = 0 x1041,FST_GZIP = 0 x0802,FST_GUNZIP = 0 x0c02,FST_GZIPTEXT = 0 x0801,} ; enum FileStatFlags { FSF_EXISTS = 0 x01,FSF_WRITEABLE = 0 x02,FSF_DIRECTORY = 0 x04,FSF_SYMLINK = 0 x08,FSF_SPECIAL = 0 x10,FSF_EXECUTABLE = 0 x20,FSF_EMPTY = 0 x40,FSF_HIDDEN = 0 x80 } ; enum FileSysAttr { FSA_HIDDEN = 0 x01 } ; enum FileOpenMode { FOM_READ,FOM_WRITE,FOM_RW,FOM_UWRITE } ; enum FilePerm { FPM_RO,FPM_RW,FPM_ROO,FPM_RXO,FPM_RWO,FPM_RWXO } ; enum LFNModeFlags { LFN_ENABLED = 0 x01,LFN_UNCPATH = 0 x02,LFN_UTF8 = 0 x04,LFN_MOVEBUSY = 0 x08,LFN_CSENSITIVE = 0 x10,} ; enum FileDigestType { FS_DIGEST_UNKNOWN = 0,FS_DIGEST_MD5,FS_DIGEST_GIT_TEXT_SHA1,FS_DIGEST_GIT_BINARY_SHA1,FS_DIGEST_SHA256,} ; class StrArray ; class CharSetCvt ; class MD5 ; class StrBuf ; class DateTimeHighPrecision ; class DiskSpaceInfo { public :)",
    "insertText": "DiskSpaceInfo()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (P4INT64 blockSize ; P4INT64 totalBytes ; P4INT64 usedBytes ; P4INT64 freeBytes ; int pctUsed ; StrBuf* fsType ; } ; # ifdef HAS_CPP11 # include<memory> class FileSys ; namespace std { template<> class default_delete<FileSys*> { public : void)",
    "insertText": "operator()( FileSys **ptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; } using FileSysUPtr = std::unique_ptr<FileSys*> ; # endif class FileSys { public : FileSys*)",
    "insertText": "Create(FileSysType type)"
  },
  {
    "label": "CreateTemp()",
    "kind": "Method",
    "detail": "Function (FileSys*)",
    "insertText": "CreateTemp(FileSysType type)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FileSys* f =)",
    "insertText": "Create(type)"
  },
  {
    "label": "SetDeleteOnClose()",
    "kind": "Method",
    "detail": "Function (f ->)",
    "insertText": "SetDeleteOnClose()"
  },
  {
    "label": "MakeGlobalTemp()",
    "kind": "Method",
    "detail": "Function (f ->)",
    "insertText": "MakeGlobalTemp()"
  },
  {
    "label": "CreateGlobalTempUPtr()",
    "kind": "Method",
    "detail": "Function (FileSysUPtr)",
    "insertText": "CreateGlobalTempUPtr(FileSysType type)"
  },
  {
    "label": "CreateLock()",
    "kind": "Method",
    "detail": "Function (# endif FileSys*)",
    "insertText": "CreateLock(FileSys *, Error *)"
  },
  {
    "label": "Perm()",
    "kind": "Method",
    "detail": "Function (FilePerm)",
    "insertText": "Perm(const char *p)"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(const char *p)"
  },
  {
    "label": "BufferSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BufferSize()"
  },
  {
    "label": "IsRelative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelative(const StrPtr &p)"
  },
  {
    "label": "IsUNC()",
    "kind": "Method",
    "detail": "Function (# ifdef OS_NT bool)",
    "insertText": "IsUNC(const StrPtr &p)"
  },
  {
    "label": "SetBufferSize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetBufferSize(size_t)"
  },
  {
    "label": "IsUnderPath()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "IsUnderPath(const StrPtr &path)"
  },
  {
    "label": "SymlinksSupported()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SymlinksSupported()"
  },
  {
    "label": "Perms()",
    "kind": "Method",
    "detail": "Function (# else # ifdef HAVE_SYMLINKS { return 1 ; } # else { return 0 ; } # endif # endif void)",
    "insertText": "Perms(FilePerm p)"
  },
  {
    "label": "ModTime()",
    "kind": "Method",
    "detail": "Function (perms = p ; } void)",
    "insertText": "ModTime(StrPtr *u)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (modTime = u ->)",
    "insertText": "Atoi()"
  },
  {
    "label": "ModTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModTime(time_t t)"
  },
  {
    "label": "modTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modTime(int)"
  },
  {
    "label": "GetModTime()",
    "kind": "Method",
    "detail": "Function (} time_t)",
    "insertText": "GetModTime()"
  },
  {
    "label": "GetSizeHint()",
    "kind": "Method",
    "detail": "Function (sizeHint = l ; } offL_t)",
    "insertText": "GetSizeHint()"
  },
  {
    "label": "PreserveCWD()",
    "kind": "Method",
    "detail": "Function (cacheHint = 1 ; } void)",
    "insertText": "PreserveCWD()"
  },
  {
    "label": "SetDigest()",
    "kind": "Method",
    "detail": "Function (preserveCWD = 1 ; } void)",
    "insertText": "SetDigest(MD5 *m)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (FileSysType)",
    "insertText": "GetType()"
  },
  {
    "label": "IsTextual()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "IsTextual()"
  },
  {
    "label": "IsUnicode()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "IsUnicode()"
  },
  {
    "label": "IsSymlink()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "IsSymlink()"
  },
  {
    "label": "FileSys()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FileSys()"
  },
  {
    "label": "SetLFN()",
    "kind": "Method",
    "detail": "Function (# ifdef OS_NT void)",
    "insertText": "SetLFN(const StrPtr &name)"
  },
  {
    "label": "GetLFN()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLFN()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const StrPtr &name, Error *e)"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "Path()"
  },
  {
    "label": "Translator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translator(CharSetCvt *)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open(FileOpenMode mode, Error *e)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(const char *buf, int len, Error *e)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Read(char *buf, int len, Error *e)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(Error *e)"
  },
  {
    "label": "Stat()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Stat()"
  },
  {
    "label": "LinkCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LinkCount()"
  },
  {
    "label": "StatModTime()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StatModTime()"
  },
  {
    "label": "StatModTimeHP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatModTimeHP(DateTimeHighPrecision *modTime)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Truncate(Error *e)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Truncate(offL_t offset, Error *e)"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink(Error *e = 0)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(FileSys *target, Error *e)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod(FilePerm perms, Error *e)"
  },
  {
    "label": "ChmodTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChmodTime(Error *e)"
  },
  {
    "label": "ChmodTimeHP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChmodTimeHP(const DateTimeHighPrecision & , Error *)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetAttribute(FileSysAttr, Error *)"
  },
  {
    "label": "Fsync()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Fsync(Error *)"
  },
  {
    "label": "HasOnlyPerm()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasOnlyPerm(FilePerm perms)"
  },
  {
    "label": "GetFd()",
    "kind": "Method",
    "detail": "Function (FD_PTR)",
    "insertText": "GetFd()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOwner()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (offL_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(offL_t offset, Error *)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (offL_t)",
    "insertText": "Tell()"
  },
  {
    "label": "DepotSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DepotSize(offL_t &len, Error *)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod(Error *e)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod(perms, e)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Chmod(const char *perms, Error *e)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod(Perm( perms ), e)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "Name()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const char *name)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(StrRef( name ))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const char *name, Error *e)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(StrRef( name ), e)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(const StrPtr &b, Error *e)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(b.Text(), b.Length(), e)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(const StrPtr *b, Error *e)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(b->Text(), b->Length(), e)"
  },
  {
    "label": "MakeLocalTemp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeLocalTemp(char *file)"
  },
  {
    "label": "TempName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TempName(char *buf)"
  },
  {
    "label": "IsDeleteOnClose()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IsDeleteOnClose()"
  },
  {
    "label": "ClearDeleteOnClose()",
    "kind": "Method",
    "detail": "Function (isTemp = 1 ; } void)",
    "insertText": "ClearDeleteOnClose()"
  },
  {
    "label": "RetryCreate()",
    "kind": "Method",
    "detail": "Function (isTemp = 0 ; } int)",
    "insertText": "RetryCreate()"
  },
  {
    "label": "MkDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MkDir(const StrPtr &p, Error *e)"
  },
  {
    "label": "MkDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MkDir(Error *e)"
  },
  {
    "label": "MkDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MkDir(path, e)"
  },
  {
    "label": "NeedMkDir()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedMkDir()"
  },
  {
    "label": "PurgeDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeDir(const char *p, Error *e)"
  },
  {
    "label": "RmDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RmDir(const StrPtr &p, Error *e)"
  },
  {
    "label": "RmDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RmDir(Error *e = 0)"
  },
  {
    "label": "RmDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RmDir(path, e)"
  },
  {
    "label": "CheckType()",
    "kind": "Method",
    "detail": "Function (} FileSysType)",
    "insertText": "CheckType(int scan = -1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OS_MACOSX ) && OS_VER < 1010 FileSysType CheckTypeMac()"
  },
  {
    "label": "ReadLine()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "ReadLine(StrBuf *buf, Error *e)"
  },
  {
    "label": "ReadWhole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadWhole(StrBuf *buf, Error *e)"
  },
  {
    "label": "ReadFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFile(StrBuf *buf, Error *e)"
  },
  {
    "label": "WriteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFile(const StrPtr *buf, Error *e)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(FileSys *other, Error *e)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(FileSys *targetFile, FilePerm perms, Error *e)"
  },
  {
    "label": "Digest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Digest(StrBuf *digest, Error *e)"
  },
  {
    "label": "Chmod2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod2(FilePerm perms, Error *e)"
  },
  {
    "label": "Chmod2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod2(const char *p, Error *e)"
  },
  {
    "label": "Chmod2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod2(Perm( p ), e)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDigest(FileDigestType digType, StrBuf *digest, Error *e)"
  },
  {
    "label": "SetCharSetPriv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCharSetPriv(int x = 0)"
  },
  {
    "label": "GetCharSetPriv()",
    "kind": "Method",
    "detail": "Function (charSet = x ; } int)",
    "insertText": "GetCharSetPriv()"
  },
  {
    "label": "GetContentCharSetPriv()",
    "kind": "Method",
    "detail": "Function (content_charSet = x ; } int)",
    "insertText": "GetContentCharSetPriv()"
  },
  {
    "label": "LowerCasePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowerCasePath()"
  }
]