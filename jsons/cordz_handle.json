[
  {
    "label": "CordzHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordzHandle"
  },
  {
    "label": "Queue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Queue"
  },
  {
    "label": "CordzSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordzSnapshot"
  },
  {
    "label": "CordzHandle()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORDZ_HANDLE_H_ # define ABSL_STRINGS_INTERNAL_CORDZ_HANDLE_H_ # include<atomic> # include<vector> # include \" absl / base / config . h \" # include \" absl / base / internal / raw_logging . h \" # include \" absl / base / internal / spinlock . h \" # include \" absl / synchronization / mutex . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class CordzHandle { public :)",
    "insertText": "CordzHandle() : CordzHandle(false)"
  },
  {
    "label": "is_snapshot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_snapshot()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(CordzHandle* handle)"
  },
  {
    "label": "DiagnosticsGetDeleteQueue()",
    "kind": "Method",
    "detail": "Function (std::vector<const CordzHandle*>)",
    "insertText": "DiagnosticsGetDeleteQueue()"
  },
  {
    "label": "DiagnosticsHandleIsSafeToInspect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DiagnosticsHandleIsSafeToInspect(const CordzHandle* handle)"
  },
  {
    "label": "DiagnosticsGetSafeToInspectDeletedHandles()",
    "kind": "Method",
    "detail": "Function (std::vector<const CordzHandle*>)",
    "insertText": "DiagnosticsGetSafeToInspectDeletedHandles()"
  },
  {
    "label": "CordzHandle()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CordzHandle(bool is_snapshot)"
  },
  {
    "label": "CordzHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CordzHandle()"
  },
  {
    "label": "Queue()",
    "kind": "Method",
    "detail": "Function (private : struct Queue {)",
    "insertText": "Queue(absl::ConstInitType) : mutex(absl::kConstInit, absl::base_internal::SCHEDULE_COOPERATIVE_AND_KERNEL)"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} absl::base_internal::SpinLock mutex ; std::atomic<CordzHandle*> dq_tail)",
    "insertText": "ABSL_GUARDED_BY(mutex)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (nullptr } ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ODRCheck()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "ODRCheck()"
  },
  {
    "label": "ABSL_RAW_CHECK()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG)",
    "insertText": "ABSL_RAW_CHECK(queue_ == &global_queue_, \"ODR violation in Cord\")"
  },
  {
    "label": "CordzSnapshot()",
    "kind": "Method",
    "detail": "Function (# endif } ABSL_CONST_INIT Queue global_queue_ ; Queue* const queue_ =& global_queue_ ; const bool is_snapshot_ ; CordzHandle* dq_prev_ = nullptr ; CordzHandle* dq_next_ = nullptr ; } ; class CordzSnapshot : public CordzHandle { public :)",
    "insertText": "CordzSnapshot() : CordzHandle(true)"
  }
]