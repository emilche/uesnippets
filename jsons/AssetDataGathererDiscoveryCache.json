[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCachedDirScanFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedDirScanFile"
  },
  {
    "label": "FCachedDirScanDir",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedDirScanDir"
  },
  {
    "label": "FCachedVolumeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedVolumeInfo"
  },
  {
    "label": "FAssetDataDiscoveryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataDiscoveryCache"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / MpscQueue . h \" # include \" Containers / SortedMap . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" HAL / PlatformFile . h \" # include \" Misc / DateTime . h \" class FArchive ; namespace UE::AssetDataGather::Private { enum class EFeatureEnabled : uint8 { Never,IfPlatformSupported,Always } ; enum class EFeatureEnabledReadWrite : uint32 { NeverRead = 0 x00,DefaultRead = 0 x01,AlwaysRead = 0 x02,ReadMask = 0 x0f,NeverWrite = 0 x00,DefaultWrite = 0 x10,AlwaysWrite = 0 x20,WriteMask = 0 xf0,Invalid = 0 xffffffff,NeverWriteNeverRead = NeverWrite | NeverRead,NeverWriteDefaultRead = NeverWrite | DefaultRead,NeverWriteAlwaysRead = NeverWrite | AlwaysRead,DefaultWriteNeverRead = DefaultWrite | NeverRead,DefaultWriteDefaultRead = DefaultWrite | DefaultRead,DefaultWriteAlwaysRead = DefaultWrite | AlwaysRead,AlwaysWriteNeverRead = AlwaysWrite | NeverRead,AlwaysWriteDefaultRead = AlwaysWrite | DefaultRead,AlwaysWriteAlwaysRead = AlwaysWrite | AlwaysRead,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EFeatureEnabledReadWrite)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(EFeatureEnabledReadWrite& OutValue, FStringView Text)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FCachedDirScanFile { FString RelPath ; FDateTime ModificationTime ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCachedDirScanFile& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FCachedDirScanDir { TArray<FString> SubDirRelPaths ; TArray<FCachedDirScanFile> Files ; FFileJournalFileHandle JournalHandle = FileJournalFileHandleInvalid ; bool bCacheValid = false ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCachedDirScanDir& Data)"
  },
  {
    "label": "ConditionalConstruct()",
    "kind": "Method",
    "detail": "Function (class FCachedVolumeInfo { public : void)",
    "insertText": "ConditionalConstruct(const FString& InVolumeName)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave()"
  },
  {
    "label": "InitializePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePlatformData()"
  },
  {
    "label": "FindOrAddDir()",
    "kind": "Method",
    "detail": "Function (FCachedDirScanDir&)",
    "insertText": "FindOrAddDir(FStringView Path)"
  },
  {
    "label": "RemoveDirs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDirs(TArray<FString>&& InPaths)"
  },
  {
    "label": "FindDir()",
    "kind": "Method",
    "detail": "Function (FCachedDirScanDir*)",
    "insertText": "FindDir(FStringView Path)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : TMap<FString,FCachedDirScanDir> Dirs ; FString VolumeName ; FFileJournalId JournalId = FileJournalIdInvalid ; FFileJournalEntryHandle NextJournalEntryToScan = FileJournalEntryHandleInvalid ; TArray<FString> DirsToRemove ; FString LastError ; FFileJournalId JournalIdOnDisk = FileJournalIdInvalid ; FFileJournalEntryHandle NextJournalEntryOnDisk = FileJournalEntryHandleInvalid ; bool bJournalAvailable = false ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCachedVolumeInfo& Data)"
  },
  {
    "label": "GetCacheFileName()",
    "kind": "Method",
    "detail": "Function (class FAssetDataDiscoveryCache { public : FString)",
    "insertText": "GetCacheFileName()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "LoadAndUpdateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAndUpdateCache()"
  },
  {
    "label": "SaveCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCache()"
  },
  {
    "label": "FindOrAddVolume()",
    "kind": "Method",
    "detail": "Function (FCachedVolumeInfo&)",
    "insertText": "FindOrAddVolume(FStringView PathOrVolumeName)"
  },
  {
    "label": "FindOrAddDir()",
    "kind": "Method",
    "detail": "Function (FCachedDirScanDir&)",
    "insertText": "FindOrAddDir(FStringView Path, FCachedVolumeInfo** OutVolume = nullptr)"
  },
  {
    "label": "RemoveDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDir(FStringView Path)"
  },
  {
    "label": "FindVolume()",
    "kind": "Method",
    "detail": "Function (FCachedVolumeInfo*)",
    "insertText": "FindVolume(FStringView PathOrVolumeName)"
  },
  {
    "label": "FindDir()",
    "kind": "Method",
    "detail": "Function (FCachedDirScanDir*)",
    "insertText": "FindDir(FStringView Path, FCachedVolumeInfo** OutVolume = nullptr)"
  },
  {
    "label": "QueueConsume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueConsume()"
  },
  {
    "label": "QueueAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAdd(FString DirName, FCachedDirScanDir DirData)"
  },
  {
    "label": "QueueAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAdd(FString DirName, FFileJournalFileHandle JournalHandle)"
  },
  {
    "label": "TryReadCacheFile()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryReadCacheFile()"
  },
  {
    "label": "SerializeReadCacheFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeReadCacheFile(FArchive& Ar)"
  },
  {
    "label": "SerializeWriteCacheFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeWriteCacheFile(FArchive& Ar)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (private : TSortedMap<FString,FCachedVolumeInfo> CachedVolumes ; TMpscQueue<TPair<FString,FCachedDirScanDir>> ScanQueueDirFullDatas ; TMpscQueue<TPair<FString,FFileJournalFileHandle>> ScanQueueDirHandles ; bool bInitialized = false ; EFeatureEnabled WriteEnabled = EFeatureEnabled::Never ; } ; const TCHAR* GEmptyVolumeName =)",
    "insertText": "TEXT(\"<EmptyVolume>\")"
  }
]