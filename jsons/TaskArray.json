[
  {
    "label": "TBackwards",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBackwards"
  },
  {
    "label": "TTaskArrayKeyValuePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTaskArrayKeyValuePair"
  },
  {
    "label": "TTaskArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTaskArray"
  },
  {
    "label": "TBackwards()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Templates / Function . h \" # include \" Utils . h \" namespace AutoRTFM { template<T> class TBackwards final { T& Obj ; public :)",
    "insertText": "TBackwards(T& Obj) : Obj(Obj)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "end()"
  },
  {
    "label": "TTaskArrayKeyValuePair()",
    "kind": "Method",
    "detail": "Function (} } ; template<InKeyType,InValType> struct TTaskArrayKeyValuePair { InKeyType Key ; InValType Val ;)",
    "insertText": "TTaskArrayKeyValuePair()"
  },
  {
    "label": "TTaskArrayKeyValuePair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TTaskArrayKeyValuePair(const InKeyType& Key, const InValType& Val) : Key(Key), Val(Val)"
  },
  {
    "label": "TTaskArrayKeyValuePair()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTaskArrayKeyValuePair(InKeyType&& Key, InValType&& Val) : Key(MoveTemp(Key)), Val(MoveTemp(Val))"
  },
  {
    "label": "TTaskArray()",
    "kind": "Method",
    "detail": "Function (} } ; template<InElementType> class TTaskArray { using SKey = const void* ; using SKeyValuePair = TTaskArrayKeyValuePair<SKey,InElementType> ; using FInternalArray = TArray<SKeyValuePair> ; public :)",
    "insertText": "TTaskArray()"
  },
  {
    "label": "TTaskArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TTaskArray(const TTaskArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TTaskArray&)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(InElementType&& Value)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Latest .)",
    "insertText": "Push(TTaskArrayKeyValuePair(SKey{}, MoveTemp(Value)))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const InElementType& Value)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Latest .)",
    "insertText": "Push(TTaskArrayKeyValuePair(SKey{}, Value))"
  },
  {
    "label": "AddKeyed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddKeyed(SKey Key, InElementType&& Value)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(Key != SKey{})"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Latest .)",
    "insertText": "Push(TTaskArrayKeyValuePair(Key, MoveTemp(Value)))"
  },
  {
    "label": "AddKeyed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddKeyed(SKey Key, const InElementType& Value)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Latest .)",
    "insertText": "Push(TTaskArrayKeyValuePair(Key, Value))"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteKey(SKey Key)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Key(FInternalArray& Array)"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (FInternalArray::SizeType LastIdx = Array .)",
    "insertText": "FindLastByPredicate([Key](const SKeyValuePair& Pair) { return Pair.Key == Key; })"
  },
  {
    "label": "EraseKeyFromArray()",
    "kind": "Method",
    "detail": "Function (} ; size_t NumErased =)",
    "insertText": "EraseKeyFromArray(Latest)"
  },
  {
    "label": "EraseKeyFromArray()",
    "kind": "Method",
    "detail": "Function (NumErased + =)",
    "insertText": "EraseKeyFromArray(StashedVectorBox)"
  },
  {
    "label": "AddAll()",
    "kind": "Method",
    "detail": "Function (} return NumErased> 0 ; } void)",
    "insertText": "AddAll(TTaskArray&& Other)"
  },
  {
    "label": "Canonicalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Canonicalize()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Stash .)",
    "insertText": "Push(MoveTemp(StashedVectorBox))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} Other . Stash .)",
    "insertText": "Empty()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Stash .)",
    "insertText": "Push(MoveTemp(Other.Latest))"
  },
  {
    "label": "ForEachForward()",
    "kind": "Method",
    "detail": "Function (Other . Latest = FInternalArray { } ; } } template<TFunc> bool)",
    "insertText": "ForEachForward(const TFunc& Func)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Num()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "size_t(Result)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Stash .)",
    "insertText": "Push(MoveTemp(Latest))"
  }
]