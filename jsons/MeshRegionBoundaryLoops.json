[
  {
    "label": "FMeshRegionBoundaryLoops",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshRegionBoundaryLoops"
  },
  {
    "label": "FMeshRegionBoundaryLoops()",
    "kind": "Method",
    "detail": "Function (GEOMETRYCORE_API)",
    "insertText": "FMeshRegionBoundaryLoops(const FDynamicMesh3* MeshIn, const TArray<int>& RegionTris, bool bAutoCompute = true)"
  },
  {
    "label": "SetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMesh(const FDynamicMesh3* MeshIn, const TArray<int>& RegionTris)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compute()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Num()"
  },
  {
    "label": "GetLoopOverlayMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLoopOverlayMap(const FEdgeLoop& LoopIn,\n\t\tconst TDynamicMeshOverlay<StorageType, ElementSize>& Overlay,\n\t\tVidOverlayMap<ElementType>& LoopVidsToOverlayElementsOut)"
  },
  {
    "label": "UpdateLoopOverlayMapValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLoopOverlayMapValidity(VidOverlayMap<ElementType>& LoopVidsToOverlayElements,\n\t\tconst TDynamicMeshOverlay<StorageType, ElementSize>& Overlay)"
  },
  {
    "label": "GetTriangleSetBoundaryLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTriangleSetBoundaryLoop(const FDynamicMesh3& Mesh, const TArray<int32>& Tris, FEdgeLoop& Loop)"
  },
  {
    "label": "GetOrientedEdgeVerts()",
    "kind": "Method",
    "detail": "Function (FIndex2i)",
    "insertText": "GetOrientedEdgeVerts(int eID, int tid_in)"
  },
  {
    "label": "GetVertexBoundaryEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVertexBoundaryEdges(int vID, int& e0, int& e1)"
  },
  {
    "label": "GetAllVertexBoundaryEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAllVertexBoundaryEdges(int vID, TArray<int>& e)"
  },
  {
    "label": "GetVertexNormal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetVertexNormal(int vid)"
  },
  {
    "label": "FindLeftTurnEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindLeftTurnEdge(int incoming_e, int bowtie_v, TArray<int>& bdry_edges, int bdry_edges_count, const FIndexFlagSet& used_edges)"
  },
  {
    "label": "TryExtractSubloops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryExtractSubloops(TArray<int>& loopV, const TArray<int>& loopE, const TArray<int>& bowties, TArray<FEdgeLoop>& SubLoopsOut)"
  }
]