[
  {
    "label": "FirewallManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FirewallManager"
  },
  {
    "label": "FirewallProtocol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FirewallProtocol"
  },
  {
    "label": "FirewallDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FirewallDirection"
  },
  {
    "label": "FirewallSocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FirewallSocketServer"
  },
  {
    "label": "Rule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rule"
  },
  {
    "label": "FirewallSocketServer()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_FIREWALL_SOCKET_SERVER_H_ # define RTC_BASE_FIREWALL_SOCKET_SERVER_H_ # include<vector> # include \" rtc_base / ip_address . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / socket_server . h \" # include \" rtc_base / synchronization / mutex . h \" namespace rtc { class FirewallManager ; enum FirewallProtocol { FP_UDP,FP_TCP,FP_ANY } ; enum FirewallDirection { FD_IN,FD_OUT,FD_ANY } ; class FirewallSocketServer : public SocketServer { public :)",
    "insertText": "FirewallSocketServer(SocketServer* server, FirewallManager* manager = nullptr, bool should_delete_server = false)"
  },
  {
    "label": "FirewallSocketServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FirewallSocketServer()"
  },
  {
    "label": "socketserver()",
    "kind": "Method",
    "detail": "Function (SocketServer*)",
    "insertText": "socketserver()"
  },
  {
    "label": "set_udp_sockets_enabled()",
    "kind": "Method",
    "detail": "Function (delete server_ ; server_ = nullptr ; should_delete_server_ = false ; } server_ = server ; } void)",
    "insertText": "set_udp_sockets_enabled(bool enabled)"
  },
  {
    "label": "set_tcp_sockets_enabled()",
    "kind": "Method",
    "detail": "Function (udp_sockets_enabled_ = enabled ; } void)",
    "insertText": "set_tcp_sockets_enabled(bool enabled)"
  },
  {
    "label": "tcp_listen_enabled()",
    "kind": "Method",
    "detail": "Function (tcp_sockets_enabled_ = enabled ; } bool)",
    "insertText": "tcp_listen_enabled()"
  },
  {
    "label": "AddRule()",
    "kind": "Method",
    "detail": "Function (tcp_listen_enabled_ = enabled ; } void)",
    "insertText": "AddRule(bool allow, FirewallProtocol p = FP_ANY, FirewallDirection d = FD_ANY, const SocketAddress& addr = SocketAddress())"
  },
  {
    "label": "AddRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRule(bool allow, FirewallProtocol p, const SocketAddress& src, const SocketAddress& dst)"
  },
  {
    "label": "ClearRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRules()"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Check(FirewallProtocol p, const SocketAddress& src, const SocketAddress& dst)"
  },
  {
    "label": "SetUnbindableIps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnbindableIps(const std::vector<rtc::IPAddress>& unbindable_ips)"
  },
  {
    "label": "IsBindableIp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindableIp(const rtc::IPAddress& ip)"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (Socket*)",
    "insertText": "CreateSocket(int family, int type)"
  },
  {
    "label": "SetMessageQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageQueue(Thread* queue)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(webrtc::TimeDelta max_wait_duration, bool process_io)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "WrapSocket()",
    "kind": "Method",
    "detail": "Function (Socket*)",
    "insertText": "WrapSocket(Socket* sock, int type)"
  },
  {
    "label": "FirewallManager()",
    "kind": "Method",
    "detail": "Function (private : SocketServer* server_ ; FirewallManager* manager_ ; webrtc::Mutex mutex_ ; struct Rule { bool allow ; FirewallProtocol p ; FirewallDirection d ; SocketAddress src ; SocketAddress dst ; } ; std::vector<Rule> rules_ ; std::vector<rtc::IPAddress> unbindable_ips_ ; bool should_delete_server_ ; bool udp_sockets_enabled_ ; bool tcp_sockets_enabled_ ; bool tcp_listen_enabled_ ; } ; class FirewallManager { public :)",
    "insertText": "FirewallManager()"
  },
  {
    "label": "AddServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddServer(FirewallSocketServer* server)"
  },
  {
    "label": "RemoveServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveServer(FirewallSocketServer* server)"
  }
]