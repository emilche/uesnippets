[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneSkeletalAnimRootMotionTrackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSkeletalAnimRootMotionTrackParams"
  },
  {
    "label": "UMovieSceneSkeletalAnimationTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSkeletalAnimationTrack"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneNameableTrack . h \" # include \" Sections / MovieSceneSkeletalAnimationSection . h \" # include \" MovieSceneSkeletalAnimationTrack . generated . h \" enum class ESwapRootBone : uint8 ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FMovieSceneSkeletalAnimRootMotionTrackParams()",
    "kind": "Method",
    "detail": "Function (FFrameTime StartFrame ; FFrameTime EndFrame ; bool bRootMotionsDirty ; bool bHaveRootMotion ; FTransform RootMotionStartOffset ;)",
    "insertText": "FMovieSceneSkeletalAnimRootMotionTrackParams() : bRootMotionsDirty(true),bHaveRootMotion(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA bool bCacheRootTransforms = false ; TArray<FTransform> RootTransforms ; # endif } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: MOVIESCENETRACKS_API virtual UMovieSceneSection* AddNewAnimationOnRow(FFrameNumber KeyTime, class UAnimSequenceBase* AnimSequence, int32 RowIndex)"
  },
  {
    "label": "AddNewAnimation()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "AddNewAnimation(FFrameNumber KeyTime, class UAnimSequenceBase* AnimSequence)"
  },
  {
    "label": "GetAnimSectionsAtTime()",
    "kind": "Method",
    "detail": "Function (} TArray<UMovieSceneSection*>)",
    "insertText": "GetAnimSectionsAtTime(FFrameNumber Time)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "RemoveAllAnimationData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RemoveAllAnimationData()"
  },
  {
    "label": "HasSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSection(const UMovieSceneSection& Section)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSection(UMovieSceneSection& Section)"
  },
  {
    "label": "RemoveSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSection(UMovieSceneSection& Section)"
  },
  {
    "label": "RemoveSectionAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSectionAt(int32 SectionIndex)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetAllSections()",
    "kind": "Method",
    "detail": "Function (const TArray<UMovieSceneSection*>&)",
    "insertText": "GetAllSections()"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneSection> SectionClass)"
  },
  {
    "label": "CreateNewSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "CreateNewSection()"
  },
  {
    "label": "PopulateEvaluationTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateEvaluationTree(TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutData)"
  },
  {
    "label": "SupportsMultipleRows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMultipleRows()"
  },
  {
    "label": "UpdateEasing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEasing()"
  },
  {
    "label": "GetDefaultDisplayName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FText)",
    "insertText": "GetDefaultDisplayName()"
  },
  {
    "label": "OnSectionMoved()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR EMovieSceneSectionMovedResult)",
    "insertText": "OnSectionMoved(UMovieSceneSection& Section, const FMovieSceneSectionMovedParams& Params)"
  },
  {
    "label": "SortSections()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "SortSections()"
  },
  {
    "label": "SetRootMotionsDirty()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetRootMotionsDirty()"
  },
  {
    "label": "SetUpRootMotions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpRootMotions(bool bForce)"
  },
  {
    "label": "GetRootMotion()",
    "kind": "Method",
    "detail": "Function (TOptional<FTransform>)",
    "insertText": "GetRootMotion(FFrameTime CurrentTime)"
  },
  {
    "label": "MatchSectionByBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchSectionByBoneTransform(bool bMatchWithPrevious, USkeletalMeshComponent* SkelMeshComp, UMovieSceneSkeletalAnimationSection* CurrentSection, FFrameTime CurrentFrame, FFrameRate FrameRate, const FName& BoneName, FTransform& SecondSectionRootDiff, FVector& TranslationDiff, FQuat& RotationDiff)"
  },
  {
    "label": "ToggleShowRootMotionTrail()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "ToggleShowRootMotionTrail()"
  },
  {
    "label": "AutoMatchSectionRoot()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "AutoMatchSectionRoot(UMovieSceneSkeletalAnimationSection* AnimSection)"
  }
]