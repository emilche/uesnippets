[
  {
    "label": "TopologyRefiner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyRefiner"
  },
  {
    "label": "RefinerSurfaceFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefinerSurfaceFactoryBase"
  },
  {
    "label": "CACHE_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CACHE_TYPE"
  },
  {
    "label": "RefinerSurfaceFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefinerSurfaceFactory"
  },
  {
    "label": "RefinerSurfaceFactoryBase()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_BFR_REFINER_SURFACE_FACTORY_H # define OPENSUBDIV3_BFR_REFINER_SURFACE_FACTORY_H # include \" . . / version . h \" # include \" . . / bfr / surfaceFactory . h \" # include \" . . / bfr / surfaceFactoryCache . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class TopologyRefiner ; } namespace Bfr { class RefinerSurfaceFactoryBase : public SurfaceFactory { public :)",
    "insertText": "RefinerSurfaceFactoryBase(Far::TopologyRefiner const & mesh, Options const & options)"
  },
  {
    "label": "RefinerSurfaceFactoryBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RefinerSurfaceFactoryBase()"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (Far::TopologyRefiner const&)",
    "insertText": "GetMesh()"
  },
  {
    "label": "getFaceSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFaceSize(Index faceIndex)"
  },
  {
    "label": "getFaceVertexIndices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFaceVertexIndices(Index faceIndex, Index vertexIndices[])"
  },
  {
    "label": "getFaceFVarValueIndices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFaceFVarValueIndices(Index faceIndex, FVarID fvarID, Index fvarValueIndices[])"
  },
  {
    "label": "populateFaceVertexDescriptor()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "populateFaceVertexDescriptor(Index faceIndex, int faceVertex, VertexDescriptor * vertexDescriptor)"
  },
  {
    "label": "getFaceVertexIncidentFaceVertexIndices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFaceVertexIncidentFaceVertexIndices(Index faceIndex, int faceVertex, Index vertexIndices[])"
  },
  {
    "label": "getFaceVertexIncidentFaceFVarValueIndices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFaceVertexIncidentFaceFVarValueIndices(Index faceIndex, int faceVertex, FVarID fvarID, Index fvarValueIndices[])"
  },
  {
    "label": "getFaceNeighborhoodVertexIndicesIfRegular()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getFaceNeighborhoodVertexIndicesIfRegular(Index faceIndex, Index vertexIndices[])"
  },
  {
    "label": "getFaceNeighborhoodFVarValueIndicesIfRegular()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getFaceNeighborhoodFVarValueIndicesIfRegular(Index faceIndex, FVarID fvarID, Index fvarValueIndices[])"
  },
  {
    "label": "getFaceVaryingChannel()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "getFaceVaryingChannel(FVarID fvarID)"
  },
  {
    "label": "getFaceVertexPointIndices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFaceVertexPointIndices(Index faceIndex, int faceVertex, Index indices[], int vtxOrFVarChannel)"
  },
  {
    "label": "getFacePatchPointIndices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFacePatchPointIndices(Index faceIndex, Index indices[], int vtxOrFVarChannel)"
  },
  {
    "label": "RefinerSurfaceFactory()",
    "kind": "Method",
    "detail": "Function (private : Far::TopologyRefiner const& _mesh ; int _numFaces ; int _numFVarChannels ; } ; template<class CACHE_TYPE = SurfaceFactoryCache> class RefinerSurfaceFactory : public RefinerSurfaceFactoryBase { public :)",
    "insertText": "RefinerSurfaceFactory(Far::TopologyRefiner const & mesh, Options const & options = Options()) : RefinerSurfaceFactoryBase(mesh, options), _localCache()"
  },
  {
    "label": "setInternalCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInternalCache(&_localCache)"
  },
  {
    "label": "RefinerSurfaceFactory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RefinerSurfaceFactory()"
  }
]