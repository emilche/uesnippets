[
  {
    "label": "ConcreteSymbolEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConcreteSymbolEnumerator"
  },
  {
    "label": "ConcreteSymbolEnumerator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_DEBUGINFO_PDB_CONCRETESYMBOLENUMERATOR_H # define LLVM_DEBUGINFO_PDB_CONCRETESYMBOLENUMERATOR_H # include \" IPDBEnumChildren . h \" # include \" llvm / Support / Casting . h \" # include<memory> namespace llvm { template<ChildType> class ConcreteSymbolEnumerator : public IPDBEnumChildren<ChildType> { public :)",
    "insertText": "ConcreteSymbolEnumerator(std::unique_ptr<IPDBEnumSymbols> SymbolEnumerator) : Enumerator(std::move(SymbolEnumerator))"
  },
  {
    "label": "ConcreteSymbolEnumerator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ConcreteSymbolEnumerator()"
  },
  {
    "label": "getChildCount()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getChildCount()"
  },
  {
    "label": "getChildAtIndex()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<ChildType>)",
    "insertText": "getChildAtIndex(uint32_t Index)"
  },
  {
    "label": "getChildAtIndex()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PDBSymbol> Child = Enumerator ->)",
    "insertText": "getChildAtIndex(Index)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<ChildType>)",
    "insertText": "getNext()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (} ConcreteSymbolEnumerator<ChildType>*)",
    "insertText": "clone()"
  },
  {
    "label": "WrappedClone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IPDBEnumSymbols>)",
    "insertText": "WrappedClone(Enumerator->clone())"
  },
  {
    "label": "make_concrete_child()",
    "kind": "Method",
    "detail": "Function (} private : std::unique_ptr<ChildType>)",
    "insertText": "make_concrete_child(std::unique_ptr<PDBSymbol> Child)"
  },
  {
    "label": "ChildType()",
    "kind": "Method",
    "detail": "Function (ChildType* ConcreteChild = dyn_cast_or_null<)",
    "insertText": "ChildType(Child.release())"
  }
]