[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" GeometryCollection / GeometryCollectionBoneNode . h \" # include \" GeometryCollection / GeometryCollectionSection . h \" # include \" GeometryCollection / ManagedArray . h \" # include \" Math / Color . h \" # include \" Math / IntVector . h \" # include \" Math / Quat . h \" # include \" Math / Transform . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Math / Box . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / BVHParticles . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / Convex . h \" # include \" Chaos / Matrix . h \" FArchive&)",
    "insertText": "operator(FArchive& Ar, TArray<FVector3f>*& ValueIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bool bExists = ValueIn .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<bExists ;)",
    "insertText": "if(bExists)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (ValueIn = MakeUnique<TArray<)",
    "insertText": "FVector3f()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Ar<<* ValueIn ; } return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, Chaos::FImplicitObject*& ValueIn)"
  },
  {
    "label": "ManagedArrayType()",
    "kind": "Method",
    "detail": "Function (FNoneType,# include \" ManagedArrayTypeValues . inl \" } ; # undef MANAGED_ARRAY_TYPE template<class T> EManagedArrayType)",
    "insertText": "ManagedArrayType()"
  },
  {
    "label": "MANAGED_ARRAY_TYPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MANAGED_ARRAY_TYPE(a,A) template<> inline EManagedArrayType ManagedArrayType<a>()"
  },
  {
    "label": "MANAGED_ARRAY_TYPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MANAGED_ARRAY_TYPE(a,A) case EManagedArrayType::F##A##Type:\\ return new TManagedArray<a>()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# include \" ManagedArrayTypeValues . inl \" # undef MANAGED_ARRAY_TYPE })",
    "insertText": "check(false)"
  }
]