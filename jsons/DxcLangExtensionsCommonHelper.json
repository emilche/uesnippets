[
  {
    "label": "raw_string_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_string_ostream"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "DxcLangExtensionsCommonHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcLangExtensionsCommonHelper"
  },
  {
    "label": "SemanticDefineValidationResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SemanticDefineValidationResult"
  },
  {
    "label": "RegisterIntoVector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / Support / FileIOHelper . h \" # include \" dxc / Support / Unicode . h \" # include \" dxc / dxcapi . internal . h \" # include \" llvm / ADT / SetVector . h \" # include \" llvm / ADT / SmallVector . h \" # include<vector> namespace llvm { class raw_string_ostream ; class CallInst ; class Value ; } namespace hlsl { class DxcLangExtensionsCommonHelper { private : llvm::SmallVector<std::string,2> m_semanticDefines ; llvm::SmallVector<std::string,2> m_semanticDefineExclusions ; llvm::SetVector<std::string> m_nonOptSemanticDefines ; llvm::SmallVector<std::string,2> m_defines ; llvm::SmallVector<CComPtr<IDxcIntrinsicTable>,2> m_intrinsicTables ; CComPtr<IDxcSemanticDefineValidator> m_semanticDefineValidator ; std::string m_semanticDefineMetaDataName ; std::string m_targetTriple ; HRESULT STDMETHODCALLTYPE)",
    "insertText": "RegisterIntoVector(LPCWSTR name, llvm::SmallVector<std::string, 2> &here)"
  },
  {
    "label": "IFTPTR()",
    "kind": "Method",
    "detail": "Function (try {)",
    "insertText": "IFTPTR(name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string s ;)",
    "insertText": "if(!Unicode::WideToUTF8String(name, &s))"
  },
  {
    "label": "Exception()",
    "kind": "Method",
    "detail": "Function (throw::)",
    "insertText": "Exception(E_INVALIDARG)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} here .)",
    "insertText": "push_back(s)"
  },
  {
    "label": "RegisterIntoSet()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "RegisterIntoSet(LPCWSTR name, llvm::SetVector<std::string> &here)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} here .)",
    "insertText": "insert(s)"
  },
  {
    "label": "GetSemanticDefines()",
    "kind": "Method",
    "detail": "Function (} public : const llvm::SmallVector<std::string,2>&)",
    "insertText": "GetSemanticDefines()"
  },
  {
    "label": "RegisterSemanticDefineExclusion()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "RegisterSemanticDefineExclusion(LPCWSTR name)"
  },
  {
    "label": "RegisterNonOptSemanticDefine()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "RegisterNonOptSemanticDefine(LPCWSTR name)"
  },
  {
    "label": "RegisterDefine()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "RegisterDefine(LPCWSTR name)"
  },
  {
    "label": "RegisterIntrinsicTable()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "RegisterIntrinsicTable(IDxcIntrinsicTable *pTable)"
  },
  {
    "label": "IFTPTR()",
    "kind": "Method",
    "detail": "Function (try {)",
    "insertText": "IFTPTR(pTable)"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (LPCSTR tableName = nullptr ;)",
    "insertText": "IFT(pTable->GetTableName(&tableName))"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (LPCSTR otherTableName = nullptr ;)",
    "insertText": "IFT(table->GetTableName(&otherTableName))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} m_intrinsicTables .)",
    "insertText": "push_back(pTable)"
  },
  {
    "label": "SetSemanticDefineValidator()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "SetSemanticDefineValidator(IDxcSemanticDefineValidator *pValidator)"
  },
  {
    "label": "SetSemanticDefineMetaDataName()",
    "kind": "Method",
    "detail": "Function (m_semanticDefineValidator = pValidator ; return S_OK ; } HRESULT STDMETHODCALLTYPE)",
    "insertText": "SetSemanticDefineMetaDataName(LPCSTR name)"
  },
  {
    "label": "CATCH_CPP_RETURN_HRESULT()",
    "kind": "Method",
    "detail": "Function (try { m_semanticDefineMetaDataName = name ; return S_OK ; })",
    "insertText": "CATCH_CPP_RETURN_HRESULT()"
  },
  {
    "label": "SetTargetTriple()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "SetTargetTriple(LPCSTR triple)"
  },
  {
    "label": "GetIntrinsicName()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "GetIntrinsicName(UINT opcode)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LPCSTR pName = \" \" ;)",
    "insertText": "for(IDxcIntrinsicTable *table : m_intrinsicTables)"
  },
  {
    "label": "HasWarning()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasWarning()"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (} SemanticDefineValidationResult)",
    "insertText": "Success()"
  },
  {
    "label": "ValidateSemanticDefine()",
    "kind": "Method",
    "detail": "Function (} } ; SemanticDefineValidationResult)",
    "insertText": "ValidateSemanticDefine(const std::string &name, const std::string &value)"
  },
  {
    "label": "GetSemanticDefineWarningsAndErrors()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pError ; CComPtr<IDxcBlobEncoding> pWarning ; std::string error ; std::string warning ; HRESULT result = m_semanticDefineValidator ->)",
    "insertText": "GetSemanticDefineWarningsAndErrors(name.c_str(), value.c_str(), &pWarning, &pError)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (error = \" failed to run semantic define validator for : \" ; error .)",
    "insertText": "append(name)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (error .)",
    "insertText": "append(\"=\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (error .)",
    "insertText": "append(value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobUtf8> pUTF8BlobStr ;)",
    "insertText": "if(SUCCEEDED(hlsl::DxcGetBlobAsUtf8( pBlobString, DxcGetThreadMallocNoRef(), &pUTF8BlobStr))) return std::string(pUTF8BlobStr->GetStringPointer(), pUTF8BlobStr->GetStringLength())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(pError && pError->GetBufferSize())"
  },
  {
    "label": "GetErrorAsString()",
    "kind": "Method",
    "detail": "Function (error =)",
    "insertText": "GetErrorAsString(pError)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pWarning && pWarning->GetBufferSize())"
  },
  {
    "label": "GetErrorAsString()",
    "kind": "Method",
    "detail": "Function (warning =)",
    "insertText": "GetErrorAsString(pWarning)"
  },
  {
    "label": "DxcLangExtensionsCommonHelper()",
    "kind": "Method",
    "detail": "Function (} return SemanticDefineValidationResult { warning,error } ; })",
    "insertText": "DxcLangExtensionsCommonHelper() : m_semanticDefineMetaDataName(\"hlsl.semdefs\"), m_targetTriple(\"dxil-ms-dx\")"
  },
  {
    "label": "DXC_LANGEXTENSIONS_HELPER_IMPL()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "DXC_LANGEXTENSIONS_HELPER_IMPL(_helper_field_) \\ HRESULT STDMETHODCALLTYPE RegisterIntrinsicTable(IDxcIntrinsicTable *pTable)"
  },
  {
    "label": "TM()",
    "kind": "Method",
    "detail": "Function (\\ DxcThreadMalloc)",
    "insertText": "TM(m_pMalloc)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).RegisterIntrinsicTable(pTable)"
  },
  {
    "label": "RegisterSemanticDefine()",
    "kind": "Method",
    "detail": "Function (\\ } \\ HRESULT STDMETHODCALLTYPE)",
    "insertText": "RegisterSemanticDefine(LPCWSTR name)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).RegisterSemanticDefine(name)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).RegisterSemanticDefineExclusion(name)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).RegisterNonOptSemanticDefine(name)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).RegisterDefine(name)"
  },
  {
    "label": "SetSemanticDefineValidator()",
    "kind": "Method",
    "detail": "Function (\\ } \\ HRESULT STDMETHODCALLTYPE)",
    "insertText": "SetSemanticDefineValidator(\\ IDxcSemanticDefineValidator *pValidator)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).SetSemanticDefineValidator(pValidator)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).SetSemanticDefineMetaDataName(name)"
  },
  {
    "label": "SetTargetTriple()",
    "kind": "Method",
    "detail": "Function (\\ } \\ HRESULT STDMETHODCALLTYPE)",
    "insertText": "SetTargetTriple(LPCSTR name)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(_helper_field_).SetTargetTriple(name)"
  }
]