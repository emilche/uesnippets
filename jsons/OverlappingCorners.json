[
  {
    "label": "FOverlappingCorners",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingCorners"
  },
  {
    "label": "FOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" LayoutUV . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" struct FOverlappingCorners {)",
    "insertText": "FOverlappingCorners()"
  },
  {
    "label": "FOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOverlappingCorners(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, float ComparisonThreshold)"
  },
  {
    "label": "FOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOverlappingCorners(const FLayoutUV::IMeshView& MeshView, float ComparisonThreshold)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(int32 NumIndices)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int32 Key, int32 Value)"
  },
  {
    "label": "FinishAdding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAdding()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "FindIfOverlapping()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "FindIfOverlapping(int32 Key)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (int32 ContainerIndex = IndexBelongsTo [ Key ] ;)",
    "insertText": "return(ContainerIndex != INDEX_NONE)"
  }
]