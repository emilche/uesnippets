[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetworkObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkObjectInfo"
  },
  {
    "label": "FNetConnectionKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetConnectionKeyFuncs"
  },
  {
    "label": "FNetworkObjectKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkObjectKeyFuncs"
  },
  {
    "label": "FNetworkObjectList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkObjectList"
  },
  {
    "label": "FActorInvalidSubObjectView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorInvalidSubObjectView"
  },
  {
    "label": "FActorSubObjectReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorSubObjectReferences"
  },
  {
    "label": "FSubObjectChannelReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubObjectChannelReference"
  },
  {
    "label": "FSubObjectChannelRefKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubObjectChannelRefKeyFuncs"
  },
  {
    "label": "FActorSubObjectRefKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorSubObjectRefKeyFuncs"
  },
  {
    "label": "DO_REPLICATED_OBJECT_CHANNELREF_CHECKS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / NetConnection . h \" class AActor ; class FArchive ; # ifndef UE_REPLICATED_OBJECT_REFCOUNTING # define UE_REPLICATED_OBJECT_REFCOUNTING WITH_SERVER_CODE # endif # ifndef DO_REPLICATED_OBJECT_CHANNELREF_CHECKS # define)",
    "insertText": "DO_REPLICATED_OBJECT_CHANNELREF_CHECKS(UE_REPLICATED_OBJECT_REFCOUNTING && WITH_SERVER_CODE && UE_BUILD_DEVELOPMENT)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (Active,TearOff,Delete,} ; struct FNetworkObjectInfo { AActor* Actor ; TWeakObjectPtr<AActor> WeakActor ; double NextUpdateTime ; double LastNetReplicateTime ; float OptimalNetUpdateDelta ; double LastNetUpdateTimestamp ; struct FNetConnectionKeyFuncs : BaseKeyFuncs<TWeakObjectPtr<UNetConnection>,const TWeakObjectPtr<UNetConnection>&,false> { KeyInitType)",
    "insertText": "GetSetKey(const ElementInitType& Element)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(KeyInitType Key)"
  },
  {
    "label": "FNetworkObjectInfo()",
    "kind": "Method",
    "detail": "Function (} } ; TSet<TWeakObjectPtr<UNetConnection>,FNetConnectionKeyFuncs> DormantConnections ; TSet<TWeakObjectPtr<UNetConnection>,FNetConnectionKeyFuncs> RecentlyDormantConnections ; uint8 bPendingNetUpdate : 1 ; uint8 bDirtyForReplay : 1 ; uint8 bSwapRolesOnReplicate : 1 ; uint32 ForceRelevantFrame = 0 ;)",
    "insertText": "FNetworkObjectInfo() : Actor(nullptr) , NextUpdateTime(0.0) , LastNetReplicateTime(0.0) , OptimalNetUpdateDelta(0.0f) , LastNetUpdateTimestamp(0.0) , bPendingNetUpdate(false) , bDirtyForReplay(false) , bSwapRolesOnReplicate(false)"
  },
  {
    "label": "FNetworkObjectInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkObjectInfo(AActor* InActor) : Actor(InActor) , WeakActor(InActor) , NextUpdateTime(0.0) , LastNetReplicateTime(0.0) , OptimalNetUpdateDelta(0.0f) , LastNetUpdateTimestamp(0.0) , bPendingNetUpdate(false) , bDirtyForReplay(false) , bSwapRolesOnReplicate(false)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} ; struct FNetworkObjectKeyFuncs : BaseKeyFuncs<TSharedPtr<FNetworkObjectInfo>,AActor*,false> { KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Element)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(KeyInitType A,KeyInitType B)"
  },
  {
    "label": "AddInitialObjects()",
    "kind": "Method",
    "detail": "Function (} } ; class FNetworkObjectList { public : typedef TSet<TSharedPtr<FNetworkObjectInfo>,FNetworkObjectKeyFuncs> FNetworkObjectSet ; void)",
    "insertText": "AddInitialObjects(UWorld* const World, UNetDriver* NetDriver)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNetworkObjectInfo>*)",
    "insertText": "FindOrAdd(AActor* const Actor, UNetDriver* NetDriver, bool* OutWasAdded=nullptr)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNetworkObjectInfo>)",
    "insertText": "Find(AActor* const Actor)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FNetworkObjectInfo>)",
    "insertText": "Find(const AActor* const Actor)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(AActor* const Actor)"
  },
  {
    "label": "MarkDormant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDormant(AActor* const Actor, UNetConnection* const Connection, const int32 NumConnections, UNetDriver* NetDriver)"
  },
  {
    "label": "MarkActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MarkActive(AActor* const Actor, UNetConnection* const Connection, UNetDriver* NetDriver)"
  },
  {
    "label": "MarkDirtyForReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirtyForReplay(AActor* const Actor)"
  },
  {
    "label": "ResetReplayDirtyTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReplayDirtyTracking()"
  },
  {
    "label": "ClearRecentlyDormantConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRecentlyDormantConnection(AActor* const Actor, UNetConnection* const Connection, UNetDriver* NetDriver)"
  },
  {
    "label": "OnActorIsTraveling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorIsTraveling(AActor* TravelingAtor)"
  },
  {
    "label": "OnPostSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSeamlessTravel()"
  },
  {
    "label": "HandleConnectionAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionAdded()"
  },
  {
    "label": "ResetDormancyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDormancyState()"
  },
  {
    "label": "GetAllObjects()",
    "kind": "Method",
    "detail": "Function (const FNetworkObjectSet&)",
    "insertText": "GetAllObjects()"
  },
  {
    "label": "ForceActorRelevantNextUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceActorRelevantNextUpdate(AActor* const Actor, UNetDriver* NetDriver)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FlushDormantActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDormantActors(UNetConnection* const Connection, const FName& PackageName)"
  },
  {
    "label": "OnActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDestroyed(AActor* DestroyedActor)"
  },
  {
    "label": "SetSubObjectForDeletion()",
    "kind": "Method",
    "detail": "Function (# if UE_REPLICATED_OBJECT_REFCOUNTING void)",
    "insertText": "SetSubObjectForDeletion(AActor* Actor, UObject* SubObject)"
  },
  {
    "label": "SetSubObjectForTearOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubObjectForTearOff(AActor* Actor, UObject* SubObject)"
  },
  {
    "label": "AddSubObjectChannelReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubObjectChannelReference(AActor* OwnerActor, UObject* ReplicatedSubObject, UObject* ReferenceOwner)"
  },
  {
    "label": "RemoveSubObjectChannelReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubObjectChannelReference(AActor* OwnerActor, const TWeakObjectPtr<UObject>& ReplicatedSubObject, UObject* ReferenceOwner)"
  },
  {
    "label": "RemoveMultipleSubObjectChannelReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMultipleSubObjectChannelReference(FObjectKey OwnerActorKey, const TArrayView<TWeakObjectPtr<UObject>>& SubObjectsToRemove, UObject* ReferenceOwner)"
  },
  {
    "label": "RemoveMultipleInvalidSubObjectChannelReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMultipleInvalidSubObjectChannelReference(FObjectKey OwnerActorKey, const TArrayView<TWeakObjectPtr<UObject>>& SubObjectsToRemove, UObject* ReferenceOwner)"
  },
  {
    "label": "RemoveMultipleActiveSubObjectChannelReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMultipleActiveSubObjectChannelReference(FObjectKey OwnerActorKey, const TArrayView<TWeakObjectPtr<UObject>>& SubObjectsToRemove, UObject* ReferenceOwner)"
  },
  {
    "label": "FindActorInvalidSubObjects()",
    "kind": "Method",
    "detail": "Function (struct FActorInvalidSubObjectView ; FNetworkObjectList::FActorInvalidSubObjectView)",
    "insertText": "FindActorInvalidSubObjects(AActor* OwnerActor)"
  },
  {
    "label": "SwapMultipleReferencesForDormancy()",
    "kind": "Method",
    "detail": "Function (# if DO_REPLICATED_OBJECT_CHANNELREF_CHECKS void)",
    "insertText": "SwapMultipleReferencesForDormancy(AActor* OwnerActor, const TArrayView<TWeakObjectPtr<UObject>>& SubObjectsToSwap, UActorChannel* PreviousChannelRefOwner, UNetConnection* NewConnectionRefOwner)"
  },
  {
    "label": "SwapReferenceForDormancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapReferenceForDormancy(AActor* OwnerActor, UObject* ReplicatedSubObject, UNetConnection* PreviousConnectionRefOwner, UActorChannel* NewChannelRefOwner)"
  },
  {
    "label": "MarkActiveInternal()",
    "kind": "Method",
    "detail": "Function (# endif # endif private : bool)",
    "insertText": "MarkActiveInternal(const TSharedPtr<FNetworkObjectInfo>& ObjectInfo, UNetConnection* const Connection, UNetDriver* NetDriver)"
  },
  {
    "label": "InvalidateSubObject()",
    "kind": "Method",
    "detail": "Function (# if UE_REPLICATED_OBJECT_REFCOUNTING void)",
    "insertText": "InvalidateSubObject(AActor* Actor, UObject* SubObject, ENetSubObjectStatus InvalidStatus)"
  },
  {
    "label": "HandleRemoveAnySubObjectChannelRef()",
    "kind": "Method",
    "detail": "Function (struct FActorSubObjectReferences ; void)",
    "insertText": "HandleRemoveAnySubObjectChannelRef(FActorSubObjectReferences& SubObjectsRefInfo, const TWeakObjectPtr<UObject>& ReplicatedSubObject, UObject* ReferenceOwner)"
  },
  {
    "label": "HandleRemoveActiveSubObjectRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRemoveActiveSubObjectRef(FActorSubObjectReferences& SubObjectsRefInfo, const TWeakObjectPtr<UObject>& ReplicatedSubObject, UObject* ReferenceOwner)"
  },
  {
    "label": "HandleRemoveInvalidSubObjectRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRemoveInvalidSubObjectRef(FActorSubObjectReferences& SubObjectsRefInfo, const TWeakObjectPtr<UObject>& ReplicatedSubObject, UObject* ReferenceOwner)"
  },
  {
    "label": "HandleSwapReferenceForDormancy()",
    "kind": "Method",
    "detail": "Function (# endif # if DO_REPLICATED_OBJECT_CHANNELREF_CHECKS void)",
    "insertText": "HandleSwapReferenceForDormancy(FActorSubObjectReferences* ActorNetInfo, const TWeakObjectPtr<UObject>& SubObjectPtr, UObject* PreviousRefOwner, UObject* NewRefOwner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FNetworkObjectSet AllNetworkObjects ; FNetworkObjectSet ActiveNetworkObjects ; FNetworkObjectSet ObjectsDormantOnAllConnections ; FNetworkObjectSet SeamlessTravelingObjects ; TMap<TWeakObjectPtr<UNetConnection>,int32> NumDormantObjectsPerConnection ; TMap<FName,FNetworkObjectSet> FullyDormantObjectsByLevel ; TMap<TObjectKey<UNetConnection>,TMap<FName,FNetworkObjectSet>> DormantObjectsPerConnection ; public : struct FSubObjectChannelReference { TWeakObjectPtr<UObject> SubObjectPtr ; uint16 ChannelRefCount = 0 ; ENetSubObjectStatus Status = ENetSubObjectStatus::Active ; # if DO_REPLICATED_OBJECT_CHANNELREF_CHECKS TArray<UObject*> RegisteredOwners ; # endif bool)",
    "insertText": "operator(const FSubObjectChannelReference& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TWeakObjectPtr<UObject>& rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSubObjectChannelReference& SubObjChannelRef)"
  },
  {
    "label": "IsTearOff()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTearOff()"
  },
  {
    "label": "FSubObjectChannelReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubObjectChannelReference(const TWeakObjectPtr<UObject>& InSubObject) : SubObjectPtr(InSubObject) , ChannelRefCount(1) , Status(ENetSubObjectStatus::Active)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSubObjectChannelRefKeyFuncs : BaseKeyFuncs<FSubObjectChannelReference,const TWeakObjectPtr<UObject>&,false> { KeyInitType)",
    "insertText": "GetSetKey(ElementInitType& Element)"
  },
  {
    "label": "FActorInvalidSubObjectView()",
    "kind": "Method",
    "detail": "Function (} } ; # if UE_REPLICATED_OBJECT_REFCOUNTING struct FActorInvalidSubObjectView { public :)",
    "insertText": "FActorInvalidSubObjectView(uint16 InDirtyCount, const TArray<FSubObjectChannelReference>* InArrayPtr=nullptr) : InvalidSubObjectDirtyCount(InDirtyCount) , InvalidSubObjectsPtr(InArrayPtr)"
  },
  {
    "label": "FActorInvalidSubObjectView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FActorInvalidSubObjectView()"
  },
  {
    "label": "GetDirtyCount()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetDirtyCount()"
  },
  {
    "label": "HasNoSubObjects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasNoSubObjects()"
  }
]