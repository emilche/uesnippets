[
  {
    "label": "FBSPSurfaceStaticLighting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBSPSurfaceStaticLighting"
  },
  {
    "label": "FLandscapeStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeStaticLightingMesh"
  },
  {
    "label": "FLandscapeStaticLightingTextureMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeStaticLightingTextureMapping"
  },
  {
    "label": "FShadowMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapData2D"
  },
  {
    "label": "FStaticMeshStaticLightingTextureMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStaticLightingTextureMapping"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "ULightComponentBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponentBase"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FQuantizedLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightmapData"
  },
  {
    "label": "ElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementType"
  },
  {
    "label": "TList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TList"
  },
  {
    "label": "FSceneFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneFileHeader"
  },
  {
    "label": "FDebugLightingInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLightingInputData"
  },
  {
    "label": "FMaterialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialData"
  },
  {
    "label": "FMaterialElementData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialElementData"
  },
  {
    "label": "FVolumetricLightmapSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapSettings"
  },
  {
    "label": "FLightmassMaterialExportSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassMaterialExportSettings"
  },
  {
    "label": "FLightmassExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassExporter"
  },
  {
    "label": "FStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingMesh"
  },
  {
    "label": "FStaticLightingMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingMapping"
  },
  {
    "label": "FStaticLightingTextureMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingTextureMapping"
  },
  {
    "label": "FStaticLightingVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingVertex"
  },
  {
    "label": "AmortizedExportStage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AmortizedExportStage"
  },
  {
    "label": "UDirectionalLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDirectionalLightComponent"
  },
  {
    "label": "UPointLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPointLightComponent"
  },
  {
    "label": "USpotLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpotLightComponent"
  },
  {
    "label": "URectLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URectLightComponent"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "FStaticMeshStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStaticLightingMesh"
  },
  {
    "label": "FStaticLightingGlobalVolumeMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingGlobalVolumeMapping"
  },
  {
    "label": "FLandscapeStaticLightingGlobalVolumeMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeStaticLightingGlobalVolumeMapping"
  },
  {
    "label": "FLightmassProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassProcessor"
  },
  {
    "label": "FLightmassImporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassImporter"
  },
  {
    "label": "TListThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TListThreadSafe"
  },
  {
    "label": "FUncompressedPrecomputedVisibilityCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUncompressedPrecomputedVisibilityCell"
  },
  {
    "label": "FLightmassAlertMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassAlertMessage"
  },
  {
    "label": "FDeferredMappingsBundle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredMappingsBundle"
  },
  {
    "label": "StaticLightingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StaticLightingType"
  },
  {
    "label": "FTextureMappingImportHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureMappingImportHelper"
  },
  {
    "label": "FMappingImportHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMappingImportHelper"
  },
  {
    "label": "FImportedVolumetricLightmapTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportedVolumetricLightmapTaskData"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" GameFramework / WorldSettings . h \" # include \" Lightmass / LightmassCharacterIndirectDetailVolume . h \" # include \" Lightmass / VolumetricLightmapDensityVolume . h \" # include \" StaticLightingSystem / StaticLightingPrivate . h \" # include \" Lightmass / LightmassImportanceVolume . h \" # include \" Components / LightmassPortalComponent . h \" # include \" Components / SkyAtmosphereComponent . h \" # if PLATFORM_WINDOWS # include \" Windows / AllowWindowsPlatformTypes . h \" # endif # include \" SwarmInterface . h \" # include \" Lightmass / LightmassRender . h \" # if PLATFORM_WINDOWS # include \" Windows / HideWindowsPlatformTypes . h \" # endif class FBSPSurfaceStaticLighting ; class FLandscapeStaticLightingMesh ; class FLandscapeStaticLightingTextureMapping ; class FShadowMapData2D ; class FStaticMeshStaticLightingTextureMapping ; class ULightComponent ; class ULightComponentBase ; class UMaterialInterface ; class UStaticMesh ; struct FQuantizedLightmapData ; template<class ElementType> class TList ; namespace Lightmass { struct FSceneFileHeader ; struct FDebugLightingInputData ; struct FMaterialData ; struct FMaterialElementData ; class FVolumetricLightmapSettings ; } struct FLightmassMaterialExportSettings { const FStaticLightingMesh* UnwrapMesh ; bool)",
    "insertText": "operator(const FLightmassMaterialExportSettings& lhs, const FLightmassMaterialExportSettings& rhs)"
  },
  {
    "label": "FLightmassExporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLightmassExporter()"
  },
  {
    "label": "SetLevelSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelSettings(FLightmassWorldInfoSettings& InLevelSettings)"
  },
  {
    "label": "SetNumUnusedLocalCores()",
    "kind": "Method",
    "detail": "Function (LevelSettings = InLevelSettings ; } void)",
    "insertText": "SetNumUnusedLocalCores(int32 InNumUnusedLocalCores)"
  },
  {
    "label": "SetQualityLevel()",
    "kind": "Method",
    "detail": "Function (NumUnusedLocalCores = InNumUnusedLocalCores ; } void)",
    "insertText": "SetQualityLevel(ELightingBuildQuality InQualityLevel)"
  },
  {
    "label": "SetLevelName()",
    "kind": "Method",
    "detail": "Function (QualityLevel = InQualityLevel ; } void)",
    "insertText": "SetLevelName(const FString& InName)"
  },
  {
    "label": "ClearImportanceVolumes()",
    "kind": "Method",
    "detail": "Function (LevelName = InName ; } void)",
    "insertText": "ClearImportanceVolumes()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ImportanceVolumes .)",
    "insertText": "Empty()"
  },
  {
    "label": "AddImportanceVolume()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddImportanceVolume(const ALightmassImportanceVolume* InImportanceVolume)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ImportanceVolumes .)",
    "insertText": "Add(InImportanceVolume->GetComponentsBoundingBox(true))"
  },
  {
    "label": "AddImportanceVolumeBoundingBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddImportanceVolumeBoundingBox(const FBox& Bounds)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ImportanceVolumes .)",
    "insertText": "Add(Bounds)"
  },
  {
    "label": "GetImportanceVolumes()",
    "kind": "Method",
    "detail": "Function (} const TArray<FBox>&)",
    "insertText": "GetImportanceVolumes()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CharacterIndirectDetailVolumes .)",
    "insertText": "Add(InDetailVolume->GetComponentsBoundingBox(true))"
  },
  {
    "label": "AddPortal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPortal(const ULightmassPortalComponent* InPortalComponent)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Portals .)",
    "insertText": "Add(InPortalComponent->GetComponentTransform().ToMatrixWithScale())"
  },
  {
    "label": "SetSkyAtmosphereComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSkyAtmosphereComponent(const USkyAtmosphereComponent* SkyAtmosphere)"
  },
  {
    "label": "AddMaterial()",
    "kind": "Method",
    "detail": "Function (SkyAtmosphereComponent = SkyAtmosphere ; } void)",
    "insertText": "AddMaterial(UMaterialInterface* InMaterialInterface, const FStaticLightingMesh* InStaticLightingMesh = nullptr)"
  },
  {
    "label": "AddLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLight(ULightComponentBase* Light)"
  },
  {
    "label": "FindMappingByGuid()",
    "kind": "Method",
    "detail": "Function (const FStaticLightingMapping*)",
    "insertText": "FindMappingByGuid(FGuid FindGuid)"
  },
  {
    "label": "GetAmortizedExportPercentDone()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAmortizedExportPercentDone()"
  },
  {
    "label": "SetVolumetricLightmapSettings()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid> VisibilityBucketGuids ; TMap<FGuid,int32> VolumetricLightmapTaskGuids ; TArray<AVolumetricLightmapDensityVolume*> VolumetricLightmapDensityVolumes ; private : void)",
    "insertText": "SetVolumetricLightmapSettings(Lightmass::FVolumetricLightmapSettings& OutSettings)"
  },
  {
    "label": "WriteToChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToChannel(FLightmassStatistics& Stats, FGuid& DebugMappingGuid)"
  },
  {
    "label": "WriteToMaterialChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteToMaterialChannel(FLightmassStatistics& Stats)"
  },
  {
    "label": "WriteVisibilityData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteVisibilityData(int32 Channel)"
  },
  {
    "label": "WriteVolumetricLightmapData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteVolumetricLightmapData(int32 Channel)"
  },
  {
    "label": "WriteLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLights(int32 Channel)"
  },
  {
    "label": "WriteModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteModels()"
  },
  {
    "label": "WriteStaticMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStaticMeshes()"
  },
  {
    "label": "WriteLandscapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLandscapes()"
  },
  {
    "label": "BuildMaterialMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMaterialMap(UMaterialInterface* Material)"
  },
  {
    "label": "BlockOnShaderCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnShaderCompilation()"
  },
  {
    "label": "ExportMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportMaterial(UMaterialInterface* Material, const FLightmassMaterialExportSettings& ExportSettings)"
  },
  {
    "label": "WriteMeshInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteMeshInstances(int32 Channel)"
  },
  {
    "label": "WriteLandscapeInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLandscapeInstances(int32 Channel)"
  },
  {
    "label": "WriteMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteMappings(int32 Channel)"
  },
  {
    "label": "WriteBaseMeshInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBaseMeshInstanceData(int32 Channel, int32 MeshIndex, const class FStaticLightingMesh* Mesh, TArray<Lightmass::FMaterialElementData>& MaterialElementData)"
  },
  {
    "label": "WriteBaseMappingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBaseMappingData(int32 Channel, const class FStaticLightingMapping* Mapping)"
  },
  {
    "label": "WriteBaseTextureMappingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBaseTextureMappingData(int32 Channel, const class FStaticLightingTextureMapping* TextureMapping)"
  },
  {
    "label": "WriteVertexData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteVertexData(int32 Channel, const struct FStaticLightingVertex* Vertex)"
  },
  {
    "label": "WriteLandscapeMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLandscapeMapping(int32 Channel, const class FLandscapeStaticLightingTextureMapping* LandscapeMapping)"
  },
  {
    "label": "GetMaterialHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialHash(const UMaterialInterface* Material, FSHAHash& OutHash)"
  },
  {
    "label": "FindDebugMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDebugMapping(FGuid& DebugMappingGuid)"
  },
  {
    "label": "WriteSceneSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSceneSettings(Lightmass::FSceneFileHeader& Scene)"
  },
  {
    "label": "WriteDebugInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDebugInput(Lightmass::FDebugLightingInputData& InputData, FGuid& DebugMappingGuid)"
  },
  {
    "label": "UpdateExportProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExportProgress()"
  },
  {
    "label": "TListThreadSafe()",
    "kind": "Method",
    "detail": "Function (TMap<const FStaticLightingMesh*,int32> MeshToIndexMap ; NSwarm::FSwarmInterface& Swarm ; bool bSwarmConnectionIsValid ; FGuid SceneGuid ; FSHAHash LightmassExecutableHash ; FString ChannelName ; TArray<FBox> ImportanceVolumes ; TArray<FBox> CharacterIndirectDetailVolumes ; TArray<FMatrix> Portals ; const USkyAtmosphereComponent* SkyAtmosphereComponent ; FLightmassWorldInfoSettings LevelSettings ; int32 NumUnusedLocalCores ; ELightingBuildQuality QualityLevel ; enum AmortizedExportStage { NotRunning,BuildMaterials,ShaderCompilation,ExportMaterials,CleanupMaterialExport,Complete,} ; AmortizedExportStage ExportStage ; int32 CurrentAmortizationIndex ; TArray<int32> OpenedMaterialExportChannels ; FString LevelName ; TArray<const class UDirectionalLightComponent*> DirectionalLights ; TArray<const class UPointLightComponent*> PointLights ; TArray<const class USpotLightComponent*> SpotLights ; TArray<const class URectLightComponent*> RectLights ; TArray<const class USkyLightComponent*> SkyLights ; TArray<class FBSPSurfaceStaticLighting*> BSPSurfaceMappings ; TArray<const class UModel*> Models ; TArray<const class FStaticMeshStaticLightingMesh*> StaticMeshLightingMeshes ; TArray<class FStaticMeshStaticLightingTextureMapping*> StaticMeshTextureMappings ; TArray<const class UStaticMesh*> StaticMeshes ; TArray<const FLandscapeStaticLightingMesh*> LandscapeLightingMeshes ; TArray<FLandscapeStaticLightingTextureMapping*> LandscapeTextureMappings ; TArray<class FStaticLightingGlobalVolumeMapping*> VolumeMappings ; TArray<class FLandscapeStaticLightingGlobalVolumeMapping*> LandscapeVolumeMappings ; TArray<UMaterialInterface*> Materials ; TMap<UMaterialInterface*,FLightmassMaterialExportSettings> MaterialExportSettings ; TMap<UMaterialInterface*,FMaterialExportDataEntry> MaterialExportData ; int32 TotalProgress ; int32 CurrentProgress ; FLightmassMaterialRenderer MaterialRenderer ; UWorld* World ; const FStaticLightingBuildContext& LightingContext ; class FBSPSurfaceStaticLighting ; class FStaticMeshStaticLightingMesh ; class FStaticMeshStaticLightingTextureMapping ; class FLightmassProcessor ; class FLandscapeStaticLightingMesh ; class FLandscapeStaticLightingTextureMapping ; class FStaticLightingGlobalVolumeMapping ; class FLandscapeStaticLightingGlobalVolumeMapping ; } ; class FLightmassImporter { } ; template<ElementType> class TListThreadSafe { public :)",
    "insertText": "TListThreadSafe(): FirstElement(NULL)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddElement(TList<ElementType>* Element)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TList<ElementType>* LocalFirstElement ; do { LocalFirstElement = FirstElement ; Element -> Next = LocalFirstElement ; })",
    "insertText": "while(FPlatformAtomics::InterlockedCompareExchangePointer((void**)&FirstElement,Element,LocalFirstElement) != LocalFirstElement)"
  },
  {
    "label": "ExtractAll()",
    "kind": "Method",
    "detail": "Function (} TList<ElementType>*)",
    "insertText": "ExtractAll()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TList<ElementType>* LocalFirstElement ; do { LocalFirstElement = FirstElement ; })",
    "insertText": "while(FPlatformAtomics::InterlockedCompareExchangePointer((void**)&FirstElement,NULL,LocalFirstElement) != LocalFirstElement)"
  },
  {
    "label": "FLightmassProcessor()",
    "kind": "Method",
    "detail": "Function (TList<ElementType>* NextElement = Element -> Next ; delete Element ; Element = NextElement ; } ; } ; } private : TList<ElementType>* FirstElement ; } ; class FUncompressedPrecomputedVisibilityCell { public : FBox Bounds ; TArray<uint8> VisibilityData ; } ; class FLightmassAlertMessage { public : FGuid ObjectId ; FString MessageText ; int32 Type ; int32 Severity ; } ; class FLightmassProcessor { public :)",
    "insertText": "FLightmassProcessor(const FStaticLightingSystem& InSystem, bool bInDumpBinaryResults, bool bInOnlyBuildVisibility)"
  },
  {
    "label": "FLightmassProcessor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLightmassProcessor()"
  },
  {
    "label": "GetLightmassExporter()",
    "kind": "Method",
    "detail": "Function (FLightmassExporter*)",
    "insertText": "GetLightmassExporter()"
  },
  {
    "label": "IsSwarmConnectionIsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSwarmConnectionIsValid()"
  },
  {
    "label": "SetVolumetricLightMapImportMode()",
    "kind": "Method",
    "detail": "Function (bImportCompletedMappingsImmediately = bInImportCompletedMappingsImmediately ; } void)",
    "insertText": "SetVolumetricLightMapImportMode(bool bUseVLMCellGrid)"
  },
  {
    "label": "InitiateExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitiateExport()"
  },
  {
    "label": "ExecuteAmortizedMaterialExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteAmortizedMaterialExport()"
  },
  {
    "label": "IssueStaticShadowDepthMapTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueStaticShadowDepthMapTask(const ULightComponent* Light, int32 EstimatedCost)"
  },
  {
    "label": "BeginRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginRun()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update()"
  },
  {
    "label": "CompleteRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompleteRun()"
  },
  {
    "label": "IsProcessingCompletedSuccessfully()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessingCompletedSuccessfully()"
  },
  {
    "label": "GetAsyncPercentDone()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAsyncPercentDone()"
  },
  {
    "label": "OpenJob()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenJob()"
  },
  {
    "label": "CloseJob()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseJob()"
  },
  {
    "label": "GetMappingFileExtension()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMappingFileExtension(const FStaticLightingMapping* InMapping)"
  },
  {
    "label": "GetStatistics()",
    "kind": "Method",
    "detail": "Function (const FLightmassStatistics&)",
    "insertText": "GetStatistics()"
  },
  {
    "label": "ProcessMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMapping(const FGuid& MappingGuid)"
  },
  {
    "label": "ProcessAvailableMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAvailableMappings()"
  },
  {
    "label": "FMappingImportHelper()",
    "kind": "Method",
    "detail": "Function (protected : struct FDeferredMappingsBundle ; enum StaticLightingType { SLT_Texture } ; struct FTextureMappingImportHelper ; struct FMappingImportHelper { StaticLightingType Type ; FGuid MappingGuid ; FGuid OwnerGuid ; double ExecutionTime ; bool bProcessed ;)",
    "insertText": "FMappingImportHelper()"
  },
  {
    "label": "FMappingImportHelper()",
    "kind": "Method",
    "detail": "Function (Type = SLT_Texture ; ExecutionTime = 0 . 0 ; bProcessed = false ; })",
    "insertText": "FMappingImportHelper(const FMappingImportHelper& InHelper)"
  },
  {
    "label": "GetTextureMappingHelper()",
    "kind": "Method",
    "detail": "Function (} FTextureMappingImportHelper*)",
    "insertText": "GetTextureMappingHelper()"
  },
  {
    "label": "FTextureMappingImportHelper()",
    "kind": "Method",
    "detail": "Function (} ; struct FTextureMappingImportHelper : public FMappingImportHelper { TRefCountPtr<FStaticLightingTextureMapping> TextureMapping ; FQuantizedLightmapData* QuantizedData ; float UnmappedTexelsPercentage ; int32 NumShadowMaps ; int32 NumSignedDistanceFieldShadowMaps ; TMap<ULightComponent*,FShadowMapData2D*> ShadowMapData ;)",
    "insertText": "FTextureMappingImportHelper()"
  },
  {
    "label": "FTextureMappingImportHelper()",
    "kind": "Method",
    "detail": "Function (TextureMapping = NULL ; QuantizedData = NULL ; UnmappedTexelsPercentage = 0 . 0 f ; NumShadowMaps = 0 ; NumSignedDistanceFieldShadowMaps = 0 ; Type = SLT_Texture ; })",
    "insertText": "FTextureMappingImportHelper(const FTextureMappingImportHelper& InHelper) : FMappingImportHelper(InHelper)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FTextureMappingImportHelper& Helper)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Helper .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "FindStaticMesh()",
    "kind": "Method",
    "detail": "Function (UStaticMesh*)",
    "insertText": "FindStaticMesh(FGuid& Guid)"
  },
  {
    "label": "FindLevel()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "FindLevel(const FGuid& Guid)"
  },
  {
    "label": "ImportLightMapData2DData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportLightMapData2DData(int32 Channel, FQuantizedLightmapData* QuantizedData, int32 UncompressedSize, int32 CompressedSize)"
  },
  {
    "label": "ImportSignedDistanceFieldShadowMapData2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportSignedDistanceFieldShadowMapData2D(int32 Channel, TMap<ULightComponent*,FShadowMapData2D*>& OutShadowMapData, int32 ShadowMapCount)"
  },
  {
    "label": "ImportTextureMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextureMapping(int32 Channel, FTextureMappingImportHelper& TMImport)"
  },
  {
    "label": "ImportMappings()",
    "kind": "Method",
    "detail": "Function (FLightmassExporter* Exporter ; FLightmassImporter* Importer ; const FStaticLightingSystem& System ; struct FDeferredMappingsBundle* DeferredMappings = nullptr ; NSwarm::FSwarmInterface& Swarm ; bool bSwarmConnectionIsValid ; bool bProcessingSuccessful ; bool bProcessingFailed ; bool bQuitReceived ; volatile int32 NumCompletedTasks ; volatile int32 NumCompletedVolumetricLightmapTasks = 0 ; bool bRunningLightmass ; FLightmassStatistics Statistics ; TMap<FString,FText> Messages ; bool bOnlyBuildVisibility ; bool bDumpBinaryResults ; bool bImportCompletedMappingsImmediately ; int32 MappingToProcessIndex ; int32 MaxProcessAvailableCount ; TArray<TArray<FUncompressedPrecomputedVisibilityCell>> CompletedPrecomputedVisibilityCells ; TMap<FGuid,FBSPSurfaceStaticLighting*> PendingBSPMappings ; TMap<FGuid,FStaticMeshStaticLightingTextureMapping*> PendingTextureMappings ; TMap<FGuid,FLandscapeStaticLightingTextureMapping*> PendingLandscapeMappings ; TListThreadSafe<FGuid> CompletedMappingTasks ; volatile int32 VolumeSampleTaskCompleted ; TListThreadSafe<FGuid> CompletedVisibilityTasks ; TListThreadSafe<FGuid> CompletedVolumetricLightmapTasks ; volatile int32 MeshAreaLightDataTaskCompleted ; volatile int32 VolumeDistanceFieldTaskCompleted ; TMap<FGuid,FMappingImportHelper*> ImportedMappings ; FGuid DebugMappingGuid ; int32 NumTotalSwarmTasks ; double LightmassStartTime ; FCriticalSection SwarmCallbackMessagesSection ; TArray<FLightmassAlertMessage> SwarmCallbackMessages ; FString DeferredMappingsDirectory ; bool bSplitToVLMCellGrid = false ; void)",
    "insertText": "ImportMappings(bool bProcessImmediately)"
  },
  {
    "label": "ImportVolumeSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVolumeSamples()"
  },
  {
    "label": "ImportIrradianceTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportIrradianceTasks(bool& bGenerateSkyShadowing, TArray<struct FImportedVolumetricLightmapTaskData>& TaskDataArray)"
  },
  {
    "label": "ImportVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVolumetricLightmap()"
  },
  {
    "label": "ImportPrecomputedVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportPrecomputedVisibility()"
  },
  {
    "label": "ApplyPrecomputedVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPrecomputedVisibility()"
  },
  {
    "label": "ImportMeshAreaLightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportMeshAreaLightData()"
  },
  {
    "label": "ImportVolumeDistanceFieldData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVolumeDistanceFieldData()"
  },
  {
    "label": "IsStaticLightingTextureMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStaticLightingTextureMapping(const FGuid& MappingGuid)"
  },
  {
    "label": "GetStaticLightingTextureMapping()",
    "kind": "Method",
    "detail": "Function (FStaticLightingTextureMapping*)",
    "insertText": "GetStaticLightingTextureMapping(const FGuid& MappingGuid)"
  },
  {
    "label": "DeferMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferMapping(FTextureMappingImportHelper* ImportHelper)"
  },
  {
    "label": "IsDeferredMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeferredMapping(const FGuid& Guid)"
  },
  {
    "label": "ExportDeferredMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportDeferredMappings()"
  },
  {
    "label": "ImportDeferredMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportDeferredMappings()"
  },
  {
    "label": "ClearImportedDeferredMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearImportedDeferredMappings()"
  },
  {
    "label": "ImportStaticLightingTextureMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportStaticLightingTextureMapping(const FGuid& MappingGuid, bool bProcessImmediately)"
  },
  {
    "label": "ImportStaticShadowDepthMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportStaticShadowDepthMap(ULightComponent* Light)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "ReadArray(int32 Channel, TArray<T>& Array)"
  },
  {
    "label": "ReadChannel()",
    "kind": "Method",
    "detail": "Function (int32 ArrayNum = 0 ; Swarm .)",
    "insertText": "ReadChannel(Channel, &ArrayNum, sizeof(ArrayNum))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Empty(ArrayNum)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "AddZeroed(ArrayNum)"
  },
  {
    "label": "ReadChannel()",
    "kind": "Method",
    "detail": "Function (Swarm .)",
    "insertText": "ReadChannel(Channel, Array.GetData(), Array.GetTypeSize() * ArrayNum)"
  },
  {
    "label": "ImportDebugOutputStruct()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ImportDebugOutputStruct(int32 Channel)"
  },
  {
    "label": "ProcessAlertMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAlertMessages()"
  },
  {
    "label": "SwarmCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwarmCallback(NSwarm::FMessage* CallbackMessage, void* CallbackData)"
  }
]