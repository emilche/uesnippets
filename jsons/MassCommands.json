[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "FMassBatchedEntityCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassBatchedEntityCommand"
  },
  {
    "label": "FMassCommandDestroyEntities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandDestroyEntities"
  },
  {
    "label": "FMassCommandAddFragmentsInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandAddFragmentsInternal"
  },
  {
    "label": "FMassCommandRemoveFragmentsInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandRemoveFragmentsInternal"
  },
  {
    "label": "FMassCommandChangeTags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandChangeTags"
  },
  {
    "label": "FMassCommandAddTagsInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandAddTagsInternal"
  },
  {
    "label": "FMassCommandRemoveTagsInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandRemoveTagsInternal"
  },
  {
    "label": "FMassCommandSwapTagsInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandSwapTagsInternal"
  },
  {
    "label": "FMassCommandAddFragmentInstances",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandAddFragmentInstances"
  },
  {
    "label": "FMassCommandBuildEntity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandBuildEntity"
  },
  {
    "label": "FMassCommandBuildEntityWithSharedFragments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassCommandBuildEntityWithSharedFragments"
  },
  {
    "label": "FPerSharedFragmentsHashData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerSharedFragmentsHashData"
  },
  {
    "label": "FMassDeferredCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassDeferredCommand"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ProfilingDebugging / CsvProfilerConfig . h \" # include \" Misc / MTAccessDetector . h \" # include \" MassEntityTypes . h \" # include \" MassEntityUtils . h \" # include \" MassEntityManager . h \" # include \" MassCommands . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "DEBUG_NAME()",
    "kind": "Method",
    "detail": "Function (None,Create,Add,Remove,ChangeComposition,Set,Destroy,MAX } ; enum class EMassCommandCheckTime : bool { RuntimeCheck = true,CompileTimeCheck = false } ; # if CSV_PROFILER_STATS | | WITH_MASSENTITY_DEBUG # define)",
    "insertText": "DEBUG_NAME(Name) , FName(TEXT(Name)) # define DEBUG_NAME_PARAM(Name) , const FName InDebugName = TEXT(Name) # define FORWARD_DEBUG_NAME_PARAM , InDebugName #else # define DEBUG_NAME(Name) # define DEBUG_NAME_PARAM(Name)"
  },
  {
    "label": "ConstructBitSet()",
    "kind": "Method",
    "detail": "Function (template<BitSetType,EMassCommandCheckTime CheckTime,. . . TTypes> BitSetType)",
    "insertText": "ConstructBitSet()"
  },
  {
    "label": "PopulateBitSet()",
    "kind": "Method",
    "detail": "Function (} else { BitSetType Result ; UE::Mass::TMultiTypeList<TTypes . . .)",
    "insertText": "PopulateBitSet(Result)"
  },
  {
    "label": "ConstructTagBitSet()",
    "kind": "Method",
    "detail": "Function (} template<EMassCommandCheckTime CheckTime,. . . TTypes> FMassTagBitSet)",
    "insertText": "ConstructTagBitSet()"
  },
  {
    "label": "FMassBatchedCommand()",
    "kind": "Method",
    "detail": "Function (} } struct FMassBatchedCommand {)",
    "insertText": "FMassBatchedCommand()"
  },
  {
    "label": "FMassBatchedCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassBatchedCommand(EMassCommandOperationType OperationType) : OperationType(OperationType)"
  },
  {
    "label": "FMassBatchedCommand()",
    "kind": "Method",
    "detail": "Function (} # if CSV_PROFILER_STATS | | WITH_MASSENTITY_DEBUG)",
    "insertText": "FMassBatchedCommand(EMassCommandOperationType OperationType, FName DebugName) : OperationType(OperationType) , DebugName(DebugName)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Execute(FMassEntityManager& System)"
  },
  {
    "label": "HasWork()",
    "kind": "Method",
    "detail": "Function (bHasWork = false ; } bool)",
    "insertText": "HasWork()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (const uint32 ThisTypesStaticIndex = CommandsCounter + + ; return ThisTypesStaticIndex ; } SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetNumOperationsStat()",
    "kind": "Method",
    "detail": "Function (# if CSV_PROFILER_STATS | | WITH_MASSENTITY_DEBUG int32)",
    "insertText": "GetNumOperationsStat()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFName()"
  },
  {
    "label": "FMassBatchedEntityCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassBatchedEntityCommand(EMassCommandOperationType OperationType DEBUG_NAME_PARAM(\"BatchedEntityCommand\")) : Super(OperationType FORWARD_DEBUG_NAME_PARAM)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FMassEntityHandle Entity)"
  },
  {
    "label": "UE_MT_SCOPED_WRITE_ACCESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_MT_SCOPED_WRITE_ACCESS(EntitiesAccessDetector)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TargetEntities .)",
    "insertText": "Add(Entity)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bHasWork = true ; } void)",
    "insertText": "Add(TConstArrayView<FMassEntityHandle> Entities)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (TargetEntities .)",
    "insertText": "Append(Entities.GetData(), Entities.Num())"
  },
  {
    "label": "UE_MT_DECLARE_RW_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "UE_MT_DECLARE_RW_ACCESS_DETECTOR(EntitiesAccessDetector)"
  },
  {
    "label": "FMassCommandDestroyEntities()",
    "kind": "Method",
    "detail": "Function (TArray<FMassEntityHandle> TargetEntities ; } ; struct FMassCommandDestroyEntities : public FMassBatchedEntityCommand { using Super = FMassBatchedEntityCommand ;)",
    "insertText": "FMassCommandDestroyEntities() : Super(EMassCommandOperationType::Destroy DEBUG_NAME(\"DestroyEntities\"))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassCommandDestroyEntities_Execute)"
  },
  {
    "label": "CreateEntityCollections()",
    "kind": "Method",
    "detail": "Function (TArray<FMassArchetypeEntityCollection> EntityCollectionsToDestroy ; UE::Mass::)",
    "insertText": "CreateEntityCollections(System, TargetEntities, FMassArchetypeEntityCollection::FoldDuplicates, EntityCollectionsToDestroy)"
  },
  {
    "label": "BatchDestroyEntityChunks()",
    "kind": "Method",
    "detail": "Function (System .)",
    "insertText": "BatchDestroyEntityChunks(EntityCollectionsToDestroy)"
  },
  {
    "label": "FMassCommandAddFragmentsInternal()",
    "kind": "Method",
    "detail": "Function (} } ; template<EMassCommandCheckTime CheckTime,. . . TTypes> struct FMassCommandAddFragmentsInternal : public FMassBatchedEntityCommand { using Super = FMassBatchedEntityCommand ;)",
    "insertText": "FMassCommandAddFragmentsInternal() : Super(EMassCommandOperationType::Add DEBUG_NAME(\"AddFragments\")) , FragmentsAffected(UE::Mass::Utils::ConstructFragmentBitSet<CheckTime, TTypes...>())"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassCommandAddFragments_Execute)"
  },
  {
    "label": "CreateEntityCollections()",
    "kind": "Method",
    "detail": "Function (TArray<FMassArchetypeEntityCollection> EntityCollections ; UE::Mass::)",
    "insertText": "CreateEntityCollections(System, TargetEntities, FMassArchetypeEntityCollection::FoldDuplicates, EntityCollections)"
  },
  {
    "label": "BatchChangeFragmentCompositionForEntities()",
    "kind": "Method",
    "detail": "Function (System .)",
    "insertText": "BatchChangeFragmentCompositionForEntities(EntityCollections, FragmentsAffected, FMassFragmentBitSet())"
  },
  {
    "label": "FMassCommandRemoveFragmentsInternal()",
    "kind": "Method",
    "detail": "Function (} FMassFragmentBitSet FragmentsAffected ; } ; template<. . . TTypes> using FMassCommandAddFragments = FMassCommandAddFragmentsInternal<EMassCommandCheckTime::CompileTimeCheck,TTypes . . .> ; template<EMassCommandCheckTime CheckTime,. . . TTypes> struct FMassCommandRemoveFragmentsInternal : public FMassBatchedEntityCommand { using Super = FMassBatchedEntityCommand ;)",
    "insertText": "FMassCommandRemoveFragmentsInternal() : Super(EMassCommandOperationType::Remove DEBUG_NAME(\"RemoveFragments\")) , FragmentsAffected(UE::Mass::Utils::ConstructFragmentBitSet<CheckTime, TTypes...>())"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassCommandRemoveFragments_Execute)"
  },
  {
    "label": "BatchChangeFragmentCompositionForEntities()",
    "kind": "Method",
    "detail": "Function (System .)",
    "insertText": "BatchChangeFragmentCompositionForEntities(EntityCollections, FMassFragmentBitSet(), FragmentsAffected)"
  },
  {
    "label": "FMassCommandChangeTags()",
    "kind": "Method",
    "detail": "Function (} FMassFragmentBitSet FragmentsAffected ; } ; template<. . . TTypes> using FMassCommandRemoveFragments = FMassCommandRemoveFragmentsInternal<EMassCommandCheckTime::CompileTimeCheck,TTypes . . .> ; struct FMassCommandChangeTags : public FMassBatchedEntityCommand { using Super = FMassBatchedEntityCommand ;)",
    "insertText": "FMassCommandChangeTags() : Super(EMassCommandOperationType::ChangeComposition DEBUG_NAME(\"ChangeTags\"))"
  },
  {
    "label": "FMassCommandChangeTags()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassCommandChangeTags(EMassCommandOperationType OperationType, FMassTagBitSet TagsToAdd, FMassTagBitSet TagsToRemove DEBUG_NAME_PARAM(\"ChangeTags\")) : Super(OperationType FORWARD_DEBUG_NAME_PARAM) , TagsToAdd(TagsToAdd) , TagsToRemove(TagsToRemove)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassCommandChangeTags_Execute)"
  },
  {
    "label": "BatchChangeTagsForEntities()",
    "kind": "Method",
    "detail": "Function (System .)",
    "insertText": "BatchChangeTagsForEntities(EntityCollections, TagsToAdd, TagsToRemove)"
  },
  {
    "label": "FMassCommandAddTagsInternal()",
    "kind": "Method",
    "detail": "Function (} FMassTagBitSet TagsToAdd ; FMassTagBitSet TagsToRemove ; } ; template<EMassCommandCheckTime CheckTime,. . . TTypes> struct FMassCommandAddTagsInternal : public FMassCommandChangeTags { using Super = FMassCommandChangeTags ;)",
    "insertText": "FMassCommandAddTagsInternal() : Super( EMassCommandOperationType::Add, UE::Mass::Utils::ConstructTagBitSet<CheckTime, TTypes...>(), {} DEBUG_NAME(\"AddTags\"))"
  },
  {
    "label": "FMassCommandRemoveTagsInternal()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> using FMassCommandAddTag = FMassCommandAddTagsInternal<EMassCommandCheckTime::CompileTimeCheck,T> ; template<. . . TTypes> using FMassCommandAddTags = FMassCommandAddTagsInternal<EMassCommandCheckTime::CompileTimeCheck,TTypes . . .> ; template<EMassCommandCheckTime CheckTime,. . . TTypes> struct FMassCommandRemoveTagsInternal : public FMassCommandChangeTags { using Super = FMassCommandChangeTags ;)",
    "insertText": "FMassCommandRemoveTagsInternal() : Super( EMassCommandOperationType::Remove, {}, UE::Mass::Utils::ConstructTagBitSet<CheckTime, TTypes...>() DEBUG_NAME(\"RemoveTags\"))"
  },
  {
    "label": "FMassCommandSwapTagsInternal()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> using FMassCommandRemoveTag = FMassCommandRemoveTagsInternal<EMassCommandCheckTime::CompileTimeCheck,T> ; template<. . . TTypes> using FMassCommandRemoveTags = FMassCommandRemoveTagsInternal<EMassCommandCheckTime::CompileTimeCheck,TTypes . . .> ; template<EMassCommandCheckTime CheckTime,TOld,TNew> struct FMassCommandSwapTagsInternal : public FMassCommandChangeTags { using Super = FMassCommandChangeTags ;)",
    "insertText": "FMassCommandSwapTagsInternal() : Super( EMassCommandOperationType::ChangeComposition, UE::Mass::Utils::ConstructTagBitSet<CheckTime, TNew>(), UE::Mass::Utils::ConstructTagBitSet<CheckTime, TOld>() DEBUG_NAME(\"SwapTags\"))"
  },
  {
    "label": "FMassCommandAddFragmentInstances()",
    "kind": "Method",
    "detail": "Function (} } ; template<TOld,TNew> using FMassCommandSwapTags = FMassCommandSwapTagsInternal<EMassCommandCheckTime::CompileTimeCheck,TOld,TNew> ; template<. . . TOthers> struct FMassCommandAddFragmentInstances : public FMassBatchedEntityCommand { using Super = FMassBatchedEntityCommand ;)",
    "insertText": "FMassCommandAddFragmentInstances(EMassCommandOperationType OperationType = EMassCommandOperationType::Set DEBUG_NAME_PARAM(\"AddFragmentInstanceList\")) : Super(EMassCommandOperationType::Set FORWARD_DEBUG_NAME_PARAM) , FragmentsAffected(UE::Mass::Utils::ConstructFragmentBitSet<EMassCommandCheckTime::CompileTimeCheck, TOthers...>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FMassEntityHandle Entity, TOthers... InFragments)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Fragments .)",
    "insertText": "Add(InFragments...)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassCommandAddFragmentInstances_Execute)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FStructArrayView> GenericMultiArray ; GenericMultiArray .)",
    "insertText": "Reserve(Fragments.GetNumArrays())"
  },
  {
    "label": "GetAsGenericMultiArray()",
    "kind": "Method",
    "detail": "Function (Fragments .)",
    "insertText": "GetAsGenericMultiArray(GenericMultiArray)"
  },
  {
    "label": "CreateEntityRangesWithPayload()",
    "kind": "Method",
    "detail": "Function (TArray<FMassArchetypeEntityCollectionWithPayload> EntityCollections ;)",
    "insertText": "CreateEntityRangesWithPayload(System, TargetEntities, FMassArchetypeEntityCollection::FoldDuplicates , FMassGenericPayloadView(GenericMultiArray), EntityCollections)"
  },
  {
    "label": "BatchAddFragmentInstancesForEntities()",
    "kind": "Method",
    "detail": "Function (System .)",
    "insertText": "BatchAddFragmentInstancesForEntities(EntityCollections, FragmentsAffected)"
  },
  {
    "label": "FMassCommandBuildEntity()",
    "kind": "Method",
    "detail": "Function (} UE::Mass::TMultiArray<TOthers . . .> Fragments ; const FMassFragmentBitSet FragmentsAffected ; } ; template<. . . TOthers> struct FMassCommandBuildEntity : public FMassCommandAddFragmentInstances<TOthers . . .> { using Super = FMassCommandAddFragmentInstances<TOthers . . .> ;)",
    "insertText": "FMassCommandBuildEntity() : Super(EMassCommandOperationType::Create DEBUG_NAME(\"BuildEntity\"))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassCommandBuildEntity_Execute)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FStructArrayView> GenericMultiArray ; GenericMultiArray .)",
    "insertText": "Reserve(Super::Fragments.GetNumArrays())"
  },
  {
    "label": "CreateEntityRangesWithPayload()",
    "kind": "Method",
    "detail": "Function (TArray<FMassArchetypeEntityCollectionWithPayload> EntityCollections ;)",
    "insertText": "CreateEntityRangesWithPayload(System, Super::TargetEntities, FMassArchetypeEntityCollection::FoldDuplicates , FMassGenericPayloadView(GenericMultiArray), EntityCollections)"
  },
  {
    "label": "BatchBuildEntities()",
    "kind": "Method",
    "detail": "Function (System .)",
    "insertText": "BatchBuildEntities(EntityCollections[0], Super::FragmentsAffected, FMassArchetypeSharedFragmentValues())"
  },
  {
    "label": "FMassCommandBuildEntityWithSharedFragments()",
    "kind": "Method",
    "detail": "Function (} } } ; template<TSharedFragmentValues,. . . TOthers> struct FMassCommandBuildEntityWithSharedFragments : public FMassBatchedCommand { using Super = FMassBatchedCommand ;)",
    "insertText": "FMassCommandBuildEntityWithSharedFragments() : Super(EMassCommandOperationType::Create DEBUG_NAME(\"FMassCommandBuildEntityWithSharedFragments\")) , FragmentsAffected(UE::Mass::Utils::ConstructFragmentBitSet<EMassCommandCheckTime::CompileTimeCheck, TOthers...>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FMassEntityHandle Entity, FMassArchetypeSharedFragmentValues&& InSharedFragments, TOthers... InFragments)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (InSharedFragments .)",
    "insertText": "Sort()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 Hash =)",
    "insertText": "GetTypeHash(InSharedFragments)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPerSharedFragmentsHashData& Instance = Data .)",
    "insertText": "FindOrAdd(Hash, MoveTemp(InSharedFragments))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SIZE_T TotalSize = 0 ;)",
    "insertText": "for(const auto& KeyValue : Data)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassCommandBuildEntityWithSharedFragments_Execute)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (int FragmentTypesCount = UE::Mass::TMultiTypeList<TOthers . . .>::Ordinal + 1 ; TArray<FStructArrayView> GenericMultiArray ; GenericMultiArray .)",
    "insertText": "Reserve(FragmentTypesCount)"
  },
  {
    "label": "CreateEntityRangesWithPayload()",
    "kind": "Method",
    "detail": "Function (TArray<FMassArchetypeEntityCollectionWithPayload> EntityCollections ;)",
    "insertText": "CreateEntityRangesWithPayload(System, It.Value.TargetEntities, FMassArchetypeEntityCollection::FoldDuplicates , FMassGenericPayloadView(GenericMultiArray), EntityCollections)"
  },
  {
    "label": "BatchBuildEntities()",
    "kind": "Method",
    "detail": "Function (System .)",
    "insertText": "BatchBuildEntities(EntityCollections[0], FragmentsAffected, It.Value.SharedFragmentValues)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TotalCount + = KeyValue . Value . TargetEntities .)",
    "insertText": "Num()"
  },
  {
    "label": "FPerSharedFragmentsHashData()",
    "kind": "Method",
    "detail": "Function (} return TotalCount ; } # endif FMassFragmentBitSet FragmentsAffected ; struct FPerSharedFragmentsHashData {)",
    "insertText": "FPerSharedFragmentsHashData(FMassArchetypeSharedFragmentValues&& InSharedFragmentValues) : SharedFragmentValues(MoveTemp(InSharedFragmentValues))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} TArray<FMassEntityHandle> TargetEntities ; UE::Mass::TMultiArray<TOthers . . .> Fragments ; FMassArchetypeSharedFragmentValues SharedFragmentValues ; } ; TMap<uint32,FPerSharedFragmentsHashData> Data ; } ; template<EMassCommandOperationType OpType> struct FMassDeferredCommand : public FMassBatchedCommand { using Super = FMassBatchedCommand ; using FExecFunction = TFunction<)",
    "insertText": "void(FMassEntityManager& System)"
  },
  {
    "label": "FMassDeferredCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassDeferredCommand() : Super(OpType DEBUG_NAME(\"BatchedDeferredCommand\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FExecFunction&& ExecFunction)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DeferredFunctions .)",
    "insertText": "Add(MoveTemp(ExecFunction))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bHasWork = true ; } void)",
    "insertText": "Add(const FExecFunction& ExecFunction)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DeferredFunctions .)",
    "insertText": "Add(ExecFunction)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(MassDeferredCommand_Execute)"
  },
  {
    "label": "ExecFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecFunction(System)"
  }
]