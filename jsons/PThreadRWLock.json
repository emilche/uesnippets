[
  {
    "label": "FPThreadsRWLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPThreadsRWLock"
  },
  {
    "label": "FPThreadsRWLock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include<pthread . h> # include<errno . h> class FPThreadsRWLock { public :)",
    "insertText": "FPThreadsRWLock(const FPThreadsRWLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPThreadsRWLock&)",
    "insertText": "operator(const FPThreadsRWLock&)"
  },
  {
    "label": "FPThreadsRWLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPThreadsRWLock()"
  },
  {
    "label": "pthread_rwlock_init()",
    "kind": "Method",
    "detail": "Function (int Err =)",
    "insertText": "pthread_rwlock_init(&Mutex, nullptr)"
  },
  {
    "label": "pthread_rwlock_destroy()",
    "kind": "Method",
    "detail": "Function (int Err =)",
    "insertText": "pthread_rwlock_destroy(&Mutex)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadLock()"
  },
  {
    "label": "pthread_rwlock_rdlock()",
    "kind": "Method",
    "detail": "Function (int Err =)",
    "insertText": "pthread_rwlock_rdlock(&Mutex)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteLock()"
  },
  {
    "label": "pthread_rwlock_wrlock()",
    "kind": "Method",
    "detail": "Function (int Err =)",
    "insertText": "pthread_rwlock_wrlock(&Mutex)"
  },
  {
    "label": "TryReadLock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryReadLock()"
  },
  {
    "label": "pthread_rwlock_tryrdlock()",
    "kind": "Method",
    "detail": "Function (int Err =)",
    "insertText": "pthread_rwlock_tryrdlock(&Mutex)"
  },
  {
    "label": "pthread_rwlock_trywrlock()",
    "kind": "Method",
    "detail": "Function (int Err =)",
    "insertText": "pthread_rwlock_trywrlock(&Mutex)"
  },
  {
    "label": "pthread_rwlock_unlock()",
    "kind": "Method",
    "detail": "Function (int Err =)",
    "insertText": "pthread_rwlock_unlock(&Mutex)"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteUnlock()"
  }
]