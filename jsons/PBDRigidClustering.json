[
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FClusterDestoryParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterDestoryParameters"
  },
  {
    "label": "FRigidClustering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidClustering"
  },
  {
    "label": "FMomentumRestoringData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMomentumRestoringData"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ClusterUnionManager . h \" # include \" Chaos / PBDRigidClusteredParticles . h \" # include \" Chaos / PBDCollisionConstraints . h \" # include \" Chaos / Transform . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / ExternalCollisionData . h \" # include \" Chaos / TriangleMesh . h \" # include \" Chaos / ClusterCreationParameters . h \" # include \" Chaos / GeometryParticlesfwd . h \" # include \" Framework / BufferedData . h \" # include \" Chaos / PBDRigidClusteringTypes . h \" namespace Chaos { class FPBDCollisionConstraints ; struct FClusterDestoryParameters { bool bReturnInternalOnly : true ; } ; class FRigidClustering { public : typedef FPBDRigidsEvolutionGBF FRigidEvolution ; typedef FPBDRigidParticleHandle* FRigidHandle ; typedef TArray<FRigidHandle> FRigidHandleArray ; typedef FPBDRigidClusteredParticleHandle* FClusterHandle ; typedef TMap<FClusterHandle,FRigidHandleArray> FClusterMap ; typedef TFunction<)",
    "insertText": "void(FRigidClustering&, FRigidHandle)"
  },
  {
    "label": "FRigidClustering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRigidClustering(FRigidEvolution& InEvolution, FPBDRigidClusteredParticles& InParticles, const TArray<ISimCallbackObject*>* InStrainModifiers)"
  },
  {
    "label": "FRigidClustering()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRigidClustering()"
  },
  {
    "label": "CreateClusterParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidClusteredParticleHandle*)",
    "insertText": "CreateClusterParticle(const int32 ClusterGroupIndex, TArray<Chaos::FPBDRigidParticleHandle*>&& Children, const FClusterCreationParameters& Parameters = FClusterCreationParameters(), const Chaos::FImplicitObjectPtr& ProxyGeometry = nullptr, const FRigidTransform3* ForceMassOrientation = nullptr, const FUniqueIdx* ExistingIndex = nullptr)"
  },
  {
    "label": "AddParticlesToCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParticlesToCluster(FPBDRigidClusteredParticleHandle* Cluster, const TArray<FPBDRigidParticleHandle*>& InChildren, const TMap<FPBDRigidParticleHandle*, FPBDRigidParticleHandle*>& ChildToParentMap)"
  },
  {
    "label": "RemoveParticlesFromCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParticlesFromCluster(FPBDRigidClusteredParticleHandle* Cluster, const TArray<FPBDRigidParticleHandle*>& InChildren)"
  },
  {
    "label": "UnionClusterGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnionClusterGroups()"
  },
  {
    "label": "DeactivateClusterParticle()",
    "kind": "Method",
    "detail": "Function (TSet<FPBDRigidParticleHandle*>)",
    "insertText": "DeactivateClusterParticle(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "ReleaseClusterParticles()",
    "kind": "Method",
    "detail": "Function (TSet<FPBDRigidParticleHandle*>)",
    "insertText": "ReleaseClusterParticles(FPBDRigidClusteredParticleHandle* ClusteredParticle, bool bForceRelease = false)"
  },
  {
    "label": "ReleaseClusterParticlesNoInternalCluster()",
    "kind": "Method",
    "detail": "Function (TSet<FPBDRigidParticleHandle*>)",
    "insertText": "ReleaseClusterParticlesNoInternalCluster(FPBDRigidClusteredParticleHandle* ClusteredParticle, bool bForceRelease = false)"
  },
  {
    "label": "ReleaseClusterParticles()",
    "kind": "Method",
    "detail": "Function (TSet<FPBDRigidParticleHandle*>)",
    "insertText": "ReleaseClusterParticles(TArray<FPBDRigidParticleHandle*> ChildrenParticles, bool bTriggerBreakEvents = false)"
  },
  {
    "label": "ForceReleaseChildParticleAndParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceReleaseChildParticleAndParents(FPBDRigidClusteredParticleHandle* ChildClusteredParticle, bool bTriggerBreakEvents)"
  },
  {
    "label": "DestroyClusterParticle()",
    "kind": "Method",
    "detail": "Function (FPBDRigidClusteredParticleHandle*)",
    "insertText": "DestroyClusterParticle(FPBDRigidClusteredParticleHandle* ClusteredParticle, const FClusterDestoryParameters& Parameters = FClusterDestoryParameters())"
  },
  {
    "label": "BreakCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BreakCluster(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "BreakClustersByProxy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BreakClustersByProxy(const IPhysicsProxyBase* Proxy)"
  },
  {
    "label": "AdvanceClustering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceClustering(const FReal dt, FPBDCollisionConstraints& CollisionRule)"
  },
  {
    "label": "BreakingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakingModel()"
  },
  {
    "label": "BreakingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakingModel(TArray<FPBDRigidClusteredParticleHandle*>& InParticles)"
  },
  {
    "label": "BreakingModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BreakingModel(TArrayView<FPBDRigidClusteredParticleHandle*> InParticles)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visitor(FClusterHandle Cluster, FVisitorFunction Function)"
  },
  {
    "label": "GetActiveClusterIndex()",
    "kind": "Method",
    "detail": "Function (FPBDRigidParticleHandle*)",
    "insertText": "GetActiveClusterIndex(FPBDRigidParticleHandle* Child)"
  },
  {
    "label": "GetClusterIdsArray()",
    "kind": "Method",
    "detail": "Function (TArrayCollectionArray<ClusterId>&)",
    "insertText": "GetClusterIdsArray()"
  },
  {
    "label": "GetRigidClusteredFlagsArray()",
    "kind": "Method",
    "detail": "Function (} const TArrayCollectionArray<FRigidClusteredFlags>&)",
    "insertText": "GetRigidClusteredFlagsArray()"
  },
  {
    "label": "GetChildToParentMap()",
    "kind": "Method",
    "detail": "Function (} const TArrayCollectionArray<FRigidTransform3>&)",
    "insertText": "GetChildToParentMap()"
  },
  {
    "label": "GetStrainArray()",
    "kind": "Method",
    "detail": "Function (} TArrayCollectionArray<FRealSingle>&)",
    "insertText": "GetStrainArray()"
  },
  {
    "label": "GetChildrenMap()",
    "kind": "Method",
    "detail": "Function (} FClusterMap&)",
    "insertText": "GetChildrenMap()"
  },
  {
    "label": "ResetAllEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetAllEvents()"
  },
  {
    "label": "GetAllClusterBreakings()",
    "kind": "Method",
    "detail": "Function (const TArray<FBreakingData>&)",
    "insertText": "GetAllClusterBreakings()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MAllClusterBreakings .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetAllClusterCrumblings()",
    "kind": "Method",
    "detail": "Function (} const TArray<FCrumblingData>&)",
    "insertText": "GetAllClusterCrumblings()"
  },
  {
    "label": "GetConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (} const TArrayCollectionArray<TArray<TConnectivityEdge<FReal>>>&)",
    "insertText": "GetConnectivityEdges()"
  },
  {
    "label": "FindClosestChild()",
    "kind": "Method",
    "detail": "Function (} FPBDRigidParticleHandle*)",
    "insertText": "FindClosestChild(const FPBDRigidClusteredParticleHandle* ClusteredParticle, const FVec3& WorldLocation)"
  },
  {
    "label": "FindClosestParticle()",
    "kind": "Method",
    "detail": "Function (FPBDRigidParticleHandle*)",
    "insertText": "FindClosestParticle(const TArray<FPBDRigidParticleHandle*>& Particles, const FVec3& WorldLocation)"
  },
  {
    "label": "FindChildrenWithinRadius()",
    "kind": "Method",
    "detail": "Function (TArray<FPBDRigidParticleHandle*>)",
    "insertText": "FindChildrenWithinRadius(const FPBDRigidClusteredParticleHandle* ClusteredParticle, const FVec3& WorldLocation, FReal Radius, bool bAlwaysReturnClosest)"
  },
  {
    "label": "FindParticlesWithinRadius()",
    "kind": "Method",
    "detail": "Function (TArray<FPBDRigidParticleHandle*>)",
    "insertText": "FindParticlesWithinRadius(const TArray<FPBDRigidParticleHandle*>& Particles, const FVec3& WorldLocation, FReal Radius, bool bAlwaysReturnClosest)"
  },
  {
    "label": "SetClusterConnectionFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClusterConnectionFactor(FReal ClusterConnectionFactorIn)"
  },
  {
    "label": "SetClusterUnionConnectionType()",
    "kind": "Method",
    "detail": "Function (MClusterConnectionFactor = ClusterConnectionFactorIn ; } void)",
    "insertText": "SetClusterUnionConnectionType(FClusterCreationParameters::EConnectionMethod ClusterConnectionType)"
  },
  {
    "label": "GetClusterUnionConnectionType()",
    "kind": "Method",
    "detail": "Function (MClusterUnionConnectionType = ClusterConnectionType ; } FClusterCreationParameters::EConnectionMethod)",
    "insertText": "GetClusterUnionConnectionType()"
  },
  {
    "label": "GenerateConnectionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateConnectionGraph(Chaos::FPBDRigidClusteredParticleHandle* Parent, const FClusterCreationParameters & Parameters = FClusterCreationParameters())"
  },
  {
    "label": "ClearConnectionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConnectionGraph(FPBDRigidClusteredParticleHandle* Parent)"
  },
  {
    "label": "GetTopLevelClusterParents()",
    "kind": "Method",
    "detail": "Function (const TSet<Chaos::FPBDRigidClusteredParticleHandle*>&)",
    "insertText": "GetTopLevelClusterParents()"
  },
  {
    "label": "SetExternalStrain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalStrain(FPBDRigidClusteredParticleHandle* Particle, FRealSingle Strain)"
  },
  {
    "label": "BuildConvexOptimizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildConvexOptimizer(FPBDRigidClusteredParticleHandle* Particle)"
  },
  {
    "label": "ShouldUnionsHaveCollisionParticles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUnionsHaveCollisionParticles()"
  },
  {
    "label": "GetClusterUnionManager()",
    "kind": "Method",
    "detail": "Function (FClusterUnionManager&)",
    "insertText": "GetClusterUnionManager()"
  },
  {
    "label": "RemoveNodeConnections()",
    "kind": "Method",
    "detail": "Function (const TSet<Chaos::FPBDRigidClusteredParticleHandle*> ConstEmptySet ; return ConstEmptySet ; } void)",
    "insertText": "RemoveNodeConnections(FPBDRigidParticleHandle* Child)"
  },
  {
    "label": "RemoveNodeConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNodeConnections(FPBDRigidClusteredParticleHandle* Child)"
  },
  {
    "label": "RemoveFilteredNodeConnections()",
    "kind": "Method",
    "detail": "Function (template<TFilter> void)",
    "insertText": "RemoveFilteredNodeConnections(FPBDRigidClusteredParticleHandle* ClusteredChild, TFilter&& Filter)"
  },
  {
    "label": "ConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (bool bHasFilter = std::is_invocable_r_v<bool,TFilter,const TConnectivityEdge<FReal>&> ; TArray<TConnectivityEdge<FReal>>& Edges = ClusteredChild ->)",
    "insertText": "ConnectivityEdges()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (const TConnectivityEdge<FReal>& Edge = Edges [ EdgeIndex ] ; FPBDRigidParticleHandle* Sibling = Edge . Sibling ; if)",
    "insertText": "constexpr(bHasFilter)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (continue ; } Edges .)",
    "insertText": "RemoveAtSwap(EdgeIndex, EAllowShrinking::No)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Sibling != nullptr)"
  },
  {
    "label": "CastToClustered()",
    "kind": "Method",
    "detail": "Function (TArray<TConnectivityEdge<FReal>>& OtherEdges = Sibling ->)",
    "insertText": "CastToClustered()->ConnectivityEdges()"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (const int32 Idx = OtherEdges .)",
    "insertText": "IndexOfByKey(ClusteredChild)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (OtherEdges .)",
    "insertText": "RemoveAtSwap(Idx)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(OtherEdges.IndexOfByKey(ClusteredChild) == INDEX_NONE)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(!bHasFilter)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Edges .)",
    "insertText": "SetNum(0)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} else { Edges .)",
    "insertText": "Shrink()"
  },
  {
    "label": "CreateNodeConnection()",
    "kind": "Method",
    "detail": "Function (} } template<ParticleHandleTypeA,ParticleHandleTypeB> void)",
    "insertText": "CreateNodeConnection(ParticleHandleTypeA* A, ParticleHandleTypeB* B)"
  },
  {
    "label": "CreateNodeConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNodeConnection(A->CastToClustered(), B->CastToClustered())"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ensureMsgf(false, TEXT(\"CreateNodeConnection asked to connect a null particle, ignoring connection.\"))"
  },
  {
    "label": "CreateNodeConnection()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateNodeConnection(FPBDRigidClusteredParticleHandle* A, FPBDRigidClusteredParticleHandle* B)"
  },
  {
    "label": "CleanupInternalClustersForProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupInternalClustersForProxies(TArrayView<IPhysicsProxyBase*> Proxies)"
  },
  {
    "label": "HandleConnectivityOnReleaseClusterParticle()",
    "kind": "Method",
    "detail": "Function (TSet<FPBDRigidParticleHandle*>)",
    "insertText": "HandleConnectivityOnReleaseClusterParticle(FPBDRigidClusteredParticleHandle* ClusteredParticle, bool bCreateNewClusters)"
  },
  {
    "label": "DisableCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableCluster(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "ShouldThrottleParticleRelease()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldThrottleParticleRelease()"
  },
  {
    "label": "ThrottleReleasedParticlesIfNecessary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrottleReleasedParticlesIfNecessary(TSet<FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "ThrottleReleasedParticlesIfNecessary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrottleReleasedParticlesIfNecessary(TArray<FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "DisableParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableParticle(FPBDRigidParticleHandle* ParticleToDisable, bool bRemoveFromChildrenMap = true)"
  },
  {
    "label": "ComputeStrainFromCollision()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ComputeStrainFromCollision(const FPBDCollisionConstraints& CollisionRule, const FReal Dt)"
  },
  {
    "label": "ResetCollisionImpulseArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCollisionImpulseArray()"
  },
  {
    "label": "ApplyStrainModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyStrainModifiers(const TArray<FPBDRigidClusteredParticleHandle*>& StrainedParticles)"
  },
  {
    "label": "UpdateConnectivityGraphUsingPointImplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConnectivityGraphUsingPointImplicit(const TArray<FPBDRigidParticleHandle*>& Particles, FReal CollisionThicknessPercent, const TSet<FPBDRigidParticleHandle*>* FromParticles = nullptr, const TSet<FPBDRigidParticleHandle*>* ToParticles = nullptr)"
  },
  {
    "label": "UpdateConnectivityGraphUsingPointImplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConnectivityGraphUsingPointImplicit(Chaos::FPBDRigidClusteredParticleHandle* Parent, const FClusterCreationParameters& Parameters = FClusterCreationParameters())"
  },
  {
    "label": "FixConnectivityGraphUsingDelaunayTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixConnectivityGraphUsingDelaunayTriangulation(const TArray<FPBDRigidParticleHandle*>& Particles, const FClusterCreationParameters& Parameters = FClusterCreationParameters(), const TSet<FPBDRigidParticleHandle*>* FromParticles = nullptr, const TSet<FPBDRigidParticleHandle*>* ToParticles = nullptr)"
  },
  {
    "label": "FixConnectivityGraphUsingDelaunayTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixConnectivityGraphUsingDelaunayTriangulation(Chaos::FPBDRigidClusteredParticleHandle* Parent, const FClusterCreationParameters& Parameters = FClusterCreationParameters())"
  },
  {
    "label": "UpdateConnectivityGraphUsingDelaunayTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConnectivityGraphUsingDelaunayTriangulation(const TArray<FPBDRigidParticleHandle*>& Particles, const FClusterCreationParameters& Parameters = FClusterCreationParameters(), const TSet<FPBDRigidParticleHandle*>* FromParticles = nullptr, const TSet<FPBDRigidParticleHandle*>* ToParticles = nullptr)"
  },
  {
    "label": "UpdateConnectivityGraphUsingDelaunayTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConnectivityGraphUsingDelaunayTriangulation(const Chaos::FPBDRigidClusteredParticleHandle* Parent, const FClusterCreationParameters& Parameters = FClusterCreationParameters())"
  },
  {
    "label": "UpdateConnectivityGraphUsingDelaunayTriangulationWithBoundsOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConnectivityGraphUsingDelaunayTriangulationWithBoundsOverlaps(const TArray<FPBDRigidParticleHandle*>& Particles, const FClusterCreationParameters& Parameters = FClusterCreationParameters(), const TSet<FPBDRigidParticleHandle*>* FromParticles = nullptr, const TSet<FPBDRigidParticleHandle*>* ToParticles = nullptr)"
  },
  {
    "label": "UpdateConnectivityGraphUsingDelaunayTriangulationWithBoundsOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConnectivityGraphUsingDelaunayTriangulationWithBoundsOverlaps(const Chaos::FPBDRigidClusteredParticleHandle* Parent, const FClusterCreationParameters& Parameters = FClusterCreationParameters())"
  },
  {
    "label": "RemoveChildFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildFromParent(FPBDRigidParticleHandle* Child, FPBDRigidClusteredParticleHandle* ClusteredParent)"
  },
  {
    "label": "RemoveChildFromParentAndChildrenArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildFromParentAndChildrenArray(FPBDRigidParticleHandle* Child, FPBDRigidClusteredParticleHandle* ClusteredParent)"
  },
  {
    "label": "TrackBreakingCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackBreakingCollision(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "RestoreBreakingMomentum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreBreakingMomentum()"
  },
  {
    "label": "RemoveFromMomentumRestoringStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromMomentumRestoringStructures(const FPBDRigidParticleHandle* ParticleToRemove)"
  },
  {
    "label": "SendBreakingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBreakingEvent(FPBDRigidClusteredParticleHandle* ClusteredParticle, bool bFromCrumble)"
  },
  {
    "label": "SendCrumblingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCrumblingEvent(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "ReleaseClusterParticlesImpl()",
    "kind": "Method",
    "detail": "Function (TSet<FPBDRigidParticleHandle*>)",
    "insertText": "ReleaseClusterParticlesImpl(FPBDRigidClusteredParticleHandle* ClusteredParticle, bool bForceRelease, bool bCreateNewClusters)"
  },
  {
    "label": "FindIslandsInChildren()",
    "kind": "Method",
    "detail": "Function (using FParticleIsland = TArray<FPBDRigidParticleHandle*> ; TArray<FParticleIsland>)",
    "insertText": "FindIslandsInChildren(const FPBDRigidClusteredParticleHandle* ClusteredParticle, bool bTraverseInterclusterEdges)"
  },
  {
    "label": "CreateClustersFromNewIslands()",
    "kind": "Method",
    "detail": "Function (TArray<FPBDRigidParticleHandle*>)",
    "insertText": "CreateClustersFromNewIslands(TArray<FParticleIsland>& Islands, FPBDRigidClusteredParticleHandle* ClusteredParent)"
  },
  {
    "label": "UpdateTopLevelParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTopLevelParticle(FPBDRigidClusteredParticleHandle* Particle)"
  }
]