[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12DescriptorHeap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DescriptorHeap"
  },
  {
    "label": "FRayTracingShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingShaderBindings"
  },
  {
    "label": "FD3D12ViewSubset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ViewSubset"
  },
  {
    "label": "FD3D12Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Device"
  },
  {
    "label": "FD3D12Resource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Resource"
  },
  {
    "label": "FD3D12Heap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Heap"
  },
  {
    "label": "FD3D12ResourceLocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceLocation"
  },
  {
    "label": "FD3D12RootSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RootSignature"
  },
  {
    "label": "FD3D12ExplicitDescriptorCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ExplicitDescriptorCache"
  },
  {
    "label": "FD3D12DeferredDeleteObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DeferredDeleteObject"
  },
  {
    "label": "FD3D12ContextCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ContextCommon"
  },
  {
    "label": "FScopedResourceBarrier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedResourceBarrier"
  },
  {
    "label": "FD3D12DepthStencilView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DepthStencilView"
  },
  {
    "label": "FD3D12RenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RenderTargetView"
  },
  {
    "label": "FD3D12ShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ShaderResourceView"
  },
  {
    "label": "FD3D12UnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UnorderedAccessView"
  },
  {
    "label": "FD3D12ContextCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ContextCopy"
  },
  {
    "label": "FD3D12CopyScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CopyScope"
  },
  {
    "label": "FD3D12CommandContextBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContextBase"
  },
  {
    "label": "FD3D12CommandContextRedirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContextRedirector"
  },
  {
    "label": "FD3D12CommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContext"
  },
  {
    "label": "ShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderType"
  },
  {
    "label": "FD3D12TransitionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12TransitionData"
  },
  {
    "label": "FD3D12DiscardResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DiscardResource"
  },
  {
    "label": "FD3D12Adapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Adapter"
  },
  {
    "label": "FD3D12ContextArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ContextArray"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12Allocation . h \" # include \" D3D12BindlessDescriptors . h \" # include \" D3D12CommandList . h \" # include \" D3D12Queue . h \" # include \" D3D12Query . h \" # include \" D3D12Resources . h \" # include \" D3D12StateCachePrivate . h \" # include \" D3D12Submission . h \" # include \" D3D12Texture . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" RHICoreShader . h \" # include \" RHICore . h \" # include \" RHIShaderBindingLayout . h \" # include \" GPUProfiler . h \" # if USE_PIX # include \" Windows / AllowWindowsPlatformTypes . h \" THIRD_PARTY_INCLUDES_START # include<pix3 . h> # include \" Windows / HideWindowsPlatformTypes . h \" THIRD_PARTY_INCLUDES_END # endif enum class ED3D12PipelineType : uint8 ; struct FD3D12DescriptorHeap ; struct FRayTracingShaderBindings ; struct FD3D12ViewSubset ; class FD3D12Device ; class FD3D12Resource ; class FD3D12Heap ; struct FD3D12DescriptorHeap ; class FD3D12ResourceLocation ; class FD3D12RootSignature ; class FD3D12ExplicitDescriptorCache ; struct FD3D12DeferredDeleteObject { enum class EType { RHIObject,D3DObject,Heap,DescriptorHeap,# if PLATFORM_SUPPORTS_BINDLESS_RENDERING BindlessDescriptor,BindlessDescriptorHeap,# endif CPUAllocation,DescriptorBlock,VirtualAllocation,Func } Type ; union { FD3D12Resource* RHIObject ; FD3D12Heap* Heap ; FD3D12DescriptorHeap* DescriptorHeap ; ID3D12Object* D3DObject ; TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (struct { FRHIDescriptorHandle Handle ; FD3D12Device* Device ; } BindlessDescriptor ; void* CPUAllocation ; struct { FD3D12OnlineDescriptorBlock* Block ; FD3D12OnlineDescriptorManager* Manager ; } DescriptorBlock ; struct { FPlatformMemory::FPlatformVirtualMemoryBlock VirtualBlock ; ETextureCreateFlags Flags ; uint64 CommittedTextureSize ; void* RawMemory ; } VirtualAllocDescriptor ; } ;)",
    "insertText": "FD3D12DeferredDeleteObject(FD3D12Resource* RHIObject) : Type(EType::RHIObject) , RHIObject(RHIObject)"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12DeferredDeleteObject(FD3D12Heap* InHeap) : Type(EType::Heap) , Heap(InHeap)"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12DeferredDeleteObject(FD3D12DescriptorHeap* InDescriptorHeap, EType Type) : Type(Type) , DescriptorHeap(InDescriptorHeap)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING)",
    "insertText": "check(Type == EType::BindlessDescriptorHeap || Type == EType::DescriptorHeap)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "check(Type == EType::DescriptorHeap)"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FD3D12DeferredDeleteObject(ID3D12Object* D3DObject) : Type(EType::D3DObject) , D3DObject(D3DObject)"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_SUPPORTS_BINDLESS_RENDERING)",
    "insertText": "FD3D12DeferredDeleteObject(FRHIDescriptorHandle Handle, FD3D12Device* Device) : Type(EType::BindlessDescriptor) , BindlessDescriptor({ Handle, Device })"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "FD3D12DeferredDeleteObject(void* Ptr, EType Type) : Type(Type) , CPUAllocation(Ptr)"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12DeferredDeleteObject(FD3D12OnlineDescriptorBlock* Block, FD3D12OnlineDescriptorManager* Manager) : Type(EType::DescriptorBlock) , DescriptorBlock({ Block, Manager })"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12DeferredDeleteObject(FPlatformMemory::FPlatformVirtualMemoryBlock& VirtualBlock, ETextureCreateFlags Flags, uint64 CommittedTextureSize, void* RawMemory) : Type(EType::VirtualAllocation) , VirtualAllocDescriptor({ VirtualBlock, Flags, CommittedTextureSize, RawMemory })"
  },
  {
    "label": "FD3D12DeferredDeleteObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12DeferredDeleteObject(TUniqueFunction<void()>&& Func) : Type(EType::Func) , Func(new TUniqueFunction<void()>(MoveTemp(Func)))"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ED3D12Units { Raw,Microseconds } ; enum class ED3D12FlushFlags { None = 0,WaitForSubmission = 1,WaitForCompletion = 2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ED3D12FlushFlags)"
  },
  {
    "label": "FD3D12ContextCommon()",
    "kind": "Method",
    "detail": "Function (class FScopedResourceBarrier ; protected :)",
    "insertText": "FD3D12ContextCommon(FD3D12Device* Device, ED3D12QueueType QueueType, bool bIsDefaultContext)"
  },
  {
    "label": "FD3D12ContextCommon()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FD3D12ContextCommon()"
  },
  {
    "label": "OpenCommandList()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OpenCommandList()"
  },
  {
    "label": "CloseCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseCommandList()"
  },
  {
    "label": "ClearState()",
    "kind": "Method",
    "detail": "Function (public : enum class EClearStateMode { TransientOnly,All } ; void)",
    "insertText": "ClearState(EClearStateMode ClearStateMode = EClearStateMode::All)"
  },
  {
    "label": "ConditionalClearShaderResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConditionalClearShaderResource(FD3D12ResourceLocation* Resource, EShaderParameterTypeMask ShaderParameterTypeMask)"
  },
  {
    "label": "SignalSyncPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SignalSyncPoint(FD3D12SyncPoint* SyncPoint)"
  },
  {
    "label": "WaitSyncPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitSyncPoint(FD3D12SyncPoint* SyncPoint)"
  },
  {
    "label": "SignalManualFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalManualFence(ID3D12Fence* Fence, uint64 Value)"
  },
  {
    "label": "WaitManualFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitManualFence(ID3D12Fence* Fence, uint64 Value)"
  },
  {
    "label": "InsertTimestamp()",
    "kind": "Method",
    "detail": "Function (FD3D12QueryLocation)",
    "insertText": "InsertTimestamp(ED3D12Units Units, uint64* Target)"
  },
  {
    "label": "AllocateQuery()",
    "kind": "Method",
    "detail": "Function (FD3D12QueryLocation)",
    "insertText": "AllocateQuery(ED3D12QueryType Type, void* Target)"
  },
  {
    "label": "SetReservedBufferCommitSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReservedBufferCommitSize(FD3D12Buffer* Buffer, uint64 CommitSizeInBytes)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize(TArray<FD3D12Payload*>& OutPayloads)"
  },
  {
    "label": "IsAsyncComputeContext()",
    "kind": "Method",
    "detail": "Function (FD3D12Device* const Device ; ED3D12QueueType const QueueType ; bool)",
    "insertText": "IsAsyncComputeContext()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (ContextSyncPoint =)",
    "insertText": "Create(ED3D12SyncPointType::GPUAndCPU)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BatchedSyncPoints . ToSignal .)",
    "insertText": "Add(ContextSyncPoint)"
  },
  {
    "label": "BindDiagnosticBuffer()",
    "kind": "Method",
    "detail": "Function (} return ContextSyncPoint ; } struct { TArray<FD3D12SyncPointRef> ToWait ; TArray<FD3D12SyncPointRef> ToSignal ; } BatchedSyncPoints ; void)",
    "insertText": "BindDiagnosticBuffer(FD3D12RootSignature const* RootSignature, ED3D12PipelineType PipelineType)"
  },
  {
    "label": "BeginRecursiveCommand()",
    "kind": "Method",
    "detail": "Function (private : FD3D12QueryAllocator TimestampQueries ; FD3D12QueryAllocator OcclusionQueries ; FD3D12QueryAllocator PipelineStatsQueries ; FD3D12ResourceBarrierBatcher ResourceBarrierBatcher ; FD3D12CommandList* CommandList = nullptr ; FD3D12CommandAllocator* CommandAllocator = nullptr ; TArray<FD3D12Payload*> Payloads ; FD3D12SyncPointRef ContextSyncPoint ; public : void)",
    "insertText": "BeginRecursiveCommand()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (} protected : FD3D12CommandList&)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "OpenIfNotAlready()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenIfNotAlready()"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (enum class EPhase { Wait,UpdateReservedResources,Execute,Signal } CurrentPhase = EPhase::Wait ; FD3D12Payload*)",
    "insertText": "GetPayload(EPhase Phase)"
  },
  {
    "label": "NewPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewPayload()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} CurrentPhase = Phase ; return Payloads .)",
    "insertText": "Last()"
  },
  {
    "label": "FlushCommands()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "FlushCommands(ED3D12FlushFlags FlushFlags = ED3D12FlushFlags::None)"
  },
  {
    "label": "ConditionalSplitCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalSplitCommandList()"
  },
  {
    "label": "BaseCommandList()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "BaseCommandList()"
  },
  {
    "label": "CopyCommandList()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "CopyCommandList()"
  },
  {
    "label": "GraphicsCommandList()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "GraphicsCommandList()"
  },
  {
    "label": "GraphicsCommandList1()",
    "kind": "Method",
    "detail": "Function (} # if D3D12_MAX_COMMANDLIST_INTERFACE> = 1 auto)",
    "insertText": "GraphicsCommandList1()"
  },
  {
    "label": "GraphicsCommandList2()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 2 auto)",
    "insertText": "GraphicsCommandList2()"
  },
  {
    "label": "GraphicsCommandList3()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 3 auto)",
    "insertText": "GraphicsCommandList3()"
  },
  {
    "label": "GraphicsCommandList4()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 4 auto)",
    "insertText": "GraphicsCommandList4()"
  },
  {
    "label": "GraphicsCommandList5()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 5 auto)",
    "insertText": "GraphicsCommandList5()"
  },
  {
    "label": "GraphicsCommandList6()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 6 auto)",
    "insertText": "GraphicsCommandList6()"
  },
  {
    "label": "GraphicsCommandList7()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 7 auto)",
    "insertText": "GraphicsCommandList7()"
  },
  {
    "label": "GraphicsCommandList8()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 8 auto)",
    "insertText": "GraphicsCommandList8()"
  },
  {
    "label": "GraphicsCommandList9()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 9 auto)",
    "insertText": "GraphicsCommandList9()"
  },
  {
    "label": "GraphicsCommandList10()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 1 0 auto)",
    "insertText": "GraphicsCommandList10()"
  },
  {
    "label": "DebugCommandList()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_SUPPORTS_DEBUG_COMMAND_LIST auto)",
    "insertText": "DebugCommandList()"
  },
  {
    "label": "RayTracingCommandList()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_RHI_RAYTRACING auto)",
    "insertText": "RayTracingCommandList()"
  },
  {
    "label": "AftermathHandle()",
    "kind": "Method",
    "detail": "Function (} # endif # if NV_AFTERMATH auto)",
    "insertText": "AftermathHandle()"
  },
  {
    "label": "BeginQuery()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "BeginQuery(FD3D12QueryLocation const& Location)"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCommandList().BeginQuery(Location)"
  },
  {
    "label": "EndQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndQuery(FD3D12QueryLocation const& Location)"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCommandList().EndQuery (Location)"
  },
  {
    "label": "UpdateResidency()",
    "kind": "Method",
    "detail": "Function (} # if ENABLE_RESIDENCY_MANAGEMENT void)",
    "insertText": "UpdateResidency(const FD3D12Resource* Resource)"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCommandList().UpdateResidency(Resource)"
  },
  {
    "label": "AddPendingResourceBarrier()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "AddPendingResourceBarrier(FD3D12Resource* Resource, D3D12_RESOURCE_STATES After, uint32 SubResource, CResourceState& ResourceState_OnCommandList)"
  },
  {
    "label": "AddTransitionBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransitionBarrier(FD3D12Resource* pResource, D3D12_RESOURCE_STATES Before, D3D12_RESOURCE_STATES After, uint32 Subresource, CResourceState* ResourceState_OnCommandList = nullptr)"
  },
  {
    "label": "AddAliasingBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAliasingBarrier(ID3D12Resource* InResourceBefore, ID3D12Resource* InResourceAfter)"
  },
  {
    "label": "AddUAVBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUAVBarrier()"
  },
  {
    "label": "FlushResourceBarriers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushResourceBarriers()"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionResource(class FD3D12DepthStencilView* View)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionResource(class FD3D12DepthStencilView* View, D3D12_RESOURCE_STATES After)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionResource(class FD3D12RenderTargetView* View, D3D12_RESOURCE_STATES After)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionResource(class FD3D12ShaderResourceView* View, D3D12_RESOURCE_STATES After)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionResource(class FD3D12UnorderedAccessView* View, D3D12_RESOURCE_STATES After)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransitionResource(FD3D12Resource* Resource, D3D12_RESOURCE_STATES Before, D3D12_RESOURCE_STATES After, uint32 Subresource)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransitionResource(FD3D12Resource* Resource, D3D12_RESOURCE_STATES Before, D3D12_RESOURCE_STATES After, FD3D12ViewSubset const& ViewSubset)"
  },
  {
    "label": "TransitionResource()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TransitionResource(FD3D12Resource* InResource, CResourceState& ResourceState_OnCommandList, uint32 InSubresourceIndex, D3D12_RESOURCE_STATES InBeforeState, D3D12_RESOURCE_STATES InAfterState, bool bInForceAfterState)"
  },
  {
    "label": "FD3D12ContextCopy()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D12ContextCopy final : public FD3D12ContextCommon { public :)",
    "insertText": "FD3D12ContextCopy(FD3D12Device* Device) : FD3D12ContextCommon(Device, ED3D12QueueType::Copy, false)"
  },
  {
    "label": "GetSyncPoint()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12CopyScope final { private : FD3D12Device* const Device ; FD3D12SyncPointRef SyncPoint ; # if DO_CHECK bool bSyncPointRetrieved = false ; # endif public : FD3D12ContextCopy& Context ; FD3D12SyncPoint*)",
    "insertText": "GetSyncPoint()"
  },
  {
    "label": "FD3D12CopyScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12CopyScope(FD3D12Device* Device, ED3D12SyncPointType SyncPointType, FD3D12SyncPointRef const& WaitSyncPoint = {})"
  },
  {
    "label": "FD3D12CopyScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12CopyScope()"
  },
  {
    "label": "FD3D12CommandContextBase()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D12CommandContextBase : public IRHICommandContext,public FD3D12AdapterChild { public :)",
    "insertText": "FD3D12CommandContextBase(FD3D12Adapter* InParent, FRHIGPUMask InGPUMask)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "GetGPUMask()",
    "kind": "Method",
    "detail": "Function (FRHIGPUMask)",
    "insertText": "GetGPUMask()"
  },
  {
    "label": "AsRedirector()",
    "kind": "Method",
    "detail": "Function (} class FD3D12CommandContextRedirector*)",
    "insertText": "AsRedirector()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FD3D12CommandContextBase*)",
    "insertText": "Get(IRHIComputeContext* RHIContext)"
  },
  {
    "label": "GetSingleDeviceContext()",
    "kind": "Method",
    "detail": "Function (} FD3D12CommandContext*)",
    "insertText": "GetSingleDeviceContext(uint32 InGPUIndex)"
  },
  {
    "label": "FD3D12CommandContext()",
    "kind": "Method",
    "detail": "Function (protected : class FD3D12CommandContext ; FRHIGPUMask GPUMask ; FRHIGPUMask PhysicalGPUMask ; } ; class FD3D12CommandContext : public FD3D12ContextCommon,public FD3D12CommandContextBase,public FD3D12DeviceChild { public :)",
    "insertText": "FD3D12CommandContext(class FD3D12Device* InParent, ED3D12QueueType QueueType, bool InIsDefaultContext)"
  },
  {
    "label": "FD3D12CommandContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12CommandContext()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FD3D12CommandContext&)",
    "insertText": "Get(FRHICommandListBase& RHICmdList, uint32 GPUIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FD3D12CommandContextBase& Base =)",
    "insertText": "Get(RHICmdList)"
  },
  {
    "label": "GetSingleDeviceContext()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU return* Base .)",
    "insertText": "GetSingleDeviceContext(GPUIndex)"
  },
  {
    "label": "FD3D12CommandContext()",
    "kind": "Method",
    "detail": "Function (# else return static_cast<)",
    "insertText": "FD3D12CommandContext(Base)"
  },
  {
    "label": "GetPipeline()",
    "kind": "Method",
    "detail": "Function (ERHIPipeline)",
    "insertText": "GetPipeline()"
  },
  {
    "label": "ClearShaderResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearShaderResources(FD3D12UnorderedAccessView* UAV, EShaderParameterTypeMask ShaderParameterTypeMask)"
  },
  {
    "label": "ClearShaderResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearShaderResources(FD3D12BaseShaderResource* Resource, EShaderParameterTypeMask ShaderParameterTypeMask)"
  },
  {
    "label": "ClearAllShaderResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllShaderResources()"
  },
  {
    "label": "FlushProfilerStats()",
    "kind": "Method",
    "detail": "Function (# if RHI_NEW_GPU_PROFILER void)",
    "insertText": "FlushProfilerStats()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCommandList().EmplaceProfilerEvent<UE::RHI::GPUProfiler::FEvent::FStats>()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (StatEvent = { } ; } } # endif FD3D12FastConstantAllocator ConstantsAllocator ; TArray<uint32> GPUEventStack ; FD3D12StateCache StateCache ; FD3D12UniformBuffer* BoundUniformBuffers [ SF_NumStandardFrequencies ] [ MAX_CBS ] = { } ; uint16 DirtyUniformBuffers [ SF_NumStandardFrequencies ] = { } ; FRenderQueryRHIRef OuterOcclusionQuery ; bool bOuterOcclusionQuerySubmitted = false ; bool bDiscardSharedGraphicsConstants = false ; bool bDiscardSharedComputeConstants = false ; # if PLATFORM_SUPPORTS_VARIABLE_RATE_SHADING)",
    "insertText": "static_assert(D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT == ED3D12VRSCombinerStages::Num)"
  },
  {
    "label": "D3D12_RESOURCE_STATES()",
    "kind": "Method",
    "detail": "Function (D3D12_SHADING_RATE_COMBINER VRSCombiners [ D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT ] = { D3D12_SHADING_RATE_COMBINER_PASSTHROUGH,D3D12_SHADING_RATE_COMBINER_PASSTHROUGH } ; D3D12_SHADING_RATE VRSShadingRate = D3D12_SHADING_RATE_1X1 ; # endif D3D12_RESOURCE_STATES SkipFastClearEliminateState =)",
    "insertText": "D3D12_RESOURCE_STATES(0)"
  },
  {
    "label": "InvalidateTextureCache()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_STATES ValidResourceStates ; FD3D12ConstantBuffer StageConstantBuffers [ SF_NumStandardFrequencies ] ; # if PLATFORM_SUPPORTS_VIRTUAL_TEXTURES bool bNeedFlushTextureCache = false ; void)",
    "insertText": "InvalidateTextureCache()"
  },
  {
    "label": "FlushTextureCacheIfNeeded()",
    "kind": "Method",
    "detail": "Function (bNeedFlushTextureCache = true ; } void)",
    "insertText": "FlushTextureCacheIfNeeded()"
  },
  {
    "label": "FlushTextureCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushTextureCache()"
  },
  {
    "label": "CommitNonComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if RHI_RAYTRACING Experimental::TRobinHoodHashSet<uint64> RayTracingShaderTables ; # endif void)",
    "insertText": "CommitNonComputeShaderConstants()"
  },
  {
    "label": "CommitComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeShaderConstants()"
  },
  {
    "label": "SetResourcesFromTables()",
    "kind": "Method",
    "detail": "Function (template<class ShaderType> void)",
    "insertText": "SetResourcesFromTables(const ShaderType* RESTRICT)"
  },
  {
    "label": "SetSRVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVParameter(EShaderFrequency Frequency, uint32 SRVIndex, FD3D12ShaderResourceView* SRV)"
  },
  {
    "label": "SetUAVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAVParameter(EShaderFrequency Frequency, uint32 UAVIndex, FD3D12UnorderedAccessView* UAV)"
  },
  {
    "label": "SetUAVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAVParameter(EShaderFrequency Frequency, uint32 UAVIndex, FD3D12UnorderedAccessView* UAV, uint32 InitialCount)"
  },
  {
    "label": "CommitGraphicsResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitGraphicsResourceTables()"
  },
  {
    "label": "CommitComputeResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeResourceTables()"
  },
  {
    "label": "ResolveTextureUsingShader()",
    "kind": "Method",
    "detail": "Function (template<TPixelShader> void)",
    "insertText": "ResolveTextureUsingShader(FD3D12Texture* SourceTexture, FD3D12Texture* DestTexture, FD3D12RenderTargetView* DestSurfaceRTV, FD3D12DepthStencilView* DestSurfaceDSV, const D3D12_RESOURCE_DESC& ResolveTargetDesc, const FResolveRect& SourceRect, const FResolveRect& DestRect, typename TPixelShader::FParameter PixelShaderParameter)"
  },
  {
    "label": "SetDepthBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "SetShadingRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShadingRate(EVRSShadingRate ShadingRate, FD3D12Resource* ShadingRateImage, const TStaticArray<EVRSRateCombiner, ED3D12VRSCombinerStages::Num>& Combiners)"
  },
  {
    "label": "SetAsyncComputeBudgetInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncComputeBudgetInternal(EAsyncComputeBudget Budget)"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHISetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetComputePipelineState(FRHIComputePipelineState* ComputePipelineState)"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStaticUniformBuffers(const FUniformBufferStaticBindings& InUniformBuffers)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUnbinds(FRHIComputeShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUnbinds(FRHIGraphicsShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (# if WITH_RHI_BREADCRUMBS void)",
    "insertText": "RHIBeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTexture, FRHITexture* DestTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DestBuffer, uint64 DstOffset, FRHIBuffer* SourceBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "RHICopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyToStagingBuffer(FRHIBuffer* SourceBuffer, FRHIStagingBuffer* DestinationStagingBuffer, uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0) virtual void RHICalibrateTimers(FRHITimestampCalibrationQuery* CalibrationQuery)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetStereoViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStereoViewport(float LeftMinX, float RightMinX, float LeftMinY, float RightMinY, float MinZ, float LeftMaxX, float RightMaxX, float LeftMaxY, float RightMaxY, float MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetGraphicsPipelineState(FRHIGraphicsPipelineState* GraphicsPipelineState, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "RHISetBlendFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBlendFactor(const FLinearColor& BlendFactor)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargets(uint32 NumSimultaneousRenderTargets, const FRHIRenderTargetView* NewRenderTargets, const FRHIDepthRenderTargetView* NewDepthStencilTarget)"
  },
  {
    "label": "SetRenderTargetsAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetsAndClear(const FRHISetRenderTargetsInfo& RenderTargetsInfo)"
  },
  {
    "label": "RHISetShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderRootConstants(const FUint32Vector4& Constants)"
  },
  {
    "label": "RHIDispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchComputeShaderBundle(FRHIShaderBundle* ShaderBundle, FRHIBuffer* RecordArgBuffer, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleComputeDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "RHIDispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchGraphicsShaderBundle(FRHIShaderBundle* ShaderBundle, FRHIBuffer* RecordArgBuffer, const FRHIShaderBundleGraphicsState& BundleState, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleGraphicsDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIMultiDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMultiDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset, FRHIBuffer* CountBuffer, uint32 CountBufferOffset, uint32 MaxDrawArguments)"
  },
  {
    "label": "RHIDispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_MESH_SHADERS void)",
    "insertText": "RHIDispatchMeshShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectMeshShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "RHISetShadingRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShadingRate(EVRSShadingRate ShadingRate, EVRSRateCombiner Combiner)"
  },
  {
    "label": "RHIClearMRTImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearMRTImpl(bool* bClearColorArray, int32 NumClearColors, const FLinearColor* ColorArray, bool bClearDepth, float Depth, bool bClearStencil, uint32 Stencil)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "ConvertToRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (FRHISetRenderTargetsInfo RTInfo ; InInfo .)",
    "insertText": "ConvertToRenderTargetsInfo(RTInfo)"
  },
  {
    "label": "SetRenderTargetsAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetsAndClear(RTInfo)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (RenderPassInfo = InInfo ; } void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "ResolveRenderPassTargets()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "ResolveRenderPassTargets(RenderPassInfo, [this](UE::RHICore::FResolveTextureInfo Info) { ResolveTexture(Info); })"
  },
  {
    "label": "ResolveTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveTexture(UE::RHICore::FResolveTextureInfo Info)"
  },
  {
    "label": "RHIBindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (# if D3D12_RHI_RAYTRACING void)",
    "insertText": "RHIBindAccelerationStructureMemory(FRHIRayTracingScene* Scene, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "BuildAccelerationStructuresInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAccelerationStructuresInternal(const TArrayView<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC> BuildDesc)"
  },
  {
    "label": "UnregisterAccelerationStructuresInternalMGPU()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU void)",
    "insertText": "UnregisterAccelerationStructuresInternalMGPU(const TArrayView<const FRayTracingGeometryBuildParams> Params, FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIBuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHIBuildAccelerationStructures(TConstArrayView<FRayTracingGeometryBuildParams> Params, const FRHIBufferRange& ScratchBufferRange)"
  },
  {
    "label": "RHIBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBuildAccelerationStructure(const FRayTracingSceneBuildParams& SceneBuildParams)"
  },
  {
    "label": "RHIClearRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHICommitRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICommitRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHIClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "RHICommitShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICommitShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* InSBT, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* InSBT, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBindingsOnShaderBindingTable(FRHIShaderBindingTable* InSBT, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (# endif template<TRHIType,TReturnType = TD3D12ResourceTraits<TRHIType>::TConcreteType> TReturnType*)",
    "insertText": "ResourceCast(TRHIType* Resource)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} template<TRHIType,TReturnType = TD3D12ResourceTraits<TRHIType>::TConcreteType> TReturnType*)",
    "insertText": "ResourceCast(TRHIType* Resource, uint32 GPUIndex)"
  },
  {
    "label": "TReturnType()",
    "kind": "Method",
    "detail": "Function (TReturnType* Object = ResourceCast<TRHIType,)",
    "insertText": "TReturnType(Resource)"
  },
  {
    "label": "RetrieveObject()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType,RHIType> ObjectType*)",
    "insertText": "RetrieveObject(RHIType* RHIObject, uint32 GPUIndex)"
  },
  {
    "label": "RetrieveObject()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType,RHIType> ObjectType*)",
    "insertText": "RetrieveObject(RHIType* RHIObject)"
  },
  {
    "label": "RetrieveTexture()",
    "kind": "Method",
    "detail": "Function (} FD3D12Texture*)",
    "insertText": "RetrieveTexture(FRHITexture* Texture, uint32 GPUIndex)"
  },
  {
    "label": "GetD3D12TextureFromRHITexture()",
    "kind": "Method",
    "detail": "Function (FD3D12Texture* RHITexture =)",
    "insertText": "GetD3D12TextureFromRHITexture(Texture)"
  },
  {
    "label": "RetrieveTexture()",
    "kind": "Method",
    "detail": "Function (} FD3D12Texture*)",
    "insertText": "RetrieveTexture(FRHITexture* Texture)"
  },
  {
    "label": "GetGPUIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetGPUIndex()"
  },
  {
    "label": "RHISetGPUMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetGPUMask(FRHIGPUMask InGPUMask)"
  },
  {
    "label": "GetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} const TArray<FRHIUniformBuffer*>&)",
    "insertText": "GetStaticUniformBuffers()"
  },
  {
    "label": "SetExplicitDescriptorCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExplicitDescriptorCache(FD3D12ExplicitDescriptorCache& ExplicitDescriptorCache)"
  },
  {
    "label": "UnsetExplicitDescriptorCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetExplicitDescriptorCache()"
  },
  {
    "label": "GetBindlessResourcesHeap()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING FD3D12DescriptorHeap*)",
    "insertText": "GetBindlessResourcesHeap()"
  },
  {
    "label": "GetBindlessState()",
    "kind": "Method",
    "detail": "Function (FD3D12ContextBindlessState&)",
    "insertText": "GetBindlessState()"
  },
  {
    "label": "SetupDispatch()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetupDispatch(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "SetupDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDraw(FRHIBuffer* IndexBufferRHI, uint32 NumPrimitives = 0, uint32 NumVertices = 0)"
  },
  {
    "label": "SetupDispatchDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDispatchDraw(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "SetupIndirectArgument()",
    "kind": "Method",
    "detail": "Function (FD3D12ResourceLocation&)",
    "insertText": "SetupIndirectArgument(FRHIBuffer* ArgumentBufferRHI, D3D12_RESOURCE_STATES ExtraStates = static_cast<D3D12_RESOURCE_STATES>(0))"
  },
  {
    "label": "PostGpuEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGpuEvent()"
  },
  {
    "label": "ClearUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUAV(TRHICommandList_RecursiveHazardous<FD3D12CommandContext>& RHICmdList, FD3D12UnorderedAccessView_RHI* UAV, const void* ClearValues, bool bFloat)"
  },
  {
    "label": "DispatchWorkGraphShaderBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchWorkGraphShaderBundle(FRHIShaderBundle* ShaderBundle, FRHIBuffer* RecordArgBuffer, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleComputeDispatch> Dispatches)"
  },
  {
    "label": "HandleDiscardResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDiscardResources(TArrayView<const FRHITransition*> Transitions, bool bIsBeginTransition)"
  },
  {
    "label": "HandleResourceTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResourceTransitions(const struct FD3D12TransitionData* TransitionData, bool& bUAVBarrier)"
  },
  {
    "label": "HandleTransientAliasing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransientAliasing(const struct FD3D12TransitionData* TransitionData)"
  },
  {
    "label": "HandleResourceDiscardTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResourceDiscardTransitions(const struct FD3D12TransitionData* TransitionData, TArray<struct FD3D12DiscardResource>& ResourcesToDiscard)"
  },
  {
    "label": "HandleReservedResourceCommits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReservedResourceCommits(const struct FD3D12TransitionData* TransitionData)"
  },
  {
    "label": "FD3D12CommandContextRedirector()",
    "kind": "Method",
    "detail": "Function (TArray<FRHIUniformBuffer*> StaticUniformBuffers ; const FRHIShaderBindingLayout* ShaderBindinglayout = nullptr ; # if PLATFORM_SUPPORTS_BINDLESS_RENDERING FD3D12ContextBindlessState BindlessState ; # endif } ; class FD3D12CommandContextRedirector final : public FD3D12CommandContextBase { public : ED3D12QueueType const QueueType ; bool const bIsDefaultContext ;)",
    "insertText": "FD3D12CommandContextRedirector(class FD3D12Adapter* InParent, ED3D12QueueType QueueType, bool InIsDefaultContext)"
  },
  {
    "label": "ContextGPU0()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ContextGPU0(Call)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetComputePipelineState(ComputePipelineState))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDispatchComputeShader(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDispatchIndirectComputeShader(ArgumentBuffer, ArgumentOffset))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIBeginTransitions(Transitions))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIEndTransitions(Transitions))"
  },
  {
    "label": "RHITransferResources()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MGPU void)",
    "insertText": "RHITransferResources(TConstArrayView<FTransferResourceParams> Params)"
  },
  {
    "label": "RHITransferResourceSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHITransferResourceSignal(TConstArrayView<FTransferResourceFenceData*> FenceDatas, FRHIGPUMask SrcGPUMask)"
  },
  {
    "label": "RHITransferResourceWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHITransferResourceWait(TConstArrayView<FTransferResourceFenceData*> FenceDatas)"
  },
  {
    "label": "RHICrossGPUTransfer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICrossGPUTransfer(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer, TConstArrayView<FCrossGPUTransferFence*> PostTransfer)"
  },
  {
    "label": "RHICrossGPUTransferSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICrossGPUTransferSignal(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer)"
  },
  {
    "label": "RHICrossGPUTransferWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICrossGPUTransferWait(TConstArrayView<FCrossGPUTransferFence*> PostTransfer)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHICopyToStagingBuffer(SourceBuffer, DestinationStagingBuffer, Offset, NumBytes))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetShaderParameters(Shader, InParametersData, InParameters, InResourceParameters, InBindlessParameters))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetShaderUnbinds(Shader, InUnbinds))"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (PhysicalContexts [ GPUIndex ] ->)",
    "insertText": "RHIBeginBreadcrumbGPU(Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (PhysicalContexts [ GPUIndex ] ->)",
    "insertText": "RHIEndBreadcrumbGPU(Breadcrumb)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetMultipleViewports(Count, Data))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIClearUAVFloat(UnorderedAccessViewRHI, Values))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIClearUAVUint(UnorderedAccessViewRHI, Values))"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTextureRHI, FRHITexture* DestTextureRHI, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHICopyTexture(SourceTextureRHI, DestTextureRHI, CopyInfo))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHICopyBufferRegion(DestBuffer, DstOffset, SourceBuffer, SrcOffset, NumBytes))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIBeginRenderQuery(RenderQuery))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIEndRenderQuery(RenderQuery))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0) FORCEINLINE virtual void RHICalibrateTimers(FRHITimestampCalibrationQuery* CalibrationQuery)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHICalibrateTimers(CalibrationQuery))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetStreamSource(StreamIndex, VertexBuffer, Offset))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetViewport(MinX, MinY, MinZ, MaxX, MaxY, MaxZ))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetStereoViewport(LeftMinX, RightMinX, LeftMinY, RightMinY, MinZ, LeftMaxX, RightMaxX, LeftMaxY, RightMaxY, MaxZ))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetScissorRect(bEnable, MinX, MinY, MaxX, MaxY))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetGraphicsPipelineState(GraphicsPipelineState, StencilRef, bApplyAdditionalState))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetStaticUniformBuffers(InUniformBuffers))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetStencilRef(StencilRef))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetBlendFactor(BlendFactor))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetShaderRootConstants(Constants))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDrawPrimitive(BaseVertexIndex, NumPrimitives, NumInstances))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDrawPrimitiveIndirect(ArgumentBuffer, ArgumentOffset))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDrawIndexedIndirect(IndexBufferRHI, ArgumentsBufferRHI, DrawArgumentsIndex, NumInstances))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDrawIndexedPrimitive(IndexBuffer, BaseVertexIndex, FirstInstance, NumVertices, StartIndex, NumPrimitives, NumInstances))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDrawIndexedPrimitiveIndirect(IndexBuffer, ArgumentBuffer, ArgumentOffset))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIMultiDrawIndexedPrimitiveIndirect(IndexBuffer, ArgumentBuffer, ArgumentOffset, CountBuffer, CountBufferOffset, MaxDrawArguments))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDispatchMeshShader(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIDispatchIndirectMeshShader(ArgumentBuffer, ArgumentOffset))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetDepthBounds(MinDepth, MaxDepth))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetShadingRate(ShadingRate, Combiner))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIBeginRenderPass(InInfo, InName))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIEndRenderPass())"
  },
  {
    "label": "UnregisterAccelerationStructuresInternalMGPU()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU)",
    "insertText": "UnregisterAccelerationStructuresInternalMGPU(Params, GPUMask)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "ContextRedirect(RHIBuildAccelerationStructures(Params, ScratchBufferRange))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIBuildAccelerationStructure(SceneBuildParams))"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIRayTraceDispatch(RayTracingPipelineState, RayGenShader, SBT, GlobalResourceBindings, Width, Height))"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIRayTraceDispatchIndirect(RayTracingPipelineState, RayGenShader, SBT, GlobalResourceBindings, ArgumentBuffer, ArgumentOffset))"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetBindingsOnShaderBindingTable(FRHIShaderBindingTable* SBT, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHISetBindingsOnShaderBindingTable(SBT, Pipeline, NumBindings, Bindings, BindingType))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIClearRayTracingBindings(Scene))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIClearShaderBindingTable(SBT))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHIBindAccelerationStructureMemory(Scene, Buffer, BufferOffset))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHICommitShaderBindingTable(SBT))"
  },
  {
    "label": "ContextRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextRedirect(RHICommitRayTracingBindings(Scene))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (GPUMask = InGPUMask ;)",
    "insertText": "check(PhysicalGPUMask.ContainsAll(GPUMask))"
  },
  {
    "label": "RHIGetGPUMask()",
    "kind": "Method",
    "detail": "Function (} FRHIGPUMask)",
    "insertText": "RHIGetGPUMask()"
  },
  {
    "label": "SetPhysicalContext()",
    "kind": "Method",
    "detail": "Function (PhysicalGPUMask = InGPUMask ; } void)",
    "insertText": "SetPhysicalContext(FD3D12CommandContext* Context)"
  },
  {
    "label": "GetSingleDeviceContext()",
    "kind": "Method",
    "detail": "Function (PhysicalContexts [ GPUIndex ] = Context ; } FD3D12CommandContext*)",
    "insertText": "GetSingleDeviceContext(uint32 GPUIndex)"
  },
  {
    "label": "SetExecutingCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExecutingCommandList(InCmdList)"
  },
  {
    "label": "FD3D12ContextArray()",
    "kind": "Method",
    "detail": "Function (} } private : TStaticArray<FD3D12CommandContext*,MAX_NUM_GPUS> PhysicalContexts ; } ; struct FD3D12TransitionData { ERHIPipeline SrcPipelines,DstPipelines ; ERHITransitionCreateFlags CreateFlags = ERHITransitionCreateFlags::None ; TArray<FRHITransitionInfo,TInlineAllocator<4,FConcurrentLinearArrayAllocator>> TransitionInfos ; TArray<FRHITransientAliasingInfo,TInlineAllocator<4,FConcurrentLinearArrayAllocator>> AliasingInfos ; TArray<FRHITransientAliasingOverlap,TInlineAllocator<4,FConcurrentLinearArrayAllocator>> AliasingOverlaps ; TArray<TRHIPipelineArray<FD3D12SyncPointRef>,TInlineAllocator<MAX_NUM_GPUS>> SyncPoints ; bool bCrossPipeline = false ; } ; class FD3D12ContextArray : public TRHIPipelineArray<FD3D12CommandContextBase*> { public :)",
    "insertText": "FD3D12ContextArray(FRHIContextArray const& Contexts)"
  },
  {
    "label": "FRHIContextArray()",
    "kind": "Method",
    "detail": "Function (} } operator)",
    "insertText": "FRHIContextArray()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FRHIContextArray Result ;)",
    "insertText": "for(int32 Index = 0; Index < int32(ERHIPipeline::Num); ++Index)"
  },
  {
    "label": "Base()",
    "kind": "Method",
    "detail": "Function (FD3D12CommandContextBase*)",
    "insertText": "Base(*this)"
  },
  {
    "label": "GetHighestLevelContext()",
    "kind": "Method",
    "detail": "Function (Result [ Index ] = Base ?& Base ->)",
    "insertText": "GetHighestLevelContext()"
  }
]