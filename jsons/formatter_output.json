[
  {
    "label": "_LIBCPP_TYPE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TYPE_VIS"
  },
  {
    "label": "_OutIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIt"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_ParserCharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ParserCharT"
  },
  {
    "label": "_UnaryOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UnaryOperation"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMATTER_OUTPUT_H # define _LIBCPP___FORMAT_FORMATTER_OUTPUT_H # include<__algorithm / copy . h> # include<__algorithm / copy_n . h> # include<__algorithm / fill_n . h> # include<__algorithm / transform . h> # include<__config> # include<__format / formatter . h> # include<__format / parser_std_format_spec . h> # include<__format / unicode . h> # include<__utility / move . h> # include<__utility / unreachable . h> # include<cstddef> # include<string> # include<string_view> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__hex_to_upper()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI char)",
    "insertText": "__hex_to_upper(char __c)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__width > __size, \"don't call this function when no padding is required\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__align != __format_spec::__alignment::__zero_padding, \"the caller should have handled the zero-padding\")"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (size_t __fill = __width - __size ;)",
    "insertText": "switch(__align)"
  },
  {
    "label": "__write_using_decimal_separators()",
    "kind": "Method",
    "detail": "Function (} template<class _OutIt,class _CharT> _LIBCPP_HIDE_FROM_ABI _OutIt)",
    "insertText": "__write_using_decimal_separators(_OutIt __out_it, const char* __begin, const char* __first, const char* __last, string&& __grouping, _CharT __sep, __format_spec::__parsed_specifications<_CharT> __specs)"
  },
  {
    "label": "__size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "__size(__first - __begin) + (__last - __first) + (__grouping.size() - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__padding_size_result __padding = { 0,0 } ;)",
    "insertText": "if(__specs.__alignment_ == __format_spec::__alignment::__zero_padding)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (__out_it =)",
    "insertText": "copy(__begin, __first, _VSTD::move(__out_it))"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (__padding . __before_ = __specs . __width_ - __size ; __out_it =)",
    "insertText": "fill_n(_VSTD::move(__out_it), __specs.__width_ - __size, _CharT('0'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(__specs.__width_ > __size)"
  },
  {
    "label": "__padding_size()",
    "kind": "Method",
    "detail": "Function (__padding =)",
    "insertText": "__padding_size(__size, __specs.__width_, __specs.__alignment_)"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (__out_it =)",
    "insertText": "fill_n(_VSTD::move(__out_it), __padding.__before_, __specs.__fill_)"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} auto __r = __grouping .)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (auto __e = __grouping .)",
    "insertText": "rend()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__r != __e, \"The slow grouping formatting is used while \" \"there will be no separators written.\")"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (__last = __first +* __r ; __out_it =)",
    "insertText": "transform(__first, __last, _VSTD::move(__out_it), __hex_to_upper)"
  },
  {
    "label": "copy_n()",
    "kind": "Method",
    "detail": "Function (__first = __last ; } else { __out_it =)",
    "insertText": "copy_n(__first, *__r, _VSTD::move(__out_it))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__first + =* __r ; })",
    "insertText": "if(__r == __e)"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (+ + __r ;* __out_it + + = __sep ; } return)",
    "insertText": "fill_n(_VSTD::move(__out_it), __padding.__after_, __specs.__fill_)"
  },
  {
    "label": "__write()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _ParserCharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__write(const _CharT* __first, const _CharT* __last, output_iterator<const _CharT&> auto __out_it, __format_spec::__parsed_specifications<_ParserCharT> __specs, ptrdiff_t __size) -> decltype(__out_it)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__first <= __last, \"Not a valid range\")"
  },
  {
    "label": "__padding_size()",
    "kind": "Method",
    "detail": "Function (__padding_size_result __padding =)",
    "insertText": "__padding_size(__size, __specs.__width_, __specs.__std_.__alignment_)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (__out_it =)",
    "insertText": "copy(__first, __last, _VSTD::move(__out_it))"
  },
  {
    "label": "__write()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _ParserCharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__write(const _CharT* __first, const _CharT* __last, output_iterator<const _CharT&> auto __out_it, __format_spec::__parsed_specifications<_ParserCharT> __specs) -> decltype(__out_it)"
  },
  {
    "label": "__write_transformed()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _ParserCharT,class _UnaryOperation> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__write_transformed(const _CharT* __first, const _CharT* __last, output_iterator<const _CharT&> auto __out_it, __format_spec::__parsed_specifications<_ParserCharT> __specs, _UnaryOperation __op) -> decltype(__out_it)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ptrdiff_t __size = __last - __first ;)",
    "insertText": "if(__size >= __specs.__width_) return _VSTD::transform(__first, __last, _VSTD::move(__out_it), __op)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (__out_it =)",
    "insertText": "transform(__first, __last, _VSTD::move(__out_it), __op)"
  },
  {
    "label": "__write_using_trailing_zeros()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _ParserCharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__write_using_trailing_zeros(const _CharT* __first, const _CharT* __last, output_iterator<const _CharT&> auto __out_it, __format_spec::__parsed_specifications<_ParserCharT> __specs, size_t __size, const _CharT* __exponent, size_t __num_trailing_zeros) -> decltype(__out_it)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__num_trailing_zeros > 0, \"The overload not writing trailing zeros should have been used\")"
  },
  {
    "label": "__padding_size()",
    "kind": "Method",
    "detail": "Function (__padding_size_result __padding =)",
    "insertText": "__padding_size(__size + __num_trailing_zeros, __specs.__width_, __specs.__alignment_)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (__out_it =)",
    "insertText": "copy(__first, __exponent, _VSTD::move(__out_it))"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (__out_it =)",
    "insertText": "fill_n(_VSTD::move(__out_it), __num_trailing_zeros, _CharT('0'))"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (__out_it =)",
    "insertText": "copy(__exponent, __last, _VSTD::move(__out_it))"
  },
  {
    "label": "__write_string_no_precision()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__write_string_no_precision(basic_string_view<_CharT> __str, output_iterator<const _CharT&> auto __out_it, __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__specs.__has_precision(), \"use __write_string\")"
  },
  {
    "label": "__estimate_column_width()",
    "kind": "Method",
    "detail": "Function (size_t __size =)",
    "insertText": "__estimate_column_width(__str, __specs.__width_, __format_spec::__column_width_rounding::__up)"
  },
  {
    "label": "__truncate()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT> _LIBCPP_HIDE_FROM_ABI int)",
    "insertText": "__truncate(basic_string_view<_CharT>& __str, int __precision)"
  },
  {
    "label": "__estimate_column_width()",
    "kind": "Method",
    "detail": "Function (__format_spec::__column_width_result<_CharT> __result =)",
    "insertText": "__estimate_column_width(__str, __precision, __format_spec::__column_width_rounding::__down)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (__str = basic_string_view<_CharT> { __str .)",
    "insertText": "begin()"
  },
  {
    "label": "__truncate()",
    "kind": "Method",
    "detail": "Function (int __size =)",
    "insertText": "__truncate(__str, __specs.__precision_)"
  }
]