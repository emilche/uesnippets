[
  {
    "label": "WienerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WienerFilter"
  },
  {
    "label": "WienerFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_NS_WIENER_FILTER_H_ # define MODULES_AUDIO_PROCESSING_NS_WIENER_FILTER_H_ # include<array> # include \" api / array_view . h \" # include \" modules / audio_processing / ns / ns_common . h \" # include \" modules / audio_processing / ns / suppression_params . h \" namespace webrtc { class WienerFilter { public :)",
    "insertText": "WienerFilter(const SuppressionParams& suppression_params)"
  },
  {
    "label": "WienerFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WienerFilter(const WienerFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WienerFilter&)",
    "insertText": "operator(const WienerFilter&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int32_t num_analyzed_frames, rtc::ArrayView<const float, kFftSizeBy2Plus1> noise_spectrum, rtc::ArrayView<const float, kFftSizeBy2Plus1> prev_noise_spectrum, rtc::ArrayView<const float, kFftSizeBy2Plus1> parametric_noise_spectrum, rtc::ArrayView<const float, kFftSizeBy2Plus1> signal_spectrum)"
  },
  {
    "label": "ComputeOverallScalingFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeOverallScalingFactor(int32_t num_analyzed_frames, float prior_speech_probability, float energy_before_filtering, float energy_after_filtering)"
  },
  {
    "label": "get_filter()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const float,kFftSizeBy2Plus1>)",
    "insertText": "get_filter()"
  }
]