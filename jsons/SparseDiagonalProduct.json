[
  {
    "label": "sparse_diagonal_product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_diagonal_product_evaluator"
  },
  {
    "label": "product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_evaluator"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_DIAGONAL_PRODUCT_H # define EIGEN_SPARSE_DIAGONAL_PRODUCT_H namespace Eigen { namespace internal { enum { SDP_AsScalarProduct,SDP_AsCwiseProduct } ; template<SparseXprType,DiagonalCoeffType,int SDP_Tag> struct sparse_diagonal_product_evaluator ; template<Lhs,Rhs,int ProductTag> struct product_evaluator<Product<Lhs,Rhs,DefaultProduct>,ProductTag,DiagonalShape,SparseShape> : public sparse_diagonal_product_evaluator<Rhs,Lhs::DiagonalVectorType,Rhs::Flags& RowMajorBit ? SDP_AsScalarProduct : SDP_AsCwiseProduct> { typedef Product<Lhs,Rhs,DefaultProduct> XprType ; enum { CoeffReadCost = HugeCost,Flags = Rhs::Flags& RowMajorBit,Alignment = 0 } ; typedef sparse_diagonal_product_evaluator<Rhs,Lhs::DiagonalVectorType,Rhs::Flags& RowMajorBit ? SDP_AsScalarProduct : SDP_AsCwiseProduct> Base ;)",
    "insertText": "product_evaluator(const XprType& xpr) : Base(xpr.rhs(), xpr.lhs().diagonal())"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int ProductTag> struct product_evaluator<Product<Lhs,Rhs,DefaultProduct>,ProductTag,SparseShape,DiagonalShape> : public sparse_diagonal_product_evaluator<Lhs,Transpose<const Rhs::DiagonalVectorType>,Lhs::Flags& RowMajorBit ? SDP_AsCwiseProduct : SDP_AsScalarProduct> { typedef Product<Lhs,Rhs,DefaultProduct> XprType ; enum { CoeffReadCost = HugeCost,Flags = Lhs::Flags& RowMajorBit,Alignment = 0 } ; typedef sparse_diagonal_product_evaluator<Lhs,Transpose<const Rhs::DiagonalVectorType>,Lhs::Flags& RowMajorBit ? SDP_AsCwiseProduct : SDP_AsScalarProduct> Base ;)",
    "insertText": "product_evaluator(const XprType& xpr) : Base(xpr.lhs(), xpr.rhs().diagonal().transpose())"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<SparseXprType,DiagonalCoeffType> struct sparse_diagonal_product_evaluator<SparseXprType,DiagonalCoeffType,SDP_AsScalarProduct> { protected : typedef evaluator<SparseXprType>::InnerIterator SparseXprInnerIterator ; typedef SparseXprType::Scalar Scalar ; public : class InnerIterator : public SparseXprInnerIterator { public :)",
    "insertText": "InnerIterator(const sparse_diagonal_product_evaluator &xprEval, Index outer) : SparseXprInnerIterator(xprEval.m_sparseXprImpl, outer), m_coeff(xprEval.m_diagCoeffImpl.coeff(outer))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Scalar)",
    "insertText": "value()"
  },
  {
    "label": "sparse_diagonal_product_evaluator()",
    "kind": "Method",
    "detail": "Function (} protected : DiagonalCoeffType::Scalar m_coeff ; } ;)",
    "insertText": "sparse_diagonal_product_evaluator(const SparseXprType &sparseXpr, const DiagonalCoeffType &diagCoeff) : m_sparseXprImpl(sparseXpr), m_diagCoeffImpl(diagCoeff)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} protected : evaluator<SparseXprType> m_sparseXprImpl ; evaluator<DiagonalCoeffType> m_diagCoeffImpl ; } ; template<SparseXprType,DiagCoeffType> struct sparse_diagonal_product_evaluator<SparseXprType,DiagCoeffType,SDP_AsCwiseProduct> { typedef SparseXprType::Scalar Scalar ; typedef SparseXprType::StorageIndex StorageIndex ; typedef nested_eval<DiagCoeffType,SparseXprType::IsRowMajor ? SparseXprType::RowsAtCompileTime : SparseXprType::ColsAtCompileTime>::type DiagCoeffNested ; class InnerIterator { typedef evaluator<SparseXprType>::InnerIterator SparseXprIter ; public :)",
    "insertText": "InnerIterator(const sparse_diagonal_product_evaluator &xprEval, Index outer) : m_sparseIter(xprEval.m_sparseXprEval, outer), m_diagCoeffNested(xprEval.m_diagCoeffNested)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} StorageIndex)",
    "insertText": "index()"
  },
  {
    "label": "outer()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "outer()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE InnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (+ + m_sparseIter ; return* this ; } operator)",
    "insertText": "bool()"
  }
]