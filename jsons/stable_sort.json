[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_InputIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator1"
  },
  {
    "label": "_InputIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator2"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__stable_sort_switch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__stable_sort_switch"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_STABLE_SORT_H # define _LIBCPP___ALGORITHM_STABLE_SORT_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / inplace_merge . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / sort . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<memory> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _InputIterator1, class _InputIterator2> void __merge_move_construct(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, typename iterator_traits<_InputIterator1>::value_type* __result, _Compare __comp)"
  },
  {
    "label": "__d()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ; typedef iterator_traits<_InputIterator1>::value_type value_type ; __destruct_n)",
    "insertText": "__d(0)"
  },
  {
    "label": "__h()",
    "kind": "Method",
    "detail": "Function (unique_ptr<value_type,__destruct_n&>)",
    "insertText": "__h(__result, __d)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (__h .)",
    "insertText": "release()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)__result) value_type(_Ops::__iter_move(__first2))"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (__d . template __incr<)",
    "insertText": "value_type()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (+ + __first2 ; } else)",
    "insertText": "new((void*)__result) value_type(_Ops::__iter_move(__first1))"
  },
  {
    "label": "__merge_move_assign()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; } } } template<class _AlgPolicy,class _Compare,class _InputIterator1,class _InputIterator2,class _OutputIterator> void)",
    "insertText": "__merge_move_assign(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ;)",
    "insertText": "for(; __first1 != __last1; ++__result)"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (* __result =)",
    "insertText": "__iter_move(__first2)"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (+ + __first2 ; } else {* __result =)",
    "insertText": "__iter_move(__first1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; } })",
    "insertText": "for(; __first2 != __last2; ++__first2, (void) ++__result) *__result = _Ops::__iter_move(__first2)"
  },
  {
    "label": "__stable_sort()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Compare,class _RandomAccessIterator> void)",
    "insertText": "__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, typename iterator_traits<_RandomAccessIterator>::difference_type __len, typename iterator_traits<_RandomAccessIterator>::value_type* __buff, ptrdiff_t __buff_size)"
  },
  {
    "label": "__stable_sort_move()",
    "kind": "Method",
    "detail": "Function (template<class _AlgPolicy,class _Compare,class _RandomAccessIterator> void)",
    "insertText": "__stable_sort_move(_RandomAccessIterator __first1, _RandomAccessIterator __last1, _Compare __comp, typename iterator_traits<_RandomAccessIterator>::difference_type __len, typename iterator_traits<_RandomAccessIterator>::value_type* __first2)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ; typedef iterator_traits<_RandomAccessIterator>::value_type value_type ;)",
    "insertText": "switch(__len)"
  },
  {
    "label": "__h2()",
    "kind": "Method",
    "detail": "Function (unique_ptr<value_type,__destruct_n&>)",
    "insertText": "__h2(__first2, __d)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)__first2) value_type(_Ops::__iter_move(__last1))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (+ + __first2)",
    "insertText": "new((void*)__first2) value_type(_Ops::__iter_move(__first1))"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__insertion_sort_move<_AlgPolicy,)",
    "insertText": "_Compare(__first1, __last1, __first2, __comp)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__stable_sort<_AlgPolicy,)",
    "insertText": "_Compare(__m, __last1, __comp, __len - __l2, __first2 + __l2, __len - __l2)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__merge_move_construct<_AlgPolicy,)",
    "insertText": "_Compare(__first1, __m, __m, __last1, __first2, __comp)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__insertion_sort<_AlgPolicy,)",
    "insertText": "_Compare(__first, __last, __comp)"
  },
  {
    "label": "__h2()",
    "kind": "Method",
    "detail": "Function (unique_ptr<value_type,__destruct_n&>)",
    "insertText": "__h2(__buff, __d)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__stable_sort_move<_AlgPolicy,)",
    "insertText": "_Compare(__first, __m, __comp, __l2, __buff)"
  },
  {
    "label": "__set()",
    "kind": "Method",
    "detail": "Function (__d .)",
    "insertText": "__set(__l2, (value_type*)nullptr)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__stable_sort_move<_AlgPolicy,)",
    "insertText": "_Compare(__m, __last, __comp, __len - __l2, __buff + __l2)"
  },
  {
    "label": "__set()",
    "kind": "Method",
    "detail": "Function (__d .)",
    "insertText": "__set(__len, (value_type*)nullptr)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__merge_move_assign<_AlgPolicy,)",
    "insertText": "_Compare(__buff, __buff + __l2, __buff + __l2, __buff + __len, __first, __comp)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__stable_sort<_AlgPolicy,)",
    "insertText": "_Compare(__m, __last, __comp, __len - __l2, __buff, __buff_size)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__inplace_merge<)",
    "insertText": "_AlgPolicy(__first, __m, __last, __comp, __l2, __len - __l2, __buff, __buff_size)"
  },
  {
    "label": "__stable_sort_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _RandomAccessIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__stable_sort_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare& __comp)"
  },
  {
    "label": "__buf()",
    "kind": "Method",
    "detail": "Function (using value_type = iterator_traits<_RandomAccessIterator>::value_type ; using difference_type = iterator_traits<_RandomAccessIterator>::difference_type ; difference_type __len = __last - __first ; pair<value_type*,ptrdiff_t>)",
    "insertText": "__buf(0, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unique_ptr<value_type,__return_temporary_buffer> __h ;)",
    "insertText": "if(__len > static_cast<difference_type>(__stable_sort_switch<value_type>::value))"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_PUSH __buf = std::get_temporary_buffer<)",
    "insertText": "value_type(__len)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP __h .)",
    "insertText": "reset(__buf.first)"
  },
  {
    "label": "_Comp_ref()",
    "kind": "Method",
    "detail": "Function (} using _Comp_ref = __comp_ref_type<_Compare>::type ; std::__stable_sort<_AlgPolicy,)",
    "insertText": "_Comp_ref(__first, __last, __comp, __len, __buf.first, __buf.second)"
  },
  {
    "label": "stable_sort()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__stable_sort_impl<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last), __comp)"
  },
  {
    "label": "stable_sort()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)"
  },
  {
    "label": "stable_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stable_sort(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>())"
  }
]