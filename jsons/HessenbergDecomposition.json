[
  {
    "label": "HessenbergDecompositionMatrixHReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HessenbergDecompositionMatrixHReturnType"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "HessenbergDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HessenbergDecomposition"
  },
  {
    "label": "HessenbergDecomposition()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_HESSENBERGDECOMPOSITION_H # define EIGEN_HESSENBERGDECOMPOSITION_H namespace Eigen { namespace internal { template<MatrixType> struct HessenbergDecompositionMatrixHReturnType ; template<MatrixType> struct traits<HessenbergDecompositionMatrixHReturnType<MatrixType>> { typedef MatrixType ReturnType ; } ; } template<_MatrixType> class HessenbergDecomposition { public : typedef _MatrixType MatrixType ; enum { Size = MatrixType::RowsAtCompileTime,SizeMinusOne = Size = = Dynamic ? Dynamic : Size - 1,Options = MatrixType::Options,MaxSize = MatrixType::MaxRowsAtCompileTime,MaxSizeMinusOne = MaxSize = = Dynamic ? Dynamic : MaxSize - 1 } ; typedef MatrixType::Scalar Scalar ; typedef Eigen::Index Index ; typedef Matrix<Scalar,SizeMinusOne,1,Options& ~ RowMajor,MaxSizeMinusOne,1> CoeffVectorType ; typedef HouseholderSequence<MatrixType,internal::remove_all<CoeffVectorType::ConjugateReturnType>::type> HouseholderSequenceType ; typedef internal::HessenbergDecompositionMatrixHReturnType<MatrixType> MatrixHReturnType ;)",
    "insertText": "HessenbergDecomposition(Index size = Size==Dynamic ? 2 : Size) : m_matrix(size,size), m_temp(size), m_isInitialized(false)"
  },
  {
    "label": "HessenbergDecomposition()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "HessenbergDecomposition(const EigenBase<InputType>& matrix) : m_matrix(matrix.derived()), m_temp(matrix.rows()), m_isInitialized(false)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; return ; } m_hCoeffs .)",
    "insertText": "resize(matrix.rows()-1,1)"
  },
  {
    "label": "_compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_compute(m_matrix, m_hCoeffs, m_temp)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; } template<InputType> HessenbergDecomposition&)",
    "insertText": "compute(const EigenBase<InputType>& matrix)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_matrix = matrix .)",
    "insertText": "derived()"
  },
  {
    "label": "householderCoefficients()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; return* this ; } const CoeffVectorType&)",
    "insertText": "householderCoefficients()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"HessenbergDecomposition is not initialized.\")"
  },
  {
    "label": "matrixH()",
    "kind": "Method",
    "detail": "Function (} MatrixHReturnType)",
    "insertText": "matrixH()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} private : typedef Matrix<Scalar,1,Size,)",
    "insertText": "int(Options) | int(RowMajor)"
  },
  {
    "label": "_compute()",
    "kind": "Method",
    "detail": "Function (typedef NumTraits<Scalar>::Real RealScalar ; void)",
    "insertText": "_compute(MatrixType& matA, CoeffVectorType& hCoeffs, VectorType& temp)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(matA.rows()==matA.cols())"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index n = matA .)",
    "insertText": "rows()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (temp .)",
    "insertText": "resize(n)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index remainingSize = n - i - 1 ; RealScalar beta ; Scalar h ; matA .)",
    "insertText": "col(i).tail(remainingSize).makeHouseholderInPlace(h, beta)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (matA .)",
    "insertText": "col(i).coeffRef(i+1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (hCoeffs .)",
    "insertText": "coeffRef(i)"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (matA .)",
    "insertText": "bottomRightCorner(remainingSize, remainingSize) .applyHouseholderOnTheLeft(matA.col(i).tail(remainingSize-1), h, &temp.coeffRef(0))"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (matA .)",
    "insertText": "rightCols(remainingSize) .applyHouseholderOnTheRight(matA.col(i).tail(remainingSize-1), numext::conj(h), &temp.coeffRef(0))"
  },
  {
    "label": "HessenbergDecompositionMatrixHReturnType()",
    "kind": "Method",
    "detail": "Function (} } namespace internal { template<MatrixType> struct HessenbergDecompositionMatrixHReturnType : public ReturnByValue<HessenbergDecompositionMatrixHReturnType<MatrixType>> { public :)",
    "insertText": "HessenbergDecompositionMatrixHReturnType(const HessenbergDecomposition<MatrixType>& hess) : m_hess(hess)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "packedMatrix()",
    "kind": "Method",
    "detail": "Function (result = m_hess .)",
    "insertText": "packedMatrix()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  }
]