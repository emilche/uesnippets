[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__libcpp_is_unsigned_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_is_unsigned_impl"
  },
  {
    "label": "__libcpp_is_unsigned",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_is_unsigned"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_UNSIGNED_H # define _LIBCPP___TYPE_TRAITS_IS_UNSIGNED_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / is_arithmetic . h> # include<__type_traits / is_integral . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if __has_builtin(__is_unsigned) && !(defined(_LIBCPP_APPLE_CLANG_VER) && _LIBCPP_APPLE_CLANG_VER < 1400) template<class _Tp> struct _LIBCPP_TEMPLATE_VIS is_unsigned : _BoolConstant<__is_unsigned(_Tp)"
  },
  {
    "label": "__is_unsigned()",
    "kind": "Method",
    "detail": "Function (} ; # if _LIBCPP_STD_VER> 1 4 template<class _Tp> bool is_unsigned_v =)",
    "insertText": "__is_unsigned(_Tp)"
  },
  {
    "label": "_BoolConstant()",
    "kind": "Method",
    "detail": "Function (# endif # else template<class _Tp,bool = is_integral<_Tp>::value> struct __libcpp_is_unsigned_impl : public)",
    "insertText": "_BoolConstant(_Tp(0) < _Tp(-1))"
  }
]