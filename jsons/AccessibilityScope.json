[
  {
    "label": "CDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDefinition"
  },
  {
    "label": "CScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CScope"
  },
  {
    "label": "CTypeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeBase"
  },
  {
    "label": "SAccessLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SAccessLevel"
  },
  {
    "label": "SDigestScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDigestScope"
  },
  {
    "label": "SAccessibilityScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SAccessibilityScope"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IsUniversal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Text / UTF8String . h \" # include \" uLang / Common / Containers / Array . h \" namespace uLang { class CDefinition ; class CScope ; class CTypeBase ; struct SAccessLevel ; struct SDigestScope { bool bEpicInternal { false } ; bool bInternal { false } ; } ; struct SAccessibilityScope { enum class EKind { Universal,EpicInternal,Scope } ; EKind _Kind { EKind::Universal } ; TArray<const CScope*> _Scopes ; const CTypeBase* _SuperType { nullptr } ; bool)",
    "insertText": "IsUniversal()"
  },
  {
    "label": "IsMoreAccessibleThan()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsMoreAccessibleThan(const SAccessibilityScope& Other)"
  },
  {
    "label": "IsLessAccessibleThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLessAccessibleThan(const SAccessibilityScope& Other)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (} CUTF8String)",
    "insertText": "Describe()"
  },
  {
    "label": "IsSubsetOf()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsSubsetOf(const SAccessibilityScope& Other)"
  },
  {
    "label": "GetAccessibilityScope()",
    "kind": "Method",
    "detail": "Function (} ; SAccessibilityScope)",
    "insertText": "GetAccessibilityScope(const CDefinition& Definition, const SAccessLevel& InitialAccessLevel)"
  },
  {
    "label": "GetAccessibilityScope()",
    "kind": "Method",
    "detail": "Function (SAccessibilityScope)",
    "insertText": "GetAccessibilityScope(const CDefinition& Definition)"
  }
]