[
  {
    "label": "EventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EventData"
  },
  {
    "label": "FMovieSceneEventParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEventParameters"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FEventPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventPayload"
  },
  {
    "label": "FMovieSceneEventSectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEventSectionData"
  },
  {
    "label": "UMovieSceneEventSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEventSection"
  },
  {
    "label": "TMovieSceneChannelTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Curves / KeyHandle . h \" # include \" MovieSceneSection . h \" # include \" Curves / NameCurve . h \" # include \" UObject / StructOnScope . h \" # include \" Engine / Engine . h \" # include \" UObject / SoftObjectPath . h \" # include \" Channels / MovieSceneChannel . h \" # include \" Channels / MovieSceneChannelData . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" MovieSceneEventSection . generated . h \" struct EventData ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneEventParameters() : PackageFileVersion(GPackageFileUEVersion) , LicenseePackageFileVersion(GPackageFileLicenseeUEVersion)"
  },
  {
    "label": "FMovieSceneEventParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneEventParameters(UScriptStruct& InStruct) : StructType(&InStruct) , PackageFileVersion(GPackageFileUEVersion) , LicenseePackageFileVersion(GPackageFileLicenseeUEVersion)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMovieSceneEventParameters& A, const FMovieSceneEventParameters& B)"
  },
  {
    "label": "GetStructType()",
    "kind": "Method",
    "detail": "Function (UScriptStruct*)",
    "insertText": "GetStructType()"
  },
  {
    "label": "Reassign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reassign(UScriptStruct* NewStruct)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StructType = NewStruct ;)",
    "insertText": "if(!NewStruct)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StructBytes .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetInstance(FStructOnScope& OutStruct)"
  },
  {
    "label": "OverwriteWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverwriteWith(uint8* InstancePtr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneEventParameters& Payload)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Payload .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FEventPayload()"
  },
  {
    "label": "FEventPayload()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventPayload(FName InEventName) : EventName(InEventName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEventPayload& A, const FEventPayload& B)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() #if WITH_EDITORONLY_DATA MOVIESCENETRACKS_API void PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (# endif TMovieSceneChannelData<FEventPayload>)",
    "insertText": "GetData()"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FFrameNumber>)",
    "insertText": "GetKeyTimes()"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<FFrameNumber> OutKeyTimes)"
  },
  {
    "label": "SetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<const FFrameNumber> InKeyTimes)"
  },
  {
    "label": "DuplicateKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateKeys(TArrayView<const FKeyHandle> InHandles, TArrayView<FKeyHandle> OutNewHandles)"
  },
  {
    "label": "DeleteKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKeys(TArrayView<const FKeyHandle> InHandles)"
  },
  {
    "label": "DeleteKeysFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKeysFrom(FFrameNumber InTime, bool bDeleteKeysBefore)"
  },
  {
    "label": "ChangeFrameResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFrameResolution(FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "ComputeEffectiveRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "ComputeEffectiveRange()"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(FFrameNumber DeltaPosition)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "GetHandle(int32 Index)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndex(FKeyHandle Handle)"
  },
  {
    "label": "Optimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Optimize(const FKeyDataOptimizationParams& InParameters)"
  },
  {
    "label": "ClearDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearDefault()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if WITH_EDITORONLY_DATA template<> struct TStructOpsTypeTraits<FMovieSceneEventSectionData> : public TStructOpsTypeTraitsBase2<FMovieSceneEventSectionData> { enum { WithPostSerialize = true } ; } ; # endif)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UMovieSceneEventSection()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetEventData()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneEventSectionData&)",
    "insertText": "GetEventData()"
  },
  {
    "label": "EvaluateChannel()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TMovieSceneChannelTraits<FMovieSceneEventSectionData> : TMovieSceneChannelTraitsBase<FMovieSceneEventSectionData> { enum { SupportsDefaults = false } ; } ; bool)",
    "insertText": "EvaluateChannel(const FMovieSceneEventSectionData* InChannel, FFrameTime InTime, FEventPayload& OutValue)"
  }
]