[
  {
    "label": "ParseFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ParseFlag"
  },
  {
    "label": "BaseReaderHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BaseReaderHandler"
  },
  {
    "label": "StreamLocalCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamLocalCopy"
  },
  {
    "label": "GenericReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericReader"
  },
  {
    "label": "ClearStackOnExit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClearStackOnExit"
  },
  {
    "label": "StackStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackStream"
  },
  {
    "label": "NumberStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberStream"
  },
  {
    "label": "IterativeParsingState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IterativeParsingState"
  },
  {
    "label": "Token",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Token"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_READER_H_ # define RAPIDJSON_READER_H_ # include \" allocators . h \" # include \" stream . h \" # include \" encodedstream . h \" # include \" internal / clzll . h \" # include \" internal / meta . h \" # include \" internal / stack . h \" # include \" internal / strtod . h \" # include<limits> # if)",
    "insertText": "defined(RAPIDJSON_SIMD) && defined(_MSC_VER) #include <intrin.h> #pragma intrinsic(_BitScanForward) #endif #ifdef RAPIDJSON_SSE42 #include <nmmintrin.h> #elif defined(RAPIDJSON_SSE2) #include <emmintrin.h> #elif defined(RAPIDJSON_NEON) #include <arm_neon.h> #endif #ifdef __clang__ RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(old-style-cast) RAPIDJSON_DIAG_OFF(padded) RAPIDJSON_DIAG_OFF(switch-enum) #elif defined(_MSC_VER) RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(4127) RAPIDJSON_DIAG_OFF(4702) #endif #ifdef __GNUC__ RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(effc++) #endif #define RAPIDJSON_NOTHING #ifndef RAPIDJSON_PARSE_ERROR_EARLY_RETURN #define RAPIDJSON_PARSE_ERROR_EARLY_RETURN(value) \\ RAPIDJSON_MULTILINEMACRO_BEGIN \\ if (RAPIDJSON_UNLIKELY(HasParseError()))"
  },
  {
    "label": "SetParseError()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SetParseError(parseErrorCode, offset)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (\\ RAPIDJSON_MULTILINEMACRO_END # endif # ifndef RAPIDJSON_PARSE_ERROR # define)",
    "insertText": "RAPIDJSON_PARSE_ERROR(parseErrorCode, offset) \\ RAPIDJSON_MULTILINEMACRO_BEGIN \\ RAPIDJSON_PARSE_ERROR_NORETURN(parseErrorCode, offset)"
  },
  {
    "label": "Default()",
    "kind": "Method",
    "detail": "Function (\\ RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ; \\ RAPIDJSON_MULTILINEMACRO_END # endif # include \" error / error . h \" RAPIDJSON_NAMESPACE_BEGIN # ifndef RAPIDJSON_PARSE_DEFAULT_FLAGS # define RAPIDJSON_PARSE_DEFAULT_FLAGS kParseNoFlags # endif enum ParseFlag { kParseNoFlags = 0,kParseInsituFlag = 1,kParseValidateEncodingFlag = 2,kParseIterativeFlag = 4,kParseStopWhenDoneFlag = 8,kParseFullPrecisionFlag = 1 6,kParseCommentsFlag = 3 2,kParseNumbersAsStringsFlag = 6 4,kParseTrailingCommasFlag = 1 2 8,kParseNanAndInfFlag = 2 5 6,kParseEscapedApostropheFlag = 5 1 2,kParseDefaultFlags = RAPIDJSON_PARSE_DEFAULT_FLAGS } ; template<Encoding = UTF8<>,Derived = void> struct BaseReaderHandler { typedef Encoding::Ch Ch ; typedef internal::SelectIf<internal::IsSame<Derived,void>,BaseReaderHandler,Derived>::Type Override ; bool)",
    "insertText": "Default()"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Bool(bool)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int(int)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint(unsigned)"
  },
  {
    "label": "Int64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int64(int64_t)"
  },
  {
    "label": "Uint64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint64(uint64_t)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Double(double)"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawNumber(const Ch* str, SizeType len, bool copy)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "String(const Ch*, SizeType, bool)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartObject()"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Key(const Ch* str, SizeType len, bool copy)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndObject(SizeType)"
  },
  {
    "label": "StartArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartArray()"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndArray(SizeType)"
  },
  {
    "label": "StreamLocalCopy()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<Stream,int = StreamTraits<Stream>::copyOptimization> class StreamLocalCopy ; template<Stream> class StreamLocalCopy<Stream,1> { public :)",
    "insertText": "StreamLocalCopy(Stream& original) : s(original), original_(original)"
  },
  {
    "label": "StreamLocalCopy()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StreamLocalCopy()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (original_ = s ; } Stream s ; private : StreamLocalCopy&)",
    "insertText": "operator(const StreamLocalCopy&)"
  },
  {
    "label": "StreamLocalCopy()",
    "kind": "Method",
    "detail": "Function (Stream& original_ ; } ; template<Stream> class StreamLocalCopy<Stream,0> { public :)",
    "insertText": "StreamLocalCopy(Stream& original) : s(original)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} ; } template<InputStream> void)",
    "insertText": "SkipWhitespace(InputStream& is)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (internal::StreamLocalCopy<InputStream>)",
    "insertText": "copy(is)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (InputStream&)",
    "insertText": "s(copy.s)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (InputStream::Ch c ;)",
    "insertText": "while((c = s.Peek()) == ' ' || c == '\\n' || c == '\\r' || c == '\\t') s.Take()"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "SkipWhitespace(const char* p, const char* end)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i s =)",
    "insertText": "_mm_load_si128(reinterpret_cast<const __m128i *>(p))"
  },
  {
    "label": "_mm_cmpistri()",
    "kind": "Method",
    "detail": "Function (const int r =)",
    "insertText": "_mm_cmpistri(w, s, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_LEAST_SIGNIFICANT | _SIDD_NEGATIVE_POLARITY)"
  },
  {
    "label": "SkipWhitespace_SIMD()",
    "kind": "Method",
    "detail": "Function (} } const char*)",
    "insertText": "SkipWhitespace_SIMD(const char* p, const char* end)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i s =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(p))"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "SkipWhitespace(p, end)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(RAPIDJSON_SSE2) inline const char *SkipWhitespace_SIMD(const char* p)"
  },
  {
    "label": "C16()",
    "kind": "Method",
    "detail": "Function (c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c } const char whitespaces [ 4 ] [ 1 6 ] = {)",
    "insertText": "C16(' '), C16('\\n'), C16('\\r'), C16('\\t')"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (# undef C16 const __m128i w0 =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[0][0]))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i w1 =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[1][0]))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i w2 =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[2][0]))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i w3 =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[3][0]))"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i x =)",
    "insertText": "_mm_cmpeq_epi8(s, w0)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "_mm_or_si128(x, _mm_cmpeq_epi8(s, w1))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "_mm_or_si128(x, _mm_cmpeq_epi8(s, w2))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "_mm_or_si128(x, _mm_cmpeq_epi8(s, w3))"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (unsigned short r = static_cast<unsigned)",
    "insertText": "short(~_mm_movemask_epi8(x))"
  },
  {
    "label": "_BitScanForward()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER unsigned long offset ;)",
    "insertText": "_BitScanForward(&offset, r)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(RAPIDJSON_NEON) inline const char *SkipWhitespace_SIMD(const char* p)"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t w1 =)",
    "insertText": "vmovq_n_u8('\\n')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t w2 =)",
    "insertText": "vmovq_n_u8('\\r')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t w3 =)",
    "insertText": "vmovq_n_u8('\\t')"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s =)",
    "insertText": "vld1q_u8(reinterpret_cast<const uint8_t *>(p))"
  },
  {
    "label": "vceqq_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t x =)",
    "insertText": "vceqq_u8(s, w0)"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vceqq_u8(s, w1))"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vceqq_u8(s, w2))"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vceqq_u8(s, w3))"
  },
  {
    "label": "vmvnq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vmvnq_u8(x)"
  },
  {
    "label": "vrev64q_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vrev64q_u8(x)"
  },
  {
    "label": "vgetq_lane_u64()",
    "kind": "Method",
    "detail": "Function (uint64_t low =)",
    "insertText": "vgetq_lane_u64(vreinterpretq_u64_u8(x), 0)"
  },
  {
    "label": "vgetq_lane_u64()",
    "kind": "Method",
    "detail": "Function (uint64_t high =)",
    "insertText": "vgetq_lane_u64(vreinterpretq_u64_u8(x), 1)"
  },
  {
    "label": "clzll()",
    "kind": "Method",
    "detail": "Function (uint32_t lz =)",
    "insertText": "clzll(high)"
  },
  {
    "label": "clzll()",
    "kind": "Method",
    "detail": "Function (} } else { uint32_t lz =)",
    "insertText": "clzll(low)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef RAPIDJSON_SIMD template<> void)",
    "insertText": "SkipWhitespace(InsituStringStream& is)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (is . src_ = const_cast<)",
    "insertText": "char(SkipWhitespace_SIMD(is.src_))"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} template<> void)",
    "insertText": "SkipWhitespace(StringStream& is)"
  },
  {
    "label": "SkipWhitespace_SIMD()",
    "kind": "Method",
    "detail": "Function (is . src_ =)",
    "insertText": "SkipWhitespace_SIMD(is.src_)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (} template<> void)",
    "insertText": "SkipWhitespace(EncodedInputStream<UTF8<>, MemoryStream>& is)"
  },
  {
    "label": "SkipWhitespace_SIMD()",
    "kind": "Method",
    "detail": "Function (is . is_ . src_ =)",
    "insertText": "SkipWhitespace_SIMD(is.is_.src_, is.is_.end_)"
  },
  {
    "label": "GenericReader()",
    "kind": "Method",
    "detail": "Function (} # endif template<SourceEncoding,TargetEncoding,StackAllocator = CrtAllocator> class GenericReader { public : typedef SourceEncoding::Ch Ch ;)",
    "insertText": "GenericReader(StackAllocator* stackAllocator = 0, size_t stackCapacity = kDefaultStackCapacity) : stack_(stackAllocator, stackCapacity), parseResult_(), state_(IterativeParsingStartState)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,InputStream,Handler> ParseResult)",
    "insertText": "Parse(InputStream& is, Handler& handler)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (parseResult_ .)",
    "insertText": "Clear()"
  },
  {
    "label": "scope()",
    "kind": "Method",
    "detail": "Function (ClearStackOnExit)",
    "insertText": "scope(*this)"
  },
  {
    "label": "parseFlags()",
    "kind": "Method",
    "detail": "Function (SkipWhitespaceAndComments<)",
    "insertText": "parseFlags(is)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR_EARLY_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR_NORETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorDocumentEmpty, is.Tell())"
  },
  {
    "label": "parseFlags()",
    "kind": "Method",
    "detail": "Function (} else { ParseValue<)",
    "insertText": "parseFlags(is, handler)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR_NORETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorDocumentRootNotSingular, is.Tell())"
  },
  {
    "label": "IterativeParseInit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IterativeParseInit()"
  },
  {
    "label": "IterativeParseNext()",
    "kind": "Method",
    "detail": "Function (state_ = IterativeParsingStartState ; } template<unsigned parseFlags,InputStream,Handler> bool)",
    "insertText": "IterativeParseNext(InputStream& is, Handler& handler)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (Token t =)",
    "insertText": "Tokenize(is.Peek())"
  },
  {
    "label": "Predict()",
    "kind": "Method",
    "detail": "Function (IterativeParsingState n =)",
    "insertText": "Predict(state_, t)"
  },
  {
    "label": "parseFlags()",
    "kind": "Method",
    "detail": "Function (IterativeParsingState d = Transit<)",
    "insertText": "parseFlags(state_, t, n, is, handler)"
  },
  {
    "label": "HandleError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleError(state_, is)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state_ = d ;)",
    "insertText": "if(!(parseFlags & kParseStopWhenDoneFlag))"
  },
  {
    "label": "HasParseError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasParseError()"
  },
  {
    "label": "GetParseErrorCode()",
    "kind": "Method",
    "detail": "Function (} ParseErrorCode)",
    "insertText": "GetParseErrorCode()"
  },
  {
    "label": "GetErrorOffset()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetErrorOffset()"
  },
  {
    "label": "SetParseError()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetParseError(ParseErrorCode code, size_t offset)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (parseResult_ .)",
    "insertText": "Set(code, offset)"
  },
  {
    "label": "GenericReader()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GenericReader(const GenericReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GenericReader&)",
    "insertText": "operator(const GenericReader&)"
  },
  {
    "label": "ClearStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStack()"
  },
  {
    "label": "ClearStackOnExit()",
    "kind": "Method",
    "detail": "Function (} struct ClearStackOnExit {)",
    "insertText": "ClearStackOnExit(GenericReader& r) : r_(r)"
  },
  {
    "label": "ClearStackOnExit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ClearStackOnExit()"
  },
  {
    "label": "ClearStackOnExit()",
    "kind": "Method",
    "detail": "Function (} private : GenericReader& r_ ;)",
    "insertText": "ClearStackOnExit(const ClearStackOnExit&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ClearStackOnExit&)",
    "insertText": "operator(const ClearStackOnExit&)"
  },
  {
    "label": "SkipWhitespaceAndComments()",
    "kind": "Method",
    "detail": "Function (} ; template<unsigned parseFlags,InputStream> void)",
    "insertText": "SkipWhitespaceAndComments(InputStream& is)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipWhitespace(is)"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (} else is .)",
    "insertText": "Take()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(RAPIDJSON_LIKELY(Consume(is, '/'))) while (is.Peek() != '\\0' && is.Take() != '\\n')"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorUnspecificSyntaxError, is.Tell())"
  },
  {
    "label": "ParseObject()",
    "kind": "Method",
    "detail": "Function (} } } template<unsigned parseFlags,InputStream,Handler> void)",
    "insertText": "ParseObject(InputStream& is, Handler& handler)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(is.Peek() == '{')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ;)",
    "insertText": "if(Consume(is, '}'))"
  },
  {
    "label": "parseFlags()",
    "kind": "Method",
    "detail": "Function (ParseString<)",
    "insertText": "parseFlags(is, handler, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ;)",
    "insertText": "if(RAPIDJSON_UNLIKELY(!Consume(is, ':'))) RAPIDJSON_PARSE_ERROR(kParseErrorObjectMissColon, is.Tell())"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ; + + memberCount ;)",
    "insertText": "switch(is.Peek())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(parseFlags & kParseTrailingCommasFlag)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(is.Peek() == '[')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ;)",
    "insertText": "if(Consume(is, ']'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ;)",
    "insertText": "if(Consume(is, ','))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(is.Peek() == 'n')"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, is.Tell())"
  },
  {
    "label": "ParseTrue()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,InputStream,Handler> void)",
    "insertText": "ParseTrue(InputStream& is, Handler& handler)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(is.Peek() == 't')"
  },
  {
    "label": "ParseFalse()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,InputStream,Handler> void)",
    "insertText": "ParseFalse(InputStream& is, Handler& handler)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(is.Peek() == 'f')"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (} template<InputStream> RAPIDJSON_FORCEINLINE bool)",
    "insertText": "Consume(InputStream& is, typename InputStream::Ch expect)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned codepoint = 0 ;)",
    "insertText": "for(int i = 0; i < 4; i++)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (Ch c = is .)",
    "insertText": "Peek()"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (codepoint<<= 4 ; codepoint + = static_cast<)",
    "insertText": "unsigned(c)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR_EARLY_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR_EARLY_RETURN(0)"
  },
  {
    "label": "StackStream()",
    "kind": "Method",
    "detail": "Function (} return codepoint ; } template<CharType> class StackStream { public : typedef CharType Ch ;)",
    "insertText": "StackStream(internal::Stack<StackAllocator>& stack) : stack_(stack), length_(0)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE void)",
    "insertText": "Put(Ch c)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (* stack_ . template Push<)",
    "insertText": "Ch()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (+ + length_ ; } RAPIDJSON_FORCEINLINE void*)",
    "insertText": "Push(SizeType count)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (length_ + = count ; return stack_ . template Push<)",
    "insertText": "Ch(count)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Length()"
  },
  {
    "label": "StackStream()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "StackStream(const StackStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StackStream&)",
    "insertText": "operator(const StackStream&)"
  },
  {
    "label": "ParseString()",
    "kind": "Method",
    "detail": "Function (internal::Stack<StackAllocator>& stack_ ; SizeType length_ ; } ; template<unsigned parseFlags,InputStream,Handler> void)",
    "insertText": "ParseString(InputStream& is, Handler& handler, bool isKey = false)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(s.Peek() == '\\\"')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool success = false ;)",
    "insertText": "if(parseFlags & kParseInsituFlag)"
  },
  {
    "label": "PutBegin()",
    "kind": "Method",
    "detail": "Function (InputStream::Ch* head = s .)",
    "insertText": "PutBegin()"
  },
  {
    "label": "SourceEncoding()",
    "kind": "Method",
    "detail": "Function (ParseStringToStream<parseFlags,SourceEncoding,)",
    "insertText": "SourceEncoding(s, s)"
  },
  {
    "label": "PutEnd()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ; size_t length = s .)",
    "insertText": "PutEnd(head)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(length <= 0xFFFFFFFF)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (const TargetEncoding::Ch* const str = reinterpret_cast<)",
    "insertText": "Ch(head)"
  },
  {
    "label": "success()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "success(isKey ? handler.Key(str, SizeType(length), false) : handler.String(str, SizeType(length), false))"
  },
  {
    "label": "stackStream()",
    "kind": "Method",
    "detail": "Function (} else { StackStream<TargetEncoding::Ch>)",
    "insertText": "stackStream(stack_)"
  },
  {
    "label": "TargetEncoding()",
    "kind": "Method",
    "detail": "Function (ParseStringToStream<parseFlags,SourceEncoding,)",
    "insertText": "TargetEncoding(s, stackStream)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ; SizeType length = static_cast<)",
    "insertText": "SizeType(stackStream.Length())"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const TargetEncoding::Ch* const str = stackStream .)",
    "insertText": "Pop()"
  },
  {
    "label": "success()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "success(isKey ? handler.Key(str, length, true) : handler.String(str, length, true))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RAPIDJSON_UNLIKELY(!success)) RAPIDJSON_PARSE_ERROR(kParseErrorTermination, s.Tell())"
  },
  {
    "label": "ParseStringToStream()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,SEncoding,TEncoding,InputStream,OutputStream> RAPIDJSON_FORCEINLINE void)",
    "insertText": "ParseStringToStream(InputStream& is, OutputStream& os)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# define Z16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 const char escape [ 2 5 6 ] = { Z16,Z16,0,0,' \\ \" ',0,0,0,0,0,0,0,0,0,0,0,0,' / ',Z16,Z16,0,0,0,0,0,0,0,0,0,0,0,0,' \\ \\ ',0,0,0,0,0,' \\ b ',0,0,0,' \\ f ',0,0,0,0,0,0,0,' \\ n ',0,0,0,' \\ r ',0,' \\ t ',0,0,0,0,0,0,0,0,0,0,0,Z16,Z16,Z16,Z16,Z16,Z16,Z16,Z16 } ; # undef Z16)",
    "insertText": "for(;;)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (size_t escapeOffset = is .)",
    "insertText": "Tell()"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "Put(static_cast<typename TEncoding::Ch>(escape[static_cast<unsigned char>(e)]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((parseFlags & kParseEscapedApostropheFlag) && RAPIDJSON_LIKELY(e == '\\''))"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "Put('\\'')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(RAPIDJSON_LIKELY(e == 'u'))"
  },
  {
    "label": "ParseHex4()",
    "kind": "Method",
    "detail": "Function (unsigned codepoint =)",
    "insertText": "ParseHex4(is, escapeOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ;)",
    "insertText": "if(RAPIDJSON_UNLIKELY(codepoint >= 0xD800 && codepoint <= 0xDFFF))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID ;)",
    "insertText": "if(RAPIDJSON_UNLIKELY(codepoint2 < 0xDC00 || codepoint2 > 0xDFFF)) RAPIDJSON_PARSE_ERROR(kParseErrorStringUnicodeSurrogateInvalid, escapeOffset)"
  },
  {
    "label": "codepoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "codepoint(((codepoint - 0xD800) << 10) | (codepoint2 - 0xDC00))"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorStringUnicodeSurrogateInvalid, escapeOffset)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Encode(os, codepoint)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorStringEscapeInvalid, escapeOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(RAPIDJSON_UNLIKELY(c == '\"'))"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "Put('\\0')"
  },
  {
    "label": "ScanCopyUnescapedString()",
    "kind": "Method",
    "detail": "Function (} } } template<InputStream,OutputStream> RAPIDJSON_FORCEINLINE void)",
    "insertText": "ScanCopyUnescapedString(InputStream&, OutputStream&)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(RAPIDJSON_SSE2) || defined(RAPIDJSON_SSE42) static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(StringStream& is, StackStream<char>& os)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const char* p = is . src_ ; const char* nextAligned = reinterpret_cast<const)",
    "insertText": "char((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15))"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (is . src_ = p ; return ; } else os .)",
    "insertText": "Put(*p++)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const char dquote [ 1 6 ] = { ' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ',' \\ \" ' } ; const char bslash [ 1 6 ] = { ' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ',' \\ \\ ' } ; const char space [ 1 6 ] = { 0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F,0 x1F } ; const __m128i dq =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&dquote[0]))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i bs =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&bslash[0]))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i sp =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i *>(&space[0]))"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (const __m128i t1 =)",
    "insertText": "_mm_cmpeq_epi8(s, dq)"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (const __m128i t2 =)",
    "insertText": "_mm_cmpeq_epi8(s, bs)"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (const __m128i t3 =)",
    "insertText": "_mm_cmpeq_epi8(_mm_max_epu8(s, sp), sp)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i x =)",
    "insertText": "_mm_or_si128(_mm_or_si128(t1, t2), t3)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (unsigned short r = static_cast<unsigned)",
    "insertText": "short(_mm_movemask_epi8(x))"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (length = offset ; # else length = static_cast<)",
    "insertText": "SizeType(__builtin_ffs(r) - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(length != 0)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* q = reinterpret_cast<)",
    "insertText": "char(os.Push(length))"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (p + = length ; } break ; })",
    "insertText": "_mm_storeu_si128(reinterpret_cast<__m128i *>(os.Push(16)), s)"
  },
  {
    "label": "ScanCopyUnescapedString()",
    "kind": "Method",
    "detail": "Function (} is . src_ = p ; } RAPIDJSON_FORCEINLINE void)",
    "insertText": "ScanCopyUnescapedString(InsituStringStream& is, InsituStringStream& os)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(&is == &os)"
  },
  {
    "label": "SkipUnescapedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipUnescapedString(is)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (length = offset ; # else length = static_cast<)",
    "insertText": "size_t(__builtin_ffs(r) - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(const char* pend = p + length; p != pend;)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "_mm_storeu_si128(reinterpret_cast<__m128i *>(q), s)"
  },
  {
    "label": "SkipUnescapedString()",
    "kind": "Method",
    "detail": "Function (} is . src_ = p ; is . dst_ = q ; } RAPIDJSON_FORCEINLINE void)",
    "insertText": "SkipUnescapedString(InsituStringStream& is)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(is.src_ == is.dst_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif p + = length ; break ; } } is . src_ = is . dst_ = p ; } # elif)",
    "insertText": "defined(RAPIDJSON_NEON) static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(StringStream& is, StackStream<char>& os)"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s0 =)",
    "insertText": "vmovq_n_u8('\"')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s1 =)",
    "insertText": "vmovq_n_u8('\\\\')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s2 =)",
    "insertText": "vmovq_n_u8('\\b')"
  },
  {
    "label": "vmovq_n_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s3 =)",
    "insertText": "vmovq_n_u8(32)"
  },
  {
    "label": "vceqq_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t x =)",
    "insertText": "vceqq_u8(s, s0)"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vceqq_u8(s, s1))"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vceqq_u8(s, s2))"
  },
  {
    "label": "vorrq_u8()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vorrq_u8(x, vcltq_u8(s, s3))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType length = 0 ; bool escaped = false ;)",
    "insertText": "if(low == 0)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "length(lz >> 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (length = lz>> 3 ; escaped = true ; })",
    "insertText": "if(RAPIDJSON_UNLIKELY(escaped))"
  },
  {
    "label": "vst1q_u8()",
    "kind": "Method",
    "detail": "Function (p + = length ; } break ; })",
    "insertText": "vst1q_u8(reinterpret_cast<uint8_t *>(os.Push(16)), s)"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x16_t s =)",
    "insertText": "vld1q_u8(reinterpret_cast<uint8_t *>(p))"
  },
  {
    "label": "vst1q_u8()",
    "kind": "Method",
    "detail": "Function (* q + + =* p + + ; } break ; })",
    "insertText": "vst1q_u8(reinterpret_cast<uint8_t *>(q), s)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(lz >> 3)"
  },
  {
    "label": "NumberStream()",
    "kind": "Method",
    "detail": "Function (p + = lz>> 3 ; break ; } } is . src_ = is . dst_ = p ; } # endif template<InputStream,StackCharacter,bool backup,bool pushOnTake> class NumberStream ; template<InputStream,StackCharacter> class NumberStream<InputStream,StackCharacter,false,false> { public : typedef InputStream::Ch Ch ;)",
    "insertText": "NumberStream(GenericReader& reader, InputStream& s) : is(s)"
  },
  {
    "label": "TakePush()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE Ch)",
    "insertText": "TakePush()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE void)",
    "insertText": "Push(char)"
  },
  {
    "label": "NumberStream()",
    "kind": "Method",
    "detail": "Function (InputStream& is ; } ; template<InputStream,StackCharacter> class NumberStream<InputStream,StackCharacter,true,false> : public NumberStream<InputStream,StackCharacter,false,false> { typedef NumberStream<InputStream,StackCharacter,false,false> Base ; public :)",
    "insertText": "NumberStream(GenericReader& reader, InputStream& s) : Base(reader, s), stackStream(reader.stack_)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (stackStream .)",
    "insertText": "Put(static_cast<StackCharacter>(Base::is.Peek()))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE void)",
    "insertText": "Push(StackCharacter c)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (stackStream .)",
    "insertText": "Put(c)"
  },
  {
    "label": "NumberStream()",
    "kind": "Method",
    "detail": "Function (} private : StackStream<StackCharacter> stackStream ; } ; template<InputStream,StackCharacter> class NumberStream<InputStream,StackCharacter,true,true> : public NumberStream<InputStream,StackCharacter,true,false> { typedef NumberStream<InputStream,StackCharacter,true,false> Base ; public :)",
    "insertText": "NumberStream(GenericReader& reader, InputStream& s) : Base(reader, s)"
  },
  {
    "label": "ParseNumber()",
    "kind": "Method",
    "detail": "Function (} } ; template<unsigned parseFlags,InputStream,Handler> void)",
    "insertText": "ParseNumber(InputStream& is, Handler& handler)"
  },
  {
    "label": "BoolType()",
    "kind": "Method",
    "detail": "Function (typedef internal::SelectIf<)",
    "insertText": "BoolType(parseFlags & kParseNumbersAsStringsFlag)"
  },
  {
    "label": "NumberCharacter()",
    "kind": "Method",
    "detail": "Function (NumberStream<InputStream,)",
    "insertText": "NumberCharacter((parseFlags & kParseNumbersAsStringsFlag) != 0) ? ((parseFlags & kParseInsituFlag) == 0) : ((parseFlags & kParseFullPrecisionFlag) != 0), (parseFlags & kParseNumbersAsStringsFlag) != 0 && (parseFlags & kParseInsituFlag) == 0> s(*this, copy.s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned i = 0 ; uint64_t i64 = 0 ; bool use64bit = false ; int significandDigit = 0 ;)",
    "insertText": "if(RAPIDJSON_UNLIKELY(s.Peek() == '0'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(RAPIDJSON_LIKELY(s.Peek() >= '1' && s.Peek() <= '9'))"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (i = static_cast<)",
    "insertText": "unsigned(s.TakePush() - '0')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (significandDigit + + ; } else)",
    "insertText": "while(RAPIDJSON_LIKELY(s.Peek() >= '0' && s.Peek() <= '9'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (significandDigit + + ; } } else)",
    "insertText": "if((parseFlags & kParseNanAndInfFlag) && RAPIDJSON_LIKELY((s.Peek() == 'I' || s.Peek() == 'N')))"
  },
  {
    "label": "quiet_NaN()",
    "kind": "Method",
    "detail": "Function (d = std::numeric_limits<double)",
    "insertText": "quiet_NaN()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (useNanOrInf = true ; } } else)",
    "insertText": "if(RAPIDJSON_LIKELY(Consume(s, 'I')))"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "d(minus ? -std::numeric_limits<double>::infinity() : std::numeric_limits<double>::infinity())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (useNanOrInf = true ;)",
    "insertText": "if(RAPIDJSON_UNLIKELY(s.Peek() == 'i' && !(Consume(s, 'i') && Consume(s, 'n') && Consume(s, 'i') && Consume(s, 't') && Consume(s, 'y'))))"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, s.Tell())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(RAPIDJSON_UNLIKELY(!useNanOrInf))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool useDouble = false ;)",
    "insertText": "if(use64bit)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (d = static_cast<)",
    "insertText": "double(i64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (significandDigit + + ; } })",
    "insertText": "if(useDouble)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "d(s.TakePush() - '0')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } int expFrac = 0 ; size_t decimalPosition ;)",
    "insertText": "if(Consume(s, '.'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_64BIT)",
    "insertText": "if(!use64bit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - expFrac ;)",
    "insertText": "if(i64 != 0)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (# else d = static_cast<)",
    "insertText": "double(use64bit ? i64 : i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - expFrac ;)",
    "insertText": "if(RAPIDJSON_LIKELY(d > 0.0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int exp = 0 ;)",
    "insertText": "if(Consume(s, 'e') || Consume(s, 'E'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (useDouble = true ; } bool expMinus = false ;)",
    "insertText": "if(Consume(s, '+'))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (exp = static_cast<)",
    "insertText": "int(s.Take() - '0')"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(expFrac <= 0)"
  },
  {
    "label": "maxExp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "maxExp(expFrac + 2147483639)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorNumberMissExponent, s.Tell())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bool cont = true ;)",
    "insertText": "if(parseFlags & kParseNumbersAsStringsFlag)"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (cont = handler .)",
    "insertText": "RawNumber(str, SizeType(length), false)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (} else { SizeType numCharsToCopy = static_cast<)",
    "insertText": "SizeType(s.Length())"
  },
  {
    "label": "srcStream()",
    "kind": "Method",
    "detail": "Function (GenericStringStream<UTF8<NumberCharacter>>)",
    "insertText": "srcStream(s.Pop())"
  },
  {
    "label": "dstStream()",
    "kind": "Method",
    "detail": "Function (StackStream<TargetEncoding::Ch>)",
    "insertText": "dstStream(stack_)"
  },
  {
    "label": "Transcode()",
    "kind": "Method",
    "detail": "Function (Transcoder<UTF8<TargetEncoding::Ch>,TargetEncoding)",
    "insertText": "Transcode(srcStream, dstStream)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (const SizeType length = static_cast<)",
    "insertText": "SizeType(dstStream.Length())"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (cont = handler .)",
    "insertText": "RawNumber(str, SizeType(length), true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int p = exp + expFrac ;)",
    "insertText": "if(parseFlags & kParseFullPrecisionFlag) d = internal::StrtodFullPrecision(d, p, decimal, length, decimalPosition, exp)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorNumberTooBig, startOffset)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (} cont = handler .)",
    "insertText": "Double(minus ? -d : d)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(useNanOrInf)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (cont = handler .)",
    "insertText": "Double(d)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(minus) cont = handler.Int(static_cast<int32_t>(~i + 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(RAPIDJSON_UNLIKELY(!cont)) RAPIDJSON_PARSE_ERROR(kParseErrorTermination, startOffset)"
  },
  {
    "label": "ParseValue()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,InputStream,Handler> void)",
    "insertText": "ParseValue(InputStream& is, Handler& handler)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (break ; } } enum IterativeParsingState { IterativeParsingFinishState = 0,IterativeParsingErrorState,IterativeParsingStartState,IterativeParsingObjectInitialState,IterativeParsingMemberKeyState,IterativeParsingMemberValueState,IterativeParsingObjectFinishState,IterativeParsingArrayInitialState,IterativeParsingElementState,IterativeParsingArrayFinishState,IterativeParsingValueState,IterativeParsingElementDelimiterState,IterativeParsingMemberDelimiterState,IterativeParsingKeyValueDelimiterState,cIterativeParsingStateCount } ; enum Token { LeftBracketToken = 0,RightBracketToken,LeftCurlyBracketToken,RightCurlyBracketToken,CommaToken,ColonToken,StringToken,FalseToken,TrueToken,NullToken,NumberToken,kTokenCount } ; RAPIDJSON_FORCEINLINE Token)",
    "insertText": "Tokenize(Ch c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# define N NumberToken # define N16 N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N const unsigned char tokenMap [ 2 5 6 ] = { N16,N16,N,N,StringToken,N,N,N,N,N,N,N,N,N,CommaToken,N,N,N,N,N,N,N,N,N,N,N,N,N,ColonToken,N,N,N,N,N,N16,N,N,N,N,N,N,N,N,N,N,N,LeftBracketToken,N,RightBracketToken,N,N,N,N,N,N,N,N,FalseToken,N,N,N,N,N,N,N,NullToken,N,N,N,N,N,TrueToken,N,N,N,N,N,N,LeftCurlyBracketToken,N,RightCurlyBracketToken,N,N,N16,N16,N16,N16,N16,N16,N16,N16 } ; # undef N # undef N16)",
    "insertText": "if(sizeof(Ch) == 1 || static_cast<unsigned>(c) < 256) return static_cast<Token>(tokenMap[static_cast<unsigned char>(c)])"
  },
  {
    "label": "IterativeParsingState()",
    "kind": "Method",
    "detail": "Function (const char G [ cIterativeParsingStateCount ] [ kTokenCount ] = { { IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingArrayInitialState,IterativeParsingErrorState,IterativeParsingObjectInitialState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingValueState,IterativeParsingValueState,IterativeParsingValueState,IterativeParsingValueState,IterativeParsingValueState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingObjectFinishState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingMemberKeyState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingKeyValueDelimiterState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingObjectFinishState,IterativeParsingMemberDelimiterState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingArrayInitialState,IterativeParsingArrayFinishState,IterativeParsingObjectInitialState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingElementState,IterativeParsingElementState,IterativeParsingElementState,IterativeParsingElementState,IterativeParsingElementState },{ IterativeParsingErrorState,IterativeParsingArrayFinishState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingElementDelimiterState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingArrayInitialState,IterativeParsingArrayFinishState,IterativeParsingObjectInitialState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingElementState,IterativeParsingElementState,IterativeParsingElementState,IterativeParsingElementState,IterativeParsingElementState },{ IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingObjectFinishState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingMemberKeyState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState },{ IterativeParsingArrayInitialState,IterativeParsingErrorState,IterativeParsingObjectInitialState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingErrorState,IterativeParsingMemberValueState,IterativeParsingMemberValueState,IterativeParsingMemberValueState,IterativeParsingMemberValueState,IterativeParsingMemberValueState },} ; return static_cast<)",
    "insertText": "IterativeParsingState(G[state][token])"
  },
  {
    "label": "Transit()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,InputStream,Handler> RAPIDJSON_FORCEINLINE IterativeParsingState)",
    "insertText": "Transit(IterativeParsingState src, Token token, IterativeParsingState dst, InputStream& is, Handler& handler)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (* stack_ . template Push<)",
    "insertText": "SizeType(1)"
  },
  {
    "label": "hr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hr(dst == IterativeParsingObjectInitialState) ? handler.StartObject() : handler.StartArray()"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR_NORETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorTermination, is.Tell())"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (* stack_ . template Top<)",
    "insertText": "SizeType() = *stack_.template Top<SizeType>()"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR_NORETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorObjectMissName, is.Tell())"
  },
  {
    "label": "IterativeParsingState()",
    "kind": "Method",
    "detail": "Function (IterativeParsingState n = static_cast<)",
    "insertText": "IterativeParsingState(*stack_.template Pop<SizeType>(1))"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (bool hr = handler .)",
    "insertText": "EndObject(c)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR_NORETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorValueInvalid, is.Tell())"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (bool hr = handler .)",
    "insertText": "EndArray(c)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorArrayMissCommaOrSquareBracket, is.Tell())"
  },
  {
    "label": "Predict()",
    "kind": "Method",
    "detail": "Function (IterativeParsingState n =)",
    "insertText": "Predict(state, t)"
  },
  {
    "label": "parseFlags()",
    "kind": "Method",
    "detail": "Function (IterativeParsingState d = Transit<)",
    "insertText": "parseFlags(state, t, n, is, handler)"
  },
  {
    "label": "HandleError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleError(state, is)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } state = d ;)",
    "insertText": "if((parseFlags & kParseStopWhenDoneFlag) && state == IterativeParsingFinishState)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(state != IterativeParsingFinishState) HandleError(state, is)"
  }
]