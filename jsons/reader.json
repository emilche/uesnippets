[
  {
    "label": "ParseException",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParseException"
  },
  {
    "label": "ParseFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ParseFlag"
  },
  {
    "label": "rapidjson",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rapidjson"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "BaseReaderHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BaseReaderHandler"
  },
  {
    "label": "StreamLocalCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamLocalCopy"
  },
  {
    "label": "StreamLocalCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamLocalCopy"
  },
  {
    "label": "StreamLocalCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamLocalCopy"
  },
  {
    "label": "GenericReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericReader"
  },
  {
    "label": "ClearStackOnExit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClearStackOnExit"
  },
  {
    "label": "StackStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackStream"
  },
  {
    "label": "NumberStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberStream"
  },
  {
    "label": "NumberStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberStream"
  },
  {
    "label": "NumberStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberStream"
  },
  {
    "label": "NumberStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberStream"
  },
  {
    "label": "IterativeParsingState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IterativeParsingState"
  },
  {
    "label": "Token",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Token"
  },
  {
    "label": "GenericReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericReader"
  },
  {
    "label": "License()",
    "kind": "Method",
    "detail": "Function (MIT)",
    "insertText": "License(the \"License\")"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Null()"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Bool(bool b)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Int(int i)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Uint(unsigned i)"
  },
  {
    "label": "Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Int64(int64_t i)"
  },
  {
    "label": "Uint64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Uint64(uint64_t i)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Double(double d)"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RawNumber(const Ch* str, SizeType length, bool copy)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "String(const Ch* str, SizeType length, bool copy)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartObject()"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Key(const Ch* str, SizeType length, bool copy)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndObject(SizeType memberCount)"
  },
  {
    "label": "StartArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartArray()"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndArray(SizeType elementCount)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (internal::StreamLocalCopy<InputStream>)",
    "insertText": "copy(is)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SkipWhitespace(p, end)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SkipWhitespace(p, end)"
  },
  {
    "label": "SkipWhitespace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SkipWhitespace(p, end)"
  },
  {
    "label": "scope()",
    "kind": "Method",
    "detail": "Function (ClearStackOnExit)",
    "insertText": "scope(*this)"
  },
  {
    "label": "IsIterativeParsingCompleteState()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsIterativeParsingCompleteState(state_)"
  },
  {
    "label": "StackStream()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "StackStream(const StackStream&)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (internal::StreamLocalCopy<InputStream>)",
    "insertText": "copy(is)"
  },
  {
    "label": "stackStream()",
    "kind": "Method",
    "detail": "Function (TargetEncoding::Ch>)",
    "insertText": "stackStream(stack_)"
  },
  {
    "label": "RAPIDJSON_PARSE_ERROR()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "RAPIDJSON_PARSE_ERROR(kParseErrorStringEscapeInvalid, escapeOffset)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (internal::StreamLocalCopy<InputStream>)",
    "insertText": "copy(is)"
  },
  {
    "label": "dstStream()",
    "kind": "Method",
    "detail": "Function (TargetEncoding::Ch>)",
    "insertText": "dstStream(stack_)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (IterativeParsingKeyValueDelimiterState:)",
    "insertText": "RAPIDJSON_ASSERT(token == ColonToken)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "RAPIDJSON_ASSERT(src == IterativeParsingElementState)"
  },
  {
    "label": "scope()",
    "kind": "Method",
    "detail": "Function (ClearStackOnExit)",
    "insertText": "scope(*this)"
  }
]