[
  {
    "label": "VideoFrameMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoFrameMatcher"
  },
  {
    "label": "DecodedFrameBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecodedFrameBase"
  },
  {
    "label": "CapturedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CapturedFrame"
  },
  {
    "label": "VideoLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoLayer"
  },
  {
    "label": "CapturedFrameTap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CapturedFrameTap"
  },
  {
    "label": "ForwardingCapturedFrameTap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForwardingCapturedFrameTap"
  },
  {
    "label": "DecodedFrameTap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecodedFrameTap"
  },
  {
    "label": "VideoFrameMatcher()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_VIDEO_FRAME_MATCHER_H_ # define TEST_SCENARIO_VIDEO_FRAME_MATCHER_H_ # include<deque> # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" api / units / timestamp . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_source_interface . h \" # include \" rtc_base / ref_counted_object . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" system_wrappers / include / clock . h \" # include \" test / scenario / performance_stats . h \" namespace webrtc { namespace test { class VideoFrameMatcher { public :)",
    "insertText": "VideoFrameMatcher(std::vector<std::function<void(const VideoFramePair&)>> frame_pair_handlers)"
  },
  {
    "label": "VideoFrameMatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoFrameMatcher()"
  },
  {
    "label": "RegisterLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLayer(int layer_id)"
  },
  {
    "label": "OnCapturedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCapturedFrame(const VideoFrame& frame, Timestamp at_time)"
  },
  {
    "label": "OnDecodedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecodedFrame(const VideoFrame& frame, int layer_id, Timestamp render_time, Timestamp at_time)"
  },
  {
    "label": "Active()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Active()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (private : struct DecodedFrameBase { int id ; Timestamp decoded_time =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "HandleMatch()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<VideoFrameBuffer> frame ; rtc::scoped_refptr<VideoFrameBuffer> thumb ; double best_score = INFINITY ; rtc::scoped_refptr<DecodedFrame> best_decode ; bool matched = false ; } ; struct VideoLayer { int layer_id ; std::deque<CapturedFrame> captured_frames ; rtc::scoped_refptr<DecodedFrame> last_decode ; int next_decoded_id = 1 ; } ; void)",
    "insertText": "HandleMatch(CapturedFrame captured, int layer_id)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (int next_capture_id_ = 1 ; std::vector<std::function<)",
    "insertText": "void(const VideoFramePair&)"
  },
  {
    "label": "CapturedFrameTap()",
    "kind": "Method",
    "detail": "Function (std::map<int,VideoLayer> layers_ ; TaskQueueForTest task_queue_ ; } ; class CapturedFrameTap : public rtc::VideoSinkInterface<VideoFrame> { public :)",
    "insertText": "CapturedFrameTap(Clock* clock, VideoFrameMatcher* matcher)"
  },
  {
    "label": "CapturedFrameTap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapturedFrameTap(CapturedFrameTap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CapturedFrameTap&)",
    "insertText": "operator(CapturedFrameTap&)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(const VideoFrame& frame)"
  },
  {
    "label": "OnDiscardedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDiscardedFrame()"
  },
  {
    "label": "ForwardingCapturedFrameTap()",
    "kind": "Method",
    "detail": "Function (private : Clock* const clock_ ; VideoFrameMatcher* const matcher_ ; int discarded_count_ = 0 ; } ; class ForwardingCapturedFrameTap : public rtc::VideoSinkInterface<VideoFrame>,public rtc::VideoSourceInterface<VideoFrame> { public :)",
    "insertText": "ForwardingCapturedFrameTap(Clock* clock, VideoFrameMatcher* matcher, rtc::VideoSourceInterface<VideoFrame>* source)"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateSink(VideoSinkInterface<VideoFrame>* sink, const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(VideoSinkInterface<VideoFrame>* sink)"
  },
  {
    "label": "DecodedFrameTap()",
    "kind": "Method",
    "detail": "Function (private : Clock* const clock_ ; VideoFrameMatcher* const matcher_ ; rtc::VideoSourceInterface<VideoFrame>* const source_ ; VideoSinkInterface<VideoFrame>* sink_ = nullptr ; int discarded_count_ = 0 ; } ; class DecodedFrameTap : public rtc::VideoSinkInterface<VideoFrame> { public :)",
    "insertText": "DecodedFrameTap(Clock* clock, VideoFrameMatcher* matcher, int layer_id)"
  }
]