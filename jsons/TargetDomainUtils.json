[
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FSavePackageResultStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageResultStruct"
  },
  {
    "label": "TUniqueFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueFunction"
  },
  {
    "label": "FCookDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDependency"
  },
  {
    "label": "FCookDependencies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDependencies"
  },
  {
    "label": "FBuildDefinitionList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildDefinitionList"
  },
  {
    "label": "FCookAttachments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookAttachments"
  },
  {
    "label": "FGeneratedPackageResultStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratedPackageResultStruct"
  },
  {
    "label": "FCookDependencyGroups",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDependencyGroups"
  },
  {
    "label": "FRecordedDependencies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecordedDependencies"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" AssetRegistry / IAssetRegistry . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" DerivedDataBuildDefinition . h \" # include \" IO / IoHash . h \" # include \" Misc / Optional . h \" # include \" Serialization / PackageWriter . h \" # include \" UObject / NameTypes . h \" class FCbObject ; class FCbObjectView ; class FCbWriter ; class FString ; class ITargetPlatform ; class UPackage ; struct FSavePackageResultStruct ; template<FuncType> class TUniqueFunction ; namespace UE::Cook { class FCookDependency ; } namespace UE::TargetDomain { class FCookDependencies ; } namespace UE::TargetDomain { struct FBuildDefinitionList ; } namespace UE::TargetDomain { struct FCookAttachments ; } bool)",
    "insertText": "LoadFromCompactBinary(FCbObjectView ObjectView, UE::TargetDomain::FCookDependencies& CookAttachments)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::TargetDomain::FCookDependencies& CookAttachments)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbObject&& Object, UE::TargetDomain::FBuildDefinitionList& Definitions)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::TargetDomain::FBuildDefinitionList& Definitions)"
  },
  {
    "label": "CookInitialize()",
    "kind": "Method",
    "detail": "Function (namespace UE::TargetDomain { void)",
    "insertText": "CookInitialize()"
  },
  {
    "label": "FCookDependencies()",
    "kind": "Method",
    "detail": "Function (struct FGeneratedPackageResultStruct { FAssetPackageData AssetPackageData ; TArray<FAssetDependency> PackageDependencies ; } ; class FCookDependencies { public :)",
    "insertText": "FCookDependencies()"
  },
  {
    "label": "FCookDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookDependencies(const FCookDependencies&)"
  },
  {
    "label": "FCookDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookDependencies(FCookDependencies&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCookDependencies&)",
    "insertText": "operator(const FCookDependencies&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCookDependencies&)",
    "insertText": "operator(FCookDependencies&&)"
  },
  {
    "label": "GetBuildPackageDependencies()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetBuildPackageDependencies()"
  },
  {
    "label": "GetConfigDependencies()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetConfigDependencies()"
  },
  {
    "label": "GetRuntimePackageDependencies()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetRuntimePackageDependencies()"
  },
  {
    "label": "GetScriptPackageDependencies()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetScriptPackageDependencies()"
  },
  {
    "label": "GetCookDependencies()",
    "kind": "Method",
    "detail": "Function (const TArray<UE::Cook::FCookDependency>&)",
    "insertText": "GetCookDependencies()"
  },
  {
    "label": "GetTransitiveBuildDependencies()",
    "kind": "Method",
    "detail": "Function (const TArray<UE::Cook::FCookDependency>&)",
    "insertText": "GetTransitiveBuildDependencies()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPackageName()"
  },
  {
    "label": "GetStoredKey()",
    "kind": "Method",
    "detail": "Function (const FIoHash&)",
    "insertText": "GetStoredKey()"
  },
  {
    "label": "GetCurrentKey()",
    "kind": "Method",
    "detail": "Function (const FIoHash&)",
    "insertText": "GetCurrentKey()"
  },
  {
    "label": "HasKeyMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKeyMatch(const FAssetPackageData* OverrideAssetPackageData)"
  },
  {
    "label": "TryCalculateCurrentKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCalculateCurrentKey(const FAssetPackageData* OverrideAssetPackageData, FString* OutErrorMessage = nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Collect()",
    "kind": "Method",
    "detail": "Function (FCookDependencies)",
    "insertText": "Collect(UPackage* Package, const ITargetPlatform* TargetPlatform, FSavePackageResultStruct* SaveResult, const FGeneratedPackageResultStruct* GeneratedResult, TArray<FName>&& RuntimeDependencies, FString* OutErrorMessage = nullptr)"
  },
  {
    "label": "CollectSettingsObject()",
    "kind": "Method",
    "detail": "Function (FCookDependencies)",
    "insertText": "CollectSettingsObject(const UObject* Object, FString* OutErrorMessage)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (private : TArray<FName> BuildPackageDependencies ; TArray<FString> ConfigDependencies ; TArray<FName> RuntimePackageDependencies ; TArray<FName> ScriptPackageDependencies ; TArray<UE::Cook::FCookDependency> CookDependencies ; TArray<UE::Cook::FCookDependency> TransitiveBuildDependencies ; TArray<FString> ClassDependencies ; FName PackageName ; FIoHash StoredKey ; FIoHash CurrentKey ; bool bValid = false ;)",
    "insertText": "LoadFromCompactBinary(FCbObjectView ObjectView, FCookDependencies& CookAttachments)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter)",
    "insertText": "operator(FCbWriter& Writer, const FCookDependencies& CookAttachments)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FCookAttachments ; } ; class FCookDependencyGroups { public : struct FRecordedDependencies { FCookDependencies Dependencies ; FString ErrorMessage ; bool bInitialized = false ; } ; FCookDependencyGroups&)",
    "insertText": "Get()"
  },
  {
    "label": "FindOrCreate()",
    "kind": "Method",
    "detail": "Function (FRecordedDependencies&)",
    "insertText": "FindOrCreate(UPTRINT Key)"
  },
  {
    "label": "Collect()",
    "kind": "Method",
    "detail": "Function (FBuildDefinitionList)",
    "insertText": "Collect(UPackage* Package, const ITargetPlatform* TargetPlatform, FString* OutErrorMessage = nullptr)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LoadFromCompactBinary(FCbObject&& ObjectView, FBuildDefinitionList& Definitions)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter)",
    "insertText": "operator(FCbWriter& Writer, const FBuildDefinitionList& Definitions)"
  },
  {
    "label": "Fetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fetch(TArrayView<FName> PackageNames, const ITargetPlatform* TargetPlatform, ICookedPackageWriter* PackageWriter, TUniqueFunction<void(FName PackageName, FCookAttachments&& Result)>&& Callback)"
  },
  {
    "label": "TryCollectAndStoreCookDependencies()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "TryCollectAndStoreCookDependencies(UPackage* Package, const ITargetPlatform* TargetPlatform, FSavePackageResultStruct* SaveResult, const FGeneratedPackageResultStruct* GeneratedResult, TArray<FName>&& RuntimeDependencies, IPackageWriter::FCommitAttachmentInfo& OutResult)"
  },
  {
    "label": "TryCollectAndStoreBuildDefinitionList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCollectAndStoreBuildDefinitionList(UPackage* Package, const ITargetPlatform* TargetPlatform, IPackageWriter::FCommitAttachmentInfo& OutResult)"
  },
  {
    "label": "CollectAndStoreCookAttachments()",
    "kind": "Method",
    "detail": "Function (template<ArrayType> void)",
    "insertText": "CollectAndStoreCookAttachments(UPackage* Package, const ITargetPlatform* TargetPlatform, FSavePackageResultStruct* SaveResult, const FGeneratedPackageResultStruct* GeneratedResult, TArray<FName>&& RuntimeDependencies, ArrayType& Output)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IPackageWriter::FCommitAttachmentInfo Result ;)",
    "insertText": "if(TryCollectAndStoreCookDependencies(Package, TargetPlatform, SaveResult, GeneratedResult, MoveTemp(RuntimeDependencies), Result))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "Add(MoveTemp(Result))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TryCollectAndStoreBuildDefinitionList(Package, TargetPlatform, Result))"
  },
  {
    "label": "IsIterativeEnabled()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsIterativeEnabled(FName PackageName, bool bAllowAllClasses, const FAssetPackageData* OverrideAssetPackageData = nullptr)"
  },
  {
    "label": "CommitEditorDomainCookAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitEditorDomainCookAttachments(FName PackageName, TArrayView<IPackageWriter::FCommitAttachmentInfo> Attachments)"
  }
]