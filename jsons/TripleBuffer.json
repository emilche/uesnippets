[
  {
    "label": "TTripleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTripleBuffer"
  },
  {
    "label": "EBufferFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBufferFlag"
  },
  {
    "label": "TTripleBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformAtomics . h \" # include \" HAL / PlatformMisc . h \" template<BufferType> class TTripleBuffer { enum EBufferFlag { Dirty = 0 x40,Initial = 0 x06,ReaderMask = 0 x03,TempMask = 0 x30,TempShift = 4,WriterMask = 0 x0c,WriterShift = 2,} ; public :)",
    "insertText": "TTripleBuffer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "BufferType()",
    "kind": "Method",
    "detail": "Function (Buffers [ 0 ] = Buffers [ 1 ] = Buffers [ 2 ] =)",
    "insertText": "BufferType()"
  },
  {
    "label": "TTripleBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTripleBuffer(ENoInit)"
  },
  {
    "label": "TTripleBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTripleBuffer(const BufferType& InValue)"
  },
  {
    "label": "TTripleBuffer()",
    "kind": "Method",
    "detail": "Function (Buffers [ 0 ] = Buffers [ 1 ] = Buffers [ 2 ] = InValue ; })",
    "insertText": "TTripleBuffer(BufferType (&InBuffers)[3])"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (delete [ ] Buffers ; } } public : bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} BufferType&)",
    "insertText": "Read()"
  },
  {
    "label": "GetWriteBuffer()",
    "kind": "Method",
    "detail": "Function (} public : BufferType&)",
    "insertText": "GetWriteBuffer()"
  },
  {
    "label": "SwapWriteBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapWriteBuffers()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 CurrentFlags = 0 ; do { CurrentFlags = Flags ; })",
    "insertText": "while(FPlatformAtomics::InterlockedCompareExchange(&Flags, SwapWriteWithTempFlags(CurrentFlags), CurrentFlags) != CurrentFlags)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(const BufferType Value)"
  },
  {
    "label": "Buffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Buffers(Flags & EBufferFlag::WriterMask)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (Flags = EBufferFlag::Initial ;)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "SwapAndRead()",
    "kind": "Method",
    "detail": "Function (} const BufferType&)",
    "insertText": "SwapAndRead()"
  },
  {
    "label": "SwapReadBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapReadBuffers()"
  },
  {
    "label": "WriteAndSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteAndSwap(const BufferType Value)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(Value)"
  },
  {
    "label": "SwapReadWithTempFlags()",
    "kind": "Method",
    "detail": "Function (Buffers = new BufferType [ 3 ] ; Flags = EBufferFlag::Initial ; OwnsMemory = true ; } private : int32)",
    "insertText": "SwapReadWithTempFlags(int32 Flags)"
  },
  {
    "label": "SwapWriteWithTempFlags()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SwapWriteWithTempFlags(int32 Flags)"
  },
  {
    "label": "TTripleBuffer()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TTripleBuffer(const TTripleBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TTripleBuffer&)",
    "insertText": "operator(const TTripleBuffer&)"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (private : BufferType* Buffers ;)",
    "insertText": "MS_ALIGN(16) int32 volatile Flags GCC_ALIGN(16)"
  }
]