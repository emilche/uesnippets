[
  {
    "label": "FD3D12ConstantBufferView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ConstantBufferView"
  },
  {
    "label": "FD3D12SegListAllocatorLeakTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12SegListAllocatorLeakTrack"
  },
  {
    "label": "FD3D12SegList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SegList"
  },
  {
    "label": "FD3D12ResourceAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceAllocator"
  },
  {
    "label": "FD3D12BuddyAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BuddyAllocator"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "RetiredBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RetiredBlock"
  },
  {
    "label": "FD3D12MultiBuddyAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12MultiBuddyAllocator"
  },
  {
    "label": "FD3D12BucketAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BucketAllocator"
  },
  {
    "label": "FD3D12UploadHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UploadHeapAllocator"
  },
  {
    "label": "FD3D12DefaultBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DefaultBufferPool"
  },
  {
    "label": "FD3D12DefaultBufferAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DefaultBufferAllocator"
  },
  {
    "label": "FD3D12FastAllocatorPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12FastAllocatorPage"
  },
  {
    "label": "FD3D12FastAllocatorPagePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12FastAllocatorPagePool"
  },
  {
    "label": "FD3D12FastAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12FastAllocator"
  },
  {
    "label": "FD3D12ResourceLocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceLocation"
  },
  {
    "label": "FD3D12FastConstantAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12FastConstantAllocator"
  },
  {
    "label": "FD3D12SegHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SegHeap"
  },
  {
    "label": "FD3D12SegListAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SegListAllocator"
  },
  {
    "label": "FRetiredBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetiredBlock"
  },
  {
    "label": "FD3D12TextureAllocatorPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12TextureAllocatorPool"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12TextureAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12TextureAllocator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12Resources . h \" # include \" D3D12PoolAllocator . h \" # include \" Misc / ScopeRWLock . h \" class FD3D12ConstantBufferView ; # define SUB_ALLOCATED_DEFAULT_ALLOCATIONS 1 # if !)",
    "insertText": "defined(USE_BUFFER_POOL_ALLOCATOR) #define USE_BUFFER_POOL_ALLOCATOR (PLATFORM_WINDOWS) #endif #if !defined(USE_TEXTURE_POOL_ALLOCATOR) #define USE_TEXTURE_POOL_ALLOCATOR (PLATFORM_WINDOWS) #endif #define D3D12RHI_SEGREGATED_TEXTURE_ALLOC (PLATFORM_WINDOWS) #define D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE (!(UE_BUILD_TEST || UE_BUILD_SHIPPING)) #define D3D12RHI_SEGLIST_ALLOC_TRACK_LEAK_STACK_DEPTH 12 #define D3D12RHI_TRACK_DETAILED_STATS (PLATFORM_WINDOWS && !(UE_BUILD_TEST || UE_BUILD_SHIPPING))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32 Offset ; void* Heap ; uint32 Size ; uint32 StackDepth ; uint64 Stack [ D3D12RHI_SEGLIST_ALLOC_TRACK_LEAK_STACK_DEPTH ] ; bool)",
    "insertText": "operator(const FD3D12SegListAllocatorLeakTrack& Other)"
  },
  {
    "label": "Value0()",
    "kind": "Method",
    "detail": "Function (uint32 Prime0 = 0 xa6c70167 ; uint32 Prime1 = 0 x5d18b207 ; uint32 Prime2 = 0 xd0a489f9 ; uint32)",
    "insertText": "Value0(uint32)(((uint64)S.Heap) >> 32)"
  },
  {
    "label": "Value1()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Value1(uint32)(uint64)"
  },
  {
    "label": "FD3D12ResourceAllocator()",
    "kind": "Method",
    "detail": "Function (uint32 Value2 = S . Offset ; return Value0* Prime0 + Value1* Prime1 + Value2* Prime2 ; } const uint32 kD3D12ManualSubAllocationAlignment = 2 5 6 ; class FD3D12SegList ; class FD3D12ResourceAllocator : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12ResourceAllocator(FD3D12Device* ParentDevice, FRHIGPUMask VisibleNodes, const FD3D12ResourceInitConfig& InInitConfig, const FString& Name, uint32 MaxSizeForPooling)"
  },
  {
    "label": "FD3D12ResourceAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12ResourceAllocator()"
  },
  {
    "label": "GetInitConfig()",
    "kind": "Method",
    "detail": "Function (const FD3D12ResourceInitConfig&)",
    "insertText": "GetInitConfig()"
  },
  {
    "label": "MIN_PLACED_RESOURCE_SIZE()",
    "kind": "Method",
    "detail": "Function (uint32 SpaceActualUsed ; uint32 NumBlocksInDeferredDeletionQueue ; uint32 PeakUsage ; uint32 FailedAllocationSpace ; # endif } ; # define)",
    "insertText": "MIN_PLACED_RESOURCE_SIZE(64 * 1024) #define D3D_BUFFER_ALIGNMENT (64 * 1024) #if defined(D3D12RHI_TRACK_DETAILED_STATS) #define INCREASE_ALLOC_COUNTER(A, B) (A = A + B)"
  },
  {
    "label": "DECREASE_ALLOC_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECREASE_ALLOC_COUNTER(A, B) (A = A - B)"
  },
  {
    "label": "INCREASE_ALLOC_COUNTER()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "INCREASE_ALLOC_COUNTER(A, B) #define DECREASE_ALLOC_COUNTER(A, B)"
  },
  {
    "label": "FD3D12BuddyAllocator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FD3D12BuddyAllocator(FD3D12Device* ParentDevice, FRHIGPUMask VisibleNodes, const FD3D12ResourceInitConfig& InInitConfig, const FString& Name, EResourceAllocationStrategy InAllocationStrategy, uint32 MaxSizeForPooling, uint32 InMaxBlockSize, uint32 InMinBlockSize, HeapId InTraceParentHeapId)"
  },
  {
    "label": "TryAllocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAllocate(uint32 SizeInBytes, uint32 Alignment, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "CleanUpAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAllocations()"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "UpdateMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMemoryStats(uint32& IOMemoryAllocated, uint32& IOMemoryUsed, uint32& IOMemoryFree, uint32& IOAlignmentWaste, uint32& IOAllocatedPageCount, uint32& IOFullPageCount)"
  },
  {
    "label": "ReleaseAllResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllResources()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetLastUsedFrameFence()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetLastUsedFrameFence()"
  },
  {
    "label": "GetBackingHeap()",
    "kind": "Method",
    "detail": "Function (} FD3D12Heap*)",
    "insertText": "GetBackingHeap()"
  },
  {
    "label": "IsOwner()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOwner(FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} protected : const uint32 MaxBlockSize ; const uint32 MinBlockSize ; const EResourceAllocationStrategy AllocationStrategy ; TRefCountPtr<FD3D12Resource> BackingResource ; TRefCountPtr<FD3D12Heap> BackingHeap ; private : struct RetiredBlock { FD3D12Resource* PlacedResource ; uint64 FrameFence ; FD3D12BuddyAllocatorPrivateData Data ; # if)",
    "insertText": "defined(D3D12RHI_TRACK_DETAILED_STATS)"
  },
  {
    "label": "SizeToUnitSize()",
    "kind": "Method",
    "detail": "Function (# endif } ; TArray<RetiredBlock> DeferredDeletionQueue ; TArray<TSet<uint32>> FreeBlocks ; uint64 LastUsedFrameFence ; uint32 MaxOrder ; uint32 TotalSizeUsed ; HeapId TraceHeapId ; bool HeapFullMessageDisplayed ; uint32)",
    "insertText": "SizeToUnitSize(uint32 size)"
  },
  {
    "label": "UnitSizeToOrder()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "UnitSizeToOrder(uint32 size)"
  },
  {
    "label": "_BitScanReverse()",
    "kind": "Method",
    "detail": "Function (unsigned long Result ;)",
    "insertText": "_BitScanReverse(&Result, size + size - 1)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AllocateBlock(uint32 order)"
  },
  {
    "label": "DeallocateBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateBlock(uint32 offset, uint32 order)"
  },
  {
    "label": "CanAllocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAllocate(uint32 size, uint32 alignment)"
  },
  {
    "label": "DeallocateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateInternal(RetiredBlock& Block)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(uint32 SizeInBytes, uint32 Alignment, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "FD3D12MultiBuddyAllocator()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D12MultiBuddyAllocator : public FD3D12ResourceAllocator { public :)",
    "insertText": "FD3D12MultiBuddyAllocator(FD3D12Device* ParentDevice, FRHIGPUMask VisibleNodes, const FD3D12ResourceInitConfig& InInitConfig, const FString& Name, EResourceAllocationStrategy InAllocationStrategy, uint32 InMaxAllocationSize, uint32 InDefaultPoolSize, uint32 InMinBlockSize, HeapId InTraceParentHeapId)"
  },
  {
    "label": "FD3D12MultiBuddyAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12MultiBuddyAllocator()"
  },
  {
    "label": "GetAllocationStrategy()",
    "kind": "Method",
    "detail": "Function (const EResourceAllocationStrategy)",
    "insertText": "GetAllocationStrategy()"
  },
  {
    "label": "CleanUpAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAllocations(uint64 InFrameLag)"
  },
  {
    "label": "CreateNewAllocator()",
    "kind": "Method",
    "detail": "Function (protected : FD3D12BuddyAllocator*)",
    "insertText": "CreateNewAllocator(uint32 InMinSizeInBytes)"
  },
  {
    "label": "FD3D12BucketAllocator()",
    "kind": "Method",
    "detail": "Function (const EResourceAllocationStrategy AllocationStrategy ; const uint32 MinBlockSize ; const uint32 DefaultPoolSize ; TArray<FD3D12BuddyAllocator*> Allocators ; private : HeapId TraceHeapId ; } ; class FD3D12BucketAllocator : public FD3D12ResourceAllocator { public :)",
    "insertText": "FD3D12BucketAllocator(FD3D12Device* ParentDevice, FRHIGPUMask VisibleNodes, const FD3D12ResourceInitConfig& InInitConfig, const FString& Name, uint64 InBlockRetentionFrameCount)"
  },
  {
    "label": "BucketFromSize()",
    "kind": "Method",
    "detail": "Function (private : uint32)",
    "insertText": "BucketFromSize(uint32 size, uint32 bucketShift)"
  },
  {
    "label": "CeilLogTwo()",
    "kind": "Method",
    "detail": "Function (uint32 bucket =)",
    "insertText": "CeilLogTwo(size)"
  },
  {
    "label": "BlockSizeFromBufferSize()",
    "kind": "Method",
    "detail": "Function (bucket = bucket<bucketShift ? 0 : bucket - bucketShift ; return bucket ; } uint32)",
    "insertText": "BlockSizeFromBufferSize(uint32 bufferSize, uint32 bucketShift)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (const uint32 minSize = 1<<bucketShift ; return bufferSize> minSize ?)",
    "insertText": "RoundUpToPowerOfTwo(bufferSize)"
  },
  {
    "label": "FD3D12UploadHeapAllocator()",
    "kind": "Method",
    "detail": "Function (} # if SUB_ALLOCATED_DEFAULT_ALLOCATIONS const uint32 MIN_HEAP_SIZE = 2 5 6* 1 0 2 4 ; # else const uint32 MIN_HEAP_SIZE = 6 4* 1 0 2 4 ; # endif const uint32 BucketShift = 6 ; const uint32 NumBuckets = 2 2 ; FThreadsafeQueue<FD3D12BlockAllocatorPrivateData> AvailableBlocks [ NumBuckets ] ; FThreadsafeQueue<FD3D12BlockAllocatorPrivateData> ExpiredBlocks ; TArray<FD3D12Resource*> SubAllocatedResources ; const uint64 BlockRetentionFrameCount ; } ; class FD3D12UploadHeapAllocator : public FD3D12AdapterChild,public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12UploadHeapAllocator(FD3D12Adapter* InParent, FD3D12Device* InParentDevice, const FString& InName)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "AllocUploadResource()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocUploadResource(uint32 InSize, uint32 InAlignment, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "AllocFastConstantAllocationPage()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocFastConstantAllocationPage(uint32 InSize, uint32 InAlignment, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "UpdateMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMemoryStats()"
  },
  {
    "label": "FD3D12DefaultBufferPool()",
    "kind": "Method",
    "detail": "Function (private : HeapId TraceHeapId ; FD3D12MultiBuddyAllocator SmallBlockAllocator ; FCriticalSection BigBlockCS ; FD3D12PoolAllocator BigBlockAllocator ; FD3D12MultiBuddyAllocator FastConstantPageAllocator ; } ; class FD3D12DefaultBufferPool : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12DefaultBufferPool(FD3D12Device* InParent, FD3D12MultiBuddyAllocator* InAllocator)"
  },
  {
    "label": "FD3D12DefaultBufferPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12DefaultBufferPool()"
  },
  {
    "label": "SupportsAllocation()",
    "kind": "Method",
    "detail": "Function (delete Allocator ; } bool)",
    "insertText": "SupportsAllocation(D3D12_HEAP_TYPE InHeapType, D3D12_RESOURCE_FLAGS InResourceFlags, EBufferUsageFlags InBufferUsage, ED3D12ResourceStateMode InResourceStateMode, uint32 Alignment)"
  },
  {
    "label": "AllocDefaultResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocDefaultResource(D3D12_HEAP_TYPE InHeapType, const D3D12_RESOURCE_DESC& InDesc, EBufferUsageFlags InBufferUsage, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, uint32 InAlignment, const TCHAR* InName, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "UpdateMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMemoryStats(uint32& IOMemoryAllocated, uint32& IOMemoryUsed, uint32& IOMemoryFree, uint32& IOMemoryEndFree, uint32& IOAlignmentWaste, uint32& IOAllocatedPageCount, uint32& IOFullPageCount)"
  },
  {
    "label": "GetResourceAllocatorInitConfig()",
    "kind": "Method",
    "detail": "Function (FD3D12ResourceInitConfig)",
    "insertText": "GetResourceAllocatorInitConfig(D3D12_HEAP_TYPE InHeapType, D3D12_RESOURCE_FLAGS InResourceFlags, EBufferUsageFlags InBufferUsage)"
  },
  {
    "label": "GetResourceAllocationStrategy()",
    "kind": "Method",
    "detail": "Function (EResourceAllocationStrategy)",
    "insertText": "GetResourceAllocationStrategy(D3D12_RESOURCE_FLAGS InResourceFlags, ED3D12ResourceStateMode InResourceStateMode, uint32 Alignment)"
  },
  {
    "label": "FD3D12DefaultBufferAllocator()",
    "kind": "Method",
    "detail": "Function (private : FD3D12MultiBuddyAllocator* Allocator ; } ; # if USE_BUFFER_POOL_ALLOCATOR typedef FD3D12PoolAllocator FD3D12BufferPool ; # else typedef FD3D12DefaultBufferPool FD3D12BufferPool ; # endif class FD3D12DefaultBufferAllocator : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12DefaultBufferAllocator(FD3D12Device* InParent, FRHIGPUMask VisibleNodes)"
  },
  {
    "label": "AllocDefaultResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocDefaultResource(D3D12_HEAP_TYPE InHeapType, const D3D12_RESOURCE_DESC& pDesc, EBufferUsageFlags InBufferUsage, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, FD3D12ResourceLocation& ResourceLocation, uint32 Alignment, const TCHAR* Name)"
  },
  {
    "label": "FreeDefaultBufferPools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDefaultBufferPools()"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame(FD3D12ContextArray const& Contexts)"
  },
  {
    "label": "CleanupFreeBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupFreeBlocks(uint64 InFrameLag)"
  },
  {
    "label": "IsPlacedResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlacedResource(D3D12_RESOURCE_FLAGS InResourceFlags, ED3D12ResourceStateMode InResourceStateMode, uint32 Alignment)"
  },
  {
    "label": "GetDefaultInitialResourceState()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_STATES)",
    "insertText": "GetDefaultInitialResourceState(D3D12_HEAP_TYPE InHeapType, EBufferUsageFlags InBufferFlags, ED3D12ResourceStateMode InResourceStateMode)"
  },
  {
    "label": "CreateBufferPool()",
    "kind": "Method",
    "detail": "Function (private : FD3D12BufferPool*)",
    "insertText": "CreateBufferPool(D3D12_HEAP_TYPE InHeapType, D3D12_RESOURCE_FLAGS InResourceFlags, EBufferUsageFlags InBufferUsage, ED3D12ResourceStateMode InResourceStateMode, uint32 Alignment)"
  },
  {
    "label": "FD3D12FastAllocatorPage()",
    "kind": "Method",
    "detail": "Function (TArray<FD3D12BufferPool*> DefaultBufferPools ; FCriticalSection CS ; HeapId TraceHeapId ; } ; struct FD3D12FastAllocatorPage {)",
    "insertText": "FD3D12FastAllocatorPage() : PageSize(0) , NextFastAllocOffset(0) , FastAllocData(nullptr) , FrameFence(0)"
  },
  {
    "label": "FD3D12FastAllocatorPage()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FD3D12FastAllocatorPage(uint32 Size) : PageSize(Size) , NextFastAllocOffset(0) , FastAllocData(nullptr) , FrameFence(0)"
  },
  {
    "label": "FD3D12FastAllocatorPage()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FD3D12FastAllocatorPage()"
  },
  {
    "label": "UpdateFence()",
    "kind": "Method",
    "detail": "Function (NextFastAllocOffset = 0 ; FrameFence = 0 ; } void)",
    "insertText": "UpdateFence()"
  },
  {
    "label": "FD3D12FastAllocatorPagePool()",
    "kind": "Method",
    "detail": "Function (const uint32 PageSize ; TRefCountPtr<FD3D12Resource> FastAllocBuffer ; uint32 NextFastAllocOffset ; void* FastAllocData ; uint64 FrameFence ; } ; class FD3D12FastAllocatorPagePool : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12FastAllocatorPagePool(FD3D12Device* Parent, FRHIGPUMask VisibiltyMask, D3D12_HEAP_TYPE InHeapType, uint32 Size)"
  },
  {
    "label": "FD3D12FastAllocatorPagePool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12FastAllocatorPagePool(FD3D12Device* Parent, FRHIGPUMask VisibiltyMask, const D3D12_HEAP_PROPERTIES& InHeapProperties, uint32 Size)"
  },
  {
    "label": "RequestFastAllocatorPage()",
    "kind": "Method",
    "detail": "Function (FD3D12FastAllocatorPage*)",
    "insertText": "RequestFastAllocatorPage()"
  },
  {
    "label": "ReturnFastAllocatorPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnFastAllocatorPage(FD3D12FastAllocatorPage* Page)"
  },
  {
    "label": "CleanupPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupPages(uint64 FrameLag)"
  },
  {
    "label": "GetPageSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPageSize()"
  },
  {
    "label": "FD3D12FastAllocator()",
    "kind": "Method",
    "detail": "Function (protected : const uint32 PageSize ; const D3D12_HEAP_PROPERTIES HeapProperties ; TArray<FD3D12FastAllocatorPage*> Pool ; } ; class FD3D12FastAllocator : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12FastAllocator(FD3D12Device* Parent, FRHIGPUMask VisibiltyMask, D3D12_HEAP_TYPE InHeapType, uint32 PageSize)"
  },
  {
    "label": "FD3D12FastAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12FastAllocator(FD3D12Device* Parent, FRHIGPUMask VisibiltyMask, const D3D12_HEAP_PROPERTIES& InHeapProperties, uint32 PageSize)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Allocate(uint32 Size, uint32 Alignment, class FD3D12ResourceLocation* ResourceLocation)"
  },
  {
    "label": "FD3D12FastConstantAllocator()",
    "kind": "Method",
    "detail": "Function (protected : FD3D12FastAllocatorPagePool PagePool ; FD3D12FastAllocatorPage* CurrentAllocatorPage ; FCriticalSection CS ; } ; class FD3D12FastConstantAllocator : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12FastConstantAllocator(FD3D12Device* Parent, FRHIGPUMask VisibiltyMask)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Allocate(uint32 Bytes, class FD3D12ResourceLocation& OutLocation, FD3D12ConstantBufferView* OutCBView)"
  },
  {
    "label": "ClearResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResource()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (UnderlyingResource .)",
    "insertText": "Clear()"
  },
  {
    "label": "FD3D12SegHeap()",
    "kind": "Method",
    "detail": "Function (} private : FD3D12ResourceLocation UnderlyingResource ; uint32 Offset ; uint32 PageSize ; } ; class FD3D12SegHeap : public FD3D12Heap { private :)",
    "insertText": "FD3D12SegHeap(FD3D12Device* Parent, FRHIGPUMask VisibileNodeMask, ID3D12Heap* NewHeap, uint64 HeapSize, FD3D12SegList* Owner, uint32 Idx) : FD3D12Heap(Parent, VisibileNodeMask), OwnerList(Owner), ArrayIdx(Idx), FirstFreeOffset(0)"
  },
  {
    "label": "SetHeap()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetHeap(NewHeap, TEXT(\"SegListHeap\"))"
  },
  {
    "label": "BeginTrackingResidency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrackingResidency(HeapSize)"
  },
  {
    "label": "FD3D12SegHeap()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D12SegHeap()"
  },
  {
    "label": "FD3D12SegHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12SegHeap(const FD3D12SegHeap&)"
  },
  {
    "label": "FD3D12SegHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12SegHeap(FD3D12SegHeap&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FD3D12SegHeap&)",
    "insertText": "operator(const FD3D12SegHeap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FD3D12SegHeap&)",
    "insertText": "operator(FD3D12SegHeap&&)"
  },
  {
    "label": "IsArrayIdxValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArrayIdxValid()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty(uint32 BlockSize)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AllocateBlock(uint32 BlockSize)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (uint32 Ret = FirstFreeOffset ; FirstFreeOffset + = BlockSize ; return Ret ; } else { return FreeBlockOffsets .)",
    "insertText": "Pop()"
  },
  {
    "label": "FD3D12SegList()",
    "kind": "Method",
    "detail": "Function (} } TArray<uint32> FreeBlockOffsets ; FD3D12SegList* OwnerList ; int32 ArrayIdx ; uint32 FirstFreeOffset ; class FD3D12SegList ; class FD3D12SegListAllocator ; } ; class FD3D12SegList { private :)",
    "insertText": "FD3D12SegList(uint32 InBlockSize, uint32 InHeapSize) : BlockSize(InBlockSize) , HeapSize(InHeapSize) #if D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE , TotalBytesAllocated(0)"
  },
  {
    "label": "FD3D12SegList()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D12SegList()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CS)"
  },
  {
    "label": "FD3D12SegList()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FD3D12SegList(const FD3D12SegList&)"
  },
  {
    "label": "FD3D12SegList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12SegList(FD3D12SegList&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FD3D12SegList&)",
    "insertText": "operator(const FD3D12SegList&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FD3D12SegList&)",
    "insertText": "operator(FD3D12SegList&&)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AllocateBlock(FD3D12Device* Device, FRHIGPUMask VisibleNodeMask, D3D12_HEAP_TYPE HeapType, D3D12_HEAP_FLAGS HeapFlags, TRefCountPtr<FD3D12SegHeap>& OutHeap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Offset ;)",
    "insertText": "if(!!FreeHeaps.Num())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 LastHeapIdx = FreeHeaps .)",
    "insertText": "Num()"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (OutHeap = FreeHeaps [ LastHeapIdx ] ; Offset = OutHeap ->)",
    "insertText": "AllocateBlock(BlockSize)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (OutHeap -> ArrayIdx = INDEX_NONE ; FreeHeaps .)",
    "insertText": "RemoveAt(LastHeapIdx)"
  },
  {
    "label": "CreateBackingHeap()",
    "kind": "Method",
    "detail": "Function (} } else { OutHeap =)",
    "insertText": "CreateBackingHeap(Device, VisibleNodeMask, HeapType, HeapFlags)"
  },
  {
    "label": "FreeBlock()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE TotalBytesAllocated + = HeapSize ; # endif } return Offset ; } void)",
    "insertText": "FreeBlock(FD3D12SegHeap* RESTRICT Heap, uint32 Offset)"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (const bool bFull = Heap ->)",
    "insertText": "IsFull(HeapSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Heap -> FreeBlockOffsets .)",
    "insertText": "Add(Offset)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Heap -> ArrayIdx = FreeHeaps .)",
    "insertText": "Add(Heap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Heap->IsEmpty(BlockSize))"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (FreeHeaps .)",
    "insertText": "RemoveAtSwap(Idx)"
  },
  {
    "label": "CreateBackingHeap()",
    "kind": "Method",
    "detail": "Function (FreeHeaps [ Idx ] -> ArrayIdx = Idx ; } # if D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE TotalBytesAllocated - = HeapSize ; # endif } } FD3D12SegHeap*)",
    "insertText": "CreateBackingHeap(FD3D12Device* Parent, FRHIGPUMask VisibleNodeMask, D3D12_HEAP_TYPE HeapType, D3D12_HEAP_FLAGS HeapFlags)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FD3D12SegHeap>> FreeHeaps ; FCriticalSection CS ; uint32 BlockSize ; uint32 HeapSize ; # if D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE uint64 TotalBytesAllocated ; # endif class FD3D12SegListAllocator ; } ; # if ! D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE)",
    "insertText": "static_assert(sizeof(FD3D12SegList) <= 64, \"Try to make it fit in a single cacheline\")"
  },
  {
    "label": "FD3D12SegListAllocator()",
    "kind": "Method",
    "detail": "Function (# endif class FD3D12SegListAllocator : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public : uint32 InvalidOffset = 0 xffffffff ;)",
    "insertText": "FD3D12SegListAllocator(FD3D12Device* Parent, FRHIGPUMask VisibilityMask, D3D12_HEAP_TYPE InHeapType, D3D12_HEAP_FLAGS InHeapFlags, uint32 InMinPoolSize, uint32 InMinNumToPool, uint32 InMaxPoolSize)"
  },
  {
    "label": "FD3D12SegListAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12SegListAllocator()"
  },
  {
    "label": "FD3D12SegListAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12SegListAllocator(const FD3D12SegListAllocator&)"
  },
  {
    "label": "FD3D12SegListAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12SegListAllocator(FD3D12SegListAllocator&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FD3D12SegListAllocator&)",
    "insertText": "operator(const FD3D12SegListAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FD3D12SegListAllocator&)",
    "insertText": "operator(FD3D12SegListAllocator&&)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Allocate(uint64 SizeInBytes, uint64 Alignment, TRefCountPtr<FD3D12SegHeap>& OutHeap)"
  },
  {
    "label": "CalculateBlockSize()",
    "kind": "Method",
    "detail": "Function (const uint64 BlockSize =)",
    "insertText": "CalculateBlockSize(SizeInBytes, Alignment)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FD3D12SegList* SegList ; { FRWScopeLock)",
    "insertText": "Lock(SegListsRWLock, SLT_ReadOnly)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FD3D12SegList** SegListPtr = SegLists .)",
    "insertText": "Find(BlockSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SegList = ! ! SegListPtr ?* SegListPtr : nullptr ; })",
    "insertText": "if(!SegList)"
  },
  {
    "label": "CalculateHeapSize()",
    "kind": "Method",
    "detail": "Function (const uint32 HeapSize =)",
    "insertText": "CalculateHeapSize(BlockSize)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function ({ FRWScopeLock)",
    "insertText": "Lock(SegListsRWLock, SLT_Write)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SegList = ! ! SegListPtr ?* SegListPtr : SegLists .)",
    "insertText": "Add(BlockSize, new FD3D12SegList(BlockSize, HeapSize))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "check(!!SegList)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (uint32 Ret = SegList ->)",
    "insertText": "AllocateBlock(this->GetParentDevice(), this->GetVisibilityMask(), HeapType, HeapFlags, OutHeap)"
  },
  {
    "label": "OnAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlloc(Ret, OutHeap.GetReference(), SizeInBytes)"
  },
  {
    "label": "GetMemoryStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMemoryStats(uint64& OutTotalAllocated, uint64& OutTotalUnused)"
  },
  {
    "label": "LockCS()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE FScopeLock)",
    "insertText": "LockCS(&DeferredDeletionCS)"
  },
  {
    "label": "LockRW()",
    "kind": "Method",
    "detail": "Function (FRWScopeLock)",
    "insertText": "LockRW(SegListsRWLock, SLT_Write)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OutTotalAllocated = 0 ;)",
    "insertText": "for(const auto& Pair : SegLists)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (const FD3D12SegList* SegList = Pair . Value ; OutTotalAllocated + = SegList -> TotalBytesAllocated ; } OutTotalUnused = OutTotalAllocated - TotalBytesRequested .)",
    "insertText": "Load(EMemoryOrder::Relaxed)"
  },
  {
    "label": "CalculateBlockSize()",
    "kind": "Method",
    "detail": "Function (} } ; uint64)",
    "insertText": "CalculateBlockSize(uint64 SizeInBytes, uint64 Alignment)"
  },
  {
    "label": "ShouldPool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldPool(uint64 BlockSize)"
  },
  {
    "label": "NumPooled()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumPooled(MinPoolSize + BlockSize - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumPooled = MinNumToPool ; } const uint32 MaxNumPooled = MaxPoolSize / BlockSize ;)",
    "insertText": "if(NumPooled > MaxNumPooled)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (NumPooled = MaxNumPooled ; })",
    "insertText": "check(NumPooled > 1)"
  },
  {
    "label": "DumpStack()",
    "kind": "Method",
    "detail": "Function (TMap<uint32,FD3D12SegList*> SegLists ; TArray<uint64> FenceValues ; TArray<TArray<FRetiredBlock>> DeferredDeletionQueue ; FRWLock SegListsRWLock ; FCriticalSection DeferredDeletionCS ; const D3D12_HEAP_TYPE HeapType ; const D3D12_HEAP_FLAGS HeapFlags ; const uint32 MinPoolSize ; const uint32 MinNumToPool ; const uint32 MaxPoolSize ; # if D3D12RHI_SEGLIST_ALLOC_TRACK_WASTAGE TAtomic<uint64> TotalBytesRequested ; FCriticalSection SegListTrackedAllocationCS ; TSet<FD3D12SegListAllocatorLeakTrack> SegListTrackedAllocations ; void)",
    "insertText": "DumpStack(const FD3D12SegListAllocatorLeakTrack& LeakTrack)"
  },
  {
    "label": "OnAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlloc(uint32 Offset, void* Heap, uint32 Size)"
  },
  {
    "label": "OnFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFree(uint32 Offset, void* Heap, uint32 Size)"
  },
  {
    "label": "VerifyEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyEmpty()"
  },
  {
    "label": "FD3D12TextureAllocatorPool()",
    "kind": "Method",
    "detail": "Function (} # endif } ; # if USE_TEXTURE_POOL_ALLOCATOR class FD3D12TextureAllocatorPool : public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12TextureAllocatorPool(FD3D12Device* Device, FRHIGPUMask VisibilityNode)"
  },
  {
    "label": "AllocateTexture()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AllocateTexture(FD3D12ResourceDesc Desc, const D3D12_CLEAR_VALUE* ClearValue, EPixelFormat UEFormat, FD3D12ResourceLocation& TextureLocation, const D3D12_RESOURCE_STATES InitialState, const TCHAR* Name)"
  },
  {
    "label": "PoolAllocators()",
    "kind": "Method",
    "detail": "Function (private : enum class EPoolType { ReadOnly4K,ReadOnly,RenderTarget,UAV,Count,} ; FD3D12PoolAllocator*)",
    "insertText": "PoolAllocators(int)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FD3D12TextureAllocator()",
    "kind": "Method",
    "detail": "Function (} private : FD3D12SegListAllocator ReadOnlyTexturePool ; } ; # else class FD3D12TextureAllocator : public FD3D12MultiBuddyAllocator { public :)",
    "insertText": "FD3D12TextureAllocator(FD3D12Device* Device, FRHIGPUMask VisibleNodes, const FString& Name, uint32 HeapSize, D3D12_HEAP_FLAGS Flags, HeapId InTraceParentHeapId)"
  },
  {
    "label": "FD3D12TextureAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12TextureAllocator()"
  },
  {
    "label": "AllocateTexture()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AllocateTexture(FD3D12ResourceDesc Desc, const D3D12_CLEAR_VALUE* ClearValue, FD3D12ResourceLocation& TextureLocation, const D3D12_RESOURCE_STATES InitialState, const TCHAR* Name)"
  },
  {
    "label": "CleanUpAllocations()",
    "kind": "Method",
    "detail": "Function (ReadOnlyTexturePool .)",
    "insertText": "CleanUpAllocations(0)"
  }
]