[
  {
    "label": "FCellInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellInfo"
  },
  {
    "label": "UWorldPartitionBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionBuilder"
  },
  {
    "label": "ELoadingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELoadingMode"
  },
  {
    "label": "FWorldPartitionBuilderArgsScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionBuilderArgsScope"
  },
  {
    "label": "FCellInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PackageSourceControlHelper . h \" # include \" Engine / World . h \" # include \" WorldPartitionBuilder . generated . h \" typedef FInt64Vector3 FWorldBuilderCellCoord ; struct FCellInfo {)",
    "insertText": "FCellInfo()"
  },
  {
    "label": "GetCellCoord()",
    "kind": "Method",
    "detail": "Function (FWorldBuilderCellCoord Location ; FBox Bounds ; FBox EditorBounds ; int32 IterativeCellSize ; FWorldBuilderCellCoord)",
    "insertText": "GetCellCoord(const FVector& InPos, const int32 InCellSize)"
  },
  {
    "label": "GetCellCount()",
    "kind": "Method",
    "detail": "Function (FWorldBuilderCellCoord)",
    "insertText": "GetCellCount(const FBox& InBounds, const int32 InCellSize)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, Config=Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "RunBuilder()",
    "kind": "Method",
    "detail": "Function (Custom,EntireWorld,IterativeCells,IterativeCells2D,} ; bool)",
    "insertText": "RunBuilder(UWorld* World)"
  },
  {
    "label": "RequiresCommandletRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresCommandletRendering() const PURE_VIRTUAL(UWorldPartitionBuilder::RequiresCommandletRendering, return false;)"
  },
  {
    "label": "GetLoadingMode()",
    "kind": "Method",
    "detail": "Function (ELoadingMode)",
    "insertText": "GetLoadingMode() const PURE_VIRTUAL(UWorldPartitionBuilder::GetLoadingMode, return ELoadingMode::Custom;)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Run(UWorld* World, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "PreWorldInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreWorldInitialization(UWorld* World, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "DeletePackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeletePackages(const TArray<UPackage*>& Packages, FPackageSourceControlHelper& PackageHelper, bool bErrorsAsWarnings = false)"
  },
  {
    "label": "DeletePackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeletePackages(const TArray<FString>& PackageNames, FPackageSourceControlHelper& PackageHelper, bool bErrorsAsWarnings = false)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FModifiedFilesHandler, const TArray<FString>&, const FString&)"
  },
  {
    "label": "SetModifiedFilesHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModifiedFilesHandler(const FModifiedFilesHandler& ModifiedFilesHandler)"
  },
  {
    "label": "PreRun()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "PreRun(UWorld* World, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "PostRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostRun(UWorld* World, FPackageSourceControlHelper& PackageHelper, const bool bInRunSuccess)"
  },
  {
    "label": "OnPackagesModified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPackagesModified(const TArray<UPackage*>& InModifiedPackages, const FString& InChangelistDescription)"
  },
  {
    "label": "HasParam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasParam(const FString& Param)"
  },
  {
    "label": "GetParamValue()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "GetParamValue(const FString& Param, T& Value)"
  },
  {
    "label": "GetBuilderArgs()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetBuilderArgs()"
  },
  {
    "label": "GetWorldInitializationValues()",
    "kind": "Method",
    "detail": "Function (UWorld::InitializationValues)",
    "insertText": "GetWorldInitializationValues()"
  },
  {
    "label": "FWorldPartitionBuilderArgsScope()",
    "kind": "Method",
    "detail": "Function (struct FWorldPartitionBuilderArgsScope ; FString Args ; } ; struct FWorldPartitionBuilderArgsScope {)",
    "insertText": "FWorldPartitionBuilderArgsScope(const FString& InArgs)"
  },
  {
    "label": "FWorldPartitionBuilderArgsScope()",
    "kind": "Method",
    "detail": "Function (UWorldPartitionBuilder::Args = InArgs ; } ~)",
    "insertText": "FWorldPartitionBuilderArgsScope()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (UWorldPartitionBuilder::Args .)",
    "insertText": "Empty()"
  }
]