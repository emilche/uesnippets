[
  {
    "label": "APlayerStart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerStart"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorWorldManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorWorldManager"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLog"
  },
  {
    "label": "FOutputLogErrorsToMessageLogProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputLogErrorsToMessageLogProxy"
  },
  {
    "label": "FPoly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoly"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FSceneViewStateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateInterface"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "IEngineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEngineLoop"
  },
  {
    "label": "ILauncherWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILauncherWorker"
  },
  {
    "label": "ILayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILayers"
  },
  {
    "label": "IAssetReferenceFixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetReferenceFixer"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "UBrushBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrushBuilder"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "UFbxImportUI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxImportUI"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "ULevelEditorPlaySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelEditorPlaySettings"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "UTransactor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransactor"
  },
  {
    "label": "FTransactionObjectEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransactionObjectEvent"
  },
  {
    "label": "ERotationGridMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERotationGridMode"
  },
  {
    "label": "FEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdge"
  },
  {
    "label": "FTransactionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionContext"
  },
  {
    "label": "FEditorTransactionDeltaContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorTransactionDeltaContext"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FAssetCompileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetCompileData"
  },
  {
    "label": "UEditorWorldExtensionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorWorldExtensionManager"
  },
  {
    "label": "ITargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetDevice"
  },
  {
    "label": "ULevelEditorDragDropHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelEditorDragDropHandler"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "IProjectExternalContentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IProjectExternalContentInterface"
  },
  {
    "label": "EMapSetBrushFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMapSetBrushFlags"
  },
  {
    "label": "EPasteTo",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPasteTo"
  },
  {
    "label": "FCopySelectedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCopySelectedInfo"
  },
  {
    "label": "FCachedActorLabels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedActorLabels"
  },
  {
    "label": "FSelectionStateOfLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectionStateOfLevel"
  },
  {
    "label": "FPreviewPlatformInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreviewPlatformInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetReferenceFilterReferencerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetReferenceFilterReferencerInfo"
  },
  {
    "label": "FAssetReferenceFilterContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetReferenceFilterContext"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "UEditorEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorEngine"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "USoundCue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundCue"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "EDetailMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDetailMode"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "ANavigationObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationObjectBase"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "FUObjectAnnotationSparseBool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUObjectAnnotationSparseBool"
  },
  {
    "label": "ALODActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALODActor"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "EMousePositionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMousePositionType"
  },
  {
    "label": "EMapRebuildType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMapRebuildType"
  },
  {
    "label": "AGroupActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGroupActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FLightingBuildOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightingBuildOptions"
  },
  {
    "label": "UFbxAnimSequenceImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxAnimSequenceImportData"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "FSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionIterator"
  },
  {
    "label": "FSelectedEditableComponentIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedEditableComponentIterator"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FEditorUndoClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorUndoClient"
  },
  {
    "label": "UActorGroupingUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorGroupingUtils"
  },
  {
    "label": "EMapCheckNotification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EMapCheckNotification"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "FPlayOnPCInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlayOnPCInfo"
  },
  {
    "label": "FLauncherCachedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLauncherCachedInfo"
  },
  {
    "label": "FBlueprintContextTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintContextTracker"
  },
  {
    "label": "SPIEViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPIEViewport"
  },
  {
    "label": "UNREALED_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UNREALED_API"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" SlateFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" GameFramework / Actor . h \" # include \" AssetRegistry / AssetData . h \" # include \" HAL / PlatformProcess . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" Widgets / SWindow . h \" # include \" TimerManager . h \" # include \" UObject / UObjectAnnotation . h \" # include \" Engine / Brush . h \" # include \" Engine / Engine . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Settings / LevelEditorPlaySettings . h \" # include \" Settings / LevelEditorViewportSettings . h \" # endif # include \" Misc / CompilationResult . h \" # include \" Interfaces / ITargetPlatform . h \" # include \" Interfaces / ITargetPlatformManagerModule . h \" # include \" PlayInEditorDataTypes . h \" # include \" EditorSubsystem . h \" # include \" Subsystems / SubsystemCollection . h \" # include \" UnrealEngine . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / UniqueObj . h \" # include \" Editor / AssetReferenceFilter . h \" # include \" RHIShaderPlatform . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Model . h \" # include \" RHI . h \" # endif # include \" EditorEngine . generated . h \" class APlayerStart ; class Error ; class FEditorViewportClient ; class FEditorWorldManager ; class FLevelEditorViewportClient ; class FMessageLog ; class FOutputLogErrorsToMessageLogProxy ; class FPoly ; class FSceneViewport ; class FSceneViewStateInterface ; class FViewport ; class IEngineLoop ; class ILauncherWorker ; class ILayers ; class IAssetReferenceFixer ; class IAssetViewport ; class ITargetPlatform ; class SViewport ; class UActorFactory ; class UAnimSequence ; class UAudioComponent ; class UBrushBuilder ; class UFoliageType ; class UFbxImportUI ; class UGameViewportClient ; class ULevelEditorPlaySettings ; class ULocalPlayer ; class UNetDriver ; class UPrimitiveComponent ; class USkeleton ; class USoundBase ; class USoundNode ; class UTextureRenderTarget2D ; class UTransactor ; class FTransactionObjectEvent ; enum ERotationGridMode : int ; struct FEdge ; struct FTransactionContext ; struct FEditorTransactionDeltaContext ; struct FTypedElementHandle ; struct FAnalyticsEventAttribute ; struct FAssetCompileData ; class UEditorWorldExtensionManager ; class ITargetDevice ; class ULevelEditorDragDropHandler ; class UTypedElementSelectionSet ; class IProjectExternalContentInterface ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (PT_OriginalLocation = 0,PT_Here = 1,PT_WorldOrigin = 2 } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCopySelectedInfo() : bHasSelectedActors( false ) , bAllActorsInSameLevel( true ) , LevelAllActorsAreIn( NULL ) , bHasSelectedSurfaces( false ) , LevelWithSelectedSurface( NULL)"
  },
  {
    "label": "CanPerformQuickCopy()",
    "kind": "Method",
    "detail": "Function (} bool bHasSelectedActors ; bool bAllActorsInSameLevel ; ULevel* LevelAllActorsAreIn ; bool bHasSelectedSurfaces ; ULevel* LevelWithSelectedSurface ; bool)",
    "insertText": "CanPerformQuickCopy()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bCanPerformQuickCopy = false ;)",
    "insertText": "if(LevelAllActorsAreIn && LevelWithSelectedSurface)"
  },
  {
    "label": "bCanPerformQuickCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bCanPerformQuickCopy(LevelWithSelectedSurface == LevelAllActorsAreIn)"
  },
  {
    "label": "bCanPerformQuickCopy()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "bCanPerformQuickCopy(LevelWithSelectedSurface != NULL && !bHasSelectedActors) || (LevelAllActorsAreIn != NULL && !bHasSelectedSurfaces)"
  },
  {
    "label": "FCachedActorLabels()",
    "kind": "Method",
    "detail": "Function (} return bCanPerformQuickCopy ; } } ; struct FCachedActorLabels {)",
    "insertText": "FCachedActorLabels()"
  },
  {
    "label": "FCachedActorLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedActorLabels(UWorld* World, const TSet<AActor*>& IgnoredActors = TSet<AActor*>())"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Populate(UWorld* World, const TSet<AActor*>& IgnoredActors = TSet<AActor*>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorLabels .)",
    "insertText": "Add(InLabel)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const FString& InLabel)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ActorLabels .)",
    "insertText": "Remove(InLabel)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const FString& InLabel)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FPreviewPlatformInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FPreviewPlatformInfo {)",
    "insertText": "FPreviewPlatformInfo() : PreviewFeatureLevel(ERHIFeatureLevel::SM5) , ShaderPlatform(EShaderPlatform::SP_NumPlatforms) , PreviewPlatformName(NAME_None) , PreviewShaderFormatName(NAME_None) , bPreviewFeatureLevelActive(false) , PreviewShaderPlatformName(NAME_None) , PreviewShaderPlatformFriendlyName()"
  },
  {
    "label": "InternalSetFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetFriendlyName()"
  },
  {
    "label": "FPreviewPlatformInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPreviewPlatformInfo(ERHIFeatureLevel::Type InFeatureLevel, EShaderPlatform InShaderPlatform = EShaderPlatform::SP_NumPlatforms, FName InPreviewPlatformName = NAME_None, FName InPreviewShaderFormatName = NAME_None, FName InDeviceProfileName = NAME_None, bool InbPreviewFeatureLevelActive = false, FName InShaderPlatformName = NAME_None, FText InPreviewShaderPlatformFriendlyName = FText()) : PreviewFeatureLevel(InFeatureLevel) , ShaderPlatform(InShaderPlatform) , PreviewPlatformName(InPreviewPlatformName) , PreviewShaderFormatName(InPreviewShaderFormatName) , DeviceProfileName(InDeviceProfileName) , bPreviewFeatureLevelActive(InbPreviewFeatureLevelActive) , PreviewShaderPlatformName(InShaderPlatformName) , PreviewShaderPlatformFriendlyName(InPreviewShaderPlatformFriendlyName)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} ERHIFeatureLevel::Type PreviewFeatureLevel ; EShaderPlatform ShaderPlatform ; FName PreviewPlatformName ; FName PreviewShaderFormatName ; FName DeviceProfileName ; bool bPreviewFeatureLevelActive ; FName PreviewShaderPlatformName ; bool)",
    "insertText": "Matches(const FPreviewPlatformInfo& Other)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class EAssetReferenceFilterProperties : uint8 { None = 0,EditorOnly = 1 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAssetReferenceFilterProperties)"
  },
  {
    "label": "FAssetReferenceFilterReferencerInfo()",
    "kind": "Method",
    "detail": "Function (struct FAssetReferenceFilterReferencerInfo { FAssetData Data ; EAssetReferenceFilterProperties Properties ;)",
    "insertText": "FAssetReferenceFilterReferencerInfo() : Properties(EAssetReferenceFilterProperties::None)"
  },
  {
    "label": "FAssetReferenceFilterReferencerInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetReferenceFilterReferencerInfo(const FAssetData& InData) : Data(InData), Properties(EAssetReferenceFilterProperties::None)"
  },
  {
    "label": "FAssetReferenceFilterReferencerInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetReferenceFilterReferencerInfo(const FAssetData& InData, EAssetReferenceFilterProperties InProperties) : Data(InData), Properties(InProperties)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAssetReferenceFilterReferencerInfo& Other)"
  },
  {
    "label": "AddReferencingAsset()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAssetReferenceFilterContext { void)",
    "insertText": "AddReferencingAsset(const FAssetData& InReferencingAsset, EAssetReferenceFilterProperties InProperties = EAssetReferenceFilterProperties::None)"
  },
  {
    "label": "AddReferencingAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencingAssets(const TArray<FAssetData>& InReferencingAssets, EAssetReferenceFilterProperties InProperties = EAssetReferenceFilterProperties::None)"
  },
  {
    "label": "AddReferencingAssetsFromPropertyHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencingAssetsFromPropertyHandle(const TSharedPtr<class IPropertyHandle>& PropertyHandle)"
  },
  {
    "label": "GetReferencingAssets()",
    "kind": "Method",
    "detail": "Function (const TArray<FAssetReferenceFilterReferencerInfo>&)",
    "insertText": "GetReferencingAssets()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : TArray<FAssetReferenceFilterReferencerInfo> ReferencingAssetInfo ; } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "UCLASS(config=Engine, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() public: UNREALED_API UEditorEngine(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (bool bCheckForLockActors ; bool bHasLockedActors ; bool bCheckForWorldSettingsActors ; bool bIsWorldSettingsSelected ; ERHIFeatureLevel::Type DefaultWorldFeatureLevel ; FPreviewPlatformInfo PreviewPlatform ; EShaderPlatform CachedEditorShaderPlatform ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPreviewFeatureLevelChanged, ERHIFeatureLevel::Type)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FPreviewFeatureLevelChanged PreviewFeatureLevelChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FPreviewPlatformChanged)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (FPreviewPlatformChanged PreviewPlatformChanged ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FShouldDisableCPUThrottling)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (TArray<FShouldDisableCPUThrottling> ShouldDisableCPUThrottlingDelegates ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPostBugItGoCalled, const FVector& Loc, const FRotator& Rot)"
  },
  {
    "label": "GetAllViewportClients()",
    "kind": "Method",
    "detail": "Function (public : const TArray<class FEditorViewportClient*>&)",
    "insertText": "GetAllViewportClients()"
  },
  {
    "label": "OnViewportClientListChanged()",
    "kind": "Method",
    "detail": "Function (FViewportClientListChangedEvent&)",
    "insertText": "OnViewportClientListChanged()"
  },
  {
    "label": "RemoveViewportClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportClients(FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "GetLevelViewportClients()",
    "kind": "Method",
    "detail": "Function (const TArray<class FLevelEditorViewportClient*>&)",
    "insertText": "GetLevelViewportClients()"
  },
  {
    "label": "RemoveLevelViewportClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelViewportClients(FLevelEditorViewportClient* ViewportClient)"
  },
  {
    "label": "OnLevelViewportClientListChanged()",
    "kind": "Method",
    "detail": "Function (FViewportClientListChangedEvent&)",
    "insertText": "OnLevelViewportClientListChanged()"
  },
  {
    "label": "OnBlueprintPreCompile()",
    "kind": "Method",
    "detail": "Function (FBlueprintPreCompileEvent&)",
    "insertText": "OnBlueprintPreCompile()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (BlueprintPreCompileEvent .)",
    "insertText": "Broadcast(BlueprintToCompile)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT(UEditorEngine, FBlueprintCompiledEvent)"
  },
  {
    "label": "OnBlueprintCompiled()",
    "kind": "Method",
    "detail": "Function (FBlueprintCompiledEvent&)",
    "insertText": "OnBlueprintCompiled()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (BlueprintCompiledEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT(UEditorEngine, FBlueprintReinstanced)"
  },
  {
    "label": "OnBlueprintReinstanced()",
    "kind": "Method",
    "detail": "Function (FBlueprintReinstanced&)",
    "insertText": "OnBlueprintReinstanced()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT(UEditorEngine, FClassPackageLoadedOrUnloadedEvent)"
  },
  {
    "label": "OnClassPackageLoadedOrUnloaded()",
    "kind": "Method",
    "detail": "Function (FClassPackageLoadedOrUnloadedEvent&)",
    "insertText": "OnClassPackageLoadedOrUnloaded()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(UEditorEngine, FOnBeginTransformObject, UObject&)"
  },
  {
    "label": "OnBeginObjectMovement()",
    "kind": "Method",
    "detail": "Function (FOnBeginTransformObject&)",
    "insertText": "OnBeginObjectMovement()"
  },
  {
    "label": "OnEndObjectMovement()",
    "kind": "Method",
    "detail": "Function (FOnEndTransformObject&)",
    "insertText": "OnEndObjectMovement()"
  },
  {
    "label": "OnActorsMoved()",
    "kind": "Method",
    "detail": "Function (FOnActorsMoved&)",
    "insertText": "OnActorsMoved()"
  },
  {
    "label": "OnBeginCameraMovement()",
    "kind": "Method",
    "detail": "Function (FOnBeginTransformCamera&)",
    "insertText": "OnBeginCameraMovement()"
  },
  {
    "label": "OnEndCameraMovement()",
    "kind": "Method",
    "detail": "Function (FOnEndTransformCamera&)",
    "insertText": "OnEndCameraMovement()"
  },
  {
    "label": "OnHLODActorMoved()",
    "kind": "Method",
    "detail": "Function (FHLODActorMovedEvent&)",
    "insertText": "OnHLODActorMoved()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (HLODActorMovedEvent .)",
    "insertText": "Broadcast(InActor, ParentActor)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(UEngine, FHLODMeshBuildEvent, const class ALODActor*)"
  },
  {
    "label": "OnHLODMeshBuild()",
    "kind": "Method",
    "detail": "Function (FHLODMeshBuildEvent&)",
    "insertText": "OnHLODMeshBuild()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (HLODMeshBuildEvent .)",
    "insertText": "Broadcast(InActor)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_TwoParams(UEngine, FHLODActorAddedEvent, const AActor*, const AActor*)"
  },
  {
    "label": "OnHLODActorAdded()",
    "kind": "Method",
    "detail": "Function (FHLODActorAddedEvent&)",
    "insertText": "OnHLODActorAdded()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT(UEngine, FHLODTransitionScreenSizeChangedEvent)"
  },
  {
    "label": "OnHLODTransitionScreenSizeChanged()",
    "kind": "Method",
    "detail": "Function (FHLODTransitionScreenSizeChangedEvent&)",
    "insertText": "OnHLODTransitionScreenSizeChanged()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT(UEngine, FHLODLevelsArrayChangedEvent)"
  },
  {
    "label": "OnHLODLevelsArrayChanged()",
    "kind": "Method",
    "detail": "Function (FHLODLevelsArrayChangedEvent&)",
    "insertText": "OnHLODLevelsArrayChanged()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_TwoParams(UEngine, FHLODActorRemovedFromClusterEvent, const AActor*, const AActor*)"
  },
  {
    "label": "OnHLODActorRemovedFromCluster()",
    "kind": "Method",
    "detail": "Function (FHLODActorRemovedFromClusterEvent&)",
    "insertText": "OnHLODActorRemovedFromCluster()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(UEditorEngine, FExecParticleInvoked, const TCHAR*)"
  },
  {
    "label": "OnExecParticleInvoked()",
    "kind": "Method",
    "detail": "Function (FExecParticleInvoked&)",
    "insertText": "OnExecParticleInvoked()"
  },
  {
    "label": "OnSelectUnloadedActorsEvent()",
    "kind": "Method",
    "detail": "Function (FSelectUnloadedActorsEvent&)",
    "insertText": "OnSelectUnloadedActorsEvent()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (SelectUnloadedActorsEvent .)",
    "insertText": "Broadcast(ActorGuids)"
  },
  {
    "label": "BroadcastBeginObjectMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastBeginObjectMovement(UObject& Object)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnBeginObjectTransformEvent .)",
    "insertText": "Broadcast(Object)"
  },
  {
    "label": "BroadcastEndObjectMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastEndObjectMovement(UObject& Object)"
  },
  {
    "label": "BroadcastActorsMoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastActorsMoved(TArray<AActor*>& Actors)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnActorsMovedEvent .)",
    "insertText": "Broadcast(Actors)"
  },
  {
    "label": "BroadcastBeginCameraMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastBeginCameraMovement(UObject& Object)"
  },
  {
    "label": "BroadcastEndCameraMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastEndCameraMovement(UObject& Object)"
  },
  {
    "label": "BroadcastObjectReimported()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastObjectReimported(UObject* InObject)"
  },
  {
    "label": "LoadDefaultEditorModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDefaultEditorModules()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Init(IEngineLoop* InEngineLoop)"
  },
  {
    "label": "PreExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreExit()"
  },
  {
    "label": "GetMaxTickRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxTickRate(float DeltaTime, bool bAllowFrameRateSmoothing = true)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds, bool bIdleMode)"
  },
  {
    "label": "ShouldDrawBrushWireframe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawBrushWireframe(AActor* InActor)"
  },
  {
    "label": "NotifyToolsOfObjectReplacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyToolsOfObjectReplacement(const TMap<UObject*, UObject*>& OldToNewInstanceMap)"
  },
  {
    "label": "ShouldThrottleCPUUsage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldThrottleCPUUsage()"
  },
  {
    "label": "GetPropertyColorationMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyColorationMatch(class UObject* Object)"
  },
  {
    "label": "WorldIsPIEInNewViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WorldIsPIEInNewViewport(UWorld* InWorld)"
  },
  {
    "label": "FocusNextPIEWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusNextPIEWorld(UWorld* CurrentPieWorld, bool previous = false)"
  },
  {
    "label": "ResetPIEAudioSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPIEAudioSetting(UWorld *CurrentPieWorld)"
  },
  {
    "label": "GetNextPIEViewport()",
    "kind": "Method",
    "detail": "Function (class UGameViewportClient*)",
    "insertText": "GetNextPIEViewport(UGameViewportClient* CurrentViewport)"
  },
  {
    "label": "CreatePIEWorldByDuplication()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "CreatePIEWorldByDuplication(FWorldContext &WorldContext, UWorld* InWorld, FString &PlayWorldMapName)"
  },
  {
    "label": "PostCreatePIEWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCreatePIEWorld(UWorld* InWorld)"
  },
  {
    "label": "GetMapBuildCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMapBuildCancelled()"
  },
  {
    "label": "HandleNetworkFailure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleNetworkFailure(UWorld *World, UNetDriver *NetDriver, ENetworkFailure::Type FailureType, const FString& ErrorString)"
  },
  {
    "label": "GetDefaultWorldFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetDefaultWorldFeatureLevel()"
  },
  {
    "label": "InitializeObjectReferences()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeObjectReferences()"
  },
  {
    "label": "ProcessToggleFreezeCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessToggleFreezeCommand(UWorld* InWorld)"
  },
  {
    "label": "ProcessToggleFreezeStreamingCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessToggleFreezeStreamingCommand(UWorld* InWorld)"
  },
  {
    "label": "HandleBrowseToDefaultMapFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBrowseToDefaultMapFailure(FWorldContext& Context, const FString& TextURL, const FString& Error)"
  },
  {
    "label": "RemapGamepadControllerIdForPIE()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RemapGamepadControllerIdForPIE(class UGameViewportClient* GameViewport, int32 &ControllerId)"
  },
  {
    "label": "GetGameViewportWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SViewport>)",
    "insertText": "GetGameViewportWidget()"
  },
  {
    "label": "TriggerStreamingDataRebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerStreamingDataRebuild()"
  },
  {
    "label": "NetworkRemapPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetworkRemapPath(UNetConnection* Connection, FString& Str, bool bReading = true)"
  },
  {
    "label": "NetworkRemapPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetworkRemapPath(UPendingNetGame* PendingNetGame, FString& Str, bool bReading = true)"
  },
  {
    "label": "AreEditorAnalyticsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreEditorAnalyticsEnabled()"
  },
  {
    "label": "CreateStartupAnalyticsAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateStartupAnalyticsAttributes(TArray<FAnalyticsEventAttribute>& StartSessionAttributes)"
  },
  {
    "label": "CheckAndHandleStaleWorldObjectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndHandleStaleWorldObjectReferences(FWorldContext* InWorldContext)"
  },
  {
    "label": "UpdateIsVanillaProduct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIsVanillaProduct()"
  },
  {
    "label": "CreateVolumeFactoriesForNewClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVolumeFactoriesForNewClasses(const TArray<UClass*>& NewClasses)"
  },
  {
    "label": "Exec_Editor()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Exec_Editor(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "CommandIsDeprecated()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CommandIsDeprecated(const TCHAR* CommandStr, FOutputDevice& Ar)"
  },
  {
    "label": "HandleCallbackCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCallbackCommand(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTestPropsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestPropsCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleMapCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMapCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleSelectCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSelectCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDeleteCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDeleteCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleLightmassDebugCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassDebugCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassStatsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassStatsCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSwarmDistributionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSwarmDistributionCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassImmediateImportCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassImmediateImportCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassImmediateProcessCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassImmediateProcessCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassSortCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassSortCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassDebugMaterialCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassDebugMaterialCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassPaddingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassPaddingCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassDebugPaddingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassDebugPaddingCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmassProfileCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassProfileCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSelectNameCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSelectNameCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDumpPublicCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpPublicCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleJumpToCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleJumpToCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleBugItGoCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugItGoCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleBugItCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugItCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTagSoundsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTagSoundsCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandlecheckSoundsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlecheckSoundsCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleFixupBadAnimNotifiersCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFixupBadAnimNotifiersCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSetDetailModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetDetailModeCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSetDetailModeViewCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetDetailModeViewCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleCleanBSPMaterialCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCleanBSPMaterialCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleAutoMergeStaticMeshCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAutoMergeStaticMeshCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAddSelectedCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAddSelectedCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleToggleSocketGModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleSocketGModeCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListMapPackageDependenciesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListMapPackageDependenciesCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleRebuildVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRebuildVolumesCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleRemoveArchtypeFlagCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRemoveArchtypeFlagCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleStartMovieCaptureCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStartMovieCaptureCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleBuildMaterialTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBuildMaterialTextureStreamingData(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "InitEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEditor(IEngineLoop* InEngineLoop)"
  },
  {
    "label": "InitBuilderBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBuilderBrush(UWorld* InWorld)"
  },
  {
    "label": "IsRealTimeAudioMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRealTimeAudioMuted()"
  },
  {
    "label": "MuteRealTimeAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MuteRealTimeAudio(bool bMute)"
  },
  {
    "label": "GetRealTimeAudioVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRealTimeAudioVolume()"
  },
  {
    "label": "SetRealTimeAudioVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRealTimeAudioVolume(float VolumeLevel)"
  },
  {
    "label": "UpdateSingleViewportClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSingleViewportClient(FEditorViewportClient* InViewportClient, const bool bInAllowNonRealtimeViewportToDraw, bool bLinkedOrthoMovement, bool* bOutViewportDrawn = nullptr)"
  },
  {
    "label": "SafeExec()",
    "kind": "Method",
    "detail": "Function (enum EMousePositionType { MP_None,MP_WorldspacePosition,MP_Translate,MP_Rotate,MP_Scale,MP_CameraSpeed,MP_NoChange } ; bool)",
    "insertText": "SafeExec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "Exec_StaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_StaticMesh(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Brush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Brush(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Poly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Poly(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Obj()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Obj(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Camera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Camera(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Transaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Transaction(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Particle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Particle(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "ExecFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecFile(UWorld* InWorld, const TCHAR* InFilename, FOutputDevice& Ar)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginTransaction(const TCHAR* TransactionContext, const FText& Description, UObject* PrimaryObject)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginTransaction(const FText& Description)"
  },
  {
    "label": "CanTransact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTransact()"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "CancelTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTransaction(int32 Index)"
  },
  {
    "label": "ResetTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTransaction(const FText& Reason)"
  },
  {
    "label": "UndoTransaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UndoTransaction(bool bCanRedo = true)"
  },
  {
    "label": "RedoTransaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RedoTransaction()"
  },
  {
    "label": "IsTransactionActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransactionActive()"
  },
  {
    "label": "GetTransactionName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTransactionName()"
  },
  {
    "label": "IsObjectInTransactionBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectInTransactionBuffer(const UObject* Object)"
  },
  {
    "label": "RebuildMap()",
    "kind": "Method",
    "detail": "Function (enum EMapRebuildType { MRT_Current = 0,MRT_AllVisible = 1,MRT_AllDirtyForLighting = 2,} ; void)",
    "insertText": "RebuildMap(UWorld* RebuildMap, EMapRebuildType RebuildType)"
  },
  {
    "label": "RebuildLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildLevel(ULevel& Level)"
  },
  {
    "label": "RebuildModelFromBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildModelFromBrushes(UModel* Model, bool bSelectedBrushesOnly, bool bTreatMovableBrushesAsStatic = false)"
  },
  {
    "label": "RebuildModelFromBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildModelFromBrushes(TArray<ABrush*>& BrushesToBuild, UModel* Model)"
  },
  {
    "label": "RebuildAlteredBSP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildAlteredBSP()"
  },
  {
    "label": "BSPIntersectionHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BSPIntersectionHelper(UWorld* InWorld, ECsgOper Operation)"
  },
  {
    "label": "SelectNamedActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "SelectNamedActor(const TCHAR *TargetActorName)"
  },
  {
    "label": "MoveActorInFrontOfCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveActorInFrontOfCamera(AActor& InActor, const FVector& InCameraOrigin, const FVector& InCameraDirection)"
  },
  {
    "label": "MoveViewportCamerasToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToActor(AActor& Actor, bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToActor(const TArray<AActor*> &Actors, bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToActor(const TArray<AActor*> &Actors, const TArray<UPrimitiveComponent*>& Components, bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToComponent(const USceneComponent* Component, bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToElement(const UTypedElementSelectionSet* SelectionSet, bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToBox(const FBox& BoundingBox, bool bActiveViewportOnly, float DrawDebugBoxTimeInSeconds = 0.f)"
  },
  {
    "label": "SnapElementTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SnapElementTo(const FTypedElementHandle& InElementHandle, const bool InAlign, const bool InUseLineTrace, const bool InUseBounds, const bool InUsePivot, const FTypedElementHandle& InDestination = FTypedElementHandle(), TArrayView<const FTypedElementHandle> InElementsToIgnore = TArrayView<const FTypedElementHandle>())"
  },
  {
    "label": "SnapViewTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapViewTo(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "RemovePerspectiveViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePerspectiveViewRotation(bool Roll, bool Pitch, bool Yaw)"
  },
  {
    "label": "GetPivotLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPivotLocation()"
  },
  {
    "label": "ResetPivot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPivot()"
  },
  {
    "label": "Cleanse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Cleanse(bool ClearSelection, bool Redraw, const FText& TransReset, bool bTransReset = true)"
  },
  {
    "label": "FinishAllSnaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAllSnaps()"
  },
  {
    "label": "RedrawLevelEditingViewports()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RedrawLevelEditingViewports(bool bInvalidateHitProxies=true)"
  },
  {
    "label": "TakeHighResScreenShots()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TakeHighResScreenShots()"
  },
  {
    "label": "NoteSelectionChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NoteSelectionChange(bool bNotify = true)"
  },
  {
    "label": "AddActor()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "AddActor(ULevel* InLevel, UClass* Class, const FTransform& Transform, bool bSilent = false, EObjectFlags ObjectFlags = RF_Transactional, bool bSelectActor = true)"
  },
  {
    "label": "AddExportTextActors()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "AddExportTextActors(const FString& ExportText, bool bSilent, EObjectFlags ObjectFlags = RF_Transactional)"
  },
  {
    "label": "NoteActorMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteActorMovement()"
  },
  {
    "label": "CreateTrans()",
    "kind": "Method",
    "detail": "Function (} UTransactor*)",
    "insertText": "CreateTrans()"
  },
  {
    "label": "PlayEditorSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayEditorSound(const FString& SoundAssetName)"
  },
  {
    "label": "PlayEditorSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayEditorSound(USoundBase* InSound)"
  },
  {
    "label": "CanPlayEditorSound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlayEditorSound()"
  },
  {
    "label": "GetPreviewAudioComponent()",
    "kind": "Method",
    "detail": "Function (UAudioComponent*)",
    "insertText": "GetPreviewAudioComponent()"
  },
  {
    "label": "ResetPreviewAudioComponent()",
    "kind": "Method",
    "detail": "Function (UAudioComponent*)",
    "insertText": "ResetPreviewAudioComponent(USoundBase* Sound = nullptr, USoundNode* SoundNode = nullptr)"
  },
  {
    "label": "PlayPreviewSound()",
    "kind": "Method",
    "detail": "Function (UAudioComponent*)",
    "insertText": "PlayPreviewSound(USoundBase* Sound, USoundNode* SoundNode = nullptr)"
  },
  {
    "label": "ClearPreviewComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPreviewComponents()"
  },
  {
    "label": "CloseEditedWorldAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEditedWorldAssets(UWorld* InWorld)"
  },
  {
    "label": "RedrawAllViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawAllViewports(bool bInvalidateHitProxies=true)"
  },
  {
    "label": "FindActorFactoryForActorClass()",
    "kind": "Method",
    "detail": "Function (} UActorFactory*)",
    "insertText": "FindActorFactoryForActorClass(const UClass* InClass)"
  },
  {
    "label": "FindActorFactoryByClass()",
    "kind": "Method",
    "detail": "Function (UActorFactory*)",
    "insertText": "FindActorFactoryByClass(const UClass* InClass)"
  },
  {
    "label": "FindActorFactoryByClassForActorClass()",
    "kind": "Method",
    "detail": "Function (UActorFactory*)",
    "insertText": "FindActorFactoryByClassForActorClass(const UClass* InFactoryClass, const UClass* InActorClass)"
  },
  {
    "label": "UseActorFactoryOnCurrentSelection()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "UseActorFactoryOnCurrentSelection(UActorFactory* Factory, const FTransform* InActorTransform, EObjectFlags ObjectFlags = RF_Transactional)"
  },
  {
    "label": "UseActorFactory()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "UseActorFactory(UActorFactory* Factory, const FAssetData& AssetData, const FTransform* ActorLocation, EObjectFlags ObjectFlags = RF_Transactional)"
  },
  {
    "label": "SetPreviewMeshMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMeshMode(bool bState)"
  },
  {
    "label": "UpdatePreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreviewMesh()"
  },
  {
    "label": "CyclePreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CyclePreviewMesh()"
  },
  {
    "label": "edactCopySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactCopySelected(UWorld* InWorld, FString* DestinationData = nullptr)"
  },
  {
    "label": "edactPasteSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "edactPasteSelected(UWorld* InWorld, bool bDuplicate, bool bOffsetLocations, bool bWarnIfHidden, const FString* SourceData = nullptr)"
  },
  {
    "label": "edactDuplicateSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "edactDuplicateSelected(ULevel* InLevel, bool bOffsetLocations)"
  },
  {
    "label": "edactDeleteSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "edactDeleteSelected(UWorld* InWorld, bool bVerifyDeletionCanHappen=true, bool bWarnAboutReferences = true, bool bWarnAboutSoftReferences = true)"
  },
  {
    "label": "polyFindBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "polyFindBrush(UModel* InModel, int32 iSurf, FPoly &Poly)"
  },
  {
    "label": "polyUpdateBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyUpdateBrush(UModel* Model, int32 iSurf, bool bUpdateTexCoords, bool bOnlyRefreshSurfaceMaterials)"
  },
  {
    "label": "polyGetLinkedPolys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyGetLinkedPolys(ABrush* InBrush, FPoly* InPoly, TArray<FPoly>* InPolyList)"
  },
  {
    "label": "polyGetOuterEdgeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyGetOuterEdgeList(TArray<FPoly>* InPolyList, TArray<FEdge>* InEdgeList)"
  },
  {
    "label": "polySplitOverlappingEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySplitOverlappingEdges(TArray<FPoly>* InPolyList, TArray<FPoly>* InResult)"
  },
  {
    "label": "polySetAndClearPolyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySetAndClearPolyFlags(UModel* Model, uint32 SetBits, uint32 ClearBits, bool SelectedOnly, bool UpdateBrush)"
  },
  {
    "label": "SelectActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectActor(AActor* Actor, bool bInSelected, bool bNotify, bool bSelectEvenIfHidden = false, bool bForceRefresh = false)"
  },
  {
    "label": "CanSelectActor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSelectActor(AActor* Actor, bool bInSelected, bool bSelectEvenIfHidden=false, bool bWarnIfLevelLocked=false)"
  },
  {
    "label": "SelectComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectComponent(class UActorComponent* Component, bool bInSelected, bool bNotify, bool bSelectEvenIfHidden = false)"
  },
  {
    "label": "SelectBSPSurf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectBSPSurf(UModel* InModel, int32 iSurf, bool bSelected, bool bNoteSelectionChange)"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectNone(bool bNoteSelectionChange, bool bDeselectBSPSurfs, bool WarnAboutManyActors=true)"
  },
  {
    "label": "DeselectAllSurfaces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeselectAllSurfaces()"
  },
  {
    "label": "polySelectAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "polySelectAll(UModel* Model)"
  },
  {
    "label": "polySelectMatchingGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingGroups(UModel* Model)"
  },
  {
    "label": "polySelectMatchingItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingItems(UModel* Model)"
  },
  {
    "label": "polySelectCoplanars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectCoplanars(UWorld* InWorld, UModel* Model)"
  },
  {
    "label": "polySelectAdjacents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacents(UWorld* InWorld, UModel* Model)"
  },
  {
    "label": "polySelectAdjacentWalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacentWalls(UWorld* InWorld, UModel* Model)"
  },
  {
    "label": "polySelectAdjacentFloors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacentFloors(UWorld* InWorld, UModel* Model)"
  },
  {
    "label": "polySelectAdjacentSlants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacentSlants(UWorld* InWorld, UModel* Model)"
  },
  {
    "label": "polySelectMatchingBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingBrush(UModel* Model)"
  },
  {
    "label": "polySelectMatchingMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingMaterial(UWorld* InWorld, bool bCurrentLevelOnly)"
  },
  {
    "label": "polySelectMatchingResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingResolution(UWorld* InWorld, bool bCurrentLevelOnly)"
  },
  {
    "label": "polySelectReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectReverse(UModel* Model)"
  },
  {
    "label": "polyMemorizeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyMemorizeSet(UModel* Model)"
  },
  {
    "label": "polyRememberSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyRememberSet(UModel* Model)"
  },
  {
    "label": "polyXorSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyXorSet(UModel* Model)"
  },
  {
    "label": "polyUnionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyUnionSet(UModel* Model)"
  },
  {
    "label": "polyIntersectSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyIntersectSet(UModel* Model)"
  },
  {
    "label": "polySelectZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectZone(UModel *Model)"
  },
  {
    "label": "polyTexPan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyTexPan(UModel* Model, int32 PanU, int32 PanV, int32 Absolute)"
  },
  {
    "label": "polyTexScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyTexScale(UModel* Model,float UU, float UV, float VU, float VV, bool Absolute)"
  },
  {
    "label": "MapSelectOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapSelectOperation(UWorld* InWorld, EBrushType BrushType)"
  },
  {
    "label": "MapSelectFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapSelectFlags(UWorld* InWorld, uint32 Flags)"
  },
  {
    "label": "MapBrushGet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapBrushGet(UWorld* InWorld)"
  },
  {
    "label": "mapBrushPut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapBrushPut()"
  },
  {
    "label": "mapSendToFirst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSendToFirst(UWorld* InWorld)"
  },
  {
    "label": "mapSendToLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSendToLast(UWorld* InWorld)"
  },
  {
    "label": "mapSendToSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSendToSwap(UWorld* InWorld)"
  },
  {
    "label": "MapSetBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapSetBrush(UWorld* InWorld, EMapSetBrushFlags PropertiesMask, uint16 BrushColor, FName Group, uint32 SetPolyFlags, uint32 ClearPolyFlags, uint32 BrushType, int32 DrawType)"
  },
  {
    "label": "bspRepartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspRepartition(UWorld* InWorld, int32 iNode)"
  },
  {
    "label": "bspNodeToFPoly()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "bspNodeToFPoly(UModel* Model, int32 iNode, FPoly* EdPoly)"
  },
  {
    "label": "bspCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspCleanup(UModel* Model)"
  },
  {
    "label": "bspBuildFPolys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspBuildFPolys(UModel* Model, bool SurfLinks, int32 iNode, TArray<FPoly>* DestArray = NULL)"
  },
  {
    "label": "bspMergeCoplanars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspMergeCoplanars(UModel* Model, bool RemapLinks, bool MergeDisparateTextures)"
  },
  {
    "label": "bspBrushCSG()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "bspBrushCSG(ABrush* Actor, UModel* Model, uint32 PolyFlags, EBrushType BrushType, ECsgOper CSGOper, bool bBuildBounds, bool bMergePolys, bool bReplaceNULLMaterialRefs, bool bShowProgressBar=true)"
  },
  {
    "label": "bspOptGeom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspOptGeom(UModel* Model)"
  },
  {
    "label": "BuildLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLighting(const class FLightingBuildOptions& Options)"
  },
  {
    "label": "UpdateBuildLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuildLighting()"
  },
  {
    "label": "IsLightingBuildCurrentlyRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightingBuildCurrentlyRunning()"
  },
  {
    "label": "IsLightingBuildCurrentlyExporting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightingBuildCurrentlyExporting()"
  },
  {
    "label": "WarnIfLightingBuildIsCurrentlyRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WarnIfLightingBuildIsCurrentlyRunning()"
  },
  {
    "label": "ImportFbxAnimation()",
    "kind": "Method",
    "detail": "Function (UAnimSequence*)",
    "insertText": "ImportFbxAnimation(USkeleton* Skeleton, UObject* Outer, class UFbxAnimSequenceImportData* ImportData, const TCHAR* InFilename, const TCHAR* AnimName, bool bImportMorphTracks)"
  },
  {
    "label": "ReimportFbxAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReimportFbxAnimation(USkeleton* Skeleton, UAnimSequence* AnimSequence, class UFbxAnimSequenceImportData* ImportData, const TCHAR* InFilename, bool& bOutImportAll, const bool bFactoryShowOptions, UFbxImportUI* ReimportUI = nullptr)"
  },
  {
    "label": "RenameObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameObject(UObject* Object,UObject* NewOuter,const TCHAR* NewName, ERenameFlags Flags=REN_None)"
  },
  {
    "label": "AnalyzeLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeLevel(ULevel* Level,FOutputDevice& Ar)"
  },
  {
    "label": "EditorUpdateComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorUpdateComponents()"
  },
  {
    "label": "OnModalMessageDialog()",
    "kind": "Method",
    "detail": "Function (EAppReturnType::Type)",
    "insertText": "OnModalMessageDialog(EAppMsgCategory InMessageCategory, EAppMsgType::Type InMessage, const FText& InText, const FText& InTitle)"
  },
  {
    "label": "OnShouldLoadOnTop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnShouldLoadOnTop(const FString& Filename)"
  },
  {
    "label": "PlayMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayMap(const FVector* StartLocation = NULL, const FRotator* StartRotation = NULL, int32 DestinationConsole = -1, int32 InPlayInViewportIndex = -1, bool bUseMobilePreview = false)"
  },
  {
    "label": "CanCookByTheBookInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCookByTheBookInEditor(const FString& PlatformName)"
  },
  {
    "label": "IsCookByTheBookInEditorFinished()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCookByTheBookInEditorFinished()"
  },
  {
    "label": "RequestPlaySession()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestPlaySession(const FRequestPlaySessionParams& InParams)"
  },
  {
    "label": "CancelRequestPlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequestPlaySession()"
  },
  {
    "label": "SetPIEWorldsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPIEWorldsPaused(bool Paused)"
  },
  {
    "label": "RequestToggleBetweenPIEandSIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestToggleBetweenPIEandSIE()"
  },
  {
    "label": "PlaySessionPaused()",
    "kind": "Method",
    "detail": "Function (bIsToggleBetweenPIEandSIEQueued = true ; } void)",
    "insertText": "PlaySessionPaused()"
  },
  {
    "label": "PlaySessionResumed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySessionResumed()"
  },
  {
    "label": "PlaySessionSingleStepped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySessionSingleStepped()"
  },
  {
    "label": "IsPlayingSessionInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingSessionInEditor()"
  },
  {
    "label": "IsPlaySessionRequestQueued()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlaySessionRequestQueued()"
  },
  {
    "label": "IsPlaySessionInProgress()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlaySessionInProgress()"
  },
  {
    "label": "IsSimulatingInEditor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimulatingInEditor()"
  },
  {
    "label": "IsSimulateInEditorQueued()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimulateInEditorQueued()"
  },
  {
    "label": "IsSimulateInEditorInProgress()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimulateInEditorInProgress()"
  },
  {
    "label": "GetPlaySessionRequest()",
    "kind": "Method",
    "detail": "Function (} const TOptional<FRequestPlaySessionParams>)",
    "insertText": "GetPlaySessionRequest()"
  },
  {
    "label": "ProcessDebuggerCommands()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ProcessDebuggerCommands(const FKey InKey, const FModifierKeysState ModifierKeyState, EInputEvent EventType)"
  },
  {
    "label": "StartQueuedPlaySessionRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartQueuedPlaySessionRequest()"
  },
  {
    "label": "RequestEndPlayMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEndPlayMap()"
  },
  {
    "label": "ShouldEndPlayMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEndPlayMap()"
  },
  {
    "label": "BuildPlayWorldURL()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildPlayWorldURL(const TCHAR* MapName, bool bSpectatorMode = false, FString AdditionalURLOptions=FString())"
  },
  {
    "label": "EndPlayMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayMap()"
  },
  {
    "label": "TeardownPlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownPlaySession(FWorldContext &PieWorldContext)"
  },
  {
    "label": "EndPlayOnLocalPc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayOnLocalPc()"
  },
  {
    "label": "SetViewportsRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportsRealtimeOverride(bool bShouldBeRealtime, FText SystemDisplayName)"
  },
  {
    "label": "RemoveViewportsRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportsRealtimeOverride(FText SystemDisplayName)"
  },
  {
    "label": "IsAnyViewportRealtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyViewportRealtime()"
  },
  {
    "label": "GetScratchRenderTarget()",
    "kind": "Method",
    "detail": "Function (UTextureRenderTarget2D*)",
    "insertText": "GetScratchRenderTarget(const uint32 MinSize)"
  },
  {
    "label": "GetTimerManager()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FTimerManager>)",
    "insertText": "GetTimerManager()"
  },
  {
    "label": "IsTimerManagerValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimerManagerValid()"
  },
  {
    "label": "GetEditorWorldExtensionsManager()",
    "kind": "Method",
    "detail": "Function (} UEditorWorldExtensionManager*)",
    "insertText": "GetEditorWorldExtensionsManager()"
  },
  {
    "label": "GetPackageList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPackageList(TArray<UPackage*>* InPackages, UClass* InClass)"
  },
  {
    "label": "GetSelectedActorCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSelectedActorCount()"
  },
  {
    "label": "GetSelectedActors()",
    "kind": "Method",
    "detail": "Function (class USelection*)",
    "insertText": "GetSelectedActors()"
  },
  {
    "label": "IsWorldSettingsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldSettingsSelected()"
  },
  {
    "label": "GetContentBrowserSelectionClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContentBrowserSelectionClasses(TArray<UClass*>& Selection)"
  },
  {
    "label": "GetContentBrowserSelections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContentBrowserSelections(TArray<FAssetData>& Selections)"
  },
  {
    "label": "GetSelectedActorIterator()",
    "kind": "Method",
    "detail": "Function (class FSelectionIterator)",
    "insertText": "GetSelectedActorIterator()"
  },
  {
    "label": "GetSelectedComponentIterator()",
    "kind": "Method",
    "detail": "Function (class FSelectionIterator)",
    "insertText": "GetSelectedComponentIterator()"
  },
  {
    "label": "GetSelectedEditableComponentIterator()",
    "kind": "Method",
    "detail": "Function (class FSelectedEditableComponentIterator)",
    "insertText": "GetSelectedEditableComponentIterator()"
  },
  {
    "label": "GetSelectedComponentCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedComponentCount()"
  },
  {
    "label": "GetSelectedComponents()",
    "kind": "Method",
    "detail": "Function (class USelection*)",
    "insertText": "GetSelectedComponents()"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (class USelection*)",
    "insertText": "GetSelectedObjects()"
  },
  {
    "label": "GetSelectedSet()",
    "kind": "Method",
    "detail": "Function (class USelection*)",
    "insertText": "GetSelectedSet(const UClass* Class)"
  },
  {
    "label": "GetFirstSelectedClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetFirstSelectedClass(const UClass* const RequiredParentClass)"
  },
  {
    "label": "GetSelectionStateOfLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectionStateOfLevel(FSelectionStateOfLevel& OutSelectionStateOfLevel)"
  },
  {
    "label": "SetSelectionStateOfLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionStateOfLevel(const FSelectionStateOfLevel& InSelectionStateOfLevel)"
  },
  {
    "label": "ResetAllSelectionSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllSelectionSets()"
  },
  {
    "label": "NewMap()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "NewMap(bool bIsPartitionedWorld = false)"
  },
  {
    "label": "ExportMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportMap(UWorld* InWorld, const TCHAR* InFilename, bool bExportSelectedActorsOnly)"
  },
  {
    "label": "GetFoliageTypesInWorld()",
    "kind": "Method",
    "detail": "Function (TArray<UFoliageType*>)",
    "insertText": "GetFoliageTypesInWorld(UWorld* InWorld)"
  },
  {
    "label": "CanCopySelectedActorsToClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopySelectedActorsToClipboard(UWorld* InWorld, FCopySelectedInfo* OutCopySelected = NULL)"
  },
  {
    "label": "CopySelectedActorsToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedActorsToClipboard(UWorld* InWorld, const bool bShouldCut, const bool bIsMove = false, bool bWarnAboutReferences = true, FString* DestinationData = nullptr)"
  },
  {
    "label": "CanPasteSelectedActorsFromClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteSelectedActorsFromClipboard(UWorld* InWorld)"
  },
  {
    "label": "PasteSelectedActorsFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteSelectedActorsFromClipboard(UWorld* InWorld, const FText& TransDescription, const EPasteTo PasteTo)"
  },
  {
    "label": "SetPropertyColorationTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyColorationTarget(UWorld* InWorld, const FString& PropertyValue, class FProperty* Property, class UClass* CommonBaseClass, TSharedRef<FEditPropertyChain>* PropertyChain)"
  },
  {
    "label": "SelectByPropertyColoration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByPropertyColoration(UWorld* InWorld)"
  },
  {
    "label": "WarnAboutHiddenLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WarnAboutHiddenLevels(UWorld* InWorld, bool bIncludePersistentLvl)"
  },
  {
    "label": "ApplyDeltaToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToActor(AActor* InActor, bool bDelta, const FVector* InTranslation, const FRotator* InRotation, const FVector* InScaling, bool bAltDown=false, bool bShiftDown=false, bool bControlDown=false)"
  },
  {
    "label": "ApplyDeltaToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToComponent(USceneComponent* InComponent, bool bDelta, const FVector* InTranslation, const FRotator* InRotation, const FVector* InScaling, const FVector& PivotLocation)"
  },
  {
    "label": "DisableDeltaModification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableDeltaModification(bool bDisable)"
  },
  {
    "label": "IsDeltaModificationEnabled()",
    "kind": "Method",
    "detail": "Function (bDisableDeltaModification = bDisable ; } bool)",
    "insertText": "IsDeltaModificationEnabled()"
  },
  {
    "label": "ParseMapSectionIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseMapSectionIni(const TCHAR* InCmdParams, TArray<FString>& OutMapList)"
  },
  {
    "label": "LoadMapListFromIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadMapListFromIni(const FString& InSectionName, TArray<FString>& OutMapList)"
  },
  {
    "label": "PackageIsAMapFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PackageIsAMapFile(const TCHAR* PackageFilename, FText& OutNotMapReason)"
  },
  {
    "label": "SyncBrowserToObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObjects(const TArray<UObject*>& InObjectsToSync, bool bFocusContentBrowser = true)"
  },
  {
    "label": "SyncBrowserToObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObjects(const TArray<struct FAssetData>& InAssetsToSync, bool bFocusContentBrowser = true)"
  },
  {
    "label": "SyncBrowserToObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObject(const UObject* InObjectToSync, bool bFocusContentBrowser = true)"
  },
  {
    "label": "SyncBrowserToObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObject(const struct FAssetData& InAssetToSync, bool bFocusContentBrowser = true)"
  },
  {
    "label": "SyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToContentBrowser(bool bAllowOverrideMetadata = true)"
  },
  {
    "label": "SyncActorLevelsToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncActorLevelsToContentBrowser()"
  },
  {
    "label": "CanSyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSyncToContentBrowser()"
  },
  {
    "label": "CanSyncActorLevelsToContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSyncActorLevelsToContentBrowser()"
  },
  {
    "label": "ToggleSelectedActorMovementLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelectedActorMovementLock()"
  },
  {
    "label": "HasLockedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLockedActors()"
  },
  {
    "label": "EditObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditObject(UObject* ObjectToEdit)"
  },
  {
    "label": "SelectLevelInLevelBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLevelInLevelBrowser(bool bDeselectOthers)"
  },
  {
    "label": "DeselectLevelInLevelBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectLevelInLevelBrowser()"
  },
  {
    "label": "SelectAllActorsWithClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllActorsWithClass(bool bArchetype)"
  },
  {
    "label": "FindSelectedActorsInLevelScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSelectedActorsInLevelScript()"
  },
  {
    "label": "AreAnySelectedActorsInLevelScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAnySelectedActorsInLevelScript()"
  },
  {
    "label": "IsPackageValidForAutoAdding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageValidForAutoAdding(UPackage* InPackage, const FString& InFilename)"
  },
  {
    "label": "IsPackageOKToSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageOKToSave(UPackage* InPackage, const FString& InFilename, FOutputDevice* Error)"
  },
  {
    "label": "SavePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePackage(UPackage* InOuter, UObject* InAsset, const TCHAR* Filename, const FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (FSavePackageResultStruct)",
    "insertText": "Save(UPackage* InOuter, UObject* InAsset, const TCHAR* Filename, const FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "InitializePhysicsSceneForSaveIfNecessary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializePhysicsSceneForSaveIfNecessary(UWorld* World, bool &bOutForceInitialized)"
  },
  {
    "label": "CleanupPhysicsSceneThatWasInitializedForSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupPhysicsSceneThatWasInitializedForSave(UWorld* World, bool bForceInitialized)"
  },
  {
    "label": "OnPreSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreSaveWorld(UWorld* World, FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "OnPostSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSaveWorld(UWorld* World, FObjectPostSaveContext ObjectSaveContext)"
  },
  {
    "label": "AddPackagesToDefaultChangelist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackagesToDefaultChangelist(TArray<FString>& InPackageNames)"
  },
  {
    "label": "RunDeferredMarkForAddFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDeferredMarkForAddFiles(bool = false)"
  },
  {
    "label": "GetGridSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGridSize()"
  },
  {
    "label": "IsGridSizePowerOfTwo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGridSizePowerOfTwo()"
  },
  {
    "label": "SetGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGridSize(int32 InIndex)"
  },
  {
    "label": "GridSizeIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridSizeIncrement()"
  },
  {
    "label": "GridSizeDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridSizeDecrement()"
  },
  {
    "label": "GetCurrentPositionGridArray()",
    "kind": "Method",
    "detail": "Function (const TArray<float>&)",
    "insertText": "GetCurrentPositionGridArray()"
  },
  {
    "label": "GetRotGridSize()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "GetRotGridSize()"
  },
  {
    "label": "SetRotGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotGridSize(int32 InIndex, enum ERotationGridMode InGridMode)"
  },
  {
    "label": "RotGridSizeIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotGridSizeIncrement()"
  },
  {
    "label": "RotGridSizeDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotGridSizeDecrement()"
  },
  {
    "label": "GetCurrentRotationGridArray()",
    "kind": "Method",
    "detail": "Function (const TArray<float>&)",
    "insertText": "GetCurrentRotationGridArray()"
  },
  {
    "label": "GetScaleGridSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScaleGridSize()"
  },
  {
    "label": "SetScaleGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScaleGridSize(int32 InIndex)"
  },
  {
    "label": "GetGridInterval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGridInterval()"
  },
  {
    "label": "GetGridLocationOffset()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetGridLocationOffset(bool bUniformOffset)"
  },
  {
    "label": "GetCurrentIntervalGridArray()",
    "kind": "Method",
    "detail": "Function (const TArray<float>&)",
    "insertText": "GetCurrentIntervalGridArray()"
  },
  {
    "label": "BuildReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildReflectionCaptures(UWorld* World = GWorld)"
  },
  {
    "label": "EditorAddModalWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorAddModalWindow(TSharedRef<SWindow> InModalWindow)"
  },
  {
    "label": "FindBrushBuilder()",
    "kind": "Method",
    "detail": "Function (UBrushBuilder*)",
    "insertText": "FindBrushBuilder(UClass* BrushBuilderClass)"
  },
  {
    "label": "ParentActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParentActors(AActor* ParentActor, AActor* ChildActor, const FName SocketName, USceneComponent* Component=NULL)"
  },
  {
    "label": "DetachSelectedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetachSelectedActors()"
  },
  {
    "label": "CanParentActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanParentActors(const AActor* ParentActor, const AActor* ChildActor, FText* ReasonText = NULL)"
  },
  {
    "label": "RebuildStaticNavigableGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildStaticNavigableGeometry(ULevel* Level)"
  },
  {
    "label": "GetAssetsToSyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsToSyncToContentBrowser(TArray<FAssetData>& Assets, bool bAllowBrowseToAssetOverride = true)"
  },
  {
    "label": "GetLevelsToSyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLevelsToSyncToContentBrowser(TArray<UObject*>& Objects)"
  },
  {
    "label": "GetReferencedAssetsForEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReferencedAssetsForEditorSelection(TArray<UObject*>& Objects, const bool bIgnoreOtherAssetsIfBPReferenced = false)"
  },
  {
    "label": "GetSoftReferencedAssetsForEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSoftReferencedAssetsForEditorSelection(TArray<FSoftObjectPath>& SoftObjects)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedPtr<IAssetReferenceFilter>, FOnMakeAssetReferenceFilter, const FAssetReferenceFilterContext&)"
  },
  {
    "label": "OnMakeAssetReferenceFilter()",
    "kind": "Method",
    "detail": "Function (FOnMakeAssetReferenceFilter&)",
    "insertText": "OnMakeAssetReferenceFilter()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_RetVal(TSharedPtr<IAssetReferenceFixer>, FOnMakeAssetReferenceFixer)"
  },
  {
    "label": "OnMakeAssetReferenceFixer()",
    "kind": "Method",
    "detail": "Function (FOnMakeAssetReferenceFixer&)",
    "insertText": "OnMakeAssetReferenceFixer()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_RetVal(ULevelEditorDragDropHandler*, FOnCreateLevelEditorDragDropHandler)"
  },
  {
    "label": "OnCreateLevelEditorDragDropHandler()",
    "kind": "Method",
    "detail": "Function (FOnCreateLevelEditorDragDropHandler&)",
    "insertText": "OnCreateLevelEditorDragDropHandler()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnFilterCopiedActors, TArray<AActor*>&)"
  },
  {
    "label": "OnFilterCopiedActors()",
    "kind": "Method",
    "detail": "Function (UE_INTERNAL FOnFilterCopiedActors&)",
    "insertText": "OnFilterCopiedActors()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(IProjectExternalContentInterface*, FProjectExternalContentInterfaceGetter)"
  },
  {
    "label": "GetEditorWorldContext()",
    "kind": "Method",
    "detail": "Function (FOnMakeAssetReferenceFilter OnMakeAssetReferenceFilterDelegate ; FOnMakeAssetReferenceFixer OnMakeAssetReferenceFixerDelegate ; FOnCreateLevelEditorDragDropHandler OnCreateLevelEditorDragDropHandlerDelegate ; FOnFilterCopiedActors OnFilterCopiedActorsDelegate ; public : FWorldContext&)",
    "insertText": "GetEditorWorldContext(bool bEnsureIsGWorld = false)"
  },
  {
    "label": "GetPIEWorldContext()",
    "kind": "Method",
    "detail": "Function (FWorldContext*)",
    "insertText": "GetPIEWorldContext(int32 WorldPIEInstance = 0)"
  },
  {
    "label": "IsSettingUpPlayWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSettingUpPlayWorld()"
  },
  {
    "label": "GetPIEViewport()",
    "kind": "Method",
    "detail": "Function (FViewport*)",
    "insertText": "GetPIEViewport()"
  },
  {
    "label": "CheckForPlayerStart()",
    "kind": "Method",
    "detail": "Function (APlayerStart*)",
    "insertText": "CheckForPlayerStart()"
  },
  {
    "label": "CloseEntryPopupWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEntryPopupWindow()"
  },
  {
    "label": "CreateNewMapForEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewMapForEditing(bool bPromptUserToSave = true, bool bIsPartitionedWorld = false)"
  },
  {
    "label": "ShouldAbortBecauseOfPIEWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAbortBecauseOfPIEWorld()"
  },
  {
    "label": "ShouldAbortBecauseOfUnsavedWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAbortBecauseOfUnsavedWorld()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFriendlyName(const FProperty* Property, UStruct* OwnerStruct = NULL)"
  },
  {
    "label": "RegisterForUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForUndo(class FEditorUndoClient* UndoClient)"
  },
  {
    "label": "UnregisterForUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterForUndo(class FEditorUndoClient* UndoEditor)"
  },
  {
    "label": "LoadAndSelectAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAndSelectAssets(TArray<FAssetData>& Assets, UClass* TypeOfAsset=NULL)"
  },
  {
    "label": "UsePercentageBasedScaling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsePercentageBasedScaling()"
  },
  {
    "label": "GetActorGroupingUtils()",
    "kind": "Method",
    "detail": "Function (class UActorGroupingUtils*)",
    "insertText": "GetActorGroupingUtils()"
  },
  {
    "label": "IsHMDTrackingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHMDTrackingAllowed()"
  },
  {
    "label": "Map_Select()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Map_Select(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Brush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Brush(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Sendto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Sendto(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Rebuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Rebuild(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Load(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Import()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Import(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Check()",
    "kind": "Method",
    "detail": "Function (struct EMapCheckNotification { enum Type { DontDisplayResults,DisplayResults,NotifyOfResults,} ; } ; bool)",
    "insertText": "Map_Check(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar, bool bCheckDeprecatedOnly, EMapCheckNotification::Type Notification = EMapCheckNotification::DisplayResults, bool bClearLog = true)"
  },
  {
    "label": "Map_Scale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Scale(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Setbrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Setbrush(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "LoadPreviewMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadPreviewMesh(int32 Index)"
  },
  {
    "label": "OnModuleCompileStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModuleCompileStarted(bool bIsAsyncCompile)"
  },
  {
    "label": "OnModuleCompileFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModuleCompileFinished(const FString& CompilationOutput, ECompilationResult::Type CompilationResult, bool bShowLog)"
  },
  {
    "label": "CreatePIEWorldFromEntry()",
    "kind": "Method",
    "detail": "Function (public : UWorld*)",
    "insertText": "CreatePIEWorldFromEntry(FWorldContext &WorldContext, UWorld* InWorld, FString &PlayWorldMapName)"
  },
  {
    "label": "PreCreatePIEInstances()",
    "kind": "Method",
    "detail": "Function (FGameInstancePIEResult)",
    "insertText": "PreCreatePIEInstances(const bool bAnyBlueprintErrors, const bool bStartInSpectatorMode, const float PIEStartTime, const bool bSupportsOnlinePIE, int32& InNumOnlinePIEInstances)"
  },
  {
    "label": "PreCreatePIEServerInstance()",
    "kind": "Method",
    "detail": "Function (FGameInstancePIEResult)",
    "insertText": "PreCreatePIEServerInstance(const bool bAnyBlueprintErrors, const bool bStartInSpectatorMode, const float PIEStartTime, const bool bSupportsOnlinePIE, int32& InNumOnlinePIEInstances)"
  },
  {
    "label": "OnViewportCloseRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewportCloseRequested(FViewport* InViewport)"
  },
  {
    "label": "GetSimulateInEditorViewTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSimulateInEditorViewTransform(FTransform& OutViewTransform)"
  },
  {
    "label": "SpawnPlayFromHereStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayFromHereStart(UWorld* World, AActor*& PlayerStartPIE, const FVector& StartLocation, const FRotator& StartRotation)"
  },
  {
    "label": "SpawnPlayFromHereStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayFromHereStart(UWorld* World, AActor*& PlayerStartPIE)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSelectCommand, UModel*)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FSelectInWorldCommand, UWorld*, UModel*)"
  },
  {
    "label": "ExecuteCommandForAllLevelModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommandForAllLevelModels(UWorld* InWorld, FSelectCommand InSelectCommand, const FText& TransDesription)"
  },
  {
    "label": "ExecuteCommandForAllLevelModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommandForAllLevelModels(UWorld* InWorld, FSelectInWorldCommand InSelectCommand, const FText& TransDesription)"
  },
  {
    "label": "FlagModifyAllSelectedSurfacesInLevels()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FlagModifyAllSelectedSurfacesInLevels(UWorld* InWorld)"
  },
  {
    "label": "CheckForWorldGCLeaks()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CheckForWorldGCLeaks(UWorld* NewWorld, UPackage* WorldPackage)"
  },
  {
    "label": "EditorDestroyWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorDestroyWorld(FWorldContext & Context, const FText& CleanseText, UWorld* NewWorld = nullptr)"
  },
  {
    "label": "CreateTransLevelMoveBuffer()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "CreateTransLevelMoveBuffer(UWorld* InWorld)"
  },
  {
    "label": "BroadcastPostUndoRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPostUndoRedo(const FTransactionContext& UndoContext, bool bWasUndo)"
  },
  {
    "label": "ShowUndoRedoNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowUndoRedoNotification(const FText& NotificationText, bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PreWorldOriginOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreWorldOriginOffset(UWorld* InWorld, FIntVector InSrcOrigin, FIntVector InDstOrigin)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAddedToWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "UpdateRecentlyLoadedProjectFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecentlyLoadedProjectFiles()"
  },
  {
    "label": "UpdateAutoLoadProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutoLoadProject()"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName Name)"
  },
  {
    "label": "HandleTransactorBeforeRedoUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorBeforeRedoUndo(const FTransactionContext& TransactionContext)"
  },
  {
    "label": "HandleTransactorRedoUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorRedoUndo(const FTransactionContext& TransactionContext, bool Succeeded, bool WasUndo)"
  },
  {
    "label": "HandleTransactorRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorRedo(const FTransactionContext& TransactionContext, bool Succeeded)"
  },
  {
    "label": "HandleTransactorUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorUndo(const FTransactionContext& TransactionContext, bool Succeeded)"
  },
  {
    "label": "HandleObjectTransacted()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "HandleObjectTransacted(UObject* InObject, const class FTransactionObjectEvent& InTransactionObjectEvent)"
  },
  {
    "label": "IsPlayingOnLocalPCSession()",
    "kind": "Method",
    "detail": "Function (private : TPimplPtr<FEditorTransactionDeltaContext> CurrentUndoRedoContext ; TArray<class FEditorViewportClient*> AllViewportClients ; TArray<class FLevelEditorViewportClient*> LevelViewportClients ; FViewportClientListChangedEvent ViewportClientListChangedEvent ; FViewportClientListChangedEvent LevelViewportClientListChangedEvent ; FBlueprintPreCompileEvent BlueprintPreCompileEvent ; FBlueprintCompiledEvent BlueprintCompiledEvent ; FBlueprintReinstanced BlueprintReinstanced ; FClassPackageLoadedOrUnloadedEvent ClassPackageLoadedOrUnloadedEvent ; FOnBeginTransformObject OnBeginObjectTransformEvent ; FOnEndTransformObject OnEndObjectTransformEvent ; FOnActorsMoved OnActorsMovedEvent ; FOnBeginTransformCamera OnBeginCameraTransformEvent ; FOnEndTransformCamera OnEndCameraTransformEvent ; FHLODActorMovedEvent HLODActorMovedEvent ; FHLODMeshBuildEvent HLODMeshBuildEvent ; FHLODActorAddedEvent HLODActorAddedEvent ; FHLODTransitionScreenSizeChangedEvent HLODTransitionScreenSizeChangedEvent ; FHLODLevelsArrayChangedEvent HLODLevelsArrayChangedEvent ; FHLODActorRemovedFromClusterEvent HLODActorRemovedFromClusterEvent ; FExecParticleInvoked ExecParticleInvokedEvent ; FSelectUnloadedActorsEvent SelectUnloadedActorsEvent ; TWeakPtr<class SWindow> PopupWindow ; bool bDisableDeltaModification ; TSet<class FEditorUndoClient*> UndoClients ; TSet<class FEditorUndoClient*> InflightUndoClients ; TSharedPtr<class SNotificationItem> UndoRedoNotificationItem ; TSharedPtr<class FTimerManager> TimerManager ; FScopedConditionalWorldSwitcher* FunctionStackWorldSwitcher = nullptr ; int32 FunctionStackWorldSwitcherTag = - 1 ; FDelegateHandle ScriptExecutionStartHandle,ScriptExecutionEndHandle ; public : bool)",
    "insertText": "IsPlayingOnLocalPCSession()"
  },
  {
    "label": "LaunchNewProcess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LaunchNewProcess(const FRequestPlaySessionParams& InParams, const int32 InInstanceNum, EPlayNetMode NetMode, bool bIsDedicatedServer)"
  },
  {
    "label": "StartPlayInNewProcessSession()",
    "kind": "Method",
    "detail": "Function (protected : struct FPlayOnPCInfo { FProcHandle ProcessHandle ; } ; TArray<FPlayOnPCInfo> PlayOnLocalPCSessions ; void)",
    "insertText": "StartPlayInNewProcessSession(FRequestPlaySessionParams& InRequestParams)"
  },
  {
    "label": "AddPendingLateJoinClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingLateJoinClient()"
  },
  {
    "label": "IsPlayingViaLauncher()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsPlayingViaLauncher()"
  },
  {
    "label": "CancelPlayingViaLauncher()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CancelPlayingViaLauncher()"
  },
  {
    "label": "GetPlayOnTargetPlatformName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlayOnTargetPlatformName()"
  },
  {
    "label": "CancelPlayUsingLauncher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPlayUsingLauncher()"
  },
  {
    "label": "StartPlayUsingLauncherSession()",
    "kind": "Method",
    "detail": "Function (protected : struct FLauncherCachedInfo { FString PlayUsingLauncherDeviceName ; bool bPlayUsingLauncherHasCode ; bool bPlayUsingLauncherBuild ; } ; TOptional<FLauncherCachedInfo> LauncherSessionInfo ; FString LastPlayUsingLauncherDeviceId ; void)",
    "insertText": "StartPlayUsingLauncherSession(FRequestPlaySessionParams& InRequestParams)"
  },
  {
    "label": "SupportsOnlinePIE()",
    "kind": "Method",
    "detail": "Function (bool bUATSuccessfullyCompiledOnce ; public : bool)",
    "insertText": "SupportsOnlinePIE()"
  },
  {
    "label": "IsPlayingWithOnlinePIE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingWithOnlinePIE()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} protected : TOptional<FRequestPlaySessionParams> PlaySessionRequest ; TOptional<FPlayInEditorSessionInfo> PlayInEditorSessionInfo ; bool bIsEndingPlay ; protected :)",
    "insertText": "DECLARE_DELEGATE(FPIEInstanceWindowSwitch)"
  },
  {
    "label": "SetPIEInstanceWindowSwitchDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPIEInstanceWindowSwitchDelegate(FPIEInstanceWindowSwitch PIEInstanceWindowSwitchDelegate)"
  },
  {
    "label": "GetGameSceneViewport()",
    "kind": "Method",
    "detail": "Function (FSceneViewport*)",
    "insertText": "GetGameSceneViewport(UGameViewportClient* ViewportClient)"
  },
  {
    "label": "ToggleBetweenPIEandSIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleBetweenPIEandSIE(bool bNewSession = false)"
  },
  {
    "label": "OnSwitchWorldForSlatePieWindow()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnSwitchWorldForSlatePieWindow(int32 WorldID, int32 WorldPIEInstance)"
  },
  {
    "label": "OnSwitchWorldsForPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSwitchWorldsForPIE(bool bSwitchToPieWorld, UWorld* OverrideWorld = nullptr)"
  },
  {
    "label": "OnSwitchWorldsForPIEInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSwitchWorldsForPIEInstance(int32 WorldPIEInstance)"
  },
  {
    "label": "EnableWorldSwitchCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableWorldSwitchCallbacks(bool bEnable)"
  },
  {
    "label": "OnScriptExecutionStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScriptExecutionStart(const struct FBlueprintContextTracker& ContextTracker, const UObject* ContextObject, const UFunction* ContextFunction)"
  },
  {
    "label": "OnScriptExecutionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScriptExecutionEnd(const struct FBlueprintContextTracker& ContextTracker)"
  },
  {
    "label": "GiveFocusToLastClientPIEViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GiveFocusToLastClientPIEViewport()"
  },
  {
    "label": "OnLoginPIEComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoginPIEComplete(int32 LocalUserNum, bool bWasSuccessful, const FString& ErrorString, FPieLoginStruct DataStruct)"
  },
  {
    "label": "OnLoginPIEComplete_Deferred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoginPIEComplete_Deferred(int32 LocalUserNum, bool bWasSuccessful, FString ErrorString, FPieLoginStruct DataStruct)"
  },
  {
    "label": "IsLoginPIESuccessful()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoginPIESuccessful(int32 LocalUserNum, bool bWasSuccessful, const FString& ErrorString, const FPieLoginStruct& DataStruct)"
  },
  {
    "label": "TransferEditorSelectionToPlayInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferEditorSelectionToPlayInstances(const bool bInSelectInstances)"
  },
  {
    "label": "CreateInnerProcessPIEGameInstance()",
    "kind": "Method",
    "detail": "Function (UGameInstance*)",
    "insertText": "CreateInnerProcessPIEGameInstance(FRequestPlaySessionParams& InParams, const FGameInstancePIEParameters& InPIEParameters, int32 InPIEInstanceIndex)"
  },
  {
    "label": "GeneratePIEViewportWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SPIEViewport>)",
    "insertText": "GeneratePIEViewportWindow(const FRequestPlaySessionParams& InSessionParams, int32 InViewportIndex, const FWorldContext& InWorldContext, EPlayNetMode InNetMode, UGameViewportClient* InViewportClient, FSlatePlayInEditorInfo& InSlateInfo)"
  },
  {
    "label": "StoreWindowSizeAndPositionForInstanceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreWindowSizeAndPositionForInstanceIndex(const int32 InInstanceIndex, const FIntPoint& InSize, const FIntPoint& InPosition)"
  },
  {
    "label": "GetWindowSizeAndPositionForInstanceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindowSizeAndPositionForInstanceIndex(ULevelEditorPlaySettings& InEditorPlaySettings, const int32 InInstanceIndex, const FWorldContext& InWorldContext, FIntPoint& OutSize, FIntPoint& OutPosition)"
  },
  {
    "label": "StartQueuedPlaySessionRequestImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartQueuedPlaySessionRequestImpl()"
  },
  {
    "label": "StartPlayInEditorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayInEditorSession(FRequestPlaySessionParams& InRequestParams)"
  },
  {
    "label": "CreateNewPlayInEditorInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewPlayInEditorInstance(FRequestPlaySessionParams &InRequestParams, const bool bInDedicatedInstance, const EPlayNetMode InNetMode)"
  },
  {
    "label": "SaveMapsForPlaySession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveMapsForPlaySession()"
  },
  {
    "label": "InvalidateAllViewportsAndHitProxies()",
    "kind": "Method",
    "detail": "Function (protected : FPIEInstanceWindowSwitch PIEInstanceWindowSwitchDelegate ; FVector LastViewLocation ; FRotator LastViewRotation ; bool bLastViewAndLocationValid ; TSharedPtr<class FOutputLogErrorsToMessageLogProxy> OutputLogErrorsToMessageLogProxyPtr ; private : TArray<FString> DeferredFilesToAddToSourceControl ; protected : void)",
    "insertText": "InvalidateAllViewportsAndHitProxies()"
  },
  {
    "label": "InitializePortal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePortal()"
  },
  {
    "label": "CleanupPIEOnlineSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupPIEOnlineSessions(TArray<FName> OnlineIdentifiers)"
  },
  {
    "label": "HandleStageStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStageStarted(const FString& InStage, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleStageCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStageCompleted(const FString& InStage, double StageTime, bool bHasCode, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleLaunchCanceled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLaunchCanceled(double TotalTime, bool bHasCode, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleLaunchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLaunchCompleted(bool Succeeded, double TotalTime, int32 ErrorCode, bool bHasCode, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleOpenAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleOpenAsset(UObject* Asset)"
  },
  {
    "label": "OnAssetLoaded()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnAssetLoaded(UObject* Asset)"
  },
  {
    "label": "OnAssetCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetCreated(UObject* Asset)"
  },
  {
    "label": "OnAssetPostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetPostCompile(const TArray<FAssetCompileData>& CompiledAssets)"
  },
  {
    "label": "RegisterTimecodeProviderCompiledDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTimecodeProviderCompiledDelegate()"
  },
  {
    "label": "RegisterCustomTimeStepCompiledDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomTimeStepCompiledDelegate()"
  },
  {
    "label": "HandleTimecodeProviderCompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTimecodeProviderCompiled(UBlueprint* InBlueprint)"
  },
  {
    "label": "HandleCustomTimeStepCompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCustomTimeStepCompiled(UBlueprint* InBlueprint)"
  },
  {
    "label": "InitializeNewlyCreatedInactiveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNewlyCreatedInactiveWorld(UWorld* World)"
  },
  {
    "label": "GetEditorWorldInitializationValues()",
    "kind": "Method",
    "detail": "Function (UWorld::InitializationValues)",
    "insertText": "GetEditorWorldInitializationValues()"
  },
  {
    "label": "OnEffectivePreviewShaderPlatformChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEffectivePreviewShaderPlatformChange()"
  },
  {
    "label": "AutomationLoadMap()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<class ILauncherWorker> LauncherWorker ; void)",
    "insertText": "AutomationLoadMap(const FString& MapName, bool bForceReload, FString* OutError)"
  },
  {
    "label": "OnSceneMaterialsModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSceneMaterialsModified()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(UEditorEngine, FSceneMaterialsModifiedEvent)"
  },
  {
    "label": "OnSceneMaterialsModifiedEvent()",
    "kind": "Method",
    "detail": "Function (FSceneMaterialsModifiedEvent&)",
    "insertText": "OnSceneMaterialsModifiedEvent()"
  },
  {
    "label": "ToggleFeatureLevelPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFeatureLevelPreview()"
  },
  {
    "label": "IsFeatureLevelPreviewEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeatureLevelPreviewEnabled()"
  },
  {
    "label": "IsFeatureLevelPreviewActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeatureLevelPreviewActive()"
  },
  {
    "label": "GetActiveShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "GetActiveShaderPlatform()"
  },
  {
    "label": "GetActiveFeatureLevelPreviewType()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetActiveFeatureLevelPreviewType()"
  },
  {
    "label": "OnPreviewFeatureLevelChanged()",
    "kind": "Method",
    "detail": "Function (FPreviewFeatureLevelChanged&)",
    "insertText": "OnPreviewFeatureLevelChanged()"
  },
  {
    "label": "SaveEditorFeatureLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveEditorFeatureLevel()"
  },
  {
    "label": "IsEditorShaderPlatformEmulated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorShaderPlatformEmulated(UWorld* World)"
  },
  {
    "label": "IsOfflineShaderCompilerAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOfflineShaderCompilerAvailable(UWorld* World)"
  },
  {
    "label": "GetEditorSubsystemBase()",
    "kind": "Method",
    "detail": "Function (private : FTimerHandle CleanupPIEOnlineSessionsTimerHandle ; FDelegateHandle WorldAddExtraDeletionObjectsHandle ; FDelegateHandle ViewportCloseRequestedDelegateHandle ; FDelegateHandle TimecodeProviderCompiledDelegateHandle ; FDelegateHandle CustomTimeStepCompiledDelegateHandle ; TArray<TWeakPtr<SWindow>> MinimizedWindowsDuringPIE ; FSceneMaterialsModifiedEvent SceneMaterialsModifiedEvent ; public : UEditorSubsystem*)",
    "insertText": "GetEditorSubsystemBase(TSubclassOf<UEditorSubsystem> SubsystemClass)"
  },
  {
    "label": "GetEditorSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetEditorSubsystem()"
  },
  {
    "label": "GetEditorSubsystemArrayCopy()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TArray<TSubsystemClass*>)",
    "insertText": "GetEditorSubsystemArrayCopy()"
  },
  {
    "label": "ForEachEditorSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> void)",
    "insertText": "ForEachEditorSubsystem(TFunctionRef<void(TSubsystemClass*)> Operation)"
  },
  {
    "label": "SplitActorLabel()",
    "kind": "Method",
    "detail": "Function (} ; PRAGMA_ENABLE_DEPRECATION_WARNINGS struct FActorLabelUtilities { public : bool)",
    "insertText": "SplitActorLabel(FString& InOutLabel, int32& OutIdx)"
  },
  {
    "label": "SetActorLabelUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorLabelUnique(AActor* Actor, const FString& NewActorLabel, const FCachedActorLabels* InExistingActorLabels = nullptr)"
  },
  {
    "label": "RenameExistingActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameExistingActor(AActor* Actor, const FString& NewActorLabel, bool bMakeUnique = false)"
  },
  {
    "label": "FActorLabelUtilities()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FActorLabelUtilities()"
  }
]