[
  {
    "label": "APlayerStart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerStart"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorWorldManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorWorldManager"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLog"
  },
  {
    "label": "FOutputLogErrorsToMessageLogProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputLogErrorsToMessageLogProxy"
  },
  {
    "label": "FPoly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoly"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FSceneViewStateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateInterface"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "IEngineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEngineLoop"
  },
  {
    "label": "ILauncherWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILauncherWorker"
  },
  {
    "label": "ILayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILayers"
  },
  {
    "label": "IAssetReferenceFixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetReferenceFixer"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "UBrushBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrushBuilder"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "UFbxImportUI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxImportUI"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "ULevelEditorPlaySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelEditorPlaySettings"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "UTransactor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransactor"
  },
  {
    "label": "FTransactionObjectEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransactionObjectEvent"
  },
  {
    "label": "ERotationGridMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERotationGridMode"
  },
  {
    "label": "FEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdge"
  },
  {
    "label": "FTransactionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionContext"
  },
  {
    "label": "FEditorTransactionDeltaContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorTransactionDeltaContext"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FAssetCompileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetCompileData"
  },
  {
    "label": "UEditorWorldExtensionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorWorldExtensionManager"
  },
  {
    "label": "ITargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetDevice"
  },
  {
    "label": "ULevelEditorDragDropHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelEditorDragDropHandler"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "IProjectExternalContentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IProjectExternalContentInterface"
  },
  {
    "label": "EMapSetBrushFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMapSetBrushFlags"
  },
  {
    "label": "EPasteTo",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPasteTo"
  },
  {
    "label": "FCopySelectedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCopySelectedInfo"
  },
  {
    "label": "FCachedActorLabels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedActorLabels"
  },
  {
    "label": "FSelectionStateOfLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectionStateOfLevel"
  },
  {
    "label": "FPreviewPlatformInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreviewPlatformInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetReferenceFilterReferencerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetReferenceFilterReferencerInfo"
  },
  {
    "label": "FAssetReferenceFilterContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetReferenceFilterContext"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "UEditorEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorEngine"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UTransactor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransactor"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "USoundCue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundCue"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "EDetailMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDetailMode"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "ANavigationObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationObjectBase"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UBrushBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrushBuilder"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FUObjectAnnotationSparseBool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUObjectAnnotationSparseBool"
  },
  {
    "label": "package",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "package"
  },
  {
    "label": "ALODActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALODActor"
  },
  {
    "label": "ALODActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALODActor"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "EMousePositionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMousePositionType"
  },
  {
    "label": "EMapRebuildType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMapRebuildType"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "we",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "we"
  },
  {
    "label": "default",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "default"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "AGroupActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGroupActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FLightingBuildOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightingBuildOptions"
  },
  {
    "label": "UFbxAnimSequenceImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxAnimSequenceImportData"
  },
  {
    "label": "UFbxAnimSequenceImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxAnimSequenceImportData"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "FSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionIterator"
  },
  {
    "label": "FSelectionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionIterator"
  },
  {
    "label": "FSelectedEditableComponentIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedEditableComponentIterator"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "this",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "this"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "AND",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AND"
  },
  {
    "label": "ERotationGridMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERotationGridMode"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "converting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "converting"
  },
  {
    "label": "converting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "converting"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FEditorUndoClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorUndoClient"
  },
  {
    "label": "FEditorUndoClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorUndoClient"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "instance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "instance"
  },
  {
    "label": "UActorGroupingUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorGroupingUtils"
  },
  {
    "label": "EMapCheckNotification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EMapCheckNotification"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FTransactionObjectEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransactionObjectEvent"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FEditorUndoClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorUndoClient"
  },
  {
    "label": "FEditorUndoClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorUndoClient"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "FPlayOnPCInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlayOnPCInfo"
  },
  {
    "label": "FLauncherCachedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLauncherCachedInfo"
  },
  {
    "label": "FBlueprintContextTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintContextTracker"
  },
  {
    "label": "FBlueprintContextTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintContextTracker"
  },
  {
    "label": "SPIEViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPIEViewport"
  },
  {
    "label": "FOutputLogErrorsToMessageLogProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputLogErrorsToMessageLogProxy"
  },
  {
    "label": "ILauncherWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILauncherWorker"
  },
  {
    "label": "UActorGroupingUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorGroupingUtils"
  },
  {
    "label": "UNREALED_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UNREALED_API"
  },
  {
    "label": "FCachedActorLabels()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FCachedActorLabels()"
  },
  {
    "label": "InternalSetFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetFriendlyName()"
  },
  {
    "label": "AddReferencingAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencingAsset(const FAssetData& InReferencingAsset, EAssetReferenceFilterProperties InProperties = EAssetReferenceFilterProperties::None)"
  },
  {
    "label": "AddReferencingAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencingAssets(const TArray<FAssetData>& InReferencingAssets, EAssetReferenceFilterProperties InProperties = EAssetReferenceFilterProperties::None)"
  },
  {
    "label": "AddReferencingAssetsFromPropertyHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencingAssetsFromPropertyHandle(const TSharedPtr<class IPropertyHandle>& PropertyHandle)"
  },
  {
    "label": "AddViewportClients()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddViewportClients(FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "RemoveViewportClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportClients(FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "AddLevelViewportClients()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddLevelViewportClients(FLevelEditorViewportClient* ViewportClient)"
  },
  {
    "label": "RemoveLevelViewportClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelViewportClients(FLevelEditorViewportClient* ViewportClient)"
  },
  {
    "label": "BroadcastObjectReimported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastObjectReimported(UObject* InObject)"
  },
  {
    "label": "LoadDefaultEditorModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDefaultEditorModules()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetPropertyColorationMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyColorationMatch(class UObject* Object)"
  },
  {
    "label": "UpdateIsVanillaProduct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIsVanillaProduct()"
  },
  {
    "label": "CreateVolumeFactoriesForNewClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVolumeFactoriesForNewClasses(const TArray<UClass*>& NewClasses)"
  },
  {
    "label": "CommandIsDeprecated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommandIsDeprecated( const TCHAR* CommandStr, FOutputDevice& Ar )"
  },
  {
    "label": "HandleCallbackCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCallbackCommand( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleTestPropsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestPropsCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleMapCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMapCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleSelectCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSelectCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleDeleteCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDeleteCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleLightmassDebugCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassDebugCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassStatsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassStatsCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleSwarmDistributionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSwarmDistributionCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassImmediateImportCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassImmediateImportCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassImmediateProcessCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassImmediateProcessCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassSortCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassSortCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassDebugMaterialCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassDebugMaterialCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassPaddingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassPaddingCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassDebugPaddingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassDebugPaddingCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleLightmassProfileCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmassProfileCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleSelectNameCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSelectNameCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld  )"
  },
  {
    "label": "HandleDumpPublicCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpPublicCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleJumpToCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleJumpToCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleBugItGoCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugItGoCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleBugItCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugItCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTagSoundsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTagSoundsCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandlecheckSoundsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlecheckSoundsCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleFixupBadAnimNotifiersCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFixupBadAnimNotifiersCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleSetDetailModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetDetailModeCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleSetDetailModeViewCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetDetailModeViewCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleCleanBSPMaterialCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCleanBSPMaterialCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld  )"
  },
  {
    "label": "HandleAutoMergeStaticMeshCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAutoMergeStaticMeshCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleAddSelectedCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAddSelectedCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleToggleSocketGModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleSocketGModeCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleListMapPackageDependenciesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListMapPackageDependenciesCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleRebuildVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRebuildVolumesCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleRemoveArchtypeFlagCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRemoveArchtypeFlagCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleStartMovieCaptureCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStartMovieCaptureCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleBuildMaterialTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBuildMaterialTextureStreamingData( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "InitEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEditor(IEngineLoop* InEngineLoop)"
  },
  {
    "label": "InitBuilderBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBuilderBrush( UWorld* InWorld )"
  },
  {
    "label": "MuteRealTimeAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MuteRealTimeAudio(bool bMute)"
  },
  {
    "label": "SetRealTimeAudioVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRealTimeAudioVolume(float VolumeLevel)"
  },
  {
    "label": "UpdateSingleViewportClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSingleViewportClient(FEditorViewportClient* InViewportClient, const bool bInAllowNonRealtimeViewportToDraw, bool bLinkedOrthoMovement, bool* bOutViewportDrawn = nullptr )"
  },
  {
    "label": "SafeExec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SafeExec( UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog )"
  },
  {
    "label": "Exec_StaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_StaticMesh( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Brush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Brush( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Poly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Poly( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Obj()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Obj( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Camera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Camera( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Transaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Transaction(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Particle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Particle(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "ExecFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecFile( UWorld* InWorld, const TCHAR* InFilename, FOutputDevice& Ar )"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginTransaction(const FText& Description)"
  },
  {
    "label": "ResetTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTransaction(const FText& Reason)"
  },
  {
    "label": "UndoTransaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UndoTransaction(bool bCanRedo = true)"
  },
  {
    "label": "RedoTransaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RedoTransaction()"
  },
  {
    "label": "RebuildMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildMap(UWorld* RebuildMap, EMapRebuildType RebuildType)"
  },
  {
    "label": "RebuildLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildLevel(ULevel& Level)"
  },
  {
    "label": "RebuildModelFromBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildModelFromBrushes(UModel* Model, bool bSelectedBrushesOnly, bool bTreatMovableBrushesAsStatic = false)"
  },
  {
    "label": "RebuildModelFromBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildModelFromBrushes(TArray<ABrush*>& BrushesToBuild, UModel* Model)"
  },
  {
    "label": "RebuildAlteredBSP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildAlteredBSP()"
  },
  {
    "label": "BSPIntersectionHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BSPIntersectionHelper(UWorld* InWorld, ECsgOper Operation)"
  },
  {
    "label": "MoveActorInFrontOfCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveActorInFrontOfCamera( AActor& InActor, const FVector& InCameraOrigin, const FVector& InCameraDirection )"
  },
  {
    "label": "MoveViewportCamerasToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToActor(AActor& Actor,  bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToActor(const TArray<AActor*> &Actors, bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToActor(const TArray<AActor*> &Actors, const TArray<UPrimitiveComponent*>& Components, bool bActiveViewportOnly)"
  },
  {
    "label": "MoveViewportCamerasToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveViewportCamerasToComponent(const USceneComponent* Component, bool bActiveViewportOnly)"
  },
  {
    "label": "SnapViewTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapViewTo(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "RemovePerspectiveViewRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePerspectiveViewRotation(bool Roll, bool Pitch, bool Yaw)"
  },
  {
    "label": "Cleanse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanse( bool ClearSelection, bool Redraw, const FText& TransReset, bool bTransReset = true )"
  },
  {
    "label": "PlayEditorSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayEditorSound( const FString& SoundAssetName )"
  },
  {
    "label": "PlayEditorSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayEditorSound( USoundBase* InSound )"
  },
  {
    "label": "ClearPreviewComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPreviewComponents()"
  },
  {
    "label": "CloseEditedWorldAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEditedWorldAssets(UWorld* InWorld)"
  },
  {
    "label": "RedrawAllViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawAllViewports(bool bInvalidateHitProxies=true)"
  },
  {
    "label": "ReplaceSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSelectedActors(UActorFactory* Factory, const FAssetData& AssetData, bool bCopySourceProperties = true)"
  },
  {
    "label": "ReplaceActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceActors(UActorFactory* Factory, const FAssetData& AssetData, const TArray<AActor*>& ActorsToReplace, TArray<AActor*>* OutNewActors = nullptr, bool bCopySourceProperties = true)"
  },
  {
    "label": "ConvertLightActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertLightActors( UClass* ConvertToClass )"
  },
  {
    "label": "DoConvertActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoConvertActors( const TArray<AActor*>& ActorsToConvert, UClass* ConvertToClass, const TSet<FString>& ComponentsToConsider, bool bUseSpecialCases, const FString& InStaticMeshPackageName )"
  },
  {
    "label": "ConvertActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertActors( const TArray<AActor*>& ActorsToConvert, UClass* ConvertToClass, const TSet<FString>& ComponentsToConsider, bool bUseSpecialCases = false )"
  },
  {
    "label": "SetPreviewMeshMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMeshMode( bool bState )"
  },
  {
    "label": "UpdatePreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreviewMesh()"
  },
  {
    "label": "CyclePreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CyclePreviewMesh()"
  },
  {
    "label": "csgRebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "csgRebuild( UWorld* InWorld )"
  },
  {
    "label": "polyFindBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "polyFindBrush(UModel* InModel, int32 iSurf, FPoly &Poly)"
  },
  {
    "label": "polyUpdateBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyUpdateBrush(UModel* Model, int32 iSurf, bool bUpdateTexCoords, bool bOnlyRefreshSurfaceMaterials)"
  },
  {
    "label": "polyGetLinkedPolys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyGetLinkedPolys( ABrush* InBrush, FPoly* InPoly, TArray<FPoly>* InPolyList )"
  },
  {
    "label": "polyGetOuterEdgeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyGetOuterEdgeList( TArray<FPoly>* InPolyList, TArray<FEdge>* InEdgeList )"
  },
  {
    "label": "polySplitOverlappingEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySplitOverlappingEdges( TArray<FPoly>* InPolyList, TArray<FPoly>* InResult )"
  },
  {
    "label": "polySetAndClearPolyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySetAndClearPolyFlags( UModel* Model, uint32 SetBits, uint32 ClearBits, bool SelectedOnly, bool UpdateBrush )"
  },
  {
    "label": "polySelectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAll( UModel* Model )"
  },
  {
    "label": "polySelectMatchingGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingGroups( UModel* Model )"
  },
  {
    "label": "polySelectMatchingItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingItems( UModel* Model )"
  },
  {
    "label": "polySelectCoplanars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectCoplanars( UWorld* InWorld, UModel* Model )"
  },
  {
    "label": "polySelectAdjacents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacents( UWorld* InWorld, UModel* Model )"
  },
  {
    "label": "polySelectAdjacentWalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacentWalls( UWorld* InWorld, UModel* Model )"
  },
  {
    "label": "polySelectAdjacentFloors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacentFloors( UWorld* InWorld, UModel* Model )"
  },
  {
    "label": "polySelectAdjacentSlants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectAdjacentSlants( UWorld* InWorld, UModel* Model )"
  },
  {
    "label": "polySelectMatchingBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingBrush( UModel* Model )"
  },
  {
    "label": "polySelectMatchingMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingMaterial(UWorld* InWorld, bool bCurrentLevelOnly)"
  },
  {
    "label": "polySelectMatchingResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectMatchingResolution(UWorld* InWorld, bool bCurrentLevelOnly)"
  },
  {
    "label": "polySelectReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectReverse( UModel* Model )"
  },
  {
    "label": "polyMemorizeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyMemorizeSet( UModel* Model )"
  },
  {
    "label": "polyRememberSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyRememberSet( UModel* Model )"
  },
  {
    "label": "polyXorSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyXorSet( UModel* Model )"
  },
  {
    "label": "polyUnionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyUnionSet( UModel* Model )"
  },
  {
    "label": "polyIntersectSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyIntersectSet( UModel* Model )"
  },
  {
    "label": "polySelectZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polySelectZone( UModel *Model )"
  },
  {
    "label": "polyTexPan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyTexPan( UModel* Model, int32 PanU, int32 PanV, int32 Absolute )"
  },
  {
    "label": "polyTexScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "polyTexScale( UModel* Model,float UU, float UV, float VU, float VV, bool Absolute )"
  },
  {
    "label": "MapSelectOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapSelectOperation( UWorld* InWorld, EBrushType BrushType )"
  },
  {
    "label": "MapSelectFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapSelectFlags( UWorld* InWorld, uint32 Flags )"
  },
  {
    "label": "MapBrushGet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapBrushGet(UWorld* InWorld)"
  },
  {
    "label": "mapBrushPut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapBrushPut()"
  },
  {
    "label": "mapSendToFirst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSendToFirst(UWorld* InWorld)"
  },
  {
    "label": "mapSendToLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSendToLast(UWorld* InWorld)"
  },
  {
    "label": "mapSendToSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSendToSwap(UWorld* InWorld)"
  },
  {
    "label": "MapSetBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapSetBrush( UWorld* InWorld, EMapSetBrushFlags PropertiesMask, uint16 BrushColor, FName Group, uint32 SetPolyFlags, uint32 ClearPolyFlags, uint32 BrushType, int32 DrawType )"
  },
  {
    "label": "bspRepartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspRepartition( UWorld* InWorld, int32 iNode )"
  },
  {
    "label": "bspNodeToFPoly()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "bspNodeToFPoly( UModel* Model, int32 iNode, FPoly* EdPoly )"
  },
  {
    "label": "bspCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspCleanup( UModel* Model )"
  },
  {
    "label": "bspBuildFPolys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspBuildFPolys( UModel* Model, bool SurfLinks, int32 iNode, TArray<FPoly>* DestArray = NULL )"
  },
  {
    "label": "bspMergeCoplanars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspMergeCoplanars( UModel* Model, bool RemapLinks, bool MergeDisparateTextures )"
  },
  {
    "label": "bspBrushCSG()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "bspBrushCSG( ABrush* Actor, UModel* Model, uint32 PolyFlags, EBrushType BrushType, ECsgOper CSGOper, bool bBuildBounds, bool bMergePolys, bool bReplaceNULLMaterialRefs, bool bShowProgressBar=true )"
  },
  {
    "label": "bspOptGeom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspOptGeom( UModel* Model )"
  },
  {
    "label": "BuildLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLighting(const class FLightingBuildOptions& Options)"
  },
  {
    "label": "UpdateBuildLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuildLighting()"
  },
  {
    "label": "WarnIfLightingBuildIsCurrentlyRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WarnIfLightingBuildIsCurrentlyRunning()"
  },
  {
    "label": "ReimportFbxAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReimportFbxAnimation( USkeleton* Skeleton, UAnimSequence* AnimSequence, class UFbxAnimSequenceImportData* ImportData, const TCHAR* InFilename, bool& bOutImportAll, const bool bFactoryShowOptions, UFbxImportUI* ReimportUI = nullptr)"
  },
  {
    "label": "RenameObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameObject(UObject* Object,UObject* NewOuter,const TCHAR* NewName, ERenameFlags Flags=REN_None)"
  },
  {
    "label": "AnalyzeLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeLevel(ULevel* Level,FOutputDevice& Ar)"
  },
  {
    "label": "EditorUpdateComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorUpdateComponents()"
  },
  {
    "label": "OnModalMessageDialog()",
    "kind": "Method",
    "detail": "Function (EAppReturnType::Type)",
    "insertText": "OnModalMessageDialog(EAppMsgCategory InMessageCategory, EAppMsgType::Type InMessage, const FText& InText, const FText& InTitle)"
  },
  {
    "label": "OnShouldLoadOnTop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnShouldLoadOnTop(const FString& Filename)"
  },
  {
    "label": "PlayMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayMap( const FVector* StartLocation = NULL, const FRotator* StartRotation = NULL, int32 DestinationConsole = -1, int32 InPlayInViewportIndex = -1, bool bUseMobilePreview = false )"
  },
  {
    "label": "RequestPlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestPlaySession(const FRequestPlaySessionParams& InParams)"
  },
  {
    "label": "CancelRequestPlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequestPlaySession()"
  },
  {
    "label": "SetPIEWorldsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPIEWorldsPaused(bool Paused)"
  },
  {
    "label": "PlaySessionPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySessionPaused()"
  },
  {
    "label": "PlaySessionResumed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySessionResumed()"
  },
  {
    "label": "PlaySessionSingleStepped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySessionSingleStepped()"
  },
  {
    "label": "ProcessDebuggerCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessDebuggerCommands(const FKey InKey, const FModifierKeysState ModifierKeyState, EInputEvent EventType)"
  },
  {
    "label": "StartQueuedPlaySessionRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartQueuedPlaySessionRequest()"
  },
  {
    "label": "RequestEndPlayMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEndPlayMap()"
  },
  {
    "label": "RequestLateJoin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLateJoin()"
  },
  {
    "label": "EndPlayMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayMap()"
  },
  {
    "label": "TeardownPlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownPlaySession(FWorldContext &PieWorldContext)"
  },
  {
    "label": "EndPlayOnLocalPc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayOnLocalPc()"
  },
  {
    "label": "SetViewportsRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportsRealtimeOverride(bool bShouldBeRealtime, FText SystemDisplayName)"
  },
  {
    "label": "RemoveViewportsRealtimeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportsRealtimeOverride(FText SystemDisplayName)"
  },
  {
    "label": "IsAnyViewportRealtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyViewportRealtime()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (is)",
    "insertText": "valid(may not be during early startup)"
  },
  {
    "label": "IsWorldSettingsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldSettingsSelected()"
  },
  {
    "label": "SetSelectionStateOfLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionStateOfLevel(const FSelectionStateOfLevel& InSelectionStateOfLevel)"
  },
  {
    "label": "ResetAllSelectionSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllSelectionSets()"
  },
  {
    "label": "ExportMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportMap(UWorld* InWorld, const TCHAR* InFilename, bool bExportSelectedActorsOnly)"
  },
  {
    "label": "CanCopySelectedActorsToClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopySelectedActorsToClipboard( UWorld* InWorld, FCopySelectedInfo* OutCopySelected = NULL )"
  },
  {
    "label": "CopySelectedActorsToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedActorsToClipboard( UWorld* InWorld, const bool bShouldCut, const bool bIsMove = false, bool bWarnAboutReferences = true, FString* DestinationData = nullptr)"
  },
  {
    "label": "CanPasteSelectedActorsFromClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteSelectedActorsFromClipboard( UWorld* InWorld )"
  },
  {
    "label": "PasteSelectedActorsFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteSelectedActorsFromClipboard( UWorld* InWorld, const FText& TransDescription, const EPasteTo PasteTo )"
  },
  {
    "label": "SetPropertyColorationTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyColorationTarget(UWorld* InWorld, const FString& PropertyValue, class FProperty* Property, class UClass* CommonBaseClass, TSharedRef<FEditPropertyChain>* PropertyChain)"
  },
  {
    "label": "SelectByPropertyColoration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByPropertyColoration(UWorld* InWorld)"
  },
  {
    "label": "AutoMergeStaticMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoMergeStaticMeshes()"
  },
  {
    "label": "ParseMapSectionIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseMapSectionIni(const TCHAR* InCmdParams, TArray<FString>& OutMapList)"
  },
  {
    "label": "LoadMapListFromIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadMapListFromIni(const FString& InSectionName, TArray<FString>& OutMapList)"
  },
  {
    "label": "PackageIsAMapFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PackageIsAMapFile( const TCHAR* PackageFilename, FText& OutNotMapReason )"
  },
  {
    "label": "SyncBrowserToObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObjects( const TArray<UObject*>& InObjectsToSync, bool bFocusContentBrowser = true )"
  },
  {
    "label": "SyncBrowserToObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObjects( const TArray<struct FAssetData>& InAssetsToSync, bool bFocusContentBrowser = true )"
  },
  {
    "label": "SyncBrowserToObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObject( const UObject* InObjectToSync, bool bFocusContentBrowser = true )"
  },
  {
    "label": "SyncBrowserToObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToObject( const struct FAssetData& InAssetToSync, bool bFocusContentBrowser = true )"
  },
  {
    "label": "SyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToContentBrowser(bool bAllowOverrideMetadata = true)"
  },
  {
    "label": "SyncActorLevelsToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncActorLevelsToContentBrowser()"
  },
  {
    "label": "CanSyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSyncToContentBrowser()"
  },
  {
    "label": "CanSyncActorLevelsToContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSyncActorLevelsToContentBrowser()"
  },
  {
    "label": "ToggleSelectedActorMovementLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelectedActorMovementLock()"
  },
  {
    "label": "HasLockedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLockedActors()"
  },
  {
    "label": "EditObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditObject( UObject* ObjectToEdit )"
  },
  {
    "label": "SelectLevelInLevelBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLevelInLevelBrowser( bool bDeselectOthers )"
  },
  {
    "label": "DeselectLevelInLevelBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectLevelInLevelBrowser()"
  },
  {
    "label": "SelectAllActorsWithClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllActorsWithClass( bool bArchetype )"
  },
  {
    "label": "FindSelectedActorsInLevelScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSelectedActorsInLevelScript()"
  },
  {
    "label": "AreAnySelectedActorsInLevelScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAnySelectedActorsInLevelScript()"
  },
  {
    "label": "IsPackageValidForAutoAdding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageValidForAutoAdding(UPackage* InPackage, const FString& InFilename)"
  },
  {
    "label": "IsPackageOKToSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageOKToSave(UPackage* InPackage, const FString& InFilename, FOutputDevice* Error)"
  },
  {
    "label": "SavePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePackage(UPackage* InOuter, UObject* InAsset, const TCHAR* Filename, const FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (FSavePackageResultStruct)",
    "insertText": "Save(UPackage* InOuter, UObject* InAsset, const TCHAR* Filename,\n\t\tconst FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "InitializePhysicsSceneForSaveIfNecessary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializePhysicsSceneForSaveIfNecessary(UWorld* World, bool &bOutForceInitialized)"
  },
  {
    "label": "CleanupPhysicsSceneThatWasInitializedForSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupPhysicsSceneThatWasInitializedForSave(UWorld* World, bool bForceInitialized)"
  },
  {
    "label": "OnPreSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreSaveWorld(UWorld* World, FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "OnPostSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSaveWorld(UWorld* World, FObjectPostSaveContext ObjectSaveContext)"
  },
  {
    "label": "AddPackagesToDefaultChangelist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackagesToDefaultChangelist(TArray<FString>& InPackageNames)"
  },
  {
    "label": "RunDeferredMarkForAddFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDeferredMarkForAddFiles(bool = false)"
  },
  {
    "label": "SetGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGridSize(int32 InIndex)"
  },
  {
    "label": "GridSizeIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridSizeIncrement()"
  },
  {
    "label": "GridSizeDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridSizeDecrement()"
  },
  {
    "label": "GetRotGridSize()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "GetRotGridSize()"
  },
  {
    "label": "SetRotGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotGridSize(int32 InIndex, enum ERotationGridMode InGridMode)"
  },
  {
    "label": "RotGridSizeIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotGridSizeIncrement()"
  },
  {
    "label": "RotGridSizeDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotGridSizeDecrement()"
  },
  {
    "label": "GetScaleGridSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScaleGridSize()"
  },
  {
    "label": "SetScaleGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScaleGridSize(int32 InIndex)"
  },
  {
    "label": "GetGridInterval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGridInterval()"
  },
  {
    "label": "ConvertSelectedBrushesToVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectedBrushesToVolumes( UClass* VolumeClass )"
  },
  {
    "label": "ConvertActorsFromClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertActorsFromClass( UClass* FromClass, UClass* ToClass )"
  },
  {
    "label": "BuildReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildReflectionCaptures(UWorld* World = GWorld)"
  },
  {
    "label": "ParentActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParentActors( AActor* ParentActor, AActor* ChildActor, const FName SocketName, USceneComponent* Component=NULL )"
  },
  {
    "label": "DetachSelectedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetachSelectedActors()"
  },
  {
    "label": "CanParentActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanParentActors( const AActor* ParentActor, const AActor* ChildActor, FText* ReasonText = NULL)"
  },
  {
    "label": "RebuildStaticNavigableGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildStaticNavigableGeometry(ULevel* Level)"
  },
  {
    "label": "GetAssetsToSyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsToSyncToContentBrowser(TArray<FAssetData>& Assets, bool bAllowBrowseToAssetOverride = true)"
  },
  {
    "label": "GetLevelsToSyncToContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLevelsToSyncToContentBrowser(TArray<UObject*>& Objects)"
  },
  {
    "label": "GetReferencedAssetsForEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReferencedAssetsForEditorSelection(TArray<UObject*>& Objects, const bool bIgnoreOtherAssetsIfBPReferenced = false)"
  },
  {
    "label": "GetSoftReferencedAssetsForEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSoftReferencedAssetsForEditorSelection(TArray<FSoftObjectPath>& SoftObjects)"
  },
  {
    "label": "CloseEntryPopupWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEntryPopupWindow()"
  },
  {
    "label": "CreateNewMapForEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewMapForEditing(bool bPromptUserToSave = true, bool bIsPartitionedWorld = false)"
  },
  {
    "label": "ShouldAbortBecauseOfPIEWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAbortBecauseOfPIEWorld()"
  },
  {
    "label": "ShouldAbortBecauseOfUnsavedWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAbortBecauseOfUnsavedWorld()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFriendlyName( const FProperty* Property, UStruct* OwnerStruct = NULL )"
  },
  {
    "label": "RegisterForUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForUndo(class FEditorUndoClient* UndoClient )"
  },
  {
    "label": "UnregisterForUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterForUndo( class FEditorUndoClient* UndoEditor )"
  },
  {
    "label": "LoadAndSelectAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAndSelectAssets( TArray<FAssetData>& Assets, UClass* TypeOfAsset=NULL )"
  },
  {
    "label": "Map_Select()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Select( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Brush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Brush( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Sendto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Sendto( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Rebuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Rebuild(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Load(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Map_Import()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Import( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Map_Check()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Check(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar, bool bCheckDeprecatedOnly, EMapCheckNotification::Type Notification = EMapCheckNotification::DisplayResults, bool bClearLog = true)"
  },
  {
    "label": "Map_Scale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Scale( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Map_Setbrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Map_Setbrush( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "LoadPreviewMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadPreviewMesh( int32 Index )"
  },
  {
    "label": "OnModuleCompileStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModuleCompileStarted(bool bIsAsyncCompile)"
  },
  {
    "label": "OnModuleCompileFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModuleCompileFinished(const FString& CompilationOutput, ECompilationResult::Type CompilationResult, bool bShowLog)"
  },
  {
    "label": "PreCreatePIEInstances()",
    "kind": "Method",
    "detail": "Function (FGameInstancePIEResult)",
    "insertText": "PreCreatePIEInstances(const bool bAnyBlueprintErrors, const bool bStartInSpectatorMode, const float PIEStartTime, const bool bSupportsOnlinePIE, int32& InNumOnlinePIEInstances)"
  },
  {
    "label": "PreCreatePIEServerInstance()",
    "kind": "Method",
    "detail": "Function (FGameInstancePIEResult)",
    "insertText": "PreCreatePIEServerInstance(const bool bAnyBlueprintErrors, const bool bStartInSpectatorMode, const float PIEStartTime, const bool bSupportsOnlinePIE, int32& InNumOnlinePIEInstances)"
  },
  {
    "label": "OnViewportCloseRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewportCloseRequested(FViewport* InViewport)"
  },
  {
    "label": "SpawnPlayFromHereStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayFromHereStart(UWorld* World, AActor*& PlayerStartPIE, const FVector& StartLocation, const FRotator& StartRotation)"
  },
  {
    "label": "SpawnPlayFromHereStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayFromHereStart(UWorld* World, AActor*& PlayerStartPIE)"
  },
  {
    "label": "ExecuteCommandForAllLevelModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommandForAllLevelModels( UWorld* InWorld, FSelectCommand InSelectCommand, const FText& TransDesription )"
  },
  {
    "label": "ExecuteCommandForAllLevelModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommandForAllLevelModels( UWorld* InWorld, FSelectInWorldCommand InSelectCommand, const FText& TransDesription )"
  },
  {
    "label": "FlagModifyAllSelectedSurfacesInLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlagModifyAllSelectedSurfacesInLevels( UWorld* InWorld )"
  },
  {
    "label": "CheckForWorldGCLeaks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForWorldGCLeaks( UWorld* NewWorld, UPackage* WorldPackage )"
  },
  {
    "label": "EditorDestroyWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorDestroyWorld( FWorldContext & Context, const FText& CleanseText, UWorld* NewWorld = nullptr )"
  },
  {
    "label": "BroadcastPostUndoRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPostUndoRedo(const FTransactionContext& UndoContext, bool bWasUndo)"
  },
  {
    "label": "ShowUndoRedoNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowUndoRedoNotification(const FText& NotificationText, bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PreWorldOriginOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreWorldOriginOffset(UWorld* InWorld, FIntVector InSrcOrigin, FIntVector InDstOrigin)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAddedToWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "UpdateRecentlyLoadedProjectFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecentlyLoadedProjectFiles()"
  },
  {
    "label": "UpdateAutoLoadProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutoLoadProject()"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged( FName Name )"
  },
  {
    "label": "HandleTransactorBeforeRedoUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorBeforeRedoUndo(const FTransactionContext& TransactionContext)"
  },
  {
    "label": "HandleTransactorRedoUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorRedoUndo(const FTransactionContext& TransactionContext, bool Succeeded, bool WasUndo)"
  },
  {
    "label": "HandleTransactorRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorRedo(const FTransactionContext& TransactionContext, bool Succeeded)"
  },
  {
    "label": "HandleTransactorUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransactorUndo(const FTransactionContext& TransactionContext, bool Succeeded)"
  },
  {
    "label": "HandleObjectTransacted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectTransacted(UObject* InObject, const class FTransactionObjectEvent& InTransactionObjectEvent)"
  },
  {
    "label": "LaunchNewProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchNewProcess(const FRequestPlaySessionParams& InParams, const int32 InInstanceNum, EPlayNetMode NetMode, bool bIsDedicatedServer)"
  },
  {
    "label": "StartPlayInNewProcessSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayInNewProcessSession(FRequestPlaySessionParams& InRequestParams)"
  },
  {
    "label": "AddPendingLateJoinClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingLateJoinClient()"
  },
  {
    "label": "CancelPlayingViaLauncher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPlayingViaLauncher()"
  },
  {
    "label": "CancelPlayUsingLauncher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPlayUsingLauncher()"
  },
  {
    "label": "StartPlayUsingLauncherSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayUsingLauncherSession(FRequestPlaySessionParams& InRequestParams)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "DECLARE_DELEGATE(FPIEInstanceWindowSwitch)"
  },
  {
    "label": "SetPIEInstanceWindowSwitchDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPIEInstanceWindowSwitchDelegate(FPIEInstanceWindowSwitch PIEInstanceWindowSwitchDelegate)"
  },
  {
    "label": "ToggleBetweenPIEandSIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleBetweenPIEandSIE(bool bNewSession = false)"
  },
  {
    "label": "OnSwitchWorldForSlatePieWindow()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnSwitchWorldForSlatePieWindow(int32 WorldID, int32 WorldPIEInstance)"
  },
  {
    "label": "OnSwitchWorldsForPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSwitchWorldsForPIE(bool bSwitchToPieWorld, UWorld* OverrideWorld = nullptr)"
  },
  {
    "label": "OnSwitchWorldsForPIEInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSwitchWorldsForPIEInstance(int32 WorldPIEInstance)"
  },
  {
    "label": "EnableWorldSwitchCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableWorldSwitchCallbacks(bool bEnable)"
  },
  {
    "label": "OnScriptExecutionStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScriptExecutionStart(const struct FBlueprintContextTracker& ContextTracker, const UObject* ContextObject, const UFunction* ContextFunction)"
  },
  {
    "label": "OnScriptExecutionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScriptExecutionEnd(const struct FBlueprintContextTracker& ContextTracker)"
  },
  {
    "label": "GiveFocusToLastClientPIEViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GiveFocusToLastClientPIEViewport()"
  },
  {
    "label": "OnLoginPIEComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoginPIEComplete(int32 LocalUserNum, bool bWasSuccessful, const FString& ErrorString, FPieLoginStruct DataStruct)"
  },
  {
    "label": "OnLoginPIEComplete_Deferred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoginPIEComplete_Deferred(int32 LocalUserNum, bool bWasSuccessful, FString ErrorString, FPieLoginStruct DataStruct)"
  },
  {
    "label": "OnAllPIEInstancesStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllPIEInstancesStarted()"
  },
  {
    "label": "TransferEditorSelectionToPlayInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferEditorSelectionToPlayInstances(const bool bInSelectInstances)"
  },
  {
    "label": "GeneratePIEViewportWindow()",
    "kind": "Method",
    "detail": "Function (SPIEViewport>)",
    "insertText": "GeneratePIEViewportWindow(const FRequestPlaySessionParams& InSessionParams, int32 InViewportIndex, const FWorldContext& InWorldContext, EPlayNetMode InNetMode, UGameViewportClient* InViewportClient, FSlatePlayInEditorInfo& InSlateInfo)"
  },
  {
    "label": "StoreWindowSizeAndPositionForInstanceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreWindowSizeAndPositionForInstanceIndex(const int32 InInstanceIndex, const FIntPoint& InSize, const FIntPoint& InPosition)"
  },
  {
    "label": "GetWindowSizeAndPositionForInstanceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindowSizeAndPositionForInstanceIndex(ULevelEditorPlaySettings& InEditorPlaySettings, const int32 InInstanceIndex, const FWorldContext& InWorldContext, FIntPoint& OutSize, FIntPoint& OutPosition)"
  },
  {
    "label": "StartQueuedPlaySessionRequestImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartQueuedPlaySessionRequestImpl()"
  },
  {
    "label": "StartPlayInEditorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayInEditorSession(FRequestPlaySessionParams& InRequestParams)"
  },
  {
    "label": "CreateNewPlayInEditorInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewPlayInEditorInstance(FRequestPlaySessionParams &InRequestParams, const bool bInDedicatedInstance, const EPlayNetMode InNetMode)"
  },
  {
    "label": "SaveMapsForPlaySession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveMapsForPlaySession()"
  },
  {
    "label": "InvalidateAllViewportsAndHitProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllViewportsAndHitProxies()"
  },
  {
    "label": "InitializePortal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePortal()"
  },
  {
    "label": "CleanupPIEOnlineSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupPIEOnlineSessions(TArray<FName> OnlineIdentifiers)"
  },
  {
    "label": "HandleStageStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStageStarted(const FString& InStage, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleStageCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStageCompleted(const FString& InStage, double StageTime, bool bHasCode, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleLaunchCanceled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLaunchCanceled(double TotalTime, bool bHasCode, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleLaunchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLaunchCompleted(bool Succeeded, double TotalTime, int32 ErrorCode, bool bHasCode, TWeakPtr<SNotificationItem> NotificationItemPtr)"
  },
  {
    "label": "HandleOpenAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleOpenAsset(UObject* Asset)"
  },
  {
    "label": "OnAssetLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetLoaded( UObject* Asset )"
  },
  {
    "label": "OnAssetCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetCreated( UObject* Asset )"
  },
  {
    "label": "OnAssetPostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetPostCompile(const TArray<FAssetCompileData>& CompiledAssets)"
  },
  {
    "label": "RegisterTimecodeProviderCompiledDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTimecodeProviderCompiledDelegate()"
  },
  {
    "label": "RegisterCustomTimeStepCompiledDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomTimeStepCompiledDelegate()"
  },
  {
    "label": "HandleTimecodeProviderCompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTimecodeProviderCompiled(UBlueprint* InBlueprint)"
  },
  {
    "label": "HandleCustomTimeStepCompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCustomTimeStepCompiled(UBlueprint* InBlueprint)"
  },
  {
    "label": "InitializeNewlyCreatedInactiveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNewlyCreatedInactiveWorld(UWorld* World)"
  },
  {
    "label": "OnEffectivePreviewShaderPlatformChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEffectivePreviewShaderPlatformChange()"
  },
  {
    "label": "AutomationLoadMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutomationLoadMap(const FString& MapName, bool bForceReload, FString* OutError)"
  },
  {
    "label": "OnSceneMaterialsModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSceneMaterialsModified()"
  },
  {
    "label": "SetPreviewPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewPlatform(const FPreviewPlatformInfo& NewPreviewPlatform, bool bSaveSettings)"
  },
  {
    "label": "ToggleFeatureLevelPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFeatureLevelPreview()"
  },
  {
    "label": "LoadEditorFeatureLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadEditorFeatureLevel()"
  },
  {
    "label": "SaveEditorFeatureLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveEditorFeatureLevel()"
  },
  {
    "label": "IsEditorShaderPlatformEmulated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorShaderPlatformEmulated(UWorld* World)"
  },
  {
    "label": "IsOfflineShaderCompilerAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOfflineShaderCompilerAvailable(UWorld* World)"
  },
  {
    "label": "SplitActorLabel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitActorLabel(FString& InOutLabel, int32& OutIdx)"
  },
  {
    "label": "SetActorLabelUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorLabelUnique(AActor* Actor, const FString& NewActorLabel, const FCachedActorLabels* InExistingActorLabels = nullptr)"
  },
  {
    "label": "RenameExistingActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameExistingActor(AActor* Actor, const FString& NewActorLabel, bool bMakeUnique = false)"
  }
]