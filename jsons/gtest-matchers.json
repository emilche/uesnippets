[
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "FooMatcherMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FooMatcherMatcher"
  },
  {
    "label": "MatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatchResultListener"
  },
  {
    "label": "abstract",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "abstract"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "MatcherInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherInterface"
  },
  {
    "label": "AnyEq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyEq"
  },
  {
    "label": "AnyNe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyNe"
  },
  {
    "label": "AnyLt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyLt"
  },
  {
    "label": "AnyGt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyGt"
  },
  {
    "label": "AnyLe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyLe"
  },
  {
    "label": "AnyGe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyGe"
  },
  {
    "label": "DummyMatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DummyMatchResultListener"
  },
  {
    "label": "StreamMatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamMatchResultListener"
  },
  {
    "label": "SharedPayloadBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SharedPayloadBase"
  },
  {
    "label": "SharedPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SharedPayload"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MatcherBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherBase"
  },
  {
    "label": "VTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTable"
  },
  {
    "label": "ValuePolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValuePolicy"
  },
  {
    "label": "ValuePolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValuePolicy"
  },
  {
    "label": "ValuePolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValuePolicy"
  },
  {
    "label": "Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matcher"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "PolymorphicMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PolymorphicMatcher"
  },
  {
    "label": "MonomorphicImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MonomorphicImpl"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "ComparisonBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComparisonBase"
  },
  {
    "label": "EqMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EqMatcher"
  },
  {
    "label": "NeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NeMatcher"
  },
  {
    "label": "LtMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LtMatcher"
  },
  {
    "label": "GtMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GtMatcher"
  },
  {
    "label": "LeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeMatcher"
  },
  {
    "label": "GeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeMatcher"
  },
  {
    "label": "MatchesRegexMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatchesRegexMatcher"
  },
  {
    "label": "MatcheeStringType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcheeStringType"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchAndExplain(const T&, std::ostream*)"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeTo(std::ostream*)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeNegationTo(std::ostream*)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchAndExplain(x, &dummy)"
  },
  {
    "label": "listener()",
    "kind": "Method",
    "detail": "Function (StreamMatchResultListener)",
    "insertText": "listener(os)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (sometimes)",
    "insertText": "Matcher(T value)"
  },
  {
    "label": "Eq()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Eq(rhs)"
  }
]