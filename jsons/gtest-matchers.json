[
  {
    "label": "MatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatchResultListener"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "MatcherInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherInterface"
  },
  {
    "label": "AnyEq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyEq"
  },
  {
    "label": "AnyNe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyNe"
  },
  {
    "label": "AnyLt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyLt"
  },
  {
    "label": "AnyGt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyGt"
  },
  {
    "label": "AnyLe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyLe"
  },
  {
    "label": "AnyGe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyGe"
  },
  {
    "label": "DummyMatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DummyMatchResultListener"
  },
  {
    "label": "StreamMatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamMatchResultListener"
  },
  {
    "label": "SharedPayloadBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SharedPayloadBase"
  },
  {
    "label": "SharedPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SharedPayload"
  },
  {
    "label": "MatcherBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherBase"
  },
  {
    "label": "VTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTable"
  },
  {
    "label": "ValuePolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValuePolicy"
  },
  {
    "label": "Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "PolymorphicMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PolymorphicMatcher"
  },
  {
    "label": "MonomorphicImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MonomorphicImpl"
  },
  {
    "label": "ComparisonBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComparisonBase"
  },
  {
    "label": "EqMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EqMatcher"
  },
  {
    "label": "NeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NeMatcher"
  },
  {
    "label": "LtMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LtMatcher"
  },
  {
    "label": "GtMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GtMatcher"
  },
  {
    "label": "LeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeMatcher"
  },
  {
    "label": "GeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeMatcher"
  },
  {
    "label": "MatchesRegexMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatchesRegexMatcher"
  },
  {
    "label": "MatcheeStringType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcheeStringType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_ # include<atomic> # include<memory> # include<ostream> # include<string> # include<type_traits> # include \" gtest / gtest - printers . h \" # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - port . h \" # if)",
    "insertText": "defined(_MSC_VER) && _MSC_VER >= 1915 #define GTEST_MAYBE_5046_ 5046 #else #define GTEST_MAYBE_5046_ #endif GTEST_DISABLE_MSC_WARNINGS_PUSH_( 4251 GTEST_MAYBE_5046_)"
  },
  {
    "label": "MatchResultListener()",
    "kind": "Method",
    "detail": "Function (class MatchResultListener { public :)",
    "insertText": "MatchResultListener(::std::ostream* os) : stream_(os)"
  },
  {
    "label": "MatchResultListener()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MatchResultListener()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> MatchResultListener&)",
    "insertText": "operator(const T& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MatchResultListener&)",
    "insertText": "operator(const MatchResultListener&)"
  },
  {
    "label": "MatcherDescriberInterface()",
    "kind": "Method",
    "detail": "Function (} class GTEST_API_ MatcherDescriberInterface { public : ~)",
    "insertText": "MatcherDescriberInterface()"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DescribeTo(::std::ostream* os)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeNegationTo(::std::ostream* os)"
  },
  {
    "label": "not()",
    "kind": "Method",
    "detail": "Function (* os<<\")",
    "insertText": "not(\"; DescribeTo(os); *os << \")"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class MatcherInterface : public MatcherDescriberInterface { public : bool)",
    "insertText": "MatchAndExplain(T x, MatchResultListener* listener)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { struct AnyEq { template<A,B> bool)",
    "insertText": "operator()(const A& a, const B& b)"
  },
  {
    "label": "DummyMatchResultListener()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "DummyMatchResultListener(const DummyMatchResultListener&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DummyMatchResultListener&)",
    "insertText": "operator(const DummyMatchResultListener&)"
  },
  {
    "label": "StreamMatchResultListener()",
    "kind": "Method",
    "detail": "Function (} ; class StreamMatchResultListener : public MatchResultListener { public :)",
    "insertText": "StreamMatchResultListener(::std::ostream* os) : MatchResultListener(os)"
  },
  {
    "label": "StreamMatchResultListener()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "StreamMatchResultListener(const StreamMatchResultListener&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamMatchResultListener&)",
    "insertText": "operator(const StreamMatchResultListener&)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} ; struct SharedPayloadBase { std::atomic<int> ref { 1 } ; void)",
    "insertText": "Ref()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (ref .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Unref()"
  },
  {
    "label": "SharedPayload()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct SharedPayload : SharedPayloadBase {)",
    "insertText": "SharedPayload(const T& v) : value(v)"
  },
  {
    "label": "SharedPayload()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SharedPayload(T&& v) : value(std::move(v))"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy(SharedPayloadBase* shared)"
  },
  {
    "label": "SharedPayload()",
    "kind": "Method",
    "detail": "Function (delete static_cast<)",
    "insertText": "SharedPayload(shared)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} T value ; } ; template<T> class MatcherBase : private MatcherDescriberInterface { public : bool)",
    "insertText": "MatchAndExplain(const T& x, MatchResultListener* listener)"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(vtable_ != nullptr)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(const T& x)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (DummyMatchResultListener dummy ; return)",
    "insertText": "MatchAndExplain(x, &dummy)"
  },
  {
    "label": "describe()",
    "kind": "Method",
    "detail": "Function (vtable_ ->)",
    "insertText": "describe(*this, os, false)"
  },
  {
    "label": "describe()",
    "kind": "Method",
    "detail": "Function (vtable_ ->)",
    "insertText": "describe(*this, os, true)"
  },
  {
    "label": "ExplainMatchResultTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExplainMatchResultTo(const T& x, ::std::ostream* os)"
  },
  {
    "label": "listener()",
    "kind": "Method",
    "detail": "Function (StreamMatchResultListener)",
    "insertText": "listener(os)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchAndExplain(x, &listener)"
  },
  {
    "label": "GetDescriber()",
    "kind": "Method",
    "detail": "Function (} const MatcherDescriberInterface*)",
    "insertText": "GetDescriber()"
  },
  {
    "label": "MatcherBase()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "MatcherBase() : vtable_(nullptr), buffer_()"
  },
  {
    "label": "MatcherBase()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "MatcherBase(const MatcherInterface<U>* impl) : vtable_(nullptr), buffer_()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(impl)"
  },
  {
    "label": "MatcherBase()",
    "kind": "Method",
    "detail": "Function (} template<M,= std::remove_reference<M>::type::is_gtest_matcher>)",
    "insertText": "MatcherBase(M&& m) : vtable_(nullptr), buffer_()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(std::forward<M>(m))"
  },
  {
    "label": "MatcherBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MatcherBase(const MatcherBase& other) : vtable_(other.vtable_), buffer_(other.buffer_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} MatcherBase&)",
    "insertText": "operator(const MatcherBase& other)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (vtable_ = other . vtable_ ; buffer_ = other . buffer_ ;)",
    "insertText": "if(IsShared()) buffer_.shared->Ref()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (other . vtable_ = nullptr ; } MatcherBase&)",
    "insertText": "operator(MatcherBase&& other)"
  },
  {
    "label": "MatcherBase()",
    "kind": "Method",
    "detail": "Function (vtable_ = other . vtable_ ; buffer_ = other . buffer_ ; other . vtable_ = nullptr ; return* this ; } ~)",
    "insertText": "MatcherBase()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} private : struct VTable {)",
    "insertText": "bool(*match_and_explain)(const MatcherBase&, const T&, MatchResultListener*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*describe)(const MatcherBase&, std::ostream*, bool negation)"
  },
  {
    "label": "MatcherDescriberInterface()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "MatcherDescriberInterface(*get_describer)(const MatcherBase&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*shared_destroy)(SharedPayloadBase*)"
  },
  {
    "label": "IsShared()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsShared()"
  },
  {
    "label": "MatchAndExplainImpl()",
    "kind": "Method",
    "detail": "Function (} template<P> auto)",
    "insertText": "MatchAndExplainImpl(const MatcherBase& m, const T& value, MatchResultListener* listener) -> decltype(P::Get(m).MatchAndExplain(value, listener))"
  },
  {
    "label": "DescribeImpl()",
    "kind": "Method",
    "detail": "Function (} template<P> void)",
    "insertText": "DescribeImpl(const MatcherBase& m, std::ostream* os, bool negation)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(m).DescribeNegationTo(os)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Get(m).DescribeTo(os)"
  },
  {
    "label": "GetDescriberImpl()",
    "kind": "Method",
    "detail": "Function (} } template<P> const MatcherDescriberInterface*)",
    "insertText": "GetDescriberImpl(const MatcherBase& m)"
  },
  {
    "label": "GetVTable()",
    "kind": "Method",
    "detail": "Function (} template<P> const VTable*)",
    "insertText": "GetVTable()"
  },
  {
    "label": "shared_destroy()",
    "kind": "Method",
    "detail": "Function (vtable_ ->)",
    "insertText": "shared_destroy(buffer_.shared)"
  },
  {
    "label": "IsInlined()",
    "kind": "Method",
    "detail": "Function (} } template<M> bool)",
    "insertText": "IsInlined()"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (} template<M,bool = MatcherBase::IsInlined<)",
    "insertText": "M()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const M&)",
    "insertText": "Get(const MatcherBase& m)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (const M* ptr = static_cast<const)",
    "insertText": "M(static_cast<const void*>(&m.buffer_))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<void*>(&m.buffer_)) M(impl)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<Arg> void)",
    "insertText": "Init(MatcherBase& m, Arg&& arg)"
  },
  {
    "label": "Shared()",
    "kind": "Method",
    "detail": "Function (m . buffer_ . shared = new)",
    "insertText": "Shared(std::forward<Arg>(arg))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(MatcherBase& m, M* impl)"
  },
  {
    "label": "Shared()",
    "kind": "Method",
    "detail": "Function (m . buffer_ . shared = new)",
    "insertText": "Shared(std::unique_ptr<M>(impl))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} auto shared_destroy =& Shared::Destroy ; } ; template<M> void)",
    "insertText": "Init(M&& m)"
  },
  {
    "label": "Policy()",
    "kind": "Method",
    "detail": "Function (using MM = std::decay<M>::type ; using Policy = ValuePolicy<MM> ; vtable_ = GetVTable<)",
    "insertText": "Policy()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, std::forward<M>(m))"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (} const VTable* vtable_ ; Buffer buffer_ ; } ; } template<T> class Matcher : public internal::MatcherBase<T> { public :)",
    "insertText": "Matcher()"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const MatcherInterface<const T&>* impl) : internal::MatcherBase<T>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "Matcher(const MatcherInterface<U>* impl, typename std::enable_if<!std::is_same<U, const U&>::value>::type* = nullptr) : internal::MatcherBase<T>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (} template<M,= std::remove_reference<M>::type::is_gtest_matcher>)",
    "insertText": "Matcher(M&& m) : internal::MatcherBase<T>(std::forward<M>(m))"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(T value)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const MatcherInterface<const std::string&>* impl) : internal::MatcherBase<const std::string&>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (} template<M,= std::remove_reference<M>::type::is_gtest_matcher>)",
    "insertText": "Matcher(M&& m) : internal::MatcherBase<const std::string&>(std::forward<M>(m))"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const std::string& s)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Matcher(const char* s)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const MatcherInterface<const std::string&>* impl) : internal::MatcherBase<std::string>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const MatcherInterface<std::string>* impl) : internal::MatcherBase<std::string>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (} template<M,= std::remove_reference<M>::type::is_gtest_matcher>)",
    "insertText": "Matcher(M&& m) : internal::MatcherBase<std::string>(std::forward<M>(m))"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const MatcherInterface<const internal::StringView&>* impl) : internal::MatcherBase<const internal::StringView&>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (} template<M,= std::remove_reference<M>::type::is_gtest_matcher>)",
    "insertText": "Matcher(M&& m) : internal::MatcherBase<const internal::StringView&>(std::forward<M>(m))"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Matcher(internal::StringView s)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const MatcherInterface<const internal::StringView&>* impl) : internal::MatcherBase<internal::StringView>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Matcher(const MatcherInterface<internal::StringView>* impl) : internal::MatcherBase<internal::StringView>(impl)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (} template<M,= std::remove_reference<M>::type::is_gtest_matcher>)",
    "insertText": "Matcher(M&& m) : internal::MatcherBase<internal::StringView>(std::forward<M>(m))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; # endif template<T> std::ostream&)",
    "insertText": "operator(std::ostream& os, const Matcher<T>& matcher)"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (matcher .)",
    "insertText": "DescribeTo(&os)"
  },
  {
    "label": "mutable_impl()",
    "kind": "Method",
    "detail": "Function (} Impl&)",
    "insertText": "mutable_impl()"
  },
  {
    "label": "MonomorphicImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<T> class MonomorphicImpl : public MatcherInterface<T> { public :)",
    "insertText": "MonomorphicImpl(const Impl& impl) : impl_(impl)"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "DescribeTo(os)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "DescribeNegationTo(os)"
  },
  {
    "label": "MakeMatcher()",
    "kind": "Method",
    "detail": "Function (} private : const Impl impl_ ; } ; Impl impl_ ; } ; template<T> Matcher<T>)",
    "insertText": "MakeMatcher(const MatcherInterface<T>* impl)"
  },
  {
    "label": "MakePolymorphicMatcher()",
    "kind": "Method",
    "detail": "Function (} template<class Impl> PolymorphicMatcher<Impl>)",
    "insertText": "MakePolymorphicMatcher(const Impl& impl)"
  },
  {
    "label": "ComparisonBase()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<D,Rhs,Op> class ComparisonBase { public :)",
    "insertText": "ComparisonBase(const Rhs& rhs) : rhs_(rhs)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} using is_gtest_matcher = void ; template<Lhs> bool)",
    "insertText": "MatchAndExplain(const Lhs& lhs, std::ostream*)"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DescribeTo(std::ostream* os)"
  },
  {
    "label": "Desc()",
    "kind": "Method",
    "detail": "Function (* os<<)",
    "insertText": "Desc()"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniversalPrint(Unwrap(rhs_), os)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DescribeNegationTo(std::ostream* os)"
  },
  {
    "label": "NegatedDesc()",
    "kind": "Method",
    "detail": "Function (* os<<)",
    "insertText": "NegatedDesc()"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} private : template<T> const T&)",
    "insertText": "Unwrap(const T& v)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} # if GTEST_INTERNAL_HAS_STRING_VIEW bool)",
    "insertText": "MatchAndExplain(const internal::StringView& s, MatchResultListener* listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} # endif template<CharType> bool)",
    "insertText": "MatchAndExplain(CharType* s, MatchResultListener* listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} template<class MatcheeStringType> bool)",
    "insertText": "MatchAndExplain(const MatcheeStringType& s, MatchResultListener*)"
  },
  {
    "label": "s2()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "s2(s)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os(full_match_ ? \"matches\" : \"contains\")"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (UniversalPrinter<std::string)",
    "insertText": "Print(regex_->pattern(), os)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (* os<<\" doesn ')",
    "insertText": "t(full_match_ ? \"match\" : \"contain\")"
  },
  {
    "label": "MatchesRegex()",
    "kind": "Method",
    "detail": "Function (} private : const std::shared_ptr<const RE> regex_ ; const bool full_match_ ; } ; } PolymorphicMatcher<internal::MatchesRegexMatcher>)",
    "insertText": "MatchesRegex(const internal::RE* regex)"
  },
  {
    "label": "MatchesRegex()",
    "kind": "Method",
    "detail": "Function (} template<T = std::string> PolymorphicMatcher<internal::MatchesRegexMatcher>)",
    "insertText": "MatchesRegex(const internal::StringLike<T>& regex)"
  },
  {
    "label": "ContainsRegex()",
    "kind": "Method",
    "detail": "Function (} PolymorphicMatcher<internal::MatchesRegexMatcher>)",
    "insertText": "ContainsRegex(const internal::RE* regex)"
  },
  {
    "label": "ContainsRegex()",
    "kind": "Method",
    "detail": "Function (} template<T = std::string> PolymorphicMatcher<internal::MatchesRegexMatcher>)",
    "insertText": "ContainsRegex(const internal::StringLike<T>& regex)"
  },
  {
    "label": "Eq()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::EqMatcher<T>)",
    "insertText": "Eq(T x)"
  },
  {
    "label": "Eq()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Eq(value)"
  },
  {
    "label": "TypedEq()",
    "kind": "Method",
    "detail": "Function (} template<Lhs,Rhs> Matcher<Lhs>)",
    "insertText": "TypedEq(const Rhs& rhs)"
  },
  {
    "label": "Ge()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> internal::GeMatcher<Rhs>)",
    "insertText": "Ge(Rhs x)"
  },
  {
    "label": "Gt()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> internal::GtMatcher<Rhs>)",
    "insertText": "Gt(Rhs x)"
  },
  {
    "label": "Le()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> internal::LeMatcher<Rhs>)",
    "insertText": "Le(Rhs x)"
  },
  {
    "label": "Lt()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> internal::LtMatcher<Rhs>)",
    "insertText": "Lt(Rhs x)"
  },
  {
    "label": "Ne()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> internal::NeMatcher<Rhs>)",
    "insertText": "Ne(Rhs x)"
  }
]