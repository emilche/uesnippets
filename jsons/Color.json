[
  {
    "label": "NVMATH_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NVMATH_CLASS"
  },
  {
    "label": "Color64()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_MATH_COLOR_H # define NV_MATH_COLOR_H # include<nvcore / Debug . h> # include<nvmath / Vector . h> namespace nv { class NVMATH_CLASS Color64 { public :)",
    "insertText": "Color64()"
  },
  {
    "label": "Color64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color64(const Color64 & c) : u(c.u)"
  },
  {
    "label": "Color64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color64(uint16 R, uint16 G, uint16 B, uint16 A)"
  },
  {
    "label": "setRGBA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRGBA(R, G, B, A)"
  },
  {
    "label": "Color64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color64(uint64 U) : u(U)"
  },
  {
    "label": "setRGBA()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRGBA(uint16 R, uint16 G, uint16 B, uint16 A)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (r = R ; g = G ; b = B ; a = A ; } operator)",
    "insertText": "uint64()"
  },
  {
    "label": "Color32()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color32(const Color32 & c) : u(c.u)"
  },
  {
    "label": "Color32()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color32(uint8 R, uint8 G, uint8 B)"
  },
  {
    "label": "setRGBA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRGBA(R, G, B, 0xFF)"
  },
  {
    "label": "Color32()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color32(uint8 R, uint8 G, uint8 B, uint8 A)"
  },
  {
    "label": "Color32()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color32(uint32 U) : u(U)"
  },
  {
    "label": "setRGBA()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRGBA(uint8 R, uint8 G, uint8 B, uint8 A)"
  },
  {
    "label": "setBGRA()",
    "kind": "Method",
    "detail": "Function (r = R ; g = G ; b = B ; a = A ; } void)",
    "insertText": "setBGRA(uint8 B, uint8 G, uint8 R, uint8 A = 0xFF)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (r = R ; g = G ; b = B ; a = A ; } operator)",
    "insertText": "uint32()"
  },
  {
    "label": "Color16()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color16(const Color16 & c) : u(c.u)"
  },
  {
    "label": "Color16()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Color16(uint16 U) : u(U)"
  },
  {
    "label": "colorClamp()",
    "kind": "Method",
    "detail": "Function (} union { struct { # if NV_LITTLE_ENDIAN uint16 b : 5 ; uint16 g : 6 ; uint16 r : 5 ; # else uint16 r : 5 ; uint16 g : 6 ; uint16 b : 5 ; # endif } ; uint16 u ; } ; } ; Vector3)",
    "insertText": "colorClamp(Vector3::Arg c)"
  },
  {
    "label": "colorNormalize()",
    "kind": "Method",
    "detail": "Function (} Vector3)",
    "insertText": "colorNormalize(Vector3::Arg c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float scale = 1 . 0 f ;)",
    "insertText": "if(c.x() > scale) scale = c.x()"
  },
  {
    "label": "toColor32()",
    "kind": "Method",
    "detail": "Function (Color16 color ; color . r = c . r>> 3 ; color . g = c . g>> 2 ; color . b = c . b>> 3 ; return color ; } Color32)",
    "insertText": "toColor32(Color16 c)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (Color32 color ; color .)",
    "insertText": "b(c.b << 3) | (c.b >> 2)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (color .)",
    "insertText": "g(c.g << 2) | (c.g >> 4)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (color .)",
    "insertText": "r(c.r << 3) | (c.r >> 2)"
  },
  {
    "label": "toVector4()",
    "kind": "Method",
    "detail": "Function (color . a = 0 xFF ; return color ; } Vector4)",
    "insertText": "toVector4(Color32 c)"
  },
  {
    "label": "Vector4()",
    "kind": "Method",
    "detail": "Function (const float scale = 1 . 0 f / 2 5 5 . 0 f ; return)",
    "insertText": "Vector4(c.r * scale, c.g * scale, c.b * scale, c.a * scale)"
  }
]