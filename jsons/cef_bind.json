[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_BIND_H_ # define CEF_INCLUDE_BASE_CEF_BIND_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES) #include \"base/bind.h\" #else #include <functional> #include <memory> #include <type_traits> #include <utility> #include \"include/base/cef_build.h\" #include \"include/base/cef_compiler_specific.h\" #include \"include/base/cef_template_util.h\" #include \"include/base/internal/cef_bind_internal.h\" #if defined(OS_APPLE) && !HAS_FEATURE(objc_arc)"
  },
  {
    "label": "BindOnce()",
    "kind": "Method",
    "detail": "Function (template<Functor,. . . Args> OnceCallback<internal::MakeUnboundRunType<Functor,Args . . .>>)",
    "insertText": "BindOnce(Functor&& functor, Args&&... args)"
  },
  {
    "label": "BindRepeating()",
    "kind": "Method",
    "detail": "Function (} template<Functor,. . . Args> RepeatingCallback<internal::MakeUnboundRunType<Functor,Args . . .>>)",
    "insertText": "BindRepeating(Functor&& functor, Args&&... args)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} template<Functor,. . . Args> Callback<internal::MakeUnboundRunType<Functor,Args . . .>>)",
    "insertText": "Bind(Functor&& functor, Args&&... args)"
  },
  {
    "label": "BindOnce()",
    "kind": "Method",
    "detail": "Function (} template<Signature> OnceCallback<Signature>)",
    "insertText": "BindOnce(OnceCallback<Signature> callback)"
  },
  {
    "label": "RetainedRef()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::RetainedRefWrapper<T>)",
    "insertText": "RetainedRef(T* o)"
  },
  {
    "label": "RetainedRef()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::RetainedRefWrapper<T>)",
    "insertText": "RetainedRef(scoped_refptr<T> o)"
  },
  {
    "label": "Owned()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::OwnedWrapper<T>)",
    "insertText": "Owned(T* o)"
  },
  {
    "label": "Owned()",
    "kind": "Method",
    "detail": "Function (} template<T,Deleter> internal::OwnedWrapper<T,Deleter>)",
    "insertText": "Owned(std::unique_ptr<T, Deleter>&& ptr)"
  },
  {
    "label": "OwnedRef()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::OwnedRefWrapper<std::decay_t<T>>)",
    "insertText": "OwnedRef(T&& t)"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (} template<T,std::enable_if_t<! std::is_lvalue_reference<T>::value>* = nullptr> internal::PassedWrapper<T>)",
    "insertText": "Passed(T&& scoper)"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::PassedWrapper<T>)",
    "insertText": "Passed(T* scoper)"
  },
  {
    "label": "IgnoreResult()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::IgnoreResultHelper<T>)",
    "insertText": "IgnoreResult(T data)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(OS_APPLE) && !HAS_FEATURE(objc_arc) template <typename R, typename... Args> base::mac::ScopedBlock<R (^)(Args...)> RetainBlock(R (^block)(Args...))"
  }
]