[
  {
    "label": "x86_rtm_rw_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "x86_rtm_rw_mutex"
  },
  {
    "label": "spin_rw_mutex_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "spin_rw_mutex_v3"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "internal_acquire_writer()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_spin_rw_mutex_H # define __TBB_spin_rw_mutex_H # include \" tbb_stddef . h \" # include \" tbb_machine . h \" # include \" tbb_profiling . h \" # include \" internal / _mutex_padding . h \" namespace tbb { # if __TBB_TSX_AVAILABLE namespace interface8 { namespace internal { class x86_rtm_rw_mutex ; } } # endif class spin_rw_mutex_v3 ; typedef spin_rw_mutex_v3 spin_rw_mutex ; class spin_rw_mutex_v3 : internal::mutex_copy_deprecated_and_disabled { bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_acquire_writer()"
  },
  {
    "label": "internal_release_writer()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_release_writer()"
  },
  {
    "label": "internal_acquire_reader()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_acquire_reader()"
  },
  {
    "label": "internal_upgrade()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_upgrade()"
  },
  {
    "label": "internal_downgrade()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_downgrade()"
  },
  {
    "label": "internal_release_reader()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_release_reader()"
  },
  {
    "label": "internal_try_acquire_writer()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_try_acquire_writer()"
  },
  {
    "label": "internal_try_acquire_reader()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_try_acquire_reader()"
  },
  {
    "label": "spin_rw_mutex_v3()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "spin_rw_mutex_v3() : state(0)"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS)",
    "insertText": "internal_construct()"
  },
  {
    "label": "spin_rw_mutex_v3()",
    "kind": "Method",
    "detail": "Function (# endif } # if TBB_USE_ASSERT ~)",
    "insertText": "spin_rw_mutex_v3()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!state, \"destruction of an acquired mutex\")"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ; # endif class scoped_lock : internal::no_copy { # if __TBB_TSX_AVAILABLE class tbb::interface8::internal::x86_rtm_rw_mutex ; # endif public :)",
    "insertText": "scoped_lock() : mutex(NULL), is_writer(false)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(spin_rw_mutex& m, bool write = true ) : mutex(NULL)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "acquire(m, write)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "acquire(spin_rw_mutex& m, bool write = true)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!mutex, \"holding mutex already\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (is_writer = write ; mutex =& m ;)",
    "insertText": "if(write ) mutex->internal_acquire_writer()"
  },
  {
    "label": "upgrade_to_writer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "upgrade_to_writer()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(mutex, \"mutex is not acquired\")"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "release()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (spin_rw_mutex* m = mutex ; mutex = NULL ; # if TBB_USE_THREADING_TOOLS | | TBB_USE_ASSERT)",
    "insertText": "if(is_writer ) m->internal_release_writer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(is_writer ) __TBB_AtomicAND( &m->state, READERS)"
  },
  {
    "label": "downgrade_to_reader()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "downgrade_to_reader()"
  },
  {
    "label": "__TBB_FetchAndAddW()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__TBB_FetchAndAddW(&mutex->state, ((intptr_t)ONE_READER-WRITER))"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (# endif is_writer = false ; return true ; } bool)",
    "insertText": "try_acquire(spin_rw_mutex& m, bool write = true)"
  },
  {
    "label": "internal_try_acquire_writer()",
    "kind": "Method",
    "detail": "Function (bool result ; is_writer = write ; result = write ? m .)",
    "insertText": "internal_try_acquire_writer() : m.internal_try_acquire_reader()"
  },
  {
    "label": "try_lock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_lock()"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "unlock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS | | TBB_USE_ASSERT)",
    "insertText": "if(state&WRITER ) internal_release_writer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(state&WRITER ) __TBB_AtomicAND( &state, READERS)"
  },
  {
    "label": "lock_read()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "lock_read()"
  },
  {
    "label": "try_lock_read()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_lock_read()"
  },
  {
    "label": "READERS()",
    "kind": "Method",
    "detail": "Function (} protected : typedef intptr_t state_t ; const state_t WRITER = 1 ; const state_t WRITER_PENDING = 2 ; const state_t)",
    "insertText": "READERS(WRITER | WRITER_PENDING)"
  },
  {
    "label": "__TBB_DEFINE_PROFILING_SET_NAME()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "__TBB_DEFINE_PROFILING_SET_NAME(spin_rw_mutex)"
  }
]