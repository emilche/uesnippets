[
  {
    "label": "FOverlappingThresholds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingThresholds"
  },
  {
    "label": "FOverlappingThresholds()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FOverlappingThresholds { public :)",
    "insertText": "FOverlappingThresholds() : ThresholdPosition(UE_THRESH_POINTS_ARE_SAME) , ThresholdTangentNormal(UE_THRESH_NORMALS_ARE_SAME) , ThresholdUV(UE_THRESH_UVS_ARE_SAME) , MorphThresholdPosition(UE_THRESH_POINTS_ARE_NEAR)"
  },
  {
    "label": "PointsEqual()",
    "kind": "Method",
    "detail": "Function (} float ThresholdPosition ; float ThresholdTangentNormal ; float ThresholdUV ; float MorphThresholdPosition ; } ; bool)",
    "insertText": "PointsEqual(const FVector3f& V1,const FVector3f& V2, bool bUseEpsilonCompare = true)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const float Epsilon = bUseEpsilonCompare ? UE_THRESH_POINTS_ARE_SAME : 0 . 0 f ; return)",
    "insertText": "Abs(V1.X - V2.X) <= Epsilon && FMath::Abs(V1.Y - V2.Y) <= Epsilon && FMath::Abs(V1.Z - V2.Z)"
  },
  {
    "label": "PointsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PointsEqual(const FVector3f& V1, const FVector3f& V2, const FOverlappingThresholds& OverlappingThreshold)"
  },
  {
    "label": "NormalsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NormalsEqual(const FVector3f& V1,const FVector3f& V2)"
  },
  {
    "label": "UVsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UVsEqual(const FVector2f& V1, const FVector2f& V2)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const float Epsilon = 1 . 0 f / 1 0 2 4 . 0 f ; return)",
    "insertText": "Abs(V1.X - V2.X) <= Epsilon && FMath::Abs(V1.Y - V2.Y)"
  },
  {
    "label": "NormalsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NormalsEqual(const FVector3f& V1,const FVector3f& V2, const FOverlappingThresholds& OverlappingThreshold)"
  },
  {
    "label": "UVsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UVsEqual(const FVector2f& V1, const FVector2f& V2, const FOverlappingThresholds& OverlappingThreshold)"
  }
]