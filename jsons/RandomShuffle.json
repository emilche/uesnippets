[
  {
    "label": "RandomShuffle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMathUtility . h \" # include \" Templates / UnrealTemplate . h \" namespace Algo { template<RangeType> void)",
    "insertText": "RandomShuffle(RangeType& Range)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto Data =)",
    "insertText": "GetData(Range)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using SizeType =)",
    "insertText": "decltype(GetNum(Range))"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (const SizeType Num =)",
    "insertText": "GetNum(Range)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const SizeType RandomIndex =)",
    "insertText": "Index(SizeType)FMath::RandHelper64(Num - Index)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Data[Index], Data[RandomIndex])"
  }
]