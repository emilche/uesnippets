[
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMATTER_INTEGER_H # define _LIBCPP___FORMAT_FORMATTER_INTEGER_H # include<__availability> # include<__concepts / arithmetic . h> # include<__config> # include<__format / format_fwd . h> # include<__format / format_parse_context . h> # include<__format / formatter . h> # include<__format / formatter_integral . h> # include<__format / formatter_output . h> # include<__format / parser_std_format_spec . h> # include<__type_traits / make_32_64_or_128_bit . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "parse(basic_format_parse_context<_CharT>& __parse_ctx) -> decltype(__parse_ctx.begin())"
  },
  {
    "label": "__parse()",
    "kind": "Method",
    "detail": "Function (auto __result = __parser_ .)",
    "insertText": "__parse(__parse_ctx, __format_spec::__fields_integral)"
  },
  {
    "label": "__process_parsed_integer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__process_parsed_integer(__parser_)"
  },
  {
    "label": "__get_parsed_std_specifications()",
    "kind": "Method",
    "detail": "Function (__format_spec::__parsed_specifications<_CharT> __specs = __parser_ .)",
    "insertText": "__get_parsed_std_specifications(__ctx)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using _Type = __make_32_64_or_128_bit_t<_Tp> ;)",
    "insertText": "static_assert(!is_same<_Type, void>::value, \"unsupported integral type used in __formatter_integer::__format\")"
  }
]