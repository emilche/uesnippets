[
  {
    "label": "FbxStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxStream"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMode"
  },
  {
    "label": "ESeekPos",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESeekPos"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FbxFile()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_BASE_FILE_H_ # define _FBXSDK_CORE_BASE_FILE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxstring . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxStream ; class FBXSDK_DLL FbxFile { public : enum EMode { eNone,eReadOnly,eReadWrite,eCreateWriteOnly,eCreateReadWrite,eCreateAppend } ; enum ESeekPos { eBegin,eCurrent,eEnd } ;)",
    "insertText": "FbxFile()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const char* pFileName_UTF8, const EMode pMode=eCreateReadWrite, const bool pBinary=true)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(FbxStream* pStream, void* pStreamData, const char* pMode)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Close()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(const FbxInt64 pOffset, const ESeekPos pSeekPos=eBegin)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (FbxInt64)",
    "insertText": "Tell()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Read(void* pDstBuf, const size_t pSize)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "ReadString(char* pDstBuf, const size_t pDstSize, bool pStopAtFirstWhiteSpace=false)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Write(const void* pSrcBuf, const size_t pSize)"
  },
  {
    "label": "WriteFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFormat(const char* pFormat, ...)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Truncate(const FbxInt64 pSize)"
  },
  {
    "label": "EndOfFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndOfFile()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (FbxInt64)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetMemoryFileInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMemoryFileInfo(void** pMemPtr, size_t& pSize)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "IsStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStream()"
  },
  {
    "label": "GetFilePathName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFilePathName()"
  },
  {
    "label": "GetFileMode()",
    "kind": "Method",
    "detail": "Function (EMode)",
    "insertText": "GetFileMode()"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLastError()"
  },
  {
    "label": "ClearError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearError()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (protected : FILE* mFilePtr ; FbxStream* mStreamPtr ; bool mIsOpen ; bool mIsStream ; EMode mMode ; FbxString mFileName ; } ; class FBXSDK_DLL FbxFileUtils { public : bool)",
    "insertText": "Delete(const char* pFileName_UTF8)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename(const char* pFileName_UTF8, const char* pNewName_UTF8)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Copy(const char* pDestination_UTF8, const char* pSource_UTF8)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (FbxInt64)",
    "insertText": "Size(const char* pFilePath_UTF8)"
  },
  {
    "label": "Exist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exist(const char* pFilePath_UTF8)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(const char* pFilePath_UTF8)"
  },
  {
    "label": "GetLastDate()",
    "kind": "Method",
    "detail": "Function (FbxLong)",
    "insertText": "GetLastDate(const char* pPath_UTF8)"
  },
  {
    "label": "SetLastDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLastDate(const char* pPath_UTF8, FbxLong pTime)"
  },
  {
    "label": "FGets()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "FGets(char* pStr, int pSize, FILE* pStream)"
  },
  {
    "label": "FbxSwab()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> const T)",
    "insertText": "FbxSwab(const T x)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "t((FbxUInt8*)&x)"
  }
]