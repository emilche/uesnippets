[
  {
    "label": "FTimeWarpTrackModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeWarpTrackModel"
  },
  {
    "label": "FTimeWarpTrackExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeWarpTrackExtension"
  },
  {
    "label": "UMovieSceneTimeWarpGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTimeWarpGetter"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "FTimeWarpTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeWarpTrackEditor"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" KeyframeTrackEditor . h \" # include \" Tracks / MovieSceneTimeWarpTrack . h \" # include \" MVVM / ViewModels / TrackModel . h \" # include \" MVVM / Extensions / DynamicExtensionContainer . h \" # include \" MVVM / Extensions / ITimeDomainExtension . h \" namespace UE::Sequencer { struct FTimeWarpTrackModel : FTrackModel,ITimeDomainExtension {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE_API(MOVIESCENETOOLS_API, FTimeWarpTrackModel, FTrackModel, ITimeDomainExtension) FTimeWarpTrackModel(UMovieSceneTimeWarpTrack* TimeWarpTrack) : FTrackModel(TimeWarpTrack)"
  },
  {
    "label": "ShouldAnchorToTop()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldAnchorToTop()"
  },
  {
    "label": "GetDomain()",
    "kind": "Method",
    "detail": "Function (ETimeDomain)",
    "insertText": "GetDomain()"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID_API()",
    "kind": "Method",
    "detail": "Function (} ; class FTimeWarpTrackExtension : public IDynamicExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID_API(MOVIESCENETOOLS_API, FTimeWarpTrackExtension) MOVIESCENETOOLS_API const FTimeWarpTrackModel* GetActiveTimeWarpTrack()"
  },
  {
    "label": "FTimeWarpTrackEditor()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakViewModelPtr<FTimeWarpTrackModel>> WeakTimeWarpModels ; } ; } class UMovieSceneTimeWarpGetter ; template<T> class TSubclassOf ; class FTimeWarpTrackEditor : public FKeyframeTrackEditor<UMovieSceneTimeWarpTrack> { public :)",
    "insertText": "FTimeWarpTrackEditor(TSharedRef<ISequencer> InSequencer) : FKeyframeTrackEditor<UMovieSceneTimeWarpTrack>(InSequencer)"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "CreateTrackModel()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<UE::Sequencer::FTrackModel>)",
    "insertText": "CreateTrackModel(UMovieSceneTrack* Track)"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ProcessKeyOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessKeyOperation(FFrameNumber InKeyTime, const UE::Sequencer::FKeyOperation& Operation, ISequencer& InSequencer)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "HandleAddTimeWarpTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddTimeWarpTrack(TSubclassOf<UMovieSceneTimeWarpGetter> ClassType)"
  }
]