[
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMAT_STRING_H # define _LIBCPP___FORMAT_FORMAT_STRING_H # include<__assert> # include<__config> # include<__format / format_error . h> # include<cstddef> # include<cstdint> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__parse_number()",
    "kind": "Method",
    "detail": "Function (template<class _CharT> struct _LIBCPP_TEMPLATE_VIS __parse_number_result { const _CharT* __ptr ; uint32_t __value ; } ; template<class _CharT> _LIBCPP_HIDE_FROM_ABI __parse_number_result<_CharT>)",
    "insertText": "__parse_number(const _CharT* __begin, const _CharT* __end)"
  },
  {
    "label": "__parse_zero()",
    "kind": "Method",
    "detail": "Function (uint32_t __number_max = INT32_MAX ; namespace __detail { template<class _CharT> _LIBCPP_HIDE_FROM_ABI __parse_number_result<_CharT>)",
    "insertText": "__parse_zero(const _CharT* __begin, const _CharT*, auto& __parse_ctx)"
  },
  {
    "label": "check_arg_id()",
    "kind": "Method",
    "detail": "Function (__parse_ctx .)",
    "insertText": "check_arg_id(0)"
  },
  {
    "label": "next_arg_id()",
    "kind": "Method",
    "detail": "Function (size_t __value = __parse_ctx .)",
    "insertText": "next_arg_id()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__value <= __number_max, \"Compilers don't support this number of arguments\")"
  },
  {
    "label": "__parse_manual()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT> _LIBCPP_HIDE_FROM_ABI __parse_number_result<_CharT>)",
    "insertText": "__parse_manual(const _CharT* __begin, const _CharT* __end, auto& __parse_ctx)"
  },
  {
    "label": "__parse_number()",
    "kind": "Method",
    "detail": "Function (__parse_number_result<_CharT> __r =)",
    "insertText": "__parse_number(__begin, __end)"
  },
  {
    "label": "check_arg_id()",
    "kind": "Method",
    "detail": "Function (__parse_ctx .)",
    "insertText": "check_arg_id(__r.__value)"
  },
  {
    "label": "_CharT()",
    "kind": "Method",
    "detail": "Function (const _CharT* __end = __end_input - __begin> 9 ? __begin + 9 : __end_input ; uint32_t __value =* __begin -)",
    "insertText": "_CharT('0')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__begin != __end_input && *__begin >= _CharT('0') && *__begin <= _CharT('9'))"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t __v =)",
    "insertText": "uint64_t(__value) * 10 + *__begin++ - _CharT('0')"
  },
  {
    "label": "__parse_arg_id()",
    "kind": "Method",
    "detail": "Function (__value = __v ; } return { __begin,__value } ; } template<class _CharT> _LIBCPP_HIDE_FROM_ABI __parse_number_result<_CharT>)",
    "insertText": "__parse_arg_id(const _CharT* __begin, const _CharT* __end, auto& __parse_ctx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(*__begin < _CharT('0') || *__begin > _CharT('9')) __throw_format_error( \"The arg-id of the format-spec starts with an invalid character\")"
  }
]