[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "ELook",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELook"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_NULL_H_ # define _FBXSDK_SCENE_GEOMETRY_NULL_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / scene / geometry / fbxnodeattribute . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxNull : public FbxNodeAttribute {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxNull, FbxNodeAttribute)"
  },
  {
    "label": "GetAttributeType()",
    "kind": "Method",
    "detail": "Function (public : FbxNodeAttribute::EType)",
    "insertText": "GetAttributeType()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetSizeDefaultValue()",
    "kind": "Method",
    "detail": "Function (enum ELook { eNone,eCross,} ; double)",
    "insertText": "GetSizeDefaultValue()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (const char* sSize ; const char* sLook ; const FbxDouble sDefaultSize ; const ELook sDefaultLook ; FbxPropertyT<FbxDouble> Size ; FbxPropertyT<ELook> Look ; # ifndef DOXYGEN_SHOULD_SKIP_THIS FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "GetTypeFlags()",
    "kind": "Method",
    "detail": "Function (public : FbxStringList)",
    "insertText": "GetTypeFlags()"
  },
  {
    "label": "FbxTypeOf()",
    "kind": "Method",
    "detail": "Function (# endif } ; EFbxType)",
    "insertText": "FbxTypeOf(const FbxNull::ELook&)"
  }
]