[
  {
    "label": "NVCORE_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NVCORE_CLASS"
  },
  {
    "label": "fileOpen()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_STDSTREAM_H # define NV_STDSTREAM_H # include<nvcore / Stream . h> # include<stdio . h> # include<string . h> # include<exception> namespace nv { FILE*)",
    "insertText": "fileOpen(const char * fileName, const char * mode)"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(fileName != NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if NV_CC_MSVC&& _MSC_VER> = 1 4 0 0 FILE* fp ;)",
    "insertText": "if(fopen_s(&fp, fileName, mode) == 0)"
  },
  {
    "label": "NV_FORBID_COPY()",
    "kind": "Method",
    "detail": "Function (# endif } class NVCORE_CLASS StdStream : public Stream {)",
    "insertText": "NV_FORBID_COPY(StdStream)"
  },
  {
    "label": "StdStream()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "StdStream(FILE * fp, bool autoclose=true ) : m_fp(fp), m_autoclose(autoclose)"
  },
  {
    "label": "StdStream()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StdStream()"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fclose(m_fp)"
  },
  {
    "label": "seek()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "seek(uint pos)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(m_fp != NULL)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(pos < size())"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek(m_fp, pos, SEEK_SET)"
  },
  {
    "label": "tell()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "tell()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "size()"
  },
  {
    "label": "ftell()",
    "kind": "Method",
    "detail": "Function (uint pos =)",
    "insertText": "ftell(m_fp)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek(m_fp, 0, SEEK_END)"
  },
  {
    "label": "clearError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearError()"
  },
  {
    "label": "clearerr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearerr(m_fp)"
  },
  {
    "label": "isAtEnd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAtEnd()"
  },
  {
    "label": "isSeekable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSeekable()"
  },
  {
    "label": "StdOutputStream()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "StdOutputStream(const char * name ) : StdStream(fileOpen(name, \"wb\"))"
  },
  {
    "label": "StdOutputStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StdOutputStream(FILE * fp, bool autoclose=true ) : StdStream(fp, autoclose)"
  },
  {
    "label": "serialize()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "serialize(void * data, uint len)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(data != NULL)"
  },
  {
    "label": "isLoading()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLoading()"
  },
  {
    "label": "StdInputStream()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "StdInputStream(const char * name ) : StdStream(fileOpen(name, \"rb\"))"
  },
  {
    "label": "StdInputStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StdInputStream(FILE * fp, bool autoclose=true ) : StdStream(fp, autoclose)"
  },
  {
    "label": "MemoryInputStream()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MemoryInputStream(const uint8 * mem, uint size ) : m_mem(mem), m_ptr(mem), m_size(size)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(!isError())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(data, m_ptr, len)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(m_ptr >= m_mem)"
  },
  {
    "label": "ProtectedStream()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ProtectedStream(Stream & s ) : m_s(&s), m_autodelete(false)"
  },
  {
    "label": "ProtectedStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ProtectedStream(Stream * s, bool autodelete = true ) : m_s(s), m_autodelete(autodelete)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(m_s != NULL)"
  },
  {
    "label": "ProtectedStream()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ProtectedStream()"
  },
  {
    "label": "serialize()",
    "kind": "Method",
    "detail": "Function (len = m_s ->)",
    "insertText": "serialize(data, len)"
  },
  {
    "label": "exception()",
    "kind": "Method",
    "detail": "Function (throw)",
    "insertText": "exception()"
  },
  {
    "label": "seek()",
    "kind": "Method",
    "detail": "Function (m_s ->)",
    "insertText": "seek(pos)"
  },
  {
    "label": "isError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isError()"
  },
  {
    "label": "isSaving()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSaving()"
  }
]