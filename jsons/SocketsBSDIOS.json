[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FSocketBSDIOS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketBSDIOS"
  },
  {
    "label": "FSocketBSDIOS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IPAddressBSDIOS . h \" # include \" BSDSockets / SocketSubsystemBSDPrivate . h \" # include \" Sockets . h \" # include \" BSDSockets / SocketsBSD . h \" class FInternetAddr ; class FSocketBSDIOS : public FSocketBSD { public :)",
    "insertText": "FSocketBSDIOS(SOCKET InSocket, ESocketType InSocketType, const FString& InSocketDescription, const FName& InSocketProtocol, ISocketSubsystem* InSubsystem) :FSocketBSD(InSocket, InSocketType, InSocketDescription, InSocketProtocol, InSubsystem)"
  },
  {
    "label": "FSocketBSDIOS()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSocketBSDIOS()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "JoinMulticastGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "JoinMulticastGroup(const FInternetAddr& GroupAddress, const FInternetAddr& InterfaceAddress)"
  },
  {
    "label": "FInternetAddrBSDIOS()",
    "kind": "Method",
    "detail": "Function (const FInternetAddrBSDIOS& IOSInterfaceAddr = static_cast<const)",
    "insertText": "FInternetAddrBSDIOS(InterfaceAddress)"
  },
  {
    "label": "JoinMulticastGroup()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "JoinMulticastGroup(GroupAddress, InterfaceAddress)"
  },
  {
    "label": "LeaveMulticastGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LeaveMulticastGroup(const FInternetAddr& GroupAddress, const FInternetAddr& InterfaceAddress)"
  },
  {
    "label": "LeaveMulticastGroup()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LeaveMulticastGroup(GroupAddress, InterfaceAddress)"
  }
]