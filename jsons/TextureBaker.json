[
  {
    "label": "TextureBaker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TextureBaker"
  },
  {
    "label": "MX_RENDERGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDERGLSL_API"
  },
  {
    "label": "BakedImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BakedImage"
  },
  {
    "label": "BakedConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BakedConstant"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_TEXTUREBAKER # define MATERIALX_TEXTUREBAKER # include<iostream> # include<MaterialXCore / Unit . h> # include<MaterialXRenderGlsl / Export . h> # include<MaterialXRenderGlsl / GlslRenderer . h> # include<MaterialXRenderGlsl / GLTextureHandler . h> # include<MaterialXGenGlsl / GlslShaderGenerator . h> MATERIALX_NAMESPACE_BEGIN using TextureBakerPtr = shared_ptr<class TextureBaker> ; using BakedDocumentVec = std::vector<std::pair<std::string,DocumentPtr>> ; class TextureBaker : public GlslRenderer { public : TextureBakerPtr)",
    "insertText": "create(unsigned int width = 1024, unsigned int height = 1024, Image::BaseType baseType = Image::BaseType::UINT8)"
  },
  {
    "label": "setExtension()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setExtension(const string& extension)"
  },
  {
    "label": "getExtension()",
    "kind": "Method",
    "detail": "Function (_extension = extension ; } const string&)",
    "insertText": "getExtension()"
  },
  {
    "label": "getColorSpace()",
    "kind": "Method",
    "detail": "Function (_colorSpace = colorSpace ; } const string&)",
    "insertText": "getColorSpace()"
  },
  {
    "label": "getDistanceUnit()",
    "kind": "Method",
    "detail": "Function (_distanceUnit = unitSpace ; } const string&)",
    "insertText": "getDistanceUnit()"
  },
  {
    "label": "getAverageImages()",
    "kind": "Method",
    "detail": "Function (_averageImages = enable ; } bool)",
    "insertText": "getAverageImages()"
  },
  {
    "label": "getOptimizeConstants()",
    "kind": "Method",
    "detail": "Function (_optimizeConstants = enable ; } bool)",
    "insertText": "getOptimizeConstants()"
  },
  {
    "label": "getOutputImagePath()",
    "kind": "Method",
    "detail": "Function (_outputImagePath = outputImagePath ; } const FilePath&)",
    "insertText": "getOutputImagePath()"
  },
  {
    "label": "getBakedGraphName()",
    "kind": "Method",
    "detail": "Function (_bakedGraphName = name ; } const string&)",
    "insertText": "getBakedGraphName()"
  },
  {
    "label": "getBakedGeomInfoName()",
    "kind": "Method",
    "detail": "Function (_bakedGeomInfoName = name ; } const string&)",
    "insertText": "getBakedGeomInfoName()"
  },
  {
    "label": "_textureFilenameTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_textureFilenameTemplate(filenameTemplate.find(\"$EXTENSION\") == string::npos)"
  },
  {
    "label": "setFilenameTemplateVarOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFilenameTemplateVarOverride(const string& key, const string& value)"
  },
  {
    "label": "setOutputStream()",
    "kind": "Method",
    "detail": "Function (_texTemplateOverrides [ key ] = value ; } } void)",
    "insertText": "setOutputStream(std::ostream* outputStream)"
  },
  {
    "label": "getOutputStream()",
    "kind": "Method",
    "detail": "Function (_outputStream = outputStream ; } std::ostream*)",
    "insertText": "getOutputStream()"
  },
  {
    "label": "getHashImageNames()",
    "kind": "Method",
    "detail": "Function (_hashImageNames = enable ; } bool)",
    "insertText": "getHashImageNames()"
  },
  {
    "label": "getTextureSpaceMin()",
    "kind": "Method",
    "detail": "Function (_textureSpaceMin = min ; } Vector2)",
    "insertText": "getTextureSpaceMin()"
  },
  {
    "label": "getTextureSpaceMax()",
    "kind": "Method",
    "detail": "Function (_textureSpaceMax = max ; } Vector2)",
    "insertText": "getTextureSpaceMax()"
  },
  {
    "label": "bakeShaderInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bakeShaderInputs(NodePtr material, NodePtr shader, GenContext& context, const string& udim = EMPTY_STRING)"
  },
  {
    "label": "bakeGraphOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bakeGraphOutput(OutputPtr output, GenContext& context, const StringMap& filenameTemplateMap)"
  },
  {
    "label": "optimizeBakedTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optimizeBakedTextures(NodePtr shader)"
  },
  {
    "label": "bakeAllMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bakeAllMaterials(DocumentPtr doc, const FileSearchPath& searchPath, const FilePath& outputFileName)"
  },
  {
    "label": "TextureBaker()",
    "kind": "Method",
    "detail": "Function (protected : class BakedImage { public : FilePath filename ; Color4 uniformColor ; bool isUniform = false ; } ; class BakedConstant { public : Color4 color ; bool isDefault = false ; } ; using BakedImageVec = vector<BakedImage> ; using BakedImageMap = std::unordered_map<OutputPtr,BakedImageVec> ; using BakedConstantMap = std::unordered_map<OutputPtr,BakedConstant> ; protected :)",
    "insertText": "TextureBaker(unsigned int width, unsigned int height, Image::BaseType baseType)"
  },
  {
    "label": "initializeFileTemplateMap()",
    "kind": "Method",
    "detail": "Function (StringMap)",
    "insertText": "initializeFileTemplateMap(InputPtr input, NodePtr shader, const string& udim = EMPTY_STRING)"
  },
  {
    "label": "findVarInTemplate()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "findVarInTemplate(const string& filename, const string& var, size_t start = 0)"
  },
  {
    "label": "generateTextureFilename()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "generateTextureFilename(const StringMap& fileTemplateMap)"
  },
  {
    "label": "writeBakedImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "writeBakedImage(const BakedImage& baked, ImagePtr image)"
  }
]