[
  {
    "label": "TextureBaker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TextureBaker"
  },
  {
    "label": "TextureBaker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TextureBaker"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MX_RENDERGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDERGLSL_API"
  },
  {
    "label": "BakedImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BakedImage"
  },
  {
    "label": "BakedConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BakedConstant"
  },
  {
    "label": "setupUnitSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setupUnitSystem(DocumentPtr unitDefinitions)"
  },
  {
    "label": "bakeShaderInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bakeShaderInputs(NodePtr material, NodePtr shader, GenContext& context, const string& udim = EMPTY_STRING)"
  },
  {
    "label": "bakeGraphOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bakeGraphOutput(OutputPtr output, GenContext& context, const StringMap& filenameTemplateMap)"
  },
  {
    "label": "optimizeBakedTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optimizeBakedTextures(NodePtr shader)"
  },
  {
    "label": "bakeMaterialToDoc()",
    "kind": "Method",
    "detail": "Function (DocumentPtr)",
    "insertText": "bakeMaterialToDoc(DocumentPtr doc, const FileSearchPath& searchPath, const string& materialPath, \n                                  const StringVec& udimSet, std::string& documentName)"
  },
  {
    "label": "bakeAllMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bakeAllMaterials(DocumentPtr doc, const FileSearchPath& searchPath, const FilePath& outputFileName)"
  },
  {
    "label": "TextureBaker()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "TextureBaker(unsigned int width, unsigned int height, Image::BaseType baseType)"
  },
  {
    "label": "initializeFileTemplateMap()",
    "kind": "Method",
    "detail": "Function (StringMap)",
    "insertText": "initializeFileTemplateMap(InputPtr input, NodePtr shader, const string& udim = EMPTY_STRING)"
  },
  {
    "label": "findVarInTemplate()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "findVarInTemplate(const string& filename, const string& var, size_t start = 0)"
  },
  {
    "label": "generateTextureFilename()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "generateTextureFilename(const StringMap& fileTemplateMap)"
  },
  {
    "label": "generateNewDocumentFromShader()",
    "kind": "Method",
    "detail": "Function (DocumentPtr)",
    "insertText": "generateNewDocumentFromShader(NodePtr shader, const StringVec& udimSet)"
  },
  {
    "label": "writeBakedImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "writeBakedImage(const BakedImage& baked, ImagePtr image)"
  }
]