[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SColorValueSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorValueSlider"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" InputCoreTypes . h \" # include \" Input / Reply . h \" # include \" Rendering / DrawElements . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / SLeafWidget . h \" # include \" Framework / SlateDelegates . h \" class FPaintArgs ; class FSlateRect ; class FWidgetStyle ; struct FGeometry ; struct FPointerEvent ; struct FSlateBrush ; class SColorValueSlider : public SLeafWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SColorValueSlider ) : _SelectedColor() , _OnValueChanged() , _OnMouseCaptureBegin() , _OnMouseCaptureEnd()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FLinearColor, SelectedColor) SLATE_EVENT(FOnLinearColorValueChanged, OnValueChanged) SLATE_EVENT(FSimpleDelegate, OnMouseCaptureBegin) SLATE_EVENT(FSimpleDelegate, OnMouseCaptureEnd) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SelectorImage =)",
    "insertText": "Get().GetBrush(\"ColorPicker.Selector\")"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (OnValueChanged = InArgs . _OnValueChanged ; OnMouseCaptureBegin = InArgs . _OnMouseCaptureBegin ; OnMouseCaptureEnd = InArgs . _OnMouseCaptureEnd ; SelectedColor = InArgs . _SelectedColor ; } int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (const bool bIsEnabled =)",
    "insertText": "ShouldBeEnabled(bParentEnabled)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const ESlateDrawEffect DrawEffects = bIsEnabled ? ESlateDrawEffect::None : ESlateDrawEffect::DisabledEffect ; FLinearColor FullValueColor = SelectedColor .)",
    "insertText": "Get()"
  },
  {
    "label": "HSVToLinearRGB()",
    "kind": "Method",
    "detail": "Function (FullValueColor . B = FullValueColor . A = 1 . f ; FLinearColor StopColor = FullValueColor .)",
    "insertText": "HSVToLinearRGB()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FSlateGradientStop> GradientStops ; GradientStops .)",
    "insertText": "Add(FSlateGradientStop(FVector2D::ZeroVector, FLinearColor(0.0f, 0.0f, 0.0f, 1.0f)))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GradientStops .)",
    "insertText": "Add(FSlateGradientStop(AllottedGeometry.Size, StopColor))"
  },
  {
    "label": "MakeGradient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeGradient(OutDrawElements, LayerId, AllottedGeometry.ToPaintGeometry(), GradientStops, Orient_Vertical, MyCullingRect, DrawEffects)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D RelativeSelectedPosition =)",
    "insertText": "FVector2D(Value, 0.5f)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(OutDrawElements, LayerId + 1, AllottedGeometry.ToPaintGeometry( RelativeSelectedPosition*AllottedGeometry.Size - SelectorImage->ImageSize*0.5, SelectorImage->ImageSize ), SelectorImage, MyCullingRect, DrawEffects, InWidgetStyle.GetColorAndOpacityTint() * SelectorImage->GetTint( InWidgetStyle ))"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnMouseCaptureBegin .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AbsoluteToLocal()",
    "kind": "Method",
    "detail": "Function (} FVector2D LocalMouseCoordinate = MyGeometry .)",
    "insertText": "AbsoluteToLocal(MouseEvent.GetScreenSpacePosition())"
  },
  {
    "label": "LocalMouseCoordinate()",
    "kind": "Method",
    "detail": "Function (FVector2D Location =)",
    "insertText": "LocalMouseCoordinate(MyGeometry.Size)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (float Value =)",
    "insertText": "Clamp(Location.X, 0.f, 1.f)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (NewColor . B = Value ; OnValueChanged .)",
    "insertText": "ExecuteIfBound(NewColor)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  }
]