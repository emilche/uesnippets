[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "VariantVector()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_VARIANT_VECTOR_H_ # define BASE_WIN_VARIANT_VECTOR_H_ # include<objbase . h> # include<oleauto . h> # include<type_traits> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / logging . h \" # include \" base / win / scoped_variant . h \" # include \" base / win / variant_util . h \" namespace base { namespace win { class BASE_EXPORT VariantVector final { public :)",
    "insertText": "VariantVector()"
  },
  {
    "label": "VariantVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VariantVector(VariantVector&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VariantVector&)",
    "insertText": "operator(VariantVector&& other)"
  },
  {
    "label": "VariantVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VariantVector(const VariantVector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VariantVector&)",
    "insertText": "operator(const VariantVector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const VariantVector& other)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (VARTYPE)",
    "insertText": "Type()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (template<VARTYPE ExpectedVartype,std::enable_if_t<ExpectedVartype ! = VT_BOOL,int> = 0> void)",
    "insertText": "Insert(typename internal::VariantUtil<ExpectedVartype>::Type value)"
  },
  {
    "label": "ExpectedVartype()",
    "kind": "Method",
    "detail": "Function (AssertVartype<)",
    "insertText": "ExpectedVartype()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (ScopedVariant scoped_variant ; scoped_variant .)",
    "insertText": "Set(value)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "push_back(std::move(scoped_variant))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} template<VARTYPE ExpectedVartype,std::enable_if_t<ExpectedVartype = = VT_BOOL,int> = 0> void)",
    "insertText": "Insert(bool value)"
  },
  {
    "label": "VT_DATE()",
    "kind": "Method",
    "detail": "Function (} template<> void Insert<)",
    "insertText": "VT_DATE(typename internal::VariantUtil<VT_DATE>::Type value)"
  },
  {
    "label": "VT_DATE()",
    "kind": "Method",
    "detail": "Function (AssertVartype<)",
    "insertText": "VT_DATE()"
  },
  {
    "label": "SetDate()",
    "kind": "Method",
    "detail": "Function (ScopedVariant scoped_variant ; scoped_variant .)",
    "insertText": "SetDate(value)"
  },
  {
    "label": "ReleaseAsScalarVariant()",
    "kind": "Method",
    "detail": "Function (} VARIANT)",
    "insertText": "ReleaseAsScalarVariant()"
  },
  {
    "label": "ReleaseAsSafearrayVariant()",
    "kind": "Method",
    "detail": "Function (VARIANT)",
    "insertText": "ReleaseAsSafearrayVariant()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const VARIANT& other, bool ignore_case = false)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(SAFEARRAY* safearray, bool ignore_case = false)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const VariantVector& other, bool ignore_case = false)"
  },
  {
    "label": "AssertVartype()",
    "kind": "Method",
    "detail": "Function (private : template<VARTYPE ExpectedVartype> void)",
    "insertText": "AssertVartype()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(internal::VariantUtil<ExpectedVartype>::IsConvertibleTo(vartype_)) << \"Type mismatch, \" << ExpectedVartype << \" is not convertible to \" << Type()"
  },
  {
    "label": "CreateAndPopulateSafearray()",
    "kind": "Method",
    "detail": "Function (} template<VARTYPE ElementVartype> SAFEARRAY*)",
    "insertText": "CreateAndPopulateSafearray()"
  }
]