[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlotBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlotBase"
  },
  {
    "label": "FWeakWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakWidgetPath"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlateBaseNamedArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBaseNamedArgs"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlatePaintElementLists",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePaintElementLists"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPopupLayer"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FWidgetProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetProxy"
  },
  {
    "label": "FSlateAttributeMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAttributeMetaData"
  },
  {
    "label": "FSlateInvalidationRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationRoot"
  },
  {
    "label": "FSlateInvalidationWidgetList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetList"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSlateTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTrace"
  },
  {
    "label": "FSlateCachedElementList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedElementList"
  },
  {
    "label": "WidgetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WidgetType"
  },
  {
    "label": "TSlateDecl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateDecl"
  },
  {
    "label": "TSlateAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttribute"
  },
  {
    "label": "TSlateAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttribute"
  },
  {
    "label": "TSlateAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttribute"
  },
  {
    "label": "TSlateManagedAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateManagedAttribute"
  },
  {
    "label": "TSlateManagedAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateManagedAttribute"
  },
  {
    "label": "TSlateManagedAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateManagedAttribute"
  },
  {
    "label": "TSlateAttributeRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttributeRef"
  },
  {
    "label": "TSlateAttributeRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttributeRef"
  },
  {
    "label": "TSlateAttributeRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttributeRef"
  },
  {
    "label": "FSlateAccessibleWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleWidget"
  },
  {
    "label": "SetWidgetAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWidgetAttribute(SWidget& ThisWidget, TAttribute<TargetValueType>& TargetValue, const TAttribute<SourceValueType>& SourceValue, EInvalidateWidgetReason BaseInvalidationReason)"
  },
  {
    "label": "Me()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Me()"
  },
  {
    "label": "Me()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Me()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAnalogValueChanged(const FGeometry& MyGeometry, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnVisualizeTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVisualizeTooltip(const TSharedPtr<SWidget>& TooltipContent)"
  },
  {
    "label": "OnVisualizePopup()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPopupLayer>)",
    "insertText": "OnVisualizePopup(const TSharedRef<SWidget>& PopupContent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchFirstMove(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMotionDetected(const FGeometry& MyGeometry, const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "OnFinishedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedPointerInput()"
  },
  {
    "label": "OnFinishedKeyInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedKeyInput()"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "SlatePrepass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlatePrepass()"
  },
  {
    "label": "SlatePrepass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlatePrepass(float InLayoutScaleMultiplier)"
  },
  {
    "label": "HasAnyUpdateFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HasAnyUpdateFlags(EWidgetUpdateFlags::NeedsTick)"
  },
  {
    "label": "AssignParentWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignParentWidget(TSharedPtr<SWidget> InParent)"
  },
  {
    "label": "ConditionallyDetatchParentWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionallyDetatchParentWidget(SWidget* InExpectedParent)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EnumHasAnyFlags(UpdateFlags, FlagsToCheck)"
  },
  {
    "label": "CacheDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheDesiredSize(float InLayoutScaleMultiplier)"
  },
  {
    "label": "SetFastPathProxyHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFastPathProxyHandle(const FWidgetProxyHandle& Handle, FSlateInvalidationWidgetVisibility Visibility, bool bParentVolatile)"
  },
  {
    "label": "SetFastPathSortOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFastPathSortOrder(const FSlateInvalidationWidgetSortOrder SortOrder)"
  },
  {
    "label": "UpdateFastPathVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFastPathVisibility(FSlateInvalidationWidgetVisibility ParentVisibility, FHittestGrid* ParentHittestGrid)"
  },
  {
    "label": "UpdateFastPathWidgetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFastPathWidgetRemoved(FHittestGrid* ParentHittestGrid)"
  },
  {
    "label": "UpdateFastPathVolatility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFastPathVolatility(bool bParentVolatile)"
  },
  {
    "label": "UpdateWidgetProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidgetProxy(int32 NewLayerId, FSlateCachedElementsHandle& CacheHandle)"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TStatId()"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TStatId()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetAllChildren()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetAllChildren()"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "GetToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolTip>)",
    "insertText": "GetToolTip()"
  },
  {
    "label": "OnToolTipClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolTipClosing()"
  },
  {
    "label": "EnableToolTipForceField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableToolTipForceField(const bool bEnableForceField)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(TAttribute<EVisibility> InVisibility)"
  },
  {
    "label": "SetCanChildrenBeAccessible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanChildrenBeAccessible(bool InCanChildrenBeAccessible)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(EInvalidateWidgetReason InvalidateReason)"
  },
  {
    "label": "InvalidateChildRemovedFromTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateChildRemovedFromTree(SWidget& Child)"
  },
  {
    "label": "SetClipping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClipping(EWidgetClipping InClipping)"
  },
  {
    "label": "SetPixelSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPixelSnapping(EWidgetPixelSnapping InPixelSnappingMethod)"
  },
  {
    "label": "SetToolTipText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToolTipText(const TAttribute<FText>& ToolTipText)"
  },
  {
    "label": "SetToolTipText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToolTipText( const FText& InToolTipText )"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToolTip(const TAttribute<TSharedPtr<IToolTip>>& InToolTip)"
  },
  {
    "label": "SetCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursor( const TAttribute< TOptional<EMouseCursor::Type> >& InCursor )"
  },
  {
    "label": "SetDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugInfo( const ANSICHAR* InType, const ANSICHAR* InFile, int32 OnLine, size_t InAllocSize )"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (UE_BUILD_TEST)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_SlateGetMetaData)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (UE_BUILD_TEST)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_SlateGetMetaData)"
  },
  {
    "label": "AddMetadataInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataInternal(const TSharedRef<ISlateMetaData>& AddMe)"
  },
  {
    "label": "SetOnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseButtonDown(FPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseButtonUp(FPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseMove(FPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseDoubleClick(FPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseEnter(FNoReplyPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseLeave(FSimpleNoReplyPointerEventHandler EventHandler)"
  },
  {
    "label": "SWidget()",
    "kind": "Method",
    "detail": "Function (SLATECORE_API)",
    "insertText": "SWidget()"
  },
  {
    "label": "SWidgetConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SWidgetConstruct(const FSlateBaseNamedArgs& Args)"
  },
  {
    "label": "FindChildUnderMouse()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChildUnderMouse( const FArrangedChildren& Children, const FPointerEvent& MouseEvent )"
  },
  {
    "label": "FindChildUnderPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChildUnderPosition(const FArrangedChildren& Children, const UE::Slate::FDeprecateVector2DParameter& ArrangedSpacePosition)"
  },
  {
    "label": "OnClippingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClippingChanged()"
  },
  {
    "label": "Prepass_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepass_Internal(float LayoutScaleMultiplier)"
  },
  {
    "label": "Prepass_ChildLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepass_ChildLoop(float InLayoutScaleMultiplier, FChildren* MyChildren)"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FActiveTimerHandle>)",
    "insertText": "RegisterActiveTimer( float TickPeriod, FWidgetActiveTimerDelegate TickFunction )"
  },
  {
    "label": "UnRegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterActiveTimer( const TSharedRef<FActiveTimerHandle>& ActiveTimerHandle )"
  },
  {
    "label": "ExecuteActiveTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteActiveTimers(double CurrentTime, float DeltaTime)"
  },
  {
    "label": "SetWidgetAttribute()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SetWidgetAttribute(*this, TargetValue, SourceValue, BaseInvalidationReason)"
  }
]