[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlotBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlotBase"
  },
  {
    "label": "FWeakWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakWidgetPath"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlateBaseNamedArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBaseNamedArgs"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlatePaintElementLists",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePaintElementLists"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPopupLayer"
  },
  {
    "label": "FWidgetProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetProxy"
  },
  {
    "label": "FSlateAttributeMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAttributeMetaData"
  },
  {
    "label": "FSlateInvalidationRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationRoot"
  },
  {
    "label": "FSlateInvalidationWidgetList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetList"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSlateTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTrace"
  },
  {
    "label": "FSlateCachedElementList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedElementList"
  },
  {
    "label": "WidgetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WidgetType"
  },
  {
    "label": "TSlateDecl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateDecl"
  },
  {
    "label": "TSlateAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttribute"
  },
  {
    "label": "TSlateManagedAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateManagedAttribute"
  },
  {
    "label": "TSlateAttributeRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSlateAttributeRef"
  },
  {
    "label": "FSlateAccessibleWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleWidget"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Misc / FrameValue . h \" # include \" Stats / Stats . h \" # include \" Styling / SlateColor . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Visibility . h \" # include \" Layout / Clipping . h \" # include \" Layout / Geometry . h \" # include \" Layout / ArrangedWidget . h \" # include \" Layout / LayoutGeometry . h \" # include \" Layout / Margin . h \" # include \" Layout / FlowDirection . h \" # include \" Rendering / SlateLayoutTransform . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Input / NavigationReply . h \" # include \" Input / PopupMethodReply . h \" # include \" Types / ISlateMetaData . h \" # include \" Types / WidgetActiveTimerDelegate . h \" # include \" Types / WidgetMouseEventsDelegate . h \" # include \" Textures / SlateShaderResource . h \" # include \" SlateGlobals . h \" # include \" Types / PaintArgs . h \" # include \" Types / SlateAttribute . h \" # include \" Types / SlateVector2 . h \" # include \" FastUpdate / WidgetProxy . h \" # include \" InvalidateWidgetReason . h \" # include \" Widgets / SlateControlledConstruction . h \" # include \" Widgets / Accessibility / SlateWidgetAccessibleTypes . h \" # include \" WidgetPixelSnapping . h \" class FActiveTimerHandle ; class FArrangedChildren ; class FChildren ; class FPaintArgs ; class FSlateWindowElementList ; class FSlotBase ; class FWeakWidgetPath ; class FWidgetPath ; class IToolTip ; class SWidget ; struct FSlateBaseNamedArgs ; struct FSlateBrush ; struct FSlatePaintElementLists ;)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Widgets Created (Per Frame)\"), STAT_SlateTotalWidgetsPerFrame, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"SWidget::Paint (Count)\"), STAT_SlateNumPaintedWidgets, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"SWidget::Tick (Count)\"), STAT_SlateNumTickedWidgets, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Execute Active Timers\"), STAT_SlateExecuteActiveTimers, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Tick Widgets\"), STAT_SlateTickWidgets, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SlatePrepass\"), STAT_SlatePrepass, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING&& ! UE_BUILD_TEST)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SWidget MetaData\"), STAT_SlateGetMetaData, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total Widgets\"), STAT_SlateTotalWidgets, STATGROUP_SlateMemory, SLATECORE_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"SWidget Total Allocated Size\"), STAT_SlateSWidgetAllocSize, STATGROUP_SlateMemory, SLATECORE_API)"
  },
  {
    "label": "FPopupLayer()",
    "kind": "Method",
    "detail": "Function (enum class EAccessibleType : uint8 { Main,Summary } ; class FPopupLayer : public TSharedFromThis<FPopupLayer> { public :)",
    "insertText": "FPopupLayer(const TSharedRef<SWidget>& InitHostWidget, const TSharedRef<SWidget>& InitPopupContent) : HostWidget(InitHostWidget) , PopupContent(InitPopupContent)"
  },
  {
    "label": "FPopupLayer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPopupLayer()"
  },
  {
    "label": "GetHost()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GetHost()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove()"
  },
  {
    "label": "SetWidgetAttribute()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget> HostWidget ; TSharedRef<SWidget> PopupContent ; } ; template<TargetValueType,SourceValueType> bool)",
    "insertText": "SetWidgetAttribute(SWidget& ThisWidget, TAttribute<TargetValueType>& TargetValue, const TAttribute<SourceValueType>& SourceValue, EInvalidateWidgetReason BaseInvalidationReason)"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (class IToolTip ; class SWidget : public FSlateControlledConstruction,public TSharedFromThis<SWidget> {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SWidget, FSlateControlledConstruction, SLATECORE_API)"
  },
  {
    "label": "Paint()",
    "kind": "Method",
    "detail": "Function (class FSlateAttributeMetaData ; class FSlateInvalidationRoot ; class FSlateInvalidationWidgetList ; class FSlateWindowElementList ; class SWindow ; class FSlateTrace ; struct FSlateCachedElementList ; template<class WidgetType,RequiredArgsPayloadType> struct TSlateDecl ; protected : template<InObjectType,EInvalidateWidgetReason InInvalidationReasonValue = EInvalidateWidgetReason::None,InComparePredicate = TSlateAttributeComparePredicate<>> struct TSlateAttribute : public::SlateAttributePrivate::TSlateMemberAttribute<InObjectType,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,InComparePredicate> { using::SlateAttributePrivate::TSlateMemberAttribute<InObjectType,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,InComparePredicate>::TSlateMemberAttribute ; } ; template<> struct TSlateAttribute<FText,EInvalidateWidgetReason::None> : public::SlateAttributePrivate::TSlateMemberAttribute<FText,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeFTextComparePredicate> { using::SlateAttributePrivate::TSlateMemberAttribute<FText,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeFTextComparePredicate>::TSlateMemberAttribute ; } ; template<EInvalidateWidgetReason InInvalidationReasonValue> struct TSlateAttribute<FText,InInvalidationReasonValue> : public::SlateAttributePrivate::TSlateMemberAttribute<FText,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,TSlateAttributeFTextComparePredicate> { using::SlateAttributePrivate::TSlateMemberAttribute<FText,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,TSlateAttributeFTextComparePredicate>::TSlateMemberAttribute ; } ; template<InObjectType,EInvalidateWidgetReason InInvalidationReasonValue = EInvalidateWidgetReason::None,InComparePredicate = TSlateAttributeComparePredicate<>> struct TSlateManagedAttribute : public::SlateAttributePrivate::TSlateManagedAttribute<InObjectType,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,InComparePredicate> { using::SlateAttributePrivate::TSlateManagedAttribute<InObjectType,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,InComparePredicate>::TSlateManagedAttribute ; } ; template<> struct TSlateManagedAttribute<FText,EInvalidateWidgetReason::None> : public::SlateAttributePrivate::TSlateManagedAttribute<FText,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeFTextComparePredicate> { using::SlateAttributePrivate::TSlateManagedAttribute<FText,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeFTextComparePredicate>::TSlateManagedAttribute ; } ; template<EInvalidateWidgetReason InInvalidationReasonValue> struct TSlateManagedAttribute<FText,InInvalidationReasonValue> : public::SlateAttributePrivate::TSlateManagedAttribute<FText,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,TSlateAttributeFTextComparePredicate> { using::SlateAttributePrivate::TSlateManagedAttribute<FText,std::conditional<InInvalidationReasonValue = = EInvalidateWidgetReason::None,::SlateAttributePrivate::FSlateAttributeNoInvalidationReason,TSlateAttributeInvalidationReason<InInvalidationReasonValue>>::type,TSlateAttributeFTextComparePredicate>::TSlateManagedAttribute ; } ; template<InObjectType,EInvalidateWidgetReason InInvalidationReasonValue = EInvalidateWidgetReason::None,InComparePredicate = TSlateAttributeComparePredicate<>> struct TSlateAttributeRef : public::SlateAttributePrivate::TSlateMemberAttributeRef<TSlateAttribute<InObjectType,InInvalidationReasonValue,InComparePredicate>> { using::SlateAttributePrivate::TSlateMemberAttributeRef<TSlateAttribute<InObjectType,InInvalidationReasonValue,InComparePredicate>>::TSlateMemberAttributeRef ; } ; template<> struct TSlateAttributeRef<FText,EInvalidateWidgetReason::None> : public::SlateAttributePrivate::TSlateMemberAttributeRef<TSlateAttribute<FText>> { using::SlateAttributePrivate::TSlateMemberAttributeRef<TSlateAttribute<FText>>::TSlateMemberAttributeRef ; } ; template<EInvalidateWidgetReason InInvalidationReasonValue> struct TSlateAttributeRef<FText,InInvalidationReasonValue> : public::SlateAttributePrivate::TSlateMemberAttributeRef<TSlateAttribute<FText,InInvalidationReasonValue>> { using::SlateAttributePrivate::TSlateMemberAttributeRef<TSlateAttribute<FText,InInvalidationReasonValue>>::TSlateMemberAttributeRef ; } ; public : int32)",
    "insertText": "Paint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAnalogValueChanged(const FGeometry& MyGeometry, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnMapCursor()",
    "kind": "Method",
    "detail": "Function (TOptional<TSharedRef<SWidget>>)",
    "insertText": "OnMapCursor(const FCursorReply& CursorReply)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnVisualizeTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVisualizeTooltip(const TSharedPtr<SWidget>& TooltipContent)"
  },
  {
    "label": "OnVisualizePopup()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPopupLayer>)",
    "insertText": "OnVisualizePopup(const TSharedRef<SWidget>& PopupContent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchFirstMove(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMotionDetected(const FGeometry& MyGeometry, const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "OnQueryShowFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "OnQueryShowFocus(const EFocusCause InFocusCause)"
  },
  {
    "label": "OnQueryPopupMethod()",
    "kind": "Method",
    "detail": "Function (FPopupMethodReply)",
    "insertText": "OnQueryPopupMethod()"
  },
  {
    "label": "TranslateMouseCoordinateForCustomHitTestChild()",
    "kind": "Method",
    "detail": "Function (TOptional<FVirtualPointerPosition>)",
    "insertText": "TranslateMouseCoordinateForCustomHitTestChild(const SWidget& ChildWidget, const FGeometry& MyGeometry, const FVector2D ScreenSpaceMouseCoordinate, const FVector2D LastScreenSpaceMouseCoordinate)"
  },
  {
    "label": "OnFinishedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedPointerInput()"
  },
  {
    "label": "OnFinishedKeyInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedKeyInput()"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "GetWindowZoneOverride()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "GetWindowZoneOverride()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<class FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "NeedsPrepass()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "NeedsPrepass()"
  },
  {
    "label": "SlatePrepass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlatePrepass(float InLayoutScaleMultiplier)"
  },
  {
    "label": "SetCanTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanTick(bool bInCanTick)"
  },
  {
    "label": "AddUpdateFlags()",
    "kind": "Method",
    "detail": "Function (bInCanTick ?)",
    "insertText": "AddUpdateFlags(EWidgetUpdateFlags::NeedsTick) : RemoveUpdateFlags(EWidgetUpdateFlags::NeedsTick)"
  },
  {
    "label": "GetCanTick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCanTick()"
  },
  {
    "label": "HasRegisteredSlateAttribute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasRegisteredSlateAttribute()"
  },
  {
    "label": "AssignParentWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignParentWidget(TSharedPtr<SWidget> InParent)"
  },
  {
    "label": "ConditionallyDetatchParentWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionallyDetatchParentWidget(SWidget* InExpectedParent)"
  },
  {
    "label": "ValidatePathToChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidatePathToChild(SWidget* InChild)"
  },
  {
    "label": "GetParentWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetParentWidget()"
  },
  {
    "label": "Advanced_GetPaintParentWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "Advanced_GetPaintParentWidget()"
  },
  {
    "label": "CalculateCullingAndClippingRules()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "CalculateCullingAndClippingRules(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, bool& bClipToBounds, bool& bAlwaysClip, bool& bIntersectClipBounds)"
  },
  {
    "label": "HasAnyUpdateFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyUpdateFlags(EWidgetUpdateFlags FlagsToCheck)"
  },
  {
    "label": "SetVolatilePrepass()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetVolatilePrepass(bool bVolatile)"
  },
  {
    "label": "AddUpdateFlags()",
    "kind": "Method",
    "detail": "Function (bVolatile ?)",
    "insertText": "AddUpdateFlags(EWidgetUpdateFlags::NeedsVolatilePrepass) : RemoveUpdateFlags(EWidgetUpdateFlags::NeedsVolatilePrepass)"
  },
  {
    "label": "CustomPrepass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CustomPrepass(float LayoutScaleMultiplier)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "SetFastPathProxyHandle()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetFastPathProxyHandle(const FWidgetProxyHandle& Handle)"
  },
  {
    "label": "SetFastPathProxyHandle()",
    "kind": "Method",
    "detail": "Function (FastPathProxyHandle = Handle ; } void)",
    "insertText": "SetFastPathProxyHandle(const FWidgetProxyHandle& Handle, FSlateInvalidationWidgetVisibility Visibility, bool bParentVolatile)"
  },
  {
    "label": "SetFastPathSortOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFastPathSortOrder(const FSlateInvalidationWidgetSortOrder SortOrder)"
  },
  {
    "label": "UpdateFastPathVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFastPathVisibility(FSlateInvalidationWidgetVisibility ParentVisibility, FHittestGrid* ParentHittestGrid)"
  },
  {
    "label": "UpdateFastPathWidgetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFastPathWidgetRemoved(FHittestGrid* ParentHittestGrid)"
  },
  {
    "label": "UpdateFastPathVolatility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFastPathVolatility(bool bParentVolatile)"
  },
  {
    "label": "SetDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredSize(const FVector2D& InDesiredSize)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (DesiredSize =)",
    "insertText": "FVector2f(InDesiredSize)"
  },
  {
    "label": "CreateStatID()",
    "kind": "Method",
    "detail": "Function (bDesiredSizeSet = true ; } # if STATS | | ENABLE_STATNAMEDEVENTS void)",
    "insertText": "CreateStatID()"
  },
  {
    "label": "AddUpdateFlags()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddUpdateFlags(EWidgetUpdateFlags FlagsToAdd)"
  },
  {
    "label": "UpdateWidgetFlags()",
    "kind": "Method",
    "detail": "Function (EWidgetUpdateFlags Previous = UpdateFlags ; UpdateFlags | = FlagsToAdd ; FastPathProxyHandle .)",
    "insertText": "UpdateWidgetFlags(this, Previous, UpdateFlags)"
  },
  {
    "label": "RemoveUpdateFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveUpdateFlags(EWidgetUpdateFlags FlagsToRemove)"
  },
  {
    "label": "UpdateFlags()",
    "kind": "Method",
    "detail": "Function (EWidgetUpdateFlags Previous = UpdateFlags ;)",
    "insertText": "UpdateFlags(~FlagsToRemove)"
  },
  {
    "label": "UpdateWidgetProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateWidgetProxy(int32 NewLayerId, FSlateCachedElementsHandle& CacheHandle)"
  },
  {
    "label": "Debug_GetWidgetInfoTraced()",
    "kind": "Method",
    "detail": "Function (public : # if UE_SLATE_TRACE_ENABLED uint8)",
    "insertText": "Debug_GetWidgetInfoTraced()"
  },
  {
    "label": "Debug_GetLastPaintFrame()",
    "kind": "Method",
    "detail": "Function (Debug_LastTraceInfoSent = InDebug_LastTraceInfoSent ; } # endif # if WITH_SLATE_DEBUGGING uint32)",
    "insertText": "Debug_GetLastPaintFrame()"
  },
  {
    "label": "GetStatID()",
    "kind": "Method",
    "detail": "Function (LastPaintFrame = GFrameNumber ; } # endif public : TStatId)",
    "insertText": "GetStatID(bool bForDeferredUse = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if STATS)",
    "insertText": "if(bForDeferredUse || FThreadStats::IsCollectingData())"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (} return StatID ; } return)",
    "insertText": "TStatId()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# elif ENABLE_STATNAMEDEVENTS)",
    "insertText": "if(!StatID.IsValidStat() && (bForDeferredUse || GCycleStatsShouldEmitNamedEvents))"
  },
  {
    "label": "GetRelativeLayoutScale()",
    "kind": "Method",
    "detail": "Function (# endif } float)",
    "insertText": "GetRelativeLayoutScale(const int32 ChildIndex, float LayoutScaleMultiplier)"
  },
  {
    "label": "ArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren, bool bUpdateAttributes = false)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetAllChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetAllChildren()"
  },
  {
    "label": "Debug_GetChildrenForReflector()",
    "kind": "Method",
    "detail": "Function (} # if WITH_SLATE_DEBUGGING FChildren*)",
    "insertText": "Debug_GetChildrenForReflector()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKeyboardFocus()"
  },
  {
    "label": "HasUserFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<EFocusCause>)",
    "insertText": "HasUserFocus(int32 UserIndex)"
  },
  {
    "label": "HasAnyUserFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<EFocusCause>)",
    "insertText": "HasAnyUserFocus()"
  },
  {
    "label": "HasUserFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserFocusedDescendants(int32 UserIndex)"
  },
  {
    "label": "HasFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFocusedDescendants()"
  },
  {
    "label": "HasAnyUserFocusOrFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyUserFocusOrFocusedDescendants()"
  },
  {
    "label": "HasMouseCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMouseCapture()"
  },
  {
    "label": "HasMouseCaptureByUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMouseCaptureByUser(int32 UserIndex, TOptional<int32> PointerIndex = TOptional<int32>())"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(TAttribute<bool> InEnabledState)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (EnabledStateAttribute .)",
    "insertText": "Assign(*this, MoveTemp(InEnabledState))"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsInteractable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInteractable()"
  },
  {
    "label": "OnToolTipClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolTipClosing()"
  },
  {
    "label": "EnableToolTipForceField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableToolTipForceField(const bool bEnableForceField)"
  },
  {
    "label": "HasToolTipForceField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasToolTipForceField()"
  },
  {
    "label": "IsDirectlyHovered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirectlyHovered()"
  },
  {
    "label": "SetHover()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetHover(TAttribute<bool> InHovered)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bIsHoveredAttributeSet = InHovered .)",
    "insertText": "IsSet()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (HoveredAttribute .)",
    "insertText": "Assign(*this, MoveTemp(InHovered))"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (} public : EVisibility)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVisibility(TAttribute<EVisibility> InVisibility)"
  },
  {
    "label": "GetAccessibleText()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY FText)",
    "insertText": "GetAccessibleText(EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "GetAccessibleSummary()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAccessibleSummary()"
  },
  {
    "label": "IsAccessible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAccessible()"
  },
  {
    "label": "GetAccessibleBehavior()",
    "kind": "Method",
    "detail": "Function (EAccessibleBehavior)",
    "insertText": "GetAccessibleBehavior(EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "CanChildrenBeAccessible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChildrenBeAccessible()"
  },
  {
    "label": "SetAccessibleBehavior()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAccessibleBehavior(EAccessibleBehavior InBehavior, const TAttribute<FText>& InText = TAttribute<FText>(), EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "SetCanChildrenBeAccessible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanChildrenBeAccessible(bool InCanChildrenBeAccessible)"
  },
  {
    "label": "GetDefaultAccessibleText()",
    "kind": "Method",
    "detail": "Function (TOptional<FText>)",
    "insertText": "GetDefaultAccessibleText(EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "IsVolatile()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsVolatile()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (bForceVolatile = bForce ;)",
    "insertText": "Invalidate(EInvalidateWidgetReason::PaintAndVolatility)"
  },
  {
    "label": "ShouldInvalidatePrepassDueToVolatility()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "ShouldInvalidatePrepassDueToVolatility()"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bCachedVolatile = bForceVolatile | |)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "MarkPrepassAsDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkPrepassAsDirty()"
  },
  {
    "label": "IsChildWidgetCulled()",
    "kind": "Method",
    "detail": "Function (bNeedsPrepass = true ; } protected : # if SLATE_CULL_WIDGETS bool)",
    "insertText": "IsChildWidgetCulled(const FSlateRect& MyCullingRect, const FArrangedWidget& ArrangedChild)"
  },
  {
    "label": "IsChildWidgetCulled()",
    "kind": "Method",
    "detail": "Function (# else bool)",
    "insertText": "IsChildWidgetCulled(const FSlateRect&, const FArrangedWidget&)"
  },
  {
    "label": "CacheVolatility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheVolatility()"
  },
  {
    "label": "GetRenderOpacity()",
    "kind": "Method",
    "detail": "Function (} public : float)",
    "insertText": "GetRenderOpacity()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (RenderOpacity = InRenderOpacity ;)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Paint)"
  },
  {
    "label": "SetTag()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetTag(FName InTag)"
  },
  {
    "label": "GetRenderTransform()",
    "kind": "Method",
    "detail": "Function (Tag = InTag ; } const TOptional<FSlateRenderTransform>&)",
    "insertText": "GetRenderTransform()"
  },
  {
    "label": "GetRenderTransformWithRespectToFlowDirection()",
    "kind": "Method",
    "detail": "Function (} TOptional<FSlateRenderTransform>)",
    "insertText": "GetRenderTransformWithRespectToFlowDirection()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} else { TOptional<FSlateRenderTransform> Transform = RenderTransformAttribute .)",
    "insertText": "Get()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FVector2D Translation = Transform .)",
    "insertText": "GetValue().GetTranslation()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Transform .)",
    "insertText": "GetValue().SetTranslation(FVector2D(-Translation.X, Translation.Y))"
  },
  {
    "label": "GetRenderTransformPivotWithRespectToFlowDirection()",
    "kind": "Method",
    "detail": "Function (} return Transform ; } } UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetRenderTransformPivotWithRespectToFlowDirection()"
  },
  {
    "label": "CastToVector2f()",
    "kind": "Method",
    "detail": "Function (FVector2f TransformPivot = UE::)",
    "insertText": "CastToVector2f(RenderTransformPivotAttribute.Get())"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (RenderTransformAttribute .)",
    "insertText": "Assign(*this, MoveTemp(InTransform))"
  },
  {
    "label": "GetRenderTransformPivot()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetRenderTransformPivot()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (RenderTransformPivotAttribute .)",
    "insertText": "Assign(*this, MoveTemp(InTransformPivot))"
  },
  {
    "label": "SetClipping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClipping(EWidgetClipping InClipping)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (CullingBoundsExtension = InCullingBoundsExtension ;)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetCullingBoundsExtension()",
    "kind": "Method",
    "detail": "Function (} } FMargin)",
    "insertText": "GetCullingBoundsExtension()"
  },
  {
    "label": "GetFlowDirectionPreference()",
    "kind": "Method",
    "detail": "Function (} } EFlowDirectionPreference)",
    "insertText": "GetFlowDirectionPreference()"
  },
  {
    "label": "SetToolTipText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToolTipText(const FText& InToolTipText)"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToolTip(const TAttribute<TSharedPtr<IToolTip>>& InToolTip)"
  },
  {
    "label": "SetCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursor(const TAttribute< TOptional<EMouseCursor::Type> >& InCursor)"
  },
  {
    "label": "SetDebugInfo()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetDebugInfo(const ANSICHAR* InType, const ANSICHAR* InFile, int32 OnLine, size_t InAllocSize)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (TOptional<EMouseCursor::Type>)",
    "insertText": "GetCursor()"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (public : template<MetaDataType> TSharedPtr<MetaDataType>)",
    "insertText": "GetMetaData()"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING&& ! UE_BUILD_TEST)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_SlateGetMetaData)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(const auto& MetaDataEntry : MetaData)"
  },
  {
    "label": "MetaDataType()",
    "kind": "Method",
    "detail": "Function (} } return TSharedPtr<)",
    "insertText": "MetaDataType()"
  },
  {
    "label": "GetAllMetaData()",
    "kind": "Method",
    "detail": "Function (} template<MetaDataType> TArray<TSharedRef<MetaDataType>>)",
    "insertText": "GetAllMetaData()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FoundMetaData .)",
    "insertText": "Add(StaticCastSharedRef<MetaDataType>(MetaDataEntry))"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (} } return FoundMetaData ; } template<MetaDataType> void)",
    "insertText": "AddMetadata(const TSharedRef<MetaDataType>& AddMe)"
  },
  {
    "label": "AddMetadataInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataInternal(AddMe)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (} template<MetaDataType> int32)",
    "insertText": "RemoveMetaData(const TSharedRef<MetaDataType>& RemoveMe)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Index = MetaData .)",
    "insertText": "Find(RemoveMe)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "RemoveAtSwap(Index, 1)"
  },
  {
    "label": "RemoveAllMetaData()",
    "kind": "Method",
    "detail": "Function (template<MetaDataType> int32)",
    "insertText": "RemoveAllMetaData()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumBefore = MetaData .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const auto& MetaDataEntry = MetaData [ Index ] ;)",
    "insertText": "if(MetaDataEntry->IsOfType<MetaDataType>())"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (} template<MetaDataType> bool)",
    "insertText": "RemoveMetaData()"
  },
  {
    "label": "SetOnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseButtonUp(FPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseMove(FPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseDoubleClick(FPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseEnter(FNoReplyPointerEventHandler EventHandler)"
  },
  {
    "label": "SetOnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnMouseLeave(FSimpleNoReplyPointerEventHandler EventHandler)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTypeAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTypeAsString()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetType()"
  },
  {
    "label": "GetReadableLocation()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReadableLocation()"
  },
  {
    "label": "GetCreatedInLocation()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCreatedInLocation()"
  },
  {
    "label": "GetTag()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTag()"
  },
  {
    "label": "GetAllocSize()",
    "kind": "Method",
    "detail": "Function (# if STATS size_t)",
    "insertText": "GetAllocSize()"
  },
  {
    "label": "GetDisabledForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetDisabledForegroundColor()"
  },
  {
    "label": "GetCachedGeometry()",
    "kind": "Method",
    "detail": "Function (const FGeometry&)",
    "insertText": "GetCachedGeometry()"
  },
  {
    "label": "GetTickSpaceGeometry()",
    "kind": "Method",
    "detail": "Function (const FGeometry&)",
    "insertText": "GetTickSpaceGeometry()"
  },
  {
    "label": "GetPaintSpaceGeometry()",
    "kind": "Method",
    "detail": "Function (const FGeometry&)",
    "insertText": "GetPaintSpaceGeometry()"
  },
  {
    "label": "GetCurrentClippingState()",
    "kind": "Method",
    "detail": "Function (const TOptional<FSlateClippingState>&)",
    "insertText": "GetCurrentClippingState()"
  },
  {
    "label": "SWidgetConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SWidgetConstruct(const FSlateBaseNamedArgs& Args)"
  },
  {
    "label": "IsConstructed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstructed()"
  },
  {
    "label": "FindChildGeometries_Helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindChildGeometries_Helper(const FGeometry& MyGeometry, const TSet< TSharedRef<SWidget> >& WidgetsToFind, TMap<TSharedRef<SWidget>, FArrangedWidget>& OutResult)"
  },
  {
    "label": "FindChildGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "FindChildGeometry(const FGeometry& MyGeometry, TSharedRef<SWidget> WidgetToFind)"
  },
  {
    "label": "FindChildUnderMouse()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChildUnderMouse(const FArrangedChildren& Children, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "FindChildUnderPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChildUnderPosition(const FArrangedChildren& Children, const UE::Slate::FDeprecateVector2DParameter& ArrangedSpacePosition)"
  },
  {
    "label": "ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeEnabled(bool InParentEnabled)"
  },
  {
    "label": "GetFocusBrush()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetFocusBrush()"
  },
  {
    "label": "OnClippingChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnClippingChanged()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "Prepass_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepass_Internal(float LayoutScaleMultiplier)"
  },
  {
    "label": "GetPrepassLayoutScaleMultiplier()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "GetPrepassLayoutScaleMultiplier()"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<FActiveTimerHandle>)",
    "insertText": "RegisterActiveTimer(float TickPeriod, FWidgetActiveTimerDelegate TickFunction)"
  },
  {
    "label": "UnRegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterActiveTimer(const TSharedRef<FActiveTimerHandle>& ActiveTimerHandle)"
  },
  {
    "label": "HasActiveTimers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveTimers()"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (protected : template<TargetValueType,SourceValueType> bool)",
    "insertText": "SetAttribute(TAttribute<TargetValueType>& TargetValue, const TAttribute<SourceValueType>& SourceValue, EInvalidateWidgetReason BaseInvalidationReason)"
  },
  {
    "label": "GetEnabledStateAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<bool>)",
    "insertText": "GetEnabledStateAttribute()"
  },
  {
    "label": "GetHoveredAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<bool>)",
    "insertText": "GetHoveredAttribute()"
  },
  {
    "label": "GetVisibilityAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<EVisibility>)",
    "insertText": "GetVisibilityAttribute()"
  },
  {
    "label": "GetRenderTransformAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<TOptional<FSlateRenderTransform>>)",
    "insertText": "GetRenderTransformAttribute()"
  },
  {
    "label": "GetRenderTransformPivotAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<FVector2D>)",
    "insertText": "GetRenderTransformPivotAttribute()"
  },
  {
    "label": "SWidget()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "SWidget()"
  },
  {
    "label": "MakeChild()",
    "kind": "Method",
    "detail": "Function (# endif private : # if ! UE_BUILD_SHIPPING FName CreatedInLocation ; # endif # if WITH_SLATE_DEBUGGING uint32 LastPaintFrame = 0 ; uint8 Debug_DestroyedTag = 0 xDC ; # endif # if UE_SLATE_TRACE_ENABLED uint8 Debug_LastTraceInfoSent = 0 ; # endif # if UE_SLATE_WITH_WIDGET_UNIQUE_IDENTIFIER uint64 UniqueIdentifier ; # endif # if STATS size_t AllocSize ; # endif # if STATS | | ENABLE_STATNAMEDEVENTS TStatId StatID ; # endif # if ENABLE_STATNAMEDEVENTS PROFILER_CHAR* StatIDStringStorage ; # endif } ; FArrangedWidget)",
    "insertText": "MakeChild(const TSharedRef<SWidget>& ChildWidget, const UE::Slate::FDeprecateVector2DParameter& InLocalSize, const FSlateLayoutTransform& LayoutTransform)"
  },
  {
    "label": "CastToVector2f()",
    "kind": "Method",
    "detail": "Function (const FVector2f RenderTransformPivot = UE::)",
    "insertText": "CastToVector2f(ChildWidget->GetRenderTransformPivotWithRespectToFlowDirection())"
  },
  {
    "label": "FArrangedWidget()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FArrangedWidget(ChildWidget, MakeChild(InLocalSize, LayoutTransform))"
  },
  {
    "label": "MakeChild()",
    "kind": "Method",
    "detail": "Function (} } FArrangedWidget)",
    "insertText": "MakeChild(const TSharedRef<SWidget>& ChildWidget, const FLayoutGeometry& LayoutGeometry)"
  },
  {
    "label": "MakeChild()",
    "kind": "Method",
    "detail": "Function (} FArrangedWidget)",
    "insertText": "MakeChild(const TSharedRef<SWidget>& ChildWidget, const UE::Slate::FDeprecateVector2DParameter& ChildOffset, const UE::Slate::FDeprecateVector2DParameter& InLocalSize, float ChildScale)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (const bool bWasBound = TargetValue .)",
    "insertText": "IsBound()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TargetValue = SourceValue ; EInvalidateWidgetReason InvalidateReason = BaseInvalidationReason ;)",
    "insertText": "if(bBoundnessChanged)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (InvalidateReason | = EInvalidateWidgetReason::PaintAndVolatility ; } ThisWidget .)",
    "insertText": "Invalidate(InvalidateReason)"
  }
]