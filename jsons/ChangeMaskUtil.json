[
  {
    "label": "FMemStackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemStackBase"
  },
  {
    "label": "FGlobalChangeMaskAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalChangeMaskAllocator"
  },
  {
    "label": "FMemStackChangeMaskAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemStackChangeMaskAllocator"
  },
  {
    "label": "FChangeMaskStorageOrPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChangeMaskStorageOrPointer"
  },
  {
    "label": "FChangeMaskUtil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeMaskUtil"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / NetBitArray . h \" class FMemStackBase ; namespace UE::Net::Private { using ChangeMaskStorageType = FNetBitArrayView::StorageWordType ; struct FGlobalChangeMaskAllocator { void*)",
    "insertText": "Alloc(uint32 Size, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Pointer)"
  },
  {
    "label": "FMemStackChangeMaskAllocator()",
    "kind": "Method",
    "detail": "Function (} ; struct FMemStackChangeMaskAllocator { FMemStackBase* MemStack ;)",
    "insertText": "FMemStackChangeMaskAllocator(FMemStackBase* InMemStack)"
  },
  {
    "label": "UseInlinedStorage()",
    "kind": "Method",
    "detail": "Function (} ; class FChangeMaskStorageOrPointer { public : typedef ChangeMaskStorageType StorageWordType ; bool)",
    "insertText": "UseInlinedStorage(uint32 BitCount)"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (} StorageWordType*)",
    "insertText": "GetPointer(uint32 BitCount)"
  },
  {
    "label": "FChangeMaskStorageOrPointer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FChangeMaskStorageOrPointer() : ChangeMaskOrPointer(0)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} template<AllocatorType> void)",
    "insertText": "Alloc(FChangeMaskStorageOrPointer& Storage, uint32 BitCount, AllocatorType& Allocator)"
  },
  {
    "label": "AllocAndInitBitArray()",
    "kind": "Method",
    "detail": "Function (template<AllocatorType> FNetBitArrayView)",
    "insertText": "AllocAndInitBitArray(FChangeMaskStorageOrPointer& Storage, uint32 BitCount, AllocatorType& Allocator)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (template<AllocatorType> void)",
    "insertText": "Free(const FChangeMaskStorageOrPointer& Storage, uint32 BitCount, AllocatorType& Allocator)"
  },
  {
    "label": "MakeChangeMask()",
    "kind": "Method",
    "detail": "Function (private : uint64 ChangeMaskOrPointer ; } ; struct FChangeMaskUtil { FNetBitArrayView)",
    "insertText": "MakeChangeMask(const FChangeMaskStorageOrPointer& Storage, uint32 BitCount)"
  },
  {
    "label": "CopyChangeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyChangeMask(FChangeMaskStorageOrPointer& DestStorage, const FNetBitArrayView& ChangeMask)"
  },
  {
    "label": "CopyChangeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyChangeMask(FChangeMaskStorageOrPointer& DestStorage, FChangeMaskStorageOrPointer& SrcStorage, uint32 BitCount)"
  },
  {
    "label": "CopyChangeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyChangeMask(ChangeMaskStorageType* DstData, const ChangeMaskStorageType* SrcData, uint32 BitCount)"
  },
  {
    "label": "UseInlinedStorage()",
    "kind": "Method",
    "detail": "Function (uint64* Ptr =)",
    "insertText": "UseInlinedStorage(BitCount) ? reinterpret_cast<uint64*>(&ChangeMaskOrPointer) : reinterpret_cast<uint64*>(ChangeMaskOrPointer)"
  },
  {
    "label": "UseInlinedStorage()",
    "kind": "Method",
    "detail": "Function (const uint64* Ptr =)",
    "insertText": "UseInlinedStorage(BitCount) ? reinterpret_cast<const uint64*>(&ChangeMaskOrPointer) : reinterpret_cast<const uint64*>(ChangeMaskOrPointer)"
  },
  {
    "label": "ChangeMaskOrPointer()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "ChangeMaskOrPointer(uint64)(Allocator.Alloc(GetStorageSize(BitCount), alignof(StorageWordType)))"
  },
  {
    "label": "FNetBitArrayView()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FNetBitArrayView(Storage.GetPointer(BitCount), BitCount, FNetBitArrayView::ResetOnInit)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "Free((void*)Storage.ChangeMaskOrPointer)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&DstData[0], &SrcData[0], FChangeMaskStorageOrPointer::GetStorageSize(BitCount))"
  },
  {
    "label": "CopyChangeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyChangeMask(DestStorage.GetPointer(BitCount), SrcStorage.GetPointer(BitCount), BitCount)"
  },
  {
    "label": "GetNumBits()",
    "kind": "Method",
    "detail": "Function (const uint32 BitCount = ChangeMask .)",
    "insertText": "GetNumBits()"
  },
  {
    "label": "DstChangeMask()",
    "kind": "Method",
    "detail": "Function (FNetBitArrayView)",
    "insertText": "DstChangeMask(DestStorage.GetPointer(BitCount), BitCount, FNetBitArrayView::NoResetNoValidate)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (DstChangeMask .)",
    "insertText": "Copy(ChangeMask)"
  }
]