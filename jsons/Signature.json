[
  {
    "label": "CDataDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDataDefinition"
  },
  {
    "label": "SSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SSignature"
  },
  {
    "label": "SSignature()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / Array . h \" # include \" uLang / Semantics / SemanticTypes . h \" namespace uLang { class CDataDefinition ; struct SSignature { using ParamDefinitions = TArray<CDataDefinition*> ;)",
    "insertText": "SSignature(const CFunctionType& FunctionType, ParamDefinitions&& Params) : _FunctionType(&FunctionType) , _Params(Move(Params))"
  },
  {
    "label": "SSignature()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SSignature()"
  },
  {
    "label": "SetFunctionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFunctionType(const CFunctionType* FunctionType)"
  },
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (_FunctionType = FunctionType ; } void)",
    "insertText": "SetParams(ParamDefinitions&& Params)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (_Params =)",
    "insertText": "Move(Params)"
  },
  {
    "label": "EmptyParams()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmptyParams()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (_Params .)",
    "insertText": "Empty()"
  },
  {
    "label": "HasParams()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasParams()"
  },
  {
    "label": "NumParams()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "NumParams()"
  },
  {
    "label": "GetParams()",
    "kind": "Method",
    "detail": "Function (} const ParamDefinitions&)",
    "insertText": "GetParams()"
  },
  {
    "label": "GetParamsType()",
    "kind": "Method",
    "detail": "Function (const CTypeBase& ParamsType = _FunctionType ->)",
    "insertText": "GetParamsType()"
  },
  {
    "label": "GetReturnType()",
    "kind": "Method",
    "detail": "Function (} const CTypeBase*)",
    "insertText": "GetReturnType()"
  },
  {
    "label": "GetFunctionType()",
    "kind": "Method",
    "detail": "Function (} const CFunctionType*)",
    "insertText": "GetFunctionType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const SSignature& Left, const SSignature& Right)"
  }
]