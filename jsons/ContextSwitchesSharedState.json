[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FBaseTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseTimingTrack"
  },
  {
    "label": "ITimingEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingEvent"
  },
  {
    "label": "ITimingViewSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingViewSession"
  },
  {
    "label": "FThreadTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTimingTrack"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FCpuCoreTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCpuCoreTimingTrack"
  },
  {
    "label": "FContextSwitchesTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContextSwitchesTimingTrack"
  },
  {
    "label": "FContextSwitchesStateCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContextSwitchesStateCommands"
  },
  {
    "label": "FContextSwitchesSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContextSwitchesSharedState"
  },
  {
    "label": "FContextSwitchesStateCommands()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Framework / Commands / Commands . h \" # include \" Insights / ITimingViewExtender . h \" class FMenuBuilder ; namespace TraceServices { class IAnalysisSession ; } class FBaseTimingTrack ; class ITimingEvent ; namespace UE::Insights::Timing { class ITimingViewSession ; } namespace UE::Insights::TimingProfiler { class FThreadTimingTrack ; class STimingView ; } namespace UE::Insights::ContextSwitches { class FCpuCoreTimingTrack ; class FContextSwitchesTimingTrack ; class FContextSwitchesStateCommands : public TCommands<FContextSwitchesStateCommands> { public :)",
    "insertText": "FContextSwitchesStateCommands()"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "FContextSwitchesSharedState()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandInfo> Command_ShowCoreTracks ; TSharedPtr<FUICommandInfo> Command_ShowContextSwitches ; TSharedPtr<FUICommandInfo> Command_ShowOverlays ; TSharedPtr<FUICommandInfo> Command_ShowExtendedLines ; TSharedPtr<FUICommandInfo> Command_ShowNonTargetProcessEvents ; TSharedPtr<FUICommandInfo> Command_NavigateToCpuThreadEvent ; TSharedPtr<FUICommandInfo> Command_DockCpuThreadTrackToBottom ; TSharedPtr<FUICommandInfo> Command_NavigateToCpuCoreEvent ; TSharedPtr<FUICommandInfo> Command_DockCpuCoreTrackToTop ; } ; class FContextSwitchesSharedState : public Timing::ITimingViewExtender,public TSharedFromThis<FContextSwitchesSharedState> { public :)",
    "insertText": "FContextSwitchesSharedState(TimingProfiler::STimingView* InTimingView)"
  },
  {
    "label": "FContextSwitchesSharedState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FContextSwitchesSharedState()"
  },
  {
    "label": "OnBeginSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "OnEndSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(Timing::ITimingViewSession& InSession, const TraceServices::IAnalysisSession& InAnalysisSession)"
  },
  {
    "label": "ExtendCpuTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendCpuTracksFilterMenu(Timing::ITimingViewSession& InSession, FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "AddQuickFindFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQuickFindFilters(TSharedPtr<FFilterConfigurator> FilterConfigurator)"
  },
  {
    "label": "GetTimingView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TimingProfiler::STimingView>)",
    "insertText": "GetTimingView()"
  },
  {
    "label": "AreContextSwitchesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreContextSwitchesAvailable()"
  },
  {
    "label": "AreCoreTracksVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreCoreTracksVisible()"
  },
  {
    "label": "SetCoreTracksVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoreTracksVisible(true)"
  },
  {
    "label": "HideCoreTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideCoreTracks()"
  },
  {
    "label": "SetCoreTracksVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoreTracksVisible(false)"
  },
  {
    "label": "ToggleCoreTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleCoreTracks()"
  },
  {
    "label": "SetCoreTracksVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoreTracksVisible(!bAreCoreTracksVisible)"
  },
  {
    "label": "SetCoreTracksVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCoreTracksVisible(bool bOnOff)"
  },
  {
    "label": "AreContextSwitchesVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreContextSwitchesVisible()"
  },
  {
    "label": "SetContextSwitchesVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContextSwitchesVisible(true)"
  },
  {
    "label": "HideContextSwitches()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideContextSwitches()"
  },
  {
    "label": "SetContextSwitchesVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContextSwitchesVisible(false)"
  },
  {
    "label": "ToggleContextSwitches()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleContextSwitches()"
  },
  {
    "label": "SetContextSwitchesVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContextSwitchesVisible(!bAreContextSwitchesVisible)"
  },
  {
    "label": "SetContextSwitchesVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetContextSwitchesVisible(bool bOnOff)"
  },
  {
    "label": "AreOverlaysVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreOverlaysVisible()"
  },
  {
    "label": "SetOverlaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlaysVisible(true)"
  },
  {
    "label": "HideOverlays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideOverlays()"
  },
  {
    "label": "SetOverlaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlaysVisible(false)"
  },
  {
    "label": "ToggleOverlays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleOverlays()"
  },
  {
    "label": "SetOverlaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlaysVisible(!bAreOverlaysVisible)"
  },
  {
    "label": "SetOverlaysVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOverlaysVisible(bool bOnOff)"
  },
  {
    "label": "AreExtendedLinesVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreExtendedLinesVisible()"
  },
  {
    "label": "SetExtendedLinesVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtendedLinesVisible(true)"
  },
  {
    "label": "HideExtendedLines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideExtendedLines()"
  },
  {
    "label": "SetExtendedLinesVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtendedLinesVisible(false)"
  },
  {
    "label": "ToggleExtendedLines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleExtendedLines()"
  },
  {
    "label": "SetExtendedLinesVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtendedLinesVisible(!bAreExtendedLinesVisible)"
  },
  {
    "label": "SetExtendedLinesVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExtendedLinesVisible(bool bOnOff)"
  },
  {
    "label": "AreNonTargetProcessEventsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreNonTargetProcessEventsVisible()"
  },
  {
    "label": "SetNonTargetProcessEventsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonTargetProcessEventsVisible(true)"
  },
  {
    "label": "HideNonTargetProcessEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideNonTargetProcessEvents()"
  },
  {
    "label": "SetNonTargetProcessEventsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonTargetProcessEventsVisible(false)"
  },
  {
    "label": "ToggleNonTargetProcessEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleNonTargetProcessEvents()"
  },
  {
    "label": "SetNonTargetProcessEventsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonTargetProcessEventsVisible(!bAreNonTargetProcessEventsVisible)"
  },
  {
    "label": "SetNonTargetProcessEventsVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNonTargetProcessEventsVisible(bool bOnOff)"
  },
  {
    "label": "SetTargetTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetTimingEvent(const TSharedPtr<const ITimingEvent> InEvent)"
  },
  {
    "label": "AddCommands()",
    "kind": "Method",
    "detail": "Function (TargetTimingEvent = InEvent ; } void)",
    "insertText": "AddCommands()"
  },
  {
    "label": "GetThreadInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetThreadInfo(uint32 InSystemThreadId, uint32& OutThreadId, const TCHAR*& OutThreadName)"
  },
  {
    "label": "GetThreadTimingTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TimingProfiler::FThreadTimingTrack>)",
    "insertText": "GetThreadTimingTrack(uint32 ThreadId)"
  },
  {
    "label": "GetCpuCoreTimingTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCpuCoreTimingTrack>)",
    "insertText": "GetCpuCoreTimingTrack(uint32 CoreNumber)"
  },
  {
    "label": "AddCoreTracks()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddCoreTracks()"
  },
  {
    "label": "RemoveCoreTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCoreTracks()"
  },
  {
    "label": "AddContextSwitchesChildTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContextSwitchesChildTracks()"
  },
  {
    "label": "RemoveContextSwitchesChildTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveContextSwitchesChildTracks()"
  },
  {
    "label": "BuildSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "Command_ShowCoreTracks_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Command_ShowCoreTracks_Execute()"
  },
  {
    "label": "Command_ShowCoreTracks_CanExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowCoreTracks_CanExecute()"
  },
  {
    "label": "Command_ShowCoreTracks_IsChecked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowCoreTracks_IsChecked()"
  },
  {
    "label": "Command_ShowContextSwitches_Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Command_ShowContextSwitches_Execute()"
  },
  {
    "label": "Command_ShowContextSwitches_CanExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowContextSwitches_CanExecute()"
  },
  {
    "label": "Command_ShowContextSwitches_IsChecked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowContextSwitches_IsChecked()"
  },
  {
    "label": "Command_ShowOverlays_Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Command_ShowOverlays_Execute()"
  },
  {
    "label": "Command_ShowOverlays_CanExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowOverlays_CanExecute()"
  },
  {
    "label": "Command_ShowOverlays_IsChecked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowOverlays_IsChecked()"
  },
  {
    "label": "Command_ShowExtendedLines_Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Command_ShowExtendedLines_Execute()"
  },
  {
    "label": "Command_ShowExtendedLines_CanExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowExtendedLines_CanExecute()"
  },
  {
    "label": "Command_ShowExtendedLines_IsChecked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowExtendedLines_IsChecked()"
  },
  {
    "label": "Command_ShowNonTargetProcessEvents_Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Command_ShowNonTargetProcessEvents_Execute()"
  },
  {
    "label": "Command_ShowNonTargetProcessEvents_CanExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowNonTargetProcessEvents_CanExecute()"
  },
  {
    "label": "Command_ShowNonTargetProcessEvents_IsChecked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Command_ShowNonTargetProcessEvents_IsChecked()"
  },
  {
    "label": "IsValidCpuCoreEventSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidCpuCoreEventSelected()"
  },
  {
    "label": "IsValidContextSwitchEventSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidContextSwitchEventSelected()"
  },
  {
    "label": "Command_NavigateToCpuThreadEvent_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Command_NavigateToCpuThreadEvent_Execute()"
  },
  {
    "label": "Command_NavigateToCpuThreadEvent_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Command_NavigateToCpuThreadEvent_CanExecute()"
  },
  {
    "label": "Command_DockCpuThreadTrackToBottom_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Command_DockCpuThreadTrackToBottom_Execute()"
  },
  {
    "label": "Command_DockCpuThreadTrackToBottom_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Command_DockCpuThreadTrackToBottom_CanExecute()"
  },
  {
    "label": "Command_NavigateToCpuCoreEvent_Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Command_NavigateToCpuCoreEvent_Execute()"
  },
  {
    "label": "Command_NavigateToCpuCoreEvent_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Command_NavigateToCpuCoreEvent_CanExecute()"
  },
  {
    "label": "Command_DockCpuCoreTrackToTop_Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Command_DockCpuCoreTrackToTop_Execute()"
  },
  {
    "label": "Command_DockCpuCoreTrackToTop_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Command_DockCpuCoreTrackToTop_CanExecute()"
  },
  {
    "label": "PopulateCoreEventNameSuggestionList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateCoreEventNameSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  }
]