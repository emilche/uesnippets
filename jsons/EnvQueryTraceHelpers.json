[
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBatchTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchTrace"
  },
  {
    "label": "ECollisionChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionChannel"
  },
  {
    "label": "FBatchTrace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / CollisionProfile . h \" # include \" Engine / EngineTypes . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" CollisionQueryParams . h \" # include \" WorldCollision . h \" # include \" Engine / World . h \" class ANavigationData ; class Error ; namespace FEQSHelpers { enum class ETraceMode : uint8 { Keep,Discard,} ; struct FBatchTrace { UWorld* World ; const FVector Extent ; const FCollisionQueryParams QueryParams ; FCollisionResponseParams ResponseParams ; enum ECollisionChannel Channel ; ETraceMode TraceMode ; TArray<uint8> TraceHits ;)",
    "insertText": "FBatchTrace(UWorld* InWorld, enum ECollisionChannel InChannel, const FCollisionQueryParams& InParams, const FVector& InExtent, ETraceMode InTraceMode) : World(InWorld), Extent(InExtent), QueryParams(InParams), Channel(InChannel), TraceMode(InTraceMode)"
  },
  {
    "label": "FBatchTrace()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBatchTrace(UWorld* InWorld, const FEnvTraceData& TraceData, const FCollisionQueryParams& InParams, const FVector& InExtent, ETraceMode InTraceMode) : World(InWorld), Extent(InExtent), QueryParams(InParams), TraceMode(InTraceMode)"
  },
  {
    "label": "GetChannelAndResponseParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChannelAndResponseParams(TraceData.TraceProfileName, Channel, ResponseParams)"
  },
  {
    "label": "ConvertToCollisionChannel()",
    "kind": "Method",
    "detail": "Function (} else { Channel =)",
    "insertText": "ConvertToCollisionChannel(TraceData.TraceChannel)"
  },
  {
    "label": "RunLineTrace()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "RunLineTrace(const FVector& StartPos, const FVector& EndPos, FVector& HitPos)"
  },
  {
    "label": "RunSphereTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunSphereTrace(const FVector& StartPos, const FVector& EndPos, FVector& HitPos)"
  },
  {
    "label": "RunCapsuleTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunCapsuleTrace(const FVector& StartPos, const FVector& EndPos, FVector& HitPos)"
  },
  {
    "label": "RunBoxTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunBoxTrace(const FVector& StartPos, const FVector& EndPos, FVector& HitPos)"
  },
  {
    "label": "DoSingleSourceMultiDestinations()",
    "kind": "Method",
    "detail": "Function (template<EEnvTraceShape::Type TraceType> void)",
    "insertText": "DoSingleSourceMultiDestinations(const FVector& Source, TArray<FNavLocation>& Points)"
  },
  {
    "label": "DoMultiSourceMultiDestinations2D()",
    "kind": "Method",
    "detail": "Function (} template<EEnvTraceShape::Type TraceType> void)",
    "insertText": "DoMultiSourceMultiDestinations2D(const TArray<FRayStartEnd>& Rays, TArray<FNavLocation>& OutPoints)"
  },
  {
    "label": "DoProject()",
    "kind": "Method",
    "detail": "Function (} template<EEnvTraceShape::Type TraceType> void)",
    "insertText": "DoProject(TArray<FNavLocation>& Points, float StartOffsetZ, float EndOffsetZ, float HitOffsetZ)"
  },
  {
    "label": "RunNavRaycasts()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "RunNavRaycasts(const ANavigationData& NavData, const UObject& Querier, const FEnvTraceData& TraceData, const FVector& SourcePt, TArray<FNavLocation>& Points, const ETraceMode TraceMode = ETraceMode::Keep)"
  },
  {
    "label": "RunNavProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNavProjection(const ANavigationData& NavData, const UObject& Querier, const FEnvTraceData& TraceData, TArray<FNavLocation>& Points, const ETraceMode TraceMode = ETraceMode::Discard)"
  },
  {
    "label": "RunPhysRaycasts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPhysRaycasts(UWorld* World, const FEnvTraceData& TraceData, const FVector& SourcePt, TArray<FNavLocation>& Points, const TArray<AActor*>& IgnoredActors, const ETraceMode TraceMode = ETraceMode::Keep)"
  },
  {
    "label": "RunPhysProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPhysProjection(UWorld* World, const FEnvTraceData& TraceData, TArray<FNavLocation>& Points, const ETraceMode TraceMode = ETraceMode::Discard)"
  },
  {
    "label": "RunPhysProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPhysProjection(UWorld* World, const FEnvTraceData& TraceData, TArray<FNavLocation>& Points, TArray<uint8>& TraceHits)"
  },
  {
    "label": "RunRaycastsOnNavHitOnlyWalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunRaycastsOnNavHitOnlyWalls(const ANavigationData& NavData, const UObject& Querier, const FEnvTraceData& TraceData, const FVector& SourcePt, TArray<FNavLocation>& Points, const TArray<AActor*>& IgnoredActors, const ETraceMode TraceMode = ETraceMode::Keep)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(4.12, \"This function is now deprecated, please use version with Querier argument instead.\") void RunNavRaycasts(const ANavigationData& NavData, const FEnvTraceData& TraceData, const FVector& SourcePt, TArray<FNavLocation>& Points, ETraceMode TraceMode = ETraceMode::Keep)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(4.12, \"This function is now deprecated, please use version with Querier argument instead.\") void RunNavProjection(const ANavigationData& NavData, const FEnvTraceData& TraceData, TArray<FNavLocation>& Points, ETraceMode TraceMode = ETraceMode::Discard)"
  }
]