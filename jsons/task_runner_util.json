[
  {
    "label": "PostTaskAndReplyWithResult()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_TASK_RUNNER_UTIL_H_ # define BASE_TASK_TASK_RUNNER_UTIL_H_ # include<memory> # include<utility> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / check . h \" # include \" base / task / post_task_and_reply_with_result_internal . h \" # include \" base / task / task_runner . h \" namespace base { template<TaskReturnType,ReplyArgType> bool)",
    "insertText": "PostTaskAndReplyWithResult(TaskRunner* task_runner, const Location& from_here, OnceCallback<TaskReturnType()> task, OnceCallback<void(ReplyArgType)> reply)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(task)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(reply)"
  },
  {
    "label": "TaskReturnType()",
    "kind": "Method",
    "detail": "Function (auto* result = new std::unique_ptr<)",
    "insertText": "TaskReturnType()"
  }
]