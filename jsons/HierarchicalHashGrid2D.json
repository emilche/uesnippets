[
  {
    "label": "THierarchicalHashGrid2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THierarchicalHashGrid2D"
  },
  {
    "label": "FCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCell"
  },
  {
    "label": "FCellLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellLocation"
  },
  {
    "label": "FItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FItem"
  },
  {
    "label": "FCellRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellRect"
  },
  {
    "label": "FCellRectIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellRectIterator"
  },
  {
    "label": "FCell()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / StaticArray . h \" template<int32 InNumLevels = 3,int32 InLevelRatio = 4,InItemIDType = uint32> class THierarchicalHashGrid2D { public : typedef InItemIDType ItemIDType ; const int32 NumLevels = InNumLevels ; const int32 LevelRatio = InLevelRatio ; struct FCell {)",
    "insertText": "FCell() : X(0), Y(0), Level(0)"
  },
  {
    "label": "FCell()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCell(const int32 InX, const int32 InY, const int32 InLevel) : X(InX), Y(InY), Level(InLevel)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} int32 X,Y,Level ; int32 First = INDEX_NONE ; int32 ChildItemCount = 0 ; uint32)",
    "insertText": "GetTypeHash(const FCell& Cell)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (uint32 H1 = 0 x8da6b343 ; uint32 H2 = 0 xd8163841 ; uint32 H3 = 0 xcb1ab31f ;)",
    "insertText": "return(H1 * uint32(Cell.X) + H2 * uint32(Cell.Y) + H3 * uint32(Cell.Level))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCell& RHS)"
  },
  {
    "label": "FCellLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCellLocation(const int32 InX, const int32 InY, const int32 InLevel) : X(InX), Y(InY), Level(InLevel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCellLocation& RHS)"
  },
  {
    "label": "FCellRect()",
    "kind": "Method",
    "detail": "Function (} int32 X = 0 ; int32 Y = 0 ; int32 Level = INDEX_NONE ; } ; struct FItem { ItemIDType ID = 0 ; int32 Next = INDEX_NONE ; } ; struct FCellRect {)",
    "insertText": "FCellRect()"
  },
  {
    "label": "FCellRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCellRect(const int32 InMinX, const int32 InMinY, const int32 InMaxX, const int32 InMaxY) : MinX(InMinX), MinY(InMinY), MaxX(InMaxX), MaxY(InMaxY)"
  },
  {
    "label": "THierarchicalHashGrid2D()",
    "kind": "Method",
    "detail": "Function (} int32 MinX = 0 ; int32 MinY = 0 ; int32 MaxX = 0 ; int32 MaxY = 0 ; } ; struct FCellRectIterator { int32 X = 0 ; int32 Y = 0 ; int32 Level = 0 ; FCellRect Rect ; } ;)",
    "insertText": "THierarchicalHashGrid2D(const float InCellSize = 500.f) : SpillList(INDEX_NONE)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float CurrCellSize = InCellSize ;)",
    "insertText": "for(int32 i = 0; i < NumLevels; i++)"
  },
  {
    "label": "CurrCellSize()",
    "kind": "Method",
    "detail": "Function (CellSize [ i ] = CurrCellSize ; InvCellSize [ i ] = 1 . 0 f / CurrCellSize ;)",
    "insertText": "CurrCellSize(float)(LevelRatio)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (LevelItemCount [ i ] = 0 ; } } void)",
    "insertText": "Initialize(const float InCellSize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LevelItemCount [ i ] = 0 ; } } FCellLocation)",
    "insertText": "Add(const ItemIDType ID, const FBox& Bounds)"
  },
  {
    "label": "CalcCellLocation()",
    "kind": "Method",
    "detail": "Function (const FCellLocation Location =)",
    "insertText": "CalcCellLocation(Bounds)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(ID, Location)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 Idx = Items .)",
    "insertText": "AddUninitialized()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FItem& Item = Items [ Idx ] ; Item . ID = ID ;)",
    "insertText": "if(Location.Level == INDEX_NONE)"
  },
  {
    "label": "FindOrAddCell()",
    "kind": "Method",
    "detail": "Function (Item . Next = SpillList ; SpillList = Idx ; } else { FCell& Cell =)",
    "insertText": "FindOrAddCell(Location.X, Location.Y, Location.Level)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Item . Next = Cell . First ; Cell . First = Idx ; LevelItemCount [ Location . Level ] + + ; FCellLocation ParentLocation = Location ;)",
    "insertText": "while(ParentLocation.Level < NumLevels - 1)"
  },
  {
    "label": "LevelDown()",
    "kind": "Method",
    "detail": "Function (ParentLocation . X =)",
    "insertText": "LevelDown(ParentLocation.X)"
  },
  {
    "label": "LevelDown()",
    "kind": "Method",
    "detail": "Function (ParentLocation . Y =)",
    "insertText": "LevelDown(ParentLocation.Y)"
  },
  {
    "label": "FindOrAddCell()",
    "kind": "Method",
    "detail": "Function (ParentLocation . Level + + ; FCell& ParentCell =)",
    "insertText": "FindOrAddCell(ParentLocation.X, ParentLocation.Y, ParentLocation.Level)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ParentCell . ChildItemCount + + ; } } } void)",
    "insertText": "Remove(const ItemIDType ID, const FBox& OldBounds)"
  },
  {
    "label": "CalcCellLocation()",
    "kind": "Method",
    "detail": "Function (const FCellLocation OldLocation =)",
    "insertText": "CalcCellLocation(OldBounds)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(ID, OldLocation)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const ItemIDType ID, const FCellLocation& OldLocation)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 PrevIdx = INDEX_NONE ;)",
    "insertText": "for(int32 Idx = SpillList; Idx != INDEX_NONE; PrevIdx = Idx, Idx = Items[Idx].Next)"
  },
  {
    "label": "RemoveAtUninitialized()",
    "kind": "Method",
    "detail": "Function (SpillList = Items [ Idx ] . Next ; } else { Items [ PrevIdx ] . Next = Items [ Idx ] . Next ; } Items .)",
    "insertText": "RemoveAtUninitialized(Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } } else {)",
    "insertText": "if(FCell* Cell = FindCellMutable(OldLocation.X, OldLocation.Y, OldLocation.Level))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 PrevIdx = INDEX_NONE ;)",
    "insertText": "for(int32 Idx = Cell->First; Idx != INDEX_NONE; PrevIdx = Idx, Idx = Items[Idx].Next)"
  },
  {
    "label": "FindCellMutable()",
    "kind": "Method",
    "detail": "Function (ParentLocation . Level + + ; FCell* ParentCell =)",
    "insertText": "FindCellMutable(ParentLocation.X, ParentLocation.Y, ParentLocation.Level)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (ParentCell -> ChildItemCount - - ; } } } } } FCellLocation)",
    "insertText": "Move(const ItemIDType ID, const FBox& OldBounds, const FBox& NewBounds)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (} FCellLocation)",
    "insertText": "Move(const ItemIDType ID, const FCellLocation& OldLocation, const FBox& NewBounds)"
  },
  {
    "label": "CalcCellLocation()",
    "kind": "Method",
    "detail": "Function (const FCellLocation NewLocation =)",
    "insertText": "CalcCellLocation(NewBounds)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(ID, NewLocation)"
  },
  {
    "label": "QuerySmall()",
    "kind": "Method",
    "detail": "Function (} return NewLocation ; } void)",
    "insertText": "QuerySmall(const FBox& Bounds, TArray<ItemIDType>& OutResults)"
  },
  {
    "label": "CalcQueryBounds()",
    "kind": "Method",
    "detail": "Function (continue ; } FCellRect Rect =)",
    "insertText": "CalcQueryBounds(Bounds, Level)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutResults .)",
    "insertText": "Add(Items[Idx].ID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "for(int32 Idx = SpillList; Idx != INDEX_NONE; Idx = Items[Idx].Next)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Query(const FBox& Bounds, TArray<ItemIDType>& OutResults)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FCellRect Rects [ NumLevels ] ; FCellRectIterator Iters [ NumLevels ] ; int32 IterIdx = 0 ;)",
    "insertText": "for(int32 Level = 0; Level < NumLevels; Level++)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} const int32 StartLevel = NumLevels - 1 ; Iters [ IterIdx ] . Level = StartLevel ; Iters [ IterIdx ] . Rect = Rects [ StartLevel ] ; Iters [ IterIdx ] . X = Iters [ IterIdx ] . Rect . MinX ; Iters [ IterIdx ] . Y = Iters [ IterIdx ] . Rect . MinY ; IterIdx + + ;)",
    "insertText": "while(IterIdx > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCellRectIterator& Iter = Iters [ IterIdx - 1 ] ;)",
    "insertText": "if(Iter.X > Iter.Rect.MaxX)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Iter . X = Iter . Rect . MinX ; Iter . Y + + ;)",
    "insertText": "if(Iter.Y > Iter.Rect.MaxY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IterIdx - - ; continue ; } })",
    "insertText": "if(const FCell* Cell = FindCell(Iter.X, Iter.Y, Iter.Level))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Cell->ChildItemCount > 0)"
  },
  {
    "label": "CurrentRect()",
    "kind": "Method",
    "detail": "Function (const int FinerLevel = Iter . Level - 1 ; const FCellRect& FinerLevelRect = Rects [ FinerLevel ] ; FCellRect)",
    "insertText": "CurrentRect(Iter.X * LevelRatio, Iter.Y * LevelRatio, Iter.X * LevelRatio + LevelRatio - 1, Iter.Y * LevelRatio + LevelRatio - 1)"
  },
  {
    "label": "IntersectRect()",
    "kind": "Method",
    "detail": "Function (FCellRect NewIterRect =)",
    "insertText": "IntersectRect(CurrentRect, FinerLevelRect)"
  },
  {
    "label": "CalcQueryBounds()",
    "kind": "Method",
    "detail": "Function (} } FCellRect)",
    "insertText": "CalcQueryBounds(const FBox& Bounds, const int32 Level)"
  },
  {
    "label": "ClampInt32()",
    "kind": "Method",
    "detail": "Function (FCellRect Result ; Result . MinX =)",
    "insertText": "ClampInt32(FMath::FloorToInt(Bounds.Min.X * InvCellSize[Level] - 0.5f))"
  },
  {
    "label": "ClampInt32()",
    "kind": "Method",
    "detail": "Function (Result . MinY =)",
    "insertText": "ClampInt32(FMath::FloorToInt(Bounds.Min.Y * InvCellSize[Level] - 0.5f))"
  },
  {
    "label": "ClampInt32()",
    "kind": "Method",
    "detail": "Function (Result . MaxX =)",
    "insertText": "ClampInt32(FMath::FloorToInt(Bounds.Max.X * InvCellSize[Level] + 0.5f))"
  },
  {
    "label": "ClampInt32()",
    "kind": "Method",
    "detail": "Function (Result . MaxY =)",
    "insertText": "ClampInt32(FMath::FloorToInt(Bounds.Max.Y * InvCellSize[Level] + 0.5f))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FCellRect Result ; Result . MinX =)",
    "insertText": "Max(Left.MinX, Right.MinX)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Result . MinY =)",
    "insertText": "Max(Left.MinY, Right.MinY)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Result . MaxX =)",
    "insertText": "Min(Left.MaxX, Right.MaxX)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Result . MaxY =)",
    "insertText": "Min(Left.MaxY, Right.MaxY)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (X - =)",
    "insertText": "X(LevelRatio - 1)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (FCellLocation)",
    "insertText": "Location(0, 0, 0)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (const FVector Center = Bounds .)",
    "insertText": "GetCenter()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal Diameter =)",
    "insertText": "Max(Bounds.Max.X - Bounds.Min.X, Bounds.Max.Y - Bounds.Min.Y)"
  },
  {
    "label": "ClampInt32()",
    "kind": "Method",
    "detail": "Function (const int32 DiameterCells =)",
    "insertText": "ClampInt32(FMath::CeilToInt(Diameter * InvCellSize[Location.Level]))"
  },
  {
    "label": "ClampInt32()",
    "kind": "Method",
    "detail": "Function (Location . X =)",
    "insertText": "ClampInt32(FMath::FloorToInt(Center.X * InvCellSize[Location.Level]))"
  },
  {
    "label": "ClampInt32()",
    "kind": "Method",
    "detail": "Function (Location . Y =)",
    "insertText": "ClampInt32(FMath::FloorToInt(Center.Y * InvCellSize[Location.Level]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(Location.Level == NumLevels)"
  },
  {
    "label": "CalcCellBounds()",
    "kind": "Method",
    "detail": "Function (Location . X = 0 ; Location . Y = 0 ; Location . Level = INDEX_NONE ; } return Location ; } FBox)",
    "insertText": "CalcCellBounds(const FCellLocation& CellLocation)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal Size = CellSize [ CellLocation . Level ] ; const FVector::FReal X = static_cast<)",
    "insertText": "FReal(CellLocation.X)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal Y = static_cast<)",
    "insertText": "FReal(CellLocation.Y)"
  },
  {
    "label": "FindOrAddCell()",
    "kind": "Method",
    "detail": "Function (} FCell&)",
    "insertText": "FindOrAddCell(const int X, const int Y, const int Level)"
  },
  {
    "label": "CellToFind()",
    "kind": "Method",
    "detail": "Function (FCell)",
    "insertText": "CellToFind(X, Y, Level)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 Hash =)",
    "insertText": "GetTypeHash(CellToFind)"
  },
  {
    "label": "FindByHash()",
    "kind": "Method",
    "detail": "Function (FCell* Cell = Cells .)",
    "insertText": "FindByHash(Hash, CellToFind)"
  },
  {
    "label": "FindCell()",
    "kind": "Method",
    "detail": "Function (} const FCell*)",
    "insertText": "FindCell(const int X, const int Y, const int Level)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCellSize(const int32 Level)"
  }
]