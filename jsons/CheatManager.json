[
  {
    "label": "FDebugTraceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugTraceInfo"
  },
  {
    "label": "UCheatManagerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCheatManagerExtension"
  },
  {
    "label": "UCheatManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCheatManager"
  },
  {
    "label": "ADebugCameraController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ADebugCameraController"
  },
  {
    "label": "ECollisionChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionChannel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FDebugTraceInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CheatManagerDefines . h \" # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / ScriptMacros . h \" # include \" UObject / Interface . h \" # include \" CheatManager . generated . h \" struct FDebugTraceInfo { FVector LineTraceStart ; FVector LineTraceEnd ; FVector HitNormalStart ; FVector HitNormalEnd ; FVector HitImpactNormalEnd ; FVector HitLocation ; float CapsuleHalfHeight ; float CapsuleRadius ; uint32 bInsideOfObject : 1 ;)",
    "insertText": "FDebugTraceInfo() : LineTraceStart(ForceInit) , LineTraceEnd(ForceInit) , HitNormalStart(ForceInit) , HitNormalEnd(ForceInit) , HitLocation(ForceInit) , CapsuleHalfHeight(0) , CapsuleRadius(0) , bInsideOfObject(false)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnCheatManagerCreated, UCheatManager*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Blueprintable, Within=CheatManager, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API virtual UWorld* GetWorld()"
  },
  {
    "label": "AddedToCheatManager_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddedToCheatManager_Implementation()"
  },
  {
    "label": "RemovedFromCheatManager_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovedFromCheatManager_Implementation()"
  },
  {
    "label": "DoExtensionSpecificBugItLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoExtensionSpecificBugItLog(FOutputDevice& OutputFile)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Blueprintable, Within=PlayerController, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() ENGINE_API virtual bool ProcessConsoleExec(const TCHAR* Cmd, FOutputDevice& Ar, UObject* Executor)"
  },
  {
    "label": "IsDebugCapsuleSweepPawnEnabled()",
    "kind": "Method",
    "detail": "Function (uint32 bDebugCapsuleSweep : 1 ; uint32 bDebugCapsuleTraceComplex : 1 ; uint32 bToggleAILogging : 1 ; bool bDebugCapsuleSweepPawn ; bool)",
    "insertText": "IsDebugCapsuleSweepPawnEnabled()"
  },
  {
    "label": "IsDebugCameraActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugCameraActive()"
  },
  {
    "label": "BugItGoString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BugItGoString(const FString& TheLocation, const FString& TheRotation)"
  },
  {
    "label": "BugItWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BugItWorker(FVector TheLocation, FRotator TheRotation)"
  },
  {
    "label": "LogOutBugItGoToLogFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogOutBugItGoToLogFile(const FString& InScreenShotDesc, const FString& InScreenShotPath, const FString& InGoString, const FString& InLocString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) ENGINE_API void TickCollisionDebug()"
  },
  {
    "label": "AddCapsuleSweepDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCapsuleSweepDebugInfo(const FVector& LineTraceStart, const FVector& LineTraceEnd, const FVector& HitImpactLocation, const FVector& HitNormal, const FVector& HitImpactNormal, const FVector& HitLocation, float CapsuleHalfheight, float CapsuleRadius, bool bTracePawn, bool bInsideOfObject)"
  },
  {
    "label": "SetLevelStreamingStatus()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetLevelStreamingStatus(FName PackageName, bool bShouldBeLoaded, bool bShouldBeVisible)"
  },
  {
    "label": "InitCheatManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCheatManager()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "AddCheatManagerExtension()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddCheatManagerExtension(UCheatManagerExtension* CheatObject)"
  },
  {
    "label": "RemoveCheatManagerExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCheatManagerExtension(UCheatManagerExtension* CheatObject)"
  },
  {
    "label": "FindCheatManagerExtension()",
    "kind": "Method",
    "detail": "Function (UCheatManagerExtension*)",
    "insertText": "FindCheatManagerExtension(const UClass* InClass)"
  },
  {
    "label": "FindCheatManagerExtension()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "FindCheatManagerExtension()"
  },
  {
    "label": "FindCheatManagerExtensionInterface()",
    "kind": "Method",
    "detail": "Function (} UCheatManagerExtension*)",
    "insertText": "FindCheatManagerExtensionInterface(const UClass* InClass)"
  },
  {
    "label": "FindCheatManagerExtensionInterface()",
    "kind": "Method",
    "detail": "Function (template<class T = UInterface> T*)",
    "insertText": "FindCheatManagerExtensionInterface()"
  },
  {
    "label": "RegisterForOnCheatManagerCreated()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterForOnCheatManagerCreated(FOnCheatManagerCreated::FDelegate&& Delegate)"
  },
  {
    "label": "UnregisterFromOnCheatManagerCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterFromOnCheatManagerCreated(FDelegateHandle DelegateHandle)"
  },
  {
    "label": "DoGameSpecificBugItLog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoGameSpecificBugItLog(FOutputDevice& OutputFile)"
  },
  {
    "label": "GetTarget()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetTarget(APlayerController* PlayerController, struct FHitResult& OutHit)"
  }
]