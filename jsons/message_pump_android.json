[
  {
    "label": "ALooper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ALooper"
  },
  {
    "label": "RunLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunLoop"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MessagePumpForUI()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_ANDROID_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_ANDROID_H_ # include<jni . h> # include<cstdint> # include<memory> # include \" base / android / scoped_java_ref . h \" # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / compiler_specific . h \" # include \" base / memory / raw_ptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / time / time . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" struct ALooper ; namespace base { class RunLoop ; class BASE_EXPORT MessagePumpForUI : public MessagePump { public :)",
    "insertText": "MessagePumpForUI()"
  },
  {
    "label": "MessagePumpForUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpForUI(const MessagePumpForUI&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpForUI&)",
    "insertText": "operator(const MessagePumpForUI&)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Attach(Delegate* delegate)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abort()"
  },
  {
    "label": "IsAborted()",
    "kind": "Method",
    "detail": "Function (should_abort_ = true ; } bool)",
    "insertText": "IsAborted()"
  },
  {
    "label": "OnDelayedLooperCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDelayedLooperCallback()"
  },
  {
    "label": "OnNonDelayedLooperCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNonDelayedLooperCallback()"
  },
  {
    "label": "OnResumeNonDelayedLooperCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResumeNonDelayedLooperCallback()"
  },
  {
    "label": "SetDelegate()",
    "kind": "Method",
    "detail": "Function (protected : Delegate*)",
    "insertText": "SetDelegate(Delegate* delegate)"
  },
  {
    "label": "SetQuit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetQuit(bool quit)"
  },
  {
    "label": "DoDelayedLooperWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoDelayedLooperWork()"
  },
  {
    "label": "DoNonDelayedLooperWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoNonDelayedLooperWork(bool do_idle_work)"
  },
  {
    "label": "ScheduleWorkInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ScheduleWorkInternal(bool do_idle_work)"
  },
  {
    "label": "ScheduleWorkWithDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWorkWithDelay()"
  },
  {
    "label": "DoIdleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoIdleWork()"
  }
]