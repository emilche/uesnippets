[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifdef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_LIBC_SYMBOLS_H_ # error This header is meant to be included only once by allocator_shim . cc # endif # ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_LIBC_SYMBOLS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_LIBC_SYMBOLS_H_ # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (SHIM_ALWAYS_EXPORT void*)",
    "insertText": "malloc(size_t size)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void)",
    "insertText": "free(void* ptr)"
  },
  {
    "label": "ShimFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimFree(ptr, nullptr)"
  },
  {
    "label": "realloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "realloc(void* ptr, size_t size)"
  },
  {
    "label": "calloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "calloc(size_t n, size_t size)"
  },
  {
    "label": "cfree()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void)",
    "insertText": "cfree(void* ptr)"
  },
  {
    "label": "memalign()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "memalign(size_t align, size_t s)"
  },
  {
    "label": "aligned_alloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "aligned_alloc(size_t align, size_t s)"
  },
  {
    "label": "valloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "valloc(size_t size)"
  },
  {
    "label": "pvalloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "pvalloc(size_t size)"
  },
  {
    "label": "posix_memalign()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT int)",
    "insertText": "posix_memalign(void** r, size_t a, size_t s)"
  },
  {
    "label": "malloc_size()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT size_t)",
    "insertText": "malloc_size(const void* address)"
  },
  {
    "label": "malloc_usable_size()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT size_t)",
    "insertText": "malloc_usable_size(void* address)"
  }
]