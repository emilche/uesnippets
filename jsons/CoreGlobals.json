[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FChunkedFixedUObjectArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkedFixedUObjectArray"
  },
  {
    "label": "FConfigCacheIni",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigCacheIni"
  },
  {
    "label": "FExec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExec"
  },
  {
    "label": "FFixedUObjectArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFixedUObjectArray"
  },
  {
    "label": "FOutputDeviceConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceConsole"
  },
  {
    "label": "FOutputDeviceRedirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceRedirector"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "ITransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITransaction"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FScopedBootTiming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedBootTiming"
  },
  {
    "label": "FEngineTrackedActivityScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineTrackedActivityScope"
  },
  {
    "label": "FOutputDeviceError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceError"
  },
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "FCoreTexts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoreTexts"
  },
  {
    "label": "FUELibraryOverrideSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUELibraryOverrideSettings"
  },
  {
    "label": "FIsDuplicatingClassForReinstancing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsDuplicatingClassForReinstancing"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FTaskTagScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskTagScope"
  },
  {
    "label": "FRenderingThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderingThread"
  },
  {
    "label": "FOptionalTaskTagScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOptionalTaskTagScope"
  },
  {
    "label": "FScopedLoadingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedLoadingState"
  },
  {
    "label": "FStoredObjectPathDebug",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoredObjectPathDebug"
  },
  {
    "label": "FObjectHandlePackageDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectHandlePackageDebugData"
  },
  {
    "label": "FVisualizerDebuggingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizerDebuggingState"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformTLS . h \" # include \" Logging / LogMacros . h \" # include \" Misc / Build . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / OutputDevice . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" Templates / Atomic . h \" # include \" UObject / NameTypes . h \" # include<atomic> class Error ; class FChunkedFixedUObjectArray ; class FConfigCacheIni ; class FExec ; class FFixedUObjectArray ; class FOutputDeviceConsole ; class FOutputDeviceRedirector ; class FRunnableThread ; class FText ; class ITransaction ; class UClass ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogHAL, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSerialization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogUnrealMath, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogUnrealMatrix, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogContentComparisonCommandlet, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNetPackageMap, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNetSerialization, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogMemory, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogProfilingDebugging, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCore, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogOutputDevice, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSHA, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStats, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStreaming, Display, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogInit, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogExit, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogExec, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogScript, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLocalization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLongPackageNames, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogProcess, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLoad, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVirtualization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogTemp, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN_HELPER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN_HELPER(A,B,C) DECLARE_LOG_CATEGORY_EXTERN(A,B,C) #ifdef PLATFORM_GLOBAL_LOG_CATEGORY CORE_API DECLARE_LOG_CATEGORY_EXTERN_HELPER(PLATFORM_GLOBAL_LOG_CATEGORY, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN_HELPER()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef PLATFORM_GLOBAL_LOG_CATEGORY_ALT)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN_HELPER(PLATFORM_GLOBAL_LOG_CATEGORY_ALT, Log, All)"
  },
  {
    "label": "GetGlobalLogSingleton()",
    "kind": "Method",
    "detail": "Function (# endif FOutputDeviceRedirector*)",
    "insertText": "GetGlobalLogSingleton()"
  },
  {
    "label": "BootTimingPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BootTimingPoint(const ANSICHAR *Message)"
  },
  {
    "label": "DumpBootTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpBootTiming()"
  },
  {
    "label": "FScopedBootTiming()",
    "kind": "Method",
    "detail": "Function (struct FScopedBootTiming { FString Message ; double StartTime ;)",
    "insertText": "FScopedBootTiming(const ANSICHAR *InMessage)"
  },
  {
    "label": "FScopedBootTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedBootTiming(const ANSICHAR *InMessage, FName Suffix)"
  },
  {
    "label": "FScopedBootTiming()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedBootTiming()"
  },
  {
    "label": "FEngineTrackedActivityScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FEngineTrackedActivityScope {)",
    "insertText": "FEngineTrackedActivityScope(const TCHAR* Fmt, ...)"
  },
  {
    "label": "FEngineTrackedActivityScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEngineTrackedActivityScope(const FString& Str)"
  },
  {
    "label": "FEngineTrackedActivityScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEngineTrackedActivityScope()"
  },
  {
    "label": "SCOPED_BOOT_TIMING()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "SCOPED_BOOT_TIMING(x) TRACE_CPUPROFILER_EVENT_SCOPE_STR(x)"
  },
  {
    "label": "ANONYMOUS_VARIABLE()",
    "kind": "Method",
    "detail": "Function (FScopedBootTiming)",
    "insertText": "ANONYMOUS_VARIABLE(BootTiming_)(x)"
  },
  {
    "label": "UE_SCOPED_ENGINE_ACTIVITY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_SCOPED_ENGINE_ACTIVITY(Fmt, ...) FEngineTrackedActivityScope ANONYMOUS_VARIABLE(EngineActivity_)(Fmt, ## __VA_ARGS__)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ITransaction* GUndo ; FOutputDeviceConsole* GLogConsole ; class FOutputDeviceError* GError ; class FFeedbackContext* GWarn ; TCHAR GErrorHist [ 1 6 3 8 4 ] ; TCHAR GErrorExceptionDescription [ 4 0 9 6 ] ; struct FCoreTexts { const FText& True ; const FText& False ; const FText& Yes ; const FText& No ; const FText& None ; const FCoreTexts&)",
    "insertText": "Get()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "FCoreTexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCoreTexts(const FCoreTexts&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCoreTexts&)",
    "insertText": "operator(const FCoreTexts&)"
  },
  {
    "label": "FCoreTexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCoreTexts(const FText& InTrue, const FText& InFalse, const FText& InYes, const FText& InNo, const FText& InNone) : True(InTrue), False(InFalse), Yes(InYes), No(InNo), None(InNone)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if !)",
    "insertText": "defined(DISABLE_LEGACY_CORE_TEXTS) || DISABLE_LEGACY_CORE_TEXTS == 0 UE_DEPRECATED(4.23, \"GTrue has been deprecated in favor of FCoreTexts::Get().True.\")"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif bool GIsGameAgnosticExe ; bool GForceLoadEditorOnly ; bool GVerifyObjectReferencesOnly ; bool GFastPathUniqueNameGeneration ; bool GAllowActorScriptExecutionInEditor ; bool GCompilingBlueprint ; bool GIsGCingAfterBlueprintCompile ; bool GIsReconstructingBlueprintInstances ; std::atomic<bool> GIsReinstancing ;)",
    "insertText": "void(*GFlushStreamingFunc)(void)"
  },
  {
    "label": "IsRunningCommandlet()",
    "kind": "Method",
    "detail": "Function (struct FUELibraryOverrideSettings { bool bIsEmbedded = false ; void* WindowHandle = nullptr ; int32 WindowWidth = 0 ; int32 WindowHeight = 0 ; } ; FUELibraryOverrideSettings GUELibraryOverrideSettings ; bool GIsRunningUnattendedScript ; # if WITH_ENGINE bool PRIVATE_GIsRunningCommandlet ; UClass* PRIVATE_GRunningCommandletClass ; bool PRIVATE_GAllowCommandletRendering ; bool PRIVATE_GAllowCommandletAudio ; # endif # if WITH_EDITORONLY_DATA bool GIsEditor ; bool GIsImportingT3D ; bool GIsTransacting ; bool GIntraFrameDebuggingGameThread ; bool GFirstFrameIntraFrameDebugging ; # elif USING_CODE_ANALYSIS bool GIsEditor ; bool GIntraFrameDebuggingGameThread ; bool GFirstFrameIntraFrameDebugging ; # else # define GIsEditor false # define GIntraFrameDebuggingGameThread false # define GFirstFrameIntraFrameDebugging false # endif # if WITH_EDITOR bool PRIVATE_GIsRunningCookCommandlet ; bool PRIVATE_GIsRunningDLCCookCommandlet ; # endif bool)",
    "insertText": "IsRunningCommandlet()"
  },
  {
    "label": "IsRunningCookCommandlet()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE return PRIVATE_GIsRunningCommandlet ; # else return false ; # endif } bool)",
    "insertText": "IsRunningCookCommandlet()"
  },
  {
    "label": "IsRunningDLCCookCommandlet()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return PRIVATE_GIsRunningCookCommandlet ; # else return false ; # endif } bool)",
    "insertText": "IsRunningDLCCookCommandlet()"
  },
  {
    "label": "GetRunningCommandletClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return PRIVATE_GIsRunningDLCCookCommandlet ; # else return false ; # endif } UClass*)",
    "insertText": "GetRunningCommandletClass()"
  },
  {
    "label": "IsAllowCommandletRendering()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE return PRIVATE_GRunningCommandletClass ; # else return nullptr ; # endif } bool)",
    "insertText": "IsAllowCommandletRendering()"
  },
  {
    "label": "IsAllowCommandletAudio()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE return PRIVATE_GAllowCommandletRendering ; # else return false ; # endif } bool)",
    "insertText": "IsAllowCommandletAudio()"
  },
  {
    "label": "GetMultiprocessId()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE return PRIVATE_GAllowCommandletAudio ; # else return false ; # endif } namespace UE { int32)",
    "insertText": "GetMultiprocessId()"
  },
  {
    "label": "SetMultiprocessId()",
    "kind": "Method",
    "detail": "Function (} namespace UE::Private { void)",
    "insertText": "SetMultiprocessId(int32 MultiprocessId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class FIsDuplicatingClassForReinstancing { public : FIsDuplicatingClassForReinstancing&)",
    "insertText": "operator(bool bOther)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "TSAN_ATOMIC()",
    "kind": "Method",
    "detail": "Function (} ; bool GEdSelectionLock ; bool GIsClient ; bool GIsServer ; bool GIsCriticalError ;)",
    "insertText": "TSAN_ATOMIC(bool)"
  },
  {
    "label": "IsEngineStartupModuleLoadingComplete()",
    "kind": "Method",
    "detail": "Function (FIsDuplicatingClassForReinstancing GIsDuplicatingClassForReinstancing ; bool GIsBuildMachine ; bool GIsSilent ; bool GIsSlowTask ; bool GSlowTaskOccurred ; bool GIsGuarded ; # ifndef UE_SET_REQUEST_EXIT_ON_TICK_ONLY # define UE_SET_REQUEST_EXIT_ON_TICK_ONLY 0 # endif bool)",
    "insertText": "IsEngineStartupModuleLoadingComplete()"
  },
  {
    "label": "SetEngineStartupModuleLoadingComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEngineStartupModuleLoadingComplete()"
  },
  {
    "label": "BeginExitIfRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginExitIfRequested()"
  },
  {
    "label": "RequestEngineExit()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return GIsRequestingExit ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "RequestEngineExit(const TCHAR* ReasonString)"
  },
  {
    "label": "RequestEngineExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEngineExit(const FString& ReasonString)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (bool GAreScreenMessagesEnabled ; bool GScreenMessagesRestoreState ; int32 GIsDumpingMovie ; bool GIsHighResScreenshot ; uint32 GScreenshotResolutionX ; uint32 GScreenshotResolutionY ; uint64 GMakeCacheIDIndex ; FString GEngineIni ; FString GEditorLayoutIni ; FString GEditorKeyBindingsIni ; FString GEditorSettingsIni ; FString GEditorIni ; FString GEditorPerProjectIni ; FString GCompatIni ; FString GLightmassIni ; FString GScalabilityIni ; FString GHardwareIni ; FString GInputIni ; FString GGameIni ; FString GGameUserSettingsIni ; FString GRuntimeOptionsIni ; FString GInstallBundleIni ; FString GDeviceProfilesIni ; FString GGameplayTagsIni ; float GNearClippingPlane ; float GNearClippingPlane_RenderThread ; bool GExitPurge ; TCHAR GInternalProjectName [ 6 4 ] ; const TCHAR* GForeignEngineDir ; FExec* GDebugToolExec ;)",
    "insertText": "bool(*IsAsyncLoading)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*SuspendAsyncLoading)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*ResumeAsyncLoading)()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(*IsAsyncLoadingSuspended)()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(*IsAsyncLoadingMultithreaded)()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class ELoaderType : uint8 { NotInitialized,LegacyLoader,EditorPackageLoader,ZenLoader } ; const TCHAR*)",
    "insertText": "LexToString(ELoaderType Type)"
  },
  {
    "label": "ELoaderType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ELoaderType(*GetLoaderType)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*SuspendTextureStreamingRenderTasks)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*ResumeTextureStreamingRenderTasks)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FIsEditorLoadingPackage&)",
    "insertText": "operator(bool InValue)"
  },
  {
    "label": "GetIsEditorLoadingPackage()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS namespace UE { bool)",
    "insertText": "GetIsEditorLoadingPackage()"
  },
  {
    "label": "SetIsEditorLoadingPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsEditorLoadingPackage(bool InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FPlayInEditorID&)",
    "insertText": "operator(int32 InOther)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "int32()"
  },
  {
    "label": "GetPlayInEditorID()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS namespace UE { int32)",
    "insertText": "GetPlayInEditorID()"
  },
  {
    "label": "SetPlayInEditorID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayInEditorID(int32 InPlayInEditorID)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ETaskTag)"
  },
  {
    "label": "GetStaticThreadId()",
    "kind": "Method",
    "detail": "Function (class FTaskTagScope { class FRunnableThread ; class FRenderingThread ; thread_local ETaskTag ActiveTaskTag ; int32)",
    "insertText": "GetStaticThreadId()"
  },
  {
    "label": "SetTagNone()",
    "kind": "Method",
    "detail": "Function (ETaskTag ParentTag ; ETaskTag Tag ; bool TagOnlyIfNone ; public : void)",
    "insertText": "SetTagNone()"
  },
  {
    "label": "SetTagStaticInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTagStaticInit()"
  },
  {
    "label": "SwapTag()",
    "kind": "Method",
    "detail": "Function (ETaskTag)",
    "insertText": "SwapTag(ETaskTag Tag)"
  },
  {
    "label": "FTaskTagScope()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FTaskTagScope(bool InTagOnlyIfNone, ETaskTag InTag)"
  },
  {
    "label": "FTaskTagScope()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTaskTagScope(ETaskTag InTag = ETaskTag::ENone) : FTaskTagScope(false, InTag)"
  },
  {
    "label": "FTaskTagScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTaskTagScope()"
  },
  {
    "label": "GetCurrentTag()",
    "kind": "Method",
    "detail": "Function (ETaskTag)",
    "insertText": "GetCurrentTag()"
  },
  {
    "label": "IsCurrentTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentTag(ETaskTag InTag)"
  },
  {
    "label": "IsRunningDuringStaticInit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningDuringStaticInit()"
  },
  {
    "label": "FOptionalTaskTagScope()",
    "kind": "Method",
    "detail": "Function (} ; class FOptionalTaskTagScope : public FTaskTagScope { public :)",
    "insertText": "FOptionalTaskTagScope(ETaskTag InTag = ETaskTag::ENone) : FTaskTagScope(true, InTag)"
  },
  {
    "label": "EnsureRetrievingVTablePtrDuringCtor()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "EnsureRetrievingVTablePtrDuringCtor(const TCHAR* CtorSignature)"
  },
  {
    "label": "IsInGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInGameThread()"
  },
  {
    "label": "IsInParallelGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInParallelGameThread()"
  },
  {
    "label": "IsAudioThreadRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioThreadRunning()"
  },
  {
    "label": "IsInAudioThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInAudioThread()"
  },
  {
    "label": "IsInSlateThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSlateThread()"
  },
  {
    "label": "IsInRenderingThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInRenderingThread()"
  },
  {
    "label": "IsInParallelRenderingThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInParallelRenderingThread()"
  },
  {
    "label": "IsInActualRenderingThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInActualRenderingThread()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(*IsInAsyncLoadingThread)()"
  },
  {
    "label": "IsRHIThreadRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRHIThreadRunning()"
  },
  {
    "label": "IsInRHIThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInRHIThread()"
  },
  {
    "label": "IsInParallelRHIThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInParallelRHIThread()"
  },
  {
    "label": "NotifyLoadingStateChanged()",
    "kind": "Method",
    "detail": "Function (bool GIsRunningRHIInSeparateThread_InternalUseOnly ; bool GIsRunningRHIInDedicatedThread_InternalUseOnly ; bool GIsRunningRHIInTaskThread_InternalUseOnly ; # if ! UE_BUILD_SHIPPING void)",
    "insertText": "NotifyLoadingStateChanged(bool bState, const TCHAR *Message)"
  },
  {
    "label": "FScopedLoadingState()",
    "kind": "Method",
    "detail": "Function (struct FScopedLoadingState { FString Message ;)",
    "insertText": "FScopedLoadingState(const TCHAR* InMessage) : Message(InMessage)"
  },
  {
    "label": "NotifyLoadingStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLoadingStateChanged(true, *Message)"
  },
  {
    "label": "FScopedLoadingState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedLoadingState()"
  },
  {
    "label": "NotifyLoadingStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLoadingStateChanged(false, *Message)"
  },
  {
    "label": "FScopedLoadingState()",
    "kind": "Method",
    "detail": "Function (} struct FScopedLoadingState {)",
    "insertText": "FScopedLoadingState(const TCHAR* InMessage)"
  },
  {
    "label": "GetEmitDrawEvents()",
    "kind": "Method",
    "detail": "Function (} } ; # endif bool)",
    "insertText": "GetEmitDrawEvents()"
  },
  {
    "label": "SetEmitDrawEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEmitDrawEvents(bool EmitDrawEvents)"
  },
  {
    "label": "IsRunningCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (class FChunkedFixedUObjectArray ; FChunkedFixedUObjectArray* GCoreObjectArrayForDebugVisualizers ; namespace UE::CoreUObject::Private { struct FStoredObjectPathDebug ; struct FObjectHandlePackageDebugData ; } namespace UE::Core { struct FVisualizerDebuggingState ; } UE::CoreUObject::Private::FStoredObjectPathDebug* GCoreComplexObjectPathDebug ; UE::CoreUObject::Private::FObjectHandlePackageDebugData* GCoreObjectHandlePackageDebug ; UE::Core::FVisualizerDebuggingState* GCoreDebuggingState ; bool)",
    "insertText": "IsRunningCookOnTheFly()"
  },
  {
    "label": "IsUsingZenPakFileStreaming()",
    "kind": "Method",
    "detail": "Function (namespace UE { bool)",
    "insertText": "IsUsingZenPakFileStreaming()"
  }
]