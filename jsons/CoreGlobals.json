[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FChunkedFixedUObjectArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkedFixedUObjectArray"
  },
  {
    "label": "FConfigCacheIni",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigCacheIni"
  },
  {
    "label": "FExec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExec"
  },
  {
    "label": "FFixedUObjectArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFixedUObjectArray"
  },
  {
    "label": "FOutputDeviceConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceConsole"
  },
  {
    "label": "FOutputDeviceRedirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceRedirector"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "ITransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITransaction"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FScopedBootTiming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedBootTiming"
  },
  {
    "label": "FEngineTrackedActivityScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineTrackedActivityScope"
  },
  {
    "label": "FOutputDeviceError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceError"
  },
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "FCoreTexts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoreTexts"
  },
  {
    "label": "FUELibraryOverrideSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUELibraryOverrideSettings"
  },
  {
    "label": "FIsDuplicatingClassForReinstancing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsDuplicatingClassForReinstancing"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "FTaskTagScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskTagScope"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FRenderingThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderingThread"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "FOptionalTaskTagScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOptionalTaskTagScope"
  },
  {
    "label": "FScopedLoadingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedLoadingState"
  },
  {
    "label": "FScopedLoadingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedLoadingState"
  },
  {
    "label": "FChunkedFixedUObjectArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkedFixedUObjectArray"
  },
  {
    "label": "FStoredObjectPathDebug",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoredObjectPathDebug"
  },
  {
    "label": "FObjectHandlePackageDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectHandlePackageDebugData"
  },
  {
    "label": "FVisualizerDebuggingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizerDebuggingState"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogHAL, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSerialization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogUnrealMath, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogUnrealMatrix, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogContentComparisonCommandlet, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNetPackageMap, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNetSerialization, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogMemory, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogProfilingDebugging, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCore, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogOutputDevice, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSHA, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStats, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStreaming, Display, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogInit, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogExit, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogExec, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogScript, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLocalization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLongPackageNames, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogProcess, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLoad, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVirtualization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogTemp, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN_HELPER()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN_HELPER(PLATFORM_GLOBAL_LOG_CATEGORY, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN_HELPER()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN_HELPER(PLATFORM_GLOBAL_LOG_CATEGORY_ALT, Log, All)"
  },
  {
    "label": "BootTimingPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BootTimingPoint(const ANSICHAR *Message)"
  },
  {
    "label": "DumpBootTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpBootTiming()"
  },
  {
    "label": "FScopedBootTiming()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FScopedBootTiming(const ANSICHAR *InMessage)"
  },
  {
    "label": "FScopedBootTiming()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FScopedBootTiming(const ANSICHAR *InMessage, FName Suffix)"
  },
  {
    "label": "FEngineTrackedActivityScope()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FEngineTrackedActivityScope(const TCHAR* Fmt, ...)"
  },
  {
    "label": "FEngineTrackedActivityScope()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FEngineTrackedActivityScope(const FString& Str)"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "GetMultiprocessId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMultiprocessId()"
  },
  {
    "label": "SetMultiprocessId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultiprocessId(int32 MultiprocessId)"
  },
  {
    "label": "IsEngineStartupModuleLoadingComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEngineStartupModuleLoadingComplete()"
  },
  {
    "label": "SetEngineStartupModuleLoadingComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEngineStartupModuleLoadingComplete()"
  },
  {
    "label": "BeginExitIfRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginExitIfRequested()"
  },
  {
    "label": "RequestEngineExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEngineExit(const TCHAR* ReasonString)"
  },
  {
    "label": "RequestEngineExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEngineExit(const FString& ReasonString)"
  },
  {
    "label": "GetIsEditorLoadingPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsEditorLoadingPackage()"
  },
  {
    "label": "SetIsEditorLoadingPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsEditorLoadingPackage(bool InValue)"
  },
  {
    "label": "GetPlayInEditorID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPlayInEditorID()"
  },
  {
    "label": "SetPlayInEditorID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayInEditorID(int32 InPlayInEditorID)"
  },
  {
    "label": "GetStaticThreadId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStaticThreadId()"
  },
  {
    "label": "SetTagNone()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "SetTagNone()"
  },
  {
    "label": "SetTagStaticInit()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "SetTagStaticInit()"
  },
  {
    "label": "SwapTag()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "SwapTag(ETaskTag Tag)"
  },
  {
    "label": "FTaskTagScope()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FTaskTagScope(bool InTagOnlyIfNone, ETaskTag InTag)"
  },
  {
    "label": "GetCurrentTag()",
    "kind": "Method",
    "detail": "Function (ETaskTag)",
    "insertText": "GetCurrentTag()"
  },
  {
    "label": "IsCurrentTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentTag(ETaskTag InTag)"
  },
  {
    "label": "IsRunningDuringStaticInit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningDuringStaticInit()"
  },
  {
    "label": "EnsureRetrievingVTablePtrDuringCtor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureRetrievingVTablePtrDuringCtor(const TCHAR* CtorSignature)"
  },
  {
    "label": "IsInGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInGameThread()"
  },
  {
    "label": "IsInParallelGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInParallelGameThread()"
  },
  {
    "label": "IsAudioThreadRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioThreadRunning()"
  },
  {
    "label": "IsInAudioThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInAudioThread()"
  },
  {
    "label": "IsInSlateThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSlateThread()"
  },
  {
    "label": "IsInRenderingThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInRenderingThread()"
  },
  {
    "label": "IsInParallelRenderingThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInParallelRenderingThread()"
  },
  {
    "label": "IsInActualRenderingThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInActualRenderingThread()"
  },
  {
    "label": "IsRHIThreadRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRHIThreadRunning()"
  },
  {
    "label": "IsInRHIThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInRHIThread()"
  },
  {
    "label": "IsInParallelRHIThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInParallelRHIThread()"
  },
  {
    "label": "NotifyLoadingStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLoadingStateChanged(bool bState, const TCHAR *Message)"
  },
  {
    "label": "GetEmitDrawEvents()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "GetEmitDrawEvents()"
  },
  {
    "label": "SetEmitDrawEvents()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "SetEmitDrawEvents(bool EmitDrawEvents)"
  },
  {
    "label": "IsRunningCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "IsRunningCookOnTheFly()"
  },
  {
    "label": "IsUsingZenPakFileStreaming()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "IsUsingZenPakFileStreaming()"
  }
]