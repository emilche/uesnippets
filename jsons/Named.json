[
  {
    "label": "CNamed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CNamed"
  },
  {
    "label": "CNamed()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Text / Symbol . h \" namespace uLang { class CNamed { public : ULANG_FORCEINLINE)",
    "insertText": "CNamed()"
  },
  {
    "label": "CNamed()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "CNamed(const CSymbol& Name) : _Name(Name)"
  },
  {
    "label": "CNamed()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "CNamed(const CNamed& Source) : _Name(Source._Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE CNamed&)",
    "insertText": "operator(const CNamed & Source)"
  },
  {
    "label": "CSymbol()",
    "kind": "Method",
    "detail": "Function (_Name = Source . _Name ; return* this ; } ULANG_FORCEINLINE operator const)",
    "insertText": "CSymbol()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "operator(const CSymbol& Name)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE void)",
    "insertText": "SetName(const CSymbol & Name)"
  },
  {
    "label": "AsNameStringView()",
    "kind": "Method",
    "detail": "Function (_Name = Name ; } ULANG_FORCEINLINE CUTF8StringView)",
    "insertText": "AsNameStringView()"
  },
  {
    "label": "AsNameCString()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE const char*)",
    "insertText": "AsNameCString()"
  },
  {
    "label": "AsNameFirstByte()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char)",
    "insertText": "AsNameFirstByte()"
  }
]