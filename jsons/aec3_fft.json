[
  {
    "label": "Aec3Fft",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Aec3Fft"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Aec3Fft()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_AEC3_FFT_H_ # define MODULES_AUDIO_PROCESSING_AEC3_AEC3_FFT_H_ # include<array> # include \" api / array_view . h \" # include \" common_audio / third_party / ooura / fft_size_128 / ooura_fft . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / fft_data . h \" # include \" rtc_base / checks . h \" namespace webrtc { class Aec3Fft { public : enum class Window { kRectangular,kHanning,kSqrtHanning } ;)",
    "insertText": "Aec3Fft()"
  },
  {
    "label": "Aec3Fft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Aec3Fft(const Aec3Fft&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Aec3Fft&)",
    "insertText": "operator(const Aec3Fft&)"
  },
  {
    "label": "Fft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fft(std::array<float, kFftLength>* x, FftData* X)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(x)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(X)"
  },
  {
    "label": "Fft()",
    "kind": "Method",
    "detail": "Function (ooura_fft_ .)",
    "insertText": "Fft(x->data())"
  },
  {
    "label": "CopyFromPackedArray()",
    "kind": "Method",
    "detail": "Function (X ->)",
    "insertText": "CopyFromPackedArray(*x)"
  },
  {
    "label": "Ifft()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Ifft(const FftData& X, std::array<float, kFftLength>* x)"
  },
  {
    "label": "CopyToPackedArray()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "CopyToPackedArray(x)"
  },
  {
    "label": "InverseFft()",
    "kind": "Method",
    "detail": "Function (ooura_fft_ .)",
    "insertText": "InverseFft(x->data())"
  },
  {
    "label": "ZeroPaddedFft()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ZeroPaddedFft(rtc::ArrayView<const float> x, Window window, FftData* X)"
  },
  {
    "label": "PaddedFft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaddedFft(rtc::ArrayView<const float> x, rtc::ArrayView<const float> x_old, FftData* X)"
  },
  {
    "label": "PaddedFft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaddedFft(x, x_old, Window::kRectangular, X)"
  },
  {
    "label": "PaddedFft()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PaddedFft(rtc::ArrayView<const float> x, rtc::ArrayView<const float> x_old, Window window, FftData* X)"
  }
]