[
  {
    "label": "FSerializedShaderArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedShaderArchive"
  },
  {
    "label": "FShaderPreprocessOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPreprocessOutput"
  },
  {
    "label": "FSharedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedBuffer"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FShaderCompilerInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerInput"
  },
  {
    "label": "FShaderCompilerOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerOutput"
  },
  {
    "label": "IShaderFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IShaderFormat"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # define SHADERFORMAT_MODULE_WILDCARD)",
    "insertText": "TEXT(\"*ShaderFormat*\")"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetVersion(FName Format)"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSupportedFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "CanStripShaderCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStripShaderCode(bool const bNativeFormat)"
  },
  {
    "label": "ModifyShaderCompilerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyShaderCompilerInput(FShaderCompilerInput& Input)"
  },
  {
    "label": "NotifyShaderCompiled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyShaderCompiled(const TConstArrayView<uint8>& PlatformDebugData, FName Format, const FString& DebugInfo = FString())"
  },
  {
    "label": "NotifyShaderCompilersShutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyShaderCompilersShutdown(FName Format)"
  },
  {
    "label": "AppendToKeyString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendToKeyString(FString& KeyString)"
  },
  {
    "label": "PreprocessShader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PreprocessShader(const FShaderCompilerInput& Input, const FShaderCompilerEnvironment& Environment, FShaderPreprocessOutput& PreprocessOutput)"
  },
  {
    "label": "CompilePreprocessedShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompilePreprocessedShader(const FShaderCompilerInput& Input, const FShaderPreprocessOutput& PrimaryPreprocessOutput, const FShaderPreprocessOutput& SecondaryPreprocessOutput, FShaderCompilerOutput& PrimaryOutput, FShaderCompilerOutput& SecondaryOutput, const FString& WorkingDirectory)"
  },
  {
    "label": "RequiresSecondaryCompile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresSecondaryCompile(const FShaderCompilerInput& Input, const FShaderCompilerEnvironment& Environment, const FShaderPreprocessOutput& PreprocessOutput)"
  },
  {
    "label": "OutputDebugData()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OutputDebugData(const FShaderCompilerInput& Input, const FShaderPreprocessOutput& PreprocessOutput, const FShaderPreprocessOutput& SecondaryPreprocessOutput, const FShaderCompilerOutput& Output, const FShaderCompilerOutput& SecondaryOutput)"
  }
]