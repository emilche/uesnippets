[
  {
    "label": "StreamGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamGenerator"
  },
  {
    "label": "kFrameSize()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_TEST_STREAM_GENERATOR_H_ # define MODULES_VIDEO_CODING_TEST_STREAM_GENERATOR_H_ # include<stdint . h> # include<list> # include \" modules / video_coding / packet . h \" namespace webrtc { const unsigned int kDefaultBitrateKbps = 1 0 0 0 ; const unsigned int kDefaultFrameRate = 2 5 ; const unsigned int kMaxPacketSize = 1 5 0 0 ; const unsigned int)",
    "insertText": "kFrameSize(kDefaultBitrateKbps + kDefaultFrameRate * 4) / (kDefaultFrameRate * 8)"
  },
  {
    "label": "StreamGenerator()",
    "kind": "Method",
    "detail": "Function (const int kDefaultFramePeriodMs = 1 0 0 0 / kDefaultFrameRate ; class StreamGenerator { public :)",
    "insertText": "StreamGenerator(uint16_t start_seq_num, int64_t current_time)"
  },
  {
    "label": "StreamGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamGenerator(const StreamGenerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamGenerator&)",
    "insertText": "operator(const StreamGenerator&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint16_t start_seq_num, int64_t current_time)"
  },
  {
    "label": "GenerateFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFrame(VideoFrameType type, int num_media_packets, int num_empty_packets, int64_t time_ms)"
  },
  {
    "label": "PopPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopPacket(VCMPacket* packet, int index)"
  },
  {
    "label": "DropLastPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DropLastPacket()"
  },
  {
    "label": "GetPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPacket(VCMPacket* packet, int index)"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextPacket(VCMPacket* packet)"
  },
  {
    "label": "NextSequenceNumber()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "NextSequenceNumber()"
  },
  {
    "label": "PacketsRemaining()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PacketsRemaining()"
  },
  {
    "label": "GeneratePacket()",
    "kind": "Method",
    "detail": "Function (private : VCMPacket)",
    "insertText": "GeneratePacket(uint16_t sequence_number, uint32_t timestamp, unsigned int size, bool first_packet, bool marker_bit, VideoFrameType type)"
  },
  {
    "label": "GetPacketIterator()",
    "kind": "Method",
    "detail": "Function (std::list<VCMPacket>::iterator)",
    "insertText": "GetPacketIterator(int index)"
  }
]