[
  {
    "label": "FSurfacicSampling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfacicSampling"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / GeoPoint . h \" # include \" Math / Point . h \" namespace UE::CADKernel { struct FSurfacicSampling { bool bWithNormals = false ; TArray<FPoint2D> Points2D ; TArray<FPoint> Points3D ; TArray<FVector3f> Normals ; int32)",
    "insertText": "Count()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNum(int32 Number)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Points2D .)",
    "insertText": "SetNum(Number)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reserve(int32 Number)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Points2D .)",
    "insertText": "Empty(Number)"
  },
  {
    "label": "NormalizeNormals()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "NormalizeNormals()"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (Normal .)",
    "insertText": "Normalize()"
  },
  {
    "label": "Set2DCoordinates()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Set2DCoordinates(const FCoordinateGrid& Coordinates)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(Coordinates.Count())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Points2D .)",
    "insertText": "Emplace(UCoord, VCoord)"
  }
]