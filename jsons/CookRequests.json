[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FFreeFEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreeFEvent"
  },
  {
    "label": "FFilePlatformRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilePlatformRequest"
  },
  {
    "label": "FExternalRequests",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalRequests"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / RingBuffer . h \" # include \" Containers / UnrealString . h \" # include \" CookTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformProcess . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / ICookInfo . h \" # include \" UObject / NameTypes . h \" # include<atomic> class FEvent ; class ITargetPlatform ; namespace UE::Cook { struct FFreeFEvent { void)",
    "insertText": "operator()(FEvent* Ptr)"
  },
  {
    "label": "FFilePlatformRequest()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFilePlatformRequest { protected : FName Filename ; TArray<const ITargetPlatform*> Platforms ; FCompletionCallback CompletionCallback ; FInstigator Instigator ; bool bUrgent = false ; public :)",
    "insertText": "FFilePlatformRequest()"
  },
  {
    "label": "FFilePlatformRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilePlatformRequest(const FName& InFilename, FInstigator&& InInstigator)"
  },
  {
    "label": "FFilePlatformRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilePlatformRequest(const FName& InFilename, FInstigator&& InInstigator, const ITargetPlatform* InPlatform, FCompletionCallback&& InCompletionCallback = FCompletionCallback())"
  },
  {
    "label": "FFilePlatformRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilePlatformRequest(const FName& InFilename, FInstigator&& InInstigator, const TArrayView<const ITargetPlatform* const>& InPlatforms, FCompletionCallback&& InCompletionCallback = FCompletionCallback())"
  },
  {
    "label": "FFilePlatformRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilePlatformRequest(const FName& InFilename, FInstigator&& InInstigator, TArray<const ITargetPlatform*>&& InPlatforms, FCompletionCallback&& InCompletionCallback = FCompletionCallback())"
  },
  {
    "label": "FFilePlatformRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilePlatformRequest(const FFilePlatformRequest& InFilePlatformRequest)"
  },
  {
    "label": "FFilePlatformRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilePlatformRequest(FFilePlatformRequest&& InFilePlatformRequest)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFilePlatformRequest&)",
    "insertText": "operator(FFilePlatformRequest&& InFileRequest)"
  },
  {
    "label": "SetFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilename(FString InFilename)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetFilename()"
  },
  {
    "label": "GetInstigator()",
    "kind": "Method",
    "detail": "Function (FInstigator&)",
    "insertText": "GetInstigator()"
  },
  {
    "label": "SetUrgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrgent(bool bInUrgent)"
  },
  {
    "label": "IsUrgent()",
    "kind": "Method",
    "detail": "Function (bUrgent = bInUrgent ; } bool)",
    "insertText": "IsUrgent()"
  },
  {
    "label": "GetPlatforms()",
    "kind": "Method",
    "detail": "Function (TArray<const ITargetPlatform*>&)",
    "insertText": "GetPlatforms()"
  },
  {
    "label": "RemovePlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlatform(const ITargetPlatform* Platform)"
  },
  {
    "label": "AddPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatform(const ITargetPlatform* Platform)"
  },
  {
    "label": "HasPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPlatform(const ITargetPlatform* Platform)"
  },
  {
    "label": "GetCompletionCallback()",
    "kind": "Method",
    "detail": "Function (FCompletionCallback&)",
    "insertText": "GetCompletionCallback()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FFilePlatformRequest& InFileRequest)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "GetNumRequests()",
    "kind": "Method",
    "detail": "Function (} ; class FExternalRequests { public : int32)",
    "insertText": "GetNumRequests()"
  },
  {
    "label": "HasRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRequests()"
  },
  {
    "label": "AddCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCallback(FSchedulerCallback&& Callback)"
  },
  {
    "label": "EnqueueUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueUnique(FFilePlatformRequest&& FileRequest, bool bForceFrontOfQueue = false)"
  },
  {
    "label": "DequeueNextCluster()",
    "kind": "Method",
    "detail": "Function (EExternalRequestType)",
    "insertText": "DequeueNextCluster(TArray<FSchedulerCallback>& OutCallbacks, TArray<FFilePlatformRequest>& OutBuildRequests)"
  },
  {
    "label": "DequeueCallbacks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DequeueCallbacks(TArray<FSchedulerCallback>& OutCallbacks)"
  },
  {
    "label": "EmptyRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyRequests()"
  },
  {
    "label": "DequeueAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DequeueAll(TArray<FSchedulerCallback>& OutCallbacks, TArray<FFilePlatformRequest>& OutCookRequests)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "LogAllRequestedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAllRequestedFiles()"
  },
  {
    "label": "ThreadUnsafeDequeueCallbacks()",
    "kind": "Method",
    "detail": "Function (public : TUniquePtr<FEvent,FFreeFEvent> CookRequestEvent ; private : bool)",
    "insertText": "ThreadUnsafeDequeueCallbacks(TArray<FSchedulerCallback>& OutCallbacks)"
  }
]