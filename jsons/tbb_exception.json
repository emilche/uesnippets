[
  {
    "label": "bad_last_alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "bad_last_alloc"
  },
  {
    "label": "improper_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "improper_lock"
  },
  {
    "label": "user_abort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "user_abort"
  },
  {
    "label": "missing_wait",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "missing_wait"
  },
  {
    "label": "invalid_multiple_scheduling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "invalid_multiple_scheduling"
  },
  {
    "label": "exception_id",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "exception_id"
  },
  {
    "label": "on",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "on"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "tbb_exception",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb_exception"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "captured_exception",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "captured_exception"
  },
  {
    "label": "movable_exception",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "movable_exception"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "tbb_exception_ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb_exception_ptr"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "throw_bad_last_alloc_exception_v4()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "throw_bad_last_alloc_exception_v4()"
  },
  {
    "label": "comment()",
    "kind": "Method",
    "detail": "Function (this)",
    "insertText": "comment(that is\n        _after_ all the existing IDs. NEVER insert new IDs between the existing ones. **/\n    eid_max\n};\n\n//! Gathers all throw operators in one place.\n/** Its purpose is to minimize code bloat that can be caused by throw operators\n    scattered in multiple places, especially in templates. **/\nvoid __TBB_EXPORTED_FUNC throw_exception_v4 ( exception_id )"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new( size_t )"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (captured_exception)",
    "insertText": "e(name,info)"
  }
]