[
  {
    "label": "FDisplacementMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplacementMap"
  },
  {
    "label": "FImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImage"
  },
  {
    "label": "FDisplacementMap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / Texture . h \" namespace Nanite { class FDisplacementMap { public : ETextureSourceFormat SourceFormat ; int32 BytesPerPixel ; int32 SizeX ; int32 SizeY ; uint32 NumLevels ; float Magnitude ; float Center ; TextureAddress AddressX ; TextureAddress AddressY ; public :)",
    "insertText": "FDisplacementMap()"
  },
  {
    "label": "FDisplacementMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDisplacementMap(struct FImage&& TextureSourceImage, float InMagnitude, float InCenter, TextureAddress InAddressX, TextureAddress InAddressY)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Sample(FVector2f UV)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "Sample(FVector2f MinUV, FVector2f MaxUV)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Sample(int32 x, int32 y)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "Sample(int32 x, int32 y, uint32 Level)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Load(int32 x, int32 y)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "Load(int32 x, int32 y, uint32 Level)"
  },
  {
    "label": "Address()",
    "kind": "Method",
    "detail": "Function (private : TArray64<uint8> SourceData ; TArray<FVector2f> MipData [ 1 2 ] ; void)",
    "insertText": "Address(int32& x, int32& y)"
  },
  {
    "label": "Address()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Address(x,y)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (float Displacement =)",
    "insertText": "Load(x,y)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (x>> = Level ; y>> = Level ; FVector2f Displacement =)",
    "insertText": "Load(x, y, Level)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Displacement - =)",
    "insertText": "FVector2f(Center)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const uint8* PixelPtr =& SourceData [)",
    "insertText": "int64(x + (int64)y * SizeX)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SourceFormat == TSF_RGBA16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SourceFormat == TSF_RGBA16F || SourceFormat == TSF_R16F)"
  },
  {
    "label": "HalfValue()",
    "kind": "Method",
    "detail": "Function (FFloat16)",
    "insertText": "HalfValue(FFloat16*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SourceFormat == TSF_G16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SourceFormat == TSF_RGBA32F || SourceFormat == TSF_R32F)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(0, TEXT(\"Displacement map format not supported\"))"
  },
  {
    "label": "MipSizeX()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "MipSizeX(( SizeX - 1 ) >> Level)"
  },
  {
    "label": "MipSizeY()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "MipSizeY(( SizeY - 1 ) >> Level)"
  }
]