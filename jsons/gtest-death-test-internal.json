[
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "ReturnSentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnSentinel"
  },
  {
    "label": "TestRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TestRole"
  },
  {
    "label": "AbortReason",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AbortReason"
  },
  {
    "label": "DeathTestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeathTestFactory"
  },
  {
    "label": "DefaultDeathTestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultDeathTestFactory"
  },
  {
    "label": "InternalRunDeathTestFlag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InternalRunDeathTestFlag"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_ # define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_ # include<stdio . h> # include<memory> # include \" gtest / gtest - matchers . h \" # include \" gtest / internal / gtest - internal . h \")",
    "insertText": "GTEST_DECLARE_string_(internal_run_death_test)"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (namespace testing { namespace internal { const char kDeathTestStyleFlag [ ] = \" death_test_style \" ; const char kDeathTestUseFork [ ] = \" death_test_use_fork \" ; const char kInternalRunDeathTestFlag [ ] = \" internal_run_death_test \" ; # if GTEST_HAS_DEATH_TEST)",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "Create(const char* statement, Matcher<const std::string&> matcher, const char* file, int line, DeathTest** test)"
  },
  {
    "label": "DeathTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeathTest()"
  },
  {
    "label": "ReturnSentinel()",
    "kind": "Method",
    "detail": "Function (} class ReturnSentinel { public :)",
    "insertText": "ReturnSentinel(DeathTest* test) : test_(test)"
  },
  {
    "label": "ReturnSentinel()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ReturnSentinel()"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (test_ ->)",
    "insertText": "Abort(TEST_ENCOUNTERED_RETURN_STATEMENT)"
  },
  {
    "label": "ReturnSentinel()",
    "kind": "Method",
    "detail": "Function (} private : DeathTest* const test_ ;)",
    "insertText": "ReturnSentinel(const ReturnSentinel&)"
  },
  {
    "label": "AssumeRole()",
    "kind": "Method",
    "detail": "Function (} GTEST_ATTRIBUTE_UNUSED_ ; enum TestRole { OVERSEE_TEST,EXECUTE_TEST } ; enum AbortReason { TEST_ENCOUNTERED_RETURN_STATEMENT,TEST_THREW_EXCEPTION,TEST_DID_NOT_DIE } ; TestRole)",
    "insertText": "AssumeRole()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Wait()"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Passed(bool exit_status_ok)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abort(AbortReason reason)"
  },
  {
    "label": "LastMessage()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "LastMessage()"
  },
  {
    "label": "set_last_death_test_message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_last_death_test_message(const std::string& message)"
  },
  {
    "label": "DeathTest()",
    "kind": "Method",
    "detail": "Function (private : std::string last_death_test_message_ ;)",
    "insertText": "DeathTest(const DeathTest&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeathTest&)",
    "insertText": "operator(const DeathTest&)"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_POP_()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_POP_()"
  },
  {
    "label": "DeathTestFactory()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "DeathTestFactory()"
  },
  {
    "label": "ExitedUnsuccessfully()",
    "kind": "Method",
    "detail": "Function (} ; GTEST_API_ bool)",
    "insertText": "ExitedUnsuccessfully(int exit_status)"
  },
  {
    "label": "MakeDeathTestMatcher()",
    "kind": "Method",
    "detail": "Function (Matcher<const::std::string&>)",
    "insertText": "MakeDeathTestMatcher(::testing::internal::RE regex)"
  },
  {
    "label": "MakeDeathTestMatcher()",
    "kind": "Method",
    "detail": "Function (} Matcher<const::std::string&>)",
    "insertText": "MakeDeathTestMatcher(const char* regex)"
  },
  {
    "label": "MakeDeathTestMatcher()",
    "kind": "Method",
    "detail": "Function (} Matcher<const::std::string&>)",
    "insertText": "MakeDeathTestMatcher(const ::std::string& regex)"
  },
  {
    "label": "MakeDeathTestMatcher()",
    "kind": "Method",
    "detail": "Function (} Matcher<const::std::string&>)",
    "insertText": "MakeDeathTestMatcher(Matcher<const ::std::string&> matcher)"
  },
  {
    "label": "GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "catch(const ::std::exception& gtest_exception)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "fprintf(\\ stderr, \\ \"\\n%s: Caught std::exception-derived exception escaping the \" \\ \"death test statement. Exception message: %s\\n\", \\ ::testing::internal::FormatFileLocation(__FILE__, __LINE__).c_str(), \\ gtest_exception.what())"
  },
  {
    "label": "fflush()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "fflush(stderr)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (\\ death_test ->)",
    "insertText": "Abort(::testing::internal::DeathTest::TEST_THREW_EXCEPTION)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "catch(...)"
  },
  {
    "label": "GTEST_EXECUTE_DEATH_TEST_STATEMENT_()",
    "kind": "Method",
    "detail": "Function (\\ } # else # define)",
    "insertText": "GTEST_EXECUTE_DEATH_TEST_STATEMENT_(statement, death_test) \\ GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement) #endif #define GTEST_DEATH_TEST_(statement, predicate, regex_or_matcher, fail) \\ GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\ if (::testing::internal::AlwaysTrue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\::testing::internal::DeathTest* gtest_dt ; \\)",
    "insertText": "if(!::testing::internal::DeathTest::Create( \\ #statement, \\ ::testing::internal::MakeDeathTestMatcher(regex_or_matcher), \\ __FILE__, __LINE__, &gtest_dt))"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (\\ goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "if(gtest_dt != nullptr)"
  },
  {
    "label": "gtest_dt_ptr()",
    "kind": "Method",
    "detail": "Function (\\ std::unique_ptr<::testing::internal::DeathTest>)",
    "insertText": "gtest_dt_ptr(gtest_dt)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "switch(gtest_dt->AssumeRole())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ case::testing::internal::DeathTest::OVERSEE_TEST : \\)",
    "insertText": "if(!gtest_dt->Passed(predicate(gtest_dt->Wait())))"
  },
  {
    "label": "gtest_sentinel()",
    "kind": "Method",
    "detail": "Function (\\ } \\ break ; \\ case::testing::internal::DeathTest::EXECUTE_TEST : { \\::testing::internal::DeathTest::ReturnSentinel)",
    "insertText": "gtest_sentinel(\\ gtest_dt)"
  },
  {
    "label": "GTEST_EXECUTE_DEATH_TEST_STATEMENT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GTEST_EXECUTE_DEATH_TEST_STATEMENT_(statement, gtest_dt)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (\\ gtest_dt ->)",
    "insertText": "Abort(::testing::internal::DeathTest::TEST_DID_NOT_DIE)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ } \\ } \\ } \\ } else \\)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__) \\ : fail(::testing::internal::DeathTest::LastMessage()) #define GTEST_EXECUTE_STATEMENT_(statement, regex_or_matcher) \\ GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\ if (::testing::internal::AlwaysTrue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(!::testing::internal::AlwaysTrue())"
  },
  {
    "label": "MakeDeathTestMatcher()",
    "kind": "Method",
    "detail": "Function (\\::testing::)",
    "insertText": "MakeDeathTestMatcher(regex_or_matcher)"
  },
  {
    "label": "Message()",
    "kind": "Method",
    "detail": "Function (\\ } else \\::)",
    "insertText": "Message()"
  },
  {
    "label": "InternalRunDeathTestFlag()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "InternalRunDeathTestFlag(const std::string& a_file, int a_line, int an_index, int a_write_fd) : file_(a_file), line_(a_line), index_(an_index), write_fd_(a_write_fd)"
  },
  {
    "label": "InternalRunDeathTestFlag()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "InternalRunDeathTestFlag()"
  },
  {
    "label": "file()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "file()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InternalRunDeathTestFlag&)",
    "insertText": "operator(const InternalRunDeathTestFlag&)"
  },
  {
    "label": "ParseInternalRunDeathTestFlag()",
    "kind": "Method",
    "detail": "Function (} ; InternalRunDeathTestFlag*)",
    "insertText": "ParseInternalRunDeathTestFlag()"
  }
]