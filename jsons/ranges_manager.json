[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BucketRangesHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BucketRangesHash"
  },
  {
    "label": "BucketRangesEqual",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BucketRangesEqual"
  },
  {
    "label": "RangesManager()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_RANGES_MANAGER_H_ # define BASE_METRICS_RANGES_MANAGER_H_ # include<unordered_set> # include \" base / base_export . h \" # include \" base / metrics / bucket_ranges . h \" namespace base { class BASE_EXPORT RangesManager { public :)",
    "insertText": "RangesManager()"
  },
  {
    "label": "RangesManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangesManager(const RangesManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RangesManager&)",
    "insertText": "operator(const RangesManager&)"
  },
  {
    "label": "RegisterOrDeleteDuplicateRanges()",
    "kind": "Method",
    "detail": "Function (const BucketRanges*)",
    "insertText": "RegisterOrDeleteDuplicateRanges(const BucketRanges* ranges)"
  },
  {
    "label": "GetBucketRanges()",
    "kind": "Method",
    "detail": "Function (std::vector<const BucketRanges*>)",
    "insertText": "GetBucketRanges()"
  },
  {
    "label": "DoNotReleaseRangesOnDestroyForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoNotReleaseRangesOnDestroyForTesting()"
  },
  {
    "label": "ReleaseBucketRanges()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ReleaseBucketRanges()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct BucketRangesHash { size_t)",
    "insertText": "operator()(const BucketRanges* a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct BucketRangesEqual { bool)",
    "insertText": "operator()(const BucketRanges* a, const BucketRanges* b)"
  }
]