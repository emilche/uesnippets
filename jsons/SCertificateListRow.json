[
  {
    "label": "SCertificateListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCertificateListRow"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" IOSTargetSettingsCustomization . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Views / SListView . h \" # include \" SlateOptMacros . h \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCertificateChanged, FString)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SCertificateListRow : public SMultiColumnTableRow<CertificatePtr> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCertificateListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(CertificatePtr, Certificate) SLATE_ARGUMENT(CertificateListPtr, CertificateList) SLATE_EVENT(FOnCertificateChanged, OnCertificateChanged) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Certificate = InArgs . _Certificate ; CertificateList = InArgs . _CertificateList ; OnCertificateChanged_Handler = InArgs . _OnCertificateChanged ; SMultiColumnTableRow<CertificatePtr)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Name\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Status\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Expires\"))"
  },
  {
    "label": "HandleNameText()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } END_SLATE_FUNCTION_BUILD_OPTIMIZATION private : FText)",
    "insertText": "HandleNameText()"
  },
  {
    "label": "HandleStatusTextBlockText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleStatusTextBlockText()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromString(TEXT(\"Valid\"))"
  },
  {
    "label": "HandleStatusTextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleStatusTextColorAndOpacity()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Certificate->bSelected)"
  },
  {
    "label": "FSlateColor()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FSlateColor(FLinearColor(1.0f, 1.0f, 1.0f))"
  },
  {
    "label": "HandleSelectedColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleSelectedColorAndOpacity()"
  },
  {
    "label": "HandleExpiresText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleExpiresText()"
  },
  {
    "label": "HandleChecked()",
    "kind": "Method",
    "detail": "Function (} ECheckBoxState)",
    "insertText": "HandleChecked()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Certificate -> bManuallySelected = InState = = ECheckBoxState::Checked ;)",
    "insertText": "if(OnCertificateChanged_Handler.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnCertificateChanged_Handler .)",
    "insertText": "Execute(Certificate->bManuallySelected ? Certificate->Name : \"\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Idx = 0; Idx < CertificateList->Num(); ++Idx)"
  }
]