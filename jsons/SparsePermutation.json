[
  {
    "label": "permutation_matrix_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "permutation_matrix_product"
  },
  {
    "label": "product_promote_storage_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_promote_storage_type"
  },
  {
    "label": "product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_evaluator"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_PERMUTATION_H # define EIGEN_SPARSE_PERMUTATION_H namespace Eigen { namespace internal { template<ExpressionType,int Side,bool Transposed> struct permutation_matrix_product<ExpressionType,Side,Transposed,SparseShape> { typedef nested_eval<ExpressionType,1>::type MatrixType ; typedef remove_all<MatrixType>::type MatrixTypeCleaned ; typedef MatrixTypeCleaned::Scalar Scalar ; typedef MatrixTypeCleaned::StorageIndex StorageIndex ; enum { SrcStorageOrder = MatrixTypeCleaned::Flags& RowMajorBit ? RowMajor : ColMajor,MoveOuter = SrcStorageOrder = = RowMajor ? Side = = OnTheLeft : Side = = OnTheRight } ; typedef internal::conditional<MoveOuter,SparseMatrix<Scalar,SrcStorageOrder,StorageIndex>,SparseMatrix<Scalar,)",
    "insertText": "int(SrcStorageOrder)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<Dest,PermutationType> void)",
    "insertText": "run(Dest& dst, const PermutationType& perm, const ExpressionType& xpr)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "mat(xpr)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (SparseMatrix<Scalar,SrcStorageOrder,StorageIndex>)",
    "insertText": "tmp(mat.rows(), mat.cols())"
  },
  {
    "label": "sizes()",
    "kind": "Method",
    "detail": "Function (Matrix<StorageIndex,Dynamic,1>)",
    "insertText": "sizes(mat.outerSize())"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (Index jp = perm .)",
    "insertText": "indices().coeff(j)"
  },
  {
    "label": "sizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sizes((Side==OnTheLeft) ^ Transposed) ? jp : j] = StorageIndex(mat.innerVector(((Side==OnTheRight) ^ Transposed) ? jp : j).nonZeros())"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} tmp .)",
    "insertText": "reserve(sizes)"
  },
  {
    "label": "jsrc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "jsrc((Side==OnTheRight) ^ Transposed)"
  },
  {
    "label": "jdst()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "jdst((Side==OnTheLeft) ^ Transposed)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} dst = tmp ; } else { SparseMatrix<Scalar,)",
    "insertText": "int(SrcStorageOrder)==RowMajor?ColMajor:RowMajor,StorageIndex> tmp(mat.rows(), mat.cols())"
  },
  {
    "label": "sizes()",
    "kind": "Method",
    "detail": "Function (Matrix<StorageIndex,Dynamic,1>)",
    "insertText": "sizes(tmp.outerSize())"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (sizes .)",
    "insertText": "setZero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PermutationMatrix<Dynamic,Dynamic,StorageIndex> perm_cpy ;)",
    "insertText": "if((Side==OnTheLeft) ^ Transposed)"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (dst = tmp ; } } } ; } namespace internal { template<int ProductTag> struct product_promote_storage_type<Sparse,PermutationStorage,ProductTag> { typedef Sparse ret ; } ; template<int ProductTag> struct product_promote_storage_type<PermutationStorage,Sparse,ProductTag> { typedef Sparse ret ; } ; template<Lhs,Rhs,int ProductTag> struct product_evaluator<Product<Lhs,Rhs,AliasFreeProduct>,ProductTag,PermutationShape,SparseShape> : public evaluator<permutation_matrix_product<Rhs,OnTheLeft,false,SparseShape>::ReturnType> { typedef Product<Lhs,Rhs,AliasFreeProduct> XprType ; typedef permutation_matrix_product<Rhs,OnTheLeft,false,SparseShape>::ReturnType PlainObject ; typedef evaluator<PlainObject> Base ; enum { Flags = Base::Flags | EvalBeforeNestingBit } ;)",
    "insertText": "product_evaluator(const XprType& xpr) : m_result(xpr.rows(), xpr.cols())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_result)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (generic_product_impl<Lhs,Rhs,PermutationShape,SparseShape,ProductTag)",
    "insertText": "evalTo(m_result, xpr.lhs(), xpr.rhs())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : PlainObject m_result ; } ; } template<SparseDerived,PermDerived> const Product<SparseDerived,PermDerived,AliasFreeProduct>)",
    "insertText": "operator(const SparseMatrixBase<SparseDerived>& matrix, const PermutationBase<PermDerived>& perm)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<SparseDerived,PermDerived> const Product<PermDerived,SparseDerived,AliasFreeProduct>)",
    "insertText": "operator(const PermutationBase<PermDerived>& perm, const SparseMatrixBase<SparseDerived>& matrix)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<SparseDerived,PermutationType> const Product<SparseDerived,Inverse<PermutationType>,AliasFreeProduct>)",
    "insertText": "operator(const SparseMatrixBase<SparseDerived>& matrix, const InverseImpl<PermutationType, PermutationStorage>& tperm)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<SparseDerived,PermutationType> const Product<Inverse<PermutationType>,SparseDerived,AliasFreeProduct>)",
    "insertText": "operator(const InverseImpl<PermutationType,PermutationStorage>& tperm, const SparseMatrixBase<SparseDerived>& matrix)"
  }
]