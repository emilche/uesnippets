[
  {
    "label": "PolygonPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PolygonPool"
  },
  {
    "label": "VolumeToMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VolumeToMesh"
  },
  {
    "label": "VolumeToMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VolumeToMesh"
  },
  {
    "label": "FillArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FillArray"
  },
  {
    "label": "AccessorT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AccessorT"
  },
  {
    "label": "AccessorT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AccessorT"
  },
  {
    "label": "LeafType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafType"
  },
  {
    "label": "LeafType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafType"
  },
  {
    "label": "ComputePoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePoints"
  },
  {
    "label": "ComputePoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePoints"
  },
  {
    "label": "SeamLineWeights",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SeamLineWeights"
  },
  {
    "label": "SeamLineWeights",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SeamLineWeights"
  },
  {
    "label": "SetSeamLineFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetSeamLineFlags"
  },
  {
    "label": "SetSeamLineFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetSeamLineFlags"
  },
  {
    "label": "TransferSeamLineFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransferSeamLineFlags"
  },
  {
    "label": "TransferSeamLineFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransferSeamLineFlags"
  },
  {
    "label": "MaskSeamLineVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskSeamLineVoxels"
  },
  {
    "label": "MaskSeamLineVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskSeamLineVoxels"
  },
  {
    "label": "MergeVoxelRegions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MergeVoxelRegions"
  },
  {
    "label": "MergeVoxelRegions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MergeVoxelRegions"
  },
  {
    "label": "UniformPrimBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniformPrimBuilder"
  },
  {
    "label": "AdaptivePrimBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdaptivePrimBuilder"
  },
  {
    "label": "MaskTileBorders",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskTileBorders"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "PointListCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointListCopy"
  },
  {
    "label": "LeafNodeVoxelOffsets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafNodeVoxelOffsets"
  },
  {
    "label": "LeafNodeOffsets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafNodeOffsets"
  },
  {
    "label": "VoxelEdgeAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoxelEdgeAccessor"
  },
  {
    "label": "IdentifyIntersectingVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IdentifyIntersectingVoxels"
  },
  {
    "label": "IdentifyIntersectingVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IdentifyIntersectingVoxels"
  },
  {
    "label": "MaskIntersectingVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskIntersectingVoxels"
  },
  {
    "label": "MaskIntersectingVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskIntersectingVoxels"
  },
  {
    "label": "MaskBorderVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskBorderVoxels"
  },
  {
    "label": "MaskBorderVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskBorderVoxels"
  },
  {
    "label": "SyncMaskValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SyncMaskValues"
  },
  {
    "label": "SyncMaskValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SyncMaskValues"
  },
  {
    "label": "MaskSurface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskSurface"
  },
  {
    "label": "MaskSurface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskSurface"
  },
  {
    "label": "ComputeAuxiliaryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputeAuxiliaryData"
  },
  {
    "label": "LeafNodePointCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafNodePointCount"
  },
  {
    "label": "LeafNodePointCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafNodePointCount"
  },
  {
    "label": "AdaptiveLeafNodePointCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdaptiveLeafNodePointCount"
  },
  {
    "label": "AdaptiveLeafNodePointCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdaptiveLeafNodePointCount"
  },
  {
    "label": "MapPoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MapPoints"
  },
  {
    "label": "MapPoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MapPoints"
  },
  {
    "label": "ComputePolygons",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePolygons"
  },
  {
    "label": "ComputePolygons",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePolygons"
  },
  {
    "label": "CopyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyArray"
  },
  {
    "label": "CopyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyArray"
  },
  {
    "label": "FlagAndCountQuadsToSubdivide",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagAndCountQuadsToSubdivide"
  },
  {
    "label": "FlagAndCountQuadsToSubdivide",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagAndCountQuadsToSubdivide"
  },
  {
    "label": "SubdivideQuads",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubdivideQuads"
  },
  {
    "label": "SubdivideQuads",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubdivideQuads"
  },
  {
    "label": "ReviseSeamLineFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReviseSeamLineFlags"
  },
  {
    "label": "ReviseSeamLineFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReviseSeamLineFlags"
  },
  {
    "label": "MaskDisorientedTrianglePoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskDisorientedTrianglePoints"
  },
  {
    "label": "MaskDisorientedTrianglePoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskDisorientedTrianglePoints"
  },
  {
    "label": "volumeToMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "volumeToMesh(\n    const GridType& grid,\n    std::vector<Vec3s>& points,\n    std::vector<Vec4I>& quads,\n    double isovalue = 0.0)"
  },
  {
    "label": "volumeToMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "volumeToMesh(\n    const GridType& grid,\n    std::vector<Vec3s>& points,\n    std::vector<Vec3I>& triangles,\n    std::vector<Vec4I>& quads,\n    double isovalue = 0.0,\n    double adaptivity = 0.0,\n    bool relaxDisorientedTriangles = true)"
  },
  {
    "label": "PolygonPool()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "PolygonPool()"
  },
  {
    "label": "PolygonPool()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "PolygonPool(const size_t numQuads, const size_t numTriangles)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(const PolygonPool& rhs)"
  },
  {
    "label": "resetQuads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetQuads(size_t size)"
  },
  {
    "label": "clearQuads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearQuads()"
  },
  {
    "label": "resetTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetTriangles(size_t size)"
  },
  {
    "label": "clearTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearTriangles()"
  },
  {
    "label": "trimQuads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "trimQuads(const size_t n, bool reallocate = false)"
  },
  {
    "label": "trimTrinagles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "trimTrinagles(const size_t n, bool reallocate = false)"
  },
  {
    "label": "setRefGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRefGrid(const GridBase::ConstPtr& grid, double secAdaptivity = 0)"
  },
  {
    "label": "setSurfaceMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSurfaceMask(const GridBase::ConstPtr& mask, bool invertMask = false)"
  },
  {
    "label": "setSpatialAdaptivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSpatialAdaptivity(const GridBase::ConstPtr& grid)"
  },
  {
    "label": "setAdaptivityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAdaptivityMask(const TreeBase::ConstPtr& tree)"
  },
  {
    "label": "VolumeToMesh()",
    "kind": "Method",
    "detail": "Function (copying)",
    "insertText": "VolumeToMesh(const VolumeToMesh&)"
  },
  {
    "label": "avgPos()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "avgPos(0.0)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "rhs(0.0)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (Mat3d)",
    "insertText": "A(m00,m01,m02,\n            m01,m11,m12,\n            m02,m12,m22)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "range(0, length, grainSize)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "uint8_t(signs)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "uint8_t(signs)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "uint8_t(signs)"
  },
  {
    "label": "avg()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "avg(0.0, 0.0, 0.0)"
  },
  {
    "label": "avg()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "avg(0.0, 0.0, 0.0)"
  },
  {
    "label": "setRefData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRefData(const InputTreeType& refInputTree,\n        const Index32TreeType& refPointIndexTree,\n        const Int16TreeType& refSignFlagsTree,\n        const uint32_t * quantizedSeamLinePoints,\n        uint8_t * seamLinePointsFlags)"
  },
  {
    "label": "inputAcc()",
    "kind": "Method",
    "detail": "Function (InputTreeAccessor)",
    "insertText": "inputAcc(*mInputTree)"
  },
  {
    "label": "points()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec3d>)",
    "insertText": "points(4)"
  },
  {
    "label": "weightedPointMask()",
    "kind": "Method",
    "detail": "Function (std::vector<bool>)",
    "insertText": "weightedPointMask(4)"
  },
  {
    "label": "collectCornerValues()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "collectCornerValues(inputAcc, ijk, values)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (points)",
    "insertText": "for(typename IndexArrayMap::iterator it = regions.begin()"
  },
  {
    "label": "collectCornerValues()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "collectCornerValues(inputAcc, ijk, values)"
  },
  {
    "label": "inputTreeAcc()",
    "kind": "Method",
    "detail": "Function (InputTreeType>)",
    "insertText": "inputTreeAcc(*mInputTree)"
  },
  {
    "label": "pointIndexTreeAcc()",
    "kind": "Method",
    "detail": "Function (Index32TreeType>)",
    "insertText": "pointIndexTreeAcc(*mRefPointIndexTree)"
  },
  {
    "label": "signFlagsTreeAcc()",
    "kind": "Method",
    "detail": "Function (Int16TreeType>)",
    "insertText": "signFlagsTreeAcc(*mRefSignFlagsTree)"
  },
  {
    "label": "values()",
    "kind": "Method",
    "detail": "Function (std::vector<double>)",
    "insertText": "values(8)"
  },
  {
    "label": "refSignFlagsTreeAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "refSignFlagsTreeAcc(*mRefSignFlagsTree)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (BoolTreeType>)",
    "insertText": "maskAcc(*mMaskTree)"
  },
  {
    "label": "signFlagsAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "signFlagsAcc(*mSignFlagsTree)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<BoolTreeType>)",
    "insertText": "maskAcc(*mMask)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "seamLineMaskTree()",
    "kind": "Method",
    "detail": "Function (BoolTreeType)",
    "insertText": "seamLineMaskTree(false)"
  },
  {
    "label": "maskSeamLine()",
    "kind": "Method",
    "detail": "Function (MaskSeamLineVoxels<SignDataTreeType>)",
    "insertText": "maskSeamLine(signFlagsLeafNodes, signFlagsTree, seamLineMaskTree)"
  },
  {
    "label": "inputAcc()",
    "kind": "Method",
    "detail": "Function (InputTreeAccessor)",
    "insertText": "inputAcc(*mInputTree)"
  },
  {
    "label": "pointIndexAcc()",
    "kind": "Method",
    "detail": "Function (Index32TreeAccessor)",
    "insertText": "pointIndexAcc(*mPointIndexTree)"
  },
  {
    "label": "adaptivityLeaf()",
    "kind": "Method",
    "detail": "Function (FloatLeafNodeType)",
    "insertText": "adaptivityLeaf(origin, adaptivity)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (voxels)",
    "insertText": "for(auto it = signFlagsNode.cbeginValueOn()"
  },
  {
    "label": "quad()",
    "kind": "Method",
    "detail": "Function (math::Vec4<IndexType>)",
    "insertText": "quad(0,0,0,0)"
  },
  {
    "label": "inputTreeAcc()",
    "kind": "Method",
    "detail": "Function (InputTreeType>)",
    "insertText": "inputTreeAcc(*mInputTree)"
  },
  {
    "label": "tileIter()",
    "kind": "Method",
    "detail": "Function (InputTreeType::ValueOnCIter)",
    "insertText": "tileIter(inputTree)"
  },
  {
    "label": "constructOffsetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "constructOffsetList()"
  },
  {
    "label": "evalInternalVoxelEdges()",
    "kind": "Method",
    "detail": "Function (edges)",
    "insertText": "evalInternalVoxelEdges(xEdgeAcc, node, *mOffsets, mIsovalue)"
  },
  {
    "label": "evalInternalVoxelEdges()",
    "kind": "Method",
    "detail": "Function (edges)",
    "insertText": "evalInternalVoxelEdges(yEdgeAcc, node, *mOffsets, mIsovalue)"
  },
  {
    "label": "evalInternalVoxelEdges()",
    "kind": "Method",
    "detail": "Function (edges)",
    "insertText": "evalInternalVoxelEdges(zEdgeAcc, node, *mOffsets, mIsovalue)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (IdentifyIntersectingVoxels<InputTreeType>)",
    "insertText": "op(\n        inputTree, inputLeafNodes, intersectionTree, isovalue)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "iso()",
    "kind": "Method",
    "detail": "Function (InputValueType)",
    "insertText": "iso(mIsovalue)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (BoolTreeType>)",
    "insertText": "maskAcc(*mMaskTree)"
  },
  {
    "label": "borderAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<BoolTreeType>)",
    "insertText": "borderAcc(*mBorderTree)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "maskTreeAcc()",
    "kind": "Method",
    "detail": "Function (BoolTreeType>)",
    "insertText": "maskTreeAcc(*mMaskTree)"
  },
  {
    "label": "maskTreeAcc()",
    "kind": "Method",
    "detail": "Function (BoolTreeType>)",
    "insertText": "maskTreeAcc(*mMaskTree)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "borderOp()",
    "kind": "Method",
    "detail": "Function (MaskBorderVoxels<BoolTreeType>)",
    "insertText": "borderOp(\n            intersectionTree, intersectionLeafNodes, borderTree)"
  },
  {
    "label": "tmpIntersectionTree()",
    "kind": "Method",
    "detail": "Function (BoolTreeType)",
    "insertText": "tmpIntersectionTree(false)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (MaskIntersectingVoxels<InputTreeType>)",
    "insertText": "op(\n            inputTree, intersectionLeafNodes, tmpIntersectionTree, isovalue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (fill)",
    "insertText": "for(auto it = idxNode->beginValueOn()"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ComputeAuxiliaryData<InputTreeType>)",
    "insertText": "op(\n        inputTree, intersectionLeafNodes, signFlagsTree, pointIndexTree, isovalue)"
  },
  {
    "label": "signAcc()",
    "kind": "Method",
    "detail": "Function (Int16ValueAccessor)",
    "insertText": "signAcc(*mSignFlagsTree)"
  },
  {
    "label": "idxAcc()",
    "kind": "Method",
    "detail": "Function (Index32TreeType>)",
    "insertText": "idxAcc(*mIndexTree)"
  },
  {
    "label": "polygonPoolListRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "polygonPoolListRange(0, polygonPoolListSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (loop)",
    "insertText": "for(size_t i = 0, I = polygons.numTriangles()"
  },
  {
    "label": "inputAcc()",
    "kind": "Method",
    "detail": "Function (InputTreeType>)",
    "insertText": "inputAcc(*mInputTree)"
  },
  {
    "label": "polygonPoolListRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "polygonPoolListRange(0, polygonPoolListSize)"
  },
  {
    "label": "signFlagsTree()",
    "kind": "Method",
    "detail": "Function (Int16TreeType)",
    "insertText": "signFlagsTree(0)"
  },
  {
    "label": "refIntersectionTree()",
    "kind": "Method",
    "detail": "Function (BoolTreeType)",
    "insertText": "refIntersectionTree(false)"
  },
  {
    "label": "mergeOp()",
    "kind": "Method",
    "detail": "Function (volume_to_mesh_internal::MergeVoxelRegions<InputGridType>)",
    "insertText": "mergeOp(\n            inputGrid, pointIndexTree, pointIndexLeafNodes, signFlagsLeafNodes,\n            isovalue, adaptivityThreshold, invertSurfaceOrientation)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (volume_to_mesh_internal::AdaptiveLeafNodePointCount<Index32LeafNodeType>)",
    "insertText": "op(pointIndexLeafNodes, signFlagsLeafNodes, leafNodeOffsets)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (volume_to_mesh_internal::LeafNodePointCount<Int16LeafNodeType::LOG2DIM>)",
    "insertText": "op(signFlagsLeafNodes, leafNodeOffsets)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (PrimBuilder>)",
    "insertText": "op(signFlagsLeafNodes, signFlagsTree, pointIndexTree,\n                mPolygons, invertSurfaceOrientation)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (PrimBuilder>)",
    "insertText": "op(signFlagsLeafNodes, signFlagsTree, pointIndexTree,\n                mPolygons, invertSurfaceOrientation)"
  },
  {
    "label": "mesher()",
    "kind": "Method",
    "detail": "Function (VolumeToMesh)",
    "insertText": "mesher(isovalue, adaptivity, relaxDisorientedTriangles)"
  }
]