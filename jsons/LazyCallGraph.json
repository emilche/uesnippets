[
  {
    "label": "PreservedAnalyses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreservedAnalyses"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "LazyCallGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyCallGraph"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "SCC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCC"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "postorder_scc_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "postorder_scc_iterator"
  },
  {
    "label": "IsAtEndT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsAtEndT"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "LazyCallGraphAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyCallGraphAnalysis"
  },
  {
    "label": "LazyCallGraphPrinterPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyCallGraphPrinterPass"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_LAZYCALLGRAPH_H # define LLVM_ANALYSIS_LAZYCALLGRAPH_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / PointerUnion . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / SetVector . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / iterator . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / IR / BasicBlock . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Module . h \" # include \" llvm / IR / PassManager . h \" # include \" llvm / Support / Allocator . h \" # include<iterator> namespace llvm { class PreservedAnalyses ; class raw_ostream ; class LazyCallGraph { public : class Node ; class SCC ; typedef SmallVector<PointerUnion<Function*,Node*>,4> NodeVectorT ; typedef SmallVectorImpl<PointerUnion<Function*,Node*>> NodeVectorImplT ; class iterator : public iterator_adaptor_base<iterator,NodeVectorImplT::iterator,std::forward_iterator_tag,Node> { class LazyCallGraph ; class LazyCallGraph::Node ; LazyCallGraph* G ; NodeVectorImplT::iterator E ;)",
    "insertText": "iterator(LazyCallGraph &G, NodeVectorImplT::iterator NI, NodeVectorImplT::iterator E) : iterator_adaptor_base(NI), G(&G), E(E)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} using iterator_adaptor_base::operator + + ; iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (Function* F = I -> get<)",
    "insertText": "Function()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Node& ChildN = G ->)",
    "insertText": "get(*F)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (* I =& ChildN ; return ChildN ; } } ; class Node { class LazyCallGraph ; class LazyCallGraph::SCC ; LazyCallGraph* G ; Function& F ; int DFSNumber ; int LowLink ; NodeVectorT Callees ; DenseMap<Function*,size_t> CalleeIndexMap ;)",
    "insertText": "Node(LazyCallGraph &G, Function &F)"
  },
  {
    "label": "insertEdgeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertEdgeInternal(Function &Callee)"
  },
  {
    "label": "insertEdgeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertEdgeInternal(Node &CalleeN)"
  },
  {
    "label": "removeEdgeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeEdgeInternal(Function &Callee)"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (public : typedef LazyCallGraph::iterator iterator ; Function&)",
    "insertText": "getFunction()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Node &N)"
  },
  {
    "label": "SCC()",
    "kind": "Method",
    "detail": "Function (} } ; class SCC { class LazyCallGraph ; class LazyCallGraph::Node ; LazyCallGraph* G ; SmallPtrSet<SCC*,1> ParentSCCs ; SmallVector<Node*,1> Nodes ;)",
    "insertText": "SCC(LazyCallGraph &G) : G(&G)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(Node &N)"
  },
  {
    "label": "internalDFS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internalDFS(SmallVectorImpl<std::pair<Node *, Node::iterator>> &DFSStack, SmallVectorImpl<Node *> &PendingSCCStack, Node *N, SmallVectorImpl<SCC *> &ResultSCCs)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (public : typedef SmallVectorImpl<Node*>::const_iterator iterator ; typedef pointee_iterator<SmallPtrSet<SCC*,1>::const_iterator> parent_iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "parent_begin()",
    "kind": "Method",
    "detail": "Function (} parent_iterator)",
    "insertText": "parent_begin()"
  },
  {
    "label": "parent_end()",
    "kind": "Method",
    "detail": "Function (} parent_iterator)",
    "insertText": "parent_end()"
  },
  {
    "label": "parents()",
    "kind": "Method",
    "detail": "Function (} iterator_range<parent_iterator>)",
    "insertText": "parents()"
  },
  {
    "label": "isParentOf()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isParentOf(const SCC &C)"
  },
  {
    "label": "isAncestorOf()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAncestorOf(const SCC &C)"
  },
  {
    "label": "isChildOf()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isChildOf(const SCC &C)"
  },
  {
    "label": "isDescendantOf()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDescendantOf(const SCC &C)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getName()"
  },
  {
    "label": "insertIntraSCCEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insertIntraSCCEdge(Node &CallerN, Node &CalleeN)"
  },
  {
    "label": "insertOutgoingEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertOutgoingEdge(Node &CallerN, Node &CalleeN)"
  },
  {
    "label": "insertIncomingEdge()",
    "kind": "Method",
    "detail": "Function (SmallVector<SCC*,1>)",
    "insertText": "insertIncomingEdge(Node &CallerN, Node &CalleeN)"
  },
  {
    "label": "removeInterSCCEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeInterSCCEdge(Node &CallerN, Node &CalleeN)"
  },
  {
    "label": "removeIntraSCCEdge()",
    "kind": "Method",
    "detail": "Function (SmallVector<SCC*,1>)",
    "insertText": "removeIntraSCCEdge(Node &CallerN, Node &CalleeN)"
  },
  {
    "label": "postorder_scc_iterator()",
    "kind": "Method",
    "detail": "Function (} ; class postorder_scc_iterator : public iterator_facade_base<postorder_scc_iterator,std::forward_iterator_tag,SCC> { class LazyCallGraph ; class LazyCallGraph::Node ; struct IsAtEndT { } ; LazyCallGraph* G ; SCC* C ;)",
    "insertText": "postorder_scc_iterator(LazyCallGraph &G) : G(&G)"
  },
  {
    "label": "getNextSCCInPostOrder()",
    "kind": "Method",
    "detail": "Function (C = G .)",
    "insertText": "getNextSCCInPostOrder()"
  },
  {
    "label": "postorder_scc_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "postorder_scc_iterator(LazyCallGraph &G, IsAtEndT ) : G(&G), C(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "operator(const postorder_scc_iterator &Arg)"
  },
  {
    "label": "LazyCallGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LazyCallGraph(LazyCallGraph &&G)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LazyCallGraph&)",
    "insertText": "operator(LazyCallGraph &&RHS)"
  },
  {
    "label": "postorder_scc_begin()",
    "kind": "Method",
    "detail": "Function (} postorder_scc_iterator)",
    "insertText": "postorder_scc_begin()"
  },
  {
    "label": "postorder_scc_end()",
    "kind": "Method",
    "detail": "Function (} postorder_scc_iterator)",
    "insertText": "postorder_scc_end()"
  },
  {
    "label": "postorder_sccs()",
    "kind": "Method",
    "detail": "Function (} iterator_range<postorder_scc_iterator>)",
    "insertText": "postorder_sccs()"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (} Node*)",
    "insertText": "lookup(const Function &F)"
  },
  {
    "label": "lookupSCC()",
    "kind": "Method",
    "detail": "Function (} SCC*)",
    "insertText": "lookupSCC(Node &N)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} Node&)",
    "insertText": "get(Function &F)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Node*& N = NodeMap [& F ] ;)",
    "insertText": "if(N)"
  },
  {
    "label": "insertEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insertEdge(Node &Caller, Function &Callee)"
  },
  {
    "label": "insertEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertEdge(Function &Caller, Function &Callee)"
  },
  {
    "label": "removeEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeEdge(Node &Caller, Function &Callee)"
  },
  {
    "label": "removeEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeEdge(Function &Caller, Function &Callee)"
  },
  {
    "label": "insertInto()",
    "kind": "Method",
    "detail": "Function (} private : SpecificBumpPtrAllocator<Node> BPA ; DenseMap<const Function*,Node*> NodeMap ; NodeVectorT EntryNodes ; DenseMap<Function*,size_t> EntryIndexMap ; SpecificBumpPtrAllocator<SCC> SCCBPA ; DenseMap<Node*,SCC*> SCCMap ; SmallVector<SCC*,4> LeafSCCs ; SmallVector<std::pair<Node*,iterator>,4> DFSStack ; SmallVector<Function*,4> SCCEntryNodes ; SmallVector<Node*,4> PendingSCCStack ; int NextDFSNumber ; Node&)",
    "insertText": "insertInto(Function &F, Node *&MappedN)"
  },
  {
    "label": "updateGraphPtrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateGraphPtrs()"
  },
  {
    "label": "formSCC()",
    "kind": "Method",
    "detail": "Function (SCC*)",
    "insertText": "formSCC(Node *RootN, SmallVectorImpl<Node *> &NodeStack)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct GraphTraits<LazyCallGraph::Node*> { typedef LazyCallGraph::Node NodeType ; typedef LazyCallGraph::iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(NodeType *N)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "ID()",
    "kind": "Method",
    "detail": "Function (} } ; class LazyCallGraphAnalysis { public : typedef LazyCallGraph Result ; void*)",
    "insertText": "ID()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "name()"
  },
  {
    "label": "LazyCallGraphPrinterPass()",
    "kind": "Method",
    "detail": "Function (} private : char PassID ; } ; class LazyCallGraphPrinterPass { raw_ostream& OS ; public :)",
    "insertText": "LazyCallGraphPrinterPass(raw_ostream &OS)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses)",
    "insertText": "run(Module &M, ModuleAnalysisManager *AM)"
  }
]