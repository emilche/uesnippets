[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" SGraphNodeResizable . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateStructs . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class SWidget ; class UEdGraphNode ; struct FGeometry ; struct FPointerEvent ; class SGraphNodeDocumentation : public SGraphNodeResizable { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphNodeDocumentation)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() virtual FVector2D ComputeDesiredSize(float)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, UEdGraphNode* InNode)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "GetNodeMinimumSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetNodeMinimumSize()"
  },
  {
    "label": "GetNodeMaximumSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetNodeMaximumSize()"
  },
  {
    "label": "GetTitleBarHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTitleBarHeight()"
  },
  {
    "label": "GetHitTestingBorder()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetHitTestingBorder()"
  },
  {
    "label": "UpdateGraphNode()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateGraphNode()"
  },
  {
    "label": "IsNameReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNameReadOnly()"
  },
  {
    "label": "CreateDocumentationPage()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateDocumentationPage()"
  },
  {
    "label": "GetContentWidth()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetContentWidth()"
  },
  {
    "label": "GetContentHeight()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetContentHeight()"
  },
  {
    "label": "GetDocumentationWrapWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDocumentationWrapWidth()"
  },
  {
    "label": "GetWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetWidgetVisibility()"
  },
  {
    "label": "GetPageGradientStartColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetPageGradientStartColor()"
  },
  {
    "label": "GetPageGradientEndColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetPageGradientEndColor()"
  }
]