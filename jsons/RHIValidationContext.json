[
  {
    "label": "FValidationRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationRHI"
  },
  {
    "label": "FValidationComputeContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationComputeContext"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FState"
  },
  {
    "label": "FValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationContext"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIValidationCommon . h \" # include \" RHIValidationUtils . h \" # include \" RHIValidation . h \" # if ENABLE_RHI_VALIDATION # include \" RHI . h \" class FValidationRHI ; void)",
    "insertText": "ValidateShaderParameters(FRHIShader* RHIShader, RHIValidation::FTracker* Tracker, RHIValidation::FStaticUniformBuffers& StaticUniformBuffers, RHIValidation::FStageBoundUniformBuffers& BoundUniformBuffers, TConstArrayView<FRHIShaderParameterResource> InParameters, ERHIAccess InRequiredAccess, RHIValidation::EUAVMode InRequiredUAVMode)"
  },
  {
    "label": "FValidationComputeContext()",
    "kind": "Method",
    "detail": "Function (class FValidationComputeContext final : public IRHIComputeContext { public : enum EType { Default,Parallel } const Type ;)",
    "insertText": "FValidationComputeContext(EType Type)"
  },
  {
    "label": "ValidateDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateDispatch()"
  },
  {
    "label": "FValidationComputeContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FValidationComputeContext()"
  },
  {
    "label": "GetLowestLevelContext()",
    "kind": "Method",
    "detail": "Function (} IRHIComputeContext&)",
    "insertText": "GetLowestLevelContext()"
  },
  {
    "label": "SetExecutingCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExecutingCommandList(InCmdList)"
  },
  {
    "label": "RHISetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetComputePipelineState(FRHIComputePipelineState* ComputePipelineState)"
  },
  {
    "label": "GetComputeShader()",
    "kind": "Method",
    "detail": "Function (State . BoundShader = ComputePipelineState ->)",
    "insertText": "GetComputeShader()"
  },
  {
    "label": "ResetUAVState()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "ResetUAVState(RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "RHISetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (State . StaticUniformBuffers . bInSetPipelineStateCall = true ; RHIContext ->)",
    "insertText": "RHISetComputePipelineState(ComputePipelineState)"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (State . StaticUniformBuffers . bInSetPipelineStateCall = false ; } void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "ValidateThreadGroupCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateThreadGroupCount(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDispatchComputeShader(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Dispatch()"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "ValidateDispatchIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateDispatchIndirectArgsBuffer(ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(ArgumentBuffer->GetWholeResourceIdentity(), ERHIAccess::IndirectArgs)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDispatchIndirectComputeShader(ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RHISetAsyncComputeBudget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetAsyncComputeBudget(EAsyncComputeBudget Budget)"
  },
  {
    "label": "RHISetAsyncComputeBudget()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetAsyncComputeBudget(Budget)"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "AddOps()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AddOps(Transition->PendingAliases)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const FRHITransition* Transition : Transitions)"
  },
  {
    "label": "AddOps()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AddOps(Transition->PendingOperationsBegin)"
  },
  {
    "label": "AddOps()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AddOps(Transition->PendingSignals[GetPipeline()])"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (} RHIContext ->)",
    "insertText": "RHIBeginTransitions(Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "AddOps()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AddOps(Transition->PendingWaits[GetPipeline()])"
  },
  {
    "label": "AddOps()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AddOps(Transition->PendingOperationsEnd)"
  },
  {
    "label": "AddOps()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AddOps(Transition->PendingAliasingOverlaps)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (} RHIContext ->)",
    "insertText": "RHIEndTransitions(Transitions)"
  },
  {
    "label": "SetTrackedAccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTrackedAccess(const FRHITrackedAccessInfo& Info)"
  },
  {
    "label": "SetTrackedAccess()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "SetTrackedAccess(Info.Resource->GetValidationTrackerResource(), Info.Access)"
  },
  {
    "label": "SetTrackedAccess()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "SetTrackedAccess(Info)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(UnorderedAccessViewRHI->GetViewIdentity(), ERHIAccess::UAVCompute)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIClearUAVFloat(UnorderedAccessViewRHI, Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIClearUAVUint(UnorderedAccessViewRHI, Values)"
  },
  {
    "label": "RHISetShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderRootConstants(const FUint32Vector4& Constants)"
  },
  {
    "label": "RHISetShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetShaderRootConstants(Constants)"
  },
  {
    "label": "RHIDispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchComputeShaderBundle(FRHIShaderBundle* ShaderBundleRHI, FRHIBuffer* RecordArgBuffer, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleComputeDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(SharedBindlessParameters.Num() == 0, TEXT(\"SharedBindlessParameters should not be set on this platform and configuration\"))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RHI_VALIDATION_CHECK(Dispatches.Num() > 0, TEXT(\"A shader bundle must be dispatched with at least one record.\"))"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Dispatch.Shader, Tracker, State.StaticUniformBuffers, State.BoundUniformBuffers, Dispatch.Parameters->ResourceParameters, ERHIAccess::SRVCompute, RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Dispatch.Shader, Tracker, State.StaticUniformBuffers, State.BoundUniformBuffers, Dispatch.Parameters->BindlessParameters, ERHIAccess::SRVCompute, RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "ArgumentOffset()",
    "kind": "Method",
    "detail": "Function (ArgOffset)",
    "insertText": "ArgumentOffset(Dispatch.RecordIndex * ShaderBundleRHI->ArgStride)"
  },
  {
    "label": "ValidateDispatchIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateDispatchIndirectArgsBuffer(RecordArgBuffer, ArgumentOffset)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (} } Tracker ->)",
    "insertText": "Assert(RecordArgBuffer->GetWholeResourceIdentity(), ERHIAccess::IndirectArgs)"
  },
  {
    "label": "RHIDispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDispatchComputeShaderBundle(ShaderBundleRHI, RecordArgBuffer, SharedBindlessParameters, Dispatches, bEmulated)"
  },
  {
    "label": "RHIDispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchGraphicsShaderBundle(FRHIShaderBundle* ShaderBundleRHI, FRHIBuffer* RecordArgBuffer, const FRHIShaderBundleGraphicsState& BundleState, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleGraphicsDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "ResetUAVState()",
    "kind": "Method",
    "detail": "Function (continue ; } Tracker ->)",
    "insertText": "ResetUAVState(RHIValidation::EUAVMode::Graphics)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Dispatch.Shader, Tracker, State.StaticUniformBuffers, Dispatch.Parameters.ResourceParameters, ERHIAccess::SRVGraphics, RHIValidation::EUAVMode::Graphics)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Dispatch.Shader, Tracker, State.StaticUniformBuffers, Dispatch.Parameters.BindlessParameters, ERHIAccess::SRVGraphics, RHIValidation::EUAVMode::Graphics)"
  },
  {
    "label": "RHIDispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (# endif RHIContext ->)",
    "insertText": "RHIDispatchGraphicsShaderBundle(ShaderBundleRHI, RecordArgBuffer, BundleState, SharedBindlessParameters, Dispatches, bEmulated)"
  },
  {
    "label": "RHIBeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginUAVOverlap()"
  },
  {
    "label": "AllUAVsOverlap()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AllUAVsOverlap(true)"
  },
  {
    "label": "RHIEndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndUAVOverlap()"
  },
  {
    "label": "AllUAVsOverlap()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AllUAVsOverlap(false)"
  },
  {
    "label": "RHIBeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginUAVOverlap(TConstArrayView<FRHIUnorderedAccessView*> UAVs)"
  },
  {
    "label": "SpecificUAVOverlap()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "SpecificUAVOverlap(UAV->GetViewIdentity(), true)"
  },
  {
    "label": "RHIBeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} RHIContext ->)",
    "insertText": "RHIBeginUAVOverlap(UAVs)"
  },
  {
    "label": "RHIEndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndUAVOverlap(TConstArrayView<FRHIUnorderedAccessView*> UAVs)"
  },
  {
    "label": "SpecificUAVOverlap()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "SpecificUAVOverlap(UAV->GetViewIdentity(), false)"
  },
  {
    "label": "RHIEndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} RHIContext ->)",
    "insertText": "RHIEndUAVOverlap(UAVs)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(false, TEXT(\"A compute PSO has to be set to set resources into a shader!\"))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(false, *FString::Printf(TEXT(\"Invalid attempt to set parameters for compute shader '%s' while the currently bound shader is '%s'\"), Shader->GetShaderName(), State.BoundShader->GetShaderName()))"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Shader, Tracker, State.StaticUniformBuffers, State.BoundUniformBuffers, InBindlessParameters, ERHIAccess::SRVCompute, RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetShaderParameters(Shader, InParametersData, InParameters, InResourceParameters, InBindlessParameters)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderUnbinds(FRHIComputeShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStaticUniformBuffers(const FUniformBufferStaticBindings& InUniformBuffers)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InUniformBuffers .)",
    "insertText": "Bind(State.StaticUniformBuffers.Bindings)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetStaticUniformBuffers(InUniformBuffers)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (} # if WITH_RHI_BREADCRUMBS void)",
    "insertText": "RHIBeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "BeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "BeginBreadcrumbGPU(Breadcrumb)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIBeginBreadcrumbGPU(Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "EndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "EndBreadcrumbGPU(Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIEndBreadcrumbGPU(Breadcrumb)"
  },
  {
    "label": "RHIWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "RHIWriteGPUFence(FRHIGPUFence* FenceRHI)"
  },
  {
    "label": "RHIWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIWriteGPUFence(FenceRHI)"
  },
  {
    "label": "RHISetGPUMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetGPUMask(FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHISetGPUMask()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetGPUMask(GPUMask)"
  },
  {
    "label": "RHIGetGPUMask()",
    "kind": "Method",
    "detail": "Function (} FRHIGPUMask)",
    "insertText": "RHIGetGPUMask()"
  },
  {
    "label": "RHICopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICopyToStagingBuffer(FRHIBuffer* SourceBufferRHI, FRHIStagingBuffer* DestinationStagingBufferRHI, uint32 InOffset, uint32 InNumBytes)"
  },
  {
    "label": "RHITransferResources()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU void)",
    "insertText": "RHITransferResources(TConstArrayView<FTransferResourceParams> Params)"
  },
  {
    "label": "RHITransferResources()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHITransferResources(Params)"
  },
  {
    "label": "RHITransferResourceSignal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHITransferResourceSignal(TConstArrayView<FTransferResourceFenceData*> FenceDatas, FRHIGPUMask SrcGPUMask)"
  },
  {
    "label": "RHITransferResourceSignal()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHITransferResourceSignal(FenceDatas, SrcGPUMask)"
  },
  {
    "label": "RHITransferResourceWait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHITransferResourceWait(TConstArrayView<FTransferResourceFenceData*> FenceDatas)"
  },
  {
    "label": "RHITransferResourceWait()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHITransferResourceWait(FenceDatas)"
  },
  {
    "label": "RHICrossGPUTransfer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICrossGPUTransfer(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer, TConstArrayView<FCrossGPUTransferFence*> PostTransfer)"
  },
  {
    "label": "RHICrossGPUTransfer()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICrossGPUTransfer(Params, PreTransfer, PostTransfer)"
  },
  {
    "label": "RHICrossGPUTransferSignal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICrossGPUTransferSignal(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer)"
  },
  {
    "label": "RHICrossGPUTransferSignal()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICrossGPUTransferSignal(Params, PreTransfer)"
  },
  {
    "label": "RHICrossGPUTransferWait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICrossGPUTransferWait(TConstArrayView<FCrossGPUTransferFence*> SyncPoints)"
  },
  {
    "label": "RHICrossGPUTransferWait()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICrossGPUTransferWait(SyncPoints)"
  },
  {
    "label": "RHIBuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "RHIBuildAccelerationStructures(TConstArrayView<FRayTracingGeometryBuildParams> Params, const FRHIBufferRange& ScratchBufferRange)"
  },
  {
    "label": "RHIBuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIBuildAccelerationStructures(Params, ScratchBufferRange)"
  },
  {
    "label": "RHIBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBuildAccelerationStructure(const FRayTracingSceneBuildParams& SceneBuildParams)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(SceneBuildParams.Scene->GetWholeResourceIdentity(), ERHIAccess::BVHWrite)"
  },
  {
    "label": "RHIBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} RHIContext ->)",
    "insertText": "RHIBuildAccelerationStructure(SceneBuildParams)"
  },
  {
    "label": "RHIBindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindAccelerationStructureMemory(FRHIRayTracingScene* Scene, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "RHIBindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIBindAccelerationStructureMemory(Scene, Buffer, BufferOffset)"
  },
  {
    "label": "LinkToContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LinkToContext(IRHIComputeContext* PlatformContext)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (RHIContext = PlatformContext ; PlatformContext -> WrappingContext = this ; PlatformContext -> Tracker =& State . TrackerInstance ; } IRHIComputeContext* RHIContext = nullptr ; protected : struct FState { RHIValidation::FTracker TrackerInstance { ERHIPipeline::AsyncCompute } ; RHIValidation::FStaticUniformBuffers StaticUniformBuffers ; RHIValidation::FStageBoundUniformBuffers BoundUniformBuffers ; FString ComputePassName ; FRHIComputeShader* BoundShader = nullptr ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FValidationContext()",
    "kind": "Method",
    "detail": "Function (} State ; class FValidationRHI ; } ; class FValidationContext final : public IRHICommandContext { public : enum EType { Default,Parallel } const Type ;)",
    "insertText": "FValidationContext(EType InType)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (State . bGfxPSOSet = false ;)",
    "insertText": "Memset(State.BoundShaders, 0)"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetMultipleViewports(Count, Data)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (RHIValidation::FStageBoundUniformBuffers& BoundUniformBuffers = State . BoundUniformBuffers .)",
    "insertText": "Get(SF_Compute)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Dispatch.Shader, Tracker, State.StaticUniformBuffers, BoundUniformBuffers, Dispatch.Parameters->ResourceParameters, ERHIAccess::SRVCompute, RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Dispatch.Shader, Tracker, State.StaticUniformBuffers, BoundUniformBuffers, Dispatch.Parameters->BindlessParameters, ERHIAccess::SRVCompute, RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "RHIResummarizeHTile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIResummarizeHTile(FRHITexture* DepthTexture)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(DepthTexture->GetWholeResourceIdentity(), ERHIAccess::DSVWrite)"
  },
  {
    "label": "RHIResummarizeHTile()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIResummarizeHTile(DepthTexture)"
  },
  {
    "label": "RHIGetNativeCommandBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeCommandBuffer()"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIBeginRenderQuery(RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIEndRenderQuery(RenderQuery)"
  },
  {
    "label": "RHICalibrateTimers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICalibrateTimers(FRHITimestampCalibrationQuery* CalibrationQuery)"
  },
  {
    "label": "RHICalibrateTimers()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICalibrateTimers(CalibrationQuery)"
  },
  {
    "label": "RHIDiscardRenderTargets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDiscardRenderTargets(bool bDepth, bool bStencil, uint32 ColorBitMask)"
  },
  {
    "label": "RHIDiscardRenderTargets()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDiscardRenderTargets(bDepth, bStencil, ColorBitMask)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIBeginDrawingViewport(Viewport, RenderTargetRHI)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIEndDrawingViewport(Viewport, bPresent, bLockToVsync)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(VertexBuffer->GetWholeResourceIdentity(), ERHIAccess::VertexOrIndexBuffer)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (} RHIContext ->)",
    "insertText": "RHISetStreamSource(StreamIndex, VertexBuffer, Offset)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetViewport(MinX, MinY, MinZ, MaxX, MaxY, MaxZ)"
  },
  {
    "label": "RHISetStereoViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStereoViewport(float LeftMinX, float RightMinX, float LeftMinY, float RightMinY, float MinZ, float LeftMaxX, float RightMaxX, float LeftMaxY, float RightMaxY, float MaxZ)"
  },
  {
    "label": "RHISetStereoViewport()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetStereoViewport(LeftMinX, RightMinX, LeftMinY, RightMinY, MinZ, LeftMaxX, RightMaxX, LeftMaxY, RightMaxY, MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetScissorRect(bEnable, MinX, MinY, MaxX, MaxY)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetGraphicsPipelineState(FRHIGraphicsPipelineState* GraphicsState, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (State . bGfxPSOSet = true ;)",
    "insertText": "for(int32 FrequencyIndex = 0; FrequencyIndex < SF_NumFrequencies; ++FrequencyIndex)"
  },
  {
    "label": "Frequency()",
    "kind": "Method",
    "detail": "Function (EShaderFrequency)",
    "insertText": "Frequency(EShaderFrequency)"
  },
  {
    "label": "IsValidGraphicsFrequency()",
    "kind": "Method",
    "detail": "Function (State . BoundShaders [ FrequencyIndex ] =)",
    "insertText": "IsValidGraphicsFrequency(Frequency) ? GraphicsState->GetShader(Frequency)"
  },
  {
    "label": "ValidateDepthStencilForSetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValidateDepthStencilForSetGraphicsPipelineState(GraphicsState->DSMode)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (State . StaticUniformBuffers . bInSetPipelineStateCall = true ; RHIContext ->)",
    "insertText": "RHISetGraphicsPipelineState(GraphicsState, StencilRef, bApplyAdditionalState)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (State . StaticUniformBuffers . bInSetPipelineStateCall = false ; } # if PLATFORM_USE_FALLBACK_PSO void)",
    "insertText": "RHISetGraphicsPipelineState(const FGraphicsPipelineStateInitializer& PsoInit, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "GetVertexShader()",
    "kind": "Method",
    "detail": "Function (State . BoundShaders [ SF_Vertex ] = PsoInit . BoundShaderState .)",
    "insertText": "GetVertexShader()"
  },
  {
    "label": "GetPixelShader()",
    "kind": "Method",
    "detail": "Function (State . BoundShaders [ SF_Pixel ] = PsoInit . BoundShaderState .)",
    "insertText": "GetPixelShader()"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (State . BoundShaders [ SF_Geometry ] = PsoInit . BoundShaderState .)",
    "insertText": "GetGeometryShader()"
  },
  {
    "label": "GetAmplificationShader()",
    "kind": "Method",
    "detail": "Function (State . BoundShaders [ SF_Amplification ] = PsoInit . BoundShaderState .)",
    "insertText": "GetAmplificationShader()"
  },
  {
    "label": "GetMeshShader()",
    "kind": "Method",
    "detail": "Function (State . BoundShaders [ SF_Mesh ] = PsoInit . BoundShaderState .)",
    "insertText": "GetMeshShader()"
  },
  {
    "label": "ValidateDepthStencilForSetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateDepthStencilForSetGraphicsPipelineState(PsoInit.DepthStencilState->ActualDSMode)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (State . StaticUniformBuffers . bInSetPipelineStateCall = true ; RHIContext ->)",
    "insertText": "RHISetGraphicsPipelineState(PsoInit, StencilRef, bApplyAdditionalState)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (State . StaticUniformBuffers . bInSetPipelineStateCall = false ; } # endif void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(false, TEXT(\"A graphics PSO has to be set to set resources into a shader!\"))"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (ERHIAccess RequiredAccess = Shader ->)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Shader, Tracker, State.StaticUniformBuffers, BoundUniformBuffers, InResourceParameters, RequiredAccess, RHIValidation::EUAVMode::Graphics)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Shader, Tracker, State.StaticUniformBuffers, BoundUniformBuffers, InBindlessParameters, RequiredAccess, RHIValidation::EUAVMode::Graphics)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(false, *FString::Printf(TEXT(\"Invalid attempt to set parameters for compute shader '%s' while the currently bound shader is '%s'\"), Shader->GetShaderName(), State.BoundShaders[SF_Compute]->GetShaderName()))"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Shader, Tracker, State.StaticUniformBuffers, BoundUniformBuffers, InResourceParameters, ERHIAccess::SRVCompute, RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Shader, Tracker, State.StaticUniformBuffers, BoundUniformBuffers, InBindlessParameters, ERHIAccess::SRVCompute, RHIValidation::EUAVMode::Compute)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderUnbinds(FRHIGraphicsShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetStencilRef(StencilRef)"
  },
  {
    "label": "RHISetBlendFactor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetBlendFactor(const FLinearColor& BlendFactor)"
  },
  {
    "label": "RHISetBlendFactor()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetBlendFactor(BlendFactor)"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "ValidateDrawing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateDrawing()"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDrawPrimitive(BaseVertexIndex, NumPrimitives, NumInstances)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Draw()"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(ArgumentBuffer, ArgumentOffset, sizeof(FRHIDrawIndirectParameters), 0)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDrawPrimitiveIndirect(ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(ArgumentsBufferRHI, DrawArgumentsIndex * ArgumentsBufferRHI->GetStride(), sizeof(FRHIDrawIndexedIndirectParameters), 0)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(ArgumentsBufferRHI->GetWholeResourceIdentity(), ERHIAccess::IndirectArgs)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(IndexBufferRHI->GetWholeResourceIdentity(), ERHIAccess::VertexOrIndexBuffer)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDrawIndexedIndirect(IndexBufferRHI, ArgumentsBufferRHI, DrawArgumentsIndex, NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(IndexBuffer->GetWholeResourceIdentity(), ERHIAccess::VertexOrIndexBuffer)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDrawIndexedPrimitive(IndexBuffer, BaseVertexIndex, FirstInstance, NumVertices, StartIndex, NumPrimitives, NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(ArgumentBuffer, ArgumentOffset, sizeof(FRHIDrawIndexedIndirectParameters), 0)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(IndexBuffer, ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RHIMultiDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIMultiDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset, FRHIBuffer* CountBuffer, uint32 CountBufferOffset, uint32 MaxDrawArguments)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(CountBuffer->GetWholeResourceIdentity(), ERHIAccess::IndirectArgs)"
  },
  {
    "label": "RHIMultiDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIMultiDrawIndexedPrimitiveIndirect(IndexBuffer, ArgumentBuffer, ArgumentOffset, CountBuffer, CountBufferOffset, MaxDrawArguments)"
  },
  {
    "label": "RHIDispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchMeshShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDispatchMeshShader(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchIndirectMeshShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIDispatchIndirectMeshShader(ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetDepthBounds(MinDepth, MaxDepth)"
  },
  {
    "label": "RHISetShadingRate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShadingRate(EVRSShadingRate ShadingRate, EVRSRateCombiner Combiner)"
  },
  {
    "label": "RHISetShadingRate()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetShadingRate(ShadingRate, Combiner)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (State . bInsideBeginRenderPass = true ; State . RenderPassInfo = InInfo ; State . RenderPassName = InName ; FIntVector ViewDimensions =)",
    "insertText": "FIntVector(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRHIRenderPassInfo::FColorEntry& RTV = State . RenderPassInfo . ColorRenderTargets [ RTVIndex ] ;)",
    "insertText": "if(RTV.RenderTarget == nullptr)"
  },
  {
    "label": "GetMipDimensions()",
    "kind": "Method",
    "detail": "Function (continue ; } FIntVector MipDimensions = RTV . RenderTarget ->)",
    "insertText": "GetMipDimensions(RTV.MipIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ViewDimensions = MipDimensions ; uint32 ArraySlice = RTV . ArraySlice ; uint32 NumArraySlices = 1 ;)",
    "insertText": "if(RTV.ArraySlice < 0)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (ArraySlice = 0 ; NumArraySlices = 0 ; } Tracker ->)",
    "insertText": "Assert(RTV.RenderTarget->GetViewIdentity(RTV.MipIndex, 1, ArraySlice, NumArraySlices, 0, 0), ERHIAccess::RTV)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (const FRHITextureDesc& RenderTargetDesc = RTV . RenderTarget ->)",
    "insertText": "GetDesc()"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(RTV.ResolveTarget->GetViewIdentity(RTV.MipIndex, 1, ArraySlice, NumArraySlices, 0, 0), ERHIAccess::ResolveDst)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } FRHIRenderPassInfo::FDepthStencilEntry& DSV = State . RenderPassInfo . DepthStencilRenderTarget ;)",
    "insertText": "if(DSV.DepthStencilTarget)"
  },
  {
    "label": "GetMipDimensions()",
    "kind": "Method",
    "detail": "Function (FIntVector MipDimensions = DSV . DepthStencilTarget ->)",
    "insertText": "GetMipDimensions(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ViewDimensions = MipDimensions ;)",
    "insertText": "if(DSV.ResolveTarget)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(DSV.ExclusiveDepthStencil.IsUsingDepth())"
  },
  {
    "label": "IsDepthWrite()",
    "kind": "Method",
    "detail": "Function (ERHIAccess DepthAccess = DSV . ExclusiveDepthStencil .)",
    "insertText": "IsDepthWrite()"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(DSV.DepthStencilTarget->GetViewIdentity(0, 0, 0, 0, uint32(RHIValidation::EResourcePlane::Common), 1), DepthAccess)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(DSV.ResolveTarget->GetViewIdentity(0, 0, 0, 0, uint32(RHIValidation::EResourcePlane::Common), 1), ERHIAccess::ResolveDst)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(DSV.ExclusiveDepthStencil.IsUsingStencil())"
  },
  {
    "label": "IsStencilWrite()",
    "kind": "Method",
    "detail": "Function (ERHIAccess StencilAccess = DSV . ExclusiveDepthStencil .)",
    "insertText": "IsStencilWrite()"
  },
  {
    "label": "IsStencilFormat()",
    "kind": "Method",
    "detail": "Function (bool bIsStencilFormat =)",
    "insertText": "IsStencilFormat(DSV.DepthStencilTarget->GetFormat())"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(DSV.DepthStencilTarget->GetViewIdentity(0, 0, 0, 0, uint32(RHIValidation::EResourcePlane::Stencil), 1), StencilAccess)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(DSV.ResolveTarget->GetViewIdentity(0, 0, 0, 0, uint32(RHIValidation::EResourcePlane::Stencil), 1), ERHIAccess::ResolveDst)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(State.RenderPassInfo.ShadingRateTexture.IsValid())"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef ShadingRateTexture = State . RenderPassInfo . ShadingRateTexture ;)",
    "insertText": "checkf(ShadingRateTexture->GetFormat() == GRHIVariableRateShadingImageFormat, TEXT(\"Shading rate texture is bound, but is not the correct format for this RHI.\"))"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(ShadingRateTexture->GetViewIdentity(0, 0, 0, 0, 0, 0), ERHIAccess::ShadingRateSource)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (} RHIContext ->)",
    "insertText": "RHIBeginRenderPass(InInfo, InName)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTexture, FRHITexture* DestTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(SourceTexture->GetWholeResourceIdentity(), ERHIAccess::CopySrc)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(DestTexture->GetWholeResourceIdentity(), ERHIAccess::CopyDest)"
  },
  {
    "label": "ValidateCopyTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCopyTexture(SourceTexture, DestTexture, CopyInfo)"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICopyTexture(SourceTexture, DestTexture, CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DestBuffer, uint64 DstOffset, FRHIBuffer* SourceBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(SourceBuffer->GetWholeResourceIdentity(), ERHIAccess::CopySrc)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(DestBuffer->GetWholeResourceIdentity(), ERHIAccess::CopyDest)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICopyBufferRegion(DestBuffer, DstOffset, SourceBuffer, SrcOffset, NumBytes)"
  },
  {
    "label": "RHIClearRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIClearRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHIClearRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIClearRayTracingBindings(Scene)"
  },
  {
    "label": "RHICommitRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICommitRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHICommitRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICommitRayTracingBindings(Scene)"
  },
  {
    "label": "RHIClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIClearShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "SetCommitted()",
    "kind": "Method",
    "detail": "Function (SBT ->)",
    "insertText": "SetCommitted(false)"
  },
  {
    "label": "RHIClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIClearShaderBindingTable(SBT)"
  },
  {
    "label": "RHICommitShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICommitShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "SetCommitted()",
    "kind": "Method",
    "detail": "Function (SBT ->)",
    "insertText": "SetCommitted(true)"
  },
  {
    "label": "RHICommitShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHICommitShaderBindingTable(SBT)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIRayTraceDispatch(RayTracingPipelineState, RayGenShader, SBT, GlobalResourceBindings, Width, Height)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Assert(ArgumentBuffer->GetWholeResourceIdentity(), ERHIAccess::SRVCompute)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHIRayTraceDispatchIndirect(RayTracingPipelineState, RayGenShader, SBT, GlobalResourceBindings, ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetBindingsOnShaderBindingTable(FRHIShaderBindingTable* SBT, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (RHIContext ->)",
    "insertText": "RHISetBindingsOnShaderBindingTable(SBT, Pipeline, NumBindings, Bindings, BindingType)"
  },
  {
    "label": "LinkToContext()",
    "kind": "Method",
    "detail": "Function (IRHICommandContext* RHIContext = nullptr ; void)",
    "insertText": "LinkToContext(IRHICommandContext* PlatformContext)"
  },
  {
    "label": "ValidateDepthStencilForSetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} State ; class FValidationRHI ; private : void)",
    "insertText": "ValidateDepthStencilForSetGraphicsPipelineState(const FExclusiveDepthStencil& DSMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRHIRenderPassInfo::FDepthStencilEntry& DSV = State . RenderPassInfo . DepthStencilRenderTarget ;)",
    "insertText": "if(DSMode.IsUsingDepth())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DSMode.IsUsingStencil())"
  }
]