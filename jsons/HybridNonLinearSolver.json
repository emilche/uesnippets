[
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "HybridNonLinearSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HybridNonLinearSolver"
  },
  {
    "label": "Parameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Parameters"
  },
  {
    "label": "HybridNonLinearSolver()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_HYBRIDNONLINEARSOLVER_H # define EIGEN_HYBRIDNONLINEARSOLVER_H namespace Eigen { namespace HybridNonLinearSolverSpace { enum Status { Running = - 1,ImproperInputParameters = 0,RelativeErrorTooSmall = 1,TooManyFunctionEvaluation = 2,TolTooSmall = 3,NotMakingProgressJacobian = 4,NotMakingProgressIterations = 5,UserAsked = 6 } ; } template<FunctorType,Scalar = double> class HybridNonLinearSolver { public : typedef DenseIndex Index ;)",
    "insertText": "HybridNonLinearSolver(FunctorType &_functor) : functor(_functor)"
  },
  {
    "label": "Parameters()",
    "kind": "Method",
    "detail": "Function (nfev = njev = iter = 0 ; fnorm = 0 . ; useExternalScaling = false ; } struct Parameters {)",
    "insertText": "Parameters() : factor(Scalar(100.)) , maxfev(1000) , xtol(numext::sqrt(NumTraits<Scalar>::epsilon())) , nb_of_subdiagonals(-1) , nb_of_superdiagonals(-1) , epsfcn(Scalar(0.))"
  },
  {
    "label": "hybrj1()",
    "kind": "Method",
    "detail": "Function (} Scalar factor ; Index maxfev ; Scalar xtol ; Index nb_of_subdiagonals ; Index nb_of_superdiagonals ; Scalar epsfcn ; } ; typedef Matrix<Scalar,Dynamic,1> FVectorType ; typedef Matrix<Scalar,Dynamic,Dynamic> JacobianType ; typedef Matrix<Scalar,Dynamic,Dynamic> UpperTriangularType ; HybridNonLinearSolverSpace::Status)",
    "insertText": "hybrj1(FVectorType &x, const Scalar tol = numext::sqrt(NumTraits<Scalar>::epsilon()))"
  },
  {
    "label": "solveInit()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveInit(FVectorType &x)"
  },
  {
    "label": "solveOneStep()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveOneStep(FVectorType &x)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solve(FVectorType &x)"
  },
  {
    "label": "hybrd1()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "hybrd1(FVectorType &x, const Scalar tol = numext::sqrt(NumTraits<Scalar>::epsilon()))"
  },
  {
    "label": "solveNumericalDiffInit()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveNumericalDiffInit(FVectorType &x)"
  },
  {
    "label": "solveNumericalDiffOneStep()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveNumericalDiffOneStep(FVectorType &x)"
  },
  {
    "label": "solveNumericalDiff()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveNumericalDiff(FVectorType &x)"
  },
  {
    "label": "resetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetParameters(void)"
  },
  {
    "label": "Parameters()",
    "kind": "Method",
    "detail": "Function (parameters =)",
    "insertText": "Parameters()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Parameters parameters ; FVectorType fvec,qtf,diag ; JacobianType fjac ; UpperTriangularType R ; Index nfev ; Index njev ; Index iter ; Scalar fnorm ; bool useExternalScaling ; private : FunctorType& functor ; Index n ; Scalar sum ; bool sing ; Scalar temp ; Scalar delta ; bool jeval ; Index ncsuc ; Scalar ratio ; Scalar pnorm,xnorm,fnorm1 ; Index nslow1,nslow2 ; Index ncfail ; Scalar actred,prered ; FVectorType wa1,wa2,wa3,wa4 ; HybridNonLinearSolver&)",
    "insertText": "operator(const HybridNonLinearSolver&)"
  },
  {
    "label": "hybrj1()",
    "kind": "Method",
    "detail": "Function (} ; template<FunctorType,Scalar> HybridNonLinearSolverSpace::Status HybridNonLinearSolver<FunctorType,Scalar)",
    "insertText": "hybrj1(FVectorType &x, const Scalar tol)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (n = x .)",
    "insertText": "size()"
  },
  {
    "label": "resetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetParameters()"
  },
  {
    "label": "maxfev()",
    "kind": "Method",
    "detail": "Function (parameters .)",
    "insertText": "maxfev(n+1)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (parameters . xtol = tol ; diag .)",
    "insertText": "setConstant(n, 1.)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (useExternalScaling = true ; return)",
    "insertText": "solve(x)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (wa1 .)",
    "insertText": "resize(n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (fjac .)",
    "insertText": "resize(n, n)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((!useExternalScaling || diag.size()==n) && \"When useExternalScaling is set, the caller must provide a valid 'diag'\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nfev = 0 ; njev = 0 ;)",
    "insertText": "if(n <= 0 || parameters.xtol < 0. || parameters.maxfev <= 0 || parameters.factor <= 0.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nfev = 1 ;)",
    "insertText": "if(functor(x, fvec) < 0)"
  },
  {
    "label": "stableNorm()",
    "kind": "Method",
    "detail": "Function (fnorm = fvec .)",
    "insertText": "stableNorm()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::abs ;)",
    "insertText": "eigen_assert(x.size()==n)"
  },
  {
    "label": "v_givens()",
    "kind": "Method",
    "detail": "Function (Index j ; std::vector<JacobiRotation<Scalar>>)",
    "insertText": "v_givens(n), w_givens(n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (jeval = true ;)",
    "insertText": "if(functor.df(x, fjac) < 0)"
  },
  {
    "label": "colwise()",
    "kind": "Method",
    "detail": "Function (+ + njev ; wa2 = fjac .)",
    "insertText": "colwise().blueNorm()"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (xnorm = diag .)",
    "insertText": "cwiseProduct(x).stableNorm()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delta = parameters . factor* xnorm ;)",
    "insertText": "if(delta == 0.)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (} HouseholderQR<JacobianType>)",
    "insertText": "qrfac(fjac)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (R = qrfac .)",
    "insertText": "matrixQR()"
  },
  {
    "label": "householderQ()",
    "kind": "Method",
    "detail": "Function (fjac = qrfac .)",
    "insertText": "householderQ()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (qtf = fjac .)",
    "insertText": "transpose()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (internal::dogleg<)",
    "insertText": "Scalar(R, diag, qtf, delta, wa1)"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (wa1 = - wa1 ; wa2 = x + wa1 ; pnorm = diag .)",
    "insertText": "cwiseProduct(wa1).stableNorm()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (actred = - 1 . ;)",
    "insertText": "if(fnorm1 < fnorm) actred = 1. - numext::abs2(fnorm1 / fnorm)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (wa3 = R . template triangularView<)",
    "insertText": "Upper()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (prered = 0 . ;)",
    "insertText": "if(temp < fnorm) prered = 1. - numext::abs2(temp / fnorm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ratio = 0 . ;)",
    "insertText": "if(prered > 0.)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (ncsuc = 0 ; + + ncfail ; delta =)",
    "insertText": "Scalar(.5)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { ncfail = 0 ; + + ncsuc ;)",
    "insertText": "if(ratio >= Scalar(.5) || ncsuc > 1) delta = (std::max)(delta, pnorm / Scalar(.5))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ratio >= Scalar(1e-4))"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (x = wa2 ; wa2 = diag .)",
    "insertText": "cwiseProduct(x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fnorm = fnorm1 ; + + iter ; } + + nslow1 ;)",
    "insertText": "if(actred >= Scalar(.001))"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (wa1 = diag .)",
    "insertText": "cwiseProduct(diag.cwiseProduct(wa1)/pnorm)"
  },
  {
    "label": "wa2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wa2(wa2-wa3)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (internal::r1updt<)",
    "insertText": "Scalar(R, wa1, v_givens, w_givens, wa2, wa3, &sing)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (internal::r1mpyq<)",
    "insertText": "Scalar(n, n, fjac.data(), v_givens, w_givens)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (internal::r1mpyq<)",
    "insertText": "Scalar(1, n, qtf.data(), v_givens, w_givens)"
  },
  {
    "label": "solveInit()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status status =)",
    "insertText": "solveInit(x)"
  },
  {
    "label": "solveNumericalDiff()",
    "kind": "Method",
    "detail": "Function (useExternalScaling = true ; return)",
    "insertText": "solveNumericalDiff(x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nfev = 0 ; njev = 0 ;)",
    "insertText": "if(n <= 0 || parameters.xtol < 0. || parameters.maxfev <= 0 || parameters.nb_of_subdiagonals< 0 || parameters.nb_of_superdiagonals< 0 || parameters.factor <= 0.)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ;)",
    "insertText": "assert(x.size()==n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (jeval = true ;)",
    "insertText": "if(parameters.nb_of_subdiagonals<0)"
  },
  {
    "label": "nfev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nfev(std::min)(parameters.nb_of_subdiagonals+parameters.nb_of_superdiagonals+ 1, n)"
  },
  {
    "label": "solveNumericalDiffInit()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status status =)",
    "insertText": "solveNumericalDiffInit(x)"
  }
]