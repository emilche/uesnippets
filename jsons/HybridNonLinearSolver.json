[
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "HybridNonLinearSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HybridNonLinearSolver"
  },
  {
    "label": "Parameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Parameters"
  },
  {
    "label": "solveInit()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveInit(FVectorType  &x)"
  },
  {
    "label": "solveOneStep()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveOneStep(FVectorType  &x)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solve(FVectorType  &x)"
  },
  {
    "label": "solveNumericalDiffInit()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveNumericalDiffInit(FVectorType  &x)"
  },
  {
    "label": "solveNumericalDiffOneStep()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveNumericalDiffOneStep(FVectorType  &x)"
  },
  {
    "label": "solveNumericalDiff()",
    "kind": "Method",
    "detail": "Function (HybridNonLinearSolverSpace::Status)",
    "insertText": "solveNumericalDiff(FVectorType  &x)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "solve(x)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (HouseholderQR<JacobianType>)",
    "insertText": "qrfac(fjac)"
  },
  {
    "label": "solveNumericalDiff()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "solveNumericalDiff(x)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (HouseholderQR<JacobianType>)",
    "insertText": "qrfac(fjac)"
  }
]