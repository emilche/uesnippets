[
  {
    "label": "level3_blocking",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "level3_blocking"
  },
  {
    "label": "general_matrix_matrix_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_matrix_product"
  },
  {
    "label": "gemm_functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gemm_functor"
  },
  {
    "label": "gemm_blocking_space",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gemm_blocking_space"
  },
  {
    "label": "generic_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_product_impl"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERAL_MATRIX_MATRIX_H # define EIGEN_GENERAL_MATRIX_MATRIX_H namespace Eigen { namespace internal { template<_LhsScalar,_RhsScalar> class level3_blocking ; template<Index,LhsScalar,int LhsStorageOrder,bool ConjugateLhs,RhsScalar,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride> struct general_matrix_matrix_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,RowMajor,ResInnerStride> { typedef gebp_traits<RhsScalar,LhsScalar> Traits ; typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; EIGEN_STRONG_INLINE void)",
    "insertText": "run(Index rows, Index cols, Index depth, const LhsScalar* lhs, Index lhsStride, const RhsScalar* rhs, Index rhsStride, ResScalar* res, Index resIncr, Index resStride, ResScalar alpha, level3_blocking<RhsScalar,LhsScalar>& blocking, GemmParallelInfo<Index>* info = 0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (general_matrix_matrix_product<Index,RhsScalar,RhsStorageOrder = = RowMajor ? ColMajor : RowMajor,ConjugateRhs,LhsScalar,LhsStorageOrder = = RowMajor ? ColMajor : RowMajor,ConjugateLhs,ColMajor,ResInnerStride)",
    "insertText": "run(cols,rows,depth,rhs,rhsStride,lhs,lhsStride,res,resIncr,resStride,alpha,blocking,info)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Index,LhsScalar,int LhsStorageOrder,bool ConjugateLhs,RhsScalar,int RhsStorageOrder,bool ConjugateRhs,int ResInnerStride> struct general_matrix_matrix_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,ColMajor,ResInnerStride> { typedef gebp_traits<LhsScalar,RhsScalar> Traits ; typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; void)",
    "insertText": "run(Index rows, Index cols, Index depth, const LhsScalar* _lhs, Index lhsStride, const RhsScalar* _rhs, Index rhsStride, ResScalar* _res, Index resIncr, Index resStride, ResScalar alpha, level3_blocking<LhsScalar,RhsScalar>& blocking, GemmParallelInfo<Index>* info = 0)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (typedef const_blas_data_mapper<LhsScalar,Index,LhsStorageOrder> LhsMapper ; typedef const_blas_data_mapper<RhsScalar,Index,RhsStorageOrder> RhsMapper ; typedef blas_data_mapper<Traits::ResScalar,Index,ColMajor,Unaligned,ResInnerStride> ResMapper ; LhsMapper)",
    "insertText": "lhs(_lhs, lhsStride)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsMapper)",
    "insertText": "rhs(_rhs, rhsStride)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (ResMapper)",
    "insertText": "res(_res, resStride, resIncr)"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (Index kc = blocking .)",
    "insertText": "kc()"
  },
  {
    "label": "mc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "mc(std::min)(rows,blocking.mc())"
  },
  {
    "label": "nc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "nc(std::min)(cols,blocking.nc())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (gemm_pack_lhs<LhsScalar,Index,LhsMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,LhsStorageOrder> pack_lhs ; gemm_pack_rhs<RhsScalar,Index,RhsMapper,Traits::nr,RhsStorageOrder> pack_rhs ; gebp_kernel<LhsScalar,RhsScalar,Index,ResMapper,Traits::mr,Traits::nr,ConjugateLhs,ConjugateRhs> gebp ; # ifdef EIGEN_HAS_OPENMP)",
    "insertText": "if(info)"
  },
  {
    "label": "omp_get_thread_num()",
    "kind": "Method",
    "detail": "Function (int tid =)",
    "insertText": "omp_get_thread_num()"
  },
  {
    "label": "omp_get_num_threads()",
    "kind": "Method",
    "detail": "Function (int threads =)",
    "insertText": "omp_get_num_threads()"
  },
  {
    "label": "blockA()",
    "kind": "Method",
    "detail": "Function (LhsScalar* blockA = blocking .)",
    "insertText": "blockA()"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(blockA!=0)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (std::size_t sizeB = kc* nc ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(RhsScalar, blockB, sizeB, 0)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_kc(std::min)(k+kc,depth)"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_rhs(blockB, rhs.getSubMapper(k,0), actual_kc, nc)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (} info [ tid ] . users = threads ;)",
    "insertText": "pack_lhs(blockA+info[tid].lhs_start*actual_kc, lhs.getSubMapper(info[tid].lhs_start,k), actual_kc, info[tid].lhs_length)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (info [ tid ] . sync = k ;)",
    "insertText": "for(int shift=0; shift<threads; ++shift)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i(tid+shift)"
  },
  {
    "label": "gebp()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "gebp(res.getSubMapper(info[i].lhs_start, 0), blockA+info[i].lhs_start*actual_kc, blockB, info[i].lhs_length, actual_kc, nc, alpha)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index j=nc; j<cols; j+=nc)"
  },
  {
    "label": "actual_nc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_nc(std::min)(j+nc,cols)"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_rhs(blockB, rhs.getSubMapper(k,j), actual_kc, actual_nc)"
  },
  {
    "label": "gebp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp(res.getSubMapper(0, j), blockA, blockB, rows, actual_kc, actual_nc, alpha)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i=0; i<threads; ++i)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (} } else # endif {)",
    "insertText": "EIGEN_UNUSED_VARIABLE(info)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (std::size_t sizeA = kc* mc ; std::size_t sizeB = kc* nc ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(LhsScalar, blockA, sizeA, blocking.blockA())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(RhsScalar, blockB, sizeB, blocking.blockB())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const bool pack_rhs_once = mc ! = rows&& kc = = depth&& nc = = cols ;)",
    "insertText": "for(Index i2=0; i2<rows; i2+=mc)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(i2+mc,rows)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_kc(std::min)(k2+kc,depth)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_lhs(blockA, lhs.getSubMapper(i2,k2), actual_kc, actual_mc)"
  },
  {
    "label": "actual_nc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_nc(std::min)(j2+nc,cols)"
  },
  {
    "label": "gebp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp(res.getSubMapper(i2, j2), blockA, blockB, actual_mc, actual_kc, actual_nc, alpha)"
  },
  {
    "label": "gemm_functor()",
    "kind": "Method",
    "detail": "Function (} } } } } } ; template<Scalar,Index,Gemm,Lhs,Rhs,Dest,BlockingType> struct gemm_functor {)",
    "insertText": "gemm_functor(const Lhs& lhs, const Rhs& rhs, Dest& dest, const Scalar& actualAlpha, BlockingType& blocking) : m_lhs(lhs), m_rhs(rhs), m_dest(dest), m_actualAlpha(actualAlpha), m_blocking(blocking)"
  },
  {
    "label": "initParallelSession()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initParallelSession(Index num_threads)"
  },
  {
    "label": "initParallel()",
    "kind": "Method",
    "detail": "Function (m_blocking .)",
    "insertText": "initParallel(m_lhs.rows(), m_rhs.cols(), m_lhs.cols(), num_threads)"
  },
  {
    "label": "allocateA()",
    "kind": "Method",
    "detail": "Function (m_blocking .)",
    "insertText": "allocateA()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator() (Index row, Index rows, Index col=0, Index cols=-1, GemmParallelInfo<Index>* info=0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(rows, cols, m_lhs.cols(), &m_lhs.coeffRef(row,0), m_lhs.outerStride(), &m_rhs.coeffRef(0,col), m_rhs.outerStride(), (Scalar*)&(m_dest.coeffRef(row,col)), m_dest.innerStride(), m_dest.outerStride(), m_actualAlpha, m_blocking, info)"
  },
  {
    "label": "level3_blocking()",
    "kind": "Method",
    "detail": "Function (} typedef Gemm::Traits Traits ; protected : const Lhs& m_lhs ; const Rhs& m_rhs ; Dest& m_dest ; Scalar m_actualAlpha ; BlockingType& m_blocking ; } ; template<int StorageOrder,LhsScalar,RhsScalar,int MaxRows,int MaxCols,int MaxDepth,int KcFactor = 1,bool FiniteAtCompileTime = MaxRows ! = Dynamic&& MaxCols ! = Dynamic&& MaxDepth ! = Dynamic> class gemm_blocking_space ; template<_LhsScalar,_RhsScalar> class level3_blocking { typedef _LhsScalar LhsScalar ; typedef _RhsScalar RhsScalar ; protected : LhsScalar* m_blockA ; RhsScalar* m_blockB ; Index m_mc ; Index m_nc ; Index m_kc ; public :)",
    "insertText": "level3_blocking() : m_blockA(0), m_blockB(0), m_mc(0), m_nc(0), m_kc(0)"
  },
  {
    "label": "mc()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "mc()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX char m_staticB [ SizeB*)",
    "insertText": "sizeof(RhsScalar)"
  },
  {
    "label": "gemm_blocking_space()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "gemm_blocking_space(Index , Index , Index , Index , bool)"
  },
  {
    "label": "LhsScalar()",
    "kind": "Method",
    "detail": "Function (this -> m_mc = ActualRows ; this -> m_nc = ActualCols ; this -> m_kc = MaxDepth ; # if EIGEN_MAX_STATIC_ALIGN_BYTES> = EIGEN_DEFAULT_ALIGN_BYTES this -> m_blockA = m_staticA ; this -> m_blockB = m_staticB ; # else this -> m_blockA = reinterpret_cast<)",
    "insertText": "LhsScalar((internal::UIntPtr(m_staticA) + (EIGEN_DEFAULT_ALIGN_BYTES-1)) & ~std::size_t(EIGEN_DEFAULT_ALIGN_BYTES-1))"
  },
  {
    "label": "RhsScalar()",
    "kind": "Method",
    "detail": "Function (this -> m_blockB = reinterpret_cast<)",
    "insertText": "RhsScalar((internal::UIntPtr(m_staticB) + (EIGEN_DEFAULT_ALIGN_BYTES-1)) & ~std::size_t(EIGEN_DEFAULT_ALIGN_BYTES-1))"
  },
  {
    "label": "initParallel()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "initParallel(Index, Index, Index, Index)"
  },
  {
    "label": "allocateB()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allocateB()"
  },
  {
    "label": "allocateAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allocateAll()"
  },
  {
    "label": "gemm_blocking_space()",
    "kind": "Method",
    "detail": "Function (} } ; template<int StorageOrder,_LhsScalar,_RhsScalar,int MaxRows,int MaxCols,int MaxDepth,int KcFactor> class gemm_blocking_space<StorageOrder,_LhsScalar,_RhsScalar,MaxRows,MaxCols,MaxDepth,KcFactor,false> : public level3_blocking<conditional<StorageOrder = = RowMajor,_RhsScalar,_LhsScalar>::type,conditional<StorageOrder = = RowMajor,_LhsScalar,_RhsScalar>::type> { enum { Transpose = StorageOrder = = RowMajor } ; typedef conditional<Transpose,_RhsScalar,_LhsScalar>::type LhsScalar ; typedef conditional<Transpose,_LhsScalar,_RhsScalar>::type RhsScalar ; typedef gebp_traits<LhsScalar,RhsScalar> Traits ; Index m_sizeA ; Index m_sizeB ; public :)",
    "insertText": "gemm_blocking_space(Index rows, Index cols, Index depth, Index num_threads, bool l3_blocking)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> m_mc = Transpose ? cols : rows ; this -> m_nc = Transpose ? rows : cols ; this -> m_kc = depth ;)",
    "insertText": "if(l3_blocking)"
  },
  {
    "label": "KcFactor()",
    "kind": "Method",
    "detail": "Function (computeProductBlockingSizes<LhsScalar,RhsScalar,)",
    "insertText": "KcFactor(this->m_kc, this->m_mc, this->m_nc, num_threads)"
  },
  {
    "label": "KcFactor()",
    "kind": "Method",
    "detail": "Function (} else { Index n = this -> m_nc ; computeProductBlockingSizes<LhsScalar,RhsScalar,)",
    "insertText": "KcFactor(this->m_kc, this->m_mc, n, num_threads)"
  },
  {
    "label": "initParallel()",
    "kind": "Method",
    "detail": "Function (} m_sizeA = this -> m_mc* this -> m_kc ; m_sizeB = this -> m_kc* this -> m_nc ; } void)",
    "insertText": "initParallel(Index rows, Index cols, Index depth, Index num_threads)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (this -> m_mc = Transpose ? cols : rows ; this -> m_nc = Transpose ? rows : cols ; this -> m_kc = depth ;)",
    "insertText": "eigen_internal_assert(this->m_blockA==0 && this->m_blockB==0)"
  },
  {
    "label": "KcFactor()",
    "kind": "Method",
    "detail": "Function (Index m = this -> m_mc ; computeProductBlockingSizes<LhsScalar,RhsScalar,)",
    "insertText": "KcFactor(this->m_kc, m, this->m_nc, num_threads)"
  },
  {
    "label": "gemm_blocking_space()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "gemm_blocking_space()"
  },
  {
    "label": "aligned_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "aligned_delete(this->m_blockA, m_sizeA)"
  },
  {
    "label": "aligned_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "aligned_delete(this->m_blockB, m_sizeB)"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_FIXED()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace internal { template<Lhs,Rhs> struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,GemmProduct> : generic_product_impl_base<Lhs,Rhs,generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,GemmProduct>> { typedef Product<Lhs,Rhs>::Scalar Scalar ; typedef Lhs::Scalar LhsScalar ; typedef Rhs::Scalar RhsScalar ; typedef internal::blas_traits<Lhs> LhsBlasTraits ; typedef LhsBlasTraits::DirectLinearAccessType ActualLhsType ; typedef internal::remove_all<ActualLhsType>::type ActualLhsTypeCleaned ; typedef internal::blas_traits<Rhs> RhsBlasTraits ; typedef RhsBlasTraits::DirectLinearAccessType ActualRhsType ; typedef internal::remove_all<ActualRhsType>::type ActualRhsTypeCleaned ; enum { MaxDepthAtCompileTime =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_FIXED(Lhs::MaxColsAtCompileTime,Rhs::MaxRowsAtCompileTime)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (typedef generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode> lazyproduct ; template<Dst> void)",
    "insertText": "evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "scaleAndAddTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scaleAndAddTo(dst, lhs, rhs, Scalar(1))"
  },
  {
    "label": "addTo()",
    "kind": "Method",
    "detail": "Function (} } template<Dst> void)",
    "insertText": "addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "subTo()",
    "kind": "Method",
    "detail": "Function (} template<Dst> void)",
    "insertText": "subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "scaleAndAddTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "scaleAndAddTo(Dest& dst, const Lhs& a_lhs, const Rhs& a_rhs, const Scalar& alpha)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dst.rows()==a_lhs.rows() && dst.cols()==a_rhs.cols())"
  },
  {
    "label": "dst_vec()",
    "kind": "Method",
    "detail": "Function (Dest::ColXpr)",
    "insertText": "dst_vec(dst.col(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(dst.rows() == 1)"
  },
  {
    "label": "dst_vec()",
    "kind": "Method",
    "detail": "Function (Dest::RowXpr)",
    "insertText": "dst_vec(dst.row(0))"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} internal::add_const_on_value_type<ActualLhsType>::type lhs =)",
    "insertText": "extract(a_lhs)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualRhsType>::type rhs =)",
    "insertText": "extract(a_rhs)"
  },
  {
    "label": "combine_scalar_factors()",
    "kind": "Method",
    "detail": "Function (Scalar actualAlpha =)",
    "insertText": "combine_scalar_factors(alpha, a_lhs, a_rhs)"
  },
  {
    "label": "gemm_blocking_space()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "gemm_blocking_space(Dest::Flags&RowMajorBit)"
  },
  {
    "label": "LhsScalar()",
    "kind": "Method",
    "detail": "Function (typedef internal::gemm_functor<Scalar,Index,internal::general_matrix_matrix_product<Index,)",
    "insertText": "LhsScalar(ActualLhsTypeCleaned::Flags&RowMajorBit) ? RowMajor : ColMajor, bool(LhsBlasTraits::NeedToConjugate), RhsScalar, (ActualRhsTypeCleaned::Flags&RowMajorBit) ? RowMajor : ColMajor, bool(RhsBlasTraits::NeedToConjugate), (Dest::Flags&RowMajorBit)"
  },
  {
    "label": "blocking()",
    "kind": "Method",
    "detail": "Function (BlockingType)",
    "insertText": "blocking(dst.rows(), dst.cols(), lhs.cols(), 1, true)"
  },
  {
    "label": "parallelize_gemm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallelize_gemm(Dest::MaxRowsAtCompileTime>32 || Dest::MaxRowsAtCompileTime==Dynamic)> (GemmFunctor(lhs, rhs, dst, actualAlpha, blocking), a_lhs.rows(), a_rhs.cols(), a_lhs.cols(), Dest::Flags&RowMajorBit)"
  }
]