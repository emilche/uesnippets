[
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "IAsyncReadRequestFixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequestFixLayout"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Function . h \" # include \" Stats / Stats . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" Templates / Function . h \" class IAsyncReadRequest ;)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Async File Handle Memory\"), STAT_AsyncFileMemory, STATGROUP_Memory, CORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Async File Handles\"), STAT_AsyncFileHandles, STATGROUP_Memory, CORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Async File Requests\"), STAT_AsyncFileRequests, STATGROUP_Memory, CORE_API)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class IAsyncReadRequest ; typedef TFunction<)",
    "insertText": "void(bool bWasCancelled, IAsyncReadRequest*)"
  },
  {
    "label": "IAsyncReadRequestFixLayout()",
    "kind": "Method",
    "detail": "Function (class IAsyncReadRequestFixLayout { public : ~)",
    "insertText": "IAsyncReadRequestFixLayout()"
  },
  {
    "label": "TSAN_ATOMIC()",
    "kind": "Method",
    "detail": "Function (} ; class IAsyncReadRequest : public IAsyncReadRequestFixLayout { protected : union { PTRINT Size ; uint8* Memory ; } ; FAsyncFileCallBack Callback ;)",
    "insertText": "TSAN_ATOMIC(bool)"
  },
  {
    "label": "IAsyncReadRequest()",
    "kind": "Method",
    "detail": "Function (const bool bSizeRequest ; const bool bUserSuppliedMemory ; public :)",
    "insertText": "IAsyncReadRequest(FAsyncFileCallBack* InCallback, bool bInSizeRequest, uint8* UserSuppliedMemory) : bDataIsReady(false) , bCompleteAndCallbackCalled(false) , bCompleteSync(false) , bCanceled(false) , bSizeRequest(bInSizeRequest) , bUserSuppliedMemory(!!UserSuppliedMemory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Callback =* InCallback ; })",
    "insertText": "if(bSizeRequest)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Size = - 1 ;)",
    "insertText": "check(!UserSuppliedMemory && !bUserSuppliedMemory)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else { Memory = UserSuppliedMemory ;)",
    "insertText": "check((!!Memory) == bUserSuppliedMemory)"
  },
  {
    "label": "INC_DWORD_STAT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "INC_DWORD_STAT(STAT_AsyncFileRequests)"
  },
  {
    "label": "IAsyncReadRequest()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IAsyncReadRequest()"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(!(bCompleteAndCallbackCalled && (bSizeRequest || !Memory)), LogHAL, Fatal, TEXT(\"IAsyncReadRequests must not be deleted until they are completed.\"))"
  },
  {
    "label": "DEC_DWORD_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_DWORD_STAT(STAT_AsyncFileRequests)"
  },
  {
    "label": "PollCompletion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PollCompletion()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "WaitCompletionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitCompletionImpl(0.0f)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Cancel()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (bCanceled = true ; bDataIsReady = true ;)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "GetSizeResults()",
    "kind": "Method",
    "detail": "Function (} } } int64)",
    "insertText": "GetSizeResults()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8* Result = Memory ;)",
    "insertText": "if(bCanceled && Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result = nullptr ; } else {)",
    "insertText": "if(Memory && !bUserSuppliedMemory)"
  },
  {
    "label": "ReleaseMemoryOwnershipImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMemoryOwnershipImpl()"
  },
  {
    "label": "WaitCompletionImpl()",
    "kind": "Method",
    "detail": "Function (} Memory = nullptr ; } return Result ; } protected : void)",
    "insertText": "WaitCompletionImpl(float TimeLimitSeconds)"
  },
  {
    "label": "CancelImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelImpl()"
  },
  {
    "label": "SetDataComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataComplete()"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(bCanceled, this)"
  },
  {
    "label": "SetAllComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllComplete()"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetComplete()"
  },
  {
    "label": "IAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (} } ; class IAsyncReadFileHandle { public :)",
    "insertText": "IAsyncReadFileHandle()"
  },
  {
    "label": "INC_DWORD_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_DWORD_STAT(STAT_AsyncFileHandles)"
  },
  {
    "label": "DEC_DWORD_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_DWORD_STAT(STAT_AsyncFileHandles)"
  },
  {
    "label": "SizeRequest()",
    "kind": "Method",
    "detail": "Function (} IAsyncReadRequest*)",
    "insertText": "SizeRequest(FAsyncFileCallBack* CompleteCallback = nullptr)"
  },
  {
    "label": "ReadRequest()",
    "kind": "Method",
    "detail": "Function (IAsyncReadRequest*)",
    "insertText": "ReadRequest(int64 Offset, int64 BytesToRead, EAsyncIOPriorityAndFlags PriorityAndFlags = AIOP_Normal, FAsyncFileCallBack* CompleteCallback = nullptr, uint8* UserSuppliedMemory = nullptr)"
  },
  {
    "label": "UsesCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesCache()"
  },
  {
    "label": "IAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IAsyncReadFileHandle(const IAsyncReadFileHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IAsyncReadFileHandle&)",
    "insertText": "operator(const IAsyncReadFileHandle&)"
  }
]