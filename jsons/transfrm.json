[
  {
    "label": "CTransformFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTransformFilter"
  },
  {
    "label": "CTransformInputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTransformInputPin"
  },
  {
    "label": "CTransformOutputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTransformOutputPin"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "CTransformInputPin()",
    "kind": "Method",
    "detail": "Function (# ifndef __TRANSFRM__ # define __TRANSFRM__ class CTransformFilter ; class CTransformInputPin : public CBaseInputPin { class CTransformFilter ; protected : CTransformFilter* m_pTransformFilter ; public :)",
    "insertText": "CTransformInputPin(__in_opt LPCTSTR pObjectName, __inout CTransformFilter *pTransformFilter, __inout HRESULT * phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "CTransformInputPin()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CTransformInputPin(__in_opt LPCSTR pObjectName, __inout CTransformFilter *pTransformFilter, __inout HRESULT * phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "QueryId()",
    "kind": "Method",
    "detail": "Function (# endif STDMETHODIMP)",
    "insertText": "QueryId(__deref_out LPWSTR * Id)"
  },
  {
    "label": "CheckConnect()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "CheckConnect(IPin *pPin)"
  },
  {
    "label": "BreakConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "BreakConnect()"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CompleteConnect(IPin *pReceivePin)"
  },
  {
    "label": "CheckMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckMediaType(const CMediaType* mtIn)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetMediaType(const CMediaType* mt)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Receive(IMediaSample * pSample)"
  },
  {
    "label": "EndOfStream()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndOfStream(void)"
  },
  {
    "label": "BeginFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "BeginFlush(void)"
  },
  {
    "label": "EndFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndFlush(void)"
  },
  {
    "label": "NewSegment()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NewSegment(REFERENCE_TIME tStart, REFERENCE_TIME tStop, double dRate)"
  },
  {
    "label": "CheckStreaming()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckStreaming()"
  },
  {
    "label": "CurrentMediaType()",
    "kind": "Method",
    "detail": "Function (public : CMediaType&)",
    "insertText": "CurrentMediaType()"
  },
  {
    "label": "CTransformOutputPin()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CTransformOutputPin(__in_opt LPCSTR pObjectName, __inout CTransformFilter *pTransformFilter, __inout HRESULT * phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "CTransformOutputPin()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CTransformOutputPin()"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "CheckMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckMediaType(const CMediaType* mtOut)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetMediaType(const CMediaType *pmt)"
  },
  {
    "label": "DecideBufferSize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DecideBufferSize(IMemAllocator * pAlloc, __inout ALLOCATOR_PROPERTIES *pProp)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetMediaType(int iPosition, __inout CMediaType *pMediaType)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Notify(IBaseFilter * pSender, Quality q)"
  },
  {
    "label": "GetPin()",
    "kind": "Method",
    "detail": "Function (CBasePin*)",
    "insertText": "GetPin(int n)"
  },
  {
    "label": "FindPin()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "FindPin(LPCWSTR Id, __deref_out IPin **ppPin)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Stop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Pause()"
  },
  {
    "label": "CTransformFilter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CTransformFilter(__in_opt LPCTSTR , __inout_opt LPUNKNOWN, REFCLSID clsid)"
  },
  {
    "label": "CTransformFilter()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CTransformFilter(__in_opt LPCSTR , __inout_opt LPUNKNOWN, REFCLSID clsid)"
  },
  {
    "label": "CTransformFilter()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CTransformFilter()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Transform(IMediaSample * pIn, IMediaSample *pOut)"
  },
  {
    "label": "CheckInputType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckInputType(const CMediaType* mtIn)"
  },
  {
    "label": "CheckTransform()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckTransform(const CMediaType* mtIn, const CMediaType* mtOut)"
  },
  {
    "label": "DecideBufferSize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DecideBufferSize(IMemAllocator * pAllocator, __inout ALLOCATOR_PROPERTIES *pprop)"
  },
  {
    "label": "StartStreaming()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "StartStreaming()"
  },
  {
    "label": "StopStreaming()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "StopStreaming()"
  },
  {
    "label": "AlterQuality()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AlterQuality(Quality q)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt)"
  },
  {
    "label": "CheckConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckConnect(PIN_DIRECTION dir,IPin *pPin)"
  },
  {
    "label": "BreakConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "BreakConnect(PIN_DIRECTION dir)"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CompleteConnect(PIN_DIRECTION direction,IPin *pReceivePin)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Receive(IMediaSample *pSample)"
  },
  {
    "label": "InitializeOutputSample()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "InitializeOutputSample(IMediaSample *pSample, __deref_out IMediaSample **ppOutSample)"
  },
  {
    "label": "RegisterPerfId()",
    "kind": "Method",
    "detail": "Function (# ifdef PERF void)",
    "insertText": "RegisterPerfId()"
  },
  {
    "label": "MSR_REGISTER()",
    "kind": "Method",
    "detail": "Function (m_idTransform =)",
    "insertText": "MSR_REGISTER(TEXT(\"Transform\"))"
  }
]