[
  {
    "label": "QualityScalerQpUsageHandlerCallbackInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityScalerQpUsageHandlerCallbackInterface"
  },
  {
    "label": "QualityScalerQpUsageHandlerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityScalerQpUsageHandlerInterface"
  },
  {
    "label": "QualityScaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityScaler"
  },
  {
    "label": "QpSmoother",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QpSmoother"
  },
  {
    "label": "CheckQpTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckQpTask"
  },
  {
    "label": "CheckQpTaskHandlerCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckQpTaskHandlerCallback"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "QualityScaler()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_UTILITY_QUALITY_SCALER_H_ # define MODULES_VIDEO_CODING_UTILITY_QUALITY_SCALER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / video_codecs / video_encoder . h \" # include \" rtc_base / experiments / quality_scaling_experiment . h \" # include \" rtc_base / numerics / moving_average . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / system / no_unique_address . h \" namespace webrtc { class QualityScalerQpUsageHandlerCallbackInterface ; class QualityScalerQpUsageHandlerInterface ; class QualityScaler { public :)",
    "insertText": "QualityScaler(QualityScalerQpUsageHandlerInterface* handler, VideoEncoder::QpThresholds thresholds)"
  },
  {
    "label": "QualityScaler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "QualityScaler()"
  },
  {
    "label": "ReportDroppedFrameByMediaOpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportDroppedFrameByMediaOpt()"
  },
  {
    "label": "ReportDroppedFrameByEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportDroppedFrameByEncoder()"
  },
  {
    "label": "ReportQp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportQp(int qp, int64_t time_sent_us)"
  },
  {
    "label": "SetQpThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQpThresholds(VideoEncoder::QpThresholds thresholds)"
  },
  {
    "label": "QpFastFilterLow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QpFastFilterLow()"
  },
  {
    "label": "QualityScaler()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "QualityScaler(QualityScalerQpUsageHandlerInterface* handler, VideoEncoder::QpThresholds thresholds, int64_t sampling_period_ms)"
  },
  {
    "label": "StartNextCheckQpTask()",
    "kind": "Method",
    "detail": "Function (private : class QpSmoother ; class CheckQpTask ; class CheckQpTaskHandlerCallback ; enum class CheckQpResult { kInsufficientSamples,kNormalQp,kHighQp,kLowQp,} ; void)",
    "insertText": "StartNextCheckQpTask()"
  },
  {
    "label": "ClearSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSamples()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<CheckQpTask> pending_qp_task_)",
    "insertText": "RTC_GUARDED_BY(&task_checker_)"
  },
  {
    "label": "QualityScalerQpUsageHandlerInterface()",
    "kind": "Method",
    "detail": "Function (const size_t min_frames_needed_ ; const double initial_scale_factor_ ; const absl::optional<double> scale_factor_ ; } ; class QualityScalerQpUsageHandlerInterface { public : ~)",
    "insertText": "QualityScalerQpUsageHandlerInterface()"
  },
  {
    "label": "OnReportQpUsageHigh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportQpUsageHigh()"
  },
  {
    "label": "OnReportQpUsageLow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportQpUsageLow()"
  }
]