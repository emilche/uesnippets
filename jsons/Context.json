[
  {
    "label": "Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Context"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_CONTEXT_H_ # define NET_DCSCTP_SOCKET_CONTEXT_H_ # include<cstdint> # include \" absl / strings / string_view . h \" # include \" net / dcsctp / common / internal_types . h \" # include \" net / dcsctp / packet / sctp_packet . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / public / types . h \" namespace dcsctp { class Context { public : ~)",
    "insertText": "Context()"
  },
  {
    "label": "is_connection_established()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_connection_established()"
  },
  {
    "label": "my_initial_tsn()",
    "kind": "Method",
    "detail": "Function (TSN)",
    "insertText": "my_initial_tsn()"
  },
  {
    "label": "peer_initial_tsn()",
    "kind": "Method",
    "detail": "Function (TSN)",
    "insertText": "peer_initial_tsn()"
  },
  {
    "label": "callbacks()",
    "kind": "Method",
    "detail": "Function (DcSctpSocketCallbacks&)",
    "insertText": "callbacks()"
  },
  {
    "label": "ObserveRTT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObserveRTT(DurationMs rtt_ms)"
  },
  {
    "label": "current_rto()",
    "kind": "Method",
    "detail": "Function (DurationMs)",
    "insertText": "current_rto()"
  },
  {
    "label": "IncrementTxErrorCounter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementTxErrorCounter(absl::string_view reason)"
  },
  {
    "label": "ClearTxErrorCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTxErrorCounter()"
  },
  {
    "label": "HasTooManyTxErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTooManyTxErrors()"
  },
  {
    "label": "PacketBuilder()",
    "kind": "Method",
    "detail": "Function (SctpPacket::Builder)",
    "insertText": "PacketBuilder()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(SctpPacket::Builder& builder)"
  }
]