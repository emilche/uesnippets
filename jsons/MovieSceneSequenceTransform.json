[
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FMovieSceneTransformBreadcrumbs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTransformBreadcrumbs"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneNestedSequenceTransform"
  },
  {
    "label": "FMovieSceneInverseNestedSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInverseNestedSequenceTransform"
  },
  {
    "label": "FInverseTransformTimeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInverseTransformTimeParams"
  },
  {
    "label": "FTransformTimeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformTimeParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneWarpCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneWarpCounter"
  },
  {
    "label": "FMovieSceneSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceTransform"
  },
  {
    "label": "FMovieSceneInverseSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInverseSequenceTransform"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Containers / Array . h \" # include \" MovieSceneFwd . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" MovieSceneTimeTransform . h \" # include \" MovieSceneTimeWarping . h \" # include \" Variants / MovieSceneTimeWarpVariant . h \" # include \" MovieSceneSequenceTransform . generated . h \" template<> class TRange ; struct FMovieSceneTransformBreadcrumbs ; struct FMovieSceneNestedSequenceTransform ; struct FMovieSceneInverseNestedSequenceTransform ; namespace UE::MovieScene { struct FInverseTransformTimeParams ; struct FTransformTimeParams ; enum class ETimeWarpChannelDomain : uint8 ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Sparse,Dense } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTransformBreadcrumbs(EMovieSceneBreadcrumbMode InMode = EMovieSceneBreadcrumbMode::Sparse) : Mode(InMode)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "IsSparse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSparse()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Breadcrumbs .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddBreadcrumb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBreadcrumb(const FFrameTime& Breadcrumb)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Breadcrumbs .)",
    "insertText": "Add(Breadcrumb)"
  },
  {
    "label": "PopBreadcrumb()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "PopBreadcrumb()"
  },
  {
    "label": "CombineWithOuterBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CombineWithOuterBreadcrumbs(const FMovieSceneTransformBreadcrumbs& OuterBreadcrumbs)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Breadcrumbs .)",
    "insertText": "Insert(OuterBreadcrumbs.Breadcrumbs, 0)"
  },
  {
    "label": "OverwriteWith()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneTransformBreadcrumbs)",
    "insertText": "OverwriteWith(FFrameTime InTime)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTransformBreadcrumbs Result ; Result . Breadcrumbs .)",
    "insertText": "SetNum(Breadcrumbs.Num())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (X = InTime ; } return Result ; } public : TArray<FFrameTime>::RangedForConstIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TArray<FFrameTime>::RangedForConstIteratorType)",
    "insertText": "end()"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (} operator TArrayView<const)",
    "insertText": "FFrameTime()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: MOVIESCENE_API FMovieSceneWarpCounter()"
  },
  {
    "label": "FMovieSceneWarpCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneWarpCounter(const FMovieSceneWarpCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneWarpCounter&)",
    "insertText": "operator(const FMovieSceneWarpCounter&)"
  },
  {
    "label": "FMovieSceneWarpCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneWarpCounter(FMovieSceneWarpCounter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneWarpCounter&)",
    "insertText": "operator(FMovieSceneWarpCounter&&)"
  },
  {
    "label": "FMovieSceneWarpCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMovieSceneWarpCounter()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneInverseNestedSequenceTransform()"
  },
  {
    "label": "FMovieSceneInverseNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneInverseNestedSequenceTransform(const FMovieSceneTimeTransform& InLinearTransform) : TimeScale(InLinearTransform.TimeScale), Offset(InLinearTransform.Offset)"
  },
  {
    "label": "FMovieSceneInverseNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneInverseNestedSequenceTransform(const FFrameTime& InOffset, double InTimeScale) : TimeScale(InTimeScale), Offset(InOffset)"
  },
  {
    "label": "IsLinear()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsLinear()"
  },
  {
    "label": "NeedsBreadcrumb()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsBreadcrumb()"
  },
  {
    "label": "AsLinear()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneTimeTransform)",
    "insertText": "AsLinear()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (FMovieSceneNestedSequenceTransform)",
    "insertText": "Inverse()"
  },
  {
    "label": "TryTransformTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "TryTransformTime(FFrameTime Time, FFrameTime Breadcrumb)"
  },
  {
    "label": "TryTransformTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "TryTransformTime(FFrameTime Time, FFrameTime Breadcrumb, const UE::MovieScene::FInverseTransformTimeParams& Params)"
  },
  {
    "label": "TransformTimeWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformTimeWithinRange(FFrameTime Time, const TFunctionRef<bool(FFrameTime)>& Visitor, FFrameTime UntransformedRangeStart, FFrameTime UntransformedRangeEnd)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() MOVIESCENE_API FMovieSceneNestedSequenceTransform()"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneNestedSequenceTransform(const FMovieSceneNestedSequenceTransform&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneNestedSequenceTransform&)",
    "insertText": "operator(const FMovieSceneNestedSequenceTransform&)"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneNestedSequenceTransform(FMovieSceneNestedSequenceTransform&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneNestedSequenceTransform&)",
    "insertText": "operator(FMovieSceneNestedSequenceTransform&&)"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMovieSceneNestedSequenceTransform()"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneNestedSequenceTransform(FMovieSceneTimeWarpVariant&& InVariant) : TimeScale(MoveTemp(InVariant))"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneNestedSequenceTransform(const FMovieSceneTimeTransform& InLinearTransform) : TimeScale(InLinearTransform.TimeScale), Offset(InLinearTransform.Offset)"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneNestedSequenceTransform(FFrameTime InOffset, double InTimeScale) : TimeScale(InTimeScale), Offset(InOffset)"
  },
  {
    "label": "FMovieSceneNestedSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneNestedSequenceTransform(FFrameTime InOffset, FMovieSceneTimeWarpVariant&& InTimeScale) : TimeScale(MoveTemp(InTimeScale)), Offset(InOffset)"
  },
  {
    "label": "IsIdentity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIdentity()"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "TransformTime(FFrameTime Time)"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "TransformTime(FFrameTime Time, const UE::MovieScene::FTransformTimeParams& Params)"
  },
  {
    "label": "ComputeTraversedHull()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameTime>)",
    "insertText": "ComputeTraversedHull(const TRange<FFrameTime>& Range)"
  },
  {
    "label": "SupportsBoundaries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBoundaries()"
  },
  {
    "label": "GetWarpDomain()",
    "kind": "Method",
    "detail": "Function (TOptional<UE::MovieScene::ETimeWarpChannelDomain>)",
    "insertText": "GetWarpDomain()"
  },
  {
    "label": "ExtractBoundariesWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractBoundariesWithinRange(const TRange<FFrameTime>& UntransformedRange, const TFunctionRef<bool(FFrameTime)>& Visitor)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(TStringBuilderBase<TCHAR>& OutBuilder)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMovieSceneNestedSequenceTransform& A, const FMovieSceneNestedSequenceTransform& B)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSequenceTransform()"
  },
  {
    "label": "FMovieSceneSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequenceTransform(FFrameTime InOffset, float InTimeScale = 1.f) : LinearTransform(InOffset, InTimeScale)"
  },
  {
    "label": "FMovieSceneSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequenceTransform(FMovieSceneTimeTransform InLinearTransform) : LinearTransform(InLinearTransform)"
  },
  {
    "label": "FMovieSceneSequenceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequenceTransform(FMovieSceneNestedSequenceTransform&& InNestedTransform)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} else { NestedTransforms .)",
    "insertText": "Emplace(InNestedTransform)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FMovieSceneSequenceTransform& A, const FMovieSceneSequenceTransform& B)"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "TransformTime(FFrameTime InTime, const UE::MovieScene::FTransformTimeParams& Params)"
  },
  {
    "label": "ComputeTraversedHull()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameTime>)",
    "insertText": "ComputeTraversedHull(const TRange<FFrameNumber>& Range)"
  },
  {
    "label": "FindFirstWarpDomain()",
    "kind": "Method",
    "detail": "Function (TOptional<UE::MovieScene::ETimeWarpChannelDomain>)",
    "insertText": "FindFirstWarpDomain()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Add(FMovieSceneTimeTransform InTransform)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FFrameTime InOffset, FMovieSceneTimeWarpVariant&& InTimeWarp)"
  },
  {
    "label": "AddLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLoop(FFrameNumber Start, FFrameNumber End)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FMovieSceneSequenceTransform& Tail)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceTransform)",
    "insertText": "operator(const FMovieSceneSequenceTransform& RHS)"
  },
  {
    "label": "ExtractBoundariesWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractBoundariesWithinRange(FFrameTime UntransformedStart, FFrameTime UntransformedEnd, const TFunctionRef<bool(FFrameTime)>& Visitor)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() bool IsLinear()"
  },
  {
    "label": "TryTransformTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "TryTransformTime(FFrameTime Time, const FMovieSceneTransformBreadcrumbs& Breadcrumbs, const UE::MovieScene::FInverseTransformTimeParams& Params)"
  },
  {
    "label": "TryTransformTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "TryTransformTime(FFrameTime Time)"
  },
  {
    "label": "TryTransformTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "TryTransformTime(FFrameTime Time, const UE::MovieScene::FInverseTransformTimeParams& Params)"
  },
  {
    "label": "TransformTimeWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformTimeWithinRange(FFrameTime Time, const TFunctionRef<bool(FFrameTime)>& Visitor, const FMovieSceneTransformBreadcrumbs& StartBreadcrumbs, const FMovieSceneTransformBreadcrumbs& EndBreadcrumbs)"
  },
  {
    "label": "TransformFiniteRangeWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformFiniteRangeWithinRange(const TRange<FFrameTime>& Range, TFunctionRef<bool(TRange<FFrameTime>)> Visitor, const FMovieSceneTransformBreadcrumbs& StartBreadcrumbs, const FMovieSceneTransformBreadcrumbs& EndBreadcrumbs)"
  },
  {
    "label": "RecursiveTransformTimeWithinRange()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "RecursiveTransformTimeWithinRange(int32 NestingIndex, FFrameTime Time, const TFunctionRef<bool(FFrameTime)>& FinalVisitor, TArrayView<const FFrameTime> StartBreadcrumbs, TArrayView<const FFrameTime> EndBreadcrumbs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FFrameTime)",
    "insertText": "operator(FFrameTime InTime, const FMovieSceneSequenceTransform& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameTime&)",
    "insertText": "operator(FFrameTime& InTime, const FMovieSceneSequenceTransform& RHS)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (InTime = InTime* RHS ; return InTime ; } FString)",
    "insertText": "LexToString(const FMovieSceneSequenceTransform& InTransform)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(const FMovieSceneWarpCounter& InCounter)"
  }
]