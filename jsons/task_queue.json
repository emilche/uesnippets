[
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "TaskQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_TASK_QUEUE_H_ # define RTC_BASE_TASK_QUEUE_H_ # include<stdint . h> # include<memory> # include<utility> # include \" absl / functional / any_invocable . h \" # include \" absl / memory / memory . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { class RTC_LOCKABLE RTC_EXPORT TaskQueue { public : using Priority =::webrtc::TaskQueueFactory::Priority ;)",
    "insertText": "TaskQueue(std::unique_ptr<webrtc::TaskQueueBase, webrtc::TaskQueueDeleter> task_queue)"
  },
  {
    "label": "TaskQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskQueue()"
  },
  {
    "label": "TaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskQueue(const TaskQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskQueue&)",
    "insertText": "operator(const TaskQueue&)"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase*)",
    "insertText": "Get()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (impl_ ->)",
    "insertText": "PostTask(std::move(task))"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostDelayedTask(absl::AnyInvocable<void() &&> task, webrtc::TimeDelta delay)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (impl_ ->)",
    "insertText": "PostDelayedTask(std::move(task), delay)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostDelayedHighPrecisionTask(absl::AnyInvocable<void() &&> task, webrtc::TimeDelta delay)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (impl_ ->)",
    "insertText": "PostDelayedHighPrecisionTask(std::move(task), delay)"
  }
]