[
  {
    "label": "FakeIceTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeIceTransport"
  },
  {
    "label": "FakeIceTransportWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeIceTransportWrapper"
  },
  {
    "label": "FakeIceTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_FAKE_ICE_TRANSPORT_H_ # define P2P_BASE_FAKE_ICE_TRANSPORT_H_ # include<map> # include<memory> # include<string> # include<utility> # include \" absl / algorithm / container . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / ice_transport_interface . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / units / time_delta . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / task_queue_for_test . h \" namespace cricket { using::webrtc::SafeTask ; using::webrtc::TimeDelta ; class FakeIceTransport : public IceTransportInternal { public :)",
    "insertText": "FakeIceTransport(absl::string_view name, int component, rtc::Thread* network_thread = nullptr) : name_(name), component_(component), network_thread_(network_thread ? network_thread : rtc::Thread::Current())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(network_thread_)"
  },
  {
    "label": "FakeIceTransport()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakeIceTransport()"
  },
  {
    "label": "SetAsync()",
    "kind": "Method",
    "detail": "Function (dest_ -> dest_ = nullptr ; } } void)",
    "insertText": "SetAsync(bool async)"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread_)"
  },
  {
    "label": "SetAsyncDelay()",
    "kind": "Method",
    "detail": "Function (async_ = async ; } void)",
    "insertText": "SetAsyncDelay(int delay_ms)"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (async_delay_ms_ = delay_ms ; } void)",
    "insertText": "SetWritable(bool writable)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_writable(writable)"
  },
  {
    "label": "SetReceiving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReceiving(bool receiving)"
  },
  {
    "label": "set_receiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_receiving(receiving)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDestination(FakeIceTransport* dest, bool asymmetric = false)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (dest_ = dest ;)",
    "insertText": "set_writable(true)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (dest ->)",
    "insertText": "SetDestination(this, true)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (} } else { dest_ = nullptr ;)",
    "insertText": "set_writable(false)"
  },
  {
    "label": "SetTransportState()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetTransportState(webrtc::IceTransportState state, IceTransportState legacy_state)"
  },
  {
    "label": "SignalIceTransportStateChanged()",
    "kind": "Method",
    "detail": "Function (transport_state_ = state ; legacy_transport_state_ = legacy_state ;)",
    "insertText": "SignalIceTransportStateChanged(this)"
  },
  {
    "label": "SetConnectionCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConnectionCount(size_t connection_count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t old_connection_count = connection_count_ ; connection_count_ = connection_count ;)",
    "insertText": "if(connection_count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (had_connection_ = true ; })",
    "insertText": "if(connection_count_ < old_connection_count)"
  },
  {
    "label": "SignalStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalStateChanged(this)"
  },
  {
    "label": "SetCandidatesGatheringComplete()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetCandidatesGatheringComplete()"
  },
  {
    "label": "SignalGatheringState()",
    "kind": "Method",
    "detail": "Function (gathering_state_ = kIceGatheringComplete ;)",
    "insertText": "SignalGatheringState(this)"
  },
  {
    "label": "receiving_timeout()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "receiving_timeout()"
  },
  {
    "label": "gather_continually()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "gather_continually()"
  },
  {
    "label": "remote_candidates()",
    "kind": "Method",
    "detail": "Function (} const Candidates&)",
    "insertText": "remote_candidates()"
  },
  {
    "label": "GetIceRole()",
    "kind": "Method",
    "detail": "Function (role_ = role ; } IceRole)",
    "insertText": "GetIceRole()"
  },
  {
    "label": "SetIceParameters()",
    "kind": "Method",
    "detail": "Function (tiebreaker_ = tiebreaker ; } void)",
    "insertText": "SetIceParameters(const IceParameters& ice_params)"
  },
  {
    "label": "SetRemoteIceParameters()",
    "kind": "Method",
    "detail": "Function (ice_parameters_ = ice_params ; } void)",
    "insertText": "SetRemoteIceParameters(const IceParameters& params)"
  },
  {
    "label": "SetRemoteIceMode()",
    "kind": "Method",
    "detail": "Function (remote_ice_parameters_ = params ; } void)",
    "insertText": "SetRemoteIceMode(IceMode mode)"
  },
  {
    "label": "MaybeStartGathering()",
    "kind": "Method",
    "detail": "Function (remote_ice_mode_ = mode ; } void)",
    "insertText": "MaybeStartGathering()"
  },
  {
    "label": "gathering_state()",
    "kind": "Method",
    "detail": "Function (} } IceGatheringState)",
    "insertText": "gathering_state()"
  },
  {
    "label": "AddRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (ice_config_ = config ; } void)",
    "insertText": "AddRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (remote_candidates_ .)",
    "insertText": "push_back(candidate)"
  },
  {
    "label": "RemoveRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "c_find()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "c_find(remote_candidates_, candidate)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_INFO)"
  },
  {
    "label": "RemoveAllRemoteCandidates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllRemoteCandidates()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (remote_candidates_ .)",
    "insertText": "clear()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetStats(IceTransportStats* ice_transport_stats)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ice_transport_stats -> candidate_stats_list .)",
    "insertText": "push_back(candidate_stats)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ice_transport_stats -> connection_infos .)",
    "insertText": "push_back(candidate_pair_stats)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (combine_outgoing_packets_ = combine ; } int)",
    "insertText": "SendPacket(const char* data, size_t len, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (rtc::CopyOnWriteBuffer)",
    "insertText": "packet(std::move(send_packet_))"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (network_thread_ ->)",
    "insertText": "PostDelayedTask(SafeTask(task_safety_.flag(), [this, packet] { RTC_DCHECK_RUN_ON(network_thread_); FakeIceTransport::SendPacketInternal(packet); }), TimeDelta::Millis(async_delay_ms_))"
  },
  {
    "label": "SendPacketInternal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SendPacketInternal(packet)"
  },
  {
    "label": "sent_packet()",
    "kind": "Method",
    "detail": "Function (} } rtc::SentPacket)",
    "insertText": "sent_packet(options.packet_id, rtc::TimeMillis())"
  },
  {
    "label": "SignalSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalSentPacket(this, sent_packet)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SetOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (socket_options_ [ opt ] = value ; return true ; } bool)",
    "insertText": "GetOption(rtc::Socket::Option opt, int* value)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = socket_options_ .)",
    "insertText": "find(opt)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (* value = it -> second ; return true ; } else { return false ; } } int)",
    "insertText": "GetError()"
  },
  {
    "label": "SendTask()",
    "kind": "Method",
    "detail": "Function (network_route_ = network_route ;)",
    "insertText": "SendTask(network_thread_, [this] { RTC_DCHECK_RUN_ON(network_thread_); SignalNetworkRouteChanged(network_route_); })"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "set_writable(bool writable) RTC_EXCLUSIVE_LOCKS_REQUIRED(network_thread_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (writable_ = writable ;)",
    "insertText": "if(writable_)"
  },
  {
    "label": "SignalReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalReadyToSend(this)"
  },
  {
    "label": "SignalWritableState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SignalWritableState(this)"
  },
  {
    "label": "set_receiving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_receiving(bool receiving) RTC_EXCLUSIVE_LOCKS_REQUIRED(network_thread_)"
  },
  {
    "label": "SendPacketInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendPacketInternal(const rtc::CopyOnWriteBuffer& packet) RTC_EXCLUSIVE_LOCKS_REQUIRED(network_thread_)"
  },
  {
    "label": "SignalReadPacket()",
    "kind": "Method",
    "detail": "Function (last_sent_packet_ = packet ; dest_ ->)",
    "insertText": "SignalReadPacket(dest_, packet.data<char>(), packet.size(), rtc::TimeMicros(), 0)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} } const std::string name_ ; const int component_ ; FakeIceTransport* dest_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "FakeIceTransportWrapper()",
    "kind": "Method",
    "detail": "Function (rtc::Thread* const network_thread_ ; webrtc::ScopedTaskSafetyDetached task_safety_ ; } ; class FakeIceTransportWrapper : public webrtc::IceTransportInterface { public :)",
    "insertText": "FakeIceTransportWrapper(std::unique_ptr<cricket::FakeIceTransport> internal) : internal_(std::move(internal))"
  },
  {
    "label": "internal()",
    "kind": "Method",
    "detail": "Function (} cricket::IceTransportInternal*)",
    "insertText": "internal()"
  }
]