[
  {
    "label": "ArrayRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayRef"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "VectorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorType"
  },
  {
    "label": "StoreInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoreInst"
  },
  {
    "label": "DxilFieldAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilFieldAnnotation"
  },
  {
    "label": "DxilTypeSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilTypeSystem"
  },
  {
    "label": "HLMatrixType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HLMatrixType"
  },
  {
    "label": "HLMatrixType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" llvm / IR / IRBuilder . h \" namespace llvm { template<T> class ArrayRef ; class Type ; class Value ; class Constant ; class StructType ; class VectorType ; class StoreInst ; } namespace hlsl { class DxilFieldAnnotation ; class DxilTypeSystem ; class HLMatrixType { public : const char* StructNamePrefix = \" class . matrix . \" ;)",
    "insertText": "HLMatrixType() : RegReprElemTy(nullptr), NumRows(0), NumColumns(0)"
  },
  {
    "label": "HLMatrixType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HLMatrixType(llvm::Type *RegReprElemTy, unsigned NumRows, unsigned NumColumns)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "getElementTypeForReg()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "getElementTypeForReg()"
  },
  {
    "label": "getElementTypeForMem()",
    "kind": "Method",
    "detail": "Function (} llvm::Type*)",
    "insertText": "getElementTypeForMem()"
  },
  {
    "label": "getNumRows()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumRows()"
  },
  {
    "label": "getColumnMajorIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getColumnMajorIndex(unsigned RowIdx, unsigned ColIdx)"
  },
  {
    "label": "getRowMajorIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getRowMajorIndex(unsigned RowIdx, unsigned ColIdx, unsigned NumRows, unsigned NumColumns)"
  },
  {
    "label": "getColumnMajorIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getColumnMajorIndex(unsigned RowIdx, unsigned ColIdx, unsigned NumRows, unsigned NumColumns)"
  },
  {
    "label": "getLoweredVectorType()",
    "kind": "Method",
    "detail": "Function (llvm::VectorType*)",
    "insertText": "getLoweredVectorType(bool MemRepr)"
  },
  {
    "label": "getLoweredVectorTypeForReg()",
    "kind": "Method",
    "detail": "Function (llvm::VectorType*)",
    "insertText": "getLoweredVectorTypeForReg()"
  },
  {
    "label": "getLoweredVectorTypeForMem()",
    "kind": "Method",
    "detail": "Function (} llvm::VectorType*)",
    "insertText": "getLoweredVectorTypeForMem()"
  },
  {
    "label": "emitLoweredMemToReg()",
    "kind": "Method",
    "detail": "Function (} llvm::Value*)",
    "insertText": "emitLoweredMemToReg(llvm::Value *Val, llvm::IRBuilder<> &Builder)"
  },
  {
    "label": "emitLoweredRegToMem()",
    "kind": "Method",
    "detail": "Function (llvm::Value*)",
    "insertText": "emitLoweredRegToMem(llvm::Value *Val, llvm::IRBuilder<> &Builder)"
  },
  {
    "label": "emitLoweredLoad()",
    "kind": "Method",
    "detail": "Function (llvm::Value*)",
    "insertText": "emitLoweredLoad(llvm::Value *Ptr, llvm::IRBuilder<> &Builder)"
  },
  {
    "label": "emitLoweredStore()",
    "kind": "Method",
    "detail": "Function (llvm::StoreInst*)",
    "insertText": "emitLoweredStore(llvm::Value *Val, llvm::Value *Ptr, llvm::IRBuilder<> &Builder)"
  },
  {
    "label": "emitLoweredVectorRowToCol()",
    "kind": "Method",
    "detail": "Function (llvm::Value*)",
    "insertText": "emitLoweredVectorRowToCol(llvm::Value *VecVal, llvm::IRBuilder<> &Builder)"
  },
  {
    "label": "emitLoweredVectorColToRow()",
    "kind": "Method",
    "detail": "Function (llvm::Value*)",
    "insertText": "emitLoweredVectorColToRow(llvm::Value *VecVal, llvm::IRBuilder<> &Builder)"
  },
  {
    "label": "isa()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isa(llvm::Type *Ty)"
  },
  {
    "label": "isMatrixPtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isMatrixPtr(llvm::Type *Ty)"
  },
  {
    "label": "isMatrixArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isMatrixArray(llvm::Type *Ty)"
  },
  {
    "label": "isMatrixArrayPtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isMatrixArrayPtr(llvm::Type *Ty)"
  },
  {
    "label": "isMatrixPtrOrArrayPtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isMatrixPtrOrArrayPtr(llvm::Type *Ty)"
  },
  {
    "label": "isMatrixOrPtrOrArrayPtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isMatrixOrPtrOrArrayPtr(llvm::Type *Ty)"
  },
  {
    "label": "getLoweredType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "getLoweredType(llvm::Type *Ty, bool MemRepr = false)"
  },
  {
    "label": "cast()",
    "kind": "Method",
    "detail": "Function (HLMatrixType)",
    "insertText": "cast(llvm::Type *Ty)"
  },
  {
    "label": "dyn_cast()",
    "kind": "Method",
    "detail": "Function (HLMatrixType)",
    "insertText": "dyn_cast(llvm::Type *Ty)"
  }
]