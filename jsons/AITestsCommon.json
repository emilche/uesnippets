[
  {
    "label": "FAITestCommand_WaitOneTick",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAITestCommand_WaitOneTick"
  },
  {
    "label": "AITESTSUITE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AITESTSUITE_API"
  },
  {
    "label": "Fixture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Fixture"
  },
  {
    "label": "FReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReal"
  },
  {
    "label": "FAITest_SimpleComponentBasedTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAITest_SimpleComponentBasedTest"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Package . h \" # include \" UObject / UObjectGlobals . h \" # include \" CoreGlobals . h \" # include \" Misc / AutomationTest . h \" # include \" TestLogger . h \" # include \" Engine / EngineBaseTypes . h \" # include \" TestableEnsures . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAITestSuite, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBehaviorTreeTest, Log, All)"
  },
  {
    "label": "DEFINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FAITestCommand_WaitSeconds, float, Duration)"
  },
  {
    "label": "FAITestCommand_WaitOneTick()",
    "kind": "Method",
    "detail": "Function (class FAITestCommand_WaitOneTick : public IAutomationLatentCommand { public :)",
    "insertText": "FAITestCommand_WaitOneTick() : bAlreadyRun(false)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Update()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (private : bool bAlreadyRun ; } ; namespace FAITestHelpers { UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "UpdateFrameCounter()",
    "kind": "Method",
    "detail": "Function (const float TickInterval = 1 . f / 3 0 ; void)",
    "insertText": "UpdateFrameCounter()"
  },
  {
    "label": "FramesCounter()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "FramesCounter()"
  },
  {
    "label": "FAITestBase()",
    "kind": "Method",
    "detail": "Function (} struct FAITestBase { private : TArray<UObject*> SpawnedObjects ; uint32 bTearedDown : 1 ; protected : FAutomationTestBase* TestRunner ;)",
    "insertText": "FAITestBase() : bTearedDown(false), TestRunner(nullptr)"
  },
  {
    "label": "NewAutoDestroyObject()",
    "kind": "Method",
    "detail": "Function (} template<ClassToSpawn> ClassToSpawn*)",
    "insertText": "NewAutoDestroyObject(UObject* Outer = GetTransientPackage())"
  },
  {
    "label": "ClassToSpawn()",
    "kind": "Method",
    "detail": "Function (ClassToSpawn* ObjectInstance = NewObject<)",
    "insertText": "ClassToSpawn(Outer)"
  },
  {
    "label": "AddToRoot()",
    "kind": "Method",
    "detail": "Function (ObjectInstance ->)",
    "insertText": "AddToRoot()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SpawnedObjects .)",
    "insertText": "Add(ObjectInstance)"
  },
  {
    "label": "GetTestRunner()",
    "kind": "Method",
    "detail": "Function (FAutomationTestBase&)",
    "insertText": "GetTestRunner()"
  },
  {
    "label": "FAITestBase()",
    "kind": "Method",
    "detail": "Function (TestRunner =& AutomationTestInstance ; } ~)",
    "insertText": "FAITestBase()"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUp()"
  },
  {
    "label": "InstantTest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InstantTest()"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(AITESTSUITE_API, FAITestCommand_SetUpTest, FAITestBase*, AITest)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(AITESTSUITE_API, FAITestCommand_PerformTest, FAITestBase*, AITest)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(AITESTSUITE_API, FAITestCommand_VerifyTestResults, FAITestBase*, AITest)"
  },
  {
    "label": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_EXPORTED_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(AITESTSUITE_API, FAITestCommand_TearDownTest, FAITestBase*, AITest)"
  },
  {
    "label": "IMPLEMENT_AI_LATENT_TEST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "IMPLEMENT_AI_LATENT_TEST(TestClass, PrettyName) \\ IMPLEMENT_SIMPLE_AUTOMATION_TEST(TestClass##_Runner, PrettyName, (EAutomationTestFlags::ClientContext | EAutomationTestFlags::EditorContext | EAutomationTestFlags::EngineFilter)) \\ bool TestClass##_Runner::RunTest(const FString& Parameters)"
  },
  {
    "label": "TestClass()",
    "kind": "Method",
    "detail": "Function (\\ \\ TestClass* TestInstance = new)",
    "insertText": "TestClass()"
  },
  {
    "label": "SetTestRunner()",
    "kind": "Method",
    "detail": "Function (\\ TestInstance ->)",
    "insertText": "SetTestRunner(*this)"
  },
  {
    "label": "ADD_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "ADD_LATENT_AUTOMATION_COMMAND(FAITestCommand_SetUpTest(TestInstance))"
  },
  {
    "label": "ADD_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "ADD_LATENT_AUTOMATION_COMMAND(FAITestCommand_PerformTest(TestInstance))"
  },
  {
    "label": "ADD_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "ADD_LATENT_AUTOMATION_COMMAND(FAITestCommand_VerifyTestResults(TestInstance))"
  },
  {
    "label": "ADD_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "ADD_LATENT_AUTOMATION_COMMAND(FAITestCommand_TearDownTest(TestInstance))"
  },
  {
    "label": "IMPLEMENT_AI_INSTANT_TEST()",
    "kind": "Method",
    "detail": "Function (\\ return true ; \\ } # define)",
    "insertText": "IMPLEMENT_AI_INSTANT_TEST(TestClass, PrettyName) \\ IMPLEMENT_SIMPLE_AUTOMATION_TEST(TestClass##Runner, PrettyName, (EAutomationTestFlags::ClientContext | EAutomationTestFlags::EditorContext | EAutomationTestFlags::EngineFilter)) \\ bool TestClass##Runner::RunTest(const FString& Parameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "if(TestInstance->SetUp())"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ TestInstance ->)",
    "insertText": "TearDown()"
  },
  {
    "label": "IMPLEMENT_INSTANT_TEST_WITH_FIXTURE()",
    "kind": "Method",
    "detail": "Function (\\ delete TestInstance ; \\ return bSuccess ; \\ } # define)",
    "insertText": "IMPLEMENT_INSTANT_TEST_WITH_FIXTURE(Fixture, PrettyGroupNameString, TestExperiment)"
  },
  {
    "label": "IMPLEMENT_AI_INSTANT_TEST()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\)",
    "insertText": "IMPLEMENT_AI_INSTANT_TEST(Fixture##_##TestExperiment, PrettyGroupNameString \".\" # TestExperiment) \\ bool Fixture##_##TestExperiment::InstantTest()"
  },
  {
    "label": "FAITest_SimpleComponentBasedTest()",
    "kind": "Method",
    "detail": "Function (FTestLogger<int32> Logger ; FReal* Component ;)",
    "insertText": "FAITest_SimpleComponentBasedTest()"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (Component = NewAutoDestroyObject<)",
    "insertText": "FReal()"
  },
  {
    "label": "SetTestRunner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTestRunner(FAutomationTestBase& AutomationTestInstance)"
  },
  {
    "label": "SetTestRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestRunner(AutomationTestInstance)"
  },
  {
    "label": "GetTestRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTestRunner().TestTrue(TEXT(\"Not all expected values has been logged\"), Logger.ExpectedValues.Num() == 0 || Logger.ExpectedValues.Num() == Logger.LoggedValues.Num())"
  },
  {
    "label": "RegisterComponentWithWorld()",
    "kind": "Method",
    "detail": "Function (Component ->)",
    "insertText": "RegisterComponentWithWorld(World)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (Component ->)",
    "insertText": "TickComponent(FAITestHelpers::TickInterval, ELevelTick::LEVELTICK_All, nullptr)"
  },
  {
    "label": "__AITEST_IMPL()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "__AITEST_IMPL(What, Value, Test, RetVal)\\ if (!GetTestRunner().Test(What, Value))"
  },
  {
    "label": "AITEST_TRUE()",
    "kind": "Method",
    "detail": "Function (\\ return RetVal ; \\ } # define)",
    "insertText": "AITEST_TRUE(What, Value) __AITEST_IMPL(What, Value, TestTrue, false) #define AITEST_FALSE(What, Value) __AITEST_IMPL(What, Value, TestFalse, false) #define AITEST_NULL(What, Pointer) __AITEST_IMPL(What, Pointer, TestNull, false) #define AITEST_NOT_NULL(What, Pointer) \\ __AITEST_IMPL(What, Pointer, TestNotNull, false) \\ CA_ASSUME(Pointer)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (template<T1,T2> bool)",
    "insertText": "TestEqual(const FString& Description, T1 Expression, T2 Expected, FAutomationTestBase& This)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (} template<T1,T2> bool)",
    "insertText": "TestEqual(const FString& Description, T1* Expression, T2* Expected, FAutomationTestBase& This)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} template<T1,T2> bool)",
    "insertText": "TestNotEqual(const FString& Description, T1 Expression, T2 Expected, FAutomationTestBase& This)"
  },
  {
    "label": "TestNotEqual()",
    "kind": "Method",
    "detail": "Function (} template<T1,T2> bool)",
    "insertText": "TestNotEqual(const FString& Description, T1* Expression, T2* Expected, FAutomationTestBase& This)"
  },
  {
    "label": "__AITEST_HELPER_IMPL()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "__AITEST_HELPER_IMPL(What, Actual, Expected, Test, RetVal)\\ if (!FTestHelpers::Test(What, Actual, Expected, GetTestRunner()))"
  }
]