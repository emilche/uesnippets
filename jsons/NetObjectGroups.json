[
  {
    "label": "FNetRefHandleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetRefHandleManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetObjectGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetObjectGroup"
  },
  {
    "label": "FNetObjectGroupInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetObjectGroupInitParams"
  },
  {
    "label": "FNetObjectGroups",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetObjectGroups"
  },
  {
    "label": "FNetObjectGroupMembership",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetObjectGroupMembership"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" UObject / NameTypes . h \" # include \" Net / Core / NetBitArray . h \" # include \" Iris / ReplicationSystem / NetObjectGroupHandle . h \" namespace UE::Net { namespace Private { typedef uint32 FInternalNetRefIndex ; class FNetRefHandleManager ; } } namespace UE::Net::Private { enum class ENetObjectGroupTraits : uint32 { None = 0 x0000,IsExclusionFiltering = 0 x0001,IsInclusionFiltering = 0 x0002,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ENetObjectGroupTraits)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (struct FNetObjectGroup { TArray<FInternalNetRefIndex> Members ; FName GroupName ; uint32 GroupId = 0 U ; ENetObjectGroupTraits Traits = ENetObjectGroupTraits::None ; } ; struct FNetObjectGroupInitParams { FNetRefHandleManager* NetRefHandleManager = nullptr ; uint32 MaxInternalNetRefIndex = 0 U ; uint32 MaxGroupCount = 0 U ; } ; class FNetObjectGroups {)",
    "insertText": "UE_NONCOPYABLE(FNetObjectGroups) public: FNetObjectGroups()"
  },
  {
    "label": "FNetObjectGroups()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetObjectGroups()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FNetObjectGroupInitParams& Params)"
  },
  {
    "label": "CreateGroup()",
    "kind": "Method",
    "detail": "Function (FNetObjectGroupHandle)",
    "insertText": "CreateGroup(FName GroupName)"
  },
  {
    "label": "DestroyGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyGroup(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "ClearGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGroup(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "FindGroupHandle()",
    "kind": "Method",
    "detail": "Function (FNetObjectGroupHandle)",
    "insertText": "FindGroupHandle(FName GroupName)"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (const FNetObjectGroup*)",
    "insertText": "GetGroup(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "GetGroupFromIndex()",
    "kind": "Method",
    "detail": "Function (const FNetObjectGroup*)",
    "insertText": "GetGroupFromIndex(FNetObjectGroupHandle::FGroupIndexType GroupIndex)"
  },
  {
    "label": "GetHandleFromGroup()",
    "kind": "Method",
    "detail": "Function (FNetObjectGroupHandle)",
    "insertText": "GetHandleFromGroup(const FNetObjectGroup* InGroup)"
  },
  {
    "label": "GetHandleFromIndex()",
    "kind": "Method",
    "detail": "Function (FNetObjectGroupHandle)",
    "insertText": "GetHandleFromIndex(FNetObjectGroupHandle::FGroupIndexType GroupIndex)"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGroupName(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "GetGroupNameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGroupNameString(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "IsValidGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidGroup(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(FNetObjectGroupHandle GroupHandle, FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "AddToGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToGroup(FNetObjectGroupHandle GroupHandle, FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "RemoveFromGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromGroup(FNetObjectGroupHandle GroupHandle, FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "AddExclusionFilterTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExclusionFilterTrait(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "RemoveExclusionFilterTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExclusionFilterTrait(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "AddInclusionFilterTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInclusionFilterTrait(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "RemoveInclusionFilterTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInclusionFilterTrait(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "IsFilterGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterGroup(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "IsExclusionFilterGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExclusionFilterGroup(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "IsInclusionFilterGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInclusionFilterGroup(FNetObjectGroupHandle GroupHandle)"
  },
  {
    "label": "GetGroupIndexesOfNetObject()",
    "kind": "Method",
    "detail": "Function (const TArrayView<const FNetObjectGroupHandle::FGroupIndexType>)",
    "insertText": "GetGroupIndexesOfNetObject(FInternalNetRefIndex InternalIndex)"
  },
  {
    "label": "GetGroupHandlesOfNetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGroupHandlesOfNetObject(FInternalNetRefIndex InternalIndex, TArray<FNetObjectGroupHandle>& OutHandles)"
  },
  {
    "label": "GetGroupFilteredOutObjects()",
    "kind": "Method",
    "detail": "Function (const FNetBitArrayView)",
    "insertText": "GetGroupFilteredOutObjects()"
  },
  {
    "label": "OnMaxInternalNetRefIndexIncreased()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMaxInternalNetRefIndexIncreased(FInternalNetRefIndex NewMaxInternalIndex)"
  },
  {
    "label": "ContainsMembership()",
    "kind": "Method",
    "detail": "Function (private : struct FNetObjectGroupMembership { private : enum { NumInlinedGroupHandles = 2 } ; TArray<FNetObjectGroupHandle::FGroupIndexType,TInlineAllocator<NumInlinedGroupHandles>> GroupIndexes ; public : bool)",
    "insertText": "ContainsMembership(FNetObjectGroupHandle InGroupHandle)"
  },
  {
    "label": "AddMembership()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMembership(FNetObjectGroupHandle InGroupHandle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GroupIndexes .)",
    "insertText": "Add(InGroupHandle.GetGroupIndex())"
  },
  {
    "label": "RemoveMembership()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveMembership(FNetObjectGroupHandle InGroupHandle)"
  },
  {
    "label": "RemoveSingleSwap()",
    "kind": "Method",
    "detail": "Function (GroupIndexes .)",
    "insertText": "RemoveSingleSwap(InGroupHandle.GetGroupIndex())"
  },
  {
    "label": "ResetMemberships()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMemberships()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (GroupIndexes .)",
    "insertText": "Reset()"
  },
  {
    "label": "NumMemberships()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumMemberships()"
  },
  {
    "label": "GetGroupIndexes()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<const FNetObjectGroupHandle::FGroupIndexType>)",
    "insertText": "GetGroupIndexes()"
  },
  {
    "label": "AddGroupMembership()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "AddGroupMembership(FNetObjectGroupMembership& Target, FNetObjectGroupHandle Group)"
  },
  {
    "label": "ResetGroupMembership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGroupMembership(FNetObjectGroupMembership& Target)"
  },
  {
    "label": "IsMemberOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMemberOf(const FNetObjectGroupMembership& Target, FNetObjectGroupHandle Group)"
  },
  {
    "label": "IsFilterGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterGroup(const FNetObjectGroup& Group)"
  },
  {
    "label": "IsExclusionFilterGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExclusionFilterGroup(const FNetObjectGroup& Group)"
  },
  {
    "label": "IsInclusionFilterGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInclusionFilterGroup(const FNetObjectGroup& Group)"
  },
  {
    "label": "IsInAnyFilterGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInAnyFilterGroup(const FNetObjectGroupMembership& GroupMembership)"
  },
  {
    "label": "GetIndexFromGroup()",
    "kind": "Method",
    "detail": "Function (const FNetObjectGroupHandle::FGroupIndexType)",
    "insertText": "GetIndexFromGroup(const FNetObjectGroup* InGroup)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (const bool bGroupIndexExists = GroupHandle .)",
    "insertText": "IsValid() && GroupHandle.Epoch == CurrentEpoch && Groups.IsValidIndex(GroupHandle.Index)"
  },
  {
    "label": "FindGroupHandle()",
    "kind": "Method",
    "detail": "Function (} FNetObjectGroupHandle)",
    "insertText": "FindGroupHandle(FName InGroupName)"
  },
  {
    "label": "GetIndexFromGroup()",
    "kind": "Method",
    "detail": "Function (const int32 Index =)",
    "insertText": "GetIndexFromGroup(&Group)"
  },
  {
    "label": "FNetObjectGroupHandle()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "FNetObjectGroupHandle()"
  },
  {
    "label": "GetGroupFromIndex()",
    "kind": "Method",
    "detail": "Function (const FNetObjectGroup* Group =)",
    "insertText": "GetGroupFromIndex(GroupIndex)"
  }
]