[
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_BIND_POST_TASK_H_ # define BASE_TASK_BIND_POST_TASK_H_ # include<memory> # include<type_traits> # include<utility> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / location . h \" # include \" base / task / bind_post_task_internal . h \" # include \" base / task / task_runner . h \" namespace base { template<ReturnType,. . . Args> OnceCallback<)",
    "insertText": "void(Args...)> BindPostTask( scoped_refptr<TaskRunner> task_runner, OnceCallback<ReturnType(Args...)> callback, const Location& location = FROM_HERE)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using Helper = internal::BindPostTaskTrampoline<OnceCallback<)",
    "insertText": "void(Args...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<ReturnType,. . . Args> RepeatingCallback<)",
    "insertText": "void(Args...)> BindPostTask( scoped_refptr<TaskRunner> task_runner, RepeatingCallback<ReturnType(Args...)> callback, const Location& location = FROM_HERE)"
  }
]