[
  {
    "label": "MyMessageHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyMessageHandler"
  },
  {
    "label": "MyAssertHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyAssertHandler"
  },
  {
    "label": "MyMessageHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef CMDLINE_H # define CMDLINE_H # include<nvcore / Debug . h> # include<stdio . h> # include<stdlib . h> # include<stdarg . h> struct MyMessageHandler : public nv::MessageHandler {)",
    "insertText": "MyMessageHandler()"
  },
  {
    "label": "setMessageHandler()",
    "kind": "Method",
    "detail": "Function (nv::)",
    "insertText": "setMessageHandler(this)"
  },
  {
    "label": "resetMessageHandler()",
    "kind": "Method",
    "detail": "Function (nv::)",
    "insertText": "resetMessageHandler()"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "log(const char * str, va_list arg)"
  },
  {
    "label": "va_copy()",
    "kind": "Method",
    "detail": "Function (va_list val ;)",
    "insertText": "va_copy(val, arg)"
  },
  {
    "label": "vfprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vfprintf(stderr, str, arg)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(val)"
  },
  {
    "label": "MyAssertHandler()",
    "kind": "Method",
    "detail": "Function (} } ; struct MyAssertHandler : public nv::AssertHandler {)",
    "insertText": "MyAssertHandler()"
  },
  {
    "label": "setAssertHandler()",
    "kind": "Method",
    "detail": "Function (nv::)",
    "insertText": "setAssertHandler(this)"
  },
  {
    "label": "resetAssertHandler()",
    "kind": "Method",
    "detail": "Function (nv::)",
    "insertText": "resetAssertHandler()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "assert(const char *exp, const char *file, int line, const char *func)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"Assertion failed: %s\\nIn %s:%d\\n\", exp, file, line)"
  },
  {
    "label": "dumpInfo()",
    "kind": "Method",
    "detail": "Function (nv::)",
    "insertText": "dumpInfo()"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exit(1)"
  }
]