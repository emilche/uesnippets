[
  {
    "label": "IAllocationsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAllocationsProvider"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRACESERVICES_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRACESERVICES_API"
  },
  {
    "label": "GetStartEventIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" ProfilingDebugging / MemoryTrace . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" # include<new> namespace TraceServices { typedef uint32 TagIdType ; class IAllocationsProvider : public IProvider { public : enum class EQueryRule { aAf,afA,Aaf,aAfB,AaBf,aAfaBf,AfB,AaB,AafB,aABf,AaBCf,AaBfC,aABfC,AaBCfD,AoB,AiB,} ; struct FQueryParams { EQueryRule Rule ; double TimeA ; double TimeB ; double TimeC ; double TimeD ; } ; struct FAllocation { uint32)",
    "insertText": "GetStartEventIndex()"
  },
  {
    "label": "GetEndEventIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetEndEventIndex()"
  },
  {
    "label": "GetAddress()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetAddress()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAlignment()"
  },
  {
    "label": "GetAllocThreadId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocThreadId()"
  },
  {
    "label": "GetFreeThreadId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFreeThreadId()"
  },
  {
    "label": "GetAllocCallstackId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocCallstackId()"
  },
  {
    "label": "GetFreeCallstackId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFreeCallstackId()"
  },
  {
    "label": "GetMetadataId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMetadataId()"
  },
  {
    "label": "GetTag()",
    "kind": "Method",
    "detail": "Function (TagIdType)",
    "insertText": "GetTag()"
  },
  {
    "label": "GetRootHeap()",
    "kind": "Method",
    "detail": "Function (HeapId)",
    "insertText": "GetRootHeap()"
  },
  {
    "label": "IsHeap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHeap()"
  },
  {
    "label": "IsSwap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSwap()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} ; class FAllocations { public : void operator)",
    "insertText": "delete(void* Address)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FAllocation*)",
    "insertText": "Get(uint32 Index)"
  },
  {
    "label": "NextResult()",
    "kind": "Method",
    "detail": "Function (} ; typedef TUniquePtr<const FAllocations> FQueryResult ; enum class EQueryStatus { Unknown,Done,Working,Available,} ; struct FQueryStatus { FQueryResult)",
    "insertText": "NextResult()"
  },
  {
    "label": "IAllocationsProvider()",
    "kind": "Method",
    "detail": "Function (EQueryStatus Status ; UPTRINT Handle ; } ; struct FHeapSpec { HeapId Id ; FHeapSpec* Parent ; TArray<FHeapSpec*> Children ; const TCHAR* Name ; EMemoryTraceHeapFlags Flags ; } ; typedef UPTRINT FQueryHandle ; public : ~)",
    "insertText": "IAllocationsProvider()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRead()"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadAccessCheck()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "EnumerateTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTags(TFunctionRef<void(const TCHAR*, const TCHAR*, TagIdType, TagIdType)> Callback)"
  },
  {
    "label": "GetTagName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTagName(TagIdType Tag)"
  },
  {
    "label": "GetTagFullPath()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTagFullPath(TagIdType Tag)"
  },
  {
    "label": "EnumerateRootHeaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateRootHeaps(TFunctionRef<void(HeapId Id, const FHeapSpec&)> Callback)"
  },
  {
    "label": "EnumerateHeaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateHeaps(TFunctionRef<void(HeapId Id, const FHeapSpec&)> Callback)"
  },
  {
    "label": "GetTimelineNumPoints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTimelineNumPoints()"
  },
  {
    "label": "GetTimelineIndexRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimelineIndexRange(double StartTime, double EndTime, int32& StartIndex, int32& EndIndex)"
  },
  {
    "label": "EnumerateMinTotalAllocatedMemoryTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMinTotalAllocatedMemoryTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint64 Value)> Callback)"
  },
  {
    "label": "EnumerateMaxTotalAllocatedMemoryTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMaxTotalAllocatedMemoryTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint64 Value)> Callback)"
  },
  {
    "label": "EnumerateMinLiveAllocationsTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMinLiveAllocationsTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint32 Value)> Callback)"
  },
  {
    "label": "EnumerateMaxLiveAllocationsTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMaxLiveAllocationsTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint32 Value)> Callback)"
  },
  {
    "label": "EnumerateMinTotalSwapMemoryTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMinTotalSwapMemoryTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint64 Value)> Callback)"
  },
  {
    "label": "EnumerateMaxTotalSwapMemoryTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMaxTotalSwapMemoryTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint64 Value)> Callback)"
  },
  {
    "label": "EnumerateMinTotalCompressedSwapMemoryTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMinTotalCompressedSwapMemoryTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint64 Value)> Callback)"
  },
  {
    "label": "EnumerateMaxTotalCompressedSwapMemoryTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMaxTotalCompressedSwapMemoryTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint64 Value)> Callback)"
  },
  {
    "label": "EnumerateAllocEventsTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllocEventsTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint32 Value)> Callback)"
  },
  {
    "label": "EnumerateFreeEventsTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFreeEventsTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint32 Value)> Callback)"
  },
  {
    "label": "EnumeratePageInEventsTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumeratePageInEventsTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint32 Value)> Callback)"
  },
  {
    "label": "EnumeratePageOutEventsTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumeratePageOutEventsTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint32 Value)> Callback)"
  },
  {
    "label": "EnumerateSwapFreeEventsTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSwapFreeEventsTimeline(int32 StartIndex, int32 EndIndex, TFunctionRef<void(double Time, double Duration, uint32 Value)> Callback)"
  },
  {
    "label": "StartQuery()",
    "kind": "Method",
    "detail": "Function (FQueryHandle)",
    "insertText": "StartQuery(const FQueryParams& Params)"
  },
  {
    "label": "CancelQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelQuery(FQueryHandle Query)"
  },
  {
    "label": "PollQuery()",
    "kind": "Method",
    "detail": "Function (const FQueryStatus)",
    "insertText": "PollQuery(FQueryHandle Query)"
  },
  {
    "label": "GetPlatformPageSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPlatformPageSize()"
  },
  {
    "label": "GetAllocationsProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetAllocationsProviderName()"
  },
  {
    "label": "ReadAllocationsProvider()",
    "kind": "Method",
    "detail": "Function (const IAllocationsProvider*)",
    "insertText": "ReadAllocationsProvider(const IAnalysisSession& Session)"
  }
]