[
  {
    "label": "NetworkEmulationManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkEmulationManagerImpl"
  },
  {
    "label": "NetworkEmulationManagerImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NETWORK_NETWORK_EMULATION_MANAGER_H_ # define TEST_NETWORK_NETWORK_EMULATION_MANAGER_H_ # include<map> # include<memory> # include<set> # include<utility> # include<vector> # include \" api / array_view . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / test / simulated_network . h \" # include \" api / test / time_controller . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / network . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread . h \" # include \" system_wrappers / include / clock . h \" # include \" test / network / cross_traffic . h \" # include \" test / network / emulated_network_manager . h \" # include \" test / network / emulated_turn_server . h \" # include \" test / network / fake_network_socket_server . h \" # include \" test / network / network_emulation . h \" namespace webrtc { namespace test { class NetworkEmulationManagerImpl : public NetworkEmulationManager { public :)",
    "insertText": "NetworkEmulationManagerImpl(TimeMode mode)"
  },
  {
    "label": "NetworkEmulationManagerImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkEmulationManagerImpl()"
  },
  {
    "label": "CreateEmulatedNode()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkNode*)",
    "insertText": "CreateEmulatedNode(BuiltInNetworkBehaviorConfig config, uint64_t random_seed = 1)"
  },
  {
    "label": "CreateEmulatedNode()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkNode*)",
    "insertText": "CreateEmulatedNode(std::unique_ptr<NetworkBehaviorInterface> network_behavior)"
  },
  {
    "label": "NodeBuilder()",
    "kind": "Method",
    "detail": "Function (SimulatedNetworkNode::Builder)",
    "insertText": "NodeBuilder()"
  },
  {
    "label": "CreateEndpoint()",
    "kind": "Method",
    "detail": "Function (EmulatedEndpointImpl*)",
    "insertText": "CreateEndpoint(EmulatedEndpointConfig config)"
  },
  {
    "label": "EnableEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEndpoint(EmulatedEndpoint* endpoint)"
  },
  {
    "label": "DisableEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableEndpoint(EmulatedEndpoint* endpoint)"
  },
  {
    "label": "CreateRoute()",
    "kind": "Method",
    "detail": "Function (EmulatedRoute*)",
    "insertText": "CreateRoute(EmulatedEndpoint* from, const std::vector<EmulatedNetworkNode*>& via_nodes, EmulatedEndpoint* to)"
  },
  {
    "label": "CreateRoute()",
    "kind": "Method",
    "detail": "Function (EmulatedRoute*)",
    "insertText": "CreateRoute(const std::vector<EmulatedNetworkNode*>& via_nodes)"
  },
  {
    "label": "CreateDefaultRoute()",
    "kind": "Method",
    "detail": "Function (EmulatedRoute*)",
    "insertText": "CreateDefaultRoute(EmulatedEndpoint* from, const std::vector<EmulatedNetworkNode*>& via_nodes, EmulatedEndpoint* to)"
  },
  {
    "label": "ClearRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRoute(EmulatedRoute* route)"
  },
  {
    "label": "CreateTcpRoute()",
    "kind": "Method",
    "detail": "Function (TcpMessageRoute*)",
    "insertText": "CreateTcpRoute(EmulatedRoute* send_route, EmulatedRoute* ret_route)"
  },
  {
    "label": "CreateCrossTrafficRoute()",
    "kind": "Method",
    "detail": "Function (CrossTrafficRoute*)",
    "insertText": "CreateCrossTrafficRoute(const std::vector<EmulatedNetworkNode*>& via_nodes)"
  },
  {
    "label": "StartCrossTraffic()",
    "kind": "Method",
    "detail": "Function (CrossTrafficGenerator*)",
    "insertText": "StartCrossTraffic(std::unique_ptr<CrossTrafficGenerator> generator)"
  },
  {
    "label": "StopCrossTraffic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCrossTraffic(CrossTrafficGenerator* generator)"
  },
  {
    "label": "CreateEmulatedNetworkManagerInterface()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkManagerInterface*)",
    "insertText": "CreateEmulatedNetworkManagerInterface(const std::vector<EmulatedEndpoint*>& endpoints)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(rtc::ArrayView<EmulatedEndpoint* const> endpoints, std::function<void(std::unique_ptr<EmulatedNetworkStats>)> stats_callback)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(rtc::ArrayView<EmulatedEndpoint* const> endpoints, std::function<void(EmulatedNetworkStats)> stats_callback)"
  },
  {
    "label": "time_controller()",
    "kind": "Method",
    "detail": "Function (TimeController*)",
    "insertText": "time_controller()"
  },
  {
    "label": "time_mode()",
    "kind": "Method",
    "detail": "Function (} TimeMode)",
    "insertText": "time_mode()"
  },
  {
    "label": "CreateTURNServer()",
    "kind": "Method",
    "detail": "Function (EmulatedTURNServerInterface*)",
    "insertText": "CreateTURNServer(EmulatedTURNServerConfig config)"
  },
  {
    "label": "GetNextIPv4Address()",
    "kind": "Method",
    "detail": "Function (private : using CrossTrafficSource = std::pair<std::unique_ptr<CrossTrafficGenerator>,RepeatingTaskHandle> ; absl::optional<rtc::IPAddress>)",
    "insertText": "GetNextIPv4Address()"
  }
]