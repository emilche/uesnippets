[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOC_FEATURES_H_ # define BASE_ALLOCATOR_PARTITION_ALLOC_FEATURES_H_ # include \" base / allocator / buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / feature_list . h \" # include \" base / metrics / field_trial_params . h \" namespace base { namespace features { const BASE_EXPORT Feature kPartitionAllocUnretainedDanglingPtr ; enum class UnretainedDanglingPtrMode { kCrash,kDumpWithoutCrashing,} ; const BASE_EXPORT base::FeatureParam<UnretainedDanglingPtrMode> kUnretainedDanglingPtrModeParam ; BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocDanglingPtr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (enum class DanglingPtrMode { kCrash,kLogSignature,} ; const BASE_EXPORT base::FeatureParam<DanglingPtrMode> kDanglingPtrModeParam ; # if)",
    "insertText": "defined(PA_ALLOW_PCSCAN) BASE_EXPORT BASE_DECLARE_FEATURE(kPartitionAllocPCScan)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) BASE_EXPORT BASE_DECLARE_FEATURE(kPartitionAllocPCScanBrowserOnly)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocPCScanRendererOnly)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocBackupRefPtrControl)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocLargeThreadCacheSize)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocLargeEmptySlotSpanRing)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (# endif enum class BackupRefPtrEnabledProcesses { kBrowserOnly,kBrowserAndRenderer,kNonRenderer,kAllProcesses,} ; enum class BackupRefPtrMode { kDisabled,kEnabled,kEnabledWithoutZapping,kDisabledButSplitPartitions2Way,kDisabledButSplitPartitions3Way,} ; enum class AlternateBucketDistributionMode : uint8_t { kDefault,kCoarser,kDenser,} ; BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocBackupRefPtr)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (const BASE_EXPORT base::FeatureParam<BackupRefPtrEnabledProcesses> kBackupRefPtrEnabledProcessesParam ; const BASE_EXPORT base::FeatureParam<BackupRefPtrMode> kBackupRefPtrModeParam ; const BASE_EXPORT base::FeatureParam<bool> kBackupRefPtrAsanEnableDereferenceCheckParam ; const BASE_EXPORT base::FeatureParam<bool> kBackupRefPtrAsanEnableExtractionCheckParam ; const BASE_EXPORT base::FeatureParam<bool> kBackupRefPtrAsanEnableInstantiationCheckParam ; const BASE_EXPORT base::FeatureParam<AlternateBucketDistributionMode> kPartitionAllocAlternateBucketDistributionParam ; BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocPCScanMUAwareScheduler)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocPCScanStackScanning)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocDCScan)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocPCScanImmediateFreeing)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocPCScanEagerClearing)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocSortActiveSlotSpans)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPartitionAllocUseAlternateDistribution)"
  }
]