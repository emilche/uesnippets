[
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_IS_HEAP_UNTIL_H # define _LIBCPP___ALGORITHM_IS_HEAP_UNTIL_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__config> # include<__iterator / iterator_traits . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _Compare, class _RandomAccessIterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _RandomAccessIterator __is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_RandomAccessIterator>::difference_type difference_type ; difference_type __len = __last - __first ; difference_type __p = 0 ; difference_type __c = 1 ; _RandomAccessIterator __pp = __first ;)",
    "insertText": "while(__c < __len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_RandomAccessIterator __cp = __first + __c ;)",
    "insertText": "if(__comp(*__pp, *__cp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __c ; + + __cp ;)",
    "insertText": "if(__c == __len)"
  },
  {
    "label": "is_heap_until()",
    "kind": "Method",
    "detail": "Function (+ + __p ; + + __pp ; __c = 2* __p + 1 ; } return __last ; } template<class _RandomAccessIterator,class _Compare> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _RandomAccessIterator)",
    "insertText": "is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
  },
  {
    "label": "__is_heap_until()",
    "kind": "Method",
    "detail": "Function (typedef __comp_ref_type<_Compare>::type _Comp_ref ; return)",
    "insertText": "__is_heap_until(__first, __last, static_cast<_Comp_ref>(__comp))"
  },
  {
    "label": "is_heap_until()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _RandomAccessIterator)",
    "insertText": "is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)"
  }
]