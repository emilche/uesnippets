[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "ReturnInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnInst"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "AnalysisUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisUsage"
  },
  {
    "label": "CallGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraph"
  },
  {
    "label": "CallGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraphNode"
  },
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DxilModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilModule"
  },
  {
    "label": "DxilSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignature"
  },
  {
    "label": "DxilSignatureElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignatureElement"
  },
  {
    "label": "DxilViewIdStateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilViewIdStateData"
  },
  {
    "label": "DxilViewIdState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilViewIdState"
  },
  {
    "label": "DxilViewIdState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / HLSL / ControlDependence . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / GenericDomTree . h \" # include<bitset> # include<map> # include<memory> # include<set> # include<unordered_map> # include<unordered_set> namespace llvm { class Module ; class Function ; class BasicBlock ; class Instruction ; class ReturnInst ; class Value ; class PHINode ; class AnalysisUsage ; class CallGraph ; class CallGraphNode ; class ModulePass ; class raw_ostream ; } namespace hlsl { class DxilModule ; class DxilSignature ; class DxilSignatureElement ; struct DxilViewIdStateData { const unsigned kNumComps = 4 ; const unsigned kMaxSigScalars = 3 2* 4 ; using OutputsDependentOnViewIdType = std::bitset<kMaxSigScalars> ; using InputsContributingToOutputType = std::map<unsigned,std::set<unsigned>> ; const unsigned kNumStreams = 4 ; unsigned m_NumInputSigScalars = 0 ; unsigned m_NumOutputSigScalars [ kNumStreams ] = { 0,0,0,0 } ; unsigned m_NumPCOrPrimSigScalars = 0 ; OutputsDependentOnViewIdType m_OutputsDependentOnViewId [ kNumStreams ] ; OutputsDependentOnViewIdType m_PCOrPrimOutputsDependentOnViewId ; InputsContributingToOutputType m_InputsContributingToOutputs [ kNumStreams ] ; InputsContributingToOutputType m_InputsContributingToPCOrPrimOutputs ; InputsContributingToOutputType m_PCInputsContributingToOutputs ; bool m_bUsesViewId = false ; } ; class DxilViewIdState : public DxilViewIdStateData { const unsigned kNumComps = 4 ; const unsigned kMaxSigScalars = 3 2* 4 ; public : using OutputsDependentOnViewIdType = std::bitset<kMaxSigScalars> ; using InputsContributingToOutputType = std::map<unsigned,std::set<unsigned>> ;)",
    "insertText": "DxilViewIdState(DxilModule *pDxilModule)"
  },
  {
    "label": "getNumInputSigScalars()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumInputSigScalars()"
  },
  {
    "label": "getNumOutputSigScalars()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumOutputSigScalars(unsigned StreamId)"
  },
  {
    "label": "getNumPCSigScalars()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumPCSigScalars()"
  },
  {
    "label": "getOutputsDependentOnViewId()",
    "kind": "Method",
    "detail": "Function (const OutputsDependentOnViewIdType&)",
    "insertText": "getOutputsDependentOnViewId(unsigned StreamId)"
  },
  {
    "label": "getPCOutputsDependentOnViewId()",
    "kind": "Method",
    "detail": "Function (const OutputsDependentOnViewIdType&)",
    "insertText": "getPCOutputsDependentOnViewId()"
  },
  {
    "label": "getInputsContributingToOutputs()",
    "kind": "Method",
    "detail": "Function (const InputsContributingToOutputType&)",
    "insertText": "getInputsContributingToOutputs(unsigned StreamId)"
  },
  {
    "label": "getInputsContributingToPCOutputs()",
    "kind": "Method",
    "detail": "Function (const InputsContributingToOutputType&)",
    "insertText": "getInputsContributingToPCOutputs()"
  },
  {
    "label": "getPCInputsContributingToOutputs()",
    "kind": "Method",
    "detail": "Function (const InputsContributingToOutputType&)",
    "insertText": "getPCInputsContributingToOutputs()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize()"
  },
  {
    "label": "GetSerialized()",
    "kind": "Method",
    "detail": "Function (const std::vector<unsigned>&)",
    "insertText": "GetSerialized()"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(const unsigned *pData, unsigned DataSizeInUINTs)"
  },
  {
    "label": "PrintSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSets(llvm::raw_ostream &OS)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (private : DxilModule* m_pModule ; std::vector<unsigned> m_SerializedState ; void)",
    "insertText": "Clear()"
  },
  {
    "label": "initializeComputeViewIdStatePass()",
    "kind": "Method",
    "detail": "Function (} ; } namespace llvm { void)",
    "insertText": "initializeComputeViewIdStatePass(llvm::PassRegistry &)"
  },
  {
    "label": "createComputeViewIdStatePass()",
    "kind": "Method",
    "detail": "Function (llvm::ModulePass*)",
    "insertText": "createComputeViewIdStatePass()"
  }
]