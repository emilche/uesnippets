[
  {
    "label": "TModels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TModels"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Identity . h \" namespace UE::Core::Private { template<Concept,. . . Ts>)",
    "insertText": "char(&ModelsResolve(decltype(&Concept::template Requires<Ts...>)*))"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (template<Concept,. . . Ts>)",
    "insertText": "char(&ModelsResolve(...))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<Concept,. . . Args> bool TModels_V =)",
    "insertText": "sizeof(UE::Core::Private::ModelsResolve<Concept, Args...>(0))"
  },
  {
    "label": "Refines()",
    "kind": "Method",
    "detail": "Function (template<Concept,. . . Args> struct TModels { bool Value = TModels_V<Concept,Args . . .> ; } ; template<Concept,. . . Args> auto)",
    "insertText": "Refines() -> int(&)"
  }
]