[
  {
    "label": "ISceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutliner"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "STableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableRow"
  },
  {
    "label": "FDataLayerTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataLayerTreeItem"
  },
  {
    "label": "FDataLayerTreeItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" ISceneOutlinerTreeItem . h \" # include \" SceneOutlinerFwd . h \" # include \" SceneOutlinerStandaloneTypes . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectKey . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" class ISceneOutliner ; class SWidget ; template<ItemType> class STableRow ; struct FDataLayerTreeItem : ISceneOutlinerTreeItem { public :)",
    "insertText": "FDataLayerTreeItem(UDataLayerInstance* InDataLayerInstance)"
  },
  {
    "label": "GetDataLayer()",
    "kind": "Method",
    "detail": "Function (UDataLayerInstance*)",
    "insertText": "GetDataLayer()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (} FSceneOutlinerTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "CanInteract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteract()"
  },
  {
    "label": "GenerateLabelWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateLabelWidget(ISceneOutliner& Outliner, const STableRow<FSceneOutlinerTreeItemPtr>& InRow)"
  },
  {
    "label": "HasVisibilityInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVisibilityInfo()"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "ShouldShowVisibilityState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowVisibilityState()"
  },
  {
    "label": "ShouldBeHighlighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeHighlighted()"
  },
  {
    "label": "SetIsHighlightedIfSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsHighlightedIfSelected(bool bInIsHighlightedIfSelected)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (bIsHighlighedtIfSelected = bInIsHighlightedIfSelected ; } const FSceneOutlinerTreeItemType Type ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FFilterPredicate, const UDataLayerInstance*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FInteractivePredicate, const UDataLayerInstance*)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Filter(FFilterPredicate Pred)"
  },
  {
    "label": "GetInteractiveState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInteractiveState(FInteractivePredicate Pred)"
  }
]