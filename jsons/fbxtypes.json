[
  {
    "label": "FbxObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxObject"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_ARCH_TYPES_H_ # define _FBXSDK_CORE_ARCH_TYPES_H_ # include<fbxsdk / core / arch / fbxarch . h> # if)",
    "insertText": "defined(FBXSDK_CPU_64) && !defined(FBXSDK_ENV_WIN)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef bool FbxBool ; typedef signed char FbxChar ; typedef unsigned char FbxUChar ; typedef signed short FbxShort ; typedef unsigned short FbxUShort ; typedef signed int FbxInt ; typedef unsigned int FbxUInt ; typedef float FbxFloat ; typedef double FbxDouble ; typedef FbxBool* FbxBoolPtr ; typedef FbxChar* FbxCharPtr ; typedef FbxUChar* FbxUCharPtr ; typedef FbxShort* FbxShortPtr ; typedef FbxUShort* FbxUShortPtr ; typedef FbxInt* FbxIntPtr ; typedef FbxUInt* FbxUIntPtr ; typedef FbxFloat* FbxFloatPtr ; typedef FbxDouble* FbxDoublePtr ; typedef FbxInt FbxEnum ; typedef FbxObject* FbxReference ; # if)",
    "insertText": "defined(FBXSDK_COMPILER_MSC) #define FBXSDK_LONGLONG(x) (x##i64) #define FBXSDK_ULONGLONG(x) (x##Ui64)"
  },
  {
    "label": "FBXSDK_LONGLONG()",
    "kind": "Method",
    "detail": "Function (typedef unsigned __int8 FbxUInt8 ; typedef signed __int16 FbxInt16 ; typedef unsigned __int16 FbxUInt16 ; typedef signed __int32 FbxInt32 ; typedef unsigned __int32 FbxUInt32 ; typedef signed __int64 FbxInt64 ; typedef unsigned __int64 FbxUInt64 ; # else # define)",
    "insertText": "FBXSDK_LONGLONG(x) (x##LL) #define FBXSDK_ULONGLONG(x) (x##ULL)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned char FbxUInt8 ; typedef signed short FbxInt16 ; typedef unsigned short FbxUInt16 ; typedef signed int FbxInt32 ; typedef unsigned int FbxUInt32 ; typedef signed long long FbxInt64 ; typedef unsigned long long FbxUInt64 ; # endif # ifdef FBXSDK_SYSTEM_IS_LP64 typedef signed int FbxLong ; typedef unsigned int FbxULong ; # else typedef signed long FbxLong ; typedef unsigned long FbxULong ; # endif typedef FbxInt64 FbxLongLong ; typedef FbxUInt64 FbxULongLong ; typedef FbxLong* FbxLongPtr ; typedef FbxULong* FbxULongPtr ; typedef FbxLongLong* FbxLongLongPtr ; typedef FbxULongLong* FbxULongLongPtr ; # if)",
    "insertText": "defined(FBXSDK_ENV_EMSCRIPTEN)"
  },
  {
    "label": "FBXSDK_LONGLONG()",
    "kind": "Method",
    "detail": "Function (typedef FbxUInt32 __uint32_t ; typedef FbxInt64 __int64_t ; typedef FbxUInt64 __uint64_t ; # endif # define FBXSDK_CHAR_MIN - 1 2 8 # define FBXSDK_CHAR_MAX 1 2 7 # define FBXSDK_UCHAR_MIN 0 # define FBXSDK_UCHAR_MAX 2 5 5 # define FBXSDK_SHORT_MIN - 3 2 7 6 8 # define FBXSDK_SHORT_MAX 3 2 7 6 7 # define FBXSDK_USHORT_MIN 0 # define FBXSDK_USHORT_MAX 6 5 5 3 5 # define FBXSDK_INT_MIN 0 x80000000 # define FBXSDK_INT_MAX 0 x7fffffff # define FBXSDK_UINT_MIN 0 # define FBXSDK_UINT_MAX 0 xffffffff # define FBXSDK_LONG_MIN FBXSDK_INT_MIN # define FBXSDK_LONG_MAX FBXSDK_INT_MAX # define FBXSDK_ULONG_MIN FBXSDK_UINT_MIN # define FBXSDK_ULONG_MAX FBXSDK_UINT_MAX # define FBXSDK_LONGLONG_MIN)",
    "insertText": "FBXSDK_LONGLONG(0x8000000000000000) #define FBXSDK_LONGLONG_MAX FBXSDK_LONGLONG(0x7fffffffffffffff) #define FBXSDK_ULONGLONG_MIN FBXSDK_ULONGLONG(0) #define FBXSDK_ULONGLONG_MAX FBXSDK_ULONGLONG(0xffffffffffffffff) #define FBXSDK_FLOAT_MIN FLT_MIN #define FBXSDK_FLOAT_MAX FLT_MAX #define FBXSDK_FLOAT_EPSILON FLT_EPSILON #define FBXSDK_DOUBLE_MIN DBL_MIN #define FBXSDK_DOUBLE_MAX DBL_MAX #define FBXSDK_DOUBLE_EPSILON DBL_EPSILON #define FBXSDK_TOLERANCE (1.0e-6) #if defined(FBXSDK_CPU_32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# define FBXSDK_REF_MIN FBXSDK_UINT_MIN # define FBXSDK_REF_MAX FBXSDK_UINT_MAX typedef FbxLong FbxAtomic ; # define FBXSDK_ATOMIC_MIN FBXSDK_LONG_MIN # define FBXSDK_ATOMIC_MAX FBXSDK_LONG_MAX # elif)",
    "insertText": "defined(FBXSDK_CPU_64)"
  },
  {
    "label": "FbxMin()",
    "kind": "Method",
    "detail": "Function (# define FBXSDK_REF_MIN FBXSDK_ULONGLONG_MIN # define FBXSDK_REF_MAX FBXSDK_ULONGLONG_MAX typedef FbxInt64 FbxAtomic ; # define FBXSDK_ATOMIC_MIN FBXSDK_LONGLONG_MIN # define FBXSDK_ATOMIC_MAX FBXSDK_LONGLONG_MAX # else # error Unsupported architecture ! # endif FbxChar)",
    "insertText": "FbxMin(const FbxChar)"
  },
  {
    "label": "FbxMax()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> T)",
    "insertText": "FbxMax(const T)"
  },
  {
    "label": "FbxMin()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> T)",
    "insertText": "FbxMin(const T x, const T y)"
  },
  {
    "label": "FbxMax()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "FbxMax(const T x, const T y)"
  },
  {
    "label": "FbxVectorTemplate2()",
    "kind": "Method",
    "detail": "Function (} template<class T> class FBXSDK_DLL FbxVectorTemplate2 { public :)",
    "insertText": "FbxVectorTemplate2()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "T(0)"
  },
  {
    "label": "FbxVectorTemplate2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxVectorTemplate2(T pValue)"
  },
  {
    "label": "FbxVectorTemplate2()",
    "kind": "Method",
    "detail": "Function (* this = pValue ; })",
    "insertText": "FbxVectorTemplate2(T pData0, T pData1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator(int pIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mData [ 0 ] = pValue ; mData [ 1 ] = pValue ; return* this ; } FbxVectorTemplate2<T>&)",
    "insertText": "operator(const FbxVectorTemplate2<T>& pVector)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "Buffer()"
  },
  {
    "label": "FbxVectorTemplate3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxVectorTemplate3(T pValue)"
  },
  {
    "label": "FbxVectorTemplate3()",
    "kind": "Method",
    "detail": "Function (* this = pValue ; })",
    "insertText": "FbxVectorTemplate3(T pData0, T pData1, T pData2)"
  },
  {
    "label": "FbxVectorTemplate3()",
    "kind": "Method",
    "detail": "Function (mData [ 0 ] = pData0 ; mData [ 1 ] = pData1 ; mData [ 2 ] = pData2 ; } ~)",
    "insertText": "FbxVectorTemplate3()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FbxVectorTemplate3<T>&)",
    "insertText": "operator(T const &pValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mData [ 0 ] = pVector . mData [ 0 ] ; mData [ 1 ] = pVector . mData [ 1 ] ; return* this ; } FbxVectorTemplate3<T>&)",
    "insertText": "operator(const FbxVectorTemplate3<T>& pVector)"
  },
  {
    "label": "FbxVectorTemplate4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxVectorTemplate4(T pValue)"
  },
  {
    "label": "FbxVectorTemplate4()",
    "kind": "Method",
    "detail": "Function (* this = pValue ; })",
    "insertText": "FbxVectorTemplate4(T pData0, T pData1, T pData2, T pData3)"
  },
  {
    "label": "FbxVectorTemplate4()",
    "kind": "Method",
    "detail": "Function (mData [ 0 ] = pData0 ; mData [ 1 ] = pData1 ; mData [ 2 ] = pData2 ; mData [ 3 ] = pData3 ; } ~)",
    "insertText": "FbxVectorTemplate4()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FbxVectorTemplate4<T>&)",
    "insertText": "operator(const T& pValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mData [ 0 ] = pValue ; mData [ 1 ] = pValue ; mData [ 2 ] = pValue ; mData [ 3 ] = pValue ; return* this ; } FbxVectorTemplate4<T>&)",
    "insertText": "operator(const FbxVectorTemplate3<T>& pValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mData [ 0 ] = pValue [ 0 ] ; mData [ 1 ] = pValue [ 1 ] ; mData [ 2 ] = pValue [ 2 ] ; return* this ; } FbxVectorTemplate4<T>&)",
    "insertText": "operator(const FbxVectorTemplate4<T>& pVector)"
  }
]