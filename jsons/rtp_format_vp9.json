[
  {
    "label": "RtpPacketizerVp9",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketizerVp9"
  },
  {
    "label": "RtpPacketizerVp9()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP9_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP9_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" api / array_view . h \" # include \" modules / rtp_rtcp / source / rtp_format . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" modules / video_coding / codecs / vp9 / include / vp9_globals . h \" namespace webrtc { class RtpPacketizerVp9 : public RtpPacketizer { public :)",
    "insertText": "RtpPacketizerVp9(rtc::ArrayView<const uint8_t> payload, PayloadSizeLimits limits, const RTPVideoHeaderVP9& hdr)"
  },
  {
    "label": "RtpPacketizerVp9()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpPacketizerVp9()"
  },
  {
    "label": "RtpPacketizerVp9()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketizerVp9(const RtpPacketizerVp9&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketizerVp9&)",
    "insertText": "operator(const RtpPacketizerVp9&)"
  },
  {
    "label": "NumPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumPackets()"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextPacket(RtpPacketToSend* packet)"
  },
  {
    "label": "WriteHeader()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "WriteHeader(bool layer_begin, bool layer_end, rtc::ArrayView<uint8_t> rtp_payload)"
  }
]