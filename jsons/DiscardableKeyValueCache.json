[
  {
    "label": "KeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyType"
  },
  {
    "label": "ValueType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueType"
  },
  {
    "label": "TDiscardableKeyValueCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDiscardableKeyValueCache"
  },
  {
    "label": "LockFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LockFlags"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" template<class KeyType,class ValueType> class TDiscardableKeyValueCache { public : struct LockFlags { enum Flags {)",
    "insertText": "ReadLock(1 << 0), WriteLock = (1 << 1), WriteLockOnAddFail = (1 << 2)"
  },
  {
    "label": "TDiscardableKeyValueCache()",
    "kind": "Method",
    "detail": "Function (} ; typedef TMap<KeyType,ValueType> TypedMap ;)",
    "insertText": "TDiscardableKeyValueCache() : CurrentMap(&Map1) , BackfillMap(&Map2)"
  },
  {
    "label": "RWLock()",
    "kind": "Method",
    "detail": "Function (} FRWLock&)",
    "insertText": "RWLock()"
  },
  {
    "label": "ApplyLock()",
    "kind": "Method",
    "detail": "Function (uint32 LockFlags =)",
    "insertText": "ApplyLock(0, LockFlags::ReadLock)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Count = Map1 .)",
    "insertText": "Num() + Map2.Num()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(LockFlags)"
  },
  {
    "label": "InternalFindWhileLocked()",
    "kind": "Method",
    "detail": "Function (bool Found =)",
    "insertText": "InternalFindWhileLocked(Key, OutType, LockFlags, LockFlags)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Add(const KeyType& Key, const ValueType& Value)"
  },
  {
    "label": "ApplyLock()",
    "kind": "Method",
    "detail": "Function (uint32 LockFlags =)",
    "insertText": "ApplyLock(0, LockFlags::WriteLock)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool Success =)",
    "insertText": "Add(Key, Value, LockFlags)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (bool Success = true ;)",
    "insertText": "checkf((LockFlags & LockFlags::WriteLock) != 0, TEXT(\"Cache is not locked for write during Add!\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CurrentMap ->)",
    "insertText": "Add(Key, Value)"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (} else { Success = false ; } return Success ; } int32)",
    "insertText": "Discard()"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (int32 Discarded =)",
    "insertText": "Discard(LockFlags, LockFlags, [](ValueType& Type) {})"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (int32 Discarded =)",
    "insertText": "Discard(LockFlags, LockFlags, Func)"
  },
  {
    "label": "ApplyLock()",
    "kind": "Method",
    "detail": "Function (InCurrentLockFlags =)",
    "insertText": "ApplyLock(InCurrentLockFlags, LockFlags::WriteLock)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto& KV : *BackfillMap)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(KV.Value)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32 Discarded = BackfillMap ->)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (BackfillMap ->)",
    "insertText": "Empty()"
  },
  {
    "label": "ApplyLock()",
    "kind": "Method",
    "detail": "Function (CurrentMap =& Map2 ; BackfillMap =& Map1 ; } else { CurrentMap =& Map1 ; BackfillMap =& Map2 ; } OutNewLockFlags = InCurrentLockFlags ; return Discarded ; } public : uint32)",
    "insertText": "ApplyLock(uint32 CurrentFlags, uint32 NewFlags)"
  },
  {
    "label": "IsLockedForRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLockedForRead(CurrentFlags & LockFlags::ReadLock)"
  },
  {
    "label": "IsLockedForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLockedForWrite(CurrentFlags & LockFlags::WriteLock)"
  },
  {
    "label": "WantLockForRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantLockForRead(NewFlags & LockFlags::ReadLock)"
  },
  {
    "label": "WantLockForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantLockForWrite(NewFlags & LockFlags::WriteLock)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (LockObject .)",
    "insertText": "WriteLock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(WantLockForRead)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (LockObject .)",
    "insertText": "ReadLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} return NewFlags ; } void)",
    "insertText": "Unlock(uint32 Flags)"
  },
  {
    "label": "LockedForRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LockedForRead(Flags & LockFlags::ReadLock)"
  },
  {
    "label": "LockedForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LockedForWrite(Flags & LockFlags::WriteLock)"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (LockObject .)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LockedForRead)"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (LockObject .)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "InternalFindWhileLocked()",
    "kind": "Method",
    "detail": "Function (} } protected : bool)",
    "insertText": "InternalFindWhileLocked(const KeyType& Key, ValueType& OutType, uint32 InCurrentLockFlags, uint32& OutFlags)"
  },
  {
    "label": "LockedForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LockedForWrite(InCurrentLockFlags & LockFlags::WriteLock)"
  },
  {
    "label": "LeaveWriteLockOnFailure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LeaveWriteLockOnFailure(InCurrentLockFlags & LockFlags::WriteLockOnAddFail)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentFlags = InCurrentLockFlags ;)",
    "insertText": "checkf((CurrentFlags & LockFlags::ReadLock) != 0 || (CurrentFlags & LockFlags::WriteLock) != 0, TEXT(\"Cache is not locked for read or write during Find!\"))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (ValueType* Found = CurrentMap ->)",
    "insertText": "Find(Key)"
  },
  {
    "label": "NeedWriteLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedWriteLock(BackfillFound || LeaveWriteLockOnFailure)"
  },
  {
    "label": "ApplyLock()",
    "kind": "Method",
    "detail": "Function (CurrentFlags =)",
    "insertText": "ApplyLock(CurrentFlags, CurrentFlags | LockFlags::WriteLock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!Found && BackfillFound)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Found =& CurrentMap ->)",
    "insertText": "Add(Key, *BackfillFound)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (BackfillMap ->)",
    "insertText": "Remove(Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Found)"
  }
]