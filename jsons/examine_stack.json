[
  {
    "label": "OutputWriter()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_DEBUGGING_INTERNAL_EXAMINE_STACK_H_ # define ABSL_DEBUGGING_INTERNAL_EXAMINE_STACK_H_ # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace debugging_internal { typedef void)",
    "insertText": "OutputWriter(const char*, void*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*SymbolizeUrlEmitter)(void* const stack[], int depth, OutputWriter* writer, void* writer_arg)"
  },
  {
    "label": "RegisterDebugStackTraceHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDebugStackTraceHook(SymbolizeUrlEmitter hook)"
  },
  {
    "label": "GetDebugStackTraceHook()",
    "kind": "Method",
    "detail": "Function (SymbolizeUrlEmitter)",
    "insertText": "GetDebugStackTraceHook()"
  },
  {
    "label": "GetProgramCounter()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetProgramCounter(void* const vuc)"
  },
  {
    "label": "DumpPCAndFrameSizesAndStackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpPCAndFrameSizesAndStackTrace(void* const pc, void* const stack[], int frame_sizes[], int depth, int min_dropped_frames, bool symbolize_stacktrace, OutputWriter* writer, void* writer_arg)"
  },
  {
    "label": "DumpStackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStackTrace(int min_dropped_frames, int max_num_frames, bool symbolize_stacktrace, OutputWriter* writer, void* writer_arg)"
  }
]