[
  {
    "label": "FBoneWeight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneWeight"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBoneWeightsSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneWeightsSettings"
  },
  {
    "label": "FBoneWeightNullAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneWeightNullAdapter"
  },
  {
    "label": "Empty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Empty"
  },
  {
    "label": "TBoneWeights",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBoneWeights"
  },
  {
    "label": "FBoneWeights",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneWeights"
  },
  {
    "label": "TArrayAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TArrayAdapter"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / IsSorted . h \" # include \" AnimationCore . h \" # include \" BoneIndices . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" GPUSkinPublicDefs . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include<limits> # include<type_traits> namespace UE { namespace AnimationCore { int32 MaxInlineBoneWeightCount = MAX_TOTAL_INFLUENCES ; uint16 MaxRawBoneWeight = std::numeric_limits<uint16)",
    "insertText": "max()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float MaxRawBoneWeightFloat = static_cast<)",
    "insertText": "float(std::numeric_limits<uint16>::max())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (float InvMaxRawBoneWeightFloat = 1 . 0 f / MaxRawBoneWeightFloat ; float BoneWeightThreshold = InvMaxRawBoneWeightFloat ; class FBoneWeight { public : bool)",
    "insertText": "operator(const FBoneWeight& InBoneWeight)"
  },
  {
    "label": "DescSortByWeightPredicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DescSortByWeightPredicate(const FBoneWeight& A, const FBoneWeight& B)"
  },
  {
    "label": "FBoneWeight()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoneWeight()"
  },
  {
    "label": "FBoneWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoneWeight(FBoneIndexType InBoneIndex, uint8 InWeight) : BoneIndex(InBoneIndex)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (RawWeight =)",
    "insertText": "uint16((InWeight << 8) | InWeight)"
  },
  {
    "label": "FBoneWeight()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoneWeight(FBoneIndexType InBoneIndex, uint16 InRawWeight) : BoneIndex(InBoneIndex), RawWeight(InRawWeight)"
  },
  {
    "label": "FBoneWeight()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoneWeight(FBoneIndexType InBoneIndex, float InWeight) : BoneIndex(InBoneIndex)"
  },
  {
    "label": "SetWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWeight(InWeight)"
  },
  {
    "label": "SetBoneIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBoneIndex(FBoneIndexType InBoneIndex)"
  },
  {
    "label": "GetBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneIndex = InBoneIndex ; } FBoneIndexType)",
    "insertText": "GetBoneIndex()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (InWeight =)",
    "insertText": "Clamp(InWeight, 0.0f, 1.0f)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (RawWeight = static_cast<)",
    "insertText": "uint16(InWeight * static_cast<float>(GetMaxRawWeight()) + 0.5f)"
  },
  {
    "label": "GetWeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetWeight()"
  },
  {
    "label": "SetRawWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRawWeight(const uint16 InRawWeight)"
  },
  {
    "label": "GetRawWeight()",
    "kind": "Method",
    "detail": "Function (RawWeight = InRawWeight ; } uint16)",
    "insertText": "GetRawWeight()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (InArchive<<BoneIndex ; InArchive<<RawWeight ; } uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ToInt32()"
  },
  {
    "label": "FromInt32()",
    "kind": "Method",
    "detail": "Function (} FBoneWeight)",
    "insertText": "FromInt32(int32 InBoneWeight)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (FBoneWeight BW ; BW . RawWeight = static_cast<)",
    "insertText": "uint16(static_cast<uint32>(InBoneWeight) & 0xFFFFU)"
  },
  {
    "label": "FBoneIndexType()",
    "kind": "Method",
    "detail": "Function (BW . BoneIndex = static_cast<)",
    "insertText": "FBoneIndexType(static_cast<uint32>(InBoneWeight) >> 16)"
  },
  {
    "label": "FBoneWeightsSettings()",
    "kind": "Method",
    "detail": "Function (enum class EBoneWeightNormalizeType { None,AboveOne,Always } ; class FBoneWeightsSettings { public :)",
    "insertText": "FBoneWeightsSettings()"
  },
  {
    "label": "SetNormalizeType()",
    "kind": "Method",
    "detail": "Function (FBoneWeightsSettings&)",
    "insertText": "SetNormalizeType(EBoneWeightNormalizeType InNormalizeType)"
  },
  {
    "label": "GetNormalizeType()",
    "kind": "Method",
    "detail": "Function (NormalizeType = InNormalizeType ; return* this ; } EBoneWeightNormalizeType)",
    "insertText": "GetNormalizeType()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxWeightCount =)",
    "insertText": "Max(1, InMaxWeightCount)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (InWeightThreshold =)",
    "insertText": "Clamp(InWeightThreshold, 0.0f, 1.0f)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (WeightThreshold = static_cast<)",
    "insertText": "uint16(InWeightThreshold * FBoneWeight::GetMaxRawWeight() + 0.5f)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (WeightThreshold =)",
    "insertText": "Max(WeightThreshold, static_cast<uint16>(1))"
  },
  {
    "label": "GetRawWeightThreshold()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetRawWeightThreshold()"
  },
  {
    "label": "GetDefaultBoneIndex()",
    "kind": "Method",
    "detail": "Function (DefaultBoneIndex = InBoneIndex ; bHasDefaultBoneIndex = true ; } FBoneIndexType)",
    "insertText": "GetDefaultBoneIndex()"
  },
  {
    "label": "HasDefaultBoneIndex()",
    "kind": "Method",
    "detail": "Function (bHasDefaultBoneIndex = false ; } bool)",
    "insertText": "HasDefaultBoneIndex()"
  },
  {
    "label": "GetBlendZeroInfluence()",
    "kind": "Method",
    "detail": "Function (bBlendZeroInfluence = bInBlendZeroInfluence ; } bool)",
    "insertText": "GetBlendZeroInfluence()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (bool bHasDefaultBoneIndex = false ; bool bBlendZeroInfluence = true ; } ; struct FBoneWeightNullAdapter { struct Empty { } ; using ContainerType = Empty ; void)",
    "insertText": "SetNum(ContainerType& InContainer, int32 InNum)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num(const ContainerType& InContainer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(ContainerType& InContainer, FBoneWeight InBoneWeight)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(ContainerType& InContainer, int32 InIndex)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> void)",
    "insertText": "Sort(ContainerType& InContainer, Predicate InPredicate)"
  },
  {
    "label": "IndexOf()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> int32)",
    "insertText": "IndexOf(const ContainerType& InContainer, Predicate InPredicate)"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (} template<OtherContainerAdapter,CT = ContainerType> std::enable_if<! std::is_const<CT>::value,void>::type)",
    "insertText": "SetBoneWeights(const TBoneWeights<OtherContainerAdapter> &InBoneWeights, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (template<CT = ContainerType> std::enable_if<! std::is_const<CT>::value,void>::type)",
    "insertText": "SetBoneWeights(TArrayView<const FBoneWeight> BoneWeights, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (template<CT = ContainerType> std::enable_if<! std::is_const<CT>::value,void>::type)",
    "insertText": "SetBoneWeights(const FBoneIndexType* InBones, const float* InInfluences, int32 NumEntries, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (template<CT = ContainerType> std::enable_if<! std::is_const<CT>::value,void>::type)",
    "insertText": "SetBoneWeights(const FBoneIndexType InBones[MaxInlineBoneWeightCount], const uint16 InInfluences[MaxInlineBoneWeightCount], const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "AddBoneWeight()",
    "kind": "Method",
    "detail": "Function (template<CT = ContainerType> std::enable_if<! std::is_const<CT>::value,bool>::type)",
    "insertText": "AddBoneWeight(FBoneWeight InBoneWeight, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "RemoveBoneWeight()",
    "kind": "Method",
    "detail": "Function (template<CT = ContainerType> std::enable_if<! std::is_const<CT>::value,bool>::type)",
    "insertText": "RemoveBoneWeight(FBoneIndexType InBoneIndex, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "Renormalize()",
    "kind": "Method",
    "detail": "Function (template<CT = ContainerType> std::enable_if<! std::is_const<CT>::value,void>::type)",
    "insertText": "Renormalize(const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (template<ContainerTypeA,ContainerTypeB,CT = ContainerType> std::enable_if<! std::is_const<CT>::value,void>::type)",
    "insertText": "Blend(const TBoneWeights<ContainerTypeA>& InBoneWeightsA, const TBoneWeights<ContainerTypeB>& InBoneWeightsB, float InBias, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FBoneWeight)",
    "insertText": "Get(int32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FBoneWeight)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "FindWeightIndexByBone()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindWeightIndexByBone(FBoneIndexType InBoneIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash)",
    "insertText": "GetTypeHash(Num())"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, Get(Index).GetTypeHash())"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Result(TEXT(\"[\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "Get(0).ToString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "TEXT(\", \")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "Get(Index).ToString()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } Result .)",
    "insertText": "Append(TEXT(\"]\"))"
  },
  {
    "label": "SortWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortWeights()"
  },
  {
    "label": "CullWeights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CullWeights(const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "NormalizeWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeWeights(EBoneWeightNormalizeType InNormalizeType)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "SetNumUninitialized(InNum, EAllowShrinking::No)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FBoneWeight)",
    "insertText": "Get(const ContainerType& InContainer, int32 InIndex)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(ContainerType& InContainer, int32 InIndex, FBoneWeight InBoneWeight)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "GetData()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "Add(InBoneWeight)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "RemoveAt(InIndex)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "Sort(InPredicate)"
  },
  {
    "label": "FBoneWeights()",
    "kind": "Method",
    "detail": "Function (} } ; using FArrayWrapper = TBoneWeights<TArrayAdapter<BoneWeightArrayT>> ; public :)",
    "insertText": "FBoneWeights()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FBoneWeights& InBoneWeight)"
  },
  {
    "label": "SetBoneWeight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBoneWeight(FBoneIndexType InBone, float InWeight, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "RemoveBoneWeight()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveBoneWeight(FBoneIndexType InBone, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FBoneWeights)",
    "insertText": "Create(const FBoneIndexType InBones[MaxInlineBoneWeightCount], const uint16 InWeights[MaxInlineBoneWeightCount], const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FBoneWeights)",
    "insertText": "Create(const FBoneIndexType* InBones, const float* InWeights, int32 NumEntries, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FBoneWeights)",
    "insertText": "Create(TArrayView<const FBoneWeight> BoneWeights, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (template<OtherContainerAdapter> FBoneWeights)",
    "insertText": "Create(TBoneWeights<OtherContainerAdapter> InBoneWeights, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (FBoneWeights Result ; FArrayWrapper)",
    "insertText": "W(Result.BoneWeights)"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (W .)",
    "insertText": "SetBoneWeights(InBoneWeights, InSettings)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (FBoneWeights)",
    "insertText": "Blend(const FBoneWeights& InA, const FBoneWeights& InB, const FBoneWeights& InC, float InBaryX, float InBaryY, float InBaryZ, const FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (using RangedForConstIteratorType = BoneWeightArrayT::RangedForConstIteratorType ; RangedForConstIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} RangedForConstIteratorType)",
    "insertText": "end()"
  },
  {
    "label": "ToArrayView()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FBoneWeight>)",
    "insertText": "ToArrayView()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& InArchive)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash)",
    "insertText": "GetTypeHash(BoneWeights.Num())"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, BoneWeight.GetTypeHash())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Append(FString::JoinBy(BoneWeights, TEXT(\", \"), [](const FBoneWeight& V) { return V.ToString(); }))"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (BoneWeightArrayT BoneWeights ; } ; template<ContainerAdapter> template<OtherContainerAdapter,CT> std::enable_if<! std::is_const<CT>::value,void>::type TBoneWeights<ContainerAdapter)",
    "insertText": "SetBoneWeights(const TBoneWeights<OtherContainerAdapter>& InBoneWeights, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FBoneWeight,TInlineAllocator<MaxInlineBoneWeightCount>> StackBoneWeights ; StackBoneWeights .)",
    "insertText": "Reserve(InBoneWeights.Num())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FBoneWeight BW = InBoneWeights .)",
    "insertText": "Get(Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StackBoneWeights .)",
    "insertText": "Add(BW)"
  },
  {
    "label": "SetBoneWeightsInternal()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "SetBoneWeightsInternal(StackBoneWeights, InSettings)"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (} template<ContainerAdapter> template<CT> std::enable_if<! std::is_const<CT>::value,void>::type TBoneWeights<ContainerAdapter)",
    "insertText": "SetBoneWeights(TArrayView<const FBoneWeight> InBoneWeights, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (} template<ContainerAdapter> template<CT> std::enable_if<! std::is_const<CT>::value,void>::type TBoneWeights<ContainerAdapter)",
    "insertText": "SetBoneWeights(const FBoneIndexType* InBones, const float* InInfluences, int32 NumEntries, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FBoneWeight,TInlineAllocator<MaxInlineBoneWeightCount>> StackBoneWeights ; StackBoneWeights .)",
    "insertText": "Reserve(NumEntries)"
  },
  {
    "label": "BW()",
    "kind": "Method",
    "detail": "Function (FBoneWeight)",
    "insertText": "BW(InBones[Index], InInfluences[Index])"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (} template<ContainerAdapter> template<CT> std::enable_if<! std::is_const<CT>::value,void>::type TBoneWeights<ContainerAdapter)",
    "insertText": "SetBoneWeights(const FBoneIndexType InBones[MaxInlineBoneWeightCount], const uint16 InInfluences[MaxInlineBoneWeightCount], const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumWeights = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < MaxInlineBoneWeightCount && InInfluences[Index]; Index++)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (NumWeights + + ; } })",
    "insertText": "SetNum(Container, NumWeights)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Container, WeightIndex++, BW)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNum(Container, InSettings.GetMaxWeightCount())"
  },
  {
    "label": "NormalizeWeights()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NormalizeWeights(InSettings.GetNormalizeType())"
  },
  {
    "label": "SetBoneWeightsInternal()",
    "kind": "Method",
    "detail": "Function (} template<ContainerAdapter> void TBoneWeights<ContainerAdapter)",
    "insertText": "SetBoneWeightsInternal(TArrayView<FBoneWeight> BoneWeights, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (BoneWeights .)",
    "insertText": "Sort(FBoneWeight::DescSortByWeightPredicate)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 NumEntries =)",
    "insertText": "Min(BoneWeights.Num(), InSettings.GetMaxWeightCount())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNum(Container, 1)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Container, 0, FBoneWeight(InSettings.GetDefaultBoneIndex(), FBoneWeight::GetMaxRawWeight()))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Container, Index, BoneWeights[Index])"
  },
  {
    "label": "AddBoneWeight()",
    "kind": "Method",
    "detail": "Function (} template<ContainerAdapter> template<CT> std::enable_if<! std::is_const<CT>::value,bool>::type TBoneWeights<ContainerAdapter)",
    "insertText": "AddBoneWeight(FBoneWeight InBoneWeight, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "FindWeightIndexByBone()",
    "kind": "Method",
    "detail": "Function (int32 WeightIndex =)",
    "insertText": "FindWeightIndexByBone(InBoneWeight.GetBoneIndex())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bMayNeedNormalization ;)",
    "insertText": "if(WeightIndex != INDEX_NONE)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FBoneWeight ExistingBoneWeight =)",
    "insertText": "Get(Container, WeightIndex)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Container, WeightIndex)"
  },
  {
    "label": "NormalizeWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeWeights(EBoneWeightNormalizeType::Always)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "if(ExistingBoneWeight.GetRawWeight() == InBoneWeight.GetRawWeight())"
  },
  {
    "label": "SetRawWeight()",
    "kind": "Method",
    "detail": "Function (ExistingBoneWeight .)",
    "insertText": "SetRawWeight(InBoneWeight.GetRawWeight())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Container, WeightIndex, ExistingBoneWeight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(InBoneWeight.GetRawWeight() < InSettings.GetRawWeightThreshold())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Add(Container, InBoneWeight)"
  },
  {
    "label": "Renormalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Renormalize(InSettings)"
  },
  {
    "label": "RemoveBoneWeight()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<ContainerAdapter> template<CT> std::enable_if<! std::is_const<CT>::value,bool>::type TBoneWeights<ContainerAdapter)",
    "insertText": "RemoveBoneWeight(FBoneIndexType InBoneIndex, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "FindWeightIndexByBone()",
    "kind": "Method",
    "detail": "Function (int32 WeightIndex =)",
    "insertText": "FindWeightIndexByBone(InBoneIndex)"
  },
  {
    "label": "CullWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullWeights(InSettings)"
  },
  {
    "label": "Renormalize()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<ContainerAdapter> template<CT> std::enable_if<! std::is_const<CT>::value,void>::type TBoneWeights<ContainerAdapter)",
    "insertText": "Renormalize(const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (} } template<ContainerAdapter> template<ContainerAdapterA,ContainerAdapterB,CT> std::enable_if<! std::is_const<CT>::value,void>::type TBoneWeights<ContainerAdapter)",
    "insertText": "Blend(const TBoneWeights<ContainerAdapterA>& InBoneWeightsA, const TBoneWeights<ContainerAdapterB>& InBoneWeightsB, const float InBias, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Container, 0, FBoneWeight{InSettings.GetDefaultBoneIndex(), FBoneWeight::GetMaxRawWeight()})"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetNum(Container, 0)"
  },
  {
    "label": "CreateIndirectIndex()",
    "kind": "Method",
    "detail": "Function (} return ; } auto)",
    "insertText": "CreateIndirectIndex(const auto &InBoneWeights, TArrayView<int32> InIndexIndirect)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (InIndexIndirect [ Index ] = Index ; } InIndexIndirect .)",
    "insertText": "Sort([InBoneWeights](int32 A, int32 B) { return InBoneWeights[A].GetBoneIndex() < InBoneWeights[B].GetBoneIndex(); })"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} ; TArray<int32,TInlineAllocator<MaxInlineBoneWeightCount>> IndirectIndexA ; IndirectIndexA .)",
    "insertText": "SetNumUninitialized(InBoneWeightsA.Num())"
  },
  {
    "label": "CreateIndirectIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateIndirectIndex(InBoneWeightsA, IndirectIndexA)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<int32,TInlineAllocator<MaxInlineBoneWeightCount>> IndirectIndexB ; IndirectIndexB .)",
    "insertText": "SetNumUninitialized(InBoneWeightsB.Num())"
  },
  {
    "label": "CreateIndirectIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateIndirectIndex(InBoneWeightsB, IndirectIndexB)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FBoneWeight,TInlineAllocator<MaxInlineBoneWeightCount* 2>> BoneWeights ; BoneWeights .)",
    "insertText": "Reserve(InBoneWeightsA.Num() + InBoneWeightsB.Num())"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 RawBiasB = static_cast<)",
    "insertText": "int32(InBias * static_cast<float>(FBoneWeight::GetMaxRawWeight()))"
  },
  {
    "label": "GetMaxRawWeight()",
    "kind": "Method",
    "detail": "Function (const int32 RawBiasA =)",
    "insertText": "GetMaxRawWeight()"
  },
  {
    "label": "BoneWeights()",
    "kind": "Method",
    "detail": "Function (auto BlendWithZeroInfluenceBone = [& InSettings,&)",
    "insertText": "BoneWeights(const FBoneWeight& BW, const int32 RawBias)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16 RawWeight =)",
    "insertText": "uint16((int32)BW.GetRawWeight() * RawBias / FBoneWeight::GetMaxRawWeight())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (BoneWeights .)",
    "insertText": "Emplace(BW.GetBoneIndex(), RawWeight)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } ; int32 IndexA = 0,IndexB = 0 ;)",
    "insertText": "for(; IndexA < InBoneWeightsA.Num() && IndexB < InBoneWeightsB.Num();)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FBoneWeight& BWA = InBoneWeightsA [ IndirectIndexA [ IndexA ] ] ; const FBoneWeight& BWB = InBoneWeightsB [ IndirectIndexB [ IndexB ] ] ;)",
    "insertText": "if(BWA.GetBoneIndex() == BWB.GetBoneIndex())"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16 RawWeight =)",
    "insertText": "uint16(((int32)BWA.GetRawWeight() * RawBiasA + (int32)BWB.GetRawWeight() * RawBiasB) / FBoneWeight::GetMaxRawWeight())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (BoneWeights .)",
    "insertText": "Emplace(BWA.GetBoneIndex(), RawWeight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IndexA + + ; IndexB + + ; } else)",
    "insertText": "if(BWA.GetBoneIndex() < BWB.GetBoneIndex())"
  },
  {
    "label": "BlendWithZeroInfluenceBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendWithZeroInfluenceBone(BWA, RawBiasA)"
  },
  {
    "label": "BlendWithZeroInfluenceBone()",
    "kind": "Method",
    "detail": "Function (IndexA + + ; } else {)",
    "insertText": "BlendWithZeroInfluenceBone(BWB, RawBiasB)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IndexB + + ; } })",
    "insertText": "for(; IndexA < InBoneWeightsA.Num(); IndexA++)"
  },
  {
    "label": "BlendWithZeroInfluenceBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendWithZeroInfluenceBone(InBoneWeightsA[IndirectIndexA[IndexA]], RawBiasA)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; IndexB < InBoneWeightsB.Num(); IndexB++)"
  },
  {
    "label": "BlendWithZeroInfluenceBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendWithZeroInfluenceBone(InBoneWeightsB[IndirectIndexB[IndexB]], RawBiasB)"
  },
  {
    "label": "SetBoneWeightsInternal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetBoneWeightsInternal(BoneWeights, InSettings)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Container, FBoneWeight::DescSortByWeightPredicate)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (bool bCulled = false ; int32 NumWeights =)",
    "insertText": "Num(Container)"
  },
  {
    "label": "GetMaxWeightCount()",
    "kind": "Method",
    "detail": "Function (NumWeights = InSettings .)",
    "insertText": "GetMaxWeightCount()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bCulled = true ; })",
    "insertText": "while(NumWeights > 0 && ContainerAdapter::Get(Container, NumWeights - 1).GetRawWeight() < InSettings.GetRawWeightThreshold())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNum(Container, --NumWeights)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FBoneWeight BoneWeight =)",
    "insertText": "Get(Container, 0)"
  },
  {
    "label": "SetRawWeight()",
    "kind": "Method",
    "detail": "Function (BoneWeight .)",
    "insertText": "SetRawWeight(FBoneWeight::GetMaxRawWeight())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Container, 0, BoneWeight)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} return ; } int64 WeightSum = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < NumWeights; Index++)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (WeightSum + =)",
    "insertText": "Get(Container, Index).GetRawWeight()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((InNormalizeType == EBoneWeightNormalizeType::Always && ensure(WeightSum != 0)) || WeightSum > FBoneWeight::GetMaxRawWeight())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FBoneWeight BW =)",
    "insertText": "Get(Container, Index)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 ScaledWeight = static_cast<)",
    "insertText": "int64(BW.GetRawWeight()) * FBoneWeight::GetMaxRawWeight()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (const uint16 NewWeight = static_cast<)",
    "insertText": "uint16(FMath::Min(ScaledWeight / WeightSum, static_cast<int64>(FBoneWeight::GetMaxRawWeight())))"
  },
  {
    "label": "SetRawWeight()",
    "kind": "Method",
    "detail": "Function (BW .)",
    "insertText": "SetRawWeight(NewWeight)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Container, Index, BW)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bNeedResort = true ; } LastWeight = NewWeight ; })",
    "insertText": "if(bNeedResort)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} float LastWeight =)",
    "insertText": "Get(0).GetWeight()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const float Weight =)",
    "insertText": "Get(Index).GetWeight()"
  },
  {
    "label": "SetBoneWeight()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "SetBoneWeight(FBoneWeight InBoneWeight, const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (FArrayWrapper)",
    "insertText": "W(BoneWeights)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FBoneWeights)",
    "insertText": "Create(const FBoneIndexType InBones[MaxInlineBoneWeightCount], const uint16 InInfluences[MaxInlineBoneWeightCount], const FBoneWeightsSettings& InSettings)"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (W .)",
    "insertText": "SetBoneWeights(InBones, InInfluences, InSettings)"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (W .)",
    "insertText": "SetBoneWeights(InBones, InInfluences, NumEntries, InSettings)"
  },
  {
    "label": "FArrayWrapper()",
    "kind": "Method",
    "detail": "Function (FBoneWeights Result ;)",
    "insertText": "FArrayWrapper(Result.BoneWeights).SetBoneWeights(InBoneWeights, InSettings)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (FArrayWrapper)",
    "insertText": "A(const_cast<FBoneWeights&>(InA).BoneWeights)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (FArrayWrapper)",
    "insertText": "B(const_cast<FBoneWeights&>(InB).BoneWeights)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (W .)",
    "insertText": "Blend(A, B, InBias, InSettings)"
  },
  {
    "label": "InBaryZ()",
    "kind": "Method",
    "detail": "Function (const float BCW =)",
    "insertText": "InBaryZ(InBaryY + InBaryZ)"
  },
  {
    "label": "SetNormalizeType()",
    "kind": "Method",
    "detail": "Function (FBoneWeightsSettings FirstBlendSettings ; FirstBlendSettings .)",
    "insertText": "SetNormalizeType(UE::AnimationCore::EBoneWeightNormalizeType::None)"
  },
  {
    "label": "SetMaxWeightCount()",
    "kind": "Method",
    "detail": "Function (FirstBlendSettings .)",
    "insertText": "SetMaxWeightCount(InB.Num() + InC.Num())"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (const FBoneWeights BC =)",
    "insertText": "Blend(InB, InC, BCW, FirstBlendSettings)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (const FBoneWeights BCA =)",
    "insertText": "Blend(BC, InA, InBaryX, InSettings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& InArchive, UE::AnimationCore::FBoneWeight& InOutBoneWeight)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (InOutBoneWeight .)",
    "insertText": "Serialize(InArchive)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& InArchive, UE::AnimationCore::FBoneWeights& InOutBoneWeights)"
  }
]