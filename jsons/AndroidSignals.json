[
  {
    "label": "FSignalHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSignalHandler"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "sigaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sigaction"
  },
  {
    "label": "FSignalParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSignalParams"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# include \" Android / AndroidPlatformMisc . h \" # include \" CoreGlobals . h \" # include \" HAL / PlatformProcess . h \" # include<sys / syscall . h> # pragma once # if ANDROID_HAS_RTSIGNALS # define THREAD_CALLSTACK_GENERATOR SIGRTMIN + 5 # define FATAL_SIGNAL_FWD SIGRTMIN + 6 # define THREADBACKTRACE_SIGNAL_FWD SIGRTMIN + 7 float GAndroidSignalTimeOut ; template<Derived> class FSignalHandler { protected : enum class ESignalType : int32 { Signal,Exit } ; enum class ESignalThreadStatus : int32 { NotInitialized,Ready,Starting,Busy,Complete,Exited } ; void)",
    "insertText": "Init(int ForwardingSignal)"
  },
  {
    "label": "pthread_attr_setdetachstate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_attr_setdetachstate(&otherAttr, PTHREAD_CREATE_DETACHED)"
  },
  {
    "label": "bStackSizeSuccess()",
    "kind": "Method",
    "detail": "Function (const size_t StackSize = 2 5 6* 1 0 2 4 ; bool)",
    "insertText": "bStackSizeSuccess(pthread_attr_setstacksize(&otherAttr, StackSize) == 0)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(!bStackSizeSuccess, LogAndroid, Error, TEXT(\"Failed to set signal thread stack size.\"))"
  },
  {
    "label": "pthread_create()",
    "kind": "Method",
    "detail": "Function (bool bThreadCreated =)",
    "insertText": "pthread_create(&SignalHandlerThread, &otherAttr, ThreadFunc, nullptr)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(!bThreadCreated, LogAndroid, Fatal, TEXT(\"Failed to create signal handler\"))"
  },
  {
    "label": "SleepNoStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepNoStats(0)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (} struct sigaction ActionForForwardSignal ;)",
    "insertText": "Memzero(ActionForForwardSignal)"
  },
  {
    "label": "sigfillset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sigfillset(&ActionForForwardSignal.sa_mask)"
  },
  {
    "label": "sigaction()",
    "kind": "Method",
    "detail": "Function (ActionForForwardSignal . sa_flags = SA_SIGINFO | SA_RESTART ; ActionForForwardSignal . sa_sigaction =& OnForwardedTargetSignal ;)",
    "insertText": "sigaction(ForwardingSignalType, &ActionForForwardSignal, &PreviousActionForForwardSignal)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "SendExitSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendExitSignal()"
  },
  {
    "label": "sigaction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "sigaction(ForwardingSignalType, &PreviousActionForForwardSignal, nullptr)"
  },
  {
    "label": "SignalThreadStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalThreadStatus(int32)"
  },
  {
    "label": "SleepNoStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepNoStats(0.0f)"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (} SignalParams . Signal = InSignal ; SignalParams . ThreadID =)",
    "insertText": "GetCurrentThreadId()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (SignalParams . Info = InInfo ; SignalParams . Context = InContext ;)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "WaitForSignalHandlerToFinishOrExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSignalHandlerToFinishOrExit()"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "AtomicStore(&SignalThreadStatus, (int32)ESignalThreadStatus::Ready)"
  },
  {
    "label": "ThreadFunc()",
    "kind": "Method",
    "detail": "Function (} } private : void*)",
    "insertText": "ThreadFunc(void* param)"
  },
  {
    "label": "SleepInfinite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepInfinite()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (siginfo_t info ;)",
    "insertText": "memset(&info, 0, sizeof(siginfo_t))"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (info . si_signo = ForwardingSignalType ; info . si_code = SI_QUEUE ; info . si_pid =)",
    "insertText": "syscall(SYS_getpid)"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (info . si_uid =)",
    "insertText": "syscall(SYS_getuid)"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (info . si_value . sival_int = SignalType ; return)",
    "insertText": "syscall(SYS_rt_tgsigqueueinfo, info.si_pid, ForwardingThreadID, ForwardingSignalType, &info)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const float PollInterval = 0 . 0 1 f ; float CurrentWaitTime = 0 . 0 f ;)",
    "insertText": "while(FPlatformAtomics::InterlockedCompareExchange(&SignalThreadStatus, (int32)ESignalThreadStatus::Ready, (int32)ESignalThreadStatus::Complete) != (int32)ESignalThreadStatus::Complete)"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exit(0)"
  },
  {
    "label": "SleepNoStats()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SleepNoStats(PollInterval)"
  },
  {
    "label": "OnForwardedTargetSignal()",
    "kind": "Method",
    "detail": "Function (CurrentWaitTime + = PollInterval ; } } void)",
    "insertText": "OnForwardedTargetSignal(int Signal, siginfo* Info, void* Context)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicStore(&SignalThreadStatus, (int32)ESignalThreadStatus::Busy)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicStore(&SignalThreadStatus, (int32)ESignalThreadStatus::Exited)"
  },
  {
    "label": "pthread_exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_exit(0)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicStore(&SignalThreadStatus, (int32)ESignalThreadStatus::Complete)"
  }
]