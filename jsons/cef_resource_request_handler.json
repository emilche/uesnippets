[
  {
    "label": "CefCookieAccessFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefCookieAccessFilter"
  },
  {
    "label": "CefResourceRequestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefResourceRequestHandler"
  },
  {
    "label": "GetCookieAccessFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CEF_RESOURCE_REQUEST_HANDLER_H_ # define CEF_INCLUDE_CEF_RESOURCE_REQUEST_HANDLER_H_ # pragma once # include \" include / cef_base . h \" # include \" include / cef_browser . h \" # include \" include / cef_frame . h \" # include \" include / cef_request . h \" # include \" include / cef_request_callback . h \" # include \" include / cef_resource_handler . h \" # include \" include / cef_response . h \" # include \" include / cef_response_filter . h \" class CefCookieAccessFilter ; class CefResourceRequestHandler : public CefBaseRefCounted { public : typedef cef_return_value_t ReturnValue ; typedef cef_urlrequest_status_t URLRequestStatus ; CefRefPtr<CefCookieAccessFilter>)",
    "insertText": "GetCookieAccessFilter(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request)"
  },
  {
    "label": "OnResourceResponse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnResourceResponse(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, CefRefPtr<CefResponse> response)"
  },
  {
    "label": "OnProtocolExecution()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnProtocolExecution(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, bool& allow_os_execution)"
  },
  {
    "label": "CanSendCookie()",
    "kind": "Method",
    "detail": "Function (} } ; class CefCookieAccessFilter : public CefBaseRefCounted { public : bool)",
    "insertText": "CanSendCookie(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, const CefCookie& cookie)"
  }
]