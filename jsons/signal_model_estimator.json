[
  {
    "label": "SignalModelEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SignalModelEstimator"
  },
  {
    "label": "SignalModelEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_NS_SIGNAL_MODEL_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_NS_SIGNAL_MODEL_ESTIMATOR_H_ # include<array> # include \" api / array_view . h \" # include \" modules / audio_processing / ns / histograms . h \" # include \" modules / audio_processing / ns / ns_common . h \" # include \" modules / audio_processing / ns / prior_signal_model . h \" # include \" modules / audio_processing / ns / prior_signal_model_estimator . h \" # include \" modules / audio_processing / ns / signal_model . h \" namespace webrtc { class SignalModelEstimator { public :)",
    "insertText": "SignalModelEstimator()"
  },
  {
    "label": "SignalModelEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalModelEstimator(const SignalModelEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SignalModelEstimator&)",
    "insertText": "operator(const SignalModelEstimator&)"
  },
  {
    "label": "AdjustNormalization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustNormalization(int32_t num_analyzed_frames, float signal_energy)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(rtc::ArrayView<const float, kFftSizeBy2Plus1> prior_snr, rtc::ArrayView<const float, kFftSizeBy2Plus1> post_snr, rtc::ArrayView<const float, kFftSizeBy2Plus1> conservative_noise_spectrum, rtc::ArrayView<const float, kFftSizeBy2Plus1> signal_spectrum, float signal_spectral_sum, float signal_energy)"
  },
  {
    "label": "get_prior_model()",
    "kind": "Method",
    "detail": "Function (const PriorSignalModel&)",
    "insertText": "get_prior_model()"
  },
  {
    "label": "get_model()",
    "kind": "Method",
    "detail": "Function (} const SignalModel&)",
    "insertText": "get_model()"
  }
]