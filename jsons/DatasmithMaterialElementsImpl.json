[
  {
    "label": "FDatasmithExpressionInputImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithExpressionInputImpl"
  },
  {
    "label": "DirectLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DirectLink"
  },
  {
    "label": "FDatasmithExpressionOutputImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithExpressionOutputImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionImpl"
  },
  {
    "label": "FDatasmithExpressionParameterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithExpressionParameterImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionBoolImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionBoolImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionColorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionColorImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionScalarImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionScalarImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionTextureImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionTextureImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionTextureCoordinateImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionTextureCoordinateImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionFlattenNormalImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionFlattenNormalImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionGenericImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionGenericImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionFunctionCallImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionFunctionCallImpl"
  },
  {
    "label": "FDatasmithMaterialExpressionCustomImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialExpressionCustomImpl"
  },
  {
    "label": "DATASMITHCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHCORE_API"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DatasmithMaterialElements . h \" # include \" DatasmithSceneElementsImpl . h \" # include \" Algo / Find . h \" # include \" Containers / Array . h \" # include \" Misc / SecureHash . h \" namespace FDatasmithExpressionUtils { void)",
    "insertText": "UpdateHashWithString(FMD5& MD5, const FString& String)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(*String), String.Len() * sizeof(TCHAR))"
  },
  {
    "label": "UpdateHashWithStrings()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateHashWithStrings(FMD5& MD5, const TArray<FString>& Strings)"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithString(MD5, String)"
  },
  {
    "label": "UpdateHashWithReference()",
    "kind": "Method",
    "detail": "Function (} } template<ReferenceType> void)",
    "insertText": "UpdateHashWithReference(FMD5& MD5, TDatasmithReferenceProxy<ReferenceType>& Reference)"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (FMD5Hash ReferenceHash = Reference .)",
    "insertText": "Edit()->CalculateElementHash(true)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(ReferenceHash.GetBytes(), ReferenceHash.GetSize())"
  },
  {
    "label": "UpdateHashWithArray()",
    "kind": "Method",
    "detail": "Function (} } template<ClassType> void)",
    "insertText": "UpdateHashWithArray(FMD5& MD5, TDatasmithReferenceArrayProxy<ClassType>& Array)"
  },
  {
    "label": "CalculateElementHash()",
    "kind": "Method",
    "detail": "Function (FMD5Hash ObjectHash = Object ->)",
    "insertText": "CalculateElementHash(true)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(ObjectHash.GetBytes(), ObjectHash.GetSize())"
  },
  {
    "label": "FDatasmithExpressionInputImpl()",
    "kind": "Method",
    "detail": "Function (} } } ; class FDatasmithExpressionInputImpl : public FDatasmithElementImpl<IDatasmithExpressionInput> { public :)",
    "insertText": "FDatasmithExpressionInputImpl(const TCHAR* InInputName)"
  },
  {
    "label": "FDatasmithExpressionInputImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDatasmithExpressionInputImpl()"
  },
  {
    "label": "GetExpression()",
    "kind": "Method",
    "detail": "Function (IDatasmithMaterialExpression*)",
    "insertText": "GetExpression()"
  },
  {
    "label": "SetExpression()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExpression(IDatasmithMaterialExpression* InExpression)"
  },
  {
    "label": "GetOutputIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOutputIndex()"
  },
  {
    "label": "CalculateElementHash()",
    "kind": "Method",
    "detail": "Function (OutputIndex = InOutputIndex ; } FMD5Hash)",
    "insertText": "CalculateElementHash(bool bForce)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&OutputIndex), sizeof(OutputIndex))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (ElementHash .)",
    "insertText": "Set(MD5)"
  },
  {
    "label": "FDatasmithExpressionOutputImpl()",
    "kind": "Method",
    "detail": "Function (protected : TDatasmithReferenceProxy<IDatasmithMaterialExpression> Expression ; TReflected<int32> OutputIndex ; } ; class FDatasmithExpressionOutputImpl : public FDatasmithElementImpl<IDatasmithExpressionOutput> { public :)",
    "insertText": "FDatasmithExpressionOutputImpl(const TCHAR* InOutputName ) : FDatasmithElementImpl< IDatasmithExpressionOutput >( InOutputName, EDatasmithElementType::MaterialExpressionOutput)"
  },
  {
    "label": "FDatasmithMaterialExpressionImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDatasmithMaterialExpressionImpl()"
  },
  {
    "label": "GetExpressionType()",
    "kind": "Method",
    "detail": "Function (EDatasmithMaterialExpressionType)",
    "insertText": "GetExpressionType()"
  },
  {
    "label": "IsSubType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSubType(const EDatasmithMaterialExpressionType ExpressionType)"
  },
  {
    "label": "IsSubTypeInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSubTypeInternal(uint64 InSubType)"
  },
  {
    "label": "ConnectExpression()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConnectExpression(IDatasmithExpressionInput& ExpressionInput)"
  },
  {
    "label": "ConnectExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectExpression(ExpressionInput, GetDefaultOutputIndex())"
  },
  {
    "label": "ConnectExpression()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConnectExpression(IDatasmithExpressionInput& ExpressionInput, int32 OutputIndex)"
  },
  {
    "label": "GetInputCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInputCount()"
  },
  {
    "label": "ResetExpression()",
    "kind": "Method",
    "detail": "Function (DefaultOutputIndex = InDefaultOutputIndex ; } void)",
    "insertText": "ResetExpression()"
  },
  {
    "label": "ResetExpressionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetExpressionImpl()"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (protected : FMD5Hash)",
    "insertText": "ComputeHash()"
  },
  {
    "label": "UpdateHashWithArray()",
    "kind": "Method",
    "detail": "Function (FMD5 MD5 ;)",
    "insertText": "UpdateHashWithArray(MD5, Outputs)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&DefaultOutputIndex), sizeof(DefaultOutputIndex))"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (this -> Store .)",
    "insertText": "RegisterParameter(GroupName, \"GroupName\")"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetGroupName()"
  },
  {
    "label": "SetGroupName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGroupName(const TCHAR* InGroupName)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(BaseHash.GetBytes(), BaseHash.GetSize())"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithString(MD5, GroupName)"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool&)",
    "insertText": "GetBool()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (GroupName =)",
    "insertText": "FString()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&bValue), sizeof(bValue))"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor&)",
    "insertText": "GetColor()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (LinearColor =)",
    "insertText": "FLinearColor()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&LinearColor), sizeof(LinearColor))"
  },
  {
    "label": "GetScalar()",
    "kind": "Method",
    "detail": "Function (float&)",
    "insertText": "GetScalar()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&Scalar), sizeof(Scalar))"
  },
  {
    "label": "GetTexturePathName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTexturePathName()"
  },
  {
    "label": "SetTexturePathName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTexturePathName(const TCHAR* InTexturePathName)"
  },
  {
    "label": "GetInputCoordinate()",
    "kind": "Method",
    "detail": "Function (TexturePathName = InTexturePathName ; } IDatasmithExpressionInput&)",
    "insertText": "GetInputCoordinate()"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (} const IDatasmithExpressionInput*)",
    "insertText": "GetInput(int32 Index)"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithString(MD5, TexturePathName)"
  },
  {
    "label": "UpdateHashWithReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithReference(MD5, TextureCoordinate)"
  },
  {
    "label": "GetCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCoordinateIndex()"
  },
  {
    "label": "GetUTiling()",
    "kind": "Method",
    "detail": "Function (CoordinateIndex = InCoordinateIndex ; } float)",
    "insertText": "GetUTiling()"
  },
  {
    "label": "GetVTiling()",
    "kind": "Method",
    "detail": "Function (UTiling = InUTiling ; } float)",
    "insertText": "GetVTiling()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&CoordinateIndex), sizeof(CoordinateIndex))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&UTiling), sizeof(UTiling))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&VTiling), sizeof(VTiling))"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (IDatasmithExpressionInput&)",
    "insertText": "GetNormal()"
  },
  {
    "label": "GetFlatness()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetFlatness()"
  },
  {
    "label": "UpdateHashWithReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithReference(MD5, Normal)"
  },
  {
    "label": "UpdateHashWithReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithReference(MD5, Flatness)"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReferenceProxy(Inputs, \"Inputs\")"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReferenceProxy(Properties, \"Properties\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(ExpressionName, \"ExpressionName\")"
  },
  {
    "label": "SetExpressionName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExpressionName(const TCHAR* InExpressionName)"
  },
  {
    "label": "GetExpressionName()",
    "kind": "Method",
    "detail": "Function (ExpressionName = InExpressionName ; } const TCHAR*)",
    "insertText": "GetExpressionName()"
  },
  {
    "label": "GetPropertiesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPropertiesCount()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<IDatasmithKeyValueProperty>&)",
    "insertText": "GetProperty(int32 InIndex)"
  },
  {
    "label": "GetPropertyByName()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IDatasmithKeyValueProperty>&)",
    "insertText": "GetPropertyByName(const TCHAR* InName)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProperty(const TSharedPtr< IDatasmithKeyValueProperty >& InProperty)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Inputs .)",
    "insertText": "Add(MakeShared< FDatasmithExpressionInputImpl >( *FString::FromInt( Inputs.Num() ) ))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return Inputs [ Index ] .)",
    "insertText": "Get()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Inputs .)",
    "insertText": "Empty()"
  },
  {
    "label": "UpdateHashWithArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithArray(MD5, Inputs)"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithString(MD5, ExpressionName)"
  },
  {
    "label": "UpdateHashWithArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithArray(MD5, Properties)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(FunctionPathName, \"FunctionPathName\")"
  },
  {
    "label": "SetFunctionPathName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFunctionPathName(const TCHAR* InFunctionPathName)"
  },
  {
    "label": "GetFunctionPathName()",
    "kind": "Method",
    "detail": "Function (FunctionPathName = InFunctionPathName ; } const TCHAR*)",
    "insertText": "GetFunctionPathName()"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithString(MD5, FunctionPathName)"
  },
  {
    "label": "SetCode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCode(const TCHAR* InCode)"
  },
  {
    "label": "GetCode()",
    "kind": "Method",
    "detail": "Function (Code = InCode ; } const TCHAR*)",
    "insertText": "GetCode()"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDescription(const TCHAR* InDescription)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (Description = InDescription ; } const TCHAR*)",
    "insertText": "GetDescription()"
  },
  {
    "label": "SetOutputType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOutputType(EDatasmithShaderDataType InOutputType)"
  },
  {
    "label": "GetOutputType()",
    "kind": "Method",
    "detail": "Function (OutputType = InOutputType ; } EDatasmithShaderDataType)",
    "insertText": "GetOutputType()"
  },
  {
    "label": "AddIncludeFilePath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddIncludeFilePath(const TCHAR* Path)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IncludeFilePaths .)",
    "insertText": "Get().Add(Path)"
  },
  {
    "label": "GetIncludeFilePath()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetIncludeFilePath(int32 Index)"
  },
  {
    "label": "GetAdditionalDefineCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetAdditionalDefineCount()"
  },
  {
    "label": "AddAdditionalDefine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAdditionalDefine(const TCHAR* Define)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Defines .)",
    "insertText": "Get().Add(Define)"
  },
  {
    "label": "GetAdditionalDefine()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetAdditionalDefine(int32 Index)"
  },
  {
    "label": "GetArgumentNameCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetArgumentNameCount()"
  },
  {
    "label": "SetArgumentName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetArgumentName(int32 ArgIndex, const TCHAR* ArgName)"
  },
  {
    "label": "GetArgumentName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetArgumentName(int32 Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (OutputType = EDatasmithShaderDataType::Float1 ; IncludeFilePaths .)",
    "insertText": "Get().Empty()"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithString(MD5, Code)"
  },
  {
    "label": "UpdateHashWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithString(MD5, Description)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Update(reinterpret_cast<const uint8*>(&OutputType), sizeof(OutputType))"
  },
  {
    "label": "UpdateHashWithStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithStrings(MD5, IncludeFilePaths)"
  },
  {
    "label": "UpdateHashWithStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithStrings(MD5, Defines)"
  },
  {
    "label": "UpdateHashWithStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHashWithStrings(MD5, ArgNames)"
  },
  {
    "label": "FDatasmithUEPbrMaterialElementImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDatasmithUEPbrMaterialElementImpl()"
  },
  {
    "label": "GetBaseColor()",
    "kind": "Method",
    "detail": "Function (IDatasmithExpressionInput&)",
    "insertText": "GetBaseColor()"
  },
  {
    "label": "GetMetallic()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetMetallic()"
  },
  {
    "label": "GetSpecular()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetSpecular()"
  },
  {
    "label": "GetRoughness()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetRoughness()"
  },
  {
    "label": "GetEmissiveColor()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetEmissiveColor()"
  },
  {
    "label": "GetOpacity()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetOpacity()"
  },
  {
    "label": "GetRefraction()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetRefraction()"
  },
  {
    "label": "GetAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetAmbientOcclusion()"
  },
  {
    "label": "GetClearCoat()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetClearCoat()"
  },
  {
    "label": "GetClearCoatRoughness()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetClearCoatRoughness()"
  },
  {
    "label": "GetWorldPositionOffset()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetWorldPositionOffset()"
  },
  {
    "label": "GetMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (} IDatasmithExpressionInput&)",
    "insertText": "GetMaterialAttributes()"
  },
  {
    "label": "GetBlendMode()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetBlendMode()"
  },
  {
    "label": "GetTwoSided()",
    "kind": "Method",
    "detail": "Function (BlendMode = InBlendMode ; } bool)",
    "insertText": "GetTwoSided()"
  },
  {
    "label": "GetIsThinSurface()",
    "kind": "Method",
    "detail": "Function (bTwoSided = bInTwoSided ; } bool)",
    "insertText": "GetIsThinSurface()"
  },
  {
    "label": "GetUseMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (bIsThinSurface = bInIsThinSurface ; } bool)",
    "insertText": "GetUseMaterialAttributes()"
  },
  {
    "label": "GetMaterialFunctionOnly()",
    "kind": "Method",
    "detail": "Function (bUseMaterialAttributes = bInUseMaterialAttributes ; } bool)",
    "insertText": "GetMaterialFunctionOnly()"
  },
  {
    "label": "GetOpacityMaskClipValue()",
    "kind": "Method",
    "detail": "Function (bMaterialFunctionOnly = bInMaterialFunctionOnly ; } ; float)",
    "insertText": "GetOpacityMaskClipValue()"
  },
  {
    "label": "GetTranslucencyLightingMode()",
    "kind": "Method",
    "detail": "Function (OpacityMaskClipValue = InClipValue ; } int)",
    "insertText": "GetTranslucencyLightingMode()"
  },
  {
    "label": "GetExpressionsCount()",
    "kind": "Method",
    "detail": "Function (TranslucencyLightingMode = InMode ; } int32)",
    "insertText": "GetExpressionsCount()"
  },
  {
    "label": "GetExpression()",
    "kind": "Method",
    "detail": "Function (} IDatasmithMaterialExpression*)",
    "insertText": "GetExpression(int32 Index)"
  },
  {
    "label": "GetExpressionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetExpressionIndex(const IDatasmithMaterialExpression* Expression)"
  },
  {
    "label": "AddMaterialExpression()",
    "kind": "Method",
    "detail": "Function (IDatasmithMaterialExpression*)",
    "insertText": "AddMaterialExpression(const EDatasmithMaterialExpressionType ExpressionType)"
  },
  {
    "label": "ResetExpressionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetExpressionGraph(bool bRemoveAllExpressions)"
  },
  {
    "label": "SetParentLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentLabel(const TCHAR* InParentLabel)"
  },
  {
    "label": "GetParentLabel()",
    "kind": "Method",
    "detail": "Function (ParentLabel = InParentLabel ; } const TCHAR*)",
    "insertText": "GetParentLabel()"
  },
  {
    "label": "SetShadingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShadingModel(const EDatasmithShadingModel InShadingModel)"
  },
  {
    "label": "GetShadingModel()",
    "kind": "Method",
    "detail": "Function (ShadingModel = InShadingModel ; } EDatasmithShadingModel)",
    "insertText": "GetShadingModel()"
  },
  {
    "label": "FDatasmithMaterialExpressionImpl()",
    "kind": "Method",
    "detail": "Function (protected : TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> BaseColor ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> Metallic ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> Specular ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> Roughness ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> EmissiveColor ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> Opacity ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> Normal ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> WorldDisplacement ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> Refraction ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> AmbientOcclusion ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> ClearCoat ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> ClearCoatRoughness ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> WorldPositionOffset ; TDatasmithReferenceProxy<FDatasmithExpressionInputImpl> MaterialAttributes ; TDatasmithReferenceArrayProxy<IDatasmithMaterialExpression> Expressions ; TReflected<int32> BlendMode ; TReflected<bool> bTwoSided ; TReflected<bool> bIsThinSurface ; TReflected<bool> bUseMaterialAttributes ; TReflected<bool> bMaterialFunctionOnly ; TReflected<float> OpacityMaskClipValue ; TReflected<int32> TranslucencyLightingMode ; TReflected<FString> ParentLabel ; TReflected<EDatasmithShadingModel,uint8> ShadingModel ; } ; template<InterfaceType> FDatasmithMaterialExpressionImpl<InterfaceType)",
    "insertText": "FDatasmithMaterialExpressionImpl(EDatasmithMaterialExpressionType InSubType ) : FDatasmithElementImpl< InterfaceType >( nullptr, EDatasmithElementType::MaterialExpression, (uint64)InSubType ) , DefaultOutputIndex( 0)"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RegisterReferenceProxy(Outputs, \"Outputs\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (this -> Store .)",
    "insertText": "RegisterParameter(DefaultOutputIndex, \"DefaultOutputIndex\")"
  },
  {
    "label": "ConnectExpression()",
    "kind": "Method",
    "detail": "Function (} template<InterfaceType> void FDatasmithMaterialExpressionImpl<InterfaceType)",
    "insertText": "ConnectExpression(IDatasmithExpressionInput& ExpressionInput, int32 InOutputIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Outputs .)",
    "insertText": "Add(MakeShared<FDatasmithExpressionOutputImpl>( TEXT( \"Ouput\" ) ))"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} int32 OutputIndex = Outputs .)",
    "insertText": "IsValidIndex(InOutputIndex)"
  },
  {
    "label": "SetExpression()",
    "kind": "Method",
    "detail": "Function (ExpressionInput .)",
    "insertText": "SetExpression(this)"
  },
  {
    "label": "SetOutputIndex()",
    "kind": "Method",
    "detail": "Function (ExpressionInput .)",
    "insertText": "SetOutputIndex(OutputIndex)"
  },
  {
    "label": "FMD5Hash()",
    "kind": "Method",
    "detail": "Function (this -> ElementHash =)",
    "insertText": "FMD5Hash()"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (IDatasmithExpressionInput* Input =)",
    "insertText": "GetInput(InputIndex)"
  },
  {
    "label": "SetExpression()",
    "kind": "Method",
    "detail": "Function (Input ->)",
    "insertText": "SetExpression(nullptr)"
  }
]