[
  {
    "label": "Arg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Arg"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_SUBSTITUTE_H_ # define ABSL_STRINGS_SUBSTITUTE_H_ # include<cstring> # include<string> # include<type_traits> # include<vector> # include \" absl / base / macros . h \" # include \" absl / base / port . h \" # include \" absl / strings / ascii . h \" # include \" absl / strings / escaping . h \" # include \" absl / strings / internal / stringify_sink . h \" # include \" absl / strings / numbers . h \" # include \" absl / strings / str_cat . h \" # include \" absl / strings / str_split . h \" # include \" absl / strings / string_view . h \" # include \" absl / strings / strip . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace substitute_internal { class Arg { public :)",
    "insertText": "Arg(const char* value) : piece_(absl::NullSafeStringView(value))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (} template<Allocator>)",
    "insertText": "Arg(const std::basic_string<char, std::char_traits<char>, Allocator>& value) noexcept : piece_(value)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(absl::string_view value) : piece_(value)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(char value) : piece_(scratch_, 1)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (scratch_ [ 0 ] = value ; })",
    "insertText": "Arg(short value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned short value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(int value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned int value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(long value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned long value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(long long value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(unsigned long long value) : piece_(scratch_, static_cast<size_t>( numbers_internal::FastIntToBuffer(value, scratch_) - scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(float value) : piece_(scratch_, numbers_internal::SixDigitsToBuffer(value, scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(double value) : piece_(scratch_, numbers_internal::SixDigitsToBuffer(value, scratch_))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(bool value) : piece_(value ? \"true\" : \"false\")"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (} template<T,= std::enable_if<strings_internal::HasAbslStringify<T>::value>::type>)",
    "insertText": "Arg(const T& v, strings_internal::StringifySink&& sink = {}) : piece_(strings_internal::ExtractStringification(sink, v))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(Hex hex)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Arg(Dec dec)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (template<T,absl::enable_if_t<std::is_class<T)",
    "insertText": "value(std::is_same<T, std::vector<bool>::reference>::value || std::is_same<T, std::vector<bool>::const_reference>::value)>* = nullptr> Arg(T value) : Arg(static_cast<bool>(value))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(const void* value)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (template<T,= std::enable_if<std::is_enum<T> { }&& ! std::is_convertible<T,int> { }>::type>)",
    "insertText": "Arg(T value) : Arg(static_cast<typename std::underlying_type<T>::type>(value))"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Arg(const Arg&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Arg&)",
    "insertText": "operator(const Arg&)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "piece()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ABSL_BAD_CALL_IF) constexpr int CalculateOneBit(const char* format)"
  },
  {
    "label": "SkipNumber()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "SkipNumber(const char* format)"
  },
  {
    "label": "PlaceholderBitmask()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "PlaceholderBitmask(const char* format)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format)"
  },
  {
    "label": "SubstituteAndAppendArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppendArray(output, format, nullptr, 0)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0)"
  },
  {
    "label": "SubstituteAndAppendArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppendArray(output, format, args, ABSL_ARRAYSIZE(args))"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece(), a3.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece(), a3.piece(), a4.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece(), a3.piece(), a4.piece(), a5.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece(), a3.piece(), a4.piece(), a5.piece(), a6.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece(), a3.piece(), a4.piece(), a5.piece(), a6.piece(), a7.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7, const substitute_internal::Arg& a8)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece(), a3.piece(), a4.piece(), a5.piece(), a6.piece(), a7.piece(), a8.piece()"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubstituteAndAppend(std::string* output, absl::string_view format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7, const substitute_internal::Arg& a8, const substitute_internal::Arg& a9)"
  },
  {
    "label": "piece()",
    "kind": "Method",
    "detail": "Function (const absl::string_view args [ ] = { a0 .)",
    "insertText": "piece(), a1.piece(), a2.piece(), a3.piece(), a4.piece(), a5.piece(), a6.piece(), a7.piece(), a8.piece(), a9.piece()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(ABSL_BAD_CALL_IF) void SubstituteAndAppend(std::string* output, const char* format) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 0, \"There were no substitution arguments \" \"but this format string either has a $[0-9] in it or contains \" \"an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0) ABSL_BAD_CALL_IF(substitute_internal::PlaceholderBitmask(format) != 1, \"There was 1 substitution argument given, but \" \"this format string is missing its $0, contains \" \"one of $1-$9, or contains an unescaped $ character (use \" \"$$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 3, \"There were 2 substitution arguments given, but this format string is \" \"missing its $0/$1, contains one of $2-$9, or contains an \" \"unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 7, \"There were 3 substitution arguments given, but \" \"this format string is missing its $0/$1/$2, contains one of \" \"$3-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 15, \"There were 4 substitution arguments given, but \" \"this format string is missing its $0-$3, contains one of \" \"$4-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 31, \"There were 5 substitution arguments given, but \" \"this format string is missing its $0-$4, contains one of \" \"$5-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 63, \"There were 6 substitution arguments given, but \" \"this format string is missing its $0-$5, contains one of \" \"$6-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 127, \"There were 7 substitution arguments given, but \" \"this format string is missing its $0-$6, contains one of \" \"$7-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 255, \"There were 8 substitution arguments given, but \" \"this format string is missing its $0-$7, contains one of \" \"$8-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7, const substitute_internal::Arg& a8) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 511, \"There were 9 substitution arguments given, but \" \"this format string is missing its $0-$8, contains a $9, or \" \"contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstituteAndAppend(std::string* output, const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7, const substitute_internal::Arg& a8, const substitute_internal::Arg& a9) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 1023, \"There were 10 substitution arguments given, but this \" \"format string either doesn't contain all of $0 through $9 or \" \"contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (# endif ABSL_MUST_USE_RESULT std::string)",
    "insertText": "Substitute(absl::string_view format)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2, a3)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2, a3, a4)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2, a3, a4, a5)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2, a3, a4, a5, a6)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2, a3, a4, a5, a6, a7)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2, a3, a4, a5, a6, a7, a8)"
  },
  {
    "label": "SubstituteAndAppend()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "SubstituteAndAppend(&result, format, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 1, \"There was 1 substitution argument given, but \" \"this format string is missing its $0, contains one of $1-$9, \" \"or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 3, \"There were 2 substitution arguments given, but \" \"this format string is missing its $0/$1, contains one of \" \"$2-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 7, \"There were 3 substitution arguments given, but \" \"this format string is missing its $0/$1/$2, contains one of \" \"$3-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 15, \"There were 4 substitution arguments given, but \" \"this format string is missing its $0-$3, contains one of \" \"$4-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 31, \"There were 5 substitution arguments given, but \" \"this format string is missing its $0-$4, contains one of \" \"$5-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 63, \"There were 6 substitution arguments given, but \" \"this format string is missing its $0-$5, contains one of \" \"$6-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 127, \"There were 7 substitution arguments given, but \" \"this format string is missing its $0-$6, contains one of \" \"$7-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 255, \"There were 8 substitution arguments given, but \" \"this format string is missing its $0-$7, contains one of \" \"$8-$9, or contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7, const substitute_internal::Arg& a8) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 511, \"There were 9 substitution arguments given, but \" \"this format string is missing its $0-$8, contains a $9, or \" \"contains an unescaped $ character (use $$ instead)\")"
  },
  {
    "label": "Substitute()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Substitute(const char* format, const substitute_internal::Arg& a0, const substitute_internal::Arg& a1, const substitute_internal::Arg& a2, const substitute_internal::Arg& a3, const substitute_internal::Arg& a4, const substitute_internal::Arg& a5, const substitute_internal::Arg& a6, const substitute_internal::Arg& a7, const substitute_internal::Arg& a8, const substitute_internal::Arg& a9) ABSL_BAD_CALL_IF( substitute_internal::PlaceholderBitmask(format) != 1023, \"There were 10 substitution arguments given, but this \" \"format string either doesn't contain all of $0 through $9 or \" \"contains an unescaped $ character (use $$ instead)\")"
  }
]