[
  {
    "label": "bool_coder_spec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bool_coder_spec"
  },
  {
    "label": "bool_writer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bool_writer"
  },
  {
    "label": "bool_reader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bool_reader"
  },
  {
    "label": "vp8_token_struct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vp8_token_struct"
  },
  {
    "label": "vp8_prob_half()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_COMMON_TREECODER_H_ # define VPX_VP8_COMMON_TREECODER_H_ # ifdef __cplusplus \" C \" { # endif typedef unsigned char vp8bc_index_t ; typedef unsigned char vp8_prob ; # define)",
    "insertText": "vp8_prob_half((vp8_prob)128)"
  },
  {
    "label": "vp8_complement()",
    "kind": "Method",
    "detail": "Function (struct bool_coder_spec ; typedef struct bool_coder_spec bool_coder_spec ; typedef struct bool_writer bool_writer ; typedef struct bool_reader bool_reader ; typedef const bool_coder_spec c_bool_coder_spec ; typedef const bool_writer c_bool_writer ; typedef const bool_reader c_bool_reader ; # define)",
    "insertText": "vp8_complement(x) (255 - (x))"
  },
  {
    "label": "vp8_tokens_from_tree()",
    "kind": "Method",
    "detail": "Function (typedef const struct vp8_token_struct { int value ; int Len ; } vp8_token ; void)",
    "insertText": "vp8_tokens_from_tree(struct vp8_token_struct *, vp8_tree)"
  },
  {
    "label": "vp8_tokens_from_tree_offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_tokens_from_tree_offset(struct vp8_token_struct *, vp8_tree, int offset)"
  },
  {
    "label": "vp8_tree_probs_from_distribution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_tree_probs_from_distribution(int n, vp8_token tok[ ], vp8_tree tree, vp8_prob probs[ ], unsigned int branch_ct[ ][2], const unsigned int num_events[ ], unsigned int Pfactor, int Round)"
  },
  {
    "label": "vp8bc_tree_probs_from_distribution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8bc_tree_probs_from_distribution(int n, vp8_token tok[ ], vp8_tree tree, vp8_prob probs[ ], unsigned int branch_ct[ ][2], const unsigned int num_events[ ], c_bool_coder_spec *s)"
  }
]