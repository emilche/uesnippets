[
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNotifyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyEvent"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FBranchingPointNotifyPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBranchingPointNotifyPayload"
  },
  {
    "label": "UAnimNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotify"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, const FAnimNotifyEventReference& EventReference)"
  },
  {
    "label": "BranchingPointNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchingPointNotify(FBranchingPointNotifyPayload& BranchingPointPayload)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLinearColor(NotifyColor)"
  }
]