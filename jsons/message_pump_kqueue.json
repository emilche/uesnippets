[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "MessagePumpKqueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpKqueue"
  },
  {
    "label": "MachPortWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachPortWatcher"
  },
  {
    "label": "MachPortWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachPortWatchController"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_KQUEUE_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_KQUEUE_H_ # include<mach / mach . h> # include<stdint . h> # include<sys / event . h> # include<vector> # include \" base / containers / id_map . h \" # include \" base / files / scoped_file . h \" # include \" base / location . h \" # include \" base / mac / scoped_mach_port . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / weak_ptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / message_loop / watchable_io_message_pump_posix . h \" namespace base { class BASE_EXPORT MessagePumpKqueue : public MessagePump,public WatchableIOMessagePumpPosix { public : class FdWatchController : public FdWatchControllerInterface { public :)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FdWatchController(const FdWatchController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FdWatchController&)",
    "insertText": "operator(const FdWatchController&)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FdWatchController()"
  },
  {
    "label": "StopWatchingFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingFileDescriptor()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : class MessagePumpKqueue ; void)",
    "insertText": "Init(WeakPtr<MessagePumpKqueue> pump, int fd, int mode, FdWatcher* watcher)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "fd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "fd()"
  },
  {
    "label": "OnMachMessageReceived()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMachMessageReceived(mach_port_t port)"
  },
  {
    "label": "MachPortWatchController()",
    "kind": "Method",
    "detail": "Function (} ; class MachPortWatchController { public :)",
    "insertText": "MachPortWatchController(const Location& from_here)"
  },
  {
    "label": "MachPortWatchController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachPortWatchController(const MachPortWatchController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MachPortWatchController&)",
    "insertText": "operator(const MachPortWatchController&)"
  },
  {
    "label": "MachPortWatchController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MachPortWatchController()"
  },
  {
    "label": "StopWatchingMachPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingMachPort()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : class MessagePumpKqueue ; void)",
    "insertText": "Init(WeakPtr<MessagePumpKqueue> pump, mach_port_t port, MachPortWatcher* watcher)"
  },
  {
    "label": "port()",
    "kind": "Method",
    "detail": "Function (mach_port_t)",
    "insertText": "port()"
  },
  {
    "label": "MessagePumpKqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpKqueue(const MessagePumpKqueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpKqueue&)",
    "insertText": "operator(const MessagePumpKqueue&)"
  },
  {
    "label": "MessagePumpKqueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MessagePumpKqueue()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "WatchMachReceivePort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchMachReceivePort(mach_port_t port, MachPortWatchController* controller, MachPortWatcher* delegate)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd, bool persistent, int mode, FdWatchController* controller, FdWatcher* delegate)"
  },
  {
    "label": "StopWatchingMachPort()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "StopWatchingMachPort(MachPortWatchController* controller)"
  },
  {
    "label": "StopWatchingFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingFileDescriptor(FdWatchController* controller)"
  },
  {
    "label": "DoInternalWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoInternalWork(Delegate* delegate, Delegate::NextWorkInfo* next_work_info)"
  },
  {
    "label": "ProcessEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEvents(Delegate* delegate, size_t count)"
  },
  {
    "label": "MaybeUpdateWakeupTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateWakeupTimer(const base::TimeTicks& wakeup_time)"
  },
  {
    "label": "SetWakeupTimerEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWakeupTimerEvent(const base::TimeTicks& wakeup_time, kevent64_s* timer_event)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (mac::ScopedMachReceiveRight wakeup_ ; mach_msg_empty_rcv_t wakeup_buffer_ ; IDMap<FdWatchController*,uint64_t> fd_controllers_ ; IDMap<MachPortWatchController*,mach_port_t> port_controllers_ ; ScopedFD kqueue_ ; bool keep_running_ = true ; base::TimeTicks scheduled_wakeup_time_ { base::)",
    "insertText": "Max()"
  }
]