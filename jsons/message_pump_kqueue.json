[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "MessagePumpKqueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpKqueue"
  },
  {
    "label": "MachPortWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachPortWatcher"
  },
  {
    "label": "MachPortWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachPortWatchController"
  },
  {
    "label": "MessagePumpKqueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpKqueue"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(WeakPtr<MessagePumpKqueue> pump,\n              int fd,\n              int mode,\n              FdWatcher* watcher)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "MachPortWatchController()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "MachPortWatchController(const Location& from_here)"
  },
  {
    "label": "StopWatchingMachPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingMachPort()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(WeakPtr<MessagePumpKqueue> pump,\n              mach_port_t port,\n              MachPortWatcher* watcher)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "WatchMachReceivePort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchMachReceivePort(mach_port_t port,\n                            MachPortWatchController* controller,\n                            MachPortWatcher* delegate)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd,\n                           bool persistent,\n                           int mode,\n                           FdWatchController* controller,\n                           FdWatcher* delegate)"
  },
  {
    "label": "StopWatchingMachPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingMachPort(MachPortWatchController* controller)"
  },
  {
    "label": "StopWatchingFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingFileDescriptor(FdWatchController* controller)"
  },
  {
    "label": "DoInternalWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoInternalWork(Delegate* delegate,\n                      Delegate::NextWorkInfo* next_work_info)"
  },
  {
    "label": "ProcessEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEvents(Delegate* delegate, size_t count)"
  },
  {
    "label": "MaybeUpdateWakeupTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateWakeupTimer(const base::TimeTicks& wakeup_time)"
  },
  {
    "label": "SetWakeupTimerEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWakeupTimerEvent(const base::TimeTicks& wakeup_time,\n                           kevent64_s* timer_event)"
  }
]