[
  {
    "label": "H264SpsPpsTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "H264SpsPpsTracker"
  },
  {
    "label": "PacketAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PacketAction"
  },
  {
    "label": "FixedBitstream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FixedBitstream"
  },
  {
    "label": "PpsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PpsInfo"
  },
  {
    "label": "SpsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SpsInfo"
  },
  {
    "label": "H264SpsPpsTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_H264_SPS_PPS_TRACKER_H_ # define MODULES_VIDEO_CODING_H264_SPS_PPS_TRACKER_H_ # include<cstddef> # include<cstdint> # include<map> # include<memory> # include<vector> # include \" api / array_view . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" rtc_base / copy_on_write_buffer . h \" namespace webrtc { namespace video_coding { class H264SpsPpsTracker { public : enum PacketAction { kInsert,kDrop,kRequestKeyframe } ; struct FixedBitstream { PacketAction action ; rtc::CopyOnWriteBuffer bitstream ; } ;)",
    "insertText": "H264SpsPpsTracker()"
  },
  {
    "label": "CopyAndFixBitstream()",
    "kind": "Method",
    "detail": "Function (FixedBitstream)",
    "insertText": "CopyAndFixBitstream(rtc::ArrayView<const uint8_t> bitstream, RTPVideoHeader* video_header)"
  },
  {
    "label": "InsertSpsPpsNalus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertSpsPpsNalus(const std::vector<uint8_t>& sps, const std::vector<uint8_t>& pps)"
  },
  {
    "label": "PpsInfo()",
    "kind": "Method",
    "detail": "Function (private : struct PpsInfo {)",
    "insertText": "PpsInfo()"
  },
  {
    "label": "PpsInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PpsInfo(PpsInfo&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PpsInfo&)",
    "insertText": "operator(PpsInfo&& rhs)"
  },
  {
    "label": "SpsInfo()",
    "kind": "Method",
    "detail": "Function (int sps_id = - 1 ; size_t size = 0 ; std::unique_ptr<uint8_t [ ]> data ; } ; struct SpsInfo {)",
    "insertText": "SpsInfo()"
  },
  {
    "label": "SpsInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpsInfo(SpsInfo&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpsInfo&)",
    "insertText": "operator(SpsInfo&& rhs)"
  }
]