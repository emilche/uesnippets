[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FDerivedDataCacheResourceStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDerivedDataCacheResourceStat"
  },
  {
    "label": "FCacheRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheRecord"
  },
  {
    "label": "FCacheStoreRequestTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheStoreRequestTimer"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValue"
  },
  {
    "label": "ICacheStoreStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICacheStoreStats"
  },
  {
    "label": "ILegacyCacheStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyCacheStore"
  },
  {
    "label": "FCacheStoreRequestStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheStoreRequestStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ICacheStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICacheStore"
  },
  {
    "label": "ICacheStoreOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICacheStoreOwner"
  },
  {
    "label": "ICacheStoreGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICacheStoreGraph"
  },
  {
    "label": "ICacheStore()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Mutex . h \" # include \" Containers / ContainersFwd . h \" # include \" DerivedDataCache . h \" # include \" Misc / MonotonicTime . h \" class FText ; struct FDerivedDataCacheResourceStat ; namespace UE::DerivedData { class FCacheRecord ; } namespace UE::DerivedData { class FCacheStoreRequestTimer ; } namespace UE::DerivedData { class FValue ; } namespace UE::DerivedData { class ICacheStoreStats ; } namespace UE::DerivedData { class ILegacyCacheStore ; } namespace UE::DerivedData { struct FCacheStoreRequestStats ; } namespace UE::DerivedData { enum class ECacheStoreRequestOp : uint8 ; } namespace UE::DerivedData { enum class ECacheStoreRequestType : uint8 ; } namespace UE::DerivedData { enum class EStatus : uint8 ; } namespace UE::DerivedData { class ICacheStore { public : ~)",
    "insertText": "ICacheStore()"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Put(TConstArrayView<FCachePutRequest> Requests, IRequestOwner& Owner, FOnCachePutComplete&& OnComplete)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(TConstArrayView<FCacheGetRequest> Requests, IRequestOwner& Owner, FOnCacheGetComplete&& OnComplete)"
  },
  {
    "label": "PutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutValue(TConstArrayView<FCachePutValueRequest> Requests, IRequestOwner& Owner, FOnCachePutValueComplete&& OnComplete)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue(TConstArrayView<FCacheGetValueRequest> Requests, IRequestOwner& Owner, FOnCacheGetValueComplete&& OnComplete)"
  },
  {
    "label": "GetChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChunks(TConstArrayView<FCacheGetChunkRequest> Requests, IRequestOwner& Owner, FOnCacheGetChunkComplete&& OnComplete)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (using ERequestOp = ECacheStoreRequestOp ; using ERequestType = ECacheStoreRequestType ; using FRequestStats = FCacheStoreRequestStats ; using FRequestTimer = FCacheStoreRequestTimer ; } ; enum class ECacheStoreRequestType : uint8 { None = 0,Record,Value,} ; const TCHAR*)",
    "insertText": "LexToString(ECacheStoreRequestType CacheStoreRequestType)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} enum class ECacheStoreRequestOp : uint8 { None = 0,Put,Get,GetChunk,} ; const TCHAR*)",
    "insertText": "LexToString(ECacheStoreRequestOp CacheStoreRequestOp)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} enum class ECacheStoreFlags : uint32 { None = 0,Local = 1<<0,Remote = 1<<1,Query = 1<<2,Store = 1<<3,StopPutStore = 1<<4,StopGetStore = 1<<5,StopStore = StopPutStore | StopGetStore,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECacheStoreFlags)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (class ICacheStoreOwner { public : void)",
    "insertText": "Add(ILegacyCacheStore* CacheStore, ECacheStoreFlags Flags)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(ILegacyCacheStore* CacheStore, ECacheStoreFlags Flags)"
  },
  {
    "label": "RemoveNotSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNotSafe(ILegacyCacheStore* CacheStore)"
  },
  {
    "label": "HasAllFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllFlags(ECacheStoreFlags Flags)"
  },
  {
    "label": "CreateStats()",
    "kind": "Method",
    "detail": "Function (ICacheStoreStats*)",
    "insertText": "CreateStats(ILegacyCacheStore* CacheStore, ECacheStoreFlags Flags, FStringView Type, FStringView Name, FStringView Path = {})"
  },
  {
    "label": "DestroyStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStats(ICacheStoreStats* Stats)"
  },
  {
    "label": "LegacyResourceStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LegacyResourceStats(TArray<FDerivedDataCacheResourceStat>& OutStats)"
  },
  {
    "label": "FindOrCreate()",
    "kind": "Method",
    "detail": "Function (} ; class ICacheStoreGraph { public : ILegacyCacheStore*)",
    "insertText": "FindOrCreate(const TCHAR* Name)"
  },
  {
    "label": "Infinity()",
    "kind": "Method",
    "detail": "Function (} ; enum class ECacheStoreStatusCode : uint8 { None = 0,Warning,Error,} ; struct FCacheStoreRequestStats final { FSharedString Name ; FCacheBucket Bucket ; uint64 LogicalReadSize = 0 ; uint64 LogicalWriteSize = 0 ; uint64 PhysicalReadSize = 0 ; uint64 PhysicalWriteSize = 0 ; FMonotonicTimeSpan Latency =)",
    "insertText": "Infinity()"
  },
  {
    "label": "FMonotonicTimePoint()",
    "kind": "Method",
    "detail": "Function (FMonotonicTimePoint EndTime =)",
    "insertText": "FMonotonicTimePoint() - FMonotonicTimeSpan::Infinity()"
  },
  {
    "label": "AddLatency()",
    "kind": "Method",
    "detail": "Function (ECacheStoreRequestType Type = ECacheStoreRequestType::None ; ECacheStoreRequestOp Op = ECacheStoreRequestOp::None ; EStatus Status = EStatus::Ok ; FMutex Mutex ; void)",
    "insertText": "AddLatency(FMonotonicTimeSpan Latency)"
  },
  {
    "label": "AddLogicalRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLogicalRead(const FCacheRecord& Record)"
  },
  {
    "label": "AddLogicalRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLogicalRead(const FValue& Value)"
  },
  {
    "label": "AddLogicalWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLogicalWrite(const FValue& Value)"
  },
  {
    "label": "FCacheStoreRequestTimer()",
    "kind": "Method",
    "detail": "Function (} ; class FCacheStoreRequestTimer final { public :)",
    "insertText": "FCacheStoreRequestTimer(FCacheStoreRequestStats& Stats)"
  },
  {
    "label": "FCacheStoreRequestTimer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCacheStoreRequestTimer()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "FCacheStoreRequestTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCacheStoreRequestTimer(const FCacheStoreRequestTimer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCacheStoreRequestTimer&)",
    "insertText": "operator(const FCacheStoreRequestTimer&)"
  },
  {
    "label": "ICacheStoreStats()",
    "kind": "Method",
    "detail": "Function (private : FCacheStoreRequestStats& Stats ; FMonotonicTimePoint StartTime ; } ; class ICacheStoreStats { public : ~)",
    "insertText": "ICacheStoreStats()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetName()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetPath()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(ECacheStoreFlags Flags)"
  },
  {
    "label": "SetStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatus(ECacheStoreStatusCode StatusCode, const FText& Status)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(FStringView Key, FStringView Value)"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequest(const FCacheStoreRequestStats& Stats)"
  },
  {
    "label": "AddLatency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLatency(FMonotonicTimePoint StartTime, FMonotonicTimePoint EndTime, FMonotonicTimeSpan Latency)"
  },
  {
    "label": "GetAverageLatency()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAverageLatency()"
  },
  {
    "label": "SetTotalPhysicalSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTotalPhysicalSize(uint64 TotalPhysicalSize)"
  },
  {
    "label": "CompleteWithStatus()",
    "kind": "Method",
    "detail": "Function (} ; template<RequestRangeType,OnCompleteType> void)",
    "insertText": "CompleteWithStatus(RequestRangeType&& Requests, OnCompleteType&& OnComplete, EStatus Status)"
  },
  {
    "label": "OnComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComplete(Request.MakeResponse(Status))"
  }
]