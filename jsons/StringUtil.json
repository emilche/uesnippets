[
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Core / Types . h \" # include \" Math / MathConst . h \" # include \" Math / Point . h \" # include<list> # include<locale> # include<string> # include<sstream> # include<stdio . h> # include<stdarg . h> namespace UE::CADKernel::Utils { std::string)",
    "insertText": "ToString(const TCHAR* WideString)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> std::string)",
    "insertText": "ToString(const ValueType& v)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (std::stringstream stream ; stream<<v ; return stream .)",
    "insertText": "str()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString(const FPoint& p)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (std::string Message = \" dm .)",
    "insertText": "FPoint(\"; Message += Utils::ToString(p.X) + \",\" + Utils::ToString(p.Y) + \",\" + Utils::ToString(p.Z) + \")"
  },
  {
    "label": "ToFString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToFString(const double& Value)"
  },
  {
    "label": "ToFString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToFString(const int32& Value)"
  },
  {
    "label": "ToFString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToFString(const uint32& Value)"
  },
  {
    "label": "ToFString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToFString(const bool& Value)"
  },
  {
    "label": "ToFString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToFString(const FPoint& p)"
  },
  {
    "label": "Explode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Explode(const FString& FullString, const TCHAR* Separator, TArray<FString>& StringArray)"
  },
  {
    "label": "EscapeBackSlashes()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "EscapeBackSlashes(const FString& InputString)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (FString ret ; ret .)",
    "insertText": "Reserve(InputString.Len())"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "AppendChar(TEXT('\\\\'))"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (} ret .)",
    "insertText": "AppendChar(Char)"
  },
  {
    "label": "RemoveUnwantedChar()",
    "kind": "Method",
    "detail": "Function (} return ret ; } void)",
    "insertText": "RemoveUnwantedChar(FString& String, const TCHAR UnwantedChar)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (FString NewString ; NewString .)",
    "insertText": "Reserve(String.Len())"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Move(String, NewString)"
  }
]