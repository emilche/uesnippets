[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TAggregatedStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAggregatedStats"
  },
  {
    "label": "FAggregatedStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAggregatedStats"
  },
  {
    "label": "FStatsNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsNode"
  },
  {
    "label": "TAggregatedStats()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" InsightsCore / Table / ViewModels / BaseTreeNode . h \" namespace UE::Insights::TimingProfiler { enum class EStatsNodeType { Counter,Stat,Group,InvalidOrMax,} ; enum class EStatsNodeDataType { Double,Int64,Undefined,InvalidOrMax,} ; enum class EStasNodeAggregatedStats { Count,Sum,Min,Max,Average,Median,LowerQuartile,UpperQuartile,} ; union FStatsNodeAggregatedStatsValue { double Value ; int64 IntValue ; } ; template<Type> struct TAggregatedStats { Type Sum ; Type Min ; Type Max ; Type Average ; Type Median ; Type LowerQuartile ; Type UpperQuartile ;)",
    "insertText": "TAggregatedStats() : Sum(0) , Min(0) , Max(0) , Average(0) , Median(0) , LowerQuartile(0) , UpperQuartile(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} } ; class FStatsNode ; typedef TSharedPtr<class FStatsNode> FStatsNodePtr ; typedef TSharedRef<class FStatsNode> FStatsNodeRef ; typedef TSharedRef<const class FStatsNode> FStatsNodeRefConst ; typedef TWeakPtr<class FStatsNode> FStatsNodeWeak ; class FStatsNode : public FBaseTreeNode {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FStatsNode, FBaseTreeNode) public: static constexpr uint32 InvalidCounterId = uint32(-1)"
  },
  {
    "label": "FStatsNode()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FStatsNode(uint32 InCounterId, const FName InName, const FName InMetaGroupName, EStatsNodeType InType, EStatsNodeDataType InDataType) : FBaseTreeNode(InName, InType == EStatsNodeType::Group) , CounterId(InCounterId) , MetaGroupName(InMetaGroupName) , Type(InType) , DataType(InDataType) , bIsAddedToGraph(false)"
  },
  {
    "label": "GetCounterId()",
    "kind": "Method",
    "detail": "Function (const uint32 HashColor =)",
    "insertText": "GetCounterId()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (Color .)",
    "insertText": "R((HashColor >> 16) & 0xFF)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function (Color .)",
    "insertText": "G((HashColor >> 8) & 0xFF)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (Color .)",
    "insertText": "B((HashColor) & 0xFF)"
  },
  {
    "label": "ResetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (Color . A = 1 . 0 ;)",
    "insertText": "ResetAggregatedStats()"
  },
  {
    "label": "FStatsNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStatsNode(const FName InGroupName) : FBaseTreeNode(InGroupName, true) , CounterId(InvalidCounterId) , Type(EStatsNodeType::Group) , DataType(EStatsNodeDataType::InvalidOrMax) , Color(0.0, 0.0, 0.0, 1.0) , bIsAddedToGraph(false)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (DataType = InDataType ; } FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "GetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (bIsAddedToGraph = bOnOff ; } const FAggregatedStats&)",
    "insertText": "GetAggregatedStats()"
  },
  {
    "label": "SetAggregatedStatsDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAggregatedStatsDouble(uint64 InCount, const TAggregatedStats<double>& InAggregatedStats)"
  },
  {
    "label": "SetAggregatedStatsInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAggregatedStatsInt64(uint64 InCount, const TAggregatedStats<int64>& InAggregatedStats)"
  },
  {
    "label": "UpdateAggregatedStatsInt64FromDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedStatsInt64FromDouble()"
  },
  {
    "label": "UpdateAggregatedStatsDoubleFromInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedStatsDoubleFromInt64()"
  },
  {
    "label": "FormatAggregatedStatsValue()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "FormatAggregatedStatsValue(double ValueDbl, int64 ValueInt, bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsSum()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsSum(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsMin()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsMin(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsMax()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsMax(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsAverage()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsAverage(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsMedian()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsMedian(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsLowerQuartile()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsLowerQuartile(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsUpperQuartile()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsUpperQuartile(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsDiff()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsDiff(bool bForTooltip = false)"
  }
]