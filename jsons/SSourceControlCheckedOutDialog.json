[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SSourceControlCheckedOutDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSourceControlCheckedOutDialog"
  },
  {
    "label": "SSourceControlCheckedOutDialogListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSourceControlCheckedOutDialogListRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" SSourceControlCommon . h \" class SWindow ; class SSourceControlCheckedOutDialog : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSourceControlCheckedOutDialog) : _ParentWindow() , _Items() , _ShowColumnAssetName(true) , _ShowColumnAssetClass(true) , _ShowColumnUserName(true) , _MessageText() , _CloseText() , _CheckBoxText()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SWindow>, ParentWindow) SLATE_ARGUMENT(TArray<FSourceControlStateRef>, Items) SLATE_ARGUMENT(bool, ShowColumnAssetName) SLATE_ARGUMENT(bool, ShowColumnAssetClass) SLATE_ARGUMENT(bool, ShowColumnUserName) SLATE_ARGUMENT(FText, MessageText) SLATE_ARGUMENT(FText, CloseText) SLATE_ARGUMENT(FText, CheckBoxText) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "IsCheckBoxChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckBoxChecked()"
  },
  {
    "label": "OnGenerateRowForList()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowForList(FFileTreeItemRef InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetColumnSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetColumnSortMode(const FName ColumnId)"
  },
  {
    "label": "OnColumnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "RequestSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSort()"
  },
  {
    "label": "SortTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTree()"
  },
  {
    "label": "RefreshItemAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshItemAssetData()"
  },
  {
    "label": "CloseClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "CloseClicked()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SWindow> ParentFrame ; TArray<FFileTreeItemRef> ListViewItems ; TSharedPtr<SListView<FFileTreeItemRef>> ListView ; FName SortByColumn ; EColumnSortMode::Type SortMode ; TSharedPtr<SButton> CloseButton ; TSharedPtr<SCheckBox> CheckBox ; } ; class SSourceControlCheckedOutDialogListRow : public SMultiColumnTableRow<FFileTreeItemRef> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSourceControlCheckedOutDialogListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FFileTreeItemPtr, Item) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  }
]