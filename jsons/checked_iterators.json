[
  {
    "label": "CheckedContiguousIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckedContiguousIterator"
  },
  {
    "label": "std",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "std"
  },
  {
    "label": "__is_cpp17_contiguous_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_cpp17_contiguous_iterator"
  },
  {
    "label": "pointer_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pointer_traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_CHECKED_ITERATORS_H_ # define BASE_CONTAINERS_CHECKED_ITERATORS_H_ # include<iterator> # include<memory> # include<type_traits> # include \" base / check_op . h \" # include \" base / containers / util . h \" # include \" build / build_config . h \" namespace base { template<T> class CheckedContiguousIterator { public : using difference_type = std::ptrdiff_t ; using value_type = std::remove_cv_t<T> ; using pointer = T* ; using reference = T& ; using iterator_category = std::random_access_iterator_tag ; template<U> class CheckedContiguousIterator ; # if)",
    "insertText": "defined(_LIBCPP_VERSION) && !BUILDFLAG(IS_NACL)"
  },
  {
    "label": "CheckedContiguousIterator()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "CheckedContiguousIterator()"
  },
  {
    "label": "CheckedContiguousIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckedContiguousIterator(T* start, const T* end) : CheckedContiguousIterator(start, start, end)"
  },
  {
    "label": "CheckedContiguousIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckedContiguousIterator(const T* start, T* current, const T* end) : start_(start), current_(current), end_(end)"
  },
  {
    "label": "CheckedContiguousIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckedContiguousIterator(const CheckedContiguousIterator& other)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (template<U,std::enable_if_t<std::is_convertible<)",
    "insertText": "U(*)[], T (*)[]>::value>* = nullptr> constexpr CheckedContiguousIterator(const CheckedContiguousIterator<U>& other) : start_(other.start_), current_(other.current_), end_(other.end_)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(other.start_, other.current_)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(other.current_, other.end_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CheckedContiguousIterator&)",
    "insertText": "operator(const CheckedContiguousIterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const CheckedContiguousIterator& lhs, const CheckedContiguousIterator& rhs)"
  },
  {
    "label": "CheckComparable()",
    "kind": "Method",
    "detail": "Function (lhs .)",
    "insertText": "CheckComparable(rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + current_ ; return* this ; } CheckedContiguousIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "CHECK_LE()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CHECK_LE(-rhs, current_ - start_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} current_ + = rhs ; return* this ; } CheckedContiguousIterator)",
    "insertText": "operator(difference_type rhs)"
  },
  {
    "label": "CHECK_LE()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CHECK_LE(rhs, current_ - start_)"
  },
  {
    "label": "get_uintptr()",
    "kind": "Method",
    "detail": "Function (const auto from_begin_uintptr =)",
    "insertText": "get_uintptr(from_begin.current_)"
  },
  {
    "label": "get_uintptr()",
    "kind": "Method",
    "detail": "Function (const auto from_end_uintptr =)",
    "insertText": "get_uintptr(from_end.current_)"
  },
  {
    "label": "get_uintptr()",
    "kind": "Method",
    "detail": "Function (const auto to_begin_uintptr =)",
    "insertText": "get_uintptr(to.current_)"
  },
  {
    "label": "get_uintptr()",
    "kind": "Method",
    "detail": "Function (const auto to_end_uintptr =)",
    "insertText": "get_uintptr((to + std::distance(from_begin, from_end)).current_)"
  },
  {
    "label": "pointer_to()",
    "kind": "Method",
    "detail": "Function (template<T> struct __is_cpp17_contiguous_iterator<::base::CheckedContiguousIterator<T>> : true_type { } ; template<T> struct pointer_traits<::base::CheckedContiguousIterator<T>> { using pointer =::base::CheckedContiguousIterator<T> ; using element_type = T ; using difference_type = ptrdiff_t ; template<U> using rebind =::base::CheckedContiguousIterator<U> ; pointer)",
    "insertText": "pointer_to(element_type& r)"
  },
  {
    "label": "to_address()",
    "kind": "Method",
    "detail": "Function (} element_type*)",
    "insertText": "to_address(pointer p)"
  }
]