[
  {
    "label": "NumOccupancyWordsPerPaddedTile()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SparseVolumeTexture / SparseVolumeTexture . h \" namespace UE { namespace SVT { int32 MaxVolumeTextureDim = 2 0 4 8 ; int64 MaxResourceSize = 2 0 4 8 LL* 1 0 2 4 LL* 1 0 2 4 LL ; int32 NumVoxelsPerTile = SPARSE_VOLUME_TILE_RES* SPARSE_VOLUME_TILE_RES* SPARSE_VOLUME_TILE_RES ; int32 NumVoxelsPerPaddedTile = SPARSE_VOLUME_TILE_RES_PADDED* SPARSE_VOLUME_TILE_RES_PADDED* SPARSE_VOLUME_TILE_RES_PADDED ; int32)",
    "insertText": "NumOccupancyWordsPerPaddedTile(NumVoxelsPerPaddedTile + 31)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int32 OccupancyBitsSizePerPaddedTile = NumOccupancyWordsPerPaddedTile*)",
    "insertText": "sizeof(uint32)"
  },
  {
    "label": "PackX11Y11Z10()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackX11Y11Z10(const FIntVector3& Value)"
  },
  {
    "label": "PackPageTableEntry()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackPageTableEntry(const FIntVector3& Coord)"
  },
  {
    "label": "UnpackPageTableEntry()",
    "kind": "Method",
    "detail": "Function (FIntVector3)",
    "insertText": "UnpackPageTableEntry(uint32 Packed)"
  },
  {
    "label": "ReadVoxel()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "ReadVoxel(int64 VoxelIndex, const uint8* TileData, EPixelFormat Format)"
  },
  {
    "label": "WriteVoxel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteVoxel(int64 VoxelIndex, uint8* TileData, EPixelFormat Format, const FVector4f& Value, int32 DstComponent = -1)"
  },
  {
    "label": "IsSupportedFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedFormat(EPixelFormat Format)"
  },
  {
    "label": "IsInBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInBounds(const FIntVector3& Point, const FIntVector3& Min, const FIntVector3& Max)"
  },
  {
    "label": "ShiftRightAndMax()",
    "kind": "Method",
    "detail": "Function (FIntVector3)",
    "insertText": "ShiftRightAndMax(const FIntVector3& Value, uint32 ShiftBy, int32 MinValue)"
  },
  {
    "label": "SerializeEnumAs()",
    "kind": "Method",
    "detail": "Function (namespace Private { template<Y,T> void)",
    "insertText": "SerializeEnumAs(FArchive& Ar, T& Target)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (Y Buffer = static_cast<)",
    "insertText": "Y(Target)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Buffer ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Target = static_cast<)",
    "insertText": "T(Buffer)"
  }
]