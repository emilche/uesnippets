[
  {
    "label": "mi_block_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_block_s"
  },
  {
    "label": "mi_delayed_e",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "mi_delayed_e"
  },
  {
    "label": "mi_page_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_page_s"
  },
  {
    "label": "mi_page_kind_e",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "mi_page_kind_e"
  },
  {
    "label": "mi_segment_kind_e",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "mi_segment_kind_e"
  },
  {
    "label": "mi_segment_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_segment_s"
  },
  {
    "label": "mi_tld_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_tld_s"
  },
  {
    "label": "mi_page_queue_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_page_queue_s"
  },
  {
    "label": "mi_random_cxt_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_random_cxt_s"
  },
  {
    "label": "mi_padding_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_padding_s"
  },
  {
    "label": "mi_heap_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_heap_s"
  },
  {
    "label": "mi_stat_count_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_stat_count_s"
  },
  {
    "label": "mi_stat_counter_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_stat_counter_s"
  },
  {
    "label": "mi_stats_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_stats_s"
  },
  {
    "label": "mi_span_queue_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_span_queue_s"
  },
  {
    "label": "mi_os_tld_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_os_tld_s"
  },
  {
    "label": "mi_segments_tld_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_segments_tld_s"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef MIMALLOC_TYPES_H # define MIMALLOC_TYPES_H # include<stddef . h> # include<stdint . h> # include<mimalloc - atomic . h> # ifdef _MSC_VER # pragma)",
    "insertText": "warning(disable:4214) #endif #ifndef MI_MAX_ALIGN_SIZE #define MI_MAX_ALIGN_SIZE 16 #endif #if !defined(MI_SECURE) #define MI_SECURE 0 #endif #if !defined(MI_DEBUG) #if !defined(NDEBUG) || defined(_DEBUG) #define MI_DEBUG 2 #else #define MI_DEBUG 0 #endif #endif #if !defined(MI_PADDING) && (MI_DEBUG>=1) #define MI_PADDING 1 #endif #if (MI_SECURE>=3 || MI_DEBUG>=1 || MI_PADDING > 0) #define MI_ENCODE_FREELIST 1 #endif #if INTPTR_MAX == 9223372036854775807LL # define MI_INTPTR_SHIFT (3) #elif INTPTR_MAX == 2147483647LL # define MI_INTPTR_SHIFT (2) #else #error platform must be 32 or 64 bits #endif #define MI_INTPTR_SIZE (1<<MI_INTPTR_SHIFT) #define MI_INTPTR_BITS (MI_INTPTR_SIZE*8) #define KiB ((size_t)1024) #define MiB (KiB*KiB) #define GiB (MiB*KiB) #define MI_SEGMENT_SLICE_SHIFT (13 + MI_INTPTR_SHIFT) #define MI_SEGMENT_SHIFT ( 7 + MI_SEGMENT_SLICE_SHIFT) #define MI_SMALL_PAGE_SHIFT (MI_SEGMENT_SLICE_SHIFT) #define MI_MEDIUM_PAGE_SHIFT ( 3 + MI_SMALL_PAGE_SHIFT) #define MI_SEGMENT_SIZE (1ULL<<MI_SEGMENT_SHIFT) #define MI_SEGMENT_ALIGN MI_SEGMENT_SIZE #define MI_SEGMENT_MASK (MI_SEGMENT_SIZE - 1) #define MI_SEGMENT_SLICE_SIZE (1ULL<< MI_SEGMENT_SLICE_SHIFT) #define MI_SLICES_PER_SEGMENT (MI_SEGMENT_SIZE / MI_SEGMENT_SLICE_SIZE) #define MI_SMALL_PAGE_SIZE (1ULL<<MI_SMALL_PAGE_SHIFT) #define MI_MEDIUM_PAGE_SIZE (1ULL<<MI_MEDIUM_PAGE_SHIFT) #define MI_SMALL_OBJ_SIZE_MAX (MI_SMALL_PAGE_SIZE/4) #define MI_MEDIUM_OBJ_SIZE_MAX (MI_MEDIUM_PAGE_SIZE/4) #define MI_MEDIUM_OBJ_WSIZE_MAX (MI_MEDIUM_OBJ_SIZE_MAX/MI_INTPTR_SIZE) #define MI_LARGE_OBJ_SIZE_MAX (MI_SEGMENT_SIZE/2) #define MI_LARGE_OBJ_WSIZE_MAX (MI_LARGE_OBJ_SIZE_MAX/MI_INTPTR_SIZE) #define MI_HUGE_OBJ_SIZE_MAX (2*MI_INTPTR_SIZE*MI_SEGMENT_SIZE) #define MI_BIN_HUGE (73U) #if (MI_MEDIUM_OBJ_WSIZE_MAX >= 655360) #error \"define more bins\" #endif #define MI_MAX_SLICE_OFFSET ((MI_MEDIUM_PAGE_SIZE / MI_SEGMENT_SLICE_SIZE) - 1) #define MI_HUGE_BLOCK_SIZE ((uint32_t)MI_HUGE_OBJ_SIZE_MAX)"
  },
  {
    "label": "_Atomic()",
    "kind": "Method",
    "detail": "Function (typedef struct mi_block_s { mi_encoded_t next ; } mi_block_t ; typedef enum mi_delayed_e { MI_USE_DELAYED_FREE = 0,MI_DELAYED_FREEING = 1,MI_NO_DELAYED_FREE = 2,MI_NEVER_DELAYED_FREE = 3 } mi_delayed_t ; # if ! MI_TSAN typedef union mi_page_flags_s { uint8_t full_aligned ; struct { uint8_t in_full : 1 ; uint8_t has_aligned : 1 ; } x ; } mi_page_flags_t ; # else typedef union mi_page_flags_s { uint16_t full_aligned ; struct { uint8_t in_full ; uint8_t has_aligned ; } x ; } mi_page_flags_t ; # endif typedef uintptr_t mi_thread_free_t ; typedef struct mi_page_s { uint32_t slice_count ; uint32_t slice_offset ; uint8_t is_reset : 1 ; uint8_t is_committed : 1 ; uint8_t is_zero_init : 1 ; uint16_t capacity ; uint16_t reserved ; mi_page_flags_t flags ; uint8_t is_zero : 1 ; uint8_t retire_expire : 7 ; mi_block_t* free ; # ifdef MI_ENCODE_FREELIST uintptr_t keys [ 2 ] ; # endif uint32_t used ; uint32_t xblock_size ; mi_block_t* local_free ;)",
    "insertText": "_Atomic(mi_thread_free_t)"
  },
  {
    "label": "_Atomic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Atomic(uintptr_t)"
  },
  {
    "label": "MI_COMMIT_SIZE()",
    "kind": "Method",
    "detail": "Function (struct mi_page_s* next ; struct mi_page_s* prev ; # if MI_INTPTR_SIZE = = 8 uintptr_t padding [ 1 ] ; # endif } mi_page_t ; typedef enum mi_page_kind_e { MI_PAGE_SMALL,MI_PAGE_MEDIUM,MI_PAGE_LARGE,MI_PAGE_HUGE,} mi_page_kind_t ; typedef enum mi_segment_kind_e { MI_SEGMENT_NORMAL,MI_SEGMENT_HUGE,} mi_segment_kind_t ; # define)",
    "insertText": "MI_COMMIT_SIZE(MI_SEGMENT_SIZE/MI_INTPTR_BITS) #if (((1 << MI_SEGMENT_SHIFT)/MI_COMMIT_SIZE) > 8*MI_INTPTR_SIZE)"
  },
  {
    "label": "_Atomic()",
    "kind": "Method",
    "detail": "Function (typedef int64_t mi_msecs_t ; typedef uintptr_t mi_commit_mask_t ; typedef struct mi_segment_s { size_t memid ; bool mem_is_pinned ; bool mem_is_large ; bool mem_is_committed ; bool allow_decommit ; mi_msecs_t decommit_expire ; mi_commit_mask_t decommit_mask ; mi_commit_mask_t commit_mask ;)",
    "insertText": "_Atomic(struct mi_segment_s*)"
  },
  {
    "label": "MI_BIN_FULL()",
    "kind": "Method",
    "detail": "Function (size_t slice_entries ; mi_slice_t slices [ MI_SLICES_PER_SEGMENT ] ; } mi_segment_t ; typedef struct mi_tld_s mi_tld_t ; typedef struct mi_page_queue_s { mi_page_t* first ; mi_page_t* last ; size_t block_size ; } mi_page_queue_t ; # define)",
    "insertText": "MI_BIN_FULL(MI_BIN_HUGE+1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t input [ 1 6 ] ; uint32_t output [ 1 6 ] ; int output_available ; } mi_random_ctx_t ; #)",
    "insertText": "if(MI_PADDING)"
  },
  {
    "label": "MI_PADDING_SIZE()",
    "kind": "Method",
    "detail": "Function (uint32_t canary ; uint32_t delta ; } mi_padding_t ; # define)",
    "insertText": "MI_PADDING_SIZE(sizeof(mi_padding_t)) #define MI_PADDING_WSIZE ((MI_PADDING_SIZE + MI_INTPTR_SIZE - 1) / MI_INTPTR_SIZE) #else #define MI_PADDING_SIZE 0 #define MI_PADDING_WSIZE 0 #endif #define MI_PAGES_DIRECT (MI_SMALL_WSIZE_MAX + MI_PADDING_WSIZE + 1)"
  },
  {
    "label": "_Atomic()",
    "kind": "Method",
    "detail": "Function (mi_tld_t* tld ; mi_page_t* pages_free_direct [ MI_PAGES_DIRECT ] ; mi_page_queue_t pages [ MI_BIN_FULL + 1 ] ;)",
    "insertText": "_Atomic(mi_block_t*)"
  },
  {
    "label": "MI_DEBUG_UNINIT()",
    "kind": "Method",
    "detail": "Function (uintptr_t thread_id ; uintptr_t cookie ; uintptr_t keys [ 2 ] ; mi_random_ctx_t random ; size_t page_count ; size_t page_retired_min ; size_t page_retired_max ; mi_heap_t* next ; bool no_reclaim ; } ; # define)",
    "insertText": "MI_DEBUG_UNINIT(0xD0) #define MI_DEBUG_FREED (0xDF) #define MI_DEBUG_PADDING (0xDE) #if (MI_DEBUG) void _mi_assert_fail(const char* assertion, const char* fname, unsigned int line, const char* func)"
  },
  {
    "label": "mi_assert()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "mi_assert(expr) ((expr) ? (void)0 : _mi_assert_fail(#expr,__FILE__,__LINE__,__func__)) #else #define mi_assert(x) #endif #if (MI_DEBUG>1) #define mi_assert_internal mi_assert #else #define mi_assert_internal(x) #endif #if (MI_DEBUG>2) #define mi_assert_expensive mi_assert #else #define mi_assert_expensive(x) #endif #ifndef MI_STAT #if (MI_DEBUG>0)"
  },
  {
    "label": "_mi_stat_increase()",
    "kind": "Method",
    "detail": "Function (int64_t allocated ; int64_t freed ; int64_t peak ; int64_t current ; } mi_stat_count_t ; typedef struct mi_stat_counter_s { int64_t total ; int64_t count ; } mi_stat_counter_t ; typedef struct mi_stats_s { mi_stat_count_t segments ; mi_stat_count_t pages ; mi_stat_count_t reserved ; mi_stat_count_t committed ; mi_stat_count_t reset ; mi_stat_count_t page_committed ; mi_stat_count_t segments_abandoned ; mi_stat_count_t pages_abandoned ; mi_stat_count_t threads ; mi_stat_count_t normal ; mi_stat_count_t huge ; mi_stat_count_t large ; mi_stat_count_t malloc ; mi_stat_count_t segments_cache ; mi_stat_counter_t pages_extended ; mi_stat_counter_t mmap_calls ; mi_stat_counter_t commit_calls ; mi_stat_counter_t page_no_retire ; mi_stat_counter_t searches ; mi_stat_counter_t normal_count ; mi_stat_counter_t huge_count ; mi_stat_counter_t large_count ; # if MI_STAT> 1 mi_stat_count_t normal_bins [ MI_BIN_HUGE + 1 ] ; # endif } mi_stats_t ; void)",
    "insertText": "_mi_stat_increase(mi_stat_count_t* stat, size_t amount)"
  },
  {
    "label": "_mi_stat_decrease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_stat_decrease(mi_stat_count_t* stat, size_t amount)"
  },
  {
    "label": "_mi_stat_counter_increase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_stat_counter_increase(mi_stat_counter_t* stat, size_t amount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(MI_STAT) #define mi_stat_increase(stat,amount) _mi_stat_increase( &(stat), amount) #define mi_stat_decrease(stat,amount) _mi_stat_decrease( &(stat), amount) #define mi_stat_counter_increase(stat,amount) _mi_stat_counter_increase( &(stat), amount) #else #define mi_stat_increase(stat,amount) (void)0 #define mi_stat_decrease(stat,amount) (void)0 #define mi_stat_counter_increase(stat,amount) (void)0 #endif #define mi_heap_stat_counter_increase(heap,stat,amount) mi_stat_counter_increase( (heap)->tld->stats.stat, amount) #define mi_heap_stat_increase(heap,stat,amount) mi_stat_increase( (heap)->tld->stats.stat, amount) #define mi_heap_stat_decrease(heap,stat,amount) mi_stat_decrease( (heap)->tld->stats.stat, amount)"
  },
  {
    "label": "MI_SEGMENT_BIN_MAX()",
    "kind": "Method",
    "detail": "Function (mi_slice_t* first ; mi_slice_t* last ; size_t slice_count ; } mi_span_queue_t ; # define)",
    "insertText": "MI_SEGMENT_BIN_MAX(35)"
  }
]