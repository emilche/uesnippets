[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FParameterPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterPath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAudioParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioParameter"
  },
  {
    "label": "AUDIO_PARAMETER_INTERFACE_MEMBER_DEFINE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IAudioProxyInitializer . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Interface . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" AudioParameter . generated . h \" class UObject ; # define AUDIO_PARAMETER_NAMESPACE_PATH_DELIMITER \" . \" # define)",
    "insertText": "AUDIO_PARAMETER_INTERFACE_MEMBER_DEFINE(Name) (AUDIO_PARAMETER_INTERFACE_NAMESPACE AUDIO_PARAMETER_NAMESPACE_PATH_DELIMITER Name)"
  },
  {
    "label": "CombineNames()",
    "kind": "Method",
    "detail": "Function (struct FParameterPath { const FString NamespaceDelimiter ; FName)",
    "insertText": "CombineNames(FName InLeft, FName InRight)"
  },
  {
    "label": "SplitName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitName(FName InFullName, FName& OutNamespace, FName& OutParameterName)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (None)",
    "insertText": "UMETA(DisplayName = \"Default\"), Boolean, Integer, Float, String, Object, NoneArray UMETA(Hidden, DisplayName = \"Default (Array)\"), BooleanArray UMETA(DisplayName = \"Boolean (Array)\"), IntegerArray UMETA(DisplayName = \"Integer (Array)\"), FloatArray UMETA(DisplayName = \"Float (Array)\"), StringArray UMETA(DisplayName = \"String (Array)\"), ObjectArray UMETA(DisplayName = \"Object (Array)\"), Trigger, COUNT UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FAudioParameter()"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioParameter(FName InName) : ParamName(InName)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, float InValue) : ParamName(InName) , FloatParam(InValue) , ParamType(EAudioParameterType::Float)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, bool InValue) : ParamName(InName) , BoolParam(InValue) , ParamType(EAudioParameterType::Boolean)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, int32 InValue) : ParamName(InName) , IntParam(InValue) , ParamType(EAudioParameterType::Integer)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, UObject* InValue) : ParamName(InName) , ObjectParam(InValue) , ParamType(EAudioParameterType::Object)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, const FString& InValue) : ParamName(InName) , StringParam(InValue) , ParamType(EAudioParameterType::String)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, const TArray<float>& InValue) : ParamName(InName) , ArrayFloatParam(InValue) , ParamType(EAudioParameterType::FloatArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, TArray<float>&& InValue) : ParamName(InName) , ArrayFloatParam(MoveTemp(InValue)) , ParamType(EAudioParameterType::FloatArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, const TArray<bool>& InValue) : ParamName(InName) , ArrayBoolParam(InValue) , ParamType(EAudioParameterType::BooleanArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, TArray<bool>&& InValue) : ParamName(InName) , ArrayBoolParam(MoveTemp(InValue)) , ParamType(EAudioParameterType::BooleanArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, const TArray<int32>& InValue) : ParamName(InName) , ArrayIntParam(InValue) , ParamType(EAudioParameterType::IntegerArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, TArray<int32>&& InValue) : ParamName(InName) , ArrayIntParam(MoveTemp(InValue)) , ParamType(EAudioParameterType::IntegerArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, const TArray<UObject*>& InValue) : ParamName(InName) , ArrayObjectParam(InValue) , ParamType(EAudioParameterType::ObjectArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (} # if 0)",
    "insertText": "FAudioParameter(FName InName, TArray<UObject*>&& InValue) : ParamName(InName) , ArrayObjectParam(MoveTemp(InValue)) , ParamType(EAudioParameterType::ObjectArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "FAudioParameter(FName InName, const TArray<FString>& InValue) : ParamName(InName) , ArrayStringParam(InValue) , ParamType(EAudioParameterType::StringArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, TArray<FString>&& InValue) : ParamName(InName) , ArrayStringParam(MoveTemp(InValue)) , ParamType(EAudioParameterType::StringArray)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioParameter(FName InName, EAudioParameterType Type) : ParamName(InName) , ParamType(Type)"
  },
  {
    "label": "CreateDefaultArray()",
    "kind": "Method",
    "detail": "Function (BoolParam = true ; } } FAudioParameter)",
    "insertText": "CreateDefaultArray(FName InName, int32 InNum)"
  },
  {
    "label": "NewParam()",
    "kind": "Method",
    "detail": "Function (FAudioParameter)",
    "insertText": "NewParam(InName, InNum)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (NewParam . ParamType = EAudioParameterType::NoneArray ; return NewParam ; } void)",
    "insertText": "Merge(const FAudioParameter& InParameter, bool bInTakeName = true, bool bInTakeType = true, bool bInMergeArrayTypes = false)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(TArray<FAudioParameter>&& InParams, TArray<FAudioParameter>& OutParams)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioParameter(FAudioParameter&& InParameter)"
  },
  {
    "label": "FAudioParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioParameter(const FAudioParameter& InParameter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAudioParameter&)",
    "insertText": "operator(const FAudioParameter& InParameter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAudioParameter&)",
    "insertText": "operator(FAudioParameter&& InParameter)"
  },
  {
    "label": "FindParam()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<Audio::IProxyData>> ObjectProxies ; const FAudioParameter*)",
    "insertText": "FindParam(const TArray<FAudioParameter>& InParams, FName InParamName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FAudioParameter* Param = nullptr ;)",
    "insertText": "if(InParamName.IsNone())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Param =& ExistingParam ; break ; } })",
    "insertText": "if(!Param)"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (Param =& OutParams .)",
    "insertText": "AddDefaulted_GetRef()"
  }
]