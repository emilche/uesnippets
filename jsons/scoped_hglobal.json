[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ScopedHGlobal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHGlobal"
  },
  {
    "label": "ScopedHGlobal()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_HGLOBAL_H_ # define BASE_WIN_SCOPED_HGLOBAL_H_ # include<windows . h> # include<stddef . h> namespace base { namespace win { template<class T> class ScopedHGlobal { public :)",
    "insertText": "ScopedHGlobal(HGLOBAL glob) : glob_(glob)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (data_ = static_cast<)",
    "insertText": "T(GlobalLock(glob_))"
  },
  {
    "label": "ScopedHGlobal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedHGlobal(const ScopedHGlobal&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedHGlobal&)",
    "insertText": "operator(const ScopedHGlobal&)"
  },
  {
    "label": "ScopedHGlobal()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedHGlobal()"
  },
  {
    "label": "GlobalUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalUnlock(glob_)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(data_ != 0)"
  }
]