[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FAABB2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAABB2D"
  },
  {
    "label": "FAABB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAABB"
  },
  {
    "label": "FBody",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBody"
  },
  {
    "label": "FCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurve"
  },
  {
    "label": "FEdgeMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdgeMesh"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FFaceMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFaceMesh"
  },
  {
    "label": "FGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGroup"
  },
  {
    "label": "FMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMesh"
  },
  {
    "label": "FModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModel"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FRestrictionCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRestrictionCurve"
  },
  {
    "label": "FShell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShell"
  },
  {
    "label": "FSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurface"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "FVertexMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexMesh"
  },
  {
    "label": "FLinearBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearBoundary"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / System . h \" # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Math / Point . h \" # include \" UI / Visu . h \" # ifdef CADKERNEL_DEV # include \" UI / DefineForDebug . h \" # endif class FString ; namespace UE::CADKernel { class FAABB2D ; class FAABB ; class FBody ; class FCurve ; class FEdgeMesh ; class FEdgeMesh ; class FEntity ; class FFaceMesh ; class FFaceMesh ; class FGroup ; class FMesh ; class FModel ; class FModelMesh ; class FRestrictionCurve ; class FShell ; class FSurface ; class FTopologicalEdge ; class FTopologicalFace ; class FTopologicalLoop ; class FTopologicalVertex ; class FVertexMesh ; class FVertexMesh ; struct FLinearBoundary ; # ifdef CADKERNEL_DEBUG void)",
    "insertText": "Wait(bool bMakeWait = true)"
  },
  {
    "label": "Open3DDebugSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open3DDebugSession(FString name, const TArray<FIdent>& idList = TArray<FIdent>())"
  },
  {
    "label": "Open3DDebugSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open3DDebugSession(bool bIsDisplayed, FString name, const TArray<FIdent>& idList = TArray<FIdent>())"
  },
  {
    "label": "Open3DDebugSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open3DDebugSession(name, idList)"
  },
  {
    "label": "Close3DDebugSession()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "Close3DDebugSession(bool bIsDisplayed = true)"
  },
  {
    "label": "F3DDebugSession()",
    "kind": "Method",
    "detail": "Function (} ; # endif class F3DDebugSession { private : bool bDisplay = true ; public :)",
    "insertText": "F3DDebugSession(FString Name, const TArray<FIdent>& Idents = TArray<FIdent>())"
  },
  {
    "label": "Open3DDebugSession()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "Open3DDebugSession(Name, Idents)"
  },
  {
    "label": "F3DDebugSession()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "F3DDebugSession(bool bInDisplay, FString Name, const TArray<FIdent>& Idents = TArray<FIdent>()) : bDisplay(bInDisplay)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "if(bDisplay)"
  },
  {
    "label": "F3DDebugSession()",
    "kind": "Method",
    "detail": "Function (} # endif } ~)",
    "insertText": "F3DDebugSession()"
  },
  {
    "label": "Close3DDebugSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close3DDebugSession()"
  },
  {
    "label": "Open3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (} # endif } } ; void)",
    "insertText": "Open3DDebugSegment(FIdent Ident)"
  },
  {
    "label": "Close3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close3DDebugSegment()"
  },
  {
    "label": "F3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (class F3DDebugSegment { public :)",
    "insertText": "F3DDebugSegment(FIdent Ident)"
  },
  {
    "label": "Open3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "Open3DDebugSegment(Ident)"
  },
  {
    "label": "F3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (# endif } ~)",
    "insertText": "F3DDebugSegment()"
  },
  {
    "label": "FlushVisu()",
    "kind": "Method",
    "detail": "Function (# endif } } ; void)",
    "insertText": "FlushVisu()"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (template<TPoint> void)",
    "insertText": "DrawPoint(const TPoint& InPoint, EVisuProperty Property = EVisuProperty::BluePoint)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "Get().GetVisu()->DrawPoint(InPoint, Property)"
  },
  {
    "label": "DrawElement()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DrawElement(int32 Dimension, TArray<FPoint>& Points, EVisuProperty Property = EVisuProperty::Element)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (template<TPoint> void)",
    "insertText": "Draw(const TArray<TPoint>& Points, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "Get().GetVisu()->DrawPolyline(Points, Property)"
  },
  {
    "label": "DrawMesh()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DrawMesh(const TSharedPtr<FMesh>& mesh)"
  },
  {
    "label": "DisplayEdgeCriteriaGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayEdgeCriteriaGrid(int32 EdgeId, const TArray<FPoint>& Points3D)"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (template<TPoint> void)",
    "insertText": "DisplayPoint(const TPoint& Point, FIdent Ident)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG F3DDebugSegment)",
    "insertText": "G(Ident)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPoint(Point)"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (# endif } template<TPoint> void)",
    "insertText": "DisplayPoint(const TPoint& Point, EVisuProperty Property = EVisuProperty::BluePoint)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "DrawPoint(Point, Property)"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (# endif } template<TPoint> void)",
    "insertText": "DisplayPoint(const TPoint& Point, EVisuProperty Property, FIdent Ident)"
  },
  {
    "label": "DisplayPoint2DWithScale()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DisplayPoint2DWithScale(const FPoint2D& Point, EVisuProperty Property = EVisuProperty::BluePoint)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "DrawPoint(Point * DisplayScale, Property)"
  },
  {
    "label": "DisplayPoint2DWithScale()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DisplayPoint2DWithScale(const FPoint2D& Point, EVisuProperty Property, FIdent Ident)"
  },
  {
    "label": "DisplayPoints()",
    "kind": "Method",
    "detail": "Function (# endif } template<TPoint> void)",
    "insertText": "DisplayPoints(FString Message, const TArray<TPoint>& Points, EVisuProperty Property = EVisuProperty::BluePoint, bool bDisplay = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "if(!bDisplay)"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(Points[Index], Property)"
  },
  {
    "label": "DisplayProductTree()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DisplayProductTree(const FEntity& RootId)"
  },
  {
    "label": "DisplayProductTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayProductTree(const FModel& Model)"
  },
  {
    "label": "DisplayProductTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayProductTree(const FBody& Body)"
  },
  {
    "label": "DisplayProductTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayProductTree(const FShell& Shell)"
  },
  {
    "label": "DisplayAABB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayAABB(const FAABB& aabb, FIdent Ident = 0)"
  },
  {
    "label": "DisplayAABB2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayAABB2D(const FAABB2D& aabb, FIdent Ident = 0)"
  },
  {
    "label": "DisplayEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayEntity(const FEntity& Entity)"
  },
  {
    "label": "DisplayEntity2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayEntity2D(const FEntity& Entity)"
  },
  {
    "label": "DisplayLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayLoop(const FTopologicalFace& Entity)"
  },
  {
    "label": "DisplayIsoCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayIsoCurve(const FSurface& CarrierSurface, double Coordinate, EIso Type)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FPlane& plane, FIdent Ident = 0)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FCurve& Curve)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FSurface& CarrierSurface)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FGroup& Group)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FModel& Model)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FBody& Body)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FShell& Shell)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FTopologicalEdge& Edge, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FTopologicalFace& Face)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FTopologicalLoop& Loop)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FTopologicalVertex& Vertex, EVisuProperty Property = EVisuProperty::BluePoint)"
  },
  {
    "label": "Display2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2D(const FTopologicalEdge& Edge, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "Display2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2D(const FTopologicalFace& Face)"
  },
  {
    "label": "Display2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2D(const FTopologicalLoop& Loop)"
  },
  {
    "label": "Display2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2D(const FSurface& CarrierSurface)"
  },
  {
    "label": "Display2DWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2DWithScale(const FTopologicalEdge& Edge, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "Display2DWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2DWithScale(const FTopologicalFace& Face)"
  },
  {
    "label": "Display2DWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2DWithScale(const FTopologicalLoop& Loop)"
  },
  {
    "label": "Display2DWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display2DWithScale(const FSurface& CarrierSurface)"
  },
  {
    "label": "DisplayMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayMesh(const FFaceMesh& Mesh)"
  },
  {
    "label": "DisplayMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayMesh(const FEdgeMesh& Mesh)"
  },
  {
    "label": "DisplayMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayMesh(const FVertexMesh& Mesh)"
  },
  {
    "label": "DisplayMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayMesh(const FModel& Model)"
  },
  {
    "label": "DisplayMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayMesh(const FBody& Body)"
  },
  {
    "label": "DisplayMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayMesh(const FShell &Shel)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const FModelMesh& MeshModel)"
  },
  {
    "label": "DisplayControlPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayControlPolygon(const FCurve& Entity)"
  },
  {
    "label": "DisplayControlPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayControlPolygon(const FSurface& Entity)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (template<TPoint> void)",
    "insertText": "DisplaySegment(const TPoint& Point1, const TPoint& Point2, FIdent Ident = 0, EVisuProperty Property = EVisuProperty::BlueCurve, bool bWithOrientation = false)"
  },
  {
    "label": "DrawSegmentOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSegmentOrientation(Point1, Point2, Property)"
  },
  {
    "label": "DrawSegment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DrawSegment(Point1, Point2, Property)"
  },
  {
    "label": "DisplaySegmentWithScale()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<TPoint> void)",
    "insertText": "DisplaySegmentWithScale(const TPoint& Point1, const TPoint& Point2, FIdent Ident = 0, EVisuProperty Property = EVisuProperty::BlueCurve, bool bWithOrientation = false)"
  },
  {
    "label": "DrawSegmentOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSegmentOrientation(Point1 * DisplayScale, Point2 * DisplayScale, Property)"
  },
  {
    "label": "DrawSegment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DrawSegment(Point1 * DisplayScale, Point2 * DisplayScale, Property)"
  },
  {
    "label": "DisplayPolyline()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<TPoint> void)",
    "insertText": "DisplayPolyline(const TArray<TPoint>& Points, EVisuProperty Property)"
  },
  {
    "label": "Open3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG)",
    "insertText": "Open3DDebugSegment(0)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(Points, Property)"
  },
  {
    "label": "DisplayPolylineWithScale()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DisplayPolylineWithScale(const TArray<FPoint2D>& Points, EVisuProperty Property)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG TArray<FPoint2D> PointsWithScale = Points ;)",
    "insertText": "for(FPoint2D& Point : PointsWithScale)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(PointsWithScale, Property)"
  },
  {
    "label": "DisplayOrientedPolyline()",
    "kind": "Method",
    "detail": "Function (# endif } template<TPoint> void)",
    "insertText": "DisplayOrientedPolyline(const TArray<TPoint>& Points, EVisuProperty Property)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(Points[Index - 1], Points[Index], Index, Property, true)"
  },
  {
    "label": "DrawQuadripode()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DrawQuadripode(double Height, double Base, FPoint& Centre, FPoint& Direction, EVisuProperty Property)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FTopologicalEdge& Edge, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FTopologicalFace& Face)"
  },
  {
    "label": "Draw2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw2D(const FTopologicalFace& Face)"
  },
  {
    "label": "Draw2DWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw2DWithScale(const FTopologicalFace& Face)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FShell& Shell)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FCurve& Curve, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FCurve& Curve, const FLinearBoundary& Boundary, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FLinearBoundary& Boundary, const FRestrictionCurve& Curve, EVisuProperty Property = EVisuProperty::BlueCurve)"
  },
  {
    "label": "DrawSegment()",
    "kind": "Method",
    "detail": "Function (template<TPoint> void)",
    "insertText": "DrawSegment(const TPoint& Point1, const TPoint& Point2, EVisuProperty Property = EVisuProperty::Element)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG TArray<FPoint> Points ; Points .)",
    "insertText": "Add(Point1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Add(Point2)"
  },
  {
    "label": "DrawSegmentOrientation()",
    "kind": "Method",
    "detail": "Function (# endif } template<TPoint> void)",
    "insertText": "DrawSegmentOrientation(const TPoint& Point1, const TPoint& Point2, EVisuProperty Property = EVisuProperty::Element)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG double Length = Point1 .)",
    "insertText": "Distance(Point2)"
  },
  {
    "label": "DrawQuadripode()",
    "kind": "Method",
    "detail": "Function (FPoint Tangent = Point2 - Point1 ;)",
    "insertText": "DrawQuadripode(Height, Base, Middle, Tangent, Property)"
  },
  {
    "label": "DrawIsoCurves()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DrawIsoCurves(const FTopologicalFace& Face)"
  }
]