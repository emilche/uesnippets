[
  {
    "label": "_PyObject_IMMORTAL_INIT()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_OBJECT_H # define Py_INTERNAL_OBJECT_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # include<stdbool . h> # include \" pycore_gc . h \" # include \" pycore_interp . h \" # include \" pycore_pystate . h \" # include \" pycore_runtime . h \" # define)",
    "insertText": "_PyObject_IMMORTAL_INIT(type)"
  },
  {
    "label": "_PyVarObject_IMMORTAL_INIT()",
    "kind": "Method",
    "detail": "Function (\\ . ob_refcnt = 9 9 9 9 9 9 9 9 9,\\ . ob_type = type,\\ } # define)",
    "insertText": "_PyVarObject_IMMORTAL_INIT(type, size)"
  },
  {
    "label": "_PyObject_IMMORTAL_INIT()",
    "kind": "Method",
    "detail": "Function (\\ . ob_base =)",
    "insertText": "_PyObject_IMMORTAL_INIT(type), \\ .ob_size = size, \\ } PyAPI_FUNC(void) _Py_NO_RETURN _Py_FatalRefcountErrorFunc( const char *func, const char *message)"
  },
  {
    "label": "_Py_FatalRefcountError()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_Py_FatalRefcountError(message) _Py_FatalRefcountErrorFunc(__func__, message) static inline void _Py_DECREF_SPECIALIZED(PyObject *op, const destructor destruct)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef Py_REF_DEBUG _Py_RefTotal - - ; # endif)",
    "insertText": "if(--op->ob_refcnt != 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(op->ob_refcnt > 0)"
  },
  {
    "label": "_Py_ForgetReference()",
    "kind": "Method",
    "detail": "Function (} else { # ifdef Py_TRACE_REFS)",
    "insertText": "_Py_ForgetReference(op)"
  },
  {
    "label": "destruct()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "destruct(op)"
  },
  {
    "label": "_Py_DECREF_NO_DEALLOC()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "_Py_DECREF_NO_DEALLOC(PyObject *op)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef Py_REF_DEBUG _Py_RefTotal - - ; # endif op -> ob_refcnt - - ; # ifdef Py_DEBUG)",
    "insertText": "if(op->ob_refcnt <= 0)"
  },
  {
    "label": "_Py_FatalRefcountError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_FatalRefcountError(\"Expected a positive remaining refcount\")"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (} # endif })",
    "insertText": "PyAPI_FUNC(int) _PyType_CheckConsistency(PyTypeObject *type)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyDict_CheckConsistency(PyObject *mp, int check_content)"
  },
  {
    "label": "_PyTraceMalloc_NewReference()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyTraceMalloc_NewReference(PyObject *op)"
  },
  {
    "label": "_PyType_HasFeature()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyType_HasFeature(PyTypeObject *type, unsigned long feature)"
  },
  {
    "label": "_PyType_InitCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_PyType_InitCache(PyInterpreterState *interp)"
  },
  {
    "label": "_PyObject_Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_Init(PyObject *op, PyTypeObject *typeobj)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(op != NULL)"
  },
  {
    "label": "Py_SET_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Py_SET_TYPE(op, typeobj)"
  },
  {
    "label": "Py_INCREF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Py_INCREF(typeobj)"
  },
  {
    "label": "_Py_NewReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "_Py_NewReference(op)"
  },
  {
    "label": "_PyObject_InitVar()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_PyObject_InitVar(PyVarObject *op, PyTypeObject *typeobj, Py_ssize_t size)"
  },
  {
    "label": "Py_SET_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Py_SET_SIZE(op, size)"
  },
  {
    "label": "_PyObject_Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_Init((PyObject *)op, typeobj)"
  },
  {
    "label": "_PyObject_GC_TRACK()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_PyObject_GC_TRACK(#ifndef NDEBUG const char *filename, int lineno, #endif PyObject *op)"
  },
  {
    "label": "_PyObject_ASSERT_FROM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_ASSERT_FROM(op, !_PyObject_GC_IS_TRACKED(op), \"object already tracked by the garbage collector\", filename, lineno, __func__)"
  },
  {
    "label": "_Py_AS_GC()",
    "kind": "Method",
    "detail": "Function (PyGC_Head* gc =)",
    "insertText": "_Py_AS_GC(op)"
  },
  {
    "label": "_PyObject_ASSERT_FROM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_ASSERT_FROM(op, (gc->_gc_prev & _PyGC_PREV_MASK_COLLECTING) == 0, \"object is in generation which is garbage collected\", filename, lineno, __func__)"
  },
  {
    "label": "_PyInterpreterState_GET()",
    "kind": "Method",
    "detail": "Function (PyInterpreterState* interp =)",
    "insertText": "_PyInterpreterState_GET()"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (PyGC_Head* generation0 = interp -> gc . generation0 ; PyGC_Head*)",
    "insertText": "last(PyGC_Head*)(generation0->_gc_prev)"
  },
  {
    "label": "_PyGCHead_SET_NEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyGCHead_SET_NEXT(last, gc)"
  },
  {
    "label": "_PyGCHead_SET_PREV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyGCHead_SET_PREV(gc, last)"
  },
  {
    "label": "_PyGCHead_SET_NEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyGCHead_SET_NEXT(gc, generation0)"
  },
  {
    "label": "_gc_prev()",
    "kind": "Method",
    "detail": "Function (generation0 ->)",
    "insertText": "_gc_prev(uintptr_t)"
  },
  {
    "label": "_PyObject_GC_UNTRACK()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_PyObject_GC_UNTRACK(#ifndef NDEBUG const char *filename, int lineno, #endif PyObject *op)"
  },
  {
    "label": "_PyObject_ASSERT_FROM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_ASSERT_FROM(op, _PyObject_GC_IS_TRACKED(op), \"object not tracked by the garbage collector\", filename, lineno, __func__)"
  },
  {
    "label": "_PyGCHead_PREV()",
    "kind": "Method",
    "detail": "Function (PyGC_Head* prev =)",
    "insertText": "_PyGCHead_PREV(gc)"
  },
  {
    "label": "_PyGCHead_NEXT()",
    "kind": "Method",
    "detail": "Function (PyGC_Head* next =)",
    "insertText": "_PyGCHead_NEXT(gc)"
  },
  {
    "label": "_PyGCHead_SET_NEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyGCHead_SET_NEXT(prev, next)"
  },
  {
    "label": "_PyGCHead_SET_PREV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyGCHead_SET_PREV(next, prev)"
  },
  {
    "label": "_PyObject_GC_TRACK()",
    "kind": "Method",
    "detail": "Function (gc -> _gc_next = 0 ; gc -> _gc_prev& = _PyGC_PREV_MASK_FINALIZED ; } # ifdef NDEBUG # define)",
    "insertText": "_PyObject_GC_TRACK(op) \\ _PyObject_GC_TRACK(_PyObject_CAST(op)) # define _PyObject_GC_UNTRACK(op) \\ _PyObject_GC_UNTRACK(_PyObject_CAST(op)) #else # define _PyObject_GC_TRACK(op) \\ _PyObject_GC_TRACK(__FILE__, __LINE__, _PyObject_CAST(op)) # define _PyObject_GC_UNTRACK(op) \\ _PyObject_GC_UNTRACK(__FILE__, __LINE__, _PyObject_CAST(op)) #endif #ifdef Py_REF_DEBUG extern void _PyDebug_PrintTotalRefs(void)"
  },
  {
    "label": "_Py_AddToAllObjects()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef Py_TRACE_REFS void)",
    "insertText": "_Py_AddToAllObjects(PyObject *op, int force)"
  },
  {
    "label": "_Py_PrintReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_PrintReferences(FILE *)"
  },
  {
    "label": "_Py_PrintReferenceAddresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_PrintReferenceAddresses(FILE *)"
  },
  {
    "label": "_PyObject_GET_WEAKREFS_LISTPTR()",
    "kind": "Method",
    "detail": "Function (# endif PyObject**)",
    "insertText": "_PyObject_GET_WEAKREFS_LISTPTR(PyObject *op)"
  },
  {
    "label": "Py_TYPE()",
    "kind": "Method",
    "detail": "Function (tp_weaklistoffset)",
    "insertText": "Py_TYPE(op)"
  },
  {
    "label": "_PyObject_IS_GC()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "_PyObject_IS_GC(PyObject *obj)"
  },
  {
    "label": "_PyType_IS_GC()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "_PyType_IS_GC(t) _PyType_HasFeature((t), Py_TPFLAGS_HAVE_GC) static inline size_t _PyType_PreHeaderSize(PyTypeObject *tp)"
  },
  {
    "label": "_PyObject_GC_Link()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_PyObject_GC_Link(PyObject *op)"
  },
  {
    "label": "_Py_CheckSlotResult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_CheckSlotResult(PyObject *obj, const char *slot_name, int success)"
  },
  {
    "label": "_PyType_IsReady()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_PyType_IsReady(type) ((type)->tp_dict != NULL) static inline int _PyType_SUPPORTS_WEAKREFS(PyTypeObject *type)"
  },
  {
    "label": "_PyType_AllocNoTrack()",
    "kind": "Method",
    "detail": "Function (} PyObject*)",
    "insertText": "_PyType_AllocNoTrack(PyTypeObject *type, Py_ssize_t nitems)"
  },
  {
    "label": "_PyObject_InitializeDict()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyObject_InitializeDict(PyObject *obj)"
  },
  {
    "label": "_PyObject_StoreInstanceAttribute()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyObject_StoreInstanceAttribute(PyObject *obj, PyDictValues *values, PyObject *name, PyObject *value)"
  },
  {
    "label": "_PyObject_GetInstanceAttribute()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyObject_GetInstanceAttribute(PyObject *obj, PyDictValues *values, PyObject *name)"
  },
  {
    "label": "_PyObject_ValuesPointer()",
    "kind": "Method",
    "detail": "Function (PyDictValues**)",
    "insertText": "_PyObject_ValuesPointer(PyObject *obj)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Py_TYPE(obj)->tp_flags & Py_TPFLAGS_MANAGED_DICT)"
  },
  {
    "label": "_PyObject_ManagedDictPointer()",
    "kind": "Method",
    "detail": "Function (} PyObject**)",
    "insertText": "_PyObject_ManagedDictPointer(PyObject *obj)"
  },
  {
    "label": "MANAGED_DICT_OFFSET()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "MANAGED_DICT_OFFSET(((int)sizeof(PyObject *))*-3) extern PyObject ** _PyObject_DictPointer(PyObject *)"
  },
  {
    "label": "_PyObject_VisitInstanceAttributes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyObject_VisitInstanceAttributes(PyObject *self, visitproc visit, void *arg)"
  },
  {
    "label": "_PyObject_ClearInstanceAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_ClearInstanceAttributes(PyObject *self)"
  },
  {
    "label": "_PyObject_FreeInstanceAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_FreeInstanceAttributes(PyObject *self)"
  },
  {
    "label": "_PyObject_IsInstanceDictEmpty()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyObject_IsInstanceDictEmpty(PyObject *)"
  },
  {
    "label": "_PyType_GetSubclasses()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyType_GetSubclasses(PyTypeObject *)"
  },
  {
    "label": "_PyHeapType_GET_MEMBERS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_PyHeapType_GET_MEMBERS(etype) \\ ((PyMemberDef *)(((char *)etype) + Py_TYPE(etype)->tp_basicsize)) PyAPI_FUNC(PyObject *) _PyObject_LookupSpecial(PyObject *, PyObject *)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__EMSCRIPTEN__) && defined(PY_CALL_TRAMPOLINE) #define _PyCFunction_TrampolineCall(meth, self, args) \\ _PyCFunctionWithKeywords_TrampolineCall( \\ (*(PyCFunctionWithKeywords)(void(*)(void))meth), self, args, NULL) extern PyObject* _PyCFunctionWithKeywords_TrampolineCall( PyCFunctionWithKeywords meth, PyObject *, PyObject *, PyObject *)"
  }
]