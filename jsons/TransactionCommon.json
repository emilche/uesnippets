[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FPersistentObjectRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentObjectRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSerializedTaggedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedTaggedData"
  },
  {
    "label": "FSerializedObjectData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedObjectData"
  },
  {
    "label": "FSerializedObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedObjectInfo"
  },
  {
    "label": "FSerializedObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedObject"
  },
  {
    "label": "FDiffableObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffableObject"
  },
  {
    "label": "FSerializedObjectDataReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedObjectDataReader"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FSerializedObjectDataWriterCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedObjectDataWriterCommon"
  },
  {
    "label": "FSerializedObjectDataWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedObjectDataWriter"
  },
  {
    "label": "FDiffableObjectDataWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffableObjectDataWriter"
  },
  {
    "label": "FCachedPropertyKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedPropertyKey"
  },
  {
    "label": "FCachedTaggedDataEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedTaggedDataEntry"
  },
  {
    "label": "FGetDiffableObjectOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGetDiffableObjectOptions"
  },
  {
    "label": "FGenerateObjectDiffOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateObjectDiffOptions"
  },
  {
    "label": "FDiffableObjectArchetypeCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffableObjectArchetypeCache"
  },
  {
    "label": "FPersistentObjectRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Serialization / ArchiveUObject . h \" # include \" Serialization / ArchiveSerializedPropertyChain . h \" # include \" Templates / TypeHash . h \" # include \" Misc / TransactionObjectEvent . h \" # include \" Containers / SortedMap . h \" class FReferenceCollector ; namespace UE::Transaction { struct FPersistentObjectRef { public :)",
    "insertText": "FPersistentObjectRef()"
  },
  {
    "label": "FPersistentObjectRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPersistentObjectRef(UObject* InObject)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FPersistentObjectRef& ReferencedObject)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ar(std::underlying_type_t<EReferenceType>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<ReferencedObject . RootObject ; Ar<<ReferencedObject . SubObjectHierarchyIDs ; return Ar ; } bool)",
    "insertText": "operator(const FPersistentObjectRef& LHS, const FPersistentObjectRef& RHS)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPersistentObjectRef& InObjRef)"
  },
  {
    "label": "IsRootObjectReference()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRootObjectReference()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "FromOffsetAndSize()",
    "kind": "Method",
    "detail": "Function (private : enum class EReferenceType : uint8 { Unknown,RootObject,SubObject,} ; EReferenceType ReferenceType = EReferenceType::Unknown ; TObjectPtr<UObject> RootObject = nullptr ; TArray<FName,TInlineAllocator<4>> SubObjectHierarchyIDs ; TWeakObjectPtr<UObject> CachedRootObject ; TArray<TWeakObjectPtr<UObject>,TInlineAllocator<4>> CachedSubObjectHierarchy ; } ; struct FSerializedTaggedData { public : FSerializedTaggedData)",
    "insertText": "FromOffsetAndSize(const int64 InOffset, const int64 InSize)"
  },
  {
    "label": "FromStartAndEnd()",
    "kind": "Method",
    "detail": "Function (FSerializedTaggedData)",
    "insertText": "FromStartAndEnd(const int64 InStart, const int64 InEnd)"
  },
  {
    "label": "AppendSerializedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSerializedData(const int64 InOffset, const int64 InSize)"
  },
  {
    "label": "AppendSerializedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSerializedData(const FSerializedTaggedData& InData)"
  },
  {
    "label": "HasSerializedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSerializedData()"
  },
  {
    "label": "GetStart()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetStart()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FSerializedObjectData& SerializedData)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<SerializedData . Data ; return Ar ; } bool)",
    "insertText": "operator(const FSerializedObjectData& LHS, const FSerializedObjectData& RHS)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Read(void* Dest, int64 Offset, int64 Num)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(const void* Src, int64 Offset, int64 Num)"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetPtr(int64 Offset)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Reset()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Num()"
  },
  {
    "label": "FSerializedObjectInfo()",
    "kind": "Method",
    "detail": "Function (} private : TArray64<uint8> Data ; } ; struct FSerializedObjectInfo : public FTransactionObjectId { public :)",
    "insertText": "FSerializedObjectInfo()"
  },
  {
    "label": "FSerializedObjectInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSerializedObjectInfo(const UObject* InObject)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(InObject)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObject(const UObject* InObject)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bIsPendingKill = !)",
    "insertText": "IsValid(InObject)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (bIsPendingKill = false ; } void)",
    "insertText": "Swap(FSerializedObjectInfo& Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Other)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(bIsPendingKill, Other.bIsPendingKill)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(FSerializedObject& Other)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(SerializedData, Other.SerializedData)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ReferencedObjects, Other.ReferencedObjects)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ReferencedNames, Other.ReferencedNames)"
  },
  {
    "label": "FPersistentObjectRef()",
    "kind": "Method",
    "detail": "Function (ObjectArchetype =)",
    "insertText": "FPersistentObjectRef(InObject->GetArchetype())"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (ObjectFlags = InObject ->)",
    "insertText": "GetFlags()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(FDiffableObject& Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (ObjectInfo .)",
    "insertText": "Swap(Other.ObjectInfo)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectArchetype, Other.ObjectArchetype)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectFlags, Other.ObjectFlags)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(SerializedTaggedData, Other.SerializedTaggedData)"
  },
  {
    "label": "FSerializedObjectDataReader()",
    "kind": "Method",
    "detail": "Function (} FSerializedObjectInfo ObjectInfo ; FPersistentObjectRef ObjectArchetype ; EObjectFlags ObjectFlags = RF_NoFlags ; FSerializedObjectData SerializedData ; TSortedMap<FName,FSerializedTaggedData,FDefaultAllocator,FNameFastLess> SerializedTaggedData ; } ; const FName TaggedDataKey_UnknownData ; const FName TaggedDataKey_ScriptData ; class FSerializedObjectDataReader : public FArchiveUObject { public :)",
    "insertText": "FSerializedObjectDataReader(const FSerializedObject& InSerializedObject)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (Offset = InPos ; } int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Serialize(void* SerData, int64 Num)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using FArchiveUObject::operator<<; FArchive&)",
    "insertText": "operator(class FName& N)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(class UObject*& Res)"
  },
  {
    "label": "FSerializedObjectDataWriterCommon()",
    "kind": "Method",
    "detail": "Function (const FSerializedObject& SerializedObject ; int64 Offset = 0 ; } ; namespace Internal { class FSerializedObjectDataWriterCommon : public FArchiveUObject { public :)",
    "insertText": "FSerializedObjectDataWriterCommon(FSerializedObjectData& InSerializedData)"
  },
  {
    "label": "OnDataSerialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataSerialized(int64 InOffset, int64 InNum)"
  },
  {
    "label": "FSerializedObjectDataWriter()",
    "kind": "Method",
    "detail": "Function (} FSerializedObjectData& SerializedData ; int64 Offset = 0 ; } ; } class FSerializedObjectDataWriter : public Internal::FSerializedObjectDataWriterCommon { public :)",
    "insertText": "FSerializedObjectDataWriter(FSerializedObject& InSerializedObject)"
  },
  {
    "label": "FDiffableObjectDataWriter()",
    "kind": "Method",
    "detail": "Function (FSerializedObject& SerializedObject ; int64 Offset = 0 ; TMap<UObject*,int32> ObjectMap ; TMap<FName,int32> NameMap ; } ; class FDiffableObjectDataWriter : public Internal::FSerializedObjectDataWriterCommon { public :)",
    "insertText": "FDiffableObjectDataWriter(FDiffableObject& InDiffableObject, TArrayView<const FProperty*> InPropertiesToSerialize = TArrayView<const FProperty*>())"
  },
  {
    "label": "GetTaggedDataKey()",
    "kind": "Method",
    "detail": "Function (protected : FName)",
    "insertText": "GetTaggedDataKey()"
  },
  {
    "label": "DoesObjectMatchDiffableObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesObjectMatchDiffableObject(const UObject* Obj)"
  },
  {
    "label": "ShouldSkipProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipProperty(const FProperty* InProperty)"
  },
  {
    "label": "MarkScriptSerializationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScriptSerializationStart(const UObject* Obj)"
  },
  {
    "label": "MarkScriptSerializationEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScriptSerializationEnd(const UObject* Obj)"
  },
  {
    "label": "SyncCache()",
    "kind": "Method",
    "detail": "Function (private : struct FCachedPropertyKey { public : FName)",
    "insertText": "SyncCache(const FArchiveSerializedPropertyChain& InPropertyChain)"
  },
  {
    "label": "SyncCache()",
    "kind": "Method",
    "detail": "Function (private : FName CachedKey ; uint32 LastUpdateCount = 0 ; } ; struct FCachedTaggedDataEntry { public : FSerializedTaggedData&)",
    "insertText": "SyncCache(FDiffableObject& InDiffableObject, const FName InSerializedTaggedDataKey)"
  },
  {
    "label": "IsGeneratingDiffableObject()",
    "kind": "Method",
    "detail": "Function (private : FName CachedKey ; FSerializedTaggedData* CachedEntryPtr = nullptr ; } ; FDiffableObject& DiffableObject ; TArrayView<const FProperty*> PropertiesToSerialize ; bool bIsPerformingScriptSerialization = false ; bool bWasUsingTaggedDataKey_UnknownData = false ; bool bWasUsingTaggedDataKey_ScriptData = false ; int32 TaggedDataKeyIndex_UnknownData = 0 ; int32 TaggedDataKeyIndex_ScriptData = 0 ; FCachedPropertyKey CachedSerializedTaggedPropertyKey ; FCachedTaggedDataEntry CachedSerializedTaggedDataEntry ; } ; namespace DiffUtil { bool)",
    "insertText": "IsGeneratingDiffableObject(const FArchive& Ar)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (enum class EGetDiffableObjectMode : uint8 { SerializeObject,SerializeProperties,Custom,} ; struct FGetDiffableObjectOptions { EGetDiffableObjectMode ObjectSerializationMode = EGetDiffableObjectMode::SerializeObject ; TFunction<)",
    "insertText": "void(FDiffableObjectDataWriter&)"
  },
  {
    "label": "GetDiffableObject()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FProperty*> PropertiesToSerialize ; bool bSerializeEvenIfPendingKill = false ; } ; FDiffableObject)",
    "insertText": "GetDiffableObject(const UObject* Object, const FGetDiffableObjectOptions& Options = FGetDiffableObjectOptions())"
  },
  {
    "label": "FGenerateObjectDiffOptions()",
    "kind": "Method",
    "detail": "Function (struct FGenerateObjectDiffOptions {)",
    "insertText": "FGenerateObjectDiffOptions()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (ArchetypeOptions . bSerializeEvenIfPendingKill = true ; } FGetDiffableObjectOptions ArchetypeOptions ; TFunction<)",
    "insertText": "bool(FName)"
  },
  {
    "label": "GetArchetypeDiffableObject()",
    "kind": "Method",
    "detail": "Function (bool bFullDiff = true ; bool bDiffDataEvenIfPendingKill = false ; } ; class FDiffableObjectArchetypeCache { public : const FDiffableObject&)",
    "insertText": "GetArchetypeDiffableObject(const UObject* Archetype, const FGetDiffableObjectOptions& Options)"
  },
  {
    "label": "GenerateObjectDiff()",
    "kind": "Method",
    "detail": "Function (private : TMap<const UObject*,FDiffableObject> ArchetypeDiffableObjects ; } ; FTransactionObjectDeltaChange)",
    "insertText": "GenerateObjectDiff(const FDiffableObject& OldDiffableObject, const FDiffableObject& NewDiffableObject, const FGenerateObjectDiffOptions& DiffOptions = FGenerateObjectDiffOptions(), FDiffableObjectArchetypeCache* ArchetypeCache = nullptr)"
  },
  {
    "label": "GenerateObjectDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateObjectDiff(const FDiffableObject& OldDiffableObject, const FDiffableObject& NewDiffableObject, FTransactionObjectDeltaChange& OutDeltaChange, const FGenerateObjectDiffOptions& DiffOptions = FGenerateObjectDiffOptions(), FDiffableObjectArchetypeCache* ArchetypeCache = nullptr)"
  }
]