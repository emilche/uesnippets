[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_BidirectionalIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator1"
  },
  {
    "label": "_BidirectionalIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_COPY_BACKWARD_H # define _LIBCPP___ALGORITHM_COPY_BACKWARD_H # include<__algorithm / copy . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / ranges_copy . h> # include<__algorithm / unwrap_iter . h> # include<__concepts / same_as . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__iterator / reverse_iterator . h> # include<__ranges / subrange . h> # include<__utility / move . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _InputIterator, class _OutputIterator, __enable_if_t<is_same<_AlgPolicy, _ClassicAlgPolicy>::value, int> = 0> inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_InputIterator, _OutputIterator> __copy_backward(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"
  },
  {
    "label": "__copy()",
    "kind": "Method",
    "detail": "Function (auto __ret =)",
    "insertText": "__copy(__unconstrained_reverse_iterator<_InputIterator>(__last), __unconstrained_reverse_iterator<_InputIterator>(__first), __unconstrained_reverse_iterator<_OutputIterator>(__result))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 7&& !)",
    "insertText": "defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES) template <class _AlgPolicy, class _Iter1, class _Sent1, class _Iter2, __enable_if_t<is_same<_AlgPolicy, _RangeAlgPolicy>::value, int> = 0> _LIBCPP_HIDE_FROM_ABI constexpr pair<_Iter1, _Iter2> __copy_backward(_Iter1 __first, _Sent1 __last, _Iter2 __result)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto __last_iter = _IterOps<_AlgPolicy)",
    "insertText": "next(__first, std::move(__last))"
  },
  {
    "label": "__reverse_range()",
    "kind": "Method",
    "detail": "Function (auto __reverse_range =)",
    "insertText": "__reverse_range(std::ranges::subrange(std::move(__first), __last_iter))"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (auto __ret =)",
    "insertText": "copy(std::move(__reverse_range), std::make_reverse_iterator(__result))"
  },
  {
    "label": "copy_backward()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _BidirectionalIterator1,class _BidirectionalIterator2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _BidirectionalIterator2)",
    "insertText": "copy_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, _BidirectionalIterator2 __result)"
  }
]