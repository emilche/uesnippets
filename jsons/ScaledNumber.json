[
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "ScaledNumberBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScaledNumberBase"
  },
  {
    "label": "ScaledNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScaledNumber"
  },
  {
    "label": "IntT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntT"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "getWidth()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_SCALEDNUMBER_H # define LLVM_SUPPORT_SCALEDNUMBER_H # include \" llvm / Support / MathExtras . h \" # include<algorithm> # include<cstdint> # include<limits> # include<string> # include<tuple> # include<utility> namespace llvm { namespace ScaledNumbers { const int32_t MaxScale = 1 6 3 8 3 ; const int32_t MinScale = - 1 6 3 8 2 ; template<class DigitsT> int)",
    "insertText": "getWidth()"
  },
  {
    "label": "getRounded()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> std::pair<DigitsT,int16_t>)",
    "insertText": "getRounded(DigitsT Digits, int16_t Scale, bool ShouldRound)"
  },
  {
    "label": "getRounded32()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint32_t,int16_t>)",
    "insertText": "getRounded32(uint32_t Digits, int16_t Scale, bool ShouldRound)"
  },
  {
    "label": "getRounded64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "getRounded64(uint64_t Digits, int16_t Scale, bool ShouldRound)"
  },
  {
    "label": "getAdjusted()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> std::pair<DigitsT,int16_t>)",
    "insertText": "getAdjusted(uint64_t Digits, int16_t Scale = 0)"
  },
  {
    "label": "DigitsT()",
    "kind": "Method",
    "detail": "Function (const int Width = getWidth<)",
    "insertText": "DigitsT()"
  },
  {
    "label": "countLeadingZeros()",
    "kind": "Method",
    "detail": "Function (int Shift = 6 4 - Width -)",
    "insertText": "countLeadingZeros(Digits)"
  },
  {
    "label": "getAdjusted32()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint32_t,int16_t>)",
    "insertText": "getAdjusted32(uint64_t Digits, int16_t Scale = 0)"
  },
  {
    "label": "getAdjusted64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "getAdjusted64(uint64_t Digits, int16_t Scale = 0)"
  },
  {
    "label": "multiply64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "multiply64(uint64_t LHS, uint64_t RHS)"
  },
  {
    "label": "getProduct()",
    "kind": "Method",
    "detail": "Function (template<class DigitsT> std::pair<DigitsT,int16_t>)",
    "insertText": "getProduct(DigitsT LHS, DigitsT RHS)"
  },
  {
    "label": "getProduct32()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint32_t,int16_t>)",
    "insertText": "getProduct32(uint32_t LHS, uint32_t RHS)"
  },
  {
    "label": "getProduct64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "getProduct64(uint64_t LHS, uint64_t RHS)"
  },
  {
    "label": "divide64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "divide64(uint64_t Dividend, uint64_t Divisor)"
  },
  {
    "label": "divide32()",
    "kind": "Method",
    "detail": "Function (std::pair<uint32_t,int16_t>)",
    "insertText": "divide32(uint32_t Dividend, uint32_t Divisor)"
  },
  {
    "label": "getQuotient()",
    "kind": "Method",
    "detail": "Function (template<class DigitsT> std::pair<DigitsT,int16_t>)",
    "insertText": "getQuotient(DigitsT Dividend, DigitsT Divisor)"
  },
  {
    "label": "getQuotient32()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint32_t,int16_t>)",
    "insertText": "getQuotient32(uint32_t Dividend, uint32_t Divisor)"
  },
  {
    "label": "getQuotient64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "getQuotient64(uint64_t Dividend, uint64_t Divisor)"
  },
  {
    "label": "getLgImpl()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> std::pair<int32_t,int>)",
    "insertText": "getLgImpl(DigitsT Digits, int16_t Scale)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int32_t LocalFloor =)",
    "insertText": "sizeof(Digits) * 8 - countLeadingZeros(Digits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32_t Floor = Scale + LocalFloor ;)",
    "insertText": "if(Digits == UINT64_C(1) << LocalFloor) return std::make_pair(Floor, 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LocalFloor >= 1)"
  },
  {
    "label": "UINT64_C()",
    "kind": "Method",
    "detail": "Function (bool Round = Digits&)",
    "insertText": "UINT64_C(1) << (LocalFloor - 1)"
  },
  {
    "label": "getLg()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> int32_t)",
    "insertText": "getLg(DigitsT Digits, int16_t Scale)"
  },
  {
    "label": "getLgFloor()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> int32_t)",
    "insertText": "getLgFloor(DigitsT Digits, int16_t Scale)"
  },
  {
    "label": "getLgImpl()",
    "kind": "Method",
    "detail": "Function (auto Lg =)",
    "insertText": "getLgImpl(Digits, Scale)"
  },
  {
    "label": "getLgCeiling()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> int32_t)",
    "insertText": "getLgCeiling(DigitsT Digits, int16_t Scale)"
  },
  {
    "label": "compareImpl()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compareImpl(uint64_t L, uint64_t R, int ScaleDiff)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (template<class DigitsT> int)",
    "insertText": "compare(DigitsT LDigits, int16_t LScale, DigitsT RDigits, int16_t RScale)"
  },
  {
    "label": "getLgFloor()",
    "kind": "Method",
    "detail": "Function (int32_t lgL =)",
    "insertText": "getLgFloor(LDigits, LScale), lgR = getLgFloor(RDigits, RScale)"
  },
  {
    "label": "matchScales()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> int16_t)",
    "insertText": "matchScales(DigitsT &LDigits, int16_t &LScale, DigitsT &RDigits, int16_t &RScale)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (int32_t ScaleDiff =)",
    "insertText": "int32_t(LScale)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (RDigits = 0 ; return LScale ; } int32_t ShiftL = std::min<)",
    "insertText": "int32_t(countLeadingZeros(LDigits), ScaleDiff)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ShiftL < getWidth<DigitsT>() && \"can't shift more than width\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32_t ShiftR = ScaleDiff - ShiftL ;)",
    "insertText": "if(ShiftR >= getWidth<DigitsT>())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (RDigits = 0 ; return LScale ; } LDigits<<= ShiftL ; RDigits>> = ShiftR ; LScale - = ShiftL ; RScale + = ShiftR ;)",
    "insertText": "assert(LScale == RScale && \"scales should match\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LScale < INT16_MAX && \"scale too large\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RScale < INT16_MAX && \"scale too large\")"
  },
  {
    "label": "matchScales()",
    "kind": "Method",
    "detail": "Function (int16_t Scale =)",
    "insertText": "matchScales(LDigits, LScale, RDigits, RScale)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DigitsT Sum = LDigits + RDigits ;)",
    "insertText": "if(Sum >= RDigits) return std::make_pair(Sum, Scale)"
  },
  {
    "label": "DigitsT()",
    "kind": "Method",
    "detail": "Function (DigitsT HighBit =)",
    "insertText": "DigitsT(1) << (getWidth<DigitsT>() - 1)"
  },
  {
    "label": "getSum32()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint32_t,int16_t>)",
    "insertText": "getSum32(uint32_t LDigits, int16_t LScale, uint32_t RDigits, int16_t RScale)"
  },
  {
    "label": "getSum64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "getSum64(uint64_t LDigits, int16_t LScale, uint64_t RDigits, int16_t RScale)"
  },
  {
    "label": "getDifference()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> std::pair<DigitsT,int16_t>)",
    "insertText": "getDifference(DigitsT LDigits, int16_t LScale, DigitsT RDigits, int16_t RScale)"
  },
  {
    "label": "getLgFloor()",
    "kind": "Method",
    "detail": "Function (const auto RLgFloor =)",
    "insertText": "getLgFloor(SavedRDigits, SavedRScale)"
  },
  {
    "label": "getDifference32()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint32_t,int16_t>)",
    "insertText": "getDifference32(uint32_t LDigits, int16_t LScale, uint32_t RDigits, int16_t RScale)"
  },
  {
    "label": "getDifference64()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,int16_t>)",
    "insertText": "getDifference64(uint64_t LDigits, int16_t LScale, uint64_t RDigits, int16_t RScale)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} } } namespace llvm { class raw_ostream ; class ScaledNumberBase { public : const int DefaultPrecision = 1 0 ; void)",
    "insertText": "dump(uint64_t D, int16_t E, int Width)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (raw_ostream&)",
    "insertText": "print(raw_ostream &OS, uint64_t D, int16_t E, int Width, unsigned Precision)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "toString(uint64_t D, int16_t E, int Width, unsigned Precision)"
  },
  {
    "label": "countLeadingZeros32()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "countLeadingZeros32(uint32_t N)"
  },
  {
    "label": "countLeadingZeros64()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "countLeadingZeros64(uint64_t N)"
  },
  {
    "label": "getHalf()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getHalf(uint64_t N)"
  },
  {
    "label": "splitSigned()",
    "kind": "Method",
    "detail": "Function (} std::pair<uint64_t,bool>)",
    "insertText": "splitSigned(int64_t N)"
  },
  {
    "label": "UINT64_C()",
    "kind": "Method",
    "detail": "Function (uint64_t Unsigned = N = = INT64_MIN ?)",
    "insertText": "UINT64_C(1) << 63 : uint64_t(-N)"
  },
  {
    "label": "joinSigned()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "joinSigned(uint64_t U, bool IsNeg)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<class DigitsT> class ScaledNumber : ScaledNumberBase { public :)",
    "insertText": "static_assert(!std::numeric_limits<DigitsT>::is_signed, \"only unsigned floats supported\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef DigitsT DigitsType ; private : typedef std::numeric_limits<DigitsType> DigitsLimits ; const int Width =)",
    "insertText": "sizeof(DigitsType)"
  },
  {
    "label": "ScaledNumber()",
    "kind": "Method",
    "detail": "Function (private : DigitsType Digits ; int16_t Scale ; public :)",
    "insertText": "ScaledNumber() : Digits(0), Scale(0)"
  },
  {
    "label": "ScaledNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScaledNumber(DigitsType Digits, int16_t Scale) : Digits(Digits), Scale(Scale)"
  },
  {
    "label": "ScaledNumber()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ScaledNumber(const std::pair<DigitsT, int16_t> &X) : Digits(X.first), Scale(X.second)"
  },
  {
    "label": "getZero()",
    "kind": "Method",
    "detail": "Function (} public : ScaledNumber)",
    "insertText": "getZero()"
  },
  {
    "label": "getOne()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "getOne()"
  },
  {
    "label": "getLargest()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "getLargest()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "get(uint64_t N)"
  },
  {
    "label": "getInverse()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "getInverse(uint64_t N)"
  },
  {
    "label": "getFraction()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "getFraction(DigitsType N, DigitsType D)"
  },
  {
    "label": "getScale()",
    "kind": "Method",
    "detail": "Function (} int16_t)",
    "insertText": "getScale()"
  },
  {
    "label": "isZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isZero()"
  },
  {
    "label": "isOne()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOne()"
  },
  {
    "label": "lg()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lg()"
  },
  {
    "label": "lgFloor()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lgFloor()"
  },
  {
    "label": "lgCeiling()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lgCeiling()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ScaledNumber &X)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "toString(unsigned Precision = DefaultPrecision)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} raw_ostream&)",
    "insertText": "print(raw_ostream &OS, unsigned Precision = DefaultPrecision)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump()"
  },
  {
    "label": "tie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tie(Digits, Scale) = ScaledNumbers::getSum(Digits, Scale, X.Digits, X.Scale)"
  },
  {
    "label": "tie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tie(Digits, Scale) = ScaledNumbers::getDifference(Digits, Scale, X.Digits, X.Scale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScaledNumber&)",
    "insertText": "operator(int16_t Shift)"
  },
  {
    "label": "shiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftLeft(Shift)"
  },
  {
    "label": "shiftRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftRight(Shift)"
  },
  {
    "label": "shiftRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftRight(int32_t Shift)"
  },
  {
    "label": "matchScales()",
    "kind": "Method",
    "detail": "Function (ScaledNumber)",
    "insertText": "matchScales(ScaledNumber X)"
  },
  {
    "label": "matchScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matchScales(Digits, Scale, X.Digits, X.Scale)"
  },
  {
    "label": "scaleByInverse()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "scaleByInverse(uint64_t N)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "scale(int64_t N)"
  },
  {
    "label": "splitSigned()",
    "kind": "Method",
    "detail": "Function (std::pair<uint64_t,bool> Unsigned =)",
    "insertText": "splitSigned(N)"
  },
  {
    "label": "scaleByInverse()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "scaleByInverse(int64_t N)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(const ScaledNumber &X)"
  },
  {
    "label": "compareTo()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compareTo(uint64_t N)"
  },
  {
    "label": "compareTo()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compareTo(int64_t N)"
  },
  {
    "label": "invert()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber&)",
    "insertText": "invert()"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "inverse()"
  },
  {
    "label": "getProduct()",
    "kind": "Method",
    "detail": "Function (} private : ScaledNumber)",
    "insertText": "getProduct(DigitsType LHS, DigitsType RHS)"
  },
  {
    "label": "getQuotient()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "getQuotient(DigitsType Dividend, DigitsType Divisor)"
  },
  {
    "label": "countLeadingZerosWidth()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "countLeadingZerosWidth(DigitsType Digits)"
  },
  {
    "label": "adjustToWidth()",
    "kind": "Method",
    "detail": "Function (} ScaledNumber)",
    "insertText": "adjustToWidth(uint64_t N, int32_t Shift)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Shift >= ScaledNumbers::MinScale && \"Shift should be close to 0\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Shift <= ScaledNumbers::MaxScale - 64 && \"Shift should be close to 0\")"
  },
  {
    "label": "DigitsT()",
    "kind": "Method",
    "detail": "Function (auto Adjusted = ScaledNumbers::getAdjusted<)",
    "insertText": "DigitsT(N, Shift)"
  },
  {
    "label": "SCALED_NUMBER_BOP()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "SCALED_NUMBER_BOP(op, base) \\ template <class DigitsT> \\ ScaledNumber<DigitsT> operator op(const ScaledNumber<DigitsT> &L, \\ const ScaledNumber<DigitsT> &R)"
  },
  {
    "label": "DigitsT()",
    "kind": "Method",
    "detail": "Function (\\ return ScaledNumber<)",
    "insertText": "DigitsT(L)"
  },
  {
    "label": "SCALED_NUMBER_BOP()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "SCALED_NUMBER_BOP(+, += ) SCALED_NUMBER_BOP(-, -= ) SCALED_NUMBER_BOP(*, *= ) SCALED_NUMBER_BOP(/, /= ) #undef SCALED_NUMBER_BOP template <class DigitsT> ScaledNumber<DigitsT> operator<<(const ScaledNumber<DigitsT> &L, int16_t Shift)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> ScaledNumber<DigitsT>)",
    "insertText": "operator(const ScaledNumber<DigitsT> &L, int16_t Shift)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const ScaledNumber<DigitsT> &X)"
  },
  {
    "label": "SCALED_NUMBER_COMPARE_TO_TYPE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "SCALED_NUMBER_COMPARE_TO_TYPE(op, T1, T2) \\ template <class DigitsT> \\ bool operator op(const ScaledNumber<DigitsT> &L, T1 R)"
  },
  {
    "label": "compareTo()",
    "kind": "Method",
    "detail": "Function (\\ return L .)",
    "insertText": "compareTo(T2(R))"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<class DigitsT> \\ bool operator)",
    "insertText": "op(T1 L, const ScaledNumber<DigitsT> &R)"
  },
  {
    "label": "compareTo()",
    "kind": "Method",
    "detail": "Function (\\ return 0 op R .)",
    "insertText": "compareTo(T2(L))"
  },
  {
    "label": "SCALED_NUMBER_COMPARE_TO()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SCALED_NUMBER_COMPARE_TO(op) \\ SCALED_NUMBER_COMPARE_TO_TYPE(op, uint64_t, uint64_t) \\ SCALED_NUMBER_COMPARE_TO_TYPE(op, uint32_t, uint64_t) \\ SCALED_NUMBER_COMPARE_TO_TYPE(op, int64_t, int64_t) \\ SCALED_NUMBER_COMPARE_TO_TYPE(op, int32_t, int64_t) SCALED_NUMBER_COMPARE_TO(< ) SCALED_NUMBER_COMPARE_TO(> ) SCALED_NUMBER_COMPARE_TO(== ) SCALED_NUMBER_COMPARE_TO(!= ) SCALED_NUMBER_COMPARE_TO(<= ) SCALED_NUMBER_COMPARE_TO(>= ) #undef SCALED_NUMBER_COMPARE_TO #undef SCALED_NUMBER_COMPARE_TO_TYPE template <class DigitsT> uint64_t ScaledNumber<DigitsT>::scale(uint64_t N)"
  },
  {
    "label": "toInt()",
    "kind": "Method",
    "detail": "Function (} template<class DigitsT> template<class IntT> IntT ScaledNumber<DigitsT)",
    "insertText": "toInt()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef std::numeric_limits<IntT> Limits ;)",
    "insertText": "if(*this < 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IntT N = Digits ;)",
    "insertText": "if(Scale > 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size_t(Scale) < sizeof(IntT) * 8)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size_t(-Scale) < sizeof(IntT) * 8)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (int32_t Scales =)",
    "insertText": "int32_t(Scale) + int32_t(X.Scale)"
  },
  {
    "label": "getProduct()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "getProduct(Digits, X.Digits)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (int32_t Scales =)",
    "insertText": "int32_t(Scale) - int32_t(X.Scale)"
  },
  {
    "label": "getQuotient()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "getQuotient(Digits, X.Digits)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Shift != INT32_MIN)"
  },
  {
    "label": "shiftRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftRight(-Shift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scale + = ScaleShift ;)",
    "insertText": "if(ScaleShift == Shift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Shift - = ScaleShift ;)",
    "insertText": "if(Shift > countLeadingZerosWidth(Digits))"
  },
  {
    "label": "shiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftLeft(-Shift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Shift - = ScaleShift ;)",
    "insertText": "if(Shift >= Width)"
  }
]