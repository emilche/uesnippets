[
  {
    "label": "ScaledNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScaledNumber"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "ScaledNumberBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScaledNumberBase"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "ScaledNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScaledNumber"
  },
  {
    "label": "IntT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "IntT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "DigitsT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DigitsT"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "getRounded()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getRounded(Digits, Scale, ShouldRound)"
  },
  {
    "label": "getRounded()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getRounded(Digits, Scale, ShouldRound)"
  },
  {
    "label": "multiply64()",
    "kind": "Method",
    "detail": "Function (int16_t>)",
    "insertText": "multiply64(uint64_t LHS, uint64_t RHS)"
  },
  {
    "label": "multiply64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "multiply64(LHS, RHS)"
  },
  {
    "label": "getProduct()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getProduct(LHS, RHS)"
  },
  {
    "label": "getProduct()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getProduct(LHS, RHS)"
  },
  {
    "label": "divide64()",
    "kind": "Method",
    "detail": "Function (int16_t>)",
    "insertText": "divide64(uint64_t Dividend, uint64_t Divisor)"
  },
  {
    "label": "divide32()",
    "kind": "Method",
    "detail": "Function (int16_t>)",
    "insertText": "divide32(uint32_t Dividend, uint32_t Divisor)"
  },
  {
    "label": "divide64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "divide64(Dividend, Divisor)"
  },
  {
    "label": "divide32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "divide32(Dividend, Divisor)"
  },
  {
    "label": "getQuotient()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getQuotient(Dividend, Divisor)"
  },
  {
    "label": "getQuotient()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getQuotient(Dividend, Divisor)"
  },
  {
    "label": "compareImpl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "compareImpl(uint64_t L, uint64_t R, int ScaleDiff)"
  },
  {
    "label": "compareImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "compareImpl(LDigits, RDigits, RScale - LScale)"
  },
  {
    "label": "matchScales()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "matchScales(RDigits, RScale, LDigits, LScale)"
  },
  {
    "label": "getSum()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getSum(LDigits, LScale, RDigits, RScale)"
  },
  {
    "label": "getSum()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getSum(LDigits, LScale, RDigits, RScale)"
  },
  {
    "label": "getDifference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getDifference(LDigits, LScale, RDigits, RScale)"
  },
  {
    "label": "getDifference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getDifference(LDigits, LScale, RDigits, RScale)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump(uint64_t D, int16_t E, int Width)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "toString(uint64_t D, int16_t E, int Width,\n                              unsigned Precision)"
  },
  {
    "label": "countLeadingZeros()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "countLeadingZeros(N)"
  },
  {
    "label": "countLeadingZeros()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "countLeadingZeros(N)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "static_assert(!std::numeric_limits<DigitsT>::is_signed,\n                \"only unsigned floats supported\")"
  },
  {
    "label": "ScaledNumber()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ScaledNumber(0, 0)"
  },
  {
    "label": "ScaledNumber()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ScaledNumber(1, 0)"
  },
  {
    "label": "adjustToWidth()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "adjustToWidth(N, 0)"
  },
  {
    "label": "getQuotient()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getQuotient(N, D)"
  },
  {
    "label": "isZero()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isZero()"
  },
  {
    "label": "shiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftLeft(int32_t Shift)"
  },
  {
    "label": "shiftRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftRight(int32_t Shift)"
  },
  {
    "label": "countLeadingZeros64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "countLeadingZeros64(Digits)"
  },
  {
    "label": "countLeadingZeros32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "countLeadingZeros32(Digits)"
  }
]