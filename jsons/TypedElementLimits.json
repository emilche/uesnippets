[
  {
    "label": "UE_TYPED_ELEMENT_HAS_REFCOUNTING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / NumericLimits . h \" # define)",
    "insertText": "UE_TYPED_ELEMENT_HAS_REFCOUNTING(1) #define UE_TYPED_ELEMENT_HAS_REFTRACKING (UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT || WITH_EDITOR) #define UE_TYPED_ELEMENT_HAS_REFERENCING (UE_TYPED_ELEMENT_HAS_REFCOUNTING || UE_TYPED_ELEMENT_HAS_REFTRACKING)"
  },
  {
    "label": "TypedHandleMaxTypeId()",
    "kind": "Method",
    "detail": "Function (SIZE_T TypedHandleElementIdBits = 2 4 ; SIZE_T TypedHandleTypeIdBytes = TypedHandleTypeIdBits>> 3 ; SIZE_T TypedHandleElementIdBytes = TypedHandleElementIdBits>> 3 ; SIZE_T)",
    "insertText": "TypedHandleMaxTypeId((SIZE_T)1 << TypedHandleTypeIdBits)"
  },
  {
    "label": "TypedHandleMaxElementId()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "TypedHandleMaxElementId((SIZE_T)1 << TypedHandleElementIdBits)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (SIZE_T TypedHandleRefTrackingSkipCount = 1 ; SIZE_T TypedHandleRefTrackingDepth = 3 1 ; using FTypedHandleTypeId = uint8 ; using FTypedHandleElementId = int32 ; using FTypedHandleCombinedId = uint32 ; using FTypedElementRefCount = int32 ; using FTypedElementReferenceId = int32 ;)",
    "insertText": "static_assert(sizeof(FTypedHandleCombinedId) >= (TypedHandleTypeIdBytes + TypedHandleElementIdBytes), \"FTypedHandleCombinedId is not large enough to hold the combination of TypedHandleTypeIdBytes and TypedHandleElementIdBytes!\")"
  }
]