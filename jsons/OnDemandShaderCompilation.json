[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FODSCClientData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCClientData"
  },
  {
    "label": "FODSCClientDataAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCClientDataAccess"
  },
  {
    "label": "FWorldPartitionAssets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionAssets"
  },
  {
    "label": "FODSCClientPersistentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCClientPersistentData"
  },
  {
    "label": "OnClientConnected()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / StrongObjectPtr . h \" # include \" Materials / MaterialInterface . h \" class UMaterialInterface ; namespace UE::Cook { class FODSCClientData { public : void)",
    "insertText": "OnClientConnected(const void* ConnectionPtr)"
  },
  {
    "label": "OnClientDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClientDisconnected(const void* ConnectionPtr)"
  },
  {
    "label": "KeepClientPersistentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepClientPersistentData(const void* ConnectionPtr, const TArray<TStrongObjectPtr<UMaterialInterface>>& LoadedMaterialsToRecompile)"
  },
  {
    "label": "FlushClientPersistentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushClientPersistentData(const void* ConnectionPtr)"
  },
  {
    "label": "FindMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "FindMaterial(const FString& MaterialKey)"
  },
  {
    "label": "TryFindWorldPartitionMaterial()",
    "kind": "Method",
    "detail": "Function (private : class FODSCClientDataAccess ; UMaterialInterface*)",
    "insertText": "TryFindWorldPartitionMaterial(const FSoftObjectPath& MaterialSoftPath, const FSoftObjectPath& ActorSoftPath)"
  },
  {
    "label": "ScanWorldPartitionAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanWorldPartitionAssets(const FString& AssetPath)"
  },
  {
    "label": "SetupClassExclusionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupClassExclusionList()"
  },
  {
    "label": "CleanupWorldPartitionAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupWorldPartitionAssets()"
  },
  {
    "label": "PurgeMaterialShaderMaps()",
    "kind": "Method",
    "detail": "Function (struct FWorldPartitionAssets { FString PackageName ; TObjectPtr<UPackage> PackagePtr ; } ; TMap<FString,FWorldPartitionAssets> WorldPartitionAssets ; TSet<FString> ScannedWorldPartitionPaths ; TSet<FName> ExcludedPackageNames ; struct FODSCClientPersistentData { typedef TMap<TRefCountPtr<FMaterialShaderMap>,int32> Value ; Value MaterialShaderMapsKeptAlive ; } ; void)",
    "insertText": "PurgeMaterialShaderMaps(int32 Lifetime, int32 NumMapsToDelete, FODSCClientPersistentData::Value& MaterialShaderMapsKeptAlive)"
  }
]