[
  {
    "label": "TestElfImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestElfImage"
  },
  {
    "label": "TestElfImageBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestElfImageBuilder"
  },
  {
    "label": "MappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MappingType"
  },
  {
    "label": "LoadSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoadSegment"
  },
  {
    "label": "ImageMeasures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageMeasures"
  },
  {
    "label": "TestElfImage()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_DEBUG_TEST_ELF_IMAGE_BUILDER_H_ # define BASE_DEBUG_TEST_ELF_IMAGE_BUILDER_H_ # include<elf . h> # include<cstdint> # include<string> # include<vector> # include \" base / containers / span . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_piece . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # if __SIZEOF_POINTER__ = = 4 using Addr = Elf32_Addr ; using Ehdr = Elf32_Ehdr ; using Half = Elf32_Half ; using Off = Elf32_Off ; using Phdr = Elf32_Phdr ; using Word = Elf32_Word ; # else using Addr = Elf64_Addr ; using Ehdr = Elf64_Ehdr ; using Half = Elf64_Half ; using Off = Elf64_Off ; using Phdr = Elf64_Phdr ; using Word = Elf64_Word ; # endif namespace base { class TestElfImage { public :)",
    "insertText": "TestElfImage(std::vector<uint8_t> buffer, const void* elf_start)"
  },
  {
    "label": "TestElfImage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestElfImage()"
  },
  {
    "label": "TestElfImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestElfImage(TestElfImage&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestElfImage&)",
    "insertText": "operator(TestElfImage&&)"
  },
  {
    "label": "elf_start()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "elf_start()"
  },
  {
    "label": "TestElfImageBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestElfImageBuilder()"
  },
  {
    "label": "TestElfImageBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestElfImageBuilder(const TestElfImageBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestElfImageBuilder&)",
    "insertText": "operator(const TestElfImageBuilder&)"
  },
  {
    "label": "AddLoadSegment()",
    "kind": "Method",
    "detail": "Function (TestElfImageBuilder&)",
    "insertText": "AddLoadSegment(Word flags, size_t size)"
  },
  {
    "label": "AddNoteSegment()",
    "kind": "Method",
    "detail": "Function (TestElfImageBuilder&)",
    "insertText": "AddNoteSegment(Word type, StringPiece name, span<const uint8_t> desc)"
  },
  {
    "label": "AddSoName()",
    "kind": "Method",
    "detail": "Function (TestElfImageBuilder&)",
    "insertText": "AddSoName(StringPiece soname)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (TestElfImage)",
    "insertText": "Build()"
  },
  {
    "label": "GetVirtualAddressForOffset()",
    "kind": "Method",
    "detail": "Function (private : struct LoadSegment ; struct ImageMeasures ; Addr)",
    "insertText": "GetVirtualAddressForOffset(Off offset, const uint8_t* elf_start)"
  },
  {
    "label": "MeasureSizesAndOffsets()",
    "kind": "Method",
    "detail": "Function (ImageMeasures)",
    "insertText": "MeasureSizesAndOffsets()"
  },
  {
    "label": "AppendHdr()",
    "kind": "Method",
    "detail": "Function (template<T> uint8_t*)",
    "insertText": "AppendHdr(const T& hdr, uint8_t* loc)"
  },
  {
    "label": "CreateEhdr()",
    "kind": "Method",
    "detail": "Function (Ehdr)",
    "insertText": "CreateEhdr(Half phnum)"
  },
  {
    "label": "CreatePhdr()",
    "kind": "Method",
    "detail": "Function (Phdr)",
    "insertText": "CreatePhdr(Word type, Word flags, size_t align, Off offset, Addr vaddr, size_t size)"
  }
]