[
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "SHLODOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHLODOutliner"
  },
  {
    "label": "FTreeItemID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeItemID"
  },
  {
    "label": "IDropTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDropTarget"
  },
  {
    "label": "ITreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITreeItem"
  },
  {
    "label": "TreeItemType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TreeItemType"
  },
  {
    "label": "ValidateDrop()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HLODOutlinerDragDrop . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" class UToolMenu ; namespace HLODOutliner { class SHLODOutliner ; struct FTreeItemID ; struct IDropTarget { FDragValidationInfo)",
    "insertText": "ValidateDrop(FDragDropPayload& DraggedObjects)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(FDragDropPayload& DraggedObjects, const FDragValidationInfo& ValidationInfo, TSharedRef<SWidget> DroppedOnWidget)"
  },
  {
    "label": "ITreeItem()",
    "kind": "Method",
    "detail": "Function (} ; typedef TSharedRef<ITreeItem> FTreeItemRef ; struct ITreeItem : IDropTarget,TSharedFromThis<ITreeItem> { enum TreeItemType { Invalid,HierarchicalLODLevel,HierarchicalLODActor,StaticMeshActor } ; SHLODOutliner ; protected :)",
    "insertText": "ITreeItem() : Parent(nullptr), Type(Invalid), bIsExpanded(false)"
  },
  {
    "label": "ITreeItem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ITreeItem()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<ITreeItem> Parent ; TArray<TWeakPtr<ITreeItem>> Children ; TreeItemType Type ; public : FTreeItemPtr)",
    "insertText": "GetParent()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(FTreeItemRef Child)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (Child -> Parent =)",
    "insertText": "AsShared()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Add(MoveTemp(Child))"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveChild(const FTreeItemRef& Child)"
  },
  {
    "label": "GetTreeItemType()",
    "kind": "Method",
    "detail": "Function (Child -> Parent = nullptr ; } } const TreeItemType)",
    "insertText": "GetTreeItemType()"
  },
  {
    "label": "CanInteract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteract()"
  },
  {
    "label": "OnExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExpansionChanged()"
  },
  {
    "label": "GenerateContextMenu()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GenerateContextMenu(UToolMenu* Menu, SHLODOutliner& Outliner)"
  },
  {
    "label": "PopulateDragDropPayload()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PopulateDragDropPayload(FDragDropPayload& Payload)"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (FTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetTint()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetTint()"
  }
]