[
  {
    "label": "FLinkerInstancedPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerInstancedPackageMap"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLinkerInstancingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerInstancingContext"
  },
  {
    "label": "FLinkerInstancingContextTests",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerInstancingContextTests"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FAsyncPackage2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage2"
  },
  {
    "label": "FSharedLinkerInstancingContextData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedLinkerInstancingContextData"
  },
  {
    "label": "FLinkerInstancedPackageMap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / SoftObjectPath . h \" class FLinkerInstancedPackageMap { public : enum class EInstanceMappingDirection : uint8 { OriginalToInstanced,InstancedToOriginal,} ;)",
    "insertText": "FLinkerInstancedPackageMap() : FLinkerInstancedPackageMap(EInstanceMappingDirection::OriginalToInstanced)"
  },
  {
    "label": "FLinkerInstancedPackageMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLinkerInstancedPackageMap(EInstanceMappingDirection MappingDirection) : InstanceMappingDirection(MappingDirection) , bIsInstanced(false) #if WITH_EDITOR , bEnableNonEditorPath(false) #else , bEnableNonEditorPath(true)"
  },
  {
    "label": "IsInstanced()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInstanced()"
  },
  {
    "label": "BuildPackageMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPackageMapping(FName Original, FName Instanced, const bool bBuildWorldPartitionCellMapping = true)"
  },
  {
    "label": "FixupSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupSoftObjectPath(FSoftObjectPath& InOutSoftObjectPath)"
  },
  {
    "label": "EnableAutomationTest()",
    "kind": "Method",
    "detail": "Function (private : class FLinkerInstancingContext ; class FLinkerInstancingContextTests ; void)",
    "insertText": "EnableAutomationTest()"
  },
  {
    "label": "FLinkerInstancingContext()",
    "kind": "Method",
    "detail": "Function (bEnableNonEditorPath = true ; } TMap<FName,FName> InstancedPackageMapping ; EInstanceMappingDirection InstanceMappingDirection ; FString GeneratedPackagesFolder ; FString InstancedPackagePrefix ; FString InstancedPackageSuffix ; bool bIsInstanced ; bool bEnableNonEditorPath ; } ; class FLinkerInstancingContext { public :)",
    "insertText": "FLinkerInstancingContext()"
  },
  {
    "label": "FLinkerInstancingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLinkerInstancingContext(TSet<FName> InTags)"
  },
  {
    "label": "FLinkerInstancingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLinkerInstancingContext(bool bInSoftObjectPathRemappingEnabled)"
  },
  {
    "label": "DuplicateContext()",
    "kind": "Method",
    "detail": "Function (FLinkerInstancingContext)",
    "insertText": "DuplicateContext(const FLinkerInstancingContext& InLinkerInstancingContext)"
  },
  {
    "label": "RemapPackage()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "RemapPackage(const FName& PackageName)"
  },
  {
    "label": "RemapPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "RemapPath(const FSoftObjectPath& Path)"
  },
  {
    "label": "AddPackageMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageMapping(FName Original, FName Instanced)"
  },
  {
    "label": "AddPackageMappingFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageMappingFunc(TFunction<FName(FName)> InInstancedPackageMapFunc)"
  },
  {
    "label": "AddPathMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPathMapping(FSoftObjectPath Original, FSoftObjectPath Instanced)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTag(FName NewTag)"
  },
  {
    "label": "AppendTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTags(const TSet<FName>& NewTags)"
  },
  {
    "label": "HasTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTag(FName Tag)"
  },
  {
    "label": "SetSoftObjectPathRemappingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftObjectPathRemappingEnabled(bool bInSoftObjectPathRemappingEnabled)"
  },
  {
    "label": "GetSoftObjectPathRemappingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftObjectPathRemappingEnabled()"
  },
  {
    "label": "BuildPackageMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPackageMapping(FName Original, FName Instanced)"
  },
  {
    "label": "FindPackageMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPackageMapping(FName Original, FName& Instanced)"
  }
]