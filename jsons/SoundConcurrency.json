[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FSoundConcurrencyManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundConcurrencyManager"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSoundConcurrencySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundConcurrencySettings"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "FConcurrencyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConcurrencyHandle"
  },
  {
    "label": "FConcurrencySoundData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConcurrencySoundData"
  },
  {
    "label": "FConcurrencyGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConcurrencyGroup"
  },
  {
    "label": "FSoundInstanceEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundInstanceEntry"
  },
  {
    "label": "FOwnerConcurrencyMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOwnerConcurrencyMapEntry"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" SoundConcurrency . generated . h \" class FAudioDevice ; class FSoundConcurrencyManager ; struct FActiveSound ; using FConcurrencyGroupID = uint32 ; using FConcurrencyObjectID = uint32 ; using FSoundOwnerObjectID = uint32 ; using FSoundObjectID = uint32 ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioConcurrency, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { PreventNew,StopOldest,StopFarthestThenPreventNew,StopFarthestThenOldest,StopLowestPriority,StopQuietest,StopLowestPriorityThenPreventNew,Count)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Default = 0,Distance,Priority } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Concurrency, meta = (UIMin = \"1\", ClampMin = \"1\"))"
  },
  {
    "label": "FSoundConcurrencySettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundConcurrencySettings() : MaxCount(16) , bLimitToOwner(0) , bVolumeScaleCanRelease(0) , ResolutionRule(EMaxConcurrentResolutionRule::StopFarthestThenOldest) , RetriggerTime(0.0f) , VolumeScale(1.0f) , VolumeScaleMode(EConcurrencyVolumeScaleMode::Default) , VolumeScaleAttackTime(0.01f) , VolumeScaleReleaseTime(0.5f) , VoiceStealReleaseTime(0.0f)"
  },
  {
    "label": "GetVolumeScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetVolumeScale()"
  },
  {
    "label": "IsEvictionSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEvictionSupported()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(BlueprintType, hidecategories=Object, editinlinenew, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Settings, meta = (ShowOnlyInnerProperties))"
  },
  {
    "label": "FConcurrencyHandle()",
    "kind": "Method",
    "detail": "Function (} ; enum class EConcurrencyMode : uint8 { Group,Owner,OwnerPerSound,Sound,} ; struct FConcurrencyHandle { const FSoundConcurrencySettings& Settings ; const FConcurrencyObjectID ObjectID ; const bool bIsOverride ;)",
    "insertText": "FConcurrencyHandle(const FSoundConcurrencySettings& InSettings)"
  },
  {
    "label": "FConcurrencyHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConcurrencyHandle(const USoundConcurrency& Concurrency)"
  },
  {
    "label": "GetMode()",
    "kind": "Method",
    "detail": "Function (EConcurrencyMode)",
    "insertText": "GetMode(const FActiveSound& ActiveSound)"
  },
  {
    "label": "FConcurrencySoundData()",
    "kind": "Method",
    "detail": "Function (} ; struct FConcurrencySoundData { int32 Generation ; float LerpTime ; private : float Elapsed ; float DbTargetVolume ; float DbStartVolume ; public :)",
    "insertText": "FConcurrencySoundData() : Generation(0) , LerpTime(0.0f) , Elapsed(0.0f) , DbTargetVolume(0.0f) , DbStartVolume(0.0f)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(float InElapsed)"
  },
  {
    "label": "GetLerpTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLerpTime()"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVolume(bool bInDecibels = false)"
  },
  {
    "label": "GetTargetVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTargetVolume(bool bInDecibels = false)"
  },
  {
    "label": "SetTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTarget(float InTargetVolume, float InLerpTime)"
  },
  {
    "label": "FConcurrencyGroup()",
    "kind": "Method",
    "detail": "Function (} ; class FConcurrencyGroup { TArray<FActiveSound*> ActiveSounds ; FConcurrencyGroupID GroupID ; FConcurrencyObjectID ObjectID ; FSoundConcurrencySettings Settings ; float LastTimePlayed = 0 . 0 f ; public :)",
    "insertText": "FConcurrencyGroup(FConcurrencyGroupID GroupID, const FConcurrencyHandle& ConcurrencyHandle)"
  },
  {
    "label": "GenerateNewID()",
    "kind": "Method",
    "detail": "Function (FConcurrencyGroupID)",
    "insertText": "GenerateNewID()"
  },
  {
    "label": "GetActiveSounds()",
    "kind": "Method",
    "detail": "Function (const TArray<FActiveSound*>&)",
    "insertText": "GetActiveSounds()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (} const FSoundConcurrencySettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "AddActiveSound()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddActiveSound(FActiveSound& ActiveSound)"
  },
  {
    "label": "RemoveActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveSound(FActiveSound& ActiveSound)"
  },
  {
    "label": "UpdateGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGeneration(FActiveSound* NewActiveSound = nullptr)"
  },
  {
    "label": "CullSoundsDueToMaxConcurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullSoundsDueToMaxConcurrency()"
  },
  {
    "label": "SetLastTimePlayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastTimePlayed(float InLastTimePlayed)"
  },
  {
    "label": "CanPlaySoundNow()",
    "kind": "Method",
    "detail": "Function (LastTimePlayed = InLastTimePlayed ; } bool)",
    "insertText": "CanPlaySoundNow(float InCurrentTime)"
  },
  {
    "label": "FSoundInstanceEntry()",
    "kind": "Method",
    "detail": "Function (} ; typedef TMap<FConcurrencyGroupID,FConcurrencyGroup*> FConcurrencyGroups ; struct FSoundInstanceEntry { TMap<FSoundObjectID,FConcurrencyGroupID> SoundInstanceToConcurrencyGroup ;)",
    "insertText": "FSoundInstanceEntry(FSoundObjectID SoundObjectID, FConcurrencyGroupID GroupID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SoundInstanceToConcurrencyGroup .)",
    "insertText": "Add(SoundObjectID, GroupID)"
  },
  {
    "label": "FOwnerConcurrencyMapEntry()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TMap<FConcurrencyObjectID,FConcurrencyGroupID> FConcurrencyMap ; struct FOwnerConcurrencyMapEntry { FConcurrencyMap ConcurrencyObjectToConcurrencyGroup ;)",
    "insertText": "FOwnerConcurrencyMapEntry(FConcurrencyObjectID ConcurrencyObjectID, FConcurrencyGroupID GroupID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConcurrencyObjectToConcurrencyGroup .)",
    "insertText": "Add(ConcurrencyObjectID, GroupID)"
  },
  {
    "label": "FSoundConcurrencyManager()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TMap<FSoundOwnerObjectID,FOwnerConcurrencyMapEntry> FOwnerConcurrencyMap ; typedef TMap<FSoundOwnerObjectID,FSoundInstanceEntry> FOwnerPerSoundConcurrencyMap ; typedef TMap<FSoundObjectID,FConcurrencyGroupID> FPerSoundToActiveSoundsMap ; class FSoundConcurrencyManager { public :)",
    "insertText": "FSoundConcurrencyManager(FAudioDevice* InAudioDevice)"
  },
  {
    "label": "FSoundConcurrencyManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSoundConcurrencyManager()"
  },
  {
    "label": "CreateNewActiveSound()",
    "kind": "Method",
    "detail": "Function (FActiveSound*)",
    "insertText": "CreateNewActiveSound(const FActiveSound& NewActiveSound, bool bIsRetriggering)"
  },
  {
    "label": "StopDueToVoiceStealing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDueToVoiceStealing(FActiveSound& ActiveSound)"
  },
  {
    "label": "UpdateVolumeScaleGenerations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVolumeScaleGenerations()"
  },
  {
    "label": "UpdateSoundsToCull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSoundsToCull()"
  },
  {
    "label": "CanPlaySound()",
    "kind": "Method",
    "detail": "Function (private : FConcurrencyGroup*)",
    "insertText": "CanPlaySound(const FActiveSound& NewActiveSound, const FConcurrencyGroupID GroupID, TArray<FActiveSound*>& OutSoundsToEvict, bool bIsRetriggering)"
  },
  {
    "label": "CreateNewConcurrencyGroup()",
    "kind": "Method",
    "detail": "Function (FConcurrencyGroup&)",
    "insertText": "CreateNewConcurrencyGroup(const FConcurrencyHandle& ConcurrencyHandle)"
  },
  {
    "label": "CreateNewGroupsFromHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewGroupsFromHandles(const FActiveSound& NewActiveSound, const TArray<FConcurrencyHandle>& ConcurrencyHandles, TArray<FConcurrencyGroup*>& OutGroupsToApply)"
  },
  {
    "label": "CreateAndEvictActiveSounds()",
    "kind": "Method",
    "detail": "Function (FActiveSound*)",
    "insertText": "CreateAndEvictActiveSounds(const FActiveSound& NewActiveSound, const TArray<FConcurrencyGroup*>& GroupsToApply, const TArray<FActiveSound*>& SoundsToEvict)"
  },
  {
    "label": "GetEvictableSound()",
    "kind": "Method",
    "detail": "Function (FActiveSound*)",
    "insertText": "GetEvictableSound(const FActiveSound& NewActiveSound, const FConcurrencyGroup& ConcurrencyGroup, bool bIsRetriggering)"
  },
  {
    "label": "GetEvictableSoundStopFarthest()",
    "kind": "Method",
    "detail": "Function (FActiveSound*)",
    "insertText": "GetEvictableSoundStopFarthest(const FActiveSound& NewActiveSound, const FConcurrencyGroup& ConcurrencyGroup, bool bIsRetriggering)"
  },
  {
    "label": "GetEvictableSoundStopOldest()",
    "kind": "Method",
    "detail": "Function (FActiveSound*)",
    "insertText": "GetEvictableSoundStopOldest(const FActiveSound& NewActiveSound, const FConcurrencyGroup& ConcurrencyGroup, bool bIsRetriggering)"
  },
  {
    "label": "EvaluateConcurrency()",
    "kind": "Method",
    "detail": "Function (FActiveSound*)",
    "insertText": "EvaluateConcurrency(const FActiveSound& NewActiveSound, TArray<FConcurrencyHandle>& ConcurrencyHandles, bool bIsRetriggering)"
  }
]