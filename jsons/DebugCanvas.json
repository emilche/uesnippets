[
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "SDebugCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDebugCanvas"
  },
  {
    "label": "FDebugCanvasDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugCanvasDrawer"
  },
  {
    "label": "FSlateFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontCache"
  },
  {
    "label": "FSlateCanvasRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateCanvasRenderTarget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderResource . h \" # include \" RendererInterface . h \" # include \" Rendering / RenderingCommon . h \" # include \" CanvasTypes . h \" # include \" Widgets / SLeafWidget . h \" class FRHICommandListImmediate ; class FSceneViewport ; class FViewportClient ; typedef TSharedPtr<FCanvas,ESPMode::ThreadSafe> FCanvasPtr ; class SDebugCanvas : public SLeafWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SDebugCanvas)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::HitTestInvisible ; })",
    "insertText": "SLATE_ATTRIBUTE(FSceneViewport*, SceneViewport) SLATE_END_ARGS() public: ENGINE_API SDebugCanvas()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "SetSceneViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSceneViewport(FSceneViewport* InSceneViewport)"
  },
  {
    "label": "FDebugCanvasDrawer()",
    "kind": "Method",
    "detail": "Function (private : TAttribute<FSceneViewport*> SceneViewport ; } ; class FDebugCanvasDrawer : public ICustomSlateElement { public :)",
    "insertText": "FDebugCanvasDrawer()"
  },
  {
    "label": "GetGameThreadDebugCanvas()",
    "kind": "Method",
    "detail": "Function (FCanvas*)",
    "insertText": "GetGameThreadDebugCanvas()"
  },
  {
    "label": "BeginRenderingCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRenderingCanvas(const FIntRect& InCanvasRect)"
  },
  {
    "label": "InitDebugCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDebugCanvas(FViewportClient* ViewportClient, UWorld* InWorld)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "Draw_RenderThread()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Draw_RenderThread(FRDGBuilder& GraphBuilder, const FDrawPassInputs& Inputs)"
  },
  {
    "label": "DeleteRenderThreadCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRenderThreadCanvas()"
  },
  {
    "label": "GetRenderThreadCanvas()",
    "kind": "Method",
    "detail": "Function (FCanvasPtr)",
    "insertText": "GetRenderThreadCanvas()"
  },
  {
    "label": "SetRenderThreadCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderThreadCanvas(const FIntRect& InCanvasRect, FCanvasPtr& Canvas)"
  },
  {
    "label": "ReleaseTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTexture()"
  },
  {
    "label": "HandleReleaseFontResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReleaseFontResources(const class FSlateFontCache& InFontCache)"
  }
]