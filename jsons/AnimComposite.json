[
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "UAnimComposite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimComposite"
  },
  {
    "label": "FAnimTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrack"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Animation / AnimCompositeBase . h \" # include \" AnimComposite . generated . h \" class UAnimSequence ; struct FCompactPose ;)",
    "insertText": "UCLASS(config=Engine, hidecategories=UObject, MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "HandleAssetPlayerTickedInternal()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "HandleAssetPlayerTickedInternal(FAnimAssetTickContext &Context, const float PreviousTime, const float MoveDelta, const FAnimTickRecord &Instance, struct FAnimNotifyQueue& NotifyQueue)"
  },
  {
    "label": "GetAnimationPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationPose(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "GetAdditiveAnimType()",
    "kind": "Method",
    "detail": "Function (EAdditiveAnimationType)",
    "insertText": "GetAdditiveAnimType()"
  },
  {
    "label": "IsValidAdditive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAdditive()"
  },
  {
    "label": "EnableRootMotionSettingFromMontage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableRootMotionSettingFromMontage(bool bInEnableRootMotion, const ERootMotionRootLock::Type InRootMotionRootLock)"
  },
  {
    "label": "HasRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootMotion()"
  },
  {
    "label": "ExtractRootMotion()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootMotion(float StartTime, float DeltaTime, bool bAllowLooping)"
  },
  {
    "label": "ExtractRootMotionFromRange()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootMotionFromRange(float StartTrackPosition, float EndTrackPosition)"
  },
  {
    "label": "ExtractRootTrackTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootTrackTransform(float Time, const FBoneContainer* RequiredBones)"
  },
  {
    "label": "GetAnimNotifiesFromDeltaPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimNotifiesFromDeltaPositions(const float& PreviousPosition, const float & CurrentPosition, FAnimNotifyContext& NotifyContext)"
  },
  {
    "label": "IsNotifyAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNotifyAvailable()"
  },
  {
    "label": "GetAdditiveBasePose()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR class UAnimSequence*)",
    "insertText": "GetAdditiveBasePose()"
  },
  {
    "label": "GetAllAnimationSequencesReferred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllAnimationSequencesReferred(TArray<UAnimationAsset*>& AnimationAssets, bool bRecursive = true)"
  },
  {
    "label": "ReplaceReferredAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceReferredAnimations(const TMap<UAnimationAsset*, UAnimationAsset*>& ReplacementMap)"
  },
  {
    "label": "UpdateCommonTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCommonTargetFrameRate()"
  },
  {
    "label": "InvalidateRecursiveAsset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InvalidateRecursiveAsset()"
  },
  {
    "label": "ContainRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainRecursive(TArray<UAnimCompositeBase*>& CurrentAccumulatedList)"
  },
  {
    "label": "SetCompositeLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositeLength(float InLength)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetSamplingFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetSamplingFrameRate()"
  }
]