[
  {
    "label": "FT_Module_Class_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FT_Module_Class_"
  },
  {
    "label": "FT_TrueTypeEngineType_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FT_TrueTypeEngineType_"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (# ifndef __FTMODAPI_H__ # define __FTMODAPI_H__ # include<ft2build . h> # include FT_FREETYPE_H # ifdef FREETYPE_H # error \" freetype . h of FreeType 1 has been loaded ! \" # error \" Please fix the directory search order for header files \" # error \" so that freetype . h of FreeType 2 is found first . \" # endif FT_BEGIN_HEADER # define FT_MODULE_FONT_DRIVER 1 # define FT_MODULE_RENDERER 2 # define FT_MODULE_HINTER 4 # define FT_MODULE_STYLER 8 # define FT_MODULE_DRIVER_SCALABLE 0 x100 # define FT_MODULE_DRIVER_NO_OUTLINES 0 x200 # define FT_MODULE_DRIVER_HAS_HINTER 0 x400 # define ft_module_font_driver FT_MODULE_FONT_DRIVER # define ft_module_renderer FT_MODULE_RENDERER # define ft_module_hinter FT_MODULE_HINTER # define ft_module_styler FT_MODULE_STYLER # define ft_module_driver_scalable FT_MODULE_DRIVER_SCALABLE # define ft_module_driver_no_outlines FT_MODULE_DRIVER_NO_OUTLINES # define ft_module_driver_has_hinter FT_MODULE_DRIVER_HAS_HINTER typedef FT_Pointer FT_Module_Interface ; typedef)",
    "insertText": "FT_Error(*FT_Module_Constructor)( FT_Module module)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FT_Module_Destructor)( FT_Module module)"
  },
  {
    "label": "FT_Module_Interface()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FT_Module_Interface(*FT_Module_Requester)( FT_Module module, const char* name)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (typedef struct FT_Module_Class_ { FT_ULong module_flags ; FT_Long module_size ; const FT_String* module_name ; FT_Fixed module_version ; FT_Fixed module_requires ; const void* module_interface ; FT_Module_Constructor module_init ; FT_Module_Destructor module_done ; FT_Module_Requester get_interface ; } FT_Module_Class ;)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Add_Module( FT_Library library, const FT_Module_Class* clazz)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Module ) FT_Get_Module( FT_Library library, const char* module_name)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Remove_Module( FT_Library library, FT_Module module)"
  },
  {
    "label": "FT_Property_Set()",
    "kind": "Method",
    "detail": "Function (FT_Error)",
    "insertText": "FT_Property_Set(FT_Library library, const FT_String* module_name, const FT_String* property_name, const void* value)"
  },
  {
    "label": "FT_Property_Get()",
    "kind": "Method",
    "detail": "Function (FT_Error)",
    "insertText": "FT_Property_Get(FT_Library library, const FT_String* module_name, const FT_String* property_name, void* value)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Reference_Library( FT_Library library)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_New_Library( FT_Memory memory, FT_Library *alibrary)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Done_Library( FT_Library library)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FT_DebugHook_Func)( void* arg)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(void ) FT_Set_Debug_Hook( FT_Library library, FT_UInt hook_index, FT_DebugHook_Func debug_hook)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(void ) FT_Add_Default_Modules( FT_Library library)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (typedef enum FT_TrueTypeEngineType_ { FT_TRUETYPE_ENGINE_TYPE_NONE = 0,FT_TRUETYPE_ENGINE_TYPE_UNPATENTED,FT_TRUETYPE_ENGINE_TYPE_PATENTED } FT_TrueTypeEngineType ;)",
    "insertText": "FT_EXPORT(FT_TrueTypeEngineType ) FT_Get_TrueType_Engine_Type( FT_Library library)"
  }
]