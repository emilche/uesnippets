[
  {
    "label": "FScopedNamedEventConditional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedNamedEventConditional"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "FScopedNamedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedNamedEvent"
  },
  {
    "label": "FScopedNamedEventStatic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedNamedEventStatic"
  },
  {
    "label": "FScopedNamedEventConditionalStatic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedNamedEventConditionalStatic"
  },
  {
    "label": "FScopedEnterBackgroundEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedEnterBackgroundEvent"
  },
  {
    "label": "IwyuTestSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IwyuTestSize"
  },
  {
    "label": "COMPILED_PLATFORM_HEADER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformMisc . h \" # include)",
    "insertText": "COMPILED_PLATFORM_HEADER(PlatformMisc.h) #ifndef UE_DEBUG_BREAK #error UE_DEBUG_BREAK is not defined for this platform #endif #ifndef PLATFORM_USES_ANSI_STRING_FOR_EXTERNAL_PROFILING #error PLATFORM_USES_ANSI_STRING_FOR_EXTERNAL_PROFILING is not defined. #endif #ifndef PLATFORM_LIMIT_PROFILER_UNIQUE_NAMED_EVENTS #if defined(FRAMEPRO_ENABLED) && FRAMEPRO_ENABLED #define PLATFORM_LIMIT_PROFILER_UNIQUE_NAMED_EVENTS 1 #else #define PLATFORM_LIMIT_PROFILER_UNIQUE_NAMED_EVENTS 0 #endif #endif #ifndef PLATFORM_EMPTY_BASES #define PLATFORM_EMPTY_BASES #endif #define ENABLE_NAMED_EVENTS (!UE_BUILD_SHIPPING && 1) #if PLATFORM_USES_ANSI_STRING_FOR_EXTERNAL_PROFILING #define NAMED_EVENT_STR(x) x #else #define NAMED_EVENT_STR(x) TEXT(x)"
  },
  {
    "label": "FScopedNamedEventConditional()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FScopedNamedEventConditional(const struct FColor& Color, const TCHAR* Text, bool bCondition) : bStarted(bCondition)"
  },
  {
    "label": "BeginNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNamedEvent(Color, Text)"
  },
  {
    "label": "FScopedNamedEventConditional()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FScopedNamedEventConditional(const struct FColor& Color, const ANSICHAR* Text, bool bCondition) : bStarted(bCondition)"
  },
  {
    "label": "FScopedNamedEventConditional()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopedNamedEventConditional()"
  },
  {
    "label": "EndNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNamedEvent()"
  },
  {
    "label": "FScopedNamedEvent()",
    "kind": "Method",
    "detail": "Function (} } private : bool bStarted ; } ; class FScopedNamedEvent { public :)",
    "insertText": "FScopedNamedEvent(const struct FColor& Color, const TCHAR* Text)"
  },
  {
    "label": "FScopedNamedEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedNamedEvent(const struct FColor& Color, const ANSICHAR* Text)"
  },
  {
    "label": "FScopedNamedEvent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedNamedEvent()"
  },
  {
    "label": "FScopedNamedEventStatic()",
    "kind": "Method",
    "detail": "Function (} } ; class FScopedNamedEventStatic { public :)",
    "insertText": "FScopedNamedEventStatic(const struct FColor& Color, const TCHAR* Text)"
  },
  {
    "label": "BeginNamedEventStatic()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_IMPLEMENTS_BeginNamedEventStatic)",
    "insertText": "BeginNamedEventStatic(Color, Text)"
  },
  {
    "label": "FScopedNamedEventStatic()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FScopedNamedEventStatic(const struct FColor& Color, const ANSICHAR* Text)"
  },
  {
    "label": "FScopedNamedEventStatic()",
    "kind": "Method",
    "detail": "Function (# endif } ~)",
    "insertText": "FScopedNamedEventStatic()"
  },
  {
    "label": "FScopedNamedEventConditionalStatic()",
    "kind": "Method",
    "detail": "Function (} } ; class FScopedNamedEventConditionalStatic { public :)",
    "insertText": "FScopedNamedEventConditionalStatic(const struct FColor& Color, const TCHAR* Text, bool bCondition) : bStarted(bCondition)"
  },
  {
    "label": "FScopedNamedEventConditionalStatic()",
    "kind": "Method",
    "detail": "Function (# endif } })",
    "insertText": "FScopedNamedEventConditionalStatic(const struct FColor& Color, const ANSICHAR* Text, bool bCondition) : bStarted(bCondition)"
  },
  {
    "label": "FScopedNamedEventConditionalStatic()",
    "kind": "Method",
    "detail": "Function (# endif } } ~)",
    "insertText": "FScopedNamedEventConditionalStatic()"
  },
  {
    "label": "SCOPED_NAMED_EVENT()",
    "kind": "Method",
    "detail": "Function (} } private : bool bStarted ; } ; # define)",
    "insertText": "SCOPED_NAMED_EVENT(Name, Color)\\ FScopedNamedEventStatic ANONYMOUS_VARIABLE(NamedEvent_##Name##_)(Color, NAMED_EVENT_STR(#Name))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(Name)"
  },
  {
    "label": "SCOPED_NAMED_EVENT_FSTRING()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_NAMED_EVENT_FSTRING(Text, Color)\\ FScopedNamedEvent ANONYMOUS_VARIABLE(NamedEvent_)(Color, *Text)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT(*Text)"
  },
  {
    "label": "SCOPED_NAMED_EVENT_TCHAR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_NAMED_EVENT_TCHAR(Text, Color)\\ FScopedNamedEvent ANONYMOUS_VARIABLE(NamedEvent_)(Color, Text)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT(Text)"
  },
  {
    "label": "SCOPED_NAMED_EVENT_TEXT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_NAMED_EVENT_TEXT(Text, Color)\\ FScopedNamedEventStatic ANONYMOUS_VARIABLE(NamedEvent_)(Color, NAMED_EVENT_STR(Text))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_STR()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_STR(Text)"
  },
  {
    "label": "SCOPED_NAMED_EVENT_F()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_NAMED_EVENT_F(Format, Color, ...)\\ FScopedNamedEvent ANONYMOUS_VARIABLE(NamedEvent_)(Color, *FString::Printf(Format, __VA_ARGS__))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT(*FString::Printf(Format, __VA_ARGS__))"
  },
  {
    "label": "SCOPED_NAMED_EVENT_TCHAR_CONDITIONAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_NAMED_EVENT_TCHAR_CONDITIONAL(Text, Color, bCondition)\\ FScopedNamedEventConditional ANONYMOUS_VARIABLE(NamedEvent_)(Color, Text, (bCondition))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_CONDITIONAL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_CONDITIONAL(Text, (bCondition))"
  },
  {
    "label": "SCOPED_NAMED_EVENT()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "SCOPED_NAMED_EVENT(...) #define SCOPED_NAMED_EVENT_FSTRING(...) #define SCOPED_NAMED_EVENT_TCHAR(...) #define SCOPED_NAMED_EVENT_TEXT(...) #define SCOPED_NAMED_EVENT_F(...) #define SCOPED_NAMED_EVENT_TCHAR_CONDITIONAL(...) #endif #define SCOPED_PROFILER_COLOR(...) UE_DEPRECATED_MACRO(5.5, \"SCOPED_PROFILER_COLOR is deprecated and there is no replacement.\")"
  },
  {
    "label": "FScopedEnterBackgroundEvent()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FScopedEnterBackgroundEvent(const TCHAR* Text)"
  },
  {
    "label": "BeginEnterBackgroundEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEnterBackgroundEvent(Text)"
  },
  {
    "label": "FScopedEnterBackgroundEvent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedEnterBackgroundEvent()"
  },
  {
    "label": "EndEnterBackgroundEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEnterBackgroundEvent()"
  },
  {
    "label": "SCOPED_ENTER_BACKGROUND_EVENT()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "SCOPED_ENTER_BACKGROUND_EVENT(Name) \\ FScopedEnterBackgroundEvent EnterBackgroundEvent_##Name##_(TEXT(#Name))"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(Name)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifdef PLATFORM_COMPILER_IWYU namespace UE::Core::Private { template<T,bool IsSameTypes = true> struct IwyuTestSize { enum { Value = 0 } ; } ; template<T> struct IwyuTestSize<T,false> { enum { Value =)",
    "insertText": "sizeof(T)"
  }
]