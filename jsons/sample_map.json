[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SampleMap()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_SAMPLE_MAP_H_ # define BASE_METRICS_SAMPLE_MAP_H_ # include<stdint . h> # include<map> # include<memory> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / metrics / histogram_base . h \" # include \" base / metrics / histogram_samples . h \" namespace base { class BASE_EXPORT SampleMap : public HistogramSamples { public :)",
    "insertText": "SampleMap()"
  },
  {
    "label": "SampleMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleMap(uint64_t id)"
  },
  {
    "label": "SampleMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleMap(const SampleMap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SampleMap&)",
    "insertText": "operator(const SampleMap&)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(HistogramBase::Sample value, HistogramBase::Count count)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "GetCount(HistogramBase::Sample value)"
  },
  {
    "label": "TotalCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "TotalCount()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SampleCountIterator>)",
    "insertText": "Iterator()"
  },
  {
    "label": "AddSubtractImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AddSubtractImpl(SampleCountIterator* iter, Operator op)"
  }
]