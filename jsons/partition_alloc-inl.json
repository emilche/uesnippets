[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_INL_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_INL_H_ # include<algorithm> # include<cstring> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_ref_count . h \" # include \" base / allocator / partition_allocator / random . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(__clang__) || defined(COMPILER_GCC) #define PA_PREFETCH(x) __builtin_prefetch(x) #else #define PA_PREFETCH(x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(COMPILER_MSVC) && !defined(__clang__) #pragma optimize(\"\", off) #endif PA_ALWAYS_INLINE void SecureMemset(void* ptr, uint8_t value, size_t size)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(ptr, value, size)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(COMPILER_MSVC) || defined(__clang__) __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\")"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif } # if)",
    "insertText": "defined(COMPILER_MSVC) && !defined(__clang__) #pragma optimize(\"\", on) #endif #if BUILDFLAG(PA_EXPENSIVE_DCHECKS_ARE_ON) PA_ALWAYS_INLINE void DebugMemset(void* ptr, int value, size_t size)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (size_t size_to_memset =)",
    "insertText": "min(size, size_t{1} << 19)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(ptr, value, size_to_memset)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # endif # if !)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) PA_ALWAYS_INLINE bool RandomPeriod()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (thread_local uint8_t counter = 0 ;)",
    "insertText": "if(PA_UNLIKELY(counter == 0))"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (counter = static_cast<)",
    "insertText": "uint8_t(RandomValue())"
  },
  {
    "label": "ObjectInnerPtr2Addr()",
    "kind": "Method",
    "detail": "Function (} counter - - ; return counter = = 0 ; } # endif PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ObjectInnerPtr2Addr(const void* ptr)"
  },
  {
    "label": "ObjectPtr2Addr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ObjectPtr2Addr(const void* object)"
  },
  {
    "label": "SlotStartAddr2Ptr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void*)",
    "insertText": "SlotStartAddr2Ptr(uintptr_t slot_start)"
  },
  {
    "label": "SlotStartPtr2Addr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "SlotStartPtr2Addr(const void* slot_start)"
  }
]