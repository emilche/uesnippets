[
  {
    "label": "FAssetDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDragDropOp"
  },
  {
    "label": "FClassDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassDragDropOp"
  },
  {
    "label": "FActorDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDragDropOp"
  },
  {
    "label": "FFolderDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFolderDragDropOp"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSequencerCustomizationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerCustomizationInfo"
  },
  {
    "label": "FSequencerCustomizationBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerCustomizationBuilder"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "FCustomizationRegistryEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomizationRegistryEntry"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISequencerModule . h \" # include \" Misc / EnumClassFlags . h \" # include \" MVVM / ViewModelPtr . h \" class FAssetDragDropOp ; class FClassDragDropOp ; class FActorDragDropOp ; class FFolderDragDropOp ; class UMovieSceneSequence ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(bool, FOptionalOnDragDrop, const FGeometry&, const FDragDropEvent&, FReply&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (enum class ESequencerDropResult { Unhandled,DropDenied,DropHandled } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(ESequencerDropResult, FOnAssetsDrop, const TArray<UObject*>&, const FAssetDragDropOp&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(ESequencerDropResult, FOnClassesDrop, const TArray<TWeakObjectPtr<UClass>>&, const FClassDragDropOp&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(ESequencerDropResult, FOnActorsDrop, const TArray<TWeakObjectPtr<AActor>>&, const FActorDragDropOp&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(ESequencerDropResult, FOnFoldersDrop, const TArray<FName>&, const FFolderDragDropOp&)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ESequencerPasteSupport : uint8 { None = 0,Folders = 1<<0,ObjectBindings = 1<<1,Tracks = 1<<2,Sections = 1<<3,All = 0 xff } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESequencerPasteSupport)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(ESequencerPasteSupport, FOnSequencerPaste)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedPtr<FExtender>, FOnGetSequencerMenuExtender, UE::Sequencer::FViewModelPtr)"
  },
  {
    "label": "FSequencerCustomizationBuilder()",
    "kind": "Method",
    "detail": "Function (struct FSequencerCustomizationInfo { TSharedPtr<FExtender> AddMenuExtender ; TSharedPtr<FExtender> ToolbarExtender ; TSharedPtr<FExtender> ActionsMenuExtender ; TSharedPtr<FExtender> ViewMenuExtender ; TSharedPtr<FExtender> SidebarExtender ; FOnGetSequencerMenuExtender OnBuildObjectBindingContextMenu ; FOnGetSequencerMenuExtender OnBuildSidebarMenu ; FOptionalOnDragDrop OnReceivedDragOver ; FOptionalOnDragDrop OnReceivedDrop ; FOnAssetsDrop OnAssetsDrop ; FOnClassesDrop OnClassesDrop ; FOnActorsDrop OnActorsDrop ; FOnFoldersDrop OnFoldersDrop ; FOnSequencerPaste OnPaste ; } ; class FSequencerCustomizationBuilder { public :)",
    "insertText": "FSequencerCustomizationBuilder(ISequencer& InSequencer, UMovieSceneSequence& InFocusedSequence) : Sequencer(InSequencer), FocusedSequence(InFocusedSequence)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (} ISequencer&)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Customizations .)",
    "insertText": "Add(Customization)"
  },
  {
    "label": "ISequencerCustomization()",
    "kind": "Method",
    "detail": "Function (} private : ISequencer& Sequencer ; UMovieSceneSequence& FocusedSequence ; TArray<FSequencerCustomizationInfo> Customizations ; } ; class ISequencerCustomization { public : ~)",
    "insertText": "ISequencerCustomization()"
  },
  {
    "label": "RegisterSequencerCustomization()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterSequencerCustomization(FSequencerCustomizationBuilder& Builder)"
  },
  {
    "label": "UnregisterSequencerCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSequencerCustomization()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(ISequencerCustomization*, FOnGetSequencerCustomizationInstance)"
  },
  {
    "label": "FSequencerCustomizationManager()",
    "kind": "Method",
    "detail": "Function (class FSequencerCustomizationManager { public :)",
    "insertText": "FSequencerCustomizationManager()"
  },
  {
    "label": "RegisterInstancedSequencerCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInstancedSequencerCustomization(const UClass* SequenceClass, FOnGetSequencerCustomizationInstance GetCustomizationDelegate)"
  },
  {
    "label": "UnregisterInstancedSequencerCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInstancedSequencerCustomization(const UClass* SequenceClass)"
  },
  {
    "label": "GetSequencerCustomizations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSequencerCustomizations(UMovieSceneSequence* FocusedSequence, TArray<TUniquePtr<ISequencerCustomization>>& OutCustomizations)"
  },
  {
    "label": "NeedsCustomizationChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsCustomizationChange(const UMovieSceneSequence* OldFocusedSequence, const UMovieSceneSequence* NewFocusedSequence)"
  },
  {
    "label": "FSequencerCustomizationManager()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSequencerCustomizationManager(const FSequencerCustomizationManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSequencerCustomizationManager&)",
    "insertText": "operator(const FSequencerCustomizationManager&)"
  }
]