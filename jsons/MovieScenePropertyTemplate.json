[
  {
    "label": "UMovieScenePropertyTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScenePropertyTrack"
  },
  {
    "label": "FSectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionData"
  },
  {
    "label": "TTemporarySetterType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTemporarySetterType"
  },
  {
    "label": "TCachedState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCachedState"
  },
  {
    "label": "FTokenProducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTokenProducer"
  },
  {
    "label": "TPropertyTrackExecutionToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyTrackExecutionToken"
  },
  {
    "label": "TPropertyActuator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyActuator"
  },
  {
    "label": "FMovieScenePropertySectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePropertySectionData"
  },
  {
    "label": "FMovieScenePropertySectionTemplate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePropertySectionTemplate"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" IMovieScenePlayer . h \" # include \" MovieSceneFwd . h \" # include \" MovieSceneCommonHelpers . h \" # include \" Evaluation / MovieSceneAnimTypeID . h \" # include \" MovieSceneExecutionToken . h \" # include \" Evaluation / PersistentEvaluationData . h \" # include \" Evaluation / MovieSceneEvalTemplate . h \" # include \" Logging / MessageLog . h \" # include \" Misc / UObjectToken . h \" # include \" Evaluation / MovieSceneEvaluationTemplateInstance . h \" # include \" MovieSceneSequence . h \" # include \" Evaluation / Blending / MovieSceneBlendingActuator . h \" # include \" Evaluation / Blending / MovieSceneMultiChannelBlending . h \" # include \" Compilation / MovieSceneTemplateInterrogation . h \" # include \" TransformData . h \" # include \" MovieScenePropertyTemplate . generated . h \" class UMovieScenePropertyTrack ;)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Property Track Token Execute\"), MovieSceneEval_PropertyTrack_TokenExecute, STATGROUP_MovieSceneEval)"
  },
  {
    "label": "FSectionData()",
    "kind": "Method",
    "detail": "Function (namespace PropertyTemplate { struct FSectionData : IPersistentEvaluationData {)",
    "insertText": "FSectionData()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FName InPropertyName, FString InPropertyPath)"
  },
  {
    "label": "ConvertFromIntermediateType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTrackInstancePropertyBindings> PropertyBindings ; FMovieSceneAnimTypeID PropertyID ; } ; template<PropertyValueType,IntermediateType = PropertyValueType> struct TTemporarySetterType { typedef PropertyValueType Type ; } ; template<PropertyValueType,IntermediateType = PropertyValueType> TTemporarySetterType<PropertyValueType,IntermediateType>::Type)",
    "insertText": "ConvertFromIntermediateType(const IntermediateType& InIntermediateType, IMovieScenePlayer& Player)"
  },
  {
    "label": "IsValueValid()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsValueValid(const T& InValue)"
  },
  {
    "label": "RestoreState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RestoreState(UObject& Object, const UE::MovieScene::FRestoreStateParams& Params)"
  },
  {
    "label": "GetTerminalPlayer()",
    "kind": "Method",
    "detail": "Function (IMovieScenePlayer* Player = Params .)",
    "insertText": "GetTerminalPlayer()"
  },
  {
    "label": "PropertyValueType()",
    "kind": "Method",
    "detail": "Function (Bindings . CallFunction<)",
    "insertText": "PropertyValueType(Object, NewValue)"
  },
  {
    "label": "CacheExistingState()",
    "kind": "Method",
    "detail": "Function (} } IntermediateType Value ; FTrackInstancePropertyBindings Bindings ; } ; template<PropertyValueType,IntermediateType = PropertyValueType> IMovieScenePreAnimatedTokenPtr)",
    "insertText": "CacheExistingState(UObject& Object, FTrackInstancePropertyBindings& PropertyBindings)"
  },
  {
    "label": "FTokenProducer()",
    "kind": "Method",
    "detail": "Function (} template<PropertyValueType> struct FTokenProducer : IMovieScenePreAnimatedTokenProducer {)",
    "insertText": "FTokenProducer(FTrackInstancePropertyBindings& InPropertyBindings) : PropertyBindings(InPropertyBindings)"
  },
  {
    "label": "CacheExistingState()",
    "kind": "Method",
    "detail": "Function (} IMovieScenePreAnimatedTokenPtr)",
    "insertText": "CacheExistingState(UObject& Object)"
  },
  {
    "label": "TPropertyTrackExecutionToken()",
    "kind": "Method",
    "detail": "Function (} FTrackInstancePropertyBindings& PropertyBindings ; } ; } template<PropertyValueType,IntermediateType = PropertyValueType> struct TPropertyTrackExecutionToken : IMovieSceneExecutionToken {)",
    "insertText": "TPropertyTrackExecutionToken(IntermediateType InValue) : Value(MoveTemp(InValue))"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Execute(const FMovieSceneContext& Context, const FMovieSceneEvaluationOperand& Operand, FPersistentEvaluationData& PersistentData, IMovieScenePlayer& Player)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (using namespace PropertyTemplate ;)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PropertyTrack_TokenExecute) FSectionData& PropertyTrackData = PersistentData.GetSectionData<FSectionData>()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FTrackInstancePropertyBindings* PropertyBindings = PropertyTrackData . PropertyBindings .)",
    "insertText": "Get()"
  },
  {
    "label": "IntermediateType()",
    "kind": "Method",
    "detail": "Function (auto NewValue = PropertyTemplate::ConvertFromIntermediateType<PropertyValueType,)",
    "insertText": "IntermediateType(Value, Operand, PersistentData, Player)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (Player .)",
    "insertText": "SavePreAnimatedState(*ObjectPtr, PropertyTrackData.PropertyID, FTokenProducer<PropertyValueType>(*PropertyBindings))"
  },
  {
    "label": "PropertyValueType()",
    "kind": "Method",
    "detail": "Function (PropertyBindings -> CallFunction<)",
    "insertText": "PropertyValueType(*ObjectPtr, NewValue)"
  },
  {
    "label": "TPropertyActuator()",
    "kind": "Method",
    "detail": "Function (} } } IntermediateType Value ; } ; template<PropertyType> struct TPropertyActuator : TMovieSceneBlendingActuator<PropertyType> { PropertyTemplate::FSectionData PropertyData ;)",
    "insertText": "TPropertyActuator(const PropertyTemplate::FSectionData& InPropertyData) : TMovieSceneBlendingActuator<PropertyType>(FMovieSceneBlendingActuatorID(InPropertyData.PropertyID)) , PropertyData(InPropertyData)"
  },
  {
    "label": "RetrieveCurrentValue()",
    "kind": "Method",
    "detail": "Function (} PropertyType)",
    "insertText": "RetrieveCurrentValue(UObject* InObject, IMovieScenePlayer* Player)"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Actuate(UObject* InObject, typename TCallTraits<PropertyType>::ParamType InFinalValue, const TBlendableTokenStack<PropertyType>& OriginalStack, const FMovieSceneContext& Context, FPersistentEvaluationData& PersistentData, IMovieScenePlayer& Player)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (OriginalStack .)",
    "insertText": "SavePreAnimatedState(Player, *InObject, PropertyData.PropertyID, PropertyTemplate::FTokenProducer<PropertyType>(*PropertyData.PropertyBindings))"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (PropertyData . PropertyBindings -> CallFunction<)",
    "insertText": "PropertyType(*InObject, InFinalValue)"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<PropertyType>::ParamType InValue, const TBlendableTokenStack<PropertyType>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FMovieScenePropertySectionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieScenePropertySectionData()"
  },
  {
    "label": "FMovieScenePropertySectionData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieScenePropertySectionData(FName InPropertyName, FString InPropertyPath) : PropertyName(InPropertyName), PropertyPath(MoveTemp(InPropertyPath))"
  },
  {
    "label": "SetupTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupTrack(FPersistentEvaluationData& PersistentData)"
  },
  {
    "label": "FSectionData()",
    "kind": "Method",
    "detail": "Function (SetupTrack<)",
    "insertText": "FSectionData(PersistentData)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (PersistentData . AddSectionData<)",
    "insertText": "T().Initialize(PropertyName, PropertyPath)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() MOVIESCENE_API FMovieScenePropertySectionTemplate()"
  },
  {
    "label": "FMovieScenePropertySectionTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieScenePropertySectionTemplate(FName PropertyName, const FString& InPropertyPath)"
  },
  {
    "label": "FMovieScenePropertySectionTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieScenePropertySectionTemplate(const FMovieScenePropertySectionTemplate&)"
  },
  {
    "label": "FMovieScenePropertySectionTemplate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMovieScenePropertySectionTemplate()"
  },
  {
    "label": "GetFloatInterrogationKey()",
    "kind": "Method",
    "detail": "Function (public : const FMovieSceneInterrogationKey)",
    "insertText": "GetFloatInterrogationKey()"
  },
  {
    "label": "GetInt32InterrogationKey()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneInterrogationKey)",
    "insertText": "GetInt32InterrogationKey()"
  },
  {
    "label": "GetVector4InterrogationKey()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneInterrogationKey)",
    "insertText": "GetVector4InterrogationKey()"
  },
  {
    "label": "GetVectorInterrogationKey()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneInterrogationKey)",
    "insertText": "GetVectorInterrogationKey()"
  },
  {
    "label": "GetVector2DInterrogationKey()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneInterrogationKey)",
    "insertText": "GetVector2DInterrogationKey()"
  },
  {
    "label": "GetColorInterrogationKey()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneInterrogationKey)",
    "insertText": "GetColorInterrogationKey()"
  },
  {
    "label": "GetScriptStructImpl()",
    "kind": "Method",
    "detail": "Function (protected : UScriptStruct&)",
    "insertText": "GetScriptStructImpl()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Setup(FPersistentEvaluationData& PersistentData, IMovieScenePlayer& Player)"
  },
  {
    "label": "GetPropertyTypeID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneAnimTypeID)",
    "insertText": "GetPropertyTypeID()"
  },
  {
    "label": "EnsureActuator()",
    "kind": "Method",
    "detail": "Function (template<PropertyType> FMovieSceneBlendingActuatorID)",
    "insertText": "EnsureActuator(FMovieSceneBlendingAccumulator& Accumulator)"
  },
  {
    "label": "FMovieSceneBlendingActuatorID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneBlendingActuatorID ActuatorTypeID =)",
    "insertText": "FMovieSceneBlendingActuatorID(UniquePropertyID)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (PropertyTemplate::FSectionData SectionData ; SectionData .)",
    "insertText": "Initialize(PropertyData.PropertyName, PropertyData.PropertyPath)"
  },
  {
    "label": "DefineActuator()",
    "kind": "Method",
    "detail": "Function (Accumulator .)",
    "insertText": "DefineActuator(ActuatorTypeID, MakeShared<TPropertyActuator<PropertyType>>(SectionData))"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} ; template<> void TPropertyActuator<float)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<float>::ParamType InValue, const TBlendableTokenStack<float>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (float Value = InValue ; InterrogationData .)",
    "insertText": "Add(Value, FMovieScenePropertySectionTemplate::GetFloatInterrogationKey())"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} ; template<> void TPropertyActuator<int32)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<int32>::ParamType InValue, const TBlendableTokenStack<int32>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 Value = InValue ; InterrogationData .)",
    "insertText": "Add(Value, FMovieScenePropertySectionTemplate::GetInt32InterrogationKey())"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} ; template<> void TPropertyActuator<FVector2D)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<FVector2D>::ParamType InValue, const TBlendableTokenStack<FVector2D>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FVector2D Value = InValue ; InterrogationData .)",
    "insertText": "Add(Value, FMovieScenePropertySectionTemplate::GetVector2DInterrogationKey())"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} ; template<> void TPropertyActuator<FEulerTransform)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<FEulerTransform>::ParamType InValue, const TBlendableTokenStack<FEulerTransform>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FTransformData Value ; Value . Translation = InValue . Location ; Value . Rotation = InValue . Rotation ; Value . Scale = InValue . Scale ; InterrogationData .)",
    "insertText": "Add(Value, FMovieSceneInterrogationKey::GetTransformInterrogationKey())"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} ; template<> void TPropertyActuator<FTransform)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<FTransform>::ParamType InValue, const TBlendableTokenStack<FTransform>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (FTransformData Value ; Value . Translation = InValue .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (Value . Rotation = InValue .)",
    "insertText": "GetRotation().Rotator()"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (Value . Scale = InValue .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} ; template<> void TPropertyActuator<FVector4)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<FVector4>::ParamType InValue, const TBlendableTokenStack<FVector4>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FVector4 Value = InValue ; InterrogationData .)",
    "insertText": "Add(Value, FMovieScenePropertySectionTemplate::GetVector4InterrogationKey())"
  },
  {
    "label": "Actuate()",
    "kind": "Method",
    "detail": "Function (} ; template<> void TPropertyActuator<FVector)",
    "insertText": "Actuate(FMovieSceneInterrogationData& InterrogationData, typename TCallTraits<FVector>::ParamType InValue, const TBlendableTokenStack<FVector>& OriginalStack, const FMovieSceneContext& Context)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FVector Value = InValue ; InterrogationData .)",
    "insertText": "Add(Value, FMovieScenePropertySectionTemplate::GetVectorInterrogationKey())"
  }
]