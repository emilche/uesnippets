[
  {
    "label": "FAudioFileWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioFileWriter"
  },
  {
    "label": "FAudioFileWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Encoders / IAudioEncoder . h \" # include \" Interfaces / IAudioFormat . h \" namespace Audio { class FAudioFileWriter { public :)",
    "insertText": "FAudioFileWriter(const FString& InPath, const FSoundQualityInfo& InInfo)"
  },
  {
    "label": "FAudioFileWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAudioFileWriter()"
  },
  {
    "label": "GetFileInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFileInfo(FSoundQualityInfo& OutInfo)"
  },
  {
    "label": "PushAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushAudio(const float* InAudio, int32 NumSamples, bool bEncodeIfPossible = true)"
  },
  {
    "label": "EncodeIfPossible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncodeIfPossible()"
  },
  {
    "label": "GetNewEncoderForFile()",
    "kind": "Method",
    "detail": "Function (FSoundQualityInfo QualityInfo ; TArray<uint8> DataBuffer ; TUniquePtr<IAudioEncoder> Encoder ; TUniquePtr<IFileHandle> FileHandle ; IAudioEncoder*)",
    "insertText": "GetNewEncoderForFile(const FString& InPath)"
  },
  {
    "label": "GetExtensionForFile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExtensionForFile(const FString& InPath)"
  },
  {
    "label": "FlushEncoderToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushEncoderToFile(int32 DataBufferSize = 4096)"
  }
]