[
  {
    "label": "DEFINE_SIMPLE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_CBINDINGWRAPPING_H # define LLVM_SUPPORT_CBINDINGWRAPPING_H # include \" llvm / Support / Casting . h \" # define)",
    "insertText": "DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ty, ref) \\ inline ty *unwrap(ref P)"
  },
  {
    "label": "ty()",
    "kind": "Method",
    "detail": "Function (\\ return reinterpret_cast<)",
    "insertText": "ty(P)"
  },
  {
    "label": "wrap()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ ref)",
    "insertText": "wrap(const ty *P)"
  },
  {
    "label": "ref()",
    "kind": "Method",
    "detail": "Function (\\ return reinterpret_cast<)",
    "insertText": "ref(const_cast<ty*>(P))"
  },
  {
    "label": "DEFINE_ISA_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_ISA_CONVERSION_FUNCTIONS(ty, ref) \\ DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ty, ref) \\ \\ template<typename T> \\ inline T *unwrap(ref P)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (\\ return cast<)",
    "insertText": "T(unwrap(P))"
  },
  {
    "label": "DEFINE_STDCXX_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_STDCXX_CONVERSION_FUNCTIONS(ty, ref) \\ DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ty, ref) \\ \\ template<typename T> \\ inline T *unwrap(ref P)"
  },
  {
    "label": "Q()",
    "kind": "Method",
    "detail": "Function (\\ T*)",
    "insertText": "Q(T*)unwrap(P)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(Q && \"Invalid cast!\")"
  }
]