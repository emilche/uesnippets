[
  {
    "label": "FMessageEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageEndpoint"
  },
  {
    "label": "FAutomationWorkerFindWorkers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerFindWorkers"
  },
  {
    "label": "FAutomationWorkerImageComparisonResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerImageComparisonResults"
  },
  {
    "label": "FAutomationWorkerTestDataResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerTestDataResponse"
  },
  {
    "label": "FAutomationWorkerPerformanceDataResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerPerformanceDataResponse"
  },
  {
    "label": "FAutomationWorkerNextNetworkCommandReply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerNextNetworkCommandReply"
  },
  {
    "label": "FAutomationWorkerPing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerPing"
  },
  {
    "label": "FAutomationWorkerRequestTests",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerRequestTests"
  },
  {
    "label": "FAutomationWorkerStartTestSession",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerStartTestSession"
  },
  {
    "label": "FAutomationWorkerStopTestSession",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerStopTestSession"
  },
  {
    "label": "FAutomationWorkerRunTests",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerRunTests"
  },
  {
    "label": "FMessageAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageAddress"
  },
  {
    "label": "FAutomationWorkerMessageBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerMessageBase"
  },
  {
    "label": "FAutomationWorkerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationWorkerModule"
  },
  {
    "label": "FAutomationWorkerStopTests",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerStopTests"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" IMessageContext . h \" # include \" Misc / AutomationTest . h \" # include \" IAutomationWorkerModule . h \" class FMessageEndpoint ; struct FAutomationWorkerFindWorkers ; struct FAutomationWorkerImageComparisonResults ; struct FAutomationWorkerTestDataResponse ; struct FAutomationWorkerPerformanceDataResponse ; struct FAutomationWorkerNextNetworkCommandReply ; struct FAutomationWorkerPing ; struct FAutomationWorkerRequestTests ; struct FAutomationWorkerStartTestSession ; struct FAutomationWorkerStopTestSession ; struct FAutomationWorkerRunTests ; struct FMessageAddress ; struct FAutomationWorkerMessageBase ; class FAutomationWorkerModule : public IAutomationWorkerModule { public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "SupportsDynamicReloading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDynamicReloading()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick()"
  },
  {
    "label": "ExecuteLatentCommands()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ExecuteLatentCommands()"
  },
  {
    "label": "ExecuteNetworkCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteNetworkCommands()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "ReportNetworkCommandComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportNetworkCommandComplete()"
  },
  {
    "label": "ReportTestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportTestComplete()"
  },
  {
    "label": "SendTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTests(const FMessageAddress& ControllerAddress)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessage(FAutomationWorkerMessageBase* Message, UScriptStruct* TypeInfo, const FMessageAddress& ControllerAddress)"
  },
  {
    "label": "HandleFindWorkersMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleFindWorkersMessage(const FAutomationWorkerFindWorkers& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "SendWorkerFound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendWorkerFound(const FMessageAddress& ControllerAddress)"
  },
  {
    "label": "HandleMessageEndpointShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessageEndpointShutdown()"
  },
  {
    "label": "HandleNextNetworkCommandReplyMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNextNetworkCommandReplyMessage(const FAutomationWorkerNextNetworkCommandReply& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePingMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePingMessage(const FAutomationWorkerPing& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleStartTestSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStartTestSession(const FAutomationWorkerStartTestSession& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleStopTestSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStopTestSession(const FAutomationWorkerStopTestSession& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRequestTestsMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequestTestsMessage(const FAutomationWorkerRequestTests& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRunTestsMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRunTestsMessage(const FAutomationWorkerRunTests& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleStopTestsMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStopTestsMessage(const struct FAutomationWorkerStopTests& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleScreenShotCompared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleScreenShotCompared(const FAutomationWorkerImageComparisonResults& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleTestDataRetrieved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTestDataRetrieved(const FAutomationWorkerTestDataResponse& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePerformanceDataRetrieved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePerformanceDataRetrieved(const FAutomationWorkerPerformanceDataResponse& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleTelemetryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTelemetryData(const FString& StorageName, const FString& InTestName, const TArray<FAutomationTelemetryData>& InItems)"
  },
  {
    "label": "HandlePreTestingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreTestingEvent()"
  },
  {
    "label": "HandlePostTestingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePostTestingEvent()"
  },
  {
    "label": "HandleScreenShotCapturedWithName()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE void)",
    "insertText": "HandleScreenShotCapturedWithName(const TArray<FColor>& RawImageData, const FAutomationScreenshotData& Data)"
  },
  {
    "label": "HandleScreenShotAndTraceCapturedWithName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleScreenShotAndTraceCapturedWithName(const TArray<FColor>& RawImageData, const TArray<uint8>& CapturedFrameTrace, const FAutomationScreenshotData& Data)"
  },
  {
    "label": "HandleScreenShotComparisonReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleScreenShotComparisonReport(const FAutomationScreenshotCompareResults& Results)"
  },
  {
    "label": "SendAnalyticsEvents()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SendAnalyticsEvents(TArray<FString>& InAnalyticsItems)"
  },
  {
    "label": "RecordPerformanceAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordPerformanceAnalytics(const FAutomationPerformanceSnapshot& PerfSnapshot)"
  },
  {
    "label": "IsTestExcluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestExcluded(const FString& InTestToRun, FString* OutReason, bool* OutWarn)"
  },
  {
    "label": "TriggerSectionNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerSectionNotifications()"
  }
]