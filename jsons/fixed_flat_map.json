[
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "Mapped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mapped"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "MakeFixedFlatMap()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_FIXED_FLAT_MAP_H_ # define BASE_CONTAINERS_FIXED_FLAT_MAP_H_ # include<array> # include<functional> # include<utility> # include \" base / check . h \" # include \" base / containers / flat_map . h \" # include \" base / containers / flat_tree . h \" namespace base { template<class Key,class Mapped,size_t N,class Compare = std::less<>> using fixed_flat_map = base::flat_map<Key,Mapped,Compare,std::array<std::pair<const Key,Mapped>,N>> ; template<class Key,class Mapped,size_t N,class Compare = std::less<>> fixed_flat_map<Key,Mapped,N,Compare>)",
    "insertText": "MakeFixedFlatMap(std::pair<Key, Mapped>(&&data)[N], const Compare& comp = Compare())"
  },
  {
    "label": "InsertionSort()",
    "kind": "Method",
    "detail": "Function (using FixedFlatMap = fixed_flat_map<Key,Mapped,N,Compare> ; FixedFlatMap::value_compare value_comp { comp } ;)",
    "insertText": "InsertionSort(data, data + N, value_comp)"
  }
]