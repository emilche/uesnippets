[
  {
    "label": "UAISenseConfig_Hearing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseConfig_Hearing"
  },
  {
    "label": "UAISenseEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseEvent"
  },
  {
    "label": "FAINoiseEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAINoiseEvent"
  },
  {
    "label": "UAISense_Hearing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISense_Hearing"
  },
  {
    "label": "FDigestedHearingProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDigestedHearingProperties"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GenericTeamAgentInterface . h \" # include \" Perception / AISense . h \" # include \" AISense_Hearing . generated . h \" class UAISenseConfig_Hearing ; class UAISenseEvent ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAINoiseEvent()",
    "kind": "Method",
    "detail": "Function (FGenericTeamId TeamIdentifier ;)",
    "insertText": "FAINoiseEvent()"
  },
  {
    "label": "FAINoiseEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAINoiseEvent(AActor* InInstigator, const FVector& InNoiseLocation, float InLoudness = 1.f, float InMaxRange = 0.f, FName Tag = NAME_None)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(ClassGroup=AI, Config=Game, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UPROPERTY()"
  },
  {
    "label": "FDigestedHearingProperties()",
    "kind": "Method",
    "detail": "Function (struct FDigestedHearingProperties { float HearingRangeSq ; uint8 AffiliationFlags ;)",
    "insertText": "FDigestedHearingProperties(const UAISenseConfig_Hearing& SenseConfig)"
  },
  {
    "label": "FDigestedHearingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDigestedHearingProperties()"
  },
  {
    "label": "RegisterEvent()",
    "kind": "Method",
    "detail": "Function (} ; TMap<FPerceptionListenerID,FDigestedHearingProperties> DigestedProperties ; public : void)",
    "insertText": "RegisterEvent(const FAINoiseEvent& Event)"
  },
  {
    "label": "RegisterEventsBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEventsBatch(const TArray<FAINoiseEvent>& Events)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "RegisterWrappedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWrappedEvent(UAISenseEvent& PerceptionEvent)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "Update()"
  },
  {
    "label": "RegisterMakeNoiseDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMakeNoiseDelegate()"
  },
  {
    "label": "OnNewListenerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewListenerImpl(const FPerceptionListener& NewListener)"
  },
  {
    "label": "OnListenerUpdateImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerUpdateImpl(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "OnListenerRemovedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerRemovedImpl(const FPerceptionListener& RemovedListener)"
  }
]