[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "FAssetTypeActions_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetTypeActions_Base"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "GetObjectDisplayName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / Casts . h \" # include \" Widgets / SWidget . h \" # include \" Toolkits / IToolkitHost . h \" # include \" Modules / ModuleManager . h \" # include \" Settings / EditorLoadingSavingSettings . h \" # include \" IAssetTools . h \" # include \" IAssetTypeActions . h \" # include \" AssetToolsModule . h \" # include \" AssetTypeActivationOpenedMethod . h \" # include \" Toolkits / SimpleAssetEditor . h \" # include \" AssetRegistry / ARFilter . h \" struct FAssetData ; struct FARFilter ; class FMenuBuilder ; struct FToolMenuSection ; class FAssetTypeActions_Base : public IAssetTypeActions { public : FString)",
    "insertText": "GetObjectDisplayName(UObject* Object)"
  },
  {
    "label": "OpenAssetEditor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OpenAssetEditor(const TArray<UObject*>& InObjects, TSharedPtr<class IToolkitHost> EditWithinLevelEditor = TSharedPtr<IToolkitHost>())"
  },
  {
    "label": "CreateEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEditor(EToolkitMode::Standalone, EditWithinLevelEditor, InObjects)"
  },
  {
    "label": "OpenAssetEditor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OpenAssetEditor(const TArray<UObject*>& InObjects, const EAssetTypeActivationOpenedMethod OpenedMethod, TSharedPtr<IToolkitHost> EditWithinLevelEditor = TSharedPtr<IToolkitHost>())"
  },
  {
    "label": "OpenAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenAssetEditor(InObjects, EditWithinLevelEditor)"
  },
  {
    "label": "AssetsActivatedOverride()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "AssetsActivatedOverride(const TArray<UObject*>& InObjects, EAssetTypeActivationMethod::Type ActivationType)"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRename(const FAssetData& InAsset, FText* OutErrorMsg)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Merge(UObject* BaseAsset, UObject* RemoteAsset, UObject* LocalAsset, const FOnMergeResolved& ResolutionCallback)"
  },
  {
    "label": "ShouldForceWorldCentric()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldForceWorldCentric()"
  },
  {
    "label": "DumpAssetToTempFile()",
    "kind": "Method",
    "detail": "Function (FString OldTextFilename =)",
    "insertText": "DumpAssetToTempFile(OldAsset)"
  },
  {
    "label": "DumpAssetToTempFile()",
    "kind": "Method",
    "detail": "Function (FString NewTextFilename =)",
    "insertText": "DumpAssetToTempFile(NewAsset)"
  },
  {
    "label": "UEditorLoadingSavingSettings()",
    "kind": "Method",
    "detail": "Function (TextDiffToolPath.FilePath)",
    "insertText": "UEditorLoadingSavingSettings()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FAssetToolsModule& AssetToolsModule =)",
    "insertText": "Get().LoadModuleChecked<FAssetToolsModule>(\"AssetTools\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (AssetToolsModule .)",
    "insertText": "Get().CreateDiffProcess(DiffCommand, OldTextFilename, NewTextFilename)"
  },
  {
    "label": "GetThumbnailInfo()",
    "kind": "Method",
    "detail": "Function (} class UThumbnailInfo*)",
    "insertText": "GetThumbnailInfo(UObject* Asset)"
  },
  {
    "label": "GetThumbnailOverlay()",
    "kind": "Method",
    "detail": "Function (const TArray<FText> SubMenus ; return SubMenus ; } TSharedPtr<class SWidget>)",
    "insertText": "GetThumbnailOverlay(const FAssetData& AssetData)"
  },
  {
    "label": "GetSourceFileLabels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSourceFileLabels(const TArray<UObject*>& TypeAssets, TArray<FString>& OutSourceFileLabels)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TArray<FString> SourceFilePaths ; OutSourceFileLabels .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetResolvedSourceFilePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResolvedSourceFilePaths(TypeAssets, SourceFilePaths)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (OutSourceFileLabels .)",
    "insertText": "AddDefaulted(SourceFilePaths.Num())"
  },
  {
    "label": "BuildBackendFilter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BuildBackendFilter(FARFilter& InFilter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InFilter . ClassPaths .)",
    "insertText": "Add(GetClassPathName())"
  },
  {
    "label": "GetDisplayNameFromAssetData()",
    "kind": "Method",
    "detail": "Function (InFilter . bRecursiveClasses = true ; } FText)",
    "insertText": "GetDisplayNameFromAssetData(const FAssetData& AssetData)"
  },
  {
    "label": "SupportsOpenedMethod()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsOpenedMethod(const EAssetTypeActivationOpenedMethod OpenedMethod)"
  },
  {
    "label": "GetClassPathName()",
    "kind": "Method",
    "detail": "Function (} FTopLevelAssetPath)",
    "insertText": "GetClassPathName()"
  },
  {
    "label": "GetThumbnailBrush()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetThumbnailBrush(const FAssetData& InAssetData, const FName InClassName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (AssetToolsModule .)",
    "insertText": "Get().CreateUniqueAssetName(InBasePackageName, InSuffix, OutPackageName, OutAssetName)"
  },
  {
    "label": "DumpAssetToTempFile()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "DumpAssetToTempFile(UObject* Asset)"
  },
  {
    "label": "GetAssetDescription()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetAssetDescription(const FAssetData& AssetData)"
  },
  {
    "label": "GetTypedWeakObjectPtrs()",
    "kind": "Method",
    "detail": "Function (} template<T> TArray<TWeakObjectPtr<T>>)",
    "insertText": "GetTypedWeakObjectPtrs(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakObjectPtr<T>> TypedObjects ;)",
    "insertText": "for(auto ObjIt = InObjects.CreateConstIterator(); ObjIt; ++ObjIt)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TypedObjects .)",
    "insertText": "Add(CastChecked<T>(*ObjIt))"
  },
  {
    "label": "GetTypedSoftObjectPtrs()",
    "kind": "Method",
    "detail": "Function (} return TypedObjects ; } template<T> TArray<TSoftObjectPtr<T>>)",
    "insertText": "GetTypedSoftObjectPtrs(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "GetTypedObjectPtrs()",
    "kind": "Method",
    "detail": "Function (} return TypedObjects ; } template<T> TArray<T*>)",
    "insertText": "GetTypedObjectPtrs(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<T*> TypedObjects ;)",
    "insertText": "for(UObject* ObjIt : InObjects)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TypedObjects .)",
    "insertText": "Add(CastChecked<T>(ObjIt))"
  }
]