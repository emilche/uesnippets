[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSkeletonTreeAttachedAssetItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonTreeAttachedAssetItem"
  },
  {
    "label": "FSkeletonTreeBoneItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonTreeBoneItem"
  },
  {
    "label": "FSkeletonTreeSocketItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonTreeSocketItem"
  },
  {
    "label": "FSkeletonTreeVirtualBoneItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonTreeVirtualBoneItem"
  },
  {
    "label": "FTextFilterExpressionEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionEvaluator"
  },
  {
    "label": "FUICommandList_Pinnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList_Pinnable"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "SBlendProfilePicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlendProfilePicker"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "IPinnedCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPinnedCommandList"
  },
  {
    "label": "FPackageReloadedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageReloadedEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SSkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletonTree"
  },
  {
    "label": "ISkeletonTreeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeBuilder"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "FSelectedSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedSocketInfo"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "SBoneTreeMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBoneTreeMenu"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "FScopedSavedSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSavedSelection"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Misc / Attribute . h \" # include \" Animation / Skeleton . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" EditableSkeleton . h \" # include \" AssetRegistry / AssetData . h \" # include \" Engine / SkeletalMeshSocket . h \" # include \" ISkeletonTree . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" Preferences / PersonaOptions . h \" # include \" ISkeletonTreeBuilder . h \" # include \" ISkeletonTreeItem . h \" # include \" SkeletonTreeBuilder . h \" # include \" Widgets / Input / SSearchBox . h \" # include \" EditorUndoClient . h \" # include \" UObject / GCObject . h \" class FMenuBuilder ; class FSkeletonTreeAttachedAssetItem ; class FSkeletonTreeBoneItem ; class FSkeletonTreeSocketItem ; class FSkeletonTreeVirtualBoneItem ; class FTextFilterExpressionEvaluator ; class FUICommandList_Pinnable ; class IPersonaPreviewScene ; class SBlendProfilePicker ; class SComboButton ; class UBlendProfile ; class UToolMenu ; struct FNotificationInfo ; class IPinnedCommandList ; class FPackageReloadedEvent ; enum class EPackageReloadPhase : uint8 ; enum class EBlendProfileMode : uint8 ; PRAGMA_DISABLE_DEPRECATION_WARNINGS class SSkeletonTree : public ISkeletonTree,public FSelfRegisteringEditorUndoClient { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSkeletonTree ) : _IsEditable(true)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, IsEditable ) SLATE_ARGUMENT( TSharedPtr<class ISkeletonTreeBuilder>, Builder ) SLATE_END_ARGS() public: SSkeletonTree() : bSelecting(false)"
  },
  {
    "label": "SSkeletonTree()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SSkeletonTree()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FEditableSkeleton>& InEditableSkeleton, const FSkeletonTreeArgs& InSkeletonTreeArgs)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "RefreshFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshFilter()"
  },
  {
    "label": "GetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IEditableSkeleton>)",
    "insertText": "GetEditableSkeleton()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<class IPersonaPreviewScene>)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "SetSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSkeletalMesh(USkeletalMesh* NewSkeletalMesh)"
  },
  {
    "label": "SetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedSocket(const struct FSelectedSocketInfo& InSocketInfo)"
  },
  {
    "label": "SetSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBone(const FName& InBoneName, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "DeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAll()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<ISkeletonTreeItem>>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "SelectItemsBy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectItemsBy(TFunctionRef<bool(const TSharedRef<ISkeletonTreeItem>&, bool&)> Predicate)"
  },
  {
    "label": "DuplicateAndSelectSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateAndSelectSocket(const FSelectedSocketInfo& SocketInfoToDuplicate, const FName& NewParentBoneName = FName())"
  },
  {
    "label": "RegisterOnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnSelectionChanged(const FOnSkeletonTreeSelectionChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnSelectionChanged(FDelegateHandle DelegateHandle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnSelectionChangedMulticast .)",
    "insertText": "Remove(DelegateHandle)"
  },
  {
    "label": "GetSelectedBlendProfile()",
    "kind": "Method",
    "detail": "Function (} UBlendProfile*)",
    "insertText": "GetSelectedBlendProfile()"
  },
  {
    "label": "AttachAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachAssets(const TSharedRef<ISkeletonTreeItem>& TargetItem, const TArray<FAssetData>& AssetData)"
  },
  {
    "label": "GetSearchWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSearchWidget()"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "CreateTreeColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTreeColumns()"
  },
  {
    "label": "CreateFromSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFromSkeleton()"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter()"
  },
  {
    "label": "SetInitialExpansionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialExpansionState()"
  },
  {
    "label": "NotifyUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyUser(FNotificationInfo& NotificationInfo)"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemScrolledIntoView(TSharedPtr<ISkeletonTreeItem> InItem, const TSharedPtr<ITableRow>& InWidget)"
  },
  {
    "label": "OnTreeDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeDoubleClick(TSharedPtr<ISkeletonTreeItem> InItem)"
  },
  {
    "label": "SetTreeItemExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeItemExpansionRecursive(TSharedPtr< ISkeletonTreeItem > TreeItem, bool bInExpansionState)"
  },
  {
    "label": "SetBoneTranslationRetargetingModeRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTranslationRetargetingModeRecursive(EBoneTranslationRetargetingMode::Type NewRetargetingMode)"
  },
  {
    "label": "RemoveFromLOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromLOD(int32 LODIndex, bool bIncludeSelected, bool bIncludeBelowLODs)"
  },
  {
    "label": "OnLODSwitched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLODSwitched()"
  },
  {
    "label": "OnPreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewMeshChanged(USkeletalMesh* InOldSkeletalMesh, USkeletalMesh* InNewSkeletalMesh)"
  },
  {
    "label": "GetSelectedBlendProfileName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSelectedBlendProfileName()"
  },
  {
    "label": "HandleTreeRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTreeRefresh()"
  },
  {
    "label": "GetEditableSkeletonInternal()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FEditableSkeleton>)",
    "insertText": "GetEditableSkeletonInternal()"
  },
  {
    "label": "PostRenameSocket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRenameSocket(UObject* InAttachedObject, const FName& InOldName, const FName& InNewName)"
  },
  {
    "label": "PostDuplicateSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicateSocket(UObject* InAttachedObject, const FName& InSocketName)"
  },
  {
    "label": "PostSetSocketParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSetSocketParent()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "MakeTreeRowWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeTreeRowWidget(TSharedPtr<ISkeletonTreeItem> InInfo, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetFilteredChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredChildren(TSharedPtr<ISkeletonTreeItem> InInfo, TArray< TSharedPtr<ISkeletonTreeItem> >& OutChildren)"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenu()"
  },
  {
    "label": "CreateNewMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateNewMenuWidget()"
  },
  {
    "label": "RegisterNewMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNewMenu()"
  },
  {
    "label": "CreateFilterMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateFilterMenuWidget()"
  },
  {
    "label": "RegisterFilterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFilterMenu()"
  },
  {
    "label": "OnCopyBoneNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopyBoneNames()"
  },
  {
    "label": "OnResetBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetBoneTransforms()"
  },
  {
    "label": "OnCopySockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopySockets()"
  },
  {
    "label": "CanCopySockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopySockets()"
  },
  {
    "label": "SerializeSocketToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SerializeSocketToString(class USkeletalMeshSocket* Socket, ESocketParentType ParentType)"
  },
  {
    "label": "OnPasteSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteSockets(bool bPasteToSelectedBone)"
  },
  {
    "label": "CanPasteSockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteSockets()"
  },
  {
    "label": "OnAddSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddSocket()"
  },
  {
    "label": "CanRenameSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameSelected()"
  },
  {
    "label": "OnRenameSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameSelected()"
  },
  {
    "label": "OnCustomizeSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomizeSocket()"
  },
  {
    "label": "OnPromoteSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPromoteSocket()"
  },
  {
    "label": "CreateVirtualBoneMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SBoneTreeMenu>)",
    "insertText": "CreateVirtualBoneMenu(SSkeletonTree* InSkeletonTree)"
  },
  {
    "label": "OnVirtualTargetBonePicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVirtualTargetBonePicked(FName TargetBoneName, TArray<TSharedPtr<class ISkeletonTreeItem>> SourceBones)"
  },
  {
    "label": "FillAttachAssetSubmenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAttachAssetSubmenu(FMenuBuilder& MenuBuilder, const TSharedPtr<class ISkeletonTreeItem> TargetItem)"
  },
  {
    "label": "OnAssetSelectedFromPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetSelectedFromPicker(const FAssetData& AssetData, const TSharedPtr<class ISkeletonTreeItem> TargetItem)"
  },
  {
    "label": "OnRemoveAllAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveAllAssets()"
  },
  {
    "label": "CanRemoveAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveAllAssets()"
  },
  {
    "label": "OnCopySocketToMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopySocketToMesh()"
  },
  {
    "label": "OnIsSelectableOrNavigable()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "OnIsSelectableOrNavigable(TSharedPtr<class ISkeletonTreeItem> InItem)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(TSharedPtr<class ISkeletonTreeItem> Selection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& SearchText)"
  },
  {
    "label": "SetBoneFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneFilter(EBoneFilter InBoneFilter)"
  },
  {
    "label": "IsBoneFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoneFilter(EBoneFilter InBoneFilter)"
  },
  {
    "label": "SetSocketFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSocketFilter(ESocketFilter InSocketFilter)"
  },
  {
    "label": "IsSocketFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSocketFilter(ESocketFilter InSocketFilter)"
  },
  {
    "label": "GetFilterMenuTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterMenuTooltip()"
  },
  {
    "label": "IsAddingSocketsAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAddingSocketsAllowed()"
  },
  {
    "label": "IsShowingAdvancedOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingAdvancedOptions()"
  },
  {
    "label": "OnChangeShowingAdvancedOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeShowingAdvancedOptions()"
  },
  {
    "label": "IsShowingDebugVisualizationOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingDebugVisualizationOptions()"
  },
  {
    "label": "OnChangeShowingDebugVisualizationOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeShowingDebugVisualizationOptions()"
  },
  {
    "label": "SetPreviewComponentSocketFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewComponentSocketFilter()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "CanDeleteSelectedRows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteSelectedRows()"
  },
  {
    "label": "OnDeleteSelectedRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteSelectedRows()"
  },
  {
    "label": "DeleteAttachedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAttachedAssets(const TArray<TSharedPtr<class FSkeletonTreeAttachedAssetItem>>& InDisplayedAttachedAssetInfos)"
  },
  {
    "label": "DeleteSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSockets(const TArray<TSharedPtr<class FSkeletonTreeSocketItem>>& InDisplayedSocketInfos)"
  },
  {
    "label": "DeleteVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteVirtualBones(const TArray<TSharedPtr<class FSkeletonTreeVirtualBoneItem>>& InDisplayedVirtualBonestInfos)"
  },
  {
    "label": "OnBlendProfileSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlendProfileSelected(UBlendProfile* NewProfile)"
  },
  {
    "label": "RecursiveSetBlendProfileScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveSetBlendProfileScales(float InScaleToSet)"
  },
  {
    "label": "CreateMenuForBoneReduction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMenuForBoneReduction(FMenuBuilder& MenuBuilder, SSkeletonTree* SkeletonTree, int32 LODIndex, bool bIncludeSelected)"
  },
  {
    "label": "HandleFocusCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFocusCamera()"
  },
  {
    "label": "HandleFrameSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFrameSelection()"
  },
  {
    "label": "HandleFilterSkeletonTreeItem()",
    "kind": "Method",
    "detail": "Function (ESkeletonTreeFilterResult)",
    "insertText": "HandleFilterSkeletonTreeItem(const FSkeletonTreeFilterArgs& InArgs, const TSharedPtr<class ISkeletonTreeItem>& InItem)"
  },
  {
    "label": "OnGetReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (const FReferenceSkeleton&)",
    "insertText": "OnGetReferenceSkeleton()"
  },
  {
    "label": "HandleSelectedBoneChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleSelectedBoneChanged(const FName& InBoneName, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "HandleSelectedSocketChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectedSocketChanged(const FSelectedSocketInfo& InSocketInfo)"
  },
  {
    "label": "HandleDeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeselectAll()"
  },
  {
    "label": "HandlePackageReloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePackageReloaded(const EPackageReloadPhase InPackageReloadPhase, FPackageReloadedEvent* InPackageReloadedEvent)"
  },
  {
    "label": "OnCreateBlendProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateBlendProfile(const EBlendProfileMode InMode)"
  },
  {
    "label": "OnDeleteCurrentBlendProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteCurrentBlendProfile()"
  },
  {
    "label": "OnRenameBlendProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameBlendProfile()"
  },
  {
    "label": "RegisterBlendProfileMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterBlendProfileMenu()"
  },
  {
    "label": "CreateBlendProfileMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBlendProfileMenu(UToolMenu* InMenu)"
  },
  {
    "label": "GetBlendProfileColumnMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetBlendProfileColumnMenuContent()"
  },
  {
    "label": "ExpandTreeOnSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandTreeOnSelection(TSharedPtr<ISkeletonTreeItem> RowToExpand, bool bForce = false)"
  },
  {
    "label": "AddVirtualBones()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FEditableSkeleton> EditableSkeleton ; TWeakPtr<IPersonaPreviewScene> PreviewScene ; TSharedPtr<SSearchBox> NameFilterBox ; TSharedPtr<SBlendProfilePicker> BlendProfilePicker ; TSharedPtr<SInlineEditableTextBlock> BlendProfileHeader ; TSharedPtr<SOverlay> TreeHolder ; TSharedPtr<STreeView<TSharedPtr<class ISkeletonTreeItem>>> SkeletonTreeView ; TArray<TSharedPtr<class ISkeletonTreeItem>> Items ; TArray<TSharedPtr<class ISkeletonTreeItem>> LinearItems ; TArray<TSharedPtr<class ISkeletonTreeItem>> FilteredItems ; TAttribute<bool> IsEditable ; FText FilterText ; TSharedPtr<FUICommandList_Pinnable> UICommandList ; EBlendProfileMode NewBlendProfileMode ; bool bIsCreateNewBlendProfile = false ; EBoneFilter BoneFilter ; ESocketFilter SocketFilter ; TSharedPtr<ISkeletonTreeItem> DeferredRenameRequest ; int32 LastCachedLODForPreviewMeshComponent ; FOnSkeletonTreeSelectionChangedMulticast OnSelectionChangedMulticast ; bool bSelecting ; TSharedPtr<SComboButton> FilterComboButton ; void)",
    "insertText": "AddVirtualBones(const TArray<FVirtualBone>& VirtualBones)"
  },
  {
    "label": "IsBlendProfileSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlendProfileSelected(FName ProfileName)"
  }
]