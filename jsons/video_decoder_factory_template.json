[
  {
    "label": "VideoDecoderFactoryTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoDecoderFactoryTemplate"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_VIDEO_DECODER_FACTORY_TEMPLATE_H_ # define API_VIDEO_CODECS_VIDEO_DECODER_FACTORY_TEMPLATE_H_ # include<memory> # include<vector> # include \" absl / algorithm / container . h \" # include \" api / array_view . h \" # include \" api / video_codecs / video_decoder . h \" # include \" api / video_codecs / video_decoder_factory . h \" namespace webrtc { template<. . . Ts> class VideoDecoderFactoryTemplate : public VideoDecoderFactory { public : std::vector<SdpVideoFormat>)",
    "insertText": "GetSupportedFormats()"
  },
  {
    "label": "CreateVideoDecoder()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<VideoDecoder>)",
    "insertText": "CreateVideoDecoder(const SdpVideoFormat& format)"
  },
  {
    "label": "IsFormatInList()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "IsFormatInList(const SdpVideoFormat& format, rtc::ArrayView<const SdpVideoFormat> supported_formats)"
  },
  {
    "label": "GetSupportedFormatsInternal()",
    "kind": "Method",
    "detail": "Function (} template<V,. . . Vs> std::vector<SdpVideoFormat>)",
    "insertText": "GetSupportedFormatsInternal()"
  },
  {
    "label": "SupportedFormats()",
    "kind": "Method",
    "detail": "Function (auto supported_formats =)",
    "insertText": "SupportedFormats()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (supported_formats .)",
    "insertText": "push_back(other_format)"
  },
  {
    "label": "CreateVideoDecoderInternal()",
    "kind": "Method",
    "detail": "Function (} } } return supported_formats ; } template<V,. . . Vs> std::unique_ptr<VideoDecoder>)",
    "insertText": "CreateVideoDecoderInternal(const SdpVideoFormat& format)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(sizeof...(Vs) > 0)"
  }
]