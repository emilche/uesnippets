[
  {
    "label": "filter8_1dfunction()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_CONVOLVE_H_ # define VPX_VPX_DSP_X86_CONVOLVE_H_ # include<assert . h> # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_ports / compiler_attributes . h \" typedef void)",
    "insertText": "filter8_1dfunction(const uint8_t *src_ptr, ptrdiff_t src_pitch, uint8_t *output_ptr, ptrdiff_t out_pitch, uint32_t output_height, const int16_t *filter)"
  },
  {
    "label": "FUN_CONV_1D()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "FUN_CONV_1D(name, offset, step_q4, dir, src_start, avg, opt, is_avg) \\ void vpx_convolve8_##name##_##opt( \\ const uint8_t *src, ptrdiff_t src_stride, uint8_t *dst, \\ ptrdiff_t dst_stride, const InterpKernel *filter, int x0_q4, \\ int x_step_q4, int y0_q4, int y_step_q4, int w, int h)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (\\ const int16_t* filter_row = filter [)",
    "insertText": "offset(void)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(filter_row[3] != 128)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(step_q4 == 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(filter_row[0] | filter_row[1] | filter_row[6] | filter_row[7])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ const int num_taps = 8 ; \\)",
    "insertText": "while(w >= 16)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_filter_block1d16_ # # dir # # 8 _ # # avg # #)",
    "insertText": "opt(src_start, src_stride, dst, \\ dst_stride, h, filter_row)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ src + = 1 6 ; \\ dst + = 1 6 ; \\ w - = 1 6 ; \\ } \\)",
    "insertText": "if(w == 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(w == 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(filter_row[2] | filter_row[5])"
  },
  {
    "label": "FUN_CONV_2D()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "FUN_CONV_2D(avg, opt, is_avg) \\ void vpx_convolve8_##avg##opt( \\ const uint8_t *src, ptrdiff_t src_stride, uint8_t *dst, \\ ptrdiff_t dst_stride, const InterpKernel *filter, int x0_q4, \\ int x_step_q4, int y0_q4, int y_step_q4, int w, int h)"
  },
  {
    "label": "y0_q4()",
    "kind": "Method",
    "detail": "Function (\\ const int16_t* filter_x = filter [ x0_q4 ] ; \\ const int16_t* filter_y = filter [)",
    "insertText": "y0_q4(void)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(filter_x[3] != 128)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(filter_y[3] != 128)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(w <= 64)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(h <= 64)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(x_step_q4 == 16)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(y_step_q4 == 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(filter_x[0] | filter_x[1] | filter_x[6] | filter_x[7])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DECLARE_ALIGNED(16, uint8_t, fdata2[64 * 71] VPX_UNINITIALIZED)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_convolve8_horiz_ # #)",
    "insertText": "opt(src - 3 * src_stride, src_stride, fdata2, 64, \\ filter, x0_q4, x_step_q4, y0_q4, y_step_q4, w, \\ h + 7)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_convolve8_ # # avg # # vert_ # #)",
    "insertText": "opt(fdata2 + 3 * 64, 64, dst, dst_stride, \\ filter, x0_q4, x_step_q4, y0_q4, \\ y_step_q4, w, h)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(filter_x[2] | filter_x[5])"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_convolve8_horiz_ # #)",
    "insertText": "opt(\\ src - (num_taps / 2 - 1) * src_stride, src_stride, fdata2, 64, \\ filter, x0_q4, x_step_q4, y0_q4, y_step_q4, w, h + num_taps - 1)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_convolve8_ # # avg # # vert_ # #)",
    "insertText": "opt(fdata2 + 64 * (num_taps / 2 - 1), 64, \\ dst, dst_stride, filter, x0_q4, \\ x_step_q4, y0_q4, y_step_q4, w, h)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "DECLARE_ALIGNED(16, uint8_t, fdata2[64 * 65] VPX_UNINITIALIZED)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_convolve8_horiz_ # #)",
    "insertText": "opt(src, src_stride, fdata2, 64, filter, x0_q4, \\ x_step_q4, y0_q4, y_step_q4, w, h + 1)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_convolve8_ # # avg # # vert_ # #)",
    "insertText": "opt(fdata2, 64, dst, dst_stride, filter, \\ x0_q4, x_step_q4, y0_q4, y_step_q4, w, \\ h)"
  },
  {
    "label": "highbd_filter8_1dfunction()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # if CONFIG_VP9_HIGHBITDEPTH typedef void)",
    "insertText": "highbd_filter8_1dfunction(const uint16_t *src_ptr, const ptrdiff_t src_pitch, uint16_t *output_ptr, ptrdiff_t out_pitch, unsigned int output_height, const int16_t *filter, int bd)"
  },
  {
    "label": "HIGH_FUN_CONV_1D()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "HIGH_FUN_CONV_1D(name, offset, step_q4, dir, src_start, avg, opt, \\ is_avg) \\ void vpx_highbd_convolve8_##name##_##opt( \\ const uint16_t *src, ptrdiff_t src_stride, uint16_t *dst, \\ ptrdiff_t dst_stride, const InterpKernel *filter_kernel, int x0_q4, \\ int x_step_q4, int y0_q4, int y_step_q4, int w, int h, int bd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ const int16_t* filter_row = filter_kernel [ offset ] ; \\)",
    "insertText": "if(step_q4 == 16 && filter_row[3] != 128)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_filter_block1d16_ # # dir # # 8 _ # # avg # #)",
    "insertText": "opt(\\ src_start, src_stride, dst, dst_stride, h, filter_row, bd)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ src + = 1 6 ; \\ dst + = 1 6 ; \\ w - = 1 6 ; \\ } \\)",
    "insertText": "while(w >= 8)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ src + = 8 ; \\ dst + = 8 ; \\ w - = 8 ; \\ } \\)",
    "insertText": "while(w >= 4)"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (\\ src + = 4 ; \\ dst + = 4 ; \\)",
    "insertText": "w(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\)",
    "insertText": "if(w)"
  },
  {
    "label": "_c()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_convolve8_ # # name # #)",
    "insertText": "_c(src, src_stride, dst, dst_stride, \\ filter_kernel, x0_q4, x_step_q4, y0_q4, \\ y_step_q4, w, h, bd)"
  },
  {
    "label": "HIGH_FUN_CONV_2D()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "HIGH_FUN_CONV_2D(avg, opt, is_avg) \\ void vpx_highbd_convolve8_##avg##opt( \\ const uint16_t *src, ptrdiff_t src_stride, uint16_t *dst, \\ ptrdiff_t dst_stride, const InterpKernel *filter, int x0_q4, \\ int x_step_q4, int y0_q4, int y_step_q4, int w, int h, int bd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(x_step_q4 == 16 && y_step_q4 == 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((filter_x[0] | filter_x[1] | filter_x[6] | filter_x[7]) || \\ filter_x[3] == 128)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DECLARE_ALIGNED(16, uint16_t, fdata2[64 * 71] VPX_UNINITIALIZED)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_convolve8_horiz_ # #)",
    "insertText": "opt(src - 3 * src_stride, src_stride, \\ fdata2, 64, filter, x0_q4, x_step_q4, \\ y0_q4, y_step_q4, w, h + 7, bd)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_convolve8_ # # avg # # vert_ # #)",
    "insertText": "opt(\\ fdata2 + 192, 64, dst, dst_stride, filter, x0_q4, x_step_q4, \\ y0_q4, y_step_q4, w, h, bd)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_convolve8_horiz_ # #)",
    "insertText": "opt(\\ src - (num_taps / 2 - 1) * src_stride, src_stride, fdata2, 64, \\ filter, x0_q4, x_step_q4, y0_q4, y_step_q4, w, h + num_taps - 1, \\ bd)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_convolve8_ # # avg # # vert_ # #)",
    "insertText": "opt(\\ fdata2 + 64 * (num_taps / 2 - 1), 64, dst, dst_stride, filter, \\ x0_q4, x_step_q4, y0_q4, y_step_q4, w, h, bd)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "DECLARE_ALIGNED(16, uint16_t, fdata2[64 * 65] VPX_UNINITIALIZED)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_convolve8_horiz_ # #)",
    "insertText": "opt(src, src_stride, fdata2, 64, filter, \\ x0_q4, x_step_q4, y0_q4, y_step_q4, \\ w, h + 1, bd)"
  },
  {
    "label": "opt()",
    "kind": "Method",
    "detail": "Function (\\ vpx_highbd_convolve8_ # # avg # # vert_ # #)",
    "insertText": "opt(fdata2, 64, dst, dst_stride, \\ filter, x0_q4, x_step_q4, \\ y0_q4, y_step_q4, w, h, bd)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } else { \\ vpx_highbd_convolve8_ # # avg # #)",
    "insertText": "c(src, src_stride, dst, dst_stride, filter, \\ x0_q4, x_step_q4, y0_q4, y_step_q4, w, h, \\ bd)"
  }
]