[
  {
    "label": "TArrayCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayCollection"
  },
  {
    "label": "TArrayCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / ArrayCollectionArrayBase . h \" namespace Chaos { class TArrayCollection { public :)",
    "insertText": "TArrayCollection() : MSize(0)"
  },
  {
    "label": "TArrayCollection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TArrayCollection(const TArrayCollection& Other)"
  },
  {
    "label": "TArrayCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayCollection(TArrayCollection&& Other)"
  },
  {
    "label": "TArrayCollection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TArrayCollection()"
  },
  {
    "label": "ShrinkArrays()",
    "kind": "Method",
    "detail": "Function (MArrays [ Index ] = nullptr ; } } void)",
    "insertText": "ShrinkArrays(const float MaxSlackFraction, const int32 MinSlack)"
  },
  {
    "label": "ApplyShrinkPolicy()",
    "kind": "Method",
    "detail": "Function (MArrays [ Index ] ->)",
    "insertText": "ApplyShrinkPolicy(MaxSlackFraction, MinSlack)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (} } } int32)",
    "insertText": "AddArray(TArrayCollectionArrayBase* Array)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Index = MArrays .)",
    "insertText": "Find(nullptr)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Index = MArrays .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MArrays .)",
    "insertText": "Add(Array)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} else { MArrays [ Index ] = Array ; } MArrays [ Index ] ->)",
    "insertText": "Resize(MSize)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 Idx = MArrays .)",
    "insertText": "Find(Array)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (MArrays [ Idx ] = nullptr ; } } void)",
    "insertText": "RemoveAt(int32 Index, int32 Count)"
  },
  {
    "label": "RemoveAtHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAtHelper(Index, Count)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Size()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 Size = 0 ;)",
    "insertText": "for(TArrayCollectionArrayBase* Array : MArrays)"
  },
  {
    "label": "SizeOfElem()",
    "kind": "Method",
    "detail": "Function (Size + = Array ->)",
    "insertText": "SizeOfElem()"
  },
  {
    "label": "AddElementsHelper()",
    "kind": "Method",
    "detail": "Function (} } return Size ; } protected : void)",
    "insertText": "AddElementsHelper(const int32 Num)"
  },
  {
    "label": "ResizeHelper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeHelper(const int32 Num)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "Resize(Num)"
  },
  {
    "label": "RemoveAtHelper()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "RemoveAtHelper(const int32 Index, const int32 Count)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "RemoveAt(Index, Count)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} } const int32 AvailableToRemove = MSize - Index ; MSize - =)",
    "insertText": "Min(AvailableToRemove, Count)"
  },
  {
    "label": "RemoveAtSwapHelper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtSwapHelper(const int32 Index)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "MoveToOtherArrayCollection()",
    "kind": "Method",
    "detail": "Function (} } MSize - - ; } void)",
    "insertText": "MoveToOtherArrayCollection(const int32 Index, TArrayCollection& Other)"
  },
  {
    "label": "MoveToOtherArray()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "MoveToOtherArray(Index, *Other.MArrays[ArrayIdx])"
  }
]