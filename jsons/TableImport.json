[
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "FImportTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportTableRow"
  },
  {
    "label": "ITableImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableImportData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTableImportCallbackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTableImportCallbackParams"
  },
  {
    "label": "FTableImportService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableImportService"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TraceServices / Containers / Tables . h \" class FTokenizedMessage ; namespace TraceServices { class FImportTableRow ; class ITableImportData { TSharedPtr<ITable<FImportTableRow>>)",
    "insertText": "GetTable()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; enum class ETableImportResult : uint32 { ESuccess = 0,EFail = 1,} ; struct FTableImportCallbackParams { FName TableId ; ETableImportResult Result ; TSharedPtr<ITable<FImportTableRow>> Table ; TArray<TSharedRef<FTokenizedMessage>> Messages ; } ; class FTableImportService { public : typedef TFunction<)",
    "insertText": "void(TSharedPtr<FTableImportCallbackParams>)"
  },
  {
    "label": "ImportTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportTable(const FString& InPath, FName TableId, TableImportCallback InCallback)"
  }
]