[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "ECoordSysType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECoordSysType"
  },
  {
    "label": "CDefaultCoordinateSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDefaultCoordinateSystem"
  },
  {
    "label": "CRHCS_Yup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CRHCS_Yup"
  },
  {
    "label": "CLHCS_Yup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CLHCS_Yup"
  },
  {
    "label": "CLHCS_Zup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CLHCS_Zup"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / ExportBegin . h \" # include \" Core / Matrix . h \" # include<cassert> # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "CCoordSysBase()",
    "kind": "Method",
    "detail": "Function (class ST_DLL_LINK CCoordSysBase { public : ~)",
    "insertText": "CCoordSysBase()"
  },
  {
    "label": "IsLeftHanded()",
    "kind": "Method",
    "detail": "Function (} st_bool)",
    "insertText": "IsLeftHanded(void)"
  },
  {
    "label": "IsYAxisUp()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsYAxisUp(void)"
  },
  {
    "label": "ConvertToStd()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "ConvertToStd(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "ConvertToStd()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "ConvertToStd(const st_float32 afCoord[3])"
  },
  {
    "label": "ConvertFromStd()",
    "kind": "Method",
    "detail": "Function (} Vec3)",
    "insertText": "ConvertFromStd(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "ConvertFromStd()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "ConvertFromStd(const st_float32 afCoord[3])"
  },
  {
    "label": "OutAxis()",
    "kind": "Method",
    "detail": "Function (} const Vec3&)",
    "insertText": "OutAxis(void)"
  },
  {
    "label": "RightAxis()",
    "kind": "Method",
    "detail": "Function (const Vec3&)",
    "insertText": "RightAxis(void)"
  },
  {
    "label": "UpAxis()",
    "kind": "Method",
    "detail": "Function (const Vec3&)",
    "insertText": "UpAxis(void)"
  },
  {
    "label": "OutComponent()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "OutComponent(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "RightComponent()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "RightComponent(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "UpComponent()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "UpComponent(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "RotateUpAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateUpAxis(Mat3x3& mMatrix, st_float32 fRadians)"
  },
  {
    "label": "RotateUpAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateUpAxis(Mat4x4& mMatrix, st_float32 fRadians)"
  },
  {
    "label": "RotateOutAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateOutAxis(Mat3x3& mMatrix, st_float32 fRadians)"
  },
  {
    "label": "RotateOutAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateOutAxis(Mat4x4& mMatrix, st_float32 fRadians)"
  },
  {
    "label": "SetCoordSys()",
    "kind": "Method",
    "detail": "Function (} ; class ST_DLL_LINK CCoordSys { public : enum ECoordSysType { COORD_SYS_RIGHT_HANDED_Z_UP,COORD_SYS_RIGHT_HANDED_Y_UP,COORD_SYS_LEFT_HANDED_Z_UP,COORD_SYS_LEFT_HANDED_Y_UP,COORD_SYS_CUSTOM } ; void ST_CALL_CONV)",
    "insertText": "SetCoordSys(ECoordSysType eType, const CCoordSysBase* pCustomConverter = NULL)"
  },
  {
    "label": "CoordSysName()",
    "kind": "Method",
    "detail": "Function (const char* ST_CALL_CONV)",
    "insertText": "CoordSysName(ECoordSysType eType)"
  },
  {
    "label": "GetCoordSysType()",
    "kind": "Method",
    "detail": "Function (ECoordSysType ST_CALL_CONV)",
    "insertText": "GetCoordSysType(void)"
  },
  {
    "label": "IsDefaultCoordSys()",
    "kind": "Method",
    "detail": "Function (st_bool ST_CALL_CONV)",
    "insertText": "IsDefaultCoordSys(void)"
  },
  {
    "label": "GetBuiltInConverter()",
    "kind": "Method",
    "detail": "Function (const CCoordSysBase* ST_CALL_CONV)",
    "insertText": "GetBuiltInConverter(ECoordSysType eType)"
  },
  {
    "label": "OutComponent()",
    "kind": "Method",
    "detail": "Function (st_float32 ST_CALL_CONV)",
    "insertText": "OutComponent(const st_float32 afCoord[3])"
  },
  {
    "label": "RightComponent()",
    "kind": "Method",
    "detail": "Function (st_float32 ST_CALL_CONV)",
    "insertText": "RightComponent(const st_float32 afCoord[3])"
  },
  {
    "label": "UpComponent()",
    "kind": "Method",
    "detail": "Function (st_float32 ST_CALL_CONV)",
    "insertText": "UpComponent(const st_float32 afCoord[3])"
  },
  {
    "label": "CDefaultCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (const CCoordSysBase* m_pCoordSys ; ECoordSysType m_eCoordSysType ; } ; class CDefaultCoordinateSystem : public CCoordSysBase { public : ~)",
    "insertText": "CDefaultCoordinateSystem()"
  },
  {
    "label": "RotateZ()",
    "kind": "Method",
    "detail": "Function (mMatrix .)",
    "insertText": "RotateZ(fRadians)"
  },
  {
    "label": "RotateY()",
    "kind": "Method",
    "detail": "Function (mMatrix .)",
    "insertText": "RotateY(fRadians)"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (} private : const Vec3 m_vOut ; const Vec3 m_vRight ; const Vec3 m_vUp ; } ; const Vec3 c_vRHCS_Yup_Out =)",
    "insertText": "Vec3(0.0f, 0.0f, -1.0f)"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (const Vec3 c_vRHCS_Yup_Right =)",
    "insertText": "Vec3(1.0f, 0.0f, 0.0f)"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (const Vec3 c_vRHCS_Yup_Up =)",
    "insertText": "Vec3(0.0f, 1.0f, 0.0f)"
  },
  {
    "label": "CRHCS_Yup()",
    "kind": "Method",
    "detail": "Function (class CRHCS_Yup : public CCoordSysBase { public :)",
    "insertText": "CRHCS_Yup()"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (} } ; const Vec3 c_vLHCS_Yup_Out =)",
    "insertText": "Vec3(0.0f, 0.0f, 1.0f)"
  },
  {
    "label": "CLHCS_Yup()",
    "kind": "Method",
    "detail": "Function (class CLHCS_Yup : public CCoordSysBase { public :)",
    "insertText": "CLHCS_Yup()"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (} } ; const Vec3 c_vLHCS_Zup_Out =)",
    "insertText": "Vec3(0.0f, -1.0f, 0.0f)"
  },
  {
    "label": "CLHCS_Zup()",
    "kind": "Method",
    "detail": "Function (class CLHCS_Zup : public CCoordSysBase { public :)",
    "insertText": "CLHCS_Zup()"
  }
]