[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FBuildVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildVersion"
  },
  {
    "label": "FBuildVersion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Misc / EngineVersion . h \" class FJsonObject ; class FBuildVersion { public : int MajorVersion ; int MinorVersion ; int PatchVersion ; int Changelist ; int CompatibleChangelist ; int IsLicenseeVersion ; int IsPromotedBuild ; FString BranchName ; FString BuildId ; FString BuildVersion ; FString BuildUrl ;)",
    "insertText": "FBuildVersion()"
  },
  {
    "label": "GetEffectiveCompatibleChangelist()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEffectiveCompatibleChangelist()"
  },
  {
    "label": "GetEngineVersion()",
    "kind": "Method",
    "detail": "Function (FEngineVersion)",
    "insertText": "GetEngineVersion()"
  },
  {
    "label": "GetCompatibleEngineVersion()",
    "kind": "Method",
    "detail": "Function (FEngineVersion)",
    "insertText": "GetCompatibleEngineVersion()"
  },
  {
    "label": "GetDefaultFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultFileName()"
  },
  {
    "label": "GetFileNameForCurrentExecutable()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFileNameForCurrentExecutable()"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(const FString& FileName, FBuildVersion& OutVersion)"
  },
  {
    "label": "TryReadFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReadFromString(const FString& Text, FBuildVersion& OutVersion)"
  }
]