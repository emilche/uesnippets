[
  {
    "label": "FSceneTextureParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureParameters"
  },
  {
    "label": "FScreenProbeParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenProbeParameters"
  },
  {
    "label": "FRadianceCacheInputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRadianceCacheInputs"
  },
  {
    "label": "FRadianceCacheConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRadianceCacheConfiguration"
  },
  {
    "label": "TInlineArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInlineArray"
  },
  {
    "label": "FUpdateInputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdateInputs"
  },
  {
    "label": "FUpdateOutputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdateOutputs"
  },
  {
    "label": "LumenRadianceCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LumenRadianceCache"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" LumenRadianceCacheInterpolation . h \" # include \" LumenTracingUtils . h \" class FSceneTextureParameters ; class FScreenProbeParameters ; namespace LumenRadianceCache { class FRadianceCacheInputs ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FRadianceCacheMarkParameters, ) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture3D<uint>, RWRadianceProbeIndirectionTexture) SHADER_PARAMETER_ARRAY(FVector4f, ClipmapCornerTWSAndCellSizeForMark, [MaxClipmaps]) SHADER_PARAMETER(uint32, RadianceProbeClipmapResolutionForMark) SHADER_PARAMETER(uint32, NumRadianceProbeClipmapsForMark) SHADER_PARAMETER(float, InvClipmapFadeSizeForMark) END_SHADER_PARAMETER_STRUCT() } DECLARE_MULTICAST_DELEGATE_ThreeParams(FMarkUsedRadianceCacheProbes, FRDGBuilder&, const FViewInfo&, const LumenRadianceCache::FRadianceCacheMarkParameters&)"
  },
  {
    "label": "TInlineArray()",
    "kind": "Method",
    "detail": "Function (struct FRadianceCacheConfiguration { bool bFarField = true ; } ; namespace LumenRadianceCache { template<T,uint32 NumInlineElements = 4> class TInlineArray : public TArray<T,TInlineAllocator<NumInlineElements>> { public :)",
    "insertText": "TInlineArray()"
  },
  {
    "label": "TInlineArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TInlineArray(int32 InNum) : TArray<T, TInlineAllocator<NumInlineElements>>()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (TArray<T,TInlineAllocator<NumInlineElements>)",
    "insertText": "AddZeroed(InNum)"
  },
  {
    "label": "FUpdateInputs()",
    "kind": "Method",
    "detail": "Function (} } ; class FUpdateInputs { public : FRadianceCacheInputs RadianceCacheInputs ; FRadianceCacheConfiguration Configuration ; const FViewInfo& View ; const FScreenProbeParameters* ScreenProbeParameters ; FRDGBufferSRVRef BRDFProbabilityDensityFunctionSH ; FMarkUsedRadianceCacheProbes GraphicsMarkUsedRadianceCacheProbes ; FMarkUsedRadianceCacheProbes ComputeMarkUsedRadianceCacheProbes ;)",
    "insertText": "FUpdateInputs(const FRadianceCacheInputs& InRadianceCacheInputs, FRadianceCacheConfiguration InConfiguration, const FViewInfo& InView, const FScreenProbeParameters* InScreenProbeParameters, FRDGBufferSRVRef InBRDFProbabilityDensityFunctionSH, FMarkUsedRadianceCacheProbes&& InGraphicsMarkUsedRadianceCacheProbes, FMarkUsedRadianceCacheProbes&& InComputeMarkUsedRadianceCacheProbes) : RadianceCacheInputs(InRadianceCacheInputs), Configuration(InConfiguration), View(InView), ScreenProbeParameters(InScreenProbeParameters), BRDFProbabilityDensityFunctionSH(InBRDFProbabilityDensityFunctionSH), GraphicsMarkUsedRadianceCacheProbes(MoveTemp(InGraphicsMarkUsedRadianceCacheProbes)), ComputeMarkUsedRadianceCacheProbes(MoveTemp(InComputeMarkUsedRadianceCacheProbes))"
  },
  {
    "label": "IsAnyCallbackBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnyCallbackBound()"
  },
  {
    "label": "FUpdateOutputs()",
    "kind": "Method",
    "detail": "Function (} } ; class FUpdateOutputs { public : FRadianceCacheState& RadianceCacheState ; FRadianceCacheInterpolationParameters& RadianceCacheParameters ;)",
    "insertText": "FUpdateOutputs(FRadianceCacheState& InRadianceCacheState, FRadianceCacheInterpolationParameters& InRadianceCacheParameters) : RadianceCacheState(InRadianceCacheState), RadianceCacheParameters(InRadianceCacheParameters)"
  },
  {
    "label": "UpdateRadianceCaches()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "UpdateRadianceCaches(FRDGBuilder& GraphBuilder, const FLumenSceneFrameTemporaries& FrameTemporaries, const TInlineArray<FUpdateInputs>& InputArray, TInlineArray<FUpdateOutputs>& OutputArray, const FScene* Scene, const FViewFamilyInfo& ViewFamily, bool bPropagateGlobalLightingChange, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "GetLumenSceneLightingComputePassFlags()",
    "kind": "Method",
    "detail": "Function (ERDGPassFlags)",
    "insertText": "GetLumenSceneLightingComputePassFlags(const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "UseHitLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHitLighting(const FViewInfo& View, EDiffuseIndirectMethod DiffuseIndirectMethod)"
  },
  {
    "label": "MarkUsedProbesForVisualize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkUsedProbesForVisualize(FRDGBuilder& GraphBuilder, const FViewInfo& View, const class LumenRadianceCache::FRadianceCacheMarkParameters& RadianceCacheMarkParameters, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  }
]