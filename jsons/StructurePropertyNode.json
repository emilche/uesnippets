[
  {
    "label": "FStructurePropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructurePropertyNode"
  },
  {
    "label": "FStructurePropertyNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PropertyNode . h \" # include \" UObject / StructOnScope . h \" # include \" IStructureDataProvider . h \" # include \" ObjectPropertyNode . h \" class FStructurePropertyNode : public FComplexPropertyNode { public :)",
    "insertText": "FStructurePropertyNode() : FComplexPropertyNode()"
  },
  {
    "label": "FStructurePropertyNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStructurePropertyNode()"
  },
  {
    "label": "AsStructureNode()",
    "kind": "Method",
    "detail": "Function (} FStructurePropertyNode*)",
    "insertText": "AsStructureNode()"
  },
  {
    "label": "ClearCachedReadAddresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedReadAddresses(true)"
  },
  {
    "label": "DestroyTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTree(bInDestroySelf)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StructProvider = nullptr ; WeakCachedBaseStruct .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetStructure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStructure(TSharedPtr<FStructOnScope> InStructData)"
  },
  {
    "label": "RemoveStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStructure(false)"
  },
  {
    "label": "FStructOnScopeStructureDataProvider()",
    "kind": "Method",
    "detail": "Function (StructProvider = MakeShared<)",
    "insertText": "FStructOnScopeStructureDataProvider(InStructData)"
  },
  {
    "label": "SetStructure()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetStructure(TSharedPtr<IStructureDataProvider> InStructProvider)"
  },
  {
    "label": "HasValidStructData()",
    "kind": "Method",
    "detail": "Function (StructProvider = InStructProvider ; } bool)",
    "insertText": "HasValidStructData()"
  },
  {
    "label": "GetStructData()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FStructOnScope>)",
    "insertText": "GetStructData()"
  },
  {
    "label": "GetInstances()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FStructOnScope>> Instances ; StructProvider ->)",
    "insertText": "GetInstances(Instances, WeakCachedBaseStruct.Get())"
  },
  {
    "label": "GetInstances()",
    "kind": "Method",
    "detail": "Function (StructProvider ->)",
    "insertText": "GetInstances(OutStructs, WeakCachedBaseStruct.Get())"
  },
  {
    "label": "GetStructProvider()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<IStructureDataProvider>)",
    "insertText": "GetStructProvider()"
  },
  {
    "label": "GetReadAddressUncached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReadAddressUncached(const FPropertyNode& InPropertyNode, bool InRequiresSingleSelection, FReadAddressListData* OutAddresses, bool bComparePropertyContents, bool bObjectForceCompare, bool bArrayPropertiesCanDifferInSize)"
  },
  {
    "label": "GetOwnerPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOwnerPackages(TArray<UPackage*>& OutPackages)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const FPropertyNode* Parent = this ;)",
    "insertText": "while(Parent)"
  },
  {
    "label": "FindComplexParent()",
    "kind": "Method",
    "detail": "Function (const FComplexPropertyNode* ComplexParent = Parent ->)",
    "insertText": "FindComplexParent()"
  },
  {
    "label": "GetUPackage()",
    "kind": "Method",
    "detail": "Function (const UPackage* Package = ObjectNode ->)",
    "insertText": "GetUPackage(ObjectIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutPackages .)",
    "insertText": "Add(const_cast<UPackage*>(Package))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; })",
    "insertText": "if(const FStructurePropertyNode* StructNode = ComplexParent->AsStructureNode())"
  },
  {
    "label": "GetParentNode()",
    "kind": "Method",
    "detail": "Function (Parent = ComplexParent ->)",
    "insertText": "GetParentNode()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutPackages .)",
    "insertText": "Add(nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } else {)",
    "insertText": "if(StructNode->StructProvider)"
  },
  {
    "label": "GetInstances()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FStructOnScope>> Instances ; StructNode -> StructProvider ->)",
    "insertText": "GetInstances(Instances, StructNode->WeakCachedBaseStruct.Get())"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (UPackage* Package = Instances [ Index ] ->)",
    "insertText": "GetPackage()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutPackages .)",
    "insertText": "Add(Package)"
  },
  {
    "label": "GetBaseStructure()",
    "kind": "Method",
    "detail": "Function (} } break ; } } } } } const UStruct*)",
    "insertText": "GetBaseStructure()"
  },
  {
    "label": "GetAllStructures()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TArray<UStruct*>)",
    "insertText": "GetAllStructures()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<UStruct*> RetVal ;)",
    "insertText": "if(StructProvider)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (const UStruct* Struct = Instance .)",
    "insertText": "IsValid() ? Instance->GetStruct()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (RetVal .)",
    "insertText": "AddUnique(const_cast<UStruct*>(Struct))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (RetVal .)",
    "insertText": "AddUnique(Struct)"
  },
  {
    "label": "GetInstancesNum()",
    "kind": "Method",
    "detail": "Function (} } } return RetVal ; } int32)",
    "insertText": "GetInstancesNum()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const FComplexPropertyNode* CurrentNode = this ;)",
    "insertText": "while(CurrentNode)"
  },
  {
    "label": "GetMemoryOfInstance()",
    "kind": "Method",
    "detail": "Function (} } else { return 0 ; } } } return 0 ; } uint8*)",
    "insertText": "GetMemoryOfInstance(int32 Index)"
  },
  {
    "label": "GetValuePtrOfInstance()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } uint8*)",
    "insertText": "GetValuePtrOfInstance(int32 Index, const FProperty* InProperty, const FPropertyNode* InParentNode)"
  },
  {
    "label": "GetInstanceAsUObject()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UObject>)",
    "insertText": "GetInstanceAsUObject(int32 Index)"
  },
  {
    "label": "DestroyTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTree()"
  },
  {
    "label": "GenerateSingleChild()",
    "kind": "Method",
    "detail": "Function (StructProvider = nullptr ; } TSharedPtr<FPropertyNode>)",
    "insertText": "GenerateSingleChild(FName ChildPropertyName)"
  },
  {
    "label": "EnsureDataIsValid()",
    "kind": "Method",
    "detail": "Function (protected : EPropertyDataValidationResult)",
    "insertText": "EnsureDataIsValid()"
  },
  {
    "label": "InitChildNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitChildNodes()"
  },
  {
    "label": "InitBeforeNodeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBeforeNodeFlags()"
  },
  {
    "label": "InternalInitChildNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalInitChildNodes(FName SinglePropertyName)"
  },
  {
    "label": "GetValueBaseAddress()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetValueBaseAddress(uint8* Base, bool bIsSparseData, bool bIsStruct)"
  },
  {
    "label": "GetQualifiedName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetQualifiedName(FString& PathPlusIndex, const bool bWithArrayIndex, const FPropertyNode* StopParent = nullptr, bool bIgnoreCategories = false)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (bool bAddedAnything = false ; const TSharedPtr<FPropertyNode> ParentNode = ParentNodeWeakPtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "GetQualifiedName()",
    "kind": "Method",
    "detail": "Function (bAddedAnything = ParentNode ->)",
    "insertText": "GetQualifiedName(PathPlusIndex, bWithArrayIndex, StopParent, bIgnoreCategories)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bAddedAnything)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (PathPlusIndex + =)",
    "insertText": "TEXT(\".\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} PathPlusIndex + =)",
    "insertText": "TEXT(\"Struct\")"
  }
]