[
  {
    "label": "UntypedFormatSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UntypedFormatSpec"
  },
  {
    "label": "FormatCountCapture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatCountCapture"
  },
  {
    "label": "str_format_internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "str_format_internal"
  },
  {
    "label": "FormatRawSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatRawSink"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FormatConversionSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatConversionSpec"
  },
  {
    "label": "FormatSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatSink"
  },
  {
    "label": "FormatConvertResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FormatConvertResult"
  },
  {
    "label": "UntypedFormatSpec()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_STR_FORMAT_H_ # define ABSL_STRINGS_STR_FORMAT_H_ # include<cstdio> # include<string> # include \" absl / strings / internal / str_format / arg . h \" # include \" absl / strings / internal / str_format / bind . h \" # include \" absl / strings / internal / str_format / checker . h \" # include \" absl / strings / internal / str_format / extension . h \" # include \" absl / strings / internal / str_format / parser . h \" namespace absl { ABSL_NAMESPACE_BEGIN class UntypedFormatSpec { public :)",
    "insertText": "UntypedFormatSpec()"
  },
  {
    "label": "UntypedFormatSpec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UntypedFormatSpec(const UntypedFormatSpec&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UntypedFormatSpec&)",
    "insertText": "operator(const UntypedFormatSpec&)"
  },
  {
    "label": "UntypedFormatSpec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UntypedFormatSpec(string_view s) : spec_(s)"
  },
  {
    "label": "UntypedFormatSpec()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "UntypedFormatSpec(const str_format_internal::ParsedFormatBase* pc) : spec_(pc)"
  },
  {
    "label": "FormatStreamed()",
    "kind": "Method",
    "detail": "Function (} private : str_format_internal::UntypedFormatSpecImpl ; str_format_internal::UntypedFormatSpecImpl spec_ ; } ; template<T> str_format_internal::StreamedWrapper<T>)",
    "insertText": "FormatStreamed(const T& v)"
  },
  {
    "label": "FormatCountCapture()",
    "kind": "Method",
    "detail": "Function (} class FormatCountCapture { public :)",
    "insertText": "FormatCountCapture(int* p) : p_(p)"
  },
  {
    "label": "Unused()",
    "kind": "Method",
    "detail": "Function (} private : struct str_format_internal::FormatCountCaptureHelper ; int*)",
    "insertText": "Unused()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__cpp_nontype_template_parameter_auto) template <auto... Conv> using ParsedFormat = absl::str_format_internal::ExtendedParsedFormat< absl::str_format_internal::ToFormatConversionCharSet(Conv)"
  },
  {
    "label": "ToFormatConversionCharSet()",
    "kind": "Method",
    "detail": "Function (# else template<char . . . Conv> using ParsedFormat = str_format_internal::ExtendedParsedFormat<absl::)",
    "insertText": "ToFormatConversionCharSet(Conv)"
  },
  {
    "label": "StrFormat()",
    "kind": "Method",
    "detail": "Function (# endif template<. . . Args> ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrFormat(const FormatSpec<Args...>& format, const Args&... args)"
  },
  {
    "label": "StrAppendFormat()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> std::string&)",
    "insertText": "StrAppendFormat(std::string* dst, const FormatSpec<Args...>& format, const Args&... args)"
  },
  {
    "label": "StreamFormat()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> ABSL_MUST_USE_RESULT str_format_internal::Streamable)",
    "insertText": "StreamFormat(const FormatSpec<Args...>& format, const Args&... args)"
  },
  {
    "label": "PrintF()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> int)",
    "insertText": "PrintF(const FormatSpec<Args...>& format, const Args&... args)"
  },
  {
    "label": "FPrintF()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> int)",
    "insertText": "FPrintF(std::FILE* output, const FormatSpec<Args...>& format, const Args&... args)"
  },
  {
    "label": "SNPrintF()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> int)",
    "insertText": "SNPrintF(char* output, std::size_t size, const FormatSpec<Args...>& format, const Args&... args)"
  },
  {
    "label": "FormatRawSink()",
    "kind": "Method",
    "detail": "Function (} class FormatRawSink { public : template<T,= std::enable_if<std::is_constructible<str_format_internal::FormatRawSinkImpl,T*>::value>::type>)",
    "insertText": "FormatRawSink(T* raw) : sink_(raw)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} private : str_format_internal::FormatRawSinkImpl ; str_format_internal::FormatRawSinkImpl sink_ ; } ; template<. . . Args> bool)",
    "insertText": "Format(FormatRawSink raw_sink, const FormatSpec<Args...>& format, const Args&... args)"
  },
  {
    "label": "FormatUntyped()",
    "kind": "Method",
    "detail": "Function (} using FormatArg = str_format_internal::FormatArgImpl ; ABSL_MUST_USE_RESULT bool)",
    "insertText": "FormatUntyped(FormatRawSink raw_sink, const UntypedFormatSpec& format, absl::Span<const FormatArg> args)"
  },
  {
    "label": "is_basic()",
    "kind": "Method",
    "detail": "Function (} enum class FormatConversionChar : uint8_t { c,s,d,i,o,u,x,X,f,F,e,E,g,G,a,A,n,p,v } ; class FormatConversionSpec { public : bool)",
    "insertText": "is_basic()"
  },
  {
    "label": "has_left_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_left_flag()"
  },
  {
    "label": "has_show_pos_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_show_pos_flag()"
  },
  {
    "label": "has_sign_col_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_sign_col_flag()"
  },
  {
    "label": "has_alt_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_alt_flag()"
  },
  {
    "label": "has_zero_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_zero_flag()"
  },
  {
    "label": "conversion_char()",
    "kind": "Method",
    "detail": "Function (} FormatConversionChar)",
    "insertText": "conversion_char()"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "width()"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "precision()"
  },
  {
    "label": "FormatConversionSpec()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FormatConversionSpec(str_format_internal::FormatConversionSpecImpl impl) : impl_(impl)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} str_format_internal::FormatConversionSpecImpl ; absl::str_format_internal::FormatConversionSpecImpl impl_ ; } ; FormatConversionCharSet)",
    "insertText": "operator(FormatConversionCharSet a, FormatConversionCharSet b)"
  },
  {
    "label": "FormatConversionCharToConvInt()",
    "kind": "Method",
    "detail": "Function (} enum class FormatConversionCharSet : uint64_t { c =)",
    "insertText": "FormatConversionCharToConvInt('c'), s = str_format_internal::FormatConversionCharToConvInt('s'), d = str_format_internal::FormatConversionCharToConvInt('d'), i = str_format_internal::FormatConversionCharToConvInt('i'), o = str_format_internal::FormatConversionCharToConvInt('o'), u = str_format_internal::FormatConversionCharToConvInt('u'), x = str_format_internal::FormatConversionCharToConvInt('x'), X = str_format_internal::FormatConversionCharToConvInt('X'), f = str_format_internal::FormatConversionCharToConvInt('f'), F = str_format_internal::FormatConversionCharToConvInt('F'), e = str_format_internal::FormatConversionCharToConvInt('e'), E = str_format_internal::FormatConversionCharToConvInt('E'), g = str_format_internal::FormatConversionCharToConvInt('g'), G = str_format_internal::FormatConversionCharToConvInt('G'), a = str_format_internal::FormatConversionCharToConvInt('a'), A = str_format_internal::FormatConversionCharToConvInt('A'), n = str_format_internal::FormatConversionCharToConvInt('n'), p = str_format_internal::FormatConversionCharToConvInt('p'), v = str_format_internal::FormatConversionCharToConvInt('v'), kStar = static_cast<uint64_t>( absl::str_format_internal::FormatConversionCharSetInternal::kStar)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (class FormatSink { public : void)",
    "insertText": "Append(size_t count, char ch)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (sink_ ->)",
    "insertText": "Append(count, ch)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(string_view v)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (sink_ ->)",
    "insertText": "Append(v)"
  },
  {
    "label": "PutPaddedString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PutPaddedString(string_view v, int width, int precision, bool left)"
  },
  {
    "label": "AbslFormatFlush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AbslFormatFlush(FormatSink* sink, absl::string_view v)"
  },
  {
    "label": "FormatSink()",
    "kind": "Method",
    "detail": "Function (} private : str_format_internal::FormatSinkImpl ;)",
    "insertText": "FormatSink(str_format_internal::FormatSinkImpl* s) : sink_(s)"
  }
]