[
  {
    "label": "FWordMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWordMutex"
  },
  {
    "label": "FWordMutex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include<atomic> # define namespace UE { class FWordMutex final { public :)",
    "insertText": "FWordMutex()"
  },
  {
    "label": "FWordMutex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWordMutex(const FWordMutex&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWordMutex&)",
    "insertText": "operator(const FWordMutex&)"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLock()"
  },
  {
    "label": "compare_exchange_strong()",
    "kind": "Method",
    "detail": "Function (UPTRINT Expected = 0 ; return State .)",
    "insertText": "compare_exchange_strong(Expected, IsLockedFlag, std::memory_order_acquire, std::memory_order_relaxed)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Lock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UPTRINT Expected = 0 ;)",
    "insertText": "if(LIKELY(State.compare_exchange_weak(Expected, IsLockedFlag, std::memory_order_acquire, std::memory_order_relaxed)))"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unlock()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (UPTRINT CurrentState = State .)",
    "insertText": "fetch_sub(IsLockedFlag, std::memory_order_release)"
  },
  {
    "label": "bQueueEmpty()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bQueueEmpty(CurrentState & QueueMask)"
  },
  {
    "label": "bQueueLocked()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bQueueLocked(CurrentState & IsQueueLockedFlag)"
  },
  {
    "label": "LockSlow()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "LockSlow()"
  },
  {
    "label": "UnlockSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockSlow(UPTRINT CurrentState)"
  },
  {
    "label": "QueueMask()",
    "kind": "Method",
    "detail": "Function (UPTRINT IsLockedFlag = 1<<0 ; UPTRINT IsQueueLockedFlag = 1<<1 ; UPTRINT)",
    "insertText": "QueueMask(IsLockedFlag | IsQueueLockedFlag)"
  }
]