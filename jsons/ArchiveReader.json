[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_ArchiveReader_h # define Alembic_AbcCoreAbstract_ArchiveReader_h # include<Alembic / Util / Export . h> # include<Alembic / AbcCoreAbstract / Foundation . h> # include<Alembic / AbcCoreAbstract / ForwardDeclarations . h> # include<Alembic / AbcCoreAbstract / ReadArraySampleCache . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { namespace IllustrationOnly { struct ALEMBIC_EXPORT ArchiveReaderConstructor { ArchiveReaderPtr)",
    "insertText": "operator()( const std::string &iFileName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchiveReaderPtr)",
    "insertText": "operator()( const std::string &iFileName, ReadArraySampleCachePtr iCachePtr)"
  },
  {
    "label": "ArchiveReader()",
    "kind": "Method",
    "detail": "Function (} ; } class ALEMBIC_EXPORT ArchiveReader : private Alembic::Util::noncopyable { public : ~)",
    "insertText": "ArchiveReader()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getName()"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (const MetaData&)",
    "insertText": "getMetaData()"
  },
  {
    "label": "getTop()",
    "kind": "Method",
    "detail": "Function (ObjectReaderPtr)",
    "insertText": "getTop()"
  },
  {
    "label": "getReadArraySampleCachePtr()",
    "kind": "Method",
    "detail": "Function (ReadArraySampleCachePtr)",
    "insertText": "getReadArraySampleCachePtr()"
  },
  {
    "label": "setReadArraySampleCachePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setReadArraySampleCachePtr(ReadArraySampleCachePtr iPtr)"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (TimeSamplingPtr)",
    "insertText": "getTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "getMaxNumSamplesForTimeSamplingIndex()",
    "kind": "Method",
    "detail": "Function (index_t)",
    "insertText": "getMaxNumSamplesForTimeSamplingIndex(uint32_t iIndex)"
  },
  {
    "label": "getNumTimeSamplings()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getNumTimeSamplings()"
  },
  {
    "label": "getArchiveVersion()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getArchiveVersion()"
  },
  {
    "label": "asArchivePtr()",
    "kind": "Method",
    "detail": "Function (ArchiveReaderPtr)",
    "insertText": "asArchivePtr()"
  }
]