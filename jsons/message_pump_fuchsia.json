[
  {
    "label": "fdio",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fdio"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ZxHandleWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ZxHandleWatcher"
  },
  {
    "label": "ZxHandleWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ZxHandleWatchController"
  },
  {
    "label": "MessagePumpFuchsia",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpFuchsia"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "OnZxHandleSignalled()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_FUCHSIA_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_FUCHSIA_H_ # include<lib / async / wait . h> # include<memory> # include \" base / base_export . h \" # include \" base / location . h \" # include \" base / memory / weak_ptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / message_loop / watchable_io_message_pump_posix . h \" typedef struct fdio fdio_t ; namespace async { class Loop ; } namespace base { class BASE_EXPORT MessagePumpFuchsia : public MessagePump,public WatchableIOMessagePumpPosix { public : class ZxHandleWatcher { public : void)",
    "insertText": "OnZxHandleSignalled(zx_handle_t handle, zx_signals_t signals)"
  },
  {
    "label": "ZxHandleWatcher()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "ZxHandleWatcher()"
  },
  {
    "label": "ZxHandleWatchController()",
    "kind": "Method",
    "detail": "Function (} ; class ZxHandleWatchController : public async_wait_t { public :)",
    "insertText": "ZxHandleWatchController(const Location& from_here)"
  },
  {
    "label": "ZxHandleWatchController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZxHandleWatchController(const ZxHandleWatchController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ZxHandleWatchController&)",
    "insertText": "operator(const ZxHandleWatchController&)"
  },
  {
    "label": "ZxHandleWatchController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ZxHandleWatchController()"
  },
  {
    "label": "StopWatchingZxHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingZxHandle()"
  },
  {
    "label": "created_from_location()",
    "kind": "Method",
    "detail": "Function (const Location&)",
    "insertText": "created_from_location()"
  },
  {
    "label": "is_active()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_active()"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (const Location created_from_location_ ; bool* was_stopped_ = nullptr ; ZxHandleWatcher* watcher_ = nullptr ; WeakPtr<MessagePumpFuchsia> weak_pump_ ; bool persistent_ = false ; } ; class FdWatchController : public FdWatchControllerInterface,public ZxHandleWatchController,public ZxHandleWatcher { public :)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FdWatchController(const FdWatchController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FdWatchController&)",
    "insertText": "operator(const FdWatchController&)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FdWatchController()"
  },
  {
    "label": "StopWatchingFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingFileDescriptor()"
  },
  {
    "label": "WaitBegin()",
    "kind": "Method",
    "detail": "Function (private : class MessagePumpFuchsia ; bool)",
    "insertText": "WaitBegin()"
  },
  {
    "label": "MessagePumpFuchsia()",
    "kind": "Method",
    "detail": "Function (FdWatcher* watcher_ = nullptr ; int fd_ = - 1 ; uint32_t desired_events_ = 0 ; fdio_t* io_ = nullptr ; } ; enum Mode { WATCH_READ = 1<<0,WATCH_WRITE = 1<<1,WATCH_READ_WRITE = WATCH_READ | WATCH_WRITE } ;)",
    "insertText": "MessagePumpFuchsia()"
  },
  {
    "label": "MessagePumpFuchsia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpFuchsia(const MessagePumpFuchsia&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpFuchsia&)",
    "insertText": "operator(const MessagePumpFuchsia&)"
  },
  {
    "label": "WatchZxHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchZxHandle(zx_handle_t handle, bool persistent, zx_signals_t signals, ZxHandleWatchController* controller, ZxHandleWatcher* delegate)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd, bool persistent, int mode, FdWatchController* controller, FdWatcher* delegate)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "HandleIoEventsUntil()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HandleIoEventsUntil(zx_time_t deadline)"
  }
]