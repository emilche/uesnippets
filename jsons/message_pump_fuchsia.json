[
  {
    "label": "fdio",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fdio"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ZxHandleWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ZxHandleWatcher"
  },
  {
    "label": "ZxHandleWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ZxHandleWatchController"
  },
  {
    "label": "MessagePumpFuchsia",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpFuchsia"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "MessagePumpFuchsia",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpFuchsia"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "ZxHandleWatchController()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ZxHandleWatchController(const Location& from_here)"
  },
  {
    "label": "StopWatchingZxHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingZxHandle()"
  },
  {
    "label": "WaitBegin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitBegin()"
  },
  {
    "label": "HandleSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSignal(async_dispatcher_t* async,\n                             async_wait_t* wait,\n                             zx_status_t status,\n                             const zx_packet_signal_t* signal)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "WatchZxHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchZxHandle(zx_handle_t handle,\n                     bool persistent,\n                     zx_signals_t signals,\n                     ZxHandleWatchController* controller,\n                     ZxHandleWatcher* delegate)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd,\n                           bool persistent,\n                           int mode,\n                           FdWatchController* controller,\n                           FdWatcher* delegate)"
  },
  {
    "label": "HandleIoEventsUntil()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIoEventsUntil(zx_time_t deadline)"
  }
]