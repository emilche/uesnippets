[
  {
    "label": "MachineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoop"
  },
  {
    "label": "LoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBase"
  },
  {
    "label": "LoopInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfoBase"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "MachineLoop()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINELOOPINFO_H # define LLVM_CODEGEN_MACHINELOOPINFO_H # include \" llvm / Analysis / LoopInfo . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" namespace llvm { class MachineLoop ; template class LoopBase<MachineBasicBlock,MachineLoop> ; class MachineLoop : public LoopBase<MachineBasicBlock,MachineLoop> { public :)",
    "insertText": "MachineLoop()"
  },
  {
    "label": "getTopBlock()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock*)",
    "insertText": "getTopBlock()"
  },
  {
    "label": "getBottomBlock()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock*)",
    "insertText": "getBottomBlock()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "MachineLoop()",
    "kind": "Method",
    "detail": "Function (private : class LoopInfoBase<MachineBasicBlock,MachineLoop> ;)",
    "insertText": "MachineLoop(MachineBasicBlock *MBB) : LoopBase<MachineBasicBlock, MachineLoop>(MBB)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template class LoopInfoBase<MachineBasicBlock,MachineLoop> ; class MachineLoopInfo : public MachineFunctionPass { LoopInfoBase<MachineBasicBlock,MachineLoop> LI ; class LoopBase<MachineBasicBlock,MachineLoop> ; void)",
    "insertText": "operator(const MachineLoopInfo &)"
  },
  {
    "label": "MachineLoopInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachineLoopInfo(const MachineLoopInfo &)"
  },
  {
    "label": "MachineLoopInfo()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "MachineLoopInfo() : MachineFunctionPass(ID)"
  },
  {
    "label": "initializeMachineLoopInfoPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeMachineLoopInfoPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "getBase()",
    "kind": "Method",
    "detail": "Function (} LoopInfoBase<MachineBasicBlock,MachineLoop>&)",
    "insertText": "getBase()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "getLoopFor()",
    "kind": "Method",
    "detail": "Function (} MachineLoop*)",
    "insertText": "getLoopFor(const MachineBasicBlock *BB)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const MachineLoop*)",
    "insertText": "operator(const MachineBasicBlock *BB)"
  },
  {
    "label": "getLoopDepth()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getLoopDepth(const MachineBasicBlock *BB)"
  },
  {
    "label": "isLoopHeader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLoopHeader(const MachineBasicBlock *BB)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnMachineFunction(MachineFunction &F)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "removeLoop()",
    "kind": "Method",
    "detail": "Function (MachineLoop*)",
    "insertText": "removeLoop(iterator I)"
  },
  {
    "label": "changeLoopFor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "changeLoopFor(MachineBasicBlock *BB, MachineLoop *L)"
  },
  {
    "label": "changeLoopFor()",
    "kind": "Method",
    "detail": "Function (LI .)",
    "insertText": "changeLoopFor(BB, L)"
  },
  {
    "label": "changeTopLevelLoop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "changeTopLevelLoop(MachineLoop *OldLoop, MachineLoop *NewLoop)"
  },
  {
    "label": "changeTopLevelLoop()",
    "kind": "Method",
    "detail": "Function (LI .)",
    "insertText": "changeTopLevelLoop(OldLoop, NewLoop)"
  },
  {
    "label": "addTopLevelLoop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addTopLevelLoop(MachineLoop *New)"
  },
  {
    "label": "addTopLevelLoop()",
    "kind": "Method",
    "detail": "Function (LI .)",
    "insertText": "addTopLevelLoop(New)"
  },
  {
    "label": "removeBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeBlock(MachineBasicBlock *BB)"
  },
  {
    "label": "removeBlock()",
    "kind": "Method",
    "detail": "Function (LI .)",
    "insertText": "removeBlock(BB)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<const MachineLoop*> { typedef const MachineLoop NodeType ; typedef MachineLoopInfo::iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(const MachineLoop *L)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<MachineLoop*> { typedef MachineLoop NodeType ; typedef MachineLoopInfo::iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(MachineLoop *L)"
  }
]