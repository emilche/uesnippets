[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FTextHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory"
  },
  {
    "label": "FTextFormatData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatData"
  },
  {
    "label": "FFormatArgumentValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatArgumentValue"
  },
  {
    "label": "FHistoricTextFormatData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistoricTextFormatData"
  },
  {
    "label": "FHistoricTextNumericData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistoricTextNumericData"
  },
  {
    "label": "FTextFormatPatternDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatPatternDefinition"
  },
  {
    "label": "ITextGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextGenerator"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Other",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Other"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "ERoundingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERoundingMode"
  },
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "EMemoryUnitStandard",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemoryUnitStandard"
  },
  {
    "label": "FNumberFormattingOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberFormattingOptions"
  },
  {
    "label": "FNumberParsingOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberParsingOptions"
  },
  {
    "label": "FTextFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormat"
  },
  {
    "label": "FTextFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCulture"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FSortPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSortPredicate"
  },
  {
    "label": "FSortPredicateImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSortPredicateImplementation"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "FTextCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextCache"
  },
  {
    "label": "FTextFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatter"
  },
  {
    "label": "FTextFormatData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatData"
  },
  {
    "label": "FTextSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextSnapshot"
  },
  {
    "label": "FTextInspector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextInspector"
  },
  {
    "label": "FTextStringHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextStringHelper"
  },
  {
    "label": "FStringTableRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableRegistry"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FArchiveFromStructuredArchiveImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveFromStructuredArchiveImpl"
  },
  {
    "label": "FJsonArchiveInputFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonArchiveInputFormatter"
  },
  {
    "label": "FJsonArchiveOutputFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonArchiveOutputFormatter"
  },
  {
    "label": "FTextProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextProperty"
  },
  {
    "label": "FFormatArgumentValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatArgumentValue"
  },
  {
    "label": "FTextHistory_NamedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_NamedFormat"
  },
  {
    "label": "FTextHistory_ArgumentDataFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_ArgumentDataFormat"
  },
  {
    "label": "FTextHistory_OrderedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_OrderedFormat"
  },
  {
    "label": "FTextHistory_Transform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Transform"
  },
  {
    "label": "FScopedTextIdentityPreserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTextIdentityPreserver"
  },
  {
    "label": "FFormatArgumentValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatArgumentValue"
  },
  {
    "label": "FCbValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbValue"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "FFormatArgumentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFormatArgumentData"
  },
  {
    "label": "FHistoricTextFormatData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistoricTextFormatData"
  },
  {
    "label": "FHistoricTextNumericData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistoricTextNumericData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextSnapshot"
  },
  {
    "label": "FTextInspector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextInspector"
  },
  {
    "label": "FTextStringHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextStringHelper"
  },
  {
    "label": "FTextBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextBuilder"
  },
  {
    "label": "FUnicodeChar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnicodeChar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextDirectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextDirectionInfo"
  },
  {
    "label": "ITextBiDi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextBiDi"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexTryParseString(ETextGender& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(ETextGender& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexTryParseString(EDateTimeStyle::Type& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(EDateTimeStyle::Type& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexTryParseString(ERoundingMode& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(ERoundingMode& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "FNumberFormattingOptions()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FNumberFormattingOptions()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash( const FNumberFormattingOptions& Key )"
  },
  {
    "label": "FNumberParsingOptions()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FNumberParsingOptions()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash( const FNumberParsingOptions& Key )"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FTextFormat()"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FTextFormat(const FText& InText, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FTextFormat(const FText& InText, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(const FString& InString, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(FString&& InString, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(const FString& InString, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(FString&& InString, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FTextFormat(FString&& InString, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FText()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FText(FText&& Other)"
  },
  {
    "label": "AutoRTFMAssignFromOpenToClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoRTFMAssignFromOpenToClosed(FText& Closed, const FText& Open)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(float Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(double Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int8 Val,\t\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int16 Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int32 Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int64 Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint8 Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint16 Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint32 Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint64 Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(long Val,\t\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrencyBase()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrencyBase(int64 BaseVal, const FString& CurrencyCode, const FCulturePtr& TargetCulture = NULL, int32 ForceDecimalPlaces = -1)"
  },
  {
    "label": "AsPercent()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsPercent(float Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsPercent()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsPercent(double Val,\tconst FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsTimespan()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsTimespan(const FTimespan& Timespan, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "GetInvariantTimeZone()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetInvariantTimeZone()"
  },
  {
    "label": "AsMemory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsMemory(uint64 NumBytes, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL, EMemoryUnitStandard UnitStandard = EMemoryUnitStandard::IEC)"
  },
  {
    "label": "AsMemory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsMemory(uint64 NumBytes, EMemoryUnitStandard UnitStandard)"
  },
  {
    "label": "FromStringTable()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromStringTable(const FName InTableId, const FTextKey& InKey, const EStringTableLoadingPolicy InLoadingPolicy = EStringTableLoadingPolicy::FindOrLoad)"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromName( const FName& Val)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromString( const FString& String )"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromString( FString&& String )"
  },
  {
    "label": "FromStringView()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromStringView(FStringView InString)"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant( const TCHAR* String )"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant( FStringView String )"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant( FString&& String )"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant( FText Text )"
  },
  {
    "label": "AsLocalizable_Advanced()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsLocalizable_Advanced(const FTextKey& Namespace, const FTextKey& Key, const TCHAR* String)"
  },
  {
    "label": "AsLocalizable_Advanced()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsLocalizable_Advanced(const FTextKey& Namespace, const FTextKey& Key, FStringView String)"
  },
  {
    "label": "AsLocalizable_Advanced()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsLocalizable_Advanced(const FTextKey& Namespace, const FTextKey& Key, FString&& String)"
  },
  {
    "label": "FindTextInLiveTable_Advanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTextInLiveTable_Advanced(const FTextKey& Namespace, const FTextKey& Key, FText& OutText, const FString* const SourceString = nullptr)"
  },
  {
    "label": "FSortPredicate()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FSortPredicate(const ETextComparisonLevel::Type ComparisonLevel = ETextComparisonLevel::Default)"
  },
  {
    "label": "TrimPreceding()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TrimPreceding( const FText& )"
  },
  {
    "label": "TrimTrailing()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TrimTrailing( const FText& )"
  },
  {
    "label": "TrimPrecedingAndTrailing()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TrimPrecedingAndTrailing( const FText& )"
  },
  {
    "label": "IsWhitespace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWhitespace( const TCHAR Char )"
  },
  {
    "label": "GetFormatPatternParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFormatPatternParameters(const FTextFormat& Fmt, TArray<FString>& ParameterNames)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, const FFormatNamedArguments& InArguments)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, FFormatNamedArguments&& InArguments)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, const FFormatOrderedArguments& InArguments)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, FFormatOrderedArguments&& InArguments)"
  },
  {
    "label": "FormatNamed()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatNamed( FTextFormat Fmt, TArguments&&... Args )"
  },
  {
    "label": "FormatOrdered()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatOrdered( FTextFormat Fmt, TArguments&&... Args )"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Join(const FText& Delimiter, const FFormatOrderedArguments& Args)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Join(const FText& Delimiter, const TArray<FText>& Args)"
  },
  {
    "label": "FromTextGenerator()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromTextGenerator( const TSharedRef<ITextGenerator>& TextGenerator )"
  },
  {
    "label": "FindRegisteredTextGenerator()",
    "kind": "Method",
    "detail": "Function (FCreateTextGeneratorDelegate)",
    "insertText": "FindRegisteredTextGenerator( FName TypeID )"
  },
  {
    "label": "RegisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTextGenerator( FName TypeID, FCreateTextGeneratorDelegate FactoryFunction )"
  },
  {
    "label": "UnregisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTextGenerator( FName TypeID )"
  },
  {
    "label": "ChangeKey()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ChangeKey( const FTextKey& Namespace, const FTextKey& Key, const FText& Text )"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FText( FString&& InSourceString )"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FText( FName InTableId, const FTextKey& InKey, const EStringTableLoadingPolicy InLoadingPolicy )"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FText( FString&& InSourceString, const FTextKey& InNamespace, const FTextKey& InKey, uint32 InFlags=0 )"
  },
  {
    "label": "SerializeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeText( FArchive& Ar, FText& Value )"
  },
  {
    "label": "SerializeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeText(FStructuredArchive::FSlot Slot, FText& Value)"
  },
  {
    "label": "FormatNamedImpl()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatNamedImpl(FTextFormat&& Fmt, FFormatNamedArguments&& InArguments)"
  },
  {
    "label": "FormatOrderedImpl()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatOrderedImpl(FTextFormat&& Fmt, FFormatOrderedArguments&& InArguments)"
  },
  {
    "label": "AsNumberTemplate()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumberTemplate(T1 Val, const FNumberFormattingOptions* const Options, const FCulturePtr& TargetCulture)"
  },
  {
    "label": "AsCurrencyTemplate()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrencyTemplate(T1 Val, const FString& CurrencyCode, const FNumberFormattingOptions* const Options, const FCulturePtr& TargetCulture)"
  },
  {
    "label": "AsPercentTemplate()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsPercentTemplate(T1 Val, const FNumberFormattingOptions* const Options, const FCulturePtr& TargetCulture)"
  },
  {
    "label": "CreateTextGenerator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITextGenerator>)",
    "insertText": "CreateTextGenerator(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FFormatArgumentValue(const class FCbValue& Value)"
  },
  {
    "label": "ResetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetValue()"
  },
  {
    "label": "FTextSnapshot()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FTextSnapshot()"
  },
  {
    "label": "FTextSnapshot()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FTextSnapshot(const FText& InText)"
  },
  {
    "label": "GetGlobalHistoryRevisionForText()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetGlobalHistoryRevisionForText(const FText& InText)"
  },
  {
    "label": "GetLocalHistoryRevisionForText()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetLocalHistoryRevisionForText(const FText& InText)"
  },
  {
    "label": "ShouldGatherForLocalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGatherForLocalization(const FText& Text)"
  },
  {
    "label": "GetNamespace()",
    "kind": "Method",
    "detail": "Function (TOptional<FString>)",
    "insertText": "GetNamespace(const FText& Text)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (TOptional<FString>)",
    "insertText": "GetKey(const FText& Text)"
  },
  {
    "label": "GetTextId()",
    "kind": "Method",
    "detail": "Function (FTextId)",
    "insertText": "GetTextId(const FText& Text)"
  },
  {
    "label": "GetTableIdAndKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTableIdAndKey(const FText& Text, FName& OutTableId, FString& OutKey)"
  },
  {
    "label": "GetTableIdAndKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTableIdAndKey(const FText& Text, FName& OutTableId, FTextKey& OutKey)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFlags(const FText& Text)"
  },
  {
    "label": "GetHistoricFormatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHistoricFormatData(const FText& Text, TArray<FHistoricTextFormatData>& OutHistoricFormatData)"
  },
  {
    "label": "GetHistoricNumericData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHistoricNumericData(const FText& Text, FHistoricTextNumericData& OutHistoricNumericData)"
  },
  {
    "label": "CreateFromBuffer()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "CreateFromBuffer(const TCHAR* Buffer, const TCHAR* TextNamespace = nullptr, const TCHAR* PackageNamespace = nullptr, const bool bRequiresQuotes = false)"
  },
  {
    "label": "ReadFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromString(const TCHAR* Buffer, FText& OutValue, const TCHAR* TextNamespace = nullptr, const TCHAR* PackageNamespace = nullptr, int32* OutNumCharsRead = nullptr, const bool bRequiresQuotes = false, const EStringTableLoadingPolicy InLoadingPolicy = EStringTableLoadingPolicy::FindOrLoad)"
  },
  {
    "label": "WriteToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToBuffer(FString& Buffer, const FText& Value, const bool bRequiresQuotes = false, const bool bStripPackageNamespace = false)"
  },
  {
    "label": "WriteToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteToString(FString& Buffer, const FText& Value, const bool bRequiresQuotes = false)"
  },
  {
    "label": "IsComplexText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplexText(const TCHAR* Buffer)"
  },
  {
    "label": "Indent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Indent()"
  },
  {
    "label": "Unindent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unindent()"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine()"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine(const FText& Text)"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine(const FString& String)"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine(const FName& Name)"
  },
  {
    "label": "AppendLineFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLineFormat(const FTextFormat& Pattern, const FFormatNamedArguments& Arguments)"
  },
  {
    "label": "AppendLineFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLineFormat(const FTextFormat& Pattern, const FFormatOrderedArguments& Arguments)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "BuildAndAppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAndAppendLine(FString&& Data)"
  },
  {
    "label": "BuildAndAppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAndAppendLine(FText&& Data)"
  },
  {
    "label": "CodepointToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CodepointToString(const uint32 InCodepoint, FString& OutString)"
  },
  {
    "label": "CreateTextBiDi()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ITextBiDi>)",
    "insertText": "CreateTextBiDi()"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const FText& InText)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const FString& InString)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const TCHAR* InString, const int32 InStringStartIndex, const int32 InStringLen)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const FText& InText, const ETextDirection InBaseDirection, TArray<FTextDirectionInfo>& OutTextDirectionInfo)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const FString& InString, const ETextDirection InBaseDirection, TArray<FTextDirectionInfo>& OutTextDirectionInfo)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const TCHAR* InString, const int32 InStringStartIndex, const int32 InStringLen, const ETextDirection InBaseDirection, TArray<FTextDirectionInfo>& OutTextDirectionInfo)"
  },
  {
    "label": "ComputeBaseDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeBaseDirection(const FText& InText)"
  },
  {
    "label": "ComputeBaseDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeBaseDirection(const FString& InString)"
  },
  {
    "label": "ComputeBaseDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeBaseDirection(const TCHAR* InString, const int32 InStringStartIndex, const int32 InStringLen)"
  },
  {
    "label": "IsControlCharacter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsControlCharacter(const TCHAR InChar)"
  }
]