[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FTextHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory"
  },
  {
    "label": "FTextFormatData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatData"
  },
  {
    "label": "FFormatArgumentValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatArgumentValue"
  },
  {
    "label": "FHistoricTextFormatData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistoricTextFormatData"
  },
  {
    "label": "FHistoricTextNumericData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistoricTextNumericData"
  },
  {
    "label": "FTextFormatPatternDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatPatternDefinition"
  },
  {
    "label": "ITextGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextGenerator"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ERoundingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERoundingMode"
  },
  {
    "label": "EMemoryUnitStandard",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemoryUnitStandard"
  },
  {
    "label": "FNumberFormattingOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberFormattingOptions"
  },
  {
    "label": "FNumberParsingOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberParsingOptions"
  },
  {
    "label": "FTextFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormat"
  },
  {
    "label": "FTextFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatter"
  },
  {
    "label": "FCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCulture"
  },
  {
    "label": "FSortPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSortPredicate"
  },
  {
    "label": "FSortPredicateImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSortPredicateImplementation"
  },
  {
    "label": "FTextCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextCache"
  },
  {
    "label": "FTextSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextSnapshot"
  },
  {
    "label": "FTextInspector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextInspector"
  },
  {
    "label": "FTextStringHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextStringHelper"
  },
  {
    "label": "FStringTableRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableRegistry"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FArchiveFromStructuredArchiveImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveFromStructuredArchiveImpl"
  },
  {
    "label": "FJsonArchiveInputFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonArchiveInputFormatter"
  },
  {
    "label": "FJsonArchiveOutputFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonArchiveOutputFormatter"
  },
  {
    "label": "FTextProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextProperty"
  },
  {
    "label": "FTextHistory_NamedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_NamedFormat"
  },
  {
    "label": "FTextHistory_ArgumentDataFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_ArgumentDataFormat"
  },
  {
    "label": "FTextHistory_OrderedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_OrderedFormat"
  },
  {
    "label": "FTextHistory_Transform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Transform"
  },
  {
    "label": "FScopedTextIdentityPreserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTextIdentityPreserver"
  },
  {
    "label": "FCbValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbValue"
  },
  {
    "label": "FFormatArgumentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFormatArgumentData"
  },
  {
    "label": "FTextBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextBuilder"
  },
  {
    "label": "FUnicodeChar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnicodeChar"
  },
  {
    "label": "FTextDirectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextDirectionInfo"
  },
  {
    "label": "ITextBiDi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextBiDi"
  },
  {
    "label": "Transient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformAtomics . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Containers / SortedMap . h \" # include \" Containers / EnumAsByte . h \" # include \" Templates / SharedPointer . h \" # include \" Internationalization / TextKey . h \" # include \" Internationalization / LocKeyFuncs . h \" # include \" Internationalization / CulturePointer . h \" # include \" Internationalization / TextComparison . h \" # include \" Internationalization / TextLocalizationManager . h \" # include \" Internationalization / StringTableCoreFwd . h \" # include \" Internationalization / ITextData . h \" # include \" Misc / Optional . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / IsConstructible . h \" # include \" Templates / Requires . h \" # include<type_traits> class FText ; class FTextHistory ; class FTextFormatData ; class FFormatArgumentValue ; class FHistoricTextFormatData ; class FHistoricTextNumericData ; class FTextFormatPatternDefinition ; class ITextGenerator ; namespace ETextFlag { enum Type {)",
    "insertText": "Transient(1 << 0), CultureInvariant = (1 << 1), ConvertedProperty = (1 << 2), Immutable = (1 << 3), InitializedFromString = (1<<4)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} enum class ETextIdenticalModeFlags : uint8 { None = 0,DeepCompare = 1<<0,LexicalCompareInvariants = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ETextIdenticalModeFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ETextFormatFlags : uint8 { None = 0,EvaluateArgumentModifiers = 1<<0,Default = EvaluateArgumentModifiers,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ETextFormatFlags)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (enum class ETextPluralType : uint8 { Cardinal,Ordinal,} ; enum class ETextPluralForm : uint8 { Zero = 0,One,Two,Few,Many,Other,Count,} ; enum class ETextGender : uint8 { Masculine,Feminine,Neuter,} ; bool)",
    "insertText": "LexTryParseString(ETextGender& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(ETextGender& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ETextGender InValue)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (namespace EDateTimeStyle { enum Type : int { Default,Short,Medium,Long,Full,Custom,} ; } bool)",
    "insertText": "LexTryParseString(EDateTimeStyle::Type& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(EDateTimeStyle::Type& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EDateTimeStyle::Type InValue)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (namespace EFormatArgumentType { enum Type : int { Int,UInt,Float,Double,Text,Gender,} ; } typedef TSortedMap<FString,FFormatArgumentValue,FDefaultAllocator,FLocKeySortedMapLess> FFormatNamedArguments ; typedef TArray<FFormatArgumentValue> FFormatOrderedArguments ; typedef TSharedRef<FTextFormatPatternDefinition,ESPMode::ThreadSafe> FTextFormatPatternDefinitionRef ; typedef TSharedPtr<FTextFormatPatternDefinition,ESPMode::ThreadSafe> FTextFormatPatternDefinitionPtr ; typedef TSharedRef<const FTextFormatPatternDefinition,ESPMode::ThreadSafe> FTextFormatPatternDefinitionConstRef ; typedef TSharedPtr<const FTextFormatPatternDefinition,ESPMode::ThreadSafe> FTextFormatPatternDefinitionConstPtr ; enum ERoundingMode : int { HalfToEven,HalfFromZero,HalfToZero,FromZero,ToZero,ToNegativeInfinity,ToPositiveInfinity,} ; bool)",
    "insertText": "LexTryParseString(ERoundingMode& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(ERoundingMode& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ERoundingMode InValue)"
  },
  {
    "label": "FNumberFormattingOptions()",
    "kind": "Method",
    "detail": "Function (enum EMemoryUnitStandard : int { IEC,SI } ; struct FNumberFormattingOptions {)",
    "insertText": "FNumberFormattingOptions()"
  },
  {
    "label": "SetAlwaysSign()",
    "kind": "Method",
    "detail": "Function (bool AlwaysSign ; FNumberFormattingOptions&)",
    "insertText": "SetAlwaysSign(bool InValue)"
  },
  {
    "label": "SetUseGrouping()",
    "kind": "Method",
    "detail": "Function (AlwaysSign = InValue ; return* this ; } bool UseGrouping ; FNumberFormattingOptions&)",
    "insertText": "SetUseGrouping(bool InValue)"
  },
  {
    "label": "SetRoundingMode()",
    "kind": "Method",
    "detail": "Function (UseGrouping = InValue ; return* this ; } ERoundingMode RoundingMode ; FNumberFormattingOptions&)",
    "insertText": "SetRoundingMode(ERoundingMode InValue)"
  },
  {
    "label": "SetMinimumIntegralDigits()",
    "kind": "Method",
    "detail": "Function (RoundingMode = InValue ; return* this ; } int32 MinimumIntegralDigits ; FNumberFormattingOptions&)",
    "insertText": "SetMinimumIntegralDigits(int32 InValue)"
  },
  {
    "label": "SetMaximumIntegralDigits()",
    "kind": "Method",
    "detail": "Function (MinimumIntegralDigits = InValue ; return* this ; } int32 MaximumIntegralDigits ; FNumberFormattingOptions&)",
    "insertText": "SetMaximumIntegralDigits(int32 InValue)"
  },
  {
    "label": "SetMinimumFractionalDigits()",
    "kind": "Method",
    "detail": "Function (MaximumIntegralDigits = InValue ; return* this ; } int32 MinimumFractionalDigits ; FNumberFormattingOptions&)",
    "insertText": "SetMinimumFractionalDigits(int32 InValue)"
  },
  {
    "label": "SetMaximumFractionalDigits()",
    "kind": "Method",
    "detail": "Function (MinimumFractionalDigits = InValue ; return* this ; } int32 MaximumFractionalDigits ; FNumberFormattingOptions&)",
    "insertText": "SetMaximumFractionalDigits(int32 InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MaximumFractionalDigits = InValue ; return* this ; } void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FNumberFormattingOptions& Value)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FNumberFormattingOptions& Key)"
  },
  {
    "label": "IsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentical(const FNumberFormattingOptions& Other)"
  },
  {
    "label": "DefaultWithGrouping()",
    "kind": "Method",
    "detail": "Function (const FNumberFormattingOptions&)",
    "insertText": "DefaultWithGrouping()"
  },
  {
    "label": "DefaultNoGrouping()",
    "kind": "Method",
    "detail": "Function (const FNumberFormattingOptions&)",
    "insertText": "DefaultNoGrouping()"
  },
  {
    "label": "FNumberParsingOptions()",
    "kind": "Method",
    "detail": "Function (} ; struct FNumberParsingOptions {)",
    "insertText": "FNumberParsingOptions()"
  },
  {
    "label": "SetInsideLimits()",
    "kind": "Method",
    "detail": "Function (UseGrouping = InValue ; return* this ; } bool InsideLimits ; FNumberParsingOptions&)",
    "insertText": "SetInsideLimits(bool InValue)"
  },
  {
    "label": "SetUseClamping()",
    "kind": "Method",
    "detail": "Function (InsideLimits = InValue ; return* this ; } bool UseClamping ; FNumberParsingOptions&)",
    "insertText": "SetUseClamping(bool InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UseClamping = InValue ; return* this ; } void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FNumberParsingOptions& Value)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FNumberParsingOptions& Key)"
  },
  {
    "label": "IsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentical(const FNumberParsingOptions& Other)"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (} ; class FTextFormat { class FTextFormatter ; public : enum class EExpressionType { Invalid,Simple,Complex,} ;)",
    "insertText": "FTextFormat()"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFormat(const FText& InText, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFormat(const FText& InText, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(const FString& InString, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(FString&& InString, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(const FString& InString, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "FromString(FString&& InString, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags = ETextFormatFlags::Default)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IdenticalTo(const FTextFormat& Other, const ETextIdenticalModeFlags CompareModeFlags)"
  },
  {
    "label": "GetSourceText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSourceText()"
  },
  {
    "label": "GetSourceString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetSourceString()"
  },
  {
    "label": "GetExpressionType()",
    "kind": "Method",
    "detail": "Function (EExpressionType)",
    "insertText": "GetExpressionType()"
  },
  {
    "label": "GetFormatFlags()",
    "kind": "Method",
    "detail": "Function (ETextFormatFlags)",
    "insertText": "GetFormatFlags()"
  },
  {
    "label": "GetPatternDefinition()",
    "kind": "Method",
    "detail": "Function (FTextFormatPatternDefinitionConstRef)",
    "insertText": "GetPatternDefinition()"
  },
  {
    "label": "ValidatePattern()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidatePattern(const FCulturePtr& InCulture, TArray<FString>& OutValidationErrors)"
  },
  {
    "label": "GetFormatArgumentNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFormatArgumentNames(TArray<FString>& OutArgumentNames)"
  },
  {
    "label": "FTextFormat()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FTextFormat(FString&& InString, FTextFormatPatternDefinitionConstRef InCustomPatternDef, ETextFormatFlags InFormatFlags)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTextFormatData,ESPMode::ThreadSafe> TextFormatData ; } ; class FCulture ; class FText { public : const FText&)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FText()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FText(const FText&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FText&)",
    "insertText": "operator(const FText&)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FText(FText&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FText&)",
    "insertText": "operator(FText&& Other)"
  },
  {
    "label": "AutoRTFMAssignFromOpenToClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoRTFMAssignFromOpenToClosed(FText& Closed, const FText& Open)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(float Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(double Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int8 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int16 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int32 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(int64 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint8 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint16 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint32 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(uint64 Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsNumber(long Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(float Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(double Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(int8 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(int16 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(int32 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(int64 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(uint8 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(uint16 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(uint32 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(uint64 Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrency()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrency(long Val, const FString& CurrencyCode = FString(), const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsCurrencyBase()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCurrencyBase(int64 BaseVal, const FString& CurrencyCode, const FCulturePtr& TargetCulture = NULL, int32 ForceDecimalPlaces = -1)"
  },
  {
    "label": "AsPercent()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsPercent(float Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsPercent()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsPercent(double Val, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsDate()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsDate(const FDateTime& DateTime, const EDateTimeStyle::Type DateStyle = EDateTimeStyle::Default, const FString& TimeZone = FString(), const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsDateTime()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsDateTime(const FDateTime& DateTime, const EDateTimeStyle::Type DateStyle = EDateTimeStyle::Default, const EDateTimeStyle::Type TimeStyle = EDateTimeStyle::Default, const FString& TimeZone = FString(), const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsDateTime()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsDateTime(const FDateTime& DateTime, const FString& CustomPattern, const FString& TimeZone = FString(), const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsTime()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsTime(const FDateTime& DateTime, const EDateTimeStyle::Type TimeStyle = EDateTimeStyle::Default, const FString& TimeZone = FString(), const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "AsTimespan()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsTimespan(const FTimespan& Timespan, const FCulturePtr& TargetCulture = NULL)"
  },
  {
    "label": "GetInvariantTimeZone()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetInvariantTimeZone()"
  },
  {
    "label": "AsMemory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsMemory(uint64 NumBytes, const FNumberFormattingOptions* const Options = NULL, const FCulturePtr& TargetCulture = NULL, EMemoryUnitStandard UnitStandard = EMemoryUnitStandard::IEC)"
  },
  {
    "label": "AsMemory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsMemory(uint64 NumBytes, EMemoryUnitStandard UnitStandard)"
  },
  {
    "label": "FromStringTable()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromStringTable(const FName InTableId, const FTextKey& InKey, const EStringTableLoadingPolicy InLoadingPolicy = EStringTableLoadingPolicy::FindOrLoad)"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromName(const FName& Val)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromString(const FString& String)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromString(FString&& String)"
  },
  {
    "label": "FromStringView()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FromStringView(FStringView InString)"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant(const TCHAR* String)"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant(FStringView String)"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant(FString&& String)"
  },
  {
    "label": "AsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsCultureInvariant(FText Text)"
  },
  {
    "label": "AsLocalizable_Advanced()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsLocalizable_Advanced(const FTextKey& Namespace, const FTextKey& Key, const TCHAR* String)"
  },
  {
    "label": "AsLocalizable_Advanced()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsLocalizable_Advanced(const FTextKey& Namespace, const FTextKey& Key, FStringView String)"
  },
  {
    "label": "AsLocalizable_Advanced()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsLocalizable_Advanced(const FTextKey& Namespace, const FTextKey& Key, FString&& String)"
  },
  {
    "label": "FindTextInLiveTable_Advanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTextInLiveTable_Advanced(const FTextKey& Namespace, const FTextKey& Key, FText& OutText, const FString* const SourceString = nullptr)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "ToString()"
  },
  {
    "label": "BuildSourceString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildSourceString()"
  },
  {
    "label": "IsNumeric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNumeric()"
  },
  {
    "label": "CompareTo()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompareTo(const FText& Other, const ETextComparisonLevel::Type ComparisonLevel = ETextComparisonLevel::Default)"
  },
  {
    "label": "CompareToCaseIgnored()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompareToCaseIgnored(const FText& Other)"
  },
  {
    "label": "EqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualTo(const FText& Other, const ETextComparisonLevel::Type ComparisonLevel = ETextComparisonLevel::Default)"
  },
  {
    "label": "EqualToCaseIgnored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualToCaseIgnored(const FText& Other)"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IdenticalTo(const FText& Other, const ETextIdenticalModeFlags CompareModeFlags = ETextIdenticalModeFlags::None)"
  },
  {
    "label": "FSortPredicate()",
    "kind": "Method",
    "detail": "Function (class FSortPredicate { public :)",
    "insertText": "FSortPredicate(const ETextComparisonLevel::Type ComparisonLevel = ETextComparisonLevel::Default)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator()(const FText& A, const FText& B)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (private : # if UE_ENABLE_ICU class FSortPredicateImplementation ; TSharedRef<FSortPredicateImplementation> Implementation ; # endif } ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsEmptyOrWhitespace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmptyOrWhitespace()"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToLower()"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToUpper()"
  },
  {
    "label": "TrimPreceding()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TrimPreceding(const FText&)"
  },
  {
    "label": "TrimTrailing()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TrimTrailing(const FText&)"
  },
  {
    "label": "TrimPrecedingAndTrailing()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TrimPrecedingAndTrailing(const FText&)"
  },
  {
    "label": "IsWhitespace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWhitespace(const TCHAR Char)"
  },
  {
    "label": "GetFormatPatternParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFormatPatternParameters(const FTextFormat& Fmt, TArray<FString>& ParameterNames)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, const FFormatNamedArguments& InArguments)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, FFormatNamedArguments&& InArguments)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, const FFormatOrderedArguments& InArguments)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat Fmt, FFormatOrderedArguments&& InArguments)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes> FText)",
    "insertText": "Format(FTextFormat Fmt, ArgTypes... Args)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FText(*CorrectFormat)(FTextFormat, FFormatOrderedArguments&&)"
  },
  {
    "label": "FormatNamed()",
    "kind": "Method",
    "detail": "Function (} template<. . . TArguments> FText)",
    "insertText": "FormatNamed(FTextFormat Fmt, TArguments&&... Args)"
  },
  {
    "label": "FormatOrdered()",
    "kind": "Method",
    "detail": "Function (template<. . . TArguments> FText)",
    "insertText": "FormatOrdered(FTextFormat Fmt, TArguments&&... Args)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Join(const FText& Delimiter, const FFormatOrderedArguments& Args)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Join(const FText& Delimiter, const TArray<FText>& Args)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes> FText)",
    "insertText": "Join(const FText& Delimiter, ArgTypes... Args)"
  },
  {
    "label": "FromTextGenerator()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "FromTextGenerator(const TSharedRef<ITextGenerator>& TextGenerator)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedRef<ITextGenerator>, FCreateTextGeneratorDelegate, FStructuredArchive::FRecord)"
  },
  {
    "label": "FindRegisteredTextGenerator()",
    "kind": "Method",
    "detail": "Function (FCreateTextGeneratorDelegate)",
    "insertText": "FindRegisteredTextGenerator(FName TypeID)"
  },
  {
    "label": "RegisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTextGenerator(FName TypeID, FCreateTextGeneratorDelegate FactoryFunction)"
  },
  {
    "label": "RegisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "RegisterTextGenerator(FName TypeID)"
  },
  {
    "label": "RegisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTextGenerator(TypeID, FCreateTextGeneratorDelegate::CreateStatic( &CreateTextGenerator<T> ))"
  },
  {
    "label": "RegisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "RegisterTextGenerator()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (RegisterTextGenerator<)",
    "insertText": "T(T::TypeID)"
  },
  {
    "label": "UnregisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterTextGenerator(FName TypeID)"
  },
  {
    "label": "UnregisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "UnregisterTextGenerator()"
  },
  {
    "label": "UnregisterTextGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTextGenerator(T::TypeID)"
  },
  {
    "label": "IsTransient()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTransient()"
  },
  {
    "label": "IsCultureInvariant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCultureInvariant()"
  },
  {
    "label": "IsInitializedFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitializedFromString()"
  },
  {
    "label": "IsFromStringTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFromStringTable()"
  },
  {
    "label": "ShouldGatherForLocalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGatherForLocalization()"
  },
  {
    "label": "ChangeKey()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FText)",
    "insertText": "ChangeKey(const FTextKey& Namespace, const FTextKey& Key, const FText& Text)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (# endif bool bHasIntrusiveUnsetOptionalState = true ; using IntrusiveUnsetOptionalStateType = FText ;)",
    "insertText": "FText(FIntrusiveUnsetOptionalState) : TextData(nullptr) , Flags(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FIntrusiveUnsetOptionalState)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FText(FString&& InSourceString)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FText(FName InTableId, const FTextKey& InKey, const EStringTableLoadingPolicy InLoadingPolicy)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FText(FString&& InSourceString, const FTextKey& InNamespace, const FTextKey& InKey, uint32 InFlags=0)"
  },
  {
    "label": "SerializeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeText(FArchive& Ar, FText& Value)"
  },
  {
    "label": "SerializeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeText(FStructuredArchive::FSlot Slot, FText& Value)"
  },
  {
    "label": "GetHistoricFormatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHistoricFormatData(TArray<FHistoricTextFormatData>& OutHistoricFormatData)"
  },
  {
    "label": "GetHistoricNumericData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHistoricNumericData(FHistoricTextNumericData& OutHistoricNumericData)"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "FormatNamedImpl()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatNamedImpl(FTextFormat&& Fmt, FFormatNamedArguments&& InArguments)"
  },
  {
    "label": "FormatOrderedImpl()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatOrderedImpl(FTextFormat&& Fmt, FFormatOrderedArguments&& InArguments)"
  },
  {
    "label": "AsNumberTemplate()",
    "kind": "Method",
    "detail": "Function (private : template<T1,T2> FText)",
    "insertText": "AsNumberTemplate(T1 Val, const FNumberFormattingOptions* const Options, const FCulturePtr& TargetCulture)"
  },
  {
    "label": "AsCurrencyTemplate()",
    "kind": "Method",
    "detail": "Function (template<T1,T2> FText)",
    "insertText": "AsCurrencyTemplate(T1 Val, const FString& CurrencyCode, const FNumberFormattingOptions* const Options, const FCulturePtr& TargetCulture)"
  },
  {
    "label": "AsPercentTemplate()",
    "kind": "Method",
    "detail": "Function (template<T1,T2> FText)",
    "insertText": "AsPercentTemplate(T1 Val, const FNumberFormattingOptions* const Options, const FCulturePtr& TargetCulture)"
  },
  {
    "label": "CreateTextGenerator()",
    "kind": "Method",
    "detail": "Function (private : template<T> TSharedRef<ITextGenerator>)",
    "insertText": "CreateTextGenerator(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (private : TRefCountPtr<ITextData> TextData ; uint32 Flags ; public : class FTextCache ; class FTextFormatter ; class FTextFormatData ; class FTextSnapshot ; class FTextInspector ; class FTextStringHelper ; class FStringTableRegistry ; class FArchive ; class FArchiveFromStructuredArchiveImpl ; class FJsonArchiveInputFormatter ; class FJsonArchiveOutputFormatter ; class FTextProperty ; class FFormatArgumentValue ; class FTextHistory_NamedFormat ; class FTextHistory_ArgumentDataFormat ; class FTextHistory_OrderedFormat ; class FTextHistory_Transform ; class FScopedTextIdentityPreserver ; } ; class FFormatArgumentValue { public :)",
    "insertText": "FFormatArgumentValue() : Type(EFormatArgumentType::Text) , TextValue(FText::GetEmpty())"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgumentValue(const class FCbValue& Value)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFormatArgumentValue(const int32 Value) : Type(EFormatArgumentType::Int)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (IntValue = Value ; })",
    "insertText": "FFormatArgumentValue(const uint32 Value) : Type(EFormatArgumentType::UInt)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (UIntValue = Value ; })",
    "insertText": "FFormatArgumentValue(const int64 Value) : Type(EFormatArgumentType::Int)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (IntValue = Value ; })",
    "insertText": "FFormatArgumentValue(const uint64 Value) : Type(EFormatArgumentType::UInt)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (UIntValue = Value ; })",
    "insertText": "FFormatArgumentValue(const float Value) : Type(EFormatArgumentType::Float)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (FloatValue = Value ; })",
    "insertText": "FFormatArgumentValue(const double Value) : Type(EFormatArgumentType::Double)"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgumentValue(FText&& Value) : Type(EFormatArgumentType::Text) , TextValue(MoveTemp(Value))"
  },
  {
    "label": "FFormatArgumentValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgumentValue(ETextGender Value) : Type(EFormatArgumentType::Gender)"
  },
  {
    "label": "UIntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UIntValue(uint64)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FFormatArgumentValue& Value)"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IdenticalTo(const FFormatArgumentValue& Other, const ETextIdenticalModeFlags CompareModeFlags)"
  },
  {
    "label": "ToFormattedString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToFormattedString(const bool bInRebuildText, const bool bInRebuildAsSource)"
  },
  {
    "label": "ToFormattedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToFormattedString(const bool bInRebuildText, const bool bInRebuildAsSource, FString& OutResult)"
  },
  {
    "label": "ToExportedString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToExportedString(const bool bStripPackageNamespace = false)"
  },
  {
    "label": "ToExportedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToExportedString(FString& OutResult, const bool bStripPackageNamespace = false)"
  },
  {
    "label": "FromExportedString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "FromExportedString(const TCHAR* InBuffer)"
  },
  {
    "label": "GetGenderValue()",
    "kind": "Method",
    "detail": "Function (} ETextGender)",
    "insertText": "GetGenderValue()"
  },
  {
    "label": "FFormatArgumentData()",
    "kind": "Method",
    "detail": "Function (} struct FFormatArgumentData {)",
    "insertText": "FFormatArgumentData()"
  },
  {
    "label": "ResetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetValue()"
  },
  {
    "label": "ToArgumentValue()",
    "kind": "Method",
    "detail": "Function (FFormatArgumentValue)",
    "insertText": "ToArgumentValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FFormatArgumentData& Value)"
  },
  {
    "label": "FormatNamed()",
    "kind": "Method",
    "detail": "Function (FString ArgumentName ; TEnumAsByte<EFormatArgumentType::Type> ArgumentValueType ; FText ArgumentValue ; int64 ArgumentValueInt ; float ArgumentValueFloat ; double ArgumentValueDouble ; ETextGender ArgumentValueGender ; } ; namespace TextFormatUtil { template<TName,TValue> void)",
    "insertText": "FormatNamed(OUT FFormatNamedArguments& Result, TName&& Name, TValue&& Value)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Emplace(Forward< TName >( Name ), Forward< TValue >( Value ))"
  },
  {
    "label": "FormatNamed()",
    "kind": "Method",
    "detail": "Function (} template<TName,TValue,. . . TArguments> void)",
    "insertText": "FormatNamed(OUT FFormatNamedArguments& Result, TName&& Name, TValue&& Value, TArguments&&... Args)"
  },
  {
    "label": "FormatOrdered()",
    "kind": "Method",
    "detail": "Function (} template<TValue> void)",
    "insertText": "FormatOrdered(OUT FFormatOrderedArguments& Result, TValue&& Value)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Emplace(Forward< TValue >( Value ))"
  },
  {
    "label": "FormatOrdered()",
    "kind": "Method",
    "detail": "Function (} template<TValue,. . . TArguments> void)",
    "insertText": "FormatOrdered(OUT FFormatOrderedArguments& Result, TValue&& Value, TArguments&&... Args)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (FFormatNamedArguments FormatArguments ; FormatArguments .)",
    "insertText": "Reserve(sizeof...( TArguments ) / 2)"
  },
  {
    "label": "FormatNamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FormatNamed(FormatArguments, Forward< TArguments >( Args )...)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (FFormatOrderedArguments FormatArguments ; FormatArguments .)",
    "insertText": "Reserve(sizeof...( TArguments ))"
  },
  {
    "label": "FormatOrdered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FormatOrdered(FormatArguments, Forward< TArguments >( Args )...)"
  },
  {
    "label": "FHistoricTextFormatData()",
    "kind": "Method",
    "detail": "Function (} class FHistoricTextFormatData { public :)",
    "insertText": "FHistoricTextFormatData()"
  },
  {
    "label": "FHistoricTextFormatData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHistoricTextFormatData(FText InFormattedText, FTextFormat&& InSourceFmt, FFormatNamedArguments&& InArguments) : FormattedText(MoveTemp(InFormattedText)) , SourceFmt(MoveTemp(InSourceFmt)) , Arguments(MoveTemp(InArguments))"
  },
  {
    "label": "FHistoricTextNumericData()",
    "kind": "Method",
    "detail": "Function (} FText FormattedText ; FTextFormat SourceFmt ; FFormatNamedArguments Arguments ; } ; class FHistoricTextNumericData { public : enum class EType : uint8 { AsNumber,AsPercent,} ;)",
    "insertText": "FHistoricTextNumericData() : FormatType(EType::AsNumber)"
  },
  {
    "label": "FHistoricTextNumericData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHistoricTextNumericData(const EType InFormatType, const FFormatArgumentValue& InSourceValue, const TOptional<FNumberFormattingOptions>& InFormatOptions) : FormatType(InFormatType) , SourceValue(InSourceValue) , FormatOptions(InFormatOptions)"
  },
  {
    "label": "FTextSnapshot()",
    "kind": "Method",
    "detail": "Function (} EType FormatType ; FFormatArgumentValue SourceValue ; TOptional<FNumberFormattingOptions> FormatOptions ; } ; class FTextSnapshot { public :)",
    "insertText": "FTextSnapshot()"
  },
  {
    "label": "FTextSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextSnapshot(const FText& InText)"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IdenticalTo(const FText& InText)"
  },
  {
    "label": "IsDisplayStringEqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisplayStringEqualTo(const FText& InText)"
  },
  {
    "label": "GetGlobalHistoryRevisionForText()",
    "kind": "Method",
    "detail": "Function (private : uint16)",
    "insertText": "GetGlobalHistoryRevisionForText(const FText& InText)"
  },
  {
    "label": "GetLocalHistoryRevisionForText()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetLocalHistoryRevisionForText(const FText& InText)"
  },
  {
    "label": "FTextInspector()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<ITextData> TextDataPtr ; FTextConstDisplayStringPtr LocalizedStringPtr ; uint16 GlobalHistoryRevision = 0 ; uint16 LocalHistoryRevision = 0 ; uint32 Flags = 0 ; } ; class FTextInspector { private :)",
    "insertText": "FTextInspector()"
  },
  {
    "label": "ShouldGatherForLocalization()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "ShouldGatherForLocalization(const FText& Text)"
  },
  {
    "label": "GetNamespace()",
    "kind": "Method",
    "detail": "Function (TOptional<FString>)",
    "insertText": "GetNamespace(const FText& Text)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (TOptional<FString>)",
    "insertText": "GetKey(const FText& Text)"
  },
  {
    "label": "GetTextId()",
    "kind": "Method",
    "detail": "Function (FTextId)",
    "insertText": "GetTextId(const FText& Text)"
  },
  {
    "label": "GetSourceString()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "GetSourceString(const FText& Text)"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDisplayString(const FText& Text)"
  },
  {
    "label": "GetTableIdAndKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTableIdAndKey(const FText& Text, FName& OutTableId, FString& OutKey)"
  },
  {
    "label": "GetTableIdAndKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTableIdAndKey(const FText& Text, FName& OutTableId, FTextKey& OutKey)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFlags(const FText& Text)"
  },
  {
    "label": "GetHistoricFormatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHistoricFormatData(const FText& Text, TArray<FHistoricTextFormatData>& OutHistoricFormatData)"
  },
  {
    "label": "GetHistoricNumericData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHistoricNumericData(const FText& Text, FHistoricTextNumericData& OutHistoricNumericData)"
  },
  {
    "label": "GetSharedDataId()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetSharedDataId(const FText& Text)"
  },
  {
    "label": "CreateFromBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FTextStringHelper { public : FText)",
    "insertText": "CreateFromBuffer(const TCHAR* Buffer, const TCHAR* TextNamespace = nullptr, const TCHAR* PackageNamespace = nullptr, const bool bRequiresQuotes = false)"
  },
  {
    "label": "ReadFromBuffer()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ReadFromBuffer(const TCHAR* Buffer, FText& OutValue, const TCHAR* TextNamespace = nullptr, const TCHAR* PackageNamespace = nullptr, const bool bRequiresQuotes = false)"
  },
  {
    "label": "WriteToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToBuffer(FString& Buffer, const FText& Value, const bool bRequiresQuotes = false, const bool bStripPackageNamespace = false)"
  },
  {
    "label": "IsComplexText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplexText(const TCHAR* Buffer)"
  },
  {
    "label": "ReadFromBuffer_ComplexText()",
    "kind": "Method",
    "detail": "Function (private : const TCHAR*)",
    "insertText": "ReadFromBuffer_ComplexText(const TCHAR* Buffer, FText& OutValue, const TCHAR* TextNamespace, const TCHAR* PackageNamespace)"
  },
  {
    "label": "Indent()",
    "kind": "Method",
    "detail": "Function (} ; class FTextBuilder { public : void)",
    "insertText": "Indent()"
  },
  {
    "label": "Unindent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unindent()"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine()"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine(const FText& Text)"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine(const FString& String)"
  },
  {
    "label": "AppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLine(const FName& Name)"
  },
  {
    "label": "AppendLineFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLineFormat(const FTextFormat& Pattern, const FFormatNamedArguments& Arguments)"
  },
  {
    "label": "AppendLineFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLineFormat(const FTextFormat& Pattern, const FFormatOrderedArguments& Arguments)"
  },
  {
    "label": "AppendLineFormat()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes> void)",
    "insertText": "AppendLineFormat(FTextFormat Pattern, ArgTypes... Args)"
  },
  {
    "label": "BuildAndAppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAndAppendLine(FText::Format(MoveTemp(Pattern), FFormatOrderedArguments{ MoveTemp(Args)... }))"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "GetNumLines()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumLines()"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToText()"
  },
  {
    "label": "BuildAndAppendLine()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BuildAndAppendLine(FString&& Data)"
  },
  {
    "label": "BuildAndAppendLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAndAppendLine(FText&& Data)"
  },
  {
    "label": "CodepointToString()",
    "kind": "Method",
    "detail": "Function (TArray<FText> Lines ; int32 IndentCount = 0 ; } ; struct FUnicodeChar { bool)",
    "insertText": "CodepointToString(const uint32 InCodepoint, FString& OutString)"
  },
  {
    "label": "ITextBiDi()",
    "kind": "Method",
    "detail": "Function (} ; namespace TextBiDi { enum class ETextDirection : uint8 { LeftToRight,RightToLeft,Mixed,} ; struct FTextDirectionInfo { int32 StartIndex ; int32 Length ; ETextDirection TextDirection ; } ; class ITextBiDi { public : ~)",
    "insertText": "ITextBiDi()"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (} ETextDirection)",
    "insertText": "ComputeTextDirection(const FText& InText)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const FString& InString)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const TCHAR* InString, const int32 InStringStartIndex, const int32 InStringLen)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const FText& InText, const ETextDirection InBaseDirection, TArray<FTextDirectionInfo>& OutTextDirectionInfo)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const FString& InString, const ETextDirection InBaseDirection, TArray<FTextDirectionInfo>& OutTextDirectionInfo)"
  },
  {
    "label": "ComputeTextDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeTextDirection(const TCHAR* InString, const int32 InStringStartIndex, const int32 InStringLen, const ETextDirection InBaseDirection, TArray<FTextDirectionInfo>& OutTextDirectionInfo)"
  },
  {
    "label": "ComputeBaseDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeBaseDirection(const FText& InText)"
  },
  {
    "label": "ComputeBaseDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeBaseDirection(const FString& InString)"
  },
  {
    "label": "ComputeBaseDirection()",
    "kind": "Method",
    "detail": "Function (ETextDirection)",
    "insertText": "ComputeBaseDirection(const TCHAR* InString, const int32 InStringStartIndex, const int32 InStringLen)"
  },
  {
    "label": "CreateTextBiDi()",
    "kind": "Method",
    "detail": "Function (} ; TUniquePtr<ITextBiDi>)",
    "insertText": "CreateTextBiDi()"
  },
  {
    "label": "IsControlCharacter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsControlCharacter(const TCHAR InChar)"
  }
]