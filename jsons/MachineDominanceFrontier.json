[
  {
    "label": "MachineDominanceFrontier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominanceFrontier"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEDOMINANCEFRONTIER_H # define LLVM_CODEGEN_MACHINEDOMINANCEFRONTIER_H # include \" llvm / Analysis / DominanceFrontier . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" namespace llvm { class MachineDominanceFrontier : public MachineFunctionPass { ForwardDominanceFrontierBase<MachineBasicBlock> Base ; public : typedef DominatorTreeBase<MachineBasicBlock> DomTreeT ; typedef DomTreeNodeBase<MachineBasicBlock> DomTreeNodeT ; typedef DominanceFrontierBase<MachineBasicBlock>::DomSetType DomSetType ; typedef DominanceFrontierBase<MachineBasicBlock>::iterator iterator ; typedef DominanceFrontierBase<MachineBasicBlock>::const_iterator const_iterator ; void)",
    "insertText": "operator(const MachineDominanceFrontier &)"
  },
  {
    "label": "MachineDominanceFrontier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachineDominanceFrontier(const MachineDominanceFrontier &)"
  },
  {
    "label": "MachineDominanceFrontier()",
    "kind": "Method",
    "detail": "Function (char ID ;)",
    "insertText": "MachineDominanceFrontier()"
  },
  {
    "label": "getRoot()",
    "kind": "Method",
    "detail": "Function (} MachineBasicBlock*)",
    "insertText": "getRoot()"
  },
  {
    "label": "isPostDominator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPostDominator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(MachineBasicBlock *B)"
  },
  {
    "label": "addBasicBlock()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "addBasicBlock(MachineBasicBlock *BB, const DomSetType &frontier)"
  },
  {
    "label": "removeBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeBlock(MachineBasicBlock *BB)"
  },
  {
    "label": "addToFrontier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addToFrontier(iterator I, MachineBasicBlock *Node)"
  },
  {
    "label": "removeFromFrontier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeFromFrontier(iterator I, MachineBasicBlock *Node)"
  },
  {
    "label": "compareDomSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "compareDomSet(DomSetType &DS1, const DomSetType &DS2)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "compare(DominanceFrontierBase<MachineBasicBlock> &Other)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnMachineFunction(MachineFunction &F)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  }
]