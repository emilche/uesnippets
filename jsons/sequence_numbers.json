[
  {
    "label": "UnwrappedSequenceNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnwrappedSequenceNumber"
  },
  {
    "label": "Unwrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Unwrapper"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_COMMON_SEQUENCE_NUMBERS_H_ # define NET_DCSCTP_COMMON_SEQUENCE_NUMBERS_H_ # include<cstdint> # include<limits> # include<utility> # include \" net / dcsctp / common / internal_types . h \" namespace dcsctp { template<WrappedType> class UnwrappedSequenceNumber { public :)",
    "insertText": "static_assert(!std::numeric_limits<typename WrappedType::UnderlyingType>::is_signed, \"The wrapped type must be unsigned\")"
  },
  {
    "label": "Unwrapper()",
    "kind": "Method",
    "detail": "Function (class Unwrapper { public :)",
    "insertText": "Unwrapper() : largest_(kValueLimit)"
  },
  {
    "label": "Unwrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Unwrapper(const Unwrapper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Unwrapper&)",
    "insertText": "operator(const Unwrapper&)"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (UnwrappedSequenceNumber<WrappedType>)",
    "insertText": "Unwrap(WrappedType value)"
  },
  {
    "label": "WrappedType()",
    "kind": "Method",
    "detail": "Function (WrappedType wrapped_largest = static_cast<)",
    "insertText": "WrappedType(largest_ % kValueLimit)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (int64_t result = largest_ +)",
    "insertText": "Delta(value, wrapped_largest)"
  },
  {
    "label": "WrappedType()",
    "kind": "Method",
    "detail": "Function (largest_ = result ; } return UnwrappedSequenceNumber<)",
    "insertText": "WrappedType(result)"
  },
  {
    "label": "PeekUnwrap()",
    "kind": "Method",
    "detail": "Function (} UnwrappedSequenceNumber<WrappedType>)",
    "insertText": "PeekUnwrap(WrappedType value)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (int64_t result = largest_ +)",
    "insertText": "Delta(value, uint32_largest)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (largest_ = kValueLimit ; } private : int64_t)",
    "insertText": "Delta(WrappedType value, WrappedType prev_value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WrappedType::UnderlyingType kBreakpoint = kValueLimit / 2 ; WrappedType::UnderlyingType diff =* value -* prev_value ; diff % = kValueLimit ;)",
    "insertText": "if(diff < kBreakpoint)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "int64_t(diff)"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (} int64_t largest_ ; } ; WrappedType)",
    "insertText": "Wrap()"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValue(H state, const UnwrappedSequenceNumber<WrappedType>& hash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const UnwrappedSequenceNumber<WrappedType>& other)"
  },
  {
    "label": "next_value()",
    "kind": "Method",
    "detail": "Function (+ + value_ ; } UnwrappedSequenceNumber<WrappedType>)",
    "insertText": "next_value()"
  },
  {
    "label": "AddTo()",
    "kind": "Method",
    "detail": "Function (} UnwrappedSequenceNumber<WrappedType>)",
    "insertText": "AddTo(UnwrappedSequenceNumber<WrappedType> value, int delta)"
  },
  {
    "label": "Difference()",
    "kind": "Method",
    "detail": "Function (} WrappedType::UnderlyingType)",
    "insertText": "Difference(UnwrappedSequenceNumber<WrappedType> lhs, UnwrappedSequenceNumber<WrappedType> rhs)"
  },
  {
    "label": "UnwrappedSequenceNumber()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "UnwrappedSequenceNumber(int64_t value) : value_(value)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (} int64_t kValueLimit = static_cast<)",
    "insertText": "int64_t(1)"
  }
]