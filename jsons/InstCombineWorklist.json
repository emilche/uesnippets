[
  {
    "label": "InstCombineWorklist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstCombineWorklist"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_INSTCOMBINE_INSTCOMBINEWORKLIST_H # define LLVM_TRANSFORMS_INSTCOMBINE_INSTCOMBINEWORKLIST_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / IR / Instruction . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / Debug . h \" # include \" llvm / Support / raw_ostream . h \" # define DEBUG_TYPE \" instcombine \" namespace llvm { class InstCombineWorklist { SmallVector<Instruction*,2 5 6> Worklist ; DenseMap<Instruction*,unsigned> WorklistMap ; void)",
    "insertText": "operator(const InstCombineWorklist&RHS)"
  },
  {
    "label": "InstCombineWorklist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstCombineWorklist(const InstCombineWorklist&)"
  },
  {
    "label": "InstCombineWorklist()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "InstCombineWorklist()"
  },
  {
    "label": "InstCombineWorklist()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InstCombineWorklist(InstCombineWorklist &&Arg) : Worklist(std::move(Arg.Worklist)), WorklistMap(std::move(Arg.WorklistMap))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InstCombineWorklist&)",
    "insertText": "operator(InstCombineWorklist &&RHS)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Worklist =)",
    "insertText": "move(RHS.Worklist)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (WorklistMap =)",
    "insertText": "move(RHS.WorklistMap)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(Instruction *I)"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs() << \"IC: ADD: \" << *I << '\\n')"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Worklist .)",
    "insertText": "push_back(I)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddValue(Value *V)"
  },
  {
    "label": "AddInitialGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddInitialGroup(Instruction *const *List, unsigned NumEntries)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Worklist.empty() && \"Worklist must be empty to add initial group\")"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (Worklist .)",
    "insertText": "reserve(NumEntries+16)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (WorklistMap .)",
    "insertText": "resize(NumEntries)"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs() << \"IC: ADDING: \" << NumEntries << \" instrs to worklist\\n\")"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Instruction* I = List [ NumEntries - 1 ] ; WorklistMap .)",
    "insertText": "insert(std::make_pair(I, Idx++))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Remove(Instruction *I)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DenseMap<Instruction*,unsigned>::iterator It = WorklistMap .)",
    "insertText": "find(I)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Worklist [ It -> second ] = nullptr ; WorklistMap .)",
    "insertText": "erase(It)"
  },
  {
    "label": "RemoveOne()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "RemoveOne()"
  },
  {
    "label": "pop_back_val()",
    "kind": "Method",
    "detail": "Function (Instruction* I = Worklist .)",
    "insertText": "pop_back_val()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (WorklistMap .)",
    "insertText": "erase(I)"
  },
  {
    "label": "Zap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Zap()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(WorklistMap.empty() && \"Worklist empty, but map not?\")"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (WorklistMap .)",
    "insertText": "clear()"
  }
]