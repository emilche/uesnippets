[
  {
    "label": "FlagSaverImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlagSaverImpl"
  },
  {
    "label": "FlagSaver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlagSaver"
  },
  {
    "label": "FindCommandLineFlag()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FLAGS_REFLECTION_H_ # define ABSL_FLAGS_REFLECTION_H_ # include<string> # include \" absl / base / config . h \" # include \" absl / container / flat_hash_map . h \" # include \" absl / flags / commandlineflag . h \" # include \" absl / flags / internal / commandlineflag . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace flags_internal { class FlagSaverImpl ; } absl::CommandLineFlag*)",
    "insertText": "FindCommandLineFlag(absl::string_view name)"
  },
  {
    "label": "GetAllFlags()",
    "kind": "Method",
    "detail": "Function (absl::flat_hash_map<absl::string_view,absl::CommandLineFlag*>)",
    "insertText": "GetAllFlags()"
  },
  {
    "label": "FlagSaver()",
    "kind": "Method",
    "detail": "Function (class FlagSaver { public :)",
    "insertText": "FlagSaver()"
  },
  {
    "label": "FlagSaver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlagSaver(const FlagSaver&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FlagSaver&)"
  }
]