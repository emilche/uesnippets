[
  {
    "label": "CountingAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CountingAllocator"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rebind"
  },
  {
    "label": "CountingAllocator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_COUNTING_ALLOCATOR_H_ # define ABSL_CONTAINER_INTERNAL_COUNTING_ALLOCATOR_H_ # include<cstdint> # include<memory> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<T> class CountingAllocator { public : using Allocator = std::allocator<T> ; using AllocatorTraits = std::allocator_traits<Allocator> ; using value_type = AllocatorTraits::value_type ; using pointer = AllocatorTraits::pointer ; using const_pointer = AllocatorTraits::const_pointer ; using size_type = AllocatorTraits::size_type ; using difference_type = AllocatorTraits::difference_type ;)",
    "insertText": "CountingAllocator()"
  },
  {
    "label": "CountingAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountingAllocator(int64_t* bytes_used) : bytes_used_(bytes_used)"
  },
  {
    "label": "CountingAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CountingAllocator(int64_t* bytes_used, int64_t* instance_count) : bytes_used_(bytes_used), instance_count_(instance_count)"
  },
  {
    "label": "CountingAllocator()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "CountingAllocator(const CountingAllocator<U>& x) : bytes_used_(x.bytes_used_), instance_count_(x.instance_count_)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "allocate(size_type n, typename AllocatorTraits::const_void_pointer hint = nullptr)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (Allocator allocator ; pointer ptr =)",
    "insertText": "allocate(allocator, n, hint)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (* bytes_used_ + = n*)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} return ptr ; } void)",
    "insertText": "deallocate(pointer p, size_type n)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (Allocator allocator ;)",
    "insertText": "deallocate(allocator, p, n)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} } template<U,. . . Args> void)",
    "insertText": "construct(U* p, Args&&... args)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (Allocator allocator ;)",
    "insertText": "construct(allocator, p, std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (* instance_count_ + = 1 ; } } template<U> void)",
    "insertText": "destroy(U* p)"
  },
  {
    "label": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION()",
    "kind": "Method",
    "detail": "Function (Allocator allocator ; # if)",
    "insertText": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0) #pragma GCC diagnostic push #pragma GCC diagnostic ignored \"-Wuse-after-free\" #endif AllocatorTraits::destroy(allocator, p)"
  },
  {
    "label": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0) #pragma GCC diagnostic pop #endif if (instance_count_ != nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* instance_count_ - = 1 ; } } template<U> class rebind { public : using other = CountingAllocator<U> ; } ; bool)",
    "insertText": "operator(const CountingAllocator& a, const CountingAllocator& b)"
  }
]