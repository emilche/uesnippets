[
  {
    "label": "FDdsImageWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDdsImageWrapper"
  },
  {
    "label": "FDdsImageWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" ImageWrapperBase . h \" # include \" DDSFile . h \" class FDdsImageWrapper : public FImageWrapperBase { typedef FImageWrapperBase Super ; public :)",
    "insertText": "FDdsImageWrapper()"
  },
  {
    "label": "FreeDDS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDDS()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (delete DDS ; DDS = nullptr ; } } public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compress(int32 Quality)"
  },
  {
    "label": "SetCompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCompressed(const void* InCompressedData, int64 InCompressedSize)"
  },
  {
    "label": "Uncompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uncompress(const ERGBFormat InFormat, int32 InBitDepth)"
  },
  {
    "label": "CanSetRawFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetRawFormat(const ERGBFormat InFormat, const int32 InBitDepth)"
  },
  {
    "label": "GetSupportedRawFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type)",
    "insertText": "GetSupportedRawFormat(const ERawImageFormat::Type InFormat)"
  }
]