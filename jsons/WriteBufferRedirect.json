[
  {
    "label": "TWriteBufferRedirect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWriteBufferRedirect"
  },
  {
    "label": "TWriteBufferRedirect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Detail / Writer . inl \" namespace UE { namespace Trace { namespace Private { thread_local FWriteBuffer* GTlsWriteBuffer ; template<int BufferSize> class TWriteBufferRedirect { public : enum : uint16 { ActiveRedirection = 0 xffff } ;)",
    "insertText": "TWriteBufferRedirect()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abandon()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (PrevBuffer = GTlsWriteBuffer ; GTlsWriteBuffer =& Buffer ; Buffer . Size =)",
    "insertText": "uint16(BufferSize)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Buffer . Cursor = Data +)",
    "insertText": "sizeof(uint32)"
  }
]