[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "FDragTool_ActorFrustumSelect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragTool_ActorFrustumSelect"
  },
  {
    "label": "FDragTool_ActorFrustumSelect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" LevelEditorViewport . h \" # include \" EditorDragTools . h \" class FCanvas ; class UModel ; class FDragTool_ActorFrustumSelect : public FDragTool { public :)",
    "insertText": "FDragTool_ActorFrustumSelect(FLevelEditorViewportClient* InLevelViewportClient) : FDragTool(InLevelViewportClient->GetModeTools()) , LevelViewportClient( InLevelViewportClient ) , EditorViewportClient( InLevelViewportClient)"
  },
  {
    "label": "FDragTool_ActorFrustumSelect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDragTool_ActorFrustumSelect(FEditorViewportClient* InEditorViewportClient) : FDragTool(InEditorViewportClient->GetModeTools()) , LevelViewportClient( nullptr ) , EditorViewportClient( InEditorViewportClient)"
  },
  {
    "label": "AddDelta()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDelta(const FVector& InDelta)"
  },
  {
    "label": "StartDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDrag(FEditorViewportClient* InViewportClient, const FVector& InStart, const FVector2D& InStartScreen)"
  },
  {
    "label": "EndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDrag()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View,FCanvas* Canvas)"
  },
  {
    "label": "CalculateFrustum()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CalculateFrustum(const FSceneView* InView, FConvexVolume& OutFrustum, bool bUseBoxFrustum)"
  },
  {
    "label": "IntersectsFrustum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectsFrustum(const UModel& InModel, int32 NodeIndex, const FConvexVolume& InFrustum, bool bUseStrictSelection)"
  },
  {
    "label": "AddHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHoverEffect(AActor& InActor)"
  },
  {
    "label": "AddHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHoverEffect(UModel& InModel, int32 SurfIndex)"
  },
  {
    "label": "RemoveHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHoverEffect(AActor& InActor)"
  },
  {
    "label": "RemoveHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHoverEffect(UModel& InModel, int32 SurfIndex)"
  }
]