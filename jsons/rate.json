[
  {
    "label": "compute_pulse_cache()",
    "kind": "Method",
    "detail": "Function (# ifndef RATE_H # define RATE_H # define MAX_PSEUDO 4 0 # define LOG_MAX_PSEUDO 6 # define CELT_MAX_PULSES 1 2 8 # define MAX_FINE_BITS 8 # define FINE_OFFSET 2 1 # define QTHETA_OFFSET 4 # define QTHETA_OFFSET_TWOPHASE 1 6 # include \" cwrs . h \" # include \" modes . h \" void)",
    "insertText": "compute_pulse_cache(CELTMode *m, int LM)"
  },
  {
    "label": "get_pulses()",
    "kind": "Method",
    "detail": "Function (OPUS_INLINE int)",
    "insertText": "get_pulses(int i)"
  },
  {
    "label": "bits2pulses()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE int)",
    "insertText": "bits2pulses(const CELTMode *m, int band, int LM, int bits)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ; int lo,hi ; const unsigned char* cache ; LM + + ; cache = m -> cache . bits + m -> cache . index [ LM* m -> nbEBands + band ] ; lo = 0 ; hi = cache [ 0 ] ; bits - - ;)",
    "insertText": "for(i=0;i<LOG_MAX_PSEUDO;i++)"
  },
  {
    "label": "mid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mid(lo+hi+1)"
  },
  {
    "label": "clt_compute_allocation()",
    "kind": "Method",
    "detail": "Function (const unsigned char* cache ; LM + + ; cache = m -> cache . bits + m -> cache . index [ LM* m -> nbEBands + band ] ; return pulses = = 0 ? 0 : cache [ pulses ] + 1 ; } int)",
    "insertText": "clt_compute_allocation(const CELTMode *m, int start, int end, const int *offsets, const int *cap, int alloc_trim, int *intensity, int *dual_stereo, opus_int32 total, opus_int32 *balance, int *pulses, int *ebits, int *fine_priority, int C, int LM, ec_ctx *ec, int encode, int prev, int signalBandwidth)"
  }
]