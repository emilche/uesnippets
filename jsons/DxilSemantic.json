[
  {
    "label": "Semantic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Semantic"
  },
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "GetByName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" llvm / ADT / StringRef . h \" # include \" DxilConstants . h \" # include \" DxilShaderModel . h \" namespace hlsl { class Semantic { public : using Kind = DXIL::SemanticKind ; const int kUndefinedRow = - 1 ; const int kUndefinedCol = - 1 ; const Semantic*)",
    "insertText": "GetByName(llvm::StringRef name)"
  },
  {
    "label": "GetByName()",
    "kind": "Method",
    "detail": "Function (const Semantic*)",
    "insertText": "GetByName(llvm::StringRef Name, DXIL::SigPointKind sigPointKind, unsigned MajorVersion = ShaderModel::kHighestMajor, unsigned MinorVersion = ShaderModel::kHighestMinor)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const Semantic*)",
    "insertText": "Get(Kind kind)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const Semantic*)",
    "insertText": "Get(Kind kind, DXIL::SigPointKind sigPointKind, unsigned MajorVersion = ShaderModel::kHighestMajor, unsigned MinorVersion = ShaderModel::kHighestMinor)"
  },
  {
    "label": "GetInvalid()",
    "kind": "Method",
    "detail": "Function (const Semantic*)",
    "insertText": "GetInvalid()"
  },
  {
    "label": "GetArbitrary()",
    "kind": "Method",
    "detail": "Function (const Semantic*)",
    "insertText": "GetArbitrary()"
  },
  {
    "label": "HasSVPrefix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSVPrefix(llvm::StringRef Name)"
  },
  {
    "label": "DecomposeNameAndIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecomposeNameAndIndex(llvm::StringRef FullName, llvm::StringRef *pName, unsigned *pIndex)"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (Kind)",
    "insertText": "GetKind()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "IsArbitrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArbitrary()"
  },
  {
    "label": "IsInvalid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvalid()"
  },
  {
    "label": "Semantic()",
    "kind": "Method",
    "detail": "Function (private : Kind m_Kind ; const char* m_pszName ;)",
    "insertText": "Semantic()"
  },
  {
    "label": "Semantic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Semantic(Kind Kind, const char *pszName)"
  },
  {
    "label": "kNumSemanticRecords()",
    "kind": "Method",
    "detail": "Function (const unsigned)",
    "insertText": "kNumSemanticRecords(unsigned)"
  }
]