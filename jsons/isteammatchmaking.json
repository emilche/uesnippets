[
  {
    "label": "ELobbyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELobbyType"
  },
  {
    "label": "ELobbyComparison",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELobbyComparison"
  },
  {
    "label": "ELobbyDistanceFilter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELobbyDistanceFilter"
  },
  {
    "label": "ISteamMatchmaking",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamMatchmaking"
  },
  {
    "label": "ISteamMatchmakingServerListResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamMatchmakingServerListResponse"
  },
  {
    "label": "ISteamMatchmakingPingResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamMatchmakingPingResponse"
  },
  {
    "label": "ISteamMatchmakingPlayersResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamMatchmakingPlayersResponse"
  },
  {
    "label": "ISteamMatchmakingRulesResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamMatchmakingRulesResponse"
  },
  {
    "label": "ISteamMatchmakingServers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamMatchmakingServers"
  },
  {
    "label": "EChatMemberStateChange",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EChatMemberStateChange"
  },
  {
    "label": "ISteamGameSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamGameSearch"
  },
  {
    "label": "ESteamPartyBeaconLocationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamPartyBeaconLocationType"
  },
  {
    "label": "SteamPartyBeaconLocation_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamPartyBeaconLocation_t"
  },
  {
    "label": "ESteamPartyBeaconLocationData",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamPartyBeaconLocationData"
  },
  {
    "label": "ISteamParties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamParties"
  },
  {
    "label": "FavoritesListChanged_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FavoritesListChanged_t"
  },
  {
    "label": "LobbyInvite_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyInvite_t"
  },
  {
    "label": "LobbyEnter_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyEnter_t"
  },
  {
    "label": "LobbyDataUpdate_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyDataUpdate_t"
  },
  {
    "label": "LobbyChatUpdate_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyChatUpdate_t"
  },
  {
    "label": "LobbyChatMsg_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyChatMsg_t"
  },
  {
    "label": "LobbyGameCreated_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyGameCreated_t"
  },
  {
    "label": "LobbyMatchList_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyMatchList_t"
  },
  {
    "label": "LobbyKicked_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyKicked_t"
  },
  {
    "label": "LobbyCreated_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LobbyCreated_t"
  },
  {
    "label": "PSNGameBootInviteResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSNGameBootInviteResult_t"
  },
  {
    "label": "FavoritesListAccountsUpdated_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FavoritesListAccountsUpdated_t"
  },
  {
    "label": "SearchForGameProgressCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SearchForGameProgressCallback_t"
  },
  {
    "label": "SearchForGameResultCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SearchForGameResultCallback_t"
  },
  {
    "label": "RequestPlayersForGameProgressCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RequestPlayersForGameProgressCallback_t"
  },
  {
    "label": "RequestPlayersForGameResultCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RequestPlayersForGameResultCallback_t"
  },
  {
    "label": "PlayerAcceptState_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PlayerAcceptState_t"
  },
  {
    "label": "RequestPlayersForGameFinalResultCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RequestPlayersForGameFinalResultCallback_t"
  },
  {
    "label": "SubmitPlayerResultResultCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubmitPlayerResultResultCallback_t"
  },
  {
    "label": "EndGameResultCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EndGameResultCallback_t"
  },
  {
    "label": "JoinPartyCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "JoinPartyCallback_t"
  },
  {
    "label": "CreateBeaconCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateBeaconCallback_t"
  },
  {
    "label": "ReservationNotificationCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReservationNotificationCallback_t"
  },
  {
    "label": "ChangeNumOpenSlotsCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChangeNumOpenSlotsCallback_t"
  },
  {
    "label": "AvailableBeaconLocationsUpdated_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AvailableBeaconLocationsUpdated_t"
  },
  {
    "label": "ActiveBeaconsUpdated_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActiveBeaconsUpdated_t"
  },
  {
    "label": "GetFavoriteGameCount()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMMATCHMAKING # define ISTEAMMATCHMAKING # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" # include \" matchmakingtypes . h \" # include \" isteamfriends . h \" enum ELobbyType { k_ELobbyTypePrivate = 0,k_ELobbyTypeFriendsOnly = 1,k_ELobbyTypePublic = 2,k_ELobbyTypeInvisible = 3,k_ELobbyTypePrivateUnique = 4,} ; enum ELobbyComparison { k_ELobbyComparisonEqualToOrLessThan = - 2,k_ELobbyComparisonLessThan = - 1,k_ELobbyComparisonEqual = 0,k_ELobbyComparisonGreaterThan = 1,k_ELobbyComparisonEqualToOrGreaterThan = 2,k_ELobbyComparisonNotEqual = 3,} ; enum ELobbyDistanceFilter { k_ELobbyDistanceFilterClose,k_ELobbyDistanceFilterDefault,k_ELobbyDistanceFilterFar,k_ELobbyDistanceFilterWorldwide,} ; # define k_nMaxLobbyKeyLength 2 5 5 class ISteamMatchmaking { public : int)",
    "insertText": "GetFavoriteGameCount()"
  },
  {
    "label": "GetFavoriteGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFavoriteGame(int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer)"
  },
  {
    "label": "AddFavoriteGame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)"
  },
  {
    "label": "RemoveFavoriteGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LobbyMatchList_t ) virtual SteamAPICall_t RequestLobbyList()"
  },
  {
    "label": "AddRequestLobbyListStringFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestLobbyListStringFilter(const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType)"
  },
  {
    "label": "AddRequestLobbyListNumericalFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestLobbyListNumericalFilter(const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)"
  },
  {
    "label": "AddRequestLobbyListNearValueFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestLobbyListNearValueFilter(const char *pchKeyToMatch, int nValueToBeCloseTo)"
  },
  {
    "label": "AddRequestLobbyListFilterSlotsAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)"
  },
  {
    "label": "AddRequestLobbyListDistanceFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)"
  },
  {
    "label": "AddRequestLobbyListResultCountFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestLobbyListResultCountFilter(int cMaxResults)"
  },
  {
    "label": "AddRequestLobbyListCompatibleMembersFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)"
  },
  {
    "label": "GetLobbyByIndex()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetLobbyByIndex(int iLobby)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LobbyCreated_t ) virtual SteamAPICall_t CreateLobby( ELobbyType eLobbyType, int cMaxMembers)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LobbyEnter_t ) virtual SteamAPICall_t JoinLobby( CSteamID steamIDLobby)"
  },
  {
    "label": "LeaveLobby()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveLobby(CSteamID steamIDLobby)"
  },
  {
    "label": "InviteUserToLobby()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)"
  },
  {
    "label": "GetNumLobbyMembers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumLobbyMembers(CSteamID steamIDLobby)"
  },
  {
    "label": "GetLobbyMemberByIndex()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)"
  },
  {
    "label": "GetLobbyData()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetLobbyData(CSteamID steamIDLobby, const char *pchKey)"
  },
  {
    "label": "SetLobbyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLobbyData(CSteamID steamIDLobby, const char *pchKey, const char *pchValue)"
  },
  {
    "label": "GetLobbyDataCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLobbyDataCount(CSteamID steamIDLobby)"
  },
  {
    "label": "GetLobbyDataByIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize)"
  },
  {
    "label": "DeleteLobbyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteLobbyData(CSteamID steamIDLobby, const char *pchKey)"
  },
  {
    "label": "GetLobbyMemberData()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, const char *pchKey)"
  },
  {
    "label": "SetLobbyMemberData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLobbyMemberData(CSteamID steamIDLobby, const char *pchKey, const char *pchValue)"
  },
  {
    "label": "SendLobbyChatMsg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendLobbyChatMsg(CSteamID steamIDLobby, const void *pvMsgBody, int cubMsgBody)"
  },
  {
    "label": "GetLobbyChatEntry()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, STEAM_OUT_STRUCT() CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType)"
  },
  {
    "label": "RequestLobbyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestLobbyData(CSteamID steamIDLobby)"
  },
  {
    "label": "SetLobbyGameServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLobbyGameServer(CSteamID steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, CSteamID steamIDGameServer)"
  },
  {
    "label": "GetLobbyGameServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLobbyGameServer(CSteamID steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, STEAM_OUT_STRUCT() CSteamID *psteamIDGameServer)"
  },
  {
    "label": "SetLobbyMemberLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)"
  },
  {
    "label": "GetLobbyMemberLimit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLobbyMemberLimit(CSteamID steamIDLobby)"
  },
  {
    "label": "SetLobbyType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)"
  },
  {
    "label": "SetLobbyJoinable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)"
  },
  {
    "label": "GetLobbyOwner()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetLobbyOwner(CSteamID steamIDLobby)"
  },
  {
    "label": "SetLobbyOwner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)"
  },
  {
    "label": "SetLinkedLobby()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)"
  },
  {
    "label": "CheckForPSNGameBootInvite()",
    "kind": "Method",
    "detail": "Function (# ifdef _PS3 void)",
    "insertText": "CheckForPSNGameBootInvite(unsigned int iGameBootAttributes)"
  },
  {
    "label": "SteamMatchmaking()",
    "kind": "Method",
    "detail": "Function (# endif } ; # define STEAMMATCHMAKING_INTERFACE_VERSION \" SteamMatchMaking009 \" ISteamMatchmaking*)",
    "insertText": "SteamMatchmaking()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamMatchmaking *, SteamMatchmaking, STEAMMATCHMAKING_INTERFACE_VERSION)"
  },
  {
    "label": "ServerResponded()",
    "kind": "Method",
    "detail": "Function (typedef void* HServerListRequest ; class ISteamMatchmakingServerListResponse { public : void)",
    "insertText": "ServerResponded(HServerListRequest hRequest, int iServer)"
  },
  {
    "label": "ServerFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerFailedToRespond(HServerListRequest hRequest, int iServer)"
  },
  {
    "label": "RefreshComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response)"
  },
  {
    "label": "ServerResponded()",
    "kind": "Method",
    "detail": "Function (} ; class ISteamMatchmakingPingResponse { public : void)",
    "insertText": "ServerResponded(gameserveritem_t &server)"
  },
  {
    "label": "ServerFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerFailedToRespond()"
  },
  {
    "label": "AddPlayerToList()",
    "kind": "Method",
    "detail": "Function (} ; class ISteamMatchmakingPlayersResponse { public : void)",
    "insertText": "AddPlayerToList(const char *pchName, int nScore, float flTimePlayed)"
  },
  {
    "label": "PlayersFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayersFailedToRespond()"
  },
  {
    "label": "PlayersRefreshComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayersRefreshComplete()"
  },
  {
    "label": "RulesResponded()",
    "kind": "Method",
    "detail": "Function (} ; class ISteamMatchmakingRulesResponse { public : void)",
    "insertText": "RulesResponded(const char *pchRule, const char *pchValue)"
  },
  {
    "label": "RulesFailedToRespond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RulesFailedToRespond()"
  },
  {
    "label": "RulesRefreshComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RulesRefreshComplete()"
  },
  {
    "label": "RequestInternetServerList()",
    "kind": "Method",
    "detail": "Function (} ; typedef int HServerQuery ; const int HSERVERQUERY_INVALID = 0 xffffffff ; class ISteamMatchmakingServers { public : HServerListRequest)",
    "insertText": "RequestInternetServerList(AppId_t iApp, STEAM_ARRAY_COUNT(nFilters) MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)"
  },
  {
    "label": "RequestLANServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse)"
  },
  {
    "label": "RequestFriendsServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "RequestFriendsServerList(AppId_t iApp, STEAM_ARRAY_COUNT(nFilters) MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)"
  },
  {
    "label": "RequestFavoritesServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "RequestFavoritesServerList(AppId_t iApp, STEAM_ARRAY_COUNT(nFilters) MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)"
  },
  {
    "label": "RequestHistoryServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "RequestHistoryServerList(AppId_t iApp, STEAM_ARRAY_COUNT(nFilters) MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)"
  },
  {
    "label": "RequestSpectatorServerList()",
    "kind": "Method",
    "detail": "Function (HServerListRequest)",
    "insertText": "RequestSpectatorServerList(AppId_t iApp, STEAM_ARRAY_COUNT(nFilters) MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)"
  },
  {
    "label": "ReleaseRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRequest(HServerListRequest hServerListRequest)"
  },
  {
    "label": "GetServerDetails()",
    "kind": "Method",
    "detail": "Function (gameserveritem_t*)",
    "insertText": "GetServerDetails(HServerListRequest hRequest, int iServer)"
  },
  {
    "label": "CancelQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelQuery(HServerListRequest hRequest)"
  },
  {
    "label": "RefreshQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshQuery(HServerListRequest hRequest)"
  },
  {
    "label": "IsRefreshing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRefreshing(HServerListRequest hRequest)"
  },
  {
    "label": "GetServerCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetServerCount(HServerListRequest hRequest)"
  },
  {
    "label": "RefreshServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshServer(HServerListRequest hRequest, int iServer)"
  },
  {
    "label": "PingServer()",
    "kind": "Method",
    "detail": "Function (HServerQuery)",
    "insertText": "PingServer(uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse)"
  },
  {
    "label": "PlayerDetails()",
    "kind": "Method",
    "detail": "Function (HServerQuery)",
    "insertText": "PlayerDetails(uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse)"
  },
  {
    "label": "ServerRules()",
    "kind": "Method",
    "detail": "Function (HServerQuery)",
    "insertText": "ServerRules(uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse)"
  },
  {
    "label": "CancelServerQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelServerQuery(HServerQuery hServerQuery)"
  },
  {
    "label": "SteamMatchmakingServers()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION \" SteamMatchMakingServers002 \" ISteamMatchmakingServers*)",
    "insertText": "SteamMatchmakingServers()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamMatchmakingServers *, SteamMatchmakingServers, STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION)"
  },
  {
    "label": "BChatMemberStateChangeRemoved()",
    "kind": "Method",
    "detail": "Function (const uint32 k_unFavoriteFlagNone = 0 x00 ; const uint32 k_unFavoriteFlagFavorite = 0 x01 ; const uint32 k_unFavoriteFlagHistory = 0 x02 ; enum EChatMemberStateChange { k_EChatMemberStateChangeEntered = 0 x0001,k_EChatMemberStateChangeLeft = 0 x0002,k_EChatMemberStateChangeDisconnected = 0 x0004,k_EChatMemberStateChangeKicked = 0 x0008,k_EChatMemberStateChangeBanned = 0 x0010,} ; # define)",
    "insertText": "BChatMemberStateChangeRemoved(rgfChatMemberStateChangeFlags ) ( rgfChatMemberStateChangeFlags & ( k_EChatMemberStateChangeDisconnected | k_EChatMemberStateChangeLeft | k_EChatMemberStateChangeKicked | k_EChatMemberStateChangeBanned ))"
  },
  {
    "label": "AddGameSearchParams()",
    "kind": "Method",
    "detail": "Function (public : EGameSearchErrorCode_t)",
    "insertText": "AddGameSearchParams(const char *pchKeyToFind, const char *pchValuesToFind)"
  },
  {
    "label": "SearchForGameWithLobby()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SearchForGameWithLobby(CSteamID steamIDLobby, int nPlayerMin, int nPlayerMax)"
  },
  {
    "label": "SearchForGameSolo()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SearchForGameSolo(int nPlayerMin, int nPlayerMax)"
  },
  {
    "label": "AcceptGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "AcceptGame()"
  },
  {
    "label": "DeclineGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "DeclineGame()"
  },
  {
    "label": "RetrieveConnectionDetails()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "RetrieveConnectionDetails(CSteamID steamIDHost, char *pchConnectionDetails, int cubConnectionDetails)"
  },
  {
    "label": "EndGameSearch()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "EndGameSearch()"
  },
  {
    "label": "SetGameHostParams()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SetGameHostParams(const char *pchKey, const char *pchValue)"
  },
  {
    "label": "SetConnectionDetails()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SetConnectionDetails(const char *pchConnectionDetails, int cubConnectionDetails)"
  },
  {
    "label": "RequestPlayersForGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize)"
  },
  {
    "label": "HostConfirmGameStart()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "HostConfirmGameStart(uint64 ullUniqueGameID)"
  },
  {
    "label": "CancelRequestPlayersForGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "CancelRequestPlayersForGame()"
  },
  {
    "label": "SubmitPlayerResult()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "SubmitPlayerResult(uint64 ullUniqueGameID, CSteamID steamIDPlayer, EPlayerResult_t EPlayerResult)"
  },
  {
    "label": "EndGame()",
    "kind": "Method",
    "detail": "Function (EGameSearchErrorCode_t)",
    "insertText": "EndGame(uint64 ullUniqueGameID)"
  },
  {
    "label": "SteamGameSearch()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMGAMESEARCH_INTERFACE_VERSION \" SteamMatchGameSearch001 \" ISteamGameSearch*)",
    "insertText": "SteamGameSearch()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamGameSearch *, SteamGameSearch, STEAMGAMESEARCH_INTERFACE_VERSION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (enum ESteamPartyBeaconLocationType { k_ESteamPartyBeaconLocationType_Invalid = 0,k_ESteamPartyBeaconLocationType_ChatGroup = 1,k_ESteamPartyBeaconLocationType_Max,} ; # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  },
  {
    "label": "GetNumActiveBeacons()",
    "kind": "Method",
    "detail": "Function (ESteamPartyBeaconLocationType m_eType ; uint64 m_ulLocationID ; } ; enum ESteamPartyBeaconLocationData { k_ESteamPartyBeaconLocationDataInvalid = 0,k_ESteamPartyBeaconLocationDataName = 1,k_ESteamPartyBeaconLocationDataIconURLSmall = 2,k_ESteamPartyBeaconLocationDataIconURLMedium = 3,k_ESteamPartyBeaconLocationDataIconURLLarge = 4,} ; class ISteamParties { public : uint32)",
    "insertText": "GetNumActiveBeacons()"
  },
  {
    "label": "GetBeaconByIndex()",
    "kind": "Method",
    "detail": "Function (PartyBeaconID_t)",
    "insertText": "GetBeaconByIndex(uint32 unIndex)"
  },
  {
    "label": "GetBeaconDetails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeaconDetails(PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, STEAM_OUT_STRUCT() SteamPartyBeaconLocation_t *pLocation, STEAM_OUT_STRING_COUNT(cchMetadata) char *pchMetadata, int cchMetadata)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(JoinPartyCallback_t ) virtual SteamAPICall_t JoinParty( PartyBeaconID_t ulBeaconID)"
  },
  {
    "label": "GetNumAvailableBeaconLocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNumAvailableBeaconLocations(uint32 *puNumLocations)"
  },
  {
    "label": "GetAvailableBeaconLocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAvailableBeaconLocations(SteamPartyBeaconLocation_t *pLocationList, uint32 uMaxNumLocations)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(CreateBeaconCallback_t ) virtual SteamAPICall_t CreateBeacon( uint32 unOpenSlots, SteamPartyBeaconLocation_t *pBeaconLocation, const char *pchConnectString, const char *pchMetadata)"
  },
  {
    "label": "OnReservationCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReservationCompleted(PartyBeaconID_t ulBeacon, CSteamID steamIDUser)"
  },
  {
    "label": "CancelReservation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelReservation(PartyBeaconID_t ulBeacon, CSteamID steamIDUser)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(ChangeNumOpenSlotsCallback_t ) virtual SteamAPICall_t ChangeNumOpenSlots( PartyBeaconID_t ulBeacon, uint32 unOpenSlots)"
  },
  {
    "label": "DestroyBeacon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyBeacon(PartyBeaconID_t ulBeacon)"
  },
  {
    "label": "GetBeaconLocationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, STEAM_OUT_STRING_COUNT(cchDataStringOut) char *pchDataStringOut, int cchDataStringOut)"
  },
  {
    "label": "SteamParties()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMPARTIES_INTERFACE_VERSION \" SteamParties002 \" ISteamParties*)",
    "insertText": "SteamParties()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamParties *, SteamParties, STEAMPARTIES_INTERFACE_VERSION)"
  }
]