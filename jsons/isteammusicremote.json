[
  {
    "label": "ISteamMusicRemote",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamMusicRemote"
  },
  {
    "label": "RegisterSteamMusicRemote()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMMUSICREMOTE_H # define ISTEAMMUSICREMOTE_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" # include \" isteammusic . h \" # define k_SteamMusicNameMaxLength 2 5 5 # define k_SteamMusicPNGMaxLength 6 5 5 3 5 class ISteamMusicRemote { public : bool)",
    "insertText": "RegisterSteamMusicRemote(const char *pchName)"
  },
  {
    "label": "DeregisterSteamMusicRemote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeregisterSteamMusicRemote()"
  },
  {
    "label": "BIsCurrentMusicRemote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BIsCurrentMusicRemote()"
  },
  {
    "label": "BActivationSuccess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BActivationSuccess(bool bValue)"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDisplayName(const char *pchDisplayName)"
  },
  {
    "label": "SetPNGIcon_64x64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPNGIcon_64x64(void *pvBuffer, uint32 cbBufferLength)"
  },
  {
    "label": "EnablePlayPrevious()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnablePlayPrevious(bool bValue)"
  },
  {
    "label": "EnablePlayNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnablePlayNext(bool bValue)"
  },
  {
    "label": "EnableShuffled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableShuffled(bool bValue)"
  },
  {
    "label": "EnableLooped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableLooped(bool bValue)"
  },
  {
    "label": "EnableQueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableQueue(bool bValue)"
  },
  {
    "label": "EnablePlaylists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnablePlaylists(bool bValue)"
  },
  {
    "label": "UpdatePlaybackStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePlaybackStatus(AudioPlayback_Status nStatus)"
  },
  {
    "label": "UpdateShuffled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateShuffled(bool bValue)"
  },
  {
    "label": "UpdateLooped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLooped(bool bValue)"
  },
  {
    "label": "UpdateVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateVolume(float flValue)"
  },
  {
    "label": "CurrentEntryWillChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CurrentEntryWillChange()"
  },
  {
    "label": "CurrentEntryIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CurrentEntryIsAvailable(bool bAvailable)"
  },
  {
    "label": "UpdateCurrentEntryText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCurrentEntryText(const char *pchText)"
  },
  {
    "label": "UpdateCurrentEntryElapsedSeconds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCurrentEntryElapsedSeconds(int nValue)"
  },
  {
    "label": "UpdateCurrentEntryCoverArt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCurrentEntryCoverArt(void *pvBuffer, uint32 cbBufferLength)"
  },
  {
    "label": "CurrentEntryDidChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CurrentEntryDidChange()"
  },
  {
    "label": "QueueWillChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueWillChange()"
  },
  {
    "label": "ResetQueueEntries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetQueueEntries()"
  },
  {
    "label": "SetQueueEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetQueueEntry(int nID, int nPosition, const char *pchEntryText)"
  },
  {
    "label": "SetCurrentQueueEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurrentQueueEntry(int nID)"
  },
  {
    "label": "QueueDidChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueDidChange()"
  },
  {
    "label": "PlaylistWillChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlaylistWillChange()"
  },
  {
    "label": "ResetPlaylistEntries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetPlaylistEntries()"
  },
  {
    "label": "SetPlaylistEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlaylistEntry(int nID, int nPosition, const char *pchEntryText)"
  },
  {
    "label": "SetCurrentPlaylistEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurrentPlaylistEntry(int nID)"
  },
  {
    "label": "PlaylistDidChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlaylistDidChange()"
  },
  {
    "label": "SteamMusicRemote()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMMUSICREMOTE_INTERFACE_VERSION \" STEAMMUSICREMOTE_INTERFACE_VERSION001 \" ISteamMusicRemote*)",
    "insertText": "SteamMusicRemote()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamMusicRemote *, SteamMusicRemote, STEAMMUSICREMOTE_INTERFACE_VERSION)"
  }
]