[
  {
    "label": "FConstraintContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintContainerSolver"
  },
  {
    "label": "FPBDConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintContainer"
  },
  {
    "label": "FPBDConstraintGroupSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintGroupSolver"
  },
  {
    "label": "FPBDSceneConstraintGroupSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSceneConstraintGroupSolver"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Evolution / IterationSettings . h \" # include \" Chaos / Evolution / SolverBodyContainer . h \" # include \" Containers / Array . h \" namespace Chaos { class FConstraintContainerSolver ; class FPBDConstraintContainer ; namespace Private { class FPBDConstraintGroupSolver { public :)",
    "insertText": "UE_NONCOPYABLE(FPBDConstraintGroupSolver)"
  },
  {
    "label": "FPBDConstraintGroupSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDConstraintGroupSolver()"
  },
  {
    "label": "GetIterationSettings()",
    "kind": "Method",
    "detail": "Function (FIterationSettings)",
    "insertText": "GetIterationSettings()"
  },
  {
    "label": "GetNumSolverBodies()",
    "kind": "Method",
    "detail": "Function (Iterations = InIterations ; } int32)",
    "insertText": "GetNumSolverBodies()"
  },
  {
    "label": "GetNumSolverConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumSolverConstraints()"
  },
  {
    "label": "SetConstraintSolverPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintSolverPriority(const int32 ContainerId, const int32 Priority)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddConstraintsAndBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraintsAndBodies()"
  },
  {
    "label": "GatherBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherBodies(const FReal Dt)"
  },
  {
    "label": "GatherBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherBodies(const FReal Dt, const int32 BeginBodyIndex, const int32 EndBodyIndex)"
  },
  {
    "label": "GatherConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherConstraints(const FReal Dt)"
  },
  {
    "label": "GatherConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherConstraints(const FReal Dt, const int32 BeginConstraintIndex, const int32 EndConstraintIndex)"
  },
  {
    "label": "PreApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreApplyPositionConstraints(const FReal Dt)"
  },
  {
    "label": "PreApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreApplyVelocityConstraints(const FReal Dt)"
  },
  {
    "label": "PreApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreApplyProjectionConstraints(const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt)"
  },
  {
    "label": "ScatterBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterBodies(const FReal Dt)"
  },
  {
    "label": "ScatterBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterBodies(const FReal Dt, const int32 BeginBodyIndex, const int32 EndBodyIndex)"
  },
  {
    "label": "ScatterConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterConstraints(const FReal Dt)"
  },
  {
    "label": "ScatterConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterConstraints(const FReal Dt, const int32 BeginConstraintIndex, const int32 EndConstraintIndex)"
  },
  {
    "label": "ApplyToConstraintRange()",
    "kind": "Method",
    "detail": "Function (protected : template<LambdaType> void)",
    "insertText": "ApplyToConstraintRange(const int32 BeginConstraintIndex, const int32 EndConstraintIndex, const LambdaType& Lambda)"
  },
  {
    "label": "SortSolverContainers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortSolverContainers()"
  },
  {
    "label": "ResetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetImpl()"
  },
  {
    "label": "SetConstraintSolverImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConstraintSolverImpl(const int32 ContainerId)"
  },
  {
    "label": "AddConstraintsImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsImpl()"
  },
  {
    "label": "GatherBodiesImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherBodiesImpl(const FReal Dt, const int32 BeginBodyIndex, const int32 EndBodyIndex)"
  },
  {
    "label": "FPBDSceneConstraintGroupSolver()",
    "kind": "Method",
    "detail": "Function (} FSolverBodyContainer SolverBodyContainer ; TArray<TUniquePtr<FConstraintContainerSolver>> ConstraintContainerSolvers ; int32 TotalNumConstraints ; TArray<FConstraintContainerSolver*> PrioritizedConstraintContainerSolvers ; FIterationSettings Iterations ; } ; class FPBDSceneConstraintGroupSolver : public FPBDConstraintGroupSolver { public :)",
    "insertText": "FPBDSceneConstraintGroupSolver(const FIterationSettings& InIterations)"
  }
]