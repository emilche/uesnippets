[
  {
    "label": "ConsModelCaches",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConsModelCaches"
  },
  {
    "label": "FNewtonEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNewtonEvolution"
  },
  {
    "label": "FNewtonEvolution()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ArrayCollection . h \" # include \" Chaos / PBDActiveView . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / NewtonElasticFEM . h \" # include \" Chaos / NewtonCorotatedCache . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" Chaos / KinematicGeometryParticles . h \" # endif # include \" Chaos / SoftsSolverCollisionParticles . h \" # include \" Chaos / VelocityField . h \" namespace Chaos::Softs { struct ConsModelCaches { TArray<Chaos::Softs::CorotatedCache<FSolverReal>> CorotatedCache ; } ; class FNewtonEvolution : public TArrayCollection { public :)",
    "insertText": "FNewtonEvolution(FSolverParticles&& InParticles, FSolverCollisionParticles&& InGeometryParticles, TArray<TVec3<int32>>&& CollisionTriangles, const TArray<TVector<int32, 4>>& InMesh, TArray<TArray<TVector<int32, 2>>>&& InIncidentElements, int32 NumNewtonIterations = 5, int32 NumCGIterations = 20, const TArray<int32>& ConstrainedVertices = TArray<int32>(), const TArray<FSolverVec3>& BCPositions = TArray<FSolverVec3>(), FSolverReal CollisionThickness = (FSolverReal)0., FSolverReal SelfCollisionsThickness = (FSolverReal)0., FSolverReal CoefficientOfFriction = (FSolverReal)0., FSolverReal Damping = (FSolverReal)0.04, FSolverReal LocalDamping = (FSolverReal)0., FSolverReal EMesh = (FSolverReal)1000., FSolverReal NuMesh = (FSolverReal).3, FSolverReal NewtonTol = (FSolverReal) 1e-6, FSolverReal CGTolIn = (FSolverReal) 1e-8, bool bWriteDebugInfoIn = true)"
  },
  {
    "label": "FNewtonEvolution()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNewtonEvolution()"
  },
  {
    "label": "AdvanceOneTimeStep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceOneTimeStep(const FSolverReal Dt, const bool bSmoothDt = true)"
  },
  {
    "label": "ResetParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParticles()"
  },
  {
    "label": "AddParticleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddParticleRange(int32 NumParticles, uint32 GroupId, bool bActivate)"
  },
  {
    "label": "GetParticleRangeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParticleRangeSize(int32 Offset)"
  },
  {
    "label": "ActivateParticleRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateParticleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "ActivateRange()",
    "kind": "Method",
    "detail": "Function (MParticlesActiveView .)",
    "insertText": "ActivateRange(Offset, bActivate)"
  },
  {
    "label": "Particles()",
    "kind": "Method",
    "detail": "Function (} const FSolverParticles&)",
    "insertText": "Particles()"
  },
  {
    "label": "AddCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCollisionParticleRange(int32 NumParticles, uint32 GroupId, bool bActivate)"
  },
  {
    "label": "ActivateCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCollisionParticleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "GetCollisionParticleRangeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCollisionParticleRangeSize(int32 Offset)"
  },
  {
    "label": "CollisionParticles()",
    "kind": "Method",
    "detail": "Function (} const FSolverCollisionParticles&)",
    "insertText": "CollisionParticles()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MConstraintInits .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddConstraintInitRange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddConstraintInitRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "AddConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddConstraintRuleRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "AddPostCollisionConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddPostCollisionConstraintRuleRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "GetConstraintInitRangeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintInitRangeSize(int32 Offset)"
  },
  {
    "label": "GetConstraintRuleRangeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetConstraintRuleRangeSize(int32 Offset)"
  },
  {
    "label": "GetPostCollisionConstraintRuleRangeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPostCollisionConstraintRuleRangeSize(int32 Offset)"
  },
  {
    "label": "ActivateConstraintInitRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateConstraintInitRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "ActivateConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateConstraintRuleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "ActivatePostCollisionConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivatePostCollisionConstraintRuleRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} const TArray<TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal)>>& ConstraintInits()"
  },
  {
    "label": "SetCollisionKinematicUpdateFunction()",
    "kind": "Method",
    "detail": "Function (MKinematicUpdate = KinematicUpdate ; } void)",
    "insertText": "SetCollisionKinematicUpdateFunction(TFunction<void(FSolverCollisionParticles&, const FSolverReal, const FSolverReal, const int32)> KinematicUpdate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (MCollisionKinematicUpdate = KinematicUpdate ; } TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal, const int32)>& GetForceFunction(const uint32 GroupId = 0)"
  },
  {
    "label": "GetVelocityAndPressureField()",
    "kind": "Method",
    "detail": "Function (MGroupGravityAccelerations [ GroupId ] = Acceleration ; } FVelocityAndPressureField&)",
    "insertText": "GetVelocityAndPressureField(const uint32 GroupId = 0)"
  },
  {
    "label": "GetCollisionThickness()",
    "kind": "Method",
    "detail": "Function (MNumNewtonIterations = Iterations ; } FSolverReal)",
    "insertText": "GetCollisionThickness(const uint32 GroupId = 0)"
  },
  {
    "label": "GetCoefficientOfFriction()",
    "kind": "Method",
    "detail": "Function (MGroupCollisionThicknesses [ GroupId ] = CollisionThickness ; } FSolverReal)",
    "insertText": "GetCoefficientOfFriction(const uint32 GroupId = 0)"
  },
  {
    "label": "GetDamping()",
    "kind": "Method",
    "detail": "Function (MGroupCoefficientOfFrictions [ GroupId ] = CoefficientOfFriction ; } FSolverReal)",
    "insertText": "GetDamping(const uint32 GroupId = 0)"
  },
  {
    "label": "GetLocalDamping()",
    "kind": "Method",
    "detail": "Function (MGroupDampings [ GroupId ] = Damping ; } FSolverReal)",
    "insertText": "GetLocalDamping(const uint32 GroupId = 0)"
  },
  {
    "label": "GetUseCCD()",
    "kind": "Method",
    "detail": "Function (MGroupLocalDampings [ GroupId ] = LocalDamping ; } bool)",
    "insertText": "GetUseCCD(const uint32 GroupId = 0)"
  },
  {
    "label": "DoNewtonStep()",
    "kind": "Method",
    "detail": "Function (template<Func1,Func2,Func3,Func4,Func5,Func6> void)",
    "insertText": "DoNewtonStep(const int32 max_it_newton, const FSolverReal newton_tol, const int32 max_it_cg, const FSolverReal cg_tol, Func1 P, Func2 dP, const FSolverReal time, const FSolverReal dt, const TArray<TArray<TVector<int32, 2>>>& incident_elements, const TArray<FSolverReal>& nodal_mass, Func3 set_bcs, Func4 project_bcs, Func5 add_external_force, Func6 update_position_based_state, FSolverParticles& InParticles, TArray<FSolverReal>& residual_norm, bool use_cg = false, FSolverReal cg_prctg_reduce = 0, bool no_verbose = false)"
  },
  {
    "label": "InitFEM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFEM()"
  },
  {
    "label": "WriteOutputLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteOutputLog(const int32 Frame)"
  },
  {
    "label": "AddGroups()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddGroups(int32 NumGroups)"
  },
  {
    "label": "ResetGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGroups()"
  },
  {
    "label": "PreIterationUpdate()",
    "kind": "Method",
    "detail": "Function (template<bool bForceRule,bool bVelocityField,bool bDampVelocityRule> void)",
    "insertText": "PreIterationUpdate(const FSolverReal Dt, const int32 Offset, const int32 Range, const int32 MinParallelBatchSize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : FSolverParticles MParticles ; TPBDActiveView<FSolverParticles> MParticlesActiveView ; FSolverCollisionParticles MCollisionParticles ; TPBDActiveView<FSolverCollisionParticles> MCollisionParticlesActiveView ; TArrayCollectionArray<FSolverRigidTransform3> MCollisionTransforms ; TArrayCollectionArray<bool> MCollided ; TArrayCollectionArray<uint32> MCollisionParticleGroupIds ; TArrayCollectionArray<uint32> MParticleGroupIds ; TArray<FSolverVec3> MCollisionContacts ; TArray<FSolverVec3> MCollisionNormals ; TArrayCollectionArray<FSolverVec3> MGroupGravityAccelerations ; TArrayCollectionArray<FVelocityAndPressureField> MGroupVelocityAndPressureFields ; TArrayCollectionArray<TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal, const int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArrayCollectionArray<FSolverReal> MGroupCollisionThicknesses ; TArrayCollectionArray<FSolverReal> MGroupCoefficientOfFrictions ; TArrayCollectionArray<FSolverReal> MGroupDampings ; TArrayCollectionArray<FSolverReal> MGroupLocalDampings ; TArrayCollectionArray<bool> MGroupUseCCDs ; TArray<TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(FSolverParticles&, const FSolverReal, const FSolverReal, const int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(FSolverCollisionParticles&, const FSolverReal, const FSolverReal, const int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const bool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const PMatrix<FSolverReal, 3, 3>&, PMatrix<FSolverReal, 3, 3>&, const int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const PMatrix<FSolverReal, 3, 3>&, const PMatrix<FSolverReal, 3, 3>&, PMatrix<FSolverReal, 3, 3>&, const int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(TArray<FSolverVec3>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const FSolverReal, TArray<FSolverVec3>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const FSolverReal, const FSolverReal, const TArray<FSolverReal>&, bool, TArray<FSolverVec3>&)"
  }
]