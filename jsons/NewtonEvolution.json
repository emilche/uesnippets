[
  {
    "label": "ConsModelCaches",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConsModelCaches"
  },
  {
    "label": "FNewtonEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNewtonEvolution"
  },
  {
    "label": "AdvanceOneTimeStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceOneTimeStep(const FSolverReal Dt, const bool bSmoothDt = true)"
  },
  {
    "label": "ResetParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParticles()"
  },
  {
    "label": "AddParticleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddParticleRange(int32 NumParticles, uint32 GroupId, bool bActivate)"
  },
  {
    "label": "ResetCollisionParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCollisionParticles(int32 NumParticles = 0)"
  },
  {
    "label": "AddCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCollisionParticleRange(int32 NumParticles, uint32 GroupId, bool bActivate)"
  },
  {
    "label": "AddConstraintInitRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddConstraintInitRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "AddConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddConstraintRuleRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "AddPostCollisionConstraintRuleRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddPostCollisionConstraintRuleRange(int32 NumConstraints, bool bActivate)"
  },
  {
    "label": "ComputeNegativeBackwardEulerResidual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNegativeBackwardEulerResidual(const FSolverParticles& InParticles, const TArray<TArray<TVector<int32, 2>>>& IncidentElements, const TArray<FSolverReal>& NodalMass, const TArray<FSolverVec3>& Vn, const FSolverParticles& Xn, Func1 P, Func2 AddExternalForce, const FSolverReal Time, const FSolverReal Dt, TArray<FSolverVec3>& Residual)"
  },
  {
    "label": "DoNewtonStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoNewtonStep(const int32 max_it_newton, const FSolverReal newton_tol, const int32 max_it_cg, const FSolverReal cg_tol, Func1 P, Func2 dP, const FSolverReal time, const FSolverReal dt, const TArray<TArray<TVector<int32, 2>>>& incident_elements, const TArray<FSolverReal>& nodal_mass, Func3 set_bcs, Func4 project_bcs, Func5 add_external_force, Func6 update_position_based_state, FSolverParticles& InParticles, TArray<FSolverReal>& residual_norm, bool use_cg = false, FSolverReal cg_prctg_reduce = 0, bool no_verbose = false)"
  },
  {
    "label": "InitFEM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFEM()"
  },
  {
    "label": "WriteOutputLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteOutputLog(const int32 Frame)"
  },
  {
    "label": "AddGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGroups(int32 NumGroups)"
  },
  {
    "label": "ResetGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGroups()"
  },
  {
    "label": "PreIterationUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreIterationUpdate(const FSolverReal Dt, const int32 Offset, const int32 Range, const int32 MinParallelBatchSize)"
  }
]