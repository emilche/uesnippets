[
  {
    "label": "FNodeObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeObject"
  },
  {
    "label": "FNodeHierarchyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeHierarchyData"
  },
  {
    "label": "FNodeHierarchyWithUserData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeHierarchyWithUserData"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Constraint . h \" # include \" Algo / Transform . h \" # include \" NodeHierarchy . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FNodeObject() : Name(NAME_None) , ParentName(NAME_None)"
  },
  {
    "label": "FNodeObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNodeObject(const FName& InName, const FName& InParentName) : Name(InName) , ParentName(InParentName)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (public : const FTransform&)",
    "insertText": "GetTransform(int32 Index)"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (Transforms [ Index ] = NewTransform ; Transforms [ Index ] .)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "GetParentIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetParentIndex(int32 Index)"
  },
  {
    "label": "GetParentName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetParentName(int32 Index)"
  },
  {
    "label": "GetNodeIndex()",
    "kind": "Method",
    "detail": "Function (Nodes [ Index ] . ParentName = NewParent ; } int32)",
    "insertText": "GetNodeIndex(const FName& NodeName)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* NodeIndex = NodeNameToIndexMapping .)",
    "insertText": "Find(NodeName)"
  },
  {
    "label": "GetNodeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetNodeName(int32 Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FName OldName = Nodes [ Index ] . Name ; Nodes [ Index ] . Name = NewNodeName ;)",
    "insertText": "for(int32 NodeIndex = 0; NodeIndex < Nodes.Num(); ++NodeIndex)"
  },
  {
    "label": "BuildNodeNameToIndexMapping()",
    "kind": "Method",
    "detail": "Function (Nodes [ NodeIndex ] . ParentName = NewNodeName ; } })",
    "insertText": "BuildNodeNameToIndexMapping()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(const FName& InNodeName, const FName& InParentName, const FTransform& InTransform)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Nodes.Num() == Transforms.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = Nodes .)",
    "insertText": "Add(FNodeObject(InNodeName, InParentName))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Transforms .)",
    "insertText": "Add(InTransform)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Empty(Size)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NodeNameToIndexMapping .)",
    "insertText": "Reset()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Allocate(int32 Size)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Remove(const FName& InNodeName)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32* NodeIndex = NodeNameToIndexMapping .)",
    "insertText": "Find(InNodeName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ReturnIndex = INDEX_NONE ;)",
    "insertText": "if(NodeIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "RemoveAt(*NodeIndex)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NodeNameToIndexMapping .)",
    "insertText": "Empty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32& Index = NodeNameToIndexMapping .)",
    "insertText": "Add(Nodes[NodeIndex].Name)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Index = NodeIndex ; })",
    "insertText": "check(Nodes.Num() == NodeNameToIndexMapping.Num())"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: UPROPERTY()"
  },
  {
    "label": "FNodeHierarchyWithUserData()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FNodeHierarchyWithUserData()"
  },
  {
    "label": "GetHierarchy()",
    "kind": "Method",
    "detail": "Function (} ; const FNodeHierarchyData&)",
    "insertText": "GetHierarchy()"
  },
  {
    "label": "GetNodeData()",
    "kind": "Method",
    "detail": "Function (} template<DataType> DataType&)",
    "insertText": "GetNodeData(int32 Index)"
  },
  {
    "label": "GetLocalTransform()",
    "kind": "Method",
    "detail": "Function (} const FTransform&)",
    "insertText": "GetLocalTransform(int32 Index) const PURE_VIRTUAL(FNodeHierarchyWithUserData::GetLocalTransform, return Hierarchy.Transforms[Index];) virtual const FTransform& GetGlobalTransform(int32 Index) const PURE_VIRTUAL(FNodeHierarchyWithUserData::GetGlobalTransform, return Hierarchy.Transforms[Index];) virtual FTransform& GetLocalTransform(int32 Index) PURE_VIRTUAL(FNodeHierarchyWithUserData::GetLocalTransform, return Hierarchy.Transforms[Index];) virtual FTransform& GetGlobalTransform(int32 Index) PURE_VIRTUAL(FNodeHierarchyWithUserData::GetGlobalTransform, return Hierarchy.Transforms[Index];) virtual void SetLocalTransform(int32 Index, const FTransform& NewTransform)"
  },
  {
    "label": "SetGlobalTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGlobalTransform(int32 Index, const FTransform& NewTransform)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} TArray<FName>)",
    "insertText": "GetChildren(int32 Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FName> ChildrenNames ; FName NodeName = Hierarchy . Nodes [ Index ] . Name ;)",
    "insertText": "for(int32 NodeIndex = 0; NodeIndex < Hierarchy.Nodes.Num(); ++NodeIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChildrenNames .)",
    "insertText": "Add(Hierarchy.Nodes[NodeIndex].Name)"
  },
  {
    "label": "GetLocalTransformByName()",
    "kind": "Method",
    "detail": "Function (} } return ChildrenNames ; } FTransform)",
    "insertText": "GetLocalTransformByName(const FName& NodeName)"
  },
  {
    "label": "GetNodeIndex()",
    "kind": "Method",
    "detail": "Function (int32 Index =)",
    "insertText": "GetNodeIndex(NodeName)"
  },
  {
    "label": "GetGlobalTransformByName()",
    "kind": "Method",
    "detail": "Function (} return FTransform::Identity ; } FTransform)",
    "insertText": "GetGlobalTransformByName(const FName& NodeName)"
  },
  {
    "label": "SetLocalTransformByName()",
    "kind": "Method",
    "detail": "Function (} return FTransform::Identity ; } void)",
    "insertText": "SetLocalTransformByName(const FName& NodeName, const FTransform& NewTransform)"
  },
  {
    "label": "SetLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTransform(Index, NewTransform)"
  },
  {
    "label": "SetGlobalTransformByName()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetGlobalTransformByName(const FName& NodeName, const FTransform& NewTransform)"
  },
  {
    "label": "SetGlobalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTransform(Index, NewTransform)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetParentName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetParentName(const FName& NodeName)"
  },
  {
    "label": "SetParentName()",
    "kind": "Method",
    "detail": "Function (} return NAME_None ; } void)",
    "insertText": "SetParentName(int32 Index, FName NewParent)"
  },
  {
    "label": "SetParentName()",
    "kind": "Method",
    "detail": "Function (Hierarchy .)",
    "insertText": "SetParentName(Index, NewParent)"
  },
  {
    "label": "GetNodeIndex()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetNodeIndex(const FName& InNodeName)"
  },
  {
    "label": "SetNodeName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNodeName(int32 Index, const FName& NewNode)"
  },
  {
    "label": "SetNodeName()",
    "kind": "Method",
    "detail": "Function (Hierarchy .)",
    "insertText": "SetNodeName(Index, NewNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<DataType> int32)",
    "insertText": "Add(const FName& InNodeName, const FName& InParentName, const FTransform& InTransform, const DataType& InNodeData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 Index = Hierarchy .)",
    "insertText": "Add(InNodeName, InParentName, InTransform)"
  },
  {
    "label": "AddUserDataImpl()",
    "kind": "Method",
    "detail": "Function (int32 UserDataIndex =)",
    "insertText": "AddUserDataImpl(&InNodeData)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32 RemovedIndex = Hierarchy .)",
    "insertText": "Remove(InNodeName)"
  },
  {
    "label": "RemoveUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserData(RemovedIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Hierarchy.Nodes.Num() == Hierarchy.Transforms.Num() && Hierarchy.Transforms.Num() == GetNumUserData())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Empty(int32 Size = 0)"
  },
  {
    "label": "EmptyUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyUserData(Size)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetNum()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const FName InNodeName)"
  },
  {
    "label": "GetUserDataImpl()",
    "kind": "Method",
    "detail": "Function (} protected : const void*)",
    "insertText": "GetUserDataImpl(int32 Index)"
  },
  {
    "label": "RemoveUserData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveUserData(int32 Index)"
  },
  {
    "label": "HasUserData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasUserData()"
  }
]