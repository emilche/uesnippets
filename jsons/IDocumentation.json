[
  {
    "label": "FDocumentationRedirect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDocumentationRedirect"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "FDocumentationStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDocumentationStyle"
  },
  {
    "label": "FParserConfiguration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParserConfiguration"
  },
  {
    "label": "FDocumentationSourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDocumentationSourceInfo"
  },
  {
    "label": "IDocumentation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDocumentation"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IDocumentationPage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDocumentationPage"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Modules / ModuleManager . h \" # include \" IDocumentationModule . h \" struct FDocumentationRedirect ; template<ObjectType> class TAttribute ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnNavigate, const FString&)"
  },
  {
    "label": "FDocumentationStyle()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FDocumentationStyle() : ContentStyleName(TEXT(\"Documentation.Content\")) , BoldContentStyleName(TEXT(\"Documentation.BoldContent\")) , ItalicContentStyleName(TEXT(\"Documentation.ItalicContent\")) , NumberedContentStyleName(TEXT(\"Documentation.NumberedContent\")) , Header1StyleName(TEXT(\"Documentation.Header1\")) , Header2StyleName(TEXT(\"Documentation.Header2\")) , HyperlinkStyleName(TEXT(\"Documentation.Hyperlink\")) , HyperlinkButtonStyleName(TEXT(\"Documentation.Hyperlink.Button\")) , HyperlinkTextStyleName(TEXT(\"Documentation.Hyperlink.Text\")) , SeparatorStyleName(TEXT(\"Documentation.Separator\"))"
  },
  {
    "label": "ContentStyle()",
    "kind": "Method",
    "detail": "Function (} FDocumentationStyle&)",
    "insertText": "ContentStyle(const FName& InName)"
  },
  {
    "label": "BoldContentStyle()",
    "kind": "Method",
    "detail": "Function (ContentStyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "BoldContentStyle(const FName& InName)"
  },
  {
    "label": "ItalicContentStyle()",
    "kind": "Method",
    "detail": "Function (BoldContentStyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "ItalicContentStyle(const FName& InName)"
  },
  {
    "label": "NumberedContentStyle()",
    "kind": "Method",
    "detail": "Function (ItalicContentStyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "NumberedContentStyle(const FName& InName)"
  },
  {
    "label": "Header1Style()",
    "kind": "Method",
    "detail": "Function (NumberedContentStyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "Header1Style(const FName& InName)"
  },
  {
    "label": "Header2Style()",
    "kind": "Method",
    "detail": "Function (Header1StyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "Header2Style(const FName& InName)"
  },
  {
    "label": "HyperlinkStyle()",
    "kind": "Method",
    "detail": "Function (Header2StyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "HyperlinkStyle(const FName& InName)"
  },
  {
    "label": "HyperlinkButtonStyle()",
    "kind": "Method",
    "detail": "Function (HyperlinkStyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "HyperlinkButtonStyle(const FName& InName)"
  },
  {
    "label": "HyperlinkTextStyle()",
    "kind": "Method",
    "detail": "Function (HyperlinkButtonStyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "HyperlinkTextStyle(const FName& InName)"
  },
  {
    "label": "SeparatorStyle()",
    "kind": "Method",
    "detail": "Function (HyperlinkTextStyleName = InName ; return* this ; } FDocumentationStyle&)",
    "insertText": "SeparatorStyle(const FName& InName)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (SeparatorStyleName = InName ; return* this ; } FName ContentStyleName ; FName BoldContentStyleName ; FName ItalicContentStyleName ; FName NumberedContentStyleName ; FName Header1StyleName ; FName Header2StyleName ; FName HyperlinkStyleName ; FName HyperlinkButtonStyleName ; FName HyperlinkTextStyleName ; FName SeparatorStyleName ; } ; class FParserConfiguration { public : TSharedRef<FParserConfiguration>)",
    "insertText": "Create()"
  },
  {
    "label": "FParserConfiguration()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FParserConfiguration()"
  },
  {
    "label": "FDocumentationSourceInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDocumentationSourceInfo { public : FString Source ; FString Medium ; FString Campaign ;)",
    "insertText": "FDocumentationSourceInfo()"
  },
  {
    "label": "FDocumentationSourceInfo()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FDocumentationSourceInfo(FString const& InCampaign) : Source(TEXT(\"editor\")), Medium(TEXT(\"docs\")), Campaign(InCampaign)"
  },
  {
    "label": "FDocumentationSourceInfo()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FDocumentationSourceInfo(FString const& InSource, FString const& InMedium, FString const& InCampaign) : Source(InSource), Medium(InMedium), Campaign(InCampaign)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; class IDocumentation { public : TSharedRef<IDocumentation>)",
    "insertText": "Get()"
  },
  {
    "label": "IDocumentationModule()",
    "kind": "Method",
    "detail": "Function (IDocumentationModule& Module = FModuleManager::LoadModuleChecked<)",
    "insertText": "IDocumentationModule(\"Documentation\")"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "OpenHome()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "OpenHome(FDocumentationSourceInfo Source = FDocumentationSourceInfo(), const FString& BaseUrlId = FString())"
  },
  {
    "label": "OpenHome()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenHome(const FCultureRef& Culture, FDocumentationSourceInfo Source = FDocumentationSourceInfo(), const FString & BaseUrlId = FString())"
  },
  {
    "label": "OpenAPIHome()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenAPIHome(FDocumentationSourceInfo Source = FDocumentationSourceInfo())"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const FString& Link, FDocumentationSourceInfo Source = FDocumentationSourceInfo(), const FString& BaseUrlId = FString())"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const FString& Link, const FCultureRef& Culture, FDocumentationSourceInfo Source = FDocumentationSourceInfo(), const FString& BaseUrlId = FString())"
  },
  {
    "label": "CreateAnchor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "CreateAnchor(const TAttribute<FString>& Link, const FString& PreviewLink = FString(), const FString& PreviewExcerptName = FString(), const TAttribute<FString>& BaseUrlId = FString())"
  },
  {
    "label": "GetPage()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IDocumentationPage>)",
    "insertText": "GetPage(const FString& Link, const TSharedPtr< FParserConfiguration >& Config, const FDocumentationStyle& Style = FDocumentationStyle())"
  },
  {
    "label": "PageExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PageExists(const FString& Link)"
  },
  {
    "label": "PageExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PageExists(const FString& Link, const FCultureRef& Culture)"
  },
  {
    "label": "GetSourcePaths()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetSourcePaths()"
  },
  {
    "label": "CreateToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SToolTip>)",
    "insertText": "CreateToolTip(const TAttribute<FText>& Text, const TSharedPtr<SWidget>& OverrideContent, const FString& Link, const FString& ExcerptName)"
  },
  {
    "label": "CreateToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SToolTip>)",
    "insertText": "CreateToolTip(const TAttribute<FText>& Text, const TSharedPtr<SWidget>& OverrideContent, const FString& Link, const FString& ExcerptName, const TAttribute<FText>& Shortcut)"
  },
  {
    "label": "CreateToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SToolTip>)",
    "insertText": "CreateToolTip(const TAttribute<FText>& Text, const TSharedRef<SWidget>& OverrideContent, const TSharedPtr<class SVerticalBox>& DocVerticalBox, const FString& Link, const FString& ExcerptName)"
  },
  {
    "label": "RegisterBaseUrl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterBaseUrl(const FString& Id, const FString& Url)"
  },
  {
    "label": "GetBaseUrl()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBaseUrl(const FString& Id)"
  },
  {
    "label": "RegisterRedirect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterRedirect(const FName& Owner, const FDocumentationRedirect& Redirect)"
  },
  {
    "label": "UnregisterRedirects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterRedirects(const FName& Owner)"
  }
]