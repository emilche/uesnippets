[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FCursorReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCursorReply"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GenericPlatform / ICursor . h \" # include \" Input / ReplyBase . h \" class SWidget ; class SWindow ; class FCursorReply : public TReplyBase<FCursorReply> { public : FCursorReply)",
    "insertText": "Unhandled()"
  },
  {
    "label": "Cursor()",
    "kind": "Method",
    "detail": "Function (} FCursorReply)",
    "insertText": "Cursor(EMouseCursor::Type InCursor)"
  },
  {
    "label": "GetCursorWindow()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWindow>)",
    "insertText": "GetCursorWindow()"
  },
  {
    "label": "FCursorReply()",
    "kind": "Method",
    "detail": "Function (CursorWindow = InCursorWindow ; CursorWidget = InCursorWidget ; } private :)",
    "insertText": "FCursorReply() : TReplyBase<FCursorReply>(false) , MouseCursor( EMouseCursor::Default)"
  },
  {
    "label": "FCursorReply()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCursorReply(EMouseCursor::Type InCursorType ) : TReplyBase<FCursorReply>(true) , MouseCursor( InCursorType)"
  }
]