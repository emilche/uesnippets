[
  {
    "label": "Translation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Translation"
  },
  {
    "label": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRANSLATION_H # define EIGEN_TRANSLATION_H namespace Eigen { template<_Scalar,int _Dim> class Translation { public :)",
    "insertText": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE(_Scalar,_Dim)"
  },
  {
    "label": "Translation()",
    "kind": "Method",
    "detail": "Function (Dim = _Dim } ; typedef _Scalar Scalar ; typedef Matrix<Scalar,Dim,1> VectorType ; typedef Matrix<Scalar,Dim,Dim> LinearMatrixType ; typedef Transform<Scalar,Dim,Affine> AffineTransformType ; typedef Transform<Scalar,Dim,Isometry> IsometryTransformType ; protected : VectorType m_coeffs ; public : EIGEN_DEVICE_FUNC)",
    "insertText": "Translation()"
  },
  {
    "label": "Translation()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Translation(const Scalar& sx, const Scalar& sy)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Dim==2)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (m_coeffs .)",
    "insertText": "x()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (m_coeffs .)",
    "insertText": "y()"
  },
  {
    "label": "Translation()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Translation(const Scalar& sx, const Scalar& sy, const Scalar& sz)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Dim==3)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (m_coeffs .)",
    "insertText": "z()"
  },
  {
    "label": "Translation()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Translation(const VectorType& vector) : m_coeffs(vector)"
  },
  {
    "label": "vector()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const VectorType&)",
    "insertText": "vector()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC AffineTransformType)",
    "insertText": "operator(const UniformScaling<Scalar>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC AffineTransformType)",
    "insertText": "operator(const EigenBase<OtherDerived>& linear)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Derived> EIGEN_DEVICE_FUNC IsometryTransformType)",
    "insertText": "operator(const RotationBase<Derived,Dim>& r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC AffineTransformType)",
    "insertText": "operator(const EigenBase<OtherDerived>& linear, const Translation& t)"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (AffineTransformType res ; res .)",
    "insertText": "matrix().setZero()"
  },
  {
    "label": "linear()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "linear() = linear.derived()"
  },
  {
    "label": "translation()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "translation() = linear.derived()"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "matrix().row(Dim).setZero()"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(Dim,Dim) = Scalar(1)"
  },
  {
    "label": "pretranslate()",
    "kind": "Method",
    "detail": "Function (Transform<Scalar,Dim,Mode> res = t ; res .)",
    "insertText": "pretranslate(m_coeffs)"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} Translation)",
    "insertText": "inverse()"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (} const Translation)",
    "insertText": "Identity()"
  },
  {
    "label": "cast()",
    "kind": "Method",
    "detail": "Function (} template<NewScalarType> EIGEN_DEVICE_FUNC internal::cast_return_type<Translation,Translation<NewScalarType,Dim>>::type)",
    "insertText": "cast()"
  },
  {
    "label": "Translation()",
    "kind": "Method",
    "detail": "Function (} template<OtherScalarType> EIGEN_DEVICE_FUNC)",
    "insertText": "Translation(const Translation<OtherScalarType,Dim>& other)"
  },
  {
    "label": "vector()",
    "kind": "Method",
    "detail": "Function (m_coeffs = other .)",
    "insertText": "vector().template cast<Scalar>()"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "isApprox(const Translation& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "linear()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "linear().diagonal().fill(other.factor())"
  },
  {
    "label": "translation()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "translation()"
  }
]