[
  {
    "label": "machine_load_store_relaxed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_relaxed"
  },
  {
    "label": "cpu_ctl_env",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cpu_ctl_env"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_msvc_armv7_H)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_msvc_armv7_H # include<intrin . h> # include<float . h> # define __TBB_WORDSIZE 4 # define __TBB_ENDIANNESS __TBB_ENDIAN_UNSUPPORTED # if)",
    "insertText": "defined(TBB_WIN32_USE_CL_BUILTINS) #pragma intrinsic(_ReadWriteBarrier) #pragma intrinsic(_mm_mfence) #define __TBB_compiler_fence() _ReadWriteBarrier() #define __TBB_full_memory_fence() _mm_mfence() #define __TBB_control_consistency_helper() __TBB_compiler_fence() #define __TBB_acquire_consistency_helper() __TBB_compiler_fence() #define __TBB_release_consistency_helper() __TBB_compiler_fence() #else #if defined(_M_ARM) #define __TBB_compiler_fence() __dmb(_ARM_BARRIER_SY) #define __TBB_full_memory_fence() __dmb(_ARM_BARRIER_SY) #elif defined(_M_ARM64) #define __TBB_compiler_fence() __dmb(_ARM64_BARRIER_SY) #define __TBB_full_memory_fence() __dmb(_ARM64_BARRIER_SY) #endif #define __TBB_control_consistency_helper() __TBB_compiler_fence() #define __TBB_acquire_consistency_helper() __TBB_full_memory_fence() #define __TBB_release_consistency_helper() __TBB_full_memory_fence() #endif #define __TBB_MACHINE_DEFINE_ATOMICS_CMPSWP(S,T,F) \\ inline T __TBB_machine_cmpswp##S( volatile void *ptr, T value, T comparand)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return _InterlockedCompareExchange # #)",
    "insertText": "F(reinterpret_cast<volatile T *>(ptr),value,comparand)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS_FETCHADD()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS_FETCHADD(S,T,F) \\ inline T __TBB_machine_fetchadd##S( volatile void *ptr, T value)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return _InterlockedExchangeAdd # #)",
    "insertText": "F(reinterpret_cast<volatile T *>(ptr),value)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS_CMPSWP()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS_CMPSWP(1,char,8) __TBB_MACHINE_DEFINE_ATOMICS_CMPSWP(2,short,16) __TBB_MACHINE_DEFINE_ATOMICS_CMPSWP(4,long,) __TBB_MACHINE_DEFINE_ATOMICS_CMPSWP(8,__int64,64) __TBB_MACHINE_DEFINE_ATOMICS_FETCHADD(4,long,) #if defined(TBB_WIN32_USE_CL_BUILTINS) #define __TBB_64BIT_ATOMICS 0 #else __TBB_MACHINE_DEFINE_ATOMICS_FETCHADD(8,__int64,64) #endif inline void __TBB_machine_pause (int32_t delay)"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_compiler_fence()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (delay - - ; } } # define __TBB_CPU_CTL_ENV_PRESENT 1 namespace tbb { namespace internal { template<T,size_t S> struct machine_load_store_relaxed { T)",
    "insertText": "load(const volatile T& location)"
  },
  {
    "label": "__TBB_acquire_consistency_helper()",
    "kind": "Method",
    "detail": "Function (const T value = location ;)",
    "insertText": "__TBB_acquire_consistency_helper()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (location = value ; } } ; class cpu_ctl_env { private : unsigned int my_ctl ; public : bool)",
    "insertText": "operator(const cpu_ctl_env& ctl)"
  },
  {
    "label": "_control87()",
    "kind": "Method",
    "detail": "Function (my_ctl =)",
    "insertText": "_control87(0, 0)"
  },
  {
    "label": "set_env()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_env()"
  },
  {
    "label": "_control87()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_control87(my_ctl, ~0U)"
  },
  {
    "label": "__TBB_CompareAndSwap4()",
    "kind": "Method",
    "detail": "Function (} } ; } } # define)",
    "insertText": "__TBB_CompareAndSwap4(P,V,C) __TBB_machine_cmpswp4(P,V,C) #define __TBB_CompareAndSwap8(P,V,C) __TBB_machine_cmpswp8(P,V,C) #define __TBB_Pause(V) __TBB_machine_pause(V) #define __TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE 1 #define __TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE 1 #define __TBB_USE_GENERIC_PART_WORD_FETCH_ADD 1 #define __TBB_USE_GENERIC_PART_WORD_FETCH_STORE 1 #define __TBB_USE_GENERIC_FETCH_STORE 1 #define __TBB_USE_GENERIC_DWORD_LOAD_STORE 1 #define __TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE 1 #if defined(TBB_WIN32_USE_CL_BUILTINS) #if !__TBB_WIN8UI_SUPPORT extern \"C\" __declspec(dllimport) int __stdcall SwitchToThread( void)"
  },
  {
    "label": "__TBB_Yield()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TBB_Yield() SwitchToThread() extern \"C\" __declspec(dllimport) void __stdcall Sleep( unsigned long)"
  },
  {
    "label": "__TBB_Sleep()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TBB_Sleep(v) Sleep( v ) #else #include<thread> #include<chrono> #define __TBB_Yield() std::this_thread::yield() #define __TBB_Sleep(v) std::this_thread::sleep_for( std::chrono::milliseconds(v) ) #endif #else #define __TBB_Yield() __yield() extern \"C\" __declspec(dllimport) void __stdcall Sleep( unsigned long)"
  },
  {
    "label": "__TBB_Sleep()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TBB_Sleep(v) Sleep( v ) #endif #define __TBB_AtomicOR(P,V) __TBB_machine_OR(P,V) #define __TBB_AtomicAND(P,V) __TBB_machine_AND(P,V) template <typename T1,typename T2> inline void __TBB_machine_OR( T1 *operand, T2 addend)"
  },
  {
    "label": "_InterlockedOr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_InterlockedOr((long volatile *)operand, (long)addend)"
  },
  {
    "label": "__TBB_machine_AND()",
    "kind": "Method",
    "detail": "Function (} template<T1,T2> void)",
    "insertText": "__TBB_machine_AND(T1 *operand, T2 addend)"
  },
  {
    "label": "_InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_InterlockedAnd((long volatile *)operand, (long)addend)"
  }
]