[
  {
    "label": "FSharedViewModelData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedViewModelData"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FViewModelChildren",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelChildren"
  },
  {
    "label": "FViewModelListHead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelListHead"
  },
  {
    "label": "FViewModelSubListIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelSubListIterator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "works",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "works"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FCachedHierarchicalPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedHierarchicalPosition"
  },
  {
    "label": "FOperationAccumulationBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOperationAccumulationBuffer"
  },
  {
    "label": "RegisterCustomModelListType()",
    "kind": "Method",
    "detail": "Function (EViewModelListType)",
    "insertText": "RegisterCustomModelListType()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "DetectLinkListCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetectLinkListCycle()"
  },
  {
    "label": "DetectLinkListCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetectLinkListCycle(TSharedPtr<FViewModel> StartAt)"
  },
  {
    "label": "LinkModelTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkModelTo(TSharedPtr<FViewModel> Model, TSharedPtr<FViewModelListLink> ToLink)"
  },
  {
    "label": "ReliquishList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "ReliquishList()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetChildren()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChild(const TSharedPtr<FViewModel>& Child)"
  },
  {
    "label": "InsertChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChild(const TSharedPtr<FViewModel>& Child, const TSharedPtr<FViewModel>& PreviousSibling)"
  },
  {
    "label": "MoveChildrenTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveChildrenTo(const FViewModelChildren& OutDestination)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "FViewModelHierarchyOperation()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FViewModelHierarchyOperation(const TSharedPtr<FSharedViewModelData>& InSharedData)"
  },
  {
    "label": "PreHierarchicalChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreHierarchicalChange(const TSharedPtr<FViewModel>& InChangedNode)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  }
]