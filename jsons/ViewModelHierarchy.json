[
  {
    "label": "FSharedViewModelData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedViewModelData"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FViewModelChildren",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelChildren"
  },
  {
    "label": "FViewModelListHead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelListHead"
  },
  {
    "label": "FViewModelSubListIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelSubListIterator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FCachedHierarchicalPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedHierarchicalPosition"
  },
  {
    "label": "FOperationAccumulationBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOperationAccumulationBuffer"
  },
  {
    "label": "Everything()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" HAL / Platform . h \" # include \" MVVM / SharedList . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / TVariant . h \" # include \" SequencerCoreFwd . h \" # include \" Templates / SharedPointer . h \" namespace UE { namespace Sequencer { class FSharedViewModelData ; class FViewModel ; struct FViewModelChildren ; struct FViewModelListHead ; struct FViewModelSubListIterator ; # if UE_BUILD_DEBUG | | UE_BUILD_DEVELOPMENT # define UE_SEQUENCER_DETECT_LINK_LIST_CYCLES 1 # else # define UE_SEQUENCER_DETECT_LINK_LIST_CYCLES 0 # endif enum class EViewModelListType : uint32 { Generic = 1 u<<0,Outliner = 1 u<<1,TrackArea = 1 u<<2,Custom = 1 u<<4,Recycled = 1 u<<3 0,Last = 1 u<<3 1,Invalid = Last,)",
    "insertText": "Everything(~0u) & ~(Recycled|Invalid)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EViewModelListType) SEQUENCERCORE_API EViewModelListType RegisterCustomModelListType()"
  },
  {
    "label": "FViewModelListLink()",
    "kind": "Method",
    "detail": "Function (struct FViewModelListLink { ~)",
    "insertText": "FViewModelListLink()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "FindLastLink()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "FindLastLink()"
  },
  {
    "label": "DetectLinkListCycle()",
    "kind": "Method",
    "detail": "Function (private : FViewModel ; FViewModelListHead ; FViewModelChildren ; void)",
    "insertText": "DetectLinkListCycle()"
  },
  {
    "label": "DetectLinkListCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetectLinkListCycle(TSharedPtr<FViewModel> StartAt)"
  },
  {
    "label": "LinkModelTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkModelTo(TSharedPtr<FViewModel> Model, TSharedPtr<FViewModelListLink> ToLink)"
  },
  {
    "label": "FViewModelListHead()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel> Next ; TWeakPtr<FViewModelListLink> WeakPrev ; } ; struct FViewModelListHead {)",
    "insertText": "FViewModelListHead(EViewModelListType InType) : Type(InType)"
  },
  {
    "label": "GetHead()",
    "kind": "Method",
    "detail": "Function (} FViewModelPtr)",
    "insertText": "GetHead()"
  },
  {
    "label": "GetTail()",
    "kind": "Method",
    "detail": "Function (FViewModelPtr)",
    "insertText": "GetTail()"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (FViewModelSubListIterator)",
    "insertText": "Iterate()"
  },
  {
    "label": "ReliquishList()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FViewModel>)",
    "insertText": "ReliquishList()"
  },
  {
    "label": "FScopedViewModelListHead()",
    "kind": "Method",
    "detail": "Function (FViewModelListLink HeadLink ; FViewModelListHead* NextListHead = nullptr ; EViewModelListType Type ; } ; struct FScopedViewModelListHead {)",
    "insertText": "FScopedViewModelListHead(const TSharedPtr<FViewModel>& InModel, EViewModelListType InType)"
  },
  {
    "label": "FScopedViewModelListHead()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedViewModelListHead()"
  },
  {
    "label": "FScopedViewModelListHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedViewModelListHead(const FScopedViewModelListHead&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedViewModelListHead&)",
    "insertText": "operator(const FScopedViewModelListHead&)"
  },
  {
    "label": "FScopedViewModelListHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedViewModelListHead(FScopedViewModelListHead&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedViewModelListHead&)",
    "insertText": "operator(FScopedViewModelListHead&&)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FViewModel> Model ; FViewModelListHead ListHead ; } ; struct FViewModelChildren { EViewModelListType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FViewModelPtr)",
    "insertText": "GetParent()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChild(const TSharedPtr<FViewModel>& Child)"
  },
  {
    "label": "InsertChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChild(const TSharedPtr<FViewModel>& Child, const TSharedPtr<FViewModel>& PreviousSibling)"
  },
  {
    "label": "MoveChildrenTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveChildrenTo(const FViewModelChildren& OutDestination)"
  },
  {
    "label": "MoveChildrenTo()",
    "kind": "Method",
    "detail": "Function (template<T,Callback> void)",
    "insertText": "MoveChildrenTo(const FViewModelChildren& OutDestination, Callback&& InCallback)"
  },
  {
    "label": "InCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InCallback(Item)"
  },
  {
    "label": "MoveChildrenTo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MoveChildrenTo(OutDestination)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "IterateSubList()",
    "kind": "Method",
    "detail": "Function (public : FViewModelSubListIterator)",
    "insertText": "IterateSubList()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FindFirstChildOfType()",
    "kind": "Method",
    "detail": "Function (template<T> TViewModelPtr<T>)",
    "insertText": "FindFirstChildOfType()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  },
  {
    "label": "FViewModelHierarchyOperation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewModelHierarchyOperation(const TSharedPtr<FSharedViewModelData>& InSharedData)"
  },
  {
    "label": "FViewModelHierarchyOperation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewModelHierarchyOperation()"
  },
  {
    "label": "PreHierarchicalChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreHierarchicalChange(const TSharedPtr<FViewModel>& InChangedNode)"
  }
]