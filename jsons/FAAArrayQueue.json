[
  {
    "label": "FAAArrayQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAAArrayQueue"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Node"
  },
  {
    "label": "EnqueueHazard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnqueueHazard"
  },
  {
    "label": "DequeueHazard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DequeueHazard"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (# ifndef _FAA_ARRAY_QUEUE_HP_H_ # define _FAA_ARRAY_QUEUE_HP_H_ # include<atomic> # include \" HazardPointer . h \" template<T> class FAAArrayQueue { long BUFFER_SIZE = 1 0 2 4 ; private : struct Node { std::atomic<int> deqidx ; std::atomic<T*> items [ BUFFER_SIZE ] ; std::atomic<int> enqidx ; std::atomic<Node*> next ;)",
    "insertText": "Node(T* item)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (0 },enqidx { 1 },next { nullptr } { items [ 0 ] .)",
    "insertText": "store(item, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (items [ i ] .)",
    "insertText": "store(nullptr, std::memory_order_relaxed)"
  },
  {
    "label": "casNext()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "casNext(Node *cmp, Node *val)"
  },
  {
    "label": "casTail()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "casTail(Node *cmp, Node *val)"
  },
  {
    "label": "casHead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "casHead(Node *cmp, Node *val)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE * 2)"
  },
  {
    "label": "GetTakenPointer()",
    "kind": "Method",
    "detail": "Function (FHazardPointerCollection Hazards ; T*)",
    "insertText": "GetTakenPointer()"
  },
  {
    "label": "FAAArrayQueue()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FAAArrayQueue()"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (Node* sentinelNode = new)",
    "insertText": "Node(nullptr)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (sentinelNode -> enqidx .)",
    "insertText": "store(0, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (head .)",
    "insertText": "store(sentinelNode, std::memory_order_relaxed)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (delete head .)",
    "insertText": "load()"
  },
  {
    "label": "EnqueueHazard()",
    "kind": "Method",
    "detail": "Function (} class EnqueueHazard : private THazardPointer<Node,true> { class FAAArrayQueue<T> ;)",
    "insertText": "EnqueueHazard(std::atomic<Node*>& Hazard, FHazardPointerCollection& Collection) : THazardPointer<Node, true>(Hazard, Collection)"
  },
  {
    "label": "EnqueueHazard()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "EnqueueHazard()"
  },
  {
    "label": "EnqueueHazard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueHazard(EnqueueHazard&& Hazard) : THazardPointer<Node, true>(MoveTemp(Hazard))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EnqueueHazard&)",
    "insertText": "operator(EnqueueHazard&& Other)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (static_cast<THazardPointer<Node,)",
    "insertText": "true(*this) = MoveTemp(Other)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Node* ltail = Hazard .)",
    "insertText": "Get()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (const int idx = ltail -> enqidx .)",
    "insertText": "fetch_add(1)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (Node* newNode = new)",
    "insertText": "Node(item)"
  },
  {
    "label": "casTail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "casTail(ltail, newNode)"
  },
  {
    "label": "Retire()",
    "kind": "Method",
    "detail": "Function (Hazard .)",
    "insertText": "Retire()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} continue ; } T* itemnull = nullptr ;)",
    "insertText": "if(ltail->items[idx].compare_exchange_strong(itemnull, item))"
  },
  {
    "label": "enqueueInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enqueueInternal(item, Hazard)"
  },
  {
    "label": "enqueue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "enqueue(T* item)"
  },
  {
    "label": "Hazard()",
    "kind": "Method",
    "detail": "Function (THazardPointer<Node>)",
    "insertText": "Hazard(tail, Hazards)"
  },
  {
    "label": "DequeueHazard()",
    "kind": "Method",
    "detail": "Function (} class DequeueHazard : private THazardPointer<Node,true> { class FAAArrayQueue<T> ;)",
    "insertText": "DequeueHazard(std::atomic<Node*>& Hazard, FHazardPointerCollection& Collection) : THazardPointer<Node, true>(Hazard, Collection)"
  },
  {
    "label": "DequeueHazard()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DequeueHazard()"
  },
  {
    "label": "DequeueHazard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DequeueHazard(DequeueHazard&& Hazard) : THazardPointer<Node, true>(MoveTemp(Hazard))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DequeueHazard&)",
    "insertText": "operator(DequeueHazard&& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(casHead(lhead, lnext))"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (Hazards .)",
    "insertText": "Delete(lhead)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (} continue ; } T* item = lhead -> items [ idx ] .)",
    "insertText": "exchange(GetTakenPointer())"
  },
  {
    "label": "getHeadHazard()",
    "kind": "Method",
    "detail": "Function (} DequeueHazard)",
    "insertText": "getHeadHazard()"
  },
  {
    "label": "Hazard()",
    "kind": "Method",
    "detail": "Function (THazardPointer<Node>)",
    "insertText": "Hazard(head, Hazards)"
  }
]