[
  {
    "label": "FAudioMixerEffectsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioMixerEffectsManager"
  },
  {
    "label": "FAudioMixerEffectsManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioEffect . h \" # include \" Curves / CurveFloat . h \" # include \" Sound / SoundEffectSubmix . h \" namespace Audio { class FAudioMixerEffectsManager : public FAudioEffectsManager { public :)",
    "insertText": "FAudioMixerEffectsManager(FAudioDevice* InDevice)"
  },
  {
    "label": "FAudioMixerEffectsManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAudioMixerEffectsManager()"
  },
  {
    "label": "SetReverbEffectParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReverbEffectParameters(const FAudioEffectParameters& InEffectParameters)"
  },
  {
    "label": "SetEQEffectParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEQEffectParameters(const FAudioEffectParameters& InEffectParameters)"
  },
  {
    "label": "SetRadioEffectParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadioEffectParameters(const FAudioEffectParameters& InEffectParameters)"
  }
]