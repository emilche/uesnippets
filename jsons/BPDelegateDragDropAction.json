[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "FEdGraphSchemaAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphSchemaAction"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "FNodeConstructionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeConstructionParams"
  },
  {
    "label": "TNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNode"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BPVariableDragDropAction . h \" # include \" BlueprintEditor . h \" # include \" Containers / UnrealString . h \" # include \" EdGraphSchema_K2_Actions . h \" # include \" GraphEditorDragDropAction . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" # include \" MyBlueprintItemDragDropAction . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class SWidget ; class UEdGraph ; struct FEdGraphSchemaAction ; class FKismetDelegateDragDropAction : public FKismetVariableDragDropAction { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FKismetDelegateDragDropAction, FKismetVariableDragDropAction) virtual void HoverTargetChanged()"
  },
  {
    "label": "HoverTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HoverTargetChanged()"
  },
  {
    "label": "DroppedOnPin()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "DroppedOnPin(FVector2D ScreenPosition, FVector2D GraphPosition)"
  },
  {
    "label": "DroppedOnNode()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "DroppedOnNode(FVector2D ScreenPosition, FVector2D GraphPosition)"
  },
  {
    "label": "DroppedOnPanel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "DroppedOnPanel(const TSharedRef< SWidget >& Panel, FVector2D ScreenPosition, FVector2D GraphPosition, UEdGraph& Graph)"
  },
  {
    "label": "IsSupportedBySchema()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedBySchema(const class UEdGraphSchema* Schema)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FKismetDelegateDragDropAction>)",
    "insertText": "New(TSharedPtr<FEdGraphSchemaAction> InSourceAction, FName InVariableName, UStruct* InSource, FNodeCreationAnalytic AnalyticCallback)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FKismetDelegateDragDropAction> Operation =)",
    "insertText": "MakeShareable(new FKismetDelegateDragDropAction)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Operation -> SourceAction = InSourceAction ; Operation -> VariableName = InVariableName ; Operation -> VariableSource = InSource ; Operation -> AnalyticCallback = AnalyticCallback ; Operation ->)",
    "insertText": "Construct()"
  },
  {
    "label": "TNode()",
    "kind": "Method",
    "detail": "Function (TNode* Node = NewObject<)",
    "insertText": "TNode()"
  },
  {
    "label": "TNode()",
    "kind": "Method",
    "detail": "Function (FEdGraphSchemaAction_K2NewNode::SpawnNode<)",
    "insertText": "TNode(Params.Graph, Params.GraphPosition, EK2NewNodeFlags::SelectNewNode, [&Params](TNode* NewInstance) { NewInstance->SetFromProperty(Params.Property, Params.bSelfContext, Params.Property->GetOwnerClass()); })"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (Params . AnalyticCallback .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "MakeEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeEvent(FNodeConstructionParams Params)"
  },
  {
    "label": "AssignEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignEvent(FNodeConstructionParams Params)"
  },
  {
    "label": "FKismetDelegateDragDropAction()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FKismetDelegateDragDropAction()"
  }
]