[
  {
    "label": "UAnimSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSet"
  },
  {
    "label": "FAnimPerturbationError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPerturbationError"
  },
  {
    "label": "EConvertToAdditive",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConvertToAdditive"
  },
  {
    "label": "FAnimationUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationUtils"
  },
  {
    "label": "AnimationKeyFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AnimationKeyFormat"
  },
  {
    "label": "AnimationCompressionFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AnimationCompressionFormat"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAnimNotify, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAnimMontage, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAnimMarkerSync, Warning, All)"
  },
  {
    "label": "BuildComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildComponentSpaceTransform(FTransform& OutTransform,\n\t\t\t\t\t\t\t\t\t\t\t\tint32 BoneIndex,\n\t\t\t\t\t\t\t\t\t\t\t\tconst TArray<FTransform>& BoneSpaceTransforms,\n\t\t\t\t\t\t\t\t\t\t\t\tconst TArray<FBoneData>& BoneData)"
  },
  {
    "label": "BuildSkeletonMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSkeletonMetaData(USkeleton* Skeleton, TArray<FBoneData>& OutBoneData)"
  },
  {
    "label": "GetAnimTrackIndexForSkeletonBone()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAnimTrackIndexForSkeletonBone(const int32 InSkeletonBoneIndex, const TArray<FTrackToSkeletonMap>& TrackToSkelMap)"
  },
  {
    "label": "ComputeCompressionError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCompressionError(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& CompressedData, AnimationErrorStats& ErrorStats)"
  },
  {
    "label": "GetForcedRecompressionSetting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForcedRecompressionSetting()"
  },
  {
    "label": "GetAnimationKeyFormatString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAnimationKeyFormatString(enum AnimationKeyFormat InFormat)"
  },
  {
    "label": "GetAnimationCompressionFormatString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAnimationCompressionFormatString(enum AnimationCompressionFormat InFormat)"
  },
  {
    "label": "CalculateTrackHeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTrackHeights(const FCompressibleAnimData& CompressibleAnimData, int NumTracks, TArray<int32>& TrackHeights)"
  },
  {
    "label": "HasUniformKeySpacing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUniformKeySpacing(int32 NumFrames, const TArray<float>& Times)"
  },
  {
    "label": "TallyErrorsFromPerturbation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TallyErrorsFromPerturbation(\n\t\tconst FCompressibleAnimData& CompressibleAnimData,\n\t\tint32 NumTracks,\n\t\tconst FVector& PositionNudge,\n\t\tconst FQuat& RotationNudge,\n\t\tconst FVector& ScaleNudge,\n\t\tTArray<FAnimPerturbationError>& InducedErrors)"
  },
  {
    "label": "PreloadCompressionSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadCompressionSettings()"
  },
  {
    "label": "EnsureAnimSequenceLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureAnimSequenceLoaded(UAnimSequence& AnimSeq)"
  },
  {
    "label": "ExtractTransformForFrameFromTrackSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractTransformForFrameFromTrackSafe(const FRawAnimSequenceTrack& RawTrack, int32 Frame, FTransform& OutAtom)"
  },
  {
    "label": "ExtractTransformForFrameFromTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractTransformForFrameFromTrack(const FRawAnimSequenceTrack& RawTrack, int32 Frame, FTransform& OutAtom)"
  },
  {
    "label": "ExtractTransformFromTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractTransformFromTrack(float Time, int32 NumFrames, float SequenceLength, const struct FRawAnimSequenceTrack& RawTrack, EAnimInterpolationType Interpolation, FTransform &OutAtom)"
  },
  {
    "label": "ExtractTransformFromTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractTransformFromTrack(const struct FRawAnimSequenceTrack& RawTrack, double Time, int32 NumFrames, double SequenceLength, EAnimInterpolationType Interpolation, FTransform &OutAtom)"
  },
  {
    "label": "ExtractTransformFromCompressionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractTransformFromCompressionData(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& CompressedAnimData, float Time, int32 TrackIndex, bool bUseRawData, FTransform& OutBoneTransform)"
  },
  {
    "label": "ExtractTransformFromCompressionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractTransformFromCompressionData(const FCompressibleAnimData& CompressibleAnimData, FCompressibleAnimDataResult& CompressedAnimData, double Time, int32 TrackIndex, bool bUseRawData, FTransform& OutBoneTransform)"
  },
  {
    "label": "CompressAnimBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressAnimBones(FCompressibleAnimData& AnimSeq, FCompressibleAnimDataResult& Target)"
  },
  {
    "label": "CompressAnimCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressAnimCurves(FCompressibleAnimData& AnimSeq, FCompressedAnimSequence& Target)"
  }
]