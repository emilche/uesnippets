[
  {
    "label": "MakeTemporaryArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Materials / MaterialIRCommon . h \" # include \" MaterialShared . h \" # if WITH_EDITOR template<T> TArrayView<T>)",
    "insertText": "MakeTemporaryArray(FMemMark&, int Count)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "Ptr(T*)FMemStack::Get().Alloc(sizeof(T) * Count, alignof(T))"
  },
  {
    "label": "NextMaterialAttributeInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextMaterialAttributeInput(UMaterial* BaseMaterial, int32& PropertyIndex, FMaterialInputDescription& Input)"
  },
  {
    "label": "CreateMaterialAttributeDefaultValue()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "CreateMaterialAttributeDefaultValue(FEmitter& Emitter, const UMaterial* Material, EMaterialProperty Property)"
  },
  {
    "label": "TextureMaterialValueTypeToParameterType()",
    "kind": "Method",
    "detail": "Function (EMaterialTextureParameterType)",
    "insertText": "TextureMaterialValueTypeToParameterType(EMaterialValueType Type)"
  },
  {
    "label": "GetInputValue()",
    "kind": "Method",
    "detail": "Function (FValue*)",
    "insertText": "GetInputValue(FMaterialIRModuleBuilderImpl* Builder, const FExpressionInput* Input)"
  },
  {
    "label": "SetInputValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputValue(FMaterialIRModuleBuilderImpl* Builder, const FExpressionInput* Input, FValue* Value)"
  },
  {
    "label": "SetOutputValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputValue(FMaterialIRModuleBuilderImpl* Builder, const FExpressionOutput* Output, FValue* Value)"
  }
]