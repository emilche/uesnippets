[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_CXX17_BACKPORTS_H_ # define CEF_INCLUDE_BASE_CEF_CXX17_BACKPORTS_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (template<Container> auto)",
    "insertText": "size(const Container& c) -> decltype(c.size())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> size_t)",
    "insertText": "size(const T (&array)[N])"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> bool)",
    "insertText": "empty(const T (&array)[N])"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} template<Container> auto)",
    "insertText": "data(Container& c) -> decltype(c.data())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} template<CharT,Traits,Allocator> CharT*)",
    "insertText": "data(std::basic_string<CharT, Traits, Allocator>& str)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} template<Container> auto)",
    "insertText": "data(const Container& c) -> decltype(c.data())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> T*)",
    "insertText": "data(T (&array)[N])"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> T*)",
    "insertText": "data(std::array<T, N>& array)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> const T*)",
    "insertText": "data(const std::array<T, N>& array)"
  }
]