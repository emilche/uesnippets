[
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "SAnimCurvePicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimCurvePicker"
  },
  {
    "label": "SAnimCurvePicker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Animation / SmartName . h \" # include \" Widgets / Input / SSearchBox . h \" # include \" PersonaDelegates . h \" class IEditableSkeleton ; class SAnimCurvePicker : public SCompoundWidget { public : ~)",
    "insertText": "SAnimCurvePicker()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimCurvePicker)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnCurvePicked, OnCurvePicked) SLATE_EVENT(FIsCurveNameMarkedForExclusion, IsCurveNameMarkedForExclusion) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const USkeleton* InSkeleton)"
  },
  {
    "label": "RefreshListItems()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RefreshListItems()"
  },
  {
    "label": "FilterAvailableCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterAvailableCurves()"
  },
  {
    "label": "HandleSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectionChanged(TSharedPtr<FName> InItem, ESelectInfo::Type InSelectionType)"
  },
  {
    "label": "HandleGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateRow(TSharedPtr<FName> InItem, const TSharedRef<STableViewBase>& InOwnerTable)"
  },
  {
    "label": "HandleFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFilterTextChanged(const FText& InFilterText)"
  }
]