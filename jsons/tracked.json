[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Tracked",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tracked"
  },
  {
    "label": "Tracked()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_TRACKED_H_ # define ABSL_CONTAINER_INTERNAL_TRACKED_H_ # include<stddef . h> # include<memory> # include<utility> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class T> class Tracked { public :)",
    "insertText": "Tracked()"
  },
  {
    "label": "Tracked()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Tracked(const T& val) : val_(val)"
  },
  {
    "label": "Tracked()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Tracked(const Tracked& that) : val_(that.val_), num_moves_(that.num_moves_), num_copies_(that.num_copies_)"
  },
  {
    "label": "Tracked()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Tracked(Tracked&& that) : val_(std::move(that.val_)), num_moves_(std::move(that.num_moves_)), num_copies_(std::move(that.num_copies_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Tracked&)",
    "insertText": "operator(const Tracked& that)"
  },
  {
    "label": "num_copies_()",
    "kind": "Method",
    "detail": "Function (val_ = that . val_ ; num_moves_ = that . num_moves_ ; num_copies_ = that .)",
    "insertText": "num_copies_(*num_copies_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Tracked&)",
    "insertText": "operator(Tracked&& that)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (val_ =)",
    "insertText": "move(that.val_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (num_moves_ =)",
    "insertText": "move(that.num_moves_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (num_copies_ =)",
    "insertText": "move(that.num_copies_)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "val()"
  },
  {
    "label": "num_copies()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "num_copies()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<size_t> num_copies_ = std::make_shared<)",
    "insertText": "size_t(0)"
  }
]