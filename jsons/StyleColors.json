[
  {
    "label": "FSlateColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateColor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStyleColorList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStyleColorList"
  },
  {
    "label": "FStyleTheme",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStyleTheme"
  },
  {
    "label": "USlateThemeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateThemeManager"
  },
  {
    "label": "FStyleColors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStyleColors"
  },
  {
    "label": "COLOR()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / Guid . h \" # include \" SlateColor . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" StyleColors . generated . h \" struct FSlateColor ; # define ALLOW_THEMES WITH_EDITOR | | IS_PROGRAM # define)",
    "insertText": "COLOR(HexValue ) FLinearColor::FromSRGBColor(FColor::FromHex(HexValue)) UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Black,Background,Title,WindowBorder,Foldout,Input,InputOutline,Recessed,Panel,Header,Dropdown,DropdownOutline,Hover,Hover2,White,White25,Highlight,Primary,PrimaryHover,PrimaryPress,Secondary,Foreground,ForegroundHover,ForegroundInverted,ForegroundHeader,Select,SelectInactive,SelectParent,SelectHover,Notifications,AccentBlue,AccentPurple,AccentPink,AccentRed,AccentOrange,AccentYellow,AccentGreen,AccentBrown,AccentBlack,AccentGray,AccentWhite,AccentFolder,Warning,Error,Success,User1,User2,User3,User4,User5,User6,User7,User8,User9,User10,User11,User12,User13,User14,User15,User16,MAX } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Config, Category = Colors) FLinearColor StyleColors[(int32)"
  },
  {
    "label": "DisplayNames()",
    "kind": "Method",
    "detail": "Function (FLinearColor::Transparent } ; FText)",
    "insertText": "DisplayNames(int32)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FText DisplayName ; FString Filename ; TArray<FLinearColor> LoadedDefaultColors ; bool)",
    "insertText": "operator(const FStyleTheme& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static USlateThemeManager& Get()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (} const FLinearColor&)",
    "insertText": "GetColor(EStyleColor Color)"
  },
  {
    "label": "GetCurrentThemeID()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetCurrentThemeID()"
  },
  {
    "label": "InitalizeDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitalizeDefaults()"
  },
  {
    "label": "SetDefaultColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultColor(EStyleColor InColorId, FLinearColor InColor)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_THEMES DefaultColors [ static_cast<)",
    "insertText": "int32(InColorId)"
  },
  {
    "label": "SetColorDisplayName()",
    "kind": "Method",
    "detail": "Function (# endif } # if ALLOW_THEMES void)",
    "insertText": "SetColorDisplayName(EStyleColor InColorId, FText DisplayName)"
  },
  {
    "label": "GetColorDisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetColorDisplayName(EStyleColor InColorId)"
  },
  {
    "label": "LoadThemes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadThemes()"
  },
  {
    "label": "SaveCurrentThemeAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentThemeAs(const FString& Filename)"
  },
  {
    "label": "ApplyTheme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTheme(FGuid ThemeId)"
  },
  {
    "label": "ApplyDefaultTheme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDefaultTheme()"
  },
  {
    "label": "IsEngineTheme()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEngineTheme()"
  },
  {
    "label": "IsProjectTheme()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProjectTheme()"
  },
  {
    "label": "RemoveTheme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTheme(FGuid ThemeId)"
  },
  {
    "label": "DuplicateActiveTheme()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "DuplicateActiveTheme()"
  },
  {
    "label": "SetCurrentThemeDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThemeDisplayName(FText NewDisplayName)"
  },
  {
    "label": "GetCurrentTheme()",
    "kind": "Method",
    "detail": "Function (const FStyleTheme&)",
    "insertText": "GetCurrentTheme()"
  },
  {
    "label": "GetThemes()",
    "kind": "Method",
    "detail": "Function (} const TArray<FStyleTheme>&)",
    "insertText": "GetThemes()"
  },
  {
    "label": "ValidateActiveTheme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateActiveTheme()"
  },
  {
    "label": "GetEngineThemeDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEngineThemeDir()"
  },
  {
    "label": "GetProjectThemeDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectThemeDir()"
  },
  {
    "label": "GetUserThemeDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUserThemeDir()"
  },
  {
    "label": "DoesThemeExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesThemeExist(const FGuid& ThemeID)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(USlateThemeManager, FThemeChangedEvent, FGuid)"
  },
  {
    "label": "OnThemeChanged()",
    "kind": "Method",
    "detail": "Function (FThemeChangedEvent&)",
    "insertText": "OnThemeChanged()"
  },
  {
    "label": "LoadThemesFromDirectory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadThemesFromDirectory(const FString& Directory)"
  },
  {
    "label": "ReadTheme()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadTheme(const FString& ThemeData, FStyleTheme& OutTheme)"
  },
  {
    "label": "EnsureValidCurrentTheme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureValidCurrentTheme()"
  },
  {
    "label": "LoadThemeColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadThemeColors(FStyleTheme& Theme)"
  },
  {
    "label": "DefaultColors()",
    "kind": "Method",
    "detail": "Function (private : FStyleTheme DefaultDarkTheme ; TArray<FStyleTheme> Themes ; FLinearColor)",
    "insertText": "DefaultColors(int32)"
  },
  {
    "label": "GetDefaultColor()",
    "kind": "Method",
    "detail": "Function (FThemeChangedEvent ThemeChangedEvent ; # endif FLinearColor)",
    "insertText": "GetDefaultColor(EStyleColor InColorId)"
  }
]