[
  {
    "label": "VP9Common",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9Common"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_ENTROPY_H_ # define VPX_VP9_COMMON_VP9_ENTROPY_H_ # include \" vpx / vpx_integer . h \" # include \" vpx_dsp / prob . h \" # include \" vp9 / common / vp9_common . h \" # include \" vp9 / common / vp9_enums . h \" # ifdef __cplusplus \" C \" { # endif # define DIFF_UPDATE_PROB 2 5 2 # define ZERO_TOKEN 0 # define ONE_TOKEN 1 # define TWO_TOKEN 2 # define THREE_TOKEN 3 # define FOUR_TOKEN 4 # define CATEGORY1_TOKEN 5 # define CATEGORY2_TOKEN 6 # define CATEGORY3_TOKEN 7 # define CATEGORY4_TOKEN 8 # define CATEGORY5_TOKEN 9 # define CATEGORY6_TOKEN 1 0 # define EOB_TOKEN 1 1 # define ENTROPY_TOKENS 1 2 # define ENTROPY_NODES 1 1)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_pt_energy_class[ENTROPY_TOKENS])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# define CAT1_MIN_VAL 5 # define CAT2_MIN_VAL 7 # define CAT3_MIN_VAL 1 1 # define CAT4_MIN_VAL 1 9 # define CAT5_MIN_VAL 3 5 # define CAT6_MIN_VAL 6 7)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat1_prob[1])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat2_prob[2])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat3_prob[3])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat4_prob[4])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat5_prob[5])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat6_prob[14])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat1_prob_high10[1])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat2_prob_high10[2])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat3_prob_high10[3])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat4_prob_high10[4])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat5_prob_high10[5])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat6_prob_high10[16])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat1_prob_high12[1])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat2_prob_high12[2])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat3_prob_high12[3])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat4_prob_high12[4])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat5_prob_high12[5])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_cat6_prob_high12[18])"
  },
  {
    "label": "BAND_COEFF_CONTEXTS()",
    "kind": "Method",
    "detail": "Function (# endif # define EOB_MODEL_TOKEN 3 # define DCT_MAX_VALUE 1 6 3 8 4 # if CONFIG_VP9_HIGHBITDEPTH # define DCT_MAX_VALUE_HIGH10 6 5 5 3 6 # define DCT_MAX_VALUE_HIGH12 2 6 2 1 4 4 # endif # define REF_TYPES 2 # define COEF_BANDS 6 # define COEFF_CONTEXTS 6 # define)",
    "insertText": "BAND_COEFF_CONTEXTS(band) ((band) == 0 ? 3 : COEFF_CONTEXTS)"
  },
  {
    "label": "vp9_default_coef_probs()",
    "kind": "Method",
    "detail": "Function (typedef unsigned int vp9_coeff_stats [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] [ ENTROPY_NODES ] [ 2 ] ; # define SUBEXP_PARAM 4 # define MODULUS_PARAM 1 3 struct VP9Common ; void)",
    "insertText": "vp9_default_coef_probs(struct VP9Common *cm)"
  },
  {
    "label": "vp9_adapt_coef_probs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_adapt_coef_probs(struct VP9Common *cm)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# define MAXBAND_INDEX 2 1)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_coefband_trans_8x8plus[1024])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vp9_coefband_trans_4x4[16])"
  },
  {
    "label": "get_band_translate()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "get_band_translate(TX_SIZE tx_size)"
  },
  {
    "label": "vp9_model_to_full_probs()",
    "kind": "Method",
    "detail": "Function (const vpx_prob vp9_pareto8_full [ COEFF_PROB_MODELS ] [ MODEL_NODES ] ; typedef vpx_prob vp9_coeff_probs_model [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] ; typedef unsigned int vp9_coeff_count_model [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES + 1 ] ; void)",
    "insertText": "vp9_model_to_full_probs(const vpx_prob *model, vpx_prob *full)"
  },
  {
    "label": "combine_entropy_contexts()",
    "kind": "Method",
    "detail": "Function (typedef char ENTROPY_CONTEXT ; int)",
    "insertText": "combine_entropy_contexts(ENTROPY_CONTEXT a, ENTROPY_CONTEXT b)"
  },
  {
    "label": "get_entropy_context()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "get_entropy_context(TX_SIZE tx_size, const ENTROPY_CONTEXT *a, const ENTROPY_CONTEXT *l)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (ENTROPY_CONTEXT above_ec = 0,left_ec = 0 ;)",
    "insertText": "switch(tx_size)"
  },
  {
    "label": "left_ec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "left_ec(const uint16_t *)"
  },
  {
    "label": "above_ec()",
    "kind": "Method",
    "detail": "Function (break ; case TX_16X16 :)",
    "insertText": "above_ec(const uint32_t *)"
  },
  {
    "label": "left_ec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "left_ec(const uint32_t *)"
  },
  {
    "label": "above_ec()",
    "kind": "Method",
    "detail": "Function (break ; case TX_32X32 :)",
    "insertText": "above_ec(const uint64_t *)"
  },
  {
    "label": "left_ec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "left_ec(const uint64_t *)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "assert(0 && \"Invalid transform size.\")"
  },
  {
    "label": "combine_entropy_contexts()",
    "kind": "Method",
    "detail": "Function (break ; } return)",
    "insertText": "combine_entropy_contexts(above_ec, left_ec)"
  }
]