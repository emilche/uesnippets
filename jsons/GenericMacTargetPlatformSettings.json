[
  {
    "label": "TGenericMacTargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericMacTargetPlatformSettings"
  },
  {
    "label": "FStaticMeshLODSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODSettings"
  },
  {
    "label": "TGenericMacTargetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / TargetPlatformSettingsBase . h \" # include \" Mac / MacPlatformProperties . h \" # if WITH_ENGINE # include \" TextureResource . h \" # include \" StaticMeshResources . h \" # endif # define LOCTEXT_NAMESPACE \" TGenericMacTargetPlatformSettings \" template<bool HAS_EDITOR_DATA,bool IS_DEDICATED_SERVER,bool IS_CLIENT_ONLY> class TGenericMacTargetPlatformSettings : public TTargetPlatformSettingsBase<FMacPlatformProperties<HAS_EDITOR_DATA,IS_DEDICATED_SERVER,IS_CLIENT_ONLY>> { public : typedef FMacPlatformProperties<HAS_EDITOR_DATA,IS_DEDICATED_SERVER,IS_CLIENT_ONLY> TProperties ; typedef TTargetPlatformSettingsBase<TProperties> TSuper ;)",
    "insertText": "TGenericMacTargetPlatformSettings()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE TextureLODSettings = nullptr ; StaticMeshLODSettings .)",
    "insertText": "Initialize(this)"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (# endif } public : bool)",
    "insertText": "SupportsFeature(ETargetPlatformFeatures Feature)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Feature == ETargetPlatformFeatures::CanCookPackages)"
  },
  {
    "label": "GetAllPossibleShaderFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllPossibleShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "NAME_SF_METAL_SM5()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_SF_METAL_SM5(TEXT(\"SF_METAL_SM5\"))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_SF_METAL_SM5)"
  },
  {
    "label": "NAME_SF_METAL_SM6()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_SF_METAL_SM6(TEXT(\"SF_METAL_SM6\"))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_SF_METAL_SM6)"
  },
  {
    "label": "NAME_SF_METAL_MACES3_1()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_SF_METAL_MACES3_1(TEXT(\"SF_METAL_MACES3_1\"))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_SF_METAL_MACES3_1)"
  },
  {
    "label": "NAME_SF_METAL_MRT_MAC()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_SF_METAL_MRT_MAC(TEXT(\"SF_METAL_MRT_MAC\"))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_SF_METAL_MRT_MAC)"
  },
  {
    "label": "GetAllTargetedShaderFormats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllTargetedShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString> TargetedShaderFormats ; GConfig ->)",
    "insertText": "GetArray(TEXT(\"/Script/MacTargetPlatform.MacTargetSettings\"), TEXT(\"TargetedRHIs\"), TargetedShaderFormats, GEngineIni)"
  },
  {
    "label": "GetAllPossibleShaderFormats()",
    "kind": "Method",
    "detail": "Function (TArray<FName> PossibleShaderFormats ;)",
    "insertText": "GetAllPossibleShaderFormats(PossibleShaderFormats)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString ShaderFormat = TargetedShaderFormats [ ShaderFormatIdx ] ;)",
    "insertText": "if(PossibleShaderFormats.Contains(FName(*ShaderFormat)) == false)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (TargetedShaderFormats .)",
    "insertText": "RemoveAt(ShaderFormatIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const FString& ShaderFormat : TargetedShaderFormats)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(FName(*ShaderFormat))"
  },
  {
    "label": "GetStaticMeshLODSettings()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_ENGINE const class FStaticMeshLODSettings&)",
    "insertText": "GetStaticMeshLODSettings()"
  },
  {
    "label": "SupportsRayTracing()",
    "kind": "Method",
    "detail": "Function (TextureLODSettings = InTextureLODSettings ; } # endif bool)",
    "insertText": "SupportsRayTracing()"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool bEnableRayTracing = false ; GConfig ->)",
    "insertText": "GetBool(TEXT(\"/Script/MacTargetPlatform.MacTargetSettings\"), TEXT(\"bEnableRayTracing\"), bEnableRayTracing, GEngineIni)"
  }
]