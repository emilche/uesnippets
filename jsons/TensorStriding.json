[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorStridingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorStridingOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorStridingOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_STRIDING_H # define EIGEN_CXX11_TENSOR_TENSOR_STRIDING_H namespace Eigen { namespace internal { template<Strides,XprType> struct traits<TensorStridingOp<Strides,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<Strides,XprType> struct eval<TensorStridingOp<Strides,XprType>,Eigen::Dense> { typedef const TensorStridingOp<Strides,XprType> EIGEN_DEVICE_REF type ; } ; template<Strides,XprType> struct nested<TensorStridingOp<Strides,XprType>,1,eval<TensorStridingOp<Strides,XprType>>::type> { typedef TensorStridingOp<Strides,XprType> type ; } ; } template<Strides,XprType> class TensorStridingOp : public TensorBase<TensorStridingOp<Strides,XprType>> { public : typedef TensorBase<TensorStridingOp<Strides,XprType>> Base ; typedef Eigen::internal::traits<TensorStridingOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorStridingOp>::type Nested ; typedef Eigen::internal::traits<TensorStridingOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorStridingOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorStridingOp(const XprType& expr, const Strides& dims) : m_xpr(expr), m_dims(dims)"
  },
  {
    "label": "strides()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Strides&)",
    "insertText": "strides()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (const Strides m_dims ; } ; template<Strides,ArgType,Device> struct TensorEvaluator<const TensorStridingOp<Strides,ArgType>,Device> { typedef TensorStridingOp<Strides,ArgType> XprType ; typedef XprType::Index Index ; const int NumDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; typedef DSizes<Index,NumDims> Dimensions ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = false,PreferBlockAccess = TensorEvaluator<ArgType,Device>::PreferBlockAccess,Layout = TensorEvaluator<ArgType,Device>::Layout,CoordAccess = false,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_dimensions = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = Eigen::)",
    "insertText": "ceil(static_cast<float>(m_dimensions[i]) / op.strides()[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ 0 ] = 1 ; m_inputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { m_outputStrides [ NumDims - 1 ] = 1 ; m_inputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index inputIndices [ ] = { 0,0 } ; Index indices [ ] = { index,index + PacketSize - 1 } ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i > 0; --i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index idx0 = indices [ 0 ] / m_outputStrides [ i ] ; const Index idx1 = indices [ 1 ] / m_outputStrides [ i ] ; inputIndices [ 0 ] + = idx0* m_inputStrides [ i ] ; inputIndices [ 1 ] + = idx1* m_inputStrides [ i ] ; indices [ 0 ] - = idx0* m_outputStrides [ i ] ; indices [ 1 ] - = idx1* m_outputStrides [ i ] ; } inputIndices [ 0 ] + = indices [ 0 ]* m_inputStrides [ 0 ] ; inputIndices [ 1 ] + = indices [ 1 ]* m_inputStrides [ 0 ] ; } else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx0 = indices [ 0 ] / m_outputStrides [ i ] ; const Index idx1 = indices [ 1 ] / m_outputStrides [ i ] ; inputIndices [ 0 ] + = idx0* m_inputStrides [ i ] ; inputIndices [ 1 ] + = idx1* m_inputStrides [ i ] ; indices [ 0 ] - = idx0* m_outputStrides [ i ] ; indices [ 1 ] - = idx1* m_outputStrides [ i ] ; } inputIndices [ 0 ] + = indices [ 0 ]* m_inputStrides [ NumDims - 1 ] ; inputIndices [ 1 ] + = indices [ 1 ]* m_inputStrides [ NumDims - 1 ] ; })",
    "insertText": "if(inputIndices[1] - inputIndices[0] == PacketSize - 1)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (PacketReturnType rslt = m_impl . template packet<)",
    "insertText": "Unaligned(inputIndices[0])"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ PacketSize - 1 ] = m_impl .)",
    "insertText": "coeff(inputIndices[1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 1; i < PacketSize-1; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "innerDim()",
    "kind": "Method",
    "detail": "Function (compute_cost* = 2 ; } const int)",
    "insertText": "innerDim(static_cast<int>(Layout) == static_cast<int>(ColMajor)) ? 0 : (NumDims - 1)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Storage::Type)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "srcCoeff()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "srcCoeff(Index index)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_outputStrides [ i ] ; inputIndex + = idx* m_inputStrides [ i ] ; index - = idx* m_outputStrides [ i ] ; } inputIndex + = index* m_inputStrides [ NumDims - 1 ] ; } return inputIndex ; } Dimensions m_dimensions ; array<Index,NumDims> m_outputStrides ; array<Index,NumDims> m_inputStrides ; TensorEvaluator<ArgType,Device> m_impl ; } ; template<Strides,ArgType,Device> struct TensorEvaluator<TensorStridingOp<Strides,ArgType>,Device> : public TensorEvaluator<const TensorStridingOp<Strides,ArgType>,Device> { typedef TensorStridingOp<Strides,ArgType> XprType ; typedef TensorEvaluator<const XprType,Device> Base ; const int NumDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; enum { IsAligned = false,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,PreferBlockAccess = false,Layout = TensorEvaluator<ArgType,Device>::Layout,CoordAccess = false,RawAccess = false } ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < this->dimensions().TotalSize())"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (this -> m_impl . template writePacket<)",
    "insertText": "Unaligned(inputIndices[0], x)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} else { EIGEN_ALIGN_MAX Scalar values [ PacketSize ] ; internal::pstore<Scalar,)",
    "insertText": "PacketReturnType(values, x)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this -> m_impl .)",
    "insertText": "coeffRef(inputIndices[0])"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this -> m_impl .)",
    "insertText": "coeffRef(inputIndices[1])"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "coeffRef(index+i)"
  }
]