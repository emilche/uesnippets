[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "SLogView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLogView"
  },
  {
    "label": "IdColumnName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / ScopeLock . h \" # include \" SlateFwd . h \" # include \" Templates / UniquePtr . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SSearchBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SListView . h \" # include \" InsightsCore / Common / Stopwatch . h \" # include \" Insights / ViewModels / LogFilter . h \" # include \" Insights / ViewModels / LogMessage . h \" class FMenuBuilder ; namespace UE::Insights::TimingProfiler { class STimingView ; } namespace UE::Insights { namespace LogViewColumns { const FName)",
    "insertText": "IdColumnName(TEXT(\"Id\"))"
  },
  {
    "label": "TimeColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TimeColumnName(TEXT(\"Time\"))"
  },
  {
    "label": "VerbosityColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "VerbosityColumnName(TEXT(\"Verbosity\"))"
  },
  {
    "label": "CategoryColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "CategoryColumnName(TEXT(\"Category\"))"
  },
  {
    "label": "MessageColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "MessageColumnName(TEXT(\"Message\"))"
  },
  {
    "label": "FileColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "FileColumnName(TEXT(\"File\"))"
  },
  {
    "label": "LineColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "LineColumnName(TEXT(\"Line\"))"
  },
  {
    "label": "SLogView()",
    "kind": "Method",
    "detail": "Function (} class SLogView : public SCompoundWidget { public :)",
    "insertText": "SLogView()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SLogView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetCache()",
    "kind": "Method",
    "detail": "Function (FLogMessageCache&)",
    "insertText": "GetCache()"
  },
  {
    "label": "SelectLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLogMessage(TSharedPtr<FLogMessage> LogMessage)"
  },
  {
    "label": "SelectLogMessageByLogIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLogMessageByLogIndex(int32 LogIndex)"
  },
  {
    "label": "SelectLogMessageByClosestTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLogMessageByClosestTime(double Time)"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "IsFilteringAsyncTaskCancelRequested()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFilteringAsyncTaskCancelRequested()"
  },
  {
    "label": "OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRow(TSharedPtr<FLogMessage> InLogMessage, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "InitCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCommandList()"
  },
  {
    "label": "OnMouseButtonClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseButtonClick(TSharedPtr<FLogMessage> LogMessage)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(TSharedPtr<FLogMessage> LogMessage, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnSelectedLogMessageChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedLogMessageChanged(TSharedPtr<FLogMessage> LogMessage)"
  },
  {
    "label": "FilterTextBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTextBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterChanged()"
  },
  {
    "label": "UpdateStatsText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsText()"
  },
  {
    "label": "GetStatsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetStatsText()"
  },
  {
    "label": "GetStatsTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetStatsTextColor()"
  },
  {
    "label": "ListView_GetContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ListView_GetContextMenu()"
  },
  {
    "label": "MakeVerbosityThresholdMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeVerbosityThresholdMenu()"
  },
  {
    "label": "CreateVerbosityThresholdMenuSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVerbosityThresholdMenuSection(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "MakeCategoryFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCategoryFilterMenu()"
  },
  {
    "label": "CreateCategoriesFilterMenuSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCategoriesFilterMenuSection(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "VerbosityThreshold_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerbosityThreshold_IsChecked(ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "VerbosityThreshold_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerbosityThreshold_Execute(ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "VerbosityThreshold_GetSuffixGlyph()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "VerbosityThreshold_GetSuffixGlyph(ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "VerbosityThreshold_GetSuffixColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "VerbosityThreshold_GetSuffixColor(ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "ShowHideAllCategories_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowHideAllCategories_IsChecked()"
  },
  {
    "label": "ShowHideAllCategories_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHideAllCategories_Execute()"
  },
  {
    "label": "IsLogCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLogCategoryEnabled(FName InName)"
  },
  {
    "label": "ToggleCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCategory(FName InName)"
  },
  {
    "label": "CanHideSelectedCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHideSelectedCategory()"
  },
  {
    "label": "HideSelectedCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideSelectedCategory()"
  },
  {
    "label": "CanShowOnlySelectedCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanShowOnlySelectedCategory()"
  },
  {
    "label": "ShowOnlySelectedCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOnlySelectedCategory()"
  },
  {
    "label": "CanShowAllCategories()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanShowAllCategories()"
  },
  {
    "label": "ShowAllCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllCategories()"
  },
  {
    "label": "AppendFormatMessageDetailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendFormatMessageDetailed(const FLogMessageRecord& Log, TStringBuilderBase<TCHAR>& InOutStringBuilder)"
  },
  {
    "label": "AppendFormatMessageDelimitedHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendFormatMessageDelimitedHeader(TStringBuilderBase<TCHAR>& InOutStringBuilder, TCHAR Separator = TEXT('\\t'))"
  },
  {
    "label": "AppendFormatMessageDelimited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendFormatMessageDelimited(const FLogMessageRecord& Log, TStringBuilderBase<TCHAR>& InOutStringBuilder, TCHAR Separator = TEXT('\\t'))"
  },
  {
    "label": "CanCopySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopySelected()"
  },
  {
    "label": "CopySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelected()"
  },
  {
    "label": "CanCopyMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyMessage()"
  },
  {
    "label": "CopyMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyMessage()"
  },
  {
    "label": "CanCopyRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyRange()"
  },
  {
    "label": "CopyRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRange()"
  },
  {
    "label": "CanCopyAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyAll()"
  },
  {
    "label": "CopyAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAll()"
  },
  {
    "label": "CanSaveRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSaveRange()"
  },
  {
    "label": "SaveRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveRange()"
  },
  {
    "label": "CanSaveAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSaveAll()"
  },
  {
    "label": "SaveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAll()"
  },
  {
    "label": "SaveLogsToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveLogsToFile(bool bSaveLogsInSelectedRangeOnly)"
  },
  {
    "label": "CanOpenSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenSource()"
  },
  {
    "label": "OpenSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSource()"
  }
]