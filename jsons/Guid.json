[
  {
    "label": "FileSystemAccessManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileSystemAccessManagerImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "GenerateGUID()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_GUID_H_ # define BASE_GUID_H_ # include<stdint . h> # include<iosfwd> # include<string> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / hash / hash . h \" # include \" base / strings / string_piece . h \" # include \" base / types / pass_key . h \" # include \" build / build_config . h \" namespace content { class FileSystemAccessManagerImpl ; } namespace base { BASE_EXPORT std::string)",
    "insertText": "GenerateGUID()"
  },
  {
    "label": "IsValidGUID()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsValidGUID(StringPiece input)"
  },
  {
    "label": "IsValidGUID()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsValidGUID(StringPiece16 input)"
  },
  {
    "label": "IsValidGUIDOutputString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsValidGUIDOutputString(StringPiece input)"
  },
  {
    "label": "RandomDataToGUIDString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "RandomDataToGUIDString(const uint64_t bytes[2])"
  },
  {
    "label": "GenerateRandomV4()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT GUID { public : size_t kGuidV4InputLength = 1 6 ; GUID)",
    "insertText": "GenerateRandomV4()"
  },
  {
    "label": "FormatRandomDataAsV4()",
    "kind": "Method",
    "detail": "Function (GUID)",
    "insertText": "FormatRandomDataAsV4(base::span<const uint8_t, kGuidV4InputLength> input, base::PassKey<content::FileSystemAccessManagerImpl> pass_key)"
  },
  {
    "label": "FormatRandomDataAsV4ForTesting()",
    "kind": "Method",
    "detail": "Function (GUID)",
    "insertText": "FormatRandomDataAsV4ForTesting(base::span<const uint8_t, kGuidV4InputLength> input)"
  },
  {
    "label": "ParseCaseInsensitive()",
    "kind": "Method",
    "detail": "Function (GUID)",
    "insertText": "ParseCaseInsensitive(StringPiece input)"
  },
  {
    "label": "ParseCaseInsensitive()",
    "kind": "Method",
    "detail": "Function (GUID)",
    "insertText": "ParseCaseInsensitive(StringPiece16 input)"
  },
  {
    "label": "ParseLowercase()",
    "kind": "Method",
    "detail": "Function (GUID)",
    "insertText": "ParseLowercase(StringPiece input)"
  },
  {
    "label": "ParseLowercase()",
    "kind": "Method",
    "detail": "Function (GUID)",
    "insertText": "ParseLowercase(StringPiece16 input)"
  },
  {
    "label": "GUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GUID()"
  },
  {
    "label": "GUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GUID(const GUID& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GUID&)",
    "insertText": "operator(const GUID& other)"
  },
  {
    "label": "GUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GUID(GUID&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GUID&)",
    "insertText": "operator(GUID&& other)"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_valid()"
  },
  {
    "label": "AsLowercaseString()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "AsLowercaseString()"
  },
  {
    "label": "FormatRandomDataAsV4Impl()",
    "kind": "Method",
    "detail": "Function (private : GUID)",
    "insertText": "FormatRandomDataAsV4Impl(base::span<const uint8_t, kGuidV4InputLength> input)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::string lowercase_ ; } ; struct BASE_EXPORT GUIDHash { size_t)",
    "insertText": "operator()(const GUID& guid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const GUID& guid)"
  }
]