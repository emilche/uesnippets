[
  {
    "label": "ascii_isalpha()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_ASCII_H_ # define ABSL_STRINGS_ASCII_H_ # include<algorithm> # include<string> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace ascii_internal { ABSL_DLL const unsigned char kPropertyBits [ 2 5 6 ] ; ABSL_DLL const char kToUpper [ 2 5 6 ] ; ABSL_DLL const char kToLower [ 2 5 6 ] ; } bool)",
    "insertText": "ascii_isalpha(unsigned char c)"
  },
  {
    "label": "ascii_isalnum()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ascii_isalnum(unsigned char c)"
  },
  {
    "label": "ascii_isspace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ascii_isspace(unsigned char c)"
  },
  {
    "label": "ascii_ispunct()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ascii_ispunct(unsigned char c)"
  },
  {
    "label": "ascii_isblank()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ascii_isblank(unsigned char c)"
  },
  {
    "label": "ascii_iscntrl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ascii_iscntrl(unsigned char c)"
  },
  {
    "label": "ascii_isxdigit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ascii_isxdigit(unsigned char c)"
  },
  {
    "label": "ascii_isdigit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ascii_isdigit(unsigned char c)"
  },
  {
    "label": "AsciiStrToLower()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::string)",
    "insertText": "AsciiStrToLower(absl::string_view s)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "result(s)"
  },
  {
    "label": "AsciiStrToLower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsciiStrToLower(&result)"
  },
  {
    "label": "AsciiStrToUpper()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT std::string)",
    "insertText": "AsciiStrToUpper(absl::string_view s)"
  },
  {
    "label": "AsciiStrToUpper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsciiStrToUpper(&result)"
  },
  {
    "label": "find_if_not()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "find_if_not(str.begin(), str.end(), absl::ascii_isspace)"
  },
  {
    "label": "StripLeadingAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StripLeadingAsciiWhitespace(std::string* str)"
  },
  {
    "label": "find_if_not()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "find_if_not(str->begin(), str->end(), absl::ascii_isspace)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "erase(str->begin(), it)"
  },
  {
    "label": "StripTrailingAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (} ABSL_MUST_USE_RESULT absl::string_view)",
    "insertText": "StripTrailingAsciiWhitespace(absl::string_view str)"
  },
  {
    "label": "find_if_not()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "find_if_not(str.rbegin(), str.rend(), absl::ascii_isspace)"
  },
  {
    "label": "StripTrailingAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StripTrailingAsciiWhitespace(std::string* str)"
  },
  {
    "label": "find_if_not()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "find_if_not(str->rbegin(), str->rend(), absl::ascii_isspace)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "erase(static_cast<size_t>(str->rend() - it))"
  },
  {
    "label": "StripAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (} ABSL_MUST_USE_RESULT absl::string_view)",
    "insertText": "StripAsciiWhitespace(absl::string_view str)"
  },
  {
    "label": "StripAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StripAsciiWhitespace(std::string* str)"
  },
  {
    "label": "StripTrailingAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripTrailingAsciiWhitespace(str)"
  },
  {
    "label": "StripLeadingAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripLeadingAsciiWhitespace(str)"
  },
  {
    "label": "RemoveExtraAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveExtraAsciiWhitespace(std::string*)"
  }
]