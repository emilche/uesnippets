[
  {
    "label": "_InputIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator1"
  },
  {
    "label": "_InputIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator2"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_BinaryOperation1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryOperation1"
  },
  {
    "label": "_BinaryOperation2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryOperation2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___NUMERIC_INNER_PRODUCT_H # define _LIBCPP___NUMERIC_INNER_PRODUCT_H # include<__config> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIterator1, class _InputIterator2, class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)"
  },
  {
    "label": "inner_product()",
    "kind": "Method",
    "detail": "Function (# else __init = __init +* __first1** __first2 ; # endif return __init ; } template<class _InputIterator1,class _InputIterator2,class _Tp,class _BinaryOperation1,class _BinaryOperation2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _Tp)",
    "insertText": "inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)"
  },
  {
    "label": "__binary_op1()",
    "kind": "Method",
    "detail": "Function (# else __init =)",
    "insertText": "__binary_op1(__init, __binary_op2(*__first1, *__first2))"
  }
]