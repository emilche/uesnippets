[
  {
    "label": "product_type_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_type_selector"
  },
  {
    "label": "product_size_category",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_size_category"
  },
  {
    "label": "product_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_type"
  },
  {
    "label": "gemv_dense_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gemv_dense_selector"
  },
  {
    "label": "gemv_static_vector_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gemv_static_vector_if"
  },
  {
    "label": "EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERAL_PRODUCT_H # define EIGEN_GENERAL_PRODUCT_H namespace Eigen { enum { Large = 2,Small = 3 } ; # ifndef EIGEN_GEMM_TO_COEFFBASED_THRESHOLD # define EIGEN_GEMM_TO_COEFFBASED_THRESHOLD 2 0 # endif namespace internal { template<int Rows,int Cols,int Depth> struct product_type_selector ; template<int Size,int MaxSize> struct product_size_category { enum { # ifndef EIGEN_GPU_COMPILE_PHASE is_large = MaxSize = = Dynamic | | Size> =)",
    "insertText": "EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD(Size==Dynamic && MaxSize>=EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD)"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_FIXED()",
    "kind": "Method",
    "detail": "Function (} ; template<Lhs,Rhs> struct product_type { typedef remove_all<Lhs>::type _Lhs ; typedef remove_all<Rhs>::type _Rhs ; enum { MaxRows = traits<_Lhs>::MaxRowsAtCompileTime,Rows = traits<_Lhs>::RowsAtCompileTime,MaxCols = traits<_Rhs>::MaxColsAtCompileTime,Cols = traits<_Rhs>::ColsAtCompileTime,MaxDepth =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_FIXED(traits<_Lhs>::MaxColsAtCompileTime, traits<_Rhs>::MaxRowsAtCompileTime), Depth = EIGEN_SIZE_MIN_PREFER_FIXED(traits<_Lhs>::ColsAtCompileTime, traits<_Rhs>::RowsAtCompileTime)"
  },
  {
    "label": "debug()",
    "kind": "Method",
    "detail": "Function (private : enum { rows_select = product_size_category<Rows,MaxRows>::value,cols_select = product_size_category<Cols,MaxCols>::value,depth_select = product_size_category<Depth,MaxDepth>::value } ; typedef product_type_selector<rows_select,cols_select,depth_select> selector ; public : enum { value = selector::ret,ret = selector::ret } ; # ifdef EIGEN_DEBUG_PRODUCT void)",
    "insertText": "debug()"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(Rows)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(Cols)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(Depth)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(rows_select)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(cols_select)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(depth_select)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(value)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<int M,int N> struct product_type_selector<M,N,1> { enum { ret = OuterProduct } ; } ; template<int M> struct product_type_selector<M,1,1> { enum { ret = LazyCoeffBasedProductMode } ; } ; template<int N> struct product_type_selector<1,N,1> { enum { ret = LazyCoeffBasedProductMode } ; } ; template<int Depth> struct product_type_selector<1,1,Depth> { enum { ret = InnerProduct } ; } ; template<> struct product_type_selector<1,1,1> { enum { ret = InnerProduct } ; } ; template<> struct product_type_selector<Small,1,Small> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<1,Small,Small> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<Small,Small,Small> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<Small,Small,1> { enum { ret = LazyCoeffBasedProductMode } ; } ; template<> struct product_type_selector<Small,Large,1> { enum { ret = LazyCoeffBasedProductMode } ; } ; template<> struct product_type_selector<Large,Small,1> { enum { ret = LazyCoeffBasedProductMode } ; } ; template<> struct product_type_selector<1,Large,Small> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<1,Large,Large> { enum { ret = GemvProduct } ; } ; template<> struct product_type_selector<1,Small,Large> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<Large,1,Small> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<Large,1,Large> { enum { ret = GemvProduct } ; } ; template<> struct product_type_selector<Small,1,Large> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<Small,Small,Large> { enum { ret = GemmProduct } ; } ; template<> struct product_type_selector<Large,Small,Large> { enum { ret = GemmProduct } ; } ; template<> struct product_type_selector<Small,Large,Large> { enum { ret = GemmProduct } ; } ; template<> struct product_type_selector<Large,Large,Large> { enum { ret = GemmProduct } ; } ; template<> struct product_type_selector<Large,Small,Small> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<Small,Large,Small> { enum { ret = CoeffBasedProductMode } ; } ; template<> struct product_type_selector<Large,Large,Small> { enum { ret = GemmProduct } ; } ; } namespace internal { template<int Side,int StorageOrder,bool BlasCompatible> struct gemv_dense_selector ; } namespace internal { template<Scalar,int Size,int MaxSize,bool Cond> struct gemv_static_vector_if ; template<Scalar,int Size,int MaxSize> struct gemv_static_vector_if<Scalar,Size,MaxSize,false> { EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Scalar*)",
    "insertText": "data()"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(false && \"should never be called\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<int StorageOrder,bool BlasCompatible> struct gemv_dense_selector<OnTheLeft,StorageOrder,BlasCompatible> { template<Lhs,Rhs,Dest> void)",
    "insertText": "run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)"
  },
  {
    "label": "destT()",
    "kind": "Method",
    "detail": "Function (Transpose<Dest>)",
    "insertText": "destT(dest)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (enum { OtherStorageOrder = StorageOrder = = RowMajor ? ColMajor : RowMajor } ; gemv_dense_selector<OnTheRight,OtherStorageOrder,BlasCompatible)",
    "insertText": "run(rhs.transpose(), lhs.transpose(), destT, alpha)"
  },
  {
    "label": "EIGEN_PLAIN_ENUM_MIN()",
    "kind": "Method",
    "detail": "Function (typedef Lhs::Scalar LhsScalar ; typedef Rhs::Scalar RhsScalar ; typedef Dest::Scalar ResScalar ; typedef Dest::RealScalar RealScalar ; typedef internal::blas_traits<Lhs> LhsBlasTraits ; typedef LhsBlasTraits::DirectLinearAccessType ActualLhsType ; typedef internal::blas_traits<Rhs> RhsBlasTraits ; typedef RhsBlasTraits::DirectLinearAccessType ActualRhsType ; typedef Map<Matrix<ResScalar,Dynamic,1>,)",
    "insertText": "EIGEN_PLAIN_ENUM_MIN(AlignedMax,internal::packet_traits<ResScalar>::size)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (ActualLhsType actualLhs =)",
    "insertText": "extract(lhs)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (ActualRhsType actualRhs =)",
    "insertText": "extract(rhs)"
  },
  {
    "label": "combine_scalar_factors()",
    "kind": "Method",
    "detail": "Function (ResScalar actualAlpha =)",
    "insertText": "combine_scalar_factors(alpha, lhs, rhs)"
  },
  {
    "label": "EvalToDestAtCompileTime()",
    "kind": "Method",
    "detail": "Function (typedef conditional<Dest::IsVectorAtCompileTime,Dest,Dest::ColXpr>::type ActualDest ; enum {)",
    "insertText": "EvalToDestAtCompileTime(ActualDest::InnerStrideAtCompileTime==1), ComplexByReal = (NumTraits<LhsScalar>::IsComplex) && (!NumTraits<RhsScalar>::IsComplex), MightCannotUseDest = ((!EvalToDestAtCompileTime) || ComplexByReal) && (ActualDest::MaxSizeAtCompileTime!=0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (typedef const_blas_data_mapper<LhsScalar,Index,ColMajor> LhsMapper ; typedef const_blas_data_mapper<RhsScalar,Index,RowMajor> RhsMapper ; RhsScalar compatibleAlpha = get_factor<ResScalar,RhsScalar)",
    "insertText": "run(actualAlpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,RhsBlasTraits::NeedToConjugate)",
    "insertText": "run(actualLhs.rows(), actualLhs.cols(), LhsMapper(actualLhs.data(), actualLhs.outerStride()), RhsMapper(actualRhs.data(), actualRhs.innerStride()), dest.data(), 1, compatibleAlpha)"
  },
  {
    "label": "alphaIsCompatible()",
    "kind": "Method",
    "detail": "Function (} else { gemv_static_vector_if<ResScalar,ActualDest::SizeAtCompileTime,ActualDest::MaxSizeAtCompileTime,MightCannotUseDest> static_dest ; const bool)",
    "insertText": "alphaIsCompatible(!ComplexByReal) || (numext::imag(actualAlpha)==RealScalar(0))"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (const bool evalToDest = EvalToDestAtCompileTime&& alphaIsCompatible ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(ResScalar,actualDestPtr,dest.size(), evalToDest ? dest.data() : static_dest.data())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN Index size = dest .)",
    "insertText": "size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EIGEN_DENSE_STORAGE_CTOR_PLUGIN # endif)",
    "insertText": "if(!alphaIsCompatible)"
  },
  {
    "label": "MappedDest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MappedDest(actualDestPtr, dest.size()).setZero()"
  },
  {
    "label": "RhsScalar()",
    "kind": "Method",
    "detail": "Function (compatibleAlpha =)",
    "insertText": "RhsScalar(1)"
  },
  {
    "label": "MappedDest()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "MappedDest(actualDestPtr, dest.size())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,RhsBlasTraits::NeedToConjugate)",
    "insertText": "run(actualLhs.rows(), actualLhs.cols(), LhsMapper(actualLhs.data(), actualLhs.outerStride()), RhsMapper(actualRhs.data(), actualRhs.innerStride()), actualDestPtr, 1, compatibleAlpha)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (enum { DirectlyUseRhs = ActualRhsTypeCleaned::InnerStrideAtCompileTime = = 1 | | ActualRhsTypeCleaned::MaxSizeAtCompileTime = = 0 } ; gemv_static_vector_if<RhsScalar,ActualRhsTypeCleaned::SizeAtCompileTime,ActualRhsTypeCleaned::MaxSizeAtCompileTime,! DirectlyUseRhs> static_rhs ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(RhsScalar,actualRhsPtr,actualRhs.size(), DirectlyUseRhs ? const_cast<RhsScalar*>(actualRhs.data()) : static_rhs.data())"
  },
  {
    "label": "PlainObject()",
    "kind": "Method",
    "detail": "Function (EIGEN_DENSE_STORAGE_CTOR_PLUGIN # endif Map<)",
    "insertText": "PlainObject(actualRhsPtr, actualRhs.size())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} typedef const_blas_data_mapper<LhsScalar,Index,RowMajor> LhsMapper ; typedef const_blas_data_mapper<RhsScalar,Index,ColMajor> RhsMapper ; general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,RhsBlasTraits::NeedToConjugate)",
    "insertText": "run(actualLhs.rows(), actualLhs.cols(), LhsMapper(actualLhs.data(), actualLhs.outerStride()), RhsMapper(actualRhsPtr, 1), dest.data(), dest.col(0).innerStride(), actualAlpha)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((!nested_eval<Lhs,1>::Evaluate),EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "actual_rhs()",
    "kind": "Method",
    "detail": "Function (nested_eval<Rhs,1>::type)",
    "insertText": "actual_rhs(rhs)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const Index size = rhs .)",
    "insertText": "rows()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Product<Derived,OtherDerived> MatrixBase<Derived)",
    "insertText": "operator(const MatrixBase<OtherDerived> &other)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { ProductIsValid = Derived::ColsAtCompileTime = = Dynamic | | OtherDerived::RowsAtCompileTime = = Dynamic | |)",
    "insertText": "int(Derived::ColsAtCompileTime)==int(OtherDerived::RowsAtCompileTime), AreVectors = Derived::IsVectorAtCompileTime && OtherDerived::IsVectorAtCompileTime, SameSizes = EIGEN_PREDICATE_SAME_MATRIX_SIZE(Derived,OtherDerived)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(ProductIsValid || !(AreVectors && SameSizes), INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS) EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors), INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION) EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT) #ifdef EIGEN_DEBUG_PRODUCT internal::product_type<Derived,OtherDerived>::debug()"
  },
  {
    "label": "OtherDerived()",
    "kind": "Method",
    "detail": "Function (# endif return Product<Derived,)",
    "insertText": "OtherDerived(derived(), other.derived())"
  },
  {
    "label": "lazyProduct()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Product<Derived,OtherDerived,LazyProduct> MatrixBase<Derived)",
    "insertText": "lazyProduct(const MatrixBase<OtherDerived> &other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(ProductIsValid || !(AreVectors && SameSizes), INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS) EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors), INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION) EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT) return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived())"
  }
]