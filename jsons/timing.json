[
  {
    "label": "VCMTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMTiming"
  },
  {
    "label": "VideoDelayTimings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoDelayTimings"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_TIMING_TIMING_H_ # define MODULES_VIDEO_CODING_TIMING_TIMING_H_ # include<memory> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / units / time_delta . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_timing . h \" # include \" modules / video_coding / timing / codec_timer . h \" # include \" modules / video_coding / timing / timestamp_extrapolator . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class VCMTiming { public : auto kDefaultRenderDelay =)",
    "insertText": "Millis(10)"
  },
  {
    "label": "VCMTiming()",
    "kind": "Method",
    "detail": "Function (auto kDelayMaxChangeMsPerS = 1 0 0 ;)",
    "insertText": "VCMTiming(Clock* clock, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VCMTiming()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCMTiming()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "set_render_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_render_delay(TimeDelta render_delay)"
  },
  {
    "label": "SetJitterDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJitterDelay(TimeDelta required_delay)"
  },
  {
    "label": "min_playout_delay()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "min_playout_delay()"
  },
  {
    "label": "set_min_playout_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_min_playout_delay(TimeDelta min_playout_delay)"
  },
  {
    "label": "set_max_playout_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_max_playout_delay(TimeDelta max_playout_delay)"
  },
  {
    "label": "UpdateCurrentDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentDelay(uint32_t frame_timestamp)"
  },
  {
    "label": "UpdateCurrentDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentDelay(Timestamp render_time, Timestamp actual_decode_time)"
  },
  {
    "label": "StopDecodeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDecodeTimer(TimeDelta decode_time, Timestamp now)"
  },
  {
    "label": "IncomingTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingTimestamp(uint32_t rtp_timestamp, Timestamp last_packet_time)"
  },
  {
    "label": "RenderTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "RenderTime(uint32_t frame_timestamp, Timestamp now)"
  },
  {
    "label": "MaxWaitingTime()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "MaxWaitingTime(Timestamp render_time, Timestamp now, bool too_many_frames_queued)"
  },
  {
    "label": "TargetVideoDelay()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "TargetVideoDelay()"
  },
  {
    "label": "GetTimings()",
    "kind": "Method",
    "detail": "Function (struct VideoDelayTimings { TimeDelta max_decode_duration ; TimeDelta current_delay ; TimeDelta target_delay ; TimeDelta jitter_buffer_delay ; TimeDelta min_playout_delay ; TimeDelta max_playout_delay ; TimeDelta render_delay ; size_t num_decoded_frames ; } ; VideoDelayTimings)",
    "insertText": "GetTimings()"
  },
  {
    "label": "SetTimingFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimingFrameInfo(const TimingFrameInfo& info)"
  },
  {
    "label": "GetTimingFrameInfo()",
    "kind": "Method",
    "detail": "Function (absl::optional<TimingFrameInfo>)",
    "insertText": "GetTimingFrameInfo()"
  },
  {
    "label": "SetMaxCompositionDelayInFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxCompositionDelayInFrames(absl::optional<int> max_composition_delay_in_frames)"
  },
  {
    "label": "RenderParameters()",
    "kind": "Method",
    "detail": "Function (VideoFrame::RenderParameters)",
    "insertText": "RenderParameters()"
  },
  {
    "label": "SetLastDecodeScheduledTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastDecodeScheduledTimestamp(Timestamp last_decode_scheduled)"
  },
  {
    "label": "RequiredDecodeTime()",
    "kind": "Method",
    "detail": "Function (protected : TimeDelta)",
    "insertText": "RequiredDecodeTime() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RenderTimeInternal()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "RenderTimeInternal(uint32_t frame_timestamp, Timestamp now) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "TargetDelayInternal()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "TargetDelayInternal() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UseLowLatencyRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLowLatencyRendering() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex mutex_ ; Clock* const clock_ ; const std::unique_ptr<TimestampExtrapolator> ts_extrapolator_)",
    "insertText": "RTC_PT_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<CodecTimer> codec_timer_)",
    "insertText": "RTC_GUARDED_BY(mutex_) RTC_PT_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TimeDelta render_delay_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]