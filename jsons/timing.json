[
  {
    "label": "VCMTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMTiming"
  },
  {
    "label": "VideoDelayTimings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoDelayTimings"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "set_render_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_render_delay(TimeDelta render_delay)"
  },
  {
    "label": "SetJitterDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJitterDelay(TimeDelta required_delay)"
  },
  {
    "label": "set_min_playout_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_min_playout_delay(TimeDelta min_playout_delay)"
  },
  {
    "label": "set_max_playout_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_max_playout_delay(TimeDelta max_playout_delay)"
  },
  {
    "label": "UpdateCurrentDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentDelay(uint32_t frame_timestamp)"
  },
  {
    "label": "UpdateCurrentDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentDelay(Timestamp render_time, Timestamp actual_decode_time)"
  },
  {
    "label": "StopDecodeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDecodeTimer(TimeDelta decode_time, Timestamp now)"
  },
  {
    "label": "IncomingTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingTimestamp(uint32_t rtp_timestamp,\n                                 Timestamp last_packet_time)"
  },
  {
    "label": "SetTimingFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimingFrameInfo(const TimingFrameInfo& info)"
  },
  {
    "label": "GetTimingFrameInfo()",
    "kind": "Method",
    "detail": "Function (absl::optional<TimingFrameInfo>)",
    "insertText": "GetTimingFrameInfo()"
  },
  {
    "label": "SetMaxCompositionDelayInFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxCompositionDelayInFrames(\n      absl::optional<int> max_composition_delay_in_frames)"
  },
  {
    "label": "SetLastDecodeScheduledTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastDecodeScheduledTimestamp(Timestamp last_decode_scheduled)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ts_extrapolator_)",
    "insertText": "RTC_PT_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (render_delay_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (min_playout_delay_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (max_playout_delay_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (jitter_delay_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (current_delay_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (prev_frame_timestamp_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (timing_frame_info_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (num_decoded_frames_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (max_composition_delay_in_frames_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (zero_playout_delay_min_pacing_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_decode_scheduled_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]