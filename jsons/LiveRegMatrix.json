[
  {
    "label": "LiveInterval",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveInterval"
  },
  {
    "label": "LiveIntervalAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervalAnalysis"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "VirtRegMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtRegMap"
  },
  {
    "label": "LiveRegMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRegMatrix"
  },
  {
    "label": "InterferenceKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InterferenceKind"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LIVEREGMATRIX_H # define LLVM_CODEGEN_LIVEREGMATRIX_H # include \" llvm / ADT / BitVector . h \" # include \" llvm / CodeGen / LiveIntervalUnion . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" namespace llvm { class LiveInterval ; class LiveIntervalAnalysis ; class MachineRegisterInfo ; class TargetRegisterInfo ; class VirtRegMap ; class LiveRegMatrix : public MachineFunctionPass { const TargetRegisterInfo* TRI ; MachineRegisterInfo* MRI ; LiveIntervals* LIS ; VirtRegMap* VRM ; unsigned UserTag ; LiveIntervalUnion::Allocator LIUAlloc ; LiveIntervalUnion::Array Matrix ; std::unique_ptr<LiveIntervalUnion::Query [ ]> Queries ; unsigned RegMaskTag ; unsigned RegMaskVirtReg ; BitVector RegMaskUsable ; void)",
    "insertText": "getAnalysisUsage(AnalysisUsage&)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnMachineFunction(MachineFunction&)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "LiveRegMatrix()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "LiveRegMatrix()"
  },
  {
    "label": "invalidateVirtRegs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidateVirtRegs()"
  },
  {
    "label": "checkInterference()",
    "kind": "Method",
    "detail": "Function (+ + UserTag ; } enum InterferenceKind { IK_Free = 0,IK_VirtReg,IK_RegUnit,IK_RegMask } ; InterferenceKind)",
    "insertText": "checkInterference(LiveInterval &VirtReg, unsigned PhysReg)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(LiveInterval &VirtReg, unsigned PhysReg)"
  },
  {
    "label": "unassign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unassign(LiveInterval &VirtReg)"
  },
  {
    "label": "isPhysRegUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPhysRegUsed(unsigned PhysReg)"
  },
  {
    "label": "checkRegMaskInterference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkRegMaskInterference(LiveInterval &VirtReg, unsigned PhysReg = 0)"
  },
  {
    "label": "checkRegUnitInterference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkRegUnitInterference(LiveInterval &VirtReg, unsigned PhysReg)"
  },
  {
    "label": "query()",
    "kind": "Method",
    "detail": "Function (LiveIntervalUnion::Query&)",
    "insertText": "query(LiveInterval &VirtReg, unsigned RegUnit)"
  },
  {
    "label": "getLiveUnions()",
    "kind": "Method",
    "detail": "Function (LiveIntervalUnion*)",
    "insertText": "getLiveUnions()"
  }
]