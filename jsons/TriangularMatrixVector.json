[
  {
    "label": "triangular_matrix_vector_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_matrix_vector_product"
  },
  {
    "label": "trmv_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "trmv_selector"
  },
  {
    "label": "triangular_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_product_impl"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULARMATRIXVECTOR_H # define EIGEN_TRIANGULARMATRIXVECTOR_H namespace Eigen { namespace internal { template<Index,int Mode,LhsScalar,bool ConjLhs,RhsScalar,bool ConjRhs,int StorageOrder,int Version = Specialized> struct triangular_matrix_vector_product ; template<Index,int Mode,LhsScalar,bool ConjLhs,RhsScalar,bool ConjRhs,int Version> struct triangular_matrix_vector_product<Index,Mode,LhsScalar,ConjLhs,RhsScalar,ConjRhs,ColMajor,Version> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; enum {)",
    "insertText": "IsLower((Mode&Lower)==Lower), HasUnitDiag = (Mode & UnitDiag)==UnitDiag, HasZeroDiag = (Mode & ZeroDiag)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DONT_INLINE void)",
    "insertText": "run(Index _rows, Index _cols, const LhsScalar* _lhs, Index lhsStride, const RhsScalar* _rhs, Index rhsIncr, ResScalar* _res, Index resIncr, const RhsScalar& alpha)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index PanelWidth = EIGEN_TUNE_TRIANGULAR_PANEL_WIDTH ; Index)",
    "insertText": "size(std::min)(_rows,_cols)"
  },
  {
    "label": "_rows()",
    "kind": "Method",
    "detail": "Function (Index rows = IsLower ?)",
    "insertText": "_rows(std::min)(_rows,_cols)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (Index cols =)",
    "insertText": "IsLower(std::min)(_rows,_cols)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (typedef Map<const Matrix<LhsScalar,Dynamic,Dynamic,ColMajor>,0,OuterStride<>> LhsMap ; const LhsMap)",
    "insertText": "lhs(_lhs,rows,cols,OuterStride<>(lhsStride))"
  },
  {
    "label": "cjLhs()",
    "kind": "Method",
    "detail": "Function (conj_expr_if<ConjLhs,LhsMap>::type)",
    "insertText": "cjLhs(lhs)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (typedef Map<const Matrix<RhsScalar,Dynamic,1>,0,InnerStride<>> RhsMap ; const RhsMap)",
    "insertText": "rhs(_rhs,cols,InnerStride<>(rhsIncr))"
  },
  {
    "label": "cjRhs()",
    "kind": "Method",
    "detail": "Function (conj_expr_if<ConjRhs,RhsMap>::type)",
    "insertText": "cjRhs(rhs)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (typedef Map<Matrix<ResScalar,Dynamic,1>> ResMap ; ResMap)",
    "insertText": "res(_res,rows)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef const_blas_data_mapper<LhsScalar,Index,ColMajor> LhsMapper ; typedef const_blas_data_mapper<RhsScalar,Index,RowMajor> RhsMapper ;)",
    "insertText": "for(Index pi=0; pi<size; pi+=PanelWidth)"
  },
  {
    "label": "actualPanelWidth()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actualPanelWidth(std::min)(PanelWidth, size-pi)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (Index i = pi + k ; Index s =)",
    "insertText": "IsLower((HasUnitDiag||HasZeroDiag) ? i+1 : i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index r = IsLower ? actualPanelWidth - k : k + 1 ;)",
    "insertText": "if((!(HasUnitDiag||HasZeroDiag)) || (--r)>0) res.segment(s,r) += (alpha * cjRhs.coeff(i)) * cjLhs.col(i).segment(s,r)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Index r = IsLower ? rows - pi - actualPanelWidth : pi ;)",
    "insertText": "if(r>0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (Index s = IsLower ? pi + actualPanelWidth : 0 ; general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,ConjLhs,RhsScalar,RhsMapper,ConjRhs,BuiltIn)",
    "insertText": "run(r, actualPanelWidth, LhsMapper(&lhs.coeffRef(s,pi), lhsStride), RhsMapper(&rhs.coeffRef(pi), rhsIncr), &res.coeffRef(s), resIncr, alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if((!IsLower) && cols>size)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,ConjLhs,RhsScalar,RhsMapper,ConjRhs)",
    "insertText": "run(rows, cols-size, LhsMapper(&lhs.coeffRef(0,size), lhsStride), RhsMapper(&rhs.coeffRef(size), rhsIncr), _res, resIncr, alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DONT_INLINE void)",
    "insertText": "run(Index _rows, Index _cols, const LhsScalar* _lhs, Index lhsStride, const RhsScalar* _rhs, Index rhsIncr, ResScalar* _res, Index resIncr, const ResScalar& alpha)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (const Index PanelWidth = EIGEN_TUNE_TRIANGULAR_PANEL_WIDTH ; Index)",
    "insertText": "diagSize(std::min)(_rows,_cols)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (typedef Map<const Matrix<RhsScalar,Dynamic,1>> RhsMap ; const RhsMap)",
    "insertText": "rhs(_rhs,cols)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (typedef Map<Matrix<ResScalar,Dynamic,1>,0,InnerStride<>> ResMap ; ResMap)",
    "insertText": "res(_res,rows,InnerStride<>(resIncr))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef const_blas_data_mapper<LhsScalar,Index,RowMajor> LhsMapper ; typedef const_blas_data_mapper<RhsScalar,Index,RowMajor> RhsMapper ;)",
    "insertText": "for(Index pi=0; pi<diagSize; pi+=PanelWidth)"
  },
  {
    "label": "actualPanelWidth()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actualPanelWidth(std::min)(PanelWidth, diagSize-pi)"
  },
  {
    "label": "pi()",
    "kind": "Method",
    "detail": "Function (Index i = pi + k ; Index s = IsLower ?)",
    "insertText": "pi((HasUnitDiag||HasZeroDiag) ? i+1 : i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index r = IsLower ? k + 1 : actualPanelWidth - k ;)",
    "insertText": "if((!(HasUnitDiag||HasZeroDiag)) || (--r)>0) res.coeffRef(i) += alpha * (cjLhs.row(i).segment(s,r).cwiseProduct(cjRhs.segment(s,r).transpose())).sum()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (Index s = IsLower ? 0 : pi + actualPanelWidth ; general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,ConjLhs,RhsScalar,RhsMapper,ConjRhs,BuiltIn)",
    "insertText": "run(actualPanelWidth, r, LhsMapper(&lhs.coeffRef(pi,s), lhsStride), RhsMapper(&rhs.coeffRef(s), rhsIncr), &res.coeffRef(pi), resIncr, alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(IsLower && rows>diagSize)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,ConjLhs,RhsScalar,RhsMapper,ConjRhs)",
    "insertText": "run(rows-diagSize, cols, LhsMapper(&lhs.coeffRef(diagSize,0), lhsStride), RhsMapper(&rhs.coeffRef(0), rhsIncr), &res.coeffRef(diagSize), resIncr, alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } template<int Mode,int StorageOrder> struct trmv_selector ; } namespace internal { template<int Mode,Lhs,Rhs> struct triangular_product_impl<Mode,true,Lhs,false,Rhs,true> { template<Dest> void)",
    "insertText": "run(Dest& dst, const Lhs &lhs, const Rhs &rhs, const typename Dest::Scalar& alpha)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dst.rows()==lhs.rows() && dst.cols()==rhs.cols())"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (internal::trmv_selector<)",
    "insertText": "Mode(int(internal::traits<Lhs>::Flags)&RowMajorBit) ? RowMajor : ColMajor>::run(lhs, rhs, dst, alpha)"
  },
  {
    "label": "dstT()",
    "kind": "Method",
    "detail": "Function (Transpose<Dest>)",
    "insertText": "dstT(dst)"
  },
  {
    "label": "trmv_selector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "trmv_selector(Mode & (UnitDiag|ZeroDiag)) | ((Mode & Lower) ? Upper : Lower), (int(internal::traits<Rhs>::Flags)&RowMajorBit) ? ColMajor : RowMajor> ::run(rhs.transpose(),lhs.transpose(), dstT, alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace internal { template<int Mode> struct trmv_selector<Mode,ColMajor> { template<Lhs,Rhs,Dest> void)",
    "insertText": "run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)"
  },
  {
    "label": "EIGEN_PLAIN_ENUM_MIN()",
    "kind": "Method",
    "detail": "Function (typedef Lhs::Scalar LhsScalar ; typedef Rhs::Scalar RhsScalar ; typedef Dest::Scalar ResScalar ; typedef Dest::RealScalar RealScalar ; typedef internal::blas_traits<Lhs> LhsBlasTraits ; typedef LhsBlasTraits::DirectLinearAccessType ActualLhsType ; typedef internal::blas_traits<Rhs> RhsBlasTraits ; typedef RhsBlasTraits::DirectLinearAccessType ActualRhsType ; typedef Map<Matrix<ResScalar,Dynamic,1>,)",
    "insertText": "EIGEN_PLAIN_ENUM_MIN(AlignedMax,internal::packet_traits<ResScalar>::size)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualLhsType>::type actualLhs =)",
    "insertText": "extract(lhs)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (internal::add_const_on_value_type<ActualRhsType>::type actualRhs =)",
    "insertText": "extract(rhs)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (LhsScalar lhs_alpha =)",
    "insertText": "extractScalarFactor(lhs)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (RhsScalar rhs_alpha =)",
    "insertText": "extractScalarFactor(rhs)"
  },
  {
    "label": "ComplexByReal()",
    "kind": "Method",
    "detail": "Function (ResScalar actualAlpha = alpha* lhs_alpha* rhs_alpha ; enum { EvalToDestAtCompileTime = Dest::InnerStrideAtCompileTime = = 1,)",
    "insertText": "ComplexByReal(NumTraits<LhsScalar>::IsComplex) && (!NumTraits<RhsScalar>::IsComplex), MightCannotUseDest = (Dest::InnerStrideAtCompileTime!=1)"
  },
  {
    "label": "alphaIsCompatible()",
    "kind": "Method",
    "detail": "Function (gemv_static_vector_if<ResScalar,Dest::SizeAtCompileTime,Dest::MaxSizeAtCompileTime,MightCannotUseDest> static_dest ; bool)",
    "insertText": "alphaIsCompatible(!ComplexByReal) || (numext::imag(actualAlpha)==RealScalar(0))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (bool evalToDest = EvalToDestAtCompileTime&& alphaIsCompatible ; RhsScalar compatibleAlpha = get_factor<ResScalar,RhsScalar)",
    "insertText": "run(actualAlpha)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(ResScalar,actualDestPtr,dest.size(), evalToDest ? dest.data() : static_dest.data())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN Index size = dest .)",
    "insertText": "size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EIGEN_DENSE_STORAGE_CTOR_PLUGIN # endif)",
    "insertText": "if(!alphaIsCompatible)"
  },
  {
    "label": "MappedDest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MappedDest(actualDestPtr, dest.size()).setZero()"
  },
  {
    "label": "RhsScalar()",
    "kind": "Method",
    "detail": "Function (compatibleAlpha =)",
    "insertText": "RhsScalar(1)"
  },
  {
    "label": "MappedDest()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "MappedDest(actualDestPtr, dest.size())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} internal::triangular_matrix_vector_product<Index,Mode,LhsScalar,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsBlasTraits::NeedToConjugate,ColMajor)",
    "insertText": "run(actualLhs.rows(),actualLhs.cols(), actualLhs.data(),actualLhs.outerStride(), actualRhs.data(),actualRhs.innerStride(), actualDestPtr,1,compatibleAlpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(((Mode&UnitDiag)==UnitDiag) && (lhs_alpha!=LhsScalar(1)))"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "diagSize(std::min)(lhs.rows(),lhs.cols())"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "head(diagSize) -= (lhs_alpha-LhsScalar(1))*rhs.head(diagSize)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (ResScalar actualAlpha = alpha* lhs_alpha* rhs_alpha ; enum { DirectlyUseRhs = ActualRhsTypeCleaned::InnerStrideAtCompileTime = = 1 } ; gemv_static_vector_if<RhsScalar,ActualRhsTypeCleaned::SizeAtCompileTime,ActualRhsTypeCleaned::MaxSizeAtCompileTime,! DirectlyUseRhs> static_rhs ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(RhsScalar,actualRhsPtr,actualRhs.size(), DirectlyUseRhs ? const_cast<RhsScalar*>(actualRhs.data()) : static_rhs.data())"
  },
  {
    "label": "PlainObject()",
    "kind": "Method",
    "detail": "Function (EIGEN_DENSE_STORAGE_CTOR_PLUGIN # endif Map<)",
    "insertText": "PlainObject(actualRhsPtr, actualRhs.size())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} internal::triangular_matrix_vector_product<Index,Mode,LhsScalar,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsBlasTraits::NeedToConjugate,RowMajor)",
    "insertText": "run(actualLhs.rows(),actualLhs.cols(), actualLhs.data(),actualLhs.outerStride(), actualRhsPtr,1, dest.data(),dest.innerStride(), actualAlpha)"
  }
]