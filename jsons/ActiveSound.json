[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "FSoundSubmixSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSubmixSendInfo"
  },
  {
    "label": "FSoundSourceBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSourceBusSendInfo"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListener"
  },
  {
    "label": "FAttenuationListenerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationListenerData"
  },
  {
    "label": "FAttenuationFocusData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationFocusData"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAsyncTraceDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncTraceDetails"
  },
  {
    "label": "BusSends()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WorldCollision . h \" # include \" Sound / SoundAttenuation . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Audio . h \" # include \" Audio / AudioDebug . h \" # include \" AudioDynamicParameter . h \" # include \" Components / AudioComponent . h \" # include \" DSP / VolumeFader . h \" # include \" IAudioExtensionPlugin . h \" # include \" Sound / AudioVolume . h \" # include \" Sound / SoundConcurrency . h \" # include \" Sound / SoundSourceBus . h \" # include \" Sound / QuartzQuantizationUtilities . h \" class FAudioDevice ; class USoundBase ; class USoundSubmix ; class USoundSourceBus ; struct FSoundSubmixSendInfo ; struct FSoundSourceBusSendInfo ; struct FWaveInstance ; class USoundWave ; struct FListener ; struct FAttenuationListenerData ; struct FAttenuationFocusData { float Azimuth = 0 . 0 f ; float AbsoluteAzimuth = 0 . 0 f ; float FocusFactor = 1 . 0 f ; float DistanceScale = 1 . 0 f ; float PriorityScale = 1 . 0 f ; float PriorityHighest = 1 . 0 f ; float VolumeScale = 1 . 0 f ; bool bFirstFocusUpdate = true ; } ; struct FSoundParseParameters { FNotifyBufferFinishedHooks NotifyBufferFinishedHooks ; USoundClass* SoundClass ; FTransform Transform ; FVector Velocity ; float Volume ; float DistanceAttenuation ; float OcclusionAttenuation ; float VolumeMultiplier ; int32 EnvelopeFollowerAttackTime ; int32 EnvelopeFollowerReleaseTime ; float InteriorVolumeMultiplier ; float Priority ; float Pitch ; float StartTime ; float NonSpatializedRadiusStart ; float NonSpatializedRadiusEnd ; ENonSpatializedRadiusSpeakerMapMode NonSpatializedRadiusMode ; float AttenuationDistance ; float ListenerToSoundDistance ; float ListenerToSoundDistanceForPanning ; float AbsoluteAzimuth ; USoundSubmixBase* SoundSubmix ; TArray<FSoundSubmixSendInfo> SoundSubmixSends ; TArray<FAttenuationSubmixSendSettings> AttenuationSubmixSends ; TArray<FSoundSourceBusSendInfo>)",
    "insertText": "BusSends(int32)"
  },
  {
    "label": "FSoundParseParameters()",
    "kind": "Method",
    "detail": "Function (EReverbSendMethod ReverbSendMethod ; FVector2D ReverbSendLevelRange ; FVector2D ReverbSendLevelDistanceRange ; float ManualReverbSendLevel ; FRuntimeFloatCurve CustomReverbSendCurve ; float StereoSpread ; ESoundSpatializationAlgorithm SpatializationMethod ; bool bSpatializationIsExternalSend ; USpatializationPluginSourceSettingsBase* SpatializationPluginSettings ; UOcclusionPluginSourceSettingsBase* OcclusionPluginSettings ; UReverbPluginSourceSettingsBase* ReverbPluginSettings ; USourceDataOverridePluginSourceSettingsBase* SourceDataOverridePluginSettings ; UAudioLinkSettingsAbstract* AudioLinkSettingsOverride = nullptr ; USoundEffectSourcePresetChain* SourceEffectChain ; float LowPassFilterFrequency ; float HighPassFilterFrequency ; float AttenuationLowpassFilterFrequency ; float AttenuationHighpassFilterFrequency ; float OcclusionFilterFrequency ; float AmbientZoneFilterFrequency ; uint32 bEnableBusSends : 1 ; uint32 bEnableBaseSubmix : 1 ; uint32 bEnableSubmixSends : 1 ; uint32 bEnableSourceDataOverride : 1 ; uint32 bEnableSendToAudioLink : 1 ; uint8 bUseSpatialization : 1 ; uint8 bLooping : 1 ; uint8 bEnableLowPassFilter : 1 ; uint8 bEnableHighPassFilter : 1 ; uint8 bIsOccluded : 1 ; uint8 bIsPaused : 1 ; uint8 bEnableRetrigger : 1 ; uint8 bApplyNormalizationToStereoSounds : 1 ;)",
    "insertText": "FSoundParseParameters() : SoundClass(nullptr) , Velocity(ForceInit) , Volume(1.f) , DistanceAttenuation(1.f) , OcclusionAttenuation(1.f) , VolumeMultiplier(1.f) , EnvelopeFollowerAttackTime(10) , EnvelopeFollowerReleaseTime(100) , InteriorVolumeMultiplier(1.f) , Pitch(1.f) , StartTime(-1.f) , NonSpatializedRadiusStart(0.0f) , NonSpatializedRadiusEnd(0.0f) , NonSpatializedRadiusMode(ENonSpatializedRadiusSpeakerMapMode::OmniDirectional) , AttenuationDistance(0.0f) , ListenerToSoundDistance(0.0f) , ListenerToSoundDistanceForPanning(0.0f) , AbsoluteAzimuth(0.0f) , SoundSubmix(nullptr) , ReverbSendMethod(EReverbSendMethod::Linear) , ReverbSendLevelRange(0.0f, 0.0f) , ReverbSendLevelDistanceRange(0.0f, 0.0f) , ManualReverbSendLevel(0.0f) , StereoSpread(0.0f) , SpatializationMethod(ESoundSpatializationAlgorithm::SPATIALIZATION_Default) , bSpatializationIsExternalSend(false) , SpatializationPluginSettings(nullptr) , OcclusionPluginSettings(nullptr) , ReverbPluginSettings(nullptr) , SourceDataOverridePluginSettings(nullptr) , AudioLinkSettingsOverride(nullptr) , SourceEffectChain(nullptr) , LowPassFilterFrequency(MAX_FILTER_FREQUENCY) , HighPassFilterFrequency(MIN_FILTER_FREQUENCY) , AttenuationLowpassFilterFrequency(MAX_FILTER_FREQUENCY) , AttenuationHighpassFilterFrequency(MIN_FILTER_FREQUENCY) , OcclusionFilterFrequency(MAX_FILTER_FREQUENCY) , AmbientZoneFilterFrequency(MAX_FILTER_FREQUENCY) , bEnableBusSends(false) , bEnableBaseSubmix(false) , bEnableSubmixSends(false) , bEnableSourceDataOverride(false) , bUseSpatialization(false) , bLooping(false) , bEnableLowPassFilter(false) , bEnableHighPassFilter(false) , bIsOccluded(false) , bIsPaused(false) , bEnableRetrigger(false) , bApplyNormalizationToStereoSounds(false)"
  },
  {
    "label": "FActiveSound()",
    "kind": "Method",
    "detail": "Function (} } ; struct FActiveSound : public ISoundModulatable { public :)",
    "insertText": "FActiveSound()"
  },
  {
    "label": "FActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FActiveSound(const FActiveSound&)"
  },
  {
    "label": "CreateVirtualCopy()",
    "kind": "Method",
    "detail": "Function (FActiveSound*)",
    "insertText": "CreateVirtualCopy(const FActiveSound& ActiveSoundToCopy, FAudioDevice& AudioDevice)"
  },
  {
    "label": "GetObjectId()",
    "kind": "Method",
    "detail": "Function (private : TWeakObjectPtr<UWorld> World ; uint32 WorldID ; TObjectPtr<USoundBase> Sound ; TObjectPtr<USoundEffectSourcePresetChain> SourceEffectChain ; TObjectPtr<USoundAttenuation> SoundAttenuation ; uint64 AudioComponentID ; FName AudioComponentUserID ; uint32 OwnerID ; FName AudioComponentName ; FName OwnerName ; uint32 PlayOrder ; public : uint32)",
    "insertText": "GetObjectId()"
  },
  {
    "label": "GetPlayCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlayCount()"
  },
  {
    "label": "GetPlayOrder()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPlayOrder()"
  },
  {
    "label": "GetInstanceID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetInstanceID()"
  },
  {
    "label": "SetAudioComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioComponent(const FActiveSound& ActiveSound)"
  },
  {
    "label": "SetAudioComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioComponent(const UAudioComponent& Component)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(const AActor* Owner)"
  },
  {
    "label": "GetAudioComponentName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAudioComponentName()"
  },
  {
    "label": "GetOwnerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOwnerName()"
  },
  {
    "label": "GetWorldID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetWorldID()"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorld(UWorld* World)"
  },
  {
    "label": "SetPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitch(float Value)"
  },
  {
    "label": "SetVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolume(float Value)"
  },
  {
    "label": "GetPitch()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPitch()"
  },
  {
    "label": "GetSound()",
    "kind": "Method",
    "detail": "Function (USoundBase*)",
    "insertText": "GetSound()"
  },
  {
    "label": "GetSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (USoundEffectSourcePresetChain*)",
    "insertText": "GetSourceEffectChain()"
  },
  {
    "label": "SetSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSourceEffectChain(USoundEffectSourcePresetChain* InSourceEffectChain)"
  },
  {
    "label": "SetSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundClass(USoundClass* SoundClass)"
  },
  {
    "label": "SetAttenuationSettingsAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttenuationSettingsAsset(TObjectPtr<USoundAttenuation> InSoundAttenuation)"
  },
  {
    "label": "SetAttenuationSettingsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttenuationSettingsOverride(bool bInIsAttenuationSettingsOverridden)"
  },
  {
    "label": "SetAudioDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioDevice(FAudioDevice* InAudioDevice)"
  },
  {
    "label": "SetSourceListener()",
    "kind": "Method",
    "detail": "Function (AudioDevice = InAudioDevice ; } void)",
    "insertText": "SetSourceListener(FSharedISourceBufferListenerPtr InListener, bool bShouldZeroBuffer)"
  },
  {
    "label": "GetClosestListenerIndex()",
    "kind": "Method",
    "detail": "Function (SourceBufferListener = InListener ; bShouldSourceBufferListenerZeroBuffer = bShouldZeroBuffer ; } int32)",
    "insertText": "GetClosestListenerIndex()"
  },
  {
    "label": "CanDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelete()"
  },
  {
    "label": "IsOneShot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOneShot()"
  },
  {
    "label": "IsPlayingAudio()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlayingAudio()"
  },
  {
    "label": "GetConcurrencyPriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetConcurrencyPriority()"
  },
  {
    "label": "BusSendsOverride()",
    "kind": "Method",
    "detail": "Function (FAudioDevice* AudioDevice ; TMap<FConcurrencyGroupID,FConcurrencySoundData> ConcurrencyGroupData ; TSet<TObjectPtr<USoundConcurrency>> ConcurrencySet ; private : TObjectPtr<USoundClass> SoundClassOverride ; TArray<FSoundSubmixSendInfo> SoundSubmixSendsOverride ; TArray<FSoundSourceBusSendInfo>)",
    "insertText": "BusSendsOverride(int32)"
  },
  {
    "label": "GetTransmitter()",
    "kind": "Method",
    "detail": "Function (TMap<UPTRINT,FWaveInstance*> WaveInstances ; TSharedPtr<Audio::IParameterTransmitter> InstanceTransmitter ; public : Audio::IParameterTransmitter*)",
    "insertText": "GetTransmitter()"
  },
  {
    "label": "ClearTransmitter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearTransmitter()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} enum class EFadeOut : uint8 { None,User,Concurrency } ; uint8 bHasCheckedOcclusion : 1 ; uint8 bAllowSpatialization : 1 ; uint8 bHasAttenuationSettings : 1 ; uint8 bShouldRemainActiveIfDropped : 1 ; uint8 bFinished : 1 ; uint8 bIsPaused : 1 ; uint8 bShouldStopDueToMaxConcurrency : 1 ; uint8 bHasVirtualized : 1 ; uint8 bRadioFilterSelected : 1 ; uint8 bApplyRadioFilter : 1 ; uint8 bHandleSubtitles : 1 ; uint8 bHasExternalSubtitles : 1 ; uint8 bLocationDefined : 1 ; uint8 bIgnoreForFlushing : 1 ; uint8 bAlwaysPlay : 1 ; uint8 bIsUISound : 1 ; uint8 bIsMusic : 1 ; uint8 bReverb : 1 ; uint8 bCenterChannelOnly : 1 ; uint8 bIsPreviewSound : 1 ; uint8 bGotInteriorSettings : 1 ; uint8 bApplyInteriorVolumes : 1 ; #)",
    "insertText": "if(NO_LOGGING || UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "UpdateInterfaceParameters()",
    "kind": "Method",
    "detail": "Function (# endif uint8 bEnableLowPassFilter : 1 ; uint8 bEnableHighPassFilter : 1 ; uint8 bUpdatePlayPercentage : 1 ; uint8 bUpdateSingleEnvelopeValue : 1 ; uint8 bUpdateMultiEnvelopeValue : 1 ; uint8 bUpdatePlaybackTime : 1 ; uint8 bIsPlayingAudio : 1 ; uint8 bIsStopping : 1 ; uint8 bHasActiveBusSendRoutingOverride : 1 ; uint8 bHasActiveMainSubmixOutputOverride : 1 ; uint8 bHasActiveSubmixSendRoutingOverride : 1 ; uint8 bEnableBusSendRoutingOverride : 1 ; uint8 bEnableMainSubmixOutputOverride : 1 ; uint8 bEnableSubmixSendRoutingOverride : 1 ; uint8 bIsFirstAttenuationUpdate : 1 ; uint8 bStartedWithinNonBinauralRadius : 1 ; uint8 bModulationRoutingUpdated : 1 ; uint8 bIsAttenuationSettingsOverridden : 1 ; uint8 UserIndex ; EFadeOut FadeOut ; FThreadSafeBool bIsOccluded ; FThreadSafeBool bAsyncOcclusionPending ; float PlaybackTime ; float PlaybackTimeNonVirtualized ; float MinCurrentPitch ; float RequestedStartTime ; float VolumeMultiplier ; float PitchMultiplier ; float LowPassFilterFrequency ; float HighPassFilterFrequency ; Audio::FVolumeFader ComponentVolumeFader ; FDynamicParameter CurrentOcclusionFilterFrequency ; FDynamicParameter CurrentOcclusionVolumeAttenuation ; float SubtitlePriority ; float Priority ; float VolumeConcurrency ; float OcclusionCheckInterval ; float LastOcclusionCheckTime ; float MaxDistance ; FTransform Transform ; FAttenuationFocusData FocusData ; FVector LastLocation ; FSoundAttenuationSettings AttenuationSettings ; Audio::FQuartzQuantizedRequestData QuantizedRequestData ; FSharedISourceBufferListenerPtr SourceBufferListener ; bool bShouldSourceBufferListenerZeroBuffer = false ; FInteriorSettings InteriorSettings ; TArray<FAudioVolumeSubmixSendSettings> AudioVolumeSubmixSendSettings ; TArray<FAudioVolumeSubmixSendSettings> PreviousAudioVolumeSubmixSendSettings ; uint32 AudioVolumeID ; double LastUpdateTime ; float SourceInteriorVolume ; float SourceInteriorLPF ; float CurrentInteriorVolume ; float CurrentInteriorLPF ; int32 EnvelopeFollowerAttackTime ; int32 EnvelopeFollowerReleaseTime ; TMap<UPTRINT,uint32> SoundNodeOffsetMap ; TArray<uint8> SoundNodeData ; bool bHasNewBusSends ; TArray<TTuple<EBusSendType,FSoundSourceBusSendInfo>> NewBusSends ; FSoundModulationDefaultRoutingSettings ModulationRouting ; # if ENABLE_AUDIO_DEBUG FColor DebugColor ; # endif void)",
    "insertText": "UpdateInterfaceParameters(const TArray<FListener>& InListeners)"
  },
  {
    "label": "UpdateWaveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWaveInstances(TArray<FWaveInstance*> &OutWaveInstances, const float DeltaTime)"
  },
  {
    "label": "FindWaveInstance()",
    "kind": "Method",
    "detail": "Function (FWaveInstance*)",
    "insertText": "FindWaveInstance(const UPTRINT WaveInstanceHash)"
  },
  {
    "label": "RemoveWaveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWaveInstance(const UPTRINT WaveInstanceHash)"
  },
  {
    "label": "GetWaveInstances()",
    "kind": "Method",
    "detail": "Function (const TMap<UPTRINT,FWaveInstance*>&)",
    "insertText": "GetWaveInstances()"
  },
  {
    "label": "ApplyRadioFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRadioFilter(const FSoundParseParameters& ParseParams)"
  },
  {
    "label": "GetTotalConcurrencyVolumeScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalConcurrencyVolumeScale()"
  },
  {
    "label": "CollectAttenuationShapesForVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAttenuationShapesForVisualization(TMultiMap<EAttenuationShape::Type, FBaseAttenuationSettings::AttenuationShapeDetails>& ShapeDetailsMap)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FActiveSound* ActiveSound)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetSoundClass()",
    "kind": "Method",
    "detail": "Function (USoundClass*)",
    "insertText": "GetSoundClass()"
  },
  {
    "label": "GetSoundSubmix()",
    "kind": "Method",
    "detail": "Function (USoundSubmixBase*)",
    "insertText": "GetSoundSubmix()"
  },
  {
    "label": "GetSoundSubmixSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSoundSubmixSends(TArray<FSoundSubmixSendInfo>& OutSends)"
  },
  {
    "label": "GetBusSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBusSends(EBusSendType BusSendType, TArray<FSoundSourceBusSendInfo>& OutSends)"
  },
  {
    "label": "HasNewBusSends()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNewBusSends()"
  },
  {
    "label": "GetNewBusSends()",
    "kind": "Method",
    "detail": "Function (TArray<TTuple<EBusSendType,FSoundSourceBusSendInfo>> const&)",
    "insertText": "GetNewBusSends()"
  },
  {
    "label": "ResetNewBusSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNewBusSends()"
  },
  {
    "label": "SetNewModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewModulationRouting(const FSoundModulationDefaultRoutingSettings& NewRouting)"
  },
  {
    "label": "AddModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModulationRouting(const TSet<TObjectPtr<USoundModulatorBase>>& NewModulators, EModulationDestination Destination)"
  },
  {
    "label": "RemoveModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveModulationRouting(const TSet<TObjectPtr<USoundModulatorBase>>& NewModulators, EModulationDestination Destination)"
  },
  {
    "label": "FindClosestListener()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestListener(const TArray<struct FListener>& InListeners)"
  },
  {
    "label": "FindClosestListener()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestListener()"
  },
  {
    "label": "GetOwnerID()",
    "kind": "Method",
    "detail": "Function (FSoundOwnerObjectID)",
    "insertText": "GetOwnerID()"
  },
  {
    "label": "GetConcurrencyFadeDuration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConcurrencyFadeDuration(float& OutFadeDuration)"
  },
  {
    "label": "OcclusionTraceDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OcclusionTraceDone(const FTraceHandle& TraceHandle, FTraceDatum& TraceDatum)"
  },
  {
    "label": "ParseAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseAttenuation(FSoundParseParameters& OutParseParams, int32 ListenerIndex, const FSoundAttenuationSettings& InAttenuationSettings)"
  },
  {
    "label": "GetAlwaysPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAlwaysPlay()"
  },
  {
    "label": "GetHighestPriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHighestPriority(bool bIgnoreAlwaysPlay = false)"
  },
  {
    "label": "SetSubmixSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixSend(const FSoundSubmixSendInfo& SubmixSendInfo)"
  },
  {
    "label": "SetSourceBusSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceBusSend(EBusSendType BusSendType, const FSoundSourceBusSendInfo& SourceBusSendInfo)"
  },
  {
    "label": "UpdateAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttenuation(float DeltaTime, FSoundParseParameters& ParseParams, int32 ListenerIndex, const FSoundAttenuationSettings* SettingsAttenuationNode = nullptr)"
  },
  {
    "label": "UpdateFocusData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFocusData(float DeltaTime, const FAttenuationListenerData& ListenerData, FAttenuationFocusData* OutFocusData = nullptr)"
  },
  {
    "label": "AddVolumeSubmixSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVolumeSubmixSends(FSoundParseParameters& ParseParams, EAudioVolumeLocationState LocationState)"
  },
  {
    "label": "MarkPendingDestroy()",
    "kind": "Method",
    "detail": "Function (private : struct FAsyncTraceDetails { Audio::FDeviceId AudioDeviceID ; FActiveSound* ActiveSound ; } ; TMap<FTraceHandle,FAsyncTraceDetails> TraceToActiveSoundMap ; FTraceDelegate ActiveSoundTraceDelegate ; int32 ClosestListenerIndex = INDEX_NONE ; class FAudioDevice ; void)",
    "insertText": "MarkPendingDestroy(bool bDestroyNow)"
  },
  {
    "label": "IsStopping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStopping()"
  },
  {
    "label": "UpdateConcurrencyVolumeScalars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConcurrencyVolumeScalars(const float DeltaTime)"
  },
  {
    "label": "CheckOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckOcclusion(const FVector ListenerLocation, const FVector SoundLocation, const FSoundAttenuationSettings* AttenuationSettingsPtr)"
  },
  {
    "label": "GatherInteriorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInteriorData(FSoundParseParameters& ParseParams)"
  },
  {
    "label": "HandleInteriorVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInteriorVolumes(FSoundParseParameters& ParseParams)"
  },
  {
    "label": "GetAttenuationFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAttenuationFrequency(const FSoundAttenuationSettings* InSettings, const FAttenuationListenerData& ListenerData, const FVector2D& FrequencyRange, const FRuntimeFloatCurve& CustomCurve)"
  }
]