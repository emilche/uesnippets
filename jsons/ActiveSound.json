[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "FSoundSubmixSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSubmixSendInfo"
  },
  {
    "label": "FSoundSourceBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSourceBusSendInfo"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListener"
  },
  {
    "label": "FAttenuationListenerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationListenerData"
  },
  {
    "label": "FAttenuationFocusData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationFocusData"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "desires",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "desires"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "forces",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "forces"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "of"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListener"
  },
  {
    "label": "FAsyncTraceDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncTraceDetails"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FActiveSound()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FActiveSound()"
  },
  {
    "label": "FActiveSound()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FActiveSound(const FActiveSound&)"
  },
  {
    "label": "ClearAudioComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAudioComponent()"
  },
  {
    "label": "SetAudioComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioComponent(const FActiveSound& ActiveSound)"
  },
  {
    "label": "SetAudioComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioComponent(const UAudioComponent& Component)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(const AActor* Owner)"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorld(UWorld* World)"
  },
  {
    "label": "SetPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitch(float Value)"
  },
  {
    "label": "SetVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolume(float Value)"
  },
  {
    "label": "SetSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSound(USoundBase* InSound)"
  },
  {
    "label": "SetSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceEffectChain(USoundEffectSourcePresetChain* InSourceEffectChain)"
  },
  {
    "label": "SetSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundClass(USoundClass* SoundClass)"
  },
  {
    "label": "SetAttenuationSettingsAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttenuationSettingsAsset(TObjectPtr<USoundAttenuation> InSoundAttenuation)"
  },
  {
    "label": "SetAttenuationSettingsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttenuationSettingsOverride(bool bInIsAttenuationSettingsOverridden)"
  },
  {
    "label": "UpdateInterfaceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInterfaceParameters(const TArray<FListener>& InListeners)"
  },
  {
    "label": "UpdateWaveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWaveInstances(TArray<FWaveInstance*> &OutWaveInstances, const float DeltaTime)"
  },
  {
    "label": "RemoveWaveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWaveInstance(const UPTRINT WaveInstanceHash)"
  },
  {
    "label": "ApplyRadioFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRadioFilter(const FSoundParseParameters& ParseParams)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects( FReferenceCollector& Collector )"
  },
  {
    "label": "ResetNewBusSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNewBusSends()"
  },
  {
    "label": "SetNewModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewModulationRouting(const FSoundModulationDefaultRoutingSettings& NewRouting)"
  },
  {
    "label": "AddModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModulationRouting(const TSet<TObjectPtr<USoundModulatorBase>>& NewModulators, EModulationDestination Destination)"
  },
  {
    "label": "RemoveModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveModulationRouting(const TSet<TObjectPtr<USoundModulatorBase>>& NewModulators, EModulationDestination Destination)"
  },
  {
    "label": "OcclusionTraceDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OcclusionTraceDone(const FTraceHandle& TraceHandle, FTraceDatum& TraceDatum)"
  },
  {
    "label": "ParseAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseAttenuation(FSoundParseParameters& OutParseParams, const FListener& InListener, const FSoundAttenuationSettings& InAttenuationSettings)"
  },
  {
    "label": "ParseAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseAttenuation(FSoundParseParameters& OutParseParams, int32 ListenerIndex, const FSoundAttenuationSettings& InAttenuationSettings)"
  },
  {
    "label": "SetSubmixSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixSend(const FSoundSubmixSendInfo& SubmixSendInfo)"
  },
  {
    "label": "SetSourceBusSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceBusSend(EBusSendType BusSendType, const FSoundSourceBusSendInfo& SourceBusSendInfo)"
  },
  {
    "label": "UpdateAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttenuation(float DeltaTime, FSoundParseParameters& ParseParams, const FListener& Listener, const FSoundAttenuationSettings* SettingsAttenuationNode = nullptr)"
  },
  {
    "label": "UpdateAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttenuation(float DeltaTime, FSoundParseParameters& ParseParams, int32 ListenerIndex, const FSoundAttenuationSettings* SettingsAttenuationNode = nullptr)"
  },
  {
    "label": "UpdateFocusData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFocusData(float DeltaTime, const FAttenuationListenerData& ListenerData, FAttenuationFocusData* OutFocusData = nullptr)"
  },
  {
    "label": "AddVolumeSubmixSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVolumeSubmixSends(FSoundParseParameters& ParseParams, EAudioVolumeLocationState LocationState)"
  },
  {
    "label": "MarkPendingDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPendingDestroy(bool bDestroyNow)"
  },
  {
    "label": "UpdateStoppingSources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateStoppingSources(uint64 CurrentTick, bool bEnsureStopped)"
  },
  {
    "label": "UpdateConcurrencyVolumeScalars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConcurrencyVolumeScalars(const float DeltaTime)"
  },
  {
    "label": "CheckOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckOcclusion(const FVector ListenerLocation, const FVector SoundLocation, const FSoundAttenuationSettings* AttenuationSettingsPtr)"
  },
  {
    "label": "GatherInteriorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInteriorData(FSoundParseParameters& ParseParams)"
  },
  {
    "label": "HandleInteriorVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInteriorVolumes(FSoundParseParameters& ParseParams)"
  },
  {
    "label": "GetAttenuationFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAttenuationFrequency(const FSoundAttenuationSettings* InSettings, const FAttenuationListenerData& ListenerData, const FVector2D& FrequencyRange, const FRuntimeFloatCurve& CustomCurve)"
  }
]