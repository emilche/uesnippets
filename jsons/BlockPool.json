[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / ExportBegin . h \" # include<cassert> # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "CBlockPool()",
    "kind": "Method",
    "detail": "Function (template<bool bUseCustomAllocator = true> class ST_DLL_LINK CBlockPool { public :)",
    "insertText": "CBlockPool(size_t uiBlockSize, size_t uiNum = 10)"
  },
  {
    "label": "CBlockPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CBlockPool(void)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size(void)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size_t uiSize)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear(bool bForce = false)"
  },
  {
    "label": "GrabBlock()",
    "kind": "Method",
    "detail": "Function (typedef void* CReference ; CReference)",
    "insertText": "GrabBlock(void)"
  },
  {
    "label": "ReleaseBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBlock(CReference& cRef)"
  },
  {
    "label": "ResolveBlock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ResolveBlock(const CReference& cRef)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : CBlockPool&)",
    "insertText": "operator(const CBlockPool& cR)"
  }
]