[
  {
    "label": "ISourceControlRevision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlRevision"
  },
  {
    "label": "ISourceControlState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlState"
  },
  {
    "label": "ISourceControlChangelist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlChangelist"
  },
  {
    "label": "FResolveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveInfo"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if SOURCE_CONTROL_WITH_SLATE # include \" Textures / SlateIcon . h \" # endif class ISourceControlRevision ; class ISourceControlState ; typedef TSharedRef<class ISourceControlState,ESPMode::ThreadSafe> FSourceControlStateRef ; typedef TSharedPtr<class ISourceControlState,ESPMode::ThreadSafe> FSourceControlStatePtr ; class ISourceControlChangelist ; typedef TSharedRef<class ISourceControlChangelist,ESPMode::ThreadSafe> FSourceControlChangelistRef ; typedef TSharedPtr<class ISourceControlChangelist,ESPMode::ThreadSafe> FSourceControlChangelistPtr ; class ISourceControlState : public TSharedFromThis<ISourceControlState,ESPMode::ThreadSafe> { public : enum { INVALID_REVISION = - 1 } ; struct FResolveInfo { FString RemoteFile ; FString BaseFile ; FString RemoteRevision ; FString BaseRevision ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "ISourceControlState()",
    "kind": "Method",
    "detail": "Function (} } ; ~)",
    "insertText": "ISourceControlState()"
  },
  {
    "label": "GetHistorySize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHistorySize()"
  },
  {
    "label": "GetHistoryItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ISourceControlRevision,ESPMode::ThreadSafe>)",
    "insertText": "GetHistoryItem(int32 HistoryIndex)"
  },
  {
    "label": "FindHistoryRevision()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ISourceControlRevision,ESPMode::ThreadSafe>)",
    "insertText": "FindHistoryRevision(int32 RevisionNumber)"
  },
  {
    "label": "FindHistoryRevision()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ISourceControlRevision,ESPMode::ThreadSafe>)",
    "insertText": "FindHistoryRevision(const FString& InRevision)"
  },
  {
    "label": "GetResolveInfo()",
    "kind": "Method",
    "detail": "Function (} FResolveInfo)",
    "insertText": "GetResolveInfo()"
  },
  {
    "label": "GetIcon()",
    "kind": "Method",
    "detail": "Function (# if SOURCE_CONTROL_WITH_SLATE FSlateIcon)",
    "insertText": "GetIcon()"
  },
  {
    "label": "GetDisplayTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayTooltip()"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetFilename()"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (const FDateTime&)",
    "insertText": "GetTimeStamp()"
  },
  {
    "label": "CanCheckIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCheckIn()"
  },
  {
    "label": "CanCheckout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCheckout()"
  },
  {
    "label": "IsCheckedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckedOut()"
  },
  {
    "label": "IsCheckedOutOther()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckedOutOther(FString* Who = NULL)"
  },
  {
    "label": "IsCheckedOutInOtherBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckedOutInOtherBranch(const FString& CurrentBranch = FString())"
  },
  {
    "label": "IsModifiedInOtherBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModifiedInOtherBranch(const FString& CurrentBranch = FString())"
  },
  {
    "label": "IsCheckedOutOrModifiedInOtherBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckedOutOrModifiedInOtherBranch(const FString& CurrentBranch = FString())"
  },
  {
    "label": "GetCheckedOutBranches()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetCheckedOutBranches()"
  },
  {
    "label": "GetOtherUserBranchCheckedOuts()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOtherUserBranchCheckedOuts()"
  },
  {
    "label": "GetOtherBranchHeadModification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOtherBranchHeadModification(FString& HeadBranchOut, FString& ActionOut, int32& HeadChangeListOut)"
  },
  {
    "label": "GetCheckInIdentifier()",
    "kind": "Method",
    "detail": "Function (FSourceControlChangelistPtr)",
    "insertText": "GetCheckInIdentifier()"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "IsSourceControlled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceControlled()"
  },
  {
    "label": "IsLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocal()"
  },
  {
    "label": "IsAdded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAdded()"
  },
  {
    "label": "IsDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeleted()"
  },
  {
    "label": "IsIgnored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIgnored()"
  },
  {
    "label": "CanEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEdit()"
  },
  {
    "label": "CanDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelete()"
  },
  {
    "label": "IsUnknown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnknown()"
  },
  {
    "label": "IsModified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModified()"
  },
  {
    "label": "CanAdd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAdd()"
  },
  {
    "label": "IsConflicted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConflicted()"
  },
  {
    "label": "CanRevert()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRevert()"
  },
  {
    "label": "GetWarningText()",
    "kind": "Method",
    "detail": "Function (TOptional<FText>)",
    "insertText": "GetWarningText()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TOptional<FText> WarningText ;)",
    "insertText": "if(IsConflicted() || !IsCurrent() || IsCheckedOutOther() || (!IsCheckedOut() && (IsCheckedOutInOtherBranch() || IsModifiedInOtherBranch())))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (WarningText .)",
    "insertText": "Emplace(GetDisplayTooltip())"
  },
  {
    "label": "GetStatusText()",
    "kind": "Method",
    "detail": "Function (} return WarningText ; } TOptional<FText>)",
    "insertText": "GetStatusText()"
  }
]