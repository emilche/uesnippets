[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDragTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragTool"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FMouseDeltaTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMouseDeltaTracker"
  },
  {
    "label": "FMouseDeltaTracker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" UnrealWidgetFwd . h \" class FCanvas ; class FDragTool ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; struct FInputEventState ; class FMouseDeltaTracker { public :)",
    "insertText": "FMouseDeltaTracker()"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, const int32 InX, const int32 InY, const FInputEventState& InInputState, bool bNudge = false, bool bResetDragToolState = true)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "AddDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDelta(FEditorViewportClient* InViewportClient, FKey InKey, const int32 InDelta, bool InNudge)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetDelta()"
  },
  {
    "label": "GetDeltaSnapped()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetDeltaSnapped()"
  },
  {
    "label": "GetAbsoluteDelta()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetAbsoluteDelta()"
  },
  {
    "label": "GetAbsoluteDeltaSnapped()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetAbsoluteDeltaSnapped()"
  },
  {
    "label": "GetScreenDelta()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetScreenDelta()"
  },
  {
    "label": "GetRawDelta()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetRawDelta()"
  },
  {
    "label": "GetDragStartPos()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "GetDragStartPos()"
  },
  {
    "label": "GetUsedDragModifier()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "GetUsedDragModifier()"
  },
  {
    "label": "ResetUsedDragModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetUsedDragModifier()"
  },
  {
    "label": "ConvertMovementDeltaToDragRot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMovementDeltaToDragRot(FSceneView* InView, FEditorViewportClient* InViewportClient, FVector& InDragDelta, FVector& OutDrag, FRotator& OutRotation, FVector& OutScale)"
  },
  {
    "label": "AbsoluteTranslationConvertMouseToDragRot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteTranslationConvertMouseToDragRot(FSceneView* InView, FEditorViewportClient* InViewportClient, FVector& OutDrag, FRotator& OutRotation, FVector& OutScale)"
  },
  {
    "label": "ReduceBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReduceBy(const FVector& In)"
  },
  {
    "label": "UsingDragTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingDragTool()"
  },
  {
    "label": "HasReceivedDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReceivedDelta()"
  },
  {
    "label": "WasExternalMovement()",
    "kind": "Method",
    "detail": "Function (bExternalMovement = InExternalMovement ; } ; bool)",
    "insertText": "WasExternalMovement(void)"
  },
  {
    "label": "RenderDragTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDragTool(const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "GetTrackingWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetTrackingWidgetMode()"
  },
  {
    "label": "DetermineCurrentAxis()",
    "kind": "Method",
    "detail": "Function (private : FVector Start ; FVector StartSnapped ; FVector StartScreen ; FVector End ; FVector EndSnapped ; FVector EndScreen ; FVector RawDelta ; FVector ReductionAmount ; TSharedPtr<FDragTool> DragTool ; bool bHasReceivedAddDelta ; bool bHasAttemptedDragTool ; bool bExternalMovement ; bool bUsedDragModifier ; bool bIsDeletingDragTool ; UE::Widget::EWidgetMode TrackingWidgetMode ; void)",
    "insertText": "DetermineCurrentAxis(FEditorViewportClient* InViewportClient)"
  }
]