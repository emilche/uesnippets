[
  {
    "label": "FVulkanCommandBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandBufferPool"
  },
  {
    "label": "FVulkanDSetKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDSetKey"
  },
  {
    "label": "FVulkanDSetsKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDSetsKey"
  },
  {
    "label": "FUniformBufferGatherInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformBufferGatherInfo"
  },
  {
    "label": "FVulkanDescriptorSetsLayoutInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetsLayoutInfo"
  },
  {
    "label": "FSetLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetLayout"
  },
  {
    "label": "FStageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStageInfo"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FVulkanCommonPipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommonPipelineDescriptorState"
  },
  {
    "label": "FVulkanLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLayout"
  },
  {
    "label": "FVulkanDescriptorSetLayoutEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanDescriptorSetLayoutEntry"
  },
  {
    "label": "FVulkanDescriptorSetsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetsLayout"
  },
  {
    "label": "FVulkanDescriptorPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPool"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanTypedDescriptorPoolSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTypedDescriptorPoolSet"
  },
  {
    "label": "FVulkanDescriptorPoolSetContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPoolSetContainer"
  },
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "FVulkanDescriptorPoolsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPoolsManager"
  },
  {
    "label": "FVulkanAsyncPoolSetDeletionWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanAsyncPoolSetDeletionWorker"
  },
  {
    "label": "FVulkanDescriptorSetWriteContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanDescriptorSetWriteContainer"
  },
  {
    "label": "FVulkanDescriptorSetWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetWriter"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipelineDescriptorState"
  },
  {
    "label": "FVulkanGraphicsPipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGraphicsPipelineDescriptorState"
  },
  {
    "label": "FVulkanDescriptorSetCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetCache"
  },
  {
    "label": "FVulkanBindlessDescriptorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanBindlessDescriptorManager"
  },
  {
    "label": "BindlessSetState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BindlessSetState"
  },
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "FVulkanGfxPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGfxPipeline"
  },
  {
    "label": "FVulkanRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingPipelineState"
  },
  {
    "label": "FVulkanGenericDescriptorPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGenericDescriptorPool"
  },
  {
    "label": "FSetsEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetsEntry"
  },
  {
    "label": "FCachedPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedPool"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" VulkanConfiguration . h \" # include \" VulkanDevice . h \" # include \" VulkanMemory . h \" # include \" VulkanRHIPrivate . h \" # include \" VulkanShaderResources . h \" #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FUniformBufferGatherInfo()",
    "kind": "Method",
    "detail": "Function (class FVulkanDSetKey : public TDataKey<FVulkanDSetKey,true> { } ; class FVulkanDSetsKey : public TDataKey<FVulkanDSetsKey,true> { } ; struct FUniformBufferGatherInfo {)",
    "insertText": "FUniformBufferGatherInfo()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(CodeHeaders)"
  },
  {
    "label": "FVulkanDescriptorSetsLayoutInfo()",
    "kind": "Method",
    "detail": "Function (} const FVulkanShaderHeader* CodeHeaders [ ShaderStage::MaxNumStages ] ; } ; class FVulkanDescriptorSetsLayoutInfo { public :)",
    "insertText": "FVulkanDescriptorSetsLayoutInfo()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LayoutTypes .)",
    "insertText": "Add(static_cast<VkDescriptorType>(i), 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} LayoutTypes .)",
    "insertText": "Add(VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR, 0)"
  },
  {
    "label": "GetTypesUsed()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypesUsed(VkDescriptorType Type)"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "MemCrc32(LayoutBindings.GetData(), sizeof(VkDescriptorSetLayoutBinding) * LayoutBindings.Num())"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSetLayout& In)"
  },
  {
    "label": "GetLayouts()",
    "kind": "Method",
    "detail": "Function (} } ; const TArray<FSetLayout>&)",
    "insertText": "GetLayouts()"
  },
  {
    "label": "FinalizeBindings()",
    "kind": "Method",
    "detail": "Function (template<bool bIsCompute> void)",
    "insertText": "FinalizeBindings(const FVulkanDevice& Device, const FUniformBufferGatherInfo& UBGatherInfo, const TArrayView<FRHISamplerState*>& ImmutableSamplers)"
  },
  {
    "label": "GenerateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHash(const TArrayView<FRHISamplerState*>& ImmutableSamplers, VkPipelineBindPoint InBindPoint)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FVulkanDescriptorSetsLayoutInfo& In)"
  },
  {
    "label": "GetLayoutTypes()",
    "kind": "Method",
    "detail": "Function (LayoutTypes = Info . LayoutTypes ; Hash = Info . Hash ; TypesUsageID = Info . TypesUsageID ; SetLayouts = Info . SetLayouts ; StageInfos = Info . StageInfos ; } const TMap<VkDescriptorType,uint32>&)",
    "insertText": "GetLayoutTypes()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} struct FStageInfo { TArray<VkDescriptorType> Types ; uint32 PackedGlobalsSize = 0 ; uint32 NumBoundUniformBuffers = 0 ; uint16 NumImageInfos = 0 ; uint16 NumBufferInfos = 0 ; uint16 NumAccelerationStructures = 0 ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "AddDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDescriptor(int32 DescriptorSetIndex, const VkDescriptorSetLayoutBinding& Descriptor)"
  },
  {
    "label": "FVulkanDescriptorSetsLayout()",
    "kind": "Method",
    "detail": "Function (class FVulkanPipelineStateCacheManager ; class FVulkanCommonPipelineDescriptorState ; class FVulkanLayout ; } ; struct FVulkanDescriptorSetLayoutEntry { VkDescriptorSetLayout Handle = 0 ; uint32 HandleId = 0 ; } ; using FVulkanDescriptorSetLayoutMap = TMap<FVulkanDescriptorSetsLayoutInfo::FSetLayout,FVulkanDescriptorSetLayoutEntry> ; class FVulkanDescriptorSetsLayout : public FVulkanDescriptorSetsLayoutInfo { public :)",
    "insertText": "FVulkanDescriptorSetsLayout(FVulkanDevice* InDevice)"
  },
  {
    "label": "FVulkanDescriptorSetsLayout()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanDescriptorSetsLayout()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile(FVulkanDescriptorSetLayoutMap& DSetLayoutMap)"
  },
  {
    "label": "GetHandles()",
    "kind": "Method",
    "detail": "Function (const TArray<VkDescriptorSetLayout>&)",
    "insertText": "GetHandles()"
  },
  {
    "label": "FVulkanDescriptorPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanDescriptorPool()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (VkDescriptorPool)",
    "insertText": "GetHandle()"
  },
  {
    "label": "TrackAddUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrackAddUsage(const FVulkanDescriptorSetsLayout& InLayout)"
  },
  {
    "label": "TrackRemoveUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackRemoveUsage(const FVulkanDescriptorSetsLayout& InLayout)"
  },
  {
    "label": "AllocateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateDescriptorSets(const VkDescriptorSetAllocateInfo& InDescriptorSetAllocateInfo, VkDescriptorSet* OutSets)"
  },
  {
    "label": "GetNumAllocatedDescriptorSets()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumAllocatedDescriptorSets()"
  },
  {
    "label": "PushNewPool()",
    "kind": "Method",
    "detail": "Function (FVulkanDescriptorPool*)",
    "insertText": "PushNewPool()"
  },
  {
    "label": "FVulkanTypedDescriptorPoolSet()",
    "kind": "Method",
    "detail": "Function (protected : class FVulkanDescriptorPoolSetContainer ; class FVulkanCmdBuffer ;)",
    "insertText": "FVulkanTypedDescriptorPoolSet(FVulkanDevice* InDevice, const FVulkanDescriptorSetsLayout& InLayout) : Device(InDevice) , Layout(InLayout) , PoolsCount(0)"
  },
  {
    "label": "FVulkanTypedDescriptorPoolSet()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FVulkanTypedDescriptorPoolSet()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AllocateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "AllocateDescriptorSets(const FVulkanDescriptorSetsLayout& Layout, VkDescriptorSet* OutSets)"
  },
  {
    "label": "FVulkanDescriptorPoolSetContainer()",
    "kind": "Method",
    "detail": "Function (private : FVulkanDevice* Device ; const FVulkanDescriptorSetsLayout& Layout ; uint32 PoolsCount ; FPoolList* PoolListHead = nullptr ; FPoolList* PoolListCurrent = nullptr ; } ; class FVulkanDescriptorPoolSetContainer { public :)",
    "insertText": "FVulkanDescriptorPoolSetContainer(FVulkanDevice* InDevice) : Device(InDevice) , LastFrameUsed(GFrameNumberRenderThread) , bUsed(true)"
  },
  {
    "label": "FVulkanDescriptorPoolSetContainer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanDescriptorPoolSetContainer()"
  },
  {
    "label": "AcquireTypedPoolSet()",
    "kind": "Method",
    "detail": "Function (FVulkanTypedDescriptorPoolSet*)",
    "insertText": "AcquireTypedPoolSet(const FVulkanDescriptorSetsLayout& Layout)"
  },
  {
    "label": "SetUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUsed(bool bInUsed)"
  },
  {
    "label": "IsUnused()",
    "kind": "Method",
    "detail": "Function (bUsed = bInUsed ; LastFrameUsed = bUsed ? GFrameNumberRenderThread : LastFrameUsed ; } bool)",
    "insertText": "IsUnused()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DoWork()"
  },
  {
    "label": "SetPoolSet()",
    "kind": "Method",
    "detail": "Function (delete PoolSet ; PoolSet = nullptr ; } void)",
    "insertText": "SetPoolSet(FVulkanDescriptorPoolSetContainer* InPoolSet)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (PoolSet = InPoolSet ; } TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "FVulkanDescriptorPoolsManager()",
    "kind": "Method",
    "detail": "Function (} } ; public : ~)",
    "insertText": "FVulkanDescriptorPoolsManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FVulkanDevice* InDevice)"
  },
  {
    "label": "AcquirePoolSetContainer()",
    "kind": "Method",
    "detail": "Function (Device = InDevice ; } FVulkanDescriptorPoolSetContainer&)",
    "insertText": "AcquirePoolSetContainer()"
  },
  {
    "label": "ReleasePoolSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePoolSet(FVulkanDescriptorPoolSetContainer& PoolSet)"
  },
  {
    "label": "GC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GC()"
  },
  {
    "label": "FVulkanDescriptorSetWriter()",
    "kind": "Method",
    "detail": "Function (private : FVulkanDevice* Device = nullptr ; FAsyncTask<FVulkanAsyncPoolSetDeletionWorker>* AsyncDeletionTask = nullptr ; FCriticalSection CS ; TArray<FVulkanDescriptorPoolSetContainer*> PoolSets ; } ; union FVulkanHashableDescriptorInfo { struct { uint32 Max0 ; uint32 Max1 ; uint32 LayoutId ; } Layout ; struct { uint32 Id ; uint32 Offset ; uint32 Range ; } Buffer ; struct { uint32 SamplerId ; uint32 ImageViewId ; uint32 ImageLayout ; } Image ; struct { uint32 Id ; uint32 Zero1 ; uint32 Zero2 ; } BufferView ; } ; struct FVulkanDescriptorSetWriteContainer { TArray<FVulkanHashableDescriptorInfo> HashableDescriptorInfo ; TArray<VkDescriptorImageInfo> DescriptorImageInfo ; TArray<VkDescriptorBufferInfo> DescriptorBufferInfo ; TArray<VkWriteDescriptorSet> DescriptorWrites ; TArray<VkAccelerationStructureKHR> AccelerationStructures ; TArray<VkWriteDescriptorSetAccelerationStructureKHR> AccelerationStructureWrites ; TArray<uint8> BindingToDynamicOffsetMap ; } ; class FVulkanDescriptorSetWriter { public :)",
    "insertText": "FVulkanDescriptorSetWriter() : WriteDescriptors(nullptr) , BindingToDynamicOffsetMap(nullptr) , DynamicOffsets(nullptr) , NumWrites(0) , HashableDescriptorInfos(nullptr) , bIsKeyDirty(true)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} const FVulkanDSetKey&)",
    "insertText": "GetKey()"
  },
  {
    "label": "GenerateFromData()",
    "kind": "Method",
    "detail": "Function (Key .)",
    "insertText": "GenerateFromData(HashableDescriptorInfos, sizeof(FVulkanHashableDescriptorInfo) * (NumWrites + 1))"
  },
  {
    "label": "GetWriteDescriptors()",
    "kind": "Method",
    "detail": "Function (bIsKeyDirty = false ; } return Key ; } const VkWriteDescriptorSet*)",
    "insertText": "GetWriteDescriptors()"
  },
  {
    "label": "WriteDynamicUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteDynamicUniformBuffer(uint32 DescriptorIndex, VkBuffer BufferHandle, uint32 HandleId, VkDeviceSize Offset, VkDeviceSize Range, uint32 DynamicOffset)"
  },
  {
    "label": "WriteSampler()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteSampler(uint32 DescriptorIndex, const FVulkanSamplerState& Sampler)"
  },
  {
    "label": "VkDescriptorImageInfo()",
    "kind": "Method",
    "detail": "Function (VkDescriptorImageInfo* ImageInfo = const_cast<)",
    "insertText": "VkDescriptorImageInfo(WriteDescriptors[DescriptorIndex].pImageInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bChanged = false ;)",
    "insertText": "if(UseVulkanDescriptorCache())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FVulkanHashableDescriptorInfo& HashableInfo = HashableDescriptorInfos [ DescriptorIndex ] ;)",
    "insertText": "check(Sampler.SamplerId > 0)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (HashableInfo . Image . SamplerId = Sampler . SamplerId ; ImageInfo -> sampler = Sampler . Sampler ; bChanged = true ; } bIsKeyDirty | = bChanged ; } else { bChanged =)",
    "insertText": "CopyAndReturnNotEqual(ImageInfo->sampler, Sampler.Sampler)"
  },
  {
    "label": "WriteImage()",
    "kind": "Method",
    "detail": "Function (} return bChanged ; } bool)",
    "insertText": "WriteImage(uint32 DescriptorIndex, const FVulkanView::FTextureView& TextureView, VkImageLayout Layout)"
  },
  {
    "label": "WriteInputAttachment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteInputAttachment(uint32 DescriptorIndex, const FVulkanView::FTextureView& TextureView, VkImageLayout Layout)"
  },
  {
    "label": "WriteStorageImage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteStorageImage(uint32 DescriptorIndex, const FVulkanView::FTextureView& TextureView, VkImageLayout Layout)"
  },
  {
    "label": "WriteStorageTexelBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteStorageTexelBuffer(uint32 DescriptorIndex, const FVulkanView::FTypedBufferView& View)"
  },
  {
    "label": "WriteStorageBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteStorageBuffer(uint32 DescriptorIndex, const FVulkanView::FStructuredBufferView& View)"
  },
  {
    "label": "WriteUniformTexelBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteUniformTexelBuffer(uint32 DescriptorIndex, const FVulkanView::FTypedBufferView& View)"
  },
  {
    "label": "WriteAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteAccelerationStructure(uint32 DescriptorIndex, VkAccelerationStructureKHR InAccelerationStructure)"
  },
  {
    "label": "SetWritten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWritten(DescriptorIndex)"
  },
  {
    "label": "VkBaseInStructure()",
    "kind": "Method",
    "detail": "Function (const VkWriteDescriptorSetAccelerationStructureKHR* FoundWrite = nullptr ; const VkBaseInStructure* Cursor = reinterpret_cast<const)",
    "insertText": "VkBaseInStructure(WriteDescriptors[DescriptorIndex].pNext)"
  },
  {
    "label": "VkWriteDescriptorSetAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (FoundWrite = reinterpret_cast<const)",
    "insertText": "VkWriteDescriptorSetAccelerationStructureKHR(Cursor)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (break ; } Cursor = Cursor -> pNext ; })",
    "insertText": "checkf(FoundWrite, TEXT(\"Expected to find a VkWriteDescriptorSetAccelerationStructureKHR that's needed to bind an acceleration structure descriptor. \") TEXT(\"Possibly something went wrong in SetupDescriptorWrites().\"))"
  },
  {
    "label": "VkAccelerationStructureKHR()",
    "kind": "Method",
    "detail": "Function (VkAccelerationStructureKHR& AccelerationStructure =* const_cast<)",
    "insertText": "VkAccelerationStructureKHR(FoundWrite->pAccelerationStructures)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (bool bChanged =)",
    "insertText": "CopyAndReturnNotEqual(AccelerationStructure, InAccelerationStructure)"
  },
  {
    "label": "WriteBuffer()",
    "kind": "Method",
    "detail": "Function (WriteDescriptors [ Index ] . dstSet = DescriptorSet ; } } protected : template<VkDescriptorType DescriptorType> bool)",
    "insertText": "WriteBuffer(uint32 DescriptorIndex, VkBuffer BufferHandle, uint32 HandleId, VkDeviceSize Offset, VkDeviceSize Range, uint32 DynamicOffset = 0)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(WriteDescriptors[DescriptorIndex].descriptorType == DescriptorType, TEXT(\"DescriptorType mismatch at index %d: called WriteBuffer<%s> and was expecting %s.\"), DescriptorIndex, VK_TYPE_TO_STRING(VkDescriptorType, DescriptorType), VK_TYPE_TO_STRING(VkDescriptorType, WriteDescriptors[DescriptorIndex].descriptorType))"
  },
  {
    "label": "VkDescriptorBufferInfo()",
    "kind": "Method",
    "detail": "Function (} VkDescriptorBufferInfo* BufferInfo = const_cast<)",
    "insertText": "VkDescriptorBufferInfo(WriteDescriptors[DescriptorIndex].pBufferInfo)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FVulkanHashableDescriptorInfo& HashableInfo = HashableDescriptorInfos [ DescriptorIndex ] ;)",
    "insertText": "check(HandleId > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HashableInfo . Buffer . Id = HandleId ; BufferInfo -> buffer = BufferHandle ; bChanged = true ; })",
    "insertText": "if(HashableInfo.Buffer.Offset != static_cast<uint32>(Offset))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (HashableInfo . Buffer . Offset = static_cast<)",
    "insertText": "uint32(Offset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BufferInfo -> offset = Offset ; bChanged = true ; })",
    "insertText": "if(HashableInfo.Buffer.Range != static_cast<uint32>(Range))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (HashableInfo . Buffer . Range = static_cast<)",
    "insertText": "uint32(Range)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (BufferInfo -> range = Range ; bChanged = true ; } bIsKeyDirty | = bChanged ; } else { bChanged =)",
    "insertText": "CopyAndReturnNotEqual(BufferInfo->buffer, BufferHandle)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (bChanged | =)",
    "insertText": "CopyAndReturnNotEqual(BufferInfo->offset, Offset)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (bChanged | =)",
    "insertText": "CopyAndReturnNotEqual(BufferInfo->range, Range)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DescriptorType == VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC)"
  },
  {
    "label": "WriteTextureView()",
    "kind": "Method",
    "detail": "Function (const uint8 DynamicOffsetIndex = BindingToDynamicOffsetMap [ DescriptorIndex ] ; DynamicOffsets [ DynamicOffsetIndex ] = DynamicOffset ; } return bChanged ; } template<VkDescriptorType DescriptorType> bool)",
    "insertText": "WriteTextureView(uint32 DescriptorIndex, const FVulkanView::FTextureView& TextureView, VkImageLayout Layout)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(WriteDescriptors[DescriptorIndex].descriptorType == DescriptorType, TEXT(\"DescriptorType mismatch at index %d: called WriteTextureView<%s> and was expecting %s.\"), DescriptorIndex, VK_TYPE_TO_STRING(VkDescriptorType, DescriptorType), VK_TYPE_TO_STRING(VkDescriptorType, WriteDescriptors[DescriptorIndex].descriptorType))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FVulkanHashableDescriptorInfo& HashableInfo = HashableDescriptorInfos [ DescriptorIndex ] ;)",
    "insertText": "check(TextureView.ViewId > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HashableInfo . Image . ImageViewId = TextureView . ViewId ; ImageInfo -> imageView = TextureView . View ; bChanged = true ; })",
    "insertText": "if(HashableInfo.Image.ImageLayout != static_cast<uint32>(Layout))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (HashableInfo . Image . ImageLayout = static_cast<)",
    "insertText": "uint32(Layout)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (ImageInfo -> imageLayout = Layout ; bChanged = true ; } bIsKeyDirty | = bChanged ; } else { bChanged =)",
    "insertText": "CopyAndReturnNotEqual(ImageInfo->imageView, TextureView.View)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (bChanged | =)",
    "insertText": "CopyAndReturnNotEqual(ImageInfo->imageLayout, Layout)"
  },
  {
    "label": "WriteBufferView()",
    "kind": "Method",
    "detail": "Function (} return bChanged ; } template<VkDescriptorType DescriptorType> bool)",
    "insertText": "WriteBufferView(uint32 DescriptorIndex, const FVulkanView::FTypedBufferView& View)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WriteDescriptors [ DescriptorIndex ] . pTexelBufferView =& View . View ; const bool bVolatile = View . bVolatile ; bHasVolatileResources | = bVolatile ;)",
    "insertText": "if(!bVolatile && UseVulkanDescriptorCache())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bool bChanged = false ; FVulkanHashableDescriptorInfo& HashableInfo = HashableDescriptorInfos [ DescriptorIndex ] ;)",
    "insertText": "check(View.ViewId > 0)"
  },
  {
    "label": "SetupDescriptorWrites()",
    "kind": "Method",
    "detail": "Function (HashableInfo . BufferView . Id = View . ViewId ; bChanged = true ; } bIsKeyDirty | = bChanged ; return bChanged ; } else { return true ; } } protected : VkWriteDescriptorSet* WriteDescriptors ; uint8* BindingToDynamicOffsetMap ; uint32* DynamicOffsets ; uint32 NumWrites ; FVulkanHashableDescriptorInfo* HashableDescriptorInfos ; FVulkanDSetKey Key ; bool bIsKeyDirty ; bool bHasVolatileResources = false ; uint32)",
    "insertText": "SetupDescriptorWrites(const TArray<VkDescriptorType>& Types, FVulkanHashableDescriptorInfo* InHashableDescriptorInfos, VkWriteDescriptorSet* InWriteDescriptors, VkDescriptorImageInfo* InImageInfo, VkDescriptorBufferInfo* InBufferInfo, uint8* InBindingToDynamicOffsetMap, VkWriteDescriptorSetAccelerationStructureKHR* InAccelerationStructuresWriteDescriptors, VkAccelerationStructureKHR* InAccelerationStructures, const FVulkanSamplerState& DefaultSampler, const FVulkanView::FTextureView& DefaultImageView)"
  },
  {
    "label": "CheckAllWritten()",
    "kind": "Method",
    "detail": "Function (class FVulkanCommonPipelineDescriptorState ; class FVulkanComputePipelineDescriptorState ; class FVulkanGraphicsPipelineDescriptorState ; class FVulkanDescriptorSetCache ; # if VULKAN_VALIDATE_DESCRIPTORS_WRITTEN TArray<uint32,TInlineAllocator<2>> WrittenMask ; TArray<uint32,TInlineAllocator<2>> BaseWrittenMask ; # endif void)",
    "insertText": "CheckAllWritten()"
  },
  {
    "label": "SetWritten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWritten(uint32 DescriptorIndex)"
  },
  {
    "label": "SetWrittenBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrittenBase(uint32 DescriptorIndex)"
  },
  {
    "label": "InitWrittenMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWrittenMasks(uint32 NumDescriptorWrites)"
  },
  {
    "label": "FVulkanBindlessDescriptorManager()",
    "kind": "Method",
    "detail": "Function (} ; class FVulkanBindlessDescriptorManager : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanBindlessDescriptorManager(FVulkanDevice* InDevice)"
  },
  {
    "label": "FVulkanBindlessDescriptorManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanBindlessDescriptorManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (typedef TStaticArray<TArray<VkDescriptorAddressInfoEXT>,ShaderStage::MaxNumStages> FUniformBufferDescriptorArrays ; void)",
    "insertText": "Init()"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "VerifySupport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifySupport(FVulkanDevice* InDevice)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "ReserveDescriptor()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "ReserveDescriptor(VkDescriptorType DescriptorType)"
  },
  {
    "label": "UpdateSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSampler(FRHIDescriptorHandle DescriptorHandle, VkSampler VulkanSampler)"
  },
  {
    "label": "UpdateImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateImage(FRHIDescriptorHandle DescriptorHandle, VkImageView VulkanImage, bool bIsDepthStencil, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuffer(FRHIDescriptorHandle DescriptorHandle, VkBuffer VulkanBuffer, VkDeviceSize BufferOffset, VkDeviceSize BufferSize, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuffer(FRHIDescriptorHandle DescriptorHandle, VkDeviceAddress BufferAddress, VkDeviceSize BufferSize, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateTexelBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTexelBuffer(FRHIDescriptorHandle DescriptorHandle, const VkBufferViewCreateInfo& ViewInfo, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAccelerationStructure(FRHIDescriptorHandle DescriptorHandle, VkAccelerationStructureKHR AccelerationStructure, bool bImmediateUpdate = true)"
  },
  {
    "label": "RegisterUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterUniformBuffers(FVulkanCmdBuffer* CommandBuffer, VkPipelineBindPoint BindPoint, const FUniformBufferDescriptorArrays& StageUBs)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(FRHIDescriptorHandle DescriptorHandle)"
  },
  {
    "label": "UpdateUBAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUBAllocator()"
  },
  {
    "label": "GetFreeResourceIndex()",
    "kind": "Method",
    "detail": "Function (private : const bool bIsSupported ; VkDescriptorSetLayout EmptyDescriptorSetLayout = VK_NULL_HANDLE ; struct BindlessSetState { VkDescriptorType DescriptorType = VK_DESCRIPTOR_TYPE_MAX_ENUM ; uint32 MaxDescriptorCount = 0 ; std::atomic<uint32> PeakDescriptorCount = 1 ; VkDescriptorSetLayout DescriptorSetLayout = VK_NULL_HANDLE ; FCriticalSection FreeListCS ; uint32 FreeListHead = MAX_uint32 ; uint32 DescriptorSize = 0 ; VkBuffer BufferHandle = VK_NULL_HANDLE ; VkDeviceMemory MemoryHandle = VK_NULL_HANDLE ; uint8* MappedPointer = nullptr ; TArray<uint8> DebugDescriptors ; } ; BindlessSetState BindlessSetStates [ VulkanBindless::NumBindlessSets ] ; VkDescriptorSetLayout SingleUseUBDescriptorSetLayout = VK_NULL_HANDLE ; VulkanRHI::FTempBlockAllocator* SingleUseUBAllocator = nullptr ; VkDescriptorBufferBindingInfoEXT BufferBindingInfo [ VulkanBindless::NumBindlessSets ] ; uint32_t BufferIndices [ VulkanBindless::MaxNumSets ] ; VkPipelineLayout BindlessPipelineLayout = VK_NULL_HANDLE ; uint32)",
    "insertText": "GetFreeResourceIndex(BindlessSetState& Desc)"
  },
  {
    "label": "UpdateStatsForHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsForHandle(FRHIDescriptorHandle DescriptorHandle)"
  },
  {
    "label": "UpdateDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDescriptor(FRHIDescriptorHandle DescriptorHandle, VkDescriptorDataEXT DescriptorData, bool bImmediateUpdate)"
  },
  {
    "label": "FVulkanLayout()",
    "kind": "Method",
    "detail": "Function (} ; class FVulkanLayout : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanLayout(FVulkanDevice* InDevice, bool InGfxLayout)"
  },
  {
    "label": "FVulkanLayout()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanLayout()"
  },
  {
    "label": "IsGfxLayout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGfxLayout()"
  },
  {
    "label": "HasDescriptors()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDescriptors()"
  },
  {
    "label": "GetDescriptorSetLayoutHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetDescriptorSetLayoutHash()"
  },
  {
    "label": "FinalizeBindings()",
    "kind": "Method",
    "detail": "Function (} protected : const bool bIsGfxLayout ; FVulkanDescriptorSetsLayout DescriptorSetLayout ; VkPipelineLayout PipelineLayout ; template<bool bIsCompute> void)",
    "insertText": "FinalizeBindings(const FUniformBufferGatherInfo& UBGatherInfo)"
  },
  {
    "label": "bIsCompute()",
    "kind": "Method",
    "detail": "Function (DescriptorSetLayout . FinalizeBindings<)",
    "insertText": "bIsCompute(UBGatherInfo)"
  },
  {
    "label": "ProcessBindingsForStage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessBindingsForStage(VkShaderStageFlagBits StageFlags, ShaderStage::EStage DescSet, const FVulkanShaderHeader& CodeHeader, FUniformBufferGatherInfo& OutUBGatherInfo)"
  },
  {
    "label": "ProcessBindingsForStage()",
    "kind": "Method",
    "detail": "Function (DescriptorSetLayout .)",
    "insertText": "ProcessBindingsForStage(StageFlags, DescSet, CodeHeader, OutUBGatherInfo)"
  },
  {
    "label": "FVulkanGenericDescriptorPool()",
    "kind": "Method",
    "detail": "Function (class FVulkanComputePipeline ; class FVulkanGfxPipeline ; class FVulkanPipelineStateCacheManager ; class FVulkanRayTracingPipelineState ; } ; class FVulkanGenericDescriptorPool : FNoncopyable { public :)",
    "insertText": "FVulkanGenericDescriptorPool(FVulkanDevice* InDevice, uint32 InMaxDescriptorSets, const float PoolSizes[VK_DESCRIPTOR_TYPE_RANGE_SIZE])"
  },
  {
    "label": "FVulkanGenericDescriptorPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanGenericDescriptorPool()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (FVulkanDevice*)",
    "insertText": "GetDevice()"
  },
  {
    "label": "AllocateDescriptorSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateDescriptorSet(VkDescriptorSetLayout Layout, VkDescriptorSet& OutSet)"
  },
  {
    "label": "FVulkanDescriptorSetCache()",
    "kind": "Method",
    "detail": "Function (private : FVulkanDevice* const Device ; const uint32 MaxDescriptorSets ; VkDescriptorPool DescriptorPool ; uint32 PoolSizes [ VK_DESCRIPTOR_TYPE_RANGE_SIZE ] ; } ; class FVulkanDescriptorSetCache : FNoncopyable { public :)",
    "insertText": "FVulkanDescriptorSetCache(FVulkanDevice* InDevice)"
  },
  {
    "label": "FVulkanDescriptorSetCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanDescriptorSetCache()"
  },
  {
    "label": "GetDescriptorSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescriptorSets(const FVulkanDSetsKey& DSetsKey, const FVulkanDescriptorSetsLayout& SetsLayout, TArray<FVulkanDescriptorSetWriter>& DSWriters, VkDescriptorSet* OutSets)"
  },
  {
    "label": "UpdateAllocRatio()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateAllocRatio()"
  },
  {
    "label": "AddCachedPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedPool()"
  },
  {
    "label": "FCachedPool()",
    "kind": "Method",
    "detail": "Function (private : struct FSetsEntry { TStaticArray<VkDescriptorSet,ShaderStage::MaxNumStages> Sets ; int32 NumSets ; } ; class FCachedPool : FNoncopyable { public :)",
    "insertText": "FCachedPool(FVulkanDevice* InDevice, uint32 InMaxDescriptorSets, const float PoolSizesRatio[VK_DESCRIPTOR_TYPE_RANGE_SIZE])"
  },
  {
    "label": "GetMaxDescriptorSets()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxDescriptorSets()"
  },
  {
    "label": "CanGC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGC()"
  },
  {
    "label": "CalcAllocRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcAllocRatio()"
  },
  {
    "label": "FindDescriptorSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDescriptorSets(const FVulkanDSetsKey& DSetsKey, VkDescriptorSet* OutSets)"
  },
  {
    "label": "CreateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDescriptorSets(const FVulkanDSetsKey& DSetsKey, const FVulkanDescriptorSetsLayout& SetsLayout, TArray<FVulkanDescriptorSetWriter>& DSWriters, VkDescriptorSet* OutSets)"
  },
  {
    "label": "CalcPoolSizesRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcPoolSizesRatio(float PoolSizesRatio[VK_DESCRIPTOR_TYPE_RANGE_SIZE])"
  }
]