[
  {
    "label": "FVulkanCommandBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandBufferPool"
  },
  {
    "label": "FVulkanDSetKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDSetKey"
  },
  {
    "label": "FVulkanDSetsKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDSetsKey"
  },
  {
    "label": "FUniformBufferGatherInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformBufferGatherInfo"
  },
  {
    "label": "FVulkanDescriptorSetsLayoutInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetsLayoutInfo"
  },
  {
    "label": "FSetLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetLayout"
  },
  {
    "label": "FStageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStageInfo"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FVulkanCommonPipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommonPipelineDescriptorState"
  },
  {
    "label": "FVulkanLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLayout"
  },
  {
    "label": "FVulkanDescriptorSetLayoutEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanDescriptorSetLayoutEntry"
  },
  {
    "label": "FVulkanDescriptorSetsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetsLayout"
  },
  {
    "label": "FVulkanDescriptorPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPool"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanTypedDescriptorPoolSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTypedDescriptorPoolSet"
  },
  {
    "label": "FVulkanDescriptorPoolSetContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPoolSetContainer"
  },
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "FVulkanDescriptorPoolSetContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPoolSetContainer"
  },
  {
    "label": "FVulkanDescriptorPoolsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPoolsManager"
  },
  {
    "label": "FVulkanAsyncPoolSetDeletionWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanAsyncPoolSetDeletionWorker"
  },
  {
    "label": "FVulkanDescriptorSetWriteContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanDescriptorSetWriteContainer"
  },
  {
    "label": "encapsulates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "encapsulates"
  },
  {
    "label": "FVulkanDescriptorSetWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetWriter"
  },
  {
    "label": "FVulkanCommonPipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommonPipelineDescriptorState"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipelineDescriptorState"
  },
  {
    "label": "FVulkanGraphicsPipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGraphicsPipelineDescriptorState"
  },
  {
    "label": "FVulkanDescriptorSetCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetCache"
  },
  {
    "label": "FVulkanBindlessDescriptorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanBindlessDescriptorManager"
  },
  {
    "label": "BindlessSetState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BindlessSetState"
  },
  {
    "label": "FVulkanLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLayout"
  },
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "FVulkanGfxPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGfxPipeline"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FVulkanRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingPipelineState"
  },
  {
    "label": "FVulkanGenericDescriptorPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGenericDescriptorPool"
  },
  {
    "label": "FVulkanDescriptorSetCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetCache"
  },
  {
    "label": "FSetsEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetsEntry"
  },
  {
    "label": "FCachedPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedPool"
  },
  {
    "label": "FinalizeBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeBindings(const FVulkanDevice& Device, const FUniformBufferGatherInfo& UBGatherInfo, const TArrayView<FRHISamplerState*>& ImmutableSamplers)"
  },
  {
    "label": "GenerateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHash(const TArrayView<FRHISamplerState*>& ImmutableSamplers, VkPipelineBindPoint InBindPoint)"
  },
  {
    "label": "CompileTypesUsageID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileTypesUsageID()"
  },
  {
    "label": "AddDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDescriptor(int32 DescriptorSetIndex, const VkDescriptorSetLayoutBinding& Descriptor)"
  },
  {
    "label": "FVulkanDescriptorSetsLayout()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanDescriptorSetsLayout(FVulkanDevice* InDevice)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile(FVulkanDescriptorSetLayoutMap& DSetLayoutMap)"
  },
  {
    "label": "FVulkanDescriptorPool()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanDescriptorPool(FVulkanDevice* InDevice, const FVulkanDescriptorSetsLayout& Layout, uint32 MaxSetsAllocations)"
  },
  {
    "label": "TrackAddUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackAddUsage(const FVulkanDescriptorSetsLayout& InLayout)"
  },
  {
    "label": "TrackRemoveUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackRemoveUsage(const FVulkanDescriptorSetsLayout& InLayout)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AllocateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateDescriptorSets(const VkDescriptorSetAllocateInfo& InDescriptorSetAllocateInfo, VkDescriptorSet* OutSets)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AllocateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateDescriptorSets(const FVulkanDescriptorSetsLayout& Layout, VkDescriptorSet* OutSets)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ReleasePoolSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePoolSet(FVulkanDescriptorPoolSetContainer& PoolSet)"
  },
  {
    "label": "GC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GC()"
  },
  {
    "label": "SetupDescriptorWrites()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SetupDescriptorWrites(const TArray<VkDescriptorType>& Types,\n\t\tFVulkanHashableDescriptorInfo* InHashableDescriptorInfos,\n\t\tVkWriteDescriptorSet* InWriteDescriptors, VkDescriptorImageInfo* InImageInfo,\n\t\tVkDescriptorBufferInfo* InBufferInfo, uint8* InBindingToDynamicOffsetMap,\n\t\tVkWriteDescriptorSetAccelerationStructureKHR* InAccelerationStructuresWriteDescriptors,\n\t\tVkAccelerationStructureKHR* InAccelerationStructures,\n\t\tconst FVulkanSamplerState& DefaultSampler, const FVulkanView::FTextureView& DefaultImageView)"
  },
  {
    "label": "CheckAllWritten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAllWritten()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetWritten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWritten(uint32 DescriptorIndex)"
  },
  {
    "label": "SetWrittenBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrittenBase(uint32 DescriptorIndex)"
  },
  {
    "label": "InitWrittenMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWrittenMasks(uint32 NumDescriptorWrites)"
  },
  {
    "label": "FVulkanBindlessDescriptorManager()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanBindlessDescriptorManager(FVulkanDevice* InDevice)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "VerifySupport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifySupport(FVulkanDevice* InDevice)"
  },
  {
    "label": "BindDescriptorBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindDescriptorBuffers(VkCommandBuffer CommandBuffer, VkPipelineStageFlags SupportedStages)"
  },
  {
    "label": "ReserveDescriptor()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "ReserveDescriptor(VkDescriptorType DescriptorType)"
  },
  {
    "label": "UpdateSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSampler(FRHIDescriptorHandle DescriptorHandle, VkSampler VulkanSampler)"
  },
  {
    "label": "UpdateImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateImage(FRHIDescriptorHandle DescriptorHandle, VkImageView VulkanImage, bool bIsDepthStencil, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuffer(FRHIDescriptorHandle DescriptorHandle, VkBuffer VulkanBuffer, VkDeviceSize BufferOffset, VkDeviceSize BufferSize, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuffer(FRHIDescriptorHandle DescriptorHandle, VkDeviceAddress BufferAddress, VkDeviceSize BufferSize, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateTexelBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTexelBuffer(FRHIDescriptorHandle DescriptorHandle, const VkBufferViewCreateInfo& ViewInfo, bool bImmediateUpdate = true)"
  },
  {
    "label": "UpdateAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAccelerationStructure(FRHIDescriptorHandle DescriptorHandle, VkAccelerationStructureKHR AccelerationStructure, bool bImmediateUpdate = true)"
  },
  {
    "label": "RegisterUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterUniformBuffers(FVulkanCmdBuffer* CommandBuffer, VkPipelineBindPoint BindPoint, const FUniformBufferDescriptorArrays& StageUBs)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(FRHIDescriptorHandle DescriptorHandle)"
  },
  {
    "label": "UpdateUBAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUBAllocator()"
  },
  {
    "label": "GetFreeResourceIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFreeResourceIndex(BindlessSetState& Desc)"
  },
  {
    "label": "UpdateStatsForHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsForHandle(FRHIDescriptorHandle DescriptorHandle)"
  },
  {
    "label": "UpdateDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDescriptor(FRHIDescriptorHandle DescriptorHandle, VkDescriptorDataEXT DescriptorData, bool bImmediateUpdate)"
  },
  {
    "label": "FVulkanLayout()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanLayout(FVulkanDevice* InDevice, bool InGfxLayout)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile(FVulkanDescriptorSetLayoutMap& DSetLayoutMap)"
  },
  {
    "label": "FVulkanGenericDescriptorPool()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanGenericDescriptorPool(FVulkanDevice* InDevice, uint32 InMaxDescriptorSets, const float PoolSizes[VK_DESCRIPTOR_TYPE_RANGE_SIZE])"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AllocateDescriptorSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateDescriptorSet(VkDescriptorSetLayout Layout, VkDescriptorSet& OutSet)"
  },
  {
    "label": "FVulkanDescriptorSetCache()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanDescriptorSetCache(FVulkanDevice* InDevice)"
  },
  {
    "label": "GetDescriptorSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescriptorSets(const FVulkanDSetsKey& DSetsKey, const FVulkanDescriptorSetsLayout& SetsLayout,\n\t\tTArray<FVulkanDescriptorSetWriter>& DSWriters, VkDescriptorSet* OutSets)"
  },
  {
    "label": "GC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GC()"
  },
  {
    "label": "UpdateAllocRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllocRatio()"
  },
  {
    "label": "AddCachedPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedPool()"
  },
  {
    "label": "FCachedPool()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FCachedPool(FVulkanDevice* InDevice, uint32 InMaxDescriptorSets, const float PoolSizesRatio[VK_DESCRIPTOR_TYPE_RANGE_SIZE])"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FindDescriptorSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDescriptorSets(const FVulkanDSetsKey& DSetsKey, VkDescriptorSet* OutSets)"
  },
  {
    "label": "CreateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDescriptorSets(const FVulkanDSetsKey& DSetsKey, const FVulkanDescriptorSetsLayout& SetsLayout,\n\t\t\tTArray<FVulkanDescriptorSetWriter>& DSWriters, VkDescriptorSet* OutSets)"
  },
  {
    "label": "CalcPoolSizesRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcPoolSizesRatio(float PoolSizesRatio[VK_DESCRIPTOR_TYPE_RANGE_SIZE])"
  }
]