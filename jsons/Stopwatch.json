[
  {
    "label": "FStopwatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStopwatch"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformTime . h \" namespace UE::Insights { struct FStopwatch { uint64 AccumulatedTime = 0 ; uint64 StartTime = 0 ; bool bIsStarted = false ; void)",
    "insertText": "Start()"
  },
  {
    "label": "Cycles64()",
    "kind": "Method",
    "detail": "Function (bIsStarted = true ; StartTime =)",
    "insertText": "Cycles64()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Stop()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Update()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (AccumulatedTime + = CrtTime - StartTime ; StartTime = CrtTime ; } } void)",
    "insertText": "Restart()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (AccumulatedTime = 0 ; StartTime = 0 ; bIsStarted = false ; } double)",
    "insertText": "GetAccumulatedTime()"
  },
  {
    "label": "GetAccumulatedTimeMs()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetAccumulatedTimeMs()"
  },
  {
    "label": "Cycles64ToSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Cycles64ToSeconds(const uint64 Cycles64)"
  },
  {
    "label": "Cycles64ToMilliseconds()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Cycles64ToMilliseconds(const uint64 Cycles64)"
  },
  {
    "label": "RoundToDouble()",
    "kind": "Method",
    "detail": "Function (const double Milliseconds =)",
    "insertText": "RoundToDouble(static_cast<double>(Cycles64 * 1000) * FPlatformTime::GetSecondsPerCycle64())"
  }
]