[
  {
    "label": "FStepResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStepResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IStepExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStepExecutor"
  },
  {
    "label": "FStepResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncResult . h \" # include \" Delegates / Delegate . h \" # include \" Misc / Timespan . h \" struct FStepResult { public : enum class EState : uint8 { DONE,FAILED,REPEAT,} ;)",
    "insertText": "FStepResult(EState InState, FTimespan InNextWait) : NextWait(MoveTemp(InNextWait)) , State(InState)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} FTimespan NextWait ; EState State ; } ; class IStepExecutor { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FStepResult, FExecuteStepDelegate, const FTimespan&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const TSharedRef<FExecuteStepDelegate>& Step)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const TFunction<FStepResult(const FTimespan&)>& StepFunction)"
  },
  {
    "label": "InsertNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNext(const TSharedRef<FExecuteStepDelegate>& Step)"
  },
  {
    "label": "InsertNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNext(const TFunction<FStepResult(const FTimespan&)>& StepFunction)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (TAsyncResult<bool>)",
    "insertText": "Execute()"
  },
  {
    "label": "IsExecuting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExecuting()"
  }
]