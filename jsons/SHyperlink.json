[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SHyperlink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHyperlink"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / Text / STextBlock . h \" # if WITH_ACCESSIBILITY # include \" Widgets / Accessibility / SlateAccessibleWidgets . h \" # endif enum class ETextFlowDirection : uint8 ; enum class ETextShapingMethod : uint8 ; class SHyperlink : public SButton { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SHyperlink) : _Text() , _Style(&FCoreStyle::Get().GetWidgetStyle< FHyperlinkStyle >(\"Hyperlink\")) , _TextStyle(nullptr) , _UnderlineStyle(nullptr) , _Padding() , _OnNavigate() , _TextShapingMethod() , _TextFlowDirection() , _HighlightColor() , _HighlightShape() , _HighlightText()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, Text ) SLATE_STYLE_ARGUMENT( FHyperlinkStyle, Style ) SLATE_STYLE_ARGUMENT( FTextBlockStyle, TextStyle ) SLATE_STYLE_ARGUMENT( FButtonStyle, UnderlineStyle ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_EVENT( FSimpleDelegate, OnNavigate ) SLATE_ARGUMENT( TOptional<ETextShapingMethod>, TextShapingMethod ) SLATE_ARGUMENT( TOptional<ETextFlowDirection>, TextFlowDirection ) SLATE_ATTRIBUTE( FLinearColor, HighlightColor ) SLATE_ATTRIBUTE( const FSlateBrush*, HighlightShape ) SLATE_ATTRIBUTE( FText, HighlightText ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (this -> OnNavigate = InArgs . _OnNavigate ;)",
    "insertText": "check(InArgs._Style)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (Padding)",
    "insertText": "IsSet()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(SButton::FArguments() .ContentPadding(Padding) .ButtonStyle(UnderlineStyle) .OnClicked(this, &SHyperlink::Hyperlink_OnClicked) .ForegroundColor(FSlateColor::UseForeground()) .TextShapingMethod(InArgs._TextShapingMethod) .TextFlowDirection(InArgs._TextFlowDirection) [ SNew(STextBlock) .TextStyle(TextStyle) .Text(InArgs._Text) .HighlightColor(InArgs._HighlightColor) .HighlightShape(InArgs._HighlightShape) .HighlightText(InArgs._HighlightText) ])"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (} public : FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "Hyperlink_OnClicked()",
    "kind": "Method",
    "detail": "Function (} # endif protected : FReply)",
    "insertText": "Hyperlink_OnClicked()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnNavigate .)",
    "insertText": "ExecuteIfBound()"
  }
]