[
  {
    "label": "TGJKShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGJKShape"
  },
  {
    "label": "TGJKShapeTransformed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGJKShapeTransformed"
  },
  {
    "label": "TGJKCoreShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGJKCoreShape"
  },
  {
    "label": "TGJKCoreShapeTransformed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGJKCoreShapeTransformed"
  },
  {
    "label": "FGJKSphere",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGJKSphere"
  },
  {
    "label": "TGJKShape()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" namespace Chaos { template<T_SHAPE> struct TGJKShape { using FShapeType = T_SHAPE ;)",
    "insertText": "TGJKShape(const FShapeType& InShape) : Shape(InShape)"
  },
  {
    "label": "InverseTransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "InverseTransformPositionNoScale(const FVec3& V)"
  },
  {
    "label": "IsConvex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConvex()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "TGJKShapeTransformed()",
    "kind": "Method",
    "detail": "Function (} const FShapeType& Shape ; } ; template<T_SHAPE> struct TGJKShapeTransformed { using FShapeType = T_SHAPE ;)",
    "insertText": "TGJKShapeTransformed(const FShapeType& InShape, const FRigidTransform3& InTransform) : Transform(InTransform) , Shape(InShape)"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (} const FRigidTransform3&)",
    "insertText": "GetTransform()"
  },
  {
    "label": "GetMargin()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetMargin()"
  },
  {
    "label": "InverseTransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 LocalDir = Transform .)",
    "insertText": "InverseTransformVectorNoScale(Dir)"
  },
  {
    "label": "Support()",
    "kind": "Method",
    "detail": "Function (const FVec3 LocalSupport = Shape .)",
    "insertText": "Support(LocalDir, InMargin, VertexIndex)"
  },
  {
    "label": "TGJKCoreShape()",
    "kind": "Method",
    "detail": "Function (} FRigidTransform3 Transform ; const FShapeType& Shape ; } ; template<T_SHAPE> struct TGJKCoreShape { using FShapeType = T_SHAPE ;)",
    "insertText": "TGJKCoreShape(const FShapeType& InShape) : Shape(InShape) , Margin(InShape.GetMargin())"
  },
  {
    "label": "TGJKCoreShape()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGJKCoreShape(const FShapeType& InShape, const FReal InMargin) : Shape(InShape) , Margin(InMargin)"
  },
  {
    "label": "TGJKCoreShapeTransformed()",
    "kind": "Method",
    "detail": "Function (} const FShapeType& Shape ; const FReal Margin ; } ; template<T_SHAPE> struct TGJKCoreShapeTransformed { using FShapeType = T_SHAPE ;)",
    "insertText": "TGJKCoreShapeTransformed(const FShapeType& InShape, const FRigidTransform3& InTransform) : Transform(InTransform) , Shape(InShape) , Margin(InShape.GetMargin())"
  },
  {
    "label": "TGJKCoreShapeTransformed()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGJKCoreShapeTransformed(const FShapeType& InShape, const FReal InMargin, const FRigidTransform3& InTransform) : Transform(InTransform) , Shape(InShape) , Margin(InMargin)"
  },
  {
    "label": "SupportCore()",
    "kind": "Method",
    "detail": "Function (const FVec3 LocalSupport = Shape .)",
    "insertText": "SupportCore(LocalDir, InMargin, OutSupportDelta, VertexIndex)"
  },
  {
    "label": "FGJKSphere()",
    "kind": "Method",
    "detail": "Function (} FRigidTransform3 Transform ; const FShapeType& Shape ; const FReal Margin ; } ; class FGJKSphere { public :)",
    "insertText": "FGJKSphere(const FVec3 InCenter, const FReal InRadius) : Center(InCenter), Radius(InRadius)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetCenter()"
  },
  {
    "label": "MakeGJKShape()",
    "kind": "Method",
    "detail": "Function (} private : FVec3 Center ; FReal Radius ; } ; template<T_SHAPE> TGJKShape<T_SHAPE>)",
    "insertText": "MakeGJKShape(const T_SHAPE& InShape)"
  },
  {
    "label": "MakeGJKCoreShape()",
    "kind": "Method",
    "detail": "Function (} template<T_SHAPE> TGJKCoreShape<T_SHAPE>)",
    "insertText": "MakeGJKCoreShape(const T_SHAPE& InShape)"
  }
]