[
  {
    "label": "Process",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Process"
  },
  {
    "label": "ProcessImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessImpl"
  },
  {
    "label": "PipeReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PipeReader"
  },
  {
    "label": "GetStartInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaProcessStartInfoHolder . h \" # include \" UbaProtocol . h \" # include \" UbaSession . h \" # include \" UbaStats . h \" namespace uba { class Process { public : const ProcessStartInfo&)",
    "insertText": "GetStartInfo()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetId()"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(false)"
  },
  {
    "label": "GetTrackedInputs()",
    "kind": "Method",
    "detail": "Function (const Vector<u8>&)",
    "insertText": "GetTrackedInputs()"
  },
  {
    "label": "GetTrackedOutputs()",
    "kind": "Method",
    "detail": "Function (const Vector<u8>&)",
    "insertText": "GetTrackedOutputs()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(bool terminate)"
  },
  {
    "label": "GetExecutingHost()",
    "kind": "Method",
    "detail": "Function (} const tchar*)",
    "insertText": "GetExecutingHost()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Process()"
  },
  {
    "label": "GetTotalProcessorTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetTotalProcessorTime()"
  },
  {
    "label": "GetTotalWallTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetTotalWallTime()"
  },
  {
    "label": "GetLogLines()",
    "kind": "Method",
    "detail": "Function (const Vector<ProcessLogLine>&)",
    "insertText": "GetLogLines()"
  },
  {
    "label": "IsRemote()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRemote()"
  },
  {
    "label": "ProcessImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProcessImpl()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (struct PipeReader ; bool)",
    "insertText": "Start(const ProcessStartInfo& startInfo, bool runningRemote, void* environment, bool async, bool enableDetour)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "IsCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCancelled()"
  },
  {
    "label": "HasFailedMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFailedMessage()"
  },
  {
    "label": "WaitForRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForRead(PipeReader& outReader, PipeReader& errReader)"
  },
  {
    "label": "SetWritten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWritten()"
  },
  {
    "label": "ThreadRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadRun(bool runningRemote, void* environment)"
  },
  {
    "label": "ThreadExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadExit()"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMessage(BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "HandleSpecialApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSpecialApplication()"
  },
  {
    "label": "UBA_PROCESS_MESSAGE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UBA_PROCESS_MESSAGE(M) bool Handle##M(BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "LogLine()",
    "kind": "Method",
    "detail": "Function (UBA_PROCESS_MESSAGES # undef UBA_PROCESS_MESSAGE void)",
    "insertText": "LogLine(bool printInSession, TString&& line, LogEntryType logType)"
  },
  {
    "label": "CreateTempFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTempFile(BinaryReader& reader, ProcHandle nativeProcessHandle, const tchar* application)"
  },
  {
    "label": "OpenTempFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenTempFile(BinaryReader& reader, BinaryWriter& writer, const tchar* application)"
  },
  {
    "label": "WriteFilesToDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFilesToDisk()"
  },
  {
    "label": "InternalGetChildLogFile()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "InternalGetChildLogFile(StringBufferBase& temp)"
  },
  {
    "label": "PollStdPipes()",
    "kind": "Method",
    "detail": "Function (# if ! PLATFORM_WINDOWS bool)",
    "insertText": "PollStdPipes(PipeReader& outReader, PipeReader& errReader, int timeoutMs = -1)"
  },
  {
    "label": "InternalCreateProcess()",
    "kind": "Method",
    "detail": "Function (# endif u32)",
    "insertText": "InternalCreateProcess(bool runningRemote, void* environment, FileMappingHandle communicationHandle, u64 communicationOffset)"
  },
  {
    "label": "InternalExitProcess()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "InternalExitProcess(bool cancel)"
  },
  {
    "label": "ClearTempFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTempFiles()"
  },
  {
    "label": "WaitForParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForParent()"
  },
  {
    "label": "ProcessImpl()",
    "kind": "Method",
    "detail": "Function (ProcessStartInfoHolder m_startInfo ; Session& m_session ; ProcessImpl* m_parentProcess ; ReaderWriterLock m_initLock ; u32 m_id ; FileMappingAllocator::Allocation m_comMemory ; # if PLATFORM_WINDOWS Event m_cancelEvent ; Event m_writeEvent ; Event m_readEvent ; # else ReaderWriterLock m_comMemoryLock ; Atomic<bool> m_cancelled ; Event& m_cancelEvent ; Event& m_writeEvent ; Event& m_readEvent ; int m_stdOutPipe = - 1 ; int m_stdErrPipe = - 1 ; bool m_doOneExtraCheckForExitMessage = true ; # endif ProcHandle m_nativeProcessHandle = InvalidProcHandle ; # if PLATFORM_WINDOWS HANDLE m_nativeThreadHandle = 0 ; HANDLE m_accountingJobObject = NULL ; # endif u32 m_nativeProcessId = 0 ; u32 m_nativeProcessExitCode = ~ 0 u ; u32 m_exitCode = ~ 0 u ; u32 m_messageCount = 0 ; Atomic<bool> m_hasExited ; bool m_messageSuccess = true ; bool m_echoOn = true ; bool m_gotExitMessage = false ; bool m_parentReportedExit = false ; bool m_detourEnabled = true ; TString m_realApplication ; const tchar* m_realWorkingDir = nullptr ; u64 m_startTime = 0 ; Event m_waitForParent ; ReaderWriterLock m_logLinesLock ; Vector<ProcessLogLine> m_logLines ; Vector<u8> m_trackedInputs ; Vector<u8> m_trackedOutputs ; Vector<ProcessHandle> m_childProcesses ; ReaderWriterLock& m_writtenFilesLock ; UnorderedMap<TString,WrittenFile>& m_writtenFiles ; ReaderWriterLock& m_tempFilesLock ; UnorderedMap<StringKey,WrittenFile>& m_tempFiles ; Atomic<u32> m_tempFilesModified ; SessionStats m_sessionStats ; StorageStats m_storageStats ; ProcessStats m_processStats ; KernelStats m_kernelStats ; Thread m_messageThread ; bool m_extractExports = false ;)",
    "insertText": "ProcessImpl(const ProcessImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const ProcessImpl&)"
  }
]