[
  {
    "label": "SReflectorTreeWidgetItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SReflectorTreeWidgetItem"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" Models / WidgetReflectorNode . h \" class SReflectorTreeWidgetItem : public SMultiColumnTableRow<TSharedRef<FWidgetReflectorNodeBase>> { public : FName NAME_WidgetName ; FName NAME_WidgetInfo ; FName NAME_Visibility ; FName NAME_Focusable ; FName NAME_Enabled ; FName NAME_Volatile ; FName NAME_HasActiveTimer ; FName NAME_Clipping ; FName NAME_LayerId ; FName NAME_ForegroundColor ; FName NAME_Address ; FName NAME_ActualSize ;)",
    "insertText": "SLATE_BEGIN_ARGS(SReflectorTreeWidgetItem) : _WidgetInfoToVisualize() , _SourceCodeAccessor() , _AssetAccessor()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FWidgetReflectorNodeBase>, WidgetInfoToVisualize) SLATE_ARGUMENT(FAccessSourceCode, SourceCodeAccessor) SLATE_ARGUMENT(FAccessAsset, AssetAccessor) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "GetTint()",
    "kind": "Method",
    "detail": "Function (protected : FSlateColor)",
    "insertText": "GetTint()"
  },
  {
    "label": "HandleHyperlinkNavigate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleHyperlinkNavigate()"
  }
]