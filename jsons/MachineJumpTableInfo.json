[
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MachineJumpTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineJumpTableEntry"
  },
  {
    "label": "MachineJumpTableInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineJumpTableInfo"
  },
  {
    "label": "JTEntryKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JTEntryKind"
  },
  {
    "label": "MachineJumpTableEntry()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEJUMPTABLEINFO_H # define LLVM_CODEGEN_MACHINEJUMPTABLEINFO_H # include<cassert> # include<vector> namespace llvm { class MachineBasicBlock ; class DataLayout ; class raw_ostream ; struct MachineJumpTableEntry { std::vector<MachineBasicBlock*> MBBs ;)",
    "insertText": "MachineJumpTableEntry(const std::vector<MachineBasicBlock*> &M) : MBBs(M)"
  },
  {
    "label": "MachineJumpTableInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class MachineJumpTableInfo { public : enum JTEntryKind { EK_BlockAddress,EK_GPRel64BlockAddress,EK_GPRel32BlockAddress,EK_LabelDifference32,EK_Inline,EK_Custom32 } ; private : JTEntryKind EntryKind ; std::vector<MachineJumpTableEntry> JumpTables ; public :)",
    "insertText": "MachineJumpTableInfo(JTEntryKind Kind): EntryKind(Kind)"
  },
  {
    "label": "getEntryKind()",
    "kind": "Method",
    "detail": "Function (} JTEntryKind)",
    "insertText": "getEntryKind()"
  },
  {
    "label": "getEntryAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getEntryAlignment(const DataLayout &TD)"
  },
  {
    "label": "createJumpTableIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "createJumpTableIndex(const std::vector<MachineBasicBlock*> &DestBBs)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "getJumpTables()",
    "kind": "Method",
    "detail": "Function (} const std::vector<MachineJumpTableEntry>&)",
    "insertText": "getJumpTables()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (JumpTables [ Idx ] . MBBs .)",
    "insertText": "clear()"
  },
  {
    "label": "ReplaceMBBInJumpTables()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReplaceMBBInJumpTables(MachineBasicBlock *Old, MachineBasicBlock *New)"
  },
  {
    "label": "ReplaceMBBInJumpTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceMBBInJumpTable(unsigned Idx, MachineBasicBlock *Old, MachineBasicBlock *New)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  }
]