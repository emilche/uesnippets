[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorAssignOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorAssignOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorAssignOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_ASSIGN_H # define EIGEN_CXX11_TENSOR_TENSOR_ASSIGN_H namespace Eigen { namespace internal { template<LhsXprType,RhsXprType> struct traits<TensorAssignOp<LhsXprType,RhsXprType>> { typedef LhsXprType::Scalar Scalar ; typedef traits<LhsXprType>::StorageKind StorageKind ; typedef promote_index_type<traits<LhsXprType>::Index,traits<RhsXprType>::Index>::type Index ; typedef LhsXprType::Nested LhsNested ; typedef RhsXprType::Nested RhsNested ; typedef remove_reference<LhsNested>::type _LhsNested ; typedef remove_reference<RhsNested>::type _RhsNested ; const std::size_t NumDimensions = internal::traits<LhsXprType>::NumDimensions ; const int Layout = internal::traits<LhsXprType>::Layout ; typedef traits<LhsXprType>::PointerType PointerType ; enum { Flags = 0 } ; } ; template<LhsXprType,RhsXprType> struct eval<TensorAssignOp<LhsXprType,RhsXprType>,Eigen::Dense> { typedef const TensorAssignOp<LhsXprType,RhsXprType>& type ; } ; template<LhsXprType,RhsXprType> struct nested<TensorAssignOp<LhsXprType,RhsXprType>,1,eval<TensorAssignOp<LhsXprType,RhsXprType>>::type> { typedef TensorAssignOp<LhsXprType,RhsXprType> type ; } ; } template<LhsXprType,RhsXprType> class TensorAssignOp : public TensorBase<TensorAssignOp<LhsXprType,RhsXprType>> { public : typedef Eigen::internal::traits<TensorAssignOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef LhsXprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorAssignOp>::type Nested ; typedef Eigen::internal::traits<TensorAssignOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorAssignOp>::Index Index ; const int NumDims = Eigen::internal::traits<TensorAssignOp>::NumDimensions ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorAssignOp(LhsXprType& lhs, const RhsXprType& rhs) : m_lhs_xpr(lhs), m_rhs_xpr(rhs)"
  },
  {
    "label": "lhsExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC internal::remove_all<LhsXprType::Nested>::type&)",
    "insertText": "lhsExpression()"
  },
  {
    "label": "rhsExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<RhsXprType::Nested>::type&)",
    "insertText": "rhsExpression()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef TensorEvaluator<const RightArgType,Device>::TensorBlock RightTensorBlock ;)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_leftImpl(op.lhsExpression(), device), m_rightImpl(op.rhsExpression(), device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<LeftArgType, Device>::Layout) == static_cast<int>(TensorEvaluator<RightArgType, Device>::Layout)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dimensions_match(m_leftImpl.dimensions(), m_rightImpl.dimensions()))"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_USE_THREADS template<EvalSubExprsCallback> EIGEN_STRONG_INLINE void)",
    "insertText": "evalSubExprsIfNeededAsync(EvaluatorPointerType, EvalSubExprsCallback done)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [this, done](bool) { m_rightImpl.evalSubExprsIfNeededAsync( m_leftImpl.data(), [done](bool need_assign) { done(need_assign); }); })"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "evalScalar()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "evalScalar(Index i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "coeffRef(i) = m_rightImpl.coeff(i)"
  },
  {
    "label": "evalPacket()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "evalPacket(Index i)"
  },
  {
    "label": "LhsStoreMode()",
    "kind": "Method",
    "detail": "Function (const int LhsStoreMode = TensorEvaluator<LeftArgType,Device>::IsAligned ? Aligned : Unaligned ; const int RhsLoadMode = TensorEvaluator<RightArgType,Device>::IsAligned ? Aligned : Unaligned ; m_leftImpl . template writePacket<)",
    "insertText": "LhsStoreMode(i, m_rightImpl.template packet<RhsLoadMode>(i))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (TensorOpCost left = m_leftImpl .)",
    "insertText": "costPerCoeff(vectorized)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "evalBlock()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "evalBlock(TensorBlockDesc& desc, TensorBlockScratch& scratch)"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (desc . template AddDestinationBuffer<)",
    "insertText": "Layout(m_leftImpl.data() + desc.offset(), internal::strides<Layout>(m_leftImpl.dimensions()))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} RightTensorBlock block = m_rightImpl .)",
    "insertText": "block(desc, scratch, true)"
  },
  {
    "label": "writeBlock()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "writeBlock(desc, block)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_USE_SYCL EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "bind(cl::sycl::handler &cgh)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  }
]