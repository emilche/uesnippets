[
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineFunctionInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunctionInitializer"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "MachineFunctionAnalysis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineFunctionAnalysis"
  },
  {
    "label": "MachineFunctionAnalysis()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEFUNCTIONANALYSIS_H # define LLVM_CODEGEN_MACHINEFUNCTIONANALYSIS_H # include \" llvm / Pass . h \" namespace llvm { class MachineFunction ; class MachineFunctionInitializer ; class TargetMachine ; struct MachineFunctionAnalysis : public FunctionPass { private : const TargetMachine& TM ; MachineFunction* MF ; unsigned NextFnNum ; MachineFunctionInitializer* MFInitializer ; public : char ID ;)",
    "insertText": "MachineFunctionAnalysis(const TargetMachine &tm, MachineFunctionInitializer *MFInitializer)"
  },
  {
    "label": "MachineFunctionAnalysis()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MachineFunctionAnalysis()"
  },
  {
    "label": "getMF()",
    "kind": "Method",
    "detail": "Function (MachineFunction&)",
    "insertText": "getMF()"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  }
]