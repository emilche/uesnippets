[
  {
    "label": "CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CLASS"
  },
  {
    "label": "InstVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstVisitor"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "HANDLE_INST()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_INSTVISITOR_H # define LLVM_IR_INSTVISITOR_H # include \" llvm / IR / CallSite . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Instructions . h \" # include \" llvm / IR / IntrinsicInst . h \" # include \" llvm / IR / Intrinsics . h \" # include \" llvm / IR / Module . h \" # include \" llvm / Support / ErrorHandling . h \" namespace llvm { # define)",
    "insertText": "HANDLE_INST(NUM, OPCODE, CLASS)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (# include \" llvm / IR / Instruction . def \" # define)",
    "insertText": "DELEGATE(CLASS_TO_VISIT) \\ return static_cast<SubClass*>(this)-> \\ visit##CLASS_TO_VISIT(static_cast<CLASS_TO_VISIT&>(I))"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (public : template<class Iterator> void)",
    "insertText": "visit(Iterator Start, Iterator End)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visit(Module &M)"
  },
  {
    "label": "SubClass()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "SubClass(this)->visitModule(M)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(M.begin(), M.end())"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visit(Function &F)"
  },
  {
    "label": "SubClass()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "SubClass(this)->visitFunction(F)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(F.begin(), F.end())"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visit(BasicBlock &BB)"
  },
  {
    "label": "SubClass()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "SubClass(this)->visitBasicBlock(BB)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(BB.begin(), BB.end())"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visit(Module *M)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(*M)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visit(Function *F)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(*F)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visit(BasicBlock *BB)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(*BB)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visit(Instruction *I)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visit(Instruction &I)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Unknown instruction type encountered!\")"
  },
  {
    "label": "HANDLE_INST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "HANDLE_INST(NUM, OPCODE, CLASS) \\ case Instruction::OPCODE: return \\ static_cast<SubClass*>(this)-> \\ visit##OPCODE(static_cast<CLASS&>(I))"
  },
  {
    "label": "visitModule()",
    "kind": "Method",
    "detail": "Function (# include \" llvm / IR / Instruction . def \" } } void)",
    "insertText": "visitModule(Module &M)"
  },
  {
    "label": "visitFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitFunction(Function &F)"
  },
  {
    "label": "visitBasicBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitBasicBlock(BasicBlock &BB)"
  },
  {
    "label": "HANDLE_INST()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "HANDLE_INST(NUM, OPCODE, CLASS) \\ RetTy visit##OPCODE(CLASS &I)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(NUM == Instruction::Call) \\ return delegateCallInst(I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (\\ else \\)",
    "insertText": "DELEGATE(CLASS)"
  },
  {
    "label": "visitReturnInst()",
    "kind": "Method",
    "detail": "Function (\\ } # include \" llvm / IR / Instruction . def \" RetTy)",
    "insertText": "visitReturnInst(ReturnInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(TerminatorInst)"
  },
  {
    "label": "visitBranchInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitBranchInst(BranchInst &I)"
  },
  {
    "label": "visitSwitchInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitSwitchInst(SwitchInst &I)"
  },
  {
    "label": "visitIndirectBrInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitIndirectBrInst(IndirectBrInst &I)"
  },
  {
    "label": "visitResumeInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitResumeInst(ResumeInst &I)"
  },
  {
    "label": "visitUnreachableInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitUnreachableInst(UnreachableInst &I)"
  },
  {
    "label": "visitICmpInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitICmpInst(ICmpInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(CmpInst)"
  },
  {
    "label": "visitFCmpInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitFCmpInst(FCmpInst &I)"
  },
  {
    "label": "visitAllocaInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitAllocaInst(AllocaInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(UnaryInstruction)"
  },
  {
    "label": "visitLoadInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitLoadInst(LoadInst &I)"
  },
  {
    "label": "visitStoreInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitStoreInst(StoreInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(Instruction)"
  },
  {
    "label": "visitAtomicCmpXchgInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitAtomicCmpXchgInst(AtomicCmpXchgInst &I)"
  },
  {
    "label": "visitAtomicRMWInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitAtomicRMWInst(AtomicRMWInst &I)"
  },
  {
    "label": "visitFenceInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitFenceInst(FenceInst &I)"
  },
  {
    "label": "visitGetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitGetElementPtrInst(GetElementPtrInst &I)"
  },
  {
    "label": "visitPHINode()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitPHINode(PHINode &I)"
  },
  {
    "label": "visitTruncInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitTruncInst(TruncInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(CastInst)"
  },
  {
    "label": "visitZExtInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitZExtInst(ZExtInst &I)"
  },
  {
    "label": "visitSExtInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitSExtInst(SExtInst &I)"
  },
  {
    "label": "visitFPTruncInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitFPTruncInst(FPTruncInst &I)"
  },
  {
    "label": "visitFPExtInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitFPExtInst(FPExtInst &I)"
  },
  {
    "label": "visitFPToUIInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitFPToUIInst(FPToUIInst &I)"
  },
  {
    "label": "visitFPToSIInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitFPToSIInst(FPToSIInst &I)"
  },
  {
    "label": "visitUIToFPInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitUIToFPInst(UIToFPInst &I)"
  },
  {
    "label": "visitSIToFPInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitSIToFPInst(SIToFPInst &I)"
  },
  {
    "label": "visitPtrToIntInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitPtrToIntInst(PtrToIntInst &I)"
  },
  {
    "label": "visitIntToPtrInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitIntToPtrInst(IntToPtrInst &I)"
  },
  {
    "label": "visitBitCastInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitBitCastInst(BitCastInst &I)"
  },
  {
    "label": "visitAddrSpaceCastInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitAddrSpaceCastInst(AddrSpaceCastInst &I)"
  },
  {
    "label": "visitSelectInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitSelectInst(SelectInst &I)"
  },
  {
    "label": "visitVAArgInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitVAArgInst(VAArgInst &I)"
  },
  {
    "label": "visitExtractElementInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitExtractElementInst(ExtractElementInst &I)"
  },
  {
    "label": "visitInsertElementInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitInsertElementInst(InsertElementInst &I)"
  },
  {
    "label": "visitShuffleVectorInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitShuffleVectorInst(ShuffleVectorInst &I)"
  },
  {
    "label": "visitExtractValueInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitExtractValueInst(ExtractValueInst &I)"
  },
  {
    "label": "visitInsertValueInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitInsertValueInst(InsertValueInst &I)"
  },
  {
    "label": "visitLandingPadInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitLandingPadInst(LandingPadInst &I)"
  },
  {
    "label": "visitDbgDeclareInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitDbgDeclareInst(DbgDeclareInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(DbgInfoIntrinsic)"
  },
  {
    "label": "visitDbgValueInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitDbgValueInst(DbgValueInst &I)"
  },
  {
    "label": "visitDbgInfoIntrinsic()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitDbgInfoIntrinsic(DbgInfoIntrinsic &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(IntrinsicInst)"
  },
  {
    "label": "visitMemSetInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitMemSetInst(MemSetInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(MemIntrinsic)"
  },
  {
    "label": "visitMemCpyInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitMemCpyInst(MemCpyInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(MemTransferInst)"
  },
  {
    "label": "visitMemMoveInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitMemMoveInst(MemMoveInst &I)"
  },
  {
    "label": "visitMemTransferInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitMemTransferInst(MemTransferInst &I)"
  },
  {
    "label": "visitMemIntrinsic()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitMemIntrinsic(MemIntrinsic &I)"
  },
  {
    "label": "visitVAStartInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitVAStartInst(VAStartInst &I)"
  },
  {
    "label": "visitVAEndInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitVAEndInst(VAEndInst &I)"
  },
  {
    "label": "visitVACopyInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitVACopyInst(VACopyInst &I)"
  },
  {
    "label": "visitIntrinsicInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitIntrinsicInst(IntrinsicInst &I)"
  },
  {
    "label": "DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DELEGATE(CallInst)"
  },
  {
    "label": "visitCallInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitCallInst(CallInst &I)"
  },
  {
    "label": "visitInvokeInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitInvokeInst(InvokeInst &I)"
  },
  {
    "label": "visitCastInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitCastInst(CastInst &I)"
  },
  {
    "label": "visitBinaryOperator()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitBinaryOperator(BinaryOperator &I)"
  },
  {
    "label": "visitCmpInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitCmpInst(CmpInst &I)"
  },
  {
    "label": "visitTerminatorInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitTerminatorInst(TerminatorInst &I)"
  },
  {
    "label": "visitUnaryInstruction()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitUnaryInstruction(UnaryInstruction &I)"
  },
  {
    "label": "visitCallSite()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "visitCallSite(CallSite CS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(CS)"
  },
  {
    "label": "getInstruction()",
    "kind": "Method",
    "detail": "Function (Instruction& I =* CS .)",
    "insertText": "getInstruction()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(CS.isInvoke())"
  },
  {
    "label": "visitInstruction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitInstruction(Instruction &I)"
  },
  {
    "label": "delegateCallInst()",
    "kind": "Method",
    "detail": "Function (} private : RetTy)",
    "insertText": "delegateCallInst(CallInst &I)"
  },
  {
    "label": "delegateCallInst()",
    "kind": "Method",
    "detail": "Function (} RetTy)",
    "insertText": "delegateCallInst(Instruction &I)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"delegateCallInst called for non-CallInst\")"
  }
]