[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSoundEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundEffectBase"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "USoundEffectPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectPreset"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IAudioExtensionPlugin . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" SoundEffectBase . h \" # include \" SoundEffectPreset . generated . h \" struct FAssetData ; class FMenuBuilder ; class FSoundEffectBase ; class IToolkitHost ;)",
    "insertText": "UCLASS(config = Engine, abstract, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API USoundEffectPreset(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "USoundEffectPreset()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "USoundEffectPreset()"
  },
  {
    "label": "CanFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFilter()"
  },
  {
    "label": "GetSupportedClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetSupportedClass() const PURE_VIRTUAL(USoundEffectPreset::GetSupportedClass, return nullptr;)"
  },
  {
    "label": "CreateNewPreset()",
    "kind": "Method",
    "detail": "Function (USoundEffectPreset*)",
    "insertText": "CreateNewPreset(UObject* InParent, FName Name, EObjectFlags Flags) const PURE_VIRTUAL(USoundEffectPreset::CreateNewPreset, return nullptr;)"
  },
  {
    "label": "CreateNewEffect()",
    "kind": "Method",
    "detail": "Function (FSoundEffectBase*)",
    "insertText": "CreateNewEffect() const PURE_VIRTUAL(USoundEffectPreset::CreateNewEffect, return nullptr;)"
  },
  {
    "label": "HasAssetActions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAssetActions()"
  },
  {
    "label": "OnInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInit()"
  },
  {
    "label": "GetPresetColor()",
    "kind": "Method",
    "detail": "Function (} ; FColor)",
    "insertText": "GetPresetColor()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update()"
  },
  {
    "label": "AddEffectInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEffectInstance(TSoundEffectPtr& InEffectPtr)"
  },
  {
    "label": "RemoveEffectInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEffectInstance(TSoundEffectPtr& InEffectPtr)"
  },
  {
    "label": "AddReferencedEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedEffects(FReferenceCollector& InCollector)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "IterateEffects()",
    "kind": "Method",
    "detail": "Function (# endif using TSoundEffectWeakPtr = TWeakPtr<FSoundEffectBase,ESPMode::ThreadSafe> ; TArray<TSoundEffectWeakPtr> Instances ; FCriticalSection InstancesMutationCriticalSection ; bool bInitialized ; template<T> void)",
    "insertText": "IterateEffects(TFunction<void(T&)> InForEachEffect)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&InstancesMutationCriticalSection)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSoundEffectPtr EffectStrongPtr = Instance .)",
    "insertText": "Pin()"
  },
  {
    "label": "InForEachEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InForEachEffect(*static_cast<T*>(EffectStrongPtr.Get()))"
  },
  {
    "label": "EffectCommand()",
    "kind": "Method",
    "detail": "Function (} } } template<T> void)",
    "insertText": "EffectCommand(TFunction<void(T&)> InForEachEffect)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (IterateEffects<)",
    "insertText": "T([InForEachEffect](T& OutInstance) { T* InstancePtr = &OutInstance; OutInstance.EffectCommand([InstancePtr, InForEachEffect]() { InForEachEffect(*InstancePtr); }); })"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (} public : template<TSoundEffectType> TSharedPtr<TSoundEffectType,ESPMode::ThreadSafe>)",
    "insertText": "CreateInstance(USoundEffectPreset& InOutPreset)"
  },
  {
    "label": "TSoundEffectType()",
    "kind": "Method",
    "detail": "Function (TSoundEffectType* NewEffect = static_cast<)",
    "insertText": "TSoundEffectType(InOutPreset.CreateNewEffect())"
  },
  {
    "label": "GetUniqueID()",
    "kind": "Method",
    "detail": "Function (NewEffect -> Preset =& InOutPreset ; NewEffect -> ParentPresetUniqueId = InOutPreset .)",
    "insertText": "GetUniqueID()"
  },
  {
    "label": "NewEffectPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TSoundEffectType,ESPMode::ThreadSafe>)",
    "insertText": "NewEffectPtr(NewEffect)"
  },
  {
    "label": "ThreadSafe()",
    "kind": "Method",
    "detail": "Function (TSoundEffectPtr SoundEffectPtr = StaticCastSharedPtr<FSoundEffectBase,TSoundEffectType,)",
    "insertText": "ThreadSafe(NewEffectPtr)"
  },
  {
    "label": "AddEffectInstance()",
    "kind": "Method",
    "detail": "Function (InOutPreset .)",
    "insertText": "AddEffectInstance(SoundEffectPtr)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (NewEffect -> Preset =& InOutPreset ; NewEffect -> ParentPresetUniqueId = InInitData . ParentPresetUniqueId ; NewEffect ->)",
    "insertText": "Setup(InInitData)"
  },
  {
    "label": "RegisterInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInstance(USoundEffectPreset& InPreset, TSoundEffectPtr InEffectPtr)"
  }
]