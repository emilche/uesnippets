[
  {
    "label": "TUPtrSetG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUPtrSetG"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TContainerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TContainerTraits"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TUPtrSetG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / PointerSetHelper . h \" # include \" uLang / Common / Containers / UniquePointerArray . h \" namespace uLang { template<InElementType,bool AllowNull,InKeyType,InElementAllocatorType,. . . RawAllocatorArgsType> class TUPtrSetG : protected TUPtrArrayG<InElementType,AllowNull,InElementAllocatorType,RawAllocatorArgsType . . .> { template<OtherElementType,bool OtherAllowNull,OtherKeyType,OtherElementAllocatorType,. . . OtherRawAllocatorArgsType> class TUPtrSetG ; using Super = TUPtrArrayG<InElementType,AllowNull,InElementAllocatorType,RawAllocatorArgsType . . .> ; using Super::_PointerStorage ; using Helper = TPointerSetHelper<InElementType,InKeyType> ; public : using KeyType = InKeyType ; using Super::ElementType ; using Super::PointerType ; ULANG_FORCEINLINE)",
    "insertText": "TUPtrSetG(RawAllocatorArgsType&&... RawAllocatorArgs) : Super(uLang::ForwardArg<RawAllocatorArgsType>(RawAllocatorArgs)...)"
  },
  {
    "label": "TUPtrSetG()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TUPtrSetG(TUPtrSetG && Other) : Super(ForwardArg<Super>(Other))"
  },
  {
    "label": "TUPtrSetG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUPtrSetG(TUPtrSetG && Other, int32_t ExtraSlack) : Super(ForwardArg<Super>(Other), ExtraSlack)"
  },
  {
    "label": "IndexOf()",
    "kind": "Method",
    "detail": "Function (} using Super::operator = ; using Super::GetSlack ; using Super::IsValidIndex ; using Super::Num ; using Super::Max ; using Super::IsEmpty ; using Super::IsFilled ; using Super::operator [ ] ; using Super::Shrink ; using Super::RemoveAt ; using Super::ReplaceAt ; using Super::Reset ; using Super::Empty ; using Super::Reserve ; using Super::begin ; using Super::end ; int32_t)",
    "insertText": "IndexOf(const KeyType& Key)"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (int32_t UpperBound =)",
    "insertText": "GetUpperBound(_PointerStorage, Key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE ElementType*)",
    "insertText": "Find(const KeyType& Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementType* Item = _PointerStorage [ UpperBound ] ;)",
    "insertText": "if(KeyType(*Item) == Key)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const TUPtrSetG& Other)"
  },
  {
    "label": "ReferenceAll()",
    "kind": "Method",
    "detail": "Function (Other .)",
    "insertText": "ReferenceAll()"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(_PointerStorage, Other._PointerStorage)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(TUPtrSetG&& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Other .)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TUPtrSetG&)",
    "insertText": "operator(TUPtrSetG&& Other)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(ForwardArg<TUPtrSetG>(Other))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ElementType* Item =)",
    "insertText": "new(_PointerStorage.GetRawAllocator()) ElementType(uLang::ForwardArg<CtorArgsType>(CtorArgs)...)"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (int32_t UpperBound =)",
    "insertText": "GetUpperBound(_PointerStorage, *Item)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(UpperBound == Num() || KeyType(*_PointerStorage[UpperBound]) != KeyType(*Item), \"Tried to add duplicate item!\")"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "EmplaceAt(UpperBound, Item)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Remove(const KeyType& Key)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(UpperBound)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (+ + Count ; })",
    "insertText": "ULANG_ASSERTF(UpperBound == Num() || KeyType(*_PointerStorage[UpperBound]) != Key, \"Matching item still present after Remove()!\")"
  }
]