[
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "ExampleOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExampleOp"
  },
  {
    "label": "Rule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Rule"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "DSConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DSConverter"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Op"
  },
  {
    "label": "DSCompositeOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DSCompositeOp"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "SparseExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseExtractor"
  },
  {
    "label": "SparseExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseExtractor"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "SparseMaskedExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMaskedExtractor"
  },
  {
    "label": "SparseMaskedExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMaskedExtractor"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "ExtractAll",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtractAll"
  },
  {
    "label": "only",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "only"
  },
  {
    "label": "DenseTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseTransformer"
  },
  {
    "label": "DenseTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseTransformer"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "ContiguousOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContiguousOp"
  },
  {
    "label": "SparseToDenseCompositor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseToDenseCompositor"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "UniformTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniformTransformer"
  },
  {
    "label": "Line",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Line"
  },
  {
    "label": "UniformLeaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniformLeaf"
  },
  {
    "label": "SparseToDenseCompositor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseToDenseCompositor"
  },
  {
    "label": "OpOver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpOver"
  },
  {
    "label": "OpAdd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpAdd"
  },
  {
    "label": "OpSub",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpSub"
  },
  {
    "label": "OpMin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpMin"
  },
  {
    "label": "OpMax",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpMax"
  },
  {
    "label": "OpMult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpMult"
  },
  {
    "label": "to",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "to"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "extractSparseTree()",
    "kind": "Method",
    "detail": "Function (OpType::ResultTreeType::Ptr)",
    "insertText": "extractSparseTree(const DenseType& dense, const OpType& functor,\n                  const typename OpType::ResultValueType& background,\n                  bool threaded = true)"
  },
  {
    "label": "extractSparseTreeWithMask()",
    "kind": "Method",
    "detail": "Function (MaskTreeType>::Type::Ptr)",
    "insertText": "extractSparseTreeWithMask(const DenseType& dense,\n                          const MaskTreeType& mask,\n                          const typename DenseType::ValueType& background,\n                          bool threaded = true)"
  },
  {
    "label": "transformDense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transformDense(Dense<ValueT, openvdb::tools::LayoutZYX>& dense,\n                    const openvdb::CoordBBox& bbox, const OpType& op, bool parallel=true)"
  },
  {
    "label": "compositeToDense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compositeToDense(Dense<typename TreeT::ValueType, LayoutZYX>& dense,\n                      const TreeT& source,\n                      const TreeT& alpha,\n                      const typename TreeT::ValueType beta,\n                      const typename TreeT::ValueType strength,\n                      bool threaded = true)"
  },
  {
    "label": "leafRange()",
    "kind": "Method",
    "detail": "Function (Range3d)",
    "insertText": "leafRange(0, xleafCount, 1,\n                           0, yleafCount, 1,\n                           0, zleafCount, 1)"
  },
  {
    "label": "ResultLeafNodeType()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ResultLeafNodeType(origin, mBackground)"
  },
  {
    "label": "extractor()",
    "kind": "Method",
    "detail": "Function (DenseType>)",
    "insertText": "extractor(dense, functor, background)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (tree)",
    "insertText": "for(size_t idx = range.begin()"
  },
  {
    "label": "leafarray()",
    "kind": "Method",
    "detail": "Function (MaskLeafVec)",
    "insertText": "leafarray(leafCount)"
  },
  {
    "label": "leafextractor()",
    "kind": "Method",
    "detail": "Function (LeafExtractor)",
    "insertText": "leafextractor(dense, background, leafarray)"
  },
  {
    "label": "tileIter()",
    "kind": "Method",
    "detail": "Function (MaskTreeType::ValueOnCIter)",
    "insertText": "tileIter(maskProxy)"
  },
  {
    "label": "copyData()",
    "kind": "Method",
    "detail": "Function (DenseType>)",
    "insertText": "copyData(dense, bbox, allrule, background)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (OpT)",
    "insertText": "op(functor)"
  },
  {
    "label": "transformer()",
    "kind": "Method",
    "detail": "Function (OpT>)",
    "insertText": "transformer(dense, bbox, op)"
  },
  {
    "label": "maskLeafs()",
    "kind": "Method",
    "detail": "Function (MaskTreeT>)",
    "insertText": "maskLeafs(maskTree)"
  },
  {
    "label": "alphaAccessor()",
    "kind": "Method",
    "detail": "Function (TreeT>)",
    "insertText": "alphaAccessor(mAlpha)"
  },
  {
    "label": "sourceAccessor()",
    "kind": "Method",
    "detail": "Function (TreeT>)",
    "insertText": "sourceAccessor(mSource)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (TileTransformer)",
    "insertText": "functor(sourceValue, alphaValue, beta, strength)"
  },
  {
    "label": "alphaAccessor()",
    "kind": "Method",
    "detail": "Function (TreeT>)",
    "insertText": "alphaAccessor(mAlpha)"
  },
  {
    "label": "sourceAccessor()",
    "kind": "Method",
    "detail": "Function (TreeT>)",
    "insertText": "sourceAccessor(mSource)"
  },
  {
    "label": "tool()",
    "kind": "Method",
    "detail": "Function (TreeT>)",
    "insertText": "tool(dense, source, alpha, beta, strength)"
  }
]