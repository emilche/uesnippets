[
  {
    "label": "DSConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DSConverter"
  },
  {
    "label": "DSCompositeOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DSCompositeOp"
  },
  {
    "label": "SparseExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseExtractor"
  },
  {
    "label": "SparseMaskedExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMaskedExtractor"
  },
  {
    "label": "ExtractAll",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtractAll"
  },
  {
    "label": "DenseTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseTransformer"
  },
  {
    "label": "ContiguousOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContiguousOp"
  },
  {
    "label": "SparseToDenseCompositor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseToDenseCompositor"
  },
  {
    "label": "UniformTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniformTransformer"
  },
  {
    "label": "Line",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Line"
  },
  {
    "label": "UniformLeaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniformLeaf"
  },
  {
    "label": "OpOver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpOver"
  },
  {
    "label": "OpAdd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpAdd"
  },
  {
    "label": "OpSub",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpSub"
  },
  {
    "label": "OpMin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpMin"
  },
  {
    "label": "OpMax",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpMax"
  },
  {
    "label": "OpMult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpMult"
  },
  {
    "label": "CompositeFunctorTranslator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompositeFunctorTranslator"
  },
  {
    "label": "extractSparseTree()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_DENSESPARSETOOLS_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_DENSESPARSETOOLS_HAS_BEEN_INCLUDED # include<tbb / parallel_reduce . h> # include<tbb / blocked_range3d . h> # include<tbb / blocked_range2d . h> # include<tbb / blocked_range . h> # include<openvdb / Types . h> # include<openvdb / tree / LeafManager . h> # include \" Dense . h \" # include<algorithm> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<OpType,DenseType> OpType::ResultTreeType::Ptr)",
    "insertText": "extractSparseTree(const DenseType& dense, const OpType& functor, const typename OpType::ResultValueType& background, bool threaded = true)"
  },
  {
    "label": "extractSparseTreeWithMask()",
    "kind": "Method",
    "detail": "Function (template<DenseType,TreeType> struct DSConverter { using ValueType = DenseType::ValueType ; using Type = TreeType::template ValueConverter<ValueType>::Type ; } ; template<DenseType,MaskTreeType> DSConverter<DenseType,MaskTreeType>::Type::Ptr)",
    "insertText": "extractSparseTreeWithMask(const DenseType& dense, const MaskTreeType& mask, const typename DenseType::ValueType& background, bool threaded = true)"
  },
  {
    "label": "transformDense()",
    "kind": "Method",
    "detail": "Function (template<ValueT,OpType> void)",
    "insertText": "transformDense(Dense<ValueT, openvdb::tools::LayoutZYX>& dense, const openvdb::CoordBBox& bbox, const OpType& op, bool parallel=true)"
  },
  {
    "label": "compositeToDense()",
    "kind": "Method",
    "detail": "Function (enum DSCompositeOp { DS_OVER,DS_ADD,DS_SUB,DS_MIN,DS_MAX,DS_MULT,DS_SET } ; template<DSCompositeOp,TreeT> void)",
    "insertText": "compositeToDense(Dense<typename TreeT::ValueType, LayoutZYX>& dense, const TreeT& source, const TreeT& alpha, const typename TreeT::ValueType beta, const typename TreeT::ValueType strength, bool threaded = true)"
  },
  {
    "label": "SparseExtractor()",
    "kind": "Method",
    "detail": "Function (template<OpType,DenseType> class SparseExtractor { public : using Index = openvdb::math::Coord::ValueType ; using DenseValueType = DenseType::ValueType ; using ResultTreeType = OpType::ResultTreeType ; using ResultValueType = ResultTreeType::ValueType ; using ResultLeafNodeType = ResultTreeType::LeafNodeType ; using MaskTree = ResultTreeType::template ValueConverter<ValueMask>::Type ; using Range3d = tbb::blocked_range3d<Index,Index,Index> ; private : const DenseType& mDense ; const OpType& mFunctor ; const ResultValueType mBackground ; const openvdb::math::CoordBBox mBBox ; const Index mWidth ; ResultTreeType::Ptr mMask ; openvdb::math::Coord mMin ; public :)",
    "insertText": "SparseExtractor(const DenseType& dense, const OpType& functor, const ResultValueType background) : mDense(dense), mFunctor(functor), mBackground(background), mBBox(dense.bbox()), mWidth(ResultLeafNodeType::DIM), mMask( new ResultTreeType(mBackground))"
  },
  {
    "label": "SparseExtractor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseExtractor(const DenseType& dense, const openvdb::math::CoordBBox& bbox, const OpType& functor, const ResultValueType background) : mDense(dense), mFunctor(functor), mBackground(background), mBBox(bbox), mWidth(ResultLeafNodeType::DIM), mMask( new ResultTreeType(mBackground))"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"Data extraction window out of bound\")"
  },
  {
    "label": "SparseExtractor()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "SparseExtractor(SparseExtractor& other, tbb::split): mDense(other.mDense), mFunctor(other.mFunctor), mBackground(other.mBackground), mBBox(other.mBBox), mWidth(other.mWidth), mMask(new ResultTreeType(mBackground)), mMin(other.mMin)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} ResultTreeType::Ptr)",
    "insertText": "extract(bool threaded = true)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (openvdb::math::Coord padded_min = mBBox .)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (openvdb::math::Coord padded_max = mBBox .)",
    "insertText": "max()"
  },
  {
    "label": "padded_min()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "padded_min(mWidth - 1)"
  },
  {
    "label": "padded_max()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "padded_max(mWidth - 1)"
  },
  {
    "label": "xleafCount()",
    "kind": "Method",
    "detail": "Function (padded_max [ 0 ] + = mWidth - 1 ; padded_max [ 1 ] + = mWidth - 1 ; padded_max [ 2 ] + = mWidth - 1 ; const Index)",
    "insertText": "xleafCount(padded_max.x() - padded_min.x() + 1)"
  },
  {
    "label": "yleafCount()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "yleafCount(padded_max.y() - padded_min.y() + 1)"
  },
  {
    "label": "zleafCount()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "zleafCount(padded_max.z() - padded_min.z() + 1)"
  },
  {
    "label": "leafRange()",
    "kind": "Method",
    "detail": "Function (mMin = padded_min ; Range3d)",
    "insertText": "leafRange(0, xleafCount, 1, 0, yleafCount, 1, 0, zleafCount, 1)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(leafRange, *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(leafRange)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return mMask ; } void)",
    "insertText": "operator()(const Range3d& range)"
  },
  {
    "label": "pages()",
    "kind": "Method",
    "detail": "Function (ResultLeafNodeType* leaf = nullptr ; const Index imin = range .)",
    "insertText": "pages().begin()"
  },
  {
    "label": "pages()",
    "kind": "Method",
    "detail": "Function (const Index imax = range .)",
    "insertText": "pages().end()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const Index jmin = range .)",
    "insertText": "rows().begin()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const Index jmax = range .)",
    "insertText": "rows().end()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index kmin = range .)",
    "insertText": "cols().begin()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index kmax = range .)",
    "insertText": "cols().end()"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (const openvdb::math::Coord origin = mMin + openvdb::)",
    "insertText": "Coord(mWidth * i, mWidth * j, mWidth * k)"
  },
  {
    "label": "ResultLeafNodeType()",
    "kind": "Method",
    "detail": "Function (leaf = new)",
    "insertText": "ResultLeafNodeType(origin, mBackground)"
  },
  {
    "label": "setOrigin()",
    "kind": "Method",
    "detail": "Function (} else { leaf ->)",
    "insertText": "setOrigin(origin)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "fill(mBackground)"
  },
  {
    "label": "setValuesOff()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "setValuesOff()"
  },
  {
    "label": "getNodeBoundingBox()",
    "kind": "Method",
    "detail": "Function (} openvdb::math::CoordBBox localBBox = leaf ->)",
    "insertText": "getNodeBoundingBox()"
  },
  {
    "label": "intersect()",
    "kind": "Method",
    "detail": "Function (localBBox .)",
    "insertText": "intersect(mBBox)"
  },
  {
    "label": "getStart()",
    "kind": "Method",
    "detail": "Function (const openvdb::math::Coord start = localBBox .)",
    "insertText": "getStart()"
  },
  {
    "label": "getEnd()",
    "kind": "Method",
    "detail": "Function (const openvdb::math::Coord end = localBBox .)",
    "insertText": "getEnd()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (openvdb::math::Coord ijk ; Index offset ; const DenseValueType* dp ;)",
    "insertText": "for(ijk[0] = start.x(); ijk[0] < end.x(); ++ijk[0])"
  },
  {
    "label": "mFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mFunctor(*dp, offset, leaf)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } else { openvdb::math::Coord ijk ; const DenseValueType* dp ;)",
    "insertText": "for(ijk[2] = start.z(); ijk[2] < end.z(); ++ijk[2])"
  },
  {
    "label": "mFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mFunctor(*dp, ijk, leaf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(!leaf->isEmpty())"
  },
  {
    "label": "addLeaf()",
    "kind": "Method",
    "detail": "Function (mMask ->)",
    "insertText": "addLeaf(leaf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (leaf = nullptr ; } } } })",
    "insertText": "if(leaf != nullptr)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(SparseExtractor& rhs)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (mMask ->)",
    "insertText": "merge(*rhs.mMask)"
  },
  {
    "label": "extractSparseTree()",
    "kind": "Method",
    "detail": "Function (} } ; template<OpType,DenseType> OpType::ResultTreeType::Ptr)",
    "insertText": "extractSparseTree(const DenseType& dense, const OpType& functor, const typename OpType::ResultValueType& background, bool threaded)"
  },
  {
    "label": "extractor()",
    "kind": "Method",
    "detail": "Function (SparseExtractor<OpType,DenseType>)",
    "insertText": "extractor(dense, functor, background)"
  },
  {
    "label": "SparseMaskedExtractor()",
    "kind": "Method",
    "detail": "Function (} template<DenseType,MaskTreeType> class SparseMaskedExtractor { public : using _ResultTreeType = DSConverter<DenseType,MaskTreeType>::Type ; using ResultTreeType = _ResultTreeType ; using ResultLeafNodeType = ResultTreeType::LeafNodeType ; using ResultValueType = ResultTreeType::ValueType ; using DenseValueType = ResultValueType ; using MaskTree = ResultTreeType::template ValueConverter<ValueMask>::Type ; using MaskLeafCIter = MaskTree::LeafCIter ; using MaskLeafVec = std::vector<const MaskTree::LeafNodeType*> ;)",
    "insertText": "SparseMaskedExtractor(const DenseType& dense, const ResultValueType& background, const MaskLeafVec& leafVec ): mDense(dense), mBackground(background), mBBox(dense.bbox()), mLeafVec(leafVec), mResult(new ResultTreeType(mBackground))"
  },
  {
    "label": "SparseMaskedExtractor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseMaskedExtractor(const SparseMaskedExtractor& other, tbb::split): mDense(other.mDense), mBackground(other.mBackground), mBBox(other.mBBox), mLeafVec(other.mLeafVec), mResult( new ResultTreeType(mBackground))"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "range(0, mLeafVec.size())"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(range, *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return mResult ; } void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ResultLeafNodeType* leaf = nullptr ;)",
    "insertText": "for(size_t idx = range.begin(); idx < range.end(); ++ idx)"
  },
  {
    "label": "ResultLeafNodeType()",
    "kind": "Method",
    "detail": "Function (leaf = new)",
    "insertText": "ResultLeafNodeType(maskLeaf->origin(), mBackground)"
  },
  {
    "label": "setOrigin()",
    "kind": "Method",
    "detail": "Function (} else { leaf ->)",
    "insertText": "setOrigin(maskLeaf->origin())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (openvdb::math::Coord ijk ;)",
    "insertText": "if(mDense.memoryLayout() == openvdb::tools::LayoutZYX && maskLeaf->isDense())"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "setValueOn(offset, *src)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const ResultValueType denseValue = mDense .)",
    "insertText": "getValue(ijk)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "setValueOn(offset, denseValue)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(SparseMaskedExtractor& rhs)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (mResult ->)",
    "insertText": "merge(*rhs.mResult)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : const DenseType& mDense ; const ResultValueType mBackground ; const openvdb::math::CoordBBox& mBBox ; const MaskLeafVec& mLeafVec ; ResultTreeType::Ptr mResult ; } ; template<_ResultTreeType,DenseValueType> struct ExtractAll { using ResultTreeType = _ResultTreeType ; using ResultLeafNodeType = ResultTreeType::LeafNodeType ; template<CoordOrIndex> void)",
    "insertText": "operator()(const DenseValueType& a, const CoordOrIndex& offset, ResultLeafNodeType* leaf)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "setValueOn(offset, a)"
  },
  {
    "label": "extractSparseTreeWithMask()",
    "kind": "Method",
    "detail": "Function (} } ; template<DenseType,MaskTreeType> DSConverter<DenseType,MaskTreeType>::Type::Ptr)",
    "insertText": "extractSparseTreeWithMask(const DenseType& dense, const MaskTreeType& maskProxy, const typename DenseType::ValueType& background, bool threaded)"
  },
  {
    "label": "maskTree()",
    "kind": "Method",
    "detail": "Function (using LeafExtractor = SparseMaskedExtractor<DenseType,MaskTreeType> ; using DenseValueType = LeafExtractor::DenseValueType ; using ResultTreeType = LeafExtractor::ResultTreeType ; using MaskLeafVec = LeafExtractor::MaskLeafVec ; using MaskTree = LeafExtractor::MaskTree ; using MaskLeafCIter = LeafExtractor::MaskLeafCIter ; using ExtractionRule = ExtractAll<ResultTreeType,DenseValueType> ; MaskTree)",
    "insertText": "maskTree(maskProxy, false, TopologyCopy())"
  },
  {
    "label": "leafCount()",
    "kind": "Method",
    "detail": "Function (const size_t leafCount = maskTree .)",
    "insertText": "leafCount()"
  },
  {
    "label": "leafarray()",
    "kind": "Method",
    "detail": "Function (MaskLeafVec)",
    "insertText": "leafarray(leafCount)"
  },
  {
    "label": "cbeginLeaf()",
    "kind": "Method",
    "detail": "Function (MaskLeafCIter leafiter = maskTree .)",
    "insertText": "cbeginLeaf()"
  },
  {
    "label": "getLeaf()",
    "kind": "Method",
    "detail": "Function (leafarray [ n ] = leafiter .)",
    "insertText": "getLeaf()"
  },
  {
    "label": "leafextractor()",
    "kind": "Method",
    "detail": "Function (} LeafExtractor)",
    "insertText": "leafextractor(dense, background, leafarray)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (ResultTreeType::Ptr resultTree = leafextractor .)",
    "insertText": "extract(threaded)"
  },
  {
    "label": "tileIter()",
    "kind": "Method",
    "detail": "Function (MaskTreeType::ValueOnCIter)",
    "insertText": "tileIter(maskProxy)"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (tileIter .)",
    "insertText": "setMaxDepth(MaskTreeType::ValueOnCIter::LEAF_DEPTH - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ExtractionRule allrule ; CoordBBox bbox ;)",
    "insertText": "for(; tileIter; ++tileIter)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (tileIter .)",
    "insertText": "getBoundingBox(bbox)"
  },
  {
    "label": "intersect()",
    "kind": "Method",
    "detail": "Function (bbox .)",
    "insertText": "intersect(dense.bbox())"
  },
  {
    "label": "copyData()",
    "kind": "Method",
    "detail": "Function (SparseExtractor<ExtractionRule,DenseType>)",
    "insertText": "copyData(dense, bbox, allrule, background)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (resultTree ->)",
    "insertText": "merge(*fromTileTree)"
  },
  {
    "label": "DenseTransformer()",
    "kind": "Method",
    "detail": "Function (} return resultTree ; } template<_ValueT,OpType> class DenseTransformer { public : using ValueT = _ValueT ; using DenseT = Dense<ValueT,openvdb::tools::LayoutZYX> ; using IntType = openvdb::math::Coord::ValueType ; using RangeType = tbb::blocked_range2d<IntType,IntType> ; private : DenseT& mDense ; const OpType& mOp ; openvdb::math::CoordBBox mBBox ; public :)",
    "insertText": "DenseTransformer(DenseT& dense, const openvdb::math::CoordBBox& bbox, const OpType& functor): mDense(dense), mOp(functor), mBBox(dense.bbox())"
  },
  {
    "label": "intersect()",
    "kind": "Method",
    "detail": "Function (mBBox .)",
    "insertText": "intersect(bbox)"
  },
  {
    "label": "DenseTransformer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DenseTransformer(const DenseTransformer& other) : mDense(other.mDense), mOp(other.mOp), mBBox(other.mBBox)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "apply(bool threaded = true)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (const RangeType)",
    "insertText": "range(start.x(), end.x(), 1, start.y(), end.y(), 1)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, *this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(const RangeType& range)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t zlength =)",
    "insertText": "size_t(mBBox.max().z() - mBBox.min().z() + 1)"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (openvdb::math::Coord)",
    "insertText": "xyz(imin, jmin, mBBox.min().z())"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (mOp .)",
    "insertText": "transform(mDense, xyz, zlength)"
  },
  {
    "label": "ContiguousOp()",
    "kind": "Method",
    "detail": "Function (} } } } ; template<ValueT,PointWiseOp> struct ContiguousOp {)",
    "insertText": "ContiguousOp(const PointWiseOp& op) : mOp(op)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} using DenseT = Dense<ValueT,openvdb::tools::LayoutZYX> ; void)",
    "insertText": "transform(DenseT& dense, openvdb::math::Coord& ijk, size_t size)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (ValueT* dp = const_cast<)",
    "insertText": "ValueT(&dense.getValue(ijk))"
  },
  {
    "label": "mOp()",
    "kind": "Method",
    "detail": "Function (dp [ offset ] =)",
    "insertText": "mOp(dp[offset])"
  },
  {
    "label": "transformDense()",
    "kind": "Method",
    "detail": "Function (} } const PointWiseOp mOp ; } ; template<ValueT,PointwiseOpT> void)",
    "insertText": "transformDense(Dense<ValueT, openvdb::tools::LayoutZYX>& dense, const openvdb::CoordBBox& bbox, const PointwiseOpT& functor, bool parallel)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (using OpT = ContiguousOp<ValueT,PointwiseOpT> ; OpT)",
    "insertText": "op(functor)"
  },
  {
    "label": "transformer()",
    "kind": "Method",
    "detail": "Function (DenseTransformer<ValueT,OpT>)",
    "insertText": "transformer(dense, bbox, op)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (transformer .)",
    "insertText": "apply(parallel)"
  },
  {
    "label": "SparseToDenseCompositor()",
    "kind": "Method",
    "detail": "Function (} template<CompositeMethod,_TreeT> class SparseToDenseCompositor { public : using TreeT = _TreeT ; using ValueT = TreeT::ValueType ; using LeafT = TreeT::LeafNodeType ; using MaskTreeT = TreeT::template ValueConverter<ValueMask>::Type ; using MaskLeafT = MaskTreeT::LeafNodeType ; using DenseT = Dense<ValueT,openvdb::tools::LayoutZYX> ; using Index = openvdb::math::Coord::ValueType ; using Range3d = tbb::blocked_range3d<Index,Index,Index> ;)",
    "insertText": "SparseToDenseCompositor(DenseT& dense, const TreeT& source, const TreeT& alpha, const ValueT beta, const ValueT strength) : mDense(dense), mSource(source), mAlpha(alpha), mBeta(beta), mStrength(strength)"
  },
  {
    "label": "SparseToDenseCompositor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseToDenseCompositor(const SparseToDenseCompositor& other): mDense(other.mDense), mSource(other.mSource), mAlpha(other.mAlpha), mBeta(other.mBeta), mStrength(other.mStrength)"
  },
  {
    "label": "sparseComposite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "sparseComposite(bool threaded)"
  },
  {
    "label": "maskTree()",
    "kind": "Method",
    "detail": "Function (const ValueT beta = mBeta ; const ValueT strength = mStrength ; MaskTreeT)",
    "insertText": "maskTree(mSource, false , openvdb::TopologyCopy())"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (maskTree .)",
    "insertText": "topologyUnion(mAlpha)"
  },
  {
    "label": "maskLeafs()",
    "kind": "Method",
    "detail": "Function (openvdb::tree::LeafManager<const MaskTreeT>)",
    "insertText": "maskLeafs(maskTree)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (maskLeafs .)",
    "insertText": "foreach(*this, threaded)"
  },
  {
    "label": "cbeginValueOn()",
    "kind": "Method",
    "detail": "Function (MaskTreeT::ValueOnCIter citer = maskTree .)",
    "insertText": "cbeginValueOn()"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (citer .)",
    "insertText": "setMaxDepth(MaskTreeT::ValueOnCIter::LEAF_DEPTH - 1)"
  },
  {
    "label": "alphaAccessor()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<const TreeT>)",
    "insertText": "alphaAccessor(mAlpha)"
  },
  {
    "label": "sourceAccessor()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<const TreeT>)",
    "insertText": "sourceAccessor(mSource)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const openvdb::math::Coord org = citer .)",
    "insertText": "getCoord()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const ValueT alphaValue = alphaAccessor .)",
    "insertText": "getValue(org)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (openvdb::math::CoordBBox localBBox = citer .)",
    "insertText": "getBoundingBox()"
  },
  {
    "label": "intersect()",
    "kind": "Method",
    "detail": "Function (localBBox .)",
    "insertText": "intersect(mDense.bbox())"
  },
  {
    "label": "compositeFromTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compositeFromTile(mDense, localBBox, sourceValue, alphaValue, beta, strength, threaded)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(const MaskLeafT& maskLeaf, size_t)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (const openvdb::math::Coord org = maskLeaf .)",
    "insertText": "origin()"
  },
  {
    "label": "probeLeaf()",
    "kind": "Method",
    "detail": "Function (const LeafT* alphaLeaf = mAlpha .)",
    "insertText": "probeLeaf(org)"
  },
  {
    "label": "uniformSource()",
    "kind": "Method",
    "detail": "Function (ULeaf)",
    "insertText": "uniformSource(mSource.getValue(org))"
  },
  {
    "label": "uniformAlpha()",
    "kind": "Method",
    "detail": "Function (ULeaf)",
    "insertText": "uniformAlpha(mAlpha.getValue(org))"
  },
  {
    "label": "compositeFromLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compositeFromLeaf(mDense, localBBox, uniformSource, uniformAlpha, mBeta, mStrength)"
  },
  {
    "label": "compositeFromLeaf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "compositeFromLeaf(mDense, localBBox, uniformSource, *alphaLeaf, mBeta, mStrength)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(!alphaLeaf)"
  },
  {
    "label": "compositeFromLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compositeFromLeaf(mDense, localBBox, *sourceLeaf, uniformAlpha, mBeta, mStrength)"
  },
  {
    "label": "compositeFromLeaf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "compositeFromLeaf(mDense, localBBox, *sourceLeaf, *alphaLeaf, mBeta, mStrength)"
  },
  {
    "label": "compositeFromLeaf()",
    "kind": "Method",
    "detail": "Function (} } } template<LeafT1,LeafT2> void)",
    "insertText": "compositeFromLeaf(DenseT& dense, const openvdb::math::CoordBBox& bbox, const LeafT1& source, const LeafT2& alpha, const ValueT beta, const ValueT strength)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const IntType size = bbox .)",
    "insertText": "max().z() + 1 - bbox.min().z()"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (d [ idx ] =)",
    "insertText": "apply(d[idx], a[idx], s[idx], strength, beta, sbeta)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "for(ijk[0] = bbox.min().x(); ijk[0] < bbox.max().x() + 1; ++ijk[0])"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (dense .)",
    "insertText": "setValue(ijk, CompositeMethod::apply(dense.getValue(ijk), alpha.getValue(ijk), source.getValue(ijk), strength, beta, sbeta))"
  },
  {
    "label": "compositeFromTile()",
    "kind": "Method",
    "detail": "Function (} } } } } } void)",
    "insertText": "compositeFromTile(DenseT& dense, openvdb::math::CoordBBox& bbox, const ValueT& sourceValue, const ValueT& alphaValue, const ValueT& beta, const ValueT& strength, bool threaded)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (using TileTransformer = UniformTransformer ; TileTransformer)",
    "insertText": "functor(sourceValue, alphaValue, beta, strength)"
  },
  {
    "label": "transformDense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transformDense(dense, bbox, functor, threaded)"
  },
  {
    "label": "denseComposite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "denseComposite(bool threaded)"
  },
  {
    "label": "bbox()",
    "kind": "Method",
    "detail": "Function (const openvdb::math::CoordBBox& bbox = mDense .)",
    "insertText": "bbox()"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (Range3d)",
    "insertText": "range(bbox.min().x(), bbox.max().x(), LeafT::DIM, bbox.min().y(), bbox.max().y(), LeafT::DIM, bbox.min().z(), bbox.max().z(), LeafT::DIM)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (openvdb::Coord ijk ;)",
    "insertText": "for(ijk[0] = imin; ijk[0] < imax; ++ijk[0])"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (mDense .)",
    "insertText": "setValue(ijk, CompositeMethod::apply(d_old, alpha, src, strength, beta, sbeta))"
  },
  {
    "label": "UniformTransformer()",
    "kind": "Method",
    "detail": "Function (} } } } private : class UniformTransformer { public :)",
    "insertText": "UniformTransformer(const ValueT& source, const ValueT& alpha, const ValueT& _beta, const ValueT& _strength) : mSource(source), mAlpha(alpha), mBeta(_beta), mStrength(_strength), mSBeta(_strength * _beta)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueT)",
    "insertText": "operator()(const ValueT& input)"
  },
  {
    "label": "UniformLeaf()",
    "kind": "Method",
    "detail": "Function (} private : const ValueT mSource ; const ValueT mAlpha ; const ValueT mBeta ; const ValueT mStrength ; const ValueT mSBeta ; } ; struct Line { ValueT mValues [ LeafT::DIM ] ; } ; class UniformLeaf : private Line { public : using ValueT = LeafT::ValueType ; using BaseT = Line ;)",
    "insertText": "UniformLeaf(const ValueT& value) : BaseT(init(value))"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} const BaseT)",
    "insertText": "init(const ValueT& value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BaseT tmp ;)",
    "insertText": "for(openvdb::Index i = 0; i < LeafT::DIM; ++i)"
  },
  {
    "label": "isDense()",
    "kind": "Method",
    "detail": "Function (tmp . mValues [ i ] = value ; } return tmp ; } bool)",
    "insertText": "isDense()"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueT> struct OpAdd { ValueT)",
    "insertText": "apply(const ValueT u, const ValueT alpha, const ValueT v, const ValueT , const ValueT , const ValueT sbeta)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueT> struct OpMin { ValueT)",
    "insertText": "apply(const ValueT u, const ValueT alpha, const ValueT v, const ValueT s , const ValueT beta, const ValueT)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueT> struct OpMult { ValueT)",
    "insertText": "apply(const ValueT u, const ValueT alpha, const ValueT v, const ValueT s , const ValueT , const ValueT sbeta)"
  },
  {
    "label": "compositeToDense()",
    "kind": "Method",
    "detail": "Function (} } ; template<DSCompositeOp OP,ValueT> struct CompositeFunctorTranslator { } ; template<ValueT> struct CompositeFunctorTranslator<DS_OVER,ValueT> { using OpT = OpOver<ValueT> ; } ; template<ValueT> struct CompositeFunctorTranslator<DS_ADD,ValueT> { using OpT = OpAdd<ValueT> ; } ; template<ValueT> struct CompositeFunctorTranslator<DS_SUB,ValueT> { using OpT = OpSub<ValueT> ; } ; template<ValueT> struct CompositeFunctorTranslator<DS_MIN,ValueT> { using OpT = OpMin<ValueT> ; } ; template<ValueT> struct CompositeFunctorTranslator<DS_MAX,ValueT> { using OpT = OpMax<ValueT> ; } ; template<ValueT> struct CompositeFunctorTranslator<DS_MULT,ValueT> { using OpT = OpMult<ValueT> ; } ; } template<DSCompositeOp OpT,TreeT> void)",
    "insertText": "compositeToDense(Dense<typename TreeT::ValueType, LayoutZYX>& dense, const TreeT& source, const TreeT& alpha, const typename TreeT::ValueType beta, const typename TreeT::ValueType strength, bool threaded)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using ValueT = TreeT::ValueType ; using Translator = ds::CompositeFunctorTranslator<OpT,ValueT> ; using Method = Translator::OpT ;)",
    "insertText": "if(openvdb::math::isZero(strength))"
  },
  {
    "label": "tool()",
    "kind": "Method",
    "detail": "Function (SparseToDenseCompositor<Method,TreeT>)",
    "insertText": "tool(dense, source, alpha, beta, strength)"
  },
  {
    "label": "sparseComposite()",
    "kind": "Method",
    "detail": "Function (tool .)",
    "insertText": "sparseComposite(threaded)"
  },
  {
    "label": "denseComposite()",
    "kind": "Method",
    "detail": "Function (} else { tool .)",
    "insertText": "denseComposite(threaded)"
  }
]