[
  {
    "label": "TBVTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBVTree"
  },
  {
    "label": "FElementBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementBox"
  },
  {
    "label": "FAxisSort",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAxisSort"
  },
  {
    "label": "FElementBox()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Math / Box . h \" template<InElementType,InAllocator = FDefaultAllocator> struct TBVTree { typedef InElementType FElement ; struct FElementBox : public FBox { int ElementIndex ;)",
    "insertText": "FElementBox() : FBox(ForceInit), ElementIndex(-1)"
  },
  {
    "label": "FElementBox()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FElementBox(const FBox& Box) : FBox(Box), ElementIndex(-1)"
  },
  {
    "label": "TBVTree()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "TBVTree()"
  },
  {
    "label": "TBVTree()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBVTree(const TArray<FElement>& InElements)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create(InElements)"
  },
  {
    "label": "TBVTree()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBVTree(TArray<FElement>&& InElements)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create(MoveTemp(InElements))"
  },
  {
    "label": "RecreateTree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecreateTree()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Reset()"
  },
  {
    "label": "CreateCommonInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCommonInternal()"
  },
  {
    "label": "RecreateTree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecreateTree(const TArray<FElement>& InElements)"
  },
  {
    "label": "RecreateTree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecreateTree(TArray<FElement>&& InElements)"
  },
  {
    "label": "GetOverlapping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetOverlapping(const FBox& Box, TArray<FElement>& OutOverlappingElements)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int LimitIndex = Nodes .)",
    "insertText": "Num()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int NodeIndex = 0 ;)",
    "insertText": "while(NodeIndex < LimitIndex)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (const bool bOverlap = Box .)",
    "insertText": "Intersect(NodeBoundingBoxes[NodeIndex])"
  },
  {
    "label": "bLeafNode()",
    "kind": "Method",
    "detail": "Function (const int16 ElementIndex = Nodes [ NodeIndex ] ; const bool)",
    "insertText": "bLeafNode(ElementIndex >= 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutOverlappingElements .)",
    "insertText": "Add(Elements[ElementIndex])"
  },
  {
    "label": "NodeIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeIndex(bOverlap || bLeafNode)"
  },
  {
    "label": "GetNodes()",
    "kind": "Method",
    "detail": "Function (} } const TArray<int16,InAllocator>&)",
    "insertText": "GetNodes()"
  },
  {
    "label": "Subdivide()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Subdivide(TArray<FElementBox>& ElementBBoxes, const int StartIndex, const int LimitIndex, int& CurrentNode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int Count = LimitIndex - StartIndex ; const int ThisCurrentNode = CurrentNode ; int16& NodeIndex = Nodes [ CurrentNode ] ; FBox& NodeBounds = NodeBoundingBoxes [ CurrentNode + + ] ;)",
    "insertText": "if(Count == 1)"
  },
  {
    "label": "CalcNodeBounds()",
    "kind": "Method",
    "detail": "Function (NodeBounds = ElementBBoxes [ StartIndex ] ; NodeIndex = ElementBBoxes [ StartIndex ] . ElementIndex ; } else { const FBox TempNodeBounds =)",
    "insertText": "CalcNodeBounds(ElementBBoxes, StartIndex, LimitIndex)"
  },
  {
    "label": "GetLongestAxis()",
    "kind": "Method",
    "detail": "Function (NodeBounds = TempNodeBounds ; const int NumChildNodes = Count* 2 - 1 ; NodeIndex = - NumChildNodes ; const int Axis =)",
    "insertText": "GetLongestAxis(NodeBounds)"
  },
  {
    "label": "FAxisSort()",
    "kind": "Method",
    "detail": "Function (struct FAxisSort { const int Axis ;)",
    "insertText": "FAxisSort(const int InAxis) : Axis(InAxis)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const FElementBox& A, const FElementBox& B)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "Sort(MakeArrayView(ElementBBoxes.GetData() + StartIndex, Count), FAxisSort(Axis))"
  },
  {
    "label": "Subdivide()",
    "kind": "Method",
    "detail": "Function (const int SplitIndex = StartIndex + Count / 2 ;)",
    "insertText": "Subdivide(ElementBBoxes, StartIndex, SplitIndex, CurrentNode)"
  },
  {
    "label": "Subdivide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subdivide(ElementBBoxes, SplitIndex, LimitIndex, CurrentNode)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Create(const TArray<FElement>& InElements)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Create(TArray<FElement>&& InElements)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elements =)",
    "insertText": "MoveTemp(InElements)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "AddUninitialized(NodesCount)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<FElementBox> ElementBBoxes ; ElementBBoxes .)",
    "insertText": "AddUninitialized(Elements.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int Index = 0 ;)",
    "insertText": "for(const FElement& Element : Elements)"
  },
  {
    "label": "CalcElementBounds()",
    "kind": "Method",
    "detail": "Function (ElementBBoxes [ Index ] =)",
    "insertText": "CalcElementBounds(Element)"
  },
  {
    "label": "Subdivide()",
    "kind": "Method",
    "detail": "Function (ElementBBoxes [ Index ] . ElementIndex = Index ; + + Index ; } int CurrentNode = 0 ;)",
    "insertText": "Subdivide(ElementBBoxes, 0, Elements.Num(), CurrentNode)"
  },
  {
    "label": "CalcNodeBounds()",
    "kind": "Method",
    "detail": "Function (} } FBox)",
    "insertText": "CalcNodeBounds(const TArray<FElementBox>& ElementBBoxes, const int StartIndex, const int LimitIndex)"
  },
  {
    "label": "Extends()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "Extends(ForceInit)"
  },
  {
    "label": "GetLongestAxis()",
    "kind": "Method",
    "detail": "Function (Extends + = ElementBBoxes [ Index ] ; } return Extends ; } int)",
    "insertText": "GetLongestAxis(const FBox& NodeBounds)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const float MaxX = NodeBounds . Max . X - NodeBounds . Min . X ; const float MaxY = NodeBounds . Max . Y - NodeBounds . Min . Y ; const float MaxZ = NodeBounds . Max . Z - NodeBounds . Min . Z ;)",
    "insertText": "return(MaxX > MaxY && MaxX > MaxZ) ? 0 : ((MaxY > MaxZ) ? 1 : 2)"
  },
  {
    "label": "CalcElementBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "CalcElementBounds(const FElement&)"
  }
]