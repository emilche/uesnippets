[
  {
    "label": "SProjectLauncherCookedPlatforms",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherCookedPlatforms"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Models / ProjectLauncherModel . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Styling / AppStyle . h \" # include \" Interfaces / ITargetPlatform . h \" # include \" Interfaces / ITargetPlatformManagerModule . h \" class SProjectLauncherCookedPlatforms : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherCookedPlatforms)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel)"
  },
  {
    "label": "MakePlatformMenu()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "MakePlatformMenu()"
  },
  {
    "label": "GetTargetPlatformManager()",
    "kind": "Method",
    "detail": "Function (TArray<ITargetPlatform*> Platforms =)",
    "insertText": "GetTargetPlatformManager()->GetTargetPlatforms()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PlatformList .)",
    "insertText": "Reset()"
  },
  {
    "label": "PlatformName()",
    "kind": "Method",
    "detail": "Function (FString PlatformName = Platforms [ PlatformIndex ] ->)",
    "insertText": "PlatformName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PlatformList .)",
    "insertText": "Add(MakeShareable(new FString(PlatformName)))"
  },
  {
    "label": "HandleAllPlatformsHyperlinkNavigate()",
    "kind": "Method",
    "detail": "Function (} } } private : void)",
    "insertText": "HandleAllPlatformsHyperlinkNavigate(bool AllPlatforms)"
  },
  {
    "label": "GetSelectedProfile()",
    "kind": "Method",
    "detail": "Function (ILauncherProfilePtr SelectedProfile = Model ->)",
    "insertText": "GetSelectedProfile()"
  },
  {
    "label": "AddCookedPlatform()",
    "kind": "Method",
    "detail": "Function (SelectedProfile ->)",
    "insertText": "AddCookedPlatform(Platforms[PlatformIndex]->PlatformName())"
  },
  {
    "label": "ClearCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (} } else { SelectedProfile ->)",
    "insertText": "ClearCookedPlatforms()"
  },
  {
    "label": "HandleAllPlatformsHyperlinkVisibility()",
    "kind": "Method",
    "detail": "Function (} } } EVisibility)",
    "insertText": "HandleAllPlatformsHyperlinkVisibility()"
  },
  {
    "label": "GetTargetPlatformManager()",
    "kind": "Method",
    "detail": "Function (ITargetPlatform* TargetPlatform =)",
    "insertText": "GetTargetPlatformManager()->FindTargetPlatform(PlatformName)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function ({ return)",
    "insertText": "GetColor(\"Foreground\")"
  },
  {
    "label": "HandlePlatformListViewGenerateRow()",
    "kind": "Method",
    "detail": "Function (} } } return FLinearColor::Yellow ; } TSharedRef<ITableRow>)",
    "insertText": "HandlePlatformListViewGenerateRow(TSharedPtr<FString> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  }
]