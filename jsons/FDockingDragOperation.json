[
  {
    "label": "FDockingDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDockingDragOperation"
  },
  {
    "label": "FDockTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDockTarget"
  },
  {
    "label": "SDockingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingNode"
  },
  {
    "label": "SDockingTabWell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabWell"
  },
  {
    "label": "SDockingArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingArea"
  },
  {
    "label": "EViaTabwell",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViaTabwell"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / SlateRect . h \" # include \" Input / DragAndDrop . h \" # include \" Framework / Docking / SDockingNode . h \" # include \" Framework / Docking / SDockingArea . h \" # include \" Widgets / Docking / SDockTab . h \" # include \" Framework / Docking / SDockingTabStack . h \" # include \" Framework / Docking / SDockingTabWell . h \" class FDockingDragOperation : public FDragDropOperation { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FDockingDragOperation, FDragDropOperation)"
  },
  {
    "label": "FDockTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDockTarget() : TargetNode() , DockDirection()"
  },
  {
    "label": "FDockTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDockTarget(const TSharedPtr<class SDockingNode>& InTargetNode, SDockingNode::RelativeDirection InDockDirection ) : TargetNode( InTargetNode ) , DockDirection( InDockDirection)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDockTarget& Other)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<class SDockingNode> TargetNode ; SDockingNode::RelativeDirection DockDirection ; } ; void)",
    "insertText": "OnDrop(bool bDropWasHandled, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragged(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnTabWellEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabWellEntered(const TSharedRef<class SDockingTabWell>& ThePanel)"
  },
  {
    "label": "OnTabWellLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabWellLeft(const TSharedRef<class SDockingTabWell>& ThePanel, const FGeometry& DockNodeGeometry)"
  },
  {
    "label": "GetPreviewAreaForDirection()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetPreviewAreaForDirection(const FSlateRect& DockableArea, SDockingArea::RelativeDirection DockingDirection)"
  },
  {
    "label": "SetHoveredTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoveredTarget(const FDockTarget& InTarget, const FInputEvent& InputEvent)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FDockingDragOperation>)",
    "insertText": "New(const TSharedRef<SDockTab>& InTabToBeDragged, const FVector2D InTabGrabOffset, TSharedRef<class SDockingArea> InTabOwnerArea, const FVector2D& OwnerAreaSize)"
  },
  {
    "label": "GetTabBeingDragged()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetTabBeingDragged()"
  },
  {
    "label": "GetTabGrabOffsetFraction()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetTabGrabOffsetFraction()"
  },
  {
    "label": "CanDockInNode()",
    "kind": "Method",
    "detail": "Function (enum EViaTabwell { DockingViaTabWell,DockingViaTarget } ; bool)",
    "insertText": "CanDockInNode(const TSharedRef<SDockingNode>& DockNode, EViaTabwell IsDockingViaTabwell)"
  },
  {
    "label": "FDockingDragOperation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDockingDragOperation()"
  },
  {
    "label": "FDockingDragOperation()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDockingDragOperation(const TSharedRef<class SDockTab>& InTabToBeDragged, const FVector2D InTabGrabOffsetFraction, TSharedRef<class SDockingArea> InTabOwnerArea, const FVector2D& OwnerAreaSize)"
  },
  {
    "label": "GetDecoratorOffsetFromCursor()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "GetDecoratorOffsetFromCursor()"
  },
  {
    "label": "DesiredSizeFrom()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "DesiredSizeFrom(const FVector2D& InitialTabSize)"
  },
  {
    "label": "DroppedOntoNothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DroppedOntoNothing()"
  }
]