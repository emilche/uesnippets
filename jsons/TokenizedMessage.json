[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IMessageToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageToken"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "FPrivateToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateToken"
  },
  {
    "label": "FTextToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextToken"
  },
  {
    "label": "FDynamicTextToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicTextToken"
  },
  {
    "label": "FImageToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImageToken"
  },
  {
    "label": "FSeverityToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSeverityToken"
  },
  {
    "label": "FURLToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FURLToken"
  },
  {
    "label": "FAssetNameToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetNameToken"
  },
  {
    "label": "FDocumentationToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDocumentationToken"
  },
  {
    "label": "FActionToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActionToken"
  },
  {
    "label": "FTutorialToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTutorialToken"
  },
  {
    "label": "FActorToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorToken"
  },
  {
    "label": "IFixer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IFixer"
  },
  {
    "label": "FFixResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFixToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFixToken"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnMessageTokenActivated, const TSharedRef<class IMessageToken>&)"
  },
  {
    "label": "IMessageToken()",
    "kind": "Method",
    "detail": "Function (namespace EMessageToken { enum Type { Action,Actor,AssetName,AssetData,Documentation,Image,Object,Severity,Text,Tutorial,URL,EdGraph,DynamicText,Fix,} ; } class IMessageToken : public TSharedFromThis<IMessageToken> { public : ~)",
    "insertText": "IMessageToken()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} EMessageToken::Type)",
    "insertText": "GetType()"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "ToText()"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (MessageTokenActivated = InMessageTokenActivated ; return)",
    "insertText": "AsShared()"
  },
  {
    "label": "FPrivateToken()",
    "kind": "Method",
    "detail": "Function (} protected : FOnMessageTokenActivated MessageTokenActivated ; FText CachedText ; } ; class FTokenizedMessage : public TSharedFromThis<FTokenizedMessage> { struct FPrivateToken {)",
    "insertText": "FPrivateToken()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FTokenizedMessage>)",
    "insertText": "Create(EMessageSeverity::Type InSeverity, const FText& InMessageText = FText())"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTokenizedMessage>)",
    "insertText": "Clone()"
  },
  {
    "label": "AddToken()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTokenizedMessage>)",
    "insertText": "AddToken(const TSharedRef<IMessageToken>& InToken)"
  },
  {
    "label": "AddText()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTokenizedMessage>)",
    "insertText": "AddText(const FText& InText)"
  },
  {
    "label": "AddText()",
    "kind": "Method",
    "detail": "Function (template<. . . TArguments> TSharedRef<FTokenizedMessage>)",
    "insertText": "AddText(FTextFormat InTextFormat, TArguments&&... InArgs)"
  },
  {
    "label": "SetSeverity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSeverity(const EMessageSeverity::Type InSeverity)"
  },
  {
    "label": "GetSeverity()",
    "kind": "Method",
    "detail": "Function (EMessageSeverity::Type)",
    "insertText": "GetSeverity()"
  },
  {
    "label": "GetMessageTokens()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<IMessageToken>>&)",
    "insertText": "GetMessageTokens()"
  },
  {
    "label": "SetMessageLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageLink(const TSharedRef<IMessageToken>& InToken)"
  },
  {
    "label": "GetMessageLink()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMessageToken>)",
    "insertText": "GetMessageLink()"
  },
  {
    "label": "GetSeverityText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSeverityText(EMessageSeverity::Type InSeverity)"
  },
  {
    "label": "GetSeverityIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSeverityIconName(EMessageSeverity::Type InSeverity)"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "SetIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentifier(FName InIdentifier)"
  },
  {
    "label": "FTokenizedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTokenizedMessage(FPrivateToken) : Severity( EMessageSeverity::Info ) , Identifier(NAME_None)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FTextToken>)",
    "insertText": "Create(const FText& InMessage, bool InIsSourceLinkOnLeft = true)"
  },
  {
    "label": "IsSourceLinkOnLeft()",
    "kind": "Method",
    "detail": "Function (CachedText = InMessage ; bIsSourceLinkOnLeft = InIsSourceLinkOnLeft ; } bool)",
    "insertText": "IsSourceLinkOnLeft()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FDynamicTextToken>)",
    "insertText": "Create(const TAttribute<FText>& InMessage)"
  },
  {
    "label": "GetTextAttribute()",
    "kind": "Method",
    "detail": "Function (} const TAttribute<FText>&)",
    "insertText": "GetTextAttribute()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CachedText = InMessage .)",
    "insertText": "Get()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FImageToken>)",
    "insertText": "Create(const FName& InImageName)"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (CachedText =)",
    "insertText": "FromName(InImageName)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FSeverityToken>)",
    "insertText": "Create(EMessageSeverity::Type InSeverity)"
  },
  {
    "label": "GetSeverityText()",
    "kind": "Method",
    "detail": "Function (CachedText =)",
    "insertText": "GetSeverityText(InSeverity)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FURLToken>)",
    "insertText": "Create(const FString& InURL, const FText& InMessage = FText())"
  },
  {
    "label": "FURLToken()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FURLToken(const FString& InURL, const FText& InMessage)"
  },
  {
    "label": "VisitURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitURL(const TSharedRef<IMessageToken>& Token, FString InURL)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FAssetNameToken>)",
    "insertText": "Create(const FString& InAssetName, const FText& InMessage = FText())"
  },
  {
    "label": "OnGotoAsset()",
    "kind": "Method",
    "detail": "Function (FOnGotoAsset&)",
    "insertText": "OnGotoAsset()"
  },
  {
    "label": "FAssetNameToken()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FAssetNameToken(const FString& InAssetName, const FText& InMessage)"
  },
  {
    "label": "FindAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAsset(const TSharedRef<IMessageToken>& Token, FString InAssetName)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FDocumentationToken>)",
    "insertText": "Create(const FString& InDocumentationLink, const FString& InPreviewExcerptLink = FString(), const FString& InPreviewExcerptName = FString())"
  },
  {
    "label": "FDocumentationToken()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FDocumentationToken(const FString& InDocumentationLink, const FString& InPreviewExcerptLink, const FString& InPreviewExcerptName)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (private : FString DocumentationLink ; FString PreviewExcerptLink ; FString PreviewExcerptName ; } ;)",
    "insertText": "DECLARE_DELEGATE(FOnActionTokenExecuted)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FCanExecuteActionToken)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FActionToken>)",
    "insertText": "Create(const FText& InActionName, const FText& InActionDescription, const FOnActionTokenExecuted& InAction, bool bInSingleUse = false)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FActionToken>)",
    "insertText": "Create(const FText& InActionName, const FText& InActionDescription, const FOnActionTokenExecuted& InAction, const FCanExecuteActionToken& InCanExecuteAction, bool bInSingleUse = false)"
  },
  {
    "label": "ExecuteAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAction()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (ActionDelegate .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "GetActionDescription()",
    "kind": "Method",
    "detail": "Function (bActionExecuted = true ; } const FText&)",
    "insertText": "GetActionDescription()"
  },
  {
    "label": "IsValidAction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidAction()"
  },
  {
    "label": "FActionToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FActionToken(FPrivateToken, const FText& InActionName, const FText& InActionDescription, const FOnActionTokenExecuted& InAction, const FCanExecuteActionToken& InCanExecuteAction, bool bInSingleUse) : FActionToken(InActionName, InActionDescription, InAction, InCanExecuteAction, bInSingleUse)"
  },
  {
    "label": "FActionToken()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FActionToken(const FText& InActionName, const FText& InActionDescription, const FOnActionTokenExecuted& InAction, bool bInSingleUse) : ActionDelegate(InAction) , ActionDescription(InActionDescription) , bSingleUse(bInSingleUse) , bActionExecuted(false)"
  },
  {
    "label": "FActionToken()",
    "kind": "Method",
    "detail": "Function (CachedText = InActionName ; })",
    "insertText": "FActionToken(const FText& InActionName, const FText& InActionDescription, const FOnActionTokenExecuted& InAction, const FCanExecuteActionToken& InCanExecuteAction, bool bInSingleUse) : ActionDelegate(InAction) , CanExecuteActionDelegate(InCanExecuteAction) , ActionDescription(InActionDescription) , bSingleUse(bInSingleUse) , bActionExecuted(false)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FTutorialToken>)",
    "insertText": "Create(const FString& TutorialAssetName)"
  },
  {
    "label": "FTutorialToken()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FTutorialToken(const FString& InTutorialAssetName ) : TutorialAssetName(InTutorialAssetName)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FActorToken>)",
    "insertText": "Create(const FString& InActorPath, const FGuid& InActorGuid, const FText& InMessage = FText())"
  },
  {
    "label": "GetActorPath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetActorPath()"
  },
  {
    "label": "FActorToken()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FActorToken(const FString& InActorPath, const FGuid& InActorGuid, const FText& InMessage)"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (FString ActorPath ; FGuid ActorGuid ; FOnMessageTokenActivated DefaultMessageTokenActivated ; } ; namespace UE::DataValidation { struct IFixer ; } struct FFixResult { bool bIsSuccess = true ; FText Message ; FFixResult)",
    "insertText": "Success(const FText& Message)"
  },
  {
    "label": "Failure()",
    "kind": "Method",
    "detail": "Function (} FFixResult)",
    "insertText": "Failure(const FText& Message)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; public : TSharedRef<FFixToken>)",
    "insertText": "Create(const FText& InName, TSharedRef<UE::DataValidation::IFixer> InFixer, int32 InFixIndex)"
  },
  {
    "label": "GetFixIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFixIndex()"
  },
  {
    "label": "FFixToken()",
    "kind": "Method",
    "detail": "Function (Fixer = InFixer ; FixIndex = InFixIndex ; })",
    "insertText": "FFixToken(FPrivateToken, const FText& InName, TSharedPtr<UE::DataValidation::IFixer> Fixer, int32 FixIndex) : FFixToken(InName, MoveTemp(Fixer), FixIndex)"
  },
  {
    "label": "FFixToken()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FFixToken(const FText& InName, TSharedPtr<UE::DataValidation::IFixer> InFixer, int32 InFixIndex)"
  }
]