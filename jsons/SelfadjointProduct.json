[
  {
    "label": "selfadjoint_rank1_update",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_rank1_update"
  },
  {
    "label": "selfadjoint_product_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_product_selector"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINT_PRODUCT_H # define EIGEN_SELFADJOINT_PRODUCT_H namespace Eigen { template<Scalar,Index,int UpLo,bool ConjLhs,bool ConjRhs> struct selfadjoint_rank1_update<Scalar,Index,ColMajor,UpLo,ConjLhs,ConjRhs> { void)",
    "insertText": "run(Index size, Scalar* mat, Index stride, const Scalar* vecX, const Scalar* vecY, const Scalar& alpha)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (internal::conj_if<ConjRhs> cj ; typedef Map<const Matrix<Scalar,Dynamic,1>> OtherMap ; typedef internal::conditional<ConjLhs,OtherMap::ConjugateReturnType,const OtherMap&>::type ConjLhsType ;)",
    "insertText": "for(Index i=0; i<size; ++i)"
  },
  {
    "label": "Dynamic()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,)",
    "insertText": "Dynamic(mat+stride*i+(UpLo==Lower ? i : 0), (UpLo==Lower ? size-i : (i+1))) += (alpha * cj(vecY[i])) * ConjLhsType(OtherMap(vecX+(UpLo==Lower ? i : 0),UpLo==Lower ? size-i : (i+1)))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (selfadjoint_rank1_update<Scalar,Index,ColMajor,UpLo = = Lower ? Upper : Lower,ConjRhs,ConjLhs)",
    "insertText": "run(size,mat,stride,vecY,vecX,alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,OtherType,int UpLo,bool OtherIsVector = OtherType::IsVectorAtCompileTime> struct selfadjoint_product_selector ; template<MatrixType,OtherType,int UpLo> struct selfadjoint_product_selector<MatrixType,OtherType,UpLo,true> { void)",
    "insertText": "run(MatrixType& mat, const OtherType& other, const typename MatrixType::Scalar& alpha)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; typedef internal::blas_traits<OtherType> OtherBlasTraits ; typedef OtherBlasTraits::DirectLinearAccessType ActualOtherType ; typedef internal::remove_all<ActualOtherType>::type _ActualOtherType ; internal::add_const_on_value_type<ActualOtherType>::type actualOther =)",
    "insertText": "extract(other.derived())"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (Scalar actualAlpha = alpha*)",
    "insertText": "extractScalarFactor(other.derived())"
  },
  {
    "label": "StorageOrder()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "StorageOrder(internal::traits<MatrixType>::Flags&RowMajorBit)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (internal::gemv_static_vector_if<Scalar,OtherType::SizeAtCompileTime,OtherType::MaxSizeAtCompileTime,! UseOtherDirectly> static_other ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, actualOtherPtr, other.size(), (UseOtherDirectly ? const_cast<Scalar*>(actualOther.data()) : static_other.data()))"
  },
  {
    "label": "IsComplex()",
    "kind": "Method",
    "detail": "Function (selfadjoint_rank1_update<Scalar,Index,StorageOrder,UpLo,OtherBlasTraits::NeedToConjugate&& NumTraits<Scalar)",
    "insertText": "IsComplex(!OtherBlasTraits::NeedToConjugate) && NumTraits<Scalar>::IsComplex> ::run(other.size(), mat.data(), mat.outerStride(), actualOtherPtr, actualOtherPtr, actualAlpha)"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "IsRowMajor(internal::traits<MatrixType>::Flags&RowMajorBit)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index size = mat .)",
    "insertText": "cols()"
  },
  {
    "label": "blocking()",
    "kind": "Method",
    "detail": "Function (typedef internal::gemm_blocking_space<IsRowMajor ? RowMajor : ColMajor,Scalar,Scalar,MatrixType::MaxColsAtCompileTime,MatrixType::MaxColsAtCompileTime,_ActualOtherType::MaxColsAtCompileTime> BlockingType ; BlockingType)",
    "insertText": "blocking(size, size, depth, 1, false)"
  },
  {
    "label": "RowMajor()",
    "kind": "Method",
    "detail": "Function (internal::general_matrix_matrix_triangular_product<Index,Scalar,OtherIsRowMajor ? RowMajor : ColMajor,OtherBlasTraits::NeedToConjugate&& NumTraits<Scalar>::IsComplex,Scalar,OtherIsRowMajor ? ColMajor :)",
    "insertText": "RowMajor(!OtherBlasTraits::NeedToConjugate) && NumTraits<Scalar>::IsComplex, IsRowMajor ? RowMajor : ColMajor, MatrixType::InnerStrideAtCompileTime, UpLo> ::run(size, depth, actualOther.data(), actualOther.outerStride(), actualOther.data(), actualOther.outerStride(), mat.data(), mat.innerStride(), mat.outerStride(), actualAlpha, blocking)"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,unsigned int UpLo> template<DerivedU> EIGEN_DEVICE_FUNC SelfAdjointView<MatrixType,UpLo>& SelfAdjointView<MatrixType,UpLo)",
    "insertText": "rankUpdate(const MatrixBase<DerivedU>& u, const Scalar& alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (selfadjoint_product_selector<MatrixType,DerivedU,UpLo)",
    "insertText": "run(_expression().const_cast_derived(), u.derived(), alpha)"
  }
]