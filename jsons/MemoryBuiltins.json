[
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "ObjectSizeOffsetVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectSizeOffsetVisitor"
  },
  {
    "label": "ObjectSizeOffsetEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectSizeOffsetEvaluator"
  },
  {
    "label": "isAllocationFn()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_MEMORYBUILTINS_H # define LLVM_ANALYSIS_MEMORYBUILTINS_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / Analysis / TargetFolder . h \" # include \" llvm / IR / IRBuilder . h \" # include \" llvm / IR / InstVisitor . h \" # include \" llvm / IR / Operator . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class CallInst ; class PointerType ; class DataLayout ; class TargetLibraryInfo ; class Type ; class Value ; bool)",
    "insertText": "isAllocationFn(const Value *V, const TargetLibraryInfo *TLI, bool LookThroughBitCast = false)"
  },
  {
    "label": "isNoAliasFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNoAliasFn(const Value *V, const TargetLibraryInfo *TLI, bool LookThroughBitCast = false)"
  },
  {
    "label": "isMallocLikeFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isMallocLikeFn(const Value *V, const TargetLibraryInfo *TLI, bool LookThroughBitCast = false)"
  },
  {
    "label": "isCallocLikeFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCallocLikeFn(const Value *V, const TargetLibraryInfo *TLI, bool LookThroughBitCast = false)"
  },
  {
    "label": "isAllocLikeFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAllocLikeFn(const Value *V, const TargetLibraryInfo *TLI, bool LookThroughBitCast = false)"
  },
  {
    "label": "isReallocLikeFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isReallocLikeFn(const Value *V, const TargetLibraryInfo *TLI, bool LookThroughBitCast = false)"
  },
  {
    "label": "isOperatorNewLikeFn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOperatorNewLikeFn(const Value *V, const TargetLibraryInfo *TLI, bool LookThroughBitCast = false)"
  },
  {
    "label": "extractMallocCall()",
    "kind": "Method",
    "detail": "Function (const CallInst*)",
    "insertText": "extractMallocCall(const Value *I, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "extractMallocCall()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "extractMallocCall(Value *I, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "getMallocType()",
    "kind": "Method",
    "detail": "Function (} PointerType*)",
    "insertText": "getMallocType(const CallInst *CI, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "getMallocAllocatedType()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "getMallocAllocatedType(const CallInst *CI, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "getMallocArraySize()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "getMallocArraySize(CallInst *CI, const DataLayout &DL, const TargetLibraryInfo *TLI, bool LookThroughSExt = false)"
  },
  {
    "label": "extractCallocCall()",
    "kind": "Method",
    "detail": "Function (const CallInst*)",
    "insertText": "extractCallocCall(const Value *I, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "extractCallocCall()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "extractCallocCall(Value *I, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "isFreeCall()",
    "kind": "Method",
    "detail": "Function (} const CallInst*)",
    "insertText": "isFreeCall(const Value *I, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "isFreeCall()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "isFreeCall(Value *I, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "getObjectSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getObjectSize(const Value *Ptr, uint64_t &Size, const DataLayout &DL, const TargetLibraryInfo *TLI, bool RoundToAlign = false)"
  },
  {
    "label": "align()",
    "kind": "Method",
    "detail": "Function (typedef std::pair<APInt,APInt> SizeOffsetType ; class ObjectSizeOffsetVisitor : public InstVisitor<ObjectSizeOffsetVisitor,SizeOffsetType> { const DataLayout& DL ; const TargetLibraryInfo* TLI ; bool RoundToAlign ; unsigned IntTyBits ; APInt Zero ; SmallPtrSet<Instruction*,8> SeenInsts ; APInt)",
    "insertText": "align(APInt Size, uint64_t Align)"
  },
  {
    "label": "unknown()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "unknown()"
  },
  {
    "label": "ObjectSizeOffsetVisitor()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "ObjectSizeOffsetVisitor(const DataLayout &DL, const TargetLibraryInfo *TLI, LLVMContext &Context, bool RoundToAlign = false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "compute(Value *V)"
  },
  {
    "label": "knownSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "knownSize(SizeOffsetType &SizeOffset)"
  },
  {
    "label": "knownOffset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "knownOffset(SizeOffsetType &SizeOffset)"
  },
  {
    "label": "bothKnown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bothKnown(SizeOffsetType &SizeOffset)"
  },
  {
    "label": "visitAllocaInst()",
    "kind": "Method",
    "detail": "Function (} SizeOffsetType)",
    "insertText": "visitAllocaInst(AllocaInst &I)"
  },
  {
    "label": "visitArgument()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitArgument(Argument &A)"
  },
  {
    "label": "visitCallSite()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitCallSite(CallSite CS)"
  },
  {
    "label": "visitConstantPointerNull()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitConstantPointerNull(ConstantPointerNull&)"
  },
  {
    "label": "visitExtractElementInst()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitExtractElementInst(ExtractElementInst &I)"
  },
  {
    "label": "visitExtractValueInst()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitExtractValueInst(ExtractValueInst &I)"
  },
  {
    "label": "visitGEPOperator()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitGEPOperator(GEPOperator &GEP)"
  },
  {
    "label": "visitGlobalAlias()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitGlobalAlias(GlobalAlias &GA)"
  },
  {
    "label": "visitGlobalVariable()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitGlobalVariable(GlobalVariable &GV)"
  },
  {
    "label": "visitIntToPtrInst()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitIntToPtrInst(IntToPtrInst&)"
  },
  {
    "label": "visitLoadInst()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitLoadInst(LoadInst &I)"
  },
  {
    "label": "visitPHINode()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitPHINode(PHINode&)"
  },
  {
    "label": "visitSelectInst()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitSelectInst(SelectInst &I)"
  },
  {
    "label": "visitUndefValue()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitUndefValue(UndefValue&)"
  },
  {
    "label": "visitInstruction()",
    "kind": "Method",
    "detail": "Function (SizeOffsetType)",
    "insertText": "visitInstruction(Instruction &I)"
  },
  {
    "label": "compute_()",
    "kind": "Method",
    "detail": "Function (} SizeOffsetEvalType)",
    "insertText": "compute_(Value *V)"
  },
  {
    "label": "ObjectSizeOffsetEvaluator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ObjectSizeOffsetEvaluator(const DataLayout &DL, const TargetLibraryInfo *TLI, LLVMContext &Context, bool RoundToAlign = false)"
  },
  {
    "label": "knownSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "knownSize(SizeOffsetEvalType SizeOffset)"
  },
  {
    "label": "bothKnown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bothKnown(SizeOffsetEvalType SizeOffset)"
  },
  {
    "label": "visitPHINode()",
    "kind": "Method",
    "detail": "Function (SizeOffsetEvalType)",
    "insertText": "visitPHINode(PHINode &PHI)"
  }
]