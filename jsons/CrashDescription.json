[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FXmlNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmlNode"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FPrimaryCrashProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryCrashProperties"
  },
  {
    "label": "FCrashProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashProperty"
  },
  {
    "label": "FCrashPropertyXmlNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashPropertyXmlNode"
  },
  {
    "label": "FCrashContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashContext"
  },
  {
    "label": "FCrashWERContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashWERContext"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericPlatformCrashContext . h \" # include \" HAL / Platform . h \" # include \" Misc / CString . h \" # include \" Misc / EngineVersion . h \" # include \" Templates / Function . h \" # include \" XmlFile . h \" # include \" XmlNode . h \" enum class ECrashDescVersions : int32 ; enum class ECrashDumpMode : int32 ; class FXmlNode ; struct FAnalyticsEventAttribute ; struct FPrimaryCrashProperties ; void)",
    "insertText": "LexFromString(ECrashDescVersions& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "OutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutValue(ECrashDescVersions)FCString::Atoi( Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LexFromString(ECrashDumpMode& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "OutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutValue(ECrashDumpMode)FCString::Atoi( Buffer)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LexFromString(FEngineVersion& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(Buffer, OutValue)"
  },
  {
    "label": "FCrashProperty()",
    "kind": "Method",
    "detail": "Function (} struct FCrashProperty { struct FPrimaryCrashProperties ; protected :)",
    "insertText": "FCrashProperty(const FString& InMainCategory, const FString& InSecondCategory, FPrimaryCrashProperties* InOwner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FCrashProperty&)",
    "insertText": "operator(const FString& NewValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCrashProperty&)",
    "insertText": "operator(const TCHAR* NewValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCrashProperty&)",
    "insertText": "operator(const TArray<FString>& NewValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCrashProperty&)",
    "insertText": "operator(const bool NewValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCrashProperty&)",
    "insertText": "operator(const int64 NewValue)"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "AsString()"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsBool()"
  },
  {
    "label": "AsInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "AsInt64()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : FPrimaryCrashProperties* Owner ; FString CachedValue ; FString MainCategory ; FString SecondCategory ; bool bSet ; } ; struct FCrashPropertyXmlNode { struct FPrimaryCrashProperties ; FCrashPropertyXmlNode&)",
    "insertText": "operator(const FXmlNode* Node)"
  },
  {
    "label": "FCrashPropertyXmlNode()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FCrashPropertyXmlNode(const FString& InMainCategory, const FString& InSecondCategory, FPrimaryCrashProperties* InOwner)"
  },
  {
    "label": "FPrimaryCrashProperties()",
    "kind": "Method",
    "detail": "Function (protected : FPrimaryCrashProperties* Owner ; FString MainCategory ; FString SecondCategory ; bool bSet ; } ; struct FPrimaryCrashProperties { struct FCrashProperty ; struct FCrashPropertyXmlNode ; ECrashDescVersions CrashVersion ; ECrashDumpMode CrashDumpMode ; FString CrashGUID ; FString GameName ; FString ExecutableName ; FString EngineMode ; FString DeploymentName ; FCrashProperty EngineModeEx ; FCrashProperty PlatformFullName ; FEngineVersion EngineVersion ; FCrashProperty CommandLine ; FString BaseDir ; FString AppDefaultLocale ; FCrashProperty UserName ; FCrashProperty LoginId ; FCrashProperty EpicAccountId ; FCrashProperty GameSessionID ; FString PCallStackHash ; int32 CrashSignal ; int32 NumMinidumpFramesToIgnore ; FCrashProperty CallStack ; FCrashProperty PCallStack ; FCrashProperty PCallStackHashProperty ; FCrashProperty SourceContext ; FCrashProperty Modules ; FCrashProperty UserDescription ; FCrashProperty UserActivityHint ; FCrashProperty ErrorMessage ; FCrashProperty FullCrashDumpLocation ; FCrashProperty TimeOfCrash ; FCrashProperty bAllowToBeContacted ; FCrashProperty CrashReporterMessage ; FCrashProperty PlatformCallbackResult ; FCrashProperty CrashReportClientVersion ; bool bHasMiniDumpFile ; bool bHasLogFile ; bool bHasPrimaryData ; FString RestartCommandLine ; bool bIsEnsure ; FString CrashType ; FCrashProperty CPUBrand ; FCrashPropertyXmlNode Threads ; FCrashPropertyXmlNode PlatformPropertiesExtras ; bool bIsOOM ; bool bLowMemoryWarning ; bool bInBackground ; bool bIsRequestingExit ; protected :)",
    "insertText": "FPrimaryCrashProperties()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (delete XmlFile ; } public : void)",
    "insertText": "Set(FPrimaryCrashProperties* NewInstance)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Singleton = NewInstance ; } FPrimaryCrashProperties*)",
    "insertText": "Get()"
  },
  {
    "label": "HasProcessedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProcessedData()"
  },
  {
    "label": "UpdateIDs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateIDs()"
  },
  {
    "label": "SendPreUploadAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPreUploadAnalytics()"
  },
  {
    "label": "SendPostUploadAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPostUploadAnalytics(double Duration, bool bResult, int32 ResponseCode, uint32 PayloadSize, uint32 ReportCount)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save()"
  },
  {
    "label": "ReadXML()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ReadXML(const FString& CrashContextFilepath, const TCHAR* Buffer = nullptr)"
  },
  {
    "label": "SetCrashGUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrashGUID(const FString& Filepath)"
  },
  {
    "label": "GetCrashProperty()",
    "kind": "Method",
    "detail": "Function (template<Type> void)",
    "insertText": "GetCrashProperty(Type& out_ReadValue, const FString& MainCategory, const FString& SecondCategory)"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (const FXmlNode* MainNode = XmlFile ->)",
    "insertText": "GetRootNode()->FindChildNode( MainCategory)"
  },
  {
    "label": "FindChildNode()",
    "kind": "Method",
    "detail": "Function (const FXmlNode* CategoryNode = MainNode ->)",
    "insertText": "FindChildNode(SecondCategory)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(out_ReadValue, *FGenericCrashContext::UnescapeXMLString( CategoryNode->GetContent() ))"
  },
  {
    "label": "SetCrashProperty()",
    "kind": "Method",
    "detail": "Function (} } } } template<Type> void)",
    "insertText": "SetCrashProperty(const FString& MainCategory, const FString& SecondCategory, const Type& Value)"
  },
  {
    "label": "SetCrashProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrashProperty(MainCategory, SecondCategory, *TTypeToString<Type>::ToString( Value ))"
  },
  {
    "label": "SetCrashProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCrashProperty(const FString& MainCategory, const FString& SecondCategory, const FString& NewValue)"
  },
  {
    "label": "AppendEscapedXMLString()",
    "kind": "Method",
    "detail": "Function (FString EscapedValue ;)",
    "insertText": "AppendEscapedXMLString(EscapedValue, *NewValue)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (CategoryNode ->)",
    "insertText": "SetContent(EscapedValue)"
  },
  {
    "label": "AppendChildNode()",
    "kind": "Method",
    "detail": "Function (} else { MainNode ->)",
    "insertText": "AppendChildNode(SecondCategory, EscapedValue)"
  },
  {
    "label": "SetCrashProperty()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "SetCrashProperty(const FString& MainCategory, const FString& SecondCategory, const FXmlNode* NewNode)"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (FXmlNode* MainNode = XmlFile ->)",
    "insertText": "GetRootNode()->FindChildNode(MainCategory)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (const FString& Content = NewNode ->)",
    "insertText": "GetContent()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(FXmlNode*, const FXmlNode*)"
  },
  {
    "label": "AppendNode()",
    "kind": "Method",
    "detail": "Function (AppendNode = [&)",
    "insertText": "AppendNode(FXmlNode* DestNode, const FXmlNode* SourceNode)"
  },
  {
    "label": "AppendChildNode()",
    "kind": "Method",
    "detail": "Function (DestNode ->)",
    "insertText": "AppendChildNode(SourceNode->GetTag(), SourceNode->GetContent())"
  },
  {
    "label": "GetChildrenNodes()",
    "kind": "Method",
    "detail": "Function (const TArray<FXmlNode*>& DestChildren = DestNode ->)",
    "insertText": "GetChildrenNodes()"
  },
  {
    "label": "AppendNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNode(DestChildren.Last(), SourceChild)"
  },
  {
    "label": "AppendNode()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "AppendNode(MainNode, NewNode)"
  },
  {
    "label": "EncodeArrayStringAsXMLString()",
    "kind": "Method",
    "detail": "Function (} } } } FString)",
    "insertText": "EncodeArrayStringAsXMLString(const TArray<FString>& ArrayString)"
  },
  {
    "label": "MakeCrashEventAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCrashEventAttributes(TArray<FAnalyticsEventAttribute>& OutCrashAttributes)"
  },
  {
    "label": "FCrashContext()",
    "kind": "Method",
    "detail": "Function (FXmlFile* XmlFile ; FString XmlFilepath ; FPrimaryCrashProperties* Singleton ; } ; struct FCrashContext : public FPrimaryCrashProperties {)",
    "insertText": "FCrashContext(const FString& CrashContextFilepath)"
  },
  {
    "label": "FCrashContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCrashContext(const FString& CrashContextFilepath, const TCHAR* Buffer)"
  },
  {
    "label": "SetupPrimaryCrashProperties()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetupPrimaryCrashProperties()"
  },
  {
    "label": "FCrashWERContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FCrashWERContext : public FPrimaryCrashProperties {)",
    "insertText": "FCrashWERContext(const FString& WERXMLFilepath)"
  },
  {
    "label": "InitializeEngineVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeEngineVersion(const FString& BuildVersion, const FString& BranchName, uint32 BuiltFromCL)"
  }
]