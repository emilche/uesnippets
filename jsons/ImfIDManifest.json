[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "IMF_EXPORT_ENUM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IMF_EXPORT_ENUM"
  },
  {
    "label": "CompressedIDManifest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompressedIDManifest"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstIterator"
  },
  {
    "label": "IDManifest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDManifest"
  },
  {
    "label": "IDManifest()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_ID_MANIFEST_H # define INCLUDED_IMF_ID_MANIFEST_H # include \" ImfForward . h \" # include<cstdint> # include<map> # include<set> # include<string> # include<vector> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class IMF_EXPORT_TYPE IDManifest { public : enum IMF_EXPORT_ENUM IdLifetime { LIFETIME_FRAME,LIFETIME_SHOT,LIFETIME_STABLE } ; IMF_EXPORT const std::string UNKNOWN ; IMF_EXPORT const std::string NOTHASHED ; IMF_EXPORT const std::string CUSTOMHASH ; IMF_EXPORT const std::string MURMURHASH3_32 ; IMF_EXPORT const std::string MURMURHASH3_64 ; IMF_EXPORT const std::string ID_SCHEME ; IMF_EXPORT const std::string ID2_SCHEME ; IMF_EXPORT)",
    "insertText": "IDManifest()"
  },
  {
    "label": "IDManifest()",
    "kind": "Method",
    "detail": "Function (class CompressedIDManifest ; IMF_EXPORT)",
    "insertText": "IDManifest(const CompressedIDManifest&)"
  },
  {
    "label": "IDManifest()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "IDManifest(const char* data, const char* end)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : IMF_HIDDEN void)",
    "insertText": "init(const char* data, const char* end)"
  },
  {
    "label": "ChannelGroupManifest()",
    "kind": "Method",
    "detail": "Function (public : class IMF_EXPORT_TYPE ChannelGroupManifest { private : std::set<std::string> _channels ; std::vector<std::string> _components ; IdLifetime _lifeTime ; std::string _hashScheme ; std::string _encodingScheme ; typedef std::map<uint64_t,std::vector<std::string>> IDTable ; IDTable _table ; IDTable::iterator _insertionIterator ; bool _insertingEntry ; public : IMF_EXPORT)",
    "insertText": "ChannelGroupManifest()"
  },
  {
    "label": "getChannels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const std::set<std::string>&)",
    "insertText": "getChannels()"
  },
  {
    "label": "setChannels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setChannels(const std::set<std::string>& channels)"
  },
  {
    "label": "setChannel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setChannel(const std::string& channel)"
  },
  {
    "label": "getComponents()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const std::vector<std::string>&)",
    "insertText": "getComponents()"
  },
  {
    "label": "setComponents()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setComponents(const std::vector<std::string>& components)"
  },
  {
    "label": "setComponent()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setComponent(const std::string& component)"
  },
  {
    "label": "getLifetime()",
    "kind": "Method",
    "detail": "Function (IdLifetime)",
    "insertText": "getLifetime()"
  },
  {
    "label": "getHashScheme()",
    "kind": "Method",
    "detail": "Function (_lifeTime = lifeTime ; } const std::string&)",
    "insertText": "getHashScheme()"
  },
  {
    "label": "getEncodingScheme()",
    "kind": "Method",
    "detail": "Function (_hashScheme = hashScheme ; } const std::string&)",
    "insertText": "getEncodingScheme()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (_encodingScheme = encodingScheme ; } class Iterator ; class ConstIterator ; IMF_EXPORT Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT size_t)",
    "insertText": "size()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "insert(uint64_t idValue, const std::vector<std::string>& text)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "insert(uint64_t idValue, const std::string& text)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT uint64_t)",
    "insertText": "insert(const std::vector<std::string>& text)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT uint64_t)",
    "insertText": "insert(const std::string& text)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "find(uint64_t idValue)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "erase(uint64_t idValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT std::vector<std::string>&)",
    "insertText": "operator(uint64_t idValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ChannelGroupManifest&)",
    "insertText": "operator(const std::string& text)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "operator(const ChannelGroupManifest& other)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} class IDManifest ; } ; private : std::vector<ChannelGroupManifest> _manifest ; public : IMF_EXPORT ChannelGroupManifest&)",
    "insertText": "add(const ChannelGroupManifest& table)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ChannelGroupManifest&)",
    "insertText": "add(const std::set<std::string>& group)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ChannelGroupManifest&)",
    "insertText": "add(const std::string& channel)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT size_t)",
    "insertText": "find(const std::string& channel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const ChannelGroupManifest&)",
    "insertText": "operator(size_t index)"
  },
  {
    "label": "serialize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "serialize(std::vector<char>& data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "operator(const IDManifest& other)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "merge(const IDManifest& other)"
  },
  {
    "label": "MurmurHash32()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "MurmurHash32(const std::string& idString)"
  },
  {
    "label": "MurmurHash32()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "MurmurHash32(const std::vector<std::string>& idString)"
  },
  {
    "label": "MurmurHash64()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT uint64_t)",
    "insertText": "MurmurHash64(const std::string& idString)"
  },
  {
    "label": "MurmurHash64()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT uint64_t)",
    "insertText": "MurmurHash64(const std::vector<std::string>& idString)"
  },
  {
    "label": "CompressedIDManifest()",
    "kind": "Method",
    "detail": "Function (} ; class CompressedIDManifest { public : IMF_EXPORT)",
    "insertText": "CompressedIDManifest()"
  },
  {
    "label": "CompressedIDManifest()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "CompressedIDManifest(const CompressedIDManifest& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT CompressedIDManifest&)",
    "insertText": "operator(const CompressedIDManifest& other)"
  },
  {
    "label": "CompressedIDManifest()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "CompressedIDManifest(const IDManifest& manifest)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (int _compressedDataSize ; size_t _uncompressedDataSize ; unsigned char* _data ; } ; class IDManifest::ChannelGroupManifest::Iterator { public : IMF_EXPORT)",
    "insertText": "Iterator()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Iterator(const IDManifest::ChannelGroupManifest::IDTable::iterator& i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class IDManifest::ChannelGroupManifest::ConstIterator ; IMF_EXPORT Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT uint64_t)",
    "insertText": "id()"
  },
  {
    "label": "text()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT std::vector<std::string>&)",
    "insertText": "text()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (private : std::map<uint64_t,std::vector<std::string>>::iterator _i ; } ; class IDManifest::ChannelGroupManifest::ConstIterator { public : IMF_EXPORT)",
    "insertText": "ConstIterator()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const IDManifest::ChannelGroupManifest::IDTable::const_iterator& i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const IDManifest::ChannelGroupManifest::Iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : std::map<uint64_t,std::vector<std::string>>::const_iterator _i ; bool)",
    "insertText": "operator(const ConstIterator&, const ConstIterator&)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} IDManifest::ChannelGroupManifest::)",
    "insertText": "Iterator(const IDManifest::ChannelGroupManifest::IDTable::iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} IDManifest::ChannelGroupManifest::)",
    "insertText": "ConstIterator(const IDManifest::ChannelGroupManifest::Iterator& other) : _i (other._i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} IDManifest::ChannelGroupManifest::)",
    "insertText": "ConstIterator(const IDManifest::ChannelGroupManifest::IDTable::const_iterator& i) : _i (i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + _i ; return* this ; } bool)",
    "insertText": "operator(const IDManifest::ChannelGroupManifest::ConstIterator& a, const IDManifest::ChannelGroupManifest::ConstIterator& b)"
  }
]