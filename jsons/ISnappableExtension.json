[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "IKeyArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyArea"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "ESnapType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESnapType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSnapPoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SequencerCoreFwd . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Curves / KeyHandle . h \" # include \" Templates / MemoryOps . h \" struct FGuid ; class IKeyArea ; class UMovieSceneSection ; namespace UE { namespace Sequencer { struct FSnapPoint { enum ESnapType { Key,SectionBounds,CustomSection,PlaybackRange,CurrentTime,InOutRange,Mark } ;)",
    "insertText": "FSnapPoint(ESnapType InType, FFrameNumber InTime, float InWeighting = -1.f) : Time(InTime) , Weighting(InWeighting) , Type(InType)"
  },
  {
    "label": "FSnapPoint()",
    "kind": "Method",
    "detail": "Function (Weighting = 1 0 . f ; } else { Weighting = 1 . f ; } } } FFrameNumber Time ; float Weighting = 1 . f ; ESnapType Type ; private :)",
    "insertText": "FSnapPoint()"
  },
  {
    "label": "ISnapField()",
    "kind": "Method",
    "detail": "Function (} } ; class ISnapField { public : ~)",
    "insertText": "ISnapField()"
  },
  {
    "label": "AddSnapPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSnapPoint(const FSnapPoint& SnapPoint)"
  },
  {
    "label": "ISnapCandidate()",
    "kind": "Method",
    "detail": "Function (} ; struct ISnapCandidate { enum class EDefaultApplicability { None = 0,Keys = 1<<0,SectionBounds = 1<<1,CustomSnaps = 1<<2,All = Keys | SectionBounds | CustomSnaps,} ; enum class ESnapCapabilities { None = 0,IsKeyApplicable = 1<<0,AreSectionBoundsApplicable = 1<<1,AreSectionCustomSnapsApplicable = 1<<2,All = IsKeyApplicable | AreSectionBoundsApplicable | AreSectionCustomSnapsApplicable,} ; ~)",
    "insertText": "ISnapCandidate()"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCapabilities(EDefaultApplicability& OutDefaultApplicability, ESnapCapabilities& OutCapabilities)"
  },
  {
    "label": "IsKeyApplicable()",
    "kind": "Method",
    "detail": "Function (OutDefaultApplicability = EDefaultApplicability::All ; OutCapabilities = ESnapCapabilities::None ; } bool)",
    "insertText": "IsKeyApplicable(FKeyHandle KeyHandle, const UE::Sequencer::FViewModelPtr& Owner)"
  },
  {
    "label": "AddToSnapField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToSnapField(const ISnapCandidate& Candidate, ISnapField& SnapField)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ISnapCandidate::ESnapCapabilities)"
  }
]