[
  {
    "label": "FBuildKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildKey"
  },
  {
    "label": "FBuildActionKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildActionKey"
  },
  {
    "label": "FBuildValueKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildValueKey"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringFwd . h \" # include \" DerivedDataValueId . h \" # include \" IO / IoHash . h \" # include \" Templates / TypeHash . h \" namespace UE::DerivedData { struct FBuildKey { FIoHash Hash ; const FBuildKey Empty ; } ; const FBuildKey FBuildKey::Empty ; struct FBuildActionKey { FIoHash Hash ; const FBuildActionKey Empty ; } ; const FBuildActionKey FBuildActionKey::Empty ; struct FBuildValueKey { FBuildKey BuildKey ; FValueId Id ; const FBuildValueKey Empty ; } ; const FBuildValueKey FBuildValueKey::Empty ; bool)",
    "insertText": "operator(const FBuildKey& A, const FBuildKey& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FBuildKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBuildActionKey& A, const FBuildActionKey& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FBuildActionKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBuildValueKey& A, const FBuildValueKey& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const FBuildKey& KeyA = A . BuildKey ; const FBuildKey& KeyB = B . BuildKey ; return KeyA = = KeyB ? A . Id<B . Id : KeyA<KeyB ; } uint32)",
    "insertText": "GetTypeHash(const FBuildValueKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FBuildValueKey& Key)"
  }
]