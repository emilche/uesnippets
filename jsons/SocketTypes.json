[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "ISocketSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketSubsystem"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ESocketType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESocketType"
  },
  {
    "label": "ESocketConnectionState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESocketConnectionState"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FRecvMulti",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecvMulti"
  },
  {
    "label": "FUnixRecvMulti",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnixRecvMulti"
  },
  {
    "label": "FSocketUnix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketUnix"
  },
  {
    "label": "FRecvData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecvData"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Net / Common / Packets / PacketView . h \" class FInternetAddr ; class ISocketSubsystem ; class FSocket ; enum class ESocketProtocolFamily : uint8 { None,IPv4,IPv6 } ; namespace FNetworkProtocolTypes { const FLazyName IPv4 ; const FLazyName IPv6 ; } enum ESocketType { SOCKTYPE_Unknown,SOCKTYPE_Datagram,SOCKTYPE_Streaming } ; enum ESocketConnectionState { SCS_NotConnected,SCS_Connected,SCS_ConnectionError } ; namespace ESocketReceiveFlags { enum Type { None = 0,Peek = 2,WaitAll = 0 x100 } ; } namespace ESocketWaitConditions { enum Type { WaitForRead,WaitForWrite,WaitForReadOrWrite } ; } enum class ESocketShutdownMode { Read,Write,ReadWrite } ; enum class ETimestampTranslation : uint8 { LocalTimestamp,TimeDelta } ; enum class ERecvMultiFlags : uint32 { None = 0 x00000000,RetrieveTimestamps = 0 x00000001 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERecvMultiFlags)"
  },
  {
    "label": "FRecvData()",
    "kind": "Method",
    "detail": "Function (struct FRecvMulti : public FNoncopyable,public FVirtualDestructor { struct FUnixRecvMulti ; class FSocketUnix ; private : struct FRecvData { TSharedPtr<FInternetAddr> Source ; const uint8* Data ; const uint32* BytesReadPtr ;)",
    "insertText": "FRecvData() : Source() , Data(nullptr) , BytesReadPtr(nullptr)"
  },
  {
    "label": "FRecvMulti()",
    "kind": "Method",
    "detail": "Function (} } ; private : TUniquePtr<FRecvData [ ]> Packets ; int32 NumPackets ; public : const int32 MaxNumPackets ; const int32 MaxPacketSize ; private :)",
    "insertText": "FRecvMulti(ISocketSubsystem* SocketSubsystem, int32 InMaxNumPackets, int32 InMaxPacketSize, ERecvMultiFlags InitFlags=ERecvMultiFlags::None)"
  },
  {
    "label": "GetPacket()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GetPacket(int32 PacketIdx, FReceivedPacketView& OutPacket)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FRecvData& CurData = Packets .)",
    "insertText": "Get()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (OutPacket . DataView = { CurData .)",
    "insertText": "Data(int32)"
  },
  {
    "label": "GetPacketTimestamp()",
    "kind": "Method",
    "detail": "Function (OutPacket . Address = CurData . Source ; OutPacket . Error = ESocketErrors::SE_NO_ERROR ; } bool)",
    "insertText": "GetPacketTimestamp(int32 PacketIdx, FPacketTimestamp& OutTimestamp)"
  },
  {
    "label": "GetNumPackets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPackets()"
  }
]