[
  {
    "label": "evp_cipher_info_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evp_cipher_info_st"
  },
  {
    "label": "rsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rsa_st"
  },
  {
    "label": "rsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rsa_st"
  },
  {
    "label": "rsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rsa_st"
  },
  {
    "label": "rsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rsa_st"
  },
  {
    "label": "dsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dsa_st"
  },
  {
    "label": "dsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dsa_st"
  },
  {
    "label": "dsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dsa_st"
  },
  {
    "label": "dsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dsa_st"
  },
  {
    "label": "dh_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dh_st"
  },
  {
    "label": "dh_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dh_st"
  },
  {
    "label": "dh_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dh_st"
  },
  {
    "label": "dh_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dh_st"
  },
  {
    "label": "ec_key_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_key_st"
  },
  {
    "label": "ec_key_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_key_st"
  },
  {
    "label": "ec_key_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_key_st"
  },
  {
    "label": "ec_key_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_key_st"
  },
  {
    "label": "EVP_MD_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_meth_free(EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_set_input_blocksize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_input_blocksize(EVP_MD *md, int blocksize)"
  },
  {
    "label": "EVP_MD_meth_set_result_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_result_size(EVP_MD *md, int resultsize)"
  },
  {
    "label": "EVP_MD_meth_set_app_datasize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_app_datasize(EVP_MD *md, int datasize)"
  },
  {
    "label": "EVP_MD_meth_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_flags(EVP_MD *md, unsigned long flags)"
  },
  {
    "label": "EVP_MD_meth_get_input_blocksize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_get_input_blocksize(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_get_result_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_get_result_size(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_get_app_datasize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_get_app_datasize(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_get_flags()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "EVP_MD_meth_get_flags(const EVP_MD *md)"
  },
  {
    "label": "EVP_CIPHER_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_meth_free(EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_meth_set_iv_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_iv_length(EVP_CIPHER *cipher, int iv_len)"
  },
  {
    "label": "EVP_CIPHER_meth_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_flags(EVP_CIPHER *cipher, unsigned long flags)"
  },
  {
    "label": "EVP_CIPHER_meth_set_impl_ctx_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER *cipher, int ctx_size)"
  },
  {
    "label": "EVP_MD_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_type(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_pkey_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_pkey_type(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_size(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_block_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_block_size(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_flags()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "EVP_MD_flags(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_CTX_set_pkey_ctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx)"
  },
  {
    "label": "EVP_CIPHER_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_nid(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_block_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_block_size(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_impl_ctx_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_impl_ctx_size(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_key_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_key_length(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_iv_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_flags()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "EVP_CIPHER_flags(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_CTX_encrypting()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_encrypting(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_block_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_key_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_iv_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_num()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_num(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_num()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX *ctx, int num)"
  },
  {
    "label": "EVP_CIPHER_CTX_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_app_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)"
  },
  {
    "label": "BIO_set_md()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BIO_set_md(BIO *, const EVP_MD *md)"
  },
  {
    "label": "EVP_Cipher()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_Cipher(EVP_CIPHER_CTX *c,\n                          unsigned char *out,\n                          const unsigned char *in, unsigned int inl)"
  },
  {
    "label": "EVP_MD_CTX_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void *p2)"
  },
  {
    "label": "EVP_MD_CTX_reset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_reset(EVP_MD_CTX *ctx)"
  },
  {
    "label": "EVP_MD_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_free(EVP_MD_CTX *ctx)"
  },
  {
    "label": "EVP_MD_CTX_copy_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)"
  },
  {
    "label": "EVP_MD_CTX_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_MD_CTX_clear_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_MD_CTX_test_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_DigestInit_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type,\n                                 ENGINE *impl)"
  },
  {
    "label": "EVP_DigestUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d,\n                                size_t cnt)"
  },
  {
    "label": "EVP_DigestFinal_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md,\n                                  unsigned int *s)"
  },
  {
    "label": "EVP_Digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_Digest(const void *data, size_t count,\n                          unsigned char *md, unsigned int *size,\n                          const EVP_MD *type, ENGINE *impl)"
  },
  {
    "label": "EVP_MD_CTX_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)"
  },
  {
    "label": "EVP_DigestInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)"
  },
  {
    "label": "EVP_DigestFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md,\n                           unsigned int *s)"
  },
  {
    "label": "EVP_DigestFinalXOF()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md,\n                              size_t len)"
  },
  {
    "label": "EVP_read_pw_string()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_read_pw_string(char *buf, int length, const char *prompt, int verify)"
  },
  {
    "label": "EVP_read_pw_string_min()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_read_pw_string_min(char *buf, int minlen, int maxlen,\n                           const char *prompt, int verify)"
  },
  {
    "label": "EVP_set_pw_prompt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_set_pw_prompt(const char *prompt)"
  },
  {
    "label": "EVP_BytesToKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,\n                          const unsigned char *salt,\n                          const unsigned char *data, int datal, int count,\n                          unsigned char *key, unsigned char *iv)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_CIPHER_CTX_clear_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_CIPHER_CTX_test_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_EncryptInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,\n                           const unsigned char *key, const unsigned char *iv)"
  },
  {
    "label": "EVP_EncryptInit_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx,\n                                  const EVP_CIPHER *cipher, ENGINE *impl,\n                                  const unsigned char *key,\n                                  const unsigned char *iv)"
  },
  {
    "label": "EVP_EncryptUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                                 int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_EncryptFinal_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                                   int *outl)"
  },
  {
    "label": "EVP_EncryptFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                                int *outl)"
  },
  {
    "label": "EVP_DecryptInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,\n                           const unsigned char *key, const unsigned char *iv)"
  },
  {
    "label": "EVP_DecryptInit_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx,\n                                  const EVP_CIPHER *cipher, ENGINE *impl,\n                                  const unsigned char *key,\n                                  const unsigned char *iv)"
  },
  {
    "label": "EVP_DecryptUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                                 int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_DecryptFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,\n                            int *outl)"
  },
  {
    "label": "EVP_DecryptFinal_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,\n                                   int *outl)"
  },
  {
    "label": "EVP_CipherInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,\n                          const unsigned char *key, const unsigned char *iv,\n                          int enc)"
  },
  {
    "label": "EVP_CipherInit_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx,\n                                 const EVP_CIPHER *cipher, ENGINE *impl,\n                                 const unsigned char *key,\n                                 const unsigned char *iv, int enc)"
  },
  {
    "label": "EVP_CipherUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,\n                            int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_CipherFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,\n                           int *outl)"
  },
  {
    "label": "EVP_CipherFinal_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,\n                              int *outl)"
  },
  {
    "label": "EVP_SignFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s,\n                         EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestSign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret,\n                          size_t *siglen, const unsigned char *tbs,\n                          size_t tbslen)"
  },
  {
    "label": "EVP_VerifyFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sigbuf,\n                           unsigned int siglen, EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestVerify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret,\n                            size_t siglen, const unsigned char *tbs,\n                            size_t tbslen)"
  },
  {
    "label": "EVP_DigestSignInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,\n                                  const EVP_MD *type, ENGINE *e,\n                                  EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestSignFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,\n                               size_t *siglen)"
  },
  {
    "label": "EVP_DigestVerifyInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,\n                                const EVP_MD *type, ENGINE *e,\n                                EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestVerifyFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig,\n                                 size_t siglen)"
  },
  {
    "label": "EVP_OpenInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                        const unsigned char *ek, int ekl,\n                        const unsigned char *iv, EVP_PKEY *priv)"
  },
  {
    "label": "EVP_OpenFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_SealInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,\n                        unsigned char **ek, int *ekl, unsigned char *iv,\n                        EVP_PKEY **pubk, int npubk)"
  },
  {
    "label": "EVP_SealFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_ENCODE_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_ENCODE_CTX_free(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_ENCODE_CTX_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX *dctx, EVP_ENCODE_CTX *sctx)"
  },
  {
    "label": "EVP_ENCODE_CTX_num()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_ENCODE_CTX_num(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_EncodeInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_EncodeInit(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_EncodeUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,\n                     const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_EncodeFinal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_EncodeBlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int n)"
  },
  {
    "label": "EVP_DecodeInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_DecodeInit(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_DecodeUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,\n                     const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_DecodeFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned\n                    char *out, int *outl)"
  },
  {
    "label": "EVP_DecodeBlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)"
  },
  {
    "label": "EVP_CIPHER_CTX_reset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c)"
  },
  {
    "label": "EVP_CIPHER_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *c)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_key_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_padding()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad)"
  },
  {
    "label": "EVP_CIPHER_CTX_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)"
  },
  {
    "label": "EVP_CIPHER_CTX_rand_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key)"
  },
  {
    "label": "BIO_set_cipher()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,\n                          const unsigned char *i, int enc)"
  },
  {
    "label": "EVP_add_cipher()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_add_cipher(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_add_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_add_digest(const EVP_MD *digest)"
  },
  {
    "label": "EVP_PKEY_decrypt_old()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_decrypt_old(unsigned char *dec_key,\n                         const unsigned char *enc_key, int enc_key_len,\n                         EVP_PKEY *private_key)"
  },
  {
    "label": "EVP_PKEY_encrypt_old()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_encrypt_old(unsigned char *enc_key,\n                         const unsigned char *key, int key_len,\n                         EVP_PKEY *pub_key)"
  },
  {
    "label": "EVP_PKEY_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_type(int type)"
  },
  {
    "label": "EVP_PKEY_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_id(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_base_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_base_id(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_bits(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_security_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_security_bits(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_size(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_set_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set_type(EVP_PKEY *pkey, int type)"
  },
  {
    "label": "EVP_PKEY_set_type_str()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set_type_str(EVP_PKEY *pkey, const char *str, int len)"
  },
  {
    "label": "EVP_PKEY_set_alias_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type)"
  },
  {
    "label": "EVP_PKEY_set1_engine()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *e)"
  },
  {
    "label": "EVP_PKEY_assign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key)"
  },
  {
    "label": "EVP_PKEY_set1_RSA()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set1_RSA(EVP_PKEY *pkey, struct rsa_st *key)"
  },
  {
    "label": "EVP_PKEY_set1_DSA()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set1_DSA(EVP_PKEY *pkey, struct dsa_st *key)"
  },
  {
    "label": "EVP_PKEY_set1_DH()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set1_DH(EVP_PKEY *pkey, struct dh_st *key)"
  },
  {
    "label": "EVP_PKEY_set1_EC_KEY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, struct ec_key_st *key)"
  },
  {
    "label": "EVP_PKEY_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_up_ref(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_free(EVP_PKEY *pkey)"
  },
  {
    "label": "i2d_PublicKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PublicKey(EVP_PKEY *a, unsigned char **pp)"
  },
  {
    "label": "i2d_PrivateKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)"
  },
  {
    "label": "EVP_PKEY_copy_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)"
  },
  {
    "label": "EVP_PKEY_missing_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_missing_parameters(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_save_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode)"
  },
  {
    "label": "EVP_PKEY_cmp_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)"
  },
  {
    "label": "EVP_PKEY_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)"
  },
  {
    "label": "EVP_PKEY_print_public()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,\n                          int indent, ASN1_PCTX *pctx)"
  },
  {
    "label": "EVP_PKEY_print_private()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,\n                           int indent, ASN1_PCTX *pctx)"
  },
  {
    "label": "EVP_PKEY_print_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey,\n                          int indent, ASN1_PCTX *pctx)"
  },
  {
    "label": "EVP_PKEY_get_default_digest_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid)"
  },
  {
    "label": "EVP_PKEY_set1_tls_encodedpoint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set1_tls_encodedpoint(EVP_PKEY *pkey,\n                                   const unsigned char *pt, size_t ptlen)"
  },
  {
    "label": "EVP_PKEY_get1_tls_encodedpoint()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EVP_PKEY_get1_tls_encodedpoint(EVP_PKEY *pkey, unsigned char **ppt)"
  },
  {
    "label": "EVP_CIPHER_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_type(const EVP_CIPHER *ctx)"
  },
  {
    "label": "EVP_CIPHER_param_to_asn1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "EVP_CIPHER_asn1_to_param()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "EVP_CIPHER_set_asn1_iv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "EVP_CIPHER_get_asn1_iv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "PKCS5_PBE_keyivgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,\n                       ASN1_TYPE *param, const EVP_CIPHER *cipher,\n                       const EVP_MD *md, int en_de)"
  },
  {
    "label": "PKCS5_PBKDF2_HMAC_SHA1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,\n                           const unsigned char *salt, int saltlen, int iter,\n                           int keylen, unsigned char *out)"
  },
  {
    "label": "PKCS5_PBKDF2_HMAC()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_PBKDF2_HMAC(const char *pass, int passlen,\n                      const unsigned char *salt, int saltlen, int iter,\n                      const EVP_MD *digest, int keylen, unsigned char *out)"
  },
  {
    "label": "PKCS5_v2_PBE_keyivgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,\n                          ASN1_TYPE *param, const EVP_CIPHER *cipher,\n                          const EVP_MD *md, int en_de)"
  },
  {
    "label": "EVP_PBE_scrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_scrypt(const char *pass, size_t passlen,\n                   const unsigned char *salt, size_t saltlen,\n                   uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem,\n                   unsigned char *key, size_t keylen)"
  },
  {
    "label": "PKCS5_v2_scrypt_keyivgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,\n                             int passlen, ASN1_TYPE *param,\n                             const EVP_CIPHER *c, const EVP_MD *md, int en_de)"
  },
  {
    "label": "PKCS5_PBE_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PKCS5_PBE_add(void)"
  },
  {
    "label": "EVP_PBE_CipherInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,\n                       ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)"
  },
  {
    "label": "EVP_PBE_alg_add_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid,\n                         int md_nid, EVP_PBE_KEYGEN *keygen)"
  },
  {
    "label": "EVP_PBE_alg_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,\n                    EVP_PBE_KEYGEN *keygen)"
  },
  {
    "label": "EVP_PBE_find()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_find(int type, int pbe_nid, int *pcnid, int *pmnid,\n                 EVP_PBE_KEYGEN **pkeygen)"
  },
  {
    "label": "EVP_PBE_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PBE_cleanup(void)"
  },
  {
    "label": "EVP_PBE_get()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_get(int *ptype, int *ppbe_nid, size_t num)"
  },
  {
    "label": "EVP_PKEY_asn1_get_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_asn1_get_count(void)"
  },
  {
    "label": "EVP_PKEY_asn1_add0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)"
  },
  {
    "label": "EVP_PKEY_asn1_add_alias()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_asn1_add_alias(int to, int from)"
  },
  {
    "label": "EVP_PKEY_asn1_get0_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_asn1_get0_info(int *ppkey_id, int *pkey_base_id,\n                            int *ppkey_flags, const char **pinfo,\n                            const char **ppem_str,\n                            const EVP_PKEY_ASN1_METHOD *ameth)"
  },
  {
    "label": "EVP_PKEY_asn1_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,\n                        const EVP_PKEY_ASN1_METHOD *src)"
  },
  {
    "label": "EVP_PKEY_asn1_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)"
  },
  {
    "label": "EVP_PKEY_meth_get0_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,\n                             const EVP_PKEY_METHOD *meth)"
  },
  {
    "label": "EVP_PKEY_meth_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)"
  },
  {
    "label": "EVP_PKEY_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)"
  },
  {
    "label": "EVP_PKEY_meth_add0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth)"
  },
  {
    "label": "EVP_PKEY_meth_remove()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth)"
  },
  {
    "label": "EVP_PKEY_meth_get_count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EVP_PKEY_meth_get_count(void)"
  },
  {
    "label": "EVP_PKEY_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,\n                      int cmd, int p1, void *p2)"
  },
  {
    "label": "EVP_PKEY_CTX_ctrl_str()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,\n                          const char *value)"
  },
  {
    "label": "EVP_PKEY_CTX_ctrl_uint64()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX *ctx, int keytype, int optype,\n                             int cmd, uint64_t value)"
  },
  {
    "label": "EVP_PKEY_CTX_str2ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *str)"
  },
  {
    "label": "EVP_PKEY_CTX_hex2ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *hex)"
  },
  {
    "label": "EVP_PKEY_CTX_md()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md)"
  },
  {
    "label": "EVP_PKEY_CTX_get_operation()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_set0_keygen_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen)"
  },
  {
    "label": "EVP_PKEY_get_raw_private_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv,\n                                 size_t *len)"
  },
  {
    "label": "EVP_PKEY_get_raw_public_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub,\n                                size_t *len)"
  },
  {
    "label": "EVP_PKEY_CTX_set_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data)"
  },
  {
    "label": "EVP_PKEY_CTX_set_app_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data)"
  },
  {
    "label": "EVP_PKEY_sign_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_sign(EVP_PKEY_CTX *ctx,\n                  unsigned char *sig, size_t *siglen,\n                  const unsigned char *tbs, size_t tbslen)"
  },
  {
    "label": "EVP_PKEY_verify_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify(EVP_PKEY_CTX *ctx,\n                    const unsigned char *sig, size_t siglen,\n                    const unsigned char *tbs, size_t tbslen)"
  },
  {
    "label": "EVP_PKEY_verify_recover_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_verify_recover()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,\n                            unsigned char *rout, size_t *routlen,\n                            const unsigned char *sig, size_t siglen)"
  },
  {
    "label": "EVP_PKEY_encrypt_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_encrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,\n                     unsigned char *out, size_t *outlen,\n                     const unsigned char *in, size_t inlen)"
  },
  {
    "label": "EVP_PKEY_decrypt_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_decrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,\n                     unsigned char *out, size_t *outlen,\n                     const unsigned char *in, size_t inlen)"
  },
  {
    "label": "EVP_PKEY_derive_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_derive_set_peer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)"
  },
  {
    "label": "EVP_PKEY_derive()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)"
  },
  {
    "label": "EVP_PKEY_gen_cb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_paramgen_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_paramgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)"
  },
  {
    "label": "EVP_PKEY_keygen_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_keygen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)"
  },
  {
    "label": "EVP_PKEY_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_check(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_public_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_public_check(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_param_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_param_check(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_set_cb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)"
  },
  {
    "label": "EVP_PKEY_CTX_get_keygen_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)"
  },
  {
    "label": "EVP_add_alg_module()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_add_alg_module(void)"
  }
]