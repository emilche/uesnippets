[
  {
    "label": "evp_cipher_info_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evp_cipher_info_st"
  },
  {
    "label": "rsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rsa_st"
  },
  {
    "label": "dsa_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dsa_st"
  },
  {
    "label": "dh_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dh_st"
  },
  {
    "label": "ec_key_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_key_st"
  },
  {
    "label": "EVP_MD_meth_new()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_ENVELOPE_H # define HEADER_ENVELOPE_H # include<openssl / opensslconf . h> # include<openssl / ossl_typ . h> # include<openssl / symhacks . h> # include<openssl / bio . h> # include<openssl / evperr . h> # define EVP_MAX_MD_SIZE 6 4 # define EVP_MAX_KEY_LENGTH 6 4 # define EVP_MAX_IV_LENGTH 1 6 # define EVP_MAX_BLOCK_LENGTH 3 2 # define PKCS5_SALT_LEN 8 # define PKCS5_DEFAULT_ITER 2 0 4 8 # include<openssl / objects . h> # define EVP_PK_RSA 0 x0001 # define EVP_PK_DSA 0 x0002 # define EVP_PK_DH 0 x0004 # define EVP_PK_EC 0 x0008 # define EVP_PKT_SIGN 0 x0010 # define EVP_PKT_ENC 0 x0020 # define EVP_PKT_EXCH 0 x0040 # define EVP_PKS_RSA 0 x0100 # define EVP_PKS_DSA 0 x0200 # define EVP_PKS_EC 0 x0400 # define EVP_PKEY_NONE NID_undef # define EVP_PKEY_RSA NID_rsaEncryption # define EVP_PKEY_RSA2 NID_rsa # define EVP_PKEY_RSA_PSS NID_rsassaPss # define EVP_PKEY_DSA NID_dsa # define EVP_PKEY_DSA1 NID_dsa_2 # define EVP_PKEY_DSA2 NID_dsaWithSHA # define EVP_PKEY_DSA3 NID_dsaWithSHA1 # define EVP_PKEY_DSA4 NID_dsaWithSHA1_2 # define EVP_PKEY_DH NID_dhKeyAgreement # define EVP_PKEY_DHX NID_dhpublicnumber # define EVP_PKEY_EC NID_X9_62_id_ecPublicKey # define EVP_PKEY_SM2 NID_sm2 # define EVP_PKEY_HMAC NID_hmac # define EVP_PKEY_CMAC NID_cmac # define EVP_PKEY_SCRYPT NID_id_scrypt # define EVP_PKEY_TLS1_PRF NID_tls1_prf # define EVP_PKEY_HKDF NID_hkdf # define EVP_PKEY_POLY1305 NID_poly1305 # define EVP_PKEY_SIPHASH NID_siphash # define EVP_PKEY_X25519 NID_X25519 # define EVP_PKEY_ED25519 NID_ED25519 # define EVP_PKEY_X448 NID_X448 # define EVP_PKEY_ED448 NID_ED448 # ifdef __cplusplus \" C \" { # endif # define EVP_PKEY_MO_SIGN 0 x0001 # define EVP_PKEY_MO_VERIFY 0 x0002 # define EVP_PKEY_MO_ENCRYPT 0 x0004 # define EVP_PKEY_MO_DECRYPT 0 x0008 # ifndef EVP_MD EVP_MD*)",
    "insertText": "EVP_MD_meth_new(int md_type, int pkey_type)"
  },
  {
    "label": "EVP_MD_meth_dup()",
    "kind": "Method",
    "detail": "Function (EVP_MD*)",
    "insertText": "EVP_MD_meth_dup(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_meth_free(EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_set_input_blocksize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_input_blocksize(EVP_MD *md, int blocksize)"
  },
  {
    "label": "EVP_MD_meth_set_result_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_result_size(EVP_MD *md, int resultsize)"
  },
  {
    "label": "EVP_MD_meth_set_app_datasize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_app_datasize(EVP_MD *md, int datasize)"
  },
  {
    "label": "EVP_MD_meth_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_flags(EVP_MD *md, unsigned long flags)"
  },
  {
    "label": "EVP_MD_meth_set_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_init(EVP_MD *md, int (*init)(EVP_MD_CTX *ctx))"
  },
  {
    "label": "EVP_MD_meth_set_update()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_update(EVP_MD *md, int (*update)(EVP_MD_CTX *ctx, const void *data, size_t count))"
  },
  {
    "label": "EVP_MD_meth_set_final()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_final(EVP_MD *md, int (*final)(EVP_MD_CTX *ctx, unsigned char *md))"
  },
  {
    "label": "EVP_MD_meth_set_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_copy(EVP_MD *md, int (*copy)(EVP_MD_CTX *to, const EVP_MD_CTX *from))"
  },
  {
    "label": "EVP_MD_meth_set_cleanup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_cleanup(EVP_MD *md, int (*cleanup)(EVP_MD_CTX *ctx))"
  },
  {
    "label": "EVP_MD_meth_set_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_set_ctrl(EVP_MD *md, int (*ctrl)(EVP_MD_CTX *ctx, int cmd, int p1, void *p2))"
  },
  {
    "label": "EVP_MD_meth_get_input_blocksize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_get_input_blocksize(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_get_result_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_get_result_size(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_get_app_datasize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_meth_get_app_datasize(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_meth_get_flags()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "EVP_MD_meth_get_flags(const EVP_MD *md)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_MD_meth_get_init(const EVP_MD *md))(EVP_MD_CTX *ctx)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_MD_meth_get_update(const EVP_MD *md))(EVP_MD_CTX *ctx, const void *data, size_t count)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_MD_meth_get_final(const EVP_MD *md))(EVP_MD_CTX *ctx, unsigned char *md)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_MD_meth_get_copy(const EVP_MD *md))(EVP_MD_CTX *to, const EVP_MD_CTX *from)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_MD_meth_get_cleanup(const EVP_MD *md))(EVP_MD_CTX *ctx)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_MD_meth_get_ctrl(const EVP_MD *md))(EVP_MD_CTX *ctx, int cmd, int p1, void *p2)"
  },
  {
    "label": "EVP_CIPHER_meth_new()",
    "kind": "Method",
    "detail": "Function (# define EVP_MD_FLAG_ONESHOT 0 x0001 # define EVP_MD_FLAG_XOF 0 x0002 # define EVP_MD_FLAG_DIGALGID_MASK 0 x0018 # define EVP_MD_FLAG_DIGALGID_NULL 0 x0000 # define EVP_MD_FLAG_DIGALGID_ABSENT 0 x0008 # define EVP_MD_FLAG_DIGALGID_CUSTOM 0 x0018 # define EVP_MD_FLAG_FIPS 0 x0400 # define EVP_MD_CTRL_DIGALGID 0 x1 # define EVP_MD_CTRL_MICALG 0 x2 # define EVP_MD_CTRL_XOF_LEN 0 x3 # define EVP_MD_CTRL_ALG_CTRL 0 x1000 # endif # define EVP_MD_CTX_FLAG_ONESHOT 0 x0001 # define EVP_MD_CTX_FLAG_CLEANED 0 x0002 # define EVP_MD_CTX_FLAG_REUSE 0 x0004 # define EVP_MD_CTX_FLAG_NON_FIPS_ALLOW 0 x0008 # define EVP_MD_CTX_FLAG_PAD_MASK 0 xF0 # define EVP_MD_CTX_FLAG_PAD_PKCS1 0 x00 # define EVP_MD_CTX_FLAG_PAD_X931 0 x10 # define EVP_MD_CTX_FLAG_PAD_PSS 0 x20 # define EVP_MD_CTX_FLAG_NO_INIT 0 x0100 # define EVP_MD_CTX_FLAG_FINALISE 0 x0200 EVP_CIPHER*)",
    "insertText": "EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len)"
  },
  {
    "label": "EVP_CIPHER_meth_dup()",
    "kind": "Method",
    "detail": "Function (EVP_CIPHER*)",
    "insertText": "EVP_CIPHER_meth_dup(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_meth_free(EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_meth_set_iv_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_iv_length(EVP_CIPHER *cipher, int iv_len)"
  },
  {
    "label": "EVP_CIPHER_meth_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_flags(EVP_CIPHER *cipher, unsigned long flags)"
  },
  {
    "label": "EVP_CIPHER_meth_set_impl_ctx_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER *cipher, int ctx_size)"
  },
  {
    "label": "EVP_CIPHER_meth_set_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_init(EVP_CIPHER *cipher, int (*init) (EVP_CIPHER_CTX *ctx, const unsigned char *key, const unsigned char *iv, int enc))"
  },
  {
    "label": "EVP_CIPHER_meth_set_do_cipher()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER *cipher, int (*do_cipher) (EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl))"
  },
  {
    "label": "EVP_CIPHER_meth_set_cleanup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_cleanup(EVP_CIPHER *cipher, int (*cleanup) (EVP_CIPHER_CTX *))"
  },
  {
    "label": "EVP_CIPHER_meth_set_set_asn1_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER *cipher, int (*set_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *))"
  },
  {
    "label": "EVP_CIPHER_meth_set_get_asn1_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER *cipher, int (*get_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *))"
  },
  {
    "label": "EVP_CIPHER_meth_set_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_meth_set_ctrl(EVP_CIPHER *cipher, int (*ctrl) (EVP_CIPHER_CTX *, int type, int arg, void *ptr))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_CIPHER_meth_get_init(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx, const unsigned char *key, const unsigned char *iv, int enc)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_CIPHER_meth_get_do_cipher(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *, ASN1_TYPE *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *, ASN1_TYPE *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *, int type, int arg, void *ptr)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# define EVP_CIPH_STREAM_CIPHER 0 x0 # define EVP_CIPH_ECB_MODE 0 x1 # define EVP_CIPH_CBC_MODE 0 x2 # define EVP_CIPH_CFB_MODE 0 x3 # define EVP_CIPH_OFB_MODE 0 x4 # define EVP_CIPH_CTR_MODE 0 x5 # define EVP_CIPH_GCM_MODE 0 x6 # define EVP_CIPH_CCM_MODE 0 x7 # define EVP_CIPH_XTS_MODE 0 x10001 # define EVP_CIPH_WRAP_MODE 0 x10002 # define EVP_CIPH_OCB_MODE 0 x10003 # define EVP_CIPH_MODE 0 xF0007 # define EVP_CIPH_VARIABLE_LENGTH 0 x8 # define EVP_CIPH_CUSTOM_IV 0 x10 # define EVP_CIPH_ALWAYS_CALL_INIT 0 x20 # define EVP_CIPH_CTRL_INIT 0 x40 # define EVP_CIPH_CUSTOM_KEY_LENGTH 0 x80 # define EVP_CIPH_NO_PADDING 0 x100 # define EVP_CIPH_RAND_KEY 0 x200 # define EVP_CIPH_CUSTOM_COPY 0 x400 # define EVP_CIPH_CUSTOM_IV_LENGTH 0 x800 # define EVP_CIPH_FLAG_DEFAULT_ASN1 0 x1000 # define EVP_CIPH_FLAG_LENGTH_BITS 0 x2000 # define EVP_CIPH_FLAG_FIPS 0 x4000 # define EVP_CIPH_FLAG_NON_FIPS_ALLOW 0 x8000 # define EVP_CIPH_FLAG_CUSTOM_CIPHER 0 x100000 # define EVP_CIPH_FLAG_AEAD_CIPHER 0 x200000 # define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK 0 x400000 # define EVP_CIPH_FLAG_PIPELINE 0 X800000 # define EVP_CIPHER_CTX_FLAG_WRAP_ALLOW 0 x1 # define EVP_CTRL_INIT 0 x0 # define EVP_CTRL_SET_KEY_LENGTH 0 x1 # define EVP_CTRL_GET_RC2_KEY_BITS 0 x2 # define EVP_CTRL_SET_RC2_KEY_BITS 0 x3 # define EVP_CTRL_GET_RC5_ROUNDS 0 x4 # define EVP_CTRL_SET_RC5_ROUNDS 0 x5 # define EVP_CTRL_RAND_KEY 0 x6 # define EVP_CTRL_PBE_PRF_NID 0 x7 # define EVP_CTRL_COPY 0 x8 # define EVP_CTRL_AEAD_SET_IVLEN 0 x9 # define EVP_CTRL_AEAD_GET_TAG 0 x10 # define EVP_CTRL_AEAD_SET_TAG 0 x11 # define EVP_CTRL_AEAD_SET_IV_FIXED 0 x12 # define EVP_CTRL_GCM_SET_IVLEN EVP_CTRL_AEAD_SET_IVLEN # define EVP_CTRL_GCM_GET_TAG EVP_CTRL_AEAD_GET_TAG # define EVP_CTRL_GCM_SET_TAG EVP_CTRL_AEAD_SET_TAG # define EVP_CTRL_GCM_SET_IV_FIXED EVP_CTRL_AEAD_SET_IV_FIXED # define EVP_CTRL_GCM_IV_GEN 0 x13 # define EVP_CTRL_CCM_SET_IVLEN EVP_CTRL_AEAD_SET_IVLEN # define EVP_CTRL_CCM_GET_TAG EVP_CTRL_AEAD_GET_TAG # define EVP_CTRL_CCM_SET_TAG EVP_CTRL_AEAD_SET_TAG # define EVP_CTRL_CCM_SET_IV_FIXED EVP_CTRL_AEAD_SET_IV_FIXED # define EVP_CTRL_CCM_SET_L 0 x14 # define EVP_CTRL_CCM_SET_MSGLEN 0 x15 # define EVP_CTRL_AEAD_TLS1_AAD 0 x16 # define EVP_CTRL_AEAD_SET_MAC_KEY 0 x17 # define EVP_CTRL_GCM_SET_IV_INV 0 x18 # define EVP_CTRL_TLS1_1_MULTIBLOCK_AAD 0 x19 # define EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT 0 x1a # define EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT 0 x1b # define EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE 0 x1c # define EVP_CTRL_SSL3_MASTER_SECRET 0 x1d # define EVP_CTRL_SET_SBOX 0 x1e # define EVP_CTRL_SBOX_USED 0 x1f # define EVP_CTRL_KEY_MESH 0 x20 # define EVP_CTRL_BLOCK_PADDING_MODE 0 x21 # define EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS 0 x22 # define EVP_CTRL_SET_PIPELINE_INPUT_BUFS 0 x23 # define EVP_CTRL_SET_PIPELINE_INPUT_LENS 0 x24 # define EVP_CTRL_GET_IVLEN 0 x25 # define EVP_PADDING_PKCS7 1 # define EVP_PADDING_ISO7816_4 2 # define EVP_PADDING_ANSI923 3 # define EVP_PADDING_ISO10126 4 # define EVP_PADDING_ZERO 5 # define EVP_AEAD_TLS1_AAD_LEN 1 3 typedef struct { unsigned char* out ; const unsigned char* inp ; size_t len ; unsigned int interleave ; } EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM ; # define EVP_GCM_TLS_FIXED_IV_LEN 4 # define EVP_GCM_TLS_EXPLICIT_IV_LEN 8 # define EVP_GCM_TLS_TAG_LEN 1 6 # define EVP_CCM_TLS_FIXED_IV_LEN 4 # define EVP_CCM_TLS_EXPLICIT_IV_LEN 8 # define EVP_CCM_TLS_IV_LEN 1 2 # define EVP_CCM_TLS_TAG_LEN 1 6 # define EVP_CCM8_TLS_TAG_LEN 8 # define EVP_CHACHAPOLY_TLS_TAG_LEN 1 6 typedef struct evp_cipher_info_st { const EVP_CIPHER* cipher ; unsigned char iv [ EVP_MAX_IV_LENGTH ] ; } EVP_CIPHER_INFO ; typedef)",
    "insertText": "int(EVP_PBE_KEYGEN) (EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)"
  },
  {
    "label": "EVP_PKEY_assign_RSA()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_RSA # define)",
    "insertText": "EVP_PKEY_assign_RSA(pkey,rsa) EVP_PKEY_assign((pkey),EVP_PKEY_RSA,\\ (char *)(rsa)) # endif # ifndef OPENSSL_NO_DSA # define EVP_PKEY_assign_DSA(pkey,dsa) EVP_PKEY_assign((pkey),EVP_PKEY_DSA,\\ (char *)(dsa)) # endif # ifndef OPENSSL_NO_DH # define EVP_PKEY_assign_DH(pkey,dh) EVP_PKEY_assign((pkey),EVP_PKEY_DH,\\ (char *)(dh)) # endif # ifndef OPENSSL_NO_EC # define EVP_PKEY_assign_EC_KEY(pkey,eckey) EVP_PKEY_assign((pkey),EVP_PKEY_EC,\\ (char *)(eckey)) # endif # ifndef OPENSSL_NO_SIPHASH # define EVP_PKEY_assign_SIPHASH(pkey,shkey) EVP_PKEY_assign((pkey),EVP_PKEY_SIPHASH,\\ (char *)(shkey)) # endif # ifndef OPENSSL_NO_POLY1305 # define EVP_PKEY_assign_POLY1305(pkey,polykey) EVP_PKEY_assign((pkey),EVP_PKEY_POLY1305,\\ (char *)(polykey)) # endif # define EVP_get_digestbynid(a) EVP_get_digestbyname(OBJ_nid2sn(a)) # define EVP_get_digestbyobj(a) EVP_get_digestbynid(OBJ_obj2nid(a)) # define EVP_get_cipherbynid(a) EVP_get_cipherbyname(OBJ_nid2sn(a)) # define EVP_get_cipherbyobj(a) EVP_get_cipherbynid(OBJ_obj2nid(a)) int EVP_MD_type(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_nid()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_MD_nid(e) EVP_MD_type(e) # define EVP_MD_name(e) OBJ_nid2sn(EVP_MD_nid(e)) int EVP_MD_pkey_type(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_size(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_block_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_block_size(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_flags()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "EVP_MD_flags(const EVP_MD *md)"
  },
  {
    "label": "EVP_MD_CTX_md()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_MD_CTX_md(const EVP_MD_CTX *ctx)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*EVP_MD_CTX_update_fn(EVP_MD_CTX *ctx))(EVP_MD_CTX *ctx, const void *data, size_t count)"
  },
  {
    "label": "EVP_MD_CTX_set_update_fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_set_update_fn(EVP_MD_CTX *ctx, int (*update) (EVP_MD_CTX *ctx, const void *data, size_t count))"
  },
  {
    "label": "EVP_MD_CTX_size()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_MD_CTX_size(e) EVP_MD_size(EVP_MD_CTX_md(e)) # define EVP_MD_CTX_block_size(e) EVP_MD_block_size(EVP_MD_CTX_md(e)) # define EVP_MD_CTX_type(e) EVP_MD_type(EVP_MD_CTX_md(e)) EVP_PKEY_CTX *EVP_MD_CTX_pkey_ctx(const EVP_MD_CTX *ctx)"
  },
  {
    "label": "EVP_MD_CTX_set_pkey_ctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx)"
  },
  {
    "label": "EVP_MD_CTX_md_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EVP_MD_CTX_md_data(const EVP_MD_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_nid(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_name()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_CIPHER_name(e) OBJ_nid2sn(EVP_CIPHER_nid(e)) int EVP_CIPHER_block_size(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_impl_ctx_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_impl_ctx_size(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_key_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_key_length(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_iv_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_flags()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "EVP_CIPHER_flags(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_CIPHER_mode()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_CIPHER_mode(e) (EVP_CIPHER_flags(e) & EVP_CIPH_MODE) const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_encrypting()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_encrypting(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_block_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_key_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_iv_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_iv()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_original_iv()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_iv_noconst()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_buf_noconst()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "EVP_CIPHER_CTX_buf_noconst(EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_num()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_num(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_num()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX *ctx, int num)"
  },
  {
    "label": "EVP_CIPHER_CTX_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in)"
  },
  {
    "label": "EVP_CIPHER_CTX_get_app_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_app_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)"
  },
  {
    "label": "EVP_CIPHER_CTX_get_cipher_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX *ctx)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_cipher_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX *ctx, void *cipher_data)"
  },
  {
    "label": "EVP_CIPHER_CTX_type()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_CIPHER_CTX_type(c) EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c)) # if OPENSSL_API_COMPAT < 0x10100000L # define EVP_CIPHER_CTX_flags(c) EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(c)) # endif # define EVP_CIPHER_CTX_mode(c) EVP_CIPHER_mode(EVP_CIPHER_CTX_cipher(c)) # define EVP_ENCODE_LENGTH(l) ((((l)+2)/3*4)+((l)/48+1)*2+80) # define EVP_DECODE_LENGTH(l) (((l)+3)/4*3+80) # define EVP_SignInit_ex(a,b,c) EVP_DigestInit_ex(a,b,c) # define EVP_SignInit(a,b) EVP_DigestInit(a,b) # define EVP_SignUpdate(a,b,c) EVP_DigestUpdate(a,b,c) # define EVP_VerifyInit_ex(a,b,c) EVP_DigestInit_ex(a,b,c) # define EVP_VerifyInit(a,b) EVP_DigestInit(a,b) # define EVP_VerifyUpdate(a,b,c) EVP_DigestUpdate(a,b,c) # define EVP_OpenUpdate(a,b,c,d,e) EVP_DecryptUpdate(a,b,c,d,e) # define EVP_SealUpdate(a,b,c,d,e) EVP_EncryptUpdate(a,b,c,d,e) # define EVP_DigestSignUpdate(a,b,c) EVP_DigestUpdate(a,b,c) # define EVP_DigestVerifyUpdate(a,b,c) EVP_DigestUpdate(a,b,c) # ifdef CONST_STRICT void BIO_set_md(BIO *, const EVP_MD *md)"
  },
  {
    "label": "BIO_set_md()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "BIO_set_md(b,md) BIO_ctrl(b,BIO_C_SET_MD,0,(char *)(md)) # endif # define BIO_get_md(b,mdp) BIO_ctrl(b,BIO_C_GET_MD,0,(char *)(mdp)) # define BIO_get_md_ctx(b,mdcp) BIO_ctrl(b,BIO_C_GET_MD_CTX,0, \\ (char *)(mdcp)) # define BIO_set_md_ctx(b,mdcp) BIO_ctrl(b,BIO_C_SET_MD_CTX,0, \\ (char *)(mdcp)) # define BIO_get_cipher_status(b) BIO_ctrl(b,BIO_C_GET_CIPHER_STATUS,0,NULL) # define BIO_get_cipher_ctx(b,c_pp) BIO_ctrl(b,BIO_C_GET_CIPHER_CTX,0, \\ (char *)(c_pp)) int EVP_Cipher(EVP_CIPHER_CTX *c, unsigned char *out, const unsigned char *in, unsigned int inl)"
  },
  {
    "label": "EVP_add_cipher_alias()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_add_cipher_alias(n,alias) \\ OBJ_NAME_add((alias),OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS,(n)) # define EVP_add_digest_alias(n,alias) \\ OBJ_NAME_add((alias),OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,(n)) # define EVP_delete_cipher_alias(alias) \\ OBJ_NAME_remove(alias,OBJ_NAME_TYPE_CIPHER_METH|OBJ_NAME_ALIAS)"
  },
  {
    "label": "EVP_delete_digest_alias()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_delete_digest_alias(alias) \\ OBJ_NAME_remove(alias,OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS)"
  },
  {
    "label": "EVP_MD_CTX_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void *p2)"
  },
  {
    "label": "EVP_MD_CTX_new()",
    "kind": "Method",
    "detail": "Function (EVP_MD_CTX*)",
    "insertText": "EVP_MD_CTX_new(void)"
  },
  {
    "label": "EVP_MD_CTX_reset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_reset(EVP_MD_CTX *ctx)"
  },
  {
    "label": "EVP_MD_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_free(EVP_MD_CTX *ctx)"
  },
  {
    "label": "EVP_MD_CTX_create()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EVP_MD_CTX_create() EVP_MD_CTX_new() # define EVP_MD_CTX_init(ctx) EVP_MD_CTX_reset((ctx)) # define EVP_MD_CTX_destroy(ctx) EVP_MD_CTX_free((ctx)) __owur int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)"
  },
  {
    "label": "EVP_MD_CTX_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_MD_CTX_clear_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_MD_CTX_test_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_DigestInit_ex()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)"
  },
  {
    "label": "EVP_DigestUpdate()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt)"
  },
  {
    "label": "EVP_DigestFinal_ex()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s)"
  },
  {
    "label": "EVP_Digest()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_Digest(const void *data, size_t count, unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl)"
  },
  {
    "label": "EVP_MD_CTX_copy()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)"
  },
  {
    "label": "EVP_DigestInit()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)"
  },
  {
    "label": "EVP_DigestFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s)"
  },
  {
    "label": "EVP_DigestFinalXOF()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md, size_t len)"
  },
  {
    "label": "EVP_read_pw_string()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_read_pw_string(char *buf, int length, const char *prompt, int verify)"
  },
  {
    "label": "EVP_read_pw_string_min()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_read_pw_string_min(char *buf, int minlen, int maxlen, const char *prompt, int verify)"
  },
  {
    "label": "EVP_set_pw_prompt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_set_pw_prompt(const char *prompt)"
  },
  {
    "label": "EVP_get_pw_prompt()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "EVP_get_pw_prompt(void)"
  },
  {
    "label": "EVP_BytesToKey()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md, const unsigned char *salt, const unsigned char *data, int datal, int count, unsigned char *key, unsigned char *iv)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_CIPHER_CTX_clear_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_CIPHER_CTX_test_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)"
  },
  {
    "label": "EVP_EncryptInit()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv)"
  },
  {
    "label": "EVP_EncryptInit_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv)"
  },
  {
    "label": "EVP_EncryptUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_EncryptFinal_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_EncryptFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_DecryptInit()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv)"
  },
  {
    "label": "EVP_DecryptInit_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv)"
  },
  {
    "label": "EVP_DecryptUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_DecryptFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)"
  },
  {
    "label": "EVP_DecryptFinal_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)"
  },
  {
    "label": "EVP_CipherInit()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, int enc)"
  },
  {
    "label": "EVP_CipherInit_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned char *key, const unsigned char *iv, int enc)"
  },
  {
    "label": "EVP_CipherUpdate()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_CipherFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)"
  },
  {
    "label": "EVP_CipherFinal_ex()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)"
  },
  {
    "label": "EVP_SignFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s, EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestSign()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen, const unsigned char *tbs, size_t tbslen)"
  },
  {
    "label": "EVP_VerifyFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sigbuf, unsigned int siglen, EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestVerify()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret, size_t siglen, const unsigned char *tbs, size_t tbslen)"
  },
  {
    "label": "EVP_DigestSignInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx, const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestSignFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen)"
  },
  {
    "label": "EVP_DigestVerifyInit()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx, const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_DigestVerifyFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen)"
  },
  {
    "label": "EVP_OpenInit()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_RSA __owur int)",
    "insertText": "EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, const unsigned char *ek, int ekl, const unsigned char *iv, EVP_PKEY *priv)"
  },
  {
    "label": "EVP_OpenFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_SealInit()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char **ek, int *ekl, unsigned char *iv, EVP_PKEY **pubk, int npubk)"
  },
  {
    "label": "EVP_SealFinal()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_ENCODE_CTX_new()",
    "kind": "Method",
    "detail": "Function (# endif EVP_ENCODE_CTX*)",
    "insertText": "EVP_ENCODE_CTX_new(void)"
  },
  {
    "label": "EVP_ENCODE_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_ENCODE_CTX_free(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_ENCODE_CTX_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX *dctx, EVP_ENCODE_CTX *sctx)"
  },
  {
    "label": "EVP_ENCODE_CTX_num()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_ENCODE_CTX_num(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_EncodeInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_EncodeInit(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_EncodeUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_EncodeFinal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_EncodeBlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int n)"
  },
  {
    "label": "EVP_DecodeInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_DecodeInit(EVP_ENCODE_CTX *ctx)"
  },
  {
    "label": "EVP_DecodeUpdate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl)"
  },
  {
    "label": "EVP_DecodeFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)"
  },
  {
    "label": "EVP_DecodeBlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)"
  },
  {
    "label": "EVP_CIPHER_CTX_init()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define)",
    "insertText": "EVP_CIPHER_CTX_init(c) EVP_CIPHER_CTX_reset(c) # define EVP_CIPHER_CTX_cleanup(c) EVP_CIPHER_CTX_reset(c) # endif EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void)"
  },
  {
    "label": "EVP_CIPHER_CTX_reset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c)"
  },
  {
    "label": "EVP_CIPHER_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *c)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_key_length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen)"
  },
  {
    "label": "EVP_CIPHER_CTX_set_padding()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad)"
  },
  {
    "label": "EVP_CIPHER_CTX_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)"
  },
  {
    "label": "EVP_CIPHER_CTX_rand_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key)"
  },
  {
    "label": "BIO_f_md()",
    "kind": "Method",
    "detail": "Function (const BIO_METHOD*)",
    "insertText": "BIO_f_md(void)"
  },
  {
    "label": "BIO_f_base64()",
    "kind": "Method",
    "detail": "Function (const BIO_METHOD*)",
    "insertText": "BIO_f_base64(void)"
  },
  {
    "label": "BIO_f_cipher()",
    "kind": "Method",
    "detail": "Function (const BIO_METHOD*)",
    "insertText": "BIO_f_cipher(void)"
  },
  {
    "label": "BIO_f_reliable()",
    "kind": "Method",
    "detail": "Function (const BIO_METHOD*)",
    "insertText": "BIO_f_reliable(void)"
  },
  {
    "label": "BIO_set_cipher()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k, const unsigned char *i, int enc)"
  },
  {
    "label": "EVP_md_null()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_md_null(void)"
  },
  {
    "label": "EVP_md2()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_MD2 const EVP_MD*)",
    "insertText": "EVP_md2(void)"
  },
  {
    "label": "EVP_md4()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_MD4 const EVP_MD*)",
    "insertText": "EVP_md4(void)"
  },
  {
    "label": "EVP_md5()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_MD5 const EVP_MD*)",
    "insertText": "EVP_md5(void)"
  },
  {
    "label": "EVP_md5_sha1()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_md5_sha1(void)"
  },
  {
    "label": "EVP_blake2b512()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_BLAKE2 const EVP_MD*)",
    "insertText": "EVP_blake2b512(void)"
  },
  {
    "label": "EVP_blake2s256()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_blake2s256(void)"
  },
  {
    "label": "EVP_sha1()",
    "kind": "Method",
    "detail": "Function (# endif const EVP_MD*)",
    "insertText": "EVP_sha1(void)"
  },
  {
    "label": "EVP_sha224()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha224(void)"
  },
  {
    "label": "EVP_sha256()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha256(void)"
  },
  {
    "label": "EVP_sha384()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha384(void)"
  },
  {
    "label": "EVP_sha512()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha512(void)"
  },
  {
    "label": "EVP_sha512_224()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha512_224(void)"
  },
  {
    "label": "EVP_sha512_256()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha512_256(void)"
  },
  {
    "label": "EVP_sha3_224()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha3_224(void)"
  },
  {
    "label": "EVP_sha3_256()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha3_256(void)"
  },
  {
    "label": "EVP_sha3_384()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha3_384(void)"
  },
  {
    "label": "EVP_sha3_512()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_sha3_512(void)"
  },
  {
    "label": "EVP_shake128()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_shake128(void)"
  },
  {
    "label": "EVP_shake256()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_shake256(void)"
  },
  {
    "label": "EVP_mdc2()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_MDC2 const EVP_MD*)",
    "insertText": "EVP_mdc2(void)"
  },
  {
    "label": "EVP_ripemd160()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_RMD160 const EVP_MD*)",
    "insertText": "EVP_ripemd160(void)"
  },
  {
    "label": "EVP_whirlpool()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_WHIRLPOOL const EVP_MD*)",
    "insertText": "EVP_whirlpool(void)"
  },
  {
    "label": "EVP_sm3()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_SM3 const EVP_MD*)",
    "insertText": "EVP_sm3(void)"
  },
  {
    "label": "EVP_enc_null()",
    "kind": "Method",
    "detail": "Function (# endif const EVP_CIPHER*)",
    "insertText": "EVP_enc_null(void)"
  },
  {
    "label": "EVP_des_ecb()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_DES const EVP_CIPHER*)",
    "insertText": "EVP_des_ecb(void)"
  },
  {
    "label": "EVP_des_ede()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede(void)"
  },
  {
    "label": "EVP_des_ede3()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3(void)"
  },
  {
    "label": "EVP_des_ede_ecb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede_ecb(void)"
  },
  {
    "label": "EVP_des_ede3_ecb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3_ecb(void)"
  },
  {
    "label": "EVP_des_cfb64()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_cfb64(void)"
  },
  {
    "label": "EVP_des_cfb1()",
    "kind": "Method",
    "detail": "Function (# define EVP_des_cfb EVP_des_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_des_cfb1(void)"
  },
  {
    "label": "EVP_des_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_cfb8(void)"
  },
  {
    "label": "EVP_des_ede_cfb64()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede_cfb64(void)"
  },
  {
    "label": "EVP_des_ede3_cfb64()",
    "kind": "Method",
    "detail": "Function (# define EVP_des_ede_cfb EVP_des_ede_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3_cfb64(void)"
  },
  {
    "label": "EVP_des_ede3_cfb1()",
    "kind": "Method",
    "detail": "Function (# define EVP_des_ede3_cfb EVP_des_ede3_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3_cfb1(void)"
  },
  {
    "label": "EVP_des_ede3_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3_cfb8(void)"
  },
  {
    "label": "EVP_des_ofb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ofb(void)"
  },
  {
    "label": "EVP_des_ede_ofb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede_ofb(void)"
  },
  {
    "label": "EVP_des_ede3_ofb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3_ofb(void)"
  },
  {
    "label": "EVP_des_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_cbc(void)"
  },
  {
    "label": "EVP_des_ede_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede_cbc(void)"
  },
  {
    "label": "EVP_des_ede3_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3_cbc(void)"
  },
  {
    "label": "EVP_desx_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_desx_cbc(void)"
  },
  {
    "label": "EVP_des_ede3_wrap()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_des_ede3_wrap(void)"
  },
  {
    "label": "EVP_rc4()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_RC4 const EVP_CIPHER*)",
    "insertText": "EVP_rc4(void)"
  },
  {
    "label": "EVP_rc4_40()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_rc4_40(void)"
  },
  {
    "label": "EVP_rc4_hmac_md5()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_MD5 const EVP_CIPHER*)",
    "insertText": "EVP_rc4_hmac_md5(void)"
  },
  {
    "label": "EVP_idea_ecb()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef OPENSSL_NO_IDEA const EVP_CIPHER*)",
    "insertText": "EVP_idea_ecb(void)"
  },
  {
    "label": "EVP_idea_cfb64()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_idea_cfb64(void)"
  },
  {
    "label": "EVP_idea_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_idea_cfb EVP_idea_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_idea_ofb(void)"
  },
  {
    "label": "EVP_idea_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_idea_cbc(void)"
  },
  {
    "label": "EVP_rc2_ecb()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_RC2 const EVP_CIPHER*)",
    "insertText": "EVP_rc2_ecb(void)"
  },
  {
    "label": "EVP_rc2_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_rc2_cbc(void)"
  },
  {
    "label": "EVP_rc2_40_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_rc2_40_cbc(void)"
  },
  {
    "label": "EVP_rc2_64_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_rc2_64_cbc(void)"
  },
  {
    "label": "EVP_rc2_cfb64()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_rc2_cfb64(void)"
  },
  {
    "label": "EVP_rc2_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_rc2_cfb EVP_rc2_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_rc2_ofb(void)"
  },
  {
    "label": "EVP_bf_ecb()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_BF const EVP_CIPHER*)",
    "insertText": "EVP_bf_ecb(void)"
  },
  {
    "label": "EVP_bf_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_bf_cbc(void)"
  },
  {
    "label": "EVP_bf_cfb64()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_bf_cfb64(void)"
  },
  {
    "label": "EVP_bf_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_bf_cfb EVP_bf_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_bf_ofb(void)"
  },
  {
    "label": "EVP_cast5_ecb()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_CAST const EVP_CIPHER*)",
    "insertText": "EVP_cast5_ecb(void)"
  },
  {
    "label": "EVP_cast5_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_cast5_cbc(void)"
  },
  {
    "label": "EVP_cast5_cfb64()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_cast5_cfb64(void)"
  },
  {
    "label": "EVP_cast5_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_cast5_cfb EVP_cast5_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_cast5_ofb(void)"
  },
  {
    "label": "EVP_rc5_32_12_16_cbc()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_RC5 const EVP_CIPHER*)",
    "insertText": "EVP_rc5_32_12_16_cbc(void)"
  },
  {
    "label": "EVP_rc5_32_12_16_ecb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_rc5_32_12_16_ecb(void)"
  },
  {
    "label": "EVP_rc5_32_12_16_cfb64()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_rc5_32_12_16_cfb64(void)"
  },
  {
    "label": "EVP_rc5_32_12_16_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_rc5_32_12_16_cfb EVP_rc5_32_12_16_cfb64 const EVP_CIPHER*)",
    "insertText": "EVP_rc5_32_12_16_ofb(void)"
  },
  {
    "label": "EVP_aes_128_ecb()",
    "kind": "Method",
    "detail": "Function (# endif const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_ecb(void)"
  },
  {
    "label": "EVP_aes_128_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_cbc(void)"
  },
  {
    "label": "EVP_aes_128_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_cfb1(void)"
  },
  {
    "label": "EVP_aes_128_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_cfb8(void)"
  },
  {
    "label": "EVP_aes_128_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_cfb128(void)"
  },
  {
    "label": "EVP_aes_128_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_aes_128_cfb EVP_aes_128_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_ofb(void)"
  },
  {
    "label": "EVP_aes_128_ctr()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_ctr(void)"
  },
  {
    "label": "EVP_aes_128_ccm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_ccm(void)"
  },
  {
    "label": "EVP_aes_128_gcm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_gcm(void)"
  },
  {
    "label": "EVP_aes_128_xts()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_xts(void)"
  },
  {
    "label": "EVP_aes_128_wrap()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_wrap(void)"
  },
  {
    "label": "EVP_aes_128_wrap_pad()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_wrap_pad(void)"
  },
  {
    "label": "EVP_aes_128_ocb()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_OCB const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_ocb(void)"
  },
  {
    "label": "EVP_aes_192_ecb()",
    "kind": "Method",
    "detail": "Function (# endif const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_ecb(void)"
  },
  {
    "label": "EVP_aes_192_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_cbc(void)"
  },
  {
    "label": "EVP_aes_192_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_cfb1(void)"
  },
  {
    "label": "EVP_aes_192_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_cfb8(void)"
  },
  {
    "label": "EVP_aes_192_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_cfb128(void)"
  },
  {
    "label": "EVP_aes_192_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_aes_192_cfb EVP_aes_192_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_ofb(void)"
  },
  {
    "label": "EVP_aes_192_ctr()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_ctr(void)"
  },
  {
    "label": "EVP_aes_192_ccm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_ccm(void)"
  },
  {
    "label": "EVP_aes_192_gcm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_gcm(void)"
  },
  {
    "label": "EVP_aes_192_wrap()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_wrap(void)"
  },
  {
    "label": "EVP_aes_192_wrap_pad()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_wrap_pad(void)"
  },
  {
    "label": "EVP_aes_192_ocb()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_OCB const EVP_CIPHER*)",
    "insertText": "EVP_aes_192_ocb(void)"
  },
  {
    "label": "EVP_aes_256_ecb()",
    "kind": "Method",
    "detail": "Function (# endif const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_ecb(void)"
  },
  {
    "label": "EVP_aes_256_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_cbc(void)"
  },
  {
    "label": "EVP_aes_256_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_cfb1(void)"
  },
  {
    "label": "EVP_aes_256_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_cfb8(void)"
  },
  {
    "label": "EVP_aes_256_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_cfb128(void)"
  },
  {
    "label": "EVP_aes_256_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_aes_256_cfb EVP_aes_256_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_ofb(void)"
  },
  {
    "label": "EVP_aes_256_ctr()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_ctr(void)"
  },
  {
    "label": "EVP_aes_256_ccm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_ccm(void)"
  },
  {
    "label": "EVP_aes_256_gcm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_gcm(void)"
  },
  {
    "label": "EVP_aes_256_xts()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_xts(void)"
  },
  {
    "label": "EVP_aes_256_wrap()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_wrap(void)"
  },
  {
    "label": "EVP_aes_256_wrap_pad()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_wrap_pad(void)"
  },
  {
    "label": "EVP_aes_256_ocb()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_OCB const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_ocb(void)"
  },
  {
    "label": "EVP_aes_128_cbc_hmac_sha1()",
    "kind": "Method",
    "detail": "Function (# endif const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_cbc_hmac_sha1(void)"
  },
  {
    "label": "EVP_aes_256_cbc_hmac_sha1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_cbc_hmac_sha1(void)"
  },
  {
    "label": "EVP_aes_128_cbc_hmac_sha256()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_128_cbc_hmac_sha256(void)"
  },
  {
    "label": "EVP_aes_256_cbc_hmac_sha256()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aes_256_cbc_hmac_sha256(void)"
  },
  {
    "label": "EVP_aria_128_ecb()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_ARIA const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_ecb(void)"
  },
  {
    "label": "EVP_aria_128_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_cbc(void)"
  },
  {
    "label": "EVP_aria_128_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_cfb1(void)"
  },
  {
    "label": "EVP_aria_128_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_cfb8(void)"
  },
  {
    "label": "EVP_aria_128_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_cfb128(void)"
  },
  {
    "label": "EVP_aria_128_ctr()",
    "kind": "Method",
    "detail": "Function (# define EVP_aria_128_cfb EVP_aria_128_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_ctr(void)"
  },
  {
    "label": "EVP_aria_128_ofb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_ofb(void)"
  },
  {
    "label": "EVP_aria_128_gcm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_gcm(void)"
  },
  {
    "label": "EVP_aria_128_ccm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_128_ccm(void)"
  },
  {
    "label": "EVP_aria_192_ecb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_ecb(void)"
  },
  {
    "label": "EVP_aria_192_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_cbc(void)"
  },
  {
    "label": "EVP_aria_192_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_cfb1(void)"
  },
  {
    "label": "EVP_aria_192_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_cfb8(void)"
  },
  {
    "label": "EVP_aria_192_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_cfb128(void)"
  },
  {
    "label": "EVP_aria_192_ctr()",
    "kind": "Method",
    "detail": "Function (# define EVP_aria_192_cfb EVP_aria_192_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_ctr(void)"
  },
  {
    "label": "EVP_aria_192_ofb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_ofb(void)"
  },
  {
    "label": "EVP_aria_192_gcm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_gcm(void)"
  },
  {
    "label": "EVP_aria_192_ccm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_192_ccm(void)"
  },
  {
    "label": "EVP_aria_256_ecb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_ecb(void)"
  },
  {
    "label": "EVP_aria_256_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_cbc(void)"
  },
  {
    "label": "EVP_aria_256_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_cfb1(void)"
  },
  {
    "label": "EVP_aria_256_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_cfb8(void)"
  },
  {
    "label": "EVP_aria_256_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_cfb128(void)"
  },
  {
    "label": "EVP_aria_256_ctr()",
    "kind": "Method",
    "detail": "Function (# define EVP_aria_256_cfb EVP_aria_256_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_ctr(void)"
  },
  {
    "label": "EVP_aria_256_ofb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_ofb(void)"
  },
  {
    "label": "EVP_aria_256_gcm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_gcm(void)"
  },
  {
    "label": "EVP_aria_256_ccm()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_aria_256_ccm(void)"
  },
  {
    "label": "EVP_camellia_128_ecb()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_CAMELLIA const EVP_CIPHER*)",
    "insertText": "EVP_camellia_128_ecb(void)"
  },
  {
    "label": "EVP_camellia_128_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_128_cbc(void)"
  },
  {
    "label": "EVP_camellia_128_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_128_cfb1(void)"
  },
  {
    "label": "EVP_camellia_128_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_128_cfb8(void)"
  },
  {
    "label": "EVP_camellia_128_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_128_cfb128(void)"
  },
  {
    "label": "EVP_camellia_128_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_camellia_128_cfb EVP_camellia_128_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_camellia_128_ofb(void)"
  },
  {
    "label": "EVP_camellia_128_ctr()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_128_ctr(void)"
  },
  {
    "label": "EVP_camellia_192_ecb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_192_ecb(void)"
  },
  {
    "label": "EVP_camellia_192_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_192_cbc(void)"
  },
  {
    "label": "EVP_camellia_192_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_192_cfb1(void)"
  },
  {
    "label": "EVP_camellia_192_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_192_cfb8(void)"
  },
  {
    "label": "EVP_camellia_192_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_192_cfb128(void)"
  },
  {
    "label": "EVP_camellia_192_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_camellia_192_cfb EVP_camellia_192_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_camellia_192_ofb(void)"
  },
  {
    "label": "EVP_camellia_192_ctr()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_192_ctr(void)"
  },
  {
    "label": "EVP_camellia_256_ecb()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_256_ecb(void)"
  },
  {
    "label": "EVP_camellia_256_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_256_cbc(void)"
  },
  {
    "label": "EVP_camellia_256_cfb1()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_256_cfb1(void)"
  },
  {
    "label": "EVP_camellia_256_cfb8()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_256_cfb8(void)"
  },
  {
    "label": "EVP_camellia_256_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_256_cfb128(void)"
  },
  {
    "label": "EVP_camellia_256_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_camellia_256_cfb EVP_camellia_256_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_camellia_256_ofb(void)"
  },
  {
    "label": "EVP_camellia_256_ctr()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_camellia_256_ctr(void)"
  },
  {
    "label": "EVP_chacha20()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_CHACHA const EVP_CIPHER*)",
    "insertText": "EVP_chacha20(void)"
  },
  {
    "label": "EVP_chacha20_poly1305()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_POLY1305 const EVP_CIPHER*)",
    "insertText": "EVP_chacha20_poly1305(void)"
  },
  {
    "label": "EVP_seed_ecb()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef OPENSSL_NO_SEED const EVP_CIPHER*)",
    "insertText": "EVP_seed_ecb(void)"
  },
  {
    "label": "EVP_seed_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_seed_cbc(void)"
  },
  {
    "label": "EVP_seed_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_seed_cfb128(void)"
  },
  {
    "label": "EVP_seed_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_seed_cfb EVP_seed_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_seed_ofb(void)"
  },
  {
    "label": "EVP_sm4_ecb()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_SM4 const EVP_CIPHER*)",
    "insertText": "EVP_sm4_ecb(void)"
  },
  {
    "label": "EVP_sm4_cbc()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_sm4_cbc(void)"
  },
  {
    "label": "EVP_sm4_cfb128()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_sm4_cfb128(void)"
  },
  {
    "label": "EVP_sm4_ofb()",
    "kind": "Method",
    "detail": "Function (# define EVP_sm4_cfb EVP_sm4_cfb128 const EVP_CIPHER*)",
    "insertText": "EVP_sm4_ofb(void)"
  },
  {
    "label": "EVP_sm4_ctr()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_sm4_ctr(void)"
  },
  {
    "label": "OPENSSL_add_all_algorithms_conf()",
    "kind": "Method",
    "detail": "Function (# endif # if OPENSSL_API_COMPAT<0 x10100000L # define)",
    "insertText": "OPENSSL_add_all_algorithms_conf() \\ OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_CIPHERS \\ | OPENSSL_INIT_ADD_ALL_DIGESTS \\ | OPENSSL_INIT_LOAD_CONFIG, NULL) # define OPENSSL_add_all_algorithms_noconf() \\ OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_CIPHERS \\ | OPENSSL_INIT_ADD_ALL_DIGESTS, NULL) # ifdef OPENSSL_LOAD_CONF # define OpenSSL_add_all_algorithms() OPENSSL_add_all_algorithms_conf() # else # define OpenSSL_add_all_algorithms() OPENSSL_add_all_algorithms_noconf() # endif # define OpenSSL_add_all_ciphers() \\ OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_CIPHERS, NULL) # define OpenSSL_add_all_digests() \\ OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_DIGESTS, NULL) # define EVP_cleanup() while(0) continue # endif int EVP_add_cipher(const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_add_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_add_digest(const EVP_MD *digest)"
  },
  {
    "label": "EVP_get_cipherbyname()",
    "kind": "Method",
    "detail": "Function (const EVP_CIPHER*)",
    "insertText": "EVP_get_cipherbyname(const char *name)"
  },
  {
    "label": "EVP_get_digestbyname()",
    "kind": "Method",
    "detail": "Function (const EVP_MD*)",
    "insertText": "EVP_get_digestbyname(const char *name)"
  },
  {
    "label": "EVP_CIPHER_do_all()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_do_all(void (*fn) (const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void *arg)"
  },
  {
    "label": "EVP_CIPHER_do_all_sorted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_CIPHER_do_all_sorted(void (*fn) (const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void *arg)"
  },
  {
    "label": "EVP_MD_do_all()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_do_all(void (*fn) (const EVP_MD *ciph, const char *from, const char *to, void *x), void *arg)"
  },
  {
    "label": "EVP_MD_do_all_sorted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_MD_do_all_sorted(void (*fn) (const EVP_MD *ciph, const char *from, const char *to, void *x), void *arg)"
  },
  {
    "label": "EVP_PKEY_decrypt_old()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_decrypt_old(unsigned char *dec_key, const unsigned char *enc_key, int enc_key_len, EVP_PKEY *private_key)"
  },
  {
    "label": "EVP_PKEY_encrypt_old()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_encrypt_old(unsigned char *enc_key, const unsigned char *key, int key_len, EVP_PKEY *pub_key)"
  },
  {
    "label": "EVP_PKEY_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_type(int type)"
  },
  {
    "label": "EVP_PKEY_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_id(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_base_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_base_id(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_bits(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_security_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_security_bits(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_size(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_set_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set_type(EVP_PKEY *pkey, int type)"
  },
  {
    "label": "EVP_PKEY_set_type_str()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set_type_str(EVP_PKEY *pkey, const char *str, int len)"
  },
  {
    "label": "EVP_PKEY_set_alias_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type)"
  },
  {
    "label": "EVP_PKEY_set1_engine()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_ENGINE int)",
    "insertText": "EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *e)"
  },
  {
    "label": "EVP_PKEY_get0_engine()",
    "kind": "Method",
    "detail": "Function (ENGINE*)",
    "insertText": "EVP_PKEY_get0_engine(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_assign()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key)"
  },
  {
    "label": "EVP_PKEY_get0()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EVP_PKEY_get0(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_get0_hmac()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "EVP_PKEY_get0_hmac(const EVP_PKEY *pkey, size_t *len)"
  },
  {
    "label": "EVP_PKEY_get0_poly1305()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_POLY1305 const unsigned char*)",
    "insertText": "EVP_PKEY_get0_poly1305(const EVP_PKEY *pkey, size_t *len)"
  },
  {
    "label": "EVP_PKEY_get0_siphash()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_SIPHASH const unsigned char*)",
    "insertText": "EVP_PKEY_get0_siphash(const EVP_PKEY *pkey, size_t *len)"
  },
  {
    "label": "EVP_PKEY_set1_RSA()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_RSA struct rsa_st ; int)",
    "insertText": "EVP_PKEY_set1_RSA(EVP_PKEY *pkey, struct rsa_st *key)"
  },
  {
    "label": "EVP_PKEY_get0_RSA()",
    "kind": "Method",
    "detail": "Function (struct rsa_st*)",
    "insertText": "EVP_PKEY_get0_RSA(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_get1_RSA()",
    "kind": "Method",
    "detail": "Function (struct rsa_st*)",
    "insertText": "EVP_PKEY_get1_RSA(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_set1_DSA()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_DSA struct dsa_st ; int)",
    "insertText": "EVP_PKEY_set1_DSA(EVP_PKEY *pkey, struct dsa_st *key)"
  },
  {
    "label": "EVP_PKEY_get0_DSA()",
    "kind": "Method",
    "detail": "Function (struct dsa_st*)",
    "insertText": "EVP_PKEY_get0_DSA(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_get1_DSA()",
    "kind": "Method",
    "detail": "Function (struct dsa_st*)",
    "insertText": "EVP_PKEY_get1_DSA(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_set1_DH()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_DH struct dh_st ; int)",
    "insertText": "EVP_PKEY_set1_DH(EVP_PKEY *pkey, struct dh_st *key)"
  },
  {
    "label": "EVP_PKEY_get0_DH()",
    "kind": "Method",
    "detail": "Function (struct dh_st*)",
    "insertText": "EVP_PKEY_get0_DH(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_get1_DH()",
    "kind": "Method",
    "detail": "Function (struct dh_st*)",
    "insertText": "EVP_PKEY_get1_DH(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_set1_EC_KEY()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_EC struct ec_key_st ; int)",
    "insertText": "EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, struct ec_key_st *key)"
  },
  {
    "label": "EVP_PKEY_get0_EC_KEY()",
    "kind": "Method",
    "detail": "Function (struct ec_key_st*)",
    "insertText": "EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_get1_EC_KEY()",
    "kind": "Method",
    "detail": "Function (struct ec_key_st*)",
    "insertText": "EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_new()",
    "kind": "Method",
    "detail": "Function (# endif EVP_PKEY*)",
    "insertText": "EVP_PKEY_new(void)"
  },
  {
    "label": "EVP_PKEY_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_up_ref(EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_free(EVP_PKEY *pkey)"
  },
  {
    "label": "d2i_PublicKey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp, long length)"
  },
  {
    "label": "i2d_PublicKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PublicKey(EVP_PKEY *a, unsigned char **pp)"
  },
  {
    "label": "d2i_PrivateKey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp, long length)"
  },
  {
    "label": "d2i_AutoPrivateKey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp, long length)"
  },
  {
    "label": "i2d_PrivateKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)"
  },
  {
    "label": "EVP_PKEY_copy_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)"
  },
  {
    "label": "EVP_PKEY_missing_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_missing_parameters(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_save_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode)"
  },
  {
    "label": "EVP_PKEY_cmp_parameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)"
  },
  {
    "label": "EVP_PKEY_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)"
  },
  {
    "label": "EVP_PKEY_print_public()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)"
  },
  {
    "label": "EVP_PKEY_print_private()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)"
  },
  {
    "label": "EVP_PKEY_print_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)"
  },
  {
    "label": "EVP_PKEY_get_default_digest_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid)"
  },
  {
    "label": "EVP_PKEY_set1_tls_encodedpoint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_set1_tls_encodedpoint(EVP_PKEY *pkey, const unsigned char *pt, size_t ptlen)"
  },
  {
    "label": "EVP_PKEY_get1_tls_encodedpoint()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EVP_PKEY_get1_tls_encodedpoint(EVP_PKEY *pkey, unsigned char **ppt)"
  },
  {
    "label": "EVP_CIPHER_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_type(const EVP_CIPHER *ctx)"
  },
  {
    "label": "EVP_CIPHER_param_to_asn1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "EVP_CIPHER_asn1_to_param()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "EVP_CIPHER_set_asn1_iv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "EVP_CIPHER_get_asn1_iv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)"
  },
  {
    "label": "PKCS5_PBE_keyivgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)"
  },
  {
    "label": "PKCS5_PBKDF2_HMAC_SHA1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, int keylen, unsigned char *out)"
  },
  {
    "label": "PKCS5_PBKDF2_HMAC()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_PBKDF2_HMAC(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, const EVP_MD *digest, int keylen, unsigned char *out)"
  },
  {
    "label": "PKCS5_v2_PBE_keyivgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)"
  },
  {
    "label": "EVP_PBE_scrypt()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_SCRYPT int)",
    "insertText": "EVP_PBE_scrypt(const char *pass, size_t passlen, const unsigned char *salt, size_t saltlen, uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem, unsigned char *key, size_t keylen)"
  },
  {
    "label": "PKCS5_v2_scrypt_keyivgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *c, const EVP_MD *md, int en_de)"
  },
  {
    "label": "PKCS5_PBE_add()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PKCS5_PBE_add(void)"
  },
  {
    "label": "EVP_PBE_CipherInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)"
  },
  {
    "label": "EVP_PBE_alg_add_type()",
    "kind": "Method",
    "detail": "Function (# define EVP_PBE_TYPE_OUTER 0 x0 # define EVP_PBE_TYPE_PRF 0 x1 # define EVP_PBE_TYPE_KDF 0 x2 int)",
    "insertText": "EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN *keygen)"
  },
  {
    "label": "EVP_PBE_alg_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md, EVP_PBE_KEYGEN *keygen)"
  },
  {
    "label": "EVP_PBE_find()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_find(int type, int pbe_nid, int *pcnid, int *pmnid, EVP_PBE_KEYGEN **pkeygen)"
  },
  {
    "label": "EVP_PBE_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PBE_cleanup(void)"
  },
  {
    "label": "EVP_PBE_get()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PBE_get(int *ptype, int *ppbe_nid, size_t num)"
  },
  {
    "label": "EVP_PKEY_asn1_get_count()",
    "kind": "Method",
    "detail": "Function (# define ASN1_PKEY_ALIAS 0 x1 # define ASN1_PKEY_DYNAMIC 0 x2 # define ASN1_PKEY_SIGPARAM_NULL 0 x4 # define ASN1_PKEY_CTRL_PKCS7_SIGN 0 x1 # define ASN1_PKEY_CTRL_PKCS7_ENCRYPT 0 x2 # define ASN1_PKEY_CTRL_DEFAULT_MD_NID 0 x3 # define ASN1_PKEY_CTRL_CMS_SIGN 0 x5 # define ASN1_PKEY_CTRL_CMS_ENVELOPE 0 x7 # define ASN1_PKEY_CTRL_CMS_RI_TYPE 0 x8 # define ASN1_PKEY_CTRL_SET1_TLS_ENCPT 0 x9 # define ASN1_PKEY_CTRL_GET1_TLS_ENCPT 0 xa int)",
    "insertText": "EVP_PKEY_asn1_get_count(void)"
  },
  {
    "label": "EVP_PKEY_asn1_get0()",
    "kind": "Method",
    "detail": "Function (const EVP_PKEY_ASN1_METHOD*)",
    "insertText": "EVP_PKEY_asn1_get0(int idx)"
  },
  {
    "label": "EVP_PKEY_asn1_find()",
    "kind": "Method",
    "detail": "Function (const EVP_PKEY_ASN1_METHOD*)",
    "insertText": "EVP_PKEY_asn1_find(ENGINE **pe, int type)"
  },
  {
    "label": "EVP_PKEY_asn1_find_str()",
    "kind": "Method",
    "detail": "Function (const EVP_PKEY_ASN1_METHOD*)",
    "insertText": "EVP_PKEY_asn1_find_str(ENGINE **pe, const char *str, int len)"
  },
  {
    "label": "EVP_PKEY_asn1_add0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)"
  },
  {
    "label": "EVP_PKEY_asn1_add_alias()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_asn1_add_alias(int to, int from)"
  },
  {
    "label": "EVP_PKEY_asn1_get0_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_asn1_get0_info(int *ppkey_id, int *pkey_base_id, int *ppkey_flags, const char **pinfo, const char **ppem_str, const EVP_PKEY_ASN1_METHOD *ameth)"
  },
  {
    "label": "EVP_PKEY_get0_asn1()",
    "kind": "Method",
    "detail": "Function (const EVP_PKEY_ASN1_METHOD*)",
    "insertText": "EVP_PKEY_get0_asn1(const EVP_PKEY *pkey)"
  },
  {
    "label": "EVP_PKEY_asn1_new()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY_ASN1_METHOD*)",
    "insertText": "EVP_PKEY_asn1_new(int id, int flags, const char *pem_str, const char *info)"
  },
  {
    "label": "EVP_PKEY_asn1_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst, const EVP_PKEY_ASN1_METHOD *src)"
  },
  {
    "label": "EVP_PKEY_asn1_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)"
  },
  {
    "label": "EVP_PKEY_asn1_set_public()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth, int (*pub_decode) (EVP_PKEY *pk, X509_PUBKEY *pub), int (*pub_encode) (X509_PUBKEY *pub, const EVP_PKEY *pk), int (*pub_cmp) (const EVP_PKEY *a, const EVP_PKEY *b), int (*pub_print) (BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx), int (*pkey_size) (const EVP_PKEY *pk), int (*pkey_bits) (const EVP_PKEY *pk))"
  },
  {
    "label": "EVP_PKEY_asn1_set_private()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth, int (*priv_decode) (EVP_PKEY *pk, const PKCS8_PRIV_KEY_INFO *p8inf), int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk), int (*priv_print) (BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx))"
  },
  {
    "label": "EVP_PKEY_asn1_set_param()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth, int (*param_decode) (EVP_PKEY *pkey, const unsigned char **pder, int derlen), int (*param_encode) (const EVP_PKEY *pkey, unsigned char **pder), int (*param_missing) (const EVP_PKEY *pk), int (*param_copy) (EVP_PKEY *to, const EVP_PKEY *from), int (*param_cmp) (const EVP_PKEY *a, const EVP_PKEY *b), int (*param_print) (BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx))"
  },
  {
    "label": "EVP_PKEY_asn1_set_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth, void (*pkey_free) (EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_asn1_set_ctrl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_ctrl) (EVP_PKEY *pkey, int op, long arg1, void *arg2))"
  },
  {
    "label": "EVP_PKEY_asn1_set_item()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth, int (*item_verify) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn, X509_ALGOR *a, ASN1_BIT_STRING *sig, EVP_PKEY *pkey), int (*item_sign) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn, X509_ALGOR *alg1, X509_ALGOR *alg2, ASN1_BIT_STRING *sig))"
  },
  {
    "label": "EVP_PKEY_asn1_set_siginf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD *ameth, int (*siginf_set) (X509_SIG_INFO *siginf, const X509_ALGOR *alg, const ASN1_STRING *sig))"
  },
  {
    "label": "EVP_PKEY_asn1_set_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_check) (const EVP_PKEY *pk))"
  },
  {
    "label": "EVP_PKEY_asn1_set_public_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_pub_check) (const EVP_PKEY *pk))"
  },
  {
    "label": "EVP_PKEY_asn1_set_param_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_param_check) (const EVP_PKEY *pk))"
  },
  {
    "label": "EVP_PKEY_asn1_set_set_priv_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD *ameth, int (*set_priv_key) (EVP_PKEY *pk, const unsigned char *priv, size_t len))"
  },
  {
    "label": "EVP_PKEY_asn1_set_set_pub_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD *ameth, int (*set_pub_key) (EVP_PKEY *pk, const unsigned char *pub, size_t len))"
  },
  {
    "label": "EVP_PKEY_asn1_set_get_priv_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD *ameth, int (*get_priv_key) (const EVP_PKEY *pk, unsigned char *priv, size_t *len))"
  },
  {
    "label": "EVP_PKEY_asn1_set_get_pub_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD *ameth, int (*get_pub_key) (const EVP_PKEY *pk, unsigned char *pub, size_t *len))"
  },
  {
    "label": "EVP_PKEY_asn1_set_security_bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_security_bits) (const EVP_PKEY *pk))"
  },
  {
    "label": "EVP_PKEY_OP_PARAMGEN()",
    "kind": "Method",
    "detail": "Function (# define EVP_PKEY_OP_UNDEFINED 0 # define)",
    "insertText": "EVP_PKEY_OP_PARAMGEN(1<<1) # define EVP_PKEY_OP_KEYGEN (1<<2) # define EVP_PKEY_OP_SIGN (1<<3) # define EVP_PKEY_OP_VERIFY (1<<4) # define EVP_PKEY_OP_VERIFYRECOVER (1<<5) # define EVP_PKEY_OP_SIGNCTX (1<<6) # define EVP_PKEY_OP_VERIFYCTX (1<<7) # define EVP_PKEY_OP_ENCRYPT (1<<8) # define EVP_PKEY_OP_DECRYPT (1<<9) # define EVP_PKEY_OP_DERIVE (1<<10) # define EVP_PKEY_OP_TYPE_SIG \\ (EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY | EVP_PKEY_OP_VERIFYRECOVER \\ | EVP_PKEY_OP_SIGNCTX | EVP_PKEY_OP_VERIFYCTX) # define EVP_PKEY_OP_TYPE_CRYPT \\ (EVP_PKEY_OP_ENCRYPT | EVP_PKEY_OP_DECRYPT) # define EVP_PKEY_OP_TYPE_NOGEN \\ (EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT | EVP_PKEY_OP_DERIVE) # define EVP_PKEY_OP_TYPE_GEN \\ (EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN) # define EVP_PKEY_CTX_set_signature_md(ctx, md) \\ EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG, \\ EVP_PKEY_CTRL_MD, 0, (void *)(md)) # define EVP_PKEY_CTX_get_signature_md(ctx, pmd) \\ EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG, \\ EVP_PKEY_CTRL_GET_MD, 0, (void *)(pmd)) # define EVP_PKEY_CTX_set_mac_key(ctx, key, len) \\ EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_KEYGEN, \\ EVP_PKEY_CTRL_SET_MAC_KEY, len, (void *)(key)) # define EVP_PKEY_CTRL_MD 1 # define EVP_PKEY_CTRL_PEER_KEY 2 # define EVP_PKEY_CTRL_PKCS7_ENCRYPT 3 # define EVP_PKEY_CTRL_PKCS7_DECRYPT 4 # define EVP_PKEY_CTRL_PKCS7_SIGN 5 # define EVP_PKEY_CTRL_SET_MAC_KEY 6 # define EVP_PKEY_CTRL_DIGESTINIT 7 # define EVP_PKEY_CTRL_SET_IV 8 # define EVP_PKEY_CTRL_CMS_ENCRYPT 9 # define EVP_PKEY_CTRL_CMS_DECRYPT 10 # define EVP_PKEY_CTRL_CMS_SIGN 11 # define EVP_PKEY_CTRL_CIPHER 12 # define EVP_PKEY_CTRL_GET_MD 13 # define EVP_PKEY_CTRL_SET_DIGEST_SIZE 14 # define EVP_PKEY_ALG_CTRL 0x1000 # define EVP_PKEY_FLAG_AUTOARGLEN 2 # define EVP_PKEY_FLAG_SIGCTX_CUSTOM 4 const EVP_PKEY_METHOD *EVP_PKEY_meth_find(int type)"
  },
  {
    "label": "EVP_PKEY_meth_new()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY_METHOD*)",
    "insertText": "EVP_PKEY_meth_new(int id, int flags)"
  },
  {
    "label": "EVP_PKEY_meth_get0_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags, const EVP_PKEY_METHOD *meth)"
  },
  {
    "label": "EVP_PKEY_meth_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)"
  },
  {
    "label": "EVP_PKEY_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)"
  },
  {
    "label": "EVP_PKEY_meth_add0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth)"
  },
  {
    "label": "EVP_PKEY_meth_remove()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth)"
  },
  {
    "label": "EVP_PKEY_meth_get_count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EVP_PKEY_meth_get_count(void)"
  },
  {
    "label": "EVP_PKEY_meth_get0()",
    "kind": "Method",
    "detail": "Function (const EVP_PKEY_METHOD*)",
    "insertText": "EVP_PKEY_meth_get0(size_t idx)"
  },
  {
    "label": "EVP_PKEY_CTX_new()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY_CTX*)",
    "insertText": "EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e)"
  },
  {
    "label": "EVP_PKEY_CTX_new_id()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY_CTX*)",
    "insertText": "EVP_PKEY_CTX_new_id(int id, ENGINE *e)"
  },
  {
    "label": "EVP_PKEY_CTX_dup()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY_CTX*)",
    "insertText": "EVP_PKEY_CTX_dup(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype, int cmd, int p1, void *p2)"
  },
  {
    "label": "EVP_PKEY_CTX_ctrl_str()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx, const char *type, const char *value)"
  },
  {
    "label": "EVP_PKEY_CTX_ctrl_uint64()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX *ctx, int keytype, int optype, int cmd, uint64_t value)"
  },
  {
    "label": "EVP_PKEY_CTX_str2ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *str)"
  },
  {
    "label": "EVP_PKEY_CTX_hex2ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *hex)"
  },
  {
    "label": "EVP_PKEY_CTX_md()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md)"
  },
  {
    "label": "EVP_PKEY_CTX_get_operation()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_set0_keygen_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen)"
  },
  {
    "label": "EVP_PKEY_new_mac_key()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "EVP_PKEY_new_mac_key(int type, ENGINE *e, const unsigned char *key, int keylen)"
  },
  {
    "label": "EVP_PKEY_new_raw_private_key()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "EVP_PKEY_new_raw_private_key(int type, ENGINE *e, const unsigned char *priv, size_t len)"
  },
  {
    "label": "EVP_PKEY_new_raw_public_key()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "EVP_PKEY_new_raw_public_key(int type, ENGINE *e, const unsigned char *pub, size_t len)"
  },
  {
    "label": "EVP_PKEY_get_raw_private_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv, size_t *len)"
  },
  {
    "label": "EVP_PKEY_get_raw_public_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub, size_t *len)"
  },
  {
    "label": "EVP_PKEY_new_CMAC_key()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "EVP_PKEY_new_CMAC_key(ENGINE *e, const unsigned char *priv, size_t len, const EVP_CIPHER *cipher)"
  },
  {
    "label": "EVP_PKEY_CTX_set_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data)"
  },
  {
    "label": "EVP_PKEY_CTX_get_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EVP_PKEY_CTX_get_data(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_get0_pkey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_get0_peerkey()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_set_app_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data)"
  },
  {
    "label": "EVP_PKEY_CTX_get_app_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_sign_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)"
  },
  {
    "label": "EVP_PKEY_verify_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)"
  },
  {
    "label": "EVP_PKEY_verify_recover_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_verify_recover()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx, unsigned char *rout, size_t *routlen, const unsigned char *sig, size_t siglen)"
  },
  {
    "label": "EVP_PKEY_encrypt_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_encrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)"
  },
  {
    "label": "EVP_PKEY_decrypt_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_decrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)"
  },
  {
    "label": "EVP_PKEY_derive_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_derive_set_peer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)"
  },
  {
    "label": "EVP_PKEY_derive()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)"
  },
  {
    "label": "EVP_PKEY_gen_cb()",
    "kind": "Method",
    "detail": "Function (typedef int)",
    "insertText": "EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_paramgen_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_paramgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)"
  },
  {
    "label": "EVP_PKEY_keygen_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_keygen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)"
  },
  {
    "label": "EVP_PKEY_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_check(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_public_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_public_check(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_param_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_param_check(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_set_cb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)"
  },
  {
    "label": "EVP_PKEY_CTX_get_cb()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY_gen_cb*)",
    "insertText": "EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx)"
  },
  {
    "label": "EVP_PKEY_CTX_get_keygen_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)"
  },
  {
    "label": "EVP_PKEY_meth_set_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth, int (*init) (EVP_PKEY_CTX *ctx))"
  },
  {
    "label": "EVP_PKEY_meth_set_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth, int (*copy) (EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src))"
  },
  {
    "label": "EVP_PKEY_meth_set_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth, void (*cleanup) (EVP_PKEY_CTX *ctx))"
  },
  {
    "label": "EVP_PKEY_meth_set_paramgen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth, int (*paramgen_init) (EVP_PKEY_CTX *ctx), int (*paramgen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_set_keygen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth, int (*keygen_init) (EVP_PKEY_CTX *ctx), int (*keygen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_set_sign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth, int (*sign_init) (EVP_PKEY_CTX *ctx), int (*sign) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_set_verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth, int (*verify_init) (EVP_PKEY_CTX *ctx), int (*verify) (EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_set_verify_recover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth, int (*verify_recover_init) (EVP_PKEY_CTX *ctx), int (*verify_recover) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_set_signctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth, int (*signctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*signctx) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx))"
  },
  {
    "label": "EVP_PKEY_meth_set_verifyctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth, int (*verifyctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*verifyctx) (EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen, EVP_MD_CTX *mctx))"
  },
  {
    "label": "EVP_PKEY_meth_set_encrypt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth, int (*encrypt_init) (EVP_PKEY_CTX *ctx), int (*encryptfn) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen))"
  },
  {
    "label": "EVP_PKEY_meth_set_decrypt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth, int (*decrypt_init) (EVP_PKEY_CTX *ctx), int (*decrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen))"
  },
  {
    "label": "EVP_PKEY_meth_set_derive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth, int (*derive_init) (EVP_PKEY_CTX *ctx), int (*derive) (EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen))"
  },
  {
    "label": "EVP_PKEY_meth_set_ctrl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth, int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1, void *p2), int (*ctrl_str) (EVP_PKEY_CTX *ctx, const char *type, const char *value))"
  },
  {
    "label": "EVP_PKEY_meth_set_digestsign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_digestsign(EVP_PKEY_METHOD *pmeth, int (*digestsign) (EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_set_digestverify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_digestverify(EVP_PKEY_METHOD *pmeth, int (*digestverify) (EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_set_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_check(EVP_PKEY_METHOD *pmeth, int (*check) (EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_set_public_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD *pmeth, int (*check) (EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_set_param_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD *pmeth, int (*check) (EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_set_digest_custom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD *pmeth, int (*digest_custom) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx))"
  },
  {
    "label": "EVP_PKEY_meth_get_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD *pmeth, int (**pinit) (EVP_PKEY_CTX *ctx))"
  },
  {
    "label": "EVP_PKEY_meth_get_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD *pmeth, int (**pcopy) (EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src))"
  },
  {
    "label": "EVP_PKEY_meth_get_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD *pmeth, void (**pcleanup) (EVP_PKEY_CTX *ctx))"
  },
  {
    "label": "EVP_PKEY_meth_get_paramgen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD *pmeth, int (**pparamgen_init) (EVP_PKEY_CTX *ctx), int (**pparamgen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_get_keygen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD *pmeth, int (**pkeygen_init) (EVP_PKEY_CTX *ctx), int (**pkeygen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_get_sign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD *pmeth, int (**psign_init) (EVP_PKEY_CTX *ctx), int (**psign) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_get_verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD *pmeth, int (**pverify_init) (EVP_PKEY_CTX *ctx), int (**pverify) (EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_get_verify_recover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth, int (**pverify_recover_init) (EVP_PKEY_CTX *ctx), int (**pverify_recover) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_get_signctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD *pmeth, int (**psignctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (**psignctx) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx))"
  },
  {
    "label": "EVP_PKEY_meth_get_verifyctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD *pmeth, int (**pverifyctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (**pverifyctx) (EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen, EVP_MD_CTX *mctx))"
  },
  {
    "label": "EVP_PKEY_meth_get_encrypt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD *pmeth, int (**pencrypt_init) (EVP_PKEY_CTX *ctx), int (**pencryptfn) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen))"
  },
  {
    "label": "EVP_PKEY_meth_get_decrypt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD *pmeth, int (**pdecrypt_init) (EVP_PKEY_CTX *ctx), int (**pdecrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen))"
  },
  {
    "label": "EVP_PKEY_meth_get_derive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD *pmeth, int (**pderive_init) (EVP_PKEY_CTX *ctx), int (**pderive) (EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen))"
  },
  {
    "label": "EVP_PKEY_meth_get_ctrl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD *pmeth, int (**pctrl) (EVP_PKEY_CTX *ctx, int type, int p1, void *p2), int (**pctrl_str) (EVP_PKEY_CTX *ctx, const char *type, const char *value))"
  },
  {
    "label": "EVP_PKEY_meth_get_digestsign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_digestsign(EVP_PKEY_METHOD *pmeth, int (**digestsign) (EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_get_digestverify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_digestverify(EVP_PKEY_METHOD *pmeth, int (**digestverify) (EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen))"
  },
  {
    "label": "EVP_PKEY_meth_get_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD *pmeth, int (**pcheck) (EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_get_public_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD *pmeth, int (**pcheck) (EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_get_param_check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD *pmeth, int (**pcheck) (EVP_PKEY *pkey))"
  },
  {
    "label": "EVP_PKEY_meth_get_digest_custom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_PKEY_meth_get_digest_custom(EVP_PKEY_METHOD *pmeth, int (**pdigest_custom) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx))"
  },
  {
    "label": "EVP_add_alg_module()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EVP_add_alg_module(void)"
  }
]