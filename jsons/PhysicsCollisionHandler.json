[
  {
    "label": "FCollisionNotifyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionNotifyInfo"
  },
  {
    "label": "FRigidBodyCollisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigidBodyCollisionInfo"
  },
  {
    "label": "UPhysicsCollisionHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsCollisionHandler"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Engine / World . h \" # include \" PhysicsCollisionHandler . generated . h \" struct FCollisionNotifyInfo ; struct FRigidBodyCollisionInfo ;)",
    "insertText": "UCLASS(hidecategories=(Object), Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Impact)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "HandlePhysicsCollisions_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandlePhysicsCollisions_AssumesLocked(TArray<FCollisionNotifyInfo>& PendingCollisionNotifies)"
  },
  {
    "label": "DefaultHandleCollision_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultHandleCollision_AssumesLocked(const FRigidBodyCollisionInfo& MyInfo, const FRigidBodyCollisionInfo& OtherInfo, const FCollisionImpactData& RigidCollisionData)"
  },
  {
    "label": "InitCollisionHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCollisionHandler()"
  }
]