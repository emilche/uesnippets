[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "SCurveEditorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorPanel"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveTableEditorColumnHeaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveTableEditorColumnHeaderData"
  },
  {
    "label": "FCurveTableEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveTableEditor"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "SCurveEditorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorTree"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CurveEditorTypes . h \" # include \" CurveTableEditorUtils . h \" # include \" Curves / RealCurve . h \" # include \" Delegates / Delegate . h \" # include \" EditorUndoClient . h \" # include \" Framework / Docking / TabManager . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" ICurveTableEditor . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Toolkits / IToolkit . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / SListView . h \" class FCurveEditor ; class FExtender ; class SCurveEditorPanel ; class SDockTab ; class SWidget ; class UCurveTable ; class UObject ; enum class ECurveTableViewMode : int32 { Grid,CurveTable,} ; struct FCurveTableEditorColumnHeaderData ; typedef TSharedPtr<FCurveTableEditorColumnHeaderData> FCurveTableEditorColumnHeaderDataPtr ; class FCurveTableEditor : public ICurveTableEditor,public FCurveTableEditorUtils::INotifyOnCurveTableChanged,public FEditorUndoClient { public : void)",
    "insertText": "RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "UnregisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "InitCurveTableEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCurveTableEditor(const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, UCurveTable* Table)"
  },
  {
    "label": "FCurveTableEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCurveTableEditor()"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "PreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreChange(const UCurveTable* Changed, FCurveTableEditorUtils::ECurveTableChangeInfo Info)"
  },
  {
    "label": "PostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostChange(const UCurveTable* Changed, FCurveTableEditorUtils::ECurveTableChangeInfo Info)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "GetCurveTable()",
    "kind": "Method",
    "detail": "Function (UCurveTable*)",
    "insertText": "GetCurveTable()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetCurveEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveEditor>)",
    "insertText": "GetCurveEditor()"
  },
  {
    "label": "SpawnTab_CurveTable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_CurveTable(const FSpawnTabArgs& Args)"
  },
  {
    "label": "GetViewMode()",
    "kind": "Method",
    "detail": "Function (ECurveTableViewMode)",
    "insertText": "GetViewMode()"
  },
  {
    "label": "OnOpenCurveMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnOpenCurveMenu()"
  },
  {
    "label": "OnDeleteCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteCurves()"
  },
  {
    "label": "OnRenameCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameCurve()"
  },
  {
    "label": "OnDeleteKeyColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteKeyColumn(float KeyTime)"
  },
  {
    "label": "VerifyValidRetime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyValidRetime(const FText& InText, FText& OutErrorMessage, float OriginalTime)"
  },
  {
    "label": "HandleRetimeCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRetimeCommitted(const FText& InText, ETextCommit::Type CommitInfo, float OriginalKeyTime)"
  },
  {
    "label": "InitCurveTableLayout()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<FTabManager::FLayout>)",
    "insertText": "InitCurveTableLayout()"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendMenu()"
  },
  {
    "label": "ExtendToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolbar()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "RefreshCachedCurveTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCachedCurveTable()"
  },
  {
    "label": "MakeToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeToolbar(TSharedRef<SCurveEditorPanel>& CurveEditorPanel)"
  },
  {
    "label": "OnCurveTreeViewScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveTreeViewScrolled(double InScrollOffset)"
  },
  {
    "label": "OnTableViewScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTableViewScrolled(double InScrollOffset)"
  },
  {
    "label": "OnTableViewSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTableViewSelectionChanged(FCurveEditorTreeItemID ItemID, ESelectInfo::Type)"
  },
  {
    "label": "OnPostReimport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostReimport(UObject* InObject, bool)"
  },
  {
    "label": "GetTableViewControlsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTableViewControlsVisibility()"
  },
  {
    "label": "GetCurveViewControlsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCurveViewControlsVisibility()"
  },
  {
    "label": "OnAddCurveClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddCurveClicked()"
  },
  {
    "label": "OnAddNewKeyColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddNewKeyColumn()"
  },
  {
    "label": "AddNewKeyColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewKeyColumn(float NewKeyTime)"
  },
  {
    "label": "ToggleViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleViewMode()"
  },
  {
    "label": "IsCurveViewChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurveViewChecked()"
  },
  {
    "label": "OnRequestCurveRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestCurveRename(FCurveEditorTreeItemID TreeItemId)"
  },
  {
    "label": "ShouldCreateDefaultStandaloneMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateDefaultStandaloneMenu()"
  },
  {
    "label": "RefreshTableRows()",
    "kind": "Method",
    "detail": "Function (TArray<FCurveTableEditorColumnHeaderDataPtr> AvailableColumns ; TSharedPtr<SHeaderRow> ColumnNamesHeaderRow ; TSharedPtr<SListView<FCurveEditorTreeItemID>> TableView ; TSharedPtr<FExtender> MenuExtender ; TSharedPtr<FExtender> ToolbarExtender ; const FName CurveTableTabId ; ECurveTableViewMode ViewMode ; TSharedPtr<FCurveEditor> CurveEditor ; TSharedPtr<class SCurveEditorTree> CurveEditorTree ; bool bUpdatingTableViewSelection ; void)",
    "insertText": "RefreshTableRows()"
  },
  {
    "label": "RefreshTableRowsSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTableRowsSelection()"
  }
]