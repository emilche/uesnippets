[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "SCurveEditorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorPanel"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveTableEditorColumnHeaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveTableEditorColumnHeaderData"
  },
  {
    "label": "FCurveTableEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveTableEditor"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "SCurveEditorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorTree"
  },
  {
    "label": "InitCurveTableEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCurveTableEditor( const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, UCurveTable* Table )"
  },
  {
    "label": "HandlePostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePostChange()"
  },
  {
    "label": "SpawnTab_CurveTable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_CurveTable( const FSpawnTabArgs& Args )"
  },
  {
    "label": "HandleCurveRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCurveRename(FCurveEditorTreeItemID& TreeID, FName& OldCurveName, FName& NewCurveName)"
  },
  {
    "label": "OnOpenCurveMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnOpenCurveMenu()"
  },
  {
    "label": "OnDeleteCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteCurves()"
  },
  {
    "label": "OnRenameCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameCurve()"
  },
  {
    "label": "OnDeleteKeyColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteKeyColumn(float KeyTime)"
  },
  {
    "label": "VerifyValidRetime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyValidRetime(const FText& InText, FText& OutErrorMessage, float OriginalTime)"
  },
  {
    "label": "HandleRetimeCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRetimeCommitted(const FText& InText, ETextCommit::Type CommitInfo, float OriginalKeyTime)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendMenu()"
  },
  {
    "label": "ExtendToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolbar()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "RefreshCachedCurveTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCachedCurveTable()"
  },
  {
    "label": "MakeToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeToolbar(TSharedRef<SCurveEditorPanel>& CurveEditorPanel)"
  },
  {
    "label": "OnCurveTreeViewScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveTreeViewScrolled(double InScrollOffset)"
  },
  {
    "label": "OnTableViewScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTableViewScrolled(double InScrollOffset)"
  },
  {
    "label": "OnTableViewSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTableViewSelectionChanged(FCurveEditorTreeItemID ItemID, ESelectInfo::Type)"
  },
  {
    "label": "OnPostReimport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostReimport(UObject* InObject, bool)"
  },
  {
    "label": "OnAddCurveClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddCurveClicked()"
  },
  {
    "label": "OnAddNewKeyColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddNewKeyColumn()"
  },
  {
    "label": "AddNewKeyColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewKeyColumn(float NewKeyTime)"
  },
  {
    "label": "ToggleViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleViewMode()"
  },
  {
    "label": "OnRequestCurveRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestCurveRename(FCurveEditorTreeItemID TreeItemId)"
  },
  {
    "label": "GenerateHeaderColumnForKey()",
    "kind": "Method",
    "detail": "Function (SHeaderRow::FColumn::FArguments)",
    "insertText": "GenerateHeaderColumnForKey(FCurveTableEditorColumnHeaderDataPtr ColumnData)"
  },
  {
    "label": "RefreshTableRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTableRows()"
  },
  {
    "label": "RefreshTableRowsSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTableRowsSelection()"
  }
]