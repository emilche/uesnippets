[
  {
    "label": "Barrier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Barrier"
  },
  {
    "label": "Barrier()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_BARRIER_H_ # define ABSL_SYNCHRONIZATION_BARRIER_H_ # include \" absl / base / thread_annotations . h \" # include \" absl / synchronization / mutex . h \" namespace absl { ABSL_NAMESPACE_BEGIN class Barrier { public :)",
    "insertText": "Barrier(int num_threads) : num_to_block_(num_threads), num_to_exit_(num_threads)"
  },
  {
    "label": "Barrier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Barrier(const Barrier&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Barrier&)",
    "insertText": "operator(const Barrier&)"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Block()"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex lock_ ; int num_to_block_)",
    "insertText": "ABSL_GUARDED_BY(lock_)"
  }
]