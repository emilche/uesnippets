[
  {
    "label": "FOpenGLDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLDynamicRHI"
  },
  {
    "label": "FResourceBulkDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceBulkDataInterface"
  },
  {
    "label": "FOpenGLResourceBinder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLResourceBinder"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "EOpenGLCurrentContext",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOpenGLCurrentContext"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TOpenGLResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOpenGLResourceTraits"
  },
  {
    "label": "FOpenGLBufferedGPUTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLBufferedGPUTiming"
  },
  {
    "label": "FOpenGLDisjointTimeStampQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLDisjointTimeStampQuery"
  },
  {
    "label": "FOpenGLEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLEventNode"
  },
  {
    "label": "FOpenGLEventNodeFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLEventNodeFrame"
  },
  {
    "label": "FOpenGLGPUProfiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLGPUProfiler"
  },
  {
    "label": "OPENGLDRV_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENGLDRV_API"
  },
  {
    "label": "FOpenGLViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLViewport"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICustomPresent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICustomPresent"
  },
  {
    "label": "FTextureLockTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureLockTracker"
  },
  {
    "label": "FLockParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLockParams"
  },
  {
    "label": "FPlatformOpenGLDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLDevice"
  },
  {
    "label": "ShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderType"
  },
  {
    "label": "FOpenGLDynamicRHIModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLDynamicRHIModule"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" IOpenGLDynamicRHI . h \" # include \" RHIDefinitions . h \" # include \" RHI . h \" # include \" GPUProfiler . h \" # include \" RenderResource . h \" # include \" Templates / EnableIf . h \" # include \" BoundShaderStateHistory . h \" # include \" OpenGLState . h \" # include \" OpenGLPlatform . h \" # include \" OpenGLUtil . h \" # include \" RenderUtils . h \" # ifndef GL_TEXTURE_EXTERNAL_OES # define GL_TEXTURE_EXTERNAL_OES 0 x8D65 # endif # define FOpenGLCachedUniformBuffer_Invalid 0 xFFFFFFFF class FOpenGLDynamicRHI ; class FResourceBulkDataInterface ; struct FOpenGLResourceBinder ; struct Rect ; enum EOpenGLCurrentContext : int8 ; template<class T> struct TOpenGLResourceTraits ; #)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0)"
  },
  {
    "label": "FOpenGLBufferedGPUTiming()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FOpenGLBufferedGPUTiming(int32 BufferSize)"
  },
  {
    "label": "StartTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTiming()"
  },
  {
    "label": "EndTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTiming()"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTiming(bool bGetCurrentResultsAndBlock = false)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "PlatformStaticInitialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PlatformStaticInitialize(void* UserData)"
  },
  {
    "label": "FOpenGLDisjointTimeStampQuery()",
    "kind": "Method",
    "detail": "Function (const int32 BufferSize ; int32 CurrentTimestamp = - 1 ; int32 NumIssuedTimestamps = 0 ; TArray<FOpenGLRenderQuery*> StartTimestamps ; TArray<FOpenGLRenderQuery*> EndTimestamps ; bool bIsTiming = false ; } ; class FOpenGLDisjointTimeStampQuery { public :)",
    "insertText": "FOpenGLDisjointTimeStampQuery() : DisjointQuery(new FOpenGLRenderQuery { FOpenGLRenderQuery::EType::Disjoint })"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartTracking()"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTracking()"
  },
  {
    "label": "IsResultValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResultValid()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResult(uint64* OutResult)"
  },
  {
    "label": "GetTimingFrequency()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTimingFrequency()"
  },
  {
    "label": "SupportsDisjointTimeQueries()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_SHIPPING return false ; # else return)",
    "insertText": "SupportsDisjointTimeQueries()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "FOpenGLEventNode()",
    "kind": "Method",
    "detail": "Function (delete DisjointQuery ; DisjointQuery = nullptr ; } private : bool bIsResultValid = false ; FOpenGLRenderQuery* DisjointQuery ; } ; class FOpenGLEventNode : public FGPUProfilerEventNode { public :)",
    "insertText": "FOpenGLEventNode(const TCHAR* InName, FGPUProfilerEventNode* InParent) : FGPUProfilerEventNode(InName, InParent) , Timing(1)"
  },
  {
    "label": "FOpenGLEventNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOpenGLEventNode()"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTiming()"
  },
  {
    "label": "StopTiming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopTiming()"
  },
  {
    "label": "FOpenGLEventNodeFrame()",
    "kind": "Method",
    "detail": "Function (} FOpenGLBufferedGPUTiming Timing ; } ; class FOpenGLEventNodeFrame : public FGPUProfilerEventNodeFrame { public :)",
    "insertText": "FOpenGLEventNodeFrame() : RootEventTiming(1) , DisjointQuery()"
  },
  {
    "label": "FOpenGLEventNodeFrame()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOpenGLEventNodeFrame()"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "GetRootTimingResults()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRootTimingResults()"
  },
  {
    "label": "LogDisjointQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogDisjointQuery()"
  },
  {
    "label": "FOpenGLGPUProfiler()",
    "kind": "Method",
    "detail": "Function (FOpenGLBufferedGPUTiming RootEventTiming ; FOpenGLDisjointTimeStampQuery DisjointQuery ; } ; struct FOpenGLGPUProfiler : public FGPUProfiler { FOpenGLBufferedGPUTiming FrameTiming ; const int MAX_GPUFRAMEQUERIES = 4 ; FOpenGLDisjointTimeStampQuery DisjointGPUFrameTimeQuery [ MAX_GPUFRAMEQUERIES ] ; int32 CurrentGPUFrameQueryIndex = 0 ; int32 NestedFrameCount = 0 ; uint32 ExternalGPUTime = 0 ; TIndirectArray<FOpenGLEventNodeFrame> GPUHitchEventNodeFrames ;)",
    "insertText": "FOpenGLGPUProfiler() : FrameTiming(4)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "CreateEventNode()",
    "kind": "Method",
    "detail": "Function (} FGPUProfilerEventNode*)",
    "insertText": "CreateEventNode(const TCHAR* InName, FGPUProfilerEventNode* InParent)"
  },
  {
    "label": "FOpenGLEventNode()",
    "kind": "Method",
    "detail": "Function (FOpenGLEventNode* EventNode = new)",
    "insertText": "FOpenGLEventNode(InName, InParent)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; # endif PRAGMA_DISABLE_DEPRECATION_WARNINGS class FOpenGLDynamicRHI final : public IOpenGLDynamicRHI,public IRHICommandContextPSOFallback { FOpenGLDynamicRHI* Singleton = nullptr ; public : FOpenGLDynamicRHI&)",
    "insertText": "Get()"
  },
  {
    "label": "FOpenGLDynamicRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenGLDynamicRHI()"
  },
  {
    "label": "RHIGetGLMajorVersion()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RHIGetGLMajorVersion()"
  },
  {
    "label": "RHIGetGLMinorVersion()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RHIGetGLMinorVersion()"
  },
  {
    "label": "RHISupportsFramebufferSRGBEnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHISupportsFramebufferSRGBEnable()"
  },
  {
    "label": "RHICreateTexture2DFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture2DFromResource(EPixelFormat Format, uint32 SizeX, uint32 SizeY, uint32 NumMips, uint32 NumSamples, uint32 NumSamplesTileMem, const FClearValueBinding& ClearValueBinding, GLuint Resource, ETextureCreateFlags Flags)"
  },
  {
    "label": "RHICreateTexture2DArrayFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture2DArrayFromResource(EPixelFormat Format, uint32 SizeX, uint32 SizeY, uint32 ArraySize, uint32 NumMips, uint32 NumSamples, uint32 NumSamplesTileMem, const FClearValueBinding& ClearValueBinding, GLuint Resource, ETextureCreateFlags Flags)"
  },
  {
    "label": "RHICreateTextureCubeFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTextureCubeFromResource(EPixelFormat Format, uint32 Size, bool bArray, uint32 ArraySize, uint32 NumMips, uint32 NumSamples, uint32 NumSamplesTileMem, const FClearValueBinding& ClearValueBinding, GLuint Resource, ETextureCreateFlags Flags)"
  },
  {
    "label": "RHIGetResource()",
    "kind": "Method",
    "detail": "Function (GLuint)",
    "insertText": "RHIGetResource(FRHITexture* InTexture)"
  },
  {
    "label": "RHIIsValidTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIIsValidTexture(GLuint InTexture)"
  },
  {
    "label": "RHISetExternalGPUTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetExternalGPUTime(uint32 InExternalGPUTime)"
  },
  {
    "label": "RHIGetEGLDisplay()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_ANDROID EGLDisplay)",
    "insertText": "RHIGetEGLDisplay()"
  },
  {
    "label": "RHIGetEGLSurface()",
    "kind": "Method",
    "detail": "Function (EGLSurface)",
    "insertText": "RHIGetEGLSurface()"
  },
  {
    "label": "RHIGetEGLConfig()",
    "kind": "Method",
    "detail": "Function (EGLConfig)",
    "insertText": "RHIGetEGLConfig()"
  },
  {
    "label": "RHIGetEGLContext()",
    "kind": "Method",
    "detail": "Function (EGLContext)",
    "insertText": "RHIGetEGLContext()"
  },
  {
    "label": "RHIGetEGLNativeWindow()",
    "kind": "Method",
    "detail": "Function (ANativeWindow*)",
    "insertText": "RHIGetEGLNativeWindow()"
  },
  {
    "label": "RHIEGLSupportsNoErrorContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIEGLSupportsNoErrorContext()"
  },
  {
    "label": "RHIInitEGLInstanceGLES2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIInitEGLInstanceGLES2()"
  },
  {
    "label": "RHIInitEGLBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIInitEGLBackBuffer()"
  },
  {
    "label": "RHIEGLSetCurrentRenderingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEGLSetCurrentRenderingContext()"
  },
  {
    "label": "RHIEGLTerminateContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEGLTerminateContext()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} template<TRHIType> auto*)",
    "insertText": "ResourceCast(TRHIType* Resource)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} FOpenGLTexture*)",
    "insertText": "ResourceCast(FRHITexture* TextureRHI)"
  },
  {
    "label": "BindUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BindUniformBuffer(EShaderFrequency ShaderFrequency, uint32 BufferIndex, FRHIUniformBuffer* BufferRHI)"
  },
  {
    "label": "SetShaderParametersCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersCommon(EShaderFrequency ShaderFrequency, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters)"
  },
  {
    "label": "SetShaderUnbindsCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderUnbindsCommon(EShaderFrequency ShaderFrequency, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHICreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (FRasterizerStateRHIRef)",
    "insertText": "RHICreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateRHIRef)",
    "insertText": "RHICreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateBlendState()",
    "kind": "Method",
    "detail": "Function (FBlendStateRHIRef)",
    "insertText": "RHICreateBlendState(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationRHIRef)",
    "insertText": "RHICreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "RHICreatePixelShader()",
    "kind": "Method",
    "detail": "Function (FPixelShaderRHIRef)",
    "insertText": "RHICreatePixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateVertexShader()",
    "kind": "Method",
    "detail": "Function (FVertexShaderRHIRef)",
    "insertText": "RHICreateVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (FGeometryShaderRHIRef)",
    "insertText": "RHICreateGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateComputeShader()",
    "kind": "Method",
    "detail": "Function (FComputeShaderRHIRef)",
    "insertText": "RHICreateComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef)",
    "insertText": "RHICreateShaderResourceView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (FUnorderedAccessViewRHIRef)",
    "insertText": "RHICreateUnorderedAccessView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FUniformBufferRHIRef)",
    "insertText": "RHICreateUniformBuffer(const void* Contents, const FRHIUniformBufferLayout* Layout, EUniformBufferUsage Usage, EUniformBufferValidation Validation)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateUniformBuffer(FRHICommandListBase& RHICmdList, FRHIUniformBuffer* UniformBufferRHI, const void* Contents)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "RHICreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& Desc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReplaceResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReplaceResources(FRHICommandListBase& RHICmdList, TArray<FRHIResourceReplaceInfo>&& ReplaceInfos)"
  },
  {
    "label": "LockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 Size, EResourceLockMode LockMode)"
  },
  {
    "label": "UnlockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(FRHITextureDesc const& Desc, uint32 FirstMipIndex)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetTextureMemoryStats(FTextureMemoryStats& OutStats)"
  },
  {
    "label": "RHIGetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetTextureMemoryVisualizeData(FColor* TextureData,int32 SizeX,int32 SizeY,int32 Pitch,int32 PixelSize)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture(FRHICommandListBase& RHICmdList, const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncCreateTexture2D(uint32 SizeX, uint32 SizeY, uint8 Format, uint32 NumMips, ETextureCreateFlags Flags, ERHIAccess InResourceState, void** InitialMipData, uint32 NumInitialMips, const TCHAR* DebugName, FGraphEventRef& OutCompletionEvent)"
  },
  {
    "label": "RHIGenerateMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGenerateMips(FRHITexture* Texture)"
  },
  {
    "label": "RHIComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIComputeMemorySize(FRHITexture* TextureRHI)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIFinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHIFinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHICancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHILockTexture2D()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture,FIntRect Rect,TArray<FColor>& OutData,FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture, FIntRect Rect, TArray<FLinearColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,TArray<FFloat16Color>& OutData,ECubeFace CubeFace,int32 ArrayIndex,int32 MipIndex)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,FIntPoint ZMinMax,TArray<FFloat16Color>& OutData)"
  },
  {
    "label": "RHICreateRenderQuery()",
    "kind": "Method",
    "detail": "Function (FRenderQueryRHIRef)",
    "insertText": "RHICreateRenderQuery(ERenderQueryType QueryType)"
  },
  {
    "label": "RHIGetRenderQueryResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetRenderQueryResult(FRHIRenderQuery* RenderQuery, uint64& OutResult, bool bWait, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIAliasTextureResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAliasTextureResources(FTextureRHIRef& DestTextureRHI, FTextureRHIRef& SrcTextureRHI)"
  },
  {
    "label": "RHICreateAliasedTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateAliasedTexture(FTextureRHIRef& SourceTexture)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIAcquireThreadOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAcquireThreadOwnership()"
  },
  {
    "label": "RHIReleaseThreadOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReleaseThreadOwnership()"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIGetGPUFrameCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetGPUFrameCycles(uint32 GPUIndex = 0)"
  },
  {
    "label": "RHICreateViewport()",
    "kind": "Method",
    "detail": "Function (FViewportRHIRef)",
    "insertText": "RHICreateViewport(void* WindowHandle, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen)"
  },
  {
    "label": "RHIPreferredPixelFormatHint()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "RHIPreferredPixelFormatHint(EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHITick(float DeltaTime)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "RHIGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetSupportedResolution(uint32& Width, uint32& Height)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIGetNativeInstance()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeInstance()"
  },
  {
    "label": "RHIGetDefaultContext()",
    "kind": "Method",
    "detail": "Function (class IRHICommandContext*)",
    "insertText": "RHIGetDefaultContext()"
  },
  {
    "label": "RHIGetCommandContext()",
    "kind": "Method",
    "detail": "Function (IRHIComputeContext*)",
    "insertText": "RHIGetCommandContext(ERHIPipeline Pipeline, FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIFinalizeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFinalizeContext(FRHIFinalizeContextArgs&& Args, TRHIPipelineArray<IRHIPlatformCommandList*>& Output)"
  },
  {
    "label": "RHISubmitCommandLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISubmitCommandLists(FRHISubmitCommandListsArgs&& Args)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "RHINextSubpass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHINextSubpass()"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHISetComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetComputeShader(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHIBeginRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "RHIEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndFrame(const FRHIEndFrameArgs& Args)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "RHISetRasterizerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetRasterizerState(FRHIRasterizerState* NewState)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetBoundShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBoundShaderState(FRHIBoundShaderState* BoundShaderState)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStaticUniformBuffers(const FUniformBufferStaticBindings& InUniformBuffers)"
  },
  {
    "label": "RHISetStaticUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStaticUniformBuffer(FUniformBufferStaticSlot Slot, FRHIUniformBuffer* Buffer)"
  },
  {
    "label": "RHISetUniformBufferDynamicOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetUniformBufferDynamicOffset(FUniformBufferStaticSlot Slot, uint32 Offset)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUnbinds(FRHIComputeShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUnbinds(FRHIGraphicsShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetDepthStencilState(FRHIDepthStencilState* NewState, uint32 StencilRef)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "RHISetBlendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBlendState(FRHIBlendState* NewState, const FLinearColor& BlendFactor)"
  },
  {
    "label": "RHISetBlendFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBlendFactor(const FLinearColor& BlendFactor)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRenderTargets(uint32 NumSimultaneousRenderTargets, const FRHIRenderTargetView* NewRenderTargets, const FRHIDepthRenderTargetView* NewDepthStencilTarget)"
  },
  {
    "label": "SetRenderTargetsAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetsAndClear(const FRHISetRenderTargetsInfo& RenderTargetsInfo)"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIEnableDepthBoundsTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEnableDepthBoundsTest(bool bEnable)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (# if WITH_RHI_BREADCRUMBS void)",
    "insertText": "RHIBeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIDiscardRenderTargets()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHIDiscardRenderTargets(bool Depth,bool Stencil,uint32 ColorBitMask)"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTexture, FRHITexture* DestTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DestBuffer, uint64 DstOffset, FRHIBuffer* SourceBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "RHICopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyToStagingBuffer(FRHIBuffer* SourceBufferRHI, FRHIStagingBuffer* DestinationStagingBufferRHI, uint32 InOffset, uint32 InNumBytes)"
  },
  {
    "label": "RHIWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIWriteGPUFence(FRHIGPUFence* FenceRHI)"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "LockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockStagingBuffer_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "UnlockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockStagingBuffer_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "RHIMapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMapStagingSurface_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 GPUIndex, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight)"
  },
  {
    "label": "RHIUnmapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnmapStagingSurface_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 GPUIndex)"
  },
  {
    "label": "RHICreateStagingBuffer()",
    "kind": "Method",
    "detail": "Function (FStagingBufferRHIRef)",
    "insertText": "RHICreateStagingBuffer()"
  },
  {
    "label": "RHICreateGPUFence()",
    "kind": "Method",
    "detail": "Function (FGPUFenceRHIRef)",
    "insertText": "RHICreateGPUFence(const FName &Name)"
  },
  {
    "label": "RHIGetMinimumAlignmentForBufferBackedSRV()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIGetMinimumAlignmentForBufferBackedSRV(EPixelFormat Format)"
  },
  {
    "label": "RHIComputeStatePrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIComputeStatePrecachePSOHash(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIComputePrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIComputePrecachePSOHash(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIMatchPrecachePSOInitializers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIMatchPrecachePSOInitializers(const FGraphicsPipelineStateInitializer& LHS, const FGraphicsPipelineStateInitializer& RHS)"
  },
  {
    "label": "PurgeFramebufferFromCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeFramebufferFromCaches(GLuint Framebuffer)"
  },
  {
    "label": "OnBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBufferDeletion(GLuint VertexBufferResource)"
  },
  {
    "label": "OnPixelBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPixelBufferDeletion(GLuint PixelBufferResource)"
  },
  {
    "label": "OnUniformBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUniformBufferDeletion(GLuint UniformBufferResource,uint32 AllocatedSize,bool bStreamDraw)"
  },
  {
    "label": "OnProgramDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProgramDeletion(GLint ProgramResource)"
  },
  {
    "label": "InvalidateTextureResourceInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateTextureResourceInCache(GLuint Resource)"
  },
  {
    "label": "InvalidateUAVResourceInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateUAVResourceInCache(GLuint Resource)"
  },
  {
    "label": "bSameTarget()",
    "kind": "Method",
    "detail": "Function (FTextureStage& TextureState = ContextState . Textures [ TextureIndex ] ; const bool)",
    "insertText": "bSameTarget(TextureState.Target == Target)"
  },
  {
    "label": "bSameResource()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bSameResource(TextureState.Resource == Resource)"
  },
  {
    "label": "CachedSetupTextureStageInner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CachedSetupTextureStageInner(FOpenGLContextState& ContextState, GLint TextureIndex, GLenum Target, GLuint Resource, GLint BaseMip, GLint NumMips)"
  },
  {
    "label": "CachedSetupUAVStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedSetupUAVStage(FOpenGLContextState& ContextState, GLint UAVIndex, GLenum Format, GLuint Resource, bool bLayered, GLint Layer, GLenum Access)"
  },
  {
    "label": "UpdateSRV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSRV(FOpenGLShaderResourceView* SRV)"
  },
  {
    "label": "GetContextStateForCurrentContext()",
    "kind": "Method",
    "detail": "Function (FOpenGLContextState&)",
    "insertText": "GetContextStateForCurrentContext()"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBuffer(GL_ARRAY_BUFFER, Buffer)"
  },
  {
    "label": "CachedBindElementArrayBuffer()",
    "kind": "Method",
    "detail": "Function (ContextState . ArrayBufferBound = Buffer ; } } void)",
    "insertText": "CachedBindElementArrayBuffer(FOpenGLContextState& ContextState, GLuint Buffer)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, Buffer)"
  },
  {
    "label": "CachedBindStorageBuffer()",
    "kind": "Method",
    "detail": "Function (ContextState . ElementArrayBufferBound = Buffer ; } } void)",
    "insertText": "CachedBindStorageBuffer(FOpenGLContextState& ContextState, GLuint Buffer)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBuffer(GL_SHADER_STORAGE_BUFFER, Buffer)"
  },
  {
    "label": "CachedBindPixelUnpackBuffer()",
    "kind": "Method",
    "detail": "Function (ContextState . StorageBufferBound = Buffer ; } } void)",
    "insertText": "CachedBindPixelUnpackBuffer(FOpenGLContextState& ContextState, GLuint Buffer)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBuffer(GL_PIXEL_UNPACK_BUFFER, Buffer)"
  },
  {
    "label": "CachedBindUniformBuffer()",
    "kind": "Method",
    "detail": "Function (ContextState . PixelUnpackBufferBound = Buffer ; } } void)",
    "insertText": "CachedBindUniformBuffer(FOpenGLContextState& ContextState, GLuint Buffer)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBuffer(GL_UNIFORM_BUFFER, Buffer)"
  },
  {
    "label": "IsUniformBufferBound()",
    "kind": "Method",
    "detail": "Function (ContextState . UniformBufferBound = Buffer ; } } bool)",
    "insertText": "IsUniformBufferBound(FOpenGLContextState& ContextState, GLuint Buffer)"
  },
  {
    "label": "GetPointSamplerState()",
    "kind": "Method",
    "detail": "Function (} FOpenGLSamplerState*)",
    "insertText": "GetPointSamplerState()"
  },
  {
    "label": "InitializeGLTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeGLTexture(FOpenGLTexture* Texture, const void* BulkDataPtr, uint64 BulkDataSize)"
  },
  {
    "label": "SetCustomPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPresent(class FRHICustomPresent* InCustomPresent)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define RHITHREAD_GLTRACE 1 # if RHITHREAD_GLTRACE # define RHITHREAD_GLTRACE_BLOCKING)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_OGLRHIThread_Flush)"
  },
  {
    "label": "FLockParams()",
    "kind": "Method",
    "detail": "Function (# else # define RHITHREAD_GLTRACE_BLOCKING # endif struct FTextureLockTracker { struct FLockParams { void* RHIBuffer ; void* Buffer ; uint32 MipIndex ; uint32 ArrayIndex ; uint32 BufferSize ; uint32 Stride ; EResourceLockMode LockMode ;)",
    "insertText": "FLockParams(void* InRHIBuffer, void* InBuffer, uint32 InArrayIndex, uint32 InMipIndex, uint32 InStride, uint32 InBufferSize, EResourceLockMode InLockMode) : RHIBuffer(InRHIBuffer) , Buffer(InBuffer) , MipIndex(InMipIndex) , ArrayIndex(InArrayIndex) , BufferSize(InBufferSize) , Stride(InStride) , LockMode(InLockMode)"
  },
  {
    "label": "FTextureLockTracker()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FLockParams,TInlineAllocator<1 6>> OutstandingLocks ; uint32 TotalMemoryOutstanding ;)",
    "insertText": "FTextureLockTracker()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (TotalMemoryOutstanding = 0 ; } void)",
    "insertText": "Lock(void* RHIBuffer, void* Buffer, uint32 ArrayIndex, uint32 MipIndex, uint32 Stride, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} OutstandingLocks .)",
    "insertText": "Add(FLockParams(RHIBuffer, Buffer, ArrayIndex, MipIndex, Stride, SizeRHI, LockMode))"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (TotalMemoryOutstanding + = SizeRHI ; } FLockParams)",
    "insertText": "Unlock(void* RHIBuffer, uint32 ArrayIndex, uint32 MipIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FLockParams& CurrentLock = OutstandingLocks [ Index ] ;)",
    "insertText": "if(CurrentLock.RHIBuffer == RHIBuffer && CurrentLock.MipIndex == MipIndex && CurrentLock.ArrayIndex == ArrayIndex)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (FLockParams Result = OutstandingLocks [ Index ] ; OutstandingLocks .)",
    "insertText": "RemoveAtSwap(Index, EAllowShrinking::No)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TotalMemoryOutstanding - = Result . BufferSize ; return Result ; } })",
    "insertText": "check(!\"Mismatched RHI buffer locks.\")"
  },
  {
    "label": "LockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} } ; void*)",
    "insertText": "LockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush)"
  },
  {
    "label": "RHILockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "LockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "AsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "AsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "FinalizeAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "FinalizeAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "CancelAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "CancelAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICreateSamplerState()",
    "kind": "Method",
    "detail": "Function (} FSamplerStateRHIRef)",
    "insertText": "RHICreateSamplerState(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "PrepareGFXBoundShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareGFXBoundShaderState(Initializer)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetGraphicsPipelineState(FRHIGraphicsPipelineState* GraphicsState, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclarationRHI, FRHIVertexShader* VertexShaderRHI, FRHIPixelShader* PixelShaderRHI, FRHIGeometryShader* GeometryShaderRHI)"
  },
  {
    "label": "RHIPostExternalCommandsReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIPostExternalCommandsReset()"
  },
  {
    "label": "GetOpenGLFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLuint)",
    "insertText": "GetOpenGLFramebuffer(uint32 NumSimultaneousRenderTargets, FOpenGLTexture** RenderTargets, const uint32* ArrayIndices, const uint32* MipmapLevels, FOpenGLTexture* DepthStencilTarget)"
  },
  {
    "label": "GetOpenGLFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLuint)",
    "insertText": "GetOpenGLFramebuffer(uint32 NumSimultaneousRenderTargets, FOpenGLTexture** RenderTargets, const uint32* ArrayIndices, const uint32* MipmapLevels, FOpenGLTexture* DepthStencilTarget, int32 NumRenderingSamples)"
  },
  {
    "label": "RHICreateBoundShaderState_Internal()",
    "kind": "Method",
    "detail": "Function (private : FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState_Internal(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader, bool FromPSOFileCache)"
  },
  {
    "label": "PrepareGFXBoundShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareGFXBoundShaderState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "EndFrameTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrameTick()"
  },
  {
    "label": "ApplyStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (FOpenGLRHIState PendingState ; FSamplerStateRHIRef PointSamplerState ; TArray<FOpenGLViewport*> Viewports ; TRefCountPtr<FOpenGLViewport> DrawingViewport ; bool bRevertToSharedContextAfterDrawingViewport = false ; bool bIsRenderingContextAcquired = false ; EPrimitiveType PrimitiveType = PT_Num ; TGlobalResource<TBoundShaderStateHistory<1 0 0 0 0>> BoundShaderStateHistory ; FOpenGLContextState SharedContextState ; FOpenGLContextState RenderingContextState ; FOpenGLContextState* CachedContextState = nullptr ; template<TRHIShader> void)",
    "insertText": "ApplyStaticUniformBuffers(TRHIShader* Shader)"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (TArray<FRHIUniformBuffer*> GlobalUniformBuffers ; TMap<GLuint,TPair<GLenum,GLenum>> TextureMipLimits ; struct FPlatformOpenGLDevice* PlatformDevice = nullptr ; # if RHI_NEW_GPU_PROFILER void)",
    "insertText": "RegisterGPUWork(uint32 NumPrimitives = 0, uint32 NumVertices = 0)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterGPUDispatch(FIntVector GroupCount)"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (GPUProfilingData ->)",
    "insertText": "RegisterGPUWork(NumPrimitives, NumVertices)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (GPUProfilingData ->)",
    "insertText": "RegisterGPUDispatch(GroupCount)"
  },
  {
    "label": "InitializeStateResources()",
    "kind": "Method",
    "detail": "Function (} # endif FCriticalSection CustomPresentSection ; TRefCountPtr<class FRHICustomPresent> CustomPresent ; void)",
    "insertText": "InitializeStateResources()"
  },
  {
    "label": "SetupVertexArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupVertexArrays(FOpenGLContextState& ContextCache, uint32 BaseVertexIndex, FOpenGLStream* Streams, uint32 NumStreams, uint32 MaxVertices)"
  },
  {
    "label": "BindPendingFramebuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindPendingFramebuffer(FOpenGLContextState& ContextState)"
  },
  {
    "label": "BindPendingShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindPendingShaderState(FOpenGLContextState& ContextState)"
  },
  {
    "label": "BindPendingComputeShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindPendingComputeShaderState(FOpenGLContextState& ContextState, FOpenGLComputeShader* ComputeShader)"
  },
  {
    "label": "UpdateRasterizerStateInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRasterizerStateInOpenGLContext(FOpenGLContextState& ContextState)"
  },
  {
    "label": "UpdateDepthStencilStateInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDepthStencilStateInOpenGLContext(FOpenGLContextState& ContextState)"
  },
  {
    "label": "UpdateScissorRectInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScissorRectInOpenGLContext(FOpenGLContextState& ContextState)"
  },
  {
    "label": "UpdateViewportInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewportInOpenGLContext(FOpenGLContextState& ContextState)"
  },
  {
    "label": "SetResourcesFromTables()",
    "kind": "Method",
    "detail": "Function (template<class ShaderType> void)",
    "insertText": "SetResourcesFromTables(ShaderType* Shader)"
  },
  {
    "label": "CommitGraphicsResourceTablesInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitGraphicsResourceTablesInner()"
  },
  {
    "label": "CommitComputeResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeResourceTables(FOpenGLComputeShader* ComputeShader)"
  },
  {
    "label": "CommitNonComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitNonComputeShaderConstants()"
  },
  {
    "label": "CommitComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeShaderConstants(FOpenGLComputeShader* ComputeShader)"
  },
  {
    "label": "SetPendingBlendStateForActiveRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPendingBlendStateForActiveRenderTargets(FOpenGLContextState& ContextState)"
  },
  {
    "label": "SetupTexturesForDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTexturesForDraw(FOpenGLContextState& ContextState)"
  },
  {
    "label": "SetupTexturesForDraw()",
    "kind": "Method",
    "detail": "Function (template<StateType> void)",
    "insertText": "SetupTexturesForDraw(FOpenGLContextState& ContextState, const StateType& ShaderState, int32 MaxTexturesNeeded)"
  },
  {
    "label": "SetupUAVsForDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUAVsForDraw(FOpenGLContextState& ContextState)"
  },
  {
    "label": "SetupUAVsForCompute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUAVsForCompute(FOpenGLContextState& ContextState, const FOpenGLComputeShader* ComputeShader)"
  },
  {
    "label": "SetupUAVsForProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUAVsForProgram(FOpenGLContextState& ContextState, const TBitArray<>& NeededBits, int32 MaxUAVUnitUsed)"
  },
  {
    "label": "RHIClearMRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearMRT(const bool* bClearColorArray, int32 NumClearColors, const FLinearColor* ColorArray, bool bClearDepth, float Depth, bool bClearStencil, uint32 Stencil)"
  },
  {
    "label": "InternalSetShaderTexture()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InternalSetShaderTexture(FOpenGLTexture* Texture, FOpenGLShaderResourceView* SRV, GLint TextureIndex, GLenum Target, GLuint Resource, int NumMips, int LimitMip)"
  },
  {
    "label": "InternalSetShaderImageUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetShaderImageUAV(GLint UAVIndex, GLenum Format, GLuint Resource, bool bLayered, GLint Layer, GLenum Access)"
  },
  {
    "label": "InternalSetShaderBufferUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetShaderBufferUAV(GLint UAVIndex, GLuint Resource)"
  },
  {
    "label": "InternalSetSamplerStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetSamplerStates(GLint TextureIndex, FOpenGLSamplerState* SamplerState)"
  },
  {
    "label": "InitializeGLTextureInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGLTextureInternal(FOpenGLTexture* Texture, void const* BulkDataPtr, uint64 BulkDataSize)"
  },
  {
    "label": "ApplyTextureStage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ApplyTextureStage(FOpenGLContextState& ContextState, GLint TextureIndex, const FTextureStage& TextureStage, FOpenGLSamplerState* SamplerState)"
  },
  {
    "label": "ReadSurfaceDataRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSurfaceDataRaw(FOpenGLContextState& ContextState, FRHITexture* TextureRHI,FIntRect Rect,TArray<uint8>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "BindUniformBufferBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUniformBufferBase(FOpenGLContextState& ContextState, int32 NumUniformBuffers, FRHIUniformBuffer** BoundUniformBuffers, uint32* DynamicOffsets, uint32 FirstUniformBuffer, bool ForceUpdate)"
  },
  {
    "label": "ClearCurrentFramebufferWithCurrentScissor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentFramebufferWithCurrentScissor(FOpenGLContextState& ContextState, int8 ClearType, int32 NumClearColors, const bool* bClearColorArray, const FLinearColor* ClearColorArray, float Depth, uint32 Stencil)"
  },
  {
    "label": "SupportsDynamicReloading()",
    "kind": "Method",
    "detail": "Function (FTextureLockTracker GLLockTracker ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS class FOpenGLDynamicRHIModule : public IDynamicRHIModule { public : bool)",
    "insertText": "SupportsDynamicReloading()"
  },
  {
    "label": "CreateRHI()",
    "kind": "Method",
    "detail": "Function (FDynamicRHI*)",
    "insertText": "CreateRHI(ERHIFeatureLevel::Type RequestedFeatureLevel = ERHIFeatureLevel::Num)"
  }
]