[
  {
    "label": "FOpenGLDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLDynamicRHI"
  },
  {
    "label": "FResourceBulkDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceBulkDataInterface"
  },
  {
    "label": "FOpenGLResourceBinder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLResourceBinder"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "EOpenGLCurrentContext",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOpenGLCurrentContext"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TOpenGLResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOpenGLResourceTraits"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "class",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FOpenGLDisjointTimeStampQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLDisjointTimeStampQuery"
  },
  {
    "label": "FOpenGLEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLEventNode"
  },
  {
    "label": "FOpenGLEventNodeFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLEventNodeFrame"
  },
  {
    "label": "so",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "so"
  },
  {
    "label": "FOpenGLGPUProfiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLGPUProfiler"
  },
  {
    "label": "OPENGLDRV_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENGLDRV_API"
  },
  {
    "label": "FOpenGLViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLViewport"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICustomPresent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICustomPresent"
  },
  {
    "label": "FTextureLockTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureLockTracker"
  },
  {
    "label": "FLockParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLockParams"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FPlatformOpenGLDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLDevice"
  },
  {
    "label": "FRHICustomPresent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICustomPresent"
  },
  {
    "label": "ShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderType"
  },
  {
    "label": "FOpenGLDynamicRHIModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLDynamicRHIModule"
  },
  {
    "label": "StartTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTiming()"
  },
  {
    "label": "EndTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTiming()"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTiming(bool bGetCurrentResultsAndBlock = false)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "PlatformStaticInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformStaticInitialize(void* UserData)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTracking()"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTracking()"
  },
  {
    "label": "IsResultValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResultValid()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResult(uint64* OutResult)"
  },
  {
    "label": "FOpenGLEventNode()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FOpenGLEventNode(InName, InParent)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "GetCurrentContext()",
    "kind": "Method",
    "detail": "Function (EOpenGLCurrentContext)",
    "insertText": "GetCurrentContext()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"OpenGL\")"
  },
  {
    "label": "BindUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUniformBuffer(EShaderFrequency ShaderFrequency, uint32 BufferIndex, FRHIUniformBuffer* BufferRHI)"
  },
  {
    "label": "SetShaderParametersCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersCommon(EShaderFrequency ShaderFrequency, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters)"
  },
  {
    "label": "SetShaderUnbindsCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderUnbindsCommon(EShaderFrequency ShaderFrequency, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargets(uint32 NumSimultaneousRenderTargets, const FRHIRenderTargetView* NewRenderTargets, const FRHIDepthRenderTargetView* NewDepthStencilTarget)"
  },
  {
    "label": "SetRenderTargetsAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetsAndClear(const FRHISetRenderTargetsInfo& RenderTargetsInfo)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "PurgeFramebufferFromCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeFramebufferFromCaches(GLuint Framebuffer)"
  },
  {
    "label": "OnBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBufferDeletion(GLuint VertexBufferResource)"
  },
  {
    "label": "OnPixelBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPixelBufferDeletion(GLuint PixelBufferResource)"
  },
  {
    "label": "OnUniformBufferDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUniformBufferDeletion(GLuint UniformBufferResource,uint32 AllocatedSize,bool bStreamDraw)"
  },
  {
    "label": "OnProgramDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProgramDeletion(GLint ProgramResource)"
  },
  {
    "label": "InvalidateTextureResourceInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateTextureResourceInCache(GLuint Resource)"
  },
  {
    "label": "InvalidateUAVResourceInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateUAVResourceInCache(GLuint Resource)"
  },
  {
    "label": "CachedSetupTextureStageInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedSetupTextureStageInner(FOpenGLContextState& ContextState, GLint TextureIndex, GLenum Target, GLuint Resource, GLint BaseMip, GLint NumMips)"
  },
  {
    "label": "CachedSetupUAVStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedSetupUAVStage(FOpenGLContextState& ContextState, GLint UAVIndex, GLenum Format, GLuint Resource, bool bLayered, GLint Layer, GLenum Access)"
  },
  {
    "label": "UpdateSRV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSRV(FOpenGLShaderResourceView* SRV)"
  },
  {
    "label": "InitializeGLTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGLTexture(FOpenGLTexture* Texture, const void* BulkDataPtr, uint64 BulkDataSize)"
  },
  {
    "label": "SetCustomPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPresent(class FRHICustomPresent* InCustomPresent)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (RHITHREAD_GLTRACE_BLOCKING)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_OGLRHIThread_Flush)"
  },
  {
    "label": "FLockParams()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLockParams(nullptr, nullptr, 0, 0, 0, 0, RLM_WriteOnly)"
  },
  {
    "label": "FRHIGraphicsPipelineStateFallBack()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FRHIGraphicsPipelineStateFallBack(Initializer)"
  },
  {
    "label": "LinkComputeProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkComputeProgram(FRHIComputeShader* ComputeShaderRHI)"
  },
  {
    "label": "GetOpenGLFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLuint)",
    "insertText": "GetOpenGLFramebuffer(uint32 NumSimultaneousRenderTargets, FOpenGLTexture** RenderTargets, const uint32* ArrayIndices, const uint32* MipmapLevels, FOpenGLTexture* DepthStencilTarget)"
  },
  {
    "label": "GetOpenGLFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLuint)",
    "insertText": "GetOpenGLFramebuffer(uint32 NumSimultaneousRenderTargets, FOpenGLTexture** RenderTargets, const uint32* ArrayIndices, const uint32* MipmapLevels, FOpenGLTexture* DepthStencilTarget, int32 NumRenderingSamples)"
  },
  {
    "label": "RHICreateBoundShaderState_Internal()",
    "kind": "Method",
    "detail": "Function (FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState_Internal(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader, bool FromPSOFileCache)"
  },
  {
    "label": "PrepareGFXBoundShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareGFXBoundShaderState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "EndFrameTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrameTick()"
  },
  {
    "label": "ApplyStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyStaticUniformBuffers(TRHIShader* Shader)"
  },
  {
    "label": "InitializeStateResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeStateResources()"
  },
  {
    "label": "SetupVertexArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupVertexArrays(FOpenGLContextState& ContextCache, uint32 BaseVertexIndex, FOpenGLStream* Streams, uint32 NumStreams, uint32 MaxVertices)"
  },
  {
    "label": "BindPendingFramebuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindPendingFramebuffer( FOpenGLContextState& ContextState )"
  },
  {
    "label": "BindPendingShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindPendingShaderState( FOpenGLContextState& ContextState )"
  },
  {
    "label": "BindPendingComputeShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindPendingComputeShaderState( FOpenGLContextState& ContextState, FOpenGLComputeShader* ComputeShader )"
  },
  {
    "label": "UpdateRasterizerStateInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRasterizerStateInOpenGLContext( FOpenGLContextState& ContextState )"
  },
  {
    "label": "UpdateDepthStencilStateInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDepthStencilStateInOpenGLContext( FOpenGLContextState& ContextState )"
  },
  {
    "label": "UpdateScissorRectInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScissorRectInOpenGLContext( FOpenGLContextState& ContextState )"
  },
  {
    "label": "UpdateViewportInOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewportInOpenGLContext( FOpenGLContextState& ContextState )"
  },
  {
    "label": "SetResourcesFromTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourcesFromTables(ShaderType* Shader)"
  },
  {
    "label": "CommitGraphicsResourceTablesInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitGraphicsResourceTablesInner()"
  },
  {
    "label": "CommitComputeResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeResourceTables(FOpenGLComputeShader* ComputeShader)"
  },
  {
    "label": "CommitNonComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitNonComputeShaderConstants()"
  },
  {
    "label": "CommitComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeShaderConstants(FOpenGLComputeShader* ComputeShader)"
  },
  {
    "label": "SetPendingBlendStateForActiveRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPendingBlendStateForActiveRenderTargets( FOpenGLContextState& ContextState )"
  },
  {
    "label": "SetupTexturesForDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTexturesForDraw( FOpenGLContextState& ContextState)"
  },
  {
    "label": "SetupTexturesForDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTexturesForDraw( FOpenGLContextState& ContextState, const StateType& ShaderState, int32 MaxTexturesNeeded)"
  },
  {
    "label": "SetupUAVsForDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUAVsForDraw(FOpenGLContextState& ContextState)"
  },
  {
    "label": "SetupUAVsForCompute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUAVsForCompute(FOpenGLContextState& ContextState, const FOpenGLComputeShader* ComputeShader)"
  },
  {
    "label": "SetupUAVsForProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUAVsForProgram(FOpenGLContextState& ContextState, const TBitArray<>& NeededBits, int32 MaxUAVUnitUsed)"
  },
  {
    "label": "RHIClearMRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearMRT(const bool* bClearColorArray, int32 NumClearColors, const FLinearColor* ColorArray, bool bClearDepth, float Depth, bool bClearStencil, uint32 Stencil)"
  },
  {
    "label": "InternalSetShaderTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetShaderTexture(FOpenGLTexture* Texture, FOpenGLShaderResourceView* SRV, GLint TextureIndex, GLenum Target, GLuint Resource, int NumMips, int LimitMip)"
  },
  {
    "label": "InternalSetShaderImageUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetShaderImageUAV(GLint UAVIndex, GLenum Format, GLuint Resource, bool bLayered, GLint Layer, GLenum Access)"
  },
  {
    "label": "InternalSetShaderBufferUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetShaderBufferUAV(GLint UAVIndex, GLuint Resource)"
  },
  {
    "label": "InternalSetSamplerStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetSamplerStates(GLint TextureIndex, FOpenGLSamplerState* SamplerState)"
  },
  {
    "label": "InitializeGLTextureInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGLTextureInternal(FOpenGLTexture* Texture, void const* BulkDataPtr, uint64 BulkDataSize)"
  },
  {
    "label": "ApplyTextureStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTextureStage(FOpenGLContextState& ContextState, GLint TextureIndex, const FTextureStage& TextureStage, FOpenGLSamplerState* SamplerState)"
  },
  {
    "label": "ReadSurfaceDataRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSurfaceDataRaw(FOpenGLContextState& ContextState, FRHITexture* TextureRHI,FIntRect Rect,TArray<uint8>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "BindUniformBufferBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUniformBufferBase(FOpenGLContextState& ContextState, int32 NumUniformBuffers, FRHIUniformBuffer** BoundUniformBuffers, uint32* DynamicOffsets, uint32 FirstUniformBuffer, bool ForceUpdate)"
  },
  {
    "label": "ClearCurrentFramebufferWithCurrentScissor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentFramebufferWithCurrentScissor(FOpenGLContextState& ContextState, int8 ClearType, int32 NumClearColors, const bool* bClearColorArray, const FLinearColor* ClearColorArray, float Depth, uint32 Stencil)"
  }
]