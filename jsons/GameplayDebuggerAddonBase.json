[
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "AGameplayDebuggerCategoryReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameplayDebuggerCategoryReplicator"
  },
  {
    "label": "FGameplayDebuggerAddonBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerAddonBase"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "FGameplayDebuggerAddonManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerAddonManager"
  },
  {
    "label": "FGameplayDebuggerAddonBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameplayDebuggerTypes . h \" class UWorld ; class AActor ; class APlayerController ; class AGameplayDebuggerCategoryReplicator ; class FGameplayDebuggerAddonBase : public TSharedFromThis<FGameplayDebuggerAddonBase> { public : ~)",
    "insertText": "FGameplayDebuggerAddonBase()"
  },
  {
    "label": "GetNumInputHandlers()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumInputHandlers()"
  },
  {
    "label": "GetInputHandler()",
    "kind": "Method",
    "detail": "Function (} FGameplayDebuggerInputHandler&)",
    "insertText": "GetInputHandler(int32 HandlerId)"
  },
  {
    "label": "GetWorldFromReplicator()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorldFromReplicator()"
  },
  {
    "label": "GetDataWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetDataWorld(const APlayerController* OwnerPC, const AActor* DebugActor)"
  },
  {
    "label": "OnGameplayDebuggerActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayDebuggerActivated()"
  },
  {
    "label": "OnGameplayDebuggerDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayDebuggerDeactivated()"
  },
  {
    "label": "IsSimulateInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulateInEditor()"
  },
  {
    "label": "FindLocalDebugActor()",
    "kind": "Method",
    "detail": "Function (protected : AActor*)",
    "insertText": "FindLocalDebugActor()"
  },
  {
    "label": "GetReplicator()",
    "kind": "Method",
    "detail": "Function (AGameplayDebuggerCategoryReplicator*)",
    "insertText": "GetReplicator()"
  },
  {
    "label": "BindKeyPress()",
    "kind": "Method",
    "detail": "Function (template<class UserClass> bool)",
    "insertText": "BindKeyPress(FName KeyName, UserClass* KeyHandlerObject, typename FGameplayDebuggerInputHandler::FHandler::TMethodPtr< UserClass > KeyHandlerFunc, EGameplayDebuggerInputMode InputMode = EGameplayDebuggerInputMode::Local)"
  },
  {
    "label": "BindRaw()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerInputHandler NewHandler ; NewHandler . KeyName = KeyName ; NewHandler . Delegate .)",
    "insertText": "BindRaw(KeyHandlerObject, KeyHandlerFunc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewHandler . Mode = InputMode ;)",
    "insertText": "if(NewHandler.IsValid())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InputHandlers .)",
    "insertText": "Add(NewHandler)"
  }
]