[
  {
    "label": "FWildcardString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWildcardString"
  },
  {
    "label": "FWildcardString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Misc / CString . h \" class FWildcardString : public FString { public :)",
    "insertText": "FWildcardString() : FString()"
  },
  {
    "label": "FWildcardString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWildcardString(const FString& Pattern ) : FString(Pattern)"
  },
  {
    "label": "FWildcardString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWildcardString(const TCHAR* Pattern ) : FString(Pattern)"
  },
  {
    "label": "ContainsWildcards()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "ContainsWildcards()"
  },
  {
    "label": "IsMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMatch(const TCHAR* Input)"
  },
  {
    "label": "IsMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMatch(const FString& Input)"
  },
  {
    "label": "ContainsWildcards()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "ContainsWildcards(const TCHAR* Pattern)"
  },
  {
    "label": "IsMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMatch(const TCHAR* Pattern, const TCHAR* Input)"
  },
  {
    "label": "IsMatchSubstring()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMatchSubstring(const TCHAR* Pattern, const TCHAR* Input, const TCHAR* InputEnd, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (protected : const TCHAR EndOfString =)",
    "insertText": "TCHAR('\\0')"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (const TCHAR ExactWildcard =)",
    "insertText": "TCHAR('?')"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (const TCHAR SequenceWildcard =)",
    "insertText": "TCHAR('*')"
  }
]