[
  {
    "label": "TInverseRotationMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInverseRotationMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TInverseRotationMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Plane . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TInverseRotationMatrix : public TMatrix<T> { public :)",
    "insertText": "TInverseRotationMatrix(const TRotator<T>& Rot)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TInverseRotationMatrix(const TInverseRotationMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "TInverseRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> TInverseRotationMatrix<T)",
    "insertText": "TInverseRotationMatrix(const TRotator<T>& Rot) : TMatrix<T>( TMatrix<T>( TPlane<T>(+FMath::Cos(Rot.Yaw * UE_PI / 180.f), -FMath::Sin(Rot.Yaw * UE_PI / 180.f), 0.0f, 0.0f), TPlane<T>(+FMath::Sin(Rot.Yaw * UE_PI / 180.f), +FMath::Cos(Rot.Yaw * UE_PI / 180.f), 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, 1.0f, 0.0f), TPlane<T>(0.0f, 0.0f, 0.0f, 1.0f)) * TMatrix<T>( TPlane<T>(+FMath::Cos(Rot.Pitch * UE_PI / 180.f), 0.0f, -FMath::Sin(Rot.Pitch * UE_PI / 180.f), 0.0f), TPlane<T>(0.0f, 1.0f, 0.0f, 0.0f), TPlane<T>(+FMath::Sin(Rot.Pitch * UE_PI / 180.f), 0.0f, +FMath::Cos(Rot.Pitch * UE_PI / 180.f), 0.0f), TPlane<T>(0.0f, 0.0f, 0.0f, 1.0f)) * TMatrix<T>( TPlane<T>(1.0f, 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, +FMath::Cos(Rot.Roll * UE_PI / 180.f), +FMath::Sin(Rot.Roll * UE_PI / 180.f), 0.0f), TPlane<T>(0.0f, -FMath::Sin(Rot.Roll * UE_PI / 180.f), +FMath::Cos(Rot.Roll * UE_PI / 180.f), 0.0f), TPlane<T>(0.0f, 0.0f, 0.0f, 1.0f)))"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_DECLARE_LWC_TYPE(InverseRotationMatrix, 44)"
  }
]