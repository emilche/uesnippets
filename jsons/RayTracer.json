[
  {
    "label": "BaseCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseCamera"
  },
  {
    "label": "BaseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseShader"
  },
  {
    "label": "LevelSetRayTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetRayTracer"
  },
  {
    "label": "VolumeRender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VolumeRender"
  },
  {
    "label": "Film",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Film"
  },
  {
    "label": "RGBA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RGBA"
  },
  {
    "label": "PerspectiveCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PerspectiveCamera"
  },
  {
    "label": "OrthographicCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OrthographicCamera"
  },
  {
    "label": "MatteShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatteShader"
  },
  {
    "label": "NormalShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NormalShader"
  },
  {
    "label": "PositionShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PositionShader"
  },
  {
    "label": "DiffuseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiffuseShader"
  },
  {
    "label": "rayTrace()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_RAYTRACER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_RAYTRACER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / math / BBox . h> # include<openvdb / math / Ray . h> # include<openvdb / math / Math . h> # include<openvdb / tools / RayIntersector . h> # include<openvdb / tools / Interpolation . h> # include<deque> # include<iostream> # include<fstream> # include<limits> # include<memory> # include<string> # include<type_traits> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { class BaseCamera ; class BaseShader ; template<GridT> void)",
    "insertText": "rayTrace(const GridT&, const BaseShader&, BaseCamera&, size_t pixelSamples = 1, unsigned int seed = 0, bool threaded = true)"
  },
  {
    "label": "rayTrace()",
    "kind": "Method",
    "detail": "Function (template<GridT,IntersectorT> void)",
    "insertText": "rayTrace(const GridT&, const IntersectorT&, const BaseShader&, BaseCamera&, size_t pixelSamples = 1, unsigned int seed = 0, bool threaded = true)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (template<GridT,IntersectorT = tools::LevelSetRayIntersector<GridT>> class LevelSetRayTracer { public : using GridType = GridT ; using Vec3Type = IntersectorT::Vec3Type ; using RayType = IntersectorT::RayType ;)",
    "insertText": "LevelSetRayTracer(const GridT& grid, const BaseShader& shader, BaseCamera& camera, size_t pixelSamples = 1, unsigned int seed = 0)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelSetRayTracer(const IntersectorT& inter, const BaseShader& shader, BaseCamera& camera, size_t pixelSamples = 1, unsigned int seed = 0)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelSetRayTracer(const LevelSetRayTracer& other)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LevelSetRayTracer()"
  },
  {
    "label": "setGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGrid(const GridT& grid)"
  },
  {
    "label": "setIntersector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIntersector(const IntersectorT& inter)"
  },
  {
    "label": "setShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShader(const BaseShader& shader)"
  },
  {
    "label": "setCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCamera(BaseCamera& camera)"
  },
  {
    "label": "setPixelSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPixelSamples(size_t pixelSamples, unsigned int seed = 0)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "render(bool threaded = true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private : const bool mIsMaster ; double* mRand ; IntersectorT mInter ; std::unique_ptr<const BaseShader> mShader ; BaseCamera* mCamera ; size_t mSubPixels ; } ; template<IntersectorT,SamplerT = tools::BoxSampler> class VolumeRender { public : using GridType = IntersectorT::GridType ; using RayType = IntersectorT::RayType ; using ValueType = GridType::ValueType ; using AccessorType = GridType::ConstAccessor ; using SamplerType = tools::GridSampler<AccessorType,SamplerT> ;)",
    "insertText": "static_assert(std::is_floating_point<ValueType>::value, \"VolumeRender requires a floating-point-valued grid\")"
  },
  {
    "label": "VolumeRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VolumeRender(const IntersectorT& inter, BaseCamera& camera)"
  },
  {
    "label": "VolumeRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VolumeRender(const VolumeRender& other)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "render(bool threaded=true)"
  },
  {
    "label": "setLightDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLightDir(Real x, Real y, Real z)"
  },
  {
    "label": "Vec3R()",
    "kind": "Method",
    "detail": "Function (mLightDir =)",
    "insertText": "Vec3R(x,y,z).unit()"
  },
  {
    "label": "setLightColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLightColor(Real r, Real g, Real b)"
  },
  {
    "label": "Vec3R()",
    "kind": "Method",
    "detail": "Function (mLightColor =)",
    "insertText": "Vec3R(r,g,b)"
  },
  {
    "label": "setPrimaryStep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPrimaryStep(Real primaryStep)"
  },
  {
    "label": "setShadowStep()",
    "kind": "Method",
    "detail": "Function (mPrimaryStep = primaryStep ; } void)",
    "insertText": "setShadowStep(Real shadowStep)"
  },
  {
    "label": "setScattering()",
    "kind": "Method",
    "detail": "Function (mShadowStep = shadowStep ; } void)",
    "insertText": "setScattering(Real x, Real y, Real z)"
  },
  {
    "label": "Vec3R()",
    "kind": "Method",
    "detail": "Function (mScattering =)",
    "insertText": "Vec3R(x,y,z)"
  },
  {
    "label": "setAbsorption()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAbsorption(Real x, Real y, Real z)"
  },
  {
    "label": "setLightGain()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLightGain(Real gain)"
  },
  {
    "label": "setCutOff()",
    "kind": "Method",
    "detail": "Function (mLightGain = gain ; } void)",
    "insertText": "setCutOff(Real cutOff)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (mCutOff = cutOff ; } void)",
    "insertText": "print(std::ostream& os = std::cout, int verboseLevel = 1)"
  },
  {
    "label": "RGBA()",
    "kind": "Method",
    "detail": "Function (private : AccessorType mAccessor ; BaseCamera* mCamera ; std::unique_ptr<IntersectorT> mPrimary,mShadow ; Real mPrimaryStep,mShadowStep,mCutOff,mLightGain ; Vec3R mLightDir,mLightColor,mAbsorption,mScattering ; } ; class Film { public : struct RGBA { using ValueT = float ;)",
    "insertText": "RGBA() : r(0), g(0), b(0), a(1)"
  },
  {
    "label": "RGBA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RGBA(ValueT intensity) : r(intensity), g(intensity), b(intensity), a(1)"
  },
  {
    "label": "RGBA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RGBA(ValueT _r, ValueT _g, ValueT _b, ValueT _a = static_cast<ValueT>(1.0)): r(_r), g(_g), b(_b), a(_a)"
  },
  {
    "label": "RGBA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RGBA(double _r, double _g, double _b, double _a = 1.0) : r(static_cast<ValueT>(_r)) , g(static_cast<ValueT>(_g)) , b(static_cast<ValueT>(_b)) , a(static_cast<ValueT>(_a))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RGBA)",
    "insertText": "operator(ValueT scale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RGBA)",
    "insertText": "operator(const RGBA& rhs)"
  },
  {
    "label": "over()",
    "kind": "Method",
    "detail": "Function (r + = rhs . r ; g + = rhs . g ; b + = rhs . b ; a + = rhs . a ; return* this ; } void)",
    "insertText": "over(const RGBA& rhs)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (const float s = rhs .)",
    "insertText": "a(1.0f-a)"
  },
  {
    "label": "Film()",
    "kind": "Method",
    "detail": "Function (r = a* r + s* rhs . r ; g = a* g + s* rhs . g ; b = a* b + s* rhs . b ; a = a + s ; } ValueT r,g,b,a ; } ;)",
    "insertText": "Film(size_t width, size_t height) : mWidth(width), mHeight(height), mSize(width*height), mPixels(new RGBA[mSize])"
  },
  {
    "label": "Film()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Film(size_t width, size_t height, const RGBA& bg) : mWidth(width), mHeight(height), mSize(width*height), mPixels(new RGBA[mSize])"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "fill(bg)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (} const RGBA&)",
    "insertText": "pixel(size_t w, size_t h)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(w < mWidth)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(h < mHeight)"
  },
  {
    "label": "checkerboard()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "checkerboard(const RGBA& c1=RGBA(0.3f), const RGBA& c2=RGBA(0.6f), size_t size=32)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (RGBA* p = mPixels .)",
    "insertText": "get()"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "p((i & size) ^ (j & size))"
  },
  {
    "label": "savePPM()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "savePPM(const std::string& fileName)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "name(fileName)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<unsigned char [ ]>)",
    "insertText": "buffer(new unsigned char[3*mSize])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t n = mSize ;)",
    "insertText": "while(n--)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* q + + = static_cast<unsigned)",
    "insertText": "char(255.0f*(*p ).r)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* q + + = static_cast<unsigned)",
    "insertText": "char(255.0f*(*p ).g)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* q + + = static_cast<unsigned)",
    "insertText": "char(255.0f*(*p++).b)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (} std::ofstream)",
    "insertText": "os(name.c_str(), std::ios_base::binary)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" Error opening PPM file \\ \" \"<<name<<\" \\ \" \"<<std::endl ; return ; } os<<\" P6 \\ n \"<<mWidth<<\" \"<<mHeight<<\" \\ n255 \\ n \" ; os .)",
    "insertText": "write(reinterpret_cast<const char*>(&(*tmp)), 3 * mSize * sizeof(unsigned char))"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "width()"
  },
  {
    "label": "BaseCamera()",
    "kind": "Method",
    "detail": "Function (} private : size_t mWidth,mHeight,mSize ; std::unique_ptr<RGBA [ ]> mPixels ; } ; class BaseCamera { public :)",
    "insertText": "BaseCamera(Film& film, const Vec3R& rotation, const Vec3R& translation, double frameWidth, double nearPlane, double farPlane) : mFilm(&film) , mScaleWidth(frameWidth) , mScaleHeight(frameWidth * double(film.height()) / double(film.width()))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(nearPlane > 0 && farPlane > nearPlane)"
  },
  {
    "label": "accumPostRotation()",
    "kind": "Method",
    "detail": "Function (mScreenToWorld .)",
    "insertText": "accumPostRotation(math::X_AXIS, rotation[0] * M_PI / 180.0)"
  },
  {
    "label": "accumPostRotation()",
    "kind": "Method",
    "detail": "Function (mScreenToWorld .)",
    "insertText": "accumPostRotation(math::Y_AXIS, rotation[1] * M_PI / 180.0)"
  },
  {
    "label": "accumPostRotation()",
    "kind": "Method",
    "detail": "Function (mScreenToWorld .)",
    "insertText": "accumPostRotation(math::Z_AXIS, rotation[2] * M_PI / 180.0)"
  },
  {
    "label": "accumPostTranslation()",
    "kind": "Method",
    "detail": "Function (mScreenToWorld .)",
    "insertText": "accumPostTranslation(translation)"
  },
  {
    "label": "initRay()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "initRay(nearPlane, farPlane)"
  },
  {
    "label": "BaseCamera()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "BaseCamera()"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (} Film::RGBA&)",
    "insertText": "pixel(size_t i, size_t j)"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "height()"
  },
  {
    "label": "lookAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lookAt(const Vec3R& xyz, const Vec3R& up = Vec3R(0.0, 1.0, 0.0))"
  },
  {
    "label": "applyMap()",
    "kind": "Method",
    "detail": "Function (const Vec3R orig = mScreenToWorld .)",
    "insertText": "applyMap(Vec3R(0.0))"
  },
  {
    "label": "Mat4d()",
    "kind": "Method",
    "detail": "Function (const Vec3R dir = orig - xyz ; try { Mat4d xform = math::aim<)",
    "insertText": "Mat4d(dir, up)"
  },
  {
    "label": "postTranslate()",
    "kind": "Method",
    "detail": "Function (xform .)",
    "insertText": "postTranslate(orig)"
  },
  {
    "label": "AffineMap()",
    "kind": "Method",
    "detail": "Function (mScreenToWorld =)",
    "insertText": "AffineMap(xform)"
  },
  {
    "label": "initRay()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "initRay(mRay.t0(), mRay.t1())"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(...)"
  },
  {
    "label": "rasterToScreen()",
    "kind": "Method",
    "detail": "Function (} } Vec3R)",
    "insertText": "rasterToScreen(double i, double j, double z)"
  },
  {
    "label": "getRay()",
    "kind": "Method",
    "detail": "Function (} math::Ray<double>)",
    "insertText": "getRay(size_t i, size_t j, double iOffset = 0.5, double jOffset = 0.5)"
  },
  {
    "label": "initRay()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "initRay(double t0, double t1)"
  },
  {
    "label": "setTimes()",
    "kind": "Method",
    "detail": "Function (mRay .)",
    "insertText": "setTimes(t0, t1)"
  },
  {
    "label": "setEye()",
    "kind": "Method",
    "detail": "Function (mRay .)",
    "insertText": "setEye(mScreenToWorld.applyMap(Vec3R(0.0)))"
  },
  {
    "label": "setDir()",
    "kind": "Method",
    "detail": "Function (mRay .)",
    "insertText": "setDir(mScreenToWorld.applyJacobian(Vec3R(0.0, 0.0, -1.0)))"
  },
  {
    "label": "PerspectiveCamera()",
    "kind": "Method",
    "detail": "Function (} Film* mFilm ; double mScaleWidth,mScaleHeight ; math::Ray<double> mRay ; math::AffineMap mScreenToWorld ; } ; class PerspectiveCamera : public BaseCamera { public :)",
    "insertText": "PerspectiveCamera(Film& film, const Vec3R& rotation = Vec3R(0.0), const Vec3R& translation = Vec3R(0.0), double focalLength = 50.0, double aperture = 41.2136, double nearPlane = 1e-3, double farPlane = std::numeric_limits<double>::max()) : BaseCamera(film, rotation, translation, 0.5*aperture/focalLength, nearPlane, farPlane)"
  },
  {
    "label": "PerspectiveCamera()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PerspectiveCamera()"
  },
  {
    "label": "ray()",
    "kind": "Method",
    "detail": "Function (math::Ray<double>)",
    "insertText": "ray(mRay)"
  },
  {
    "label": "rasterToScreen()",
    "kind": "Method",
    "detail": "Function (Vec3R dir =)",
    "insertText": "rasterToScreen(Real(i) + iOffset, Real(j) + jOffset, -1.0)"
  },
  {
    "label": "applyJacobian()",
    "kind": "Method",
    "detail": "Function (dir = BaseCamera::mScreenToWorld .)",
    "insertText": "applyJacobian(dir)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (dir .)",
    "insertText": "normalize()"
  },
  {
    "label": "scaleTimes()",
    "kind": "Method",
    "detail": "Function (ray .)",
    "insertText": "scaleTimes(1.0/dir.dot(ray.dir()))"
  },
  {
    "label": "setDir()",
    "kind": "Method",
    "detail": "Function (ray .)",
    "insertText": "setDir(dir)"
  },
  {
    "label": "fieldOfViewToFocalLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "fieldOfViewToFocalLength(double fov, double aperture)"
  },
  {
    "label": "OrthographicCamera()",
    "kind": "Method",
    "detail": "Function (} } ; class OrthographicCamera : public BaseCamera { public :)",
    "insertText": "OrthographicCamera(Film& film, const Vec3R& rotation = Vec3R(0.0), const Vec3R& translation = Vec3R(0.0), double frameWidth = 1.0, double nearPlane = 1e-3, double farPlane = std::numeric_limits<double>::max()) : BaseCamera(film, rotation, translation, 0.5*frameWidth, nearPlane, farPlane)"
  },
  {
    "label": "OrthographicCamera()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "OrthographicCamera()"
  },
  {
    "label": "rasterToScreen()",
    "kind": "Method",
    "detail": "Function (Vec3R eye =)",
    "insertText": "rasterToScreen(Real(i) + iOffset, Real(j) + jOffset, 0.0)"
  },
  {
    "label": "setEye()",
    "kind": "Method",
    "detail": "Function (ray .)",
    "insertText": "setEye(BaseCamera::mScreenToWorld.applyMap(eye))"
  },
  {
    "label": "BaseShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BaseShader(const BaseShader&)"
  },
  {
    "label": "BaseShader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BaseShader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Film::RGBA)",
    "insertText": "operator()(const Vec3R& xyz, const Vec3R& nml, const Vec3R& dir)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (BaseShader*)",
    "insertText": "copy()"
  },
  {
    "label": "MatteShader()",
    "kind": "Method",
    "detail": "Function (} ; template<GridT = Film::RGBA,SamplerType = tools::PointSampler> class MatteShader : public BaseShader { public :)",
    "insertText": "MatteShader(const GridT& grid) : mAcc(grid.getAccessor()), mXform(&grid.transform())"
  },
  {
    "label": "MatteShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MatteShader(const MatteShader&)"
  },
  {
    "label": "MatteShader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MatteShader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Film::RGBA)",
    "insertText": "operator()(const Vec3R& xyz, const Vec3R&, const Vec3R&)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (GridT::ValueType v = zeroVal<)",
    "insertText": "ValueType()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sample(mAcc, mXform->worldToIndex(xyz), v)"
  },
  {
    "label": "MatteShader()",
    "kind": "Method",
    "detail": "Function (} private : GridT::ConstAccessor mAcc ; const math::Transform* mXform ; } ; template<SamplerType> class MatteShader<Film::RGBA,SamplerType> : public BaseShader { public :)",
    "insertText": "MatteShader(const Film::RGBA& c = Film::RGBA(1.0f)): mRGBA(c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Film::RGBA)",
    "insertText": "operator()(const Vec3R&, const Vec3R&, const Vec3R&)"
  },
  {
    "label": "NormalShader()",
    "kind": "Method",
    "detail": "Function (} private : const Film::RGBA mRGBA ; } ; template<GridT = Film::RGBA,SamplerType = tools::PointSampler> class NormalShader : public BaseShader { public :)",
    "insertText": "NormalShader(const GridT& grid) : mAcc(grid.getAccessor()), mXform(&grid.transform())"
  },
  {
    "label": "NormalShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NormalShader(const NormalShader&)"
  },
  {
    "label": "NormalShader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NormalShader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Film::RGBA)",
    "insertText": "operator()(const Vec3R& xyz, const Vec3R& normal, const Vec3R&)"
  },
  {
    "label": "NormalShader()",
    "kind": "Method",
    "detail": "Function (} private : GridT::ConstAccessor mAcc ; const math::Transform* mXform ; } ; template<SamplerType> class NormalShader<Film::RGBA,SamplerType> : public BaseShader { public :)",
    "insertText": "NormalShader(const Film::RGBA& c = Film::RGBA(1.0f)) : mRGBA(c*0.5f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Film::RGBA)",
    "insertText": "operator()(const Vec3R&, const Vec3R& normal, const Vec3R&)"
  },
  {
    "label": "PositionShader()",
    "kind": "Method",
    "detail": "Function (} private : const Film::RGBA mRGBA ; } ; template<GridT = Film::RGBA,SamplerType = tools::PointSampler> class PositionShader : public BaseShader { public :)",
    "insertText": "PositionShader(const math::BBox<Vec3R>& bbox, const GridT& grid) : mMin(bbox.min()) , mInvDim(1.0/bbox.extents()) , mAcc(grid.getAccessor()) , mXform(&grid.transform())"
  },
  {
    "label": "PositionShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PositionShader(const PositionShader&)"
  },
  {
    "label": "PositionShader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PositionShader()"
  },
  {
    "label": "rgb()",
    "kind": "Method",
    "detail": "Function (const Vec3R)",
    "insertText": "rgb(xyz - mMin)"
  },
  {
    "label": "PositionShader()",
    "kind": "Method",
    "detail": "Function (} private : const Vec3R mMin,mInvDim ; GridT::ConstAccessor mAcc ; const math::Transform* mXform ; } ; template<SamplerType> class PositionShader<Film::RGBA,SamplerType> : public BaseShader { public :)",
    "insertText": "PositionShader(const math::BBox<Vec3R>& bbox, const Film::RGBA& c = Film::RGBA(1.0f)) : mMin(bbox.min()), mInvDim(1.0/bbox.extents()), mRGBA(c)"
  },
  {
    "label": "DiffuseShader()",
    "kind": "Method",
    "detail": "Function (} private : const Vec3R mMin,mInvDim ; const Film::RGBA mRGBA ; } ; template<GridT = Film::RGBA,SamplerType = tools::PointSampler> class DiffuseShader : public BaseShader { public :)",
    "insertText": "DiffuseShader(const GridT& grid): mAcc(grid.getAccessor()), mXform(&grid.transform())"
  },
  {
    "label": "DiffuseShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiffuseShader(const DiffuseShader&)"
  },
  {
    "label": "DiffuseShader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DiffuseShader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Film::RGBA)",
    "insertText": "operator()(const Vec3R& xyz, const Vec3R& normal, const Vec3R& rayDir)"
  },
  {
    "label": "DiffuseShader()",
    "kind": "Method",
    "detail": "Function (} private : GridT::ConstAccessor mAcc ; const math::Transform* mXform ; } ; template<SamplerType> class DiffuseShader<Film::RGBA,SamplerType> : public BaseShader { public :)",
    "insertText": "DiffuseShader(const Film::RGBA& d = Film::RGBA(1.0f)): mRGBA(d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Film::RGBA)",
    "insertText": "operator()(const Vec3R&, const Vec3R& normal, const Vec3R& rayDir)"
  },
  {
    "label": "rayTrace()",
    "kind": "Method",
    "detail": "Function (} private : const Film::RGBA mRGBA ; } ; template<GridT> void)",
    "insertText": "rayTrace(const GridT& grid, const BaseShader& shader, BaseCamera& camera, size_t pixelSamples, unsigned int seed, bool threaded)"
  },
  {
    "label": "tracer()",
    "kind": "Method",
    "detail": "Function (LevelSetRayTracer<GridT,tools::LevelSetRayIntersector<GridT>>)",
    "insertText": "tracer(grid, shader, camera, pixelSamples, seed)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (tracer .)",
    "insertText": "render(threaded)"
  },
  {
    "label": "rayTrace()",
    "kind": "Method",
    "detail": "Function (} template<GridT,IntersectorT> void)",
    "insertText": "rayTrace(const GridT&, const IntersectorT& inter, const BaseShader& shader, BaseCamera& camera, size_t pixelSamples, unsigned int seed, bool threaded)"
  },
  {
    "label": "tracer()",
    "kind": "Method",
    "detail": "Function (LevelSetRayTracer<GridT,IntersectorT>)",
    "insertText": "tracer(inter, shader, camera, pixelSamples, seed)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (} template<GridT,IntersectorT> LevelSetRayTracer<GridT,IntersectorT)",
    "insertText": "LevelSetRayTracer(const GridT& grid, const BaseShader& shader, BaseCamera& camera, size_t pixelSamples, unsigned int seed) : mIsMaster(true), mRand(nullptr), mInter(grid), mShader(shader.copy()), mCamera(&camera)"
  },
  {
    "label": "setPixelSamples()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setPixelSamples(pixelSamples, seed)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (} template<GridT,IntersectorT> LevelSetRayTracer<GridT,IntersectorT)",
    "insertText": "LevelSetRayTracer(const IntersectorT& inter, const BaseShader& shader, BaseCamera& camera, size_t pixelSamples, unsigned int seed) : mIsMaster(true), mRand(nullptr), mInter(inter), mShader(shader.copy()), mCamera(&camera)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (} template<GridT,IntersectorT> LevelSetRayTracer<GridT,IntersectorT)",
    "insertText": "LevelSetRayTracer(const LevelSetRayTracer& other) : mIsMaster(false), mRand(other.mRand), mInter(other.mInter), mShader(other.mShader->copy()), mCamera(other.mCamera), mSubPixels(other.mSubPixels)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mIsMaster)"
  },
  {
    "label": "IntersectorT()",
    "kind": "Method",
    "detail": "Function (mInter =)",
    "insertText": "IntersectorT(grid)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mShader .)",
    "insertText": "reset(shader.copy())"
  },
  {
    "label": "setPixelSamples()",
    "kind": "Method",
    "detail": "Function (mCamera =& camera ; } template<GridT,IntersectorT> void LevelSetRayTracer<GridT,IntersectorT)",
    "insertText": "setPixelSamples(size_t pixelSamples, unsigned int seed)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"pixelSamples must be larger than zero!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} mSubPixels = pixelSamples - 1 ; delete [ ] mRand ;)",
    "insertText": "if(mSubPixels > 0)"
  },
  {
    "label": "rand()",
    "kind": "Method",
    "detail": "Function (mRand = new double [ 1 6 ] ; math::Rand01<double>)",
    "insertText": "rand(seed)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (} else { mRand = nullptr ; } } template<GridT,IntersectorT> void LevelSetRayTracer<GridT,IntersectorT)",
    "insertText": "render(bool threaded)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "range(0, mCamera->height())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (threaded ?)",
    "insertText": "parallel_for(range, *this) : (*this)(range)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (const BaseShader& shader =* mShader ; Vec3Type xyz,nml ; const float frac = 1 . 0)",
    "insertText": "f(1.0f + float(mSubPixels))"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (Film::RGBA& bg = mCamera ->)",
    "insertText": "pixel(i,j)"
  },
  {
    "label": "getRay()",
    "kind": "Method",
    "detail": "Function (RayType ray = mCamera ->)",
    "insertText": "getRay(i, j)"
  },
  {
    "label": "intersectsWS()",
    "kind": "Method",
    "detail": "Function (Film::RGBA c = mInter .)",
    "insertText": "intersectsWS(ray, xyz, nml) ? shader(xyz, nml, ray.dir())"
  },
  {
    "label": "getRay()",
    "kind": "Method",
    "detail": "Function (ray = mCamera ->)",
    "insertText": "getRay(i, j, mRand[n & 15], mRand[(n+1) & 15])"
  },
  {
    "label": "VolumeRender()",
    "kind": "Method",
    "detail": "Function (} bg = c* frac ; } } } template<IntersectorT,SampleT> VolumeRender<IntersectorT,SampleT)",
    "insertText": "VolumeRender(const IntersectorT& inter, BaseCamera& camera) : mAccessor(inter.grid().getConstAccessor()) , mCamera(&camera) , mPrimary(new IntersectorT(inter)) , mShadow(new IntersectorT(inter)) , mPrimaryStep(1.0) , mShadowStep(3.0) , mCutOff(0.005) , mLightGain(0.2) , mLightDir(Vec3R(0.3, 0.3, 0).unit()) , mLightColor(0.7, 0.7, 0.7) , mAbsorption(0.1) , mScattering(1.5)"
  },
  {
    "label": "VolumeRender()",
    "kind": "Method",
    "detail": "Function (} template<IntersectorT,SampleT> VolumeRender<IntersectorT,SampleT)",
    "insertText": "VolumeRender(const VolumeRender& other) : mAccessor(other.mAccessor) , mCamera(other.mCamera) , mPrimary(new IntersectorT(*(other.mPrimary))) , mShadow(new IntersectorT(*(other.mShadow))) , mPrimaryStep(other.mPrimaryStep) , mShadowStep(other.mShadowStep) , mCutOff(other.mCutOff) , mLightGain(other.mLightGain) , mLightDir(other.mLightDir) , mLightColor(other.mLightColor) , mAbsorption(other.mAbsorption) , mScattering(other.mScattering)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} template<IntersectorT,SampleT> void VolumeRender<IntersectorT,SampleT)",
    "insertText": "print(std::ostream& os, int verboseLevel)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (os<<\" \\ nPrimary step : \"<<mPrimaryStep<<\" \\ nShadow step : \"<<mShadowStep<<\" \\ nCutoff : \"<<mCutOff<<\" \\ nLightGain : \"<<mLightGain<<\" \\ nLightDir : \"<<mLightDir<<\" \\ nLightColor : \"<<mLightColor<<\" \\ nAbsorption : \"<<mAbsorption<<\" \\ nScattering : \"<<mScattering<<std::endl ; } mPrimary ->)",
    "insertText": "print(os, verboseLevel)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mPrimary .)",
    "insertText": "reset(new IntersectorT(inter))"
  },
  {
    "label": "sampler()",
    "kind": "Method",
    "detail": "Function (SamplerType)",
    "insertText": "sampler(mAccessor, mShadow->grid().transform())"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (const Vec3R extinction = - mScattering - mAbsorption,)",
    "insertText": "One(1.0)"
  },
  {
    "label": "mScattering()",
    "kind": "Method",
    "detail": "Function (const Vec3R albedo = mLightColor*)",
    "insertText": "mScattering(mScattering+mAbsorption)"
  },
  {
    "label": "sRay()",
    "kind": "Method",
    "detail": "Function (const Real sGain = mLightGain ; const Real pStep = mPrimaryStep ; const Real sStep = mShadowStep ; const Real cutoff = mCutOff ; # define USE_HITS # ifdef USE_HITS std::vector<RayType::TimeSpan> pTS,sTS ; # endif RayType)",
    "insertText": "sRay(Vec3R(0), mLightDir)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (Film::RGBA& bg = mCamera ->)",
    "insertText": "pixel(i, j)"
  },
  {
    "label": "pTrans()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "pTrans(1.0), pLumi(0.0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# ifndef USE_HITS Real pT0,pT1 ;)",
    "insertText": "while(mPrimary->march(pT0, pT1))"
  },
  {
    "label": "hits()",
    "kind": "Method",
    "detail": "Function (# else mPrimary ->)",
    "insertText": "hits(pTS)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (Real pT = pStep*)",
    "insertText": "ceil(pTS[k].t0/pStep)"
  },
  {
    "label": "getWorldPos()",
    "kind": "Method",
    "detail": "Function (# endif Vec3R pPos = mPrimary ->)",
    "insertText": "getWorldPos(pT)"
  },
  {
    "label": "wsSample()",
    "kind": "Method",
    "detail": "Function (const Real density = sampler .)",
    "insertText": "wsSample(pPos)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (const Vec3R dT =)",
    "insertText": "Exp(extinction * density * pStep)"
  },
  {
    "label": "sTrans()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "sTrans(1.0)"
  },
  {
    "label": "setEye()",
    "kind": "Method",
    "detail": "Function (sRay .)",
    "insertText": "setEye(pPos)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# ifndef USE_HITS Real sT0,sT1 ;)",
    "insertText": "while(mShadow->march(sT0, sT1))"
  },
  {
    "label": "hits()",
    "kind": "Method",
    "detail": "Function (# else mShadow ->)",
    "insertText": "hits(sTS)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (Real sT = sStep*)",
    "insertText": "ceil(sTS[l].t0/sStep)"
  },
  {
    "label": "wsSample()",
    "kind": "Method",
    "detail": "Function (# endif const Real d = sampler .)",
    "insertText": "wsSample(mShadow->getWorldPos(sT))"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (sTrans* =)",
    "insertText": "Exp(extinction * d * sStep/(1.0+sT*sGain))"
  },
  {
    "label": "pTrans()",
    "kind": "Method",
    "detail": "Function (} } Luminance : pLumi + = albedo* sTrans*)",
    "insertText": "pTrans(One-dT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTrans* = dT ;)",
    "insertText": "if(pTrans.lengthSqr()<cutoff)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (} } Pixel : bg . r = static_cast<Film::)",
    "insertText": "ValueT(pLumi[0])"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (bg . g = static_cast<Film::)",
    "insertText": "ValueT(pLumi[1])"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (bg . b = static_cast<Film::)",
    "insertText": "ValueT(pLumi[2])"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (bg . a = static_cast<Film::)",
    "insertText": "ValueT(1.0f - pTrans.sum()/3.0f)"
  }
]