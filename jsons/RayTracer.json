[
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "BaseCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseCamera"
  },
  {
    "label": "BaseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseShader"
  },
  {
    "label": "LevelSetRayTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetRayTracer"
  },
  {
    "label": "VolumeRender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VolumeRender"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "Film",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Film"
  },
  {
    "label": "RGBA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RGBA"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BaseCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseCamera"
  },
  {
    "label": "PerspectiveCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PerspectiveCamera"
  },
  {
    "label": "OrthographicCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OrthographicCamera"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BaseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseShader"
  },
  {
    "label": "MatteShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatteShader"
  },
  {
    "label": "MatteShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatteShader"
  },
  {
    "label": "NormalShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NormalShader"
  },
  {
    "label": "NormalShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NormalShader"
  },
  {
    "label": "PositionShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PositionShader"
  },
  {
    "label": "PositionShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PositionShader"
  },
  {
    "label": "DiffuseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiffuseShader"
  },
  {
    "label": "DiffuseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiffuseShader"
  },
  {
    "label": "rayTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rayTrace(const GridT&,\n                     const BaseShader&,\n                     BaseCamera&,\n                     size_t pixelSamples = 1,\n                     unsigned int seed = 0,\n                     bool threaded = true)"
  },
  {
    "label": "rayTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rayTrace(const GridT&,\n                     const IntersectorT&,\n                     const BaseShader&,\n                     BaseCamera&,\n                     size_t pixelSamples = 1,\n                     unsigned int seed = 0,\n                     bool threaded = true)"
  },
  {
    "label": "LevelSetRayTracer()",
    "kind": "Method",
    "detail": "Function (constructor)",
    "insertText": "LevelSetRayTracer(const LevelSetRayTracer& other)"
  },
  {
    "label": "setGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGrid(const GridT& grid)"
  },
  {
    "label": "setIntersector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIntersector(const IntersectorT& inter)"
  },
  {
    "label": "setShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShader(const BaseShader& shader)"
  },
  {
    "label": "setCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCamera(BaseCamera& camera)"
  },
  {
    "label": "setPixelSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPixelSamples(size_t pixelSamples, unsigned int seed = 0)"
  },
  {
    "label": "VolumeRender()",
    "kind": "Method",
    "detail": "Function (clone)",
    "insertText": "VolumeRender(const VolumeRender& other)"
  },
  {
    "label": "setIntersector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIntersector(const IntersectorT& inter)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(std::ostream& os = std::cout, int verboseLevel = 1)"
  },
  {
    "label": "RGBA()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RGBA(r*scale, g*scale, b*scale)"
  },
  {
    "label": "RGBA()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RGBA(r+rhs.r, g+rhs.g, b+rhs.b)"
  },
  {
    "label": "RGBA()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RGBA(r*rhs.r, g*rhs.g, b*rhs.b)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "name(fileName)"
  },
  {
    "label": "ray()",
    "kind": "Method",
    "detail": "Function (math::Ray<double>)",
    "insertText": "ray(mRay)"
  },
  {
    "label": "ray()",
    "kind": "Method",
    "detail": "Function (math::Ray<double>)",
    "insertText": "ray(mRay)"
  },
  {
    "label": "tracer()",
    "kind": "Method",
    "detail": "Function (IntersectorT>)",
    "insertText": "tracer(inter, shader, camera, pixelSamples, seed)"
  },
  {
    "label": "rand()",
    "kind": "Method",
    "detail": "Function (math::Rand01<double>)",
    "insertText": "rand(seed)"
  },
  {
    "label": "sTrans()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "sTrans(1.0)"
  }
]