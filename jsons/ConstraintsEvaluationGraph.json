[
  {
    "label": "FConstraintTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintTickFunction"
  },
  {
    "label": "UTickableConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableConstraint"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FConstraintsInWorld",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintsInWorld"
  },
  {
    "label": "FConstraintNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintNode"
  },
  {
    "label": "FConstraintsEvaluationGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintsEvaluationGraph"
  },
  {
    "label": "EGraphState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGraphState"
  },
  {
    "label": "FConstraintsEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" UObject / Object . h \" # include \" Engine / EngineBaseTypes . h \" struct FConstraintTickFunction ; class UTickableConstraint ; class UWorld ; struct FConstraintsInWorld ; struct FConstraintNode { FGuid ConstraintID ; FConstraintTickFunction* ConstraintTick = nullptr ; int32 NodeIndex = INDEX_NONE ; int32 ConstraintIndex = INDEX_NONE ; TSet<uint32> Parents ; TSet<uint32> Children ; bool bMarkedForEvaluation = false ; } ; struct FConstraintsEvaluationGraph : public TSharedFromThis<FConstraintsEvaluationGraph> { public :)",
    "insertText": "FConstraintsEvaluationGraph(const FConstraintsInWorld* InConstraintsInWorld) : ConstraintsInWorld(*InConstraintsInWorld)"
  },
  {
    "label": "MarkForEvaluation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkForEvaluation(const TWeakObjectPtr<UTickableConstraint>& InConstraint)"
  },
  {
    "label": "FlushPendingEvaluations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPendingEvaluations()"
  },
  {
    "label": "InvalidateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateData()"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "IsPendingEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingEvaluation()"
  },
  {
    "label": "GetSortedConstraints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSortedConstraints(TArray<TWeakObjectPtr<UTickableConstraint>>& OutConstraints)"
  },
  {
    "label": "UseEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseEvaluationGraph()"
  },
  {
    "label": "FConstraintsEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (private : enum EGraphState { InvalidData = 0,ReadyForEvaluation,PendingEvaluation,Flushing } ;)",
    "insertText": "FConstraintsEvaluationGraph(FConstraintsEvaluationGraph&& InOther)"
  },
  {
    "label": "FConstraintsEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstraintsEvaluationGraph(const FConstraintsEvaluationGraph& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConstraintsEvaluationGraph&)",
    "insertText": "operator(const FConstraintsEvaluationGraph& InOther)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (FConstraintNode&)",
    "insertText": "GetNode(const TWeakObjectPtr<UTickableConstraint>& InConstraint)"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (FConstraintNode*)",
    "insertText": "FindNode(const TWeakObjectPtr<UTickableConstraint>& InConstraint)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(const TWeakObjectPtr<UTickableConstraint>& InConstraint)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(FConstraintNode* InNode)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump()"
  },
  {
    "label": "BuildGraph()",
    "kind": "Method",
    "detail": "Function (TArray<FConstraintNode> Nodes ; const FConstraintsInWorld& ConstraintsInWorld ; EGraphState State = InvalidData ; } ; namespace UE::Constraints::Graph { using ConstraintPtr = TWeakObjectPtr<UTickableConstraint> ; void)",
    "insertText": "BuildGraph(UWorld* InWorld, const TArrayView<const ConstraintPtr>& InConstraints, TArray<FConstraintNode>& OutNodes)"
  },
  {
    "label": "SortConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortConstraints(UWorld* InWorld, TArray<ConstraintPtr>& InOutConstraints)"
  }
]