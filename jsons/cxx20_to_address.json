[
  {
    "label": "has_std_to_address",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_std_to_address"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CXX20_TO_ADDRESS_H_ # define BASE_CXX20_TO_ADDRESS_H_ # include<memory> # include<type_traits> namespace base { namespace { template<Ptr,= void> struct has_std_to_address : std::false_type { } ; template<Ptr> struct has_std_to_address<Ptr,std::void_t<)",
    "insertText": "decltype(std::pointer_traits<Ptr>::to_address( std::declval<Ptr>()))"
  },
  {
    "label": "to_address()",
    "kind": "Method",
    "detail": "Function (} ; } template<T> T*)",
    "insertText": "to_address(T* p)"
  },
  {
    "label": "to_address()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "to_address(p.operator->())"
  }
]