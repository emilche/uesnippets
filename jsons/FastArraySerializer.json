[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FFastArraySerializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArraySerializer"
  },
  {
    "label": "FFastArraySerializerItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArraySerializerItem"
  },
  {
    "label": "FExampleItemEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExampleItemEntry"
  },
  {
    "label": "FExampleArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExampleArray"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "TFastArrayTypeHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFastArrayTypeHelper"
  },
  {
    "label": "CGetFastArrayItemTypeFuncable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CGetFastArrayItemTypeFuncable"
  },
  {
    "label": "FNetFastTArrayBaseState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetFastTArrayBaseState"
  },
  {
    "label": "FFastArraySerializerGuidReferences",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArraySerializerGuidReferences"
  },
  {
    "label": "FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPostReplicatedReceiveParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostReplicatedReceiveParameters"
  },
  {
    "label": "CPostReplicatedReceiveFuncable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CPostReplicatedReceiveFuncable"
  },
  {
    "label": "FFastArraySerializerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArraySerializerHeader"
  },
  {
    "label": "TFastArraySerializeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFastArraySerializeHelper"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "FFastArrayDeltaSerializeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArrayDeltaSerializeParams"
  },
  {
    "label": "FFastArrayItemCallbackHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArrayItemCallbackHelper"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Serialization / BitReader . h \" # include \" Misc / NetworkGuid . h \" # include \" UObject / CoreNet . h \" # include \" Containers / ArrayView . h \" # include \" Net / Core / Misc / GuidReferences . h \" # include \" Net / Core / PushModel / PushModel . h \" # include \" Net / Core / NetCoreModule . h \" # include \" HAL / IConsoleManager . h \" # include \" Templates / EnableIf . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" FastArraySerializer . generated . h \" class Error ; struct FFastArraySerializer ; struct FFastArraySerializerItem ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNetFastTArray, Warning, All)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"NetSerializeFast Array\"), STAT_NetSerializeFastArray, STATGROUP_ServerCPU, NETCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"NetSerializeFast Array BuildMap\"), STAT_NetSerializeFastArray_BuildMap, STATGROUP_ServerCPU, NETCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"NetSerializeFast Array Delta Struct\"), STAT_NetSerializeFastArray_DeltaStruct, STATGROUP_ServerCPU, NETCORE_API)"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_MODULE_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_DECLARE_CATEGORY_MODULE_EXTERN(NETCORE_API, Networking)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "PreReplicatedRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReplicatedRemove(const struct FExampleArray& InArraySerializer)"
  },
  {
    "label": "PostReplicatedAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReplicatedAdd(const struct FExampleArray& InArraySerializer)"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReplicatedChange(const struct FExampleArray& InArraySerializer)"
  },
  {
    "label": "GetDebugString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugString()"
  },
  {
    "label": "NetDeltaSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetDeltaSerialize(FNetDeltaSerializeInfo & DeltaParms)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TStructOpsTypeTraits<FExampleArray> : public TStructOpsTypeTraitsBase2<FExampleArray> { enum { WithNetDeltaSerializer = true,} ; } ; # endif template<FastArrayType> class TFastArrayTypeHelper { private : struct CGetFastArrayItemTypeFuncable { template<InFastArrayType,. . .> auto)",
    "insertText": "Requires(InFastArrayType* FastArray) -> decltype(FastArray->GetFastArrayItemTypePtr())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} ; auto FastArrayTypePtr = [ ] { if)",
    "insertText": "constexpr(TModels_V<CGetFastArrayItemTypeFuncable, FastArrayType>)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "int(nullptr)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : using FastArrayItemType = TRemovePointer<std::decay<)",
    "insertText": "decltype(FastArrayTypePtr)"
  },
  {
    "label": "HasValidFastArrayItemType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidFastArrayItemType()"
  },
  {
    "label": "IsStateEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStateEqual(INetDeltaBaseState* OtherState)"
  },
  {
    "label": "FNetFastTArrayBaseState()",
    "kind": "Method",
    "detail": "Function (FNetFastTArrayBaseState* Other = static_cast<)",
    "insertText": "FNetFastTArrayBaseState(OtherState)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (auto Ptr = Other -> IDToCLMap .)",
    "insertText": "Find(It.Key())"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (IDToCLMap .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FFastArraySerializerItem() : ReplicationID(INDEX_NONE), ReplicationKey(INDEX_NONE), MostRecentArrayReplicationKey(INDEX_NONE)"
  },
  {
    "label": "FFastArraySerializerItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFastArraySerializerItem(const FFastArraySerializerItem &InItem) : ReplicationID(INDEX_NONE), ReplicationKey(INDEX_NONE), MostRecentArrayReplicationKey(INDEX_NONE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFastArraySerializerItem&)",
    "insertText": "operator(const FFastArraySerializerItem& In)"
  },
  {
    "label": "PostReplicatedAdd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostReplicatedAdd(const struct FFastArraySerializer& InArraySerializer)"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostReplicatedChange(const struct FFastArraySerializer& InArraySerializer)"
  },
  {
    "label": "FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFastArraySerializerGuidReferences { TSet<FNetworkGUID> UnmappedGUIDs ; TSet<FNetworkGUID> MappedDynamicGUIDs ; TArray<uint8> Buffer ; int32 NumBufferBits ; } ; struct FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair {)",
    "insertText": "FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair(int32 _idx, int32 _id) : Idx(_idx), ID(_id)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} int32 Idx ; int32 ID ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None,HasBeenSerialized = 1<<0,HasDeltaBeenRequested = 1<<1,IsUsingDeltaSerialization = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EFastArraySerializerDeltaFlags)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FFastArraySerializer() : IDCounter(0) , ArrayReplicationKey(0) #if WITH_PUSH_MODEL , OwningObject(nullptr) , RepIndex(INDEX_NONE) #endif , CachedNumItems(INDEX_NONE) , CachedNumItemsToConsiderForWriting(INDEX_NONE) , DeltaFlags(EFastArraySerializerDeltaFlags::None)"
  },
  {
    "label": "SetDeltaSerializationEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeltaSerializationEnabled(true)"
  },
  {
    "label": "FFastArraySerializer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFastArraySerializer()"
  },
  {
    "label": "MarkItemDirty()",
    "kind": "Method",
    "detail": "Function (TMap<int32,FFastArraySerializerGuidReferences> GuidReferencesMap ; TMap<int32,FGuidReferencesMap> GuidReferencesMap_StructDelta ; # if WITH_PUSH_MODEL UObject* OwningObject ; int32 RepIndex ; # endif void)",
    "insertText": "MarkItemDirty(FFastArraySerializerItem & Item)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Item . ReplicationID = + + IDCounter ;)",
    "insertText": "if(IDCounter == INDEX_NONE)"
  },
  {
    "label": "MarkArrayDirty()",
    "kind": "Method",
    "detail": "Function (IDCounter + + ; } } Item . ReplicationKey + + ;)",
    "insertText": "MarkArrayDirty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ItemMap .)",
    "insertText": "Reset()"
  },
  {
    "label": "IncrementArrayReplicationKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementArrayReplicationKey()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArrayReplicationKey + + ;)",
    "insertText": "if(ArrayReplicationKey == INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArrayReplicationKey + + ; } # if WITH_PUSH_MODEL)",
    "insertText": "if(OwningObject != nullptr && RepIndex != INDEX_NONE)"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_UNSAFE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MARK_PROPERTY_DIRTY_UNSAFE(OwningObject, RepIndex)"
  },
  {
    "label": "FastArrayDeltaSerialize()",
    "kind": "Method",
    "detail": "Function (} # endif } template<Type,SerializerType> bool)",
    "insertText": "FastArrayDeltaSerialize(TArray<Type>& Items, FNetDeltaSerializeInfo& Parms, SerializerType& ArraySerializer)"
  },
  {
    "label": "PostReplicatedAdd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostReplicatedAdd(const TArrayView<int32>& AddedIndices, int32 FinalSize)"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostReplicatedChange(const TArrayView<int32>& ChangedIndices, int32 FinalSize)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} ; struct CPostReplicatedReceiveFuncable { template<InFastArrayType,. . .> auto)",
    "insertText": "Requires(InFastArrayType* FastArray, const FFastArraySerializer::FPostReplicatedReceiveParameters& Parameters) -> decltype(FastArray->PostReplicatedReceive(Parameters))"
  },
  {
    "label": "ShouldWriteFastArrayItem()",
    "kind": "Method",
    "detail": "Function (} ; template<Type,SerializerType> bool)",
    "insertText": "ShouldWriteFastArrayItem(const Type& Item, const bool bIsWritingOnClient)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (DeltaFlags | = EFastArraySerializerDeltaFlags::HasDeltaBeenRequested ; } else { DeltaFlags& = ~ EFastArraySerializerDeltaFlags::HasDeltaBeenRequested ; } } else {)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\"FFastArraySerializer::SetDeltaSerializationEnabled - Called after array has been serialized. Ignoring\"))"
  },
  {
    "label": "GetDeltaSerializationFlags()",
    "kind": "Method",
    "detail": "Function (} } const EFastArraySerializerDeltaFlags)",
    "insertText": "GetDeltaSerializationFlags()"
  },
  {
    "label": "ConditionalRebuildItemMap()",
    "kind": "Method",
    "detail": "Function (OwningObject = Object ; RepIndex = PropertyRepIndex ; } } # endif private : int32 MaxNumberOfAllowedChangesPerUpdate ; int32 MaxNumberOfAllowedDeletionsPerUpdate ; FAutoConsoleVariableRef CVarMaxNumberOfAllowedChangesPerUpdate ; FAutoConsoleVariableRef CVarMaxNumberOfAllowedDeletionsPerUpdate ; struct FFastArraySerializerHeader { int32 ArrayReplicationKey ; int32 BaseReplicationKey ; int32 NumChanged ; TArray<int32,TInlineAllocator<8>> DeletedIndices ; } ; template<Type,SerializerType> struct TFastArraySerializeHelper { UScriptStruct* Struct ; TArray<Type>& Items ; SerializerType& ArraySerializer ; FNetDeltaSerializeInfo& Parms ; void)",
    "insertText": "ConditionalRebuildItemMap()"
  },
  {
    "label": "CalcNumItemsForConsideration()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalcNumItemsForConsideration()"
  },
  {
    "label": "ConditionalLogSerializerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalLogSerializerState(const TMap<int32, int32>* OldIDToKeyMap)"
  },
  {
    "label": "ConditionalCreateNewDeltaState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalCreateNewDeltaState(const TMap<int32, int32>& OldIDToKeyMap, const int32 BaseReplicationKey)"
  },
  {
    "label": "BuildChangedAndDeletedBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildChangedAndDeletedBuffers(TMap<int32, int32>& NewIDToKeyMap, const TMap<int32, int32>* OldIDToKeyMap, TArray<FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair, TInlineAllocator<8>>& ChangedElements, TArray<int32, TInlineAllocator<8>>& DeletedElements)"
  },
  {
    "label": "BuildChangedAndDeletedBuffersFromDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildChangedAndDeletedBuffersFromDefault(TMap<int32, int32>& NewIDToKeyMap, TArray<FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair, TInlineAllocator<8>>& ChangedElements)"
  },
  {
    "label": "WriteDeltaHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDeltaHeader(FFastArraySerializerHeader& Header)"
  },
  {
    "label": "ReadDeltaHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadDeltaHeader(FFastArraySerializerHeader& Header)"
  },
  {
    "label": "PostReceiveCleanup()",
    "kind": "Method",
    "detail": "Function (template<GuidMapType> void)",
    "insertText": "PostReceiveCleanup(FFastArraySerializerHeader& Header, TArray<int32, TInlineAllocator<8>>& ChangedIndices, TArray<int32, TInlineAllocator<8>>& AddedIndices, GuidMapType& GuidMap)"
  },
  {
    "label": "CallPostReplicatedReceiveOrNot()",
    "kind": "Method",
    "detail": "Function (template<FastArrayType = SerializerType> TEnableIf<TModels_V<CPostReplicatedReceiveFuncable,FastArrayType,const FFastArraySerializer::FPostReplicatedReceiveParameters>,void>::Type)",
    "insertText": "CallPostReplicatedReceiveOrNot(int32 OldArraySize)"
  },
  {
    "label": "PostReplicatedReceive()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS FFastArraySerializer::FPostReplicatedReceiveParameters PostReceivedParameters = { OldArraySize,Parms . bOutHasMoreUnmapped } ; ArraySerializer .)",
    "insertText": "PostReplicatedReceive(PostReceivedParameters)"
  },
  {
    "label": "CallPostReplicatedReceiveOrNot()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } template<FastArrayType = SerializerType> TEnableIf<! TModels_V<CPostReplicatedReceiveFuncable,FastArrayType,const FFastArraySerializer::FPostReplicatedReceiveParameters>,void>::Type)",
    "insertText": "CallPostReplicatedReceiveOrNot(int32)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(std::is_same_v<typename TFastArrayTypeHelper<SerializerType>::FastArrayItemType, Type>, \"Auto deduced FastArrayItemType is invalid or differs from the specified type. Make sure that the FastArraySerializer has a single replicated array property.\")"
  },
  {
    "label": "FastArrayDeltaSerialize_DeltaSerializeStructs()",
    "kind": "Method",
    "detail": "Function (} ; template<Type,SerializerType> bool)",
    "insertText": "FastArrayDeltaSerialize_DeltaSerializeStructs(TArray<Type>& Items, FNetDeltaSerializeInfo& Parms, SerializerType& ArraySerializer)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_NetSerializeFastArray_BuildMap)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ArraySerializer . ItemMap .)",
    "insertText": "Empty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { continue ; } } ArraySerializer . ItemMap .)",
    "insertText": "Add(Items[i].ReplicationID, i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ;)",
    "insertText": "for(const Type& Item : Items)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString CurrentState =)",
    "insertText": "Printf(TEXT(\"Current: %d \"), ArraySerializer.ArrayReplicationKey)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (CurrentState + =)",
    "insertText": "Printf(TEXT(\"[%d/%d], \"), Item.ReplicationID, Item.ReplicationKey)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\"%s\"), *CurrentState)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString ClientStateStr =)",
    "insertText": "Printf(TEXT(\"Client: %d \"), Parms.OldState ? ((FNetFastTArrayBaseState*)Parms.OldState)->ArrayReplicationKey : 0)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (ClientStateStr + =)",
    "insertText": "Printf(TEXT(\"[%d/%d], \"), KeyValuePair.Key, KeyValuePair.Value)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\"%s\"), *ClientStateStr)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (ArraySerializer . CachedNumItems = Items .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UNLIKELY(OldIDToKeyMap.Num() != ArraySerializer.CachedNumItemsToConsiderForWriting))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Parms.OldState)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (* Parms . NewState = Parms . OldState ->)",
    "insertText": "AsShared()"
  },
  {
    "label": "FNetFastTArrayBaseState()",
    "kind": "Method",
    "detail": "Function (} else { FNetFastTArrayBaseState* NewState = new)",
    "insertText": "FNetFastTArrayBaseState()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (* Parms . NewState =)",
    "insertText": "MakeShareable(NewState)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Type& Item = Items [ i ] ;)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" Array[%d] - ID %d. CL %d.\"), i, Item.ReplicationID, Item.ReplicationKey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(Item.ReplicationID == INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (continue ; } NewIDToKeyMap .)",
    "insertText": "Add(Item.ReplicationID, Item.ReplicationKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChangedElements .)",
    "insertText": "Add(FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair(i, Item.ReplicationID))"
  },
  {
    "label": "ConditionalLogSerializerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalLogSerializerState(OldIDToKeyMap)"
  },
  {
    "label": "DeleteCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteCount(OldIDToKeyMap ? OldIDToKeyMap->Num() : 0)"
  },
  {
    "label": "MarkItemDirty()",
    "kind": "Method",
    "detail": "Function (ArraySerializer .)",
    "insertText": "MarkItemDirty(Item)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* OldValuePtr = OldIDToKeyMap ? OldIDToKeyMap ->)",
    "insertText": "Find(Item.ReplicationID)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (continue ; } else {)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" Changed! Was: %d. Element ID: %d. %s\"), *OldValuePtr, Item.ReplicationID, *Item.GetDebugString())"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" New! Element ID: %d. %s\"), Item.ReplicationID, *Item.GetDebugString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + DeleteCount ; } })",
    "insertText": "if(DeleteCount > 0 && OldIDToKeyMap)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DeletedElements .)",
    "insertText": "Add(It.Key())"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Writer<<NumDeletes ; Writer<<Header . NumChanged ;)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" Writing Bunch. NumChange: %d. NumDel: %d [%d/%d]\"), Header.NumChanged, Header.DeletedIndices.Num(), Header.ArrayReplicationKey, Header.BaseReplicationKey)"
  },
  {
    "label": "GetMaxNumberOfAllowedDeletionsPerUpdate()",
    "kind": "Method",
    "detail": "Function (const int32 MaxNumDeleted =)",
    "insertText": "GetMaxNumberOfAllowedDeletionsPerUpdate()"
  },
  {
    "label": "GetMaxNumberOfAllowedChangesPerUpdate()",
    "kind": "Method",
    "detail": "Function (const int32 MaxNumChanged =)",
    "insertText": "GetMaxNumberOfAllowedChangesPerUpdate()"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(NumDeletes > MaxNumDeleted, LogNetFastTArray, Warning, TEXT(\"NumDeletes > GetMaxNumberOfAllowedDeletionsPerUpdate: %d > %d. (Write)\"), NumDeletes, MaxNumDeleted)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(Header.NumChanged > MaxNumChanged, LogNetFastTArray, Warning, TEXT(\"NumChanged > GetMaxNumberOfAllowedChangesPerUpdate: %d > %d. (Write)\"), Header.NumChanged, MaxNumChanged)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (int32 ID =* It ; Writer<<ID ;)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" Deleted ElementID: %d\"), ID)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (FBitReader& Reader =* Parms . Reader ; Reader<<Header . ArrayReplicationKey ; Reader<<Header . BaseReplicationKey ; int32 NumDeletes = 0 ; Reader<<NumDeletes ;)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\"Received [%d/%d].\"), Header.ArrayReplicationKey, Header.BaseReplicationKey)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "SetError()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 ElementID = 0 ; Reader<<ElementID ; int32* ElementIndexPtr = ArraySerializer . ItemMap .)",
    "insertText": "Find(ElementID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 DeleteIndex =* ElementIndexPtr ; Header . DeletedIndices .)",
    "insertText": "Add(DeleteIndex)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" Couldn't find ElementID: %d for deletion!\"), ElementID)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_TIMING_STAT(Networking, FastArray_Apply)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Type& Item = Items [ idx ] ;)",
    "insertText": "if(Item.MostRecentArrayReplicationKey < Header.ArrayReplicationKey && Item.MostRecentArrayReplicationKey > Header.BaseReplicationKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Header . DeletedIndices .)",
    "insertText": "Add(idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(Header.DeletedIndices.Num() > 0 || Header.NumChanged > 0)"
  },
  {
    "label": "PreReplicatedRemove()",
    "kind": "Method",
    "detail": "Function (Parms . bGuidListsChanged = true ; } Items [ idx ] .)",
    "insertText": "PreReplicatedRemove(ArraySerializer)"
  },
  {
    "label": "PreReplicatedRemove()",
    "kind": "Method",
    "detail": "Function (} } ArraySerializer .)",
    "insertText": "PreReplicatedRemove(Header.DeletedIndices, FinalSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 idx : AddedIndices)"
  },
  {
    "label": "PostReplicatedAdd()",
    "kind": "Method",
    "detail": "Function (Items [ idx ] .)",
    "insertText": "PostReplicatedAdd(ArraySerializer)"
  },
  {
    "label": "PostReplicatedAdd()",
    "kind": "Method",
    "detail": "Function (} ArraySerializer .)",
    "insertText": "PostReplicatedAdd(AddedIndices, FinalSize)"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (Items [ idx ] .)",
    "insertText": "PostReplicatedChange(ArraySerializer)"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (} ArraySerializer .)",
    "insertText": "PostReplicatedChange(ChangedIndices, FinalSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Header.DeletedIndices.Num() > 0)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Header . DeletedIndices .)",
    "insertText": "Sort()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 DeleteIndex = Header . DeletedIndices [ i ] ;)",
    "insertText": "if(Items.IsValidIndex(DeleteIndex))"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "RemoveAtSwap(DeleteIndex, EAllowShrinking::No)"
  },
  {
    "label": "FastArrayDeltaSerialize()",
    "kind": "Method",
    "detail": "Function (} } template<Type,SerializerType> bool)",
    "insertText": "FastArrayDeltaSerialize(TArray<Type> &Items, FNetDeltaSerializeInfo& Parms, SerializerType& ArraySerializer)"
  },
  {
    "label": "CONDITIONAL_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CONDITIONAL_SCOPE_CYCLE_COUNTER(STAT_NetSerializeFastArray, GUseDetailedScopeCounters)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (class UScriptStruct* InnerStruct =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (const FFastArraySerializerGuidReferences& GuidReferences = GuidReferencesPair . Value ; Parms . GatherGuidReferences ->)",
    "insertText": "Append(GuidReferences.UnmappedGUIDs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Parms . GatherGuidReferences ->)",
    "insertText": "Append(GuidReferences.MappedDynamicGUIDs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } return true ; })",
    "insertText": "if(Parms.MoveGuidToUnmapped)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bFound = false ; const FNetworkGUID GUID =* Parms . MoveGuidToUnmapped ;)",
    "insertText": "for(auto& GuidReferencesPair : ArraySerializer.GuidReferencesMap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FFastArraySerializerGuidReferences& GuidReferences = GuidReferencesPair . Value ;)",
    "insertText": "if(GuidReferences.MappedDynamicGUIDs.Contains( GUID ))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (GuidReferences . MappedDynamicGUIDs .)",
    "insertText": "Remove(GUID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GuidReferences . UnmappedGUIDs .)",
    "insertText": "Add(GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bFound = true ; } } return bFound ; })",
    "insertText": "if(Parms.bUpdateUnmappedObjects)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<int32,TInlineAllocator<8>> ChangedIndices ;)",
    "insertText": "for(auto It = ArraySerializer.GuidReferencesMap.CreateIterator(); It; ++It)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (const int32 ElementID = It .)",
    "insertText": "Key()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (FFastArraySerializerGuidReferences& GuidReferences = It .)",
    "insertText": "Value()"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (It .)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; } bool bMappedSomeGUIDs = false ;)",
    "insertText": "for(auto UnmappedIt = GuidReferences.UnmappedGUIDs.CreateIterator(); UnmappedIt; ++UnmappedIt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FNetworkGUID& GUID =* UnmappedIt ;)",
    "insertText": "if(Parms.Map->IsGUIDBroken( GUID, false ))"
  },
  {
    "label": "GetObjectFromNetGUID()",
    "kind": "Method",
    "detail": "Function (continue ; } UObject* Object = Parms . Map ->)",
    "insertText": "GetObjectFromNetGUID(GUID, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bMappedSomeGUIDs = true ; } })",
    "insertText": "if(bMappedSomeGUIDs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parms . bOutSomeObjectsWereMapped = true ;)",
    "insertText": "if(!Parms.bCalledPreNetReceive)"
  },
  {
    "label": "PreNetReceive()",
    "kind": "Method",
    "detail": "Function (Parms . Object ->)",
    "insertText": "PreNetReceive()"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (Parms . bCalledPreNetReceive = true ; } const int32 ElementIndex = ArraySerializer . ItemMap .)",
    "insertText": "FindChecked(ElementID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Type* ThisElement =& Items [ ElementIndex ] ; ChangedIndices .)",
    "insertText": "Add(ElementIndex)"
  },
  {
    "label": "Reader()",
    "kind": "Method",
    "detail": "Function (FNetBitReader)",
    "insertText": "Reader(Parms.Map, GuidReferences.Buffer.GetData(), GuidReferences.NumBufferBits)"
  },
  {
    "label": "NetSerializeStruct()",
    "kind": "Method",
    "detail": "Function (Parms . Struct = InnerStruct ; Parms . Data = ThisElement ; Parms . Reader =& Reader ; Parms . NetSerializeCB ->)",
    "insertText": "NetSerializeStruct(Parms)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GuidReferences.UnmappedGUIDs.Num() == 0 && GuidReferences.MappedDynamicGUIDs.Num() == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ArraySerializer.GuidReferencesMap.Num() > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parms . bOutHasMoreUnmapped = true ; })",
    "insertText": "if(Parms.bOutSomeObjectsWereMapped)"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (ArraySerializer .)",
    "insertText": "PostReplicatedChange(ChangedIndices, Items.Num())"
  },
  {
    "label": "CallPostReplicatedReceiveOrNot()",
    "kind": "Method",
    "detail": "Function (Helper .)",
    "insertText": "CallPostReplicatedReceiveOrNot(Items.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return true ; })",
    "insertText": "if(!EnumHasAnyFlags(ArraySerializer.DeltaFlags, EFastArraySerializerDeltaFlags::HasBeenSerialized))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArraySerializer . DeltaFlags | = EFastArraySerializerDeltaFlags::HasBeenSerialized ;)",
    "insertText": "if(Parms.bSupportsFastArrayDeltaStructSerialization && EnumHasAnyFlags(ArraySerializer.DeltaFlags, EFastArraySerializerDeltaFlags::HasDeltaBeenRequested))"
  },
  {
    "label": "FastArrayDeltaSerialize_DeltaSerializeStructs()",
    "kind": "Method",
    "detail": "Function (ArraySerializer . DeltaFlags | = EFastArraySerializerDeltaFlags::IsUsingDeltaSerialization ; return)",
    "insertText": "FastArrayDeltaSerialize_DeltaSerializeStructs(Items, Parms, ArraySerializer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Parms.Writer)"
  },
  {
    "label": "OldMap()",
    "kind": "Method",
    "detail": "Function (IDToCLMap)",
    "insertText": "OldMap((FNetFastTArrayBaseState*)Parms.OldState)"
  },
  {
    "label": "BaseReplicationKey()",
    "kind": "Method",
    "detail": "Function (ArrayReplicationKey)",
    "insertText": "BaseReplicationKey((FNetFastTArrayBaseState*)Parms.OldState)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TMap<int32,int32>& NewMap = NewState -> IDToCLMap ; NewState -> ArrayReplicationKey = ArraySerializer . ArrayReplicationKey ; FFastArraySerializerHeader Header { ArraySerializer . ArrayReplicationKey,BaseReplicationKey,0 } ; TArray<FFastArraySerializer_FastArrayDeltaSerialize_FIdxIDPair,TInlineAllocator<8>> ChangedElements ;)",
    "insertText": "if(Parms.bIsInitializingBaseFromDefault)"
  },
  {
    "label": "BuildChangedAndDeletedBuffersFromDefault()",
    "kind": "Method",
    "detail": "Function (Helper .)",
    "insertText": "BuildChangedAndDeletedBuffersFromDefault(NewMap, ChangedElements)"
  },
  {
    "label": "BuildChangedAndDeletedBuffers()",
    "kind": "Method",
    "detail": "Function (} else { Helper .)",
    "insertText": "BuildChangedAndDeletedBuffers(NewMap, OldMap, ChangedElements, Header.DeletedIndices)"
  },
  {
    "label": "WriteDeltaHeader()",
    "kind": "Method",
    "detail": "Function (Helper .)",
    "insertText": "WriteDeltaHeader(Header)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (void* ThisElement =& Items [ It -> Idx ] ; uint32 ID = It -> ID ; Writer<<ID ;)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" Changed ElementID: %d\"), ID)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\"FastArrayDeltaSerialize for %s. %s. Reading\"), *InnerStruct->GetName(), *InnerStruct->GetOwnerStruct()->GetName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FBitReader& Reader =* Parms . Reader ; FFastArraySerializerHeader Header ;)",
    "insertText": "if(!Helper.ReadDeltaHeader(Header))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<int32,TInlineAllocator<8>> ChangedIndices ; TArray<int32,TInlineAllocator<8>> AddedIndices ;)",
    "insertText": "for(int32 i = 0; i < Header.NumChanged; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ElementIndex = 0 ; Type* ThisElement = nullptr ;)",
    "insertText": "if(!ElementIndexPtr)"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (ThisElement =& Items .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ArraySerializer . ItemMap .)",
    "insertText": "Add(ElementID, ElementIndex)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\" Changed. ID: %d -> Idx: %d\"), ElementID, *ElementIndexPtr)"
  },
  {
    "label": "ResetTrackedGuids()",
    "kind": "Method",
    "detail": "Function (} ThisElement -> MostRecentArrayReplicationKey = Header . ArrayReplicationKey ; ThisElement -> ReplicationKey + + ; Parms . Map ->)",
    "insertText": "ResetTrackedGuids(true)"
  },
  {
    "label": "Mark()",
    "kind": "Method",
    "detail": "Function (FBitReaderMark)",
    "insertText": "Mark(Reader)"
  },
  {
    "label": "GetTrackedUnmappedGuids()",
    "kind": "Method",
    "detail": "Function (const TSet<FNetworkGUID>& TrackedUnmappedGuids = Parms . Map ->)",
    "insertText": "GetTrackedUnmappedGuids()"
  },
  {
    "label": "GetTrackedDynamicMappedGuids()",
    "kind": "Method",
    "detail": "Function (const TSet<FNetworkGUID>& TrackedMappedDynamicGuids = Parms . Map ->)",
    "insertText": "GetTrackedDynamicMappedGuids()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FFastArraySerializerGuidReferences& GuidReferences = ArraySerializer . GuidReferencesMap .)",
    "insertText": "FindOrAdd(ElementID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GuidReferences . UnmappedGUIDs = TrackedUnmappedGuids ; Parms . bGuidListsChanged = true ; })",
    "insertText": "if(!NetworkGuidSetsAreSame( GuidReferences.MappedDynamicGUIDs, TrackedMappedDynamicGuids ))"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (GuidReferences . NumBufferBits =)",
    "insertText": "int32(Reader.GetPosBits() - Mark.GetPos())"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (Mark .)",
    "insertText": "Copy(Reader, GuidReferences.Buffer)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Parms . bOutHasMoreUnmapped = true ; } } else { ArraySerializer . GuidReferencesMap .)",
    "insertText": "Remove(ElementID)"
  },
  {
    "label": "ResetTrackedGuids()",
    "kind": "Method",
    "detail": "Function (} } Parms . Map ->)",
    "insertText": "ResetTrackedGuids(false)"
  },
  {
    "label": "CallPostReplicatedReceiveOrNot()",
    "kind": "Method",
    "detail": "Function (Helper .)",
    "insertText": "CallPostReplicatedReceiveOrNot(OldNumItems)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} return true ; } struct FFastArrayDeltaSerializeParams { FNetDeltaSerializeInfo& DeltaSerializeInfo ; FFastArraySerializer& ArraySerializer ; const TFunction<)",
    "insertText": "void(void*, const FFastArrayDeltaSerializeParams&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const TFunction<)",
    "insertText": "void(void*, const FFastArrayDeltaSerializeParams&, const uint32)"
  },
  {
    "label": "PreReplicatedRemove()",
    "kind": "Method",
    "detail": "Function (struct FFastArrayItemCallbackHelper { void)",
    "insertText": "PreReplicatedRemove(void* FastArrayItem, const struct FFastArrayDeltaSerializeParams& Params)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<)",
    "insertText": "Type(FastArrayItem)->PreReplicatedRemove(static_cast<SerializerType&>(Params.ArraySerializer))"
  },
  {
    "label": "PostReplicatedAdd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostReplicatedAdd(void* FastArrayItem, const struct FFastArrayDeltaSerializeParams& Params)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<)",
    "insertText": "Type(FastArrayItem)->PostReplicatedAdd(static_cast<SerializerType&>(Params.ArraySerializer))"
  },
  {
    "label": "PostReplicatedChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostReplicatedChange(void* FastArrayItem, const struct FFastArrayDeltaSerializeParams& Params)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<)",
    "insertText": "Type(FastArrayItem)->PostReplicatedChange(static_cast<SerializerType&>(Params.ArraySerializer))"
  },
  {
    "label": "ReceivedItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReceivedItem(void* FastArrayItem, const FFastArrayDeltaSerializeParams& Params, const uint32 ReplicationID)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (Type* Item = reinterpret_cast<)",
    "insertText": "Type(FastArrayItem)"
  },
  {
    "label": "CONDITIONAL_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (Item -> ReplicationID = ReplicationID ; Item -> MostRecentArrayReplicationKey = Params . ReadArrayReplicationKey ; Item -> ReplicationKey + + ; } } ;)",
    "insertText": "CONDITIONAL_SCOPE_CYCLE_COUNTER(STAT_NetSerializeFastArray_DeltaStruct, GUseDetailedScopeCounters)"
  },
  {
    "label": "GatherGuidReferencesForFastArray()",
    "kind": "Method",
    "detail": "Function (Parms . NetSerializeCB ->)",
    "insertText": "GatherGuidReferencesForFastArray(DeltaSerializeParams)"
  },
  {
    "label": "UpdateUnmappedGuidsForFastArray()",
    "kind": "Method",
    "detail": "Function (TArray<int32,TInlineAllocator<8>> ChangedIndices ; DeltaSerializeParams . ReadChangedElements =& ChangedIndices ; Parms . NetSerializeCB ->)",
    "insertText": "UpdateUnmappedGuidsForFastArray(DeltaSerializeParams)"
  },
  {
    "label": "OldItemMap()",
    "kind": "Method",
    "detail": "Function (IDToCLMap)",
    "insertText": "OldItemMap((FNetFastTArrayBaseState*)Parms.OldState)"
  },
  {
    "label": "GetChangelistHistory()",
    "kind": "Method",
    "detail": "Function (OldChangelistHistory = Parms . OldState ->)",
    "insertText": "GetChangelistHistory()"
  },
  {
    "label": "GetLastAckedHistory()",
    "kind": "Method",
    "detail": "Function (OldLastAckedHistory = Parms . OldState ->)",
    "insertText": "GetLastAckedHistory()"
  },
  {
    "label": "BuildChangedAndDeletedBuffersFromDefault()",
    "kind": "Method",
    "detail": "Function (Helper .)",
    "insertText": "BuildChangedAndDeletedBuffersFromDefault(NewItemMap, ChangedElements)"
  },
  {
    "label": "BuildChangedAndDeletedBuffers()",
    "kind": "Method",
    "detail": "Function (} else { Helper .)",
    "insertText": "BuildChangedAndDeletedBuffers(NewItemMap, OldItemMap, ChangedElements, Header.DeletedIndices)"
  },
  {
    "label": "SetChangelistHistory()",
    "kind": "Method",
    "detail": "Function (NewState ->)",
    "insertText": "SetChangelistHistory(OldChangelistHistory)"
  },
  {
    "label": "SetLastAckedHistory()",
    "kind": "Method",
    "detail": "Function (NewState ->)",
    "insertText": "SetLastAckedHistory(OldLastAckedHistory)"
  },
  {
    "label": "NetDeltaSerializeForFastArray()",
    "kind": "Method",
    "detail": "Function (DeltaSerializeParams . WriteChangedElements =& ChangedElements ; DeltaSerializeParams . WriteBaseState = NewState ; return Parms . NetSerializeCB ->)",
    "insertText": "NetDeltaSerializeForFastArray(DeltaSerializeParams)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogNetFastTArray, Log, TEXT(\"FastArrayDeltaSerialize_DeltaSerializeStruct for %s. %s. Reading\"), *InnerStruct->GetName(), *InnerStruct->GetOwnerStruct()->GetName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<int32,TInlineAllocator<8>> ChangedIndices ; TArray<int32,TInlineAllocator<8>> AddedIndices ; DeltaSerializeParams . ReadAddedElements =& AddedIndices ; DeltaSerializeParams . ReadChangedElements =& ChangedIndices ; DeltaSerializeParams . ReadNumChanged = Header . NumChanged ; DeltaSerializeParams . ReadArrayReplicationKey = Header . ArrayReplicationKey ;)",
    "insertText": "if(!Parms.NetSerializeCB->NetDeltaSerializeForFastArray(DeltaSerializeParams))"
  },
  {
    "label": "UE_NET_DECLARE_FASTARRAY()",
    "kind": "Method",
    "detail": "Function (} return true ; } # if UE_WITH_IRIS # define)",
    "insertText": "UE_NET_DECLARE_FASTARRAY(FastArrayType, FastArrayItemArrayMemberName, Api) \\ static constexpr auto GetFastArrayItemTypePtr()"
  },
  {
    "label": "GetFastArrayCreateReplicationFragmentFunction()",
    "kind": "Method",
    "detail": "Function (} ; \\ Api UE::Net::CreateAndRegisterReplicationFragmentFunc)",
    "insertText": "GetFastArrayCreateReplicationFragmentFunction()"
  },
  {
    "label": "UE_NET_DECLARE_FASTARRAY()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "UE_NET_DECLARE_FASTARRAY(FastArrayType, FastArrayItemArrayMemberName, Api) static constexpr auto GetFastArrayItemTypePtr()"
  }
]