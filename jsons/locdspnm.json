[
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "LocaleDisplayNames()",
    "kind": "Method",
    "detail": "Function (# ifndef LOCDSPNM_H # define LOCDSPNM_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / locid . h \" # include \" unicode / strenum . h \" # include \" unicode / uscript . h \" # include \" unicode / uldnames . h \" # include \" unicode / udisplaycontext . h \" U_NAMESPACE_BEGIN class LocaleDisplayNames : public UObject { public : ~)",
    "insertText": "LocaleDisplayNames()"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (LocaleDisplayNames* U_EXPORT2)",
    "insertText": "createInstance(const Locale& locale)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (LocaleDisplayNames* U_EXPORT2)",
    "insertText": "createInstance(const Locale& locale, UDialectHandling dialectHandling)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (LocaleDisplayNames* U_EXPORT2)",
    "insertText": "createInstance(const Locale& locale, UDisplayContext *contexts, int32_t length)"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (const Locale&)",
    "insertText": "getLocale()"
  },
  {
    "label": "getDialectHandling()",
    "kind": "Method",
    "detail": "Function (UDialectHandling)",
    "insertText": "getDialectHandling()"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (UDisplayContext)",
    "insertText": "getContext(UDisplayContextType type)"
  },
  {
    "label": "localeDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "localeDisplayName(const Locale& locale, UnicodeString& result)"
  },
  {
    "label": "localeDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "localeDisplayName(const char* localeId, UnicodeString& result)"
  },
  {
    "label": "languageDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "languageDisplayName(const char* lang, UnicodeString& result)"
  },
  {
    "label": "scriptDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "scriptDisplayName(const char* script, UnicodeString& result)"
  },
  {
    "label": "scriptDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "scriptDisplayName(UScriptCode scriptCode, UnicodeString& result)"
  },
  {
    "label": "regionDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "regionDisplayName(const char* region, UnicodeString& result)"
  },
  {
    "label": "variantDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "variantDisplayName(const char* variant, UnicodeString& result)"
  },
  {
    "label": "keyDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "keyDisplayName(const char* key, UnicodeString& result)"
  },
  {
    "label": "keyValueDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "keyValueDisplayName(const char* key, const char* value, UnicodeString& result)"
  }
]