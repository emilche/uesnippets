[
  {
    "label": "AlphaNumFormatterImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlphaNumFormatterImpl"
  },
  {
    "label": "NoFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NoFormatter"
  },
  {
    "label": "StreamFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamFormatterImpl"
  },
  {
    "label": "PairFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PairFormatterImpl"
  },
  {
    "label": "DereferenceFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DereferenceFormatterImpl"
  },
  {
    "label": "DefaultFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultFormatter"
  },
  {
    "label": "JoinTupleLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "JoinTupleLoop"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STR_JOIN_INTERNAL_H_ # define ABSL_STRINGS_INTERNAL_STR_JOIN_INTERNAL_H_ # include<cstring> # include<iterator> # include<memory> # include<string> # include<type_traits> # include<utility> # include \" absl / strings / internal / ostringstream . h \" # include \" absl / strings / internal / resize_uninitialized . h \" # include \" absl / strings / str_cat . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { struct AlphaNumFormatterImpl { template<T> void)",
    "insertText": "operator()(std::string* out, const T& t)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(out, AlphaNum(t))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(std::string* out, const AlphaNum& t)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(out, t)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (strm_ ->)",
    "insertText": "clear()"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (strm_ ->)",
    "insertText": "str(out)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} else { strm_ .)",
    "insertText": "reset(new strings_internal::OStringStream(out))"
  },
  {
    "label": "PairFormatterImpl()",
    "kind": "Method",
    "detail": "Function (}* strm_<<t ; } private : std::unique_ptr<strings_internal::OStringStream> strm_ ; } ; template<F1,F2> class PairFormatterImpl { public :)",
    "insertText": "PairFormatterImpl(F1 f1, absl::string_view sep, F2 f2) : f1_(std::move(f1)), sep_(sep), f2_(std::move(f2))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "operator()(std::string* out, const T& p)"
  },
  {
    "label": "f1_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f1_(out, p.first)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (out ->)",
    "insertText": "append(sep_)"
  },
  {
    "label": "f2_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f2_(out, p.second)"
  },
  {
    "label": "DereferenceFormatterImpl()",
    "kind": "Method",
    "detail": "Function (} private : F1 f1_ ; std::string sep_ ; F2 f2_ ; } ; template<Formatter> class DereferenceFormatterImpl { public :)",
    "insertText": "DereferenceFormatterImpl() : f_()"
  },
  {
    "label": "DereferenceFormatterImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DereferenceFormatterImpl(Formatter&& f) : f_(std::forward<Formatter>(f))"
  },
  {
    "label": "f_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f_(out, *t)"
  },
  {
    "label": "JoinAlgorithm()",
    "kind": "Method",
    "detail": "Function (} private : Formatter f_ ; } ; template<ValueType> struct DefaultFormatter { typedef AlphaNumFormatterImpl Type ; } ; template<> struct DefaultFormatter<const char*> { typedef AlphaNumFormatterImpl Type ; } ; template<> struct DefaultFormatter<char*> { typedef AlphaNumFormatterImpl Type ; } ; template<> struct DefaultFormatter<std::string> { typedef NoFormatter Type ; } ; template<> struct DefaultFormatter<absl::string_view> { typedef NoFormatter Type ; } ; template<ValueType> struct DefaultFormatter<ValueType*> { typedef DereferenceFormatterImpl<DefaultFormatter<ValueType>::Type> Type ; } ; template<ValueType> struct DefaultFormatter<std::unique_ptr<ValueType>> : public DefaultFormatter<ValueType*> { } ; template<Iterator,Formatter> std::string)",
    "insertText": "JoinAlgorithm(Iterator start, Iterator end, absl::string_view s, Formatter&& f)"
  },
  {
    "label": "sep()",
    "kind": "Method",
    "detail": "Function (std::string result ; absl::string_view)",
    "insertText": "sep(\"\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "append(sep.data(), sep.size())"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f(&result, *it)"
  },
  {
    "label": "JoinAlgorithm()",
    "kind": "Method",
    "detail": "Function (sep = s ; } return result ; } template<Iterator,= std::enable_if<std::is_convertible<std::iterator_traits<Iterator>::iterator_category,std::forward_iterator_tag>::value>::type> std::string)",
    "insertText": "JoinAlgorithm(Iterator start, Iterator end, absl::string_view s, NoFormatter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "if(start != end)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (auto&& start_value =* start ; size_t result_size = start_value .)",
    "insertText": "size()"
  },
  {
    "label": "result_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result_size(*it).size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(result_size > 0)"
  },
  {
    "label": "STLStringResizeUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STLStringResizeUninitialized(&result, result_size)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (char* result_buf =&* result .)",
    "insertText": "begin()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(result_buf, start_value.data(), start_value.size())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(result_buf, s.data(), s.size())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (auto&& value =* it ;)",
    "insertText": "memcpy(result_buf, value.data(), value.size())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } return result ; } template<size_t I,size_t N> struct JoinTupleLoop { template<Tup,Formatter> void)",
    "insertText": "operator()(std::string* out, const Tup& tup, absl::string_view sep, Formatter&& fmt)"
  },
  {
    "label": "fmt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fmt(out, std::get<I>(tup))"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (JoinTupleLoop<I + 1,)",
    "insertText": "N()(out, tup, sep, fmt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<size_t N> struct JoinTupleLoop<N,N> { template<Tup,Formatter> void)",
    "insertText": "operator()(std::string*, const Tup&, absl::string_view, Formatter&&)"
  },
  {
    "label": "JoinAlgorithm()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . T,Formatter> std::string)",
    "insertText": "JoinAlgorithm(const std::tuple<T...>& tup, absl::string_view sep, Formatter&& fmt)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (std::string result ; JoinTupleLoop<0,)",
    "insertText": "sizeof(T)>()(&result, tup, sep, fmt)"
  },
  {
    "label": "JoinAlgorithm()",
    "kind": "Method",
    "detail": "Function (typedef std::iterator_traits<Iterator>::value_type ValueType ; typedef DefaultFormatter<ValueType>::Type Formatter ; return)",
    "insertText": "JoinAlgorithm(first, last, separator, Formatter())"
  },
  {
    "label": "JoinRange()",
    "kind": "Method",
    "detail": "Function (} template<Range,Formatter> std::string)",
    "insertText": "JoinRange(const Range& range, absl::string_view separator, Formatter&& fmt)"
  },
  {
    "label": "JoinAlgorithm()",
    "kind": "Method",
    "detail": "Function (using std::begin ; using std::end ; return)",
    "insertText": "JoinAlgorithm(begin(range), end(range), separator, fmt)"
  },
  {
    "label": "JoinRange()",
    "kind": "Method",
    "detail": "Function (} template<Range> std::string)",
    "insertText": "JoinRange(const Range& range, absl::string_view separator)"
  },
  {
    "label": "JoinRange()",
    "kind": "Method",
    "detail": "Function (using std::begin ; using std::end ; return)",
    "insertText": "JoinRange(begin(range), end(range), separator)"
  }
]