[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SVisualLoggerFilterWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVisualLoggerFilterWidget"
  },
  {
    "label": "SWrapBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWrapBox"
  },
  {
    "label": "FVisualLoggerDBRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerDBRow"
  },
  {
    "label": "SVisualLoggerFilters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVisualLoggerFilters"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SVisualLoggerBaseWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Framework / Commands / UICommandList . h \" class FMenuBuilder ; class SComboButton ; class SVisualLoggerFilterWidget ; class SWrapBox ; struct FVisualLoggerDBRow ; class SVisualLoggerFilters : public SVisualLoggerBaseWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SVisualLoggerFilters)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() virtual ~SVisualLoggerFilters()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FUICommandList>& InCommandList)"
  },
  {
    "label": "GetCategoryIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCategoryIndex(const FString& InFilterName)"
  },
  {
    "label": "OnFiltersSearchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFiltersSearchChanged(const FText& Filter)"
  },
  {
    "label": "OnSearchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchChanged(const FText& Filter)"
  },
  {
    "label": "GraphSubmenuVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GraphSubmenuVisibility(const FName MenuName)"
  },
  {
    "label": "FilterByTypeClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByTypeClicked(FName InGraphName, FName InDataName)"
  },
  {
    "label": "IsAssetTypeActionsInUse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetTypeActionsInUse(FName InGraphName, FName InDataName)"
  },
  {
    "label": "InvalidateCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCanvas()"
  },
  {
    "label": "GraphFilterCategoryClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GraphFilterCategoryClicked(FName MenuCategory)"
  },
  {
    "label": "IsGraphFilterCategoryInUse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphFilterCategoryInUse(FName MenuCategory)"
  },
  {
    "label": "OnFiltersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFiltersChanged()"
  },
  {
    "label": "ResetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetData()"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemSelectionChanged(const struct FVisualLogEntry& EntryItem)"
  },
  {
    "label": "MakeGraphsFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeGraphsFilterMenu()"
  },
  {
    "label": "CreateFiltersMenuCategoryForGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFiltersMenuCategoryForGraph(FMenuBuilder& MenuBuilder, FName MenuCategory)"
  },
  {
    "label": "HasFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFilters()"
  },
  {
    "label": "AddFilterCategory()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AddFilterCategory(FString, ELogVerbosity::Type, bool bMarkAsInUse)"
  },
  {
    "label": "OnFilterCategoryAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterCategoryAdded(FString, ELogVerbosity::Type)"
  },
  {
    "label": "OnFilterCategoryRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterCategoryRemoved(FString)"
  },
  {
    "label": "OnItemsSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemsSelectionChanged(const FVisualLoggerDBRow& ChangedRow, int32 SelectedItemIndex)"
  },
  {
    "label": "OnGraphAddedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphAddedEvent(const FName& OwnerName, const FName& GraphName)"
  },
  {
    "label": "OnGraphDataNameAddedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphDataNameAddedEvent(const FName& OwnerName, const FName& GraphName, const FName& DataName)"
  }
]