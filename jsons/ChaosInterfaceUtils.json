[
  {
    "label": "FGeometryAddParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryAddParams"
  },
  {
    "label": "ConvertCollisionTraceFlag()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Declares . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Templates / UniquePtr . h \" # include \" BodySetupEnums . h \" # include \" PhysicsInterfaceDeclaresCore . h \" # include \" Chaos / GeometryParticles . h \" struct FGeometryAddParams ; namespace ChaosInterface { Chaos::EChaosCollisionTraceFlag)",
    "insertText": "ConvertCollisionTraceFlag(ECollisionTraceFlag Flag)"
  },
  {
    "label": "CreateGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGeometry(const FGeometryAddParams& InParams, TArray<Chaos::FImplicitObjectPtr>& OutGeoms, Chaos::FShapesArray& OutShapes)"
  },
  {
    "label": "CalculateMassPropertiesFromShapeCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateMassPropertiesFromShapeCollection(Chaos::FMassProperties& OutProperties, const TArray<FPhysicsShapeHandle>& InShapes, float InDensityKGPerCM)"
  },
  {
    "label": "CalculateMassPropertiesFromShapeCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateMassPropertiesFromShapeCollection(Chaos::FMassProperties& OutProperties, const Chaos::FShapesArray& InShapes, const TArray<bool>& bContributesToMass, float InDensityKGPerCM)"
  }
]