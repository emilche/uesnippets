[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UTransformableHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransformableHandle"
  },
  {
    "label": "UTransformableComponentHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransformableComponentHandle"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UTickableTransformConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableTransformConstraint"
  },
  {
    "label": "UTickableTranslationConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableTranslationConstraint"
  },
  {
    "label": "FDynamicCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicCache"
  },
  {
    "label": "UTickableRotationConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableRotationConstraint"
  },
  {
    "label": "UTickableScaleConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableScaleConstraint"
  },
  {
    "label": "UTickableParentConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableParentConstraint"
  },
  {
    "label": "UTickableLookAtConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableLookAtConstraint"
  },
  {
    "label": "FTransformConstraintUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformConstraintUtils"
  },
  {
    "label": "FConstraintDependencyScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintDependencyScope"
  },
  {
    "label": "FHandleDependencyChecker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHandleDependencyChecker"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Constraint . h \" # include \" ConstraintsManager . h \" # include \" Evaluation / IMovieScenePlaybackCapability . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Delegates / Delegate . h \" # include \" TransformConstraint . generated . h \" enum class EHandleEvent : uint8 ; class UTransformableHandle ; class UTransformableComponentHandle ; class USceneComponent ; enum class EMovieSceneTransformChannel : uint32 ; class UWorld ;)",
    "insertText": "UCLASS(Abstract, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: CONSTRAINTS_API void Setup()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "GetTargetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTargetHash()"
  },
  {
    "label": "ReferencesObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReferencesObject(TWeakObjectPtr<UObject> InObject)"
  },
  {
    "label": "HasBoundObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoundObjects()"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveBoundObjects(FMovieSceneSequenceID LocalSequenceID, TSharedRef<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, UObject* SubObject = nullptr)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const bool bDeepCheck = true)"
  },
  {
    "label": "IsFullyActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyActive()"
  },
  {
    "label": "NeedsCompensation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsCompensation()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (UTickableConstraint*)",
    "insertText": "Duplicate(UObject* NewOuter)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(bool bTickHandlesAlso = false)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(const bool bIsActive)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetType()"
  },
  {
    "label": "GetChildGlobalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetChildGlobalTransform()"
  },
  {
    "label": "GetChildLocalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetChildLocalTransform()"
  },
  {
    "label": "GetParentGlobalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetParentGlobalTransform()"
  },
  {
    "label": "GetParentLocalTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetParentLocalTransform()"
  },
  {
    "label": "GetChannelsToKey()",
    "kind": "Method",
    "detail": "Function (EMovieSceneTransformChannel)",
    "insertText": "GetChannelsToKey()"
  },
  {
    "label": "OnHandleModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHandleModified(UTransformableHandle* InHandle, EHandleEvent InEvent)"
  },
  {
    "label": "GetChildHandleTickFunction()",
    "kind": "Method",
    "detail": "Function (FTickFunction*)",
    "insertText": "GetChildHandleTickFunction()"
  },
  {
    "label": "GetParentHandleTickFunction()",
    "kind": "Method",
    "detail": "Function (FTickFunction*)",
    "insertText": "GetParentHandleTickFunction()"
  },
  {
    "label": "EnsurePrimaryDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsurePrimaryDependency(const UWorld* InWorld)"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UnregisterDelegates()"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates()"
  },
  {
    "label": "ComputeOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOffset() PURE_VIRTUAL(ComputeOffset, return;)"
  },
  {
    "label": "SetupDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDependencies(const UWorld* InWorld)"
  },
  {
    "label": "SetChildGlobalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildGlobalTransform(const FTransform& InGlobal)"
  },
  {
    "label": "SetChildLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildLocalTransform(const FTransform& InLocal)"
  },
  {
    "label": "OnActiveStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveStateChanged()"
  },
  {
    "label": "GetHandleTickFunction()",
    "kind": "Method",
    "detail": "Function (FTickFunction*)",
    "insertText": "GetHandleTickFunction(const TObjectPtr<UTransformableHandle>& InHandle)"
  },
  {
    "label": "InitConstraint()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitConstraint(UWorld * InWorld)"
  },
  {
    "label": "TeardownConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownConstraint(UWorld * InWorld)"
  },
  {
    "label": "AddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddedToWorld(UWorld* InWorld)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR public : FString)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetFullLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullLabel()"
  },
  {
    "label": "GetTypeLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTypeLabel()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnConstraintChanged, UTickableTransformConstraint*, const FPropertyChangedEvent&)"
  },
  {
    "label": "GetOnConstraintChanged()",
    "kind": "Method",
    "detail": "Function (FOnConstraintChanged&)",
    "insertText": "GetOnConstraintChanged()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (protected : FOnConstraintChanged OnConstraintChanged ; # endif } ;)",
    "insertText": "UCLASS(Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: CONSTRAINTS_API UTickableTranslationConstraint()"
  },
  {
    "label": "GetFunction()",
    "kind": "Method",
    "detail": "Function (FConstraintTickFunction::ConstraintFunction)",
    "insertText": "GetFunction()"
  },
  {
    "label": "CalculateInputHash()",
    "kind": "Method",
    "detail": "Function (protected : struct FDynamicCache { uint32 CachedInputHash = 0 ; } ; FDynamicCache Cache ; uint32)",
    "insertText": "CalculateInputHash()"
  },
  {
    "label": "ComputeOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOffset()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: CONSTRAINTS_API UTickableRotationConstraint()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: CONSTRAINTS_API UTickableScaleConstraint()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: CONSTRAINTS_API UTickableParentConstraint()"
  },
  {
    "label": "IsScalingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScalingEnabled()"
  },
  {
    "label": "GetScalingPropertyName()",
    "kind": "Method",
    "detail": "Function (bScaling = bInScale ; } FName)",
    "insertText": "GetScalingPropertyName()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: CONSTRAINTS_API UTickableLookAtConstraint()"
  },
  {
    "label": "FindQuatBetweenNormals()",
    "kind": "Method",
    "detail": "Function (private : FQuat)",
    "insertText": "FindQuatBetweenNormals(const FVector& A, const FVector& B)"
  },
  {
    "label": "GetParentConstraints()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FTransformConstraintUtils { public : void)",
    "insertText": "GetParentConstraints(UWorld* World, const AActor* InChild, TArray< TWeakObjectPtr<UTickableConstraint> >& OutConstraints)"
  },
  {
    "label": "CreateHandleForSceneComponent()",
    "kind": "Method",
    "detail": "Function (UTransformableComponentHandle*)",
    "insertText": "CreateHandleForSceneComponent(USceneComponent* InSceneComponent, const FName& InSocketName)"
  },
  {
    "label": "CreateFromType()",
    "kind": "Method",
    "detail": "Function (UTickableTransformConstraint*)",
    "insertText": "CreateFromType(UWorld* InWorld, const ETransformConstraintType InType, const bool bUseDefault = false)"
  },
  {
    "label": "CreateAndAddFromObjects()",
    "kind": "Method",
    "detail": "Function (UTickableTransformConstraint*)",
    "insertText": "CreateAndAddFromObjects(UWorld* InWorld, UObject* InParent, const FName& InParentSocketName, UObject* InChild, const FName& InChildSocketName, const ETransformConstraintType InType, const bool bMaintainOffset = true, const bool bUseDefault = false)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddConstraint(UWorld* InWorld, UTransformableHandle* InParentHandle, UTransformableHandle* InChildHandle, UTickableTransformConstraint* Constraint, const bool bMaintainOffset = true, const bool bUseDefault = false)"
  },
  {
    "label": "ComputeRelativeTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ComputeRelativeTransform(const FTransform& InChildLocal, const FTransform& InChildWorld, const FTransform& InSpaceWorld, const UTickableTransformConstraint* InConstraint)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (TOptional<FTransform>)",
    "insertText": "GetRelativeTransform(UWorld* InWorld, const uint32 InHandleHash)"
  },
  {
    "label": "GetConstraintsRelativeTransform()",
    "kind": "Method",
    "detail": "Function (TOptional<FTransform>)",
    "insertText": "GetConstraintsRelativeTransform(const TArray< TWeakObjectPtr<UTickableConstraint> >& InConstraints, const FTransform& InChildLocal, const FTransform& InChildWorld)"
  },
  {
    "label": "GetLastActiveConstraintIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLastActiveConstraintIndex(const TArray< TWeakObjectPtr<UTickableConstraint> >& InConstraints)"
  },
  {
    "label": "GetChildrenConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildrenConstraints(UWorld* World, const UTickableTransformConstraint* InConstraint, TArray< TWeakObjectPtr<UTickableConstraint> >& OutConstraints, const bool bIncludeTarget = false)"
  },
  {
    "label": "UpdateTransformBasedOnConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransformBasedOnConstraint(FTransform& CurrentTransform, USceneComponent* SceneComponent)"
  },
  {
    "label": "BuildDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildDependencies(UWorld* InWorld, UTickableTransformConstraint* Constraint)"
  },
  {
    "label": "BuildAttachmentsDependencies()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BuildAttachmentsDependencies(UWorld* InWorld, const UTickableTransformConstraint* Constraint)"
  },
  {
    "label": "FConstraintDependencyScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FConstraintDependencyScope {)",
    "insertText": "FConstraintDependencyScope(UTickableTransformConstraint* InConstraint, UWorld* InWorld = nullptr)"
  },
  {
    "label": "FConstraintDependencyScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FConstraintDependencyScope()"
  },
  {
    "label": "FHandleDependencyChecker()",
    "kind": "Method",
    "detail": "Function (private : TWeakObjectPtr<UTickableTransformConstraint> WeakConstraint = nullptr ; TWeakObjectPtr<UWorld> WeakWorld = nullptr ; bool bPreviousValidity = false ; } ; struct FHandleDependencyChecker {)",
    "insertText": "FHandleDependencyChecker(UWorld* InWorld = nullptr)"
  },
  {
    "label": "HasDependency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDependency(const UTransformableHandle& InHandle, const UTransformableHandle& InParentToCheck)"
  }
]