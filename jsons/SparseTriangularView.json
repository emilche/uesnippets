[
  {
    "label": "TriangularViewImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangularViewImpl"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "SkipFirst()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_TRIANGULARVIEW_H # define EIGEN_SPARSE_TRIANGULARVIEW_H namespace Eigen { template<MatrixType,unsigned int Mode> class TriangularViewImpl<MatrixType,Mode,Sparse> : public SparseMatrixBase<TriangularView<MatrixType,Mode>> { enum {)",
    "insertText": "SkipFirst((Mode&Lower) && !(MatrixType::Flags&RowMajorBit)) || ((Mode&Upper) && (MatrixType::Flags&RowMajorBit)), SkipLast = !SkipFirst, SkipDiag = (Mode&ZeroDiag) ? 1 : 0, HasUnitDiag = (Mode&UnitDiag)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (typedef TriangularView<MatrixType,Mode> TriangularViewType ; protected : void)",
    "insertText": "solve()"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrixBase<TriangularViewType> Base ; public :)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(TriangularViewType)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_reference<MatrixTypeNested>::type MatrixTypeNestedNonRef ; typedef internal::remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned ; template<RhsType,DstType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "_solve_impl(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "solveInPlace(dst)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> void)",
    "insertText": "solveInPlace(MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> void)",
    "insertText": "solveInPlace(SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "SkipFirst()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { template<ArgType,unsigned int Mode> struct unary_evaluator<TriangularView<ArgType,Mode>,IteratorBased> : evaluator_base<TriangularView<ArgType,Mode>> { typedef TriangularView<ArgType,Mode> XprType ; protected : typedef XprType::Scalar Scalar ; typedef XprType::StorageIndex StorageIndex ; typedef evaluator<ArgType>::InnerIterator EvalIterator ; enum {)",
    "insertText": "SkipFirst((Mode&Lower) && !(ArgType::Flags&RowMajorBit)) || ((Mode&Upper) && (ArgType::Flags&RowMajorBit)), SkipLast = !SkipFirst, SkipDiag = (Mode&ZeroDiag) ? 1 : 0, HasUnitDiag = (Mode&UnitDiag)"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (public : enum { CoeffReadCost = evaluator<ArgType>::CoeffReadCost,Flags = XprType::Flags } ;)",
    "insertText": "unary_evaluator(const XprType &xpr) : m_argImpl(xpr.nestedExpression()), m_arg(xpr.nestedExpression())"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} class InnerIterator : public EvalIterator { typedef EvalIterator Base ; public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const unary_evaluator& xprEval, Index outer) : Base(xprEval.m_argImpl,outer), m_returnOne(false), m_containsDiag(Base::outer()<xprEval.m_arg.innerSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(HasUnitDiag && ((!Base::operator bool()) || Base::index()>=Base::outer()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_returnOne = m_containsDiag ; } } EIGEN_STRONG_INLINE InnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (m_returnOne = m_containsDiag ; } } return* this ; } EIGEN_STRONG_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} } StorageIndex)",
    "insertText": "index()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "value()"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (} protected : bool m_returnOne ; bool m_containsDiag ; private : Scalar&)",
    "insertText": "valueRef()"
  },
  {
    "label": "triangularView()",
    "kind": "Method",
    "detail": "Function (} ; protected : evaluator<ArgType> m_argImpl ; const ArgType& m_arg ; } ; } template<Derived> template<int Mode> const TriangularView<const Derived,Mode> SparseMatrixBase<Derived)",
    "insertText": "triangularView()"
  }
]