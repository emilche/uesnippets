[
  {
    "label": "vfloat4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vfloat4"
  },
  {
    "label": "vint4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vint4"
  },
  {
    "label": "vmask4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vmask4"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTC_VECMATHLIB_SSE_4_H_INCLUDED # define ASTC_VECMATHLIB_SSE_4_H_INCLUDED # ifndef ASTCENC_SIMD_INLINE # error \" Include astcenc_vecmathlib . h,do not include directly \" # endif # include<cstdio> struct vfloat4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4()"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(const float *p)"
  },
  {
    "label": "_mm_loadu_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_loadu_ps(p)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(float a)"
  },
  {
    "label": "_mm_set1_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_set1_ps(a)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(float a, float b, float c, float d)"
  },
  {
    "label": "_mm_set_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_set_ps(d, c, b, a)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(__m128 a)"
  },
  {
    "label": "lane()",
    "kind": "Method",
    "detail": "Function (m = a ; } template<int l> ASTCENC_SIMD_INLINE float)",
    "insertText": "lane()"
  },
  {
    "label": "set_lane()",
    "kind": "Method",
    "detail": "Function (} template<int l> ASTCENC_SIMD_INLINE void)",
    "insertText": "set_lane(float a)"
  },
  {
    "label": "_mm_insert_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_insert_ps(m, v, l << 6 | l << 4)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "alignas(16)"
  },
  {
    "label": "_mm_store_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_ps(idx, m)"
  },
  {
    "label": "_mm_load_ps()",
    "kind": "Method",
    "detail": "Function (idx [ l ] = a ; m =)",
    "insertText": "_mm_load_ps(idx)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "zero()"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "load1(const float* p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "loada(const float* p)"
  },
  {
    "label": "lane_id()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "lane_id()"
  },
  {
    "label": "swz()",
    "kind": "Method",
    "detail": "Function (} template<int l0,int l1> ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "swz()"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (vfloat4)",
    "insertText": "result(_mm_shuffle_ps(m, m, l0 | l1 << 2))"
  },
  {
    "label": "set_lane()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "set_lane(0.0f)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (vfloat4)",
    "insertText": "result(_mm_shuffle_ps(m, m, l0 | l1 << 2 | l2 << 4))"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} __m128 m ; } ; struct vint4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vint4()"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(const int *p)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<const __m128i*>(p))"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(const uint8_t *p)"
  },
  {
    "label": "_mm_cvtsi32_si128()",
    "kind": "Method",
    "detail": "Function (__m128i t =)",
    "insertText": "_mm_cvtsi32_si128(*reinterpret_cast<const int*>(p))"
  },
  {
    "label": "_mm_cvtepu8_epi32()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 m =)",
    "insertText": "_mm_cvtepu8_epi32(t)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (# else t =)",
    "insertText": "_mm_unpacklo_epi8(t, _mm_setzero_si128())"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_unpacklo_epi16(t, _mm_setzero_si128())"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(int a)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_set1_epi32(a)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(int a, int b, int c, int d)"
  },
  {
    "label": "_mm_set_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_set_epi32(d, c, b, a)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(__m128i a)"
  },
  {
    "label": "set_lane()",
    "kind": "Method",
    "detail": "Function (} template<int l> ASTCENC_SIMD_INLINE void)",
    "insertText": "set_lane(int a)"
  },
  {
    "label": "_mm_insert_epi32()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 m =)",
    "insertText": "_mm_insert_epi32(m, a, l)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128(reinterpret_cast<__m128i*>(idx), m)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (idx [ l ] = a ; m =)",
    "insertText": "_mm_load_si128(reinterpret_cast<const __m128i*>(idx))"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "load1(const int* p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "loada(const int* p)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (} __m128i m ; } ; struct vmask4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(__m128 a)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (m = a ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(__m128i a)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_castsi128_ps(a)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(bool a)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (vint4)",
    "insertText": "mask(a == false ? 0 : -1)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_castsi128_ps(mask.m)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(bool a, bool b, bool c, bool d)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (vint4)",
    "insertText": "mask(a == false ? 0 : -1, b == false ? 0 : -1, c == false ? 0 : -1, d == false ? 0 : -1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} __m128 m ; } ; ASTCENC_SIMD_INLINE vmask4)",
    "insertText": "operator(vmask4 a, vmask4 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vmask4)",
    "insertText": "operator(vmask4 a)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "mask(vmask4 a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "operator(vint4 a, vint4 b)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 return)",
    "insertText": "vint4(_mm_mullo_epi32 (a.m, b.m))"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (# else __m128i t1 =)",
    "insertText": "_mm_mul_epu32(a.m, b.m)"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i t2 =)",
    "insertText": "_mm_mul_epu32(_mm_srli_si128(a.m, 4), _mm_srli_si128(b.m, 4))"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i r =)",
    "insertText": "_mm_unpacklo_epi32(_mm_shuffle_epi32(t1, _MM_SHUFFLE (0, 0, 2, 0)), _mm_shuffle_epi32(t2, _MM_SHUFFLE (0, 0, 2, 0)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "operator(vint4 a)"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "lsl(vint4 a)"
  },
  {
    "label": "lsr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "lsr(vint4 a)"
  },
  {
    "label": "asr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "asr(vint4 a)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "min(vint4 a, vint4 b)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 return)",
    "insertText": "vint4(_mm_min_epi32(a.m, b.m))"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (# else vmask4 d = a<b ; __m128i ap =)",
    "insertText": "_mm_and_si128(_mm_castps_si128(d.m), a.m)"
  },
  {
    "label": "_mm_andnot_si128()",
    "kind": "Method",
    "detail": "Function (__m128i bp =)",
    "insertText": "_mm_andnot_si128(_mm_castps_si128(d.m), b.m)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "max(vint4 a, vint4 b)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 return)",
    "insertText": "vint4(_mm_max_epi32(a.m, b.m))"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "hmin(vint4 a)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "min(a, vint4(_mm_shuffle_epi32(a.m, _MM_SHUFFLE(0, 0, 3, 2))))"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "min(a, vint4(_mm_shuffle_epi32(a.m, _MM_SHUFFLE(0, 0, 0, 1))))"
  },
  {
    "label": "hmax()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "hmax(vint4 a)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "max(a, vint4(_mm_shuffle_epi32(a.m, _MM_SHUFFLE(0, 0, 3, 2))))"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "max(a, vint4(_mm_shuffle_epi32(a.m, _MM_SHUFFLE(0, 0, 0, 1))))"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE int)",
    "insertText": "hadd_s(vint4 a)"
  },
  {
    "label": "_mm_castps_si128()",
    "kind": "Method",
    "detail": "Function (__m128i fold =)",
    "insertText": "_mm_castps_si128(_mm_movehl_ps(_mm_castsi128_ps(a.m), _mm_castsi128_ps(a.m)))"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i t =)",
    "insertText": "_mm_add_epi32(a.m, fold)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (t =)",
    "insertText": "_mm_add_epi32(t, _mm_shuffle_epi32(t, 0x55))"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "storea(vint4 a, int* p)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128(reinterpret_cast<__m128i*>(p), a.m)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vint4 a, int* p)"
  },
  {
    "label": "_mm_storeu_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_ps(reinterpret_cast<float*>(p), _mm_castsi128_ps(a.m))"
  },
  {
    "label": "store_nbytes()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store_nbytes(vint4 a, uint8_t* p)"
  },
  {
    "label": "_mm_store_ss()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_ss(reinterpret_cast<float*>(p), _mm_castsi128_ps(a.m))"
  },
  {
    "label": "gatheri()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "gatheri(const int* base, vint4 indices)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_AVX> = 2 return)",
    "insertText": "vint4(_mm_i32gather_epi32(base, indices.m, 4))"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(indices, idx)"
  },
  {
    "label": "pack_low_bytes()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "pack_low_bytes(vint4 a)"
  },
  {
    "label": "_mm_set_epi8()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 __m128i shuf =)",
    "insertText": "_mm_set_epi8(0,0,0,0, 0,0,0,0, 0,0,0,0, 12,8,4,0)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (# else __m128i va =)",
    "insertText": "_mm_unpacklo_epi8(a.m, _mm_shuffle_epi32(a.m, _MM_SHUFFLE(1,1,1,1)))"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i vb =)",
    "insertText": "_mm_unpackhi_epi8(a.m, _mm_shuffle_epi32(a.m, _MM_SHUFFLE(3,3,3,3)))"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "select(vint4 a, vint4 b, vmask4 cond)"
  },
  {
    "label": "_mm_castps_si128()",
    "kind": "Method",
    "detail": "Function (__m128i condi =)",
    "insertText": "_mm_castps_si128(cond.m)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 return)",
    "insertText": "vint4(_mm_blendv_epi8(a.m, b.m, condi))"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "vint4(_mm_or_si128(_mm_and_si128(condi, b.m), _mm_andnot_si128(condi, a.m)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "operator(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "min(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "max(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "abs(vfloat4 a)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "round(vfloat4 a)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 int flags = _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC ; return)",
    "insertText": "vfloat4(_mm_round_ps(a.m, flags))"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (# else __m128 v = a . m ; __m128 neg_zero =)",
    "insertText": "_mm_castsi128_ps(_mm_set1_epi32(static_cast<int>(0x80000000)))"
  },
  {
    "label": "_mm_set1_ps()",
    "kind": "Method",
    "detail": "Function (__m128 no_fraction =)",
    "insertText": "_mm_set1_ps(8388608.0f)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (__m128 abs_mask =)",
    "insertText": "_mm_castsi128_ps(_mm_set1_epi32(0x7FFFFFFF))"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (__m128 sign =)",
    "insertText": "_mm_and_ps(v, neg_zero)"
  },
  {
    "label": "_mm_or_ps()",
    "kind": "Method",
    "detail": "Function (__m128 s_magic =)",
    "insertText": "_mm_or_ps(no_fraction, sign)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (__m128 r1 =)",
    "insertText": "_mm_add_ps(v, s_magic)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (r1 =)",
    "insertText": "_mm_sub_ps(r1, s_magic)"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (__m128 r2 =)",
    "insertText": "_mm_and_ps(v, abs_mask)"
  },
  {
    "label": "_mm_cmple_ps()",
    "kind": "Method",
    "detail": "Function (__m128 mask =)",
    "insertText": "_mm_cmple_ps(r2, no_fraction)"
  },
  {
    "label": "_mm_andnot_ps()",
    "kind": "Method",
    "detail": "Function (r2 =)",
    "insertText": "_mm_andnot_ps(mask, v)"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (r1 =)",
    "insertText": "_mm_and_ps(r1, mask)"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "hmin(vfloat4 a)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "min(a, vfloat4(_mm_shuffle_ps(a.m, a.m, _MM_SHUFFLE(0, 0, 3, 2))))"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "min(a, vfloat4(_mm_shuffle_ps(a.m, a.m, _MM_SHUFFLE(0, 0, 0, 1))))"
  },
  {
    "label": "hmax()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "hmax(vfloat4 a)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "max(a, vfloat4(_mm_shuffle_ps(a.m, a.m, _MM_SHUFFLE(0, 0, 3, 2))))"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "max(a, vfloat4(_mm_shuffle_ps(a.m, a.m, _MM_SHUFFLE(0, 0, 0, 1))))"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hadd_s(vfloat4 a)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (__m128 t =)",
    "insertText": "_mm_add_ps(a.m, _mm_movehl_ps(a.m, a.m))"
  },
  {
    "label": "_mm_add_ss()",
    "kind": "Method",
    "detail": "Function (t =)",
    "insertText": "_mm_add_ss(t, _mm_shuffle_ps(t, t, 0x55))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "sqrt(vfloat4 a)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "select(vfloat4 a, vfloat4 b, vmask4 cond)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 4 1 return)",
    "insertText": "vfloat4(_mm_blendv_ps(a.m, b.m, cond.m))"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "vfloat4(_mm_or_ps(_mm_and_ps(cond.m, b.m), _mm_andnot_ps(cond.m, a.m)))"
  },
  {
    "label": "select_msb()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "select_msb(vfloat4 a, vfloat4 b, vmask4 cond)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (# else __m128 d =)",
    "insertText": "_mm_castsi128_ps(_mm_srai_epi32(_mm_castps_si128(cond.m), 31))"
  },
  {
    "label": "gatherf()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "gatherf(const float* base, vint4 indices)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_AVX> = 2 return)",
    "insertText": "vfloat4(_mm_i32gather_ps(base, indices.m, 4))"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vfloat4 a, float* p)"
  },
  {
    "label": "_mm_storeu_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_ps(p, a.m)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "storea(vfloat4 a, float* p)"
  },
  {
    "label": "_mm_store_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_ps(p, a.m)"
  },
  {
    "label": "float_to_int()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_int(vfloat4 a)"
  },
  {
    "label": "float_to_int_rtn()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_int_rtn(vfloat4 a)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "round(a)"
  },
  {
    "label": "int_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "int_to_float(vint4 a)"
  },
  {
    "label": "float_to_float16()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_float16(vfloat4 a)"
  },
  {
    "label": "_mm_cvtps_ph()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_F16C> = 1 __m128i packedf16 =)",
    "insertText": "_mm_cvtps_ph(a.m, 0)"
  },
  {
    "label": "_mm_cvtepu16_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i f16 =)",
    "insertText": "_mm_cvtepu16_epi32(packedf16)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "vint4(float_to_sf16(a.lane<0>()), float_to_sf16(a.lane<1>()), float_to_sf16(a.lane<2>()), float_to_sf16(a.lane<3>()))"
  },
  {
    "label": "float_to_float16()",
    "kind": "Method",
    "detail": "Function (# endif } uint16_t)",
    "insertText": "float_to_float16(float a)"
  },
  {
    "label": "_mm_cvtps_ph()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_F16C> = 1 __m128i f16 =)",
    "insertText": "_mm_cvtps_ph(_mm_set1_ps(a), 0)"
  },
  {
    "label": "float_to_sf16()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "float_to_sf16(a)"
  },
  {
    "label": "float16_to_float()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "float16_to_float(vint4 a)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_F16C> = 1 __m128i packed =)",
    "insertText": "_mm_packs_epi32(a.m, a.m)"
  },
  {
    "label": "_mm_cvtph_ps()",
    "kind": "Method",
    "detail": "Function (__m128 f32 =)",
    "insertText": "_mm_cvtph_ps(packed)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "vfloat4(sf16_to_float(static_cast<uint16_t>(a.lane<0>())), sf16_to_float(static_cast<uint16_t>(a.lane<1>())), sf16_to_float(static_cast<uint16_t>(a.lane<2>())), sf16_to_float(static_cast<uint16_t>(a.lane<3>())))"
  },
  {
    "label": "float16_to_float()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE float)",
    "insertText": "float16_to_float(uint16_t a)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_F16C> = 1 __m128i packed =)",
    "insertText": "_mm_set1_epi16(static_cast<short>(a))"
  },
  {
    "label": "sf16_to_float()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "sf16_to_float(a)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_as_int(vfloat4 a)"
  },
  {
    "label": "int_as_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "int_as_float(vint4 v)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4& t0p)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (t0p = t0 ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint4& t0p, vint4& t1p)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 3 0 t0p = t0 ; t1p = t0 ^ t1 ; # else t0p = t0 ; t1p = t1 ; # endif } ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint4 t2, vint4 t3, vint4& t0p, vint4& t1p, vint4& t2p, vint4& t3p)"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 3 0 t0p = t0 ; t1p = t0 ^ t1 ; t2p = t1 ^ t2 ; t3p = t2 ^ t3 ; # else t0p = t0 ; t1p = t1 ; t2p = t2 ; t3p = t3 ; # endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 idx)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_SSE> = 3 0 __m128i idxx =)",
    "insertText": "_mm_or_si128(idx.m, _mm_set1_epi32(static_cast<int>(0xFFFFFF00)))"
  },
  {
    "label": "_mm_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i result =)",
    "insertText": "_mm_shuffle_epi8(t0.m, idxx)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "alignas(ASTCENC_VECALIGN)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(t0, reinterpret_cast<int*>(table + 0))"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 t1, vint4 idx)"
  },
  {
    "label": "_mm_sub_epi8()",
    "kind": "Method",
    "detail": "Function (idxx =)",
    "insertText": "_mm_sub_epi8(idxx, _mm_set1_epi8(16))"
  },
  {
    "label": "_mm_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i result2 =)",
    "insertText": "_mm_shuffle_epi8(t1.m, idxx)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "_mm_xor_si128(result, result2)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(t1, reinterpret_cast<int*>(table + 16))"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 t1, vint4 t2, vint4 t3, vint4 idx)"
  },
  {
    "label": "_mm_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (result2 =)",
    "insertText": "_mm_shuffle_epi8(t2.m, idxx)"
  },
  {
    "label": "_mm_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (result2 =)",
    "insertText": "_mm_shuffle_epi8(t3.m, idxx)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(t2, reinterpret_cast<int*>(table + 32))"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(t3, reinterpret_cast<int*>(table + 48))"
  },
  {
    "label": "interleave_rgba8()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "interleave_rgba8(vint4 r, vint4 g, vint4 b, vint4 a)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__APPLE__)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "_mm_add_epi32(value, _mm_bslli_si128(g.m, 1))"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "_mm_add_epi32(value, _mm_bslli_si128(b.m, 2))"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "_mm_add_epi32(value, _mm_bslli_si128(a.m, 3))"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (# else __m128i value = r . m ; value =)",
    "insertText": "_mm_add_epi32(value, _mm_slli_epi32(g.m, 8))"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "_mm_add_epi32(value, _mm_slli_epi32(b.m, 16))"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "_mm_add_epi32(value, _mm_slli_epi32(a.m, 24))"
  },
  {
    "label": "store_lanes_masked()",
    "kind": "Method",
    "detail": "Function (# endif } ASTCENC_SIMD_INLINE void)",
    "insertText": "store_lanes_masked(int* base, vint4 data, vmask4 mask)"
  },
  {
    "label": "_mm_maskstore_epi32()",
    "kind": "Method",
    "detail": "Function (# if ASTCENC_AVX> = 2)",
    "insertText": "_mm_maskstore_epi32(base, _mm_castps_si128(mask.m), data.m)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(mask.lane<3>() != 0.0f)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store(data, base)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.lane<2>() != 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.lane<1>() != 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.lane<0>() != 0.0f)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif } # if)",
    "insertText": "defined(ASTCENC_NO_INVARIANCE) && (ASTCENC_SSE >= 41) #define ASTCENC_USE_NATIVE_DOT_PRODUCT 1 ASTCENC_SIMD_INLINE float dot_s(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "dot(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "dot3_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "dot3_s(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "dot3()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "dot3(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "popcount()",
    "kind": "Method",
    "detail": "Function (} # endif # if ASTCENC_POPCNT> = 1 # define ASTCENC_USE_NATIVE_POPCOUNT 1 ASTCENC_SIMD_INLINE int)",
    "insertText": "popcount(uint64_t v)"
  }
]