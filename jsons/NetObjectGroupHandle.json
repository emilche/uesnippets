[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FNetObjectGroups",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetObjectGroups"
  },
  {
    "label": "FNetObjectGroupHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetObjectGroupHandle"
  },
  {
    "label": "EpochMask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / IrisConfig . h \" # include \" Containers / StringFwd . h \" # include \" Templates / TypeHash . h \" class FString ; namespace UE::Net::Private { class FNetObjectGroups ; } namespace UE::Net { class FNetObjectGroupHandle { public : typedef uint32 FGroupIndexType ; enum { GroupIndexBits = 2 4 U } ; enum { EpochBits = 8 U } ; enum {)",
    "insertText": "EpochMask(1U << EpochBits)"
  },
  {
    "label": "GetInvalid()",
    "kind": "Method",
    "detail": "Function (enum { MaxGroupIndexCount = 1 U<<GroupIndexBits } ; enum : FGroupIndexType { InvalidNetObjectGroupIndex = 0,NotReplicatedNetObjectGroupIndex,NetGroupOwnerNetObjectGroupIndex,NetGroupReplayNetObjectGroupIndex } ; FNetObjectGroupHandle)",
    "insertText": "GetInvalid()"
  },
  {
    "label": "FNetObjectGroupHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetObjectGroupHandle() : Value(0u)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetUniqueId()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetUniqueId()"
  },
  {
    "label": "IsNotReplicatedNetObjectGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotReplicatedNetObjectGroup()"
  },
  {
    "label": "FNetObjectGroupHandle()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FNetObjectGroupHandle()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Index(uint32)"
  },
  {
    "label": "Epoch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Epoch(uint32)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UniqueId = InUniqueId ; } } union { uint64 Value ; struct { uint32 Index : GroupIndexBits ; uint32 Epoch : EpochBits ; uint32 UniqueId ; } ; } ; bool)",
    "insertText": "operator(const FNetObjectGroupHandle& Lhs, const FNetObjectGroupHandle& Rhs)"
  }
]