[
  {
    "label": "all_unroller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "all_unroller"
  },
  {
    "label": "any_unroller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "any_unroller"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ALLANDANY_H # define EIGEN_ALLANDANY_H namespace Eigen { namespace internal { template<Derived,int UnrollCount,int Rows> struct all_unroller { enum {)",
    "insertText": "col(UnrollCount-1) / Rows, row = (UnrollCount-1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(const Derived &mat)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived,int Rows> struct all_unroller<Derived,0,Rows> { EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(const Derived &)"
  },
  {
    "label": "SizeAtCompileTime()",
    "kind": "Method",
    "detail": "Function (typedef internal::evaluator<Derived> Evaluator ; enum { unroll = SizeAtCompileTime ! = Dynamic&&)",
    "insertText": "SizeAtCompileTime(int(Evaluator::CoeffReadCost) + int(NumTraits<Scalar>::AddCost))"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (Evaluator)",
    "insertText": "evaluator(derived())"
  },
  {
    "label": "hasNaN()",
    "kind": "Method",
    "detail": "Function (} template<Derived> bool DenseBase<Derived)",
    "insertText": "hasNaN()"
  },
  {
    "label": "EIGEN_COMP_MSVC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "EIGEN_COMP_MSVC(defined __FAST_MATH__) return derived().array().isNaN().any()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return((derived().array()==derived().array()).all())"
  },
  {
    "label": "allFinite()",
    "kind": "Method",
    "detail": "Function (# endif } template<Derived> bool DenseBase<Derived)",
    "insertText": "allFinite()"
  },
  {
    "label": "EIGEN_COMP_MSVC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "EIGEN_COMP_MSVC(defined __FAST_MATH__) return derived().array().isFinite().all()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return((derived()-derived()).hasNaN())"
  }
]