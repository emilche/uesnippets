[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCarouselDisplayItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCarouselDisplayItem"
  },
  {
    "label": "SWidgetCarousel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidgetCarousel"
  },
  {
    "label": "FCarouselDisplayItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SOverlay . h \" # include \" Animation / CurveSequence . h \" # include \" Widgets / Layout / SFxWidget . h \" namespace EWidgetCarouselScrollDirection { enum Type { Carousel_Left,Carousel_Right,Carousel_Center,} ; } struct FCarouselDisplayItem : public TSharedFromThis<FCarouselDisplayItem> {)",
    "insertText": "FCarouselDisplayItem() : OpacityValue( 0.f ) , SlideValue( 0.f ) , DesiredOpacityValue( 0.f ) , SlideValueLeftLimit( -1.0f ) , SlideValueRightLimit( 1.0f ) , PeakValueLeftLimit(-0.05f) , PeakValueRightLimit(0.05f) , OptimalSlideValue( 0.0f ) , DesiredSlideValue( 0.f ) , bTransition( false ) , bPeak(false) , bFade( false ) , MoveSpeed( 5.0f ) , PeakSpeed(.2f) , PeakDistance(0.05f) , FadeRate( 2.0f ) , Visibility(EVisibility::Visible)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (FXWidget =)",
    "insertText": "SNew(SFxWidget) .IgnoreClipping(false)"
  },
  {
    "label": "FCurveSequence()",
    "kind": "Method",
    "detail": "Function (SlideInCurve =)",
    "insertText": "FCurveSequence()"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (SlideInCurve .)",
    "insertText": "AddCurve(0.1f, 0.5f)"
  },
  {
    "label": "ScrollIn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScrollIn(EWidgetCarouselScrollDirection::Type ScrollDirection)"
  },
  {
    "label": "PeakIn()",
    "kind": "Method",
    "detail": "Function (bTransition = true ; bPeak = false ; bFade = FadeRate ! = 0 ; DesiredSlideValue = OptimalSlideValue ; DesiredOpacityValue = 1 . 0 f ; } void)",
    "insertText": "PeakIn(EWidgetCarouselScrollDirection::Type ScrollDirection)"
  },
  {
    "label": "JumpToEnd()",
    "kind": "Method",
    "detail": "Function (SlideInCurve .)",
    "insertText": "JumpToEnd()"
  },
  {
    "label": "PlayReverse()",
    "kind": "Method",
    "detail": "Function (SlideInCurve .)",
    "insertText": "PlayReverse(FXWidget.ToSharedRef())"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (bPeak = true ; bFade = FadeRate ! = 0 ;)",
    "insertText": "switch(ScrollDirection)"
  },
  {
    "label": "BlendWidget()",
    "kind": "Method",
    "detail": "Function (bTransition =)",
    "insertText": "BlendWidget(DeltaTime, DesiredSlideValue, MoveSpeed, SlideValue)"
  },
  {
    "label": "SetSlide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlide(SlideValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bPeak)"
  },
  {
    "label": "BlendWidget()",
    "kind": "Method",
    "detail": "Function (bPeak =)",
    "insertText": "BlendWidget(DeltaTime, DesiredSlideValue, PeakSpeed, SlideValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bFade)"
  },
  {
    "label": "BlendWidget()",
    "kind": "Method",
    "detail": "Function (bFade =)",
    "insertText": "BlendWidget(DeltaTime, DesiredOpacityValue, FadeRate, OpacityValue)"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacity(OpacityValue)"
  },
  {
    "label": "BlendWidget()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "BlendWidget(const float& DeltaTime, const float& DesiredValue, const float& Speed, float& OutCurrentValue)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} float Lerp =)",
    "insertText": "Max(SlideInCurve.GetLerp(), 0.1f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DesiredBlendSpeed = Speed* Lerp* DeltaTime ; })",
    "insertText": "if(FMath::Abs(DesiredBlendSpeed) > FMath::Abs(BlendDif))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutCurrentValue = DesiredValue ; bStillBlending = false ; } else {)",
    "insertText": "if(BlendDif > 0.f)"
  },
  {
    "label": "SetWidgetContent()",
    "kind": "Method",
    "detail": "Function (DesiredBlendSpeed* = - 1 . f ; } OutCurrentValue + = DesiredBlendSpeed ; } return bStillBlending ; } void)",
    "insertText": "SetWidgetContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (FXWidget =)",
    "insertText": "SNew(SFxWidget ) .IgnoreClipping(false) .VisualOffset( this, &FCarouselDisplayItem::GetSlide)"
  },
  {
    "label": "GetSFXWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SFxWidget>)",
    "insertText": "GetSFXWidget()"
  },
  {
    "label": "SetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (OpacityValue = InOpacity ; FXWidget ->)",
    "insertText": "SetColorAndOpacity(FLinearColor(1.f,1.f,1.f, OpacityValue ))"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVisibility(EVisibility InVisibility)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (Visibility = InVisibility ; FXWidget ->)",
    "insertText": "SetVisibility(InVisibility)"
  },
  {
    "label": "SetSlide()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSlide(float InSlide, bool bClearTransition = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SlideValue = InSlide ;)",
    "insertText": "if(bClearTransition)"
  },
  {
    "label": "SetMoveSpeed()",
    "kind": "Method",
    "detail": "Function (bPeak = false ; bTransition = false ; DesiredSlideValue = SlideValue ; } } void)",
    "insertText": "SetMoveSpeed(float DesiredMoveSpeed)"
  },
  {
    "label": "SetSliderLeftLimit()",
    "kind": "Method",
    "detail": "Function (MoveSpeed = DesiredMoveSpeed ; } void)",
    "insertText": "SetSliderLeftLimit(float DesiredLeftLimit)"
  },
  {
    "label": "SetSliderRightLimit()",
    "kind": "Method",
    "detail": "Function (SlideValueLeftLimit = DesiredLeftLimit ; } void)",
    "insertText": "SetSliderRightLimit(float DesiredRightLimit)"
  },
  {
    "label": "SetSliderPeakLeftLimit()",
    "kind": "Method",
    "detail": "Function (SlideValueRightLimit = DesiredRightLimit ; } void)",
    "insertText": "SetSliderPeakLeftLimit(float DesiredLimit)"
  },
  {
    "label": "SetSliderPeakRightLimit()",
    "kind": "Method",
    "detail": "Function (PeakValueLeftLimit = DesiredLimit ; } void)",
    "insertText": "SetSliderPeakRightLimit(float DesiredLimit)"
  },
  {
    "label": "SetSliderOptimalPostion()",
    "kind": "Method",
    "detail": "Function (PeakValueRightLimit = DesiredLimit ; } void)",
    "insertText": "SetSliderOptimalPostion(float DesiredOptimalSlideValue)"
  },
  {
    "label": "SetFadeRate()",
    "kind": "Method",
    "detail": "Function (OptimalSlideValue = DesiredOptimalSlideValue ; } void)",
    "insertText": "SetFadeRate(float DesiredFadeRate)"
  },
  {
    "label": "IsInTransition()",
    "kind": "Method",
    "detail": "Function (FadeRate = DesiredFadeRate ; } bool)",
    "insertText": "IsInTransition()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} protected : float OpacityValue ; float SlideValue ; float DesiredOpacityValue ; float SlideValueLeftLimit ; float SlideValueRightLimit ; float PeakValueLeftLimit ; float PeakValueRightLimit ; float OptimalSlideValue ; float DesiredSlideValue ; bool bTransition ; bool bPeak ; bool bFade ; bool bFadeInAndOut ; float MoveSpeed ; float PeakSpeed ; float PeakDistance ; float FadeRate ; TSharedPtr<SFxWidget> FXWidget ; FCurveSequence SlideInCurve ; EVisibility Visibility ; } ; template<ItemType> class SWidgetCarousel : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCarouselPageChanged, int32)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (typedef TSlateDelegates<ItemType>::FOnGenerateWidget FOnGenerateWidget ;)",
    "insertText": "SLATE_BEGIN_ARGS(SWidgetCarousel<ItemType>) : _WidgetItemsSource( static_cast<const TArray<ItemType>*>(NULL) ) , _MoveSpeed( 1.f ) , _SlideValueLeftLimit( -1.f ) , _SlideValueRightLimit( 1.f ) , _PeakValueLeftLimit(-0.05f) , _PeakValueRightLimit(0.05f) , _FadeRate( 1.0f)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (this -> _Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_EVENT(FOnGenerateWidget, OnGenerateWidget ) SLATE_EVENT(FOnCarouselPageChanged, OnPageChanged) SLATE_ARGUMENT( const TArray<ItemType>*, WidgetItemsSource ) SLATE_ATTRIBUTE(float, MoveSpeed ) SLATE_ATTRIBUTE(float, SlideValueLeftLimit ) SLATE_ATTRIBUTE(float, SlideValueRightLimit ) SLATE_ATTRIBUTE(float, PeakValueLeftLimit) SLATE_ATTRIBUTE(float, PeakValueRightLimit) SLATE_ATTRIBUTE(float, FadeRate ) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (OnGenerateWidget = InArgs . _OnGenerateWidget ; OnPageChanged = InArgs . _OnPageChanged ; ItemsSource = InArgs . _WidgetItemsSource ; WidgetIndex = 0 ; MoveSpeed = InArgs . _MoveSpeed .)",
    "insertText": "Get()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget =)",
    "insertText": "MakeShareable(new FCarouselDisplayItem())"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetOpacity(1.0f)"
  },
  {
    "label": "SetSlide()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetSlide(0.f)"
  },
  {
    "label": "SetMoveSpeed()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetMoveSpeed(MoveSpeed)"
  },
  {
    "label": "SetFadeRate()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetFadeRate(FadeRate)"
  },
  {
    "label": "SetSlide()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetSlide(SlideValueLeftLimit)"
  },
  {
    "label": "SetSlide()",
    "kind": "Method",
    "detail": "Function (RightCarouselWidget ->)",
    "insertText": "SetSlide(SlideValueRightLimit)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SAssignNew(WidgetDisplayBox, SHorizontalBox)"
  },
  {
    "label": "GenerateCurrentWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCurrentWidgets()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnPageChanged .)",
    "insertText": "ExecuteIfBound(WidgetIndex)"
  },
  {
    "label": "ItemsSourceRef()",
    "kind": "Method",
    "detail": "Function (const TArray<ItemType>&)",
    "insertText": "ItemsSourceRef(*ItemsSource)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (WidgetIndex = WidgetIndex % ItemsSourceRef .)",
    "insertText": "Num()"
  },
  {
    "label": "SetWidgetContent()",
    "kind": "Method",
    "detail": "Function (} LeftCarouselWidget ->)",
    "insertText": "SetWidgetContent(OnGenerateWidget.Execute(ItemsSourceRef[GetLeftWidgetIndex(WidgetIndex)]))"
  },
  {
    "label": "SetWidgetContent()",
    "kind": "Method",
    "detail": "Function (RightCarouselWidget ->)",
    "insertText": "SetWidgetContent(OnGenerateWidget.Execute(ItemsSourceRef[GetRightWidgetIndex(WidgetIndex)]))"
  },
  {
    "label": "SetWidgetContent()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetWidgetContent(OnGenerateWidget.Execute(ItemsSourceRef[WidgetIndex]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ItemsSourceRef.Num() == 1)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetVisibility(EVisibility::Collapsed)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (} else { LeftCarouselWidget ->)",
    "insertText": "SetVisibility(EVisibility::Visible)"
  },
  {
    "label": "SetSliderLimits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetSliderLimits()"
  },
  {
    "label": "GenerateWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateWidgets()"
  },
  {
    "label": "GetWidgetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetWidgetIndex()"
  },
  {
    "label": "SwapBuffer()",
    "kind": "Method",
    "detail": "Function (EWidgetCarouselScrollDirection::Type ScrollDirection = Index> WidgetIndex ? EWidgetCarouselScrollDirection::Carousel_Right : EWidgetCarouselScrollDirection::Carousel_Left ;)",
    "insertText": "SwapBuffer(ScrollDirection, Index)"
  },
  {
    "label": "SetNextWidget()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetNextWidget()"
  },
  {
    "label": "SwapBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapBuffer(EWidgetCarouselScrollDirection::Carousel_Left)"
  },
  {
    "label": "SetPreviousWidget()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetPreviousWidget()"
  },
  {
    "label": "SwapBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapBuffer(EWidgetCarouselScrollDirection::Carousel_Right)"
  },
  {
    "label": "Peak()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Peak(EWidgetCarouselScrollDirection::Type Direction)"
  },
  {
    "label": "PeakIn()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "PeakIn(Direction)"
  },
  {
    "label": "SetItemSource()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetItemSource(const TArray<ItemType>* InWidgetItemsSource)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ItemsSource = InWidgetItemsSource ;)",
    "insertText": "if(ItemsSource->Num())"
  },
  {
    "label": "SetActiveWidgetIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveWidgetIndex(0)"
  },
  {
    "label": "GetPrimarySlide()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetPrimarySlide()"
  },
  {
    "label": "SetMoveSpeed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMoveSpeed(float InMoveSpeed)"
  },
  {
    "label": "SetMoveSpeed()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetMoveSpeed(InMoveSpeed)"
  },
  {
    "label": "GetMoveSpeed()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetMoveSpeed()"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (WidgetDisplayBox ->)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (WidgetDisplayBox ->)",
    "insertText": "AddSlot() [ SNew( SOverlay ) +SOverlay::Slot() [ LeftCarouselWidget->GetSFXWidget().ToSharedRef() ] +SOverlay::Slot() [ RightCarouselWidget->GetSFXWidget().ToSharedRef() ] + SOverlay::Slot() [ CenterCarouselWidget->GetSFXWidget().ToSharedRef()"
  },
  {
    "label": "SwapBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapBuffer(EWidgetCarouselScrollDirection::Type ScrollDirection, int32 OverrideWidget = INDEX_NONE)"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActiveTimer(0.0f, FWidgetActiveTimerDelegate::CreateSP(this, &SWidgetCarousel::RegisteredTick))"
  },
  {
    "label": "GetLeftWidgetIndex()",
    "kind": "Method",
    "detail": "Function (WidgetIndex =)",
    "insertText": "GetLeftWidgetIndex(WidgetIndex)"
  },
  {
    "label": "SetSlide()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetSlide(CenterCarouselWidget->GetSlideValue() + SlideValueLeftLimit, true)"
  },
  {
    "label": "GetRightWidgetIndex()",
    "kind": "Method",
    "detail": "Function (} else { WidgetIndex =)",
    "insertText": "GetRightWidgetIndex(WidgetIndex)"
  },
  {
    "label": "SetSlide()",
    "kind": "Method",
    "detail": "Function (RightCarouselWidget ->)",
    "insertText": "SetSlide(CenterCarouselWidget->GetSlideValue() + SlideValueRightLimit, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(OverrideWidget != INDEX_NONE)"
  },
  {
    "label": "SetWidgetContent()",
    "kind": "Method",
    "detail": "Function (WidgetIndex = OverrideWidget ; CenterCarouselWidget ->)",
    "insertText": "SetWidgetContent(OnGenerateWidget.Execute(ItemsSourceRef[OverrideWidget]))"
  },
  {
    "label": "ScrollIn()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "ScrollIn(ScrollDirection)"
  },
  {
    "label": "SetSliderLeftLimit()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetSliderLeftLimit(SlideValueLeftLimit)"
  },
  {
    "label": "SetSliderRightLimit()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetSliderRightLimit(SlideValueRightLimit)"
  },
  {
    "label": "SetSliderPeakLeftLimit()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetSliderPeakLeftLimit(SlideValueLeftLimit + PeakValueLeftLimit)"
  },
  {
    "label": "SetSliderPeakRightLimit()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetSliderPeakRightLimit(SlideValueLeftLimit + PeakValueRightLimit)"
  },
  {
    "label": "SetSliderOptimalPostion()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "SetSliderOptimalPostion(SlideValueLeftLimit)"
  },
  {
    "label": "SetSliderPeakLeftLimit()",
    "kind": "Method",
    "detail": "Function (RightCarouselWidget ->)",
    "insertText": "SetSliderPeakLeftLimit(SlideValueRightLimit + PeakValueLeftLimit)"
  },
  {
    "label": "SetSliderPeakRightLimit()",
    "kind": "Method",
    "detail": "Function (RightCarouselWidget ->)",
    "insertText": "SetSliderPeakRightLimit(SlideValueRightLimit + PeakValueRightLimit)"
  },
  {
    "label": "SetSliderOptimalPostion()",
    "kind": "Method",
    "detail": "Function (RightCarouselWidget ->)",
    "insertText": "SetSliderOptimalPostion(SlideValueRightLimit)"
  },
  {
    "label": "SetSliderPeakLeftLimit()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetSliderPeakLeftLimit(PeakValueLeftLimit)"
  },
  {
    "label": "SetSliderPeakRightLimit()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetSliderPeakRightLimit(PeakValueRightLimit)"
  },
  {
    "label": "SetSliderOptimalPostion()",
    "kind": "Method",
    "detail": "Function (CenterCarouselWidget ->)",
    "insertText": "SetSliderOptimalPostion(0)"
  },
  {
    "label": "GetLeftWidgetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLeftWidgetIndex(int32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 LeftWidgetIndex = Index - 1 ;)",
    "insertText": "if(LeftWidgetIndex < 0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LeftWidgetIndex =)",
    "insertText": "Max(0, ItemsSource->Num() - 1)"
  },
  {
    "label": "GetRightWidgetIndex()",
    "kind": "Method",
    "detail": "Function (} return LeftWidgetIndex ; } int32)",
    "insertText": "GetRightWidgetIndex(int32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 RightWidgetIndex = Index + 1 ;)",
    "insertText": "if(RightWidgetIndex >= ItemsSource->Num())"
  },
  {
    "label": "RegisteredTick()",
    "kind": "Method",
    "detail": "Function (} EActiveTimerReturnType)",
    "insertText": "RegisteredTick(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (LeftCarouselWidget ->)",
    "insertText": "Tick(InDeltaTime)"
  }
]