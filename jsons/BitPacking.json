[
  {
    "label": "SerializeIntDelta()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" Iris / Serialization / NetBitStreamReader . h \" # include \" Iris / Serialization / NetBitStreamWriter . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsIntegral . h \" # include \" Templates / IsSigned . h \" namespace UE::Net { void)",
    "insertText": "SerializeIntDelta(FNetBitStreamWriter& Writer, const int32 Value, const int32 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "DeserializeIntDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeIntDelta(FNetBitStreamReader& Reader, int32& OutValue, const int32 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "SerializeUintDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeUintDelta(FNetBitStreamWriter& Writer, const uint32 Value, const uint32 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "DeserializeUintDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeUintDelta(FNetBitStreamReader& Reader, uint32& OutValue, const uint32 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "SerializeIntDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIntDelta(FNetBitStreamWriter& Writer, const int64 Value, const int64 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "DeserializeIntDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeIntDelta(FNetBitStreamReader& Reader, int64& OutValue, const int64 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "SerializeUintDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeUintDelta(FNetBitStreamWriter& Writer, const uint64 Value, const uint64 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "DeserializeUintDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeUintDelta(FNetBitStreamReader& Reader, uint64& OutValue, const uint64 PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "QuantizeSignedUnitFloat()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "QuantizeSignedUnitFloat(float Value, uint32 BitCount)"
  },
  {
    "label": "DequantizeSignedUnitFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DequantizeSignedUnitFloat(uint32 Value, uint32 BitCount)"
  },
  {
    "label": "SerializeSignedUnitFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeSignedUnitFloat(FNetBitStreamWriter& Writer, uint32 Value, uint32 BitCount)"
  },
  {
    "label": "DeserializeSignedUnitFloat()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DeserializeSignedUnitFloat(FNetBitStreamReader& Reader, uint32 BitCount)"
  },
  {
    "label": "SerializeSameValue()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "SerializeSameValue(FNetBitStreamWriter& Writer, const T Value, const T OtherValue)"
  },
  {
    "label": "IsSameValue()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "IsSameValue(Value == OtherValue ? 1U : 0U)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(IsSameValue, 1U)"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (const uint32 IsSameValue = Reader .)",
    "insertText": "ReadBits(1U)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (OutValue = OtherValue ; return true ; } return false ; } template<T,TEnableIf<TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) <= 8U, int32>::Type U = -1> inline void SerializeIntDelta(FNetBitStreamWriter& Writer, const T Value, const T PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using SignedType = std::conditional_t<)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) <= 8U, int32>::Type U = -1> inline void DeserializeIntDelta(FNetBitStreamReader& Reader, T& OutValue, const T PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "DeserializeIntDelta()",
    "kind": "Method",
    "detail": "Function (SignedType Value ;)",
    "insertText": "DeserializeIntDelta(Reader, Value, SignedType(PrevValue), SmallBitCountTable, SmallBitCountTableEntryCount, LargeBitCount)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (OutValue =)",
    "insertText": "T(Value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<! TIsSigned<T>::Value&& TIsIntegral<T>::Value&&)",
    "insertText": "sizeof(T) <= 8U, uint32>::Type U = 1U> inline void SerializeUintDelta(FNetBitStreamWriter& Writer, const T Value, const T PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<! TIsSigned<T>::Value&& TIsIntegral<T>::Value&&)",
    "insertText": "sizeof(T) <= 8U, uint32>::Type U = 1U> inline void DeserializeUintDelta(FNetBitStreamReader& Reader, T& OutValue, const T PrevValue, const uint8* SmallBitCountTable, const uint32 SmallBitCountTableEntryCount, uint8 LargeBitCount)"
  },
  {
    "label": "DeserializeUintDelta()",
    "kind": "Method",
    "detail": "Function (UnsignedType Value ;)",
    "insertText": "DeserializeUintDelta(Reader, Value, UnsignedType(PrevValue), SmallBitCountTable, SmallBitCountTableEntryCount, LargeBitCount)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(Value, BitCount)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (} else { const uint32 SignAndIsNotZero = Value>> 2 3 U ; Writer .)",
    "insertText": "WriteBits(SignAndIsNotZero, 2U)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(Value, 23U)"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (uint32 Value = Reader .)",
    "insertText": "ReadBits(BitCount)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (const uint32 Mask = 1)",
    "insertText": "U(BitCount - 1U)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Value ^ Mask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Value = SignAndIsNotZero<<2 3 U ;)",
    "insertText": "if(SignAndIsNotZero & 1U)"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (Value | = Reader .)",
    "insertText": "ReadBits(23U)"
  }
]