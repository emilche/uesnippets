[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateEditableTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateEditableTextLayout"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "ITextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextLayoutMarshaller"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SMultiLineEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableText"
  },
  {
    "label": "FScopedEditableTextTransaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedEditableTextTransaction"
  },
  {
    "label": "FScopedEditableTextTransaction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" SlateGlobals . h \" # include \" Layout / Margin . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / Text / IRun . h \" # include \" Framework / Text / TextLayout . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SScrollBar . h \" # include \" Framework / SlateDelegates . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # if WITH_FANCY_TEXT # include \" Widgets / Text / ISlateEditableTextWidget . h \" # include \" Framework / Text / SlateTextLayoutFactory . h \" # endif class FActiveTimerHandle ; class FArrangedChildren ; class FPaintArgs ; class FSlateEditableTextLayout ; class FSlateWindowElementList ; class ITextLayoutMarshaller ; enum class ETextShapingMethod : uint8 ; # if WITH_FANCY_TEXT class ITextLayoutMarshaller ; class FSlateEditableTextLayout ; class SMultiLineEditableText : public SWidget,public ISlateEditableTextWidget { public : struct FScopedEditableTextTransaction { public :)",
    "insertText": "FScopedEditableTextTransaction(TSharedPtr<SMultiLineEditableText> InText) : Text(InText)"
  },
  {
    "label": "BeginEditTransaction()",
    "kind": "Method",
    "detail": "Function (Text ->)",
    "insertText": "BeginEditTransaction()"
  },
  {
    "label": "FScopedEditableTextTransaction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedEditableTextTransaction()"
  },
  {
    "label": "EndEditTransaction()",
    "kind": "Method",
    "detail": "Function (Text ->)",
    "insertText": "EndEditTransaction()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; private : TSharedPtr<SMultiLineEditableText> Text ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCursorMoved, const FTextLocation&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SMultiLineEditableText ) : _Text() , _HintText() , _SearchText() , _Marshaller() , _WrapTextAt( 0.0f ) , _AutoWrapText(false) , _WrappingPolicy(ETextWrappingPolicy::DefaultWrapping) , _TextStyle( &FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>( \"NormalText\" ) ) , _Font() , _Margin( FMargin() ) , _LineHeightPercentage( 1.0f ) , _ApplyLineHeightToBottomLine( true ) , _Justification( ETextJustify::Left ) , _IsReadOnly(false) , _OnTextChanged() , _OnTextCommitted() , _AllowMultiLine(true) , _SelectAllTextWhenFocused(false) , _SelectWordOnMouseDoubleClick(true) , _ClearTextSelectionOnFocusLoss(true) , _RevertTextOnEscape(false) , _ClearKeyboardFocusOnCommit(true) , _AllowContextMenu(true) , _OnCursorMoved() , _ContextMenuExtender() , _ModiferKeyForNewLine(EModifierKey::None) , _VirtualKeyboardOptions( FVirtualKeyboardOptions() ) , _VirtualKeyboardTrigger(EVirtualKeyboardTrigger::OnFocusByPointer) , _VirtualKeyboardDismissAction(EVirtualKeyboardDismissAction::TextChangeOnDismiss) , _TextShapingMethod() , _TextFlowDirection() , _OverflowPolicy()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_ATTRIBUTE(FText, Text) SLATE_ATTRIBUTE(FText, HintText) SLATE_ATTRIBUTE(FText, SearchText) SLATE_ARGUMENT(TSharedPtr< ITextLayoutMarshaller >, Marshaller) SLATE_ATTRIBUTE(float, WrapTextAt) SLATE_ATTRIBUTE(bool, AutoWrapText) SLATE_ATTRIBUTE(ETextWrappingPolicy, WrappingPolicy) SLATE_STYLE_ARGUMENT(FTextBlockStyle, TextStyle) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE(FMargin, Margin) SLATE_ATTRIBUTE(float, LineHeightPercentage) SLATE_ATTRIBUTE(bool, ApplyLineHeightToBottomLine) SLATE_ATTRIBUTE(ETextJustify::Type, Justification) SLATE_ATTRIBUTE(bool, IsReadOnly) SLATE_ARGUMENT(TSharedPtr< SScrollBar >, HScrollBar) SLATE_ARGUMENT(TSharedPtr< SScrollBar >, VScrollBar) SLATE_EVENT(FOnIsTypedCharValid, OnIsTypedCharValid) SLATE_EVENT(FOnTextChanged, OnTextChanged) SLATE_EVENT(FOnTextCommitted, OnTextCommitted) SLATE_ATTRIBUTE(bool, AllowMultiLine) SLATE_ATTRIBUTE(bool, SelectAllTextWhenFocused) SLATE_ATTRIBUTE(bool, SelectWordOnMouseDoubleClick) SLATE_ATTRIBUTE(bool, ClearTextSelectionOnFocusLoss) SLATE_ATTRIBUTE(bool, RevertTextOnEscape) SLATE_ATTRIBUTE(bool, ClearKeyboardFocusOnCommit) SLATE_ATTRIBUTE(bool, AllowContextMenu) SLATE_EVENT(FOnContextMenuOpening, OnContextMenuOpening) SLATE_EVENT(FOnUserScrolled, OnHScrollBarUserScrolled) SLATE_EVENT(FOnUserScrolled, OnVScrollBarUserScrolled) SLATE_EVENT(FOnCursorMoved, OnCursorMoved) SLATE_EVENT(FOnKeyChar, OnKeyCharHandler) SLATE_EVENT(FOnKeyDown, OnKeyDownHandler) SLATE_EVENT(FMenuExtensionDelegate, ContextMenuExtender) SLATE_EVENT(FCreateSlateTextLayout, CreateSlateTextLayout) SLATE_ARGUMENT(EModifierKey::Type, ModiferKeyForNewLine) SLATE_ARGUMENT(FVirtualKeyboardOptions, VirtualKeyboardOptions) SLATE_ATTRIBUTE(EVirtualKeyboardTrigger, VirtualKeyboardTrigger) SLATE_ATTRIBUTE(EVirtualKeyboardDismissAction, VirtualKeyboardDismissAction) SLATE_ARGUMENT( TOptional<ETextShapingMethod>, TextShapingMethod ) SLATE_ARGUMENT( TOptional<ETextFlowDirection>, TextFlowDirection ) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_END_ARGS() SLATE_API SMultiLineEditableText()"
  },
  {
    "label": "SMultiLineEditableText()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SMultiLineEditableText()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute< FText >& InText)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "GetPlainText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPlainText()"
  },
  {
    "label": "GetCurrentTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurrentTextLine(FString& OutTextLine)"
  },
  {
    "label": "GetTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextLine(const int32 InLineIndex, FString& OutTextLine)"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHintText(const TAttribute< FText >& InHintText)"
  },
  {
    "label": "GetHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHintText()"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const TAttribute<FText>& InSearchText)"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "GetSearchResultIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSearchResultIndex()"
  },
  {
    "label": "GetNumSearchResults()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSearchResults()"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(const TAttribute< FSlateFontInfo >& InNewFont)"
  },
  {
    "label": "GetFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetFont()"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetWrapTextAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapTextAt(const TAttribute<float>& InWrapTextAt)"
  },
  {
    "label": "SetAutoWrapText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoWrapText(const TAttribute<bool>& InAutoWrapText)"
  },
  {
    "label": "SetWrappingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingPolicy(const TAttribute<ETextWrappingPolicy>& InWrappingPolicy)"
  },
  {
    "label": "SetLineHeightPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHeightPercentage(const TAttribute<float>& InLineHeightPercentage)"
  },
  {
    "label": "SetApplyLineHeightToBottomLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyLineHeightToBottomLine(const TAttribute<bool>& InApplyLineHeightToBottomLine)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(const TAttribute<FMargin>& InMargin)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "SetAllowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowContextMenu(const TAttribute< bool >& InAllowContextMenu)"
  },
  {
    "label": "SetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualKeyboardDismissAction(TAttribute< EVirtualKeyboardDismissAction > InVirtualKeyboardDismissAction)"
  },
  {
    "label": "SetSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectWordOnMouseDoubleClick(const TAttribute<bool>& InSelectWordOnMouseDoubleClick)"
  },
  {
    "label": "SetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsReadOnly(const TAttribute< bool >& InIsReadOnly)"
  },
  {
    "label": "GetTextLineCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextLineCount()"
  },
  {
    "label": "SetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextWhenFocused(const TAttribute<bool>& InSelectAllTextWhenFocused)"
  },
  {
    "label": "SetClearTextSelectionOnFocusLoss()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearTextSelectionOnFocusLoss(const TAttribute<bool>& InClearTextSelectionOnFocusLoss)"
  },
  {
    "label": "SetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevertTextOnEscape(const TAttribute<bool>& InRevertTextOnEscape)"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearKeyboardFocusOnCommit(const TAttribute<bool>& InClearKeyboardFocusOnCommit)"
  },
  {
    "label": "AnyTextSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyTextSelected()"
  },
  {
    "label": "SelectAllText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllText()"
  },
  {
    "label": "SelectText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectText(const FTextLocation& InSelectionStart, const FTextLocation& InCursorLocation)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedText()"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (FTextSelection)",
    "insertText": "GetSelection()"
  },
  {
    "label": "DeleteSelectedText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedText()"
  },
  {
    "label": "InsertTextAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTextAtCursor(const FText& InText)"
  },
  {
    "label": "InsertTextAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTextAtCursor(const FString& InString)"
  },
  {
    "label": "InsertRunAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertRunAtCursor(TSharedRef<IRun> InRun)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const ETextLocation NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const ETextLocation NewLocation)"
  },
  {
    "label": "ApplyToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToSelection(const FRunInfo& InRunInfo, const FTextBlockStyle& InStyle)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearch(const FText& InSearchText, const ESearchCase::Type InSearchCase = ESearchCase::IgnoreCase, const bool InReverse = false)"
  },
  {
    "label": "AdvanceSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSearch(const bool InReverse = false)"
  },
  {
    "label": "GetRunUnderCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IRun>)",
    "insertText": "GetRunUnderCursor()"
  },
  {
    "label": "GetSelectedRuns()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<const IRun>>)",
    "insertText": "GetSelectedRuns()"
  },
  {
    "label": "GetCursorLocation()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "GetCursorLocation()"
  },
  {
    "label": "GetCharacterAt()",
    "kind": "Method",
    "detail": "Function (TCHAR)",
    "insertText": "GetCharacterAt(const FTextLocation& Location)"
  },
  {
    "label": "GetHScrollBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const SScrollBar>)",
    "insertText": "GetHScrollBar()"
  },
  {
    "label": "GetVScrollBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const SScrollBar>)",
    "insertText": "GetVScrollBar()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "SetOnKeyCharHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnKeyCharHandler(FOnKeyChar InOnKeyCharHandler)"
  },
  {
    "label": "SetOnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (OnKeyCharHandler = InOnKeyCharHandler ; } void)",
    "insertText": "SetOnKeyDownHandler(FOnKeyDown InOnKeyDownHandler)"
  },
  {
    "label": "ForceScroll()",
    "kind": "Method",
    "detail": "Function (OnKeyDownHandler = InOnKeyDownHandler ; } void)",
    "insertText": "ForceScroll(int32 UserIndex, float ScrollAxisMagnitude)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "CacheDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry,const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "IsInteractable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractable()"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "OnHScrollBarMoved()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnHScrollBarMoved(const float InScrollOffsetFraction)"
  },
  {
    "label": "OnVScrollBarMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVScrollBarMoved(const float InScrollOffsetFraction)"
  },
  {
    "label": "IsRightClickScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightClickScrolling()"
  },
  {
    "label": "IsTextReadOnly()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsTextReadOnly()"
  },
  {
    "label": "IsTextPassword()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextPassword()"
  },
  {
    "label": "IsMultiLineTextEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultiLineTextEdit()"
  },
  {
    "label": "ShouldJumpCursorToEndWhenFocused()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldJumpCursorToEndWhenFocused()"
  },
  {
    "label": "ShouldSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectAllTextWhenFocused()"
  },
  {
    "label": "ShouldClearTextSelectionOnFocusLoss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClearTextSelectionOnFocusLoss()"
  },
  {
    "label": "ShouldRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRevertTextOnEscape()"
  },
  {
    "label": "ShouldClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClearKeyboardFocusOnCommit()"
  },
  {
    "label": "ShouldSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectAllTextOnCommit()"
  },
  {
    "label": "ShouldSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectWordOnMouseDoubleClick()"
  },
  {
    "label": "CanInsertCarriageReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertCarriageReturn()"
  },
  {
    "label": "CanTypeCharacter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTypeCharacter(const TCHAR InChar)"
  },
  {
    "label": "EnsureActiveTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureActiveTick()"
  },
  {
    "label": "GetVirtualKeyboardType()",
    "kind": "Method",
    "detail": "Function (EKeyboardType)",
    "insertText": "GetVirtualKeyboardType()"
  },
  {
    "label": "GetVirtualKeyboardOptions()",
    "kind": "Method",
    "detail": "Function (FVirtualKeyboardOptions)",
    "insertText": "GetVirtualKeyboardOptions()"
  },
  {
    "label": "GetVirtualKeyboardTrigger()",
    "kind": "Method",
    "detail": "Function (EVirtualKeyboardTrigger)",
    "insertText": "GetVirtualKeyboardTrigger()"
  },
  {
    "label": "GetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (EVirtualKeyboardDismissAction)",
    "insertText": "GetVirtualKeyboardDismissAction()"
  },
  {
    "label": "GetSlateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetSlateWidget()"
  },
  {
    "label": "GetSlateWidgetPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSlateWidgetPtr()"
  },
  {
    "label": "BuildContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildContextMenuContent()"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextChanged(const FText& InText)"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted(const FText& InText, const ETextCommit::Type InTextAction)"
  },
  {
    "label": "OnCursorMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCursorMoved(const FTextLocation& InLocation)"
  },
  {
    "label": "UpdateAndClampHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateAndClampHorizontalScrollBar(const float InViewOffset, const float InViewFraction, const EVisibility InVisiblityOverride)"
  },
  {
    "label": "UpdateAndClampVerticalScrollBar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateAndClampVerticalScrollBar(const float InViewOffset, const float InViewFraction, const EVisibility InVisiblityOverride)"
  }
]