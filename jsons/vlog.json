[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "VmodulePattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmodulePattern"
  },
  {
    "label": "MatchTarget",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MatchTarget"
  },
  {
    "label": "VlogInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_VLOG_H_ # define BASE_VLOG_H_ # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_piece . h \" namespace logging { class BASE_EXPORT VlogInfo { public : const int kDefaultVlogLevel ;)",
    "insertText": "VlogInfo(const std::string& v_switch, const std::string& vmodule_switch, int* min_log_level)"
  },
  {
    "label": "VlogInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VlogInfo(const VlogInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VlogInfo&)",
    "insertText": "operator(const VlogInfo&)"
  },
  {
    "label": "VlogInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VlogInfo()"
  },
  {
    "label": "GetVlogLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVlogLevel(base::StringPiece file)"
  },
  {
    "label": "WithSwitches()",
    "kind": "Method",
    "detail": "Function (VlogInfo*)",
    "insertText": "WithSwitches(const std::string& vmodule_switch)"
  },
  {
    "label": "SetMaxVlogLevel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetMaxVlogLevel(int level)"
  },
  {
    "label": "GetMaxVlogLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaxVlogLevel()"
  },
  {
    "label": "VmodulePattern()",
    "kind": "Method",
    "detail": "Function (struct VmodulePattern { enum MatchTarget { MATCH_MODULE,MATCH_FILE } ;)",
    "insertText": "VmodulePattern(const std::string& pattern)"
  },
  {
    "label": "VmodulePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VmodulePattern()"
  },
  {
    "label": "VlogInfo()",
    "kind": "Method",
    "detail": "Function (std::string pattern ; int vlog_level ; MatchTarget match_target ; } ;)",
    "insertText": "VlogInfo(std::vector<VmodulePattern> vmodule_levels, int* min_log_level)"
  },
  {
    "label": "ParseVmoduleLevels()",
    "kind": "Method",
    "detail": "Function (std::vector<VmodulePattern>)",
    "insertText": "ParseVmoduleLevels(const std::string& vmodule_switch)"
  },
  {
    "label": "MatchVlogPattern()",
    "kind": "Method",
    "detail": "Function (const std::vector<VmodulePattern> vmodule_levels_ ; raw_ptr<int> const min_log_level_ ; } ; BASE_EXPORT bool)",
    "insertText": "MatchVlogPattern(base::StringPiece string, base::StringPiece vlog_pattern)"
  }
]