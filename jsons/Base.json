[
  {
    "label": "Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Base"
  },
  {
    "label": "Base()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_Base_h # define Alembic_Abc_Base_h # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / ErrorHandler . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class Base { protected :)",
    "insertText": "Base()"
  },
  {
    "label": "Base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Base(ErrorHandler::Policy iPolicy ) : m_errorHandler( iPolicy)"
  },
  {
    "label": "Base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Base(const Base &iCopy ) : m_errorHandler( iCopy.m_errorHandler)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Base&)",
    "insertText": "operator(const Base &iCopy)"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (m_errorHandler = iCopy . m_errorHandler ; return* this ; } bool)",
    "insertText": "valid()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_errorHandler .)",
    "insertText": "clear()"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (} public : ErrorHandler&)",
    "insertText": "getErrorHandler()"
  },
  {
    "label": "GetErrorHandlerPolicy()",
    "kind": "Method",
    "detail": "Function (} private : ErrorHandler m_errorHandler ; } ; ErrorHandler::Policy)",
    "insertText": "GetErrorHandlerPolicy(const Base& iClass)"
  }
]