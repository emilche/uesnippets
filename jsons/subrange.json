[
  {
    "label": "_From",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_From"
  },
  {
    "label": "_To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_To"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Pair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pair"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Empty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_Empty"
  },
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "_Sp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sp"
  },
  {
    "label": "tuple_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_size"
  },
  {
    "label": "tuple_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_element"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_SUBRANGE_H # define _LIBCPP___RANGES_SUBRANGE_H # include<__assert> # include<__concepts / constructible . h> # include<__concepts / convertible_to . h> # include<__concepts / copyable . h> # include<__concepts / derived_from . h> # include<__concepts / different_from . h> # include<__config> # include<__iterator / advance . h> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__ranges / enable_borrowed_range . h> # include<__ranges / size . h> # include<__ranges / view_interface . h> # include<__tuple> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "_From()",
    "kind": "Method",
    "detail": "Function (template<class _From,class _To> concept __uses_nonqualification_pointer_conversion = is_pointer_v<_From>&& is_pointer_v<_To>&& ! convertible_to<remove_pointer_t<)",
    "insertText": "_From(*)[], remove_pointer_t<_To>(*)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<class _From,class _To> concept __convertible_to_non_slicing = convertible_to<_From,_To>&& ! __uses_nonqualification_pointer_conversion<decay_t<_From>,decay_t<_To>> ; template<class _Tp> concept __pair_like = ! is_reference_v<_Tp>&&)",
    "insertText": "requires(_Tp __t)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (convertible_to<const tuple_element_t<0, _Tp>&>)",
    "insertText": "get(__t)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Pair,class _Iter,class _Sent> concept __pair_like_convertible_from = ! range<_Pair>&& __pair_like<_Pair>&& constructible_from<_Pair,_Iter,_Sent>&& __convertible_to_non_slicing<_Iter,tuple_element_t<0,_Pair>>&& convertible_to<_Sent,tuple_element_t<1,_Pair>> ; enum class _LIBCPP_ENUM_VIS subrange_kind : bool { unsized,sized } ; template<input_or_output_iterator _Iter,sentinel_for<_Iter> _Sent = _Iter,subrange_kind _Kind = sized_sentinel_for<_Sent,_Iter> ? subrange_kind::sized : subrange_kind::unsized>)",
    "insertText": "requires(_Kind == subrange_kind::sized || !sized_sentinel_for<_Sent, _Iter>)"
  },
  {
    "label": "_StoreSize()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "_StoreSize(_Kind == subrange_kind::sized && !sized_sentinel_for<_Sent, _Iter>)"
  },
  {
    "label": "_Empty()",
    "kind": "Method",
    "detail": "Function (private : bool _MustProvideSizeAtConstruction = ! _StoreSize ; struct _Empty {)",
    "insertText": "_Empty(auto)"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (} } ; using _Size = conditional_t<_StoreSize,make_unsigned_t<iter_difference_t<_Iter>>,_Empty> ; _LIBCPP_NO_UNIQUE_ADDRESS _Iter __begin_ =)",
    "insertText": "_Iter()"
  },
  {
    "label": "_Sent()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_NO_UNIQUE_ADDRESS _Sent __end_ =)",
    "insertText": "_Sent()"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_NO_UNIQUE_ADDRESS _Size __size_ = 0 ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "subrange()"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "subrange(__convertible_to_non_slicing<_Iter> auto __iter, _Sent __sent) requires _MustProvideSizeAtConstruction : __begin_(std::move(__iter)), __end_(std::move(__sent))"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "subrange(__convertible_to_non_slicing<_Iter> auto __iter, _Sent __sent, make_unsigned_t<iter_difference_t<_Iter>> __n) requires (_Kind == subrange_kind::sized) : __begin_(std::move(__iter)), __end_(std::move(__sent)), __size_(__n)"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (} template<__different_from<subrange> _Range> requires borrowed_range<_Range>&& __convertible_to_non_slicing<iterator_t<_Range>,_Iter>&& convertible_to<sentinel_t<_Range>,_Sent> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "subrange(_Range&& __range) requires (!_StoreSize) : subrange(ranges::begin(__range), ranges::end(__range))"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (} template<__different_from<subrange> _Range> requires borrowed_range<_Range>&& __convertible_to_non_slicing<iterator_t<_Range>,_Iter>&& convertible_to<sentinel_t<_Range>,_Sent> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "subrange(_Range&& __range) requires _StoreSize && sized_range<_Range> : subrange(__range, ranges::size(__range))"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (} template<borrowed_range _Range> requires __convertible_to_non_slicing<iterator_t<_Range>,_Iter>&& convertible_to<sentinel_t<_Range>,_Sent> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "subrange(_Range&& __range, make_unsigned_t<iter_difference_t<_Iter>> __n) requires (_Kind == subrange_kind::sized) : subrange(ranges::begin(__range), ranges::end(__range), __n)"
  },
  {
    "label": "_Pair()",
    "kind": "Method",
    "detail": "Function (} template<__different_from<subrange> _Pair> requires __pair_like_convertible_from<_Pair,const _Iter&,const _Sent&> _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "_Pair()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Iter)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Sent)",
    "insertText": "end()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI subrange)",
    "insertText": "next(iter_difference_t<_Iter> __n = 1)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (auto __tmp =* this ; __tmp .)",
    "insertText": "advance(__n)"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI subrange)",
    "insertText": "prev(iter_difference_t<_Iter> __n = 1)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (auto __tmp =* this ; __tmp .)",
    "insertText": "advance(-__n)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(__begin_, __n)"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (subrange<_Iter, _Sent, subrange_kind::sized>)",
    "insertText": "subrange(_Iter, _Sent, make_unsigned_t<iter_difference_t<_Iter>>)"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (template<borrowed_range _Range>)",
    "insertText": "subrange(_Range&&) -> subrange<iterator_t<_Range>, sentinel_t<_Range>, (sized_range<_Range> || sized_sentinel_for<sentinel_t<_Range>, iterator_t<_Range>>)"
  },
  {
    "label": "subrange()",
    "kind": "Method",
    "detail": "Function (subrange<iterator_t<_Range>, sentinel_t<_Range>, subrange_kind::sized>)",
    "insertText": "subrange(_Range&&, make_unsigned_t<range_difference_t<_Range>>)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<size_t _Index,class _Iter,class _Sent,subrange_kind _Kind>)",
    "insertText": "requires((_Index == 0 && copyable<_Iter>) || _Index == 1) _LIBCPP_HIDE_FROM_ABI constexpr auto get(const subrange<_Iter, _Sent, _Kind>& __subrange)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} template<size_t _Index,class _Iter,class _Sent,subrange_kind _Kind>)",
    "insertText": "requires(_Index < 2) _LIBCPP_HIDE_FROM_ABI constexpr auto get(subrange<_Iter, _Sent, _Kind>&& __subrange)"
  }
]