[
  {
    "label": "FVertexBoneWeightsFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexBoneWeightsFacade"
  },
  {
    "label": "FVertexBoneWeightsFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include \" GeometryCollection / Facades / CollectionSelectionFacade . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" namespace GeometryCollection::Facades { class FVertexBoneWeightsFacade { public : const FName BoneIndexAttributeName ; const FName BoneWeightAttributeName ; const FName KinematicAttributeName ;)",
    "insertText": "FVertexBoneWeightsFacade(FManagedArrayCollection& InSelf)"
  },
  {
    "label": "FVertexBoneWeightsFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexBoneWeightsFacade(const FManagedArrayCollection& InSelf)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "AddBoneWeightsFromKinematicBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoneWeightsFromKinematicBindings()"
  },
  {
    "label": "AddBoneWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoneWeight(int32 VertexIndex, int32 BoneIndex, float BoneWeight)"
  },
  {
    "label": "ModifyBoneWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyBoneWeight(int32 VertexIndex, TArray<int32> VertexBoneIndex, TArray<float> VertexBoneWeight)"
  },
  {
    "label": "SetVertexKinematic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexKinematic(int32 VertexIndex)"
  },
  {
    "label": "SetVertexArrayKinematic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexArrayKinematic(const TArray<int32>& VertexIndices)"
  },
  {
    "label": "FindBoneIndices()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<TArray<int32>>*)",
    "insertText": "FindBoneIndices()"
  },
  {
    "label": "GetBoneIndices()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<TArray<int32>>&)",
    "insertText": "GetBoneIndices()"
  },
  {
    "label": "IsKinematicVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsKinematicVertex(int32 VertexIndex)"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumVertices()"
  },
  {
    "label": "FindBoneWeights()",
    "kind": "Method",
    "detail": "Function (} ; const TManagedArray<TArray<float>>*)",
    "insertText": "FindBoneWeights()"
  },
  {
    "label": "GetBoneWeights()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<TArray<float>>&)",
    "insertText": "GetBoneWeights()"
  }
]