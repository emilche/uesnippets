[
  {
    "label": "IPropertyStore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPropertyStore"
  },
  {
    "label": "_tagpropertykey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_tagpropertykey"
  },
  {
    "label": "NativeLibraryLoadError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NativeLibraryLoadError"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "HandleToUint32()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_WIN_UTIL_H_ # define BASE_WIN_WIN_UTIL_H_ # include<stdint . h> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" base / win / windows_types . h \" struct IPropertyStore ; struct _tagpropertykey ; using PROPERTYKEY = _tagpropertykey ; namespace base { struct NativeLibraryLoadError ; namespace win { uint32_t)",
    "insertText": "HandleToUint32(HANDLE h)"
  },
  {
    "label": "Uint32ToHandle()",
    "kind": "Method",
    "detail": "Function (} HANDLE)",
    "insertText": "Uint32ToHandle(uint32_t h)"
  },
  {
    "label": "GetUserSidString()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "GetUserSidString(std::wstring* user_sid)"
  },
  {
    "label": "UserAccountControlIsEnabled()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "UserAccountControlIsEnabled()"
  },
  {
    "label": "SetBooleanValueForPropertyStore()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "SetBooleanValueForPropertyStore(IPropertyStore* property_store, const PROPERTYKEY& property_key, bool property_bool_value)"
  },
  {
    "label": "SetStringValueForPropertyStore()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "SetStringValueForPropertyStore(IPropertyStore* property_store, const PROPERTYKEY& property_key, const wchar_t* property_string_value)"
  },
  {
    "label": "SetClsidForPropertyStore()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "SetClsidForPropertyStore(IPropertyStore* property_store, const PROPERTYKEY& property_key, const CLSID& property_clsid_value)"
  },
  {
    "label": "SetAppIdForPropertyStore()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "SetAppIdForPropertyStore(IPropertyStore* property_store, const wchar_t* app_id)"
  },
  {
    "label": "AddCommandToAutoRun()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "AddCommandToAutoRun(HKEY root_key, const std::wstring& name, const std::wstring& command)"
  },
  {
    "label": "RemoveCommandFromAutoRun()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "RemoveCommandFromAutoRun(HKEY root_key, const std::wstring& name)"
  },
  {
    "label": "ReadCommandFromAutoRun()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ReadCommandFromAutoRun(HKEY root_key, const std::wstring& name, std::wstring* command)"
  },
  {
    "label": "SetShouldCrashOnProcessDetach()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "SetShouldCrashOnProcessDetach(bool crash)"
  },
  {
    "label": "ShouldCrashOnProcessDetach()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ShouldCrashOnProcessDetach()"
  },
  {
    "label": "SetAbortBehaviorForCrashReporting()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "SetAbortBehaviorForCrashReporting()"
  },
  {
    "label": "IsWindows10OrGreaterTabletMode()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsWindows10OrGreaterTabletMode(HWND hwnd)"
  },
  {
    "label": "IsTabletDevice()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsTabletDevice(std::string* reason, HWND hwnd)"
  },
  {
    "label": "IsDeviceUsedAsATablet()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsDeviceUsedAsATablet(std::string* reason)"
  },
  {
    "label": "IsKeyboardPresentOnSlate()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsKeyboardPresentOnSlate(HWND hwnd, std::string* reason)"
  },
  {
    "label": "SIZEOF_STRUCT_WITH_SPECIFIED_LAST_MEMBER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SIZEOF_STRUCT_WITH_SPECIFIED_LAST_MEMBER(struct_name, member) \\ offsetof(struct_name, member) + \\ (sizeof static_cast<struct_name*>(NULL)->member) BASE_EXPORT bool IsEnrolledToDomain()"
  },
  {
    "label": "IsJoinedToAzureAD()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsJoinedToAzureAD()"
  },
  {
    "label": "IsDeviceRegisteredWithManagement()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsDeviceRegisteredWithManagement()"
  },
  {
    "label": "IsUser32AndGdi32Available()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsUser32AndGdi32Available()"
  },
  {
    "label": "GetLoadedModulesSnapshot()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetLoadedModulesSnapshot(HANDLE process, std::vector<HMODULE>* snapshot)"
  },
  {
    "label": "EnableFlicks()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "EnableFlicks(HWND hwnd)"
  },
  {
    "label": "DisableFlicks()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "DisableFlicks(HWND hwnd)"
  },
  {
    "label": "IsProcessPerMonitorDpiAware()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsProcessPerMonitorDpiAware()"
  },
  {
    "label": "EnableHighDPISupport()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "EnableHighDPISupport()"
  },
  {
    "label": "WStringFromGUID()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "WStringFromGUID(REFGUID rguid)"
  },
  {
    "label": "PinUser32()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "PinUser32(NativeLibraryLoadError* error = nullptr)"
  },
  {
    "label": "GetUser32FunctionPointer()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "GetUser32FunctionPointer(const char* function_name, NativeLibraryLoadError* error = nullptr)"
  },
  {
    "label": "GetWindowObjectName()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "GetWindowObjectName(HANDLE handle)"
  },
  {
    "label": "IsRunningUnderDesktopName()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsRunningUnderDesktopName(WStringPiece desktop_name)"
  },
  {
    "label": "IsCurrentSessionRemote()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsCurrentSessionRemote()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(OFFICIAL_BUILD) BASE_EXPORT bool IsAppVerifierEnabled(const std::wstring& process_name)"
  },
  {
    "label": "IsAppVerifierLoaded()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT bool)",
    "insertText": "IsAppVerifierLoaded()"
  },
  {
    "label": "ScopedDomainStateForTesting()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ScopedDomainStateForTesting { public :)",
    "insertText": "ScopedDomainStateForTesting(bool state)"
  },
  {
    "label": "ScopedDomainStateForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDomainStateForTesting(const ScopedDomainStateForTesting&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedDomainStateForTesting&)",
    "insertText": "operator(const ScopedDomainStateForTesting&)"
  },
  {
    "label": "ScopedDomainStateForTesting()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedDomainStateForTesting()"
  },
  {
    "label": "ScopedDeviceRegisteredWithManagementForTesting()",
    "kind": "Method",
    "detail": "Function (private : bool initial_state_ ; } ; class BASE_EXPORT ScopedDeviceRegisteredWithManagementForTesting { public :)",
    "insertText": "ScopedDeviceRegisteredWithManagementForTesting(bool state)"
  },
  {
    "label": "ScopedDeviceRegisteredWithManagementForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDeviceRegisteredWithManagementForTesting(const ScopedDeviceRegisteredWithManagementForTesting&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedDeviceRegisteredWithManagementForTesting&)",
    "insertText": "operator(const ScopedDeviceRegisteredWithManagementForTesting&)"
  },
  {
    "label": "ScopedDeviceRegisteredWithManagementForTesting()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedDeviceRegisteredWithManagementForTesting()"
  },
  {
    "label": "ScopedAzureADJoinStateForTesting()",
    "kind": "Method",
    "detail": "Function (private : bool initial_state_ ; } ; class BASE_EXPORT ScopedAzureADJoinStateForTesting { public :)",
    "insertText": "ScopedAzureADJoinStateForTesting(bool state)"
  },
  {
    "label": "ScopedAzureADJoinStateForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedAzureADJoinStateForTesting(const ScopedAzureADJoinStateForTesting&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedAzureADJoinStateForTesting&)",
    "insertText": "operator(const ScopedAzureADJoinStateForTesting&)"
  },
  {
    "label": "ScopedAzureADJoinStateForTesting()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedAzureADJoinStateForTesting()"
  }
]