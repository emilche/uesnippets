[
  {
    "label": "IPropertyStore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPropertyStore"
  },
  {
    "label": "_tagpropertykey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_tagpropertykey"
  },
  {
    "label": "NativeLibraryLoadError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NativeLibraryLoadError"
  },
  {
    "label": "up",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "up"
  },
  {
    "label": "sizes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sizes"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "GetUserSidString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserSidString(std::wstring* user_sid)"
  },
  {
    "label": "UserAccountControlIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UserAccountControlIsEnabled()"
  },
  {
    "label": "SetBooleanValueForPropertyStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBooleanValueForPropertyStore(\n    IPropertyStore* property_store,\n    const PROPERTYKEY& property_key,\n    bool property_bool_value)"
  },
  {
    "label": "SetStringValueForPropertyStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetStringValueForPropertyStore(\n    IPropertyStore* property_store,\n    const PROPERTYKEY& property_key,\n    const wchar_t* property_string_value)"
  },
  {
    "label": "SetClsidForPropertyStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetClsidForPropertyStore(IPropertyStore* property_store,\n                                          const PROPERTYKEY& property_key,\n                                          const CLSID& property_clsid_value)"
  },
  {
    "label": "SetAppIdForPropertyStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAppIdForPropertyStore(IPropertyStore* property_store,\n                                          const wchar_t* app_id)"
  },
  {
    "label": "AddCommandToAutoRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCommandToAutoRun(HKEY root_key,\n                                     const std::wstring& name,\n                                     const std::wstring& command)"
  },
  {
    "label": "RemoveCommandFromAutoRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCommandFromAutoRun(HKEY root_key,\n                                          const std::wstring& name)"
  },
  {
    "label": "ReadCommandFromAutoRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCommandFromAutoRun(HKEY root_key,\n                                        const std::wstring& name,\n                                        std::wstring* command)"
  },
  {
    "label": "SetShouldCrashOnProcessDetach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldCrashOnProcessDetach(bool crash)"
  },
  {
    "label": "ShouldCrashOnProcessDetach()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCrashOnProcessDetach()"
  },
  {
    "label": "SetAbortBehaviorForCrashReporting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAbortBehaviorForCrashReporting()"
  },
  {
    "label": "IsWindows10OrGreaterTabletMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindows10OrGreaterTabletMode(HWND hwnd)"
  },
  {
    "label": "IsTabletDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabletDevice(std::string* reason, HWND hwnd)"
  },
  {
    "label": "IsDeviceUsedAsATablet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeviceUsedAsATablet(std::string* reason)"
  },
  {
    "label": "IsKeyboardPresentOnSlate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyboardPresentOnSlate(HWND hwnd, std::string* reason)"
  },
  {
    "label": "IsEnrolledToDomain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnrolledToDomain()"
  },
  {
    "label": "IsJoinedToAzureAD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsJoinedToAzureAD()"
  },
  {
    "label": "IsDeviceRegisteredWithManagement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeviceRegisteredWithManagement()"
  },
  {
    "label": "IsUser32AndGdi32Available()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUser32AndGdi32Available()"
  },
  {
    "label": "GetLoadedModulesSnapshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLoadedModulesSnapshot(HANDLE process,\n                                          std::vector<HMODULE>* snapshot)"
  },
  {
    "label": "EnableFlicks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFlicks(HWND hwnd)"
  },
  {
    "label": "DisableFlicks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableFlicks(HWND hwnd)"
  },
  {
    "label": "IsProcessPerMonitorDpiAware()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessPerMonitorDpiAware()"
  },
  {
    "label": "EnableHighDPISupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableHighDPISupport()"
  },
  {
    "label": "WStringFromGUID()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "WStringFromGUID(REFGUID rguid)"
  },
  {
    "label": "PinUser32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PinUser32(NativeLibraryLoadError* error = nullptr)"
  },
  {
    "label": "GetWindowObjectName()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "GetWindowObjectName(HANDLE handle)"
  },
  {
    "label": "IsRunningUnderDesktopName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningUnderDesktopName(WStringPiece desktop_name)"
  },
  {
    "label": "IsCurrentSessionRemote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentSessionRemote()"
  },
  {
    "label": "IsAppVerifierEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAppVerifierEnabled(const std::wstring& process_name)"
  },
  {
    "label": "IsAppVerifierLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAppVerifierLoaded()"
  },
  {
    "label": "ScopedDomainStateForTesting()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedDomainStateForTesting(bool state)"
  },
  {
    "label": "ScopedDeviceRegisteredWithManagementForTesting()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedDeviceRegisteredWithManagementForTesting(bool state)"
  },
  {
    "label": "ScopedAzureADJoinStateForTesting()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedAzureADJoinStateForTesting(bool state)"
  }
]