[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12CommandAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandAllocator"
  },
  {
    "label": "FD3D12CommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandList"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FD3D12QueryHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12QueryHeap"
  },
  {
    "label": "FD3D12Queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Queue"
  },
  {
    "label": "FD3D12Timing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Timing"
  },
  {
    "label": "FD3D12Buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Buffer"
  },
  {
    "label": "FD3D12Resource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Resource"
  },
  {
    "label": "FD3D12SyncPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SyncPoint"
  },
  {
    "label": "FD3D12Fence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12Fence"
  },
  {
    "label": "FD3D12ResolvedFence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResolvedFence"
  },
  {
    "label": "FD3D12CommitReservedResourceDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12CommitReservedResourceDesc"
  },
  {
    "label": "FD3D12BatchedPayloadObjects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12BatchedPayloadObjects"
  },
  {
    "label": "FD3D12PayloadBaseFixLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PayloadBaseFixLayout"
  },
  {
    "label": "FD3D12PayloadBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PayloadBase"
  },
  {
    "label": "FManualFence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManualFence"
  },
  {
    "label": "FQueueFence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueueFence"
  },
  {
    "label": "FD3D12ResolvedFence()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" D3D12BindlessDescriptors . h \" # include \" D3D12Query . h \" # include \" D3D12Queue . h \" # include \" D3D12RHICommon . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" RHIBreadcrumbs . h \" # include \" GPUProfiler . h \" enum class ED3D12QueueType ; class FD3D12CommandAllocator ; class FD3D12CommandList ; class FD3D12DynamicRHI ; class FD3D12QueryHeap ; class FD3D12Queue ; class FD3D12Timing ; class FD3D12Buffer ; class FD3D12Resource ; class FD3D12SyncPoint ; using FD3D12SyncPointRef = TRefCountPtr<FD3D12SyncPoint> ; enum class ED3D12SyncPointType { GPUOnly,GPUAndCPU,} ; struct FD3D12Fence { TRefCountPtr<ID3D12Fence> D3DFence ; uint64 NextCompletionValue = 0 ; std::atomic<uint64> LastSignaledValue = 0 ; bool bInterruptAwaited = false ; } ; struct FD3D12ResolvedFence { FD3D12Fence& Fence ; uint64 Value = 0 ;)",
    "insertText": "FD3D12ResolvedFence(FD3D12Fence& Fence, uint64 Value) : Fence(Fence) , Value(Value)"
  },
  {
    "label": "FD3D12SyncPoint()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12SyncPoint final : public FThreadSafeRefCountedObject { FD3D12DynamicRHI ; FD3D12Queue ; TLockFreePointerListUnordered<void,PLATFORM_CACHE_LINE_SIZE> MemoryPool ;)",
    "insertText": "FD3D12SyncPoint(FD3D12SyncPoint const&)"
  },
  {
    "label": "FD3D12SyncPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12SyncPoint(FD3D12SyncPoint&&)"
  },
  {
    "label": "FD3D12SyncPoint()",
    "kind": "Method",
    "detail": "Function (TOptional<FD3D12ResolvedFence> ResolvedFence ; FGraphEventRef GraphEvent ;)",
    "insertText": "FD3D12SyncPoint(ED3D12SyncPointType Type)"
  },
  {
    "label": "CreateGraphEvent()",
    "kind": "Method",
    "detail": "Function (GraphEvent =)",
    "insertText": "CreateGraphEvent()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } public : FD3D12SyncPointRef)",
    "insertText": "Create(ED3D12SyncPointType Type)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateSyncPoint\"))"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Wait()"
  },
  {
    "label": "GetGraphEvent()",
    "kind": "Method",
    "detail": "Function (FGraphEvent*)",
    "insertText": "GetGraphEvent()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (void* Memory = MemoryPool .)",
    "insertText": "Pop()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (Memory =)",
    "insertText": "Malloc(sizeof(FD3D12SyncPoint), alignof(FD3D12SyncPoint))"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} return Memory ; } void operator)",
    "insertText": "delete(void* Pointer)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (MemoryPool .)",
    "insertText": "Push(Pointer)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} } ; struct FD3D12CommitReservedResourceDesc { FD3D12Resource* Resource = nullptr ; uint64 CommitSizeInBytes = 0 ; } ; struct FD3D12BatchedPayloadObjects { TArray<FD3D12QueryLocation> TimestampQueries ; TArray<FD3D12QueryLocation> OcclusionQueries ; TArray<FD3D12QueryLocation> PipelineStatsQueries ; TMap<TRefCountPtr<FD3D12QueryHeap>,TArray<FD3D12QueryRange>> QueryRanges ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FD3D12PayloadBaseFixLayout()",
    "kind": "Method",
    "detail": "Function (} } ; struct FD3D12PayloadBaseFixLayout { ~)",
    "insertText": "FD3D12PayloadBaseFixLayout()"
  },
  {
    "label": "FManualFence()",
    "kind": "Method",
    "detail": "Function (} ; struct FD3D12PayloadBase : public FD3D12PayloadBaseFixLayout { struct FManualFence { TRefCountPtr<ID3D12Fence> Fence ; uint64 Value ;)",
    "insertText": "FManualFence()"
  },
  {
    "label": "FManualFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FManualFence(TRefCountPtr<ID3D12Fence>&& Fence, uint64 Value) : Fence(MoveTemp(Fence)) , Value(Value)"
  },
  {
    "label": "AddQueueFenceWait()",
    "kind": "Method",
    "detail": "Function (} } ; FD3D12Queue& Queue ; struct : public TArray<FD3D12SyncPointRef> { int32 Index = 0 ; } SyncPointsToWait ; struct FQueueFence { FD3D12Fence& Fence ; uint64 Value ; } ; TArray<FQueueFence,TInlineAllocator<GD3D12MaxNumQueues>> QueueFencesToWait ; TArray<FManualFence> ManualFencesToWait ; void)",
    "insertText": "AddQueueFenceWait(FD3D12Fence& Fence, uint64 Value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<FD3D12CommitReservedResourceDesc> ReservedResourcesToCommit ; bool bAlwaysSignal = false ; std::atomic<bool> bSubmitted { false } ; TFunction<)",
    "insertText": "void(ID3D12CommandQueue*)"
  },
  {
    "label": "FD3D12PayloadBase()",
    "kind": "Method",
    "detail": "Function (TArray<FD3D12CommandList*> CommandListsToExecute ; TArray<FManualFence> ManualFencesToSignal ; TArray<FD3D12SyncPointRef> SyncPointsToSignal ; uint64 CompletionFenceValue = 0 ; FGraphEventRef SubmissionEvent ; TOptional<uint64> SubmissionTime ; TOptional<FD3D12Timing*> Timing ; TArray<FD3D12CommandAllocator*> AllocatorsToRelease ; FD3D12BatchedPayloadObjects BatchedObjects ; # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbRange BreadcrumbRange { } ; TSharedPtr<FRHIBreadcrumbAllocatorArray> BreadcrumbAllocators { } ; # endif # if RHI_NEW_GPU_PROFILER UE::RHI::GPUProfiler::FEventStream EventStream ; # endif ~)",
    "insertText": "FD3D12PayloadBase()"
  },
  {
    "label": "PreExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreExecute()"
  },
  {
    "label": "HasPreExecuteWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreExecuteWork()"
  },
  {
    "label": "HasWaitWork()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasWaitWork()"
  },
  {
    "label": "HasUpdateReservedResourcesWork()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasUpdateReservedResourcesWork()"
  },
  {
    "label": "HasSignalWork()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSignalWork()"
  },
  {
    "label": "FD3D12PayloadBase()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FD3D12PayloadBase(FD3D12Queue& Queue)"
  }
]