[
  {
    "label": "FSessionLogMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionLogMessage"
  },
  {
    "label": "TimeComparer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeComparer"
  },
  {
    "label": "FSessionLogMessage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" struct FSessionLogMessage { FName Category ; FGuid InstanceId ; FString InstanceName ; FString Text ; FDateTime Time ; double TimeSeconds ; ELogVerbosity::Type Verbosity ; public :)",
    "insertText": "FSessionLogMessage(const FGuid& InInstanceId, const FString& InInstanceName, float InTimeSeconds, const FString& InText, ELogVerbosity::Type InVerbosity, const FName& InCategory) : Category(InCategory) , InstanceId(InInstanceId) , InstanceName(InInstanceName) , Text((InCategory != NAME_None) ? InCategory.ToString() + TEXT(\": \") + InText : InText) , Time(FDateTime::Now()) , TimeSeconds(InTimeSeconds) , Verbosity(InVerbosity)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : struct TimeComparer { bool)",
    "insertText": "operator()(const TSharedPtr<FSessionLogMessage>& A, const TSharedPtr<FSessionLogMessage>& B)"
  }
]