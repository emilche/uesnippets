[
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "FSocketReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSocketReference"
  },
  {
    "label": "FCSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCSPose"
  },
  {
    "label": "FBoneSocketTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneSocketTarget"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneIndices . h \" # include \" BonePose . h \" # include \" BoneContainer . h \" # include \" BoneSocketReference . generated . h \" class USkeletalMeshComponent ; struct FAnimInstanceProxy ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FSocketReference()",
    "kind": "Method",
    "detail": "Function (private : FMeshPoseBoneIndex CachedSocketMeshBoneIndex ; FCompactPoseBoneIndex CachedSocketCompactBoneIndex ; public :)",
    "insertText": "FSocketReference() : CachedSocketMeshBoneIndex(INDEX_NONE) , CachedSocketCompactBoneIndex(INDEX_NONE)"
  },
  {
    "label": "FSocketReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSocketReference(const FName& InSocketName) : SocketName(InSocketName) , CachedSocketMeshBoneIndex(INDEX_NONE) , CachedSocketCompactBoneIndex(INDEX_NONE)"
  },
  {
    "label": "InitializeSocketInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeSocketInfo(const FAnimInstanceProxy* InAnimInstanceProxy)"
  },
  {
    "label": "InitialzeCompactBoneIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialzeCompactBoneIndex(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "HasValidSetup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidSetup()"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidToEvaluate()"
  },
  {
    "label": "GetCachedSocketCompactBoneIndex()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndex)",
    "insertText": "GetCachedSocketCompactBoneIndex()"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform BoneTransform = InPose .)",
    "insertText": "GetComponentSpaceTransform(CachedSocketCompactBoneIndex)"
  },
  {
    "label": "FMeshPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (CachedSocketMeshBoneIndex =)",
    "insertText": "FMeshPoseBoneIndex(INDEX_NONE)"
  },
  {
    "label": "FCompactPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (CachedSocketCompactBoneIndex =)",
    "insertText": "FCompactPoseBoneIndex(INDEX_NONE)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = FBoneSocketTarget)"
  },
  {
    "label": "FBoneSocketTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoneSocketTarget(FName InName = NAME_None, bool bInUseSocket = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bUseSocket = bInUseSocket ;)",
    "insertText": "if(bUseSocket)"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (SocketReference . SocketName = InName ; } else { BoneReference . BoneName = InName ; } } void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "InitialzeCompactBoneIndex()",
    "kind": "Method",
    "detail": "Function (SocketReference .)",
    "insertText": "InitialzeCompactBoneIndex(RequiredBones)"
  },
  {
    "label": "InvalidateCachedBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneReference .)",
    "insertText": "InvalidateCachedBoneIndex()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} else { BoneReference .)",
    "insertText": "Initialize(RequiredBones)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Initialize(const FAnimInstanceProxy* InAnimInstanceProxy)"
  },
  {
    "label": "InitializeSocketInfo()",
    "kind": "Method",
    "detail": "Function (SocketReference .)",
    "insertText": "InitializeSocketInfo(InAnimInstanceProxy)"
  },
  {
    "label": "HasTargetSetup()",
    "kind": "Method",
    "detail": "Function (} return BoneReference . BoneIndex ! = INDEX_NONE ; } bool)",
    "insertText": "HasTargetSetup()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(BoneReference.BoneName != NAME_None)"
  },
  {
    "label": "GetTargetSetup()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetTargetSetup()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(BoneReference.BoneName)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidToEvaluate(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (} return BoneReference .)",
    "insertText": "IsValidToEvaluate(RequiredBones)"
  },
  {
    "label": "GetCompactPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndex)",
    "insertText": "GetCompactPoseBoneIndex()"
  },
  {
    "label": "GetTargetTransform()",
    "kind": "Method",
    "detail": "Function (} return BoneReference . CachedCompactPoseIndex ; } template<poseType> FTransform)",
    "insertText": "GetTargetTransform(const FVector& TargetOffset, FCSPose<poseType>& InPose, const FTransform& InComponentToWorld)"
  },
  {
    "label": "SetComponentSpaceOffset()",
    "kind": "Method",
    "detail": "Function (FTransform OutTargetTransform ; auto)",
    "insertText": "SetComponentSpaceOffset(const FVector& InTargetOffset, const FTransform& LocalInComponentToWorld, FTransform& LocalOutTargetTransform)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (LocalOutTargetTransform .)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (FVector CSTargetOffset = LocalInComponentToWorld .)",
    "insertText": "InverseTransformPosition(InTargetOffset)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (LocalOutTargetTransform .)",
    "insertText": "SetLocation(CSTargetOffset)"
  },
  {
    "label": "GetAnimatedSocketTransform()",
    "kind": "Method",
    "detail": "Function (FTransform SocketTransformInCS = SocketReference .)",
    "insertText": "GetAnimatedSocketTransform(InPose)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (FVector CSTargetOffset = SocketTransformInCS .)",
    "insertText": "TransformPosition(TargetOffset)"
  },
  {
    "label": "SetComponentSpaceOffset()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetComponentSpaceOffset(TargetOffset, InComponentToWorld, OutTargetTransform)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(BoneReference.HasValidSetup())"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (OutTargetTransform = InPose .)",
    "insertText": "GetComponentSpaceTransform(BoneReference.CachedCompactPoseIndex)"
  },
  {
    "label": "GetTargetTransform()",
    "kind": "Method",
    "detail": "Function (} return OutTargetTransform ; } template<poseType> FTransform)",
    "insertText": "GetTargetTransform(const FTransform& TargetOffset, FCSPose<poseType>& InPose, const FTransform& InComponentToWorld)"
  },
  {
    "label": "SetComponentSpaceOffset()",
    "kind": "Method",
    "detail": "Function (FTransform OutTargetTransform ; auto)",
    "insertText": "SetComponentSpaceOffset(const FTransform& InTargetOffset, const FTransform& LocalInComponentToWorld, FTransform& LocalOutTargetTransform)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (LocalOutTargetTransform = InTargetOffset .)",
    "insertText": "GetRelativeTransform(LocalInComponentToWorld)"
  }
]