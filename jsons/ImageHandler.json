[
  {
    "label": "ImageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImageHandler"
  },
  {
    "label": "ImageLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImageLoader"
  },
  {
    "label": "VariableBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VariableBlock"
  },
  {
    "label": "MX_RENDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDER_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "setProperties()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_IMAGEHANDLER_H # define MATERIALX_IMAGEHANDLER_H # include<MaterialXRender / Export . h> # include<MaterialXRender / Image . h> # include<MaterialXFormat / File . h> # include<MaterialXCore / Document . h> MATERIALX_NAMESPACE_BEGIN const string IMAGE_PROPERTY_SEPARATOR ; const string UADDRESS_MODE_SUFFIX ; const string VADDRESS_MODE_SUFFIX ; const string FILTER_TYPE_SUFFIX ; const string DEFAULT_COLOR_SUFFIX ; class ImageHandler ; class ImageLoader ; class VariableBlock ; using ImageHandlerPtr = std::shared_ptr<ImageHandler> ; using ImageLoaderPtr = std::shared_ptr<ImageLoader> ; using ImageLoaderMap = std::unordered_map<string,std::vector<ImageLoaderPtr>> ; class ImageSamplingProperties { public : void)",
    "insertText": "setProperties(const string& fileNameUniform, const VariableBlock& uniformBlock)"
  },
  {
    "label": "ImageLoader()",
    "kind": "Method",
    "detail": "Function (enum class AddressMode : int { UNSPECIFIED = - 1,CONSTANT = 0,CLAMP = 1,PERIODIC = 2,MIRROR = 3 } ; AddressMode uaddressMode = AddressMode::UNSPECIFIED ; AddressMode vaddressMode = AddressMode::UNSPECIFIED ; enum class FilterType : int { UNSPECIFIED = - 1,CLOSEST = 0,LINEAR = 1,CUBIC = 2 } ; FilterType filterType = FilterType::UNSPECIFIED ; bool enableMipmaps = true ; Color4 defaultColor = { 0 . 0 f,0 . 0 f,0 . 0 f,1 . 0 f } ; } ; class ImageLoader { public :)",
    "insertText": "ImageLoader()"
  },
  {
    "label": "supportedExtensions()",
    "kind": "Method",
    "detail": "Function (} const string BMP_EXTENSION ; const string EXR_EXTENSION ; const string GIF_EXTENSION ; const string HDR_EXTENSION ; const string JPG_EXTENSION ; const string JPEG_EXTENSION ; const string PIC_EXTENSION ; const string PNG_EXTENSION ; const string PSD_EXTENSION ; const string TGA_EXTENSION ; const string TIF_EXTENSION ; const string TIFF_EXTENSION ; const string TXT_EXTENSION ; const string TX_EXTENSION ; const string TXR_EXTENSION ; const StringSet&)",
    "insertText": "supportedExtensions()"
  },
  {
    "label": "loadImage()",
    "kind": "Method",
    "detail": "Function (ImagePtr)",
    "insertText": "loadImage(const FilePath& filePath)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (protected : StringSet _extensions ; } ; class ImageHandler { public : ImageHandlerPtr)",
    "insertText": "create(ImageLoaderPtr imageLoader)"
  },
  {
    "label": "ImageHandler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ImageHandler()"
  },
  {
    "label": "addLoader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addLoader(ImageLoaderPtr loader)"
  },
  {
    "label": "saveImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "saveImage(const FilePath& filePath, ConstImagePtr image, bool verticalFlip = false)"
  },
  {
    "label": "acquireImage()",
    "kind": "Method",
    "detail": "Function (ImagePtr)",
    "insertText": "acquireImage(const FilePath& filePath)"
  },
  {
    "label": "bindImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bindImage(ImagePtr image, const ImageSamplingProperties& samplingProperties)"
  },
  {
    "label": "unbindImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "unbindImage(ImagePtr image)"
  },
  {
    "label": "unbindImages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbindImages()"
  },
  {
    "label": "setSearchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSearchPath(const FileSearchPath& path)"
  },
  {
    "label": "getSearchPath()",
    "kind": "Method",
    "detail": "Function (_searchPath = path ; } const FileSearchPath&)",
    "insertText": "getSearchPath()"
  },
  {
    "label": "getFilenameResolver()",
    "kind": "Method",
    "detail": "Function (_resolver = resolver ; } StringResolverPtr)",
    "insertText": "getFilenameResolver()"
  },
  {
    "label": "releaseRenderResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseRenderResources(ImagePtr image = nullptr)"
  },
  {
    "label": "clearImageCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearImageCache()"
  },
  {
    "label": "releaseRenderResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseRenderResources()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (_imageCache .)",
    "insertText": "clear()"
  },
  {
    "label": "getZeroImage()",
    "kind": "Method",
    "detail": "Function (} ImagePtr)",
    "insertText": "getZeroImage()"
  },
  {
    "label": "ImageHandler()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ImageHandler(ImageLoaderPtr imageLoader)"
  },
  {
    "label": "cacheImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cacheImage(const string& filePath, ImagePtr image)"
  },
  {
    "label": "getCachedImage()",
    "kind": "Method",
    "detail": "Function (ImagePtr)",
    "insertText": "getCachedImage(const FilePath& filePath)"
  }
]