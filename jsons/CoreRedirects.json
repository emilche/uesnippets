[
  {
    "label": "FBlake3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlake3"
  },
  {
    "label": "IPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFile"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FTopLevelAssetPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelAssetPath"
  },
  {
    "label": "FCoreRedirectObjectUtf8Name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoreRedirectObjectUtf8Name"
  },
  {
    "label": "FRWWithExclusiveRecursionScopeLockForRead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRWWithExclusiveRecursionScopeLockForRead"
  },
  {
    "label": "FRWWithExclusiveRecursionScopeLockForWrite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRWWithExclusiveRecursionScopeLockForWrite"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCoreRedirectObjectName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoreRedirectObjectName"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCoreRedirect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoreRedirect"
  },
  {
    "label": "FCoreRedirects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoreRedirects"
  },
  {
    "label": "FWildcardData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWildcardData"
  },
  {
    "label": "FRedirectNameMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRedirectNameMap"
  },
  {
    "label": "FRedirectTypeMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRedirectTypeMap"
  },
  {
    "label": "FRWLockWithExclusiveRecursion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWLockWithExclusiveRecursion"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" Misc / EnumClassFlags . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / CoreRedirects / PM - k . h \" class FBlake3 ; class IPakFile ; class UClass ; struct FSoftObjectPath ; struct FTopLevelAssetPath ; namespace UE::CoreRedirects::Private { struct FCoreRedirectObjectUtf8Name ; } namespace UE::CoreRedirects::Private { class FRWWithExclusiveRecursionScopeLockForRead ; } namespace UE::CoreRedirects::Private { class FRWWithExclusiveRecursionScopeLockForWrite ; })",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCoreRedirects, Log, All)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ECoreRedirectFlags : uint32 { None = 0,Type_Object = 0 x00000001,Type_Class = 0 x00000002,Type_Struct = 0 x00000004,Type_Enum = 0 x00000008,Type_Function = 0 x00000010,Type_Property = 0 x00000020,Type_Package = 0 x00000040,Type_Asset = 0 x00000080,Type_AllMask = 0 x0000FFFF,Category_InstanceOnly = 0 x00010000,Category_Removed = 0 x00020000,Category_AllMask = 0 x00FF0000,Option_MatchPrefix = 0 x01000000,Option_MatchSuffix = 0 x02000000,Option_MatchSubstring = Option_MatchPrefix | Option_MatchSuffix,Option_MatchWildcardMask = Option_MatchSubstring,Option_MissingLoad = 0 x04000000,Option_AllMask = 0 xFF000000,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECoreRedirectFlags)"
  },
  {
    "label": "AllowPartialMatch()",
    "kind": "Method",
    "detail": "Function (enum class ECoreRedirectMatchFlags { None = 0,)",
    "insertText": "AllowPartialMatch(1 << 0), DisallowPartialLHSMatch = (1<<1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ECoreRedirectMatchFlags)"
  },
  {
    "label": "FCoreRedirectObjectName()",
    "kind": "Method",
    "detail": "Function (struct FCoreRedirectObjectName { FName ObjectName ; FName OuterName ; FName PackageName ;)",
    "insertText": "FCoreRedirectObjectName()"
  },
  {
    "label": "FCoreRedirectObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCoreRedirectObjectName(FName InObjectName, FName InOuterName, FName InPackageName) : ObjectName(InObjectName), OuterName(InOuterName), PackageName(InPackageName)"
  },
  {
    "label": "FCoreRedirectObjectName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCoreRedirectObjectName(const FTopLevelAssetPath& TopLevelAssetPath)"
  },
  {
    "label": "FCoreRedirectObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCoreRedirectObjectName(const FSoftObjectPath& SoftObjectPath)"
  },
  {
    "label": "FCoreRedirectObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCoreRedirectObjectName(const FString& InString)"
  },
  {
    "label": "FCoreRedirectObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCoreRedirectObjectName(const class UObject* Object)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCoreRedirectObjectName& Other)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Compare(const FCoreRedirectObjectName& Other)"
  },
  {
    "label": "DisallowPartialLHSMatch()",
    "kind": "Method",
    "detail": "Function (enum class EMatchFlags { None = 0,)",
    "insertText": "DisallowPartialLHSMatch(1 << 0), AllowPartialRHSMatch = (1 << 1), CheckSubString = (1 << 2), CheckPrefix = (1 << 3), CheckSuffix = (1 << 4)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const FCoreRedirectObjectName& Other, EMatchFlags MatchFlags = EMatchFlags::None)"
  },
  {
    "label": "MatchScore()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MatchScore(const FCoreRedirectObjectName& Other)"
  },
  {
    "label": "UnionFieldsInline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnionFieldsInline(const FCoreRedirectObjectName& Other)"
  },
  {
    "label": "GetSearchKey()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSearchKey(ECoreRedirectFlags Type)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(FBlake3& Hasher)"
  },
  {
    "label": "ExpandNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandNames(const FStringView FullString, FName& OutName, FName& OutOuter, FName& OutPackage)"
  },
  {
    "label": "CombineNames()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CombineNames(FName NewName, FName NewOuter, FName NewPackage)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ENUM_CLASS_FLAGS(FCoreRedirectObjectName::EMatchFlags)"
  },
  {
    "label": "FCoreRedirect()",
    "kind": "Method",
    "detail": "Function (struct FCoreRedirect { ECoreRedirectFlags RedirectFlags ; FCoreRedirectObjectName OldName ; FCoreRedirectObjectName NewName ; FCoreRedirectObjectName OverrideClassName ; TMap<FString,FString> ValueChanges ;)",
    "insertText": "FCoreRedirect(ECoreRedirectFlags InRedirectFlags, FString InOldName, FString InNewName) : RedirectFlags(InRedirectFlags), OldName(InOldName), NewName(InNewName)"
  },
  {
    "label": "NormalizeNewName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeNewName()"
  },
  {
    "label": "FCoreRedirect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCoreRedirect(ECoreRedirectFlags InRedirectFlags, const FCoreRedirectObjectName& InOldName, const FCoreRedirectObjectName& InNewName) : RedirectFlags(InRedirectFlags), OldName(InOldName), NewName(InNewName)"
  },
  {
    "label": "ParseValueChanges()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ParseValueChanges(const TCHAR* Buffer)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(ECoreRedirectFlags InFlags, const FCoreRedirectObjectName& InName, ECoreRedirectMatchFlags MatchFlags = ECoreRedirectMatchFlags::None)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const FCoreRedirectObjectName& InName, ECoreRedirectMatchFlags MatchFlags = ECoreRedirectMatchFlags::None)"
  },
  {
    "label": "HasValueChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValueChanges()"
  },
  {
    "label": "IsSubstringMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubstringMatch()"
  },
  {
    "label": "RedirectName()",
    "kind": "Method",
    "detail": "Function (FCoreRedirectObjectName)",
    "insertText": "RedirectName(const FCoreRedirectObjectName& OldObjectName)"
  },
  {
    "label": "IdenticalMatchRules()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IdenticalMatchRules(const FCoreRedirect& Other)"
  },
  {
    "label": "GetSearchKey()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSearchKey()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const FCoreRedirect& Other)"
  },
  {
    "label": "RedirectName()",
    "kind": "Method",
    "detail": "Function (private : struct FCoreRedirects ; FCoreRedirectObjectName)",
    "insertText": "RedirectName(const FCoreRedirectObjectName& OldObjectName, bool bIsKnownToMatch)"
  },
  {
    "label": "IsWildcardMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWildcardMatch()"
  },
  {
    "label": "IsPrefixMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPrefixMatch()"
  },
  {
    "label": "IsSuffixMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSuffixMatch()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCoreRedirects { void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetRedirectedName()",
    "kind": "Method",
    "detail": "Function (FCoreRedirectObjectName)",
    "insertText": "GetRedirectedName(ECoreRedirectFlags Type, const FCoreRedirectObjectName& OldObjectName, ECoreRedirectMatchFlags MatchFlags = ECoreRedirectMatchFlags::None)"
  },
  {
    "label": "GetValueRedirects()",
    "kind": "Method",
    "detail": "Function (const TMap<FString,FString>*)",
    "insertText": "GetValueRedirects(ECoreRedirectFlags Type, const FCoreRedirectObjectName& OldObjectName, ECoreRedirectMatchFlags MatchFlags = ECoreRedirectMatchFlags::None)"
  },
  {
    "label": "RedirectNameAndValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RedirectNameAndValues(ECoreRedirectFlags Type, const FCoreRedirectObjectName& OldObjectName, FCoreRedirectObjectName& NewObjectName, const FCoreRedirect** FoundValueRedirect, ECoreRedirectMatchFlags MatchFlags = ECoreRedirectMatchFlags::None)"
  },
  {
    "label": "IsKnownMissing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownMissing(ECoreRedirectFlags Type, const FCoreRedirectObjectName& ObjectName)"
  },
  {
    "label": "AddKnownMissing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddKnownMissing(ECoreRedirectFlags Type, const FCoreRedirectObjectName& ObjectName, ECoreRedirectFlags Channel = ECoreRedirectFlags::Option_MissingLoad)"
  },
  {
    "label": "RemoveKnownMissing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKnownMissing(ECoreRedirectFlags Type, const FCoreRedirectObjectName& ObjectName, ECoreRedirectFlags Channel = ECoreRedirectFlags::Option_MissingLoad)"
  },
  {
    "label": "ClearKnownMissing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearKnownMissing(ECoreRedirectFlags Type, ECoreRedirectFlags Channel = ECoreRedirectFlags::Option_MissingLoad)"
  },
  {
    "label": "FindPreviousNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPreviousNames(ECoreRedirectFlags Type, const FCoreRedirectObjectName& NewObjectName, TArray<FCoreRedirectObjectName>& PreviousNames)"
  },
  {
    "label": "GetMatchingRedirects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMatchingRedirects(ECoreRedirectFlags Type, const FCoreRedirectObjectName& OldObjectName, TArray<const FCoreRedirect*>& FoundRedirects, ECoreRedirectMatchFlags MatchFlags = ECoreRedirectMatchFlags::None)"
  },
  {
    "label": "ReadRedirectsFromIni()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadRedirectsFromIni(const FString& IniName)"
  },
  {
    "label": "AddRedirectList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRedirectList(TArrayView<const FCoreRedirect> Redirects, const FString& SourceString)"
  },
  {
    "label": "RemoveRedirectList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRedirectList(TArrayView<const FCoreRedirect> Redirects, const FString& SourceString)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "IsInDebugMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInDebugMode()"
  },
  {
    "label": "ValidateRedirectList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateRedirectList(TArrayView<const FCoreRedirect> Redirects, const FString& SourceString)"
  },
  {
    "label": "ValidateAllRedirects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAllRedirects()"
  },
  {
    "label": "ValidateAssetRedirects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAssetRedirects()"
  },
  {
    "label": "GetConfigKeyMap()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,ECoreRedirectFlags>&)",
    "insertText": "GetConfigKeyMap()"
  },
  {
    "label": "GetFlagsForTypeName()",
    "kind": "Method",
    "detail": "Function (ECoreRedirectFlags)",
    "insertText": "GetFlagsForTypeName(FName PackageName, FName TypeName)"
  },
  {
    "label": "GetFlagsForTypeClass()",
    "kind": "Method",
    "detail": "Function (ECoreRedirectFlags)",
    "insertText": "GetFlagsForTypeClass(UClass *TypeClass)"
  },
  {
    "label": "AppendHashOfRedirectsAffectingPackages()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AppendHashOfRedirectsAffectingPackages(FBlake3& Hasher, TConstArrayView<FName> PackageNames)"
  },
  {
    "label": "AppendHashOfGlobalRedirects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHashOfGlobalRedirects(FBlake3& Hasher)"
  },
  {
    "label": "RecordAddedObjectRedirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordAddedObjectRedirector(const FSoftObjectPath& Source, const FSoftObjectPath& Dest)"
  },
  {
    "label": "RecordRemovedObjectRedirector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordRemovedObjectRedirector(const FSoftObjectPath& Source, const FSoftObjectPath& Dest)"
  },
  {
    "label": "RunTests()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "RunTests()"
  },
  {
    "label": "AddAssetRedirects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetRedirects(const TMap<FSoftObjectPath, FSoftObjectPath>& InRedirects)"
  },
  {
    "label": "RemoveAllAssetRedirects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllAssetRedirects()"
  },
  {
    "label": "FCoreRedirects()",
    "kind": "Method",
    "detail": "Function (private : typedef UE::CoreRedirects::Private::FRWWithExclusiveRecursionScopeLockForRead FCoreRedirectorScopeLockForRead ; typedef UE::CoreRedirects::Private::FRWWithExclusiveRecursionScopeLockForWrite FCoreRedirectorScopeLockForWrite ;)",
    "insertText": "FCoreRedirects()"
  },
  {
    "label": "AddRedirectListUnderWriteLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRedirectListUnderWriteLock(TArrayView<const FCoreRedirect> Redirects, const FString& SourceString, const FCoreRedirectorScopeLockForWrite& HeldLock)"
  },
  {
    "label": "AddSingleRedirectUnderWriteLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSingleRedirectUnderWriteLock(const FCoreRedirect& NewRedirect, const FString& SourceString, const FCoreRedirectorScopeLockForWrite& HeldLock)"
  },
  {
    "label": "RemoveSingleRedirectUnderWriteLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSingleRedirectUnderWriteLock(const FCoreRedirect& OldRedirect, const FString& SourceString, const FCoreRedirectorScopeLockForWrite& HeldLock)"
  },
  {
    "label": "RegisterNativeRedirectsUnderWriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNativeRedirectsUnderWriteLock(const FCoreRedirectorScopeLockForWrite& HeldLock)"
  },
  {
    "label": "GetMatchingRedirectsUnderReadLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMatchingRedirectsUnderReadLock(ECoreRedirectFlags Type, const FCoreRedirectObjectName& OldObjectName, TArray<const FCoreRedirect*>& FoundRedirects, ECoreRedirectMatchFlags MatchFlags, const FCoreRedirectorScopeLockForRead& HeldLock)"
  },
  {
    "label": "RedirectNameAndValuesUnderReadLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RedirectNameAndValuesUnderReadLock(ECoreRedirectFlags Type, const FCoreRedirectObjectName& OldObjectName, FCoreRedirectObjectName& NewObjectName, const FCoreRedirect** FoundValueRedirect, ECoreRedirectMatchFlags MatchFlags, const FCoreRedirectorScopeLockForRead& HeldLock)"
  },
  {
    "label": "ValidateAssetRedirectsUnderReadLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAssetRedirectsUnderReadLock(const FCoreRedirectorScopeLockForRead& HeldLock)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (struct FWildcardData { void)",
    "insertText": "Add(const FCoreRedirect& Redirect)"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(ECoreRedirectFlags InFlags, const FCoreRedirectObjectName& InName, ECoreRedirectMatchFlags InMatchFlags, TArray<const FCoreRedirect*>& OutFoundRedirects)"
  },
  {
    "label": "MatchSubstringApproximate()",
    "kind": "Method",
    "detail": "Function (TArray<FCoreRedirect> Substrings ; TArray<FCoreRedirect> Prefixes ; TArray<FCoreRedirect> Suffixes ; private : bool)",
    "insertText": "MatchSubstringApproximate(const UE::CoreRedirects::Private::FCoreRedirectObjectUtf8Name& RedirectName)"
  },
  {
    "label": "AddPredictionWords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPredictionWords(const FCoreRedirect& Redirect)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPredictMatch8 PredictMatch ; } ; struct FRedirectNameMap { TMap<FName,TArray<FCoreRedirect>> RedirectMap ; TUniquePtr<FWildcardData> Wildcards ; } ; std::atomic<bool> bInitialized ; std::atomic<bool> bInDebugMode ; bool bValidatedOnce ; TMap<FName,ECoreRedirectFlags> ConfigKeyMap ; struct FRedirectTypeMap { public : FRedirectNameMap&)",
    "insertText": "FindOrAdd(ECoreRedirectFlags Key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FRedirectNameMap*)",
    "insertText": "Find(ECoreRedirectFlags Key)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<ECoreRedirectFlags,FRedirectNameMap>>::RangedForIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TArray<TPair<ECoreRedirectFlags,FRedirectNameMap>>::RangedForIteratorType)",
    "insertText": "end()"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (} private : TMap<ECoreRedirectFlags,FRedirectNameMap*> Map ; TArray<TPair<ECoreRedirectFlags,FRedirectNameMap>> FastIterable ; } ; FRedirectTypeMap RedirectTypeMap ; struct FRWLockWithExclusiveRecursion { void)",
    "insertText": "ReadLock()"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadUnlock()"
  }
]