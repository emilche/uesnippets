[
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" EntitySystem / MovieSceneComponentDebug . h \" # include \" MovieSceneSequenceID . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSequenceID() : Value(-1)"
  },
  {
    "label": "FMovieSceneSequenceID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequenceID(uint32 InValue) : Value(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FMovieSceneSequenceID LHS, FMovieSceneSequenceID RHS)"
  },
  {
    "label": "AccumulateParentID()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneSequenceID)",
    "insertText": "AccumulateParentID(FMovieSceneSequenceID InParentID)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Value ; return true ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneSequenceID& SequenceID)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (SequenceID .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FMovieSceneSequenceID> : public TStructOpsTypeTraitsBase2<FMovieSceneSequenceID> { enum { WithSerializer = true,WithCopy = true } ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::None ; } ; typedef TCallTraits<FMovieSceneSequenceID>::ParamType FMovieSceneSequenceIDRef ; namespace MovieSceneSequenceID { const FMovieSceneSequenceID)",
    "insertText": "Invalid(-1)"
  },
  {
    "label": "Root()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneSequenceID)",
    "insertText": "Root(0)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LexToString(const FMovieSceneSequenceID& SequenceID)"
  }
]