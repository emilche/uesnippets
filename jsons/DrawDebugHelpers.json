[
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FlushPersistentDebugLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPersistentDebugLines(const UWorld* InWorld)"
  },
  {
    "label": "DrawDebugLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugLine(const UWorld* InWorld, FVector const& LineStart, FVector const& LineEnd, FColor const& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPoint(const UWorld* InWorld, FVector const& Position, float Size, FColor const& PointColor, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugDirectionalArrow(const UWorld* InWorld, FVector const& LineStart, FVector const& LineEnd, float ArrowSize, FColor const& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugBox(const UWorld* InWorld, FVector const& Center, FVector const& Extent, FColor const& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugBox(const UWorld* InWorld, FVector const& Center, FVector const& Extent, const FQuat& Rotation, FColor const& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCoordinateSystem(const UWorld* InWorld, FVector const& AxisLoc, FRotator const& AxisRot, float Scale, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCrosshairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCrosshairs(const UWorld* InWorld, FVector const& AxisLoc, FRotator const& AxisRot, float Scale, const FColor& Color = FColor::White, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCircle(const UWorld* InWorld, const FMatrix& TransformMatrix, float Radius, int32 Segments, const FColor& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f, bool bDrawAxis=true)"
  },
  {
    "label": "DrawDebugCircleArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCircleArc(const UWorld* InWorld, const FVector& Center, float Radius, const FVector& Direction, float AngleWidth, int32 Segments, const FColor& Color, bool PersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebug2DDonut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebug2DDonut(const UWorld* InWorld, const FMatrix& TransformMatrix, float InnerRadius, float OuterRadius, int32 Segments, const FColor& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSphere(const UWorld* InWorld, FVector const& Center, float Radius, int32 Segments, FColor const& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCylinder(const UWorld* InWorld, FVector const& Start, FVector const& End, float Radius, int32 Segments, FColor const& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCone(const UWorld* InWorld, FVector const& Origin, FVector const& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, FColor const& Color, bool bPersistentLines=false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugAltCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugAltCone(const UWorld* InWorld, FVector const& Origin, FRotator const& Rotation, float Length, float AngleWidth, float AngleHeight, FColor const& DrawColor, bool bPersistentLines=false, float LifeTime=-1.f, uint8 DepthPriority=0, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugString(const UWorld* InWorld, FVector const& TextLocation, const FString& Text, class AActor* TestBaseActor = NULL, FColor const& TextColor = FColor::White, float Duration = -1.000000, bool bDrawShadow = false, float FontScale = 1.f)"
  },
  {
    "label": "DrawDebugFrustum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugFrustum(const UWorld* InWorld, const FMatrix& FrustumToWorld, FColor const& Color, bool bPersistentLines = false, float LifeTime=-1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCircle(const UWorld* InWorld, const FVector& Base, const FVector& X, const FVector& Y, const FColor& Color, float Radius, int32 NumSides, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0)"
  },
  {
    "label": "DrawDebugCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCapsule(const UWorld* InWorld, FVector const& Center, float HalfHeight, float Radius, const FQuat& Rotation, FColor const& Color, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0)"
  },
  {
    "label": "DrawDebugCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCamera(const UWorld* InWorld, FVector const& Location, FRotator const& Rotation, float FOVDeg, float Scale=1.f, FColor const& Color=FColor::White, bool bPersistentLines=false, float LifeTime=-1.f, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawCentripetalCatmullRomSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCentripetalCatmullRomSpline(const UWorld* InWorld, TConstArrayView<FVector> Points, FColor const& Color, float Alpha = 0.5f, int32 NumSamplesPerSegment = 8, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "DrawCentripetalCatmullRomSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCentripetalCatmullRomSpline(const UWorld* InWorld, TConstArrayView<FVector> Points, TConstArrayView<FColor> Colors, float Alpha = 0.5f, int32 NumSamplesPerSegment = 8, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "FlushDebugStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDebugStrings(const UWorld* InWorld)"
  },
  {
    "label": "DrawDebugSolidBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSolidBox(const UWorld* InWorld, FBox const& Box, FColor const& Color, const FTransform& Transform=FTransform::Identity, bool bPersistent=false, float LifeTime=-1.f, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugSolidBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSolidBox(const UWorld* InWorld, FVector const& Center, FVector const& Extent, FColor const& Color, bool bPersistent=false, float LifeTime=-1.f, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugSolidBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSolidBox(const UWorld* InWorld, FVector const& Center, FVector const& Extent, FQuat const& Rotation, FColor const& Color, bool bPersistent=false, float LifeTime=-1.f, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugMesh(const UWorld* InWorld, TArray<FVector> const& Verts, TArray<int32> const& Indices, FColor const& Color, bool bPersistent=false, float LifeTime=-1.f, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugSolidPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSolidPlane(const UWorld* InWorld, FPlane const& P, FVector const& Loc, float Size, FColor const& Color, bool bPersistent=false, float LifeTime=-1, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugSolidPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSolidPlane(const UWorld* InWorld, FPlane const& P, FVector const& Loc, FVector2D const& Extents, FColor const& Color, bool bPersistent=false, float LifeTime=-1, uint8 DepthPriority = 0)"
  },
  {
    "label": "DrawDebugFloatHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugFloatHistory(UWorld const & WorldRef, FDebugFloatHistory const & FloatHistory, FTransform const & DrawTransform, FVector2D const & DrawSize, FColor const & DrawColor, bool const & bPersistent = false, float const & LifeTime = -1.f, uint8 const & DepthPriority = 0)"
  },
  {
    "label": "DrawDebugFloatHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugFloatHistory(UWorld const & WorldRef, FDebugFloatHistory const & FloatHistory, FVector const & DrawLocation, FVector2D const & DrawSize, FColor const & DrawColor, bool const & bPersistent = false, float const & LifeTime = -1.f, uint8 const & DepthPriority = 0)"
  },
  {
    "label": "DrawDebugCanvas2DLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvas2DLine(UCanvas* Canvas, const FVector& Start, const FVector& End, const FLinearColor& LineColor)"
  },
  {
    "label": "DrawDebugCanvas2DLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvas2DLine(UCanvas* Canvas, const FVector2D& StartPosition, const FVector2D& EndPosition, const FLinearColor& LineColor, const float& LineThickness = 1.f)"
  },
  {
    "label": "DrawDebugCanvas2DCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvas2DCircle(UCanvas* Canvas, const FVector2D& Center, float Radius, int32 NumSides, const FLinearColor& LineColor, const float& LineThickness = 1.f)"
  },
  {
    "label": "DrawDebugCanvas2DBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvas2DBox(UCanvas* Canvas, const FBox2D& Box, const FLinearColor& LineColor, const float& LineThickness = 1.f)"
  },
  {
    "label": "DrawDebugCanvasLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvasLine(UCanvas* Canvas, const FVector& Start, const FVector& End, const FLinearColor& LineColor)"
  },
  {
    "label": "DrawDebugCanvasCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvasCircle(UCanvas* Canvas, const FVector& Base, const FVector& X, const FVector& Y, FColor Color, float Radius, int32 NumSides)"
  },
  {
    "label": "DrawDebugCanvasHalfCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvasHalfCircle(UCanvas* Canvas, const FVector& Base, const FVector& X, const FVector& Y, FColor Color, float Radius, int32 NumSides)"
  },
  {
    "label": "DrawDebugCanvasWireSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvasWireSphere(UCanvas* Canvas, const FVector& Base, FColor Color, float Radius, int32 NumSides)"
  },
  {
    "label": "DrawDebugCanvasWireCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvasWireCone(UCanvas* Canvas, const FTransform& Transform, float ConeRadius, float ConeAngle, int32 ConeSides, FColor Color)"
  },
  {
    "label": "DrawDebugCanvasWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvasWireBox(UCanvas* Canvas, const FMatrix& Transform, const FBox& Box, FColor Color)"
  },
  {
    "label": "DrawDebugCanvasCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCanvasCapsule(UCanvas* Canvas, const FMatrix& Transform, float HalfLength, float Radius, const FColor& LineColor)"
  }
]