[
  {
    "label": "analyzePattern_preordered()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SIMPLICIAL_CHOLESKY_IMPL_H # define EIGEN_SIMPLICIAL_CHOLESKY_IMPL_H namespace Eigen { template<Derived> void SimplicialCholeskyBase<Derived)",
    "insertText": "analyzePattern_preordered(const CholMatrixType& ap, bool doLDLT)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (const StorageIndex size =)",
    "insertText": "StorageIndex(ap.rows())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_matrix .)",
    "insertText": "resize(size, size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_parent .)",
    "insertText": "resize(size)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(StorageIndex, tags, size, 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_parent [ k ] = - 1 ; tags [ k ] = k ; m_nonZerosPerCol [ k ] = 0 ;)",
    "insertText": "for(typename CholMatrixType::InnerIterator it(ap,k); it; ++it)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (StorageIndex i = it .)",
    "insertText": "index()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (m_nonZerosPerCol [ i ] + + ; tags [ i ] = k ; } } } } StorageIndex* Lp = m_matrix .)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Lp [ 0 ] = 0 ;)",
    "insertText": "for(StorageIndex k = 0; k < size; ++k) Lp[k+1] = Lp[k] + m_nonZerosPerCol[k] + (doLDLT ? 0 : 1)"
  },
  {
    "label": "resizeNonZeros()",
    "kind": "Method",
    "detail": "Function (m_matrix .)",
    "insertText": "resizeNonZeros(Lp[size])"
  },
  {
    "label": "factorize_preordered()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; m_info = Success ; m_analysisIsOk = true ; m_factorizationIsOk = false ; } template<Derived> template<bool DoLDLT> void SimplicialCholeskyBase<Derived)",
    "insertText": "factorize_preordered(const CholMatrixType& ap)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ;)",
    "insertText": "eigen_assert(m_analysisIsOk && \"You must first call analyzePattern()\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(ap.rows()==ap.cols())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_parent.size()==ap.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_nonZerosPerCol.size()==ap.rows())"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (StorageIndex* Li = m_matrix .)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (Scalar* Lx = m_matrix .)",
    "insertText": "valuePtr()"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, y, size, 0)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(StorageIndex, pattern, size, 0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (bool ok = true ; m_diag .)",
    "insertText": "resize(DoLDLT ? size : 0)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (y [ k ] =)",
    "insertText": "Scalar(0)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (y [ i ] + =)",
    "insertText": "conj(it.value())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index len ;)",
    "insertText": "for(len = 0; tags[i] != k; i = m_parent[i])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (pattern [ len + + ] = i ; tags [ i ] = k ; })",
    "insertText": "while(len > 0)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (} } RealScalar d =)",
    "insertText": "real(y[k])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar l_ki ;)",
    "insertText": "if(DoLDLT) l_ki = yi / numext::real(m_diag[i])"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (d - =)",
    "insertText": "real(l_ki * numext::conj(yi))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Li [ p ] = k ; Lx [ p ] = l_ki ; + + m_nonZerosPerCol [ i ] ; })",
    "insertText": "if(DoLDLT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_diag [ k ] = d ;)",
    "insertText": "if(d == RealScalar(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ok = false ; break ; } } else { Index p = Lp [ k ] + m_nonZerosPerCol [ k ] + + ; Li [ p ] = k ;)",
    "insertText": "if(d <= RealScalar(0))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (ok = false ; break ; } Lx [ p ] =)",
    "insertText": "sqrt(d)"
  }
]