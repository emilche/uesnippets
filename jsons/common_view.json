[
  {
    "label": "common_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "common_view"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "_View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_View"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_COMMON_VIEW_H # define _LIBCPP___RANGES_COMMON_VIEW_H # include<__config> # include<__iterator / common_iterator . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / all . h> # include<__ranges / concepts . h> # include<__ranges / enable_borrowed_range . h> # include<__ranges / range_adaptor . h> # include<__ranges / size . h> # include<__ranges / view_interface . h> # include<__utility / forward . h> # include<__utility / move . h> # include<concepts> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<view _View>)",
    "insertText": "requires(!common_range<_View> && copyable<iterator_t<_View>>)"
  },
  {
    "label": "_View()",
    "kind": "Method",
    "detail": "Function (_View __base_ =)",
    "insertText": "_View()"
  },
  {
    "label": "common_view()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "common_view()"
  },
  {
    "label": "common_view()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "common_view(_View __v) : __base_(std::move(__v))"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _View)",
    "insertText": "base()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "size()"
  },
  {
    "label": "common_view()",
    "kind": "Method",
    "detail": "Function (common_view<views::all_t<_Range>>)",
    "insertText": "common_view(_Range&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _View> bool enable_borrowed_range<common_view<_View>> = enable_borrowed_range<_View> ; namespace views { namespace __common { struct __fn : __range_adaptor_closure<__fn> { template<class _Range> requires common_range<_Range> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Range&& __range) const noexcept(noexcept(views::all(std::forward<_Range>(__range)))) -> decltype( views::all(std::forward<_Range>(__range)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Range> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Range&& __range) const noexcept(noexcept(common_view{std::forward<_Range>(__range)})) -> decltype( common_view{std::forward<_Range>(__range)})"
  }
]