[
  {
    "label": "AudioEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoder"
  },
  {
    "label": "InputAudioFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputAudioFile"
  },
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Packet"
  },
  {
    "label": "AcmSendTestOldApi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AcmSendTestOldApi"
  },
  {
    "label": "AcmSendTestOldApi()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_ACM2_ACM_SEND_TEST_H_ # define MODULES_AUDIO_CODING_ACM2_ACM_SEND_TEST_H_ # include<memory> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / audio / audio_frame . h \" # include \" modules / audio_coding / include / audio_coding_module . h \" # include \" modules / audio_coding / neteq / tools / packet_source . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class AudioEncoder ; namespace test { class InputAudioFile ; class Packet ; class AcmSendTestOldApi : public AudioPacketizationCallback,public PacketSource { public :)",
    "insertText": "AcmSendTestOldApi(InputAudioFile* audio_source, int source_rate_hz, int test_duration_ms)"
  },
  {
    "label": "AcmSendTestOldApi()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AcmSendTestOldApi()"
  },
  {
    "label": "AcmSendTestOldApi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcmSendTestOldApi(const AcmSendTestOldApi&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AcmSendTestOldApi&)",
    "insertText": "operator(const AcmSendTestOldApi&)"
  },
  {
    "label": "RegisterCodec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterCodec(absl::string_view payload_name, int sampling_freq_hz, int channels, int payload_type, int frame_size_samples)"
  },
  {
    "label": "RegisterExternalCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalCodec(std::unique_ptr<AudioEncoder> external_speech_encoder)"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Packet>)",
    "insertText": "NextPacket()"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendData(AudioFrameType frame_type, uint8_t payload_type, uint32_t timestamp, const uint8_t* payload_data, size_t payload_len_bytes, int64_t absolute_capture_timestamp_ms)"
  },
  {
    "label": "acm()",
    "kind": "Method",
    "detail": "Function (AudioCodingModule*)",
    "insertText": "acm()"
  },
  {
    "label": "CreatePacket()",
    "kind": "Method",
    "detail": "Function (} private : const int kBlockSizeMs = 1 0 ; std::unique_ptr<Packet>)",
    "insertText": "CreatePacket()"
  }
]