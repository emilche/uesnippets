[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_RANGES_CONSTRUCT_AT_H # define _LIBCPP___MEMORY_RANGES_CONSTRUCT_AT_H # include<__concepts / destructible . h> # include<__config> # include<__iterator / incrementable_traits . h> # include<__iterator / readable_traits . h> # include<__memory / concepts . h> # include<__memory / construct_at . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / declval . h> # include<__utility / forward . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (namespace __construct_at { struct __fn { template<class _Tp,class . . . _Args,class =)",
    "insertText": "decltype(::new (declval<void*>()) _Tp(declval<_Args>()...) )> _LIBCPP_HIDE_FROM_ABI constexpr _Tp* operator()(_Tp* __location, _Args&& ...__args)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto construct_at = __construct_at::__fn { } ; } namespace __destroy_at { struct __fn { template<destructible _Tp> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "operator()(_Tp* __location)"
  },
  {
    "label": "destroy_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy_at(__location)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto destroy_at = __destroy_at::__fn { } ; } namespace __destroy { struct __fn { template<__nothrow_input_iterator _InputIterator,__nothrow_sentinel_for<_InputIterator> _Sentinel> requires destructible<iter_value_t<_InputIterator>> _LIBCPP_HIDE_FROM_ABI _InputIterator)",
    "insertText": "operator()(_InputIterator __first, _Sentinel __last)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<__nothrow_input_range _InputRange> requires destructible<range_value_t<_InputRange>> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_InputRange>)",
    "insertText": "operator()(_InputRange&& __range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto destroy = __destroy::__fn { } ; } namespace __destroy_n { struct __fn { template<__nothrow_input_iterator _InputIterator> requires destructible<iter_value_t<_InputIterator>> _LIBCPP_HIDE_FROM_ABI _InputIterator)",
    "insertText": "operator()(_InputIterator __first, iter_difference_t<_InputIterator> __n)"
  }
]