[
  {
    "label": "EOpenGLShaderTargetPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOpenGLShaderTargetPlatform"
  },
  {
    "label": "FOpenGLShaderDeviceCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLShaderDeviceCapabilities"
  },
  {
    "label": "GetCurrentOpenGLShaderDeviceCapabilities()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" OpenGLDrv . h \" enum EOpenGLShaderTargetPlatform { OGLSTP_Unknown,OGLSTP_Desktop,OGLSTP_Android,OGLSTP_iOS,} ; struct FOpenGLShaderDeviceCapabilities { EOpenGLShaderTargetPlatform TargetPlatform ; EShaderPlatform MaxRHIShaderPlatform ; bool bSupportsShaderFramebufferFetch ; bool bRequiresARMShaderFramebufferFetchDepthStencilUndef ; GLint MaxVaryingVectors ; bool bRequiresDisabledEarlyFragmentTests ; bool bRequiresReadOnlyBuffersWorkaround ; bool bRequiresPreciseQualifierWorkaround ; } ; void)",
    "insertText": "GetCurrentOpenGLShaderDeviceCapabilities(FOpenGLShaderDeviceCapabilities& Capabilities)"
  },
  {
    "label": "GLSLToDeviceCompatibleGLSL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GLSLToDeviceCompatibleGLSL(FAnsiCharArray& GlslCodeOriginal, const FString& ShaderName, GLenum TypeEnum, const FOpenGLShaderDeviceCapabilities& Capabilities, FAnsiCharArray& GlslCode)"
  },
  {
    "label": "PE_AppendCString()",
    "kind": "Method",
    "detail": "Function (\" C \" void)",
    "insertText": "PE_AppendCString(TArray<ANSICHAR> & Dest, const ANSICHAR * Source)"
  },
  {
    "label": "PE_ReplaceCString()",
    "kind": "Method",
    "detail": "Function (\" C \" void)",
    "insertText": "PE_ReplaceCString(TArray<ANSICHAR> & Dest, const ANSICHAR * Source, const ANSICHAR * Replacement)"
  }
]