[
  {
    "label": "FCompositeBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositeBuffer"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbPackage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FZenHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenHttpRequest"
  },
  {
    "label": "FStatics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatics"
  },
  {
    "label": "FZenHttpRequestPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenHttpRequestPool"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "FZenScopedRequestPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenScopedRequestPtr"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StaticArray . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Experimental / ZenGlobals . h \" # include \" Memory / MemoryFwd . h \" # if)",
    "insertText": "defined(PLATFORM_CURL_INCLUDE)"
  },
  {
    "label": "IsSuccessCode()",
    "kind": "Method",
    "detail": "Function (class FCbObjectView ; class FCbPackage ; # if UE_WITH_ZEN namespace UE::Zen { bool)",
    "insertText": "IsSuccessCode(int ResponseCode)"
  },
  {
    "label": "TEXTVIEW()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXTVIEW(\"unknown\")"
  },
  {
    "label": "FZenHttpRequest()",
    "kind": "Method",
    "detail": "Function (} } class FZenHttpRequest { public :)",
    "insertText": "FZenHttpRequest(FStringView InDomain, bool bInLogErrors)"
  },
  {
    "label": "FZenHttpRequest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FZenHttpRequest()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(bool bInLogErrors)"
  },
  {
    "label": "GetResponseCode()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "GetResponseCode()"
  },
  {
    "label": "GetResponseFormatValid()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "GetResponseFormatValid()"
  },
  {
    "label": "PerformBlockingDownload()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlockingDownload(FStringView Uri, TArray64<uint8>* Buffer, EContentType AcceptType)"
  },
  {
    "label": "PerformBlockingDownload()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlockingDownload(const TCHAR* Uri, FCbPackage& OutPackage)"
  },
  {
    "label": "PerformBlockingHead()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlockingHead(FStringView Uri, EContentType AcceptType)"
  },
  {
    "label": "PerformBlockingDelete()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlockingDelete(FStringView Uri)"
  },
  {
    "label": "PerformBlockingPostPackage()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlockingPostPackage(FStringView Uri, const FCbPackage& Package, EContentType AcceptType = EContentType::UnknownContentType)"
  },
  {
    "label": "PerformBlockingPost()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlockingPost(FStringView Uri, FCbObjectView Obj, EContentType AcceptType = EContentType::UnknownContentType)"
  },
  {
    "label": "PerformBlockingPost()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlockingPost(FStringView Uri, FMemoryView Payload, EContentType ContentType = EContentType::Binary, EContentType AcceptType = EContentType::UnknownContentType)"
  },
  {
    "label": "PerformRpc()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformRpc(FStringView Uri, FCbObjectView Request, FCbPackage &OutResponse)"
  },
  {
    "label": "PerformRpc()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformRpc(FStringView Uri, const FCbPackage& Request, FCbPackage& OutResponse)"
  },
  {
    "label": "GetResponseAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetResponseAsString()"
  },
  {
    "label": "GetResponseBuffer()",
    "kind": "Method",
    "detail": "Function (} const TArray64<uint8>&)",
    "insertText": "GetResponseBuffer()"
  },
  {
    "label": "GetResponseAsPackage()",
    "kind": "Method",
    "detail": "Function (FCbPackage)",
    "insertText": "GetResponseAsPackage()"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHeader(const ANSICHAR* Header, FString& OutValue)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : # if)",
    "insertText": "defined(CURL_STRICTER)"
  },
  {
    "label": "AddHeader()",
    "kind": "Method",
    "detail": "Function (# else void* Curl = nullptr ; # endif long CurlResult ; long ResponseCode = 0 ; size_t BytesSent = 0 ; size_t BytesReceived = 0 ; bool bLogErrors = false ; bool bResponseFormatValid = false ; const FCompositeBuffer* ReadDataView = nullptr ; TArray64<uint8>* WriteDataBufferPtr = nullptr ; FCbPackage* WriteDataPackage = nullptr ; TArray64<uint8>* WriteHeaderBufferPtr = nullptr ; TArray64<uint8> ResponseHeader ; TArray64<uint8> ResponseBuffer ; TArray<FString> Headers ; FString Domain ; void)",
    "insertText": "AddHeader(FStringView Header, FStringView Value)"
  },
  {
    "label": "LogResult()",
    "kind": "Method",
    "detail": "Function (enum class RequestVerb { Get,Put,Post,Delete,Head } ; void)",
    "insertText": "LogResult(long Result, const TCHAR* Uri, RequestVerb Verb)"
  },
  {
    "label": "PerformBlocking()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "PerformBlocking(FStringView Uri, RequestVerb Verb, uint64 ContentLength)"
  },
  {
    "label": "ParseRpcResponse()",
    "kind": "Method",
    "detail": "Function (FZenHttpRequest::Result)",
    "insertText": "ParseRpcResponse(FZenHttpRequest::Result ResultFromPost, FCbPackage& OutResponse)"
  },
  {
    "label": "GetAnsiBufferAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAnsiBufferAsString(const TArray64<uint8>& Buffer)"
  },
  {
    "label": "FZenHttpRequestPool()",
    "kind": "Method",
    "detail": "Function (struct FStatics ; } ; struct FZenHttpRequestPool {)",
    "insertText": "FZenHttpRequestPool(FStringView InServiceUrl, uint32 PoolEntryCount = 16)"
  },
  {
    "label": "FZenHttpRequestPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FZenHttpRequestPool()"
  },
  {
    "label": "WaitForFreeRequest()",
    "kind": "Method",
    "detail": "Function (FZenHttpRequest*)",
    "insertText": "WaitForFreeRequest()"
  },
  {
    "label": "ReleaseRequestToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRequestToPool(FZenHttpRequest* Request)"
  },
  {
    "label": "FZenScopedRequestPtr()",
    "kind": "Method",
    "detail": "Function (private : struct FEntry { std::atomic<uint8> IsAllocated ; FZenHttpRequest* Request ; } ; TArray<FEntry> Pool ; } ; struct FZenScopedRequestPtr { public :)",
    "insertText": "FZenScopedRequestPtr(FZenHttpRequestPool* InPool, bool bLogErrors=true) : Request(InPool->WaitForFreeRequest()) , Pool(InPool)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Request ->)",
    "insertText": "Initialize(bLogErrors)"
  },
  {
    "label": "FZenScopedRequestPtr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FZenScopedRequestPtr()"
  },
  {
    "label": "ReleaseRequestToPool()",
    "kind": "Method",
    "detail": "Function (Pool ->)",
    "insertText": "ReleaseRequestToPool(Request)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FZenHttpRequest*)",
    "insertText": "operator()"
  }
]