[
  {
    "label": "KnobsStatsIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "KnobsStatsIndex"
  },
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "RowColumnStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RowColumnStatus"
  },
  {
    "label": "ColumnStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ColumnStatus"
  },
  {
    "label": "ColStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ColStructure"
  },
  {
    "label": "RowStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RowStructure"
  },
  {
    "label": "ones_complement()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COLAMD_H # define EIGEN_COLAMD_H namespace internal { namespace Colamd { # ifndef COLAMD_NDEBUG # define COLAMD_NDEBUG # endif const int NKnobs = 2 0 ; const int NStats = 2 0 ; enum KnobsStatsIndex { DenseRow = 0,DenseCol = 1,DefragCount = 2,Status = 3,Info1 = 4,Info2 = 5,Info3 = 6 } ; enum Status { Ok = 0,OkButJumbled = 1,ErrorANotPresent = - 1,ErrorPNotPresent = - 2,ErrorNrowNegative = - 3,ErrorNcolNegative = - 4,ErrorNnzNegative = - 5,ErrorP0Nonzero = - 6,ErrorATooSmall = - 7,ErrorColLengthNegative = - 8,ErrorRowIndexOutOfBounds = - 9,ErrorOutOfMemory = - 1 0,ErrorInternalError = - 9 9 9 } ; template<IndexType> IndexType)",
    "insertText": "ones_complement(const IndexType r)"
  },
  {
    "label": "is_dead()",
    "kind": "Method",
    "detail": "Function (} const int Empty = - 1 ; enum RowColumnStatus { Alive = 0,Dead = - 1 } ; enum ColumnStatus { DeadPrincipal = - 1,DeadNonPrincipal = - 2 } ; template<IndexType> struct ColStructure { IndexType start ; IndexType length ; union { IndexType thickness ; IndexType parent ; } shared1 ; union { IndexType score ; IndexType order ; } shared2 ; union { IndexType headhash ; IndexType hash ; IndexType prev ; } shared3 ; union { IndexType degree_next ; IndexType hash_next ; } shared4 ; bool)",
    "insertText": "is_dead()"
  },
  {
    "label": "kill_non_principal()",
    "kind": "Method",
    "detail": "Function (start = DeadPrincipal ; } void)",
    "insertText": "kill_non_principal()"
  },
  {
    "label": "colamd_c()",
    "kind": "Method",
    "detail": "Function (shared2 . mark = Dead ; } } ; template<IndexType> IndexType)",
    "insertText": "colamd_c(IndexType n_col)"
  },
  {
    "label": "colamd_r()",
    "kind": "Method",
    "detail": "Function (} template<IndexType> IndexType)",
    "insertText": "colamd_r(IndexType n_row)"
  },
  {
    "label": "init_rows_cols()",
    "kind": "Method",
    "detail": "Function (} template<IndexType> IndexType)",
    "insertText": "init_rows_cols(IndexType n_row, IndexType n_col, RowStructure<IndexType> Row [], ColStructure<IndexType> col [], IndexType A [], IndexType p [], IndexType stats[NStats])"
  },
  {
    "label": "init_scoring()",
    "kind": "Method",
    "detail": "Function (template<IndexType> void)",
    "insertText": "init_scoring(IndexType n_row, IndexType n_col, RowStructure<IndexType> Row [], ColStructure<IndexType> Col [], IndexType A [], IndexType head [], double knobs[NKnobs], IndexType *p_n_row2, IndexType *p_n_col2, IndexType *p_max_deg)"
  },
  {
    "label": "find_ordering()",
    "kind": "Method",
    "detail": "Function (template<IndexType> IndexType)",
    "insertText": "find_ordering(IndexType n_row, IndexType n_col, IndexType Alen, RowStructure<IndexType> Row [], ColStructure<IndexType> Col [], IndexType A [], IndexType head [], IndexType n_col2, IndexType max_deg, IndexType pfree)"
  },
  {
    "label": "order_children()",
    "kind": "Method",
    "detail": "Function (template<IndexType> void)",
    "insertText": "order_children(IndexType n_col, ColStructure<IndexType> Col [], IndexType p [])"
  },
  {
    "label": "detect_super_cols()",
    "kind": "Method",
    "detail": "Function (template<IndexType> void)",
    "insertText": "detect_super_cols(ColStructure<IndexType> Col [], IndexType A [], IndexType head [], IndexType row_start, IndexType row_length)"
  },
  {
    "label": "garbage_collection()",
    "kind": "Method",
    "detail": "Function (template<IndexType> IndexType)",
    "insertText": "garbage_collection(IndexType n_row, IndexType n_col, RowStructure<IndexType> Row [], ColStructure<IndexType> Col [], IndexType A [], IndexType *pfree)"
  },
  {
    "label": "clear_mark()",
    "kind": "Method",
    "detail": "Function (template<IndexType> IndexType)",
    "insertText": "clear_mark(IndexType n_row, RowStructure<IndexType> Row [])"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "COLAMD_DEBUG0(params)"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "COLAMD_DEBUG1(params)"
  },
  {
    "label": "COLAMD_DEBUG2()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "COLAMD_DEBUG2(params)"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "COLAMD_DEBUG3(params)"
  },
  {
    "label": "COLAMD_DEBUG4()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "COLAMD_DEBUG4(params)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "COLAMD_ASSERT(expression) ((void) 0) template <typename IndexType> inline IndexType recommended ( IndexType nnz, IndexType n_row, IndexType n_col)"
  },
  {
    "label": "set_defaults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_defaults(double knobs[NKnobs])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "if(!knobs)"
  },
  {
    "label": "compute_ordering()",
    "kind": "Method",
    "detail": "Function (knobs [ i ] = 0 ; } knobs [ Colamd::DenseRow ] = 0 . 5 ; knobs [ Colamd::DenseCol ] = 0 . 5 ; } template<IndexType> bool)",
    "insertText": "compute_ordering(IndexType n_row, IndexType n_col, IndexType Alen, IndexType *A, IndexType *p, double knobs[NKnobs], IndexType stats[NStats])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IndexType i ; IndexType nnz ; IndexType Row_size ; IndexType Col_size ; IndexType need ; Colamd::RowStructure<IndexType>* Row ; Colamd::ColStructure<IndexType>* Col ; IndexType n_col2 ; IndexType n_row2 ; IndexType ngarbage ; IndexType max_deg ; double default_knobs [ NKnobs ] ;)",
    "insertText": "if(!stats)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG0((\"colamd: stats not present\\n\"))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(i = 0 ; i < NStats ; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stats [ i ] = 0 ; } stats [ Colamd::Status ] = Colamd::Ok ; stats [ Colamd::Info1 ] = - 1 ; stats [ Colamd::Info2 ] = - 1 ;)",
    "insertText": "if(!A)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorANotPresent ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: A not present\\n\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!p)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorPNotPresent ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: p not present\\n\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(n_row < 0)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorNrowNegative ; stats [ Colamd::Info1 ] = n_row ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: nrow negative %d\\n\", n_row))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(n_col < 0)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorNcolNegative ; stats [ Colamd::Info1 ] = n_col ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: ncol negative %d\\n\", n_col))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} nnz = p [ n_col ] ;)",
    "insertText": "if(nnz < 0)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorNnzNegative ; stats [ Colamd::Info1 ] = nnz ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: number of entries negative %d\\n\", nnz))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(p [0] != 0)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorP0Nonzero ; stats [ Colamd::Info1 ] = p [ 0 ] ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: p[0] not zero %d\\n\", p [0]))"
  },
  {
    "label": "set_defaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_defaults(default_knobs)"
  },
  {
    "label": "colamd_c()",
    "kind": "Method",
    "detail": "Function (knobs = default_knobs ; } Col_size =)",
    "insertText": "colamd_c(n_col)"
  },
  {
    "label": "colamd_r()",
    "kind": "Method",
    "detail": "Function (Row_size =)",
    "insertText": "colamd_r(n_row)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (need = 2* nnz + n_col + Col_size + Row_size ;)",
    "insertText": "if(need > Alen)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorATooSmall ; stats [ Colamd::Info1 ] = need ; stats [ Colamd::Info2 ] = Alen ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: Need Alen >= %d, given only Alen = %d\\n\", need,Alen))"
  },
  {
    "label": "Col()",
    "kind": "Method",
    "detail": "Function (} Alen - = Col_size + Row_size ;)",
    "insertText": "Col(ColStructure<IndexType> *)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Row(RowStructure<IndexType> *)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG0((\"colamd: Matrix invalid\\n\"))"
  },
  {
    "label": "init_scoring()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "init_scoring(n_row, n_col, Row, Col, A, p, knobs, &n_row2, &n_col2, &max_deg)"
  },
  {
    "label": "find_ordering()",
    "kind": "Method",
    "detail": "Function (ngarbage =)",
    "insertText": "find_ordering(n_row, n_col, Alen, Row, Col, A, p, n_col2, max_deg, 2*nnz)"
  },
  {
    "label": "order_children()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "order_children(n_col, Col, p)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::DenseRow ] = n_row - n_row2 ; stats [ Colamd::DenseCol ] = n_col - n_col2 ; stats [ Colamd::DefragCount ] = ngarbage ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: done.\\n\"))"
  },
  {
    "label": "init_rows_cols()",
    "kind": "Method",
    "detail": "Function (} template<IndexType> IndexType)",
    "insertText": "init_rows_cols(IndexType n_row, IndexType n_col, RowStructure<IndexType> Row [], ColStructure<IndexType> Col [], IndexType A [], IndexType p [], IndexType stats [NStats])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IndexType col ; IndexType row ; IndexType* cp ; IndexType* cp_end ; IndexType* rp ; IndexType* rp_end ; IndexType last_row ;)",
    "insertText": "for(col = 0 ; col < n_col ; col++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Col [ col ] . start = p [ col ] ; Col [ col ] . length = p [ col + 1 ] - p [ col ] ;)",
    "insertText": "if((Col [col].length) < 0)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorColLengthNegative ; stats [ Colamd::Info1 ] = col ; stats [ Colamd::Info2 ] = Col [ col ] . length ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: col %d length %d < 0\\n\", col, Col [col].length))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} Col [ col ] . shared1 . thickness = 1 ; Col [ col ] . shared2 . score = 0 ; Col [ col ] . shared3 . prev = Empty ; Col [ col ] . shared4 . degree_next = Empty ; } stats [ Info3 ] = 0 ;)",
    "insertText": "for(row = 0 ; row < n_row ; row++)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (last_row = - 1 ; cp =& A [ p [ col ] ] ; cp_end =& A [ p [ col + 1 ] ] ;)",
    "insertText": "while(cp < cp_end)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (row =* cp + + ;)",
    "insertText": "if(row < 0 || row >= n_row)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::ErrorRowIndexOutOfBounds ; stats [ Colamd::Info1 ] = col ; stats [ Colamd::Info2 ] = row ; stats [ Colamd::Info3 ] = n_row ;)",
    "insertText": "COLAMD_DEBUG0((\"colamd: row %d col %d out of bounds\\n\", row, col))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(row <= last_row || Row [row].shared2.mark == col)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (stats [ Colamd::Status ] = Colamd::OkButJumbled ; stats [ Colamd::Info1 ] = col ; stats [ Colamd::Info2 ] =)",
    "insertText": "row(stats [Colamd::Info3])"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG1((\"colamd: row %d col %d unsorted/duplicate\\n\",row,col))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Row [row].shared2.mark != col)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Row [ row ] . length + + ; } else { Col [ col ] . length - - ; } Row [ row ] . shared2 . mark = col ; last_row = row ; } } Row [ 0 ] . start = p [ n_col ] ; Row [ 0 ] . shared1 . p = Row [ 0 ] . start ; Row [ 0 ] . shared2 . mark = - 1 ;)",
    "insertText": "for(row = 1 ; row < n_row ; row++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Row [ row ] . start = Row [ row - 1 ] . start + Row [ row - 1 ] . length ; Row [ row ] . shared1 . p = Row [ row ] . start ; Row [ row ] . shared2 . mark = - 1 ; })",
    "insertText": "if(stats [Status] == OkButJumbled)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(Row [row].shared1.p)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(Row [*cp++].shared1.p)"
  },
  {
    "label": "COLAMD_DEBUG0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG0((\"colamd: reconstructing column form, matrix jumbled\\n\"))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Col [ 0 ] . start = 0 ; p [ 0 ] = Col [ 0 ] . start ;)",
    "insertText": "for(col = 1 ; col < n_col ; col++)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (rp =& A [ Row [ row ] . start ] ; rp_end = rp + Row [ row ] . length ;)",
    "insertText": "while(rp < rp_end)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(p [*rp++])"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "return(true)"
  },
  {
    "label": "init_scoring()",
    "kind": "Method",
    "detail": "Function (} template<IndexType> void)",
    "insertText": "init_scoring(IndexType n_row, IndexType n_col, RowStructure<IndexType> Row [], ColStructure<IndexType> Col [], IndexType A [], IndexType head [], double knobs [NKnobs], IndexType *p_n_row2, IndexType *p_n_col2, IndexType *p_max_deg)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (IndexType c ; IndexType r,row ; IndexType* cp ; IndexType deg ; IndexType* cp_end ; IndexType* new_cp ; IndexType col_length ; IndexType score ; IndexType n_col2 ; IndexType n_row2 ; IndexType dense_row_count ; IndexType dense_col_count ; IndexType min_score ; IndexType max_deg ; IndexType next_col ; dense_row_count =)",
    "insertText": "maxi(IndexType(0), numext::mini(IndexType(knobs [Colamd::DenseRow] * n_col), n_col))"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (dense_col_count =)",
    "insertText": "maxi(IndexType(0), numext::mini(IndexType(knobs [Colamd::DenseCol] * n_row), n_row))"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG1((\"colamd: densecount: %d %d\\n\", dense_row_count, dense_col_count))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (max_deg = 0 ; n_col2 = n_col ; n_row2 = n_row ;)",
    "insertText": "for(c = n_col-1 ; c >= 0 ; c--)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (deg = Col [ c ] . length ;)",
    "insertText": "if(deg == 0)"
  },
  {
    "label": "kill_principal()",
    "kind": "Method",
    "detail": "Function (Col [ c ] . shared2 . order = - - n_col2 ; Col [ c ] .)",
    "insertText": "kill_principal()"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "COLAMD_DEBUG1((\"colamd: null columns killed: %d\\n\", n_col - n_col2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } deg = Col [ c ] . length ;)",
    "insertText": "if(deg > dense_col_count)"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "COLAMD_DEBUG1((\"colamd: Dense and null columns killed: %d\\n\", n_col - n_col2))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (deg = Row [ r ] . shared1 . degree ;)",
    "insertText": "COLAMD_ASSERT(deg >= 0 && deg <= n_col)"
  },
  {
    "label": "kill()",
    "kind": "Method",
    "detail": "Function (Row [ r ] .)",
    "insertText": "kill()"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (- - n_row2 ; } else { max_deg =)",
    "insertText": "maxi(max_deg, deg)"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "COLAMD_DEBUG1((\"colamd: Dense and null rows killed: %d\\n\", n_row - n_row2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (row =* cp + + ;)",
    "insertText": "if(Row[row].is_dead())"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (continue ; }* new_cp + + = row ; score + = Row [ row ] . shared1 . degree - 1 ; score =)",
    "insertText": "mini(score, n_col)"
  },
  {
    "label": "col_length()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "col_length(IndexType) (new_cp - &A [Col [c].start])"
  },
  {
    "label": "COLAMD_DEBUG2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG2((\"Newly null killed: %d\\n\", c))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "COLAMD_ASSERT(score >= 0)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(score <= n_col)"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (Col [ c ] . length = col_length ; Col [ c ] . shared2 . score = score ; } })",
    "insertText": "COLAMD_DEBUG1((\"colamd: Dense, null, and newly-null columns killed: %d\\n\", n_col-n_col2))"
  },
  {
    "label": "COLAMD_DEBUG4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG4((\"place %d score %d minscore %d ncol %d\\n\", c, Col [c].shared2.score, min_score, n_col))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (score = Col [ c ] . shared2 . score ;)",
    "insertText": "COLAMD_ASSERT(min_score >= 0)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(min_score <= n_col)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(head [score] >= Empty)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (next_col = head [ score ] ; Col [ c ] . shared3 . prev = Empty ; Col [ c ] . shared4 . degree_next = next_col ;)",
    "insertText": "if(next_col != Empty)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (Col [ next_col ] . shared3 . prev = c ; } head [ score ] = c ; min_score =)",
    "insertText": "mini(min_score, score)"
  },
  {
    "label": "clear_mark()",
    "kind": "Method",
    "detail": "Function (IndexType k ; IndexType pivot_col ; IndexType* cp ; IndexType* rp ; IndexType pivot_row ; IndexType* new_cp ; IndexType* new_rp ; IndexType pivot_row_start ; IndexType pivot_row_degree ; IndexType pivot_row_length ; IndexType pivot_col_score ; IndexType needed_memory ; IndexType* cp_end ; IndexType* rp_end ; IndexType row ; IndexType col ; IndexType max_score ; IndexType cur_score ; unsigned int hash ; IndexType head_column ; IndexType first_col ; IndexType tag_mark ; IndexType row_mark ; IndexType set_difference ; IndexType min_score ; IndexType col_thickness ; IndexType max_mark ; IndexType pivot_col_thickness ; IndexType prev_col ; IndexType next_col ; IndexType ngarbage ; max_mark = INT_MAX - n_col ; tag_mark =)",
    "insertText": "clear_mark(n_row, Row)"
  },
  {
    "label": "COLAMD_DEBUG1()",
    "kind": "Method",
    "detail": "Function (min_score = 0 ; ngarbage = 0 ;)",
    "insertText": "COLAMD_DEBUG1((\"colamd: Ordering, n_col2=%d\\n\", n_col2))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(head [min_score] >= Empty)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (min_score + + ; } pivot_col = head [ min_score ] ;)",
    "insertText": "COLAMD_ASSERT(pivot_col >= 0 && pivot_col <= n_col)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (Col [ next_col ] . shared3 . prev = Empty ; })",
    "insertText": "COLAMD_ASSERT(Col[pivot_col].is_alive())"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG3((\"Pivot col: %d\\n\", pivot_col))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (pivot_col_score = Col [ pivot_col ] . shared2 . score ; Col [ pivot_col ] . shared2 . order = k ; pivot_col_thickness = Col [ pivot_col ] . shared1 . thickness ; k + = pivot_col_thickness ;)",
    "insertText": "COLAMD_ASSERT(pivot_col_thickness > 0)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (needed_memory =)",
    "insertText": "mini(pivot_col_score, n_col - k)"
  },
  {
    "label": "garbage_collection()",
    "kind": "Method",
    "detail": "Function (pfree =)",
    "insertText": "garbage_collection(n_row, n_col, Row, Col, A, &A [pfree])"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (ngarbage + + ;)",
    "insertText": "COLAMD_ASSERT(pfree + needed_memory < Alen)"
  },
  {
    "label": "COLAMD_DEBUG4()",
    "kind": "Method",
    "detail": "Function (row =* cp + + ;)",
    "insertText": "COLAMD_DEBUG4((\"Pivot col pattern %d %d\\n\", Row[row].is_alive(), row))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (col =* rp + + ; col_thickness = Col [ col ] . shared1 . thickness ;)",
    "insertText": "if(col_thickness > 0 && Col[col].is_alive())"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (Col [ col ] . shared1 . thickness = - col_thickness ;)",
    "insertText": "COLAMD_ASSERT(pfree < Alen)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (A [ pfree + + ] = col ; pivot_row_degree + = col_thickness ; } } } Col [ pivot_col ] . shared1 . thickness = pivot_col_thickness ; max_deg =)",
    "insertText": "maxi(max_deg, pivot_row_degree)"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (row =* cp + + ;)",
    "insertText": "COLAMD_DEBUG3((\"Kill row in pivot col: %d\\n\", row))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} pivot_row_length = pfree - pivot_row_start ;)",
    "insertText": "if(pivot_row_length > 0)"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (pivot_row = A [ Col [ pivot_col ] . start ] ;)",
    "insertText": "COLAMD_DEBUG3((\"Pivotal row is %d\\n\", pivot_row))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (} else { pivot_row = Empty ;)",
    "insertText": "COLAMD_ASSERT(pivot_row_length == 0)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "COLAMD_ASSERT(Col [pivot_col].length > 0 || pivot_row_length == 0)"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG3((\"** Computing set differences phase. **\\n\"))"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG3((\"Pivot row: \"))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (col =* rp + + ;)",
    "insertText": "COLAMD_ASSERT(Col[col].is_alive() && col != pivot_col)"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG3((\"Col: %d\\n\", col))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (col_thickness = - Col [ col ] . shared1 . thickness ;)",
    "insertText": "COLAMD_ASSERT(col_thickness > 0)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (Col [ col ] . shared1 . thickness = col_thickness ; cur_score = Col [ col ] . shared2 . score ; prev_col = Col [ col ] . shared3 . prev ; next_col = Col [ col ] . shared4 . degree_next ;)",
    "insertText": "COLAMD_ASSERT(cur_score >= 0)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(cur_score <= n_col)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(cur_score >= Empty)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (continue ; } row_mark = Row [ row ] . shared2 . mark ;)",
    "insertText": "COLAMD_ASSERT(row != pivot_row)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (set_difference = row_mark - tag_mark ;)",
    "insertText": "if(set_difference < 0)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(Row [row].shared1.degree <= max_deg)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (set_difference = Row [ row ] . shared1 . degree ; } set_difference - = col_thickness ;)",
    "insertText": "COLAMD_ASSERT(set_difference >= 0)"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG3((\"aggressive absorption. Row: %d\\n\", row))"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (} else { Row [ row ] . shared2 . mark = set_difference + tag_mark ; } } })",
    "insertText": "COLAMD_DEBUG3((\"** Adding set differences phase. **\\n\"))"
  },
  {
    "label": "COLAMD_DEBUG4()",
    "kind": "Method",
    "detail": "Function (hash = 0 ; cur_score = 0 ; cp =& A [ Col [ col ] . start ] ; new_cp = cp ; cp_end = cp + Col [ col ] . length ;)",
    "insertText": "COLAMD_DEBUG4((\"Adding set diffs for Col: %d.\\n\", col))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (row =* cp + + ;)",
    "insertText": "COLAMD_ASSERT(row >= 0 && row < n_row)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (continue ; } row_mark = Row [ row ] . shared2 . mark ;)",
    "insertText": "COLAMD_ASSERT(row_mark > tag_mark)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (* new_cp + + = row ; hash + = row ; cur_score + = row_mark - tag_mark ; cur_score =)",
    "insertText": "mini(cur_score, n_col)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} Col [ col ] .)",
    "insertText": "length(IndexType) (new_cp - &A [Col [col].start])"
  },
  {
    "label": "COLAMD_DEBUG4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG4((\"further mass elimination. Col: %d\\n\", col))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (pivot_row_degree - = Col [ col ] . shared1 . thickness ;)",
    "insertText": "COLAMD_ASSERT(pivot_row_degree >= 0)"
  },
  {
    "label": "COLAMD_DEBUG4()",
    "kind": "Method",
    "detail": "Function (Col [ col ] . shared2 . order = k ; k + = Col [ col ] . shared1 . thickness ; } else {)",
    "insertText": "COLAMD_DEBUG4((\"Preparing supercol detection for Col: %d.\\n\", col))"
  },
  {
    "label": "COLAMD_DEBUG4()",
    "kind": "Method",
    "detail": "Function (Col [ col ] . shared2 . score = cur_score ; hash % = n_col + 1 ;)",
    "insertText": "COLAMD_DEBUG4((\" Hash = %d, n_col = %d.\\n\", hash, n_col))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(hash <= n_col)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (head_column = head [ hash ] ;)",
    "insertText": "if(head_column > Empty)"
  },
  {
    "label": "first_col()",
    "kind": "Method",
    "detail": "Function (first_col = Col [ head_column ] . shared3 . headhash ; Col [ head_column ] . shared3 . headhash = col ; } else {)",
    "insertText": "first_col(head_column + 2)"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (head [)",
    "insertText": "hash(col + 2)"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (} Col [ col ] . shared4 . hash_next = first_col ; Col [ col ] . shared3 .)",
    "insertText": "hash(IndexType)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(Col[col].is_alive())"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "COLAMD_DEBUG3((\"** Supercolumn detection phase. **\\n\"))"
  },
  {
    "label": "detect_super_cols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "detect_super_cols(Col, A, head, pivot_row_start, pivot_row_length)"
  },
  {
    "label": "tag_mark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tag_mark(max_deg + 1)"
  },
  {
    "label": "COLAMD_DEBUG2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG2((\"clearing tag_mark\\n\"))"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "COLAMD_DEBUG3((\"** Finalize scores phase. **\\n\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (col =* rp + + ;)",
    "insertText": "if(Col[col].is_dead())"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (continue ; }* new_rp + + = col ; A [ Col [ col ] .)",
    "insertText": "start(Col [col].length++)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (cur_score = Col [ col ] . shared2 . score + pivot_row_degree ; max_score = n_col - k - Col [ col ] . shared1 . thickness ; cur_score - = Col [ col ] . shared1 . thickness ; cur_score =)",
    "insertText": "mini(cur_score, max_score)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(head [cur_score] >= Empty)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (Col [ next_col ] . shared3 . prev = col ; } head [ cur_score ] = col ; min_score =)",
    "insertText": "mini(min_score, cur_score)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pivot_row_degree > 0)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (Row [ pivot_row ] . start = pivot_row_start ; Row [ pivot_row ] .)",
    "insertText": "length(IndexType) (new_rp - &A[pivot_row_start])"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (Row [ pivot_row ] . shared1 . degree = pivot_row_degree ; Row [ pivot_row ] . shared2 . mark = 0 ; } })",
    "insertText": "return(ngarbage)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IndexType i ; IndexType c ; IndexType parent ; IndexType order ;)",
    "insertText": "for(i = 0 ; i < n_col ; i++)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(col_is_dead(Col, i))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (parent = i ; do { parent = Col [ parent ] . shared1 . parent ; })",
    "insertText": "while(!Col[parent].is_dead_principal())"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (c = i ; order = Col [ parent ] . shared2 . order ; do {)",
    "insertText": "COLAMD_ASSERT(Col [c].shared2.order == Empty)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Col [ c ] . shared2 . order = order + + ; Col [ c ] . shared1 . parent = parent ; c = Col [ c ] . shared1 . parent ; })",
    "insertText": "while(Col [c].shared2.order == Empty)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Col [ parent ] . shared2 . order = order ; } })",
    "insertText": "for(c = 0 ; c < n_col ; c++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(super_c = first_col ; super_c != Empty ; super_c = Col [super_c].shared4.hash_next)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(Col [super_c].is_alive())"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(Col [super_c].shared3.hash == hash)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (length = Col [ super_c ] . length ; prev_c = super_c ;)",
    "insertText": "for(c = Col [super_c].shared4.hash_next ; c != Empty ; c = Col [c].shared4.hash_next)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(c != super_c)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(Col[c].is_alive())"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(Col [c].shared3.hash == hash)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (prev_c = c ; continue ; } cp1 =& A [ Col [ super_c ] . start ] ; cp2 =& A [ Col [ c ] . start ] ;)",
    "insertText": "for(i = 0 ; i < length ; i++)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(cp1->is_alive())"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(cp2->is_alive())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(i != length)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (prev_c = c ; continue ; })",
    "insertText": "COLAMD_ASSERT(Col [c].shared2.score == Col [super_c].shared2.score)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (psrc =& A [ Col [ c ] . start ] ;)",
    "insertText": "COLAMD_ASSERT(pdest <= psrc)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (Col [ c ] .)",
    "insertText": "start(IndexType) (pdest - &A [0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (length = Col [ c ] . length ;)",
    "insertText": "for(j = 0 ; j < length ; j++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (r =* psrc + + ;)",
    "insertText": "if(Row[r].is_alive())"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (* pdest + + = r ; } } Col [ c ] .)",
    "insertText": "length(IndexType) (pdest - &A [Col [c].start])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(r = 0 ; r < n_row ; r++)"
  },
  {
    "label": "COLAMD_DEBUG3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_DEBUG3((\"Defrag row kill\\n\"))"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (} else { psrc =& A [ Row [ r ] . start ] ; Row [ r ] . shared2 . first_column =* psrc ;)",
    "insertText": "COLAMD_ASSERT(Row[r].is_alive())"
  },
  {
    "label": "ones_complement()",
    "kind": "Method",
    "detail": "Function (* psrc =)",
    "insertText": "ones_complement(r)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } } psrc = pdest ;)",
    "insertText": "while(psrc < pfree)"
  },
  {
    "label": "ones_complement()",
    "kind": "Method",
    "detail": "Function (psrc - - ; r =)",
    "insertText": "ones_complement(*psrc)"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COLAMD_ASSERT(r >= 0 && r < n_row)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (c =* psrc + + ;)",
    "insertText": "if(Col[c].is_alive())"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (* pdest + + = c ; } } Row [ r ] .)",
    "insertText": "length(IndexType) (pdest - &A [Row [r].start])"
  },
  {
    "label": "COLAMD_ASSERT()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "COLAMD_ASSERT(debug_rows == 0)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (Row [ r ] . shared2 . mark = 0 ; } })",
    "insertText": "return(1)"
  }
]