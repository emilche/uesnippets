[
  {
    "label": "bad_variant_access",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "bad_variant_access"
  },
  {
    "label": "bad_variant_access()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TYPES_BAD_VARIANT_ACCESS_H_ # define ABSL_TYPES_BAD_VARIANT_ACCESS_H_ # include<stdexcept> # include \" absl / base / config . h \" # ifdef ABSL_USES_STD_VARIANT # include<variant> namespace absl { ABSL_NAMESPACE_BEGIN using std::bad_variant_access ; ABSL_NAMESPACE_END } # else namespace absl { ABSL_NAMESPACE_BEGIN class bad_variant_access : public std::exception { public :)",
    "insertText": "bad_variant_access()"
  },
  {
    "label": "what()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "what()"
  },
  {
    "label": "ThrowBadVariantAccess()",
    "kind": "Method",
    "detail": "Function (} ; namespace variant_internal { [ [ noreturn ] ] ABSL_DLL void)",
    "insertText": "ThrowBadVariantAccess()"
  },
  {
    "label": "Rethrow()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] ABSL_DLL void)",
    "insertText": "Rethrow()"
  }
]