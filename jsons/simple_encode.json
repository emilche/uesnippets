[
  {
    "label": "StatusCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StatusCode"
  },
  {
    "label": "FrameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FrameType"
  },
  {
    "label": "RefFrameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RefFrameType"
  },
  {
    "label": "VP9_LEVEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VP9_LEVEL"
  },
  {
    "label": "GopMapFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GopMapFlag"
  },
  {
    "label": "PartitionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartitionInfo"
  },
  {
    "label": "MotionVectorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MotionVectorInfo"
  },
  {
    "label": "TplStatsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TplStatsInfo"
  },
  {
    "label": "RefFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RefFrameInfo"
  },
  {
    "label": "EncodeFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncodeFrameInfo"
  },
  {
    "label": "NewMotionvectorComponentCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NewMotionvectorComponentCounts"
  },
  {
    "label": "NewMotionVectorContextCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NewMotionVectorContextCounts"
  },
  {
    "label": "TransformSizeCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransformSizeCounts"
  },
  {
    "label": "FrameCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameCounts"
  },
  {
    "label": "ImageBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageBuffer"
  },
  {
    "label": "EncodeFrameResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncodeFrameResult"
  },
  {
    "label": "GroupOfPicture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroupOfPicture"
  },
  {
    "label": "SimpleEncode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleEncode"
  },
  {
    "label": "EncodeImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodeImpl"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_SIMPLE_ENCODE_H_ # define VPX_VP9_SIMPLE_ENCODE_H_ # include<cstddef> # include<cstdint> # include<cstdio> # include<memory> # include<vector> namespace vp9 { enum StatusCode { StatusOk = 0,StatusError,} ; enum FrameType { kFrameTypeKey = 0,kFrameTypeInter = 1,kFrameTypeAltRef = 2,kFrameTypeOverlay = 3,kFrameTypeGolden = 4,} ; enum RefFrameType { kRefFrameTypeLast = 0,kRefFrameTypePast = 1,kRefFrameTypeFuture = 2,kRefFrameTypeMax = 3,kRefFrameTypeNone = - 1,} ; enum VP9_LEVEL { LEVEL_UNKNOWN = 0,LEVEL_AUTO = 1,LEVEL_1 = 1 0,LEVEL_1_1 = 1 1,LEVEL_2 = 2 0,LEVEL_2_1 = 2 1,LEVEL_3 = 3 0,LEVEL_3_1 = 3 1,LEVEL_4 = 4 0,LEVEL_4_1 = 4 1,LEVEL_5 = 5 0,LEVEL_5_1 = 5 1,LEVEL_5_2 = 5 2,LEVEL_6 = 6 0,LEVEL_6_1 = 6 1,LEVEL_6_2 = 6 2,LEVEL_MAX = 2 5 5 } ; enum GopMapFlag { kGopMapFlagStart = 1<<0,kGopMapFlagUseAltRef = 1<<1,} ; struct PartitionInfo { int row ; int column ; int row_start ; int column_start ; int width ; int height ; } ; int kMotionVectorSubPixelPrecision = 8 ; int kMotionVectorFullPixelPrecision = 1 ; struct MotionVectorInfo { int mv_count ; RefFrameType ref_frame [ 2 ] ; double mv_row [ 2 ] ; double mv_column [ 2 ] ; } ; struct TplStatsInfo { int64_t intra_cost ; int64_t inter_cost ; int64_t mc_flow ; int64_t mc_dep_cost ; int64_t mc_ref_cost ; } ; struct RefFrameInfo { int coding_indexes [ kRefFrameTypeMax ] ; int valid_list [ kRefFrameTypeMax ] ; } ; bool)",
    "insertText": "operator(const RefFrameInfo &a, const RefFrameInfo &b)"
  },
  {
    "label": "output_image_buffer()",
    "kind": "Method",
    "detail": "Function (struct EncodeFrameInfo { int show_idx ; int coding_index ; RefFrameInfo ref_frame_info ; FrameType frame_type ; } ; struct NewMotionvectorComponentCounts { std::vector<unsigned int> sign ; std::vector<unsigned int> classes ; std::vector<unsigned int> class0 ; std::vector<std::vector<unsigned int>> bits ; std::vector<std::vector<unsigned int>> class0_fp ; std::vector<unsigned int> fp ; std::vector<unsigned int> class0_hp ; std::vector<unsigned int> hp ; } ; struct NewMotionVectorContextCounts { std::vector<unsigned int> joints ; std::vector<NewMotionvectorComponentCounts> comps ; } ; using UintArray2D = std::vector<std::vector<unsigned int>> ; using UintArray3D = std::vector<std::vector<std::vector<unsigned int>>> ; using UintArray5D = std::vector<std::vector<std::vector<std::vector<std::vector<unsigned int>>>>> ; using UintArray6D = std::vector<std::vector<std::vector<std::vector<std::vector<std::vector<unsigned int>>>>>> ; struct TransformSizeCounts { UintArray2D p32x32 ; UintArray2D p16x16 ; UintArray2D p8x8 ; std::vector<unsigned int> tx_totals ; } ; struct FrameCounts { UintArray2D y_mode ; UintArray2D uv_mode ; UintArray2D partition ; UintArray6D coef ; UintArray5D eob_branch ; UintArray2D switchable_interp ; UintArray2D inter_mode ; UintArray2D intra_inter ; UintArray2D comp_inter ; UintArray3D single_ref ; UintArray2D comp_ref ; UintArray2D skip ; TransformSizeCounts tx ; NewMotionVectorContextCounts mv ; } ; struct ImageBuffer { std::unique_ptr<unsigned char [ ]> plane_buffer [ 3 ] ; int plane_width [ 3 ] ; int plane_height [ 3 ] ; } ; void)",
    "insertText": "output_image_buffer(const ImageBuffer &image_buffer, std::FILE *out_file)"
  },
  {
    "label": "SimpleEncode()",
    "kind": "Method",
    "detail": "Function (struct EncodeFrameResult { int show_idx ; FrameType frame_type ; int coding_idx ; RefFrameInfo ref_frame_info ; size_t coding_data_bit_size ; size_t coding_data_byte_size ; std::unique_ptr<unsigned char [ ]> coding_data ; double psnr ; uint64_t sse ; int quantize_index ; FrameCounts frame_counts ; int num_rows_4x4 ; int num_cols_4x4 ; std::vector<PartitionInfo> partition_info ; std::vector<MotionVectorInfo> motion_vector_info ; std::vector<TplStatsInfo> tpl_stats_info ; ImageBuffer coded_frame ; int recode_count ; std::vector<int> q_index_history ; std::vector<int> rate_history ; } ; struct GroupOfPicture { std::vector<EncodeFrameInfo> encode_frame_list ; int next_encode_frame_index ; int show_frame_count ; int start_show_index ; int start_coding_index ; int first_is_key_frame ; int use_alt_ref ; int last_gop_use_alt_ref ; } ; class SimpleEncode { public :)",
    "insertText": "SimpleEncode(int frame_width, int frame_height, int frame_rate_num, int frame_rate_den, int target_bitrate, int num_frames, int target_level, const char *infile_path, const char *outfile_path = nullptr)"
  },
  {
    "label": "SimpleEncode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimpleEncode()"
  },
  {
    "label": "SimpleEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleEncode(SimpleEncode &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleEncode&)",
    "insertText": "operator(const SimpleEncode &)"
  },
  {
    "label": "SetEncodeSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncodeSpeed(int encode_speed)"
  },
  {
    "label": "SetEncodeConfig()",
    "kind": "Method",
    "detail": "Function (StatusCode)",
    "insertText": "SetEncodeConfig(const char *name, const char *value)"
  },
  {
    "label": "DumpEncodeConfigs()",
    "kind": "Method",
    "detail": "Function (StatusCode)",
    "insertText": "DumpEncodeConfigs(int pass, FILE *fp)"
  },
  {
    "label": "ComputeFirstPassStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFirstPassStats()"
  },
  {
    "label": "ObserveFirstPassStats()",
    "kind": "Method",
    "detail": "Function (std::vector<std::vector<double>>)",
    "insertText": "ObserveFirstPassStats()"
  },
  {
    "label": "ObserveFirstPassMotionVectors()",
    "kind": "Method",
    "detail": "Function (std::vector<std::vector<MotionVectorInfo>>)",
    "insertText": "ObserveFirstPassMotionVectors()"
  },
  {
    "label": "ObserveKeyFrameMap()",
    "kind": "Method",
    "detail": "Function (std::vector<int>)",
    "insertText": "ObserveKeyFrameMap()"
  },
  {
    "label": "SetExternalGroupOfPicturesMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalGroupOfPicturesMap(int *gop_map, int gop_map_size)"
  },
  {
    "label": "ObserveExternalGroupOfPicturesMap()",
    "kind": "Method",
    "detail": "Function (std::vector<int>)",
    "insertText": "ObserveExternalGroupOfPicturesMap()"
  },
  {
    "label": "StartEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEncode()"
  },
  {
    "label": "EndEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEncode()"
  },
  {
    "label": "GetKeyFrameGroupSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetKeyFrameGroupSize()"
  },
  {
    "label": "ObserveGroupOfPicture()",
    "kind": "Method",
    "detail": "Function (GroupOfPicture)",
    "insertText": "ObserveGroupOfPicture()"
  },
  {
    "label": "GetNextEncodeFrameInfo()",
    "kind": "Method",
    "detail": "Function (EncodeFrameInfo)",
    "insertText": "GetNextEncodeFrameInfo()"
  },
  {
    "label": "EncodeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeFrame(EncodeFrameResult *encode_frame_result)"
  },
  {
    "label": "EncodeFrameWithQuantizeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeFrameWithQuantizeIndex(EncodeFrameResult *encode_frame_result, int quantize_index)"
  },
  {
    "label": "EncodeFrameWithTargetFrameBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeFrameWithTargetFrameBits(EncodeFrameResult *encode_frame_result, int target_frame_bits, double percent_diff)"
  },
  {
    "label": "GetCodingFrameNum()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCodingFrameNum()"
  },
  {
    "label": "GetFramePixelCount()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetFramePixelCount()"
  },
  {
    "label": "ComputeKeyFrameMap()",
    "kind": "Method",
    "detail": "Function (private : std::vector<int>)",
    "insertText": "ComputeKeyFrameMap()"
  },
  {
    "label": "UpdateKeyFrameGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeyFrameGroup(int key_frame_show_index)"
  },
  {
    "label": "PostUpdateKeyFrameGroupIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateKeyFrameGroupIndex(FrameType frame_type)"
  },
  {
    "label": "PostUpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateState(const EncodeFrameResult &encode_frame_result)"
  }
]