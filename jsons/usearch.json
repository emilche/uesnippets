[
  {
    "label": "UStringSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UStringSearch"
  },
  {
    "label": "UStringSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UStringSearch"
  },
  {
    "label": "using",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "using"
  },
  {
    "label": "using",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "using"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "LocalUStringSearchPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalUStringSearchPointer"
  },
  {
    "label": "USearchAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "USearchAttribute"
  },
  {
    "label": "USearchAttributeValue",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "USearchAttributeValue"
  },
  {
    "label": "usearch_open()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_open(const UChar          *pattern, \n                                              int32_t         patternlength, \n                                        const UChar          *text, \n                                              int32_t         textlength,\n                                        const char           *locale,\n                                              UBreakIterator *breakiter,\n                                              UErrorCode     *status)"
  },
  {
    "label": "usearch_openFromCollator()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_openFromCollator(\n                                         const UChar *pattern, \n                                               int32_t         patternlength,\n                                         const UChar          *text, \n                                               int32_t         textlength,\n                                         const UCollator      *collator,\n                                               UBreakIterator *breakiter,\n                                               UErrorCode     *status)"
  },
  {
    "label": "usearch_close()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_close(UStringSearch *searchiter)"
  },
  {
    "label": "usearch_setOffset()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_setOffset(UStringSearch *strsrch, \n                                        int32_t    position,\n                                        UErrorCode    *status)"
  },
  {
    "label": "usearch_getOffset()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getOffset(const UStringSearch *strsrch)"
  },
  {
    "label": "usearch_setAttribute()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_setAttribute(UStringSearch         *strsrch, \n                                           USearchAttribute       attribute,\n                                           USearchAttributeValue  value,\n                                           UErrorCode            *status)"
  },
  {
    "label": "usearch_getAttribute()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getAttribute(\n                                         const UStringSearch    *strsrch,\n                                               USearchAttribute  attribute)"
  },
  {
    "label": "usearch_getMatchedStart()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getMatchedStart(\n                                               const UStringSearch *strsrch)"
  },
  {
    "label": "usearch_getMatchedLength()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getMatchedLength(\n                                               const UStringSearch *strsrch)"
  },
  {
    "label": "match()",
    "kind": "Method",
    "detail": "Function (valid)",
    "insertText": "match(e.g. just after \n* construction or after <tt>USEARCH_DONE</tt> has been returned, returns\n* an empty string. If result is not large enough to store the matched text,\n* result will be filled with the partial text and an U_BUFFER_OVERFLOW_ERROR \n* will be returned in status. result will be null-terminated whenever \n* possible. If the buffer fits the matched text exactly, a null-termination \n* is not possible, then a U_STRING_NOT_TERMINATED_ERROR set in status.\n* Pre-flighting can be either done with length = 0 or the API \n* <tt>usearch_getMatchLength</tt>.\n* @param strsrch search iterator data struct\n* @param result UChar buffer to store the matched string\n* @param resultCapacity length of the result buffer\n* @param status error returned if result is not large enough\n* @return exact length of the matched text, not counting the null-termination\n* @see #usearch_first\n* @see #usearch_next\n* @see #usearch_previous\n* @see #usearch_last\n* @see #USEARCH_DONE\n* @stable ICU 2.4\n*/\nU_STABLE int32_t U_EXPORT2 usearch_getMatchedText(const UStringSearch *strsrch, \n                                            UChar         *result, \n                                            int32_t        resultCapacity, \n                                            UErrorCode    *status)"
  },
  {
    "label": "usearch_setBreakIterator()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_setBreakIterator(UStringSearch  *strsrch, \n                                               UBreakIterator *breakiter,\n                                               UErrorCode     *status)"
  },
  {
    "label": "usearch_getBreakIterator()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getBreakIterator(\n                                              const UStringSearch *strsrch)"
  },
  {
    "label": "usearch_setText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_setText(      UStringSearch *strsrch, \n                                      const UChar         *text,\n                                            int32_t        textlength,\n                                            UErrorCode    *status)"
  },
  {
    "label": "usearch_getText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getText(const UStringSearch *strsrch, \n                                               int32_t       *length)"
  },
  {
    "label": "usearch_getCollator()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getCollator(\n                                               const UStringSearch *strsrch)"
  },
  {
    "label": "usearch_setCollator()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_setCollator(      UStringSearch *strsrch, \n                                          const UCollator     *collator,\n                                                UErrorCode    *status)"
  },
  {
    "label": "usearch_setPattern()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_setPattern(      UStringSearch *strsrch, \n                                         const UChar         *pattern,\n                                               int32_t        patternlength,\n                                               UErrorCode    *status)"
  },
  {
    "label": "usearch_getPattern()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_getPattern(\n                                               const UStringSearch *strsrch, \n                                                     int32_t       *length)"
  },
  {
    "label": "usearch_first()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_first(UStringSearch *strsrch, \n                                           UErrorCode    *status)"
  },
  {
    "label": "usearch_following()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_following(UStringSearch *strsrch, \n                                               int32_t    position, \n                                               UErrorCode    *status)"
  },
  {
    "label": "usearch_last()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_last(UStringSearch *strsrch, \n                                          UErrorCode    *status)"
  },
  {
    "label": "usearch_preceding()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_preceding(UStringSearch *strsrch, \n                                               int32_t    position, \n                                               UErrorCode    *status)"
  },
  {
    "label": "usearch_next()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_next(UStringSearch *strsrch, \n                                          UErrorCode    *status)"
  },
  {
    "label": "usearch_previous()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_previous(UStringSearch *strsrch, \n                                              UErrorCode    *status)"
  },
  {
    "label": "usearch_reset()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_reset(UStringSearch *strsrch)"
  },
  {
    "label": "usearch_search()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_search(UStringSearch *strsrch,\n                                          int32_t        startIdx,\n                                          int32_t        *matchStart,\n                                          int32_t        *matchLimit,\n                                          UErrorCode     *status)"
  },
  {
    "label": "usearch_searchBackwards()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "usearch_searchBackwards(UStringSearch *strsrch,\n                                                   int32_t        startIdx,\n                                                   int32_t        *matchStart,\n                                                   int32_t        *matchLimit,\n                                                   UErrorCode     *status)"
  }
]