[
  {
    "label": "CefBrowserHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefBrowserHost"
  },
  {
    "label": "CefClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefClient"
  },
  {
    "label": "CefBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefBrowser"
  },
  {
    "label": "CefRunFileDialogCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefRunFileDialogCallback"
  },
  {
    "label": "CefNavigationEntryVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefNavigationEntryVisitor"
  },
  {
    "label": "CefPdfPrintCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefPdfPrintCallback"
  },
  {
    "label": "CefDownloadImageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefDownloadImageCallback"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CEF_BROWSER_H_ # define CEF_INCLUDE_CEF_BROWSER_H_ # pragma once # include<vector> # include \" include / cef_base . h \" # include \" include / cef_devtools_message_observer . h \" # include \" include / cef_drag_data . h \" # include \" include / cef_frame . h \" # include \" include / cef_image . h \" # include \" include / cef_navigation_entry . h \" # include \" include / cef_registration . h \" # include \" include / cef_request_context . h \" class CefBrowserHost ; class CefClient ; class CefBrowser : public CefBaseRefCounted { public : bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetHost()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowserHost>)",
    "insertText": "GetHost()"
  },
  {
    "label": "CanGoBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoBack()"
  },
  {
    "label": "GoBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoBack()"
  },
  {
    "label": "CanGoForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoForward()"
  },
  {
    "label": "GoForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoForward()"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "Reload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reload()"
  },
  {
    "label": "ReloadIgnoreCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadIgnoreCache()"
  },
  {
    "label": "StopLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoad()"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSame(CefRefPtr<CefBrowser> that)"
  },
  {
    "label": "IsPopup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPopup()"
  },
  {
    "label": "HasDocument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDocument()"
  },
  {
    "label": "GetMainFrame()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefFrame>)",
    "insertText": "GetMainFrame()"
  },
  {
    "label": "GetFocusedFrame()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefFrame>)",
    "insertText": "GetFocusedFrame()"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefFrame>)",
    "insertText": "GetFrame(int64 identifier)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefFrame>)",
    "insertText": "GetFrame(const CefString& name)"
  },
  {
    "label": "GetFrameCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetFrameCount()"
  },
  {
    "label": "GetFrameIdentifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFrameIdentifiers(std::vector<int64>& identifiers)"
  },
  {
    "label": "GetFrameNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFrameNames(std::vector<CefString>& names)"
  },
  {
    "label": "OnFileDialogDismissed()",
    "kind": "Method",
    "detail": "Function (} ; class CefRunFileDialogCallback : public CefBaseRefCounted { public : void)",
    "insertText": "OnFileDialogDismissed(int selected_accept_filter, const std::vector<CefString>& file_paths)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} ; class CefNavigationEntryVisitor : public CefBaseRefCounted { public : bool)",
    "insertText": "Visit(CefRefPtr<CefNavigationEntry> entry, bool current, int index, int total)"
  },
  {
    "label": "OnPdfPrintFinished()",
    "kind": "Method",
    "detail": "Function (} ; class CefPdfPrintCallback : public CefBaseRefCounted { public : void)",
    "insertText": "OnPdfPrintFinished(const CefString& path, bool ok)"
  },
  {
    "label": "OnDownloadImageFinished()",
    "kind": "Method",
    "detail": "Function (} ; class CefDownloadImageCallback : public CefBaseRefCounted { public : void)",
    "insertText": "OnDownloadImageFinished(const CefString& image_url, int http_status_code, CefRefPtr<CefImage> image)"
  },
  {
    "label": "CreateBrowser()",
    "kind": "Method",
    "detail": "Function (} ; class CefBrowserHost : public CefBaseRefCounted { public : typedef cef_drag_operations_mask_t DragOperationsMask ; typedef cef_file_dialog_mode_t FileDialogMode ; typedef cef_mouse_button_type_t MouseButtonType ; typedef cef_paint_element_type_t PaintElementType ; bool)",
    "insertText": "CreateBrowser(const CefWindowInfo& windowInfo, CefRefPtr<CefClient> client, const CefString& url, const CefBrowserSettings& settings, CefRefPtr<CefDictionaryValue> extra_info, CefRefPtr<CefRequestContext> request_context)"
  },
  {
    "label": "CreateBrowserSync()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "CreateBrowserSync(const CefWindowInfo& windowInfo, CefRefPtr<CefClient> client, const CefString& url, const CefBrowserSettings& settings, CefRefPtr<CefDictionaryValue> extra_info, CefRefPtr<CefRequestContext> request_context)"
  },
  {
    "label": "GetBrowser()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "GetBrowser()"
  },
  {
    "label": "CloseBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseBrowser(bool force_close)"
  },
  {
    "label": "TryCloseBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCloseBrowser()"
  },
  {
    "label": "SetFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocus(bool focus)"
  },
  {
    "label": "GetWindowHandle()",
    "kind": "Method",
    "detail": "Function (CefWindowHandle)",
    "insertText": "GetWindowHandle()"
  },
  {
    "label": "GetOpenerWindowHandle()",
    "kind": "Method",
    "detail": "Function (CefWindowHandle)",
    "insertText": "GetOpenerWindowHandle()"
  },
  {
    "label": "HasView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasView()"
  },
  {
    "label": "GetClient()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefClient>)",
    "insertText": "GetClient()"
  },
  {
    "label": "GetRequestContext()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRequestContext>)",
    "insertText": "GetRequestContext()"
  },
  {
    "label": "GetZoomLevel()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetZoomLevel()"
  },
  {
    "label": "SetZoomLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetZoomLevel(double zoomLevel)"
  },
  {
    "label": "RunFileDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunFileDialog(FileDialogMode mode, const CefString& title, const CefString& default_file_path, const std::vector<CefString>& accept_filters, int selected_accept_filter, CefRefPtr<CefRunFileDialogCallback> callback)"
  },
  {
    "label": "StartDownload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDownload(const CefString& url)"
  },
  {
    "label": "DownloadImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DownloadImage(const CefString& image_url, bool is_favicon, uint32 max_image_size, bool bypass_cache, CefRefPtr<CefDownloadImageCallback> callback)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print()"
  },
  {
    "label": "PrintToPDF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintToPDF(const CefString& path, const CefPdfPrintSettings& settings, CefRefPtr<CefPdfPrintCallback> callback)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Find(int identifier, const CefString& searchText, bool forward, bool matchCase, bool findNext)"
  },
  {
    "label": "StopFinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopFinding(bool clearSelection)"
  },
  {
    "label": "ShowDevTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDevTools(const CefWindowInfo& windowInfo, CefRefPtr<CefClient> client, const CefBrowserSettings& settings, const CefPoint& inspect_element_at)"
  },
  {
    "label": "CloseDevTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDevTools()"
  },
  {
    "label": "HasDevTools()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDevTools()"
  },
  {
    "label": "SendDevToolsMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendDevToolsMessage(const void* message, size_t message_size)"
  },
  {
    "label": "ExecuteDevToolsMethod()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ExecuteDevToolsMethod(int message_id, const CefString& method, CefRefPtr<CefDictionaryValue> params)"
  },
  {
    "label": "AddDevToolsMessageObserver()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRegistration>)",
    "insertText": "AddDevToolsMessageObserver(CefRefPtr<CefDevToolsMessageObserver> observer)"
  },
  {
    "label": "GetNavigationEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavigationEntries(CefRefPtr<CefNavigationEntryVisitor> visitor, bool current_only)"
  },
  {
    "label": "ReplaceMisspelling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceMisspelling(const CefString& word)"
  },
  {
    "label": "AddWordToDictionary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWordToDictionary(const CefString& word)"
  },
  {
    "label": "IsWindowRenderingDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowRenderingDisabled()"
  },
  {
    "label": "WasResized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WasResized()"
  },
  {
    "label": "WasHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WasHidden(bool hidden)"
  },
  {
    "label": "NotifyScreenInfoChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyScreenInfoChanged()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(PaintElementType type)"
  },
  {
    "label": "SendExternalBeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendExternalBeginFrame()"
  },
  {
    "label": "SendKeyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendKeyEvent(const CefKeyEvent& event)"
  },
  {
    "label": "SendMouseClickEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMouseClickEvent(const CefMouseEvent& event, MouseButtonType type, bool mouseUp, int clickCount)"
  },
  {
    "label": "SendMouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMouseMoveEvent(const CefMouseEvent& event, bool mouseLeave)"
  },
  {
    "label": "SendMouseWheelEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMouseWheelEvent(const CefMouseEvent& event, int deltaX, int deltaY)"
  },
  {
    "label": "SendTouchEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTouchEvent(const CefTouchEvent& event)"
  },
  {
    "label": "SendFocusEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendFocusEvent(bool setFocus)"
  },
  {
    "label": "SendCaptureLostEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCaptureLostEvent()"
  },
  {
    "label": "NotifyMoveOrResizeStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMoveOrResizeStarted()"
  },
  {
    "label": "GetWindowlessFrameRate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetWindowlessFrameRate()"
  },
  {
    "label": "SetWindowlessFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowlessFrameRate(int frame_rate)"
  },
  {
    "label": "ImeSetComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImeSetComposition(const CefString& text, const std::vector<CefCompositionUnderline>& underlines, const CefRange& replacement_range, const CefRange& selection_range)"
  },
  {
    "label": "ImeCommitText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImeCommitText(const CefString& text, const CefRange& replacement_range, int relative_cursor_pos)"
  },
  {
    "label": "ImeFinishComposingText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImeFinishComposingText(bool keep_selection)"
  },
  {
    "label": "ImeCancelComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImeCancelComposition()"
  },
  {
    "label": "DragTargetDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DragTargetDragEnter(CefRefPtr<CefDragData> drag_data, const CefMouseEvent& event, DragOperationsMask allowed_ops)"
  },
  {
    "label": "DragTargetDragOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DragTargetDragOver(const CefMouseEvent& event, DragOperationsMask allowed_ops)"
  },
  {
    "label": "DragTargetDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DragTargetDragLeave()"
  },
  {
    "label": "DragTargetDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DragTargetDrop(const CefMouseEvent& event)"
  },
  {
    "label": "DragSourceEndedAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DragSourceEndedAt(int x, int y, DragOperationsMask op)"
  },
  {
    "label": "DragSourceSystemDragEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DragSourceSystemDragEnded()"
  },
  {
    "label": "GetVisibleNavigationEntry()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefNavigationEntry>)",
    "insertText": "GetVisibleNavigationEntry()"
  },
  {
    "label": "SetAccessibilityState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAccessibilityState(cef_state_t accessibility_state)"
  },
  {
    "label": "SetAutoResizeEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoResizeEnabled(bool enabled, const CefSize& min_size, const CefSize& max_size)"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefExtension>)",
    "insertText": "GetExtension()"
  },
  {
    "label": "IsBackgroundHost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBackgroundHost()"
  },
  {
    "label": "SetAudioMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioMuted(bool mute)"
  },
  {
    "label": "IsAudioMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioMuted()"
  }
]