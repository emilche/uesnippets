[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "PROFILEVISUALIZER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PROFILEVISUALIZER_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FPaintArgs ; class FSlateWindowElementList ; struct FSlateBrush ; class STimeline : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STimeline ) : _MinValue( 0.0f ) , _MaxValue( 1.0f ) , _FixedLabelSpacing(1.0)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(float, MinValue ) SLATE_ARGUMENT( float, MaxValue ) SLATE_ARGUMENT( float, FixedLabelSpacing ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "SetZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetZoom(float InZoom)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Zoom =)",
    "insertText": "Max(InZoom, 1.0f)"
  },
  {
    "label": "GetZoom()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetZoom()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (Offset = InOffset ; } float)",
    "insertText": "GetOffset()"
  },
  {
    "label": "GetMinMaxValues()",
    "kind": "Method",
    "detail": "Function (MinValue = InMin ; MaxValue = InMax ; } void)",
    "insertText": "GetMinMaxValues(float &InMin, float &InMax)"
  },
  {
    "label": "SetDrawingGeometry()",
    "kind": "Method",
    "detail": "Function (InMin = MinValue ; InMax = MaxValue ; } void)",
    "insertText": "SetDrawingGeometry(const FGeometry& Geometry)"
  },
  {
    "label": "GetDrawingGeometry()",
    "kind": "Method",
    "detail": "Function (DrawingGeometry = Geometry ; } FGeometry)",
    "insertText": "GetDrawingGeometry()"
  }
]