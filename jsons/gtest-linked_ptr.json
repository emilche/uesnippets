[
  {
    "label": "linked_ptr_internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "linked_ptr_internal"
  },
  {
    "label": "linked_ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "linked_ptr"
  },
  {
    "label": "GTEST_DECLARE_STATIC_MUTEX_()",
    "kind": "Method",
    "detail": "Function (# ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_ # define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_ # include<stdlib . h> # include<assert . h> # include \" gtest / internal / gtest - port . h \" namespace testing { namespace internal { GTEST_API_)",
    "insertText": "GTEST_DECLARE_STATIC_MUTEX_(g_linked_ptr_mutex)"
  },
  {
    "label": "join_new()",
    "kind": "Method",
    "detail": "Function (class linked_ptr_internal { public : void)",
    "insertText": "join_new()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (next_ = this ; } void)",
    "insertText": "join(linked_ptr_internal const* ptr) GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&g_linked_ptr_mutex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (linked_ptr_internal const* p = ptr ;)",
    "insertText": "while(p->next_ != ptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(p->next_ != this && \"Trying to join() a linked ring we are already in. \" \"Is GMock thread safety enabled?\")"
  },
  {
    "label": "depart()",
    "kind": "Method",
    "detail": "Function (p = p -> next_ ; } p -> next_ = this ; next_ = ptr ; } bool)",
    "insertText": "depart() GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (linked_ptr_internal const* p = next_ ;)",
    "insertText": "while(p->next_ != this)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(p->next_ != next_ && \"Trying to depart() a linked ring we are not in. \" \"Is GMock thread safety enabled?\")"
  },
  {
    "label": "linked_ptr()",
    "kind": "Method",
    "detail": "Function (p = p -> next_ ; } p -> next_ = next_ ; return false ; } private : linked_ptr_internal const* next_ ; } ; template<T> class linked_ptr { public : typedef T element_type ;)",
    "insertText": "linked_ptr(T* ptr = NULL)"
  },
  {
    "label": "capture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "capture(ptr)"
  },
  {
    "label": "linked_ptr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "linked_ptr()"
  },
  {
    "label": "depart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "depart()"
  },
  {
    "label": "linked_ptr()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "linked_ptr(linked_ptr<U> const& ptr)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(&ptr)"
  },
  {
    "label": "linked_ptr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "linked_ptr(linked_ptr const& ptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(&ptr != this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U> linked_ptr&)",
    "insertText": "operator(linked_ptr<U> const& ptr)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} return* this ; } void)",
    "insertText": "reset(T* ptr = NULL)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "get()"
  },
  {
    "label": "capture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "capture(T* ptr)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (} template<U> void)",
    "insertText": "copy(linked_ptr<U> const* ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> bool)",
    "insertText": "operator(T* ptr, const linked_ptr<T>& x)"
  },
  {
    "label": "make_linked_ptr()",
    "kind": "Method",
    "detail": "Function (} template<T> linked_ptr<T>)",
    "insertText": "make_linked_ptr(T* ptr)"
  }
]