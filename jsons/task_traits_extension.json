[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ExtensionId",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExtensionId"
  },
  {
    "label": "TaskTraitsExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TaskTraitsExtension"
  },
  {
    "label": "CheckCanMakeExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckCanMakeExtension"
  },
  {
    "label": "TaskTraitsExtensionStorage()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_TASK_TRAITS_EXTENSION_H_ # define BASE_TASK_TASK_TRAITS_EXTENSION_H_ # include<stdint . h> # include<array> # include<tuple> # include<utility> # include \" base / base_export . h \" # include \" base / traits_bag . h \" namespace base { struct BASE_EXPORT TaskTraitsExtensionStorage { size_t kStorageSize = 8 ;)",
    "insertText": "TaskTraitsExtensionStorage()"
  },
  {
    "label": "TaskTraitsExtensionStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskTraitsExtensionStorage(uint8_t extension_id_in, const std::array<uint8_t, kStorageSize>& data_in)"
  },
  {
    "label": "TaskTraitsExtensionStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskTraitsExtensionStorage(uint8_t extension_id_in, std::array<uint8_t, kStorageSize>&& data_in)"
  },
  {
    "label": "TaskTraitsExtensionStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskTraitsExtensionStorage(const TaskTraitsExtensionStorage& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskTraitsExtensionStorage&)",
    "insertText": "operator(const TaskTraitsExtensionStorage& other)"
  },
  {
    "label": "TaskTraitsExtensionStorage()",
    "kind": "Method",
    "detail": "Function (enum ExtensionId : uint8_t { kInvalidExtensionId = 0,kFirstEmbedderExtensionId = 1,kMaxExtensionId = 4 } ; uint8_t extension_id ; std::array<uint8_t,kStorageSize> data ; } ;)",
    "insertText": "TaskTraitsExtensionStorage() : extension_id(kInvalidExtensionId)"
  },
  {
    "label": "TaskTraitsExtensionStorage()",
    "kind": "Method",
    "detail": "Function (} { })",
    "insertText": "TaskTraitsExtensionStorage(uint8_t extension_id_in, const std::array<uint8_t, kStorageSize>& data_in) : extension_id(extension_id_in), data(data_in)"
  },
  {
    "label": "TaskTraitsExtensionStorage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TaskTraitsExtensionStorage(uint8_t extension_id_in, std::array<uint8_t, kStorageSize>&& data_in) : extension_id(extension_id_in), data(std::move(data_in))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (namespace trait_helpers { struct TaskTraitsExtension { template<class . . . ArgTypes,class CheckCanMakeExtension =)",
    "insertText": "decltype(MakeTaskTraitsExtension(std::declval<ArgTypes>()...))> constexpr TaskTraitsExtension(ArgTypes... args)"
  },
  {
    "label": "GetTaskTraitsExtension()",
    "kind": "Method",
    "detail": "Function (} } ; template<class . . . ArgTypes> using AreValidTraitsForExtension = std::is_constructible<TaskTraitsExtension,ArgTypes . . .> ; template<class . . . ArgTypes> TaskTraitsExtensionStorage)",
    "insertText": "GetTaskTraitsExtension(std::true_type base_traits, ArgTypes... args)"
  },
  {
    "label": "GetTaskTraitsExtension()",
    "kind": "Method",
    "detail": "Function (} template<class . . . ArgTypes> TaskTraitsExtensionStorage)",
    "insertText": "GetTaskTraitsExtension(std::false_type base_traits, ArgTypes... args)"
  }
]