[
  {
    "label": "ULocaleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ULocaleData"
  },
  {
    "label": "ULocaleDataExemplarSetType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ULocaleDataExemplarSetType"
  },
  {
    "label": "ULocaleDataDelimiterType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ULocaleDataDelimiterType"
  },
  {
    "label": "UMeasurementSystem",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMeasurementSystem"
  },
  {
    "label": "ulocdata_open()",
    "kind": "Method",
    "detail": "Function (# ifndef __ULOCDATA_H__ # define __ULOCDATA_H__ # include \" unicode / ures . h \" # include \" unicode / uloc . h \" # include \" unicode / uset . h \" # include \" unicode / localpointer . h \" struct ULocaleData ; typedef struct ULocaleData ULocaleData ; typedef enum ULocaleDataExemplarSetType { ULOCDATA_ES_STANDARD = 0,ULOCDATA_ES_AUXILIARY = 1,ULOCDATA_ES_INDEX = 2,ULOCDATA_ES_PUNCTUATION = 3,# ifndef ULOCDATA_ES_COUNT = 4 # endif } ULocaleDataExemplarSetType ; typedef enum ULocaleDataDelimiterType { ULOCDATA_QUOTATION_START = 0,ULOCDATA_QUOTATION_END = 1,ULOCDATA_ALT_QUOTATION_START = 2,ULOCDATA_ALT_QUOTATION_END = 3,# ifndef ULOCDATA_DELIMITER_COUNT = 4 # endif } ULocaleDataDelimiterType ; U_STABLE ULocaleData* U_EXPORT2)",
    "insertText": "ulocdata_open(const char *localeID, UErrorCode *status)"
  },
  {
    "label": "ulocdata_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ulocdata_close(ULocaleData *uld)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalULocaleDataPointer, ULocaleData, ulocdata_close)"
  },
  {
    "label": "ulocdata_setNoSubstitute()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE void U_EXPORT2)",
    "insertText": "ulocdata_setNoSubstitute(ULocaleData *uld, UBool setting)"
  },
  {
    "label": "ulocdata_getNoSubstitute()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ulocdata_getNoSubstitute(ULocaleData *uld)"
  },
  {
    "label": "ulocdata_getExemplarSet()",
    "kind": "Method",
    "detail": "Function (U_STABLE USet* U_EXPORT2)",
    "insertText": "ulocdata_getExemplarSet(ULocaleData *uld, USet *fillIn, uint32_t options, ULocaleDataExemplarSetType extype, UErrorCode *status)"
  },
  {
    "label": "ulocdata_getDelimiter()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ulocdata_getDelimiter(ULocaleData *uld, ULocaleDataDelimiterType type, UChar *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "ulocdata_getMeasurementSystem()",
    "kind": "Method",
    "detail": "Function (typedef enum UMeasurementSystem { UMS_SI,UMS_US,UMS_UK,# ifndef UMS_LIMIT # endif } UMeasurementSystem ; U_STABLE UMeasurementSystem U_EXPORT2)",
    "insertText": "ulocdata_getMeasurementSystem(const char *localeID, UErrorCode *status)"
  },
  {
    "label": "ulocdata_getPaperSize()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ulocdata_getPaperSize(const char *localeID, int32_t *height, int32_t *width, UErrorCode *status)"
  },
  {
    "label": "ulocdata_getCLDRVersion()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ulocdata_getCLDRVersion(UVersionInfo versionArray, UErrorCode *status)"
  },
  {
    "label": "ulocdata_getLocaleDisplayPattern()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ulocdata_getLocaleDisplayPattern(ULocaleData *uld, UChar *pattern, int32_t patternCapacity, UErrorCode *status)"
  },
  {
    "label": "ulocdata_getLocaleSeparator()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ulocdata_getLocaleSeparator(ULocaleData *uld, UChar *separator, int32_t separatorCapacity, UErrorCode *status)"
  }
]