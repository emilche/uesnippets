[
  {
    "label": "SMultiDumpBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiDumpBrowser"
  },
  {
    "label": "FFileDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileDescriptor"
  },
  {
    "label": "DescriptorStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DescriptorStatus"
  },
  {
    "label": "SFileTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFileTableRow"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GenerateFileRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateFileRow(TSharedPtr<FFileDescriptor> FileItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectionChanged(TSharedPtr<FFileDescriptor> SelectedItem, ESelectInfo::Type SelType)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "AddFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFile(FFileDescriptor *InFileDesc)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "FindTotalsForPrefilterRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTotalsForPrefilterRecursive(TSharedPtr<FEventGraphSample> Event, float &OutTotalTime)"
  },
  {
    "label": "FindTotalsForPrefilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTotalsForPrefilter(TSharedPtr<FFileDescriptor> Desc)"
  },
  {
    "label": "PrefilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefilterTextCommitted(const FText& InText, const ETextCommit::Type InTextAction)"
  }
]