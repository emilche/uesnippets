[
  {
    "label": "SMultiDumpBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiDumpBrowser"
  },
  {
    "label": "FFileDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileDescriptor"
  },
  {
    "label": "DescriptorStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DescriptorStatus"
  },
  {
    "label": "SFileTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFileTableRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" ProfilerManager . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Input / SEditableTextBox . h \" class SMultiDumpBrowser : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMultiDumpBrowser)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS()"
  },
  {
    "label": "FFileDescriptor()",
    "kind": "Method",
    "detail": "Function (public : enum DescriptorStatus { EQueued = 0,ELoading,ELoaded,EAnalyzed } ;)",
    "insertText": "FFileDescriptor() :Status(EQueued)"
  },
  {
    "label": "GetDisplayNameString()",
    "kind": "Method",
    "detail": "Function (} FString FullPath ; FString DisplayName ; FString TimeString ; DescriptorStatus Status ; FText)",
    "insertText": "GetDisplayNameString()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; class SFileTableRow : public STableRow<TSharedPtr<FFileDescriptor>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SFileTableRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FFileDescriptor>, Desc) SLATE_END_ARGS()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& OwnerTable, const TSharedPtr<FFileDescriptor>& InFileDesc)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (STableRow<TSharedPtr<FFileDescriptor>)",
    "insertText": "Construct(STableRow<TSharedPtr<FFileDescriptor>>::FArguments(), OwnerTable)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (Desc = InFileDesc ; ChildSlot [)",
    "insertText": "SNew(SBox) [ SNew(STextBlock) .Text(this, &SFileTableRow::GetDisplayName)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GenerateFileRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateFileRow(TSharedPtr<FFileDescriptor> FileItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectionChanged(TSharedPtr<FFileDescriptor> SelectedItem, ESelectInfo::Type SelType)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "AddFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFile(FFileDescriptor *InFileDesc)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "FindTotalsForPrefilterRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTotalsForPrefilterRecursive(TSharedPtr<FEventGraphSample> Event, float &OutTotalTime)"
  },
  {
    "label": "FindTotalsForPrefilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTotalsForPrefilter(TSharedPtr<FFileDescriptor> Desc)"
  },
  {
    "label": "PrefilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefilterTextCommitted(const FText& InText, const ETextCommit::Type InTextAction)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  }
]