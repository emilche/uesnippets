[
  {
    "label": "BitrateEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitrateEstimator"
  },
  {
    "label": "BitrateEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_BITRATE_ESTIMATOR_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_BITRATE_ESTIMATOR_H_ # include<stdint . h> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / units / data_rate . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { class BitrateEstimator { public :)",
    "insertText": "BitrateEstimator(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "BitrateEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BitrateEstimator()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(Timestamp at_time, DataSize amount, bool in_alr)"
  },
  {
    "label": "bitrate()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataRate>)",
    "insertText": "bitrate()"
  },
  {
    "label": "PeekRate()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataRate>)",
    "insertText": "PeekRate()"
  },
  {
    "label": "ExpectFastRateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectFastRateChange()"
  },
  {
    "label": "UpdateWindow()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "UpdateWindow(int64_t now_ms, int bytes, int rate_window_ms, bool* is_small_sample)"
  }
]