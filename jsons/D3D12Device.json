[
  {
    "label": "FD3D12Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Device"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FD3D12Buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Buffer"
  },
  {
    "label": "FD3D12Queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Queue"
  },
  {
    "label": "FD3D12ExplicitDescriptorHeapCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ExplicitDescriptorHeapCache"
  },
  {
    "label": "FD3D12RayTracingPipelineCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingPipelineCache"
  },
  {
    "label": "FD3D12RayTracingCompactionRequestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingCompactionRequestHandler"
  },
  {
    "label": "FD3D12RayTracingPipelineInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12RayTracingPipelineInfo"
  },
  {
    "label": "FD3D12DiagnosticBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DiagnosticBuffer"
  },
  {
    "label": "FD3D12Timing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Timing"
  },
  {
    "label": "FResidencyManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResidencyManager"
  },
  {
    "label": "ToGPUAddress()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIBreadcrumbs . h \" # include \" RHIDiagnosticBuffer . h \" # include \" D3D12BindlessDescriptors . h \" # include \" D3D12CommandContext . h \" # include \" D3D12Descriptors . h \" # include \" D3D12Query . h \" # include \" D3D12Queue . h \" # include \" D3D12Resources . h \" # include \" D3D12Submission . h \" # include \" D3D12GPUProfiler . h \" class FD3D12Device ; class FD3D12DynamicRHI ; class FD3D12Buffer ; class FD3D12Queue ; class FD3D12ExplicitDescriptorHeapCache ; class FD3D12RayTracingPipelineCache ; class FD3D12RayTracingCompactionRequestHandler ; struct FD3D12RayTracingPipelineInfo ; class FD3D12DiagnosticBuffer : public FRHIDiagnosticBuffer { private : TRefCountPtr<FD3D12Heap> Heap ; TRefCountPtr<FD3D12Resource> Resource ; D3D12_GPU_VIRTUAL_ADDRESS GpuAddress = 0 ; D3D12_GPU_VIRTUAL_ADDRESS)",
    "insertText": "ToGPUAddress(void* Ptr)"
  },
  {
    "label": "FD3D12DiagnosticBuffer()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FD3D12DiagnosticBuffer(FD3D12Queue& Queue)"
  },
  {
    "label": "FD3D12DiagnosticBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12DiagnosticBuffer()"
  },
  {
    "label": "GetGPUQueueData()",
    "kind": "Method",
    "detail": "Function (D3D12_GPU_VIRTUAL_ADDRESS)",
    "insertText": "GetGPUQueueData()"
  },
  {
    "label": "GetGPUQueueMarkerIn()",
    "kind": "Method",
    "detail": "Function (} # if WITH_RHI_BREADCRUMBS D3D12_GPU_VIRTUAL_ADDRESS)",
    "insertText": "GetGPUQueueMarkerIn()"
  },
  {
    "label": "GetGPUQueueMarkerOut()",
    "kind": "Method",
    "detail": "Function (} D3D12_GPU_VIRTUAL_ADDRESS)",
    "insertText": "GetGPUQueueMarkerOut()"
  },
  {
    "label": "ReadMarkerIn()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ReadMarkerIn()"
  },
  {
    "label": "GetCurrentTimestamp()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12Timing { public : FD3D12Queue& Queue ; D3D12_QUERY_DATA_PIPELINE_STATISTICS PipelineStats { } ; # if RHI_NEW_GPU_PROFILER uint64 GPUFrequency = 0,GPUTimestamp = 0 ; uint64 CPUFrequency = 0,CPUTimestamp = 0 ; UE::RHI::GPUProfiler::FEventStream EventStream ; # else TArray<uint64> Timestamps ; int32 TimestampIndex = 0 ; uint64 BusyCycles = 0 ; uint64)",
    "insertText": "GetCurrentTimestamp()"
  },
  {
    "label": "IsStartingWork()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStartingWork()"
  },
  {
    "label": "AdvanceTimestamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceTimestamp()"
  },
  {
    "label": "FD3D12Timing()",
    "kind": "Method",
    "detail": "Function (TimestampIndex + + ; } # endif)",
    "insertText": "FD3D12Timing(FD3D12Queue& Queue) : Queue(Queue)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12Queue final { public : FD3D12Device* const Device ; ED3D12QueueType const QueueType ; TRefCountPtr<ID3D12CommandQueue> D3DCommandQueue ; FD3D12Fence Fence ; struct : public TQueue<FD3D12Payload*,EQueueMode::Mpsc> { FD3D12Payload*)",
    "insertText": "Peek()"
  },
  {
    "label": "ExecuteCommandLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommandLists(TArrayView<ID3D12CommandList*> D3DCommandLists #if ENABLE_RESIDENCY_MANAGEMENT , TArrayView<FD3D12ResidencySet*> ResidencySets #endif)"
  },
  {
    "label": "FD3D12Queue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12Queue(FD3D12Device* Device, ED3D12QueueType QueueType)"
  },
  {
    "label": "FD3D12Queue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12Queue()"
  },
  {
    "label": "GetProfilerQueue()",
    "kind": "Method",
    "detail": "Function (# if RHI_NEW_GPU_PROFILER UE::RHI::GPUProfiler::FQueue)",
    "insertText": "GetProfilerQueue()"
  },
  {
    "label": "FD3D12Device()",
    "kind": "Method",
    "detail": "Function (# endif private : FD3D12Fence ExecuteCommandListsFence ; } ; class FD3D12Device final : public FD3D12SingleNodeGPUObject,public FNoncopyable,public FD3D12AdapterChild { public :)",
    "insertText": "FD3D12Device(FRHIGPUMask InGPUMask, FD3D12Adapter* InAdapter)"
  },
  {
    "label": "FD3D12Device()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12Device()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ID3D12Device*)",
    "insertText": "GetDevice()"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (# if RHI_NEW_GPU_PROFILER void)",
    "insertText": "RegisterGPUWork(uint32 NumPrimitives = 0, uint32 NumVertices = 0)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterGPUDispatch(FIntVector GroupCount)"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (GPUProfilingData .)",
    "insertText": "RegisterGPUWork(NumPrimitives, NumVertices)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (GPUProfilingData .)",
    "insertText": "RegisterGPUDispatch(GroupCount)"
  },
  {
    "label": "GetGPUProfiler()",
    "kind": "Method",
    "detail": "Function (} FD3D12GPUProfiler&)",
    "insertText": "GetGPUProfiler()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0) FGPUTimingCalibrationTimestamp GetCalibrationTimestamp(ED3D12QueueType QueueType)"
  },
  {
    "label": "BlockUntilIdle()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BlockUntilIdle()"
  },
  {
    "label": "GetResourceAllocationInfoUncached()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_ALLOCATION_INFO)",
    "insertText": "GetResourceAllocationInfoUncached(const FD3D12ResourceDesc& InDesc)"
  },
  {
    "label": "GetResourceAllocationInfo()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_ALLOCATION_INFO)",
    "insertText": "GetResourceAllocationInfo(const FD3D12ResourceDesc& InDesc)"
  },
  {
    "label": "InitExplicitDescriptorHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitExplicitDescriptorHeap()"
  },
  {
    "label": "GetExplicitDescriptorHeapCache()",
    "kind": "Method",
    "detail": "Function (FD3D12ExplicitDescriptorHeapCache*)",
    "insertText": "GetExplicitDescriptorHeapCache()"
  },
  {
    "label": "CleanupRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupRayTracing()"
  },
  {
    "label": "GetDevice5()",
    "kind": "Method",
    "detail": "Function (ID3D12Device5*)",
    "insertText": "GetDevice5()"
  },
  {
    "label": "GetDevice7()",
    "kind": "Method",
    "detail": "Function (ID3D12Device7*)",
    "insertText": "GetDevice7()"
  },
  {
    "label": "GetRayTracingPipelineCache()",
    "kind": "Method",
    "detail": "Function (FD3D12RayTracingPipelineCache*)",
    "insertText": "GetRayTracingPipelineCache()"
  },
  {
    "label": "GetRaytracingAccelerationStructurePrebuildInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRaytracingAccelerationStructurePrebuildInfo(const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo)"
  },
  {
    "label": "GetRayTracingPipelineInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRayTracingPipelineInfo(ID3D12StateObject* Pipeline, FD3D12RayTracingPipelineInfo* OutInfo)"
  },
  {
    "label": "GetGlobalSamplerHeap()",
    "kind": "Method",
    "detail": "Function (# endif FD3D12GlobalOnlineSamplerHeap&)",
    "insertText": "GetGlobalSamplerHeap()"
  },
  {
    "label": "GetDefaultViews()",
    "kind": "Method",
    "detail": "Function (} const FD3D12DefaultViews&)",
    "insertText": "GetDefaultViews()"
  },
  {
    "label": "CreateSamplerInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSamplerInternal(const D3D12_SAMPLER_DESC& Desc, D3D12_CPU_DESCRIPTOR_HANDLE Descriptor)"
  },
  {
    "label": "ObtainCommandAllocator()",
    "kind": "Method",
    "detail": "Function (FD3D12CommandAllocator*)",
    "insertText": "ObtainCommandAllocator(ED3D12QueueType QueueType)"
  },
  {
    "label": "ReleaseCommandAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCommandAllocator(FD3D12CommandAllocator* Allocator)"
  },
  {
    "label": "GetDefaultCommandContext()",
    "kind": "Method",
    "detail": "Function (FD3D12CommandContext&)",
    "insertText": "GetDefaultCommandContext()"
  },
  {
    "label": "ObtainContextCopy()",
    "kind": "Method",
    "detail": "Function (FD3D12ContextCopy*)",
    "insertText": "ObtainContextCopy()"
  },
  {
    "label": "ObtainContextCompute()",
    "kind": "Method",
    "detail": "Function (} FD3D12CommandContext*)",
    "insertText": "ObtainContextCompute()"
  },
  {
    "label": "ObtainContextGraphics()",
    "kind": "Method",
    "detail": "Function (} FD3D12CommandContext*)",
    "insertText": "ObtainContextGraphics()"
  },
  {
    "label": "ReleaseContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseContext(FD3D12ContextCommon* Context)"
  },
  {
    "label": "ObtainQueryHeap()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FD3D12QueryHeap>)",
    "insertText": "ObtainQueryHeap(ED3D12QueueType QueueType, D3D12_QUERY_TYPE QueryType)"
  },
  {
    "label": "ReleaseQueryHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseQueryHeap(FD3D12QueryHeap* QueryHeap)"
  },
  {
    "label": "ObtainCommandList()",
    "kind": "Method",
    "detail": "Function (FD3D12CommandList*)",
    "insertText": "ObtainCommandList(FD3D12CommandAllocator* CommandAllocator, FD3D12QueryAllocator* TimestampAllocator, FD3D12QueryAllocator* PipelineStatsAllocator)"
  },
  {
    "label": "ReleaseCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCommandList(FD3D12CommandList* CommandList)"
  },
  {
    "label": "GetQueue()",
    "kind": "Method",
    "detail": "Function (FD3D12Queue&)",
    "insertText": "GetQueue(ED3D12QueueType QueueType)"
  },
  {
    "label": "GetQueues()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FD3D12Queue>)",
    "insertText": "GetQueues()"
  },
  {
    "label": "CleanupResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupResources()"
  },
  {
    "label": "CreateCommandList()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateCommandList(UINT nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, REFIID riid, void** ppCommandList)"
  },
  {
    "label": "CreateDefaultViews()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<ID3D12CommandQueue> TileMappingQueue ; FD3D12Fence TileMappingFence ; private : void)",
    "insertText": "CreateDefaultViews()"
  },
  {
    "label": "UpdateMSAASettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMSAASettings()"
  },
  {
    "label": "UpdateConstantBufferPageProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConstantBufferPageProperties()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0)"
  },
  {
    "label": "FResidencyManager()",
    "kind": "Method",
    "detail": "Function (# endif struct FResidencyManager : public FD3D12ResidencyManager {)",
    "insertText": "FResidencyManager(FD3D12Device& Parent)"
  },
  {
    "label": "FResidencyManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FResidencyManager()"
  },
  {
    "label": "TInlineAllocator()",
    "kind": "Method",
    "detail": "Function (} ResidencyManager ; FD3D12DescriptorHeapManager DescriptorHeapManager ; # if PLATFORM_SUPPORTS_BINDLESS_RENDERING FD3D12BindlessDescriptorAllocator& BindlessDescriptorAllocator ; FD3D12BindlessDescriptorManager BindlessDescriptorManager ; # endif TArray<FD3D12OfflineDescriptorManager,)",
    "insertText": "TInlineAllocator(uint32)"
  },
  {
    "label": "DestroyExplicitDescriptorCache()",
    "kind": "Method",
    "detail": "Function (TMap<D3D12_SAMPLER_DESC,TRefCountPtr<FD3D12SamplerState>> SamplerMap ; uint32 SamplerID = 0 ; FRWLock ResourceAllocationInfoMapMutex ; TMap<uint64,D3D12_RESOURCE_ALLOCATION_INFO> ResourceAllocationInfoMap ; uint32 AvailableMSAAQualities [ DX_MAX_MSAA_COUNT + 1 ] ; D3D12_HEAP_PROPERTIES ConstantBufferPageProperties ; FD3D12DefaultBufferAllocator DefaultBufferAllocator ; FD3D12FastAllocator DefaultFastAllocator ; FD3D12TextureAllocatorPool TextureAllocator ; # if D3D12_RHI_RAYTRACING FD3D12RayTracingPipelineCache* RayTracingPipelineCache = nullptr ; FD3D12RayTracingCompactionRequestHandler* RayTracingCompactionRequestHandler = nullptr ; FD3D12Buffer* RayTracingDispatchRaysDescBuffer = nullptr ; # endif FD3D12ExplicitDescriptorHeapCache* ExplicitDescriptorHeapCache = nullptr ; void)",
    "insertText": "DestroyExplicitDescriptorCache()"
  }
]