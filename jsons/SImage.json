[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / SLeafWidget . h \" # include \" Styling / SlateTypes . h \" class FPaintArgs ; class FSlateWindowElementList ; class SImage : public SLeafWidget {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SImage, SLeafWidget, SLATECORE_API) public: SLATE_BEGIN_ARGS( SImage ) : _Image( FCoreStyle::Get().GetDefaultBrush() ) , _ColorAndOpacity( FLinearColor::White ) , _FlipForRightToLeftFlowDirection( false)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(const FSlateBrush*, Image) SLATE_ATTRIBUTE(FSlateColor, ColorAndOpacity) SLATE_ATTRIBUTE(TOptional<FVector2D>, DesiredSizeOverride) SLATE_ARGUMENT( bool, FlipForRightToLeftFlowDirection ) SLATE_EVENT(FPointerEventHandler, OnMouseButtonDown) SLATE_END_ARGS() SLATECORE_API SImage()"
  },
  {
    "label": "SImage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SImage()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetColorAndOpacity(TAttribute<FSlateColor> InColorAndOpacity)"
  },
  {
    "label": "SetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorAndOpacity(FLinearColor InColorAndOpacity)"
  },
  {
    "label": "SetImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImage(TAttribute<const FSlateBrush*> InImage)"
  },
  {
    "label": "InvalidateImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateImage()"
  },
  {
    "label": "SetDesiredSizeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredSizeOverride(TAttribute<TOptional<FVector2D>> InDesiredSizeOverride)"
  },
  {
    "label": "FlipForRightToLeftFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipForRightToLeftFlowDirection(bool InbFlipForRightToLeftFlowDirection)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (# endif protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetImageAttribute()",
    "kind": "Method",
    "detail": "Function (TSlateAttributeRef<const FSlateBrush*>)",
    "insertText": "GetImageAttribute()"
  },
  {
    "label": "GetColorAndOpacityAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<FSlateColor>)",
    "insertText": "GetColorAndOpacityAttribute()"
  },
  {
    "label": "GetDesiredSizeOverrideAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<TOptional<FVector2D>>)",
    "insertText": "GetDesiredSizeOverrideAttribute()"
  }
]