[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FDebugRenderSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugRenderSceneProxy"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FDebugDrawDelegateHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugDrawDelegateHelper"
  },
  {
    "label": "FGameplayDebuggerCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCategory"
  },
  {
    "label": "FGameplayDebuggerAddonManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerAddonManager"
  },
  {
    "label": "AGameplayDebuggerCategoryReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameplayDebuggerCategoryReplicator"
  },
  {
    "label": "FGameplayDebuggerNetPack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerNetPack"
  },
  {
    "label": "FGameplayDebuggerCategory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameplayDebuggerTypes . h \" # include \" GameplayDebuggerAddonBase . h \" class AActor ; class APlayerController ; class FDebugRenderSceneProxy ; class UPrimitiveComponent ; struct FDebugDrawDelegateHelper ; class FGameplayDebuggerCategory : public FGameplayDebuggerAddonBase { public :)",
    "insertText": "FGameplayDebuggerCategory()"
  },
  {
    "label": "CollectData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectData(APlayerController* OwnerPC, AActor* DebugActor)"
  },
  {
    "label": "DrawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawData(APlayerController* OwnerPC, FGameplayDebuggerCanvasContext& CanvasContext)"
  },
  {
    "label": "CreateDebugSceneProxy()",
    "kind": "Method",
    "detail": "Function (FDebugRenderSceneProxy*)",
    "insertText": "CreateDebugSceneProxy(const UPrimitiveComponent* InComponent, FDebugDrawDelegateHelper*& OutDelegateHelper)"
  },
  {
    "label": "OnDataPackReplicated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataPackReplicated(int32 DataPackId)"
  },
  {
    "label": "AddTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTextLine(const FString& TextLine)"
  },
  {
    "label": "AddShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShape(const FGameplayDebuggerShape& Shape)"
  },
  {
    "label": "DrawCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCategory(APlayerController* OwnerPC, FGameplayDebuggerCanvasContext& CanvasContext)"
  },
  {
    "label": "ShouldDrawCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawCategory(bool bHasDebugActor)"
  },
  {
    "label": "ShouldDrawReplicationStatus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldDrawReplicationStatus()"
  },
  {
    "label": "GetDataPackProgress()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDataPackProgress(int32 DataPackId)"
  },
  {
    "label": "IsDataPackReplicating()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDataPackReplicating(int32 DataPackId)"
  },
  {
    "label": "GetDataPackHeaderCopy()",
    "kind": "Method",
    "detail": "Function (} FGameplayDebuggerDataPack::FHeader)",
    "insertText": "GetDataPackHeaderCopy(int32 DataPackId)"
  },
  {
    "label": "GetReplicatedLinesCopy()",
    "kind": "Method",
    "detail": "Function (} TArray<FString>)",
    "insertText": "GetReplicatedLinesCopy()"
  },
  {
    "label": "IsLocationInViewCone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocationInViewCone(const FVector& ViewLocation, const FVector& ViewDirection, const FVector& TargetLocation)"
  },
  {
    "label": "MarkDataPackDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDataPackDirty(int32 DataPackId)"
  },
  {
    "label": "MarkRenderStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRenderStateDirty()"
  },
  {
    "label": "GetSceneProxyViewFlag()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSceneProxyViewFlag()"
  },
  {
    "label": "SetDataPackReplication()",
    "kind": "Method",
    "detail": "Function (template<T> int32)",
    "insertText": "SetDataPackReplication(T* DataPackAddr, EGameplayDebuggerDataPack Flags = EGameplayDebuggerDataPack::ResetOnTick)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerDataPack NewDataPack ; NewDataPack . PackId = ReplicatedDataPacks .)",
    "insertText": "Num()"
  },
  {
    "label": "BindRaw()",
    "kind": "Method",
    "detail": "Function (NewDataPack . Flags = Flags ; NewDataPack . SerializeDelegate .)",
    "insertText": "BindRaw(DataPackAddr, &T::Serialize)"
  },
  {
    "label": "BindLambda()",
    "kind": "Method",
    "detail": "Function (NewDataPack . ResetDelegate .)",
    "insertText": "BindLambda([=] { *DataPackAddr = T(); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReplicatedDataPacks .)",
    "insertText": "Add(NewDataPack)"
  },
  {
    "label": "ResetReplicatedData()",
    "kind": "Method",
    "detail": "Function (LastCollectDataTime = - MAX_dbl ; } void)",
    "insertText": "ResetReplicatedData()"
  }
]