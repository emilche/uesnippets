[
  {
    "label": "FExternalForcesBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalForcesBase"
  },
  {
    "label": "FExternalForces",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalForces"
  },
  {
    "label": "FExternalForcesBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDFlatWeightMap . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsEvolutionLinearSystem . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / CollectionPropertyFacade . h \" namespace Chaos::Softs { class FExternalForcesBase { public :)",
    "insertText": "FExternalForcesBase(const FSolverParticlesRange& Particles, const FSolverVec3& InGravity, const FSolverVec2& InGravityScale, const TConstArrayView<FRealSingle>& InGravityScaleMultipliers, const TArray<FSolverVec3>& InNormals) : Gravity(InGravity) , bApplyGravityScale(true) , GravityScale(InGravityScale, InGravityScaleMultipliers, Particles.GetRangeSize()) , FictitiousAngularVelocity(0.f) , ReferenceSpaceLocation(0.f) , bUsePointBasedWindModel(false) , PointBasedWind(0.f) , LegacyWindAdaptation(0.f) , Normals(InNormals)"
  },
  {
    "label": "FExternalForcesBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FExternalForcesBase()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticlesRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(FExternalForcesBase_Apply)"
  },
  {
    "label": "GetAcceleration()",
    "kind": "Method",
    "detail": "Function (FSolverVec3* const Acceleration = Particles .)",
    "insertText": "GetAcceleration().GetData()"
  },
  {
    "label": "GetInvM()",
    "kind": "Method",
    "detail": "Function (const FSolverReal* const InvM = Particles .)",
    "insertText": "GetInvM().GetData()"
  },
  {
    "label": "XArray()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3* const X = Particles .)",
    "insertText": "XArray().GetData()"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3* const V = Particles .)",
    "insertText": "GetV().GetData()"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3* const N = Particles .)",
    "insertText": "GetConstArrayView(Normals).GetData()"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (const bool bHasFictitiousForces = ! FictitiousAngularVelocity .)",
    "insertText": "IsNearlyZero()"
  },
  {
    "label": "HasPerParticleGravity()",
    "kind": "Method",
    "detail": "Function (const bool bHasPerParticleGravity =)",
    "insertText": "HasPerParticleGravity()"
  },
  {
    "label": "bApplyGravityScale()",
    "kind": "Method",
    "detail": "Function (const FSolverReal GravityScaleConstant =)",
    "insertText": "bApplyGravityScale(FSolverReal)GravityScale : (FSolverReal)"
  },
  {
    "label": "GetOffsetRange()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2& GravityScaleOffsetRange = GravityScale .)",
    "insertText": "GetOffsetRange()"
  },
  {
    "label": "GetMapValues()",
    "kind": "Method",
    "detail": "Function (const FSolverReal* const GravityScaleMultipliers = GravityScale .)",
    "insertText": "GetMapValues().GetData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSolverReal PerParticleGravityScale = bHasPerParticleGravity ? GravityScaleOffsetRange [ 0 ] + GravityScaleOffsetRange [ 1 ]* GravityScaleMultipliers [ Index ] : GravityScaleConstant ; Acceleration [ Index ] = PerParticleGravityScale* Gravity ;)",
    "insertText": "if(bHasFictitiousForces)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Acceleration [ Index ] - =)",
    "insertText": "CrossProduct(FictitiousAngularVelocity, FSolverVec3::CrossProduct(FictitiousAngularVelocity, X[Index] - ReferenceSpaceLocation))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bUsePointBasedWindModel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 VelocityDelta = PointBasedWind - V [ Index ] ; FSolverVec3 Direction = VelocityDelta ;)",
    "insertText": "if(Direction.Normalize())"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverReal DirectionDot =)",
    "insertText": "DotProduct(Direction, N[Index])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FSolverReal ScaleFactor =)",
    "insertText": "Min(1.f, FMath::Abs(DirectionDot) * LegacyWindAdaptation)"
  },
  {
    "label": "UpdateLinearSystem()",
    "kind": "Method",
    "detail": "Function (Acceleration [ Index ] + = VelocityDelta* ScaleFactor ; } } } } } void)",
    "insertText": "UpdateLinearSystem(const FSolverParticlesRange& Particles, const FSolverReal Dt, FEvolutionLinearSystem& LinearSystem)"
  },
  {
    "label": "GetM()",
    "kind": "Method",
    "detail": "Function (const FSolverReal* const M = Particles .)",
    "insertText": "GetM().GetData()"
  },
  {
    "label": "UsePointBasedWindModel()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "UsePointBasedWindModel()"
  },
  {
    "label": "GetScaledGravity()",
    "kind": "Method",
    "detail": "Function (} FSolverVec3)",
    "insertText": "GetScaledGravity(int32 ParticleIndex)"
  },
  {
    "label": "bApplyGravityScale()",
    "kind": "Method",
    "detail": "Function (const FSolverReal ParticleGravityScale =)",
    "insertText": "bApplyGravityScale(GravityScale.HasWeightMap() ? GravityScale[ParticleIndex] : GravityScale.GetLow()) : (FSolverReal)"
  },
  {
    "label": "DefaultGravityZOverride()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultGravityZOverride(FSolverReal)"
  },
  {
    "label": "DefaultFictitiousAngularScale()",
    "kind": "Method",
    "detail": "Function (bool bDefaultUseGravityOverride = false ; FSolverReal)",
    "insertText": "DefaultFictitiousAngularScale(FSolverReal)"
  },
  {
    "label": "FExternalForces()",
    "kind": "Method",
    "detail": "Function (bool bDefaultUsePointBasedWindModel = false ;)",
    "insertText": "FExternalForces(const FSolverParticlesRange& Particles, const TArray<FSolverVec3>& InNormals, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection) : Base(Particles, FSolverVec3((FSolverReal)0.f, (FSolverReal)0.f, DefaultGravityZOverride), FSolverVec2(GetWeightedFloatGravityScale(PropertyCollection, DefaultGravityScale)), WeightMaps.FindRef(GetGravityScaleString(PropertyCollection, GravityScaleName.ToString())), InNormals ) , ParticleCount(Particles.GetRangeSize()) , WorldGravityMultiplier((FSolverReal)1.f) , SolverGravity((FSolverReal)0.f, (FSolverReal)0.f, DefaultGravityZOverride) , bPerSoftBodyGravityOverrideEnabled(true) , FictitiousAngularVelocityNoScale(0.f) , UseGravityOverrideIndex(PropertyCollection) , GravityOverrideIndex(PropertyCollection) , GravityScaleIndex(PropertyCollection) , FictitiousAngularScaleIndex(PropertyCollection) , UsePointBasedWindModelIndex(PropertyCollection)"
  },
  {
    "label": "SetWorldGravityMultiplier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorldGravityMultiplier(FSolverReal InWorldGravityMultiplier)"
  },
  {
    "label": "SetSolverGravityProperties()",
    "kind": "Method",
    "detail": "Function (WorldGravityMultiplier = InWorldGravityMultiplier ; } void)",
    "insertText": "SetSolverGravityProperties(const FSolverVec3& InSolverGravity, bool bInPerSoftBodyGravityOverrideEnabled)"
  },
  {
    "label": "SetFictitiousForcesData()",
    "kind": "Method",
    "detail": "Function (SolverGravity = InSolverGravity ; bPerSoftBodyGravityOverrideEnabled = bInPerSoftBodyGravityOverrideEnabled ; } void)",
    "insertText": "SetFictitiousForcesData(const FSolverVec3& InFictitiousAngularVelocityNoScale, const FSolverVec3& InReferenceSpaceLocation)"
  },
  {
    "label": "SetSolverWind()",
    "kind": "Method",
    "detail": "Function (FictitiousAngularVelocityNoScale = InFictitiousAngularVelocityNoScale ; ReferenceSpaceLocation = InReferenceSpaceLocation ; } void)",
    "insertText": "SetSolverWind(const FSolverVec3& SolverWind, const FSolverReal InLegacyWindAdaptation)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (PointBasedWind = SolverWind ; LegacyWindAdaptation = InLegacyWindAdaptation ; } void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "GetUseGravityOverride()",
    "kind": "Method",
    "detail": "Function (const bool bUseGravityOverride = UseGravityOverrideIndex ! = INDEX_NONE ?)",
    "insertText": "GetUseGravityOverride(PropertyCollection)"
  },
  {
    "label": "FSolverVec3()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 GravityOverride = GravityOverrideIndex ! = INDEX_NONE ?)",
    "insertText": "FSolverVec3(GetGravityOverride(PropertyCollection)) : FSolverVec3(0.f, 0.f, DefaultGravityZOverride)"
  },
  {
    "label": "CalculateGravity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateGravity(bUseGravityOverride, GravityOverride)"
  },
  {
    "label": "WeightedValue()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2)",
    "insertText": "WeightedValue(GetWeightedFloatGravityScale(PropertyCollection))"
  },
  {
    "label": "GetGravityScaleString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetGravityScaleString(PropertyCollection)"
  },
  {
    "label": "FPBDFlatWeightMap()",
    "kind": "Method",
    "detail": "Function (GravityScale =)",
    "insertText": "FPBDFlatWeightMap(WeightedValue, WeightMaps.FindRef(WeightMapName), ParticleCount)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (} else { GravityScale .)",
    "insertText": "SetWeightedValue(WeightedValue)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} } const FSolverReal FictitiousAngularScale =)",
    "insertText": "Min((FSolverReal)2., FictitiousAngularScaleIndex != INDEX_NONE ? GetFictitiousAngularScale(PropertyCollection) : DefaultFictitiousAngularScale)"
  },
  {
    "label": "GetUsePointBasedWindModel()",
    "kind": "Method",
    "detail": "Function (FictitiousAngularVelocity = FictitiousAngularVelocityNoScale* FictitiousAngularScale ; bUsePointBasedWindModel = UsePointBasedWindModelIndex ! = INDEX_NONE ?)",
    "insertText": "GetUsePointBasedWindModel(PropertyCollection)"
  },
  {
    "label": "CalculateGravity()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "CalculateGravity(bool bUseGravityOverride, const FSolverVec3& GravityOverride)"
  },
  {
    "label": "bApplyGravityScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bApplyGravityScale(bPerSoftBodyGravityOverrideEnabled && bUseGravityOverride)"
  },
  {
    "label": "Gravity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Gravity(bApplyGravityScale ? SolverGravity : GravityOverride)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (} const int32 ParticleCount ; FSolverReal WorldGravityMultiplier ; FSolverVec3 SolverGravity ; bool bPerSoftBodyGravityOverrideEnabled ; FSolverVec3 FictitiousAngularVelocityNoScale ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(UseGravityOverride, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(GravityOverride, FVector3f)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(GravityScale, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(FictitiousAngularScale, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(UsePointBasedWindModel, bool)"
  }
]