[
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FKeyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandle"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "FMovieSceneStringChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneStringChannel"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "TMovieSceneChannelTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannel . h \" # include \" Channels / MovieSceneChannelData . h \" # include \" Channels / MovieSceneChannelEditorData . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Range . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Optional . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneStringChannel . generated . h \" struct FFrameRate ; struct FKeyHandle ; struct FPropertyTag ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneStringChannel() : DefaultValue(), bHasDefaultValue(false)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} TMovieSceneChannelData<const FString>)",
    "insertText": "GetData()"
  },
  {
    "label": "GetTimes()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FFrameNumber>)",
    "insertText": "GetTimes()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} const FString*)",
    "insertText": "Evaluate(FFrameTime InTime)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Times .)",
    "insertText": "Append(InTimes)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Append(InValues)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "GetKeys(const TRange<FFrameNumber>& WithinRange, TArray<FFrameNumber>* OutKeyTimes, TArray<FKeyHandle>* OutKeyHandles)"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<FFrameNumber> OutKeyTimes)"
  },
  {
    "label": "SetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<const FFrameNumber> InKeyTimes)"
  },
  {
    "label": "DuplicateKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateKeys(TArrayView<const FKeyHandle> InHandles, TArrayView<FKeyHandle> OutNewHandles)"
  },
  {
    "label": "DeleteKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKeys(TArrayView<const FKeyHandle> InHandles)"
  },
  {
    "label": "DeleteKeysFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKeysFrom(FFrameNumber InTime, bool bDeleteKeysBefore)"
  },
  {
    "label": "ChangeFrameResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFrameResolution(FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "ComputeEffectiveRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "ComputeEffectiveRange()"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(FFrameNumber DeltaPosition)"
  },
  {
    "label": "Optimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Optimize(const FKeyDataOptimizationParams& InParameters)"
  },
  {
    "label": "ClearDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDefault()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "GetHandle(int32 Index)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndex(FKeyHandle Handle)"
  },
  {
    "label": "SetDefault()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetDefault(FString InDefaultValue)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (bHasDefaultValue = true ; DefaultValue = InDefaultValue ; } TOptional<FString>)",
    "insertText": "GetDefault()"
  },
  {
    "label": "RemoveDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveDefault()"
  },
  {
    "label": "EvaluateChannel()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FMovieSceneStringChannel> : public TStructOpsTypeTraitsBase2<FMovieSceneStringChannel> { enum { WithStructuredSerializeFromMismatchedTag = true } ; } ; template<> struct TMovieSceneChannelTraits<FMovieSceneStringChannel> : TMovieSceneChannelTraitsBase<FMovieSceneStringChannel> { # if WITH_EDITOR typedef TMovieSceneExternalValue<FString> ExtendedEditorDataType ; # endif } ; bool)",
    "insertText": "EvaluateChannel(const FMovieSceneStringChannel* InChannel, FFrameTime InTime, FString& OutValue)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (OutValue =* Result ; return true ; } return false ; } bool)",
    "insertText": "ValueExistsAtTime(const FMovieSceneStringChannel* Channel, FFrameNumber InFrameNumber, const FString& Value)"
  },
  {
    "label": "FrameTime()",
    "kind": "Method",
    "detail": "Function (const FFrameTime)",
    "insertText": "FrameTime(InFrameNumber)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (const FString* ExistingValue = Channel ->)",
    "insertText": "Evaluate(FrameTime)"
  }
]