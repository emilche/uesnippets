[
  {
    "label": "IntervalPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalPartition"
  },
  {
    "label": "IntervalPartition()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_INTERVALPARTITION_H # define LLVM_ANALYSIS_INTERVALPARTITION_H # include \" llvm / Analysis / Interval . h \" # include \" llvm / Pass . h \" # include<map> namespace llvm { class IntervalPartition : public FunctionPass { typedef std::map<BasicBlock*,Interval*> IntervalMapTy ; IntervalMapTy IntervalMap ; typedef std::vector<Interval*> IntervalListTy ; Interval* RootInterval ; std::vector<Interval*> Intervals ; public : char ID ;)",
    "insertText": "IntervalPartition() : FunctionPass(ID), RootInterval(nullptr)"
  },
  {
    "label": "initializeIntervalPartitionPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeIntervalPartitionPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "IntervalPartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntervalPartition(IntervalPartition &I, bool)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &O, const Module* = nullptr)"
  },
  {
    "label": "getRootInterval()",
    "kind": "Method",
    "detail": "Function (Interval*)",
    "insertText": "getRootInterval()"
  },
  {
    "label": "getBlockInterval()",
    "kind": "Method",
    "detail": "Function (} Interval*)",
    "insertText": "getBlockInterval(BasicBlock *BB)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IntervalMapTy::iterator I = IntervalMap .)",
    "insertText": "find(BB)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (AU .)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "getIntervals()",
    "kind": "Method",
    "detail": "Function (} const std::vector<Interval*>&)",
    "insertText": "getIntervals()"
  },
  {
    "label": "addIntervalToPartition()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "addIntervalToPartition(Interval *I)"
  },
  {
    "label": "updatePredecessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updatePredecessors(Interval *Int)"
  }
]