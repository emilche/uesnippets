[
  {
    "label": "RootWindowViews",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootWindowViews"
  },
  {
    "label": "RootWindowViews()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_ROOT_WINDOW_VIEWS_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_ROOT_WINDOW_VIEWS_H_ # pragma once # include<string> # include \" include / base / cef_scoped_ptr . h \" # include \" tests / cefclient / browser / client_handler . h \" # include \" tests / cefclient / browser / root_window . h \" # include \" tests / cefclient / browser / views_window . h \" namespace client { class RootWindowViews : public RootWindow,public ClientHandler::Delegate,public ViewsWindow::Delegate { public :)",
    "insertText": "RootWindowViews()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(RootWindow::Delegate* delegate, const RootWindowConfig& config, const CefBrowserSettings& settings)"
  },
  {
    "label": "InitAsPopup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsPopup(RootWindow::Delegate* delegate, bool with_controls, bool with_osr, const CefPopupFeatures& popupFeatures, CefWindowInfo& windowInfo, CefRefPtr<CefClient>& client, CefBrowserSettings& settings)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(ShowMode mode)"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBounds(int x, int y, size_t width, size_t height)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(bool force)"
  },
  {
    "label": "SetDeviceScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceScaleFactor(float device_scale_factor)"
  },
  {
    "label": "GetDeviceScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDeviceScaleFactor()"
  },
  {
    "label": "GetBrowser()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "GetBrowser()"
  },
  {
    "label": "GetWindowHandle()",
    "kind": "Method",
    "detail": "Function (ClientWindowHandle)",
    "insertText": "GetWindowHandle()"
  },
  {
    "label": "WithWindowlessRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WithWindowlessRendering()"
  },
  {
    "label": "OnExtensionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtensionsChanged(const ExtensionSet& extensions)"
  },
  {
    "label": "WithControls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WithControls()"
  },
  {
    "label": "WithExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WithExtension()"
  },
  {
    "label": "InitiallyHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitiallyHidden()"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "GetWindowBounds()",
    "kind": "Method",
    "detail": "Function (CefRect)",
    "insertText": "GetWindowBounds()"
  },
  {
    "label": "GetImageCache()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<ImageCache>)",
    "insertText": "GetImageCache()"
  },
  {
    "label": "OnViewsWindowCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewsWindowCreated(CefRefPtr<ViewsWindow> window)"
  },
  {
    "label": "OnViewsWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewsWindowDestroyed(CefRefPtr<ViewsWindow> window)"
  },
  {
    "label": "OnViewsWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewsWindowActivated(CefRefPtr<ViewsWindow> window)"
  },
  {
    "label": "GetDelegateForPopup()",
    "kind": "Method",
    "detail": "Function (ViewsWindow::Delegate*)",
    "insertText": "GetDelegateForPopup(CefRefPtr<CefClient> client)"
  },
  {
    "label": "CreateExtensionWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExtensionWindow(CefRefPtr<CefExtension> extension, const CefRect& source_bounds, CefRefPtr<CefWindow> parent_window, const base::Closure& close_callback)"
  },
  {
    "label": "OnTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTest(int test_id)"
  },
  {
    "label": "OnExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExit()"
  },
  {
    "label": "OnBrowserCreated()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnBrowserCreated(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBrowserClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserClosing(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBrowserClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserClosed(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnSetAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetAddress(const std::string& url)"
  },
  {
    "label": "OnSetTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetTitle(const std::string& title)"
  },
  {
    "label": "OnSetFavicon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetFavicon(CefRefPtr<CefImage> image)"
  },
  {
    "label": "OnSetFullscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetFullscreen(bool fullscreen)"
  },
  {
    "label": "OnAutoResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAutoResize(const CefSize& new_size)"
  },
  {
    "label": "OnSetLoadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetLoadingState(bool isLoading, bool canGoBack, bool canGoForward)"
  },
  {
    "label": "OnSetDraggableRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetDraggableRegions(const std::vector<CefDraggableRegion>& regions)"
  },
  {
    "label": "OnTakeFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTakeFocus(bool next)"
  },
  {
    "label": "OnBeforeContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeContextMenu(CefRefPtr<CefMenuModel> model)"
  },
  {
    "label": "CreateClientHandler()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateClientHandler(const std::string& url)"
  },
  {
    "label": "InitOnUIThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOnUIThread(const CefBrowserSettings& settings, const std::string& startup_url, CefRefPtr<CefRequestContext> request_context)"
  },
  {
    "label": "CreateViewsWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViewsWindow(const CefBrowserSettings& settings, const std::string& startup_url, CefRefPtr<CefRequestContext> request_context, const ImageCache::ImageSet& images)"
  },
  {
    "label": "NotifyViewsWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyViewsWindowDestroyed()"
  },
  {
    "label": "NotifyViewsWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyViewsWindowActivated()"
  },
  {
    "label": "NotifyDestroyedIfDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDestroyedIfDone()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (bool with_controls_ ; bool always_on_top_ ; bool with_extension_ ; bool initially_hidden_ ; CefRefPtr<CefWindow> parent_window_ ; bool is_popup_ ; CefRect initial_bounds_ ; base::Closure close_callback_ ; bool position_on_resize_ ; CefRefPtr<ClientHandler> client_handler_ ; bool initialized_ ; bool window_destroyed_ ; bool browser_destroyed_ ; CefRefPtr<CefBrowser> browser_ ; CefRefPtr<ViewsWindow> window_ ; ExtensionSet pending_extensions_ ; scoped_refptr<ImageCache> image_cache_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(RootWindowViews)"
  }
]