[
  {
    "label": "FVulkanPendingComputeState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPendingComputeState"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanPendingGfxState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPendingGfxState"
  },
  {
    "label": "FVertexStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexStream"
  },
  {
    "label": "FVulkanPendingComputeState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanConfiguration . h \" # include \" VulkanState . h \" # include \" VulkanResources . h \" # include \" VulkanUtil . h \" # include \" VulkanViewport . h \" # include \" VulkanDynamicRHI . h \" # include \" VulkanPipeline . h \" # include \" VulkanPipelineState . h \" class FVulkanPendingComputeState : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanPendingComputeState(FVulkanDevice* InDevice, FVulkanCommandListContext& InContext) : VulkanRHI::FDeviceChild(InDevice) , Context(InContext)"
  },
  {
    "label": "FVulkanPendingComputeState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanPendingComputeState()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetComputePipeline()",
    "kind": "Method",
    "detail": "Function (CurrentPipeline = nullptr ; CurrentState = nullptr ; } void)",
    "insertText": "SetComputePipeline(FVulkanComputePipeline* InComputePipeline)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (CurrentPipeline = InComputePipeline ; FVulkanComputePipelineDescriptorState** Found = PipelineStates .)",
    "insertText": "Find(InComputePipeline)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (CurrentState =* Found ;)",
    "insertText": "check(CurrentState->ComputePipeline == InComputePipeline)"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState()",
    "kind": "Method",
    "detail": "Function (} else { CurrentState = new)",
    "insertText": "FVulkanComputePipelineDescriptorState(Device, InComputePipeline)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PipelineStates .)",
    "insertText": "Add(CurrentPipeline, CurrentState)"
  },
  {
    "label": "PrepareForDispatch()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PrepareForDispatch(FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "GetCurrentShader()",
    "kind": "Method",
    "detail": "Function (const FVulkanComputeShader*)",
    "insertText": "GetCurrentShader()"
  },
  {
    "label": "SetUAVForUBResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUAVForUBResource(uint32 DescriptorSet, uint32 BindingIndex, FVulkanUnorderedAccessView* UAV)"
  },
  {
    "label": "SetUAVForStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAVForStage(uint32 UAVIndex, FVulkanUnorderedAccessView* UAV)"
  },
  {
    "label": "SetUAVForUBResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAVForUBResource(ShaderStage::Compute, UAVIndex, UAV)"
  },
  {
    "label": "SetTextureForStage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextureForStage(uint32 TextureIndex, const FVulkanTexture* Texture, VkImageLayout Layout)"
  },
  {
    "label": "SetTexture()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetTexture(ShaderStage::Compute, TextureIndex, Texture, Layout)"
  },
  {
    "label": "SetSamplerStateForStage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSamplerStateForStage(uint32 SamplerIndex, FVulkanSamplerState* Sampler)"
  },
  {
    "label": "SetSamplerState()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetSamplerState(ShaderStage::Compute, SamplerIndex, Sampler)"
  },
  {
    "label": "SetTextureForUBResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextureForUBResource(int32 DescriptorSet, uint32 BindingIndex, const FVulkanTexture* Texture, VkImageLayout Layout)"
  },
  {
    "label": "SetTexture()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetTexture(DescriptorSet, BindingIndex, Texture, Layout)"
  },
  {
    "label": "SetSRVForUBResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSRVForUBResource(uint32 DescriptorSet, uint32 BindingIndex, FVulkanShaderResourceView* SRV)"
  },
  {
    "label": "SetSRVForStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVForStage(uint32 SRVIndex, FVulkanShaderResourceView* SRV)"
  },
  {
    "label": "SetSRVForUBResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVForUBResource(ShaderStage::Compute, SRVIndex, SRV)"
  },
  {
    "label": "SetPackedGlobalShaderParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPackedGlobalShaderParameter(uint32 BufferIndex, uint32 Offset, uint32 NumBytes, const void* NewValue)"
  },
  {
    "label": "SetPackedGlobalShaderParameter()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetPackedGlobalShaderParameter(BufferIndex, Offset, NumBytes, NewValue)"
  },
  {
    "label": "SetSamplerStateForUBResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSamplerStateForUBResource(uint32 DescriptorSet, uint32 BindingIndex, FVulkanSamplerState* Sampler)"
  },
  {
    "label": "SetSamplerState()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetSamplerState(DescriptorSet, BindingIndex, Sampler)"
  },
  {
    "label": "NotifyDeletedPipeline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyDeletedPipeline(FVulkanComputePipeline* Pipeline)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (PipelineStates .)",
    "insertText": "Remove(Pipeline)"
  },
  {
    "label": "FVulkanPendingGfxState()",
    "kind": "Method",
    "detail": "Function (} protected : FVulkanComputePipeline* CurrentPipeline = nullptr ; FVulkanComputePipelineDescriptorState* CurrentState = nullptr ; TMap<FVulkanComputePipeline*,FVulkanComputePipelineDescriptorState*> PipelineStates ; FVulkanCommandListContext& Context ; class FVulkanCommandListContext ; } ; class FVulkanPendingGfxState : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanPendingGfxState(FVulkanDevice* InDevice, FVulkanCommandListContext& InContext) : VulkanRHI::FDeviceChild(InDevice) , Context(InContext)"
  },
  {
    "label": "FVulkanPendingGfxState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanPendingGfxState()"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Viewports .)",
    "insertText": "SetNumZeroed(1)"
  },
  {
    "label": "GetCurrentShaderKey()",
    "kind": "Method",
    "detail": "Function (StencilRef = 0 ; bScissorEnable = false ; CurrentPipeline = nullptr ; CurrentState = nullptr ; bDirtyVertexStreams = true ; PrimitiveType = PT_Num ; } const uint64)",
    "insertText": "GetCurrentShaderKey(EShaderFrequency Frequency)"
  },
  {
    "label": "GetCurrentShaderKey()",
    "kind": "Method",
    "detail": "Function (} const uint64)",
    "insertText": "GetCurrentShaderKey(ShaderStage::EStage Stage)"
  },
  {
    "label": "GetCurrentShader()",
    "kind": "Method",
    "detail": "Function (} const FVulkanShader*)",
    "insertText": "GetCurrentShader(EShaderFrequency Frequency)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Viewports [ 0 ] . x = MinX ; Viewports [ 0 ] . y = MinY ; Viewports [ 0 ] . width = MaxX - MinX ; Viewports [ 0 ] . height = MaxY - MinY ; Viewports [ 0 ] . minDepth = MinZ ;)",
    "insertText": "if(MinZ == MaxZ)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (Viewports [ 0 ] . maxDepth = MinZ + 1 . 0 f ; } else { Viewports [ 0 ] . maxDepth = MaxZ ; })",
    "insertText": "SetScissorRect((uint32)MinX, (uint32)MinY, (uint32)(MaxX - MinX), (uint32)(MaxY - MinY))"
  },
  {
    "label": "SetMultiViewport()",
    "kind": "Method",
    "detail": "Function (bScissorEnable = false ; } void)",
    "insertText": "SetMultiViewport(const TArrayView<VkViewport>& InViewports)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Viewports = InViewports ; Scissors .)",
    "insertText": "SetNumZeroed(Viewports.Num())"
  },
  {
    "label": "SetScissor()",
    "kind": "Method",
    "detail": "Function (Scissors [ Idx ] . offset . x = Viewports [ Idx ] . x ; Scissors [ Idx ] . offset . y = Viewports [ Idx ] . y ; Scissors [ Idx ] . extent . width = Viewports [ Idx ] . width ; Scissors [ Idx ] . extent . height = Viewports [ Idx ] . height ; } bScissorEnable = true ; } void)",
    "insertText": "SetScissor(bool bInEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRect(MinX, MinY, MaxX - MinX, MaxY - MinY)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(Viewports.Num() > 0, TEXT(\"At least one Viewport is expected to be configured.\"))"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRect(Viewports[0].x, Viewports[0].y, Viewports[0].width, Viewports[0].height)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (} bScissorEnable = bInEnable ; } void)",
    "insertText": "SetScissorRect(uint32 MinX, uint32 MinY, uint32 Width, uint32 Height)"
  },
  {
    "label": "SetStreamSource()",
    "kind": "Method",
    "detail": "Function (Scissors [ 0 ] . offset . x = MinX ; Scissors [ 0 ] . offset . y = MinY ; Scissors [ 0 ] . extent . width = Width ; Scissors [ 0 ] . extent . height = Height ; } void)",
    "insertText": "SetStreamSource(uint32 StreamIndex, VkBuffer VertexBuffer, uint32 Offset)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PendingStreams [ StreamIndex ] . Stream = VertexBuffer ; PendingStreams [ StreamIndex ] . BufferOffset = Offset ; bDirtyVertexStreams = true ; } void)",
    "insertText": "Bind(VkCommandBuffer CmdBuffer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (CurrentPipeline ->)",
    "insertText": "Bind(CmdBuffer)"
  },
  {
    "label": "SetTextureForStage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextureForStage(ShaderStage::EStage Stage, uint32 ParameterIndex, const FVulkanTexture* Texture, VkImageLayout Layout)"
  },
  {
    "label": "SetTexture()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetTexture(Stage, ParameterIndex, Texture, Layout)"
  },
  {
    "label": "SetTextureForUBResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextureForUBResource(uint8 DescriptorSet, uint32 BindingIndex, const FVulkanTexture* Texture, VkImageLayout Layout)"
  },
  {
    "label": "SetUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} template<bool bDynamic> void)",
    "insertText": "SetUniformBuffer(uint8 DescriptorSet, uint32 BindingIndex, const FVulkanUniformBuffer* UniformBuffer)"
  },
  {
    "label": "bDynamic()",
    "kind": "Method",
    "detail": "Function (CurrentState -> SetUniformBuffer<)",
    "insertText": "bDynamic(DescriptorSet, BindingIndex, UniformBuffer)"
  },
  {
    "label": "SetUAVForUBResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUAVForUBResource(uint8 DescriptorSet, uint32 BindingIndex, FVulkanUnorderedAccessView* UAV)"
  },
  {
    "label": "SetUAVForStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAVForStage(ShaderStage::EStage Stage, uint32 ParameterIndex, FVulkanUnorderedAccessView* UAV)"
  },
  {
    "label": "SetUAVForUBResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAVForUBResource(Stage, ParameterIndex, UAV)"
  },
  {
    "label": "SetSRVForUBResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSRVForUBResource(uint8 DescriptorSet, uint32 BindingIndex, FVulkanShaderResourceView* SRV)"
  },
  {
    "label": "SetSRVForStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVForStage(ShaderStage::EStage Stage, uint32 ParameterIndex, FVulkanShaderResourceView* SRV)"
  },
  {
    "label": "SetSRVForUBResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVForUBResource(Stage, ParameterIndex, SRV)"
  },
  {
    "label": "SetSamplerStateForStage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSamplerStateForStage(ShaderStage::EStage Stage, uint32 ParameterIndex, FVulkanSamplerState* Sampler)"
  },
  {
    "label": "SetSamplerState()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetSamplerState(Stage, ParameterIndex, Sampler)"
  },
  {
    "label": "SetPackedGlobalShaderParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPackedGlobalShaderParameter(ShaderStage::EStage Stage, uint32 BufferIndex, uint32 Offset, uint32 NumBytes, const void* NewValue)"
  },
  {
    "label": "SetPackedGlobalShaderParameter()",
    "kind": "Method",
    "detail": "Function (CurrentState ->)",
    "insertText": "SetPackedGlobalShaderParameter(Stage, BufferIndex, Offset, NumBytes, NewValue)"
  },
  {
    "label": "PrepareForDraw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareForDraw(FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "SetGfxPipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGfxPipeline(FVulkanRHIGraphicsPipelineState* InGfxPipeline, bool bForceReset)"
  },
  {
    "label": "UpdateDynamicStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDynamicStates(FVulkanCmdBuffer* Cmd)"
  },
  {
    "label": "InternalUpdateDynamicStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalUpdateDynamicStates(Cmd)"
  },
  {
    "label": "SetStencilRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStencilRef(uint32 InStencilRef)"
  },
  {
    "label": "NotifyDeletedPipeline()",
    "kind": "Method",
    "detail": "Function (StencilRef = InStencilRef ; } } void)",
    "insertText": "NotifyDeletedPipeline(FVulkanRHIGraphicsPipelineState* Pipeline)"
  },
  {
    "label": "MarkNeedsDynamicStates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkNeedsDynamicStates()"
  },
  {
    "label": "FVertexStream()",
    "kind": "Method",
    "detail": "Function (} protected : TArray<VkViewport,TInlineAllocator<2>> Viewports ; TArray<VkRect2D,TInlineAllocator<2>> Scissors ; EPrimitiveType PrimitiveType = PT_Num ; uint32 StencilRef ; bool bScissorEnable ; bool bNeedToClear ; FVulkanRHIGraphicsPipelineState* CurrentPipeline ; FVulkanGraphicsPipelineDescriptorState* CurrentState ; TMap<FVulkanRHIGraphicsPipelineState*,FVulkanGraphicsPipelineDescriptorState*> PipelineStates ; struct FVertexStream {)",
    "insertText": "FVertexStream() : Stream(VK_NULL_HANDLE), BufferOffset(0)"
  },
  {
    "label": "InternalUpdateDynamicStates()",
    "kind": "Method",
    "detail": "Function (} VkBuffer Stream ; uint32 BufferOffset ; } ; FVertexStream PendingStreams [ MaxVertexElementCount ] ; bool bDirtyVertexStreams ; void)",
    "insertText": "InternalUpdateDynamicStates(FVulkanCmdBuffer* Cmd)"
  },
  {
    "label": "UpdateInputAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputAttachments(FVulkanFramebuffer* Framebuffer)"
  }
]