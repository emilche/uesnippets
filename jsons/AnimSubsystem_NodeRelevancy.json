[
  {
    "label": "FAnimationUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateContext"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "FAnimNodeRelevancyStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodeRelevancyStatus"
  },
  {
    "label": "FAnimSubsystemInstance_NodeRelevancy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSubsystemInstance_NodeRelevancy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTracker"
  },
  {
    "label": "GetCurrentWeight()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimSubsystemInstance . h \" # include \" Animation / AnimTypes . h \" # include \" AnimSubsystem_NodeRelevancy . generated . h \" struct FAnimationUpdateContext ; struct FAnimNode_Base ; class UAnimInstance ; struct FAnimNodeRelevancyStatus { public : float)",
    "insertText": "GetCurrentWeight()"
  },
  {
    "label": "GetPreviousWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPreviousWeight()"
  },
  {
    "label": "HasFullyBlendedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFullyBlendedOut()"
  },
  {
    "label": "HasJustBecomeRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasJustBecomeRelevant()"
  },
  {
    "label": "IsStartingBlendingIn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStartingBlendingIn()"
  },
  {
    "label": "IsFinishingBlendingIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinishingBlendingIn()"
  },
  {
    "label": "HasFullyBlendedIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFullyBlendedIn()"
  },
  {
    "label": "IsStartingBlendingOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStartingBlendingOut()"
  },
  {
    "label": "IsFinishingBlendingOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinishingBlendingOut()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (private : struct FAnimSubsystemInstance_NodeRelevancy ; float PreviousWeight = 0 . 0 f ; float CurrentWeight = 0 . 0 f ; } ; enum class EAnimNodeInitializationStatus { NotUpdated = 0,InitialUpdate,Updated,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() ENGINE_API virtual void Initialize_WorkerThread()"
  },
  {
    "label": "UpdateNodeRelevancy()",
    "kind": "Method",
    "detail": "Function (FAnimNodeRelevancyStatus)",
    "insertText": "UpdateNodeRelevancy(const FAnimationUpdateContext& InContext, const FAnimNode_Base& InNode)"
  },
  {
    "label": "GetNodeRelevancy()",
    "kind": "Method",
    "detail": "Function (FAnimNodeRelevancyStatus)",
    "insertText": "GetNodeRelevancy(const FAnimNode_Base& InNode)"
  },
  {
    "label": "UpdateNodeInitializationStatus()",
    "kind": "Method",
    "detail": "Function (EAnimNodeInitializationStatus)",
    "insertText": "UpdateNodeInitializationStatus(const FAnimationUpdateContext& InContext, const FAnimNode_Base& InNode)"
  },
  {
    "label": "GetNodeInitializationStatus()",
    "kind": "Method",
    "detail": "Function (EAnimNodeInitializationStatus)",
    "insertText": "GetNodeInitializationStatus(const FAnimNode_Base& InNode)"
  }
]