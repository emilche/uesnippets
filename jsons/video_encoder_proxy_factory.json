[
  {
    "label": "VideoEncoderProxyFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoEncoderProxyFactory"
  },
  {
    "label": "EncoderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderProxy"
  },
  {
    "label": "EncoderSelectorProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderSelectorProxy"
  },
  {
    "label": "kCapabilities()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_VIDEO_ENCODER_PROXY_FACTORY_H_ # define TEST_VIDEO_ENCODER_PROXY_FACTORY_H_ # include<memory> # include<vector> # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / video_encoder_factory . h \" namespace webrtc { namespace test { namespace { const VideoEncoder::Capabilities)",
    "insertText": "kCapabilities(false)"
  },
  {
    "label": "VideoEncoderProxyFactory()",
    "kind": "Method",
    "detail": "Function (} class VideoEncoderProxyFactory : public VideoEncoderFactory { public :)",
    "insertText": "VideoEncoderProxyFactory(VideoEncoder* encoder) : VideoEncoderProxyFactory(encoder, nullptr)"
  },
  {
    "label": "VideoEncoderProxyFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VideoEncoderProxyFactory(VideoEncoder* encoder, EncoderSelectorInterface* encoder_selector) : encoder_(encoder), encoder_selector_(encoder_selector), num_simultaneous_encoder_instances_(0), max_num_simultaneous_encoder_instances_(0)"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (} std::vector<SdpVideoFormat>)",
    "insertText": "GetSupportedFormats()"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (+ + num_simultaneous_encoder_instances_ ; max_num_simultaneous_encoder_instances_ =)",
    "insertText": "max(max_num_simultaneous_encoder_instances_, num_simultaneous_encoder_instances_)"
  },
  {
    "label": "GetEncoderSelector()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<EncoderSelectorInterface>)",
    "insertText": "GetEncoderSelector()"
  },
  {
    "label": "GetMaxNumberOfSimultaneousEncoderInstances()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } int)",
    "insertText": "GetMaxNumberOfSimultaneousEncoderInstances()"
  },
  {
    "label": "RTC_CHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_GT(num_simultaneous_encoder_instances_, 0)"
  },
  {
    "label": "EncoderProxy()",
    "kind": "Method",
    "detail": "Function (- - num_simultaneous_encoder_instances_ ; } class EncoderProxy final : public VideoEncoder { public :)",
    "insertText": "EncoderProxy(VideoEncoder* encoder, VideoEncoderProxyFactory* encoder_factory) : encoder_(encoder), encoder_factory_(encoder_factory)"
  },
  {
    "label": "EncoderProxy()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "EncoderProxy()"
  },
  {
    "label": "OnDestroyVideoEncoder()",
    "kind": "Method",
    "detail": "Function (encoder_factory_ ->)",
    "insertText": "OnDestroyVideoEncoder()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (encoder_ ->)",
    "insertText": "SetFecControllerOverride(fec_controller_override)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Encode(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "InitEncode(const VideoCodec* config, const Settings& settings)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRates(const RateControlParameters& parameters)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (encoder_ ->)",
    "insertText": "SetRates(parameters)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (} VideoEncoder::EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "EncoderSelectorProxy()",
    "kind": "Method",
    "detail": "Function (} VideoEncoder* const encoder_ ; VideoEncoderProxyFactory* const encoder_factory_ ; } ; class EncoderSelectorProxy final : public EncoderSelectorInterface { public :)",
    "insertText": "EncoderSelectorProxy(EncoderSelectorInterface* encoder_selector) : encoder_selector_(encoder_selector)"
  },
  {
    "label": "OnCurrentEncoder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCurrentEncoder(const SdpVideoFormat& format)"
  },
  {
    "label": "OnCurrentEncoder()",
    "kind": "Method",
    "detail": "Function (encoder_selector_ ->)",
    "insertText": "OnCurrentEncoder(format)"
  },
  {
    "label": "OnAvailableBitrate()",
    "kind": "Method",
    "detail": "Function (} absl::optional<SdpVideoFormat>)",
    "insertText": "OnAvailableBitrate(const DataRate& rate)"
  },
  {
    "label": "OnResolutionChange()",
    "kind": "Method",
    "detail": "Function (} absl::optional<SdpVideoFormat>)",
    "insertText": "OnResolutionChange(const RenderResolution& resolution)"
  },
  {
    "label": "OnEncoderBroken()",
    "kind": "Method",
    "detail": "Function (} absl::optional<SdpVideoFormat>)",
    "insertText": "OnEncoderBroken()"
  }
]