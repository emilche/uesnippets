[
  {
    "label": "_InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIter"
  },
  {
    "label": "_RandIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandIter"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_DISTANCE_H # define _LIBCPP___ITERATOR_DISTANCE_H # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / size . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIter> inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 typename iterator_traits<_InputIter>::difference_type __distance(_InputIter __first, _InputIter __last, input_iterator_tag)"
  },
  {
    "label": "__r()",
    "kind": "Method",
    "detail": "Function (iterator_traits<_InputIter>::difference_type)",
    "insertText": "__r(0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 7&& !)",
    "insertText": "defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (namespace __distance { struct __fn { template<class _Ip,sentinel_for<_Ip> _Sp>)",
    "insertText": "requires(!sized_sentinel_for<_Sp, _Ip>) _LIBCPP_HIDE_FROM_ABI constexpr iter_difference_t<_Ip> operator()(_Ip __first, _Sp __last)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (iter_difference_t<_Ip> __n = 0 ;)",
    "insertText": "while(__first != __last)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __first ; + + __n ; } return __n ; } template<class _Ip,sized_sentinel_for<decay_t<_Ip>> _Sp> _LIBCPP_HIDE_FROM_ABI iter_difference_t<_Ip>)",
    "insertText": "operator()(_Ip&& __first, _Sp __last)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<range _Rp> _LIBCPP_HIDE_FROM_ABI range_difference_t<_Rp>)",
    "insertText": "operator()(_Rp&& __r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "operator()(ranges::begin(__r), ranges::end(__r))"
  }
]