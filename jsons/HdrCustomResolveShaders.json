[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FHdrCustomResolveVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveVS"
  },
  {
    "label": "FHdrCustomResolveArrayVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveArrayVS"
  },
  {
    "label": "FHdrCustomResolve2xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolve2xPS"
  },
  {
    "label": "FHdrCustomResolve4xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolve4xPS"
  },
  {
    "label": "FHdrCustomResolve8xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolve8xPS"
  },
  {
    "label": "FHdrCustomResolveArray2xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveArray2xPS"
  },
  {
    "label": "FHdrCustomResolveArray4xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveArray4xPS"
  },
  {
    "label": "FHdrCustomResolveArray8xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveArray8xPS"
  },
  {
    "label": "FHdrCustomResolveFMask2xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveFMask2xPS"
  },
  {
    "label": "FHdrCustomResolveFMask4xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveFMask4xPS"
  },
  {
    "label": "FHdrCustomResolveFMask8xPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHdrCustomResolveFMask8xPS"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GlobalShader . h \" # include \" HAL / Platform . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderCore . h \" # include \" ShaderParameterUtils . h \" # include \" ShaderParameters . h \" # include \" DataDrivenShaderPlatformInfo . h \" # include \" StereoRenderUtils . h \" class FPointerTableBase ; class FHdrCustomResolveVS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveVS,Global)"
  },
  {
    "label": "FHdrCustomResolveVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveVS()"
  },
  {
    "label": "FHdrCustomResolveVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader( Initializer)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FHdrCustomResolveArrayVS : public FHdrCustomResolveVS {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveArrayVS, Global)"
  },
  {
    "label": "FHdrCustomResolveArrayVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveArrayVS()"
  },
  {
    "label": "FHdrCustomResolveArrayVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveArrayVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FHdrCustomResolveVS(Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "Aspects()",
    "kind": "Method",
    "detail": "Function (UE::StereoRenderUtils::FStereoShaderAspects)",
    "insertText": "Aspects(Parameters.Platform)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_CUSTOM_RESOLVE_TEXTUREARRAY\"), 1)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FHdrCustomResolve2xPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolve2xPS,Global)"
  },
  {
    "label": "FHdrCustomResolve2xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolve2xPS()"
  },
  {
    "label": "FHdrCustomResolve2xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolve2xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader( Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (Tex .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"Tex\"), SPF_Mandatory)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHITexture* Texture2DMS)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, Tex, Texture2DMS)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_CUSTOM_RESOLVE_2X\"), 1)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, Tex)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FHdrCustomResolve4xPS : public FHdrCustomResolve2xPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolve4xPS,Global)"
  },
  {
    "label": "FHdrCustomResolve4xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolve4xPS()"
  },
  {
    "label": "FHdrCustomResolve4xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolve4xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FHdrCustomResolve2xPS( Initializer)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_CUSTOM_RESOLVE_4X\"), 1)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FHdrCustomResolve8xPS : public FHdrCustomResolve2xPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolve8xPS,Global)"
  },
  {
    "label": "FHdrCustomResolve8xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolve8xPS()"
  },
  {
    "label": "FHdrCustomResolve8xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolve8xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FHdrCustomResolve2xPS( Initializer)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_CUSTOM_RESOLVE_8X\"), 1)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FHdrCustomResolveArray2xPS : public FHdrCustomResolve2xPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveArray2xPS, Global)"
  },
  {
    "label": "FHdrCustomResolveArray2xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveArray2xPS()"
  },
  {
    "label": "FHdrCustomResolveArray2xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveArray2xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FHdrCustomResolve2xPS(Initializer)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FHdrCustomResolveArray4xPS : public FHdrCustomResolveArray2xPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveArray4xPS, Global)"
  },
  {
    "label": "FHdrCustomResolveArray4xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveArray4xPS()"
  },
  {
    "label": "FHdrCustomResolveArray4xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveArray4xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FHdrCustomResolveArray2xPS(Initializer)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FHdrCustomResolveArray8xPS : public FHdrCustomResolveArray2xPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveArray8xPS, Global)"
  },
  {
    "label": "FHdrCustomResolveArray8xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveArray8xPS()"
  },
  {
    "label": "FHdrCustomResolveArray8xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveArray8xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FHdrCustomResolveArray2xPS(Initializer)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FHdrCustomResolveFMask2xPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveFMask2xPS, Global)"
  },
  {
    "label": "FHdrCustomResolveFMask2xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveFMask2xPS()"
  },
  {
    "label": "FHdrCustomResolveFMask2xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveFMask2xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (FMaskTex .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"FMaskTex\"), SPF_Optional)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHITexture* Texture2DMS, FRHIShaderResourceView* FMaskSRV)"
  },
  {
    "label": "SetSRVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVParameter(BatchedParameters, FMaskTex, FMaskSRV)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_RESOLVE_NUM_SAMPLES\"), 2)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_CUSTOM_RESOLVE_USES_FMASK\"), 1)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, FMaskTex)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FHdrCustomResolveFMask4xPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveFMask4xPS, Global)"
  },
  {
    "label": "FHdrCustomResolveFMask4xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveFMask4xPS()"
  },
  {
    "label": "FHdrCustomResolveFMask4xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveFMask4xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_RESOLVE_NUM_SAMPLES\"), 4)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FHdrCustomResolveFMask8xPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FHdrCustomResolveFMask8xPS, Global)"
  },
  {
    "label": "FHdrCustomResolveFMask8xPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHdrCustomResolveFMask8xPS()"
  },
  {
    "label": "FHdrCustomResolveFMask8xPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHdrCustomResolveFMask8xPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HDR_RESOLVE_NUM_SAMPLES\"), 8)"
  }
]