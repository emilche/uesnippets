[
  {
    "label": "TScriptArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScriptArray"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "FScriptArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptArray"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / AllowShrinking . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" # include<initializer_list> template<AllocatorType> class TScriptArray : protected AllocatorType::ForAnyElementType { public : void*)",
    "insertText": "GetData()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 i)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(Index, Count, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero((uint8*)this->GetAllocation()+(SIZE_T)Index*NumBytesPerElement, (SIZE_T)Count*NumBytesPerElement)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Insert(int32 Index, int32 Count, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 OldNum = ArrayNum ;)",
    "insertText": "if((ArrayNum+=Count)>ArrayMax)"
  },
  {
    "label": "ResizeGrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeGrow(OldNum, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Memmove((uint8*)this->GetAllocation() + ((SIZE_T)Index+Count )*NumBytesPerElement, (uint8*)this->GetAllocation() + ((SIZE_T)Index )*NumBytesPerElement, ((SIZE_T)OldNum-Index)*NumBytesPerElement)"
  },
  {
    "label": "SlackTrackerNumChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlackTrackerNumChanged()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(int32 Count, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 Index =)",
    "insertText": "Add(Count, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero((uint8*)this->GetAllocation()+ (SIZE_T)Index*NumBytesPerElement, (SIZE_T)Count*NumBytesPerElement)"
  },
  {
    "label": "ResizeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeTo(ArrayNum, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNumUninitialized(int32 NewNum, int32 NumBytesPerElement, uint32 AlignmentOfElement, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 OldNum =)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(NewNum - OldNum, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NewNum < OldNum)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(NewNum, OldNum - NewNum, NumBytesPerElement, AlignmentOfElement, AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"SetNumUninitialized\") FORCEINLINE void SetNumUninitialized(int32 NewNum, int32 NumBytesPerElement, uint32 AlignmentOfElement, bool bAllowShrinking)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumUninitialized(NewNum, NumBytesPerElement, AlignmentOfElement, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveAssign(TScriptArray& Other, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(0, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "MoveToEmpty(Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 Slack, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "ResizeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeTo(Slack, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset(int32 NewSize, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Empty(NewSize, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "SwapMemory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SwapMemory(int32 A, int32 B, int32 NumBytesPerElement)"
  },
  {
    "label": "Memswap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memswap((uint8*)this->GetAllocation()+((SIZE_T)NumBytesPerElement*A), (uint8*)this->GetAllocation()+((SIZE_T)NumBytesPerElement*B), NumBytesPerElement)"
  },
  {
    "label": "TScriptArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TScriptArray() : ArrayNum( 0 ) , ArrayMax( 0)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CountBytes(FArchive& Ar, int32 NumBytesPerElement)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "CountBytes((SIZE_T)ArrayNum*NumBytesPerElement, (SIZE_T)ArrayMax*NumBytesPerElement)"
  },
  {
    "label": "CheckAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckAddress(const void* Addr, int32 NumBytesPerElement)"
  },
  {
    "label": "GetSlack()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSlack()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumToMove = ArrayNum - Index - Count ;)",
    "insertText": "if(NumToMove)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memmove((uint8*)this->GetAllocation() + ((SIZE_T)Index)* NumBytesPerElement, (uint8*)this->GetAllocation() + ((SIZE_T)Index + Count) * NumBytesPerElement, (SIZE_T)NumToMove * NumBytesPerElement)"
  },
  {
    "label": "ResizeShrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeShrink(NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkSlow(ArrayNum >= 0)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"Remove\") FORCEINLINE void Remove(int32 Index, int32 Count, int32 NumBytesPerElement, uint32 AlignmentOfElement, bool bAllowShrinking)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Index, Count, NumBytesPerElement, AlignmentOfElement, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(int32 NumBytesPerElement)"
  },
  {
    "label": "TScriptArray()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TScriptArray(int32 InNum, int32 NumBytesPerElement, uint32 AlignmentOfElement ) : ArrayNum( 0 ) , ArrayMax( InNum)"
  },
  {
    "label": "ResizeInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeInit(NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "ResizeInit()",
    "kind": "Method",
    "detail": "Function (} int32 ArrayNum ; int32 ArrayMax ; FORCENOINLINE void)",
    "insertText": "ResizeInit(int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "CalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (ArrayMax = this ->)",
    "insertText": "CalculateSlackReserve(ArrayMax, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ResizeAllocation(ArrayNum, ArrayMax, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "ResizeGrow()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "ResizeGrow(int32 OldNum, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "CalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (ArrayMax = this ->)",
    "insertText": "CalculateSlackGrow(ArrayNum, ArrayMax, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ResizeAllocation(OldNum, ArrayMax, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "ResizeShrink()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "ResizeShrink(int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "CalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (const int32 NewArrayMax = this ->)",
    "insertText": "CalculateSlackShrink(ArrayNum, ArrayMax, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "ResizeTo()",
    "kind": "Method",
    "detail": "Function (} } FORCENOINLINE void)",
    "insertText": "ResizeTo(int32 NewMax, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "CalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (NewMax = this ->)",
    "insertText": "CalculateSlackReserve(NewMax, NumBytesPerElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NewMax != ArrayMax)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_ARRAY_SLACK_TRACKING if)",
    "insertText": "constexpr(TAllocatorTraits<AllocatorType>::SupportsSlackTracking)"
  },
  {
    "label": "TScriptArray()",
    "kind": "Method",
    "detail": "Function (} # endif } public : bool bHasIntrusiveUnsetOptionalState = true ; using IntrusiveUnsetOptionalStateType = TScriptArray ;)",
    "insertText": "TScriptArray(FIntrusiveUnsetOptionalState Tag) : ArrayNum(0) , ArrayMax(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FIntrusiveUnsetOptionalState Tag)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const TScriptArray&)"
  },
  {
    "label": "FScriptArray()",
    "kind": "Method",
    "detail": "Function (} } ; template<AllocatorType> struct TIsZeroConstructType<TScriptArray<AllocatorType>> { enum { Value = true } ; } ; class FScriptArray : public TScriptArray<FHeapAllocator> { using Super = TScriptArray<FHeapAllocator> ; public :)",
    "insertText": "FScriptArray()"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAssign(FScriptArray& Other, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAssign(Other, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "FScriptArray()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FScriptArray(int32 InNum, int32 NumBytesPerElement, uint32 AlignmentOfElement) : TScriptArray<FHeapAllocator>(InNum, NumBytesPerElement, AlignmentOfElement)"
  },
  {
    "label": "FScriptArray()",
    "kind": "Method",
    "detail": "Function (} public : using IntrusiveUnsetOptionalStateType = FScriptArray ;)",
    "insertText": "FScriptArray(FIntrusiveUnsetOptionalState Tag) : TScriptArray(Tag)"
  },
  {
    "label": "FScriptArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptArray(const FScriptArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FScriptArray&)"
  }
]