[
  {
    "label": "FAnimNodePoseWatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodePoseWatch"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FCompactHeapPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactHeapPose"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBoneAxisDrawConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneAxisDrawConfig"
  },
  {
    "label": "FSkelDebugDrawConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelDebugDrawConfig"
  },
  {
    "label": "DrawWireBone()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" BoneIndices . h \" struct FAnimNodePoseWatch ; class FPrimitiveDrawInterface ; struct FCompactHeapPose ; struct FReferenceSkeleton ; class HHitProxy ; namespace EBoneDrawMode { enum Type { None,Selected,SelectedAndParents,SelectedAndChildren,SelectedAndParentsAndChildren,All,NumDrawModes } ; } ; struct FBoneAxisDrawConfig { bool bDraw = false ; float Thickness = 0 . f ; float Length = 0 . f ; } ; struct FSkelDebugDrawConfig { public : EBoneDrawMode::Type BoneDrawMode ; float BoneDrawSize ; bool bForceDraw ; bool bAddHitProxy ; bool bUseMultiColorAsDefaultColor ; FLinearColor DefaultBoneColor ; FLinearColor AffectedBoneColor ; FLinearColor SelectedBoneColor ; FLinearColor ParentOfSelectedBoneColor ; FBoneAxisDrawConfig AxisConfig ; } ; namespace SkeletalDebugRendering { const int32 NumSphereSides = 1 0 ; const int32 NumConeSides = 4 ; void)",
    "insertText": "DrawWireBone(FPrimitiveDrawInterface* PDI, const FVector& InStart, const FVector& InEnd, const FLinearColor& InColor, ESceneDepthPriorityGroup InDepthPriority, const float SphereRadius = 1.f)"
  },
  {
    "label": "DrawAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAxes(FPrimitiveDrawInterface* PDI, const FTransform& InTransform, ESceneDepthPriorityGroup InDepthPriority, const float Thickness = 0.f, const float AxisLength = 4.f)"
  },
  {
    "label": "DrawWireBoneAdvanced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireBoneAdvanced(FPrimitiveDrawInterface* PDI, const FTransform& InBoneTransform, const TArray<FVector>& InChildLocations, const TArray<FLinearColor>& InChildColors, const FLinearColor& InColor, ESceneDepthPriorityGroup InDepthPriority, const float SphereRadius, const FBoneAxisDrawConfig& InAxisConfig)"
  },
  {
    "label": "DrawConeConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConeConnection(FPrimitiveDrawInterface* PDI, const FVector& Start, const FVector& End, const float SphereRadius, const FLinearColor& Color)"
  },
  {
    "label": "DrawBonesFromPoseWatch()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "DrawBonesFromPoseWatch(FPrimitiveDrawInterface* PDI, const FAnimNodePoseWatch& PoseWatch, const bool bUseWorldTransform)"
  },
  {
    "label": "DrawBones()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DrawBones(FPrimitiveDrawInterface* PDI, const FVector& ComponentOrigin, const TArray<FBoneIndexType>& RequiredBones, const FReferenceSkeleton& RefSkeleton, const TArray<FTransform>& WorldTransforms, const TArray<int32>& InSelectedBones, const TArray<FLinearColor>& BoneColors, const TArray<TRefCountPtr<HHitProxy>>& HitProxies, const FSkelDebugDrawConfig& DrawConfig)"
  },
  {
    "label": "DrawBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBones(FPrimitiveDrawInterface* PDI, const FVector& ComponentOrigin, const TArray<FBoneIndexType>& RequiredBones, const FReferenceSkeleton& RefSkeleton, const TArray<FTransform>& WorldTransforms, const TArray<int32>& InSelectedBones, const TArray<FLinearColor>& BoneColors, const TArray<TRefCountPtr<HHitProxy>>& HitProxies, const FSkelDebugDrawConfig& DrawConfig, const TBitArray<>& BonesToDrawOverride)"
  },
  {
    "label": "DrawBonesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBonesInternal(FPrimitiveDrawInterface* PDI, const FVector& ComponentOrigin, const TArray<FBoneIndexType>& RequiredBones, const TArray<int32>& ParentIndices, const TArray<FTransform>& WorldTransforms, const TArray<int32>& InSelectedBones, const TArray<FLinearColor>& BoneColors, const TArray<TRefCountPtr<HHitProxy>>& HitProxies, const FSkelDebugDrawConfig& DrawConfig, const TBitArray<>& BonesToDrawOverride)"
  },
  {
    "label": "GetSemiRandomColorForBone()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetSemiRandomColorForBone(const int32 BoneIndex, float Value=1.0f, float Saturation=0.75f)"
  },
  {
    "label": "FillWithMultiColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillWithMultiColors(TArray<FLinearColor>& BoneColors, const int32 NumBones)"
  },
  {
    "label": "CalculateBonesToDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateBonesToDraw(const TArray<int32>& ParentIndices, const TArray<int32>& InSelectedBones, const EBoneDrawMode::Type BoneDrawMode, TBitArray<>& OutBonesToDraw)"
  }
]