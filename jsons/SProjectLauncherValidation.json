[
  {
    "label": "SProjectLauncherValidation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherValidation"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ILauncherProfile . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Images / SImage . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherValidation \" class SProjectLauncherValidation : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherValidation)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<ILauncherProfile>, LaunchProfile) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (LaunchProfileAttr = InArgs . _LaunchProfile ; TSharedPtr<SVerticalBox> VertBox ;)",
    "insertText": "SAssignNew(VertBox, SVerticalBox)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::CopyToDeviceRequiresCookByTheBook)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::CustomRolesNotSupportedYet)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::DeployedDeviceGroupRequired)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::InitialCultureNotAvailable)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::InitialMapNotAvailable)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::MalformedLaunchCommandLine)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoBuildConfigurationSelected)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoCookedCulturesSelected)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoLaunchRoleDeviceAssigned)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoPlatformSelected)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoProjectSelected)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoPackageDirectorySpecified)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::LaunchDeviceIsUnauthorized)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeCallbackMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoPlatformSDKInstalled)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::UnversionedAndIncrimental)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::GeneratingPatchesCanOnlyRunFromByTheBookCookMode)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::GeneratingMultiLevelPatchesRequiresGeneratePatch)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::StagingBaseReleasePaksWithoutABaseReleaseVersion)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::GeneratingChunksRequiresCookByTheBook)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::GeneratingChunksRequiresUnrealPak)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::GeneratingHttpChunkDataRequiresGeneratingChunks)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::GeneratingHttpChunkDataRequiresValidDirectoryAndName)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::ShippingDoesntSupportCommandlineOptionsCantUseCookOnTheFly)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::CookOnTheFlyDoesntSupportServer)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::NoArchiveDirectorySpecified)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::IoStoreRequiresPakFiles)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::BuildTargetCookVariantMismatch)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::BuildTargetIsRequired)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::FallbackBuildTargetIsRequired)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VertBox ->)",
    "insertText": "AddSlot().AutoHeight() [ MakeValidationMessage(TEXT(\"Icons.Error\"), ELauncherProfileValidationErrors::CopyToDeviceRequiresNoPackaging)"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (ChildSlot [ VertBox .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "MakeValidationMessage()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget>)",
    "insertText": "MakeValidationMessage(const TCHAR* IconName, ELauncherProfileValidationErrors::Type Message)"
  },
  {
    "label": "MakeCallbackMessage()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "MakeCallbackMessage(const TCHAR* IconName,ELauncherProfileValidationErrors::Type Message)"
  },
  {
    "label": "HandleValidationMessageVisibility()",
    "kind": "Method",
    "detail": "Function (} private : EVisibility)",
    "insertText": "HandleValidationMessageVisibility(ELauncherProfileValidationErrors::Type Error)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ILauncherProfile> LaunchProfile = LaunchProfileAttr .)",
    "insertText": "Get()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"InvalidLaunchProfile\", \"Invalid Launch Profile.\")"
  }
]