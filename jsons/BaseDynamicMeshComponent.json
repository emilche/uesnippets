[
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FMeshVertexChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshVertexChange"
  },
  {
    "label": "FMeshChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshChange"
  },
  {
    "label": "FBaseDynamicMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseDynamicMeshSceneProxy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UBaseDynamicMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBaseDynamicMeshComponent"
  },
  {
    "label": "FGeometryFrameworkModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryFrameworkModule"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / MeshComponent . h \" # include \" InteractiveToolObjects . h \" # include \" Changes / MeshVertexChange . h \" # include \" Changes / MeshChange . h \" # include \" Changes / MeshReplacementChange . h \" # include \" MeshConversionOptions . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" UDynamicMesh . h \" # include \" BaseDynamicMeshComponent . generated . h \" struct FMeshDescription ; class FMeshVertexChange ; class FMeshChange ; class FBaseDynamicMeshSceneProxy ; using UE::Geometry::FDynamicMesh3 ; enum class EMeshRenderAttributeFlags : uint8 { None = 0,Positions = 1,VertexColors = 1<<1,VertexNormals = 1<<2,VertexUVs = 1<<3,SecondaryIndexBuffers = 1<<4,AllVertexAttribs = Positions | VertexColors | VertexNormals | VertexUVs } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMeshRenderAttributeFlags)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (NoTangents,AutoCalculated,ExternallyProvided)",
    "insertText": "UMETA(DisplayName = \"From Dynamic Mesh\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (NoDistanceField = 0,AsyncCPUDistanceField = 1)",
    "insertText": "UMETA(DisplayName = \"Async CPU Distance Field\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (NoTransform = 0,LinearToSRGB,SRGBToLinear)",
    "insertText": "UMETA(DisplayName = \"SRGB To Linear\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Abstract, hidecategories = (LOD), ClassGroup = Rendering, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual void SetMesh(UE::Geometry::FDynamicMesh3&& MoveMesh)"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unimplemented()"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (} FDynamicMesh3*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "ApplyChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyChange(const FMeshVertexChange* Change, bool bRevert)"
  },
  {
    "label": "ApplyChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyChange(const FMeshChange* Change, bool bRevert)"
  },
  {
    "label": "ApplyChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyChange(const FMeshReplacementChange* Change, bool bRevert)"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyTransform(const FTransform3d& Transform, bool bInvert)"
  },
  {
    "label": "GetBaseSceneProxy()",
    "kind": "Method",
    "detail": "Function (} protected : FBaseDynamicMeshSceneProxy*)",
    "insertText": "GetBaseSceneProxy()"
  },
  {
    "label": "HasSecondaryRenderMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSecondaryRenderMaterial()"
  },
  {
    "label": "OnRenderingStateChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnRenderingStateChanged(bool bForceImmedateRebuild)"
  },
  {
    "label": "AllowFastUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowFastUpdate()"
  },
  {
    "label": "OnNewDistanceFieldMode()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnNewDistanceFieldMode()"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 ElementIndex)"
  },
  {
    "label": "GetMaterialRelevance()",
    "kind": "Method",
    "detail": "Function (FMaterialRelevance)",
    "insertText": "GetMaterialRelevance(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(int32 ElementIndex, UMaterialInterface* Material)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "SetNumMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumMaterials(int32 NumMaterials)"
  },
  {
    "label": "GetMaterialSlotNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetMaterialSlotNames()"
  },
  {
    "label": "IsMaterialSlotNameValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialSlotNameValid(FName MaterialSlotName)"
  },
  {
    "label": "GetMaterialByName()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialByName(FName MaterialSlotName)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "SetDefaultWireframeMaterial()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetDefaultWireframeMaterial(UMaterialInterface* Material)"
  },
  {
    "label": "SetDefaultVertexColorMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultVertexColorMaterial(UMaterialInterface* Material)"
  },
  {
    "label": "InitializeDefaultMaterials()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeDefaultMaterials()"
  },
  {
    "label": "GetDefaultWireframeMaterial_RenderThread()",
    "kind": "Method",
    "detail": "Function (class FGeometryFrameworkModule ; UMaterialInterface*)",
    "insertText": "GetDefaultWireframeMaterial_RenderThread()"
  },
  {
    "label": "GetDefaultVertexColorMaterial_RenderThread()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetDefaultVertexColorMaterial_RenderThread()"
  }
]