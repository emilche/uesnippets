[
  {
    "label": "AISMPartitionActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AISMPartitionActor"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ActorPartition / PartitionActor . h \" # include \" ISMPartition / ISMPartitionClient . h \" # include \" ISMPartition / ISMPartitionInstanceManager . h \" # include \" ISMPartition / ISMComponentDescriptor . h \" # include \" ISMPartition / ISMComponentData . h \" # include \" Templates / Tuple . h \" # include \" Containers / SortedMap . h \" # include \" Elements / SMInstance / SMInstanceManager . h \" # include \" ISMPartitionActor . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogISMPartition, Log, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: #if WITH_EDITOR ENGINE_API virtual void PreEditUndo()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "RegisterClient()",
    "kind": "Method",
    "detail": "Function (FISMClientHandle)",
    "insertText": "RegisterClient(const FGuid& ClientGuid)"
  },
  {
    "label": "UnregisterClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterClient(FISMClientHandle& ClientHandle)"
  },
  {
    "label": "RegisterClientInstanceManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClientInstanceManager(const FISMClientHandle& Handle, IISMPartitionInstanceManager* ClientInstanceManager)"
  },
  {
    "label": "RegisterClientInstanceManagerProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClientInstanceManagerProvider(const FISMClientHandle& Handle, IISMPartitionInstanceManagerProvider* ClientInstanceManagerProvider)"
  },
  {
    "label": "RegisterISMComponentDescriptor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegisterISMComponentDescriptor(const FISMComponentDescriptor& Descriptor)"
  },
  {
    "label": "GetISMComponentDescriptor()",
    "kind": "Method",
    "detail": "Function (const FISMComponentDescriptor&)",
    "insertText": "GetISMComponentDescriptor(int32 DescriptorIndex)"
  },
  {
    "label": "RemoveISMInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveISMInstance(const FISMClientHandle& Handle, int32 InstanceIndex, bool* bOutIsEmpty = nullptr)"
  },
  {
    "label": "RemoveISMInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveISMInstances(const FISMClientHandle& Handle)"
  },
  {
    "label": "SelectISMInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectISMInstances(const FISMClientHandle& Handle, bool bSelect, const TSet<int32>& Indices)"
  },
  {
    "label": "SetISMInstanceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetISMInstanceTransform(const FISMClientHandle& Handle, int32 InstanceIndex, const FTransform& NewTransform, bool bTeleport, const TSortedMap<int32, TArray<FTransform>>& InstanceDefinition)"
  },
  {
    "label": "GetISMInstanceIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetISMInstanceIndex(const FISMClientHandle& Handle, const UInstancedStaticMeshComponent* ISMComponent, int32 ComponentIndex)"
  },
  {
    "label": "GetISMInstanceBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetISMInstanceBounds(const FISMClientHandle& Handle, const TSet<int32>& Indices)"
  },
  {
    "label": "ReserveISMInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveISMInstances(const FISMClientHandle& Handle, int32 AddedInstanceCount, const TSortedMap<int32, TArray<FTransform>>& InstanceDefinition)"
  },
  {
    "label": "IsISMComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsISMComponent(const UPrimitiveComponent* Component)"
  },
  {
    "label": "BeginUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUpdate()"
  },
  {
    "label": "EndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndUpdate()"
  },
  {
    "label": "UpdateHISMTrees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHISMTrees(bool bAsync, bool bForce)"
  },
  {
    "label": "ForEachClientComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachClientComponent(const FISMClientHandle& Handle, TFunctionRef<bool(UInstancedStaticMeshComponent*)> Callback)"
  },
  {
    "label": "ForEachClientSMInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachClientSMInstance(const FISMClientHandle& Handle, TFunctionRef<bool(FSMInstanceId)> Callback)"
  },
  {
    "label": "ForEachClientSMInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachClientSMInstance(const FISMClientHandle& Handle, int32 InstanceIndex, TFunctionRef<bool(FSMInstanceId)> Callback)"
  },
  {
    "label": "OutputStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputStats()"
  },
  {
    "label": "RemoveISMInstancesInternal()",
    "kind": "Method",
    "detail": "Function (protected : private : void)",
    "insertText": "RemoveISMInstancesInternal(FISMComponentData& ComponentData, FISMClientData& OwnerData, int32 InstanceIndex)"
  },
  {
    "label": "InvalidateComponentLightingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateComponentLightingCache(FISMComponentData& ComponentData)"
  },
  {
    "label": "AddInstanceToComponent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddInstanceToComponent(FISMComponentData& ComponentData, const FTransform& WorldTransform)"
  },
  {
    "label": "UpdateInstanceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstanceTransform(FISMComponentData& ComponentData, int32 ComponentInstanceIndex, const FTransform& WorldTransform, bool bTeleport)"
  },
  {
    "label": "RemoveInstanceFromComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstanceFromComponent(FISMComponentData& ComponentData, int32 ComponentInstanceIndex)"
  },
  {
    "label": "DestroyComponentIfEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyComponentIfEmpty(FISMComponentDescriptor& Descriptor, FISMComponentData& ComponentData)"
  },
  {
    "label": "ModifyComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyComponent(FISMComponentData& ComponentData)"
  },
  {
    "label": "CreateComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateComponent(const FISMComponentDescriptor& Descriptor, FISMComponentData& ComponentData)"
  },
  {
    "label": "ModifyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyActor()"
  },
  {
    "label": "GetSMInstanceDisplayName()",
    "kind": "Method",
    "detail": "Function (# endif private : FText)",
    "insertText": "GetSMInstanceDisplayName(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "GetSMInstanceTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSMInstanceTooltip(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "CanEditSMInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditSMInstance(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "CanMoveSMInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveSMInstance(const FSMInstanceId& InstanceId, const ETypedElementWorldType WorldType)"
  },
  {
    "label": "GetSMInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSMInstanceTransform(const FSMInstanceId& InstanceId, FTransform& OutInstanceTransform, bool bWorldSpace = false)"
  },
  {
    "label": "SetSMInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSMInstanceTransform(const FSMInstanceId& InstanceId, const FTransform& InstanceTransform, bool bWorldSpace = false, bool bMarkRenderStateDirty = false, bool bTeleport = false)"
  },
  {
    "label": "NotifySMInstanceMovementStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceMovementStarted(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "NotifySMInstanceMovementOngoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceMovementOngoing(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "NotifySMInstanceMovementEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceMovementEnded(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "NotifySMInstanceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceSelectionChanged(const FSMInstanceId& InstanceId, const bool bIsSelected)"
  },
  {
    "label": "ForEachSMInstanceInSelectionGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSMInstanceInSelectionGroup(const FSMInstanceId& InstanceId, TFunctionRef<bool(FSMInstanceId)> Callback)"
  },
  {
    "label": "CanDeleteSMInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteSMInstance(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "DeleteSMInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteSMInstances(TArrayView<const FSMInstanceId> InstanceIds)"
  },
  {
    "label": "CanDuplicateSMInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateSMInstance(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "DuplicateSMInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DuplicateSMInstances(TArrayView<const FSMInstanceId> InstanceIds, TArray<FSMInstanceId>& OutNewInstanceIds)"
  },
  {
    "label": "GetISMPartitionInstanceManager()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FISMPartitionInstanceManager)",
    "insertText": "GetISMPartitionInstanceManager(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "GetISMPartitionInstanceManagerChecked()",
    "kind": "Method",
    "detail": "Function (FISMPartitionInstanceManager)",
    "insertText": "GetISMPartitionInstanceManagerChecked(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "GetSMInstanceManager()",
    "kind": "Method",
    "detail": "Function (# endif protected : ISMInstanceManager*)",
    "insertText": "GetSMInstanceManager(const FSMInstanceId& InstanceId)"
  }
]