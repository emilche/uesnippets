[
  {
    "label": "zipf_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "zipf_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_ZIPF_DISTRIBUTION_H_ # define ABSL_RANDOM_ZIPF_DISTRIBUTION_H_ # include<cassert> # include<cmath> # include<istream> # include<limits> # include<ostream> # include<type_traits> # include \" absl / random / internal / iostream_state_saver . h \" # include \" absl / random / internal / traits . h \" # include \" absl / random / uniform_real_distribution . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<IntType = int> class zipf_distribution { public : using result_type = IntType ; class param_type { public : using distribution_type = zipf_distribution ;)",
    "insertText": "param_type(result_type k = (std::numeric_limits<IntType>::max)(), double q = 2.0, double v = 1.0)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (result_type)",
    "insertText": "k()"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (} private : class zipf_distribution ; double)",
    "insertText": "h(double x)"
  },
  {
    "label": "hinv()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "hinv(double x)"
  },
  {
    "label": "compute_s()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "compute_s()"
  },
  {
    "label": "pow_negative_q()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "pow_negative_q(double x)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (IntType k_ ; double q_ ; double v_ ; double one_minus_q_ ; double s_ ; double one_minus_q_inv_ ; double hxm_ ; double hx0_minus_hxm_ ;)",
    "insertText": "static_assert(random_internal::IsIntegral<IntType>::value, \"Class-template absl::zipf_distribution<> must be \" \"parameterized using an integral type.\")"
  },
  {
    "label": "zipf_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "zipf_distribution() : zipf_distribution((std::numeric_limits<IntType>::max)())"
  },
  {
    "label": "zipf_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "zipf_distribution(result_type k, double q = 2.0, double v = 1.0) : param_(k, q, v)"
  },
  {
    "label": "zipf_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "zipf_distribution(const param_type& p) : param_(p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g, const param_type& p)"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "q()"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "v()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (param_ = p ; })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const zipf_distribution& a, const zipf_distribution& b)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(q > 1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(v > 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(k > 0)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (one_minus_q_inv_ = 1 / one_minus_q_ ; double kMax = 1 8 4 4 6 7 4 4 0 7 3 7 0 9 5 4 9 5 6 8 . 0 ; double kd = static_cast<)",
    "insertText": "double(k)"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (kd = kMax ; } hxm_ =)",
    "insertText": "h(kd + 0.5)"
  },
  {
    "label": "use_precomputed()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "use_precomputed(v == 1.0 && q == 2.0)"
  },
  {
    "label": "use_precomputed()",
    "kind": "Method",
    "detail": "Function (const double h0x5 =)",
    "insertText": "use_precomputed(-1.0 / 1.5) : h(0.5)"
  },
  {
    "label": "elogv_q()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "elogv_q(v_ == 1.0) ? 1 : pow_negative_q(v_)"
  },
  {
    "label": "hx0_minus_hxm_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "hx0_minus_hxm_(h0x5 - elogv_q)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (x + = v_ ;)",
    "insertText": "return(one_minus_q_ == -1.0) ? (-1.0 / x) : (std::exp(std::log(x) * one_minus_q_) * one_minus_q_inv_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<IntType> template<URBG> zipf_distribution<IntType>::result_type zipf_distribution<IntType)",
    "insertText": "operator()( URBG& g, const param_type& p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (absl::uniform_real_distribution<double> uniform_double ; double k ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "uniform_double()",
    "kind": "Method",
    "detail": "Function (const double v =)",
    "insertText": "uniform_double(g)"
  },
  {
    "label": "hinv()",
    "kind": "Method",
    "detail": "Function (const double u = p . hxm_ + v* p . hx0_minus_hxm_ ; const double x = p .)",
    "insertText": "hinv(u)"
  },
  {
    "label": "rint()",
    "kind": "Method",
    "detail": "Function (k =)",
    "insertText": "rint(x)"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (const double h = p .)",
    "insertText": "h(k + 0.5)"
  },
  {
    "label": "pow_negative_q()",
    "kind": "Method",
    "detail": "Function (const double r = p .)",
    "insertText": "pow_negative_q(p.v_ + k)"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (} IntType ki = static_cast<)",
    "insertText": "IntType(k)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ki <= p.k_)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (using stream_type = random_internal::stream_format_type<IntType>::type ; auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "precision(random_internal::stream_precision_helper<double>::kPrecision)"
  },
  {
    "label": "stream_type()",
    "kind": "Method",
    "detail": "Function (os<<static_cast<)",
    "insertText": "stream_type(x.k()) << os.fill() << x.q() << os.fill() << x.v()"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using result_type = zipf_distribution<IntType>::result_type ; using param_type = zipf_distribution<IntType>::param_type ; using stream_type = random_internal::stream_format_type<IntType>::type ; stream_type k ; double q ; double v ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (is>> k>> q>> v ;)",
    "insertText": "if(!is.fail())"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(static_cast<result_type>(k), q, v))"
  }
]