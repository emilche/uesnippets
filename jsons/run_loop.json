[
  {
    "label": "RunLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunLoop"
  },
  {
    "label": "FakeSocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeSocketServer"
  },
  {
    "label": "WorkerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThread"
  },
  {
    "label": "RunLoop()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_RUN_LOOP_H_ # define TEST_RUN_LOOP_H_ # include<utility> # include \" absl / functional / any_invocable . h \" # include \" api / task_queue / task_queue_base . h \" # include \" rtc_base / thread . h \" namespace webrtc { namespace test { class RunLoop { public :)",
    "insertText": "RunLoop()"
  },
  {
    "label": "task_queue()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase*)",
    "insertText": "task_queue()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "task_queue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "task_queue()->PostTask(std::move(task))"
  },
  {
    "label": "FakeSocketServer()",
    "kind": "Method",
    "detail": "Function (} private : class FakeSocketServer : public rtc::SocketServer { public :)",
    "insertText": "FakeSocketServer()"
  },
  {
    "label": "FailNextWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailNextWait()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Wait(webrtc::TimeDelta max_wait_duration, bool process_io)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (rtc::Socket*)",
    "insertText": "CreateSocket(int family, int type)"
  },
  {
    "label": "WorkerThread()",
    "kind": "Method",
    "detail": "Function (private : bool fail_next_wait_ = false ; } ; class WorkerThread : public rtc::Thread { public :)",
    "insertText": "WorkerThread(rtc::SocketServer* ss)"
  }
]