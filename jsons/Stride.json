[
  {
    "label": "Stride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stride"
  },
  {
    "label": "InnerStride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerStride"
  },
  {
    "label": "OuterStride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OuterStride"
  },
  {
    "label": "Stride()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_STRIDE_H # define EIGEN_STRIDE_H namespace Eigen { template<int _OuterStrideAtCompileTime,int _InnerStrideAtCompileTime> class Stride { public : typedef Eigen::Index Index ; enum { InnerStrideAtCompileTime = _InnerStrideAtCompileTime,OuterStrideAtCompileTime = _OuterStrideAtCompileTime } ; EIGEN_DEVICE_FUNC)",
    "insertText": "Stride() : m_outer(OuterStrideAtCompileTime), m_inner(InnerStrideAtCompileTime)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(InnerStrideAtCompileTime != Dynamic && OuterStrideAtCompileTime != Dynamic)"
  },
  {
    "label": "Stride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Stride(Index outerStride, Index innerStride) : m_outer(outerStride), m_inner(innerStride)"
  },
  {
    "label": "Stride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Stride(const Stride& other) : m_outer(other.outer()), m_inner(other.inner())"
  },
  {
    "label": "outer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outer()"
  },
  {
    "label": "inner()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "inner()"
  },
  {
    "label": "InnerStride()",
    "kind": "Method",
    "detail": "Function (} protected : internal::variable_if_dynamic<Index,OuterStrideAtCompileTime> m_outer ; internal::variable_if_dynamic<Index,InnerStrideAtCompileTime> m_inner ; } ; template<int Value> class InnerStride : public Stride<0,Value> { typedef Stride<0,Value> Base ; public : EIGEN_DEVICE_FUNC)",
    "insertText": "InnerStride() : Base()"
  },
  {
    "label": "InnerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "InnerStride(Index v) : Base(0, v)"
  },
  {
    "label": "OuterStride()",
    "kind": "Method",
    "detail": "Function (} } ; template<int Value> class OuterStride : public Stride<Value,0> { typedef Stride<Value,0> Base ; public : EIGEN_DEVICE_FUNC)",
    "insertText": "OuterStride() : Base()"
  },
  {
    "label": "OuterStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "OuterStride(Index v) : Base(v,0)"
  }
]