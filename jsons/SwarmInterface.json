[
  {
    "label": "FMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessage"
  },
  {
    "label": "FInfoMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInfoMessage"
  },
  {
    "label": "FAlertMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAlertMessage"
  },
  {
    "label": "FTimingMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingMessage"
  },
  {
    "label": "FTaskRequestResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskRequestResponse"
  },
  {
    "label": "FTaskSpecification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskSpecification"
  },
  {
    "label": "FJobState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJobState"
  },
  {
    "label": "FTaskState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskState"
  },
  {
    "label": "FJobSpecification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJobSpecification"
  },
  {
    "label": "FSwarmInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSwarmInterface"
  },
  {
    "label": "FMessage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / Guid . h \" # if PLATFORM_MAC | | PLATFORM_LINUX # define USE_LOCAL_SWARM_INTERFACE 1 # else # define USE_LOCAL_SWARM_INTERFACE 0 # endif # include \" SwarmDefines . h \" namespace NSwarm { class FMessage { public :)",
    "insertText": "FMessage(void ) : Version( VERSION_1_0 ) , Type( MESSAGE_NONE)"
  },
  {
    "label": "FMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMessage(TMessageType NewType ) : Version( VERSION_1_0 ) , Type( NewType)"
  },
  {
    "label": "FMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMessage(TSwarmVersionValue NewVersion, TMessageType NewType ) : Version( NewVersion ) , Type( NewType)"
  },
  {
    "label": "FInfoMessage()",
    "kind": "Method",
    "detail": "Function (} TSwarmVersionValue Version ; TMessageType Type ; } ; class FInfoMessage : public FMessage { public :)",
    "insertText": "FInfoMessage(const TCHAR* InTextMessage ) : FMessage( VERSION_1_0, MESSAGE_INFO ) , TextMessage( InTextMessage)"
  },
  {
    "label": "FAlertMessage()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* TextMessage ; } ; class FAlertMessage : public FMessage { public :)",
    "insertText": "FAlertMessage(const FGuid& InJobGuid, TAlertLevel InAlertLevel, const FGuid& InObjectGuid, int InTypeId ) : FMessage( VERSION_1_0, MESSAGE_ALERT ) , JobGuid(InJobGuid) , AlertLevel(InAlertLevel) , ObjectGuid(InObjectGuid) , TypeId(InTypeId) , TextMessage(NULL)"
  },
  {
    "label": "FAlertMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAlertMessage(const FGuid& InJobGuid, TAlertLevel InAlertLevel, const FGuid& InObjectGuid, int InTypeId, const TCHAR* InTextMessage ) : FMessage( VERSION_1_0, MESSAGE_ALERT ) , JobGuid(InJobGuid) , AlertLevel(InAlertLevel) , ObjectGuid(InObjectGuid) , TypeId(InTypeId) , TextMessage( InTextMessage)"
  },
  {
    "label": "FTimingMessage()",
    "kind": "Method",
    "detail": "Function (} FGuid JobGuid ; TAlertLevel AlertLevel ; FGuid ObjectGuid ; int TypeId ; const TCHAR* TextMessage ; } ; class FTimingMessage : public FMessage { public :)",
    "insertText": "FTimingMessage(TProgressionState NewState, int InThreadNum ) : FMessage( VERSION_1_0, MESSAGE_TIMING ) , State( NewState ) , ThreadNum( InThreadNum)"
  },
  {
    "label": "FTaskRequestResponse()",
    "kind": "Method",
    "detail": "Function (} TProgressionState State ; int ThreadNum ; } ; class FTaskRequestResponse : public FMessage { public :)",
    "insertText": "FTaskRequestResponse(TTaskRequestResponseType NewResponseType ) : FMessage( VERSION_1_0, MESSAGE_TASK_REQUEST_RESPONSE ) , ResponseType( NewResponseType)"
  },
  {
    "label": "FTaskSpecification()",
    "kind": "Method",
    "detail": "Function (} TTaskRequestResponseType ResponseType ; } ; class FTaskSpecification : public FTaskRequestResponse { public :)",
    "insertText": "FTaskSpecification(FGuid TaskTaskGuid, const TCHAR* TaskParameters, TJobTaskFlags TaskFlags ) : FTaskRequestResponse( RESPONSE_TYPE_SPECIFICATION ) , TaskGuid( TaskTaskGuid ) , Parameters( TaskParameters ) , Flags( TaskFlags ) , Dependencies( NULL ) , DependencyCount( 0)"
  },
  {
    "label": "AddDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDependencies(const TCHAR** NewDependencies, uint32 NewDependencyCount)"
  },
  {
    "label": "FJobState()",
    "kind": "Method",
    "detail": "Function (Dependencies = NewDependencies ; DependencyCount = NewDependencyCount ; } FGuid TaskGuid ; const TCHAR* Parameters ; TJobTaskFlags Flags ; uint32 Cost ; const TCHAR** Dependencies ; uint32 DependencyCount ; } ; class FJobState : public FMessage { public :)",
    "insertText": "FJobState(FGuid NewJobGuid, TJobTaskState NewJobState ) : FMessage( VERSION_1_0, MESSAGE_JOB_STATE ) , JobGuid( NewJobGuid ) , JobState( NewJobState ) , JobMessage( NULL ) , JobExitCode( 0 ) , JobRunningTime( 0.0)"
  },
  {
    "label": "FTaskState()",
    "kind": "Method",
    "detail": "Function (} FGuid JobGuid ; TJobTaskState JobState ; const TCHAR* JobMessage ; int32 JobExitCode ; double JobRunningTime ; } ; class FTaskState : public FMessage { public :)",
    "insertText": "FTaskState(FGuid NewTaskGuid, TJobTaskState NewTaskState ) : FMessage( VERSION_1_0, MESSAGE_TASK_STATE ) , TaskGuid( NewTaskGuid ) , TaskState( NewTaskState ) , TaskMessage( NULL ) , TaskExitCode( 0 ) , TaskRunningTime( 0.0)"
  },
  {
    "label": "FJobSpecification()",
    "kind": "Method",
    "detail": "Function (} FGuid TaskGuid ; TJobTaskState TaskState ; const TCHAR* TaskMessage ; int32 TaskExitCode ; double TaskRunningTime ; } ; class FJobSpecification { public :)",
    "insertText": "FJobSpecification() : ExecutableName( NULL ) , Parameters( NULL ) , Flags( JOB_FLAG_USE_DEFAULTS ) , RequiredDependencies( NULL ) , RequiredDependencyCount( 0 ) , OptionalDependencies( NULL ) , OptionalDependencyCount( 0 ) , DescriptionKeys( NULL ) , DescriptionValues( NULL ) , DescriptionCount( 0)"
  },
  {
    "label": "FJobSpecification()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FJobSpecification(const TCHAR* JobExecutableName, const TCHAR* JobParameters, TJobTaskFlags JobFlags ) : ExecutableName( JobExecutableName ) , Parameters( JobParameters ) , Flags( JobFlags ) , RequiredDependencies( NULL ) , RequiredDependencyCount( 0 ) , OptionalDependencies( NULL ) , OptionalDependencyCount( 0 ) , DescriptionKeys( NULL ) , DescriptionValues( NULL ) , DescriptionCount( 0)"
  },
  {
    "label": "AddDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDependencies(const TCHAR** NewRequiredDependencies, uint32 NewRequiredDependencyCount, const TCHAR** NewOptionalDependencies, uint32 NewOptionalDependencyCount)"
  },
  {
    "label": "AddDescription()",
    "kind": "Method",
    "detail": "Function (RequiredDependencies = NewRequiredDependencies ; RequiredDependencyCount = NewRequiredDependencyCount ; OptionalDependencies = NewOptionalDependencies ; OptionalDependencyCount = NewOptionalDependencyCount ; } void)",
    "insertText": "AddDescription(const TCHAR** NewDescriptionKeys, const TCHAR** NewDescriptionValues, uint32 NewDescriptionCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (DescriptionKeys = NewDescriptionKeys ; DescriptionValues = NewDescriptionValues ; DescriptionCount = NewDescriptionCount ; } const TCHAR* ExecutableName ; const TCHAR* Parameters ; TJobTaskFlags Flags ; const TCHAR** RequiredDependencies ; uint32 RequiredDependencyCount ; const TCHAR** OptionalDependencies ; uint32 OptionalDependencyCount ; const TCHAR** DescriptionKeys ; const TCHAR** DescriptionValues ; uint32 DescriptionCount ; } ; typedef)",
    "insertText": "void(*FConnectionCallback )( FMessage* CallbackMessage, void* CallbackData)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (class FSwarmInterface { public : FSwarmInterface&)",
    "insertText": "Get(void)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const TCHAR* SwarmInterfacePath)"
  },
  {
    "label": "OpenConnection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OpenConnection(FConnectionCallback CallbackFunc, void* CallbackData, TLogFlags LoggingFlags, const TCHAR* OptionsFolder)"
  },
  {
    "label": "CloseConnection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CloseConnection(void)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SendMessage(const FMessage& Message)"
  },
  {
    "label": "AddChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddChannel(const TCHAR* FullPath, const TCHAR* ChannelName)"
  },
  {
    "label": "TestChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TestChannel(const TCHAR* ChannelName)"
  },
  {
    "label": "OpenChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OpenChannel(const TCHAR* ChannelName, TChannelFlags ChannelFlags)"
  },
  {
    "label": "CloseChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CloseChannel(int32 Channel)"
  },
  {
    "label": "WriteChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteChannel(int32 Channel, const void* Data, int32 DataSize)"
  },
  {
    "label": "ReadChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReadChannel(int32 Channel, void* Data, int32 DataSize)"
  },
  {
    "label": "OpenJob()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OpenJob(const FGuid& JobGuid)"
  },
  {
    "label": "BeginJobSpecification()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginJobSpecification(const FJobSpecification& Specification32, const FJobSpecification& Specification64)"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddTask(const FTaskSpecification& Specification)"
  },
  {
    "label": "EndJobSpecification()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EndJobSpecification(void)"
  },
  {
    "label": "CloseJob()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CloseJob(void)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Log(TVerbosityLevel Verbosity, TLogColour TextColour, const TCHAR* Message)"
  },
  {
    "label": "SetJobGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJobGuid(const FGuid& JobGuid)"
  },
  {
    "label": "IsJobProcessRunning()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsJobProcessRunning(int32* OutStatus)"
  },
  {
    "label": "FSwarmInterface()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSwarmInterface(void)"
  }
]