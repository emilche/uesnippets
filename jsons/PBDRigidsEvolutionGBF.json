[
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "IResimCacheBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IResimCacheBase"
  },
  {
    "label": "FEvolutionResimCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvolutionResimCache"
  },
  {
    "label": "FPBDRigidsEvolutionGBF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsEvolutionGBF"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ChaosPerfTest . h \" # include \" Chaos / Character / CharacterGroundConstraintContainer . h \" # include \" Chaos / Collision / SpatialAccelerationBroadPhase . h \" # include \" Chaos / Collision / SpatialAccelerationCollisionDetector . h \" # include \" Chaos / Evolution / SolverBodyContainer . h \" # include \" Chaos / PBDCollisionConstraints . h \" # include \" Chaos / PBDRigidClustering . h \" # include \" Chaos / PBDRigidsEvolution . h \" # include \" Chaos / PerParticleAddImpulses . h \" # include \" Chaos / PerParticleEtherDrag . h \" # include \" Chaos / PerParticleEulerStepVelocity . h \" # include \" Chaos / PerParticleExternalForces . h \" # include \" Chaos / PerParticleGravity . h \" # include \" Chaos / PerParticleInitForce . h \" # include \" Chaos / PerParticlePBDEulerStep . h \" # include \" Chaos / CCDUtilities . h \" # include \" Chaos / Particle / ParticleUtilities . h \" # include \" Chaos / PBDSuspensionConstraints . h \" # include \" Chaos / ChaosDebugDraw . h \" namespace Chaos { class FChaosArchive ; class IResimCacheBase ; class FEvolutionResimCache ; namespace CVars { FRealSingle HackMaxAngularVelocity ; FRealSingle HackMaxVelocity ; FRealSingle SmoothedPositionLerpRate ; bool bChaosCollisionCCDUseTightBoundingBox ; int32 ChaosCollisionCCDConstraintMaxProcessCount ; int32 ChaosSolverDrawCCDThresholds ; } using FPBDRigidsEvolutionCallback = TFunction<)",
    "insertText": "void(FReal Dt)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FPBDRigidsEvolutionIslandCallback = TFunction<)",
    "insertText": "void(int32 Island)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FPBDRigidsEvolutionInternalHandleCallback = TFunction<)",
    "insertText": "void(const FGeometryParticleHandle* OldParticle, FGeometryParticleHandle* NewParticle)"
  },
  {
    "label": "FPBDRigidsEvolutionGBF()",
    "kind": "Method",
    "detail": "Function (class FPBDRigidsEvolutionGBF : public FPBDRigidsEvolutionBase { public : using Base = FPBDRigidsEvolutionBase ; using FGravityForces = FPerParticleGravity ; using FCollisionConstraints = FPBDCollisionConstraints ; using FCollisionDetector = FSpatialAccelerationCollisionDetector ; using FExternalForces = FPerParticleExternalForces ; using FJointConstraints = FPBDJointConstraints ; int32 DefaultNumPositionIterations = 8 ; int32 DefaultNumVelocityIterations = 2 ; int32 DefaultNumProjectionIterations = 1 ; FRealSingle DefaultCollisionMarginFraction = 0 . 0 5 f ; FRealSingle DefaultCollisionMarginMax = 1 0 . 0 f ; FRealSingle DefaultCollisionCullDistance = 3 . 0 f ; FRealSingle DefaultCollisionMaxPushOutVelocity = 1 0 0 0 . 0 f ; FRealSingle DefaultCollisionDepenetrationVelocity = - 1 . 0 f ; int32 DefaultRestitutionThreshold = 1 0 0 0 ;)",
    "insertText": "FPBDRigidsEvolutionGBF(FPBDRigidsSOAs& InParticles, THandleArray<FChaosPhysicsMaterial>& SolverPhysicsMaterials, const TArray<ISimCallbackObject*>* InMidPhaseModifiers = nullptr, const TArray<ISimCallbackObject*>* InCCDModifiers = nullptr, const TArray<ISimCallbackObject*>* InStrainModifiers = nullptr, const TArray<ISimCallbackObject*>* InCollisionModifiers = nullptr, bool InIsSingleThreaded = false)"
  },
  {
    "label": "FPBDRigidsEvolutionGBF()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDRigidsEvolutionGBF()"
  },
  {
    "label": "SetPreIntegrateCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreIntegrateCallback(const FPBDRigidsEvolutionCallback& Cb)"
  },
  {
    "label": "SetPostIntegrateCallback()",
    "kind": "Method",
    "detail": "Function (PreIntegrateCallback = Cb ; } void)",
    "insertText": "SetPostIntegrateCallback(const FPBDRigidsEvolutionCallback& Cb)"
  },
  {
    "label": "SetPreSolveCallback()",
    "kind": "Method",
    "detail": "Function (PostIntegrateCallback = Cb ; } void)",
    "insertText": "SetPreSolveCallback(const FPBDRigidsEvolutionCallback& Cb)"
  },
  {
    "label": "SetPostSolveCallback()",
    "kind": "Method",
    "detail": "Function (PreSolveCallback = Cb ; } void)",
    "insertText": "SetPostSolveCallback(const FPBDRigidsEvolutionCallback& Cb)"
  },
  {
    "label": "SetPostDetectCollisionsCallback()",
    "kind": "Method",
    "detail": "Function (PostSolveCallback = Cb ; } void)",
    "insertText": "SetPostDetectCollisionsCallback(const FPBDRigidsEvolutionCallback& Cb)"
  },
  {
    "label": "SetPreSolveCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreSolveCallback(Cb)"
  },
  {
    "label": "SetInternalParticleInitilizationFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInternalParticleInitilizationFunction(const FPBDRigidsEvolutionInternalHandleCallback& Cb)"
  },
  {
    "label": "DoInternalParticleInitilization()",
    "kind": "Method",
    "detail": "Function (InternalParticleInitilization = Cb ; } void)",
    "insertText": "DoInternalParticleInitilization(const FGeometryParticleHandle* OldParticle, FGeometryParticleHandle* NewParticle)"
  },
  {
    "label": "InternalParticleInitilization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalParticleInitilization(OldParticle, NewParticle)"
  },
  {
    "label": "SetIsDeterministic()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetIsDeterministic(const bool bInIsDeterministic)"
  },
  {
    "label": "SetShockPropagationIterations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShockPropagationIterations(const int32 InPositionIts, const int32 InVelocityIts)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(const FReal Dt, const FReal MaxStepDt, const int32 MaxSteps)"
  },
  {
    "label": "AdvanceOneTimeStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceOneTimeStep(const FReal dt, const FSubStepInfo& SubStepInfo = FSubStepInfo())"
  },
  {
    "label": "SetParticleTransformSwept()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleTransformSwept(FGeometryParticleHandle* InParticle, const FVec3& InPos, const FRotation3& InRot, const bool bIsTeleport)"
  },
  {
    "label": "SetParticleKinematicTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleKinematicTarget(FGeometryParticleHandle* ParticleHandle, const FKinematicTarget& NewKinematicTarget)"
  },
  {
    "label": "ApplyParticleTransformCorrectionDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyParticleTransformCorrectionDelta(FGeometryParticleHandle* InParticle, const FVec3& InPosDelta, const FVec3& InRotDelta, const bool bApplyToConnectedBodies, const bool bInRecalculateFrictionOnConnectedBodies = true, const TArray<FParticleID>& ExcludeConnections = TArray<FParticleID>())"
  },
  {
    "label": "ApplyParticleTransformCorrection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyParticleTransformCorrection(FGeometryParticleHandle* InParticle, const FVec3& InPos, const FRotation3& InRot, const bool bApplyToConnectedBodies, const bool bInRecalculateFrictionOnConnectedBodies = true, const TArray<FParticleID>& ExcludeConnections = TArray<FParticleID>())"
  },
  {
    "label": "ApplySleepOnConnectedParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySleepOnConnectedParticles(FGeometryParticleHandle* InParticle)"
  },
  {
    "label": "OnParticleMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParticleMoved(FGeometryParticleHandle* InParticle, const FVec3& PrevX, const FRotation3& PrevR, const bool bIsTeleport)"
  },
  {
    "label": "SetParticleVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleVelocities(FGeometryParticleHandle* InParticle, const FVec3& InV, const FVec3f& InW)"
  },
  {
    "label": "ReloadParticlesCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadParticlesCache()"
  },
  {
    "label": "DestroyParticleCollisionsInAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyParticleCollisionsInAllocator(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "DestroyTransientConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTransientConstraints(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "DestroyTransientConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTransientConstraints()"
  },
  {
    "label": "ResetCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCollisions()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame(FReal Dt)"
  },
  {
    "label": "GetNonDisabledDynamicView()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "GetNonDisabledDynamicView().ParallelFor([&](auto& Particle, int32 Index) { Particle.Acceleration() = FVec3(0); Particle.AngularAcceleration() = FVec3(0); })"
  },
  {
    "label": "ParticleMaterialChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ParticleMaterialChanged(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "GetFirstClusteredPhysicsMaterial()",
    "kind": "Method",
    "detail": "Function (const FChaosPhysicsMaterial*)",
    "insertText": "GetFirstClusteredPhysicsMaterial(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "Integrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Integrate(FReal Dt)"
  },
  {
    "label": "ApplyKinematicTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyKinematicTargets(const FReal Dt, const FReal StepFraction)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "CreateExternalResimCache()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IResimCacheBase>)",
    "insertText": "CreateExternalResimCache()"
  },
  {
    "label": "SetCurrentStepResimCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentStepResimCache(IResimCacheBase* InCurrentStepResimCache)"
  },
  {
    "label": "GetBroadPhase()",
    "kind": "Method",
    "detail": "Function (FSpatialAccelerationBroadPhase&)",
    "insertText": "GetBroadPhase()"
  },
  {
    "label": "ResetVSmoothFromForces()",
    "kind": "Method",
    "detail": "Function (template<bool bPersistent> void)",
    "insertText": "ResetVSmoothFromForces(TPBDRigidParticleHandleImp<FReal, 3, bPersistent>& Particle)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FReal SmoothRate =)",
    "insertText": "Clamp(CVars::SmoothedPositionLerpRate, 0.0f, 1.0f)"
  },
  {
    "label": "FakeDT()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "FakeDT(FReal)1. / (FReal)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (const FVec3 PredictedLinearVelocity = Particle .)",
    "insertText": "GetV() + Particle.Acceleration() * FakeDT + Particle.LinearImpulseVelocity()"
  },
  {
    "label": "VSmooth()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "VSmooth() =FMath::Lerp(Particle.VSmooth(), PredictedLinearVelocity, SmoothRate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particle.AngularImpulseVelocity().IsNearlyZero() == false || Particle.AngularAcceleration().IsNearlyZero() == false)"
  },
  {
    "label": "GetW()",
    "kind": "Method",
    "detail": "Function (const FVec3 PredictedAngularVelocity = Particle .)",
    "insertText": "GetW() + Particle.AngularAcceleration() * FakeDT + Particle.AngularImpulseVelocity()"
  },
  {
    "label": "WSmooth()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "WSmooth() = FMath::Lerp(Particle.WSmooth(), PredictedAngularVelocity, SmoothRate)"
  },
  {
    "label": "Integrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Integrate(Dt)"
  },
  {
    "label": "AdvanceOneTimeStepImpl()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AdvanceOneTimeStepImpl(const FReal dt, const FSubStepInfo& SubStepInfo)"
  },
  {
    "label": "ApplyParticleTransformCorrectionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyParticleTransformCorrectionImpl(FGeometryParticleHandle* InParticle, const FRigidTransform3& InTransform, const bool bInRecalculateFriction = true)"
  },
  {
    "label": "GetConnectedParticles()",
    "kind": "Method",
    "detail": "Function (TArray<FGeometryParticleHandle*>)",
    "insertText": "GetConnectedParticles(FGeometryParticleHandle* InParticle, const TArray<FParticleID>& ExcludeConnections = TArray<FParticleID>())"
  },
  {
    "label": "UpdateInertiaConditioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInertiaConditioning()"
  },
  {
    "label": "GetCurrentStepResimCache()",
    "kind": "Method",
    "detail": "Function (FEvolutionResimCache*)",
    "insertText": "GetCurrentStepResimCache()"
  },
  {
    "label": "TestModeResetCollisions()",
    "kind": "Method",
    "detail": "Function (FRigidClustering Clustering ; FPBDJointConstraints JointConstraints ; FPBDSuspensionConstraints SuspensionConstraints ; FCharacterGroundConstraintContainer CharacterGroundConstraints ; FGravityForces GravityForces ; FCollisionConstraints CollisionConstraints ; FSpatialAccelerationBroadPhase BroadPhase ; FSpatialAccelerationCollisionDetector CollisionDetector ; FPBDRigidsEvolutionCallback PreIntegrateCallback ; FPBDRigidsEvolutionCallback PostIntegrateCallback ; FPBDRigidsEvolutionCallback PostDetectCollisionsCallback ; FPBDRigidsEvolutionCallback PreSolveCallback ; FPBDRigidsEvolutionCallback PostSolveCallback ; FPBDRigidsEvolutionInternalHandleCallback InternalParticleInitilization ; FEvolutionResimCache* CurrentStepResimCacheImp ; const TArray<ISimCallbackObject*>* MidPhaseModifiers ; const TArray<ISimCallbackObject*>* CCDModifiers ; const TArray<ISimCallbackObject*>* CollisionModifiers ; FCCDManager CCDManager ; bool bIsDeterministic ; # if CHAOS_EVOLUTION_COLLISION_TESTMODE void)",
    "insertText": "TestModeResetCollisions()"
  },
  {
    "label": "SetDebugDrawScene()",
    "kind": "Method",
    "detail": "Function (# endif # if CHAOS_DEBUG_DRAW public : void)",
    "insertText": "SetDebugDrawScene(const ChaosDD::Private::FChaosDDScenePtr& InCDDScene)"
  }
]