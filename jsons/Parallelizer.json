[
  {
    "label": "GemmParallelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GemmParallelInfo"
  },
  {
    "label": "manage_multi_threading()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PARALLELIZER_H # define EIGEN_PARALLELIZER_H # if EIGEN_HAS_CXX11_ATOMIC # include<atomic> # endif namespace Eigen { namespace internal { void)",
    "insertText": "manage_multi_threading(Action action, int* v)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (int m_maxThreads = - 1 ;)",
    "insertText": "EIGEN_UNUSED_VARIABLE(m_maxThreads) if(action==SetAction)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(v!=0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_maxThreads =* v ; } else)",
    "insertText": "if(action==GetAction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_HAS_OPENMP)",
    "insertText": "if(m_maxThreads>0)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (# else* v = 1 ; # endif } else {)",
    "insertText": "eigen_internal_assert(false)"
  },
  {
    "label": "initParallel()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "initParallel()"
  },
  {
    "label": "manage_multi_threading()",
    "kind": "Method",
    "detail": "Function (int nbt ;)",
    "insertText": "manage_multi_threading(GetAction, &nbt)"
  },
  {
    "label": "manage_caching_sizes()",
    "kind": "Method",
    "detail": "Function (std::ptrdiff_t l1,l2,l3 ;)",
    "insertText": "manage_caching_sizes(GetAction, &l1, &l2, &l3)"
  },
  {
    "label": "nbThreads()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "nbThreads()"
  },
  {
    "label": "manage_multi_threading()",
    "kind": "Method",
    "detail": "Function (int ret ;)",
    "insertText": "manage_multi_threading(GetAction, &ret)"
  },
  {
    "label": "manage_multi_threading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "manage_multi_threading(SetAction, &v)"
  },
  {
    "label": "GemmParallelInfo()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<Index> struct GemmParallelInfo {)",
    "insertText": "GemmParallelInfo() : sync(-1), users(0), lhs_start(0), lhs_length(0)"
  },
  {
    "label": "parallelize_gemm()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_CXX11_ATOMIC std::atomic<Index> sync ; std::atomic<int> users ; # else Index volatile sync ; int volatile users ; # endif Index lhs_start ; Index lhs_length ; } ; template<bool Condition,Functor,Index> void)",
    "insertText": "parallelize_gemm(const Functor& func, Index rows, Index cols, Index depth, bool transpose)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(! defined(EIGEN_HAS_OPENMP)) || defined(EIGEN_USE_BLAS) || ((!EIGEN_HAS_CXX11_ATOMIC) && !(EIGEN_ARCH_i386_OR_x86_64)) EIGEN_UNUSED_VARIABLE(depth)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(transpose)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "func(0,rows, 0,cols)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (# else Index size = transpose ? rows : cols ; Index pb_max_threads = std::max<)",
    "insertText": "Index(1,size / Functor::Traits::nr)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index threads = std::min<)",
    "insertText": "Index(nbThreads(), pb_max_threads)"
  },
  {
    "label": "initParallelSession()",
    "kind": "Method",
    "detail": "Function (func .)",
    "insertText": "initParallelSession(threads)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(GemmParallelInfo<Index>,info,threads,0)"
  },
  {
    "label": "num_threads()",
    "kind": "Method",
    "detail": "Function (# pragma omp parallel)",
    "insertText": "num_threads(threads)"
  },
  {
    "label": "omp_get_thread_num()",
    "kind": "Method",
    "detail": "Function (Index i =)",
    "insertText": "omp_get_thread_num()"
  },
  {
    "label": "omp_get_num_threads()",
    "kind": "Method",
    "detail": "Function (Index actual_threads =)",
    "insertText": "omp_get_num_threads()"
  },
  {
    "label": "blockCols()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "blockCols(cols / actual_threads) & ~Index(0x3)"
  },
  {
    "label": "blockRows()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "blockRows(rows / actual_threads)"
  },
  {
    "label": "blockRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blockRows(blockRows/Functor::Traits::mr)"
  },
  {
    "label": "actualBlockRows()",
    "kind": "Method",
    "detail": "Function (Index r0 = i* blockRows ; Index)",
    "insertText": "actualBlockRows(i+1==actual_threads)"
  },
  {
    "label": "actualBlockCols()",
    "kind": "Method",
    "detail": "Function (Index c0 = i* blockCols ; Index)",
    "insertText": "actualBlockCols(i+1==actual_threads)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (info [ i ] . lhs_start = r0 ; info [ i ] . lhs_length = actualBlockRows ;)",
    "insertText": "if(transpose) func(c0, actualBlockCols, 0, rows, info)"
  }
]