[
  {
    "label": "Lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lock"
  },
  {
    "label": "ILMTHREAD_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_ILM_THREAD_MUTEX_H # define INCLUDED_ILM_THREAD_MUTEX_H # include \" IlmThreadConfig . h \" # include \" IlmThreadExport . h \" # include \" IlmThreadNamespace . h \" # if ILMTHREAD_THREADING_ENABLED # include<mutex> # endif ILMTHREAD_INTERNAL_NAMESPACE_HEADER_ENTER # if ILMTHREAD_THREADING_ENABLED using Mutex)",
    "insertText": "ILMTHREAD_DEPRECATED(\"replace with std::mutex\")"
  },
  {
    "label": "ILMTHREAD_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (class Lock { public :)",
    "insertText": "ILMTHREAD_DEPRECATED(\"replace with std::lock_guard or std::unique_lock\") Lock (const Mutex& m, bool autoLock = true) : _mutex (const_cast<Mutex&> (m)), _locked (false)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (_mutex .)",
    "insertText": "lock()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (_locked = true ; } } ~)",
    "insertText": "Lock()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Lock(const Lock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Lock&)",
    "insertText": "operator(const Lock&)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(Lock&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Lock&)",
    "insertText": "operator(Lock&&)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "acquire()"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (_locked = true ; } void)",
    "insertText": "release()"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (_locked = false ; _mutex .)",
    "insertText": "unlock()"
  },
  {
    "label": "locked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "locked()"
  }
]