[
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "FImaginaryFiBData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImaginaryFiBData"
  },
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSimpleFTextKeyStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleFTextKeyStorage"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "FFindInBlueprintsNoResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsNoResult"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FFindInBlueprintsGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsGraphNode"
  },
  {
    "label": "this",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "this"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FFindInBlueprintsPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsPin"
  },
  {
    "label": "FFindInBlueprintsProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsProperty"
  },
  {
    "label": "FFindInBlueprintsGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsGraph"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "ConstructSearchTermFromFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConstructSearchTermFromFunction(const UFunction* Function, FString& SearchTerm)"
  },
  {
    "label": "AsFText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsFText(TSharedPtr< FJsonValue > InJsonValue, const TMap<int32, FText>& InLookupTable)"
  },
  {
    "label": "AsFText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsFText(int32 InValue, const TMap<int32, FText>& InLookupTable)"
  },
  {
    "label": "IsTextEqualToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextEqualToString(const FText& InText, const FString& InString)"
  },
  {
    "label": "GetPinTypeAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPinTypeAsString(const FEdGraphPinType& InPinType)"
  },
  {
    "label": "ParsePinType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParsePinType(FText InKey, FText InValue, FEdGraphPinType& InOutPinType)"
  },
  {
    "label": "ExpandAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAllChildren(FSearchResult InTreeNode, TSharedPtr<STreeView<TSharedPtr<FFindInBlueprintsResult>>> InTreeView)"
  },
  {
    "label": "FFindInBlueprintsGraphNode()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FFindInBlueprintsGraphNode()"
  },
  {
    "label": "FFindInBlueprintsPin()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FFindInBlueprintsPin(FString InSchemaName)"
  },
  {
    "label": "FFindInBlueprintsProperty()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FFindInBlueprintsProperty()"
  },
  {
    "label": "FFindInBlueprintsGraph()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FFindInBlueprintsGraph(EGraphType InGraphType)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<class FBlueprintEditor> InBlueprintEditor = nullptr)"
  },
  {
    "label": "OnCacheStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCacheStarted(EFiBCacheOpType InOpType, EFiBCacheOpFlags InOpFlags)"
  },
  {
    "label": "OnCacheComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCacheComplete(EFiBCacheOpType InOpType, EFiBCacheOpFlags InOpFlags)"
  },
  {
    "label": "CacheAllBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheAllBlueprints(const FFindInBlueprintCachingOptions& InOptions)"
  },
  {
    "label": "CloseHostTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHostTab()"
  },
  {
    "label": "ClearResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResults()"
  },
  {
    "label": "UpdateSearchResults()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateSearchResults( double InCurrentTime, float InDeltaTime )"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "OnSearchTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextChanged(const FText& Text)"
  },
  {
    "label": "OnSearchTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextCommitted(const FText& Text, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildren( FSearchResult InItem, TArray< FSearchResult >& OutChildren )"
  },
  {
    "label": "OnTreeSelectionDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeSelectionDoubleClicked( FSearchResult Item )"
  },
  {
    "label": "OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRow(FSearchResult InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "ConditionallyAddCacheBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyAddCacheBar()"
  },
  {
    "label": "OnRemoveCacheBar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRemoveCacheBar()"
  },
  {
    "label": "OnCacheAllUnindexedBlueprints()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCacheAllUnindexedBlueprints()"
  },
  {
    "label": "OnExportUnindexedAssetList()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnExportUnindexedAssetList()"
  },
  {
    "label": "OnCacheAllBlueprints()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCacheAllBlueprints(const FFindInBlueprintCachingOptions& InOptions)"
  },
  {
    "label": "OnCancelCacheAll()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCancelCacheAll()"
  },
  {
    "label": "OnContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnContextMenuOpening()"
  },
  {
    "label": "SelectAllItemsHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllItemsHelper(FSearchResult InItemToSelect)"
  },
  {
    "label": "OnSelectAllAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectAllAction()"
  },
  {
    "label": "OnCopyAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopyAction()"
  },
  {
    "label": "OnOpenGlobalFindResults()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnOpenGlobalFindResults()"
  },
  {
    "label": "OnHostTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHostTabClosed(TSharedRef<SDockTab> DockTab)"
  },
  {
    "label": "OnLockButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnLockButtonClicked()"
  }
]