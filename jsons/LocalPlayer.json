[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSlateUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUser"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FSceneViewProjectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewProjectionData"
  },
  {
    "label": "FLocalPlayerContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalPlayerContext"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AGameStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameStateBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "EAspectRatioAxisConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioAxisConstraint"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FSceneViewInitOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewInitOptions"
  },
  {
    "label": "FViewElementDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewElementDrawer"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FViewElementDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewElementDrawer"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "FOptionalAllottedSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalAllottedSize"
  },
  {
    "label": "FLockedViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLockedViewState"
  },
  {
    "label": "FLocalPlayerContext()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FLocalPlayerContext()"
  },
  {
    "label": "FLocalPlayerContext()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FLocalPlayerContext(const class ULocalPlayer* InLocalPlayer, UWorld* InWorld = nullptr)"
  },
  {
    "label": "FLocalPlayerContext()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FLocalPlayerContext(const class APlayerController* InPlayerController)"
  },
  {
    "label": "SetLocalPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalPlayer( const class ULocalPlayer* InLocalPlayer )"
  },
  {
    "label": "SetPlayerController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerController( const class APlayerController* InPlayerController )"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "HandleDNCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDNCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleExitCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleExitCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleListMoveBodyCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListMoveBodyCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleListAwakeBodiesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListAwakeBodiesCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleListSimBodiesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSimBodiesCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleMoveComponentTimesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMoveComponentTimesCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleListSkelMeshesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSkelMeshesCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleListPawnComponentsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListPawnComponentsCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleExecCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleExecCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleToggleDrawEventsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleDrawEventsCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleToggleStreamingVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleStreamingVolumesCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "ExecMacro()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecMacro( const TCHAR* Filename, FOutputDevice& Ar )"
  },
  {
    "label": "GetSlateUser()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateUser>)",
    "insertText": "GetSlateUser()"
  },
  {
    "label": "CalcSceneViewInitOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalcSceneViewInitOptions(\n\t\tstruct FSceneViewInitOptions& OutInitOptions,\n\t\tFViewport* Viewport,\n\t\tclass FViewElementDrawer* ViewDrawer = NULL,\n\t\tint32 StereoViewIndex = INDEX_NONE)"
  },
  {
    "label": "PlayerAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerAdded(class UGameViewportClient* InViewportClient, int32 InControllerID)"
  },
  {
    "label": "PlayerAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerAdded(class UGameViewportClient* InViewportClient, FPlatformUserId InUserId)"
  },
  {
    "label": "InitOnlineSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOnlineSession()"
  },
  {
    "label": "PlayerRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerRemoved()"
  },
  {
    "label": "SpawnPlayActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayActor(const FString& URL,FString& OutError, UWorld* InWorld)"
  },
  {
    "label": "SendSplitJoin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSplitJoin(TArray<FString>& Options)"
  },
  {
    "label": "SetControllerId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerId(int32 NewControllerId)"
  },
  {
    "label": "SetPlatformUserId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformUserId(FPlatformUserId InPlatformUserId)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "SetCachedUniqueNetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedUniqueNetId(const FUniqueNetIdRepl& NewUniqueNetId)"
  },
  {
    "label": "FOptionalAllottedSize()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FOptionalAllottedSize(std::nullptr_t Empty)"
  },
  {
    "label": "FOptionalAllottedSize()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FOptionalAllottedSize(const FVector2d* InVector2D)"
  },
  {
    "label": "FOptionalAllottedSize()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FOptionalAllottedSize(const FVector2f* InVector2D)"
  },
  {
    "label": "GetPixelBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelBoundingBox(const FBox& ActorBox, FVector2D& OutLowerLeft, FVector2D& OutUpperRight, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetPixelBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelBoundingBox(const FSceneViewProjectionData& ProjectionData, const FBox& ActorBox, FVector2D& OutLowerLeft, FVector2D& OutUpperRight, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetPixelBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelBoundingBox(const FBox& ActorBox, FVector2D& OutLowerLeft, FVector2D& OutUpperRight, FOptionalAllottedSize OptionalAllotedSize)"
  },
  {
    "label": "GetPixelBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelBoundingBox(const FSceneViewProjectionData& ProjectionData, const FBox& ActorBox, FVector2D& OutLowerLeft, FVector2D& OutUpperRight, FOptionalAllottedSize OptionalAllotedSize)"
  },
  {
    "label": "GetPixelPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelPoint(const FVector& InPoint, FVector2D& OutPoint, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetPixelPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelPoint(const FSceneViewProjectionData& ProjectionData, const FVector& InPoint, FVector2D& OutPoint, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetPixelPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelPoint(const FVector& InPoint, FVector2D& OutPoint, FOptionalAllottedSize OptionalAllotedSize)"
  },
  {
    "label": "GetPixelPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelPoint(const FSceneViewProjectionData& ProjectionData, const FVector& InPoint, FVector2D& OutPoint, FOptionalAllottedSize OptionalAllotedSize)"
  },
  {
    "label": "CleanupViewState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupViewState(FStringView MidParentRootPath = {})"
  }
]