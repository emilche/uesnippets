[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSlateUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUser"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FSceneViewProjectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewProjectionData"
  },
  {
    "label": "FLocalPlayerContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalPlayerContext"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AGameStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameStateBase"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "EAspectRatioAxisConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioAxisConstraint"
  },
  {
    "label": "FSceneViewInitOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewInitOptions"
  },
  {
    "label": "FViewElementDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewElementDrawer"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FOptionalAllottedSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalAllottedSize"
  },
  {
    "label": "FLockedViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLockedViewState"
  },
  {
    "label": "INVALID_CONTROLLERID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" Input / Reply . h \" # include \" Online / CoreOnline . h \" # include \" SceneTypes . h \" # include \" Engine / Player . h \" # include \" GameFramework / OnlineReplStructs . h \" # include \" GameFramework / PlayerController . h \" # include \" Subsystems / LocalPlayerSubsystem . h \" # include \" Subsystems / SubsystemCollection . h \" # include \" LocalPlayer . generated . h \" # define)",
    "insertText": "INVALID_CONTROLLERID(-1)"
  },
  {
    "label": "FLocalPlayerContext()",
    "kind": "Method",
    "detail": "Function (class FSceneView ; class FSlateUser ; class FViewport ; class UGameInstance ; class UGameViewportClient ; class ULocalPlayer ; struct FMinimalViewInfo ; struct FSceneViewProjectionData ; struct FLocalPlayerContext {)",
    "insertText": "FLocalPlayerContext()"
  },
  {
    "label": "FLocalPlayerContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLocalPlayerContext(const class ULocalPlayer* InLocalPlayer, UWorld* InWorld = nullptr)"
  },
  {
    "label": "FLocalPlayerContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLocalPlayerContext(const class APlayerController* InPlayerController)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "IsFromLocalPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFromLocalPlayer(const AActor* ActorToTest)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetGameInstance()",
    "kind": "Method",
    "detail": "Function (UGameInstance*)",
    "insertText": "GetGameInstance()"
  },
  {
    "label": "GetLocalPlayer()",
    "kind": "Method",
    "detail": "Function (class ULocalPlayer*)",
    "insertText": "GetLocalPlayer()"
  },
  {
    "label": "GetPlayerController()",
    "kind": "Method",
    "detail": "Function (class APlayerController*)",
    "insertText": "GetPlayerController()"
  },
  {
    "label": "GetPlayerController()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetPlayerController(bool bCastChecked = false)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return Cast<)",
    "insertText": "T(GetPlayerController())"
  },
  {
    "label": "GetGameState()",
    "kind": "Method",
    "detail": "Function (} } class AGameStateBase*)",
    "insertText": "GetGameState()"
  },
  {
    "label": "GetGameState()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetGameState(bool bCastChecked = false)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return Cast<)",
    "insertText": "T(GetGameState())"
  },
  {
    "label": "GetPlayerState()",
    "kind": "Method",
    "detail": "Function (} } class APlayerState*)",
    "insertText": "GetPlayerState()"
  },
  {
    "label": "GetPlayerState()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetPlayerState(bool bCastChecked = false)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return Cast<)",
    "insertText": "T(GetPlayerState())"
  },
  {
    "label": "GetHUD()",
    "kind": "Method",
    "detail": "Function (} } class AHUD*)",
    "insertText": "GetHUD()"
  },
  {
    "label": "GetHUD()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetHUD(bool bCastChecked = false)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return Cast<)",
    "insertText": "T(GetHUD())"
  },
  {
    "label": "GetPawn()",
    "kind": "Method",
    "detail": "Function (} } class APawn*)",
    "insertText": "GetPawn()"
  },
  {
    "label": "GetPawn()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetPawn(bool bCastChecked = false)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return Cast<)",
    "insertText": "T(GetPawn())"
  },
  {
    "label": "SetLocalPlayer()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "SetLocalPlayer(const class ULocalPlayer* InLocalPlayer)"
  },
  {
    "label": "SetPlayerController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerController(const class APlayerController* InPlayerController)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<class ULocalPlayer> LocalPlayer ; TWeakObjectPtr<UWorld> World ; } ;)",
    "insertText": "UCLASS(Within=Engine, config=Engine, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ULocalPlayer(FVTableHelper& Helper) : Super(Helper), SlateOperations(FReply::Unhandled())"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(ULocalPlayer, FOnControllerIdChanged, int32 , int32)"
  },
  {
    "label": "OnControllerIdChanged()",
    "kind": "Method",
    "detail": "Function (FOnControllerIdChanged&)",
    "insertText": "OnControllerIdChanged()"
  },
  {
    "label": "OnPlatformUserIdChanged()",
    "kind": "Method",
    "detail": "Function (FOnPlatformUserIdChanged&)",
    "insertText": "OnPlatformUserIdChanged()"
  },
  {
    "label": "OnPlayerControllerChanged()",
    "kind": "Method",
    "detail": "Function (FOnPlayerControllerChanged&)",
    "insertText": "OnPlayerControllerChanged()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (FOnControllerIdChanged OnControllerIdChangedEvent ; FPlatformUserId PlatformUserId ; FOnPlatformUserIdChanged OnPlatformUserIdChangedEvent ; FOnPlayerControllerChanged OnPlayerControllerChangedEvent ; FObjectSubsystemCollection<ULocalPlayerSubsystem> SubsystemCollection ; public : void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "ReceivedPlayerController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPlayerController(APlayerController* NewController)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (public : # if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd,FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Editor()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "Exec_Editor(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDNCommand()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HandleDNCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleExitCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleExitCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListMoveBodyCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListMoveBodyCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListAwakeBodiesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListAwakeBodiesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSimBodiesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSimBodiesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleMoveComponentTimesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMoveComponentTimesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSkelMeshesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSkelMeshesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListPawnComponentsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListPawnComponentsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleExecCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleExecCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleToggleDrawEventsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleDrawEventsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleToggleStreamingVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleStreamingVolumesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetViewPoint()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GetViewPoint(FMinimalViewInfo& OutViewInfo)"
  },
  {
    "label": "ExecMacro()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecMacro(const TCHAR* Filename, FOutputDevice& Ar)"
  },
  {
    "label": "GetSlateOperations()",
    "kind": "Method",
    "detail": "Function (FReply SlateOperations ; public : FReply&)",
    "insertText": "GetSlateOperations()"
  },
  {
    "label": "GetSlateUser()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FSlateUser>)",
    "insertText": "GetSlateUser()"
  },
  {
    "label": "GetIndexInGameInstance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndexInGameInstance()"
  },
  {
    "label": "GetSubsystemBase()",
    "kind": "Method",
    "detail": "Function (ULocalPlayerSubsystem*)",
    "insertText": "GetSubsystemBase(TSubclassOf<ULocalPlayerSubsystem> SubsystemClass)"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem()"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem(const ULocalPlayer* LocalPlayer)"
  },
  {
    "label": "GetSubsystemArrayCopy()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TArray<TSubsystemClass*>)",
    "insertText": "GetSubsystemArrayCopy()"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> void)",
    "insertText": "ForEachSubsystem(TFunctionRef<void(TSubsystemClass*)> Operation)"
  },
  {
    "label": "CalcSceneViewInitOptions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CalcSceneViewInitOptions(struct FSceneViewInitOptions& OutInitOptions, FViewport* Viewport, class FViewElementDrawer* ViewDrawer = NULL, int32 StereoViewIndex = INDEX_NONE)"
  },
  {
    "label": "CalcSceneView()",
    "kind": "Method",
    "detail": "Function (FSceneView*)",
    "insertText": "CalcSceneView(class FSceneViewFamily* ViewFamily, FVector& OutViewLocation, FRotator& OutViewRotation, FViewport* Viewport, class FViewElementDrawer* ViewDrawer = NULL, int32 StereoViewIndex = INDEX_NONE)"
  },
  {
    "label": "PlayerAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerAdded(class UGameViewportClient* InViewportClient, int32 InControllerID)"
  },
  {
    "label": "PlayerAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerAdded(class UGameViewportClient* InViewportClient, FPlatformUserId InUserId)"
  },
  {
    "label": "InitOnlineSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOnlineSession()"
  },
  {
    "label": "PlayerRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerRemoved()"
  },
  {
    "label": "SpawnPlayActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayActor(const FString& URL,FString& OutError, UWorld* InWorld)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnPreBeginHandshakeCompleteDelegate)"
  },
  {
    "label": "PreBeginHandshake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreBeginHandshake(const FOnPreBeginHandshakeCompleteDelegate& OnComplete)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnComplete .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "SendSplitJoin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendSplitJoin(TArray<FString>& Options)"
  },
  {
    "label": "SetControllerId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerId(int32 NewControllerId)"
  },
  {
    "label": "GetControllerId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetControllerId()"
  },
  {
    "label": "GetPlatformUserId()",
    "kind": "Method",
    "detail": "Function (FPlatformUserId)",
    "insertText": "GetPlatformUserId()"
  },
  {
    "label": "GetLocalPlayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLocalPlayerIndex()"
  },
  {
    "label": "GetNickname()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNickname()"
  },
  {
    "label": "GetGameLoginOptions()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameLoginOptions()"
  },
  {
    "label": "GetUniqueNetIdFromCachedControllerId()",
    "kind": "Method",
    "detail": "Function (} FUniqueNetIdRepl)",
    "insertText": "GetUniqueNetIdFromCachedControllerId()"
  },
  {
    "label": "GetUniqueNetIdForPlatformUser()",
    "kind": "Method",
    "detail": "Function (FUniqueNetIdRepl)",
    "insertText": "GetUniqueNetIdForPlatformUser()"
  },
  {
    "label": "GetCachedUniqueNetId()",
    "kind": "Method",
    "detail": "Function (FUniqueNetIdRepl)",
    "insertText": "GetCachedUniqueNetId()"
  },
  {
    "label": "SetCachedUniqueNetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedUniqueNetId(const FUniqueNetIdRepl& NewUniqueNetId)"
  },
  {
    "label": "GetPreferredUniqueNetId()",
    "kind": "Method",
    "detail": "Function (FUniqueNetIdRepl)",
    "insertText": "GetPreferredUniqueNetId()"
  },
  {
    "label": "FOptionalAllottedSize()",
    "kind": "Method",
    "detail": "Function (struct FOptionalAllottedSize { FVector2f Value ;)",
    "insertText": "FOptionalAllottedSize(std::nullptr_t Empty)"
  },
  {
    "label": "FOptionalAllottedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOptionalAllottedSize(const FVector2d* InVector2D)"
  },
  {
    "label": "FOptionalAllottedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOptionalAllottedSize(const FVector2f* InVector2D)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetPixelBoundingBox()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetPixelBoundingBox(const FBox& ActorBox, FVector2D& OutLowerLeft, FVector2D& OutUpperRight, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetPixelBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelBoundingBox(const FSceneViewProjectionData& ProjectionData, const FBox& ActorBox, FVector2D& OutLowerLeft, FVector2D& OutUpperRight, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetPixelPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelPoint(const FVector& InPoint, FVector2D& OutPoint, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetPixelPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPixelPoint(const FSceneViewProjectionData& ProjectionData, const FVector& InPoint, FVector2D& OutPoint, const FVector2f* OptionalAllotedSize = nullptr)"
  },
  {
    "label": "GetProjectionData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProjectionData(FViewport* Viewport, FSceneViewProjectionData& ProjectionData, int32 StereoViewIndex = INDEX_NONE)"
  },
  {
    "label": "IsPrimaryPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrimaryPlayer()"
  },
  {
    "label": "CleanupViewState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupViewState(FStringView MidParentRootPath = {})"
  }
]