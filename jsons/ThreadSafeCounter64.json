[
  {
    "label": "FThreadSafeCounter64",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadSafeCounter64"
  },
  {
    "label": "FThreadSafeCounter64()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / ThreadSafeCounter . h \" class FThreadSafeCounter64 { public : typedef int64 IntegerType ;)",
    "insertText": "FThreadSafeCounter64()"
  },
  {
    "label": "FThreadSafeCounter64()",
    "kind": "Method",
    "detail": "Function (Counter = 0 ; })",
    "insertText": "FThreadSafeCounter64(const FThreadSafeCounter64& Other)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Counter = Other .)",
    "insertText": "GetValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FThreadSafeCounter64&)",
    "insertText": "operator(const FThreadSafeCounter64& Other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Other.GetValue())"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (Counter = Value ; } int64)",
    "insertText": "Increment()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Add(int64 Amount)"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Decrement()"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Subtract(int64 Amount)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Set(int64 Value)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Reset()"
  }
]