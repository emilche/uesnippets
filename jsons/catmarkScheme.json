[
  {
    "label": "GetTopologicalSplitType()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_SDC_CATMARK_SCHEME_H # define OPENSUBDIV3_SDC_CATMARK_SCHEME_H # include \" . . / version . h \" # include \" . . / sdc / scheme . h \" # include<cassert> # include<cmath> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Sdc { template<> Split Scheme<SCHEME_CATMARK)",
    "insertText": "GetTopologicalSplitType()"
  },
  {
    "label": "GetNumFaces()",
    "kind": "Method",
    "detail": "Function (typedef MASK::Weight Weight ; int faceCount = edge .)",
    "insertText": "GetNumFaces()"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumVertexWeights(2)"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumEdgeWeights(0)"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumFaceWeights(faceCount)"
  },
  {
    "label": "SetFaceWeightsForFaceCenters()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetFaceWeightsForFaceCenters(true)"
  },
  {
    "label": "useTriangleOption()",
    "kind": "Method",
    "detail": "Function (bool face0IsTri = false ; bool face1IsTri = false ; bool)",
    "insertText": "useTriangleOption(_options.GetTriangleSubdivision() == Options::TRI_SUB_SMOOTH)"
  },
  {
    "label": "GetNumVerticesPerFace()",
    "kind": "Method",
    "detail": "Function (int vertsPerFace [ 2 ] ; edge .)",
    "insertText": "GetNumVerticesPerFace(vertsPerFace)"
  },
  {
    "label": "face0IsTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "face0IsTri(vertsPerFace[0] == 3)"
  },
  {
    "label": "face1IsTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "face1IsTri(vertsPerFace[1] == 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (useTriangleOption = face0IsTri | | face1IsTri ; } else { useTriangleOption = false ; } })",
    "insertText": "if(! useTriangleOption)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(0)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(1)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "FaceWeight(0)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "FaceWeight(1)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (} else { Weight fWeight = 0 . 5)",
    "insertText": "f(Weight)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "FaceWeight(i)"
  },
  {
    "label": "CATMARK_SMOOTH_TRI_EDGE_WEIGHT()",
    "kind": "Method",
    "detail": "Function (} } } else { const Weight)",
    "insertText": "CATMARK_SMOOTH_TRI_EDGE_WEIGHT(Weight)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Weight f0Weight = face0IsTri ? CATMARK_SMOOTH_TRI_EDGE_WEIGHT : 0 . 2 5 f ; Weight f1Weight = face1IsTri ? CATMARK_SMOOTH_TRI_EDGE_WEIGHT : 0 . 2 5 f ; Weight fWeight = 0 . 5)",
    "insertText": "f(f0Weight + f1Weight)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Weight vWeight = 0 . 5)",
    "insertText": "f(1.0f - 2.0f * fWeight)"
  },
  {
    "label": "assignCreaseMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} } template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignCreaseMaskForVertex(VERTEX const& vertex, MASK& mask, int const creaseEnds[2])"
  },
  {
    "label": "GetNumEdges()",
    "kind": "Method",
    "detail": "Function (typedef MASK::Weight Weight ; int valence = vertex .)",
    "insertText": "GetNumEdges()"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumVertexWeights(1)"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumEdgeWeights(valence)"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumFaceWeights(0)"
  },
  {
    "label": "SetFaceWeightsForFaceCenters()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetFaceWeightsForFaceCenters(false)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "EdgeWeight(i)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (} mask .)",
    "insertText": "EdgeWeight(creaseEnds[0])"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "EdgeWeight(creaseEnds[1])"
  },
  {
    "label": "assignSmoothMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignSmoothMaskForVertex(VERTEX const& vertex, MASK& mask)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (typedef MASK::Weight Weight ;)",
    "insertText": "assert(vertex.GetNumFaces() == vertex.GetNumEdges())"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumFaceWeights(valence)"
  },
  {
    "label": "vWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "vWeight(Weight)(valence - 2) / (Weight)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Weight fWeight = 1 . 0)",
    "insertText": "f(Weight)(valence * valence)"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (} } template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignCornerLimitMask(VERTEX const& , MASK& posMask)"
  },
  {
    "label": "assignCreaseLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignCreaseLimitMask(VERTEX const& vertex, MASK& posMask, int const creaseEnds[2])"
  },
  {
    "label": "vWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "vWeight(Weight)(2.0 / 3.0)"
  },
  {
    "label": "eWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "eWeight(Weight)(1.0 / 6.0)"
  },
  {
    "label": "assignSmoothLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignSmoothLimitMask(VERTEX const& vertex, MASK& posMask)"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCornerLimitMask(vertex, posMask)"
  },
  {
    "label": "fWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "fWeight(Weight)(1.0 / 36.0)"
  },
  {
    "label": "eWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "eWeight(Weight)(1.0 / 9.0)"
  },
  {
    "label": "vWeight()",
    "kind": "Method",
    "detail": "Function (Weight)",
    "insertText": "vWeight(Weight)(4.0 / 9.0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(1)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(2)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "EdgeWeight(3)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "FaceWeight(2)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "FaceWeight(3)"
  },
  {
    "label": "Valence()",
    "kind": "Method",
    "detail": "Function (} else { Weight)",
    "insertText": "Valence(Weight)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Weight fWeight = 1 . 0)",
    "insertText": "f(Valence * (Valence + 5.0f))"
  },
  {
    "label": "Valence()",
    "kind": "Method",
    "detail": "Function (Weight eWeight = 4 . 0 f* fWeight ; Weight vWeight = 1 . 0 f -)",
    "insertText": "Valence(eWeight + fWeight)"
  },
  {
    "label": "assignCornerLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} } } template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignCornerLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask)"
  },
  {
    "label": "assignCreaseLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} } template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignCreaseLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask, int const creaseEnds[2])"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (tan1Mask .)",
    "insertText": "SetNumEdgeWeights(numEdges)"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (tan1Mask .)",
    "insertText": "SetNumFaceWeights(numFaces)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = 0; i < numFaces; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} int interiorEdgeCount = creaseEnds [ 1 ] - creaseEnds [ 0 ] - 1 ;)",
    "insertText": "if(interiorEdgeCount == 1)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "VertexWeight(0) = (Weight)(-4.0 / 6.0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[0]) = (Weight)(-1.0 / 6.0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[0] + 1) = (Weight)( 4.0 / 6.0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[1]) = (Weight)(-1.0 / 6.0)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "FaceWeight(creaseEnds[0]) = (Weight)(1.0 / 6.0)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "FaceWeight(creaseEnds[0] + 1) = (Weight)(1.0 / 6.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(interiorEdgeCount > 1)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "VertexWeight(0) = (Weight) (vertexWeight * commonDenom)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[0]) = (Weight) (creaseWeight * commonDenom)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[1]) = (Weight) (creaseWeight * commonDenom)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "FaceWeight(creaseEnds[0]) = (Weight) (sinTheta * commonDenom)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (sinThetaI = sinThetaIplus1 ; sinThetaIplus1 =)",
    "insertText": "sin((i+1)*theta)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(creaseEnds[0] + i) = (Weight) ((4.0f * sinThetaI) * commonDenom)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "FaceWeight(creaseEnds[0] + i) = (Weight) ((sinThetaI + sinThetaIplus1) * commonDenom)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "FaceWeight(creaseEnds[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = creaseEnds[1]; i < numFaces; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = creaseEnds[1] + 1; i < numEdges; ++i)"
  },
  {
    "label": "assignSmoothLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} } template<> template<VERTEX,MASK> void Scheme<SCHEME_CATMARK)",
    "insertText": "assignSmoothLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask)"
  },
  {
    "label": "assignCornerLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCornerLimitTangentMasks(vertex, tan1Mask, tan2Mask)"
  },
  {
    "label": "M_PI()",
    "kind": "Method",
    "detail": "Function (} else { double theta = 2 . 0 f*)",
    "insertText": "M_PI(double)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan1Mask .)",
    "insertText": "EdgeWeight(i) = (Weight) (edgeWeightScale * cosThetaI)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan1Mask .)",
    "insertText": "FaceWeight(i) = (Weight) (faceWeightScale * (cosThetaI + cosThetaIplus1))"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (} else { tan2Mask .)",
    "insertText": "EdgeWeight(0) = tan1Mask.EdgeWeight(valence-1)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "FaceWeight(0) = tan1Mask.FaceWeight(valence-1)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "EdgeWeight(i) = tan1Mask.EdgeWeight(i-1)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (tan2Mask .)",
    "insertText": "FaceWeight(i) = tan1Mask.FaceWeight(i-1)"
  }
]