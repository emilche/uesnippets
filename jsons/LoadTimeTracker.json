[
  {
    "label": "FLoadTimeTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadTimeTracker"
  },
  {
    "label": "FTimeAndCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeAndCount"
  },
  {
    "label": "FAccumulatorTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatorTracker"
  },
  {
    "label": "FScopedLoadTimeAccumulatorTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedLoadTimeAccumulatorTimer"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" CoreTypes . h \" # include \" Misc / Build . h \" # include \" Misc / Optional . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" ProfilingDebugging / ScopedTimers . h \" # include \" Serialization / LoadTimeTrace . h \" # include \" Stats / Stats . h \" # include \" Trace / Trace . h \" # include \" Trace / Trace . inl \" # include \" UObject / NameTypes . h \" # ifndef ENABLE_LOADTIME_TRACKING # define ENABLE_LOADTIME_TRACKING 0 # endif # ifndef ENABLE_LOADTIME_TRACKING_WITH_STATS # define ENABLE_LOADTIME_TRACKING_WITH_STATS 0 # endif # define ENABLE_LOADTIME_RAW_TIMINGS 0 class FLoadTimeTracker { public : FLoadTimeTracker&)",
    "insertText": "Get()"
  },
  {
    "label": "ReportScopeTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportScopeTime(double ScopeTime, const FName ScopeLabel)"
  },
  {
    "label": "GetScopeTimeAccumulator()",
    "kind": "Method",
    "detail": "Function (double&)",
    "insertText": "GetScopeTimeAccumulator(const FName& ScopeLabel, const FName& ScopeInstance)"
  },
  {
    "label": "DumpHighLevelLoadTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpHighLevelLoadTimes()"
  },
  {
    "label": "DumpHighLevelLoadTimesStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpHighLevelLoadTimesStatic()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().DumpHighLevelLoadTimes()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,TArray<double>>&)",
    "insertText": "GetData()"
  },
  {
    "label": "DumpRawLoadTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpRawLoadTimes()"
  },
  {
    "label": "DumpRawLoadTimesStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpRawLoadTimesStatic()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().DumpRawLoadTimes()"
  },
  {
    "label": "ResetRawLoadTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetRawLoadTimes()"
  },
  {
    "label": "ResetRawLoadTimesStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRawLoadTimesStatic()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ResetRawLoadTimes()"
  },
  {
    "label": "StartAccumulatedLoadTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartAccumulatedLoadTimes()"
  },
  {
    "label": "StartAccumulatedLoadTimesStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAccumulatedLoadTimesStatic()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().StartAccumulatedLoadTimes()"
  },
  {
    "label": "StopAccumulatedLoadTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopAccumulatedLoadTimes()"
  },
  {
    "label": "StopAccumulatedLoadTimesStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAccumulatedLoadTimesStatic()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().StopAccumulatedLoadTimes()"
  },
  {
    "label": "IsAccumulating()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAccumulating()"
  },
  {
    "label": "FScopedLoadTimeAccumulatorTimer()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedLoadTimeAccumulatorTimer : public FScopedDurationTimer { double DummyTimer ;)",
    "insertText": "FScopedLoadTimeAccumulatorTimer(const FName& InTimerName, const FName& InInstanceName)"
  },
  {
    "label": "ACCUM_LOADTIME()",
    "kind": "Method",
    "detail": "Function (} ; # if ENABLE_LOADTIME_TRACKING # define)",
    "insertText": "ACCUM_LOADTIME(TimerName, Time) FLoadTimeTracker::Get().ReportScopeTime(Time, FName(TimerName))"
  },
  {
    "label": "ACCUM_LOADTIME()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "ACCUM_LOADTIME(TimerName, Time) #endif #if ENABLE_LOADTIME_TRACKING #define SCOPED_ACCUM_LOADTIME(TimerName, InstanceName) FScopedLoadTimeAccumulatorTimer AccumulatorTimer_##TimerName(FName(#TimerName), FName(InstanceName))"
  },
  {
    "label": "SCOPED_ACCUM_LOADTIME()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "SCOPED_ACCUM_LOADTIME(TimerName, InstanceName) #endif #if ENABLE_LOADTIME_RAW_TIMINGS #define SCOPED_LOADTIMER_TEXT(TimerName) #define SCOPED_LOADTIMER_ASSET_TEXT(TimerName) #define SCOPED_LOADTIMER(TimerName) FScopedDurationTimer DurationTimer_##TimerName(FLoadTimeTracker::Get().TimerName)"
  },
  {
    "label": "SCOPED_CUSTOM_LOADTIMER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_CUSTOM_LOADTIMER(TimerName) #define SCOPED_LOADTIMER_CNT(TimerName) FScopedDurationTimer DurationTimer_##TimerName(FLoadTimeTracker::Get().TimerName)"
  },
  {
    "label": "ADD_CUSTOM_LOADTIMER_META()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ADD_CUSTOM_LOADTIMER_META(TimerName, Key, Value) #else #define CUSTOM_LOADTIMER_LOG Cpu #if LOADTIMEPROFILERTRACE_ENABLED #define SCOPED_LOADTIMER_TEXT(TimerName) TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL(TimerName, LoadTimeChannel) #define SCOPED_LOADTIMER_ASSET_TEXT(TimerName) TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL(TimerName, AssetLoadTimeChannel) #define SCOPED_LOADTIMER(TimerName) TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL(TimerName, LoadTimeChannel) #define SCOPED_CUSTOM_LOADTIMER(TimerName) UE_TRACE_LOG_SCOPED_T(CUSTOM_LOADTIMER_LOG, TimerName, LoadTimeChannel) #define ADD_CUSTOM_LOADTIMER_META(TimerName, Key, Value) << TimerName.Key(Value) #define SCOPED_LOADTIMER_CNT(TimerName) #else #define SCOPED_LOADTIMER_TEXT(TimerName) #define SCOPED_LOADTIMER_ASSET_TEXT(TimerName) #define SCOPED_LOADTIMER(TimerName) #define SCOPED_CUSTOM_LOADTIMER(TimerName) #define ADD_CUSTOM_LOADTIMER_META(TimerName, Key, Value) #define SCOPED_LOADTIMER_CNT(TimerName) #endif #endif #if ENABLE_LOADTIME_TRACKING_WITH_STATS && STATS #define SCOPED_ACCUM_LOADTIME_STAT(InstanceName) FSimpleScopeSecondsStat ScopeTimer(FDynamicStats::CreateStatIdDouble<FStatGroup_STATGROUP_LoadTimeClass>(InstanceName, true), 1000.0)"
  },
  {
    "label": "ACCUM_LOADTIMECOUNT_STAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ACCUM_LOADTIMECOUNT_STAT(InstanceName) INC_DWORD_STAT_FNAME_BY(FDynamicStats::CreateStatIdInt64<FStatGroup_STATGROUP_LoadTimeClassCount>(InstanceName+TEXT(\"_Count\"), true).GetName(), 1)"
  }
]