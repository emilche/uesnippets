[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FPacketBufferView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacketBufferView"
  },
  {
    "label": "BitType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BitType"
  },
  {
    "label": "ByteType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ByteType"
  },
  {
    "label": "FPacketDataView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketDataView"
  },
  {
    "label": "FReceivedPacketView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReceivedPacketView"
  },
  {
    "label": "FPacketTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacketTimestamp"
  },
  {
    "label": "FPacketBufferView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Net / Common / Sockets / SocketErrors . h \" # include \" Net / Common / Packets / PacketTraits . h \" class FInternetAddr ; struct FPacketBufferView { const TArrayView<uint8> Buffer ;)",
    "insertText": "FPacketBufferView(uint8* InData, int32 MaxBufferSize) : Buffer(MakeArrayView<uint8>(InData, MaxBufferSize))"
  },
  {
    "label": "FPacketDataView()",
    "kind": "Method",
    "detail": "Function (} } ; namespace ECountUnits { enum BitType { Bits } ; enum ByteType { Bytes } ; } class FPacketDataView { struct FReceivedPacketView ; private : TArrayView<const uint8> Data ; int32 CountBits ; public :)",
    "insertText": "FPacketDataView(const uint8* InData, int32 InCountBits, ECountUnits::BitType) : Data(MakeArrayView(InData, FMath::DivideAndRoundUp(InCountBits, 8))) , CountBits(InCountBits)"
  },
  {
    "label": "FPacketDataView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPacketDataView(const uint8* InData, int32 InCountBytes, ECountUnits::ByteType) : Data(MakeArrayView(InData, InCountBytes)) , CountBits(InCountBytes * 8)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetMutableData()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetMutableData()"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumBits()"
  }
]