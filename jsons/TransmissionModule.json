[
  {
    "label": "FTransmissionSimModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransmissionSimModule"
  },
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FSimModuleTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimModuleTree"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "ETransType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETransType"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimModule / TorqueSimModule . h \" namespace Chaos { class FTransmissionSimModule ; struct FAllInputs ; class FSimModuleTree ; struct FTransmissionSimModuleData : public FModuleNetData,public Chaos::TSimulationModuleTypeable<FTransmissionSimModule,FTransmissionSimModuleData> { #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) FTransmissionSimModuleData(int NodeArrayIndex, const FString& InDebugString) : FModuleNetData(NodeArrayIndex, InDebugString)"
  },
  {
    "label": "FTransmissionSimModuleData()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FTransmissionSimModuleData(int NodeArrayIndex) : FModuleNetData(NodeArrayIndex)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "FillSimState(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNetState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (Ar<<CurrentGear ; Ar<<TargetGear ; Ar<<CurrentGearChangeTime ; } void)",
    "insertText": "Lerp(const float LerpFactor, const FModuleNetData& Min, const FModuleNetData& Max)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual FString ToString()"
  },
  {
    "label": "MakeNewData()",
    "kind": "Method",
    "detail": "Function (# endif int32 CurrentGear = 0 ; int32 TargetGear = 0 ; float CurrentGearChangeTime = 0 . 0 f ; } ; struct FTransmissionOutputData : public FSimOutputData,public Chaos::TSimulationModuleTypeable<FTransmissionSimModule,FTransmissionOutputData> { FSimOutputData*)",
    "insertText": "MakeNewData()"
  },
  {
    "label": "MakeNew()",
    "kind": "Method",
    "detail": "Function (} FSimOutputData*)",
    "insertText": "MakeNew()"
  },
  {
    "label": "FillOutputState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillOutputState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lerp(const FSimOutputData& InCurrent, const FSimOutputData& InNext, float Alpha)"
  },
  {
    "label": "FTransmissionSettings()",
    "kind": "Method",
    "detail": "Function (# endif int32 CurrentGear ; } ; struct FTransmissionSettings { enum ETransType : uint8 { ManualType,AutomaticType } ;)",
    "insertText": "FTransmissionSettings() : FinalDriveRatio(3.f) , ChangeUpRPM(5000) , ChangeDownRPM(2500) , GearChangeTime(0.5f) , GearHysteresisTime(2.0f) , TransmissionEfficiency(1.f) , TransmissionType(ETransType::AutomaticType) , AutoReverse(true)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReverseRatios .)",
    "insertText": "Add(2.86f)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (} TArray<float> ForwardRatios ; TArray<float> ReverseRatios ; float FinalDriveRatio ; uint32 ChangeUpRPM ; uint32 ChangeDownRPM ; float GearChangeTime ; float GearHysteresisTime ; float TransmissionEfficiency ; ETransType TransmissionType ; bool AutoReverse ; } ; class FTransmissionSimModule : public FTorqueSimModule,public TSimModuleSettings<FTransmissionSettings>,public TSimulationModuleTypeable<FTransmissionSimModule> { FTransmissionSimModuleData ; FTransmissionOutputData ; public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FTransmissionSimModule)"
  },
  {
    "label": "FTransmissionSimModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransmissionSimModule(const FTransmissionSettings& Settings)"
  },
  {
    "label": "GenerateNetData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FModuleNetData>)",
    "insertText": "GenerateNetData(const int32 SimArrayIndex)"
  },
  {
    "label": "GenerateOutputData()",
    "kind": "Method",
    "detail": "Function (} FSimOutputData*)",
    "insertText": "GenerateOutputData()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetDebugString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDebugString(FString& StringOut)"
  },
  {
    "label": "IsBehaviourType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBehaviourType(eSimModuleTypeFlags InType)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Simulate(float DeltaTime, const FAllInputs& Inputs, FSimModuleTree& VehicleModuleSystem)"
  },
  {
    "label": "SetGear()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetGear(int32 InGear, bool Immediate = false)"
  },
  {
    "label": "GetGearRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGearRatio(int32 InGear)"
  },
  {
    "label": "ChangeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeUp()"
  },
  {
    "label": "SetGear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGear(TargetGear + 1)"
  },
  {
    "label": "ChangeDown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChangeDown()"
  },
  {
    "label": "SetGear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGear(TargetGear - 1)"
  },
  {
    "label": "IsCurrentlyChangingGear()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCurrentlyChangingGear()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (GearIndexInOut =)",
    "insertText": "Clamp(GearIndexInOut, -Setup().ReverseRatios.Num(), Setup().ForwardRatios.Num())"
  },
  {
    "label": "GetCurrentGear()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCurrentGear()"
  }
]