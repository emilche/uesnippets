[
  {
    "label": "TDeferredRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDeferredRegistry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRegistrant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegistrant"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Modules / ModuleManager . h \" # include \" UObject / Class . h \" # include \" UObject / Reload . h \" # include \" UObject / UObjectBase . h \" # if WITH_RELOAD bool)",
    "insertText": "operator(const FClassReloadVersionInfo& lhs, const FClassReloadVersionInfo& rhs)"
  },
  {
    "label": "ReloadProcessObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadProcessObject(UEnum* Object, const TCHAR* RenamePrefix)"
  },
  {
    "label": "ReloadProcessObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadProcessObject(UClass* Object, const TCHAR* RenamePrefix)"
  },
  {
    "label": "ReloadProcessObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadProcessObject(UPackage* Object, const TCHAR* RenamePrefix)"
  },
  {
    "label": "TType()",
    "kind": "Method",
    "detail": "Function (# endif template<T> class TDeferredRegistry { public : using TInfo = T ; using TType = T::TType ; using TVersion = T::TVersion ; enum class AddResult { New,ExistingNoChange,ExistingChanged,} ; private : using FPackageAndNameKey = TTuple<FName,FName> ; public : struct FRegistrant {)",
    "insertText": "TType(*OuterRegisterFn)()"
  },
  {
    "label": "TType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TType(*InnerRegisterFn)()"
  },
  {
    "label": "AddRegistration()",
    "kind": "Method",
    "detail": "Function (const TCHAR* PackageName ; TInfo* Info ; # if WITH_RELOAD TType* OldSingleton ; # endif # if WITH_RELOAD bool bHasChanged ; # endif } ; public : AddResult)",
    "insertText": "AddRegistration(TType* (*InOuterRegister)(), TType* (*InInnerRegister)(), const TCHAR* InPackageName, const TCHAR* InName, TInfo& InInfo, const TVersion& InVersion)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (# if WITH_RELOAD const FPackageAndNameKey Key = FPackageAndNameKey { InPackageName,InName } ; TInfo** ExistingInfo = InfoMap .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "ExistingInfo()",
    "kind": "Method",
    "detail": "Function (ReloadVersionInfo != InVersion)",
    "insertText": "ExistingInfo(*ExistingInfo)"
  },
  {
    "label": "ExistingInfo()",
    "kind": "Method",
    "detail": "Function (InInfo . ReloadVersionInfo = InVersion ; TType* OldSingleton =)",
    "insertText": "ExistingInfo((*ExistingInfo)->InnerSingleton ? (*ExistingInfo)->InnerSingleton : (*ExistingInfo)->OuterSingleton)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bAdd = true ;)",
    "insertText": "if(ExistingInfo)"
  },
  {
    "label": "GetEnableReinstancing()",
    "kind": "Method",
    "detail": "Function (bAdd = Reload ->)",
    "insertText": "GetEnableReinstancing(bHasChanged)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bAdd)"
  },
  {
    "label": "UpdateSingletons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSingletons(InInfo, **ExistingInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (}* ExistingInfo =& InInfo ; } } else { InfoMap .)",
    "insertText": "Add(Key, &InInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Registrations .)",
    "insertText": "Add(FRegistrant{ InOuterRegister, InInnerRegister, InPackageName, &InInfo, OldSingleton, bHasChanged })"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} return ExistingInfo = = nullptr ?)",
    "insertText": "New(bHasChanged ? AddResult::ExistingChanged : AddResult::ExistingNoChange)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# else Registrations .)",
    "insertText": "Add(FRegistrant{ InOuterRegister, InInnerRegister, InPackageName, &InInfo })"
  },
  {
    "label": "GetRegistrations()",
    "kind": "Method",
    "detail": "Function (} # endif TArray<FRegistrant>&)",
    "insertText": "GetRegistrations()"
  },
  {
    "label": "DoPendingPackageRegistrations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoPendingPackageRegistrations()"
  },
  {
    "label": "CreatePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePackage(Registrations[Index].PackageName)"
  },
  {
    "label": "DoPendingInnerRegistrations()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DoPendingInnerRegistrations(bool UpdateCounter)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Num = Registrations .)",
    "insertText": "Num()"
  },
  {
    "label": "InnerRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InnerRegister(Registrations[Index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UpdateCounter)"
  },
  {
    "label": "DoPendingOuterRegistrations()",
    "kind": "Method",
    "detail": "Function (ProcessedRegistrations = Num ; } } void)",
    "insertText": "DoPendingOuterRegistrations(bool UpdateCounter)"
  },
  {
    "label": "OuterRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OuterRegister(Registrations[Index])"
  },
  {
    "label": "DoPendingOuterRegistrations()",
    "kind": "Method",
    "detail": "Function (ProcessedRegistrations = Num ; } } template<FuncType> void)",
    "insertText": "DoPendingOuterRegistrations(bool UpdateCounter, FuncType&& InOnRegistration)"
  },
  {
    "label": "InOnRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOnRegistration(Registrations[Index].PackageName, *Object)"
  },
  {
    "label": "InnerRegister()",
    "kind": "Method",
    "detail": "Function (ProcessedRegistrations = Num ; } } TType*)",
    "insertText": "InnerRegister(const FRegistrant& Registrant)"
  },
  {
    "label": "OuterRegister()",
    "kind": "Method",
    "detail": "Function (} TType*)",
    "insertText": "OuterRegister(const FRegistrant& Registrant)"
  },
  {
    "label": "ProcessChangedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessChangedObjects(bool InvokeOuterRegisterFunction = false)"
  },
  {
    "label": "GetActiveReloadInterface()",
    "kind": "Method",
    "detail": "Function (# if WITH_RELOAD IReload* Reload =)",
    "insertText": "GetActiveReloadInterface()"
  },
  {
    "label": "GetPrefix()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Prefix = Reload ->)",
    "insertText": "GetPrefix()"
  },
  {
    "label": "ReloadProcessObject()",
    "kind": "Method",
    "detail": "Function (Registrant . Info -> InnerSingleton = nullptr ; Registrant . Info -> OuterSingleton = nullptr ;)",
    "insertText": "ReloadProcessObject(Registrant.OldSingleton, Prefix)"
  },
  {
    "label": "OuterRegisterFn()",
    "kind": "Method",
    "detail": "Function (Registrant .)",
    "insertText": "OuterRegisterFn()"
  },
  {
    "label": "NotifyReload()",
    "kind": "Method",
    "detail": "Function (} } } } # endif } # if WITH_RELOAD void)",
    "insertText": "NotifyReload(IReload& Reload)"
  },
  {
    "label": "OuterRegister()",
    "kind": "Method",
    "detail": "Function (TType* Old = Registrant . OldSingleton ; TType* New = Registrant . bHasChanged ?)",
    "insertText": "OuterRegister(Registrant)"
  },
  {
    "label": "NotifyChange()",
    "kind": "Method",
    "detail": "Function (Reload .)",
    "insertText": "NotifyChange(New, Old)"
  },
  {
    "label": "EmptyRegistrations()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "EmptyRegistrations()"
  },
  {
    "label": "Local()",
    "kind": "Method",
    "detail": "Function (TArray<FRegistrant>)",
    "insertText": "Local(MoveTemp(Registrations))"
  },
  {
    "label": "UpdateSingletons()",
    "kind": "Method",
    "detail": "Function (ProcessedRegistrations = 0 ; } void)",
    "insertText": "UpdateSingletons(TInfo& NewInfo, const TInfo& OldInfo)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (NewInfo . InnerSingleton = OldInfo . InnerSingleton ; NewInfo . OuterSingleton = OldInfo . OuterSingleton ; } TDeferredRegistry&)",
    "insertText": "Get()"
  },
  {
    "label": "GetRegistryName()",
    "kind": "Method",
    "detail": "Function (TDeferredRegistry Registry ; return Registry ; } # if WITH_RELOAD const TCHAR*)",
    "insertText": "GetRegistryName()"
  },
  {
    "label": "InnerRegister()",
    "kind": "Method",
    "detail": "Function (# endif private : TArray<FRegistrant> Registrations ; int32 ProcessedRegistrations = 0 ; # if WITH_RELOAD TMap<FPackageAndNameKey,TInfo*> InfoMap ; # endif } ; template<> TDeferredRegistry<FClassRegistrationInfo>::TType* TDeferredRegistry<FClassRegistrationInfo)",
    "insertText": "InnerRegister(const TDeferredRegistry<FClassRegistrationInfo>::FRegistrant& Registrant)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::UObject)"
  },
  {
    "label": "UpdateSingletons()",
    "kind": "Method",
    "detail": "Function (} template<> void TDeferredRegistry<FClassRegistrationInfo)",
    "insertText": "UpdateSingletons(FClassRegistrationInfo& NewInfo, const FClassRegistrationInfo& OldInfo)"
  }
]