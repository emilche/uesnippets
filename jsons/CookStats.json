[
  {
    "label": "FChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannel"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "TDecay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDecay"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCookStatsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookStatsManager"
  },
  {
    "label": "TKeyValuePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TKeyValuePair"
  },
  {
    "label": "FAutoRegisterCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoRegisterCallback"
  },
  {
    "label": "FDerivedDataUsageStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDerivedDataUsageStats"
  },
  {
    "label": "FCookStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookStats"
  },
  {
    "label": "CallStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallStats"
  },
  {
    "label": "GameAndOtherThreadAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameAndOtherThreadAccumulator"
  },
  {
    "label": "FScopedStatsCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedStatsCounter"
  },
  {
    "label": "FScopedCookStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedCookStat"
  },
  {
    "label": "TKeyValuePair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" HAL / ThreadSafeCounter64 . h \" # include \" Templates / Decay . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" Trace / Trace . h \" namespace UE { namespace Trace { class FChannel ; } } # ifndef ENABLE_COOK_STATS # define ENABLE_COOK_STATS WITH_EDITOR # endif template<FuncType> class TFunctionRef ; template<T> struct TDecay ; enum class EPackageEventStatType : uint8 { LoadPackage = 0,SavePackage = 1,BeginCacheForCookedPlatformData = 2,IsCachedCookedPlatformDataLoaded = 3,} ; # if ENABLE_COOK_STATS class FCookStatsManager { public : template<KeyType,ValueType> struct TKeyValuePair { template<KeyType2,ValueType2>)",
    "insertText": "TKeyValuePair(KeyType2&& InKey, ValueType2&& InValue) : Key(Forward<KeyType2>(InKey)), Value(Forward<ValueType2>(InValue))"
  },
  {
    "label": "TKeyValuePair()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TKeyValuePair()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (},Value { } { } bool)",
    "insertText": "operator(const TKeyValuePair& Other)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} typedef TKeyValuePair<FString,FString> StringKeyValue ; typedef TFunctionRef<)",
    "insertText": "void(const FString& StatName, const TArray<StringKeyValue>& StatAttributes)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FGatherCookStatsDelegate, AddStatFuncRef)"
  },
  {
    "label": "LogCookStats()",
    "kind": "Method",
    "detail": "Function (FGatherCookStatsDelegate CookStatsCallbacks ; void)",
    "insertText": "LogCookStats(AddStatFuncRef AddStat)"
  },
  {
    "label": "FAutoRegisterCallback()",
    "kind": "Method",
    "detail": "Function (struct FAutoRegisterCallback { template<Func>)",
    "insertText": "FAutoRegisterCallback(Func Callback)"
  },
  {
    "label": "AddLambda()",
    "kind": "Method",
    "detail": "Function (CookStatsCallbacks .)",
    "insertText": "AddLambda(Callback)"
  },
  {
    "label": "CreateKeyValueArray()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . ArgTypes> TArray<FCookStatsManager::StringKeyValue>)",
    "insertText": "CreateKeyValueArray(ArgTypes&&...Args)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TArray<FCookStatsManager::StringKeyValue> Attrs ; Attrs .)",
    "insertText": "Empty(sizeof...(Args) / 2)"
  },
  {
    "label": "ImplCreateKeyValueArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImplCreateKeyValueArray(Attrs, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Attrs .)",
    "insertText": "Emplace(LexToString(Forward<KeyType>(Key)), TEXT(\"\"))"
  },
  {
    "label": "ImplCreateKeyValueArray()",
    "kind": "Method",
    "detail": "Function (} template<KeyType,ValueType> void)",
    "insertText": "ImplCreateKeyValueArray(TArray<FCookStatsManager::StringKeyValue>& Attrs, KeyType&& Key, ValueType&& Value)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Attrs .)",
    "insertText": "Emplace(LexToString(Forward<KeyType>(Key)), LexToString(Forward<ValueType>(Value)))"
  },
  {
    "label": "ImplCreateKeyValueArray()",
    "kind": "Method",
    "detail": "Function (} template<KeyType,ValueType,. . . ArgTypes> void)",
    "insertText": "ImplCreateKeyValueArray(TArray<FCookStatsManager::StringKeyValue>& Attrs, KeyType&& Key, ValueType&& Value, ArgTypes&&...Args)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDerivedDataUsageStats ; class FCookStats { public : struct CallStats { enum class EHitOrMiss : uint8 { Hit,Miss,MaxValue,} ; enum class EStatType : uint8 { Counter,Cycles,Bytes,MaxValue,} ; struct GameAndOtherThreadAccumulator { void)",
    "insertText": "Accumulate(int64 Value, bool bIsInGameThread)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GameThread + = Value ; } else)",
    "insertText": "if(Value != 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OtherThread .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "GetAccumulatedValue()",
    "kind": "Method",
    "detail": "Function (} } int64)",
    "insertText": "GetAccumulatedValue(bool bIsInGameThread)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} int64 GameThread = 0 l ; FThreadSafeCounter64 OtherThread ; } ; void)",
    "insertText": "Accumulate(EHitOrMiss HitOrMiss, EStatType StatType, int64 Value, bool bIsInGameThread)"
  },
  {
    "label": "Accumulators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulators(uint8)HitOrMiss][(uint8)StatType].Accumulate(Value, bIsInGameThread)"
  },
  {
    "label": "GetAccumulatedValue()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetAccumulatedValue(EHitOrMiss HitOrMiss, EStatType StatType, bool bIsInGameThread)"
  },
  {
    "label": "GetAccumulatedValueAnyThread()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetAccumulatedValueAnyThread(EHitOrMiss HitOrMiss, EStatType StatType)"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogStats(FCookStatsManager::AddStatFuncRef AddStat, const FString& StatName, const FString& NodeName, const TCHAR* CallName)"
  },
  {
    "label": "LogStat()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "LogStat(EHitOrMiss HitOrMiss, bool bGameThread)"
  },
  {
    "label": "AddStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStat(StatName, FCookStatsManager::CreateKeyValueArray( TEXT(\"ThreadName\"), bGameThread ? TEXT(\"GameThread\") : TEXT(\"OthrThread\"), TEXT(\"Call\"), CallName, TEXT(\"HitOrMiss\"), HitOrMiss == EHitOrMiss::Hit ? TEXT(\"Hit\") : TEXT(\"Miss\"), TEXT(\"Count\"), GetAccumulatedValue(HitOrMiss, EStatType::Counter, bGameThread), TEXT(\"TimeSec\"), (double)GetAccumulatedValue(HitOrMiss, EStatType::Cycles, bGameThread) * FPlatformTime::GetSecondsPerCycle(), TEXT(\"MB\"), (double)GetAccumulatedValue(HitOrMiss, EStatType::Bytes, bGameThread) / (1024.0 * 1024.0), TEXT(\"MB/s\"), GetAccumulatedValue(HitOrMiss, EStatType::Cycles, bGameThread) == 0 ? 0.0 : (double)GetAccumulatedValue(HitOrMiss, EStatType::Bytes, bGameThread) / (1024.0 * 1024.0) / ((double)GetAccumulatedValue(HitOrMiss, EStatType::Cycles, bGameThread) * FPlatformTime::GetSecondsPerCycle()), TEXT(\"Node\"), NodeName ))"
  },
  {
    "label": "LogStat()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "LogStat(EHitOrMiss::Hit, true)"
  },
  {
    "label": "LogStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStat(EHitOrMiss::Miss, true)"
  },
  {
    "label": "LogStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStat(EHitOrMiss::Hit, false)"
  },
  {
    "label": "LogStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStat(EHitOrMiss::Miss, false)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Combine(const CallStats& Other)"
  },
  {
    "label": "GetAccumulatedValue()",
    "kind": "Method",
    "detail": "Function (int64 Value = Other .)",
    "insertText": "GetAccumulatedValue((EHitOrMiss)HitOrMiss, (EStatType)StatType, IsGameThread == 1)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate((EHitOrMiss)HitOrMiss, (EStatType)StatType, Value, IsGameThread == 1)"
  },
  {
    "label": "Accumulators()",
    "kind": "Method",
    "detail": "Function (} } } } private : GameAndOtherThreadAccumulator)",
    "insertText": "Accumulators(uint8)EHitOrMiss::MaxValue][(uint8)"
  },
  {
    "label": "FScopedStatsCounter()",
    "kind": "Method",
    "detail": "Function (} ; class FScopedStatsCounter { public :)",
    "insertText": "FScopedStatsCounter(CallStats& InStats) : Stats(InStats) , StartTime(FPlatformTime::Seconds()) , bIsInGameThread(IsInGameThread())"
  },
  {
    "label": "FScopedStatsCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedStatsCounter(FScopedStatsCounter&& InOther) : Stats(InOther.Stats) , StartTime(InOther.StartTime) , BytesProcessed(InOther.BytesProcessed) , bIsInGameThread(InOther.bIsInGameThread) , bCanceled(InOther.bCanceled) , bTrackCyclesOnly(InOther.bTrackCyclesOnly) , HitOrMiss(InOther.HitOrMiss)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (InOther .)",
    "insertText": "Cancel()"
  },
  {
    "label": "FScopedStatsCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedStatsCounter(const FScopedStatsCounter&)"
  },
  {
    "label": "FScopedStatsCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedStatsCounter()"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 CyclesUsed =)",
    "insertText": "int64((FPlatformTime::Seconds() - StartTime) / FPlatformTime::GetSecondsPerCycle())"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (Stats .)",
    "insertText": "Accumulate(HitOrMiss, CallStats::EStatType::Cycles, CyclesUsed, bIsInGameThread)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (Stats .)",
    "insertText": "Accumulate(HitOrMiss, CallStats::EStatType::Counter, 1l, bIsInGameThread)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} Stats .)",
    "insertText": "Accumulate(HitOrMiss, CallStats::EStatType::Bytes, BytesProcessed, bIsInGameThread)"
  },
  {
    "label": "AddHit()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "AddHit(int64 InBytesProcessed)"
  },
  {
    "label": "AddMiss()",
    "kind": "Method",
    "detail": "Function (HitOrMiss = CallStats::EHitOrMiss::Hit ; BytesProcessed = InBytesProcessed ; } void)",
    "insertText": "AddMiss(int64 InBytesProcessed = 0)"
  },
  {
    "label": "AddHitOrMiss()",
    "kind": "Method",
    "detail": "Function (HitOrMiss = CallStats::EHitOrMiss::Miss ; BytesProcessed = InBytesProcessed ; } void)",
    "insertText": "AddHitOrMiss(CallStats::EHitOrMiss InHitOrMiss, int64 InBytesProcessed)"
  },
  {
    "label": "TrackCyclesOnly()",
    "kind": "Method",
    "detail": "Function (bCanceled = true ; } void)",
    "insertText": "TrackCyclesOnly()"
  },
  {
    "label": "TimeSyncWork()",
    "kind": "Method",
    "detail": "Function (bTrackCyclesOnly = true ; } private : CallStats& Stats ; double StartTime ; int64 BytesProcessed = 0 ; bool bIsInGameThread ; bool bCanceled = false ; bool bTrackCyclesOnly = false ; CallStats::EHitOrMiss HitOrMiss = CallStats::EHitOrMiss::Miss ; } ; using FDDCResourceUsageStats = FDerivedDataUsageStats ; } ; struct FDerivedDataUsageStats { FCookStats::FScopedStatsCounter)",
    "insertText": "TimeSyncWork()"
  },
  {
    "label": "TimeAsyncWait()",
    "kind": "Method",
    "detail": "Function (} FCookStats::FScopedStatsCounter)",
    "insertText": "TimeAsyncWait()"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (} FCookStats::CallStats SyncWorkStats ; FCookStats::CallStats AsyncWaitStats ; void)",
    "insertText": "LogStats(FCookStatsManager::AddStatFuncRef AddStat, const FString& StatName, const FString& NodeName)"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (SyncWorkStats .)",
    "insertText": "LogStats(AddStat, StatName, NodeName, TEXT(\"SyncWork\"))"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (AsyncWaitStats .)",
    "insertText": "LogStats(AddStat, StatName, NodeName, TEXT(\"AsyncWait\"))"
  },
  {
    "label": "COOK_STAT()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "COOK_STAT(...) __VA_ARGS__ CORE_API UE_TRACE_CHANNEL_EXTERN(CookChannel)"
  },
  {
    "label": "TracePackage()",
    "kind": "Method",
    "detail": "Function (# define UE_INSIGHTS_COOK_PROFILER_VERSION 2 void)",
    "insertText": "TracePackage(uint64 InId, const FStringView InName)"
  },
  {
    "label": "TracePackageAssetClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePackageAssetClass(uint64 InId, const FStringView InName)"
  },
  {
    "label": "ShouldTracePackageInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTracePackageInfo()"
  },
  {
    "label": "TracePackageStatBeginScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePackageStatBeginScope(uint64 InId, uint64 Time, EPackageEventStatType StatType)"
  },
  {
    "label": "TracePackageStatEndScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePackageStatEndScope(uint64 InId, uint64 Time, EPackageEventStatType StatType)"
  },
  {
    "label": "FScopedCookStat()",
    "kind": "Method",
    "detail": "Function (struct FScopedCookStat {)",
    "insertText": "FScopedCookStat(const FScopedCookStat&)"
  },
  {
    "label": "FScopedCookStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedCookStat(FScopedCookStat&&)"
  },
  {
    "label": "FScopedCookStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedCookStat(uint64 Id, EPackageEventStatType InStatType) : Id(Id) , StatType(InStatType)"
  },
  {
    "label": "TracePackageStatBeginScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePackageStatBeginScope(Id, FPlatformTime::Cycles64(), StatType)"
  },
  {
    "label": "FScopedCookStat()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedCookStat()"
  },
  {
    "label": "TracePackageStatEndScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePackageStatEndScope(Id, FPlatformTime::Cycles64(), StatType)"
  },
  {
    "label": "Cycles64()",
    "kind": "Method",
    "detail": "Function (StartTimestamp =)",
    "insertText": "Cycles64()"
  },
  {
    "label": "TracePackageStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePackageStat(Id, Duration, StatType)"
  },
  {
    "label": "UE_SCOPED_COOK_STAT()",
    "kind": "Method",
    "detail": "Function (} private : uint64 Id ; uint64 StartTimestamp ; EPackageEventStatType StatType ; } ; # endif # define)",
    "insertText": "UE_SCOPED_COOK_STAT(Name, StatType) \\ FScopedCookStat PREPROCESSOR_JOIN(__CookTimerScope, __LINE__)(Name.ToUnstableInt(), StatType)"
  },
  {
    "label": "UE_MULTI_SCOPED_COOK_STAT_INIT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MULTI_SCOPED_COOK_STAT_INIT()"
  },
  {
    "label": "UE_MULTI_SCOPED_COOK_STAT()",
    "kind": "Method",
    "detail": "Function (\\ FName __PrevPackageName = NAME_None ; # define)",
    "insertText": "UE_MULTI_SCOPED_COOK_STAT(Name, StatType) \\ if (__PrevPackageName != Name)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (\\ __CookStatScope .)",
    "insertText": "Emplace(Name.ToUnstableInt(), EPackageEventStatType::LoadPackage)"
  },
  {
    "label": "UE_MULTI_SCOPED_COOK_STAT_RESET()",
    "kind": "Method",
    "detail": "Function (\\ __PrevPackageName = Name ; \\ } # define)",
    "insertText": "UE_MULTI_SCOPED_COOK_STAT_RESET() \\ __CookStatScope.Reset()"
  }
]