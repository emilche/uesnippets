[
  {
    "label": "FMassMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMassMatrix"
  },
  {
    "label": "TDenseMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDenseMatrix"
  },
  {
    "label": "FDenseMatrixSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDenseMatrixSolver"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / Vector . h \" # include \" Chaos / Matrix . h \" # include \" Chaos / Utilities . h \" namespace Chaos { class FMassMatrix { public : FReal)",
    "insertText": "M()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} FMassMatrix)",
    "insertText": "Make(const FReal InM, FMatrix33&& InI)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} FMassMatrix)",
    "insertText": "Make(const FReal InM, const FRotation3& Q, const FMatrix33& InI)"
  },
  {
    "label": "FMassMatrix()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FMassMatrix(const FReal InM, const FMatrix33& InI) : Mass(InM) , Inertia(InI)"
  },
  {
    "label": "FMassMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassMatrix(const FReal InM, FMatrix33&& InI) : Mass(InM) , Inertia(MoveTemp(InI))"
  },
  {
    "label": "FMassMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassMatrix(const FReal InM, const FRotation3& Q, const FMatrix33& InI) : Mass(InM) , Inertia(Utilities::ComputeWorldSpaceInertia(Q, InI))"
  },
  {
    "label": "TDenseMatrix()",
    "kind": "Method",
    "detail": "Function (} FReal Mass ; FMatrix33 Inertia ; } ; template<int32 T_MAXELEMENTS> class TDenseMatrix { public : const int32 MaxElements = T_MAXELEMENTS ;)",
    "insertText": "TDenseMatrix() : NRows(0) , NCols(0)"
  },
  {
    "label": "TDenseMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDenseMatrix(const int32 InNRows, const int32 InNCols) : NRows(InNRows) , NCols(InNCols)"
  },
  {
    "label": "TDenseMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDenseMatrix(const TDenseMatrix<MaxElements>& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = A ; } TDenseMatrix<MaxElements>&)",
    "insertText": "operator(const TDenseMatrix<MaxElements>& A)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDimensions(A.NumRows(), A.NumColumns())"
  },
  {
    "label": "NumRows()",
    "kind": "Method",
    "detail": "Function (M [ Index ] = A . M [ Index ] ; } return* this ; } int32)",
    "insertText": "NumRows()"
  },
  {
    "label": "AddRows()",
    "kind": "Method",
    "detail": "Function (NRows = InNumRows ; NCols = InNumColumns ; } int32)",
    "insertText": "AddRows(const int32 InNumRows)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (const int32 NewRowIndex = NRows ; NRows = NRows + InNumRows ; return NewRowIndex ; } FReal&)",
    "insertText": "At(const int32 RowIndex, const int32 ColumnIndex)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const int32 InNRows, const int32 InNCols, FReal V)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDimensions(InNRows, InNCols)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(V)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAt(const int32 RowIndex, const int32 ColumnIndex, const FReal V)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(RowIndex, ColumnIndex)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(FReal V)"
  },
  {
    "label": "SetDiagonal()",
    "kind": "Method",
    "detail": "Function (M [ II ] = V ; } } void)",
    "insertText": "SetDiagonal(FReal V)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(II, II)"
  },
  {
    "label": "SetDiagonalAt()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetDiagonalAt(int32 Start, int32 Num, FReal V)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (int32 JJ = Start + II ;)",
    "insertText": "At(JJ, JJ)"
  },
  {
    "label": "SetRowAt()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetRowAt(const int32 RowIndex, const int32 ColumnIndex, const FReal* V, const int32 NumV)"
  },
  {
    "label": "SetRowAt()",
    "kind": "Method",
    "detail": "Function (* Row + + =* V + + ; } } void)",
    "insertText": "SetRowAt(const int32 RowIndex, const int32 ColumnIndex, const FVec3& V)"
  },
  {
    "label": "SetRowAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRowAt(RowIndex, ColumnIndex, V[0], V[1], V[2])"
  },
  {
    "label": "SetRowAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRowAt(const int32 RowIndex, const int32 ColumnIndex, const FReal V0, const FReal V1, const FReal V2)"
  },
  {
    "label": "SetColumnAt()",
    "kind": "Method",
    "detail": "Function (* Row + + = V0 ;* Row + + = V1 ;* Row + + = V2 ; } void)",
    "insertText": "SetColumnAt(const int32 RowIndex, const int32 ColumnIndex, const FReal* V, const int32 NumV)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(RowIndex + II, ColumnIndex)"
  },
  {
    "label": "SetColumnAt()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetColumnAt(const int32 RowIndex, const int32 ColumnIndex, const FVec3& V)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(RowIndex + 0, ColumnIndex)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(RowIndex + 1, ColumnIndex)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(RowIndex + 2, ColumnIndex)"
  },
  {
    "label": "SetBlockAt()",
    "kind": "Method",
    "detail": "Function (} template<int32 T_EA> void)",
    "insertText": "SetBlockAt(const int32 RowOffset, const int32 ColumnOffset, const TDenseMatrix<T_EA>& V)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(II + RowOffset, JJ + ColumnOffset) = V.At(II, JJ)"
  },
  {
    "label": "SetBlockAt()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetBlockAt(const int32 RowOffset, const int32 ColumnOffset, const FMatrix33& V)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(II + RowOffset, JJ + ColumnOffset)"
  },
  {
    "label": "SetBlockAtDiagonal33()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetBlockAtDiagonal33(const int32 RowOffset, const int32 ColumnOffset, const FReal VDiag, const FReal VOffDiag)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (FReal* Row0 =&)",
    "insertText": "At(RowOffset + 0, ColumnOffset)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (* Row0 + + = VDiag ;* Row0 + + = VOffDiag ;* Row0 + + = VOffDiag ; FReal* Row1 =&)",
    "insertText": "At(RowOffset + 1, ColumnOffset)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (* Row1 + + = VOffDiag ;* Row1 + + = VDiag ;* Row1 + + = VOffDiag ; FReal* Row2 =&)",
    "insertText": "At(RowOffset + 2, ColumnOffset)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (* Row2 + + = VOffDiag ;* Row2 + + = VOffDiag ;* Row2 + + = VDiag ; } TDenseMatrix<MaxElements>)",
    "insertText": "Make(const int32 InNumRows, const int32 InNumCols)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TDenseMatrix<MaxElements>)",
    "insertText": "Make(const int32 InNumRows, const int32 InNumCols, const FReal V)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TDenseMatrix<MaxElements>)",
    "insertText": "Make(const int32 InNumRows, const int32 InNumCols, const FReal* V, const int32 VLen)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TDenseMatrix<MaxElements>)",
    "insertText": "Make(const FVec3& InM)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<MaxElements>)",
    "insertText": "M(3, 1)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(0, 0)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(1, 0)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(2, 0)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<MaxElements>)",
    "insertText": "M(3, 3)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(0, 1)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(0, 2)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(1, 1)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(1, 2)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(2, 1)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(2, 2)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<MaxElements>)",
    "insertText": "M(InNumRows, InNumCols)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "At(I, J) = (I == J)"
  },
  {
    "label": "MakeIdentity()",
    "kind": "Method",
    "detail": "Function (} } return M ; } TDenseMatrix<MaxElements>)",
    "insertText": "MakeIdentity(const int32 InDim)"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (} template<int32 T_EA> TDenseMatrix<MaxElements>)",
    "insertText": "Transpose(const TDenseMatrix<T_EA>& A)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS>)",
    "insertText": "Result(A.NumColumns(), A.NumRows())"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = A.At(ICol, IRow)"
  },
  {
    "label": "Negate()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA> TDenseMatrix<MaxElements>)",
    "insertText": "Negate(const TDenseMatrix<T_EA>& A)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS>)",
    "insertText": "Result(A.NumRows(), A.NumColumns())"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = -A.At(IRow, ICol)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "Add(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = A.At(IRow, ICol) + B.At(IRow, ICol)"
  },
  {
    "label": "Add_Symmetric()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "Add_Symmetric(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (FReal V = A .)",
    "insertText": "At(IRow, ICol) + B.At(IRow, ICol)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(ICol, IRow)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "Subtract(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = A.At(IRow, ICol) - B.At(IRow, ICol)"
  },
  {
    "label": "MultiplyAB()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyAB(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS>)",
    "insertText": "Result(A.NumRows(), B.NumColumns())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal V = 0 ;)",
    "insertText": "for(int32 II = 0; II < A.NumColumns(); ++II)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (V + = A .)",
    "insertText": "At(IRow, II) * B.At(II, ICol)"
  },
  {
    "label": "MultiplyAtB()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyAtB(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS>)",
    "insertText": "Result(A.NumColumns(), B.NumColumns())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal V = 0 ;)",
    "insertText": "for(int32 II = 0; II < A.NumRows(); ++II)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (V + = A .)",
    "insertText": "At(II, IRow) * B.At(II, ICol)"
  },
  {
    "label": "MultiplyABt()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyABt(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS>)",
    "insertText": "Result(A.NumRows(), B.NumRows())"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (V + = A .)",
    "insertText": "At(IRow, II) * B.At(ICol, II)"
  },
  {
    "label": "MultiplyAtBt()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyAtBt(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS>)",
    "insertText": "Result(A.NumColumns(), B.NumRows())"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (V + = A .)",
    "insertText": "At(II, IRow) * B.At(ICol, II)"
  },
  {
    "label": "MultiplyAB_Symmetric()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyAB_Symmetric(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "MultiplyBCAddA_Symmetric()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB,int32 T_EC> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyBCAddA_Symmetric(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B, const TDenseMatrix<T_EC>& C)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal V = 0 ;)",
    "insertText": "for(int32 II = 0; II < B.NumColumns(); ++II)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (V + = B .)",
    "insertText": "At(IRow, II) * C.At(II, ICol)"
  },
  {
    "label": "MultiplyAB()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyAB(const TDenseMatrix<T_EA>& A, const FMassMatrix& B)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS> Result = TDenseMatrix<T_MAXELEMENTS)",
    "insertText": "Make(A.NumRows(), 6)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = A.At(IRow, ICol) * B.M()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 IRow = 0; IRow < Result.NumRows(); ++IRow)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal V = 0 ;)",
    "insertText": "for(int32 KK = 3; KK < 6; ++KK)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (V + = A .)",
    "insertText": "At(IRow, KK) * B.I(KK - 3, ICol - 3)"
  },
  {
    "label": "MultiplyAB()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyAB(const FMassMatrix& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS> Result = TDenseMatrix<T_MAXELEMENTS)",
    "insertText": "Make(6, B.NumColumns())"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = A.M() * B.At(IRow, ICol)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 IRow = 3; IRow < 6; ++IRow)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (V + = A .)",
    "insertText": "I(IRow - 3, KK - 3) * B.At(KK, ICol)"
  },
  {
    "label": "MultiplyABt()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "MultiplyABt(const FMassMatrix& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_MAXELEMENTS> Result = TDenseMatrix<T_MAXELEMENTS)",
    "insertText": "Make(6, B.NumRows())"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = A.M() * B.At(ICol, IRow)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (V + = A .)",
    "insertText": "I(IRow - 3, KK - 3) * B.At(ICol, KK)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA> TDenseMatrix<MaxElements>)",
    "insertText": "Multiply(const TDenseMatrix<T_EA>& A, const FReal V)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "At(IRow, ICol) = A.At(IRow, ICol)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA> TDenseMatrix<MaxElements>)",
    "insertText": "Multiply(const FReal V, const TDenseMatrix<T_EA>& A)"
  },
  {
    "label": "Divide()",
    "kind": "Method",
    "detail": "Function (} template<int32 T_EA> TDenseMatrix<MaxElements>)",
    "insertText": "Divide(const TDenseMatrix<T_EA>& A, const FReal V)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } template<int32 T_EA,int32 T_EB> TDenseMatrix<MaxElements>)",
    "insertText": "DotProduct(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B)"
  },
  {
    "label": "TDenseMatrix()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TDenseMatrix(const int32 InNRows, const int32 InNCols, const FReal V) : NRows(InNRows) , NCols(InNCols)"
  },
  {
    "label": "TDenseMatrix()",
    "kind": "Method",
    "detail": "Function (M [ I ] = V ; } })",
    "insertText": "TDenseMatrix(const int32 InNRows, const int32 InNCols, const FReal* V, const int32 N) : NRows(InNRows) , NCols(InNCols)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 NLimited = FMath::Min<)",
    "insertText": "int32(NumElements(), N)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (M [ I ] = V [ I ] ; } } int32)",
    "insertText": "ElementIndex(const int32 RowIndex, const int32 ColumnIndex)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (FReal Sum = A .)",
    "insertText": "At(I, J)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Sum - = A .)",
    "insertText": "At(I, K) * A.At(J, K)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(I == J)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} else { A .)",
    "insertText": "At(J, I) = Sum / A.At(I, I)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(int32 I = 0; I < N; ++I)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "At(J, I)"
  },
  {
    "label": "SolveCholeskyFactorized()",
    "kind": "Method",
    "detail": "Function (} } return true ; } template<int32 T_EA,int32 T_EB,int32 T_EX> void)",
    "insertText": "SolveCholeskyFactorized(const TDenseMatrix<T_EA>& G, const TDenseMatrix<T_EB>& B, TDenseMatrix<T_EX>& X)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "SetDimensions(N, 1)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (FReal Sum = B .)",
    "insertText": "At(I, 0)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Sum - = G .)",
    "insertText": "At(I, K) * X.At(K, 0)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} X .)",
    "insertText": "At(I, 0) = Sum / G.At(I, I)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 I = N - 1; I >= 0; --I)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Sum - = G .)",
    "insertText": "At(K, I) * X.At(K, 0)"
  },
  {
    "label": "SolvePositiveDefinite()",
    "kind": "Method",
    "detail": "Function (} } template<int32 T_EA,int32 T_EB,int32 T_EX> bool)",
    "insertText": "SolvePositiveDefinite(const TDenseMatrix<T_EA>& A, const TDenseMatrix<T_EB>& B, TDenseMatrix<T_EX>& X)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TDenseMatrix<T_EA> G = A ;)",
    "insertText": "if(!CholeskyFactorize(G))"
  }
]