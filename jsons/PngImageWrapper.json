[
  {
    "label": "FPngImageWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPngImageWrapper"
  },
  {
    "label": "FPngImageWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" ImageWrapperBase . h \" # if WITH_UNREALPNG THIRD_PARTY_INCLUDES_START # include \" zlib . h \" # if WITH_LIBPNG_1_6 # include \" ThirdParty / libPNG / libPNG - 1 . 6 . 3 7 / png . h \" # include \" ThirdParty / libPNG / libPNG - 1 . 6 . 3 7 / pngstruct . h \" # include \" ThirdParty / libPNG / libPNG - 1 . 6 . 3 7 / pnginfo . h \" # else # include \" ThirdParty / libPNG / libPNG - 1 . 5 . 2 / png . h \" # include \" ThirdParty / libPNG / libPNG - 1 . 5 . 2 / pnginfo . h \" # endif # include<setjmp . h> THIRD_PARTY_INCLUDES_END class FPngImageWrapper : public FImageWrapperBase { public :)",
    "insertText": "FPngImageWrapper()"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Compress(int32 Quality)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetCompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCompressed(const void* InCompressedData, int64 InCompressedSize)"
  },
  {
    "label": "Uncompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uncompress(const ERGBFormat InFormat, int32 InBitDepth)"
  },
  {
    "label": "CanSetRawFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetRawFormat(const ERGBFormat InFormat, const int32 InBitDepth)"
  },
  {
    "label": "GetSupportedRawFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type)",
    "insertText": "GetSupportedRawFormat(const ERawImageFormat::Type InFormat)"
  },
  {
    "label": "IsPNG()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsPNG()"
  },
  {
    "label": "LoadPNGHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadPNGHeader()"
  },
  {
    "label": "UncompressPNGData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UncompressPNGData(const ERGBFormat InFormat, const int32 InBitDepth)"
  },
  {
    "label": "user_read_compressed()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "user_read_compressed(png_structp png_ptr, png_bytep data, png_size_t length)"
  },
  {
    "label": "user_write_compressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "user_write_compressed(png_structp png_ptr, png_bytep data, png_size_t length)"
  },
  {
    "label": "user_flush_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "user_flush_data(png_structp png_ptr)"
  },
  {
    "label": "user_error_fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "user_error_fn(png_structp png_ptr, png_const_charp error_msg)"
  },
  {
    "label": "user_warning_fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "user_warning_fn(png_structp png_ptr, png_const_charp warning_msg)"
  },
  {
    "label": "user_malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "user_malloc(png_structp png_ptr, png_size_t size)"
  },
  {
    "label": "user_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "user_free(png_structp png_ptr, png_voidp struct_ptr)"
  }
]