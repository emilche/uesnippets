[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Q",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Q"
  },
  {
    "label": "T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T1"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "T3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T3"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHFUN_H # define INCLUDED_IMATHFUN_H # include<limits> # include<cstdint> # include \" ImathExport . h \" # include \" ImathNamespace . h \" # include \" ImathPlatform . h \" IMATH_INTERNAL_NAMESPACE_HEADER_ENTER template<class T> IMATH_HOSTDEVICE T)",
    "insertText": "abs(T a)"
  },
  {
    "label": "sign()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE int)",
    "insertText": "sign(T a)"
  },
  {
    "label": "lerp()",
    "kind": "Method",
    "detail": "Function (} template<class T,class Q> IMATH_HOSTDEVICE T)",
    "insertText": "lerp(T a, T b, Q t)"
  },
  {
    "label": "ulerp()",
    "kind": "Method",
    "detail": "Function (} template<class T,class Q> IMATH_HOSTDEVICE T)",
    "insertText": "ulerp(T a, T b, Q t)"
  },
  {
    "label": "lerpfactor()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 T)",
    "insertText": "lerpfactor(T m, T a, T b)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = b - a ; T n = m - a ;)",
    "insertText": "if(abs (d) > T (1) || abs (n) < std::numeric_limits<T>::max() * abs (d))"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE T)",
    "insertText": "clamp(T a, T l, T h)"
  },
  {
    "label": "cmp()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE int)",
    "insertText": "cmp(T a, T b)"
  },
  {
    "label": "cmpt()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE int)",
    "insertText": "cmpt(T a, T b, T t)"
  },
  {
    "label": "iszero()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE bool)",
    "insertText": "iszero(T a, T t)"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (} template<class T1,class T2,class T3> IMATH_HOSTDEVICE bool)",
    "insertText": "equal(T1 a, T2 b, T3 t)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE int)",
    "insertText": "floor(T x)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE int)",
    "insertText": "ceil(T x)"
  },
  {
    "label": "trunc()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE int)",
    "insertText": "trunc(T x)"
  },
  {
    "label": "divs()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE int)",
    "insertText": "divs(int x, int y)"
  },
  {
    "label": "mods()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE int)",
    "insertText": "mods(int x, int y)"
  },
  {
    "label": "divp()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE int)",
    "insertText": "divp(int x, int y)"
  },
  {
    "label": "modp()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE int)",
    "insertText": "modp(int x, int y)"
  },
  {
    "label": "succf()",
    "kind": "Method",
    "detail": "Function (} IMATH_EXPORT float)",
    "insertText": "succf(float f)"
  },
  {
    "label": "predf()",
    "kind": "Method",
    "detail": "Function (IMATH_EXPORT float)",
    "insertText": "predf(float f)"
  },
  {
    "label": "succd()",
    "kind": "Method",
    "detail": "Function (IMATH_EXPORT double)",
    "insertText": "succd(double d)"
  },
  {
    "label": "predd()",
    "kind": "Method",
    "detail": "Function (IMATH_EXPORT double)",
    "insertText": "predd(double d)"
  },
  {
    "label": "finitef()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE bool)",
    "insertText": "finitef(float f)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (union { float f ; int i ; } u ; u . f = f ;)",
    "insertText": "return(u.i & 0x7f800000)"
  },
  {
    "label": "finited()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE bool)",
    "insertText": "finited(double d)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (union { double d ; uint64_t i ; } u ; u . d = d ;)",
    "insertText": "return(u.i & 0x7ff0000000000000LL)"
  }
]