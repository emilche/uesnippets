[
  {
    "label": "CharStep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharStep"
  },
  {
    "label": "CharStepUTF8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharStepUTF8"
  },
  {
    "label": "CharStepShiftJis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharStepShiftJis"
  },
  {
    "label": "CharStepEUCJP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharStepEUCJP"
  },
  {
    "label": "CharStepCP949",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharStepCP949"
  },
  {
    "label": "CharStepCN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharStepCN"
  },
  {
    "label": "isAhighchar()",
    "kind": "Method",
    "detail": "Function (# include<ctype . h> # define)",
    "insertText": "isAhighchar(x) ( (0x80 & *(x)) != 0 ) # define isAcntrl(x) ( ! isAhighchar(x) && iscntrl(*(x)) ) # define isAdigit(x) ( ! isAhighchar(x) && isdigit(*(x)) ) # define isAprint(x) ( isAhighchar(x) || isprint(*(x)) ) # define isAspace(x) ( ! isAhighchar(x) && isspace(*(x)) ) # define isAalnum(x) ( isAhighchar(x) || isalnum(*(x)) ) # define toAupper(x) ( isAhighchar(x) ? *(x) : toupper(*(x)) ) # define toAlower(x) ( isAhighchar(x) ? *(x) : tolower(*(x)) ) # define isBlank(x) ((x)==' '||(x)=='\\t') # define tolowerq(x) ((x)>='A'&&(x)<='Z'?(x)-'A'+'a':(x)) # define toupperq(x) ((x)>='a'&&(x)<='z'?(x)-'a'+'A':(x))"
  },
  {
    "label": "CharStep()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CharStep(char * p ) : ptr(p)"
  },
  {
    "label": "CharStep()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CharStep()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "Next()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "Next(int)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "Ptr()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (CharStep*)",
    "insertText": "Create(char * p, int charset = 0)"
  },
  {
    "label": "CharStepUTF8()",
    "kind": "Method",
    "detail": "Function (protected : char* ptr ; } ; class CharStepUTF8 : public CharStep { public :)",
    "insertText": "CharStepUTF8(char * p ) : CharStep( p)"
  },
  {
    "label": "CharStepShiftJis()",
    "kind": "Method",
    "detail": "Function (} ; class CharStepShiftJis : public CharStep { public :)",
    "insertText": "CharStepShiftJis(char * p ) : CharStep( p)"
  },
  {
    "label": "CharStepEUCJP()",
    "kind": "Method",
    "detail": "Function (} ; class CharStepEUCJP : public CharStep { public :)",
    "insertText": "CharStepEUCJP(char * p ) : CharStep( p)"
  },
  {
    "label": "CharStepCP949()",
    "kind": "Method",
    "detail": "Function (} ; class CharStepCP949 : public CharStep { public :)",
    "insertText": "CharStepCP949(char * p ) : CharStep( p)"
  },
  {
    "label": "CharStepCN()",
    "kind": "Method",
    "detail": "Function (} ; class CharStepCN : public CharStep { public :)",
    "insertText": "CharStepCN(char * p ) : CharStep( p)"
  }
]