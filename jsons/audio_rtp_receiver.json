[
  {
    "label": "AudioRtpReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioRtpReceiver"
  },
  {
    "label": "AudioRtpReceiver()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_AUDIO_RTP_RECEIVER_H_ # define PC_AUDIO_RTP_RECEIVER_H_ # include<stdint . h> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / crypto / frame_decryptor_interface . h \" # include \" api / dtls_transport_interface . h \" # include \" api / frame_transformer_interface . h \" # include \" api / media_stream_interface . h \" # include \" api / media_types . h \" # include \" api / rtp_parameters . h \" # include \" api / rtp_receiver_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / transport / rtp / rtp_source . h \" # include \" media / base / media_channel . h \" # include \" pc / audio_track . h \" # include \" pc / jitter_buffer_delay . h \" # include \" pc / media_stream_track_proxy . h \" # include \" pc / remote_audio_source . h \" # include \" pc / rtp_receiver . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class AudioRtpReceiver : public ObserverInterface,public AudioSourceInterface::AudioObserver,public RtpReceiverInternal { public :)",
    "insertText": "AudioRtpReceiver(rtc::Thread* worker_thread, std::string receiver_id, std::vector<std::string> stream_ids, bool is_unified_plan, cricket::VoiceMediaChannel* voice_channel = nullptr)"
  },
  {
    "label": "AudioRtpReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioRtpReceiver(rtc::Thread* worker_thread, const std::string& receiver_id, const std::vector<rtc::scoped_refptr<MediaStreamInterface>>& streams, bool is_unified_plan, cricket::VoiceMediaChannel* media_channel = nullptr)"
  },
  {
    "label": "AudioRtpReceiver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioRtpReceiver()"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChanged()"
  },
  {
    "label": "OnSetVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetVolume(double volume)"
  },
  {
    "label": "audio_track()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioTrackInterface>)",
    "insertText": "audio_track()"
  },
  {
    "label": "stream_ids()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "stream_ids()"
  },
  {
    "label": "streams()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<MediaStreamInterface>>)",
    "insertText": "streams()"
  },
  {
    "label": "media_type()",
    "kind": "Method",
    "detail": "Function (cricket::MediaType)",
    "insertText": "media_type()"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(rtc::scoped_refptr<FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "GetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<FrameDecryptorInterface>)",
    "insertText": "GetFrameDecryptor()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetupMediaChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMediaChannel(uint32_t ssrc)"
  },
  {
    "label": "SetupUnsignaledMediaChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUnsignaledMediaChannel()"
  },
  {
    "label": "ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ssrc()"
  },
  {
    "label": "NotifyFirstPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFirstPacketReceived()"
  },
  {
    "label": "set_stream_ids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_stream_ids(std::vector<std::string> stream_ids)"
  },
  {
    "label": "set_transport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_transport(rtc::scoped_refptr<DtlsTransportInterface> dtls_transport)"
  },
  {
    "label": "SetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreams(const std::vector<rtc::scoped_refptr<MediaStreamInterface>>& streams)"
  },
  {
    "label": "SetObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObserver(RtpReceiverObserverInterface* observer)"
  },
  {
    "label": "SetJitterBufferMinimumDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJitterBufferMinimumDelay(absl::optional<double> delay_seconds)"
  },
  {
    "label": "SetMediaChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMediaChannel(cricket::MediaChannel* media_channel)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSource>)",
    "insertText": "GetSources()"
  },
  {
    "label": "AttachmentId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AttachmentId()"
  },
  {
    "label": "RestartMediaChannel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RestartMediaChannel(absl::optional<uint32_t> ssrc) RTC_RUN_ON(&signaling_thread_checker_)"
  },
  {
    "label": "RestartMediaChannel_w()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartMediaChannel_w(absl::optional<uint32_t> ssrc, bool track_enabled, MediaSourceInterface::SourceState state) RTC_RUN_ON(worker_thread_)"
  },
  {
    "label": "Reconfigure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reconfigure(bool track_enabled) RTC_RUN_ON(worker_thread_)"
  },
  {
    "label": "SetOutputVolume_w()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputVolume_w(double volume) RTC_RUN_ON(worker_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker signaling_thread_checker_ ; rtc::Thread* const worker_thread_ ; const std::string id_ ; const rtc::scoped_refptr<RemoteAudioSource> source_ ; const rtc::scoped_refptr<AudioTrackProxyWithInternal<AudioTrack>> track_ ; cricket::VoiceMediaChannel* media_channel_)",
    "insertText": "RTC_GUARDED_BY(worker_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<MediaStreamInterface>> streams_)",
    "insertText": "RTC_GUARDED_BY(&signaling_thread_checker_)"
  }
]