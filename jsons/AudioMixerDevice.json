[
  {
    "label": "FOnSubmixEnvelopeBP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnSubmixEnvelopeBP"
  },
  {
    "label": "IAudioMixerPlatformInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerPlatformInterface"
  },
  {
    "label": "USoundModulatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundModulatorBase"
  },
  {
    "label": "IAudioLinkFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioLinkFactory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "FMixerSourceVoice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceVoice"
  },
  {
    "label": "FMixerSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSubmix"
  },
  {
    "label": "FAudioFormatSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioFormatSettings"
  },
  {
    "label": "FAudioThreadTimingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioThreadTimingData"
  },
  {
    "label": "FAudioClockTimingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioClockTimingData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSubmixMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubmixMap"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FObjectId InObjectId, FMixerSubmixPtr InMixerSubmix)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterate(FIterFunc InFunction)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Remove(const FObjectId InObjectId)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FMixerDevice()",
    "kind": "Method",
    "detail": "Function (AUDIOMIXER_API)",
    "insertText": "FMixerDevice(IAudioMixerPlatformInterface* InAudioMixerPlatform)"
  },
  {
    "label": "PauseRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRecording(USoundSubmix* InSubmix)"
  },
  {
    "label": "ResumeRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeRecording(USoundSubmix* InSubmix)"
  },
  {
    "label": "FlushExtended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushExtended(UWorld* WorldToFlush, bool bClearActivatedReverb)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Audio::FMixerDevice\")"
  },
  {
    "label": "FindSubmixInstanceByObjectId()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixPtr)",
    "insertText": "FindSubmixInstanceByObjectId(uint32 InObjectId)"
  },
  {
    "label": "ReleaseMixerSourceVoice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMixerSourceVoice(FMixerSourceVoice* InSourceVoice)"
  },
  {
    "label": "Get3DChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get3DChannelMap(const int32 InSubmixNumChannels, const FWaveInstance* InWaveInstance, const float EmitterAzimuth, const float NonSpatiliazedFactor, const TMap<EAudioMixerChannel::Type, float>* InOmniMap, float InDefaultOmniValue, Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "Get2DChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get2DChannelMap(bool bIsVorbis, const int32 NumSourceChannels, const int32 NumOutputChannels, const bool bIsCenterChannelOnly, Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "GetBaseDefaultSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetBaseDefaultSubmix()"
  },
  {
    "label": "GetMainSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMainSubmix()"
  },
  {
    "label": "GetReverbSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetReverbSubmix()"
  },
  {
    "label": "GetEQSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetEQSubmix()"
  },
  {
    "label": "AddMasterSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMasterSubmixEffect(FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "RemoveMasterSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMasterSubmixEffect(uint32 SubmixEffectId)"
  },
  {
    "label": "ClearMasterSubmixEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMasterSubmixEffects()"
  },
  {
    "label": "GetMasterSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMasterSubmix()"
  },
  {
    "label": "GetMasterReverbSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMasterReverbSubmix()"
  },
  {
    "label": "GetMasterEQSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMasterEQSubmix()"
  },
  {
    "label": "AddMainSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMainSubmixEffect(FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "RemoveMainSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMainSubmixEffect(uint32 SubmixEffectId)"
  },
  {
    "label": "ClearMainSubmixEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMainSubmixEffects()"
  },
  {
    "label": "AddSubmixEffect()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSubmixEffect(USoundSubmix* InSoundSubmix, FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "RemoveSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubmixEffect(USoundSubmix* InSoundSubmix, uint32 SubmixEffectId)"
  },
  {
    "label": "RemoveSubmixEffectAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubmixEffectAtIndex(USoundSubmix* InSoundSubmix, int32 SubmixChainIndex)"
  },
  {
    "label": "ReplaceSoundEffectSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSoundEffectSubmix(USoundSubmix* InSoundSubmix, int32 InSubmixChainIndex, FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "ClearSubmixEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubmixEffects(USoundSubmix* InSoundSubmix)"
  },
  {
    "label": "IsEndpointSubmix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEndpointSubmix(const USoundSubmixBase* InSubmix)"
  },
  {
    "label": "ResetAudioRenderingThreadId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAudioRenderingThreadId()"
  },
  {
    "label": "RebuildSubmixLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildSubmixLinks(const USoundSubmixBase& SoundSubmix, FMixerSubmixPtr& SubmixInstance)"
  },
  {
    "label": "InitializeChannelMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeChannelMaps()"
  },
  {
    "label": "GetChannelMapCacheId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChannelMapCacheId(const int32 NumSourceChannels, const int32 NumOutputChannels, const bool bIsCenterChannelOnly)"
  },
  {
    "label": "CacheChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheChannelMap(const int32 NumSourceChannels, const int32 NumOutputChannels, const bool bIsCenterChannelOnly)"
  },
  {
    "label": "InitializeChannelAzimuthMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeChannelAzimuthMap(const int32 NumChannels)"
  },
  {
    "label": "WhiteNoiseTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WhiteNoiseTest(FAlignedFloatBuffer& Output)"
  },
  {
    "label": "SineOscTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SineOscTest(FAlignedFloatBuffer& Output)"
  },
  {
    "label": "LoadRequiredSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadRequiredSubmix(ERequiredSubmixes InType, const FString& InDefaultName, bool bInDefaultMuteWhenBackgrounded, FSoftObjectPath& InOutObjectPath)"
  },
  {
    "label": "LoadPluginSoundSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPluginSoundSubmixes()"
  },
  {
    "label": "LoadSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSoundSubmix(USoundSubmixBase& SoundSubmix)"
  },
  {
    "label": "InitSoundfieldAndEndpointDataForSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundfieldAndEndpointDataForSubmix(const USoundSubmixBase& InSoundSubmix, FMixerSubmixPtr MixerSubmix, bool bAllowReInit)"
  },
  {
    "label": "UnloadSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadSoundSubmix(const USoundSubmixBase& SoundSubmix, const bool bReparentChildren)"
  },
  {
    "label": "PumpCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpCommandQueue()"
  },
  {
    "label": "PumpGameThreadCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpGameThreadCommandQueue()"
  },
  {
    "label": "UpdateAudioClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioClock()"
  },
  {
    "label": "CreateSynchronizedAudioTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSynchronizedAudioTaskQueue(AudioTaskQueueId QueueId)"
  },
  {
    "label": "DestroySynchronizedAudioTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySynchronizedAudioTaskQueue(AudioTaskQueueId QueueId, bool RunCurrentQueue = false)"
  },
  {
    "label": "KickQueuedTasks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "KickQueuedTasks(AudioTaskQueueId QueueId)"
  }
]