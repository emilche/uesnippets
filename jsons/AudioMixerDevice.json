[
  {
    "label": "FOnSubmixEnvelopeBP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnSubmixEnvelopeBP"
  },
  {
    "label": "IAudioMixerPlatformInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerPlatformInterface"
  },
  {
    "label": "USoundModulatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundModulatorBase"
  },
  {
    "label": "IAudioLinkFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioLinkFactory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "FMixerSourceVoice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceVoice"
  },
  {
    "label": "FMixerSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSubmix"
  },
  {
    "label": "FAudioFormatSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioFormatSettings"
  },
  {
    "label": "FAudioThreadTimingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioThreadTimingData"
  },
  {
    "label": "FAudioClockTimingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioClockTimingData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSubmixMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubmixMap"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Audio . h \" # include \" AudioMixer . h \" # include \" AudioDevice . h \" # include \" Containers / MpscQueue . h \" # include \" Sound / SoundSubmix . h \" # include \" Sound / SoundGenerator . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / MultithreadedPatching . h \" # include \" Quartz / AudioMixerClockManager . h \" # include \" UObject / GCObject . h \" # include \" UObject / StrongObjectPtr . h \" class FOnSubmixEnvelopeBP ; class IAudioMixerPlatformInterface ; class USoundModulatorBase ; class IAudioLinkFactory ; # include \" AudioMixerDevice . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Main = 0,BaseDefault = 1,Reverb = 2,EQ = 3,Count = 4)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "FAudioThreadTimingData()",
    "kind": "Method",
    "detail": "Function (namespace Audio { class FMixerSourceManager ; class FMixerSourceVoice ; class FMixerSubmix ; class FAudioFormatSettings ; typedef TSharedPtr<FMixerSubmix,ESPMode::ThreadSafe> FMixerSubmixPtr ; typedef TWeakPtr<FMixerSubmix,ESPMode::ThreadSafe> FMixerSubmixWeakPtr ; struct FAudioThreadTimingData { double StartTime ; double AudioThreadTime ; double AudioRenderThreadTime ; double AudioThreadTimeJitterDelta ;)",
    "insertText": "FAudioThreadTimingData() : StartTime(0.0) , AudioThreadTime(0.0) , AudioRenderThreadTime(0.0) , AudioThreadTimeJitterDelta(0.05)"
  },
  {
    "label": "GetInterpolatedAudioClock()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAudioClockTimingData { double UpdateTime = 0 . 0 ; double)",
    "insertText": "GetInterpolatedAudioClock(const double InAudioClock, const double InAudioClockDelta)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} ; namespace EMasterSubmixType { enum Type { Master = static_cast<)",
    "insertText": "uint8(ERequiredSubmixes::Main), BaseDefault = static_cast<uint8>(ERequiredSubmixes::BaseDefault), Reverb = static_cast<uint8>(ERequiredSubmixes::Reverb), EQ = static_cast<uint8>(ERequiredSubmixes::EQ), Count = static_cast<uint8>(ERequiredSubmixes::Count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} struct FSubmixMap { public : using FObjectId = uint32 ; using FPair = TPair<FObjectId,FMixerSubmixPtr> ; using FIterFunc = TUniqueFunction<)",
    "insertText": "void(const FPair&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FObjectId InObjectId, FMixerSubmixPtr InMixerSubmix)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterate(FIterFunc InFunction)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixPtr)",
    "insertText": "FindRef(FObjectId InObjectId)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Remove(const FObjectId InObjectId)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (TSet<FSubmixMap::FObjectId>)",
    "insertText": "GetKeys()"
  },
  {
    "label": "FMixerDevice()",
    "kind": "Method",
    "detail": "Function (private : TMap<FObjectId,FMixerSubmixPtr> SubmixMap ; FCriticalSection MutationLock ; } ; class FMixerDevice : public FAudioDevice,public IAudioMixer,public FGCObject { public :)",
    "insertText": "FMixerDevice(IAudioMixerPlatformInterface* InAudioMixerPlatform)"
  },
  {
    "label": "FMixerDevice()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMixerDevice()"
  },
  {
    "label": "UpdateDeviceDeltaTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceDeltaTime()"
  },
  {
    "label": "GetAudioDeviceList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAudioDeviceList(TArray<FString>& OutAudioDeviceNames)"
  },
  {
    "label": "InitializeHardware()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeHardware()"
  },
  {
    "label": "FadeIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FadeIn()"
  },
  {
    "label": "FadeOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FadeOut()"
  },
  {
    "label": "TeardownHardware()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownHardware()"
  },
  {
    "label": "UpdateHardwareTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHardwareTiming()"
  },
  {
    "label": "UpdateGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGameThread()"
  },
  {
    "label": "UpdateHardware()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHardware()"
  },
  {
    "label": "GetAudioTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAudioTime()"
  },
  {
    "label": "GetInterpolatedAudioClock()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetInterpolatedAudioClock()"
  },
  {
    "label": "CreateEffectsManager()",
    "kind": "Method",
    "detail": "Function (FAudioEffectsManager*)",
    "insertText": "CreateEffectsManager()"
  },
  {
    "label": "CreateSoundSource()",
    "kind": "Method",
    "detail": "Function (FSoundSource*)",
    "insertText": "CreateSoundSource()"
  },
  {
    "label": "HasCompressedAudioInfoClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompressedAudioInfoClass(USoundWave* SoundWave)"
  },
  {
    "label": "SupportsRealtimeDecompression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsRealtimeDecompression()"
  },
  {
    "label": "DisablePCMAudioCaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisablePCMAudioCaching()"
  },
  {
    "label": "ValidateAPICall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAPICall(const TCHAR* Function, uint32 ErrorCode)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (# if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CountBytes(class FArchive& Ar)"
  },
  {
    "label": "IsExernalBackgroundSoundActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExernalBackgroundSoundActive()"
  },
  {
    "label": "ResumeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeContext()"
  },
  {
    "label": "SuspendContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendContext()"
  },
  {
    "label": "EnableDebugAudioOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDebugAudioOutput()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformSettings)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "RegisterSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSoundSubmix(USoundSubmixBase* SoundSubmix, bool bInit = true)"
  },
  {
    "label": "UnregisterSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSoundSubmix(const USoundSubmixBase* SoundSubmix, const bool bReparentChildren)"
  },
  {
    "label": "GetNumActiveSources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveSources()"
  },
  {
    "label": "UpdateSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSourceEffectChain(const uint32 SourceEffectChainId, const TArray<FSourceEffectChainEntry>& SourceEffectChain, const bool bPlayEffectChainTails)"
  },
  {
    "label": "GetCurrentSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurrentSourceEffectChain(const uint32 SourceEffectChainId, TArray<FSourceEffectChainEntry>& OutCurrentSourceEffectChainEntries)"
  },
  {
    "label": "UpdateSubmixProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubmixProperties(USoundSubmixBase* InSubmix)"
  },
  {
    "label": "SetSubmixWetDryLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixWetDryLevel(USoundSubmix* InSoundSubmix, float InOutputVolume, float InWetLevel, float InDryLevel)"
  },
  {
    "label": "SetSubmixOutputVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixOutputVolume(USoundSubmix* InSoundSubmix, float InOutputVolume)"
  },
  {
    "label": "SetSubmixWetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixWetLevel(USoundSubmix* InSoundSubmix, float InWetLevel)"
  },
  {
    "label": "SetSubmixDryLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixDryLevel(USoundSubmix* InSoundSubmix, float InDryLevel)"
  },
  {
    "label": "SetSubmixAutoDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixAutoDisable(USoundSubmix* InSoundSubmix, bool bInAutoDisable)"
  },
  {
    "label": "SetSubmixAutoDisableTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixAutoDisableTime(USoundSubmix* InSoundSubmix, float InDisableTime)"
  },
  {
    "label": "UpdateSubmixModulationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubmixModulationSettings(USoundSubmix* InSoundSubmix, const TSet<TObjectPtr<USoundModulatorBase>>& InOutputModulation, const TSet<TObjectPtr<USoundModulatorBase>>& InWetLevelModulation, const TSet<TObjectPtr<USoundModulatorBase>>& InDryLevelModulation)"
  },
  {
    "label": "SetSubmixModulationBaseLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixModulationBaseLevels(USoundSubmix* InSoundSubmix, float InVolumeModBase, float InWetModBase, float InDryModBase)"
  },
  {
    "label": "SetSubmixEffectChainOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixEffectChainOverride(USoundSubmix* InSoundSubmix, const TArray<FSoundEffectSubmixPtr>& InSubmixEffectPresetChain, float InFadeTimeSec)"
  },
  {
    "label": "ClearSubmixEffectChainOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubmixEffectChainOverride(USoundSubmix* InSoundSubmix, float InFadeTimeSec)"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording(USoundSubmix* InSubmix, float ExpectedRecordingDuration)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (Audio::FAlignedFloatBuffer&)",
    "insertText": "StopRecording(USoundSubmix* InSubmix, float& OutNumChannels, float& OutSampleRate)"
  },
  {
    "label": "PauseRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRecording(USoundSubmix* InSubmix)"
  },
  {
    "label": "ResumeRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeRecording(USoundSubmix* InSubmix)"
  },
  {
    "label": "StartEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEnvelopeFollowing(USoundSubmix* InSubmix)"
  },
  {
    "label": "StopEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEnvelopeFollowing(USoundSubmix* InSubmix)"
  },
  {
    "label": "AddEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnvelopeFollowerDelegate(USoundSubmix* InSubmix, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "RemoveEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnvelopeFollowerDelegate(USoundSubmix* InSubmix, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "StartSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectrumAnalysis(USoundSubmix* InSubmix, const FSoundSpectrumAnalyzerSettings& InSettings)"
  },
  {
    "label": "StopSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSpectrumAnalysis(USoundSubmix* InSubmix)"
  },
  {
    "label": "GetMagnitudesForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMagnitudesForFrequencies(USoundSubmix* InSubmix, const TArray<float>& InFrequencies, TArray<float>& OutMagnitudes)"
  },
  {
    "label": "GetPhasesForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPhasesForFrequencies(USoundSubmix* InSubmix, const TArray<float>& InFrequencies, TArray<float>& OutPhases)"
  },
  {
    "label": "AddSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpectralAnalysisDelegate(USoundSubmix* InSubmix, const FSoundSpectrumAnalyzerDelegateSettings& InDelegateSettings, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "RemoveSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpectralAnalysisDelegate(USoundSubmix* InSubmix, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "RegisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSubmixBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> InSubmixBufferListener, USoundSubmix& InSubmix)"
  },
  {
    "label": "UnregisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubmixBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> InSubmixBufferListener, USoundSubmix& InSubmix)"
  },
  {
    "label": "AddPatchForSubmix()",
    "kind": "Method",
    "detail": "Function (FPatchOutputStrongPtr)",
    "insertText": "AddPatchForSubmix(uint32 InObjectId, float InPatchGain)"
  },
  {
    "label": "FlushExtended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushExtended(UWorld* WorldToFlush, bool bClearActivatedReverb)"
  },
  {
    "label": "FlushAudioRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAudioRenderingCommands(bool bPumpSynchronously = false)"
  },
  {
    "label": "IsNonRealtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonRealtime()"
  },
  {
    "label": "OnProcessAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnProcessAudioStream(FAlignedFloatBuffer& OutputBuffer)"
  },
  {
    "label": "OnAudioStreamShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioStreamShutdown()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "FindSubmixInstanceByObjectId()",
    "kind": "Method",
    "detail": "Function (} FMixerSubmixPtr)",
    "insertText": "FindSubmixInstanceByObjectId(uint32 InObjectId)"
  },
  {
    "label": "GetSubmixInstance()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetSubmixInstance(const USoundSubmixBase* SoundSubmix)"
  },
  {
    "label": "GetFactoryForSubmixInstance()",
    "kind": "Method",
    "detail": "Function (ISoundfieldFactory*)",
    "insertText": "GetFactoryForSubmixInstance(USoundSubmix* SoundSubmix)"
  },
  {
    "label": "GetFactoryForSubmixInstance()",
    "kind": "Method",
    "detail": "Function (ISoundfieldFactory*)",
    "insertText": "GetFactoryForSubmixInstance(FMixerSubmixWeakPtr& SoundSubmixPtr)"
  },
  {
    "label": "CheckAudioThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAudioThread()"
  },
  {
    "label": "CheckAudioRenderingThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAudioRenderingThread()"
  },
  {
    "label": "IsAudioRenderingThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioRenderingThread()"
  },
  {
    "label": "GetMixerSourceVoice()",
    "kind": "Method",
    "detail": "Function (FMixerSourceVoice*)",
    "insertText": "GetMixerSourceVoice()"
  },
  {
    "label": "ReleaseMixerSourceVoice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMixerSourceVoice(FMixerSourceVoice* InSourceVoice)"
  },
  {
    "label": "GetNumSources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSources()"
  },
  {
    "label": "GetAudioLinkFactory()",
    "kind": "Method",
    "detail": "Function (IAudioLinkFactory*)",
    "insertText": "GetAudioLinkFactory()"
  },
  {
    "label": "GetPlatformDeviceInfo()",
    "kind": "Method",
    "detail": "Function (const FAudioPlatformDeviceInfo&)",
    "insertText": "GetPlatformDeviceInfo()"
  },
  {
    "label": "Get2DChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get2DChannelMap(bool bIsVorbis, const int32 NumSourceChannels, const bool bIsCenterChannelOnly, Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "Get2DChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get2DChannelMap(bool bIsVorbis, const int32 NumSourceChannels, const int32 NumOutputChannels, const bool bIsCenterChannelOnly, Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "GetDeviceSampleRate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDeviceSampleRate()"
  },
  {
    "label": "GetDeviceOutputChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDeviceOutputChannels()"
  },
  {
    "label": "GetSourceManager()",
    "kind": "Method",
    "detail": "Function (FMixerSourceManager*)",
    "insertText": "GetSourceManager()"
  },
  {
    "label": "GetMainSubmixObject()",
    "kind": "Method",
    "detail": "Function (USoundSubmix&)",
    "insertText": "GetMainSubmixObject()"
  },
  {
    "label": "GetBaseDefaultSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetBaseDefaultSubmix()"
  },
  {
    "label": "GetMainSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMainSubmix()"
  },
  {
    "label": "GetReverbSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetReverbSubmix()"
  },
  {
    "label": "GetEQSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetEQSubmix()"
  },
  {
    "label": "AddMasterSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMasterSubmixEffect(FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "RemoveMasterSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMasterSubmixEffect(uint32 SubmixEffectId)"
  },
  {
    "label": "ClearMasterSubmixEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMasterSubmixEffects()"
  },
  {
    "label": "GetMasterSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMasterSubmix()"
  },
  {
    "label": "GetMasterReverbSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMasterReverbSubmix()"
  },
  {
    "label": "GetMasterEQSubmix()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixWeakPtr)",
    "insertText": "GetMasterEQSubmix()"
  },
  {
    "label": "AddMainSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMainSubmixEffect(FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "RemoveMainSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMainSubmixEffect(uint32 SubmixEffectId)"
  },
  {
    "label": "ClearMainSubmixEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMainSubmixEffects()"
  },
  {
    "label": "AddSubmixEffect()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSubmixEffect(USoundSubmix* InSoundSubmix, FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "RemoveSubmixEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubmixEffect(USoundSubmix* InSoundSubmix, uint32 SubmixEffectId)"
  },
  {
    "label": "RemoveSubmixEffectAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubmixEffectAtIndex(USoundSubmix* InSoundSubmix, int32 SubmixChainIndex)"
  },
  {
    "label": "ReplaceSoundEffectSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSoundEffectSubmix(USoundSubmix* InSoundSubmix, int32 InSubmixChainIndex, FSoundEffectSubmixPtr SoundEffect)"
  },
  {
    "label": "ClearSubmixEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubmixEffects(USoundSubmix* InSoundSubmix)"
  },
  {
    "label": "GetChannelArray()",
    "kind": "Method",
    "detail": "Function (const TArray<EAudioMixerChannel::Type>&)",
    "insertText": "GetChannelArray()"
  },
  {
    "label": "GetListenerTransforms()",
    "kind": "Method",
    "detail": "Function (const TArray<FTransform>*)",
    "insertText": "GetListenerTransforms()"
  },
  {
    "label": "GetDefaultChannelPositions()",
    "kind": "Method",
    "detail": "Function (const FChannelPositionInfo*)",
    "insertText": "GetDefaultChannelPositions()"
  },
  {
    "label": "IsEndpointSubmix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEndpointSubmix(const USoundSubmixBase* InSubmix)"
  },
  {
    "label": "MakePatch()",
    "kind": "Method",
    "detail": "Function (FPatchOutputStrongPtr)",
    "insertText": "MakePatch(int32 InFrames, int32 InChannels, float InGain)"
  },
  {
    "label": "AudioRenderThreadCommand()",
    "kind": "Method",
    "detail": "Function (FQuartzClockManager QuantizedEventClockManager ; TSharedPtr<FPersistentQuartzSubsystemData,ESPMode::ThreadSafe> QuartzSubsystemData { nullptr } ; FCriticalSection QuartzPersistentStateCritSec ; void)",
    "insertText": "AudioRenderThreadCommand(TFunction<void()> Command)"
  },
  {
    "label": "GameThreadMPSCCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThreadMPSCCommand(TFunction<void()> InCommand)"
  },
  {
    "label": "DrawSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSubmixes(FOutputDevice& InOutput, const TArray<FString>& InArgs)"
  },
  {
    "label": "InitSoundSubmixes()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitSoundSubmixes()"
  },
  {
    "label": "OnListenerUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerUpdated(const TArray<FListener>& InListeners)"
  },
  {
    "label": "ResetAudioRenderingThreadId()",
    "kind": "Method",
    "detail": "Function (TArray<FTransform> ListenerTransforms ; private : void)",
    "insertText": "ResetAudioRenderingThreadId()"
  },
  {
    "label": "RebuildSubmixLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildSubmixLinks(const USoundSubmixBase& SoundSubmix, FMixerSubmixPtr& SubmixInstance)"
  },
  {
    "label": "InitializeChannelMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeChannelMaps()"
  },
  {
    "label": "GetChannelMapCacheId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChannelMapCacheId(const int32 NumSourceChannels, const int32 NumOutputChannels, const bool bIsCenterChannelOnly)"
  },
  {
    "label": "CacheChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheChannelMap(const int32 NumSourceChannels, const int32 NumOutputChannels, const bool bIsCenterChannelOnly)"
  },
  {
    "label": "InitializeChannelAzimuthMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeChannelAzimuthMap(const int32 NumChannels)"
  },
  {
    "label": "WhiteNoiseTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WhiteNoiseTest(FAlignedFloatBuffer& Output)"
  },
  {
    "label": "SineOscTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SineOscTest(FAlignedFloatBuffer& Output)"
  },
  {
    "label": "IsMainAudioDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMainAudioDevice()"
  },
  {
    "label": "LoadRequiredSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadRequiredSubmix(ERequiredSubmixes InType, const FString& InDefaultName, bool bInDefaultMuteWhenBackgrounded, FSoftObjectPath& InOutObjectPath)"
  },
  {
    "label": "LoadPluginSoundSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPluginSoundSubmixes()"
  },
  {
    "label": "LoadSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSoundSubmix(USoundSubmixBase& SoundSubmix)"
  },
  {
    "label": "InitSoundfieldAndEndpointDataForSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundfieldAndEndpointDataForSubmix(const USoundSubmixBase& InSoundSubmix, FMixerSubmixPtr MixerSubmix, bool bAllowReInit)"
  },
  {
    "label": "UnloadSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadSoundSubmix(const USoundSubmixBase& SoundSubmix, const bool bReparentChildren)"
  },
  {
    "label": "IsRequiredSubmixType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRequiredSubmixType(const USoundSubmixBase* InSubmix)"
  },
  {
    "label": "GetRequiredSubmixInstance()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixPtr)",
    "insertText": "GetRequiredSubmixInstance(uint32 InSubmixId)"
  },
  {
    "label": "GetRequiredSubmixInstance()",
    "kind": "Method",
    "detail": "Function (FMixerSubmixPtr)",
    "insertText": "GetRequiredSubmixInstance(const USoundSubmixBase* InSubmix)"
  },
  {
    "label": "PumpCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpCommandQueue()"
  },
  {
    "label": "PumpGameThreadCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpGameThreadCommandQueue()"
  },
  {
    "label": "UpdateAudioClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioClock()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<USoundSubmix*> RequiredSubmixes ; TArray<FMixerSubmixPtr> RequiredSubmixInstances ; TArray<TStrongObjectPtr<UAudioBus>> DefaultAudioBuses ; IAudioMixerPlatformInterface* AudioMixerPlatform ; FChannelPositionInfo DefaultChannelAzimuthPositions [ EAudioMixerChannel::MaxSupportedChannel ] ; TArray<FChannelPositionInfo> DeviceChannelAzimuthPositions ; int32 DeviceOutputChannels ; EMonoChannelUpmixMethod MonoChannelUpmixMethod ; EPanningMethod PanningMethod ; FAudioMixerOpenStreamParams OpenStreamParams ; double AudioClockDelta ; FAudioClockTimingData AudioClockTimingData ; float PreviousPrimaryVolume ; FAudioThreadTimingData AudioThreadTimingData ; FAudioPlatformDeviceInfo PlatformInfo ; FSubmixMap Submixes ; TArray<FMixerSubmixPtr> DefaultEndpointSubmixes ; TArray<FMixerSubmixPtr> ExternalEndpointSubmixes ; FCriticalSection EndpointSubmixesMutationLock ; TArray<USoundSubmix*> DelegateBoundSubmixes ; TQueue<FMixerSourceVoice*> SourceVoices ; TMap<uint32,TArray<FSourceEffectChainEntry>> SourceEffectChainOverrides ; TUniquePtr<FMixerSourceManager> SourceManager ; int32 GameOrAudioThreadId ; std::atomic<int32> AudioPlatformThreadId ; TQueue<TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "CreateSynchronizedAudioTaskQueue()",
    "kind": "Method",
    "detail": "Function (IAudioLinkFactory* AudioLinkFactory = nullptr ; bool bDebugOutputEnabled ; bool bSubmixRegistrationDisabled ; public : void)",
    "insertText": "CreateSynchronizedAudioTaskQueue(AudioTaskQueueId QueueId)"
  },
  {
    "label": "DestroySynchronizedAudioTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySynchronizedAudioTaskQueue(AudioTaskQueueId QueueId, bool RunCurrentQueue = false)"
  },
  {
    "label": "KickQueuedTasks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "KickQueuedTasks(AudioTaskQueueId QueueId)"
  }
]