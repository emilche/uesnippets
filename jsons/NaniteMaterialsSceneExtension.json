[
  {
    "label": "FNaniteMaterialsParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteMaterialsParameters"
  },
  {
    "label": "FMaterialsSceneExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialsSceneExtension"
  },
  {
    "label": "FUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdater"
  },
  {
    "label": "FRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderer"
  },
  {
    "label": "ETask",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETask"
  },
  {
    "label": "FPackedPrimitiveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedPrimitiveData"
  },
  {
    "label": "FPrimitiveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveData"
  },
  {
    "label": "FMaterialBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialBuffers"
  },
  {
    "label": "FUploader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUploader"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SpanAllocator . h \" # include \" Containers / Map . h \" # include \" SceneExtensions . h \" # include \" NaniteDefinitions . h \" # include \" NaniteMaterials . h \" # include \" RendererPrivateUtils . h \" # include \" PrimitiveSceneInfo . h \" class FNaniteMaterialsParameters ; namespace Nanite { class FMaterialsSceneExtension : public ISceneExtension {)",
    "insertText": "DECLARE_SCENE_EXTENSION(RENDERER_API, FMaterialsSceneExtension)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION_UPDATER()",
    "kind": "Method",
    "detail": "Function (public : class FUpdater : public ISceneExtensionUpdater {)",
    "insertText": "DECLARE_SCENE_EXTENSION_UPDATER(FUpdater, FMaterialsSceneExtension)"
  },
  {
    "label": "FUpdater()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FUpdater(FMaterialsSceneExtension& InSceneData)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End()"
  },
  {
    "label": "PreSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePreUpdateChangeSet& ChangeSet, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "PostSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePostUpdateChangeSet& ChangeSet)"
  },
  {
    "label": "PostCacheNaniteMaterialBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCacheNaniteMaterialBins(FRDGBuilder& GraphBuilder, const TConstArrayView<FPrimitiveSceneInfo*>& SceneInfosWithStaticDrawListUpdate)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION_RENDERER()",
    "kind": "Method",
    "detail": "Function (private : FMaterialsSceneExtension* SceneData = nullptr ; TConstArrayView<FPrimitiveSceneInfo*> AddedList ; TConstArrayView<FPrimitiveSceneInfo*> MaterialUpdateList ; TArray<int32,FSceneRenderingArrayAllocator> DirtyPrimitiveList ; const bool bEnableAsync = true ; bool bForceFullUpload = false ; bool bDefragging = false ; } ; class FRenderer : public ISceneExtensionRenderer {)",
    "insertText": "DECLARE_SCENE_EXTENSION_RENDERER(FRenderer, FMaterialsSceneExtension)"
  },
  {
    "label": "FRenderer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRenderer(FMaterialsSceneExtension& InSceneData) : SceneData(&InSceneData)"
  },
  {
    "label": "UpdateSceneUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSceneUniformBuffer(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& Buffer)"
  },
  {
    "label": "ShouldCreateExtension()",
    "kind": "Method",
    "detail": "Function (private : FMaterialsSceneExtension* SceneData = nullptr ; } ; class FUpdater ; bool)",
    "insertText": "ShouldCreateExtension(FScene& InScene)"
  },
  {
    "label": "InitExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitExtension(FScene& InScene)"
  },
  {
    "label": "CreateUpdater()",
    "kind": "Method",
    "detail": "Function (ISceneExtensionUpdater*)",
    "insertText": "CreateUpdater()"
  },
  {
    "label": "CreateRenderer()",
    "kind": "Method",
    "detail": "Function (ISceneExtensionRenderer*)",
    "insertText": "CreateRenderer()"
  },
  {
    "label": "CreateHitProxyIDBuffer()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FRDGBufferRef)",
    "insertText": "CreateHitProxyIDBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "CreateDebugViewModeBuffer()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_DEBUG_VIEW_MODES FRDGBufferRef)",
    "insertText": "CreateDebugViewModeBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "PostBuildNaniteShadingCommands()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostBuildNaniteShadingCommands(FRDGBuilder& GraphBuilder, const UE::Tasks::FTask& BuildDependency, ENaniteMeshPass::Type MeshPass)"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (private : enum ETask : uint32 { FreeBufferSpaceTask,InitPrimitiveDataTask,AllocMaterialBufferTask,UploadPrimitiveDataTask,UploadMaterialDataTask,# if WITH_EDITOR UpdateHitProxyIDsTask,# endif # if WITH_DEBUG_VIEW_MODES UpdateDebugViewModeTask,# endif NumTasks } ; struct FPackedPrimitiveData { uint32 MaterialBufferOffset ; uint32 MaterialMaxIndex : 8 ; uint32 MeshPassMask : 8 ; uint32 bHasUVDensities : 1 ; # if WITH_EDITOR uint32 HitProxyBufferOffset ; uint32 OverlayColor ; # endif } ; struct FPrimitiveData { FPrimitiveSceneInfo* PrimitiveSceneInfo = nullptr ; uint32 MaterialBufferOffset = INDEX_NONE ; uint32 MaterialBufferSizeDwords = 0 ; uint8 NumMaterials = 0 ; uint8 NumMeshPasses = 0 ; uint8 MeshPassMask = 0 ; bool bHasUVDensities = false ; # if WITH_EDITOR uint32 HitProxyBufferOffset = INDEX_NONE ; uint32 OverlayColor = 0 ; # endif FPackedPrimitiveData)",
    "insertText": "Pack()"
  },
  {
    "label": "FMaterialBuffers()",
    "kind": "Method",
    "detail": "Function (FPackedPrimitiveData Output ; Output . MaterialBufferOffset = MaterialBufferOffset ; Output . MaterialMaxIndex = NumMaterials - 1 ; Output . MeshPassMask = MeshPassMask ; Output . bHasUVDensities = bHasUVDensities ; # if WITH_EDITOR Output . HitProxyBufferOffset = HitProxyBufferOffset ; Output . OverlayColor = OverlayColor ; # endif return Output ; } } ; class FMaterialBuffers { public :)",
    "insertText": "FMaterialBuffers()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (TPersistentByteAddressBuffer<FPackedPrimitiveData> PrimitiveDataBuffer ; TPersistentByteAddressBuffer<uint32> MaterialDataBuffer ; } ; class FUploader { public : int32 MaterialScatterStride = 2 ; TByteAddressBufferScatterUploader<FPackedPrimitiveData> PrimitiveDataUploader ; TByteAddressBufferScatterUploader<uint32,MaterialScatterStride> MaterialDataUploader ; } ; bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool bEnabled)"
  },
  {
    "label": "SyncAllTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncAllTasks()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Wait(TaskHandles)"
  },
  {
    "label": "FinishMaterialBufferUpload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishMaterialBufferUpload(FRDGBuilder& GraphBuilder, FNaniteMaterialsParameters* OutParams = nullptr)"
  },
  {
    "label": "ProcessBufferDefragmentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessBufferDefragmentation()"
  }
]