[
  {
    "label": "FWriteLogEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriteLogEntry"
  },
  {
    "label": "FWriteLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriteLog"
  },
  {
    "label": "FWriteLogEntryBucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteLogEntryBucket"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ReverseIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReverseIterator"
  },
  {
    "label": "FWriteLogEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AutoRTFM / HitSet . h \" # include \" Utils . h \" # include<stdint . h> namespace AutoRTFM { using FMemoryLocation = FHitSet::Key ; class FWriteLogEntry final { uintptr_t IsSmallBit = 0 x8000 ; FMemoryLocation OriginalAndIsSmallAndSize ; uintptr_t Copy ; public : UE_AUTORTFM_FORCEINLINE)",
    "insertText": "FWriteLogEntry()"
  },
  {
    "label": "FWriteLogEntry()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_FORCEINLINE)",
    "insertText": "FWriteLogEntry(const FWriteLogEntry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_FORCEINLINE FWriteLogEntry&)",
    "insertText": "operator(const FWriteLogEntry&)"
  },
  {
    "label": "FWriteLogEntry()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_FORCEINLINE)",
    "insertText": "FWriteLogEntry(void* Original, size_t Size, void* Copy) : OriginalAndIsSmallAndSize(Original), Copy(reinterpret_cast<uintptr_t>(Copy))"
  },
  {
    "label": "SetTopTag()",
    "kind": "Method",
    "detail": "Function (OriginalAndIsSmallAndSize .)",
    "insertText": "SetTopTag(static_cast<uint16_t>(Size))"
  },
  {
    "label": "CreateSmall()",
    "kind": "Method",
    "detail": "Function (} template<unsigned int SIZE> UE_AUTORTFM_FORCEINLINE FWriteLogEntry)",
    "insertText": "CreateSmall(void* Original)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (FWriteLogEntry Entry ; Entry . OriginalAndIsSmallAndSize = Original ; uintptr_t Temp = 0 ;)",
    "insertText": "memcpy(&Temp, Original, SIZE)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (Entry . Copy = Temp ; size_t Size = IsSmallBit | SIZE ;)",
    "insertText": "ASSERT(Size <= UINT16_MAX)"
  },
  {
    "label": "GetCopy()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void*)",
    "insertText": "GetCopy()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} else { return reinterpret_cast<)",
    "insertText": "void(Copy)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} } UE_AUTORTFM_FORCEINLINE size_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "IsSmall()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "IsSmall()"
  },
  {
    "label": "FWriteLogEntryBucket()",
    "kind": "Method",
    "detail": "Function (} } ; class FWriteLog final { struct FWriteLogEntryBucket final { uint32_t BucketSize = 1 2 8 ;)",
    "insertText": "FWriteLogEntryBucket()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} FWriteLogEntry Entries [ BucketSize ] ; size_t Size = 0 ; FWriteLogEntryBucket* Next = nullptr ; FWriteLogEntryBucket* Prev = nullptr ; } ; public : void)",
    "insertText": "Push(FWriteLogEntry Entry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Current = Start ; })",
    "insertText": "if(FWriteLogEntryBucket::BucketSize == Current->Size)"
  },
  {
    "label": "FWriteLog()",
    "kind": "Method",
    "detail": "Function (Current -> Next -> Prev = Current ; Current = Current -> Next ; } Current -> Entries [ Current -> Size + + ] = Entry ; TotalSize + + ; return ; } ~)",
    "insertText": "FWriteLog()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} struct Iterator final {)",
    "insertText": "Iterator(FWriteLogEntryBucket* const Bucket) : Bucket(Bucket)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FWriteLogEntry&)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Offset + + ;)",
    "insertText": "if(Offset == Bucket->Size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Bucket = Bucket -> Next ; Offset = 0 ; } } bool)",
    "insertText": "operator(Iterator& Other)"
  },
  {
    "label": "ReverseIterator()",
    "kind": "Method",
    "detail": "Function (} private : FWriteLogEntryBucket* Bucket ; size_t Offset = 0 ; } ; struct ReverseIterator final {)",
    "insertText": "ReverseIterator(FWriteLogEntryBucket* const Bucket) : Bucket(Bucket)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Bucket = Bucket -> Prev ; Offset = 0 ; } } bool)",
    "insertText": "operator(const ReverseIterator& Other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} private : FWriteLogEntryBucket* Bucket ; size_t Offset = 0 ; } ; Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} ReverseIterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} ReverseIterator)",
    "insertText": "rend()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (FWriteLogEntryBucket* const Old = Start ; Start = Start -> Next ; delete Old ; } Current = nullptr ; TotalSize = 0 ; } UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "IsEmpty()"
  }
]