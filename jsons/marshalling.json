[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FLAGS_MARSHALLING_H_ # define ABSL_FLAGS_MARSHALLING_H_ # include \" absl / base / config . h \" # if)",
    "insertText": "defined(ABSL_HAVE_STD_OPTIONAL) && !defined(ABSL_USES_STD_OPTIONAL)"
  },
  {
    "label": "ParseFlag()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN template<T> bool)",
    "insertText": "ParseFlag(absl::string_view input, T* dst, std::string* error)"
  },
  {
    "label": "UnparseFlag()",
    "kind": "Method",
    "detail": "Function (template<T> std::string)",
    "insertText": "UnparseFlag(const T& v)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (namespace flags_internal { bool)",
    "insertText": "AbslParseFlag(absl::string_view, bool*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, short*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, unsigned short*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, int*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, unsigned int*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, long*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, unsigned long*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, long long*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, unsigned long long*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, float*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, double*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, std::string*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view, std::vector<std::string>*, std::string*)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "AbslParseFlag(absl::string_view text, absl::optional<T>* f, std::string* err)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* f = absl::nullopt ; return true ; } T value ;)",
    "insertText": "if(!absl::ParseFlag(text, &value, err))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* f =)",
    "insertText": "move(value)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "AbslUnparseFlag(absl::string_view v)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(const std::vector<std::string>&)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (template<T> std::string)",
    "insertText": "AbslUnparseFlag(const absl::optional<T>& f)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(ABSL_HAVE_STD_OPTIONAL) && !defined(ABSL_USES_STD_OPTIONAL) template <typename T> std::string AbslUnparseFlag(const std::optional<T>& f)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> std::string)",
    "insertText": "Unparse(const T& v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "Unparse(bool v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(short v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(unsigned short v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(int v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(unsigned int v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(long v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(unsigned long v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(long long v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(unsigned long long v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(float v)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Unparse(double v)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (} enum class LogSeverity : int ; bool)",
    "insertText": "AbslParseFlag(absl::string_view, absl::LogSeverity*, std::string*)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(absl::LogSeverity)"
  }
]