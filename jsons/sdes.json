[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "Sdes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sdes"
  },
  {
    "label": "Chunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Chunk"
  },
  {
    "label": "Sdes()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_SDES_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_SDES_H_ # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" modules / rtp_rtcp / source / rtcp_packet . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class Sdes : public RtcpPacket { public : struct Chunk { uint32_t ssrc ; std::string cname ; } ; uint8_t kPacketType = 2 0 2 ; size_t kMaxNumberOfChunks = 0 x1f ;)",
    "insertText": "Sdes()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const CommonHeader& packet)"
  },
  {
    "label": "AddCName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCName(uint32_t ssrc, absl::string_view cname)"
  },
  {
    "label": "chunks()",
    "kind": "Method",
    "detail": "Function (const std::vector<Chunk>&)",
    "insertText": "chunks()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  }
]