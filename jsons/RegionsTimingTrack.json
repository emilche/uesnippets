[
  {
    "label": "FTimeRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeRegion"
  },
  {
    "label": "FFilterConfigurator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfigurator"
  },
  {
    "label": "FTimingRegionsSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingRegionsSharedState"
  },
  {
    "label": "FTimingRegionsTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingRegionsTrack"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreTypes . h \" namespace TraceServices { struct FTimeRegion ; } # include \" Insights / ViewModels / TimingEventsTrack . h \" namespace UE::Insights { class FFilterConfigurator ; } namespace UE::Insights::TimingProfiler { class FTimingRegionsSharedState ; class FTimingRegionsTrack : public FTimingEventsTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingRegionsTrack, FTimingEventsTrack) public: explicit FTimingRegionsTrack(FTimingRegionsSharedState& InSharedState) : FTimingEventsTrack(TEXT(\"Timing Regions\")) , SharedState(InSharedState)"
  },
  {
    "label": "FTimingRegionsTrack()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTimingRegionsTrack()"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "SearchEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "SearchEvent(const FTimingEventSearchParameters& InSearchParameters)"
  },
  {
    "label": "BuildDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "BuildFilteredDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFilteredDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "SetFilterConfigurator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterConfigurator(TSharedPtr<FFilterConfigurator> InFilterConfigurator)"
  },
  {
    "label": "HasCustomFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCustomFilter()"
  },
  {
    "label": "OnClipboardCopyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClipboardCopyEvent(const ITimingEvent& InSelectedEvent)"
  },
  {
    "label": "FindRegionEvent()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "FindRegionEvent(const FTimingEventSearchParameters& InParameters, TFunctionRef<void(double, double, uint32, const TraceServices::FTimeRegion&)> InFoundPredicate)"
  }
]