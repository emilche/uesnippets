[
  {
    "label": "FXPBDBendingConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDBendingConstraints"
  },
  {
    "label": "MinStiffness()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDBendingConstraintsBase . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" ChaosStats . h \" # include \" Chaos / PBDFlatWeightMap . h \" namespace Chaos::Softs { class FXPBDBendingConstraints final : public FPBDBendingConstraintsBase { typedef FPBDBendingConstraintsBase Base ; public : FSolverReal)",
    "insertText": "MinStiffness(FSolverReal)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(FSolverReal)"
  },
  {
    "label": "MinDamping()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinDamping(FSolverReal)"
  },
  {
    "label": "MaxDamping()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxDamping(FSolverReal)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FXPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDBendingConstraints(const FSolverParticlesRange& InParticles, TArray<TVec4<int32>>&& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection) : Base( InParticles, MoveTemp(InConstraints), TConstArrayView<FRealSingle>(), WeightMaps.FindRef(GetXPBDBucklingRatioString(PropertyCollection, XPBDBucklingRatioName.ToString())), TConstArrayView<FRealSingle>(), GetRestAngleMapFromCollection(WeightMaps, PropertyCollection), FSolverVec2(GetWeightedFloatXPBDBendingElementStiffness(PropertyCollection, MaxStiffness)), FSolverVec2(GetWeightedFloatXPBDBucklingRatio(PropertyCollection, 0.f)), FSolverVec2(GetWeightedFloatXPBDBucklingStiffness(PropertyCollection, MaxStiffness)), GetRestAngleValueFromCollection(PropertyCollection), (ERestAngleConstructionType)GetXPBDRestAngleType(PropertyCollection, (int32)ERestAngleConstructionType::Use3DRestAngles), true , MaxStiffness) , XPBDStiffness( FSolverVec2(GetWeightedFloatXPBDBendingElementStiffness(PropertyCollection, MaxStiffness)).ClampAxes(0, MaxStiffness), WeightMaps.FindRef(GetXPBDBendingElementStiffnessString(PropertyCollection, XPBDBendingElementStiffnessName.ToString())), TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , XPBDBucklingStiffness( FSolverVec2(GetWeightedFloatXPBDBucklingStiffness(PropertyCollection, MaxStiffness)).ClampAxes(0, MaxStiffness), WeightMaps.FindRef(GetXPBDBucklingStiffnessString(PropertyCollection, XPBDBucklingStiffnessName.ToString())), TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , DampingRatio( FSolverVec2(GetWeightedFloatXPBDBendingElementDamping(PropertyCollection, MinDamping)).ClampAxes(MinDamping, MaxDamping), WeightMaps.FindRef(GetXPBDBendingElementDampingString(PropertyCollection, XPBDBendingElementDampingName.ToString())), TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , XPBDBendingElementStiffnessIndex(PropertyCollection) , XPBDBendingElementDampingIndex(PropertyCollection) , XPBDBucklingRatioIndex(PropertyCollection) , XPBDBucklingStiffnessIndex(PropertyCollection) , XPBDFlatnessRatioIndex(PropertyCollection) , XPBDRestAngleIndex(PropertyCollection) , XPBDRestAngleTypeIndex(PropertyCollection)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "Init((FSolverReal)0., Constraints.Num())"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColor(InParticles)"
  },
  {
    "label": "FXPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDBendingConstraints(const FSolverParticles& InParticles, int32 InParticleOffset, int32 InParticleCount, TArray<TVec4<int32>>&& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection) : Base( InParticles, InParticleOffset, InParticleCount, MoveTemp(InConstraints), TConstArrayView<FRealSingle>(), WeightMaps.FindRef(GetXPBDBucklingRatioString(PropertyCollection, XPBDBucklingRatioName.ToString())), TConstArrayView<FRealSingle>(), GetRestAngleMapFromCollection(WeightMaps, PropertyCollection), FSolverVec2(GetWeightedFloatXPBDBendingElementStiffness(PropertyCollection, MaxStiffness)), FSolverVec2(GetWeightedFloatXPBDBucklingRatio(PropertyCollection, 0.f)), FSolverVec2(GetWeightedFloatXPBDBucklingStiffness(PropertyCollection, MaxStiffness)), GetRestAngleValueFromCollection(PropertyCollection), (ERestAngleConstructionType)GetXPBDRestAngleType(PropertyCollection, (int32)ERestAngleConstructionType::Use3DRestAngles), true , MaxStiffness) , XPBDStiffness( FSolverVec2(GetWeightedFloatXPBDBendingElementStiffness(PropertyCollection, MaxStiffness)).ClampAxes(0, MaxStiffness), WeightMaps.FindRef(GetXPBDBendingElementStiffnessString(PropertyCollection, XPBDBendingElementStiffnessName.ToString())), TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , XPBDBucklingStiffness( FSolverVec2(GetWeightedFloatXPBDBucklingStiffness(PropertyCollection, MaxStiffness)).ClampAxes(0, MaxStiffness), WeightMaps.FindRef(GetXPBDBucklingStiffnessString(PropertyCollection, XPBDBucklingStiffnessName.ToString())), TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , DampingRatio( FSolverVec2(GetWeightedFloatXPBDBendingElementDamping(PropertyCollection, MinDamping)).ClampAxes(MinDamping, MaxDamping), WeightMaps.FindRef(GetXPBDBendingElementDampingString(PropertyCollection, XPBDBendingElementDampingName.ToString())), TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , XPBDBendingElementStiffnessIndex(PropertyCollection) , XPBDBendingElementDampingIndex(PropertyCollection) , XPBDBucklingRatioIndex(PropertyCollection) , XPBDBucklingStiffnessIndex(PropertyCollection) , XPBDFlatnessRatioIndex(PropertyCollection) , XPBDRestAngleIndex(PropertyCollection) , XPBDRestAngleTypeIndex(PropertyCollection)"
  },
  {
    "label": "FXPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDBendingConstraints(const FSolverParticles& InParticles, int32 ParticleOffset, int32 ParticleCount, TArray<TVec4<int32>>&& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& BucklingRatioMultipliers, const TConstArrayView<FRealSingle>& BucklingStiffnessMultipliers, const TConstArrayView<FRealSingle>& InDampingMultipliers, const TConstArrayView<FRealSingle>& RestAngleMap, const FSolverVec2& InStiffness, const FSolverVec2& InBucklingRatio, const FSolverVec2& InBucklingStiffness, const FSolverVec2& InDampingRatio, const FSolverVec2& RestAngleValue, ERestAngleConstructionType RestAngleConstructionType) : Base( InParticles, ParticleOffset, ParticleCount, MoveTemp(InConstraints), TConstArrayView<FRealSingle>(), BucklingRatioMultipliers, TConstArrayView<FRealSingle>(), RestAngleMap, InStiffness, InBucklingRatio, InBucklingStiffness, RestAngleValue, RestAngleConstructionType, true , MaxStiffness) , XPBDStiffness( InStiffness.ClampAxes(0, MaxStiffness), StiffnessMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , XPBDBucklingStiffness( InBucklingStiffness.ClampAxes(0, MaxStiffness), BucklingStiffnessMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , DampingRatio( InDampingRatio.ClampAxes((FSolverReal)0., (FSolverReal)1.), InDampingMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , XPBDBendingElementStiffnessIndex(ForceInit) , XPBDBendingElementDampingIndex(ForceInit) , XPBDBucklingRatioIndex(ForceInit) , XPBDBucklingStiffnessIndex(ForceInit) , XPBDFlatnessRatioIndex(ForceInit) , XPBDRestAngleIndex(ForceInit) , XPBDRestAngleTypeIndex(ForceInit)"
  },
  {
    "label": "FXPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDBendingConstraints()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Init(const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness, const FSolverVec2& InBucklingRatio, const FSolverVec2& InBucklingStiffness, const FSolverVec2& InDampingRatio)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (XPBDStiffness .)",
    "insertText": "SetWeightedValue(InStiffness.ClampAxes(0, MaxStiffness))"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (BucklingRatioWeighted .)",
    "insertText": "SetWeightedValue(InBucklingRatio.ClampAxes((FSolverReal)0., (FSolverReal)1.))"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (XPBDBucklingStiffness .)",
    "insertText": "SetWeightedValue(InBucklingStiffness.ClampAxes(0, MaxStiffness))"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (DampingRatio .)",
    "insertText": "SetWeightedValue(InDampingRatio.ClampAxes(MinDamping, MaxDamping))"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(InStiffness, FSolverVec2(InBucklingRatio), InBucklingStiffness, InDampingRatio)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal , const int32)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (BucklingRatioWeighted .)",
    "insertText": "ApplyValues()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "GetConstraintsPerColorStartIndex()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetConstraintsPerColorStartIndex()"
  },
  {
    "label": "GetConstraintsArray()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "GetConstraintsArray()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> ConstraintsArray ; ConstraintsArray .)",
    "insertText": "SetNum(Constraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ConstraintsArray [ i ] .)",
    "insertText": "SetNum(4)"
  },
  {
    "label": "AddInternalForceDifferential()",
    "kind": "Method",
    "detail": "Function (ConstraintsArray [ i ] [ j ] = Constraints [ i ] [ j ] ; } } return ConstraintsArray ; } void)",
    "insertText": "AddInternalForceDifferential(const FSolverParticles& InParticles, const TArray<TVector<FSolverReal, 3>>& DeltaParticles, TArray<TVector<FSolverReal, 3>>& ndf)"
  },
  {
    "label": "ComputeTotalEnergy()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "ComputeTotalEnergy(const FSolverParticles& InParticles, const FSolverReal ExplicitStiffness = -1.f)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (private : template<SolverParticlesOrRange> void)",
    "insertText": "InitColor(const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (template<bool bDampingOnly,bool bElasticOnly,SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& Particles, const FSolverReal Dt, const int32 ConstraintIndex, const FSolverReal ExpStiffnessValue, const FSolverReal ExpBucklingValue, const FSolverReal DampingRatioValue)"
  },
  {
    "label": "GetRestAngleMapFromCollection()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FRealSingle>)",
    "insertText": "GetRestAngleMapFromCollection(const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "ConstructionType()",
    "kind": "Method",
    "detail": "Function (const ERestAngleConstructionType)",
    "insertText": "ConstructionType(ERestAngleConstructionType)GetXPBDRestAngleType(PropertyCollection, (int32)ERestAngleConstructionType::Use3DRestAngles)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (default : case ERestAngleConstructionType::Use3DRestAngles : return TConstArrayView<)",
    "insertText": "FRealSingle()"
  },
  {
    "label": "GetRestAngleValueFromCollection()",
    "kind": "Method",
    "detail": "Function (} } FSolverVec2)",
    "insertText": "GetRestAngleValueFromCollection(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FSolverVec2()",
    "kind": "Method",
    "detail": "Function (default : case ERestAngleConstructionType::Use3DRestAngles : return)",
    "insertText": "FSolverVec2(0.f)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (} } using Base::Constraints ; using Base::ParticleOffset ; using Base::ParticleCount ; using Base::RestAngles ; FPBDFlatWeightMap XPBDStiffness ; FPBDFlatWeightMap XPBDBucklingStiffness ; FPBDFlatWeightMap DampingRatio ; TArray<FSolverReal> Lambdas ; TArray<FSolverReal> LambdasDamping ; TArray<int32> ConstraintsPerColorStartIndex ; # if INTEL_ISPC TArray<int32> ConstraintsIndex1 ; TArray<int32> ConstraintsIndex2 ; TArray<int32> ConstraintsIndex3 ; TArray<int32> ConstraintsIndex4 ; TArray<FSolverVec3> X1Array ; TArray<FSolverVec3> X2Array ; TArray<FSolverVec3> X3Array ; TArray<FSolverVec3> X4Array ; # endif)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDBendingElementStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDBendingElementDamping, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDBucklingRatio, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDBucklingStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDFlatnessRatio, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDRestAngle, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDRestAngleType, int32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if UE_BUILD_SHIPPING const bool bChaos_XPBDBending_SplitLambdaDamping = true ; # else bool bChaos_XPBDBending_SplitLambdaDamping ; # endif } # if !)",
    "insertText": "defined(CHAOS_XPBD_BENDING_ISPC_ENABLED)"
  }
]