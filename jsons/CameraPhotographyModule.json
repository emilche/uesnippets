[
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "ICameraPhotography",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraPhotography"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "ICameraPhotographyModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICameraPhotographyModule"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeatures . h \" # include \" Modules / ModuleInterface . h \" # include \" Features / IModularFeature . h \" # include \" Modules / ModuleManager . h \" class APlayerCameraManager ; class ICameraPhotography ; struct FMinimalViewInfo ; struct FPostProcessSettings ; class ICameraPhotographyModule : public IModuleInterface,public IModularFeature { public : FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName FeatureName =)",
    "insertText": "FName(TEXT(\"CameraPhotography\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().RegisterModularFeature(GetModularFeatureName(), this)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ICameraPhotographyModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "CreateCameraPhotography()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<class ICameraPhotography>)",
    "insertText": "CreateCameraPhotography()"
  },
  {
    "label": "ICameraPhotography()",
    "kind": "Method",
    "detail": "Function (} ; class ICameraPhotography { public :)",
    "insertText": "ICameraPhotography()"
  },
  {
    "label": "UpdateCamera()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "UpdateCamera(FMinimalViewInfo& InOutPOV, APlayerCameraManager* PCMgr)"
  },
  {
    "label": "UpdatePostProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePostProcessing(FPostProcessSettings& InOutPostProcessingSettings)"
  },
  {
    "label": "StartSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSession()"
  },
  {
    "label": "StopSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSession()"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "SetUIControlVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUIControlVisibility(uint8 UIControlTarget, bool bIsVisible)"
  },
  {
    "label": "DefaultConstrainCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultConstrainCamera(const FVector NewCameraLocation, const FVector PreviousCameraLocation, const FVector OriginalCameraLocation, FVector& OutCameraLocation, APlayerCameraManager* PCMgr)"
  },
  {
    "label": "GetProviderName()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const)",
    "insertText": "GetProviderName()"
  }
]