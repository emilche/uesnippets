[
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "SKismetDebuggingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SKismetDebuggingView"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Debugging / SKismetDebugTreeView . h \" # include \" HAL / Platform . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class SComboButton ; class SHorizontalBox ; class SSearchBox ; class SWidget ; class UBlueprint ; class UClass ; class UObject ; struct FGeometry ; class SKismetDebuggingView : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SKismetDebuggingView ) : _BlueprintToWatch()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TWeakObjectPtr<UBlueprint>, BlueprintToWatch ) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "GetTabLabel()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<const UObject> CurrentActiveObject ; FText)",
    "insertText": "GetTabLabel()"
  },
  {
    "label": "TryRegisterDebugToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryRegisterDebugToolbar()"
  },
  {
    "label": "SetBlueprintToWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintToWatch(TWeakObjectPtr<UBlueprint> InBlueprintToWatch)"
  },
  {
    "label": "GetTopText()",
    "kind": "Method",
    "detail": "Function (protected : FText)",
    "insertText": "GetTopText()"
  },
  {
    "label": "CanToggleAllBreakpoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleAllBreakpoints()"
  },
  {
    "label": "GetToggleAllBreakpointsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToggleAllBreakpointsText()"
  },
  {
    "label": "OnToggleAllBreakpointsClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleAllBreakpointsClicked()"
  },
  {
    "label": "OnBlueprintClassPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintClassPicked(UClass* PickedClass)"
  },
  {
    "label": "ConstructBlueprintClassPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructBlueprintClassPicker()"
  },
  {
    "label": "GetDebugLineTypeToggle()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SHorizontalBox>)",
    "insertText": "GetDebugLineTypeToggle(FDebugLineItem::EDebugLineType Type, const FText& Text)"
  },
  {
    "label": "OnSearchTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextChanged(const FText& Text)"
  }
]