[
  {
    "label": "IAudioParameterInterfaceRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioParameterInterfaceRegistry"
  },
  {
    "label": "FParameterInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterInterface"
  },
  {
    "label": "FVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVersion"
  },
  {
    "label": "FInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInput"
  },
  {
    "label": "FOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutput"
  },
  {
    "label": "FEnvironmentVariable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvironmentVariable"
  },
  {
    "label": "FClassOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassOptions"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioParameter . h \" # include \" AudioParameterControllerInterface . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" namespace Audio { class IAudioParameterInterfaceRegistry ; struct FParameterInterface { struct FVersion { const int32 Major = 1 ; const int32 Minor = 0 ; } ; struct FInput { const FText DisplayName ; const FText Description ; const FName DataType ; const FAudioParameter InitValue ; const FText RequiredText ; const int32 SortOrderIndex = 0 ; } ; struct FOutput { const FText DisplayName ; const FText Description ; const FName DataType ; const FName ParamName ; const FText RequiredText =)",
    "insertText": "FText()"
  },
  {
    "label": "FParameterInterface()",
    "kind": "Method",
    "detail": "Function (const EAudioParameterType ParamType = EAudioParameterType::None ; const int32 SortOrderIndex = 0 ; } ; struct FEnvironmentVariable { const FText DisplayName ; const FText Description ; const FName DataType ; const FName ParamName ; const EAudioParameterType ParamType = EAudioParameterType::None ; } ; struct FClassOptions { const FTopLevelAssetPath ClassPath ; const bool bIsModifiable = true ; const bool bIsDefault = false ; } ;)",
    "insertText": "FParameterInterface()"
  },
  {
    "label": "FParameterInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParameterInterface(FName InName, const FVersion& InVersion)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (const FVersion&)",
    "insertText": "GetVersion()"
  },
  {
    "label": "FindSupportedUClasses()",
    "kind": "Method",
    "detail": "Function (TArray<const UClass*>)",
    "insertText": "FindSupportedUClasses()"
  },
  {
    "label": "GetUClassOptions()",
    "kind": "Method",
    "detail": "Function (const TArray<FClassOptions>&)",
    "insertText": "GetUClassOptions()"
  },
  {
    "label": "GetInputs()",
    "kind": "Method",
    "detail": "Function (const TArray<FInput>&)",
    "insertText": "GetInputs()"
  },
  {
    "label": "GetOutputs()",
    "kind": "Method",
    "detail": "Function (const TArray<FOutput>&)",
    "insertText": "GetOutputs()"
  },
  {
    "label": "GetEnvironment()",
    "kind": "Method",
    "detail": "Function (const TArray<FEnvironmentVariable>&)",
    "insertText": "GetEnvironment()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (private : FName NamePrivate ; FVersion VersionPrivate ; protected : TArray<FInput> Inputs ; TArray<FOutput> Outputs ; TArray<FEnvironmentVariable> Environment ; TArray<FClassOptions> UClassOptions ; } ; using FParameterInterfacePtr = TSharedPtr<FParameterInterface,ESPMode::ThreadSafe> ; class IAudioParameterInterfaceRegistry { TUniquePtr<IAudioParameterInterfaceRegistry> Instance ; public : IAudioParameterInterfaceRegistry&)",
    "insertText": "Get()"
  },
  {
    "label": "IAudioParameterInterfaceRegistry()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IAudioParameterInterfaceRegistry()"
  },
  {
    "label": "IterateInterfaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateInterfaces(TFunction<void(FParameterInterfacePtr)> InFunction)"
  },
  {
    "label": "OnRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegistration(TUniqueFunction<void(FParameterInterfacePtr)>&& InFunction)"
  },
  {
    "label": "RegisterInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInterface(FParameterInterfacePtr InInterface)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (protected : TSet<FParameterInterfacePtr> Interfaces ; TUniqueFunction<)",
    "insertText": "void(FParameterInterfacePtr)"
  }
]