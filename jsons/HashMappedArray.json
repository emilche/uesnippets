[
  {
    "label": "THashMappedArrayTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THashMappedArrayTraits"
  },
  {
    "label": "THashMappedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THashMappedArray"
  },
  {
    "label": "GetIDHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / HashTable . h \" namespace Chaos::Private { template<TIDType,TElementType> struct THashMappedArrayTraits { using FIDType = TIDType ; using FElementType = TElementType ; uint32)",
    "insertText": "GetIDHash(const FIDType& ID)"
  },
  {
    "label": "ElemenatHasID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ElemenatHasID(const FElementType& Element, const FIDType& ID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const int32 InReserveElements)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "Clear()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "Resize(InReserveElements)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Reset(InReserveElements)"
  },
  {
    "label": "TryAdd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryAdd(const FIDType ID, const FElementType& Element)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(ID, Element)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emplace(ID, Forward<ArgsType>(Args)...)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 Index = Elements .)",
    "insertText": "Add(Element)"
  },
  {
    "label": "GetIDHash()",
    "kind": "Method",
    "detail": "Function (const FHashType Key =)",
    "insertText": "GetIDHash(ID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "Add(Key, Index)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType> void)",
    "insertText": "Emplace(const FIDType ID, ArgsType&&... Args)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (const int32 Index = Elements .)",
    "insertText": "Emplace(Forward<ArgsType>(Args)...)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} const FElementType*)",
    "insertText": "Find(const FIDType ID)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} FElementType&)",
    "insertText": "At(const int32 ElementIndex)"
  }
]