[
  {
    "label": "FConcurrencySlots",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConcurrencySlots"
  },
  {
    "label": "FPimpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPimpl"
  },
  {
    "label": "FTaskConcurrencyLimiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskConcurrencyLimiter"
  },
  {
    "label": "FConcurrencySlots()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Tasks / Task . h \" # include \" Containers / LockFreeList . h \" # include \" Templates / SharedPointer . h \" # include \" Experimental / ConcurrentLinearAllocator . h \" # include \" CoreTypes . h \" # include<AtomicQueue . h> namespace UE::Tasks { namespace TaskConcurrencyLimiter_Private { class FConcurrencySlots { public :)",
    "insertText": "FConcurrencySlots(uint32 MaxConcurrency) : FreeSlots(MaxConcurrency)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (FreeSlots .)",
    "insertText": "push(Index)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Alloc(uint32& Slot)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (Slot - = IndexOffset ; return true ; } return false ; } void)",
    "insertText": "Release(uint32 Slot)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (FreeSlots .)",
    "insertText": "push(Slot + IndexOffset)"
  },
  {
    "label": "FPimpl()",
    "kind": "Method",
    "detail": "Function (} private : int32 IndexOffset = 1 ; atomic_queue::AtomicQueueB<uint32> FreeSlots ; } ; class FPimpl : public TSharedFromThis<FPimpl> { public :)",
    "insertText": "FPimpl(uint32 InMaxConcurrency, ETaskPriority InTaskPriority) : ConcurrencySlots(InMaxConcurrency) , TaskPriority(InTaskPriority)"
  },
  {
    "label": "FPimpl()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPimpl()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (template<TaskFunctionType> void)",
    "insertText": "Push(const TCHAR* DebugName, TaskFunctionType&& TaskFunction)"
  },
  {
    "label": "FTask()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<LowLevelTasks::FTask> Task = MakeShared<)",
    "insertText": "FTask()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Task ->)",
    "insertText": "Init(DebugName, TaskPriority, [ TaskFunction = MoveTemp(TaskFunction), this, Pimpl = TSharedFromThis<FPimpl>::AsShared(), Task ]() { uint32 ConcurrencySlot = (uint32)(UPTRINT)Task->GetUserData(); TaskFunction(ConcurrencySlot); CompleteWorkItem(ConcurrencySlot); })"
  },
  {
    "label": "AddWorkItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWorkItem(Task.Get())"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Wait(FTimespan Timeout)"
  },
  {
    "label": "AddWorkItem()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddWorkItem(LowLevelTasks::FTask* Task)"
  },
  {
    "label": "ProcessQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessQueue(uint32 ConcurrencySlot, bool bSkipFirstWakeUp)"
  },
  {
    "label": "ProcessQueueFromWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessQueueFromWorker(uint32 ConcurrencySlot)"
  },
  {
    "label": "ProcessQueueFromPush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessQueueFromPush(uint32 ConcurrencySlot)"
  },
  {
    "label": "CompleteWorkItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteWorkItem(uint32 ConcurrencySlot)"
  },
  {
    "label": "FTaskConcurrencyLimiter()",
    "kind": "Method",
    "detail": "Function (FConcurrencySlots ConcurrencySlots ; ETaskPriority TaskPriority ; TLockFreePointerListFIFO<LowLevelTasks::FTask,PLATFORM_CACHE_LINE_SIZE> WorkQueue ; std::atomic<uint32> NumWorkItems { 0 } ; std::atomic<FEvent*> CompletionEvent { nullptr } ; } ; } class FTaskConcurrencyLimiter { public :)",
    "insertText": "FTaskConcurrencyLimiter(uint32 MaxConcurrency, ETaskPriority TaskPriority = ETaskPriority::Default) : Pimpl(MakeShared<TaskConcurrencyLimiter_Private::FPimpl>(MaxConcurrency, TaskPriority))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Pimpl ->)",
    "insertText": "Push(DebugName, MoveTemp(TaskFunction))"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Wait(FTimespan Timeout = FTimespan::MaxValue())"
  }
]