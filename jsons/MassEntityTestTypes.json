[
  {
    "label": "FMassEntityManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityManager"
  },
  {
    "label": "FMassProcessingPhaseManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassProcessingPhaseManager"
  },
  {
    "label": "FMassTestProcessingPhaseManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassTestProcessingPhaseManager"
  },
  {
    "label": "FTestFragment_Float",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestFragment_Float"
  },
  {
    "label": "FTestFragment_Int",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestFragment_Int"
  },
  {
    "label": "FTestFragment_Bool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestFragment_Bool"
  },
  {
    "label": "FTestFragment_Large",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestFragment_Large"
  },
  {
    "label": "FTestFragment_Array",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestFragment_Array"
  },
  {
    "label": "FFragmentWithSharedPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFragmentWithSharedPtr"
  },
  {
    "label": "FTestChunkFragment_Int",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestChunkFragment_Int"
  },
  {
    "label": "FTestChunkFragment_Float",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestChunkFragment_Float"
  },
  {
    "label": "FTestSharedFragment_Int",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestSharedFragment_Int"
  },
  {
    "label": "FTestConstSharedFragment_Int",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestConstSharedFragment_Int"
  },
  {
    "label": "FTestSharedFragment_Float",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestSharedFragment_Float"
  },
  {
    "label": "FTestConstSharedFragment_Float",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestConstSharedFragment_Float"
  },
  {
    "label": "FTestFragment_Tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestFragment_Tag"
  },
  {
    "label": "FTestTag_A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestTag_A"
  },
  {
    "label": "FTestTag_B",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestTag_B"
  },
  {
    "label": "FTestTag_C",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestTag_C"
  },
  {
    "label": "FTestTag_D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestTag_D"
  },
  {
    "label": "MASSENTITYTESTSUITE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MASSENTITYTESTSUITE_API"
  },
  {
    "label": "UMassTestProcessor_Floats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassTestProcessor_Floats"
  },
  {
    "label": "UMassTestProcessor_Ints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassTestProcessor_Ints"
  },
  {
    "label": "UMassTestProcessor_FloatsInts",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassTestProcessor_FloatsInts"
  },
  {
    "label": "UMassTestWorldSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassTestWorldSubsystem"
  },
  {
    "label": "TMassExternalSubsystemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMassExternalSubsystemTraits"
  },
  {
    "label": "UMassTestEngineSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassTestEngineSubsystem"
  },
  {
    "label": "UMassTestLocalPlayerSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassTestLocalPlayerSubsystem"
  },
  {
    "label": "UMassTestGameInstanceSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassTestGameInstanceSubsystem"
  },
  {
    "label": "FMassTestPhaseTickTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassTestPhaseTickTask"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassProcessor . h \" # include \" MassEntityTypes . h \" # include \" MassEntityManager . h \" # include \" AITestsCommon . h \" # include \" Math / RandomStream . h \" # include \" Subsystems / EngineSubsystem . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" Subsystems / LocalPlayerSubsystem . h \" # include \" Subsystems / GameInstanceSubsystem . h \" # include \" Misc / MTAccessDetector . h \" # include \" MassExternalSubsystemTraits . h \" # include \" MassProcessingPhaseManager . h \" # include \" MassEntityTestTypes . generated . h \" struct FMassEntityManager ; struct FMassProcessingPhaseManager ; namespace UE::Mass::Testing { struct FMassTestProcessingPhaseManager ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FTestFragment_Float()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestFragment_Float(const float InValue = 0.f) : Value(InValue)"
  },
  {
    "label": "FTestFragment_Int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestFragment_Int(const int32 InValue = 0) : Value(InValue)"
  },
  {
    "label": "FTestFragment_Bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestFragment_Bool(const bool bInValue = false) : bValue(bInValue)"
  },
  {
    "label": "FTestFragment_Large()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestFragment_Large(uint8 Fill = 0)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Value, Fill, 64)"
  },
  {
    "label": "FTestFragment_Array()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestFragment_Array(uint8 Num = 0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Reserve(Num)"
  },
  {
    "label": "FFragmentWithSharedPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFragmentWithSharedPtr()"
  },
  {
    "label": "FFragmentWithSharedPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFragmentWithSharedPtr(TSharedPtr<int32>& InData) : Data(InData)"
  },
  {
    "label": "FTestChunkFragment_Int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestChunkFragment_Int(const int32 InValue = 0) : Value(InValue)"
  },
  {
    "label": "FTestChunkFragment_Float()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestChunkFragment_Float(const float InValue = 0.f) : Value(InValue)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (using FValueType = int32 ;)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FTestSharedFragment_Int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestSharedFragment_Int(const int32 InValue = 0) : Value(InValue)"
  },
  {
    "label": "FTestConstSharedFragment_Int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestConstSharedFragment_Int(const int32 InValue = 0) : Value(InValue)"
  },
  {
    "label": "FTestSharedFragment_Float()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestSharedFragment_Float(const float InValue = 0) : Value(InValue)"
  },
  {
    "label": "FTestConstSharedFragment_Float()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestConstSharedFragment_Float(const float InValue = 0) : Value(InValue)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMassTestProcessorBase()"
  },
  {
    "label": "GetMutableExecutionOrder()",
    "kind": "Method",
    "detail": "Function (FMassProcessorExecutionOrder&)",
    "insertText": "GetMutableExecutionOrder()"
  },
  {
    "label": "ShouldAllowQueryBasedPruning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllowQueryBasedPruning(const bool bRuntimeMode = true)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} using FExecutionFunction = TFunction<)",
    "insertText": "void(FMassEntityManager& EntityManager, FMassExecutionContext& Context)"
  },
  {
    "label": "SetShouldAllowMultipleInstances()",
    "kind": "Method",
    "detail": "Function (FExecutionFunction ExecutionFunction ; FMassExecuteFunction ForEachEntityChunkExecutionFunction ; void)",
    "insertText": "SetShouldAllowMultipleInstances(const bool bInShouldAllowDuplicated)"
  },
  {
    "label": "UMassTestProcessor_Floats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMassTestProcessor_Floats()"
  },
  {
    "label": "UMassTestProcessor_Ints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMassTestProcessor_Ints()"
  },
  {
    "label": "UMassTestProcessor_FloatsInts()",
    "kind": "Method",
    "detail": "Function (TArrayView<FTestFragment_Int> Ints ;)",
    "insertText": "UMassTestProcessor_FloatsInts()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMassTestStaticCounterProcessor()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(FMassEntityManager& EntityManager, FMassExecutionContext& Context)"
  },
  {
    "label": "ConfigureQueries()",
    "kind": "Method",
    "detail": "Function (+ + StaticCounter ; } void)",
    "insertText": "ConfigureQueries()"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (} ; struct FEntityTestBase : FExecutionTestBase { FMassArchetypeHandle EmptyArchetype ; FMassArchetypeHandle FloatsArchetype ; FMassArchetypeHandle IntsArchetype ; FMassArchetypeHandle FloatsIntsArchetype ; FInstancedStruct InstanceInt ; bool)",
    "insertText": "SetUp()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; struct FProcessingPhasesTestBase : FEntityTestBase { using Super = FEntityTestBase ; TSharedPtr<UE::Mass::Testing::FMassTestProcessingPhaseManager> PhaseManager ; FMassProcessingPhaseConfig PhasesConfig [)",
    "insertText": "int(EMassProcessingPhase::MAX)"
  },
  {
    "label": "FProcessingPhasesTestBase()",
    "kind": "Method",
    "detail": "Function (int32 TickIndex = - 1 ; FGraphEventRef CompletionEvent ; float DeltaTime = 1 . f / 3 0 ; UWorld* World = nullptr ;)",
    "insertText": "FProcessingPhasesTestBase()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "VerifyLatentResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyLatentResults()"
  },
  {
    "label": "PopulatePhasesConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulatePhasesConfig()"
  },
  {
    "label": "ShuffleDataWithRandomStream()",
    "kind": "Method",
    "detail": "Function (} ; template<T> void)",
    "insertText": "ShuffleDataWithRandomStream(FRandomStream& Rand, TArray<T>& Data)"
  },
  {
    "label": "RandRange()",
    "kind": "Method",
    "detail": "Function (const int32 NewIndex = Rand .)",
    "insertText": "RandRange(0, Data.Num() - 1)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Swap(i, NewIndex)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void Write(int32 InNumber)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Read()"
  },
  {
    "label": "UE_MT_DECLARE_RW_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "UE_MT_DECLARE_RW_ACCESS_DETECTOR(AccessDetector)"
  },
  {
    "label": "FMassTestPhaseTickTask()",
    "kind": "Method",
    "detail": "Function (template<> struct TMassExternalSubsystemTraits<UMassTestGameInstanceSubsystem> { enum { GameThreadOnly = false,ThreadSafeRead = true,ThreadSafeWrite = false,} ; } ; namespace UE::Mass::Testing { struct FMassTestPhaseTickTask {)",
    "insertText": "FMassTestPhaseTickTask(const TSharedRef<FMassProcessingPhaseManager>& InPhaseManager, const EMassProcessingPhase InPhase, const float InDeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetDesiredThread()",
    "kind": "Method",
    "detail": "Function (ENamedThreads::Type)",
    "insertText": "GetDesiredThread()"
  },
  {
    "label": "GetSubsequentsMode()",
    "kind": "Method",
    "detail": "Function (ESubsequentsMode::Type)",
    "insertText": "GetSubsequentsMode()"
  },
  {
    "label": "DoTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoTask(ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (private : const TSharedRef<FMassProcessingPhaseManager> PhaseManager ; const EMassProcessingPhase Phase = EMassProcessingPhase::MAX ; const float DeltaTime = 0 . f ; } ; struct FMassTestProcessingPhaseManager : public FMassProcessingPhaseManager { void)",
    "insertText": "Start(const TSharedPtr<FMassEntityManager>& InEntityManager)"
  },
  {
    "label": "OnNewArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewArchetype(const FMassArchetypeHandle& NewArchetype)"
  }
]