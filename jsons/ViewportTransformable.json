[
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FViewportTransformable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Math / Box . h \" # include \" Math / MathFwd . h \" # include \" Math / Transform . h \" # include \" Math / Vector . h \" class FViewportTransformable { public :)",
    "insertText": "FViewportTransformable() : StartTransform( FTransform::Identity)"
  },
  {
    "label": "FViewportTransformable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FViewportTransformable()"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (} const FTransform)",
    "insertText": "GetTransform()"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTransform(const FTransform& NewTransform, const bool bSweep)"
  },
  {
    "label": "BuildBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "BuildBoundingBox(const FTransform& BoundingBoxToWorld)"
  },
  {
    "label": "IsUnorientedPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnorientedPoint()"
  },
  {
    "label": "GetLinearVelocity()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetLinearVelocity()"
  }
]