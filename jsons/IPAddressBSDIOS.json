[
  {
    "label": "FInternetAddrBSDIOS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddrBSDIOS"
  },
  {
    "label": "FInternetAddrBSDIOS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SocketSubsystemIOS . h \" # include \" BSDSockets / SocketSubsystemBSDPrivate . h \" # include \" BSDSockets / IPAddressBSD . h \" # if PLATFORM_HAS_BSD_IPV6_SOCKETS class FInternetAddrBSDIOS : public FInternetAddrBSD { public :)",
    "insertText": "FInternetAddrBSDIOS(FSocketSubsystemBSD* InSocketSubsystem, FName RequestedProtocol = NAME_None) : FInternetAddrBSD(InSocketSubsystem, RequestedProtocol)"
  },
  {
    "label": "SetIPv6BroadcastAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIPv6BroadcastAddress()"
  },
  {
    "label": "FSocketSubsystemIOS()",
    "kind": "Method",
    "detail": "Function (FSocketSubsystemIOS* SocketSubsystemIOS = static_cast<)",
    "insertText": "FSocketSubsystemIOS(SocketSubsystem)"
  },
  {
    "label": "FInternetAddrBSDIOS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInternetAddrBSDIOS> MultiCastAddr = StaticCastSharedPtr<)",
    "insertText": "FInternetAddrBSDIOS(SocketSubsystemIOS->GetAddressFromString(TEXT(\"ff02::1\")))"
  },
  {
    "label": "SetRawIp()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetRawIp(MultiCastAddr->GetRawIp())"
  },
  {
    "label": "GetLocalBindAddresses()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FInternetAddr>> BindingAddresses = SocketSubsystemIOS ->)",
    "insertText": "GetLocalBindAddresses()"
  },
  {
    "label": "FInternetAddrBSDIOS()",
    "kind": "Method",
    "detail": "Function (uint32 ScopeId = StaticCastSharedRef<)",
    "insertText": "FInternetAddrBSDIOS(BindAddress)->GetScopeId()"
  },
  {
    "label": "SetScopeId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScopeId(ScopeId)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; } } } else {)",
    "insertText": "UE_LOG(LogSockets, Warning, TEXT(\"Could not get binding addresses to set the internal scope id for the broadcast address\"))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "UE_LOG(LogSockets, Warning, TEXT(\"Could not get the socketsubsystem for querying the scope id of the broadcast address\"))"
  },
  {
    "label": "SetPort()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetPort(0)"
  }
]