[
  {
    "label": "EShaderStage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderStage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackedArrayInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedArrayInfo"
  },
  {
    "label": "FShaderBindingInOutMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderBindingInOutMask"
  },
  {
    "label": "FShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderBindings"
  },
  {
    "label": "FUniformBufferCopyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformBufferCopyInfo"
  },
  {
    "label": "PACKED_TYPENAME_HIGHP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderCore . h \" # include \" ShaderCompilerCore . h \" namespace CrossCompiler { enum EShaderStage { SHADER_STAGE_VERTEX = 0,SHADER_STAGE_PIXEL,SHADER_STAGE_GEOMETRY,SHADER_STAGE_MESH,SHADER_STAGE_AMPLIFICATION,NUM_NON_COMPUTE_SHADER_STAGES,SHADER_STAGE_COMPUTE = NUM_NON_COMPUTE_SHADER_STAGES,NUM_SHADER_STAGES,} ; enum class EPackedTypeName : int8 { HighP = ' h ',MediumP = ' m ',LowP = ' l ',Int = ' i ',Uint = ' u ',Sampler = ' s ',Image = ' g ',Invalid = ' ',} ; enum class EPackedTypeIndex : int8 { HighP = 0,MediumP = 1,LowP = 2,Int = 3,Uint = 4,Sampler = 5,Image = 6,Max = 7,Invalid = - 1,} ; enum {)",
    "insertText": "PACKED_TYPENAME_HIGHP(int32)EPackedTypeName::HighP, PACKED_TYPENAME_MEDIUMP = (int32)EPackedTypeName::MediumP, PACKED_TYPENAME_LOWP = (int32)EPackedTypeName::LowP, PACKED_TYPENAME_INT = (int32)EPackedTypeName::Int, PACKED_TYPENAME_UINT = (int32)EPackedTypeName::Uint, PACKED_TYPENAME_SAMPLER = (int32)EPackedTypeName::Sampler, PACKED_TYPENAME_IMAGE = (int32)EPackedTypeName::Image, PACKED_TYPEINDEX_HIGHP = (int32)EPackedTypeIndex::HighP, PACKED_TYPEINDEX_MEDIUMP = (int32)EPackedTypeIndex::MediumP, PACKED_TYPEINDEX_LOWP = (int32)EPackedTypeIndex::LowP, PACKED_TYPEINDEX_INT = (int32)EPackedTypeIndex::Int, PACKED_TYPEINDEX_UINT = (int32)EPackedTypeIndex::Uint, PACKED_TYPEINDEX_SAMPLER = (int32)EPackedTypeIndex::Sampler, PACKED_TYPEINDEX_IMAGE = (int32)EPackedTypeIndex::Image, PACKED_TYPEINDEX_MAX = (int32)"
  },
  {
    "label": "ShaderStageIndexToTypeName()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "ShaderStageIndexToTypeName(uint8 ShaderStage)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (Ar<<Info . Size ; Ar<<Info . ; Ar<<Info . TypeIndex ; return Ar ; } # pragma)",
    "insertText": "warning(push) #pragma warning(error : 4596)"
  },
  {
    "label": "MaxIndex()",
    "kind": "Method",
    "detail": "Function (uint32 Bitmask = 0 ; int32)",
    "insertText": "MaxIndex(sizeof(decltype(FShaderBindingInOutMask::Bitmask)) * 8u)"
  },
  {
    "label": "EnableField()",
    "kind": "Method",
    "detail": "Function (int32 DepthStencilMaskIndex = MaxIndex ; void)",
    "insertText": "EnableField(int32 Index)"
  },
  {
    "label": "Bitmask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bitmask(1u << Index)"
  },
  {
    "label": "IsFieldEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFieldEnabled(int32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FShaderBindingInOutMask& Lhs, const FShaderBindingInOutMask& Rhs)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} } ; # pragma)",
    "insertText": "warning(pop) inline FArchive& operator<<(FArchive& Ar, FShaderBindingInOutMask& BindingInOutMask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<BindingInOutMask . Bitmask ; return Ar ; } struct FShaderBindings { TArray<TArray<FPackedArrayInfo>> PackedUniformBuffers ; TArray<FPackedArrayInfo> PackedGlobalArrays ; FShaderCompilerResourceTable ShaderResourceTable ; FShaderBindingInOutMask InOutMask ; uint8 NumSamplers ; uint8 NumUniformBuffers ; uint8 NumUAVs ; uint8 NumAccelerationStructures ; bool bHasRegularUniformBuffers ; } ; struct FUniformBufferCopyInfo { uint16 SourceOffsetInFloats ; uint8 SourceUBIndex ; uint8 DestUBIndex ; uint8 DestUBTypeName ; uint8 DestUBTypeIndex ; uint16 DestOffsetInFloats ; uint16 SizeInFloats ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FUniformBufferCopyInfo& Info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Info . SourceOffsetInFloats ; Ar<<Info . SourceUBIndex ; Ar<<Info . DestUBIndex ; Ar<<Info . DestUBTypeName ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "PackedTypeNameToTypeIndex()",
    "kind": "Method",
    "detail": "Function (Info . DestUBTypeIndex =)",
    "insertText": "PackedTypeNameToTypeIndex(Info.DestUBTypeName)"
  }
]