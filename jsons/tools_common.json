[
  {
    "label": "VideoFileType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VideoFileType"
  },
  {
    "label": "FileTypeDetectionBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileTypeDetectionBuffer"
  },
  {
    "label": "VpxRational",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpxRational"
  },
  {
    "label": "VpxInputContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpxInputContext"
  },
  {
    "label": "VpxInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpxInterface"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TOOLS_COMMON_H_ # define VPX_TOOLS_COMMON_H_ # include<stdio . h> # include \" . / vpx_config . h \" # include \" vpx / vpx_codec . h \" # include \" vpx / vpx_image . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_ports / msvc . h \" # if CONFIG_ENCODERS # include \" . / y4minput . h \" # endif # if)",
    "insertText": "defined(_MSC_VER)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_WIN32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif CONFIG_OS_SUPPORT # include<sys / types . h> typedef off_t FileOffset ; # else # define fseeko fseek # define ftello ftell typedef long FileOffset ; # endif # if CONFIG_OS_SUPPORT # if)",
    "insertText": "defined(_MSC_VER) #include <io.h> #define isatty _isatty #define fileno _fileno #else #include <unistd.h> #endif #endif #define LITERALU64(hi, lo) ((((uint64_t)hi) << 32) | lo) #ifndef PATH_MAX #define PATH_MAX 512 #endif #define IVF_FRAME_HDR_SZ (4 + 8) #define IVF_FILE_HDR_SZ 32 #define RAW_FRAME_HDR_SZ sizeof(uint32_t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (FILE_TYPE_RAW,FILE_TYPE_IVF,FILE_TYPE_Y4M,FILE_TYPE_WEBM } ; struct FileTypeDetectionBuffer { char buf [ 4 ] ; size_t buf_read ; size_t position ; } ; struct VpxRational { int numerator ; int denominator ; } ; struct VpxInputContext { const char* filename ; FILE* file ; int64_t length ; struct FileTypeDetectionBuffer detect ; enum VideoFileType file_type ; uint32_t width ; uint32_t height ; struct VpxRational pixel_aspect_ratio ; vpx_img_fmt_t fmt ; vpx_bit_depth_t bit_depth ; int only_i420 ; uint32_t fourcc ; struct VpxRational framerate ; # if CONFIG_ENCODERS y4m_input y4m ; # endif } ; # ifdef __cplusplus \" C \" { # endif # if)",
    "insertText": "defined(__GNUC__) #define VPX_NO_RETURN __attribute__((noreturn)) #elif defined(_MSC_VER) #define VPX_NO_RETURN __declspec(noreturn) #else #define VPX_NO_RETURN #endif #define VPX_TOOLS_FORMAT_PRINTF(string_index, first_to_check) #if defined(__has_attribute) #if __has_attribute(format) #undef VPX_TOOLS_FORMAT_PRINTF #define VPX_TOOLS_FORMAT_PRINTF(string_index, first_to_check) \\ __attribute__((__format__(__printf__, string_index, first_to_check))) #endif #endif FILE *set_binary_mode(FILE *stream)"
  },
  {
    "label": "die()",
    "kind": "Method",
    "detail": "Function (VPX_NO_RETURN void)",
    "insertText": "die(const char *fmt, ...) VPX_TOOLS_FORMAT_PRINTF(1, 2)"
  },
  {
    "label": "fatal()",
    "kind": "Method",
    "detail": "Function (VPX_NO_RETURN void)",
    "insertText": "fatal(const char *fmt, ...) VPX_TOOLS_FORMAT_PRINTF(1, 2)"
  },
  {
    "label": "warn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "warn(const char *fmt, ...) VPX_TOOLS_FORMAT_PRINTF(1, 2)"
  },
  {
    "label": "die_codec()",
    "kind": "Method",
    "detail": "Function (VPX_NO_RETURN void)",
    "insertText": "die_codec(vpx_codec_ctx_t *ctx, const char *s)"
  },
  {
    "label": "usage_exit()",
    "kind": "Method",
    "detail": "Function (VPX_NO_RETURN void)",
    "insertText": "usage_exit(void)"
  },
  {
    "label": "read_yuv_frame()",
    "kind": "Method",
    "detail": "Function (# undef VPX_NO_RETURN int)",
    "insertText": "read_yuv_frame(struct VpxInputContext *input_ctx, vpx_image_t *yuv_frame)"
  },
  {
    "label": "vpx_codec_iface_t()",
    "kind": "Method",
    "detail": "Function (typedef struct VpxInterface { const char* const name ; const uint32_t fourcc ;)",
    "insertText": "vpx_codec_iface_t(*const codec_interface)()"
  },
  {
    "label": "get_vpx_encoder_count()",
    "kind": "Method",
    "detail": "Function (} VpxInterface ; int)",
    "insertText": "get_vpx_encoder_count(void)"
  },
  {
    "label": "get_vpx_encoder_by_index()",
    "kind": "Method",
    "detail": "Function (const VpxInterface*)",
    "insertText": "get_vpx_encoder_by_index(int i)"
  },
  {
    "label": "get_vpx_encoder_by_name()",
    "kind": "Method",
    "detail": "Function (const VpxInterface*)",
    "insertText": "get_vpx_encoder_by_name(const char *name)"
  },
  {
    "label": "get_vpx_decoder_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_vpx_decoder_count(void)"
  },
  {
    "label": "get_vpx_decoder_by_index()",
    "kind": "Method",
    "detail": "Function (const VpxInterface*)",
    "insertText": "get_vpx_decoder_by_index(int i)"
  },
  {
    "label": "get_vpx_decoder_by_name()",
    "kind": "Method",
    "detail": "Function (const VpxInterface*)",
    "insertText": "get_vpx_decoder_by_name(const char *name)"
  },
  {
    "label": "get_vpx_decoder_by_fourcc()",
    "kind": "Method",
    "detail": "Function (const VpxInterface*)",
    "insertText": "get_vpx_decoder_by_fourcc(uint32_t fourcc)"
  },
  {
    "label": "vpx_img_plane_width()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vpx_img_plane_width(const vpx_image_t *img, int plane)"
  },
  {
    "label": "vpx_img_plane_height()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vpx_img_plane_height(const vpx_image_t *img, int plane)"
  },
  {
    "label": "vpx_img_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_img_write(const vpx_image_t *img, FILE *file)"
  },
  {
    "label": "vpx_img_read()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vpx_img_read(vpx_image_t *img, FILE *file)"
  },
  {
    "label": "read_frame()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_ENCODERS int)",
    "insertText": "read_frame(struct VpxInputContext *input_ctx, vpx_image_t *img)"
  },
  {
    "label": "file_is_y4m()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "file_is_y4m(const char detect[4])"
  },
  {
    "label": "fourcc_is_ivf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "fourcc_is_ivf(const char detect[4])"
  },
  {
    "label": "open_input_file()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "open_input_file(struct VpxInputContext *input)"
  },
  {
    "label": "close_input_file()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "close_input_file(struct VpxInputContext *input)"
  },
  {
    "label": "vpx_img_upshift()",
    "kind": "Method",
    "detail": "Function (# endif # if CONFIG_VP9_HIGHBITDEPTH void)",
    "insertText": "vpx_img_upshift(vpx_image_t *dst, vpx_image_t *src, int input_shift)"
  },
  {
    "label": "vpx_img_downshift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_img_downshift(vpx_image_t *dst, vpx_image_t *src, int down_shift)"
  },
  {
    "label": "vpx_img_truncate_16_to_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_img_truncate_16_to_8(vpx_image_t *dst, vpx_image_t *src)"
  },
  {
    "label": "compare_img()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "compare_img(const vpx_image_t *const img1, const vpx_image_t *const img2)"
  },
  {
    "label": "find_mismatch_high()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH void)",
    "insertText": "find_mismatch_high(const vpx_image_t *const img1, const vpx_image_t *const img2, int yloc[4], int uloc[4], int vloc[4])"
  },
  {
    "label": "find_mismatch()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "find_mismatch(const vpx_image_t *const img1, const vpx_image_t *const img2, int yloc[4], int uloc[4], int vloc[4])"
  }
]