[
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifndef __XACT3D3_H__ # define __XACT3D3_H__ # include<x3daudio . h> # include<xact3 . h> # pragma)",
    "insertText": "warning(push) #pragma warning(disable: 4701) #define LEFT_AZIMUTH (3*X3DAUDIO_PI/2) #define RIGHT_AZIMUTH (X3DAUDIO_PI/2) #define FRONT_LEFT_AZIMUTH (7*X3DAUDIO_PI/4) #define FRONT_RIGHT_AZIMUTH (X3DAUDIO_PI/4) #define FRONT_CENTER_AZIMUTH 0.0f #define LOW_FREQUENCY_AZIMUTH X3DAUDIO_2PI #define BACK_LEFT_AZIMUTH (5*X3DAUDIO_PI/4) #define BACK_RIGHT_AZIMUTH (3*X3DAUDIO_PI/4) #define BACK_CENTER_AZIMUTH X3DAUDIO_PI #define FRONT_LEFT_OF_CENTER_AZIMUTH (15*X3DAUDIO_PI/8) #define FRONT_RIGHT_OF_CENTER_AZIMUTH (X3DAUDIO_PI/8)"
  },
  {
    "label": "XACT3DInitialize()",
    "kind": "Method",
    "detail": "Function (LEFT_AZIMUTH,RIGHT_AZIMUTH } ; const float a2Point1Layout [ ] = { LEFT_AZIMUTH,RIGHT_AZIMUTH,LOW_FREQUENCY_AZIMUTH } ; const float aQuadLayout [ ] = { FRONT_LEFT_AZIMUTH,FRONT_RIGHT_AZIMUTH,BACK_LEFT_AZIMUTH,BACK_RIGHT_AZIMUTH } ; const float a4Point1Layout [ ] = { FRONT_LEFT_AZIMUTH,FRONT_RIGHT_AZIMUTH,LOW_FREQUENCY_AZIMUTH,BACK_LEFT_AZIMUTH,BACK_RIGHT_AZIMUTH } ; const float a5Point1Layout [ ] = { FRONT_LEFT_AZIMUTH,FRONT_RIGHT_AZIMUTH,FRONT_CENTER_AZIMUTH,LOW_FREQUENCY_AZIMUTH,BACK_LEFT_AZIMUTH,BACK_RIGHT_AZIMUTH } ; const float a7Point1Layout [ ] = { FRONT_LEFT_AZIMUTH,FRONT_RIGHT_AZIMUTH,FRONT_CENTER_AZIMUTH,LOW_FREQUENCY_AZIMUTH,BACK_LEFT_AZIMUTH,BACK_RIGHT_AZIMUTH,LEFT_AZIMUTH,RIGHT_AZIMUTH } ; EXTERN_C HRESULT)",
    "insertText": "XACT3DInitialize(__in IXACT3Engine* pEngine, __in X3DAUDIO_HANDLE X3DInstance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ;)",
    "insertText": "if(pEngine == NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (hr = E_POINTER ; } XACTVARIABLEVALUE nSpeedOfSound ;)",
    "insertText": "if(SUCCEEDED(hr))"
  },
  {
    "label": "GetGlobalVariableIndex()",
    "kind": "Method",
    "detail": "Function (XACTVARIABLEINDEX xactSpeedOfSoundID = pEngine ->)",
    "insertText": "GetGlobalVariableIndex(\"SpeedOfSound\")"
  },
  {
    "label": "GetGlobalVariable()",
    "kind": "Method",
    "detail": "Function (hr = pEngine ->)",
    "insertText": "GetGlobalVariable(xactSpeedOfSoundID, &nSpeedOfSound)"
  },
  {
    "label": "GetFinalMixFormat()",
    "kind": "Method",
    "detail": "Function (WAVEFORMATEXTENSIBLE wfxFinalMixFormat ; hr = pEngine ->)",
    "insertText": "GetFinalMixFormat(&wfxFinalMixFormat)"
  },
  {
    "label": "X3DAudioInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X3DAudioInitialize(wfxFinalMixFormat.dwChannelMask, nSpeedOfSound, X3DInstance)"
  },
  {
    "label": "XACT3DCalculate()",
    "kind": "Method",
    "detail": "Function (} } return hr ; } EXTERN_C HRESULT)",
    "insertText": "XACT3DCalculate(__in X3DAUDIO_HANDLE X3DInstance, __in const X3DAUDIO_LISTENER* pListener, __inout X3DAUDIO_EMITTER* pEmitter, __inout X3DAUDIO_DSP_SETTINGS* pDSPSettings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ;)",
    "insertText": "if(pListener == NULL || pEmitter == NULL || pDSPSettings == NULL)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (pEmitter -> ChannelRadius = 1 . 0 f ;)",
    "insertText": "switch(pEmitter->ChannelCount)"
  },
  {
    "label": "pChannelAzimuths()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : pEmitter ->)",
    "insertText": "pChannelAzimuths(float*)"
  },
  {
    "label": "DefaultCurve()",
    "kind": "Method",
    "detail": "Function (X3DAUDIO_DISTANCE_CURVE_POINT DefaultCurvePoints [ 2 ] = { 0 . 0 f,1 . 0 f,1 . 0 f,1 . 0 f } ; X3DAUDIO_DISTANCE_CURVE)",
    "insertText": "DefaultCurve(X3DAUDIO_DISTANCE_CURVE_POINT*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pEmitter -> pVolumeCurve =& DefaultCurve ; })",
    "insertText": "if(pEmitter->pLFECurve == NULL)"
  },
  {
    "label": "X3DAudioCalculate()",
    "kind": "Method",
    "detail": "Function (pEmitter -> pLFECurve =& DefaultCurve ; })",
    "insertText": "X3DAudioCalculate(X3DInstance, pListener, pEmitter, (X3DAUDIO_CALCULATE_MATRIX | X3DAUDIO_CALCULATE_DOPPLER | X3DAUDIO_CALCULATE_EMITTER_ANGLE), pDSPSettings)"
  },
  {
    "label": "XACT3DApply()",
    "kind": "Method",
    "detail": "Function (} return hr ; } EXTERN_C HRESULT)",
    "insertText": "XACT3DApply(__in const X3DAUDIO_DSP_SETTINGS* pDSPSettings, __in IXACT3Cue* pCue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ;)",
    "insertText": "if(pDSPSettings == NULL || pCue == NULL)"
  },
  {
    "label": "SetMatrixCoefficients()",
    "kind": "Method",
    "detail": "Function (hr = pCue ->)",
    "insertText": "SetMatrixCoefficients(pDSPSettings->SrcChannelCount, pDSPSettings->DstChannelCount, pDSPSettings->pMatrixCoefficients)"
  },
  {
    "label": "GetVariableIndex()",
    "kind": "Method",
    "detail": "Function (XACTVARIABLEINDEX xactDistanceID = pCue ->)",
    "insertText": "GetVariableIndex(\"Distance\")"
  },
  {
    "label": "SetVariable()",
    "kind": "Method",
    "detail": "Function (hr = pCue ->)",
    "insertText": "SetVariable(xactDistanceID, pDSPSettings->EmitterToListenerDistance)"
  },
  {
    "label": "GetVariableIndex()",
    "kind": "Method",
    "detail": "Function (XACTVARIABLEINDEX xactDopplerID = pCue ->)",
    "insertText": "GetVariableIndex(\"DopplerPitchScalar\")"
  },
  {
    "label": "SetVariable()",
    "kind": "Method",
    "detail": "Function (hr = pCue ->)",
    "insertText": "SetVariable(xactDopplerID, pDSPSettings->DopplerFactor)"
  },
  {
    "label": "GetVariableIndex()",
    "kind": "Method",
    "detail": "Function (XACTVARIABLEINDEX xactOrientationID = pCue ->)",
    "insertText": "GetVariableIndex(\"OrientationAngle\")"
  },
  {
    "label": "SetVariable()",
    "kind": "Method",
    "detail": "Function (hr = pCue ->)",
    "insertText": "SetVariable(xactOrientationID, pDSPSettings->EmitterToListenerAngle * (180.0f / X3DAUDIO_PI))"
  }
]