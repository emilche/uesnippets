[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PooledSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_POOLED_SEQUENCED_TASK_RUNNER_H_ # define BASE_TASK_THREAD_POOL_POOLED_SEQUENCED_TASK_RUNNER_H_ # include \" base / base_export . h \" # include \" base / callback_forward . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / task_traits . h \" # include \" base / task / thread_pool / pooled_task_runner_delegate . h \" # include \" base / task / thread_pool / sequence . h \" # include \" base / task / updateable_sequenced_task_runner . h \" # include \" base / time / time . h \" namespace base { namespace internal { class BASE_EXPORT PooledSequencedTaskRunner : public UpdateableSequencedTaskRunner { public :)",
    "insertText": "PooledSequencedTaskRunner(const TaskTraits& traits, PooledTaskRunnerDelegate* pooled_task_runner_delegate)"
  },
  {
    "label": "PooledSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PooledSequencedTaskRunner(const PooledSequencedTaskRunner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PooledSequencedTaskRunner&)",
    "insertText": "operator(const PooledSequencedTaskRunner&)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, OnceClosure closure, TimeDelta delay)"
  },
  {
    "label": "PostDelayedTaskAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTaskAt(subtle::PostDelayedTaskPassKey, const Location& from_here, OnceClosure closure, TimeTicks delayed_run_time, subtle::DelayPolicy delay_policy)"
  },
  {
    "label": "PostNonNestableDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostNonNestableDelayedTask(const Location& from_here, OnceClosure closure, TimeDelta delay)"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(TaskPriority priority)"
  },
  {
    "label": "PooledSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (private : ~)",
    "insertText": "PooledSequencedTaskRunner()"
  }
]