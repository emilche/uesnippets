[
  {
    "label": "FTedsRowHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTedsRowHandle"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / NumericLimits . h \" # include \" Templates / TypeHash . h \" # include \" TypedElementHandles . generated . h \" namespace UE::Editor::DataStorage { using TableHandle = uint64 ; TableHandle InvalidTableHandle = TNumericLimits<TableHandle)",
    "insertText": "Max()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "RowHandle()",
    "kind": "Method",
    "detail": "Function (operator UE::Editor::)",
    "insertText": "RowHandle()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (RowHandle = InRowHandle ; return* this ; } uint32)",
    "insertText": "GetTypeHash(const FTedsRowHandle& Key)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(sizeof(FTedsRowHandle::RowHandle) == sizeof(UE::Editor::DataStorage::RowHandle), \"RowHandle and RowHandle wrapper sizes should match\")"
  }
]