[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "RtpPacketToSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketToSend"
  },
  {
    "label": "FlexfecSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlexfecSender"
  },
  {
    "label": "FlexfecSender()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_INCLUDE_FLEXFEC_SENDER_H_ # define MODULES_RTP_RTCP_INCLUDE_FLEXFEC_SENDER_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / rtp_parameters . h \" # include \" modules / rtp_rtcp / include / rtp_header_extension_map . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtp_header_extension_size . h \" # include \" modules / rtp_rtcp / source / ulpfec_generator . h \" # include \" modules / rtp_rtcp / source / video_fec_generator . h \" # include \" rtc_base / random . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class Clock ; class RtpPacketToSend ; class FlexfecSender : public VideoFecGenerator { public :)",
    "insertText": "FlexfecSender(int payload_type, uint32_t ssrc, uint32_t protected_media_ssrc, absl::string_view mid, const std::vector<RtpExtension>& rtp_header_extensions, rtc::ArrayView<const RtpExtensionSize> extension_sizes, const RtpState* rtp_state, Clock* clock)"
  },
  {
    "label": "FlexfecSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FlexfecSender()"
  },
  {
    "label": "GetFecType()",
    "kind": "Method",
    "detail": "Function (FecType)",
    "insertText": "GetFecType()"
  },
  {
    "label": "AddPacketAndGenerateFec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacketAndGenerateFec(const RtpPacketToSend& packet)"
  },
  {
    "label": "GetFecPackets()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "GetFecPackets()"
  },
  {
    "label": "MaxPacketOverhead()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxPacketOverhead()"
  },
  {
    "label": "CurrentFecRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "CurrentFecRate()"
  },
  {
    "label": "GetRtpState()",
    "kind": "Method",
    "detail": "Function (absl::optional<RtpState>)",
    "insertText": "GetRtpState()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Clock* const clock_ ; Random random_ ; int64_t last_generated_packet_ms_ ; const int payload_type_ ; const uint32_t timestamp_offset_ ; const uint32_t ssrc_ ; const uint32_t protected_media_ssrc_ ; const std::string mid_ ; uint16_t seq_num_ ; UlpfecGenerator ulpfec_generator_ ; const RtpHeaderExtensionMap rtp_header_extension_map_ ; const size_t header_extensions_size_ ; Mutex mutex_ ; RateStatistics fec_bitrate_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]