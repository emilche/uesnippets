[
  {
    "label": "FSlateColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateColor"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FWidgetStyle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / Color . h \" struct FSlateColor ; template<ObjectType> class TAttribute ; class FWidgetStyle { public :)",
    "insertText": "FWidgetStyle() : ColorAndOpacityTint(FLinearColor::White) , ForegroundColor(FLinearColor::White) , SubduedForeground(FLinearColor::White*SubdueAmount)"
  },
  {
    "label": "BlendColorAndOpacityTint()",
    "kind": "Method",
    "detail": "Function (} public : FWidgetStyle&)",
    "insertText": "BlendColorAndOpacityTint(const FLinearColor& InTint)"
  },
  {
    "label": "BlendOpacity()",
    "kind": "Method",
    "detail": "Function (ColorAndOpacityTint* = InTint ; return* this ; } FWidgetStyle&)",
    "insertText": "BlendOpacity(float InOpacity)"
  },
  {
    "label": "SetForegroundColor()",
    "kind": "Method",
    "detail": "Function (ColorAndOpacityTint . A* = InOpacity ; return* this ; } FWidgetStyle&)",
    "insertText": "SetForegroundColor(const FLinearColor& InForeground)"
  },
  {
    "label": "GetColorAndOpacityTint()",
    "kind": "Method",
    "detail": "Function (public : const FLinearColor&)",
    "insertText": "GetColorAndOpacityTint()"
  }
]