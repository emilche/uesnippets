[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__has_allocator_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__has_allocator_type"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Alloc"
  },
  {
    "label": "__uses_allocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__uses_allocator"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_USES_ALLOCATOR_H # define _LIBCPP___MEMORY_USES_ALLOCATOR_H # include<__config> # include<cstddef> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (private : template<class _Up> false_type)",
    "insertText": "__test(...)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (template<class _Up> true_type)",
    "insertText": "__test(typename _Up::allocator_type* = 0)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : const bool value =)",
    "insertText": "decltype(__test<_Tp>(0))"
  }
]