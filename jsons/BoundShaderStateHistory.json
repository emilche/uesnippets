[
  {
    "label": "TBoundShaderStateHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBoundShaderStateHistory"
  },
  {
    "label": "TBoundShaderStateHistory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIGlobals . h \" # include \" RenderResource . h \" template<uint32 Size,bool TThreadSafe = true> class TBoundShaderStateHistory : public FRenderResource { public :)",
    "insertText": "TBoundShaderStateHistory()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (BoundShaderStateHistoryLock .)",
    "insertText": "Lock()"
  },
  {
    "label": "NextBoundShaderStateIndex()",
    "kind": "Method",
    "detail": "Function (} BoundShaderStates [ NextBoundShaderStateIndex ] = BoundShaderState ;)",
    "insertText": "NextBoundShaderStateIndex(NextBoundShaderStateIndex + 1)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (BoundShaderStateHistoryLock .)",
    "insertText": "Unlock()"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (} } FRHIBoundShaderState*)",
    "insertText": "GetLast()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (uint32 LastIndex = NextBoundShaderStateIndex = = 0 ? Size - 1 : NextBoundShaderStateIndex - 1 ; return BoundShaderStates [ LastIndex ] ; } void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32 Index = 0; Index < Size; Index++)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (BoundShaderStates [ Index ] .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TThreadSafe && GRHISupportsParallelRHIExecute)"
  }
]