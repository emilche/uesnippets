[
  {
    "label": "position",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "position"
  },
  {
    "label": "LEFT_TOP_MARGIN()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_MVREF_COMMON_H_ # define VPX_VP9_COMMON_VP9_MVREF_COMMON_H_ # include \" vp9 / common / vp9_onyxc_int . h \" # include \" vp9 / common / vp9_blockd . h \" # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "LEFT_TOP_MARGIN((VP9_ENC_BORDER_IN_PIXELS - VP9_INTERP_EXTEND) << 3) #define RIGHT_BOTTOM_MARGIN \\ ((VP9_ENC_BORDER_IN_PIXELS - VP9_INTERP_EXTEND) << 3)"
  },
  {
    "label": "MV_BORDER()",
    "kind": "Method",
    "detail": "Function (int row ; int col ; } POSITION ; typedef enum { BOTH_ZERO = 0,ZERO_PLUS_PREDICTED = 1,BOTH_PREDICTED = 2,NEW_PLUS_NON_INTRA = 3,BOTH_NEW = 4,INTRA_PLUS_NON_INTRA = 5,BOTH_INTRA = 6,INVALID_CASE = 9 } motion_vector_context ; const int mode_2_counter [ MB_MODE_COUNT ] = { 9,9,9,9,9,9,9,9,9,9,0,0,3,1,} ; const int counter_to_context [ 1 9 ] = { BOTH_PREDICTED,NEW_PLUS_NON_INTRA,BOTH_NEW,ZERO_PLUS_PREDICTED,NEW_PLUS_NON_INTRA,INVALID_CASE,BOTH_ZERO,INVALID_CASE,INVALID_CASE,INTRA_PLUS_NON_INTRA,INTRA_PLUS_NON_INTRA,INVALID_CASE,INTRA_PLUS_NON_INTRA,INVALID_CASE,INVALID_CASE,INVALID_CASE,INVALID_CASE,INVALID_CASE,BOTH_INTRA } ; const POSITION mv_ref_blocks [ BLOCK_SIZES ] [ MVREF_NEIGHBOURS ] = { { { - 1,0 },{ 0,- 1 },{ - 1,- 1 },{ - 2,0 },{ 0,- 2 },{ - 2,- 1 },{ - 1,- 2 },{ - 2,- 2 } },{ { - 1,0 },{ 0,- 1 },{ - 1,- 1 },{ - 2,0 },{ 0,- 2 },{ - 2,- 1 },{ - 1,- 2 },{ - 2,- 2 } },{ { - 1,0 },{ 0,- 1 },{ - 1,- 1 },{ - 2,0 },{ 0,- 2 },{ - 2,- 1 },{ - 1,- 2 },{ - 2,- 2 } },{ { - 1,0 },{ 0,- 1 },{ - 1,- 1 },{ - 2,0 },{ 0,- 2 },{ - 2,- 1 },{ - 1,- 2 },{ - 2,- 2 } },{ { 0,- 1 },{ - 1,0 },{ 1,- 1 },{ - 1,- 1 },{ 0,- 2 },{ - 2,0 },{ - 2,- 1 },{ - 1,- 2 } },{ { - 1,0 },{ 0,- 1 },{ - 1,1 },{ - 1,- 1 },{ - 2,0 },{ 0,- 2 },{ - 1,- 2 },{ - 2,- 1 } },{ { - 1,0 },{ 0,- 1 },{ - 1,1 },{ 1,- 1 },{ - 1,- 1 },{ - 3,0 },{ 0,- 3 },{ - 3,- 3 } },{ { 0,- 1 },{ - 1,0 },{ 2,- 1 },{ - 1,- 1 },{ - 1,1 },{ 0,- 3 },{ - 3,0 },{ - 3,- 3 } },{ { - 1,0 },{ 0,- 1 },{ - 1,2 },{ - 1,- 1 },{ 1,- 1 },{ - 3,0 },{ 0,- 3 },{ - 3,- 3 } },{ { - 1,1 },{ 1,- 1 },{ - 1,2 },{ 2,- 1 },{ - 1,- 1 },{ - 3,0 },{ 0,- 3 },{ - 3,- 3 } },{ { 0,- 1 },{ - 1,0 },{ 4,- 1 },{ - 1,2 },{ - 1,- 1 },{ 0,- 3 },{ - 3,0 },{ 2,- 1 } },{ { - 1,0 },{ 0,- 1 },{ - 1,4 },{ 2,- 1 },{ - 1,- 1 },{ - 3,0 },{ 0,- 3 },{ - 1,2 } },{ { - 1,3 },{ 3,- 1 },{ - 1,4 },{ 4,- 1 },{ - 1,- 1 },{ - 1,0 },{ 0,- 1 },{ - 1,6 } } } ; const int idx_n_column_to_subblock [ 4 ] [ 2 ] = { { 1,2 },{ 1,3 },{ 3,2 },{ 3,3 } } ; # define)",
    "insertText": "MV_BORDER(16 << 3) static INLINE void clamp_mv_ref(MV *mv, const MACROBLOCKD *xd)"
  },
  {
    "label": "clamp_mv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clamp_mv(mv, xd->mb_to_left_edge - MV_BORDER, xd->mb_to_right_edge + MV_BORDER, xd->mb_to_top_edge - MV_BORDER, xd->mb_to_bottom_edge + MV_BORDER)"
  },
  {
    "label": "get_sub_block_mv()",
    "kind": "Method",
    "detail": "Function (} int_mv)",
    "insertText": "get_sub_block_mv(const MODE_INFO *candidate, int which_mv, int search_col, int block_idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int_mv mv = mi -> mv [ ref ] ;)",
    "insertText": "if(ref_sign_bias[mi->ref_frame[ref]] != ref_sign_bias[this_ref_frame])"
  },
  {
    "label": "ADD_MV_REF_LIST()",
    "kind": "Method",
    "detail": "Function (mv . as_mv . row* = - 1 ; mv . as_mv . col* = - 1 ; } return mv ; } # define)",
    "insertText": "ADD_MV_REF_LIST(mv, refmv_count, mv_ref_list, Done)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(refmv_count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((mv).as_int != (mv_ref_list)[0].as_int)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ goto Done ; \\ } \\ })",
    "insertText": "else(mv_ref_list)[(refmv_count)++] = (mv)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define IF_DIFF_REF_FRAME_ADD_MV(mbmi, ref_frame, ref_sign_bias, refmv_count, \\ mv_ref_list, Done)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(is_inter_block(mbmi))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((mbmi)->ref_frame[0] != (ref_frame)) \\ ADD_MV_REF_LIST(scale_mv((mbmi), 0, ref_frame, ref_sign_bias), \\ refmv_count, mv_ref_list, Done)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(has_second_ref(mbmi) && (mbmi)->ref_frame[1] != (ref_frame) && \\ (mbmi)->mv[1].as_int != (mbmi)->mv[0].as_int) \\ ADD_MV_REF_LIST(scale_mv((mbmi), 1, ref_frame, ref_sign_bias), \\ refmv_count, mv_ref_list, Done)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) static INLINE int is_inside(const TileInfo *const tile, int mi_col, int mi_row, int mi_rows, const POSITION *mi_pos)"
  },
  {
    "label": "clamp_mv2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clamp_mv2(MV *mv, const MACROBLOCKD *xd)"
  },
  {
    "label": "clamp_mv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clamp_mv(mv, xd->mb_to_left_edge - LEFT_TOP_MARGIN, xd->mb_to_right_edge + RIGHT_BOTTOM_MARGIN, xd->mb_to_top_edge - LEFT_TOP_MARGIN, xd->mb_to_bottom_edge + RIGHT_BOTTOM_MARGIN)"
  },
  {
    "label": "lower_mv_precision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lower_mv_precision(MV *mv, int allow_hp)"
  },
  {
    "label": "use_mv_hp()",
    "kind": "Method",
    "detail": "Function (const int use_hp = allow_hp&&)",
    "insertText": "use_mv_hp(mv)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } typedef)",
    "insertText": "void(*find_mv_refs_sync)(void *const data, int mi_row)"
  },
  {
    "label": "vp9_find_mv_refs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_find_mv_refs(const VP9_COMMON *cm, const MACROBLOCKD *xd, MODE_INFO *mi, MV_REFERENCE_FRAME ref_frame, int_mv *mv_ref_list, int mi_row, int mi_col, uint8_t *mode_context)"
  },
  {
    "label": "vp9_find_best_ref_mvs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_find_best_ref_mvs(MACROBLOCKD *xd, int allow_hp, int_mv *mvlist, int_mv *nearest_mv, int_mv *near_mv)"
  },
  {
    "label": "vp9_append_sub8x8_mvs_for_idx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_append_sub8x8_mvs_for_idx(VP9_COMMON *cm, MACROBLOCKD *xd, int block, int ref, int mi_row, int mi_col, int_mv *nearest_mv, int_mv *near_mv, uint8_t *mode_context)"
  }
]