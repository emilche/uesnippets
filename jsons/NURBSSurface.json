[
  {
    "label": "FNURBSSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNURBSSurface"
  },
  {
    "label": "FNURBSSurface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Surfaces / NurbsSurfaceData . h \" # include \" Geo / Surfaces / Surface . h \" # include \" Math / BSpline . h \" namespace UE::CADKernel { class FNURBSSurface : public FSurface { FEntity ; protected : int32 PoleUCount ; int32 PoleVCount ; int32 UDegree ; int32 VDegree ; TArray<double> UNodalVector ; TArray<double> VNodalVector ; TArray<double> Weights ; TArray<FPoint> Poles ; bool bIsRational ; TArray<double> HomogeneousPoles ;)",
    "insertText": "FNURBSSurface(const double InToleranceGeometric, int32 InPoleUCount, int32 InPoleVCount, int32 InDegreU, int32 InDegreV, const TArray<double>& InNodalVectorU, const TArray<double>& InNodalVectorV, const TArray<FPoint>& InPoles) : FSurface(InToleranceGeometric) , PoleUCount(InPoleUCount) , PoleVCount(InPoleVCount) , UDegree(InDegreU) , VDegree(InDegreV) , UNodalVector(InNodalVectorU) , VNodalVector(InNodalVectorV) , Poles(InPoles) , bIsRational(false)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "FNURBSSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNURBSSurface(const double InToleranceGeometric, int32 InPoleUCount, int32 InPoleVCount, int32 InDegreU, int32 InDegreV, const TArray<double>& InNodalVectorU, const TArray<double>& InNodalVectorV, const TArray<FPoint>& InPoles, const TArray<double>& InWeights) : FSurface(InToleranceGeometric) , PoleUCount(InPoleUCount) , PoleVCount(InPoleVCount) , UDegree(InDegreU) , VDegree(InDegreV) , UNodalVector(InNodalVectorU) , VNodalVector(InNodalVectorV) , Weights(InWeights) , Poles(InPoles) , bIsRational(true)"
  },
  {
    "label": "ComputeMinToleranceIso()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeMinToleranceIso()"
  },
  {
    "label": "FNURBSSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNURBSSurface(const double InToleranceGeometric, FNurbsSurfaceData NurbsData) : FSurface(InToleranceGeometric) , PoleUCount(NurbsData.PoleUCount) , PoleVCount(NurbsData.PoleVCount) , UDegree(NurbsData.UDegree) , VDegree(NurbsData.VDegree) , UNodalVector(NurbsData.UNodalVector) , VNodalVector(NurbsData.VNodalVector) , Weights(NurbsData.Weights) , Poles(NurbsData.Poles) , bIsRational(true)"
  },
  {
    "label": "FNURBSSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNURBSSurface(const double InToleranceGeometric, FNurbsSurfaceHomogeneousData NurbsData) : FSurface(InToleranceGeometric)"
  },
  {
    "label": "FillNurbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNurbs(NurbsData)"
  },
  {
    "label": "FNURBSSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNURBSSurface()"
  },
  {
    "label": "ValidateUVPoints()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ValidateUVPoints(TArray<FPoint2D>& UVPoints)"
  },
  {
    "label": "GetIsoTolerance()",
    "kind": "Method",
    "detail": "Function (const double ToleranceU =)",
    "insertText": "GetIsoTolerance(EIso::IsoU)"
  },
  {
    "label": "GetIsoTolerance()",
    "kind": "Method",
    "detail": "Function (const double ToleranceV =)",
    "insertText": "GetIsoTolerance(EIso::IsoV)"
  },
  {
    "label": "ValidateValue()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "ValidateValue(double& Value, const double& Reference, const double& Tolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Value = Reference ; return true ; } return false ; } ;)",
    "insertText": "for(FPoint2D& UVPoint : UVPoints)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "for(const double& NodalValue : VNodalVector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (break ; } } } } void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<PoleUCount ; Ar<<PoleVCount ; Ar<<UDegree ; Ar<<VDegree ; Ar .)",
    "insertText": "Serialize(UNodalVector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(VNodalVector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Weights)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Poles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<bIsRational ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (} } ESurface)",
    "insertText": "GetSurfaceType()"
  },
  {
    "label": "GetDegree()",
    "kind": "Method",
    "detail": "Function (# endif const int32)",
    "insertText": "GetDegree(EIso Iso)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FPoint2D& InSurfacicCoordinate, FSurfacicPoint& OutPoint3D, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(*this, InSurfacicCoordinate, OutPoint3D, InDerivativeOrder)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluatePointGrid(const FCoordinateGrid& InSurfacicCoordinates, FSurfacicSampling& OutPoints, bool bComputeNormals)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePointGrid(*this, InSurfacicCoordinates, OutPoints, bComputeNormals)"
  },
  {
    "label": "LinesNotDerivables()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LinesNotDerivables(const FSurfacicBoundary& InBoundary, int32 InDerivativeOrder, FCoordinateGrid& OutNotDerivableCoordinates)"
  },
  {
    "label": "FindNotDerivableParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNotDerivableParameters(*this, InDerivativeOrder, InBoundary, OutNotDerivableCoordinates)"
  },
  {
    "label": "FillNurbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNurbs(FNurbsSurfaceHomogeneousData& NurbsData)"
  }
]