[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FTrackEditorThumbnailPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackEditorThumbnailPool"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "UMovieSceneCameraCutTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCameraCutTrack"
  },
  {
    "label": "FCameraCutTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraCutTrackEditor"
  },
  {
    "label": "FTrackEditorBindingIDPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackEditorBindingIDPicker"
  },
  {
    "label": "FMovieSceneObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectBindingID"
  },
  {
    "label": "FCameraCutSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraCutSection"
  },
  {
    "label": "FCameraCutTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" Widgets / SWidget . h \" # include \" ISequencer . h \" # include \" MovieSceneTrack . h \" # include \" ISequencerSection . h \" # include \" ISequencerTrackEditor . h \" # include \" MovieSceneTrackEditor . h \" # include \" MovieSceneToolHelpers . h \" class AActor ; class FMenuBuilder ; class FTrackEditorThumbnailPool ; class UFactory ; class UMovieSceneCameraCutTrack ; class FCameraCutTrackEditor ; class FTrackEditorBindingIDPicker ; struct FMovieSceneObjectBindingID ; class FCameraCutSection ; class FCameraCutTrackEditor : public FMovieSceneTrackEditor { public :)",
    "insertText": "FCameraCutTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "FCameraCutTrackEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCameraCutTrackEditor()"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> OwningSequencer)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BindCommands(TSharedRef<FUICommandList> SequencerCommandBindings)"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildTrackContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackContextMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "BuildOutlinerColumnWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerColumnWidget(const FBuildColumnWidgetParams& Params, const FName& ColumnName)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> Type)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "OnAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAllowDrop(const FDragDropEvent& DragDropEvent, FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FDragDropEvent& DragDropEvent, const FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "AddKeyInternal()",
    "kind": "Method",
    "detail": "Function (protected : FKeyPropertyResult)",
    "insertText": "AddKeyInternal(FFrameNumber AutoKeyTime, const FGuid ObjectGuid)"
  },
  {
    "label": "FindOrCreateCameraCutTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneCameraCutTrack*)",
    "insertText": "FindOrCreateCameraCutTrack()"
  },
  {
    "label": "GetAssetFactoryForNewCameraCut()",
    "kind": "Method",
    "detail": "Function (UFactory*)",
    "insertText": "GetAssetFactoryForNewCameraCut(UClass* SequenceClass)"
  },
  {
    "label": "HandleAddCameraCutTrackMenuEntryCanExecute()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HandleAddCameraCutTrackMenuEntryCanExecute()"
  },
  {
    "label": "HandleAddCameraCutTrackMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddCameraCutTrackMenuEntryExecute()"
  },
  {
    "label": "HandleAddCameraCutComboButtonGetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HandleAddCameraCutComboButtonGetMenuContent()"
  },
  {
    "label": "IsCameraPickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCameraPickable(const AActor* const PickableActor)"
  },
  {
    "label": "HandleAddCameraCutComboButtonMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddCameraCutComboButtonMenuEntryExecute(AActor* Camera)"
  },
  {
    "label": "CreateNewSectionFromBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewSectionFromBinding(FMovieSceneObjectBindingID InBindingID)"
  },
  {
    "label": "HandleToggleCanBlendExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleCanBlendExecute(UMovieSceneCameraCutTrack* CameraCutTrack)"
  },
  {
    "label": "HandleToggleAutoArrangeSectionsExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleAutoArrangeSectionsExecute(UMovieSceneCameraCutTrack* CameraCutTrack)"
  },
  {
    "label": "IsCameraLocked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsCameraLocked()"
  },
  {
    "label": "OnLockCameraClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLockCameraClicked(ECheckBoxState CheckBoxState)"
  },
  {
    "label": "ToggleLockCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleLockCamera()"
  },
  {
    "label": "GetLockCameraToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLockCameraToolTip()"
  }
]