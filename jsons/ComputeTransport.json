[
  {
    "label": "FComputeTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeTransport"
  },
  {
    "label": "FBufferTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferTransport"
  },
  {
    "label": "FComputeTransport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ComputeBuffer . h \" class FComputeTransport { public : ~)",
    "insertText": "FComputeTransport()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Send(const void* Data, size_t Size)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Recv(void* Data, size_t Size)"
  },
  {
    "label": "MarkComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkComplete()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessage(const void* Data, size_t Size)"
  },
  {
    "label": "RecvMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecvMessage(void* Data, size_t Size)"
  },
  {
    "label": "FBufferTransport()",
    "kind": "Method",
    "detail": "Function (} ; class FBufferTransport final : public FComputeTransport { public :)",
    "insertText": "FBufferTransport(FComputeBufferWriter InSendBufferWriter, FComputeBufferReader InRecvBufferReader)"
  }
]