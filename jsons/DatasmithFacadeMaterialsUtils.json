[
  {
    "label": "IDatasmithExpressionInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithExpressionInput"
  },
  {
    "label": "IDatasmithUEPbrMaterialElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithUEPbrMaterialElement"
  },
  {
    "label": "IDatasmithMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithMaterialExpression"
  },
  {
    "label": "IDatasmithExpressionParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithExpressionParameter"
  },
  {
    "label": "FDatasmithFacadeMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithFacadeMaterialExpression"
  },
  {
    "label": "DATASMITHFACADE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHFACADE_API"
  },
  {
    "label": "FUVEditParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUVEditParameters"
  },
  {
    "label": "FWeightedMaterialExpressionParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedMaterialExpressionParameters"
  },
  {
    "label": "FDatasmithFacadeMaterialsUtils()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DatasmithFacadeTexture . h \" # include \" DatasmithFacadeUEPbrMaterial . h \" # include \" CoreMinimal . h \" # include \" DatasmithMaterialsUtils . h \" class IDatasmithExpressionInput ; class IDatasmithUEPbrMaterialElement ; class IDatasmithMaterialExpression ; class IDatasmithExpressionParameter ; class FDatasmithFacadeMaterialExpression ; class FDatasmithFacadeMaterialsUtils { public :)",
    "insertText": "FDatasmithFacadeMaterialsUtils()"
  },
  {
    "label": "SetUVOffset()",
    "kind": "Method",
    "detail": "Function (struct FUVEditParameters { void)",
    "insertText": "SetUVOffset(float X, float Y)"
  },
  {
    "label": "GetUVOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUVOffset(float& OutX, float& OutY)"
  },
  {
    "label": "SetUVTiling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUVTiling(float X, float Y)"
  },
  {
    "label": "GetUVTiling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUVTiling(float& OutX, float& OutY)"
  },
  {
    "label": "SetRotationPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationPivot(float X, float Y, float Z)"
  },
  {
    "label": "GetRotationPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRotationPivot(float& OutX, float& OutY, float& OutZ)"
  },
  {
    "label": "SetRotationAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationAngle(float Angle)"
  },
  {
    "label": "GetRotationAngle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRotationAngle()"
  },
  {
    "label": "SetChannelIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelIndex(uint8 ChannelIndex)"
  },
  {
    "label": "GetChannelIndex()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetChannelIndex()"
  },
  {
    "label": "SetIsUsingRealWorldScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsUsingRealWorldScale(bool bIsUsingRealWorldScale)"
  },
  {
    "label": "GetIsUsingRealWorldScale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsUsingRealWorldScale()"
  },
  {
    "label": "SetMirrorU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMirrorU(bool bMirrorU)"
  },
  {
    "label": "GetMirrorU()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMirrorU()"
  },
  {
    "label": "SetMirrorV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMirrorV(bool bMirrorV)"
  },
  {
    "label": "GetMirrorV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMirrorV()"
  },
  {
    "label": "CreateNewFacadeTextureExpression()",
    "kind": "Method",
    "detail": "Function (# ifdef SWIG_FACADE protected : # endif DatasmithMaterialsUtils::FUVEditParameters UVEditParameters ; } ; FDatasmithFacadeMaterialExpressionTexture*)",
    "insertText": "CreateNewFacadeTextureExpression(FDatasmithFacadeUEPbrMaterial& MaterialElement, const TCHAR* ParameterName, const TCHAR* TextureMapPath, const FUVEditParameters& UVParameters)"
  },
  {
    "label": "FWeightedMaterialExpressionParameters()",
    "kind": "Method",
    "detail": "Function (struct FWeightedMaterialExpressionParameters { public :)",
    "insertText": "FWeightedMaterialExpressionParameters(float InWeight ) : Weight( InWeight ) , TextureMode( FDatasmithFacadeTexture::ETextureMode::Diffuse ) , Expression( nullptr, TSharedPtr<IDatasmithUEPbrMaterialElement>())"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColor(float R, float G, float B, float A)"
  },
  {
    "label": "SetColorsRGB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorsRGB(uint8 R, uint8 G, uint8 B, uint8 A)"
  },
  {
    "label": "SetScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalar(float Value)"
  },
  {
    "label": "SetTextureMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureMode(FDatasmithFacadeTexture::ETextureMode InTextureMode)"
  },
  {
    "label": "SetExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpression(const FDatasmithFacadeMaterialExpression& InExpression)"
  },
  {
    "label": "CreateNewFacadeWeightedMaterialExpression()",
    "kind": "Method",
    "detail": "Function (# ifdef SWIG_FACADE protected : # endif TOptional<FLinearColor> Color ; TOptional<float> Scalar ; float Weight ; FDatasmithFacadeTexture::ETextureMode TextureMode ; FDatasmithFacadeMaterialExpression Expression ; } ; FDatasmithFacadeMaterialExpression*)",
    "insertText": "CreateNewFacadeWeightedMaterialExpression(FDatasmithFacadeUEPbrMaterial& MaterialElement, const TCHAR* ParameterName, FWeightedMaterialExpressionParameters& WeightedExpressionParameter)"
  },
  {
    "label": "CreateSimpleTextureElement()",
    "kind": "Method",
    "detail": "Function (FDatasmithFacadeTexture*)",
    "insertText": "CreateSimpleTextureElement(const TCHAR* InTextureFilePath, FDatasmithFacadeTexture::ETextureMode InTextureMode = FDatasmithFacadeTexture::ETextureMode::Diffuse)"
  }
]