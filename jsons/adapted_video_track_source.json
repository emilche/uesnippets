[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "AdaptedVideoTrackSource()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_BASE_ADAPTED_VIDEO_TRACK_SOURCE_H_ # define MEDIA_BASE_ADAPTED_VIDEO_TRACK_SOURCE_H_ # include<stdint . h> # include \" absl / types / optional . h \" # include \" api / media_stream_interface . h \" # include \" api / notifier . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_source_interface . h \" # include \" media / base / video_adapter . h \" # include \" media / base / video_broadcaster . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { class RTC_EXPORT AdaptedVideoTrackSource : public webrtc::Notifier<webrtc::VideoTrackSourceInterface> { public :)",
    "insertText": "AdaptedVideoTrackSource()"
  },
  {
    "label": "AdaptedVideoTrackSource()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "AdaptedVideoTrackSource(int required_alignment)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(const webrtc::VideoFrame& frame)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped()"
  },
  {
    "label": "AdaptFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdaptFrame(int width, int height, int64_t time_us, int* out_width, int* out_height, int* crop_width, int* crop_height, int* crop_x, int* crop_y)"
  },
  {
    "label": "apply_rotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "apply_rotation()"
  },
  {
    "label": "video_adapter()",
    "kind": "Method",
    "detail": "Function (cricket::VideoAdapter*)",
    "insertText": "video_adapter()"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(Stats* stats)"
  },
  {
    "label": "OnSinkWantsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSinkWantsChanged(const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "SupportsEncodedOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEncodedOutput()"
  },
  {
    "label": "AddEncodedSink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEncodedSink(rtc::VideoSinkInterface<webrtc::RecordableEncodedFrame>* sink)"
  },
  {
    "label": "RemoveEncodedSink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveEncodedSink(rtc::VideoSinkInterface<webrtc::RecordableEncodedFrame>* sink)"
  },
  {
    "label": "ProcessConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessConstraints(const webrtc::VideoTrackSourceConstraints& constraints)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (cricket::VideoAdapter video_adapter_ ; webrtc::Mutex stats_mutex_ ; absl::optional<Stats> stats_)",
    "insertText": "RTC_GUARDED_BY(stats_mutex_)"
  }
]