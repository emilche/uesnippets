[
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / ExportBegin . h \" # include \" Core / Types . h \" # include<cstdio> # include<ctime> # include<cstdarg> # include<cassert> # include<cstring> # if !)",
    "insertText": "defined(__GNUC__) && !defined(__CELLOS_LV2__) && !defined(__APPLE__) && !defined(__SNC__) && !defined(NDEV)"
  },
  {
    "label": "st_localtime()",
    "kind": "Method",
    "detail": "Function (ST_INLINE void)",
    "insertText": "st_localtime(struct tm* _tm, const time_t* time)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(_tm)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(time)"
  },
  {
    "label": "localtime_s()",
    "kind": "Method",
    "detail": "Function (# ifdef WINDOWS_SECURE_CRT)",
    "insertText": "localtime_s(_tm, time)"
  },
  {
    "label": "localtime()",
    "kind": "Method",
    "detail": "Function (# else* _tm =*)",
    "insertText": "localtime(time)"
  },
  {
    "label": "st_vsnprintf()",
    "kind": "Method",
    "detail": "Function (# endif } # ifdef WINDOWS_SECURE_CRT # define)",
    "insertText": "st_vsnprintf(pBuffer, size, format, args) vsnprintf_s((pBuffer), (size), (size) - 1, (format), (args))"
  },
  {
    "label": "st_vsnprintf()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "st_vsnprintf(pBuffer, size, format, args) vsnprintf((pBuffer), (size) - 1, (format), (args))"
  },
  {
    "label": "pBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pBuffer(size)"
  },
  {
    "label": "st_sprintf()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "st_sprintf(st_char* pBuffer, size_t siSizeOfBuffer, const st_char* szFormat, ...)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (va_list args ;)",
    "insertText": "va_start(args, szFormat)"
  },
  {
    "label": "st_vsnprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "st_vsnprintf(pBuffer, siSizeOfBuffer, szFormat, args)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(args)"
  },
  {
    "label": "st_fopen()",
    "kind": "Method",
    "detail": "Function (} st_bool)",
    "insertText": "st_fopen(FILE** pFile, const st_char* szFilename, const st_char* szMode)"
  },
  {
    "label": "bSuccess()",
    "kind": "Method",
    "detail": "Function (st_bool bSuccess = false ; # ifdef WINDOWS_SECURE_CRT)",
    "insertText": "bSuccess(fopen_s(pFile, szFilename, szMode) == 0)"
  },
  {
    "label": "fopen()",
    "kind": "Method",
    "detail": "Function (# else* pFile =)",
    "insertText": "fopen(szFilename, szMode)"
  },
  {
    "label": "bSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bSuccess(*pFile != NULL)"
  },
  {
    "label": "st_strerror()",
    "kind": "Method",
    "detail": "Function (# endif return bSuccess ; } void)",
    "insertText": "st_strerror(st_char* pBuffer, size_t siSizeOfBuffer, st_int32 nErrorNo)"
  },
  {
    "label": "WINDOWS_SECURE_CRT()",
    "kind": "Method",
    "detail": "Function (# ifdef)",
    "insertText": "WINDOWS_SECURE_CRT(void) strerror_s(pBuffer, siSizeOfBuffer, nErrorNo)"
  },
  {
    "label": "strerror()",
    "kind": "Method",
    "detail": "Function (# else const st_char* pErrorString =)",
    "insertText": "strerror(nErrorNo)"
  },
  {
    "label": "strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strncpy(pBuffer, pErrorString, st_min(strlen(pErrorString) + 1, siSizeOfBuffer))"
  }
]