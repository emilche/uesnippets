[
  {
    "label": "KeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyType"
  },
  {
    "label": "TDefaultHashTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDefaultHashTraits"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" namespace uLang { template<class KeyType> struct TDefaultHashTraits { uint32_t)",
    "insertText": "GetKeyHash(const KeyType& Key)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; uint32_t)",
    "insertText": "GetTypeHash(const void* Key)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (const uintptr_t PtrInt = reinterpret_cast<)",
    "insertText": "uintptr_t(Key)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (uint32_t Hash = static_cast<)",
    "insertText": "uint32_t(PtrInt)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (Hash ^ = Hash>> 1 6 ; Hash* = 0 x85ebca6b ; Hash ^ = Hash>> 1 3 ; Hash* = 0 xc2b2ae35 ; Hash ^ = Hash>> 1 6 ; return Hash ; } template<> struct TDefaultHashTraits<int32_t> { uint32_t)",
    "insertText": "GetKeyHash(const int32_t Key)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TDefaultHashTraits<int64_t> { uint32_t)",
    "insertText": "GetKeyHash(const int64_t Key)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (} } ; uint32_t)",
    "insertText": "HashCombineFast(uint32_t A, uint32_t B)"
  }
]