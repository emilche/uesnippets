[
  {
    "label": "PccMonitorInterval",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PccMonitorInterval"
  },
  {
    "label": "ReceivedPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceivedPacket"
  },
  {
    "label": "PccMonitorInterval()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_PCC_MONITOR_INTERVAL_H_ # define MODULES_CONGESTION_CONTROLLER_PCC_MONITOR_INTERVAL_H_ # include<vector> # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" namespace webrtc { namespace pcc { class PccMonitorInterval { public :)",
    "insertText": "PccMonitorInterval(DataRate target_sending_rate, Timestamp start_time, TimeDelta duration)"
  },
  {
    "label": "PccMonitorInterval()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PccMonitorInterval()"
  },
  {
    "label": "PccMonitorInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PccMonitorInterval(const PccMonitorInterval& other)"
  },
  {
    "label": "OnPacketsFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketsFeedback(const std::vector<PacketResult>& packets_results)"
  },
  {
    "label": "IsFeedbackCollectionDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeedbackCollectionDone()"
  },
  {
    "label": "GetEndTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "GetEndTime()"
  },
  {
    "label": "GetTargetSendingRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "GetTargetSendingRate()"
  },
  {
    "label": "GetTransmittedPacketsRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "GetTransmittedPacketsRate()"
  }
]