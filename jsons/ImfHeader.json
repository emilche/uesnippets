[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstIterator"
  },
  {
    "label": "Header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Header"
  },
  {
    "label": "Header()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_HEADER_H # define INCLUDED_IMF_HEADER_H # include \" ImfForward . h \" # include \" IexBaseExc . h \" # include \" ImathBox . h \" # include \" ImathVec . h \" # include \" ImfCompression . h \" # include \" ImfLineOrder . h \" # include \" ImfName . h \" # include \" ImfTileDescription . h \" # include \" ImfAttribute . h \" # include<cstdint> # include<iosfwd> # include<map> # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER using std::string ; class IMF_EXPORT_TYPE Header { public : IMF_EXPORT)",
    "insertText": "Header(int width = 64, int height = 64, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f& screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression = ZIP_COMPRESSION)"
  },
  {
    "label": "Header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Header(int width, int height, const IMATH_NAMESPACE::Box2i& dataWindow, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f& screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression = ZIP_COMPRESSION)"
  },
  {
    "label": "Header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Header(const IMATH_NAMESPACE::Box2i& displayWindow, const IMATH_NAMESPACE::Box2i& dataWindow, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f& screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression = ZIP_COMPRESSION)"
  },
  {
    "label": "Header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Header(const Header& other)"
  },
  {
    "label": "Header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Header(Header&& other)"
  },
  {
    "label": "Header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "Header()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Header&)",
    "insertText": "operator(const Header& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Header&)",
    "insertText": "operator(Header&& other)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "insert(const char name[], const Attribute& attribute)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "insert(const std::string& name, const Attribute& attribute)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "erase(const char name[])"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "erase(const std::string& name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Attribute&)",
    "insertText": "operator(const char name[])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Attribute&)",
    "insertText": "operator(const std::string& name)"
  },
  {
    "label": "typedAttribute()",
    "kind": "Method",
    "detail": "Function (template<class T> T&)",
    "insertText": "typedAttribute(const char name[])"
  },
  {
    "label": "typedAttribute()",
    "kind": "Method",
    "detail": "Function (template<class T> T&)",
    "insertText": "typedAttribute(const std::string& name)"
  },
  {
    "label": "findTypedAttribute()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "findTypedAttribute(const char name[])"
  },
  {
    "label": "findTypedAttribute()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "findTypedAttribute(const std::string& name)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef std::map<Name,Attribute*> AttributeMap ; class Iterator ; class ConstIterator ; IMF_EXPORT Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "find(const char name[])"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "find(const std::string& name)"
  },
  {
    "label": "displayWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i&)",
    "insertText": "displayWindow()"
  },
  {
    "label": "dataWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i&)",
    "insertText": "dataWindow()"
  },
  {
    "label": "pixelAspectRatio()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float&)",
    "insertText": "pixelAspectRatio()"
  },
  {
    "label": "screenWindowCenter()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::V2f&)",
    "insertText": "screenWindowCenter()"
  },
  {
    "label": "screenWindowWidth()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float&)",
    "insertText": "screenWindowWidth()"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ChannelList&)",
    "insertText": "channels()"
  },
  {
    "label": "lineOrder()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LineOrder&)",
    "insertText": "lineOrder()"
  },
  {
    "label": "compression()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Compression&)",
    "insertText": "compression()"
  },
  {
    "label": "resetDefaultCompressionLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "resetDefaultCompressionLevels()"
  },
  {
    "label": "zipCompressionLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int&)",
    "insertText": "zipCompressionLevel()"
  },
  {
    "label": "dwaCompressionLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float&)",
    "insertText": "dwaCompressionLevel()"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setName(const string& name)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT string&)",
    "insertText": "name()"
  },
  {
    "label": "hasName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "hasName()"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setType(const string& Type)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT string&)",
    "insertText": "type()"
  },
  {
    "label": "hasType()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "hasType()"
  },
  {
    "label": "setVersion()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setVersion(const int version)"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int&)",
    "insertText": "version()"
  },
  {
    "label": "hasVersion()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "hasVersion()"
  },
  {
    "label": "setChunkCount()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setChunkCount(int chunks)"
  },
  {
    "label": "hasChunkCount()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "hasChunkCount()"
  },
  {
    "label": "chunkCount()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const int&)",
    "insertText": "chunkCount()"
  },
  {
    "label": "setView()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setView(const string& view)"
  },
  {
    "label": "hasView()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "hasView()"
  },
  {
    "label": "view()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT string&)",
    "insertText": "view()"
  },
  {
    "label": "setTileDescription()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setTileDescription(const TileDescription& td)"
  },
  {
    "label": "tileDescription()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT TileDescription&)",
    "insertText": "tileDescription()"
  },
  {
    "label": "hasTileDescription()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "hasTileDescription()"
  },
  {
    "label": "setPreviewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setPreviewImage(const PreviewImage& p)"
  },
  {
    "label": "previewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT PreviewImage&)",
    "insertText": "previewImage()"
  },
  {
    "label": "hasPreviewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "hasPreviewImage()"
  },
  {
    "label": "sanityCheck()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "sanityCheck(bool isTiled = false, bool isMultipartFile = false)"
  },
  {
    "label": "setMaxImageSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setMaxImageSize(int maxWidth, int maxHeight)"
  },
  {
    "label": "setMaxTileSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setMaxTileSize(int maxWidth, int maxHeight)"
  },
  {
    "label": "getMaxImageSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "getMaxImageSize(int& maxWidth, int& maxHeight)"
  },
  {
    "label": "getMaxTileSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "getMaxTileSize(int& maxWidth, int& maxHeight)"
  },
  {
    "label": "readsNothing()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "readsNothing()"
  },
  {
    "label": "writeTo()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT uint64_t)",
    "insertText": "writeTo(OPENEXR_IMF_INTERNAL_NAMESPACE::OStream& os, bool isTiled = false)"
  },
  {
    "label": "readFrom()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readFrom(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int& version)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (private : AttributeMap _map ; bool _readsNothing ; } ; class IMF_EXPORT_TYPE Header::Iterator { public : IMF_EXPORT)",
    "insertText": "Iterator()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Iterator(const Header::AttributeMap::iterator& i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "attribute()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Attribute&)",
    "insertText": "attribute()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (private : class Header::ConstIterator ; Header::AttributeMap::iterator _i ; } ; class IMF_EXPORT_TYPE Header::ConstIterator { public : IMF_EXPORT)",
    "insertText": "ConstIterator()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const Header::AttributeMap::const_iterator& i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const Header::Iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "operator(const ConstIterator&, const ConstIterator&)"
  },
  {
    "label": "staticInitialize()",
    "kind": "Method",
    "detail": "Function (Header::AttributeMap::const_iterator _i ; } ; IMF_EXPORT void)",
    "insertText": "staticInitialize()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (Header::)",
    "insertText": "Iterator() : _i ()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} Header::)",
    "insertText": "Iterator(const Header::AttributeMap::iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} Header::)",
    "insertText": "ConstIterator(const Header::AttributeMap::const_iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} Header::)",
    "insertText": "ConstIterator(const Header::Iterator& other) : _i (other._i)"
  },
  {
    "label": "attr()",
    "kind": "Method",
    "detail": "Function (Attribute*)",
    "insertText": "attr(*this)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* tattr = dynamic_cast<)",
    "insertText": "T(attr)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (AttributeMap::iterator i = _map .)",
    "insertText": "find(name)"
  }
]