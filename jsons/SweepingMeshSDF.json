[
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "TSweepingMeshSDF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSweepingMeshSDF"
  },
  {
    "label": "EComputeModes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EComputeModes"
  },
  {
    "label": "EInsideModes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInsideModes"
  },
  {
    "label": "UnitCellSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" MeshQueries . h \" # include \" Util / IndexUtil . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" Spatial / DenseGrid3 . h \" # include \" Async / ParallelFor . h \" # include \" Misc / ScopeLock . h \" # include \" Implicit / GridInterpolant . h \" # include \" Math / NumericLimits . h \" namespace UE { namespace Geometry { template<class TriangleMeshType,bool bScalarCellSize = true> class TSweepingMeshSDF { public : using CellSizeType = std::conditional_t<bScalarCellSize,float,FVector3f> ; using CellSizeTyped = std::conditional_t<bScalarCellSize,double,FVector3d> ; CellSizeType)",
    "insertText": "UnitCellSize()"
  },
  {
    "label": "SetCellSize()",
    "kind": "Method",
    "detail": "Function (} ; const TriangleMeshType* Mesh ; TMeshAABBTree3<TriangleMeshType>* Spatial ; CellSizeType CellSize ; void)",
    "insertText": "SetCellSize(float InCellSize)"
  },
  {
    "label": "CellSizeType()",
    "kind": "Method",
    "detail": "Function (CellSize =)",
    "insertText": "CellSizeType(InCellSize)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} int ExactBandWidth = 1 ; FVector3d ExpandBounds =)",
    "insertText": "Zero()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (bool bUseParallel = true ; int ApproxMaxCellsPerDimension = 4 0 9 6 ; enum EComputeModes { FullGrid = 0,NarrowBandOnly = 1,NarrowBand_SpatialFloodFill = 2 } ; EComputeModes ComputeMode = EComputeModes::NarrowBandOnly ; double NarrowBandMaxDistance = 0 ; bool bComputeSigns = true ; enum EInsideModes { CrossingCount = 0,WindingCount = 1 } ; EInsideModes InsideMode = EInsideModes::WindingCount ; bool bWantClosestTriGrid = false ; bool bWantIntersectionsGrid = false ; TFunction<)",
    "insertText": "bool()> CancelF = []()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Grid .)",
    "insertText": "Resize(0, 0, 0, EAllowShrinking::Yes)"
  },
  {
    "label": "MakeInterpolant()",
    "kind": "Method",
    "detail": "Function (} template<InterpolantRealType = double> TTriLinearGridInterpolant<FDenseGrid3f,InterpolantRealType,bScalarCellSize>)",
    "insertText": "MakeInterpolant()"
  },
  {
    "label": "bScalarCellSize()",
    "kind": "Method",
    "detail": "Function (using InterpVecType = TVector<InterpolantRealType> ; return TTriLinearGridInterpolant<FDenseGrid3f,InterpolantRealType,)",
    "insertText": "bScalarCellSize(&Grid, (InterpVecType)GridOrigin, (InterpVecType)CellSize, Dimensions())"
  },
  {
    "label": "ShouldUseSpatial()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUseSpatial(int ExactCells, double CellSize, double AvgEdgeLen)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ExactBandWidth =)",
    "insertText": "Max(ApproxMaxCellsPerDimension/2-1, 1)"
  },
  {
    "label": "ExpandedDiagonal()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "ExpandedDiagonal(Bounds.Diagonal() + ExpandBounds * 2.0)"
  },
  {
    "label": "ApproxVoxelsPerDim()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "ApproxVoxelsPerDim(FVector3d)(ExpandedDiagonal / CellSize)"
  },
  {
    "label": "Max3Index()",
    "kind": "Method",
    "detail": "Function (int32 MaxVoxelsDim =)",
    "insertText": "Max3Index(ApproxVoxelsPerDim)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float CellSizeFactor =)",
    "insertText": "float(ExpandedDiagonal[MaxVoxelsDim] / (ApproxMaxCellsPerDimension - 2 * ExactBandWidth)) / GetDim(CellSize, MaxVoxelsDim)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CellSize* = CellSizeFactor ;)",
    "insertText": "if(!ensure(IsValid(CellSize)))"
  },
  {
    "label": "fBufferWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fBufferWidth(float)FMath::Max(fBufferWidth, float(NarrowBandMaxDistance))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 Idx = 0; Idx < 3; ++Idx)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (fBufferWidth =)",
    "insertText": "Max(fBufferWidth, float(NarrowBandMaxDistance))"
  },
  {
    "label": "UseOrigin()",
    "kind": "Method",
    "detail": "Function (} } } FVector3f)",
    "insertText": "UseOrigin(FVector3f)Bounds.Min - fBufferWidth * FVector3f::One() - (FVector3f)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "max(FVector3f)Bounds.Max + fBufferWidth * FVector3f::One() + (FVector3f)"
  },
  {
    "label": "UseDims()",
    "kind": "Method",
    "detail": "Function (FVector3i)",
    "insertText": "UseDims((int)((max.X - UseOrigin.X) / GetDim(CellSize, 0)) + 1, (int)((max.Y - UseOrigin.Y) / GetDim(CellSize, 1)) + 1, (int)((max.Z - UseOrigin.Z) / GetDim(CellSize, 2)) + 1)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Compute(FVector3f InGridOrigin, FVector3i InDimensions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GridOrigin = InGridOrigin ; int NI = InDimensions . X ; int NJ = InDimensions . Y ; int NK = InDimensions . Z ;)",
    "insertText": "if(NI < 0 || NJ < 0 || NK < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(bUseParallel)"
  },
  {
    "label": "make_level_set3_parallel_spatial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_level_set3_parallel_spatial(GridOrigin, CellSize, NI, NJ, NK, Grid, ExactBandWidth)"
  },
  {
    "label": "make_level_set3_parallel()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "make_level_set3_parallel(GridOrigin, CellSize, NI, NJ, NK, Grid, ExactBandWidth)"
  },
  {
    "label": "make_level_set3()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "make_level_set3(GridOrigin, CellSize, NI, NJ, NK, Grid, ExactBandWidth)"
  },
  {
    "label": "CleanupUnwanted()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CleanupUnwanted()"
  },
  {
    "label": "Dimensions()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "Dimensions()"
  },
  {
    "label": "GetClosestTriGrid()",
    "kind": "Method",
    "detail": "Function (} const FDenseGrid3i&)",
    "insertText": "GetClosestTriGrid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "operator(const FVector3i& Idx)"
  },
  {
    "label": "CellCenter()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "CellCenter(int I, int J, int K)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetValue(FVector3i Idx)"
  },
  {
    "label": "cell_center()",
    "kind": "Method",
    "detail": "Function (} private : FVector3f)",
    "insertText": "cell_center(FVector3i IJK)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "upper_bound(const FDenseGrid3f& GridIn)"
  },
  {
    "label": "cell_tri_dist()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "cell_tri_dist(const FVector3i& Idx, int TID)"
  },
  {
    "label": "cell_center()",
    "kind": "Method",
    "detail": "Function (FVector3d xp,xq,xr ; FVector3d c =)",
    "insertText": "cell_center(Idx)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (Mesh ->)",
    "insertText": "GetTriVertices(TID, xp, xq, xr)"
  },
  {
    "label": "make_level_set3()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "make_level_set3(FVector3f Origin, CellSizeType DX, int NI, int NJ, int NK, FDenseGrid3f& Distances, int ExactBand)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "Resize(NI, NJ, NK)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "Assign(upper_bound(Distances))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (ClosestTriGrid .)",
    "insertText": "Assign(-1)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (IntersectionsGrid .)",
    "insertText": "Assign(0)"
  },
  {
    "label": "ddx()",
    "kind": "Method",
    "detail": "Function (CellSizeTyped)",
    "insertText": "ddx(CellSizeTyped)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FVector3d xp,xq,xr ;)",
    "insertText": "for(int TID = 0; TID < Mesh->MaxTriangleID(); TID++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(TID % 100 == 0 && CancelF())"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int i0 =)",
    "insertText": "Clamp(((int)FMath::Min3(fip, fiq, fir)) - ExactBand, 0, NI - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int i1 =)",
    "insertText": "Clamp(((int)FMath::Max3(fip, fiq, fir)) + ExactBand + 1, 0, NI - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int j0 =)",
    "insertText": "Clamp(((int)FMath::Min3(fjp, fjq, fjr)) - ExactBand, 0, NJ - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int j1 =)",
    "insertText": "Clamp(((int)FMath::Max3(fjp, fjq, fjr)) + ExactBand + 1, 0, NJ - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int k0 =)",
    "insertText": "Clamp(((int)FMath::Min3(fkp, fkq, fkr)) - ExactBand, 0, NK - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int k1 =)",
    "insertText": "Clamp(((int)FMath::Max3(fkp, fkq, fkr)) + ExactBand + 1, 0, NK - 1)"
  },
  {
    "label": "gx()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "gx((float)I * GetDim(DX, 0) + Origin[0], (float)J * GetDim(DX, 1) + Origin[1], (float)K * GetDim(DX, 2) + Origin[2])"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "d(float)PointTriangleDistance(gx, xp, xq, xr)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "At(I, J, K)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "if(CancelF())"
  },
  {
    "label": "compute_intersections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_intersections(Origin, DX, NI, NJ, NK, intersection_count)"
  },
  {
    "label": "sweep_pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep_pass(Origin, DX, Distances, closest_tri)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (intersection_count .)",
    "insertText": "Resize(0,0,0,EAllowShrinking::Yes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!bWantClosestTriGrid)"
  },
  {
    "label": "make_level_set3_parallel()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "make_level_set3_parallel(FVector3f Origin, CellSizeType DX, int NI, int NJ, int NK, FDenseGrid3f& Distances, int ExactBand)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "Assign(upper_bound(Grid))"
  },
  {
    "label": "CellSizeTyped()",
    "kind": "Method",
    "detail": "Function (CellSizeTyped invdx =)",
    "insertText": "CellSizeTyped(UnitCellSize()) / (CellSizeTyped)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (int wi = NI / 2,wj = NJ / 2,wk = NK / 2 ; FCriticalSection GridSections [ 8 ] ; bool bAbort = false ;)",
    "insertText": "ParallelFor(Mesh->MaxTriangleID(), [this, &Origin, DX, NI, NJ, NK, &Distances, ExactBand, &closest_tri, &intersection_count, ox, oy, oz, invdx, wi, wj, wk, &GridSections, &bAbort](int TID) { if (!Mesh->IsTriangle(TID)) { return; } if (TID % 100 == 0) { bAbort = CancelF(); } if (bAbort) { return; } FVector3d xp = FVector3d::Zero(), xq = FVector3d::Zero(), xr = FVector3d::Zero(); Mesh->GetTriVertices(TID, xp, xq, xr); double fip = (xp[0] - ox) * GetDim(invdx, 0), fjp = (xp[1] - oy) * GetDim(invdx, 1), fkp = (xp[2] - oz) * GetDim(invdx, 2); double fiq = (xq[0] - ox) * GetDim(invdx, 0), fjq = (xq[1] - oy) * GetDim(invdx, 1), fkq = (xq[2] - oz) * GetDim(invdx, 2); double fir = (xr[0] - ox) * GetDim(invdx, 0), fjr = (xr[1] - oy) * GetDim(invdx, 1), fkr = (xr[2] - oz) * GetDim(invdx, 2); int i0 = FMath::Clamp(((int)FMath::Min3(fip, fiq, fir)) - ExactBand, 0, NI - 1); int i1 = FMath::Clamp(((int)FMath::Max3(fip, fiq, fir)) + ExactBand + 1, 0, NI - 1); int j0 = FMath::Clamp(((int)FMath::Min3(fjp, fjq, fjr)) - ExactBand, 0, NJ - 1); int j1 = FMath::Clamp(((int)FMath::Max3(fjp, fjq, fjr)) + ExactBand + 1, 0, NJ - 1); int k0 = FMath::Clamp(((int)FMath::Min3(fkp, fkq, fkr)) - ExactBand, 0, NK - 1); int k1 = FMath::Clamp(((int)FMath::Max3(fkp, fkq, fkr)) + ExactBand + 1, 0, NK - 1); for (int K = k0; K <= k1; ++K) { for (int J = j0; J <= j1; ++J) { int base_idx = ((J < wj) ? 0 : 1) | ((K < wk) ? 0 : 2); for (int I = i0; I <= i1; ++I) { FVector3d gx((float)I * GetDim(DX, 0) + Origin[0], (float)J * GetDim(DX, 1) + Origin[1], (float)K * GetDim(DX, 2) + Origin[2]); float d = (float)PointTriangleDistance(gx, xp, xq, xr); if (d < Distances.At(I, J, K)) { int lock_idx = base_idx | ((I < wi) ? 0 : 4); FScopeLock GridLock(&GridSections[lock_idx]); if (d < Distances.At(I, J, K)) { Distances.At(I, J, K) = d; closest_tri.At(I, J, K) = TID; } } } } } })"
  },
  {
    "label": "compute_signs()",
    "kind": "Method",
    "detail": "Function (} } else { })",
    "insertText": "compute_signs(NI, NJ, NK, Distances, intersection_count)"
  },
  {
    "label": "make_level_set3_parallel_spatial()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "make_level_set3_parallel_spatial(FVector3f Origin, CellSizeType DX, int NI, int NJ, int NK, FDenseGrid3f& Distances, int ExactBand)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (float upper_bound = this ->)",
    "insertText": "upper_bound(Distances)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "Assign(upper_bound)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (bool bAbort = false ;)",
    "insertText": "ParallelFor(Mesh->MaxTriangleID(), [this, &Origin, DX, NI, NJ, NK, &Distances, ExactBand, upper_bound, &closest_tri, &intersection_count, ox, oy, oz, invdx, &bAbort](int TID) { if (!Mesh->IsTriangle(TID)) { return; } if (TID % 100 == 0) { bAbort = CancelF(); } if (bAbort) { return; } FVector3d xp = FVector3d::Zero(), xq = FVector3d::Zero(), xr = FVector3d::Zero(); Mesh->GetTriVertices(TID, xp, xq, xr); double fip = (xp[0] - ox) * GetDim(invdx, 0), fjp = (xp[1] - oy) * GetDim(invdx, 1), fkp = (xp[2] - oz) * GetDim(invdx, 2); double fiq = (xq[0] - ox) * GetDim(invdx, 0), fjq = (xq[1] - oy) * GetDim(invdx, 1), fkq = (xq[2] - oz) * GetDim(invdx, 2); double fir = (xr[0] - ox) * GetDim(invdx, 0), fjr = (xr[1] - oy) * GetDim(invdx, 1), fkr = (xr[2] - oz) * GetDim(invdx, 2); int i0 = FMath::Clamp(((int)FMath::Min3(fip, fiq, fir)) - ExactBand, 0, NI - 1); int i1 = FMath::Clamp(((int)FMath::Max3(fip, fiq, fir)) + ExactBand + 1, 0, NI - 1); int j0 = FMath::Clamp(((int)FMath::Min3(fjp, fjq, fjr)) - ExactBand, 0, NJ - 1); int j1 = FMath::Clamp(((int)FMath::Max3(fjp, fjq, fjr)) + ExactBand + 1, 0, NJ - 1); int k0 = FMath::Clamp(((int)FMath::Min3(fkp, fkq, fkr)) - ExactBand, 0, NK - 1); int k1 = FMath::Clamp(((int)FMath::Max3(fkp, fkq, fkr)) + ExactBand + 1, 0, NK - 1); for (int K = k0; K <= k1; ++K) { for (int J = j0; J <= j1; ++J) { for (int I = i0; I <= i1; ++I) { Distances.At(I, J, K) = 1; } } } })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Grid.Size(), [this, &Origin, DX, NI, NJ, NK, &Distances, max_dist, upper_bound, &closest_tri](int LinearIdx) { FVector3i Idx = Grid.ToIndex(LinearIdx); if (Distances[Idx] == 1) { int I = Idx.X, J = Idx.Y, K = Idx.Z; FVector3d p((float)I * GetDim(DX, 0) + Origin[0], (float)J * GetDim(DX, 1) + Origin[1], (float)K * GetDim(DX, 2) + Origin[2]); double dsqr; int near_tid = Spatial->FindNearestTriangle(p, dsqr, max_dist); if (near_tid == IndexConstants::InvalidID) { Distances[Idx] = upper_bound; return; } Distances[Idx] = (float)FMath::Sqrt(dsqr); closest_tri[Idx] = near_tid; } })"
  },
  {
    "label": "make_level_set3_parallel_floodfill()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "make_level_set3_parallel_floodfill(FVector3f Origin, CellSizeType DX, int NI, int NJ, int NK, FDenseGrid3f& Distances)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (int32 NumSections = 2 5 6 ; TArray<FCriticalSection> GridSections ; GridSections .)",
    "insertText": "SetNum(NumSections)"
  },
  {
    "label": "CeilToInt()",
    "kind": "Method",
    "detail": "Function (int64 TotalGridCellCount = NI* NJ* NK ; int64 SectionSize =)",
    "insertText": "CeilToInt(float(TotalGridCellCount) / (float)NumSections)"
  },
  {
    "label": "GridSections()",
    "kind": "Method",
    "detail": "Function (FCriticalSection*)",
    "insertText": "GridSections(FVector3i CellGridIndex)"
  },
  {
    "label": "ToLinear()",
    "kind": "Method",
    "detail": "Function (int64 CellLinearIndex = Distances .)",
    "insertText": "ToLinear(CellGridIndex)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (int64 SectionIndex = CellLinearIndex / SectionSize ;)",
    "insertText": "checkSlow(SectionIndex <= MAX_int32)"
  },
  {
    "label": "SectionQueues()",
    "kind": "Method",
    "detail": "Function (auto AddToSectionQueue = [ SectionSize,&)",
    "insertText": "SectionQueues(int64 CellLinearIndex)"
  },
  {
    "label": "SectionQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SectionQueues(int32)SectionIndex].Add((int32)CellLinearIndex)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} ; TArray<int> PendingCellQueue ; TArray<bool> done ; done .)",
    "insertText": "SetNumZeroed(Distances.Size())"
  },
  {
    "label": "SectionQueues()",
    "kind": "Method",
    "detail": "Function (auto FlattenSectionQueues = [& PendingCellQueue,&)",
    "insertText": "SectionQueues()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PendingCellQueue .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PendingCellQueue .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} } ; bool bAbort = false ; {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(Geometry_SweepingMeshSDF_Distances)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Mesh->MaxVertexID(), [&](int vid) { if (!Mesh->IsVertex(vid)) { return; } if (vid % 100 == 0) { bAbort = CancelF(); } if (bAbort) { return; } FVector3d v = Mesh->GetVertex(vid); double fi = (v.X - ox) * GetDim(invdx, 0), fj = (v.Y - oy) * GetDim(invdx, 1), fk = (v.Z - oz) * GetDim(invdx, 2); FVector3i Idx( FMath::Clamp((int)fi, 0, NI - 1), FMath::Clamp((int)fj, 0, NJ - 1), FMath::Clamp((int)fk, 0, NK - 1)); { FScopeLock GridLock(GetGridSectionLock(Idx)); if (Distances[Idx] < upper_bound) { return; } FVector3d p = (FVector3d)cell_center(Idx); double dsqr; int near_tid = Spatial->FindNearestTriangle(p, dsqr); Distances[Idx] = (float)FMathd::Sqrt(dsqr); closest_tri[Idx] = near_tid; int idx_linear = Distances.ToLinear(Idx); if (done[idx_linear] == false) { done[idx_linear] = true; AddToSectionQueue(idx_linear); } } }, !bUseParallel)"
  },
  {
    "label": "BoundsInclusive()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3i Bounds = Distances .)",
    "insertText": "BoundsInclusive()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(Geometry_SweepingMeshSDF_FloodFill)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(PendingCellQueue.Num(), [&](int QIdx) { int cur_linear_index = PendingCellQueue[QIdx]; FVector3i cur_idx = Distances.ToIndex(cur_linear_index); for (FVector3i idx_offset : IndexUtil::GridOffsets26) { FVector3i nbr_idx = cur_idx + idx_offset; if (Bounds.Contains(nbr_idx) == false) { continue; } int nbr_linear_idx = Distances.ToLinear(nbr_idx); if (done[nbr_linear_idx]) { continue; } FVector3d p = (FVector3d)cell_center(nbr_idx); double dsqr; int near_tid = Spatial->FindNearestTriangle(p, dsqr, max_query_dist); if (near_tid == -1) { FScopeLock GridLock(GetGridSectionLock(nbr_idx)); done[nbr_linear_idx] = true; continue; } double dist = FMathd::Sqrt(dsqr); { FScopeLock GridLock(GetGridSectionLock(nbr_idx)); if (done[nbr_linear_idx] == false) { Distances[nbr_linear_idx] = (float)dist; closest_tri[nbr_linear_idx] = near_tid; done[nbr_linear_idx] = true; if (dist < max_dist) { AddToSectionQueue(nbr_linear_idx); } } } } }, !bUseParallel)"
  },
  {
    "label": "FlattenSectionQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlattenSectionQueues()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(Geometry_SweepingMeshSDF_Signs)"
  },
  {
    "label": "sweep_pass()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "sweep_pass(FVector3f Origin, CellSizeType DX, FDenseGrid3f& Distances, FDenseGrid3i& closest_tri)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, +1, +1, +1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, -1, -1, -1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, +1, +1, -1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, -1, -1, +1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, +1, -1, +1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, -1, +1, -1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, +1, -1, -1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sweep(Distances, closest_tri, Origin, DX, -1, +1, +1)"
  },
  {
    "label": "sweep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "sweep(FDenseGrid3f& phi, FDenseGrid3i& closest_tri, FVector3f Origin, CellSizeType DX, int di, int dj, int dk)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i0,i1 ;)",
    "insertText": "if(di > 0)"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (i0 = 1 ; i1 = phi .)",
    "insertText": "GetDimensions()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i1 = - 1 ; } int j0,j1 ;)",
    "insertText": "if(dj > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (j1 = - 1 ; } int k0,k1 ;)",
    "insertText": "if(dk > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (k1 = - 1 ; })",
    "insertText": "for(int K = k0; K != k1; K += dk)"
  },
  {
    "label": "gx()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "gx(float(I) * GetDim(DX, 0) + Origin[0], float(J) * GetDim(DX, 1) + Origin[1], float(K) * GetDim(DX, 2) + Origin[2])"
  },
  {
    "label": "check_neighbour()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "check_neighbour(FDenseGrid3f& phi, FDenseGrid3i& closest_tri, const FVector3d& gx, int i0, int j0, int k0, int i1, int j1, int k1)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (FVector3d xp,xq,xr ; Mesh ->)",
    "insertText": "GetTriVertices(closest_tri.At(i1, j1, k1), xp, xq, xr)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (phi .)",
    "insertText": "At(i0, j0, k0)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (closest_tri .)",
    "insertText": "At(i0, j0, k0) = closest_tri.At(i1, j1, k1)"
  },
  {
    "label": "compute_intersections()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "compute_intersections(FVector3f Origin, CellSizeType DX, int32 NI, int32 NJ, int32 NK, FDenseGrid3i& IntersectionCount)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (bool cancelled = false ;)",
    "insertText": "ParallelFor(Mesh->MaxTriangleID(), [this, &Origin, &NI, &NJ, &NK, &IntersectionCount, &ox, &oy, &oz, &invdx, &cancelled](int32 TID) { if (!Mesh->IsTriangle(TID)) { return; } if (TID % 100 == 0 && CancelF() == true) { cancelled = true; } if (cancelled) { return; } FVector3d xp = FVector3d::Zero(), xq = FVector3d::Zero(), xr = FVector3d::Zero(); Mesh->GetTriVertices(TID, xp, xq, xr); bool neg_x = false; if (InsideMode == EInsideModes::WindingCount) { FVector3d n = VectorUtil::NormalDirection(xp, xq, xr); neg_x = n.X > 0; } double fip = (xp[0] - ox) * GetDim(invdx, 0), fjp = (xp[1] - oy) * GetDim(invdx, 1), fkp = (xp[2] - oz) * GetDim(invdx, 2); double fiq = (xq[0] - ox) * GetDim(invdx, 0), fjq = (xq[1] - oy) * GetDim(invdx, 1), fkq = (xq[2] - oz) * GetDim(invdx, 2); double fir = (xr[0] - ox) * GetDim(invdx, 0), fjr = (xr[1] - oy) * GetDim(invdx, 1), fkr = (xr[2] - oz) * GetDim(invdx, 2); int32 j0 = FMath::Clamp(FMath::CeilToInt32(FMath::Min3(fjp, fjq, fjr)), 0, NJ - 1); int32 j1 = FMath::Clamp(FMath::FloorToInt32(FMath::Max3(fjp, fjq, fjr)), 0, NJ - 1); int32 k0 = FMath::Clamp(FMath::CeilToInt32(FMath::Min3(fkp, fkq, fkr)), 0, NK - 1); int32 k1 = FMath::Clamp(FMath::FloorToInt32(FMath::Max3(fkp, fkq, fkr)), 0, NK - 1); for (int K = k0; K <= k1; ++K) { for (int J = j0; J <= j1; ++J) { double A, B, C; if (PointInTriangle2d(J, K, fjp, fkp, fjq, fkq, fjr, fkr, A, B, C)) { double fi = A * fip + B * fiq + C * fir; int i_interval = FMath::CeilToInt32(fi); if (i_interval < 0) { DenseGrid::AtomicIncDec(IntersectionCount, 0, J, K, neg_x); } else if (i_interval < NI) { DenseGrid::AtomicIncDec(IntersectionCount, i_interval, J, K, neg_x); } else { } } } } }, !bUseParallel)"
  },
  {
    "label": "compute_signs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute_signs(int NI, int NJ, int NK, FDenseGrid3f& Distances, FDenseGrid3i& IntersectionCount)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NJ * NK, [this, &NI, &NJ, &NK, &Distances, &IntersectionCount](int32 vi) { if (CancelF()) { return; } int32 J = vi % NJ, K = vi / NJ; int32 total_count = 0; for (int I = 0; I < NI; ++I) { total_count += IntersectionCount.At(I, J, K); if ( (InsideMode == EInsideModes::WindingCount && total_count > 0) || (InsideMode == EInsideModes::CrossingCount && total_count % 2 == 1) ) { Distances.At(I, J, K) = -Distances.At(I, J, K); } } }, !bUseParallel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int K = 0; K < NK; ++K)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int total_count = 0 ;)",
    "insertText": "for(int I = 0; I < NI; ++I)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "At(I, J, K) = -Distances.At(I, J, K)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (} } } } } } public : int)",
    "insertText": "Orientation(double X1, double Y1, double X2, double Y2, double& TwiceSignedArea)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TwiceSignedArea = Y1* X2 - X1* Y2 ;)",
    "insertText": "if(TwiceSignedArea > 0)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (A = B = C = 0 ; X1 - = X0 ; X2 - = X0 ; X3 - = X0 ; Y1 - = Y0 ; Y2 - = Y0 ; Y3 - = Y0 ; int signa =)",
    "insertText": "Orientation(X2, Y2, X3, Y3, A)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (int signb =)",
    "insertText": "Orientation(X3, Y3, X1, Y1, B)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (int signc =)",
    "insertText": "Orientation(X1, Y1, X2, Y2, C)"
  },
  {
    "label": "PointSegmentDistance()",
    "kind": "Method",
    "detail": "Function (A / = sum ; B / = sum ; C / = sum ; return true ; } float)",
    "insertText": "PointSegmentDistance(const FVector3f& x0, const FVector3f& x1, const FVector3f& x2)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (FVector3f DX = x2 - x1 ; float m2 = DX .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "s12()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "s12(DX.Dot(x2 - x0) / m2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s12 = 0 ; } else)",
    "insertText": "if(s12 > 1)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (s12 = 1 ; } return)",
    "insertText": "Distance(x0, s12*x1 + (1.0 - s12)*x2)"
  },
  {
    "label": "PointSegmentDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "PointSegmentDistance(const FVector3d& x0, const FVector3d& x1, const FVector3d& x2)"
  },
  {
    "label": "PointTriangleDistance()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "PointTriangleDistance(const FVector3f& x0, const FVector3f& x1, const FVector3f& x2, const FVector3f& x3)"
  },
  {
    "label": "x13()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "x13(x1 - x3)"
  },
  {
    "label": "x23()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "x23(x2 - x3)"
  },
  {
    "label": "x03()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "x03(x0 - x3)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (float m13 = x13 .)",
    "insertText": "SquaredLength(), m23 = x23.SquaredLength(), d = x13.Dot(x23)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (float invdet = 1 . 0 f /)",
    "insertText": "Max(m13 * m23 - d * d, 1e-30f)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (float a = x13 .)",
    "insertText": "Dot(x03), b = x23.Dot(x03)"
  },
  {
    "label": "invdet()",
    "kind": "Method",
    "detail": "Function (float w23 =)",
    "insertText": "invdet(m23 * a - d * b)"
  },
  {
    "label": "invdet()",
    "kind": "Method",
    "detail": "Function (float w31 =)",
    "insertText": "invdet(m13 * b - d * a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float w12 = 1 - w23 - w31 ;)",
    "insertText": "if(w23 >= 0 && w31 >= 0 && w12 >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(w23 > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(w31 > 0)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Min(PointSegmentDistance(x0, x1, x3), PointSegmentDistance(x0, x2, x3))"
  },
  {
    "label": "PointTriangleDistance()",
    "kind": "Method",
    "detail": "Function (} } } double)",
    "insertText": "PointTriangleDistance(const FVector3d& x0, const FVector3d& x1, const FVector3d& x2, const FVector3d& x3)"
  },
  {
    "label": "GetDim()",
    "kind": "Method",
    "detail": "Function (} } } double)",
    "insertText": "GetDim(CellSizeTyped CellSize, int32 Axis)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(double)"
  },
  {
    "label": "GetDim()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetDim(CellSizeType CellSize, int32 Axis)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(float)"
  },
  {
    "label": "GetDiagLength()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetDiagLength(CellSizeType CellSize)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsValid(CellSizeType CellSize)"
  },
  {
    "label": "CellMinDim()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "CellMinDim(CellSize) > 0 && FMath::IsFinite(CellSize[0]) && FMath::IsFinite(CellSize[1]) && FMath::IsFinite(CellSize[2])"
  }
]