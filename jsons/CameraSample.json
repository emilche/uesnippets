[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "CameraSample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_CameraSample_h # define Alembic_AbcGeom_CameraSample_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / FilmBackXformOp . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT CameraSample { public :)",
    "insertText": "CameraSample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "CameraSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CameraSample(double iTop, double iBottom, double iLeft, double iRight)"
  },
  {
    "label": "getScreenWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getScreenWindow(double & oTop, double & oBottom, double & oLeft, double & oRight)"
  },
  {
    "label": "getHorizontalAperture()",
    "kind": "Method",
    "detail": "Function (m_focalLength = iVal ; } double)",
    "insertText": "getHorizontalAperture()"
  },
  {
    "label": "getHorizontalFilmOffset()",
    "kind": "Method",
    "detail": "Function (m_horizontalAperture = iVal ; } double)",
    "insertText": "getHorizontalFilmOffset()"
  },
  {
    "label": "getVerticalAperture()",
    "kind": "Method",
    "detail": "Function (m_horizontalFilmOffset = iVal ; } double)",
    "insertText": "getVerticalAperture()"
  },
  {
    "label": "getVerticalFilmOffset()",
    "kind": "Method",
    "detail": "Function (m_verticalAperture = iVal ; } double)",
    "insertText": "getVerticalFilmOffset()"
  },
  {
    "label": "getLensSqueezeRatio()",
    "kind": "Method",
    "detail": "Function (m_verticalFilmOffset = iVal ; } double)",
    "insertText": "getLensSqueezeRatio()"
  },
  {
    "label": "getOverScanLeft()",
    "kind": "Method",
    "detail": "Function (m_lensSqueezeRatio = iVal ; } double)",
    "insertText": "getOverScanLeft()"
  },
  {
    "label": "getOverScanRight()",
    "kind": "Method",
    "detail": "Function (m_overscanLeft = iVal ; } double)",
    "insertText": "getOverScanRight()"
  },
  {
    "label": "getOverScanTop()",
    "kind": "Method",
    "detail": "Function (m_overscanRight = iVal ; } double)",
    "insertText": "getOverScanTop()"
  },
  {
    "label": "getOverScanBottom()",
    "kind": "Method",
    "detail": "Function (m_overscanTop = iVal ; } double)",
    "insertText": "getOverScanBottom()"
  },
  {
    "label": "getFStop()",
    "kind": "Method",
    "detail": "Function (m_overscanBottom = iVal ; } double)",
    "insertText": "getFStop()"
  },
  {
    "label": "getFocusDistance()",
    "kind": "Method",
    "detail": "Function (m_fStop = iVal ; } double)",
    "insertText": "getFocusDistance()"
  },
  {
    "label": "getShutterOpen()",
    "kind": "Method",
    "detail": "Function (m_focusDistance = iVal ; } double)",
    "insertText": "getShutterOpen()"
  },
  {
    "label": "getShutterClose()",
    "kind": "Method",
    "detail": "Function (m_shutterOpen = iVal ; } double)",
    "insertText": "getShutterClose()"
  },
  {
    "label": "getNearClippingPlane()",
    "kind": "Method",
    "detail": "Function (m_shutterClose = iVal ; } double)",
    "insertText": "getNearClippingPlane()"
  },
  {
    "label": "getFarClippingPlane()",
    "kind": "Method",
    "detail": "Function (m_nearClippingPlane = iVal ; } double)",
    "insertText": "getFarClippingPlane()"
  },
  {
    "label": "getChildBounds()",
    "kind": "Method",
    "detail": "Function (m_farClippingPlane = iVal ; } Abc::Box3d)",
    "insertText": "getChildBounds()"
  },
  {
    "label": "getCoreValue()",
    "kind": "Method",
    "detail": "Function (m_childBounds = iBounds ; } double)",
    "insertText": "getCoreValue(std::size_t iIndex)"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (; std::size_t)",
    "insertText": "addOp(FilmBackXformOp iOp)"
  },
  {
    "label": "getOp()",
    "kind": "Method",
    "detail": "Function (FilmBackXformOp)",
    "insertText": "getOp(std::size_t iIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilmBackXformOp&)",
    "insertText": "operator(const std::size_t &iIndex)"
  },
  {
    "label": "getFilmBackMatrix()",
    "kind": "Method",
    "detail": "Function (Abc::M33d)",
    "insertText": "getFilmBackMatrix()"
  },
  {
    "label": "getNumOps()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "getNumOps()"
  },
  {
    "label": "getNumOpChannels()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "getNumOpChannels()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_focalLength = 3 5 . 0 ; m_horizontalAperture = 3 . 6 ; m_horizontalFilmOffset = 0 . 0 ; m_verticalAperture = 2 . 4 ; m_verticalFilmOffset = 0 . 0 ; m_lensSqueezeRatio = 1 . 0 ; m_overscanLeft = 0 . 0 ; m_overscanRight = 0 . 0 ; m_overscanTop = 0 . 0 ; m_overscanBottom = 0 . 0 ; m_fStop = 5 . 6 ; m_focusDistance = 5 . 0 ; m_shutterOpen = 0 . 0 ; m_shutterClose = 0 . 0 2 0 8 3 3 3 3 3 3 3 3 3 3 3 3 3 2 ; m_nearClippingPlane = 0 . 1 ; m_farClippingPlane = 1 0 0 0 0 0 . 0 ; m_childBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_ops .)",
    "insertText": "clear()"
  }
]