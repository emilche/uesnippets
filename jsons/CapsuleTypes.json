[
  {
    "label": "TCapsule3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCapsule3"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMath . h \" # include \" VectorTypes . h \" # include \" SegmentTypes . h \" # include \" BoxTypes . h \" # include \" OrientedBoxTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<T> struct TCapsule3 { public : TSegment3<T> Segment ; T)",
    "insertText": "Radius(T)"
  },
  {
    "label": "TCapsule3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TCapsule3()"
  },
  {
    "label": "TCapsule3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TCapsule3(const TSegment3<T>& SegmentIn, T RadiusIn) : Segment(SegmentIn), Radius(RadiusIn)"
  },
  {
    "label": "TCapsule3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCapsule3(const TVector<T>& StartPoint, const TVector<T>& EndPoint, T RadiusIn) : Segment(StartPoint, EndPoint), Radius(RadiusIn)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (} const TVector<T>&)",
    "insertText": "Center()"
  },
  {
    "label": "Extent()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Extent()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} TAxisAlignedBox3<T>)",
    "insertText": "GetBounds()"
  },
  {
    "label": "GetOrientedBounds()",
    "kind": "Method",
    "detail": "Function (} TOrientedBox3<T>)",
    "insertText": "GetOrientedBounds()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TVector<T>& Point)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (T DistSqr = Segment .)",
    "insertText": "DistanceSquared(Point)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const T PosDistance = TMathUtil<T)",
    "insertText": "Max(SignedDistance(Point), (T)0)"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Volume(T Radius, T Extent)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (T PiRadSqr = TMathUtil<T>::Pi* Radius* Radius ;)",
    "insertText": "return(PiRadSqr * ((T)2 * Extent)) + ((T)(4.0 / 3.0) * PiRadSqr * Radius)"
  }
]