[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SANITIZER_H_ # define RTC_BASE_SANITIZER_H_ # include<stddef . h> # ifdef __cplusplus # include \" absl / meta / type_traits . h \" # endif # if)",
    "insertText": "defined(__has_feature) #if __has_feature(address_sanitizer) #define RTC_HAS_ASAN 1 #endif #if __has_feature(memory_sanitizer) #define RTC_HAS_MSAN 1 #endif #endif #ifndef RTC_HAS_ASAN #define RTC_HAS_ASAN 0 #endif #ifndef RTC_HAS_MSAN #define RTC_HAS_MSAN 0 #endif #if RTC_HAS_ASAN #include <sanitizer/asan_interface.h> #endif #if RTC_HAS_MSAN #include <sanitizer/msan_interface.h> #endif #ifdef __has_attribute #if __has_attribute(no_sanitize) #define RTC_NO_SANITIZE(what) __attribute__((no_sanitize(what))) #endif #endif #ifndef RTC_NO_SANITIZE #define RTC_NO_SANITIZE(what) #endif static inline void rtc_AsanPoison(const volatile void* ptr, size_t element_size, size_t num_elements)"
  },
  {
    "label": "ASAN_POISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (# if RTC_HAS_ASAN)",
    "insertText": "ASAN_POISON_MEMORY_REGION(ptr, element_size * num_elements)"
  },
  {
    "label": "rtc_AsanUnpoison()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "rtc_AsanUnpoison(const volatile void* ptr, size_t element_size, size_t num_elements)"
  },
  {
    "label": "ASAN_UNPOISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (# if RTC_HAS_ASAN)",
    "insertText": "ASAN_UNPOISON_MEMORY_REGION(ptr, element_size * num_elements)"
  },
  {
    "label": "rtc_MsanMarkUninitialized()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "rtc_MsanMarkUninitialized(const volatile void* ptr, size_t element_size, size_t num_elements)"
  },
  {
    "label": "__msan_poison()",
    "kind": "Method",
    "detail": "Function (# if RTC_HAS_MSAN)",
    "insertText": "__msan_poison(ptr, element_size * num_elements)"
  },
  {
    "label": "rtc_MsanCheckInitialized()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "rtc_MsanCheckInitialized(const volatile void* ptr, size_t element_size, size_t num_elements)"
  },
  {
    "label": "__msan_check_mem_is_initialized()",
    "kind": "Method",
    "detail": "Function (# if RTC_HAS_MSAN)",
    "insertText": "__msan_check_mem_is_initialized(ptr, element_size * num_elements)"
  },
  {
    "label": "IsTriviallyCopyable()",
    "kind": "Method",
    "detail": "Function (# endif } # ifdef __cplusplus namespace rtc { namespace sanitizer_impl { template<T> bool)",
    "insertText": "IsTriviallyCopyable()"
  },
  {
    "label": "AsanPoison()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "AsanPoison(const T& mem)"
  },
  {
    "label": "rtc_AsanPoison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtc_AsanPoison(mem.data(), sizeof(mem.data()[0]), mem.size())"
  },
  {
    "label": "AsanUnpoison()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AsanUnpoison(const T& mem)"
  },
  {
    "label": "rtc_AsanUnpoison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtc_AsanUnpoison(mem.data(), sizeof(mem.data()[0]), mem.size())"
  },
  {
    "label": "MsanMarkUninitialized()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "MsanMarkUninitialized(const T& mem)"
  },
  {
    "label": "rtc_MsanMarkUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtc_MsanMarkUninitialized(mem.data(), sizeof(mem.data()[0]), mem.size())"
  },
  {
    "label": "MsanUninitialized()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "MsanUninitialized(T t)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if RTC_HAS_MSAN)",
    "insertText": "static_assert(sanitizer_impl::IsTriviallyCopyable<T>(), \"\")"
  },
  {
    "label": "rtc_MsanMarkUninitialized()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "rtc_MsanMarkUninitialized(&t, sizeof(T), 1)"
  },
  {
    "label": "rtc_MsanCheckInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtc_MsanCheckInitialized(mem.data(), sizeof(mem.data()[0]), mem.size())"
  }
]