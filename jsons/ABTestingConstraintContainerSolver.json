[
  {
    "label": "FConstraintHandleHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandleHolder"
  },
  {
    "label": "FSolverBodyContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBodyContainer"
  },
  {
    "label": "TABTestingConstraintContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TABTestingConstraintContainerSolver"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOS_ABTEST_CONSTRAINTSOLVER_ENABLED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Evolution / SolverBodyContainer . h \" # include \" Chaos / Evolution / SolverConstraintContainer . h \" # include<functional> # ifndef CHAOS_ABTEST_CONSTRAINTSOLVER_ENABLED # define)",
    "insertText": "CHAOS_ABTEST_CONSTRAINTSOLVER_ENABLED(!UE_BUILD_TEST && !UE_BUILD_SHIPPING)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class FConstraintHandleHolder ; class FSolverBodyContainer ; namespace Private { # if CHAOS_ABTEST_CONSTRAINTSOLVER_ENABLED template<T1,T2> class TABTestingConstraintContainerSolver : public FConstraintContainerSolver { public : enum class ESolverPhase { PreApplyPositionConstraints,PostApplyPositionConstraints,PreApplyVelocityConstraints,PostApplyVelocityConstraints,PreApplyProjectionConstraints,PostApplyProjectionConstraints,} ; using FContainerSolverTypeA = T1 ; using FContainerSolverTypeB = T2 ; using FABTestFunctor = std::function<)",
    "insertText": "void(const ESolverPhase Phase, const FContainerSolverTypeA& SolverA, const FContainerSolverTypeB& SolverB, const FSolverBodyContainer& SolverBodyContainerA, const FSolverBodyContainer& SolverBodyContainerB)"
  },
  {
    "label": "TABTestingConstraintContainerSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TABTestingConstraintContainerSolver(TUniquePtr<FContainerSolverTypeA>&& InSolverA, TUniquePtr<FContainerSolverTypeB>&& InSolverB, const int32 InPriority, const FABTestFunctor& InABTestFunctor) : FConstraintContainerSolver(InPriority) , SolverA(MoveTemp(InSolverA)) , SolverB(MoveTemp(InSolverB)) , SolverBodyContainerA(nullptr) , SolverBodyContainerB() , ABTestFunctor(InABTestFunctor)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const int32 MaxConstraints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "Reset(MaxConstraints)"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (SolverBodyContainerA = nullptr ; } int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraints(const TArrayView<Private::FPBDIslandConstraint*>& Constraints)"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "AddConstraints(Constraints)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (SolverBodyContainerA =& SolverBodyContainer ; SolverA ->)",
    "insertText": "AddBodies(*SolverBodyContainerA)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "GatherInput(Dt)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherInput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "GatherInput(Dt, BeginIndex, EndIndex)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "ScatterOutput(Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (SolverBodyContainerA = nullptr ; } void)",
    "insertText": "ScatterOutput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "ScatterOutput(Dt, BeginIndex, EndIndex)"
  },
  {
    "label": "PreApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (SolverBodyContainerA = nullptr ; } void)",
    "insertText": "PreApplyPositionConstraints(const FReal Dt)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (SolverBodyContainerA ->)",
    "insertText": "CopyTo(SolverBodyContainerB)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (SolverB ->)",
    "insertText": "AddBodies(SolverBodyContainerB)"
  },
  {
    "label": "PreApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "PreApplyPositionConstraints(Dt)"
  },
  {
    "label": "CallABTestFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallABTestFunctor(ESolverPhase::PreApplyPositionConstraints)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "ApplyPositionConstraints(Dt, It, NumIts)"
  },
  {
    "label": "CallABTestFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallABTestFunctor(ESolverPhase::PostApplyPositionConstraints)"
  },
  {
    "label": "PreApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreApplyVelocityConstraints(const FReal Dt)"
  },
  {
    "label": "SetImplicitVelocities()",
    "kind": "Method",
    "detail": "Function (SolverBodyContainerB .)",
    "insertText": "SetImplicitVelocities(Dt)"
  },
  {
    "label": "PreApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "PreApplyVelocityConstraints(Dt)"
  },
  {
    "label": "CallABTestFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallABTestFunctor(ESolverPhase::PreApplyProjectionConstraints)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "ApplyVelocityConstraints(Dt, It, NumIts)"
  },
  {
    "label": "CallABTestFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallABTestFunctor(ESolverPhase::PostApplyVelocityConstraints)"
  },
  {
    "label": "PreApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreApplyProjectionConstraints(const FReal Dt)"
  },
  {
    "label": "ApplyCorrections()",
    "kind": "Method",
    "detail": "Function (SolverBodyContainerB .)",
    "insertText": "ApplyCorrections()"
  },
  {
    "label": "PreApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "PreApplyProjectionConstraints(Dt)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (SolverA ->)",
    "insertText": "ApplyProjectionConstraints(Dt, It, NumIts)"
  },
  {
    "label": "CallABTestFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallABTestFunctor(ESolverPhase::PostApplyProjectionConstraints)"
  },
  {
    "label": "CallABTestFunctor()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "CallABTestFunctor(const ESolverPhase Phase)"
  },
  {
    "label": "ABTestFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABTestFunctor(Phase, *SolverA, *SolverB, *SolverBodyContainerA, SolverBodyContainerB)"
  }
]