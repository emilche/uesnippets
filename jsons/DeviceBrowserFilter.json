[
  {
    "label": "FDeviceBrowserFilterEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeviceBrowserFilterEntry"
  },
  {
    "label": "FDeviceBrowserFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeviceBrowserFilter"
  },
  {
    "label": "FDeviceBrowserFilterEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" ITargetDeviceService . h \" # include \" Templates / SharedPointer . h \" struct FDeviceBrowserFilterEntry { FString PlatformName ; FName PlatformLookup ;)",
    "insertText": "FDeviceBrowserFilterEntry(FString InPlatformName, FName InPlatformLookup) : PlatformName(InPlatformName) , PlatformLookup(InPlatformLookup)"
  },
  {
    "label": "FilterDeviceService()",
    "kind": "Method",
    "detail": "Function (} } ; class FDeviceBrowserFilter { public : bool)",
    "insertText": "FilterDeviceService(const TSharedPtr<ITargetDeviceService, ESPMode::ThreadSafe>& DeviceService)"
  },
  {
    "label": "GetServiceCountPerPlatform()",
    "kind": "Method",
    "detail": "Function (} return false ; } int32)",
    "insertText": "GetServiceCountPerPlatform(const FString& PlatformName)"
  },
  {
    "label": "GetDeviceSearchText()",
    "kind": "Method",
    "detail": "Function (} const FText&)",
    "insertText": "GetDeviceSearchText()"
  },
  {
    "label": "ResetFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetFilter(const TArray<ITargetDeviceServicePtr>& DeviceServices)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PlatformList .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetDevicePlatformDisplayName()",
    "kind": "Method",
    "detail": "Function (const ITargetDeviceServicePtr& DeviceService = DeviceServices [ DeviceServiceIndex ] ; const FString Platform = DeviceService ->)",
    "insertText": "GetDevicePlatformDisplayName()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (int32& PlatformCounter = PlatformCounters .)",
    "insertText": "FindOrAdd(Platform)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PlatformList .)",
    "insertText": "Add(MakeShareable(new FDeviceBrowserFilterEntry(Platform, DeviceService->GetDevicePlatformName())))"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (} + + PlatformCounter ; } FilterResetEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "SetDeviceSearchString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDeviceSearchString(const FText& SearchText)"
  },
  {
    "label": "SetPlatformEnabled()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetPlatformEnabled(const FString& PlatformName, bool Enabled)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (DisabledPlatforms .)",
    "insertText": "Remove(PlatformName)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} else { DisabledPlatforms .)",
    "insertText": "AddUnique(PlatformName)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DECLARE_EVENT(FDeviceBrowserFilter, FOnDeviceBrowserFilterChanged)"
  },
  {
    "label": "OnFilterChanged()",
    "kind": "Method",
    "detail": "Function (FOnDeviceBrowserFilterChanged&)",
    "insertText": "OnFilterChanged()"
  },
  {
    "label": "OnFilterReset()",
    "kind": "Method",
    "detail": "Function (FOnDeviceBrowserFilterReset&)",
    "insertText": "OnFilterReset()"
  }
]