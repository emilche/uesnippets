[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "OXformSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OXformSchema"
  },
  {
    "label": "IXformSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IXformSchema"
  },
  {
    "label": "XformSample()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "XformSample()"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp( XformOp iTransOrScaleOp, const Abc::V3d &iVal )"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp( XformOp iRotateOp, const Abc::V3d &iAxis,\n                       const double iAngleInDegrees )"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp( XformOp iMatrixOp, const Abc::M44d &iMatrix )"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp( XformOp iSingleRotateOp,\n                       const double iSingleAxisRotationInDegrees )"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp( const XformOp &iOp )"
  },
  {
    "label": "setInheritsXforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInheritsXforms( bool iInherits )"
  },
  {
    "label": "setTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTranslation( const Abc::V3d &iTrans )"
  },
  {
    "label": "setRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRotation( const Abc::V3d &iAxis, const double iAngleInDegress )"
  },
  {
    "label": "setXRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setXRotation( const double iAngleInDegrees )"
  },
  {
    "label": "setYRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setYRotation( const double iAngleInDegrees )"
  },
  {
    "label": "setZRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setZRotation( const double iAngleInDegrees )"
  },
  {
    "label": "setScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setScale( const Abc::V3d &iScale )"
  },
  {
    "label": "setMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMatrix( const Abc::M44d &iMatrix )"
  },
  {
    "label": "isTopologyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTopologyEqual( const XformSample & iSample )"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "freezeTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freezeTopology()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  }
]