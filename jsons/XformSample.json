[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "OXformSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OXformSchema"
  },
  {
    "label": "IXformSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IXformSchema"
  },
  {
    "label": "XformSample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_XformSample_h # define Alembic_AbcGeom_XformSample_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / XformOp . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT XformSample { public :)",
    "insertText": "XformSample()"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp(XformOp iTransOrScaleOp, const Abc::V3d &iVal)"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp(XformOp iRotateOp, const Abc::V3d &iAxis, const double iAngleInDegrees)"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp(XformOp iMatrixOp, const Abc::M44d &iMatrix)"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp(XformOp iSingleRotateOp, const double iSingleAxisRotationInDegrees)"
  },
  {
    "label": "addOp()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "addOp(const XformOp &iOp)"
  },
  {
    "label": "getOp()",
    "kind": "Method",
    "detail": "Function (XformOp)",
    "insertText": "getOp(const std::size_t iIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XformOp&)",
    "insertText": "operator(const std::size_t &iIndex)"
  },
  {
    "label": "getNumOps()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "getNumOps()"
  },
  {
    "label": "getNumOpChannels()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "getNumOpChannels()"
  },
  {
    "label": "setInheritsXforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInheritsXforms(bool iInherits)"
  },
  {
    "label": "getInheritsXforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getInheritsXforms()"
  },
  {
    "label": "setTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTranslation(const Abc::V3d &iTrans)"
  },
  {
    "label": "getTranslation()",
    "kind": "Method",
    "detail": "Function (Abc::V3d)",
    "insertText": "getTranslation()"
  },
  {
    "label": "setRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRotation(const Abc::V3d &iAxis, const double iAngleInDegress)"
  },
  {
    "label": "getAxis()",
    "kind": "Method",
    "detail": "Function (Abc::V3d)",
    "insertText": "getAxis()"
  },
  {
    "label": "setXRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setXRotation(const double iAngleInDegrees)"
  },
  {
    "label": "setYRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setYRotation(const double iAngleInDegrees)"
  },
  {
    "label": "setZRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setZRotation(const double iAngleInDegrees)"
  },
  {
    "label": "setScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setScale(const Abc::V3d &iScale)"
  },
  {
    "label": "getScale()",
    "kind": "Method",
    "detail": "Function (Abc::V3d)",
    "insertText": "getScale()"
  },
  {
    "label": "setMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMatrix(const Abc::M44d &iMatrix)"
  },
  {
    "label": "getMatrix()",
    "kind": "Method",
    "detail": "Function (Abc::M44d)",
    "insertText": "getMatrix()"
  },
  {
    "label": "isTopologyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTopologyEqual(const XformSample & iSample)"
  },
  {
    "label": "getIsTopologyFrozen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getIsTopologyFrozen()"
  },
  {
    "label": "freezeTopology()",
    "kind": "Method",
    "detail": "Function (private : class OXformSchema ; class IXformSchema ; void)",
    "insertText": "freezeTopology()"
  },
  {
    "label": "getOpsArray()",
    "kind": "Method",
    "detail": "Function (const std::vector<Alembic::Util::uint8_t>&)",
    "insertText": "getOpsArray()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  }
]