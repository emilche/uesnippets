[
  {
    "label": "CheckReadOnlyPlatformSharedMemoryRegionForTesting()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_SHARED_MEMORY_UTIL_H_ # define BASE_TEST_TEST_SHARED_MEMORY_UTIL_H_ # include \" base / memory / platform_shared_memory_region . h \" # include \" base / memory / read_only_shared_memory_region . h \" # include \" base / memory / shared_memory_mapping . h \" # include \" testing / gtest / include / gtest / gtest . h \" namespace base { bool)",
    "insertText": "CheckReadOnlyPlatformSharedMemoryRegionForTesting(subtle::PlatformSharedMemoryRegion region)"
  },
  {
    "label": "MapAtForTesting()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryMapping)",
    "insertText": "MapAtForTesting(subtle::PlatformSharedMemoryRegion* region, uint64_t offset, size_t size)"
  },
  {
    "label": "MapForTesting()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryMapping)",
    "insertText": "MapForTesting(subtle::PlatformSharedMemoryRegion* region)"
  },
  {
    "label": "CreateMappedRegion()",
    "kind": "Method",
    "detail": "Function (template<SharedMemoryRegionType> std::pair<SharedMemoryRegionType,WritableSharedMemoryMapping>)",
    "insertText": "CreateMappedRegion(size_t size)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (SharedMemoryRegionType region =)",
    "insertText": "Create(size)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryMapping mapping = region .)",
    "insertText": "Map()"
  }
]