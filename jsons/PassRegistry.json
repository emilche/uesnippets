[
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "PassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassInfo"
  },
  {
    "label": "PassRegistrationListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassRegistrationListener"
  },
  {
    "label": "manages",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "manages"
  },
  {
    "label": "PassRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassRegistry"
  },
  {
    "label": "registerPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerPass(const PassInfo &PI, bool ShouldFree = false)"
  },
  {
    "label": "registerAnalysisGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerAnalysisGroup(const void *InterfaceID, const void *PassID,\n                             PassInfo &Registeree, bool isDefault,\n                             bool ShouldFree = false)"
  },
  {
    "label": "enumerateWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enumerateWith(PassRegistrationListener *L)"
  },
  {
    "label": "addRegistrationListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRegistrationListener(PassRegistrationListener *L)"
  },
  {
    "label": "removeRegistrationListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeRegistrationListener(PassRegistrationListener *L)"
  }
]