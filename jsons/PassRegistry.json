[
  {
    "label": "PassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassInfo"
  },
  {
    "label": "PassRegistrationListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassRegistrationListener"
  },
  {
    "label": "PassRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassRegistry"
  },
  {
    "label": "PassRegistry()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_PASSREGISTRY_H # define LLVM_PASSREGISTRY_H # include \" llvm - c / Core . h \" # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / PassInfo . h \" # include \" llvm / Support / CBindingWrapping . h \" # include \" llvm / Support / RWMutex . h \" # include<vector> namespace llvm { class PassInfo ; struct PassRegistrationListener ; class PassRegistry { # ifndef LLVM_ON_WIN32 sys::SmartRWMutex<true> Lock ; # endif typedef DenseMap<const void*,const PassInfo*> MapType ; MapType PassInfoMap ; typedef StringMap<const PassInfo*> StringMapType ; StringMapType PassInfoStringMap ; std::vector<std::unique_ptr<const PassInfo>> ToFree ; std::vector<PassRegistrationListener*> Listeners ; public :)",
    "insertText": "PassRegistry()"
  },
  {
    "label": "getPassRegistry()",
    "kind": "Method",
    "detail": "Function (PassRegistry*)",
    "insertText": "getPassRegistry()"
  },
  {
    "label": "getPassInfo()",
    "kind": "Method",
    "detail": "Function (const PassInfo*)",
    "insertText": "getPassInfo(const void *TI)"
  },
  {
    "label": "getPassInfo()",
    "kind": "Method",
    "detail": "Function (const PassInfo*)",
    "insertText": "getPassInfo(StringRef Arg)"
  },
  {
    "label": "registerPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerPass(const PassInfo &PI, bool ShouldFree = false)"
  },
  {
    "label": "registerAnalysisGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerAnalysisGroup(const void *InterfaceID, const void *PassID, PassInfo &Registeree, bool isDefault, bool ShouldFree = false)"
  },
  {
    "label": "enumerateWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enumerateWith(PassRegistrationListener *L)"
  },
  {
    "label": "addRegistrationListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRegistrationListener(PassRegistrationListener *L)"
  },
  {
    "label": "removeRegistrationListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeRegistrationListener(PassRegistrationListener *L)"
  }
]