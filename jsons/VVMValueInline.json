[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "Get(FAllocationContext Context)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Set(Context, VValue::Placeholder(VPlaceholder::New(Context, Value.Get().GetSplitDepth())))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return Value .)",
    "insertText": "Get().Follow()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const VRestValue& Other)"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VValue(VCell& Cell) : Cell(&Cell)"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VValue(UObject* Object) : EncodedBits(BitCast<uint64>(Object) | UObjectTag)"
  },
  {
    "label": "IsInt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInt()"
  },
  {
    "label": "AsInt()",
    "kind": "Method",
    "detail": "Function (} VInt)",
    "insertText": "AsInt()"
  },
  {
    "label": "IsUint32()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUint32()"
  },
  {
    "label": "AsUint32()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AsUint32()"
  },
  {
    "label": "FromBool()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "FromBool(bool Bool)"
  },
  {
    "label": "Follow()",
    "kind": "Method",
    "detail": "Function (} const VValue)",
    "insertText": "Follow()"
  },
  {
    "label": "GetRootPlaceholder()",
    "kind": "Method",
    "detail": "Function (} return* this ; } VPlaceholder&)",
    "insertText": "GetRootPlaceholder()"
  },
  {
    "label": "EnqueueSuspension()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnqueueSuspension(FAccessContext Context, VSuspension& Suspension)"
  },
  {
    "label": "GetRootPlaceholder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootPlaceholder().EnqueueSuspension(Context, Suspension)"
  },
  {
    "label": "IsLogic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLogic()"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AsBool()"
  },
  {
    "label": "IsEnumerator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnumerator()"
  },
  {
    "label": "IsCellOfType()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType> bool)",
    "insertText": "IsCellOfType()"
  },
  {
    "label": "StaticCast()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType> ObjectType&)",
    "insertText": "StaticCast()"
  },
  {
    "label": "DynamicCast()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType> ObjectType*)",
    "insertText": "DynamicCast()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(VValue Value)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(Value.IsPlaceholder() || Value.IsUninitialized())"
  },
  {
    "label": "AsFloat()",
    "kind": "Method",
    "detail": "Function (const Verse::VFloat ValueAsFloat = Value .)",
    "insertText": "AsFloat()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GetTypeHash(ValueAsFloat.AsDouble())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsInt())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsLogic())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsCell())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsUObject())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsChar())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsChar32())"
  },
  {
    "label": "VERSE_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "VERSE_UNREACHABLE()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetTypeHash(const VPlaceholder& Placeholder)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(VRestValue RestValue)"
  },
  {
    "label": "Melt()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "Melt(FAllocationContext Context, VValue Value)"
  },
  {
    "label": "Freeze()",
    "kind": "Method",
    "detail": "Function (} return Value ; } VValue)",
    "insertText": "Freeze(FAllocationContext Context, VValue Value)"
  },
  {
    "label": "V_DIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE(\"Freezing does not support non-concrete values!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsCell() && Value.AsCell().IsDeeplyMutable())"
  }
]