[
  {
    "label": "AtomicHook",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicHook"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_ATOMIC_HOOK_H_ # define ABSL_BASE_INTERNAL_ATOMIC_HOOK_H_ # include<atomic> # include<cassert> # include<cstdint> # include<utility> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # if)",
    "insertText": "defined(_MSC_VER) && !defined(__clang__) #define ABSL_HAVE_WORKING_CONSTEXPR_STATIC_INIT 0 #else #define ABSL_HAVE_WORKING_CONSTEXPR_STATIC_INIT 1 #endif #if defined(_MSC_VER)"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace base_internal { template<T> class AtomicHook ; # if ABSL_HAVE_WORKING_CONSTEXPR_STATIC_INIT # define ABSL_INTERNAL_ATOMIC_HOOK_ATTRIBUTES ABSL_CONST_INIT # else # define ABSL_INTERNAL_ATOMIC_HOOK_ATTRIBUTES # endif template<ReturnType,. . . Args> class AtomicHook<)",
    "insertText": "ReturnType(*)(Args...)"
  },
  {
    "label": "AtomicHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicHook() : AtomicHook(DummyFunction)"
  },
  {
    "label": "AtomicHook()",
    "kind": "Method",
    "detail": "Function (} # if ABSL_HAVE_WORKING_ATOMIC_POINTER&& ABSL_HAVE_WORKING_CONSTEXPR_STATIC_INIT)",
    "insertText": "AtomicHook(FnPtr default_fn) : hook_(default_fn), default_fn_(default_fn)"
  },
  {
    "label": "AtomicHook()",
    "kind": "Method",
    "detail": "Function (} # elif ABSL_HAVE_WORKING_CONSTEXPR_STATIC_INIT)",
    "insertText": "AtomicHook(FnPtr default_fn) : hook_(kUninitialized), default_fn_(default_fn)"
  },
  {
    "label": "AtomicHook()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "AtomicHook(FnPtr default_fn) : default_fn_(default_fn)"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "Store(FnPtr fn)"
  },
  {
    "label": "DoStore()",
    "kind": "Method",
    "detail": "Function (bool success =)",
    "insertText": "DoStore(fn)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "void(success)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(success)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<. . . CallArgs> ReturnType)",
    "insertText": "operator()(CallArgs&&... args)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} FnPtr)",
    "insertText": "Load()"
  },
  {
    "label": "DoLoad()",
    "kind": "Method",
    "detail": "Function (FnPtr ptr =)",
    "insertText": "DoLoad()"
  },
  {
    "label": "DummyFunction()",
    "kind": "Method",
    "detail": "Function (} private : ReturnType)",
    "insertText": "DummyFunction(Args...)"
  },
  {
    "label": "DoStore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoStore(FnPtr fn)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(fn)"
  },
  {
    "label": "compare_exchange_strong()",
    "kind": "Method",
    "detail": "Function (FnPtr expected = default_fn_ ; const bool store_succeeded = hook_ .)",
    "insertText": "compare_exchange_strong(expected, fn, std::memory_order_acq_rel, std::memory_order_acquire)"
  },
  {
    "label": "same_value_already_stored()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "same_value_already_stored(expected == fn)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (const intptr_t value = hook_ .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "intptr_t()",
    "kind": "Method",
    "detail": "Function (const auto value = reinterpret_cast<)",
    "insertText": "intptr_t(fn)"
  },
  {
    "label": "compare_exchange_strong()",
    "kind": "Method",
    "detail": "Function (intptr_t expected = kUninitialized ; const bool store_succeeded = hook_ .)",
    "insertText": "compare_exchange_strong(expected, value, std::memory_order_acq_rel, std::memory_order_acquire)"
  },
  {
    "label": "same_value_already_stored()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "same_value_already_stored(expected == value)"
  }
]