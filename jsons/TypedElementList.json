[
  {
    "label": "UInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterface"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UTypedElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementRegistry"
  },
  {
    "label": "FTypedElementId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementId"
  },
  {
    "label": "HandleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandleType"
  },
  {
    "label": "HandleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandleType"
  },
  {
    "label": "HandleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandleType"
  },
  {
    "label": "TTypedElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTypedElementList"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "FScopedClearNewPendingChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedClearNewPendingChange"
  },
  {
    "label": "FLegacySync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacySync"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLegacySyncScopedBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacySyncScopedBatch"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementImpl(const UTypedElementRegistry* InRegistry, const FTypedElementHandle& InElementHandle, const TSubclassOf<UInterface>& InBaseInterfaceType, FTypedElement& OutElement)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementImpl(const UTypedElementRegistry* InRegistry, const FScriptTypedElementHandle& InElementHandle, const TSubclassOf<UInterface>& InBaseInterfaceType, FTypedElement& OutElement)"
  },
  {
    "label": "GetElementHandleAt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetElementHandleAt(InIndex)"
  },
  {
    "label": "ContainsElementImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ContainsElementImpl(InElementId)"
  },
  {
    "label": "LegacySyncBatch()",
    "kind": "Method",
    "detail": "Function (FLegacySyncScopedBatch)",
    "insertText": "LegacySyncBatch(*this)"
  },
  {
    "label": "LegacySyncBatch()",
    "kind": "Method",
    "detail": "Function (FLegacySyncScopedBatch)",
    "insertText": "LegacySyncBatch(*this)"
  },
  {
    "label": "LegacySyncBatch()",
    "kind": "Method",
    "detail": "Function (FLegacySyncScopedBatch)",
    "insertText": "LegacySyncBatch(*this)"
  },
  {
    "label": "RemoveElementImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveElementImpl(InElementId)"
  },
  {
    "label": "RemoveAllElementsImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveAllElementsImpl(InPredicate)"
  },
  {
    "label": "NotifyPendingChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyPendingChanges()"
  },
  {
    "label": "FScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (TYPEDELEMENTFRAMEWORK_API)",
    "insertText": "FScopedClearNewPendingChange(TTypedElementList& InTypeElementList)"
  },
  {
    "label": "FScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (TYPEDELEMENTFRAMEWORK_API)",
    "insertText": "FScopedClearNewPendingChange(FScopedClearNewPendingChange&& Other)"
  },
  {
    "label": "FLegacySync()",
    "kind": "Method",
    "detail": "Function (TYPEDELEMENTFRAMEWORK_API)",
    "insertText": "FLegacySync(const TTypedElementList& InElementList)"
  },
  {
    "label": "BeginBatchOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBatchOperation()"
  },
  {
    "label": "EndBatchOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBatchOperation(const bool InNotify = true)"
  },
  {
    "label": "ForceBatchOperationDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBatchOperationDirty()"
  },
  {
    "label": "FLegacySyncScopedBatch()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FLegacySyncScopedBatch(const TTypedElementList& InElementList, const bool InNotify = true)"
  },
  {
    "label": "ForceDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceDirty()"
  },
  {
    "label": "GetScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (FScopedClearNewPendingChange)",
    "insertText": "GetScopedClearNewPendingChange()"
  },
  {
    "label": "Private_CreateElementList()",
    "kind": "Method",
    "detail": "Function (TTypedElementListRef)",
    "insertText": "Private_CreateElementList(UTypedElementRegistry* InRegistry)"
  },
  {
    "label": "TTypedElementList()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TTypedElementList(UTypedElementRegistry* InRegistry)"
  },
  {
    "label": "AddElementImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddElementImpl(HandleType&& InElementHandle)"
  },
  {
    "label": "RemoveElementImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveElementImpl(const FTypedElementId& InElementId)"
  },
  {
    "label": "NoteListMayChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteListMayChange()"
  },
  {
    "label": "ConvertToNativeTypedElementList()",
    "kind": "Method",
    "detail": "Function (FTypedElementListPtr)",
    "insertText": "ConvertToNativeTypedElementList(const FScriptTypedElementListConstPtr& ScriptList)"
  },
  {
    "label": "ConvertToScriptTypedElementList()",
    "kind": "Method",
    "detail": "Function (FScriptTypedElementListPtr)",
    "insertText": "ConvertToScriptTypedElementList(const FTypedElementListConstPtr& NativeList)"
  }
]