[
  {
    "label": "UInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterface"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UTypedElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementRegistry"
  },
  {
    "label": "FTypedElementId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementId"
  },
  {
    "label": "HandleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandleType"
  },
  {
    "label": "TTypedElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTypedElementList"
  },
  {
    "label": "FScopedClearNewPendingChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedClearNewPendingChange"
  },
  {
    "label": "FLegacySync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacySync"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLegacySyncScopedBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacySyncScopedBatch"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Elements / Framework / TypedElementCounter . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Framework / TypedElementLimits . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" HAL / Platform . h \" # include \" Templates / Casts . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class UInterface ; class UObject ; class UTypedElementRegistry ; struct FTypedElementId ; namespace TypedElementList_Private { void)",
    "insertText": "GetElementImpl(const UTypedElementRegistry* InRegistry, const FTypedElementHandle& InElementHandle, const TSubclassOf<UInterface>& InBaseInterfaceType, FTypedElement& OutElement)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementImpl(const UTypedElementRegistry* InRegistry, const FScriptTypedElementHandle& InElementHandle, const TSubclassOf<UInterface>& InBaseInterfaceType, FTypedElement& OutElement)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (template<BaseInterfaceType,class HandleType> void)",
    "insertText": "GetElement(const UTypedElementRegistry* InRegistry, const HandleType& InElementHandle, TTypedElement<BaseInterfaceType>& OutElement)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementImpl(InRegistry, InElementHandle, BaseInterfaceType::UClassType::StaticClass(), reinterpret_cast<FTypedElement&>(OutElement))"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType,class HandleType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetElement(const UTypedElementRegistry* InRegistry, const HandleType& InElementHandle)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (TTypedElement<BaseInterfaceType> Element ;)",
    "insertText": "GetElement(InRegistry, InElementHandle, Element)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TTypedElementListRef)",
    "insertText": "Clone()"
  },
  {
    "label": "GetElementHandleAt()",
    "kind": "Method",
    "detail": "Function (} HandleType)",
    "insertText": "GetElementHandleAt(const int32 InIndex)"
  },
  {
    "label": "GetElementAt()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> void)",
    "insertText": "GetElementAt(const int32 InIndex, TTypedElement<BaseInterfaceType>& OutElement)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElement(GetElementHandleAt(InIndex), OutElement)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetElement(const HandleType& InElementHandle)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> void)",
    "insertText": "GetElement(const HandleType& InElementHandle, TTypedElement<BaseInterfaceType>& OutElement)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElement(Registry.Get(), InElementHandle, OutElement)"
  },
  {
    "label": "GetTopElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetTopElement()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TTypedElement<BaseInterfaceType> TempElement ;)",
    "insertText": "for(int32 ElementIndex = 0; ElementIndex < Num(); ++ElementIndex)"
  },
  {
    "label": "GetElementAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementAt(ElementIndex, TempElement)"
  },
  {
    "label": "GetTopElement()",
    "kind": "Method",
    "detail": "Function (break ; } } return TempElement ; } template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetTopElement(TFunctionRef<bool (const TTypedElement<BaseInterfaceType>&)> Predicate)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ElementToReturn =)",
    "insertText": "MoveTemp(TempElement)"
  },
  {
    "label": "GetBottomElement()",
    "kind": "Method",
    "detail": "Function (break ; } } return ElementToReturn ; } template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetBottomElement()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TTypedElement<BaseInterfaceType> TempElement ;)",
    "insertText": "for(int32 ElementIndex = Num() - 1; ElementIndex >= 0; --ElementIndex)"
  },
  {
    "label": "GetBottomElement()",
    "kind": "Method",
    "detail": "Function (break ; } } return TempElement ; } template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetBottomElement(TFunctionRef<bool (const TTypedElement<BaseInterfaceType>&)> Predicate)"
  },
  {
    "label": "GetElementInterface()",
    "kind": "Method",
    "detail": "Function (break ; } } return ElementToReturn ; } template<BaseInterfaceType> BaseInterfaceType*)",
    "insertText": "GetElementInterface(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetElementInterface()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetElementInterface(const HandleType& InElementHandle, const TSubclassOf<UInterface>& InBaseInterfaceType)"
  },
  {
    "label": "HasElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasElements(const TSubclassOf<UInterface>& InBaseInterfaceType = nullptr)"
  },
  {
    "label": "CountElements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CountElements(const TSubclassOf<UInterface>& InBaseInterfaceType = nullptr)"
  },
  {
    "label": "HasElementsOfType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasElementsOfType(const FName InElementTypeName)"
  },
  {
    "label": "HasElementsOfType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasElementsOfType(const FTypedHandleTypeId InElementTypeId)"
  },
  {
    "label": "CountElementsOfType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CountElementsOfType(const FName InElementTypeName)"
  },
  {
    "label": "CountElementsOfType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CountElementsOfType(const FTypedHandleTypeId InElementTypeId)"
  },
  {
    "label": "GetElementHandles()",
    "kind": "Method",
    "detail": "Function (TArray<HandleType>)",
    "insertText": "GetElementHandles(const TSubclassOf<UInterface>& InBaseInterfaceType = nullptr)"
  },
  {
    "label": "GetElementHandles()",
    "kind": "Method",
    "detail": "Function (template<ArrayAllocator> void)",
    "insertText": "GetElementHandles(TArray<HandleType, ArrayAllocator>& OutArray, const TSubclassOf<UInterface>& InBaseInterfaceType = nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Reserve(ElementHandles.Num())"
  },
  {
    "label": "ForEachElementHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachElementHandle(TFunctionRef<bool(const HandleType&)> InCallback, const TSubclassOf<UInterface>& InBaseInterfaceType = nullptr)"
  },
  {
    "label": "ForEachElement()",
    "kind": "Method",
    "detail": "Function (template<BaseInterfaceType> void)",
    "insertText": "ForEachElement(TFunctionRef<bool(const TTypedElement<BaseInterfaceType>&)> InCallback)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TTypedElement<BaseInterfaceType> TempElement ;)",
    "insertText": "for(const HandleType& ElementHandle : ElementHandles)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElement(ElementHandle, TempElement)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (break ; } } } bool)",
    "insertText": "IsValidIndex(const int32 InIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(const int32 InSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ElementCombinedIds .)",
    "insertText": "Reserve(InSize)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(const int32 InSlack = 0)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (const bool bWasEmpty = ElementHandles .)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "NoteListMayChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteListMayChange()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} ElementCombinedIds .)",
    "insertText": "Empty(InSlack)"
  },
  {
    "label": "ClearCounters()",
    "kind": "Method",
    "detail": "Function (ElementCounts .)",
    "insertText": "ClearCounters()"
  },
  {
    "label": "NoteListChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteListChanged(EChangeType::Cleared)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Contains(const FTypedElementId& InElementId)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const HandleType& InElementHandle)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType> bool)",
    "insertText": "Contains(const TTypedElementOwner<ElementDataType>& InElementOwner)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Add(const HandleType& InElementHandle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Add(HandleType&& InElementHandle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType> bool)",
    "insertText": "Add(const TTypedElementOwner<ElementDataType>& InElementOwner)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const TTypedElementListConstRef& InElementList)"
  },
  {
    "label": "LegacySyncBatch()",
    "kind": "Method",
    "detail": "Function (FLegacySyncScopedBatch)",
    "insertText": "LegacySyncBatch(*this)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(Num() + InElementList->Num())"
  },
  {
    "label": "ForEachElementHandle()",
    "kind": "Method",
    "detail": "Function (InElementList ->)",
    "insertText": "ForEachElementHandle([this](const HandleType& ElementHandle) { AddElementImpl(CopyTemp(ElementHandle)); return true; })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Append(TArrayView<const HandleType> InElementHandles)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(Num() + InElementHandles.Num())"
  },
  {
    "label": "AddElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElementImpl(CopyTemp(ElementHandle))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } template<ElementDataType> void)",
    "insertText": "Append(const TArray<TTypedElementOwner<ElementDataType>>& InElementOwners)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(MakeArrayView(InElementOwners))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType> void)",
    "insertText": "Append(TArrayView<const TTypedElementOwner<ElementDataType>> InElementOwners)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(Num() + InElementOwners.Num())"
  },
  {
    "label": "AddElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElementImpl(ElementOwner.AcquireHandle())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Remove(const FTypedElementId& InElementId)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Remove(const HandleType& InElementHandle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType> bool)",
    "insertText": "Remove(const TTypedElementOwner<ElementDataType>& InElementOwner)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RemoveAll(TFunctionRef<bool(const HandleType&)> InPredicate)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> int32)",
    "insertText": "RemoveAll(TFunctionRef<bool(const TTypedElement<BaseInterfaceType>&)> InPredicate)"
  },
  {
    "label": "RemoveAllElementsImpl()",
    "kind": "Method",
    "detail": "Function (TTypedElement<BaseInterfaceType> TempElement ; return)",
    "insertText": "RemoveAllElementsImpl([this, &TempElement, &InPredicate](const HandleType& InElementHandle) { GetElement(InElementHandle, TempElement); return TempElement && InPredicate(TempElement); })"
  },
  {
    "label": "GetCounter()",
    "kind": "Method",
    "detail": "Function (} const FTypedElementCounter&)",
    "insertText": "GetCounter()"
  },
  {
    "label": "OnPreChange()",
    "kind": "Method",
    "detail": "Function (FOnPreChange&)",
    "insertText": "OnPreChange()"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FOnChanged&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "FScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (struct FScopedClearNewPendingChange {)",
    "insertText": "FScopedClearNewPendingChange()"
  },
  {
    "label": "FScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedClearNewPendingChange(TTypedElementList& InTypeElementList)"
  },
  {
    "label": "FScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedClearNewPendingChange(const FScopedClearNewPendingChange&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedClearNewPendingChange&)",
    "insertText": "operator(const FScopedClearNewPendingChange&)"
  },
  {
    "label": "FScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedClearNewPendingChange(FScopedClearNewPendingChange&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedClearNewPendingChange&)",
    "insertText": "operator(FScopedClearNewPendingChange&& Other)"
  },
  {
    "label": "FLegacySync()",
    "kind": "Method",
    "detail": "Function (private : TTypedElementList* TypedElementList = nullptr ; } ; class FLegacySync { public : enum class ESyncType : uint8 { Added,Removed,Modified,Cleared,BatchComplete,} ;)",
    "insertText": "FLegacySync(const TTypedElementList& InElementList)"
  },
  {
    "label": "Private_EmitSyncEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_EmitSyncEvent(const ESyncType InSyncType, const HandleType& InElementHandle = HandleType())"
  },
  {
    "label": "DECLARE_EVENT_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_FourParams(FLegacySync, FOnSyncEvent, const TTypedElementList& , ESyncType , const HandleType& , bool)"
  },
  {
    "label": "OnSyncEvent()",
    "kind": "Method",
    "detail": "Function (FOnSyncEvent&)",
    "insertText": "OnSyncEvent()"
  },
  {
    "label": "IsRunningBatchOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningBatchOperation()"
  },
  {
    "label": "BeginBatchOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBatchOperation()"
  },
  {
    "label": "EndBatchOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBatchOperation(const bool InNotify = true)"
  },
  {
    "label": "IsBatchOperationDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBatchOperationDirty()"
  },
  {
    "label": "ForceBatchOperationDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBatchOperationDirty()"
  },
  {
    "label": "FLegacySyncScopedBatch()",
    "kind": "Method",
    "detail": "Function (private : const TTypedElementList& ElementList ; FOnSyncEvent OnSyncEventDelegate ; int32 NumOpenBatchOperations = 0 ; bool bBatchOperationIsDirty = false ; } ; class FLegacySyncScopedBatch { public :)",
    "insertText": "FLegacySyncScopedBatch(const TTypedElementList& InElementList, const bool InNotify = true)"
  },
  {
    "label": "FLegacySyncScopedBatch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLegacySyncScopedBatch()"
  },
  {
    "label": "FLegacySyncScopedBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacySyncScopedBatch(const FLegacySyncScopedBatch&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLegacySyncScopedBatch&)",
    "insertText": "operator(const FLegacySyncScopedBatch&)"
  },
  {
    "label": "FLegacySyncScopedBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacySyncScopedBatch(FLegacySyncScopedBatch&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLegacySyncScopedBatch&)",
    "insertText": "operator(FLegacySyncScopedBatch&&)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "ForceDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceDirty()"
  },
  {
    "label": "GetScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (private : FLegacySync* ElementListLegacySync = nullptr ; bool bNotify = true ; } ; FScopedClearNewPendingChange)",
    "insertText": "GetScopedClearNewPendingChange()"
  },
  {
    "label": "Legacy_GetSync()",
    "kind": "Method",
    "detail": "Function (FLegacySync&)",
    "insertText": "Legacy_GetSync()"
  },
  {
    "label": "Legacy_GetSyncPtr()",
    "kind": "Method",
    "detail": "Function (FLegacySync*)",
    "insertText": "Legacy_GetSyncPtr()"
  },
  {
    "label": "Private_CreateElementList()",
    "kind": "Method",
    "detail": "Function (TTypedElementListRef)",
    "insertText": "Private_CreateElementList(UTypedElementRegistry* InRegistry)"
  },
  {
    "label": "GetRegistry()",
    "kind": "Method",
    "detail": "Function (UTypedElementRegistry*)",
    "insertText": "GetRegistry()"
  },
  {
    "label": "TTypedElementList()",
    "kind": "Method",
    "detail": "Function (} private : enum class EChangeType : uint8 { Added,Removed,Cleared,} ;)",
    "insertText": "TTypedElementList(UTypedElementRegistry* InRegistry)"
  },
  {
    "label": "AddElementImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddElementImpl(HandleType&& InElementHandle)"
  },
  {
    "label": "RemoveElementImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveElementImpl(const FTypedElementId& InElementId)"
  },
  {
    "label": "RemoveAllElementsImpl()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllElementsImpl(TFunctionRef<bool(const HandleType&)> InPredicate)"
  },
  {
    "label": "ContainsElementImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsElementImpl(const FTypedElementId& InElementId)"
  },
  {
    "label": "NoteListChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteListChanged(const EChangeType InChangeType, const HandleType& InElementHandle = HandleType())"
  },
  {
    "label": "ConvertToNativeTypedElementList()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UTypedElementRegistry> Registry ; TSet<FTypedHandleCombinedId> ElementCombinedIds ; TArray<HandleType> ElementHandles ; FTypedElementCounter ElementCounts ; FOnPreChange OnPreChangeDelegate ; FOnChanged OnChangedDelegate ; bool bHasPendingNotify = false ; TUniquePtr<FLegacySync> LegacySync ; } ; namespace UE::TypedElementFramework { FTypedElementListPtr)",
    "insertText": "ConvertToNativeTypedElementList(const FScriptTypedElementListConstPtr& ScriptList)"
  },
  {
    "label": "ConvertToScriptTypedElementList()",
    "kind": "Method",
    "detail": "Function (FScriptTypedElementListPtr)",
    "insertText": "ConvertToScriptTypedElementList(const FTypedElementListConstPtr& NativeList)"
  }
]