[
  {
    "label": "RollingAccumulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RollingAccumulator"
  },
  {
    "label": "RollingAccumulator()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_ROLLING_ACCUMULATOR_H_ # define RTC_BASE_ROLLING_ACCUMULATOR_H_ # include<stddef . h> # include<algorithm> # include<vector> # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / running_statistics . h \" namespace rtc { template<T> class RollingAccumulator { public :)",
    "insertText": "RollingAccumulator(size_t max_count) : samples_(max_count)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(max_count > 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RollingAccumulator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RollingAccumulator()"
  },
  {
    "label": "RollingAccumulator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RollingAccumulator(const RollingAccumulator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RollingAccumulator&)",
    "insertText": "operator(const RollingAccumulator&)"
  },
  {
    "label": "max_count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "max_count()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "count()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (stats_ = webrtc::webrtc_impl::RunningStatistics<)",
    "insertText": "T()"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (min_stale_ = false ; } void)",
    "insertText": "AddSample(T sample)"
  },
  {
    "label": "RemoveSample()",
    "kind": "Method",
    "detail": "Function (T sample_to_remove = samples_ [ next_index_ ] ; stats_ .)",
    "insertText": "RemoveSample(sample_to_remove)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (max_stale_ = true ; })",
    "insertText": "if(sample_to_remove <= min_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (min_stale_ = true ; } } samples_ [ next_index_ ] = sample ;)",
    "insertText": "if(count() == 0 || sample >= max_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (max_ = sample ; max_stale_ = false ; })",
    "insertText": "if(count() == 0 || sample <= min_)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (min_ = sample ; min_stale_ = false ; } stats_ .)",
    "insertText": "AddSample(sample)"
  },
  {
    "label": "next_index_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "next_index_(next_index_ + 1) % max_count()"
  },
  {
    "label": "ComputeMean()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeMean()"
  },
  {
    "label": "ComputeMax()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "ComputeMax()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(count() > 0) << \"It shouldn't be possible for max_stale_ && count()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (max_ = samples_ [ next_index_ ] ;)",
    "insertText": "for(size_t i = 1u; i < count(); i++)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (max_ =)",
    "insertText": "max(max_, samples_[(next_index_ + i) % max_count()])"
  },
  {
    "label": "ComputeMin()",
    "kind": "Method",
    "detail": "Function (} max_stale_ = false ; } return max_ ; } T)",
    "insertText": "ComputeMin()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(count() > 0) << \"It shouldn't be possible for min_stale_ && count()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (min_ =)",
    "insertText": "min(min_, samples_[(next_index_ + i) % max_count()])"
  },
  {
    "label": "ComputeWeightedMean()",
    "kind": "Method",
    "detail": "Function (} min_stale_ = false ; } return min_ ; } double)",
    "insertText": "ComputeWeightedMean(double learning_rate)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (current_weight* = learning_rate ; weight_sum + = current_weight ; size_t)",
    "insertText": "index(next_index_ + max_size - i - 1)"
  },
  {
    "label": "ComputeVariance()",
    "kind": "Method",
    "detail": "Function (weighted_mean + = current_weight* samples_ [ index ] ; } return weighted_mean / weight_sum ; } double)",
    "insertText": "ComputeVariance()"
  }
]