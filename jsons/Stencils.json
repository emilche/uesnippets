[
  {
    "label": "BaseStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseStencil"
  },
  {
    "label": "SevenPt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SevenPt"
  },
  {
    "label": "SevenPointStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SevenPointStencil"
  },
  {
    "label": "BoxPt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoxPt"
  },
  {
    "label": "BoxStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoxStencil"
  },
  {
    "label": "DensePt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DensePt"
  },
  {
    "label": "SecondOrderDenseStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SecondOrderDenseStencil"
  },
  {
    "label": "ThirteenPt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThirteenPt"
  },
  {
    "label": "ThirteenPointStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThirteenPointStencil"
  },
  {
    "label": "FourthDensePt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FourthDensePt"
  },
  {
    "label": "FourthOrderDenseStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FourthOrderDenseStencil"
  },
  {
    "label": "NineteenPt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NineteenPt"
  },
  {
    "label": "NineteenPointStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NineteenPointStencil"
  },
  {
    "label": "SixthDensePt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SixthDensePt"
  },
  {
    "label": "SixthOrderDenseStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SixthOrderDenseStencil"
  },
  {
    "label": "GradPt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GradPt"
  },
  {
    "label": "GradStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GradStencil"
  },
  {
    "label": "WenoStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WenoStencil"
  },
  {
    "label": "CurvatureStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurvatureStencil"
  },
  {
    "label": "DenseStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseStencil"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_MATH_STENCILS_HAS_BEEN_INCLUDED # define OPENVDB_MATH_STENCILS_HAS_BEEN_INCLUDED # include<algorithm> # include<vector> # include<bitset> # include<openvdb / math / Math . h> # include<openvdb / Types . h> # include<openvdb / math / Coord . h> # include<openvdb / math / FiniteDifference . h> # include<openvdb / tree / ValueAccessor . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace math { template<DerivedType,GridT,bool IsSafe> class BaseStencil { public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridT::ValueType ValueType ; typedef tree::ValueAccessor<const TreeType,IsSafe> AccessorType ; typedef std::vector<ValueType> BufferType ; typedef BufferType::iterator IterType ; void)",
    "insertText": "moveTo(const Coord& ijk)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mCenter = ijk ; mValues [ 0 ] = mAcc .)",
    "insertText": "getValue(ijk)"
  },
  {
    "label": "DerivedType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "DerivedType(*this).init(mCenter)"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "moveTo(const Coord& ijk, const ValueType& centerValue)"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (} template<IterType> void)",
    "insertText": "moveTo(const IterType& iter)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (mCenter = iter .)",
    "insertText": "getCoord()"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (} template<RealType> void)",
    "insertText": "moveTo(const Vec3<RealType>& xyz)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (Coord ijk =)",
    "insertText": "floor(xyz)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const ValueType&)",
    "insertText": "getValue(unsigned int pos = 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pos < mValues.size())"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} template<int i,int j,int k> void)",
    "insertText": "setValue(const ValueType& value)"
  },
  {
    "label": "DerivedType()",
    "kind": "Method",
    "detail": "Function (mValues [ static_cast<const)",
    "insertText": "DerivedType(*this).template pos<i,j,k>()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "size()"
  },
  {
    "label": "median()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "median()"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (BufferType)",
    "insertText": "tmp(mValues)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!tmp.empty())"
  },
  {
    "label": "midpoint()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "midpoint(tmp.size() - 1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_MSC_VER) || _MSC_VER < 1924 std::nth_element(tmp.begin(), tmp.begin() + midpoint, tmp.end())"
  },
  {
    "label": "nth_element()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "nth_element(tmp.begin(), tmp.begin() + midpoint, tmp.end(), std::less<ValueType>())"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (# endif return tmp [ midpoint ] ; } ValueType)",
    "insertText": "mean()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueType sum = 0 . 0 ;)",
    "insertText": "for(int n = 0, s = int(mValues.size()); n < s; ++n)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "min()"
  },
  {
    "label": "min_element()",
    "kind": "Method",
    "detail": "Function (IterType iter =)",
    "insertText": "min_element(mValues.begin(), mValues.end())"
  },
  {
    "label": "max_element()",
    "kind": "Method",
    "detail": "Function (IterType iter =)",
    "insertText": "max_element(mValues.begin(), mValues.end())"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const bool less = this ->)",
    "insertText": "getValue()"
  },
  {
    "label": "intersectionMask()",
    "kind": "Method",
    "detail": "Function (} std::bitset<6>)",
    "insertText": "intersectionMask(const ValueType &isoValue = zeroVal<ValueType>())"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (mask [ 0 ] =)",
    "insertText": "less(this->getValue<-1, 0, 0>() < isoValue)"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (mask [ 1 ] =)",
    "insertText": "less(this->getValue< 1, 0, 0>() < isoValue)"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (mask [ 2 ] =)",
    "insertText": "less(this->getValue< 0,-1, 0>() < isoValue)"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (mask [ 3 ] =)",
    "insertText": "less(this->getValue< 0, 1, 0>() < isoValue)"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (mask [ 4 ] =)",
    "insertText": "less(this->getValue< 0, 0,-1>() < isoValue)"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (mask [ 5 ] =)",
    "insertText": "less(this->getValue< 0, 0, 1>() < isoValue)"
  },
  {
    "label": "SevenPointStencil()",
    "kind": "Method",
    "detail": "Function (} const GridType* mGrid ; AccessorType mAcc ; BufferType mValues ; Coord mCenter ; } ; namespace { template<int i,int j,int k> struct SevenPt { } ; template<> struct SevenPt<0,0,0> { enum { idx = 0 } ; } ; template<> struct SevenPt<1,0,0> { enum { idx = 1 } ; } ; template<> struct SevenPt<0,1,0> { enum { idx = 2 } ; } ; template<> struct SevenPt<0,0,1> { enum { idx = 3 } ; } ; template<> struct SevenPt<- 1,0,0> { enum { idx = 4 } ; } ; template<> struct SevenPt<0,- 1,0> { enum { idx = 5 } ; } ; template<> struct SevenPt<0,0,- 1> { enum { idx = 6 } ; } ; } template<GridT,bool IsSafe = true> class SevenPointStencil : public BaseStencil<SevenPointStencil<GridT,IsSafe>,GridT,IsSafe> { typedef SevenPointStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridT::ValueType ValueType ; const int SIZE = 7 ;)",
    "insertText": "SevenPointStencil(const GridT& grid): BaseType(grid, SIZE)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (} template<int i,int j,int k> unsigned int)",
    "insertText": "pos()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy(-1, 0, 0)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 1, 0, 0)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 0,-1, 0)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 0, 1, 0)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 0, 0,-1)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 0, 0, 1)))"
  },
  {
    "label": "BoxStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; } ; namespace { template<int i,int j,int k> struct BoxPt { } ; template<> struct BoxPt<0,0,0> { enum { idx = 0 } ; } ; template<> struct BoxPt<0,0,1> { enum { idx = 1 } ; } ; template<> struct BoxPt<0,1,1> { enum { idx = 2 } ; } ; template<> struct BoxPt<0,1,0> { enum { idx = 3 } ; } ; template<> struct BoxPt<1,0,0> { enum { idx = 4 } ; } ; template<> struct BoxPt<1,0,1> { enum { idx = 5 } ; } ; template<> struct BoxPt<1,1,1> { enum { idx = 6 } ; } ; template<> struct BoxPt<1,1,0> { enum { idx = 7 } ; } ; } template<GridT,bool IsSafe = true> class BoxStencil : public BaseStencil<BoxStencil<GridT,IsSafe>,GridT,IsSafe> { typedef BoxStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridT::ValueType ValueType ; const int SIZE = 8 ;)",
    "insertText": "BoxStencil(const GridType& grid): BaseType(grid, SIZE)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const bool less = mValues [ 0 ]<isoValue ;)",
    "insertText": "return(less ^ (mValues[1] < isoValue)) || (less ^ (mValues[2] < isoValue)) || (less ^ (mValues[3] < isoValue)) || (less ^ (mValues[4] < isoValue)) || (less ^ (mValues[5] < isoValue)) || (less ^ (mValues[6] < isoValue)) || (less ^ (mValues[7] < isoValue))"
  },
  {
    "label": "interpolation()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "interpolation(const math::Vec3<ValueType>& xyz)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN const ValueType u = xyz [ 0 ] - BaseType::mCenter [ 0 ] ; const ValueType v = xyz [ 1 ] - BaseType::mCenter [ 1 ] ; const ValueType w = xyz [ 2 ] - BaseType::mCenter [ 2 ] ; OPENVDB_NO_TYPE_CONVERSION_WARNING_END)",
    "insertText": "assert(u>=0 && u<=1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(v>=0 && v<=1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(w>=0 && w<=1)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType A = static_cast<)",
    "insertText": "ValueType(V + (BaseType::template getValue<0,0,1>() - V) * w)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType B = static_cast<)",
    "insertText": "ValueType(V + (BaseType::template getValue<0,1,1>() - V) * w)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType C = static_cast<)",
    "insertText": "ValueType(A + (B - A) * v)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (A = static_cast<)",
    "insertText": "ValueType(V + (BaseType::template getValue<1,0,1>() - V) * w)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (B = static_cast<)",
    "insertText": "ValueType(V + (BaseType::template getValue<1,1,1>() - V) * w)"
  },
  {
    "label": "gradient()",
    "kind": "Method",
    "detail": "Function (} math::Vec3<ValueType>)",
    "insertText": "gradient(const math::Vec3<ValueType>& xyz)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (ValueType D [ 4 ] = { BaseType::template)",
    "insertText": "getValue()-BaseType::template getValue<0,0,0>(), BaseType::template getValue<0,1,1>()-BaseType::template getValue<0,1,0>(), BaseType::template getValue<1,0,1>()-BaseType::template getValue<1,0,0>(), BaseType::template getValue<1,1,1>()-BaseType::template getValue<1,1,0>()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType A = static_cast<)",
    "insertText": "ValueType(D[0] + (D[1]- D[0]) * v)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType B = static_cast<)",
    "insertText": "ValueType(D[2] + (D[3]- D[2]) * v)"
  },
  {
    "label": "grad()",
    "kind": "Method",
    "detail": "Function (math::Vec3<ValueType>)",
    "insertText": "grad(zeroVal<ValueType>(), zeroVal<ValueType>(), static_cast<ValueType>(A + (B - A) * u))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (D [ 0 ] = static_cast<)",
    "insertText": "ValueType(BaseType::template getValue<0,0,0>() + D[0] * w)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (D [ 1 ] = static_cast<)",
    "insertText": "ValueType(BaseType::template getValue<0,1,0>() + D[1] * w)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (D [ 2 ] = static_cast<)",
    "insertText": "ValueType(BaseType::template getValue<1,0,0>() + D[2] * w)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (D [ 3 ] = static_cast<)",
    "insertText": "ValueType(BaseType::template getValue<1,1,0>() + D[3] * w)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (A = static_cast<)",
    "insertText": "ValueType(D[0] + (D[1] - D[0]) * v)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (B = static_cast<)",
    "insertText": "ValueType(D[2] + (D[3] - D[2]) * v)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (grad [ 0 ] = B - A ; A = D [ 1 ] - D [ 0 ] ; B = D [ 3 ] - D [ 2 ] ; grad [ 1 ] = static_cast<)",
    "insertText": "ValueType(A + (B - A) * u)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "init(const Coord& ijk)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 0, 1, 1)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 1, 0, 1)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 1, 1, 1)))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (BaseType::template)",
    "insertText": "setValue(mAcc.getValue(ijk.offsetBy( 1, 1, 0)))"
  },
  {
    "label": "SecondOrderDenseStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; } ; namespace { template<int i,int j,int k> struct DensePt { } ; template<> struct DensePt<0,0,0> { enum { idx = 0 } ; } ; template<> struct DensePt<1,0,0> { enum { idx = 1 } ; } ; template<> struct DensePt<0,1,0> { enum { idx = 2 } ; } ; template<> struct DensePt<0,0,1> { enum { idx = 3 } ; } ; template<> struct DensePt<- 1,0,0> { enum { idx = 4 } ; } ; template<> struct DensePt<0,- 1,0> { enum { idx = 5 } ; } ; template<> struct DensePt<0,0,- 1> { enum { idx = 6 } ; } ; template<> struct DensePt<- 1,- 1,0> { enum { idx = 7 } ; } ; template<> struct DensePt<0,- 1,- 1> { enum { idx = 8 } ; } ; template<> struct DensePt<- 1,0,- 1> { enum { idx = 9 } ; } ; template<> struct DensePt<1,- 1,0> { enum { idx = 1 0 } ; } ; template<> struct DensePt<0,1,- 1> { enum { idx = 1 1 } ; } ; template<> struct DensePt<- 1,0,1> { enum { idx = 1 2 } ; } ; template<> struct DensePt<- 1,1,0> { enum { idx = 1 3 } ; } ; template<> struct DensePt<0,- 1,1> { enum { idx = 1 4 } ; } ; template<> struct DensePt<1,0,- 1> { enum { idx = 1 5 } ; } ; template<> struct DensePt<1,1,0> { enum { idx = 1 6 } ; } ; template<> struct DensePt<0,1,1> { enum { idx = 1 7 } ; } ; template<> struct DensePt<1,0,1> { enum { idx = 1 8 } ; } ; } template<GridT,bool IsSafe = true> class SecondOrderDenseStencil : public BaseStencil<SecondOrderDenseStencil<GridT,IsSafe>,GridT,IsSafe> { typedef SecondOrderDenseStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridType::ValueType ValueType ; const int SIZE = 1 9 ;)",
    "insertText": "SecondOrderDenseStencil(const GridType& grid): BaseType(grid, SIZE)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<1,0,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,0,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<- 1,0,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, -1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0, -1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<- 1,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, -1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<1,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, -1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<- 1,1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<1,1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<- 1,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0, -1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<1,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0, -1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<- 1,0,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<1,0,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,- 1,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, -1, -1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,1,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1, -1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,- 1,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, -1, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ DensePt<0,1,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1, 1))"
  },
  {
    "label": "ThirteenPointStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; } ; namespace { template<int i,int j,int k> struct ThirteenPt { } ; template<> struct ThirteenPt<0,0,0> { enum { idx = 0 } ; } ; template<> struct ThirteenPt<1,0,0> { enum { idx = 1 } ; } ; template<> struct ThirteenPt<0,1,0> { enum { idx = 2 } ; } ; template<> struct ThirteenPt<0,0,1> { enum { idx = 3 } ; } ; template<> struct ThirteenPt<- 1,0,0> { enum { idx = 4 } ; } ; template<> struct ThirteenPt<0,- 1,0> { enum { idx = 5 } ; } ; template<> struct ThirteenPt<0,0,- 1> { enum { idx = 6 } ; } ; template<> struct ThirteenPt<2,0,0> { enum { idx = 7 } ; } ; template<> struct ThirteenPt<0,2,0> { enum { idx = 8 } ; } ; template<> struct ThirteenPt<0,0,2> { enum { idx = 9 } ; } ; template<> struct ThirteenPt<- 2,0,0> { enum { idx = 1 0 } ; } ; template<> struct ThirteenPt<0,- 2,0> { enum { idx = 1 1 } ; } ; template<> struct ThirteenPt<0,0,- 2> { enum { idx = 1 2 } ; } ; } template<GridT,bool IsSafe = true> class ThirteenPointStencil : public BaseStencil<ThirteenPointStencil<GridT,IsSafe>,GridT,IsSafe> { typedef ThirteenPointStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridType::ValueType ValueType ; const int SIZE = 1 3 ;)",
    "insertText": "ThirteenPointStencil(const GridType& grid): BaseType(grid, SIZE)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ ThirteenPt<2,0,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 0, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ ThirteenPt<- 2,0,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 0, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ ThirteenPt<0,2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ ThirteenPt<0,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, -2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ ThirteenPt<0,0,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ ThirteenPt<0,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0, -2))"
  },
  {
    "label": "FourthOrderDenseStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; } ; namespace { template<int i,int j,int k> struct FourthDensePt { } ; template<> struct FourthDensePt<0,0,0> { enum { idx = 0 } ; } ; template<> struct FourthDensePt<- 2,2,0> { enum { idx = 1 } ; } ; template<> struct FourthDensePt<- 1,2,0> { enum { idx = 2 } ; } ; template<> struct FourthDensePt<0,2,0> { enum { idx = 3 } ; } ; template<> struct FourthDensePt<1,2,0> { enum { idx = 4 } ; } ; template<> struct FourthDensePt<2,2,0> { enum { idx = 5 } ; } ; template<> struct FourthDensePt<- 2,1,0> { enum { idx = 6 } ; } ; template<> struct FourthDensePt<- 1,1,0> { enum { idx = 7 } ; } ; template<> struct FourthDensePt<0,1,0> { enum { idx = 8 } ; } ; template<> struct FourthDensePt<1,1,0> { enum { idx = 9 } ; } ; template<> struct FourthDensePt<2,1,0> { enum { idx = 1 0 } ; } ; template<> struct FourthDensePt<- 2,0,0> { enum { idx = 1 1 } ; } ; template<> struct FourthDensePt<- 1,0,0> { enum { idx = 1 2 } ; } ; template<> struct FourthDensePt<1,0,0> { enum { idx = 1 3 } ; } ; template<> struct FourthDensePt<2,0,0> { enum { idx = 1 4 } ; } ; template<> struct FourthDensePt<- 2,- 1,0> { enum { idx = 1 5 } ; } ; template<> struct FourthDensePt<- 1,- 1,0> { enum { idx = 1 6 } ; } ; template<> struct FourthDensePt<0,- 1,0> { enum { idx = 1 7 } ; } ; template<> struct FourthDensePt<1,- 1,0> { enum { idx = 1 8 } ; } ; template<> struct FourthDensePt<2,- 1,0> { enum { idx = 1 9 } ; } ; template<> struct FourthDensePt<- 2,- 2,0> { enum { idx = 2 0 } ; } ; template<> struct FourthDensePt<- 1,- 2,0> { enum { idx = 2 1 } ; } ; template<> struct FourthDensePt<0,- 2,0> { enum { idx = 2 2 } ; } ; template<> struct FourthDensePt<1,- 2,0> { enum { idx = 2 3 } ; } ; template<> struct FourthDensePt<2,- 2,0> { enum { idx = 2 4 } ; } ; template<> struct FourthDensePt<- 2,0,2> { enum { idx = 2 5 } ; } ; template<> struct FourthDensePt<- 1,0,2> { enum { idx = 2 6 } ; } ; template<> struct FourthDensePt<0,0,2> { enum { idx = 2 7 } ; } ; template<> struct FourthDensePt<1,0,2> { enum { idx = 2 8 } ; } ; template<> struct FourthDensePt<2,0,2> { enum { idx = 2 9 } ; } ; template<> struct FourthDensePt<- 2,0,1> { enum { idx = 3 0 } ; } ; template<> struct FourthDensePt<- 1,0,1> { enum { idx = 3 1 } ; } ; template<> struct FourthDensePt<0,0,1> { enum { idx = 3 2 } ; } ; template<> struct FourthDensePt<1,0,1> { enum { idx = 3 3 } ; } ; template<> struct FourthDensePt<2,0,1> { enum { idx = 3 4 } ; } ; template<> struct FourthDensePt<- 2,0,- 1> { enum { idx = 3 5 } ; } ; template<> struct FourthDensePt<- 1,0,- 1> { enum { idx = 3 6 } ; } ; template<> struct FourthDensePt<0,0,- 1> { enum { idx = 3 7 } ; } ; template<> struct FourthDensePt<1,0,- 1> { enum { idx = 3 8 } ; } ; template<> struct FourthDensePt<2,0,- 1> { enum { idx = 3 9 } ; } ; template<> struct FourthDensePt<- 2,0,- 2> { enum { idx = 4 0 } ; } ; template<> struct FourthDensePt<- 1,0,- 2> { enum { idx = 4 1 } ; } ; template<> struct FourthDensePt<0,0,- 2> { enum { idx = 4 2 } ; } ; template<> struct FourthDensePt<1,0,- 2> { enum { idx = 4 3 } ; } ; template<> struct FourthDensePt<2,0,- 2> { enum { idx = 4 4 } ; } ; template<> struct FourthDensePt<0,- 2,2> { enum { idx = 4 5 } ; } ; template<> struct FourthDensePt<0,- 1,2> { enum { idx = 4 6 } ; } ; template<> struct FourthDensePt<0,1,2> { enum { idx = 4 7 } ; } ; template<> struct FourthDensePt<0,2,2> { enum { idx = 4 8 } ; } ; template<> struct FourthDensePt<0,- 2,1> { enum { idx = 4 9 } ; } ; template<> struct FourthDensePt<0,- 1,1> { enum { idx = 5 0 } ; } ; template<> struct FourthDensePt<0,1,1> { enum { idx = 5 1 } ; } ; template<> struct FourthDensePt<0,2,1> { enum { idx = 5 2 } ; } ; template<> struct FourthDensePt<0,- 2,- 1> { enum { idx = 5 3 } ; } ; template<> struct FourthDensePt<0,- 1,- 1> { enum { idx = 5 4 } ; } ; template<> struct FourthDensePt<0,1,- 1> { enum { idx = 5 5 } ; } ; template<> struct FourthDensePt<0,2,- 1> { enum { idx = 5 6 } ; } ; template<> struct FourthDensePt<0,- 2,- 2> { enum { idx = 5 7 } ; } ; template<> struct FourthDensePt<0,- 1,- 2> { enum { idx = 5 8 } ; } ; template<> struct FourthDensePt<0,1,- 2> { enum { idx = 5 9 } ; } ; template<> struct FourthDensePt<0,2,- 2> { enum { idx = 6 0 } ; } ; } template<GridT,bool IsSafe = true> class FourthOrderDenseStencil : public BaseStencil<FourthOrderDenseStencil<GridT,IsSafe>,GridT,IsSafe> { typedef FourthOrderDenseStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridType::ValueType ValueType ; const int SIZE = 6 1 ;)",
    "insertText": "FourthOrderDenseStencil(const GridType& grid): BaseType(grid, SIZE)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 1,2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<1,2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2,-1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 1,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1,-1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<1,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1,-1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2,-1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2,-2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 1,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1,-2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<1,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1,-2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2,-2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,0,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 0, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 1,0,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<1,0,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,0,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 0, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,0,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 0, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,0,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 0, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 0,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 1,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<1,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 0,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 2,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 0,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<- 1,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<1,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<2,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 0,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 2,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-2, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 1,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-1, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,1,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,2,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 2, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 2,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-2, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 1,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-1, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,2,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 2, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 2,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-2,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 1,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-1,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,1,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,2,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 2,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 2,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-2,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,- 1,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-1,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,1,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ FourthDensePt<0,2,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 2,-2))"
  },
  {
    "label": "NineteenPointStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; } ; namespace { template<int i,int j,int k> struct NineteenPt { } ; template<> struct NineteenPt<0,0,0> { enum { idx = 0 } ; } ; template<> struct NineteenPt<1,0,0> { enum { idx = 1 } ; } ; template<> struct NineteenPt<0,1,0> { enum { idx = 2 } ; } ; template<> struct NineteenPt<0,0,1> { enum { idx = 3 } ; } ; template<> struct NineteenPt<- 1,0,0> { enum { idx = 4 } ; } ; template<> struct NineteenPt<0,- 1,0> { enum { idx = 5 } ; } ; template<> struct NineteenPt<0,0,- 1> { enum { idx = 6 } ; } ; template<> struct NineteenPt<2,0,0> { enum { idx = 7 } ; } ; template<> struct NineteenPt<0,2,0> { enum { idx = 8 } ; } ; template<> struct NineteenPt<0,0,2> { enum { idx = 9 } ; } ; template<> struct NineteenPt<- 2,0,0> { enum { idx = 1 0 } ; } ; template<> struct NineteenPt<0,- 2,0> { enum { idx = 1 1 } ; } ; template<> struct NineteenPt<0,0,- 2> { enum { idx = 1 2 } ; } ; template<> struct NineteenPt<3,0,0> { enum { idx = 1 3 } ; } ; template<> struct NineteenPt<0,3,0> { enum { idx = 1 4 } ; } ; template<> struct NineteenPt<0,0,3> { enum { idx = 1 5 } ; } ; template<> struct NineteenPt<- 3,0,0> { enum { idx = 1 6 } ; } ; template<> struct NineteenPt<0,- 3,0> { enum { idx = 1 7 } ; } ; template<> struct NineteenPt<0,0,- 3> { enum { idx = 1 8 } ; } ; } template<GridT,bool IsSafe = true> class NineteenPointStencil : public BaseStencil<NineteenPointStencil<GridT,IsSafe>,GridT,IsSafe> { typedef NineteenPointStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridType::ValueType ValueType ; const int SIZE = 1 9 ;)",
    "insertText": "NineteenPointStencil(const GridType& grid): BaseType(grid, SIZE)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ NineteenPt<3,0,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 0, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ NineteenPt<- 3,0,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 0, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ NineteenPt<0,3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ NineteenPt<0,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, -3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ NineteenPt<0,0,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ NineteenPt<0,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0, -3))"
  },
  {
    "label": "SixthOrderDenseStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; } ; namespace { template<int i,int j,int k> struct SixthDensePt { } ; template<> struct SixthDensePt<0,0,0> { enum { idx = 0 } ; } ; template<> struct SixthDensePt<- 3,3,0> { enum { idx = 1 } ; } ; template<> struct SixthDensePt<- 2,3,0> { enum { idx = 2 } ; } ; template<> struct SixthDensePt<- 1,3,0> { enum { idx = 3 } ; } ; template<> struct SixthDensePt<0,3,0> { enum { idx = 4 } ; } ; template<> struct SixthDensePt<1,3,0> { enum { idx = 5 } ; } ; template<> struct SixthDensePt<2,3,0> { enum { idx = 6 } ; } ; template<> struct SixthDensePt<3,3,0> { enum { idx = 7 } ; } ; template<> struct SixthDensePt<- 3,2,0> { enum { idx = 8 } ; } ; template<> struct SixthDensePt<- 2,2,0> { enum { idx = 9 } ; } ; template<> struct SixthDensePt<- 1,2,0> { enum { idx = 1 0 } ; } ; template<> struct SixthDensePt<0,2,0> { enum { idx = 1 1 } ; } ; template<> struct SixthDensePt<1,2,0> { enum { idx = 1 2 } ; } ; template<> struct SixthDensePt<2,2,0> { enum { idx = 1 3 } ; } ; template<> struct SixthDensePt<3,2,0> { enum { idx = 1 4 } ; } ; template<> struct SixthDensePt<- 3,1,0> { enum { idx = 1 5 } ; } ; template<> struct SixthDensePt<- 2,1,0> { enum { idx = 1 6 } ; } ; template<> struct SixthDensePt<- 1,1,0> { enum { idx = 1 7 } ; } ; template<> struct SixthDensePt<0,1,0> { enum { idx = 1 8 } ; } ; template<> struct SixthDensePt<1,1,0> { enum { idx = 1 9 } ; } ; template<> struct SixthDensePt<2,1,0> { enum { idx = 2 0 } ; } ; template<> struct SixthDensePt<3,1,0> { enum { idx = 2 1 } ; } ; template<> struct SixthDensePt<- 3,0,0> { enum { idx = 2 2 } ; } ; template<> struct SixthDensePt<- 2,0,0> { enum { idx = 2 3 } ; } ; template<> struct SixthDensePt<- 1,0,0> { enum { idx = 2 4 } ; } ; template<> struct SixthDensePt<1,0,0> { enum { idx = 2 5 } ; } ; template<> struct SixthDensePt<2,0,0> { enum { idx = 2 6 } ; } ; template<> struct SixthDensePt<3,0,0> { enum { idx = 2 7 } ; } ; template<> struct SixthDensePt<- 3,- 1,0> { enum { idx = 2 8 } ; } ; template<> struct SixthDensePt<- 2,- 1,0> { enum { idx = 2 9 } ; } ; template<> struct SixthDensePt<- 1,- 1,0> { enum { idx = 3 0 } ; } ; template<> struct SixthDensePt<0,- 1,0> { enum { idx = 3 1 } ; } ; template<> struct SixthDensePt<1,- 1,0> { enum { idx = 3 2 } ; } ; template<> struct SixthDensePt<2,- 1,0> { enum { idx = 3 3 } ; } ; template<> struct SixthDensePt<3,- 1,0> { enum { idx = 3 4 } ; } ; template<> struct SixthDensePt<- 3,- 2,0> { enum { idx = 3 5 } ; } ; template<> struct SixthDensePt<- 2,- 2,0> { enum { idx = 3 6 } ; } ; template<> struct SixthDensePt<- 1,- 2,0> { enum { idx = 3 7 } ; } ; template<> struct SixthDensePt<0,- 2,0> { enum { idx = 3 8 } ; } ; template<> struct SixthDensePt<1,- 2,0> { enum { idx = 3 9 } ; } ; template<> struct SixthDensePt<2,- 2,0> { enum { idx = 4 0 } ; } ; template<> struct SixthDensePt<3,- 2,0> { enum { idx = 4 1 } ; } ; template<> struct SixthDensePt<- 3,- 3,0> { enum { idx = 4 2 } ; } ; template<> struct SixthDensePt<- 2,- 3,0> { enum { idx = 4 3 } ; } ; template<> struct SixthDensePt<- 1,- 3,0> { enum { idx = 4 4 } ; } ; template<> struct SixthDensePt<0,- 3,0> { enum { idx = 4 5 } ; } ; template<> struct SixthDensePt<1,- 3,0> { enum { idx = 4 6 } ; } ; template<> struct SixthDensePt<2,- 3,0> { enum { idx = 4 7 } ; } ; template<> struct SixthDensePt<3,- 3,0> { enum { idx = 4 8 } ; } ; template<> struct SixthDensePt<- 3,0,3> { enum { idx = 4 9 } ; } ; template<> struct SixthDensePt<- 2,0,3> { enum { idx = 5 0 } ; } ; template<> struct SixthDensePt<- 1,0,3> { enum { idx = 5 1 } ; } ; template<> struct SixthDensePt<0,0,3> { enum { idx = 5 2 } ; } ; template<> struct SixthDensePt<1,0,3> { enum { idx = 5 3 } ; } ; template<> struct SixthDensePt<2,0,3> { enum { idx = 5 4 } ; } ; template<> struct SixthDensePt<3,0,3> { enum { idx = 5 5 } ; } ; template<> struct SixthDensePt<- 3,0,2> { enum { idx = 5 6 } ; } ; template<> struct SixthDensePt<- 2,0,2> { enum { idx = 5 7 } ; } ; template<> struct SixthDensePt<- 1,0,2> { enum { idx = 5 8 } ; } ; template<> struct SixthDensePt<0,0,2> { enum { idx = 5 9 } ; } ; template<> struct SixthDensePt<1,0,2> { enum { idx = 6 0 } ; } ; template<> struct SixthDensePt<2,0,2> { enum { idx = 6 1 } ; } ; template<> struct SixthDensePt<3,0,2> { enum { idx = 6 2 } ; } ; template<> struct SixthDensePt<- 3,0,1> { enum { idx = 6 3 } ; } ; template<> struct SixthDensePt<- 2,0,1> { enum { idx = 6 4 } ; } ; template<> struct SixthDensePt<- 1,0,1> { enum { idx = 6 5 } ; } ; template<> struct SixthDensePt<0,0,1> { enum { idx = 6 6 } ; } ; template<> struct SixthDensePt<1,0,1> { enum { idx = 6 7 } ; } ; template<> struct SixthDensePt<2,0,1> { enum { idx = 6 8 } ; } ; template<> struct SixthDensePt<3,0,1> { enum { idx = 6 9 } ; } ; template<> struct SixthDensePt<- 3,0,- 1> { enum { idx = 7 0 } ; } ; template<> struct SixthDensePt<- 2,0,- 1> { enum { idx = 7 1 } ; } ; template<> struct SixthDensePt<- 1,0,- 1> { enum { idx = 7 2 } ; } ; template<> struct SixthDensePt<0,0,- 1> { enum { idx = 7 3 } ; } ; template<> struct SixthDensePt<1,0,- 1> { enum { idx = 7 4 } ; } ; template<> struct SixthDensePt<2,0,- 1> { enum { idx = 7 5 } ; } ; template<> struct SixthDensePt<3,0,- 1> { enum { idx = 7 6 } ; } ; template<> struct SixthDensePt<- 3,0,- 2> { enum { idx = 7 7 } ; } ; template<> struct SixthDensePt<- 2,0,- 2> { enum { idx = 7 8 } ; } ; template<> struct SixthDensePt<- 1,0,- 2> { enum { idx = 7 9 } ; } ; template<> struct SixthDensePt<0,0,- 2> { enum { idx = 8 0 } ; } ; template<> struct SixthDensePt<1,0,- 2> { enum { idx = 8 1 } ; } ; template<> struct SixthDensePt<2,0,- 2> { enum { idx = 8 2 } ; } ; template<> struct SixthDensePt<3,0,- 2> { enum { idx = 8 3 } ; } ; template<> struct SixthDensePt<- 3,0,- 3> { enum { idx = 8 4 } ; } ; template<> struct SixthDensePt<- 2,0,- 3> { enum { idx = 8 5 } ; } ; template<> struct SixthDensePt<- 1,0,- 3> { enum { idx = 8 6 } ; } ; template<> struct SixthDensePt<0,0,- 3> { enum { idx = 8 7 } ; } ; template<> struct SixthDensePt<1,0,- 3> { enum { idx = 8 8 } ; } ; template<> struct SixthDensePt<2,0,- 3> { enum { idx = 8 9 } ; } ; template<> struct SixthDensePt<3,0,- 3> { enum { idx = 9 0 } ; } ; template<> struct SixthDensePt<0,- 3,3> { enum { idx = 9 1 } ; } ; template<> struct SixthDensePt<0,- 2,3> { enum { idx = 9 2 } ; } ; template<> struct SixthDensePt<0,- 1,3> { enum { idx = 9 3 } ; } ; template<> struct SixthDensePt<0,1,3> { enum { idx = 9 4 } ; } ; template<> struct SixthDensePt<0,2,3> { enum { idx = 9 5 } ; } ; template<> struct SixthDensePt<0,3,3> { enum { idx = 9 6 } ; } ; template<> struct SixthDensePt<0,- 3,2> { enum { idx = 9 7 } ; } ; template<> struct SixthDensePt<0,- 2,2> { enum { idx = 9 8 } ; } ; template<> struct SixthDensePt<0,- 1,2> { enum { idx = 9 9 } ; } ; template<> struct SixthDensePt<0,1,2> { enum { idx = 1 0 0 } ; } ; template<> struct SixthDensePt<0,2,2> { enum { idx = 1 0 1 } ; } ; template<> struct SixthDensePt<0,3,2> { enum { idx = 1 0 2 } ; } ; template<> struct SixthDensePt<0,- 3,1> { enum { idx = 1 0 3 } ; } ; template<> struct SixthDensePt<0,- 2,1> { enum { idx = 1 0 4 } ; } ; template<> struct SixthDensePt<0,- 1,1> { enum { idx = 1 0 5 } ; } ; template<> struct SixthDensePt<0,1,1> { enum { idx = 1 0 6 } ; } ; template<> struct SixthDensePt<0,2,1> { enum { idx = 1 0 7 } ; } ; template<> struct SixthDensePt<0,3,1> { enum { idx = 1 0 8 } ; } ; template<> struct SixthDensePt<0,- 3,- 1> { enum { idx = 1 0 9 } ; } ; template<> struct SixthDensePt<0,- 2,- 1> { enum { idx = 1 1 0 } ; } ; template<> struct SixthDensePt<0,- 1,- 1> { enum { idx = 1 1 1 } ; } ; template<> struct SixthDensePt<0,1,- 1> { enum { idx = 1 1 2 } ; } ; template<> struct SixthDensePt<0,2,- 1> { enum { idx = 1 1 3 } ; } ; template<> struct SixthDensePt<0,3,- 1> { enum { idx = 1 1 4 } ; } ; template<> struct SixthDensePt<0,- 3,- 2> { enum { idx = 1 1 5 } ; } ; template<> struct SixthDensePt<0,- 2,- 2> { enum { idx = 1 1 6 } ; } ; template<> struct SixthDensePt<0,- 1,- 2> { enum { idx = 1 1 7 } ; } ; template<> struct SixthDensePt<0,1,- 2> { enum { idx = 1 1 8 } ; } ; template<> struct SixthDensePt<0,2,- 2> { enum { idx = 1 1 9 } ; } ; template<> struct SixthDensePt<0,3,- 2> { enum { idx = 1 2 0 } ; } ; template<> struct SixthDensePt<0,- 3,- 3> { enum { idx = 1 2 1 } ; } ; template<> struct SixthDensePt<0,- 2,- 3> { enum { idx = 1 2 2 } ; } ; template<> struct SixthDensePt<0,- 1,- 3> { enum { idx = 1 2 3 } ; } ; template<> struct SixthDensePt<0,1,- 3> { enum { idx = 1 2 4 } ; } ; template<> struct SixthDensePt<0,2,- 3> { enum { idx = 1 2 5 } ; } ; template<> struct SixthDensePt<0,3,- 3> { enum { idx = 1 2 6 } ; } ; } template<GridT,bool IsSafe = true> class SixthOrderDenseStencil : public BaseStencil<SixthOrderDenseStencil<GridT,IsSafe>,GridT,IsSafe> { typedef SixthOrderDenseStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridType::ValueType ValueType ; const int SIZE = 1 2 7 ;)",
    "insertText": "SixthOrderDenseStencil(const GridType& grid): BaseType(grid, SIZE)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 2,3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 1,3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<1,3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<2,3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3,-1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,- 1,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3,-1, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3,-2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,- 2,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3,-2, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3,-3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 2,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2,-3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 1,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1,-3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<1,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1,-3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<2,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2,-3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,- 3,0>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3,-3, 0))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,0,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 0, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 2,0,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 0, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 1,0,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<1,0,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<2,0,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 0, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,0,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 0, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,0,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 0, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,0,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 0, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,0,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 0, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,0,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 0, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 0,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,0,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 0,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 0,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,0,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 0,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 3,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-3, 0,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 2,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-2, 0,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<- 1,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy(-1, 0,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 0,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<1,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 1, 0,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<2,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 2, 0,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<3,0,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 3, 0,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 3,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-3, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 2,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-2, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 1,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-1, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,1,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,2,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 2, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,3,3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 3, 3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 3,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-3, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,3,2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 3, 2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 3,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-3, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,3,1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 3, 1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 3,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-3,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,3,- 1>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 3,-1))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 3,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-3,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,3,- 2>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 3,-2))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 3,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-3,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 2,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-2,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,- 1,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0,-1,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,1,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 1,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,2,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 2,-3))"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ SixthDensePt<0,3,- 3>::idx ] = mAcc .)",
    "insertText": "getValue(ijk.offsetBy( 0, 3,-3))"
  },
  {
    "label": "GradStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; } ; namespace { template<int i,int j,int k> struct GradPt { } ; template<> struct GradPt<0,0,0> { enum { idx = 0 } ; } ; template<> struct GradPt<1,0,0> { enum { idx = 2 } ; } ; template<> struct GradPt<0,1,0> { enum { idx = 4 } ; } ; template<> struct GradPt<0,0,1> { enum { idx = 6 } ; } ; template<> struct GradPt<- 1,0,0> { enum { idx = 1 } ; } ; template<> struct GradPt<0,- 1,0> { enum { idx = 3 } ; } ; template<> struct GradPt<0,0,- 1> { enum { idx = 5 } ; } ; } template<GridT,bool IsSafe = true> class GradStencil : public BaseStencil<GradStencil<GridT,IsSafe>,GridT,IsSafe> { typedef GradStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridType::ValueType ValueType ; const int SIZE = 7 ;)",
    "insertText": "GradStencil(const GridType& grid) : BaseType(grid, SIZE) , mInv2Dx(ValueType(0.5 / grid.voxelSize()[0])) , mInvDx2(ValueType(4.0 * mInv2Dx * mInv2Dx))"
  },
  {
    "label": "GradStencil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GradStencil(const GridType& grid, Real dx) : BaseType(grid, SIZE) , mInv2Dx(ValueType(0.5 / dx)) , mInvDx2(ValueType(4.0 * mInv2Dx * mInv2Dx))"
  },
  {
    "label": "normSqGrad()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "normSqGrad()"
  },
  {
    "label": "gradient()",
    "kind": "Method",
    "detail": "Function (} math::Vec3<ValueType>)",
    "insertText": "gradient()"
  },
  {
    "label": "gradient()",
    "kind": "Method",
    "detail": "Function (} math::Vec3<ValueType>)",
    "insertText": "gradient(const math::Vec3<ValueType>& V)"
  },
  {
    "label": "laplacian()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "laplacian()"
  },
  {
    "label": "zeroCrossing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "zeroCrossing()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const BaseType::BufferType& v = mValues ;)",
    "insertText": "return(v[0]>0 ? (v[1]<0 || v[2]<0 || v[3]<0 || v[4]<0 || v[5]<0 || v[6]<0) : (v[1]>0 || v[2]>0 || v[3]>0 || v[4]>0 || v[5]>0 || v[6]>0))"
  },
  {
    "label": "cpt()",
    "kind": "Method",
    "detail": "Function (} math::Vec3<ValueType>)",
    "insertText": "cpt()"
  },
  {
    "label": "getCenterCoord()",
    "kind": "Method",
    "detail": "Function (const Coord& ijk =)",
    "insertText": "getCenterCoord()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (const ValueType d =)",
    "insertText": "ValueType(mValues[0] * 0.5 * mInvDx2)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN const auto value = math::Vec3<)",
    "insertText": "ValueType(ijk[0] - d*(mValues[2] - mValues[1]), ijk[1] - d*(mValues[4] - mValues[3]), ijk[2] - d*(mValues[6] - mValues[5]))"
  },
  {
    "label": "WenoStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; const ValueType mInv2Dx,mInvDx2 ; } ; template<GridT,bool IsSafe = true> class WenoStencil : public BaseStencil<WenoStencil<GridT,IsSafe>,GridT,IsSafe> { typedef WenoStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridType::ValueType ValueType ; const int SIZE = 1 9 ;)",
    "insertText": "WenoStencil(const GridType& grid) : BaseType(grid, SIZE) , mDx2(ValueType(math::Pow2(grid.voxelSize()[0]))) , mInv2Dx(ValueType(0.5 / grid.voxelSize()[0])) , mInvDx2(ValueType(1.0 / mDx2))"
  },
  {
    "label": "WenoStencil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WenoStencil(const GridType& grid, Real dx) : BaseType(grid, SIZE) , mDx2(ValueType(dx * dx)) , mInv2Dx(ValueType(0.5 / dx)) , mInvDx2(ValueType(1.0 / mDx2))"
  },
  {
    "label": "normSqGrad()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "normSqGrad(const ValueType &isoValue = zeroVal<ValueType>())"
  },
  {
    "label": "v1()",
    "kind": "Method",
    "detail": "Function (const BaseType::BufferType& v = mValues ; # ifdef DWA_OPENVDB const simd::Float4)",
    "insertText": "v1(v[2]-v[1], v[ 8]-v[ 7], v[14]-v[13], 0), v2(v[3]-v[2], v[ 9]-v[ 8], v[15]-v[14], 0), v3(v[0]-v[3], v[ 0]-v[ 9], v[ 0]-v[15], 0), v4(v[4]-v[0], v[10]-v[ 0], v[16]-v[ 0], 0), v5(v[5]-v[4], v[11]-v[10], v[17]-v[16], 0), v6(v[6]-v[5], v[12]-v[11], v[18]-v[17], 0), dP_m = math::WENO5(v1, v2, v3, v4, v5, mDx2), dP_p = math::WENO5(v6, v5, v4, v3, v2, mDx2)"
  },
  {
    "label": "WENO5()",
    "kind": "Method",
    "detail": "Function (# else const Real dP_xm =)",
    "insertText": "WENO5(v[ 2]-v[ 1],v[ 3]-v[ 2],v[ 0]-v[ 3],v[ 4]-v[ 0],v[ 5]-v[ 4],mDx2), dP_xp = math::WENO5(v[ 6]-v[ 5],v[ 5]-v[ 4],v[ 4]-v[ 0],v[ 0]-v[ 3],v[ 3]-v[ 2],mDx2), dP_ym = math::WENO5(v[ 8]-v[ 7],v[ 9]-v[ 8],v[ 0]-v[ 9],v[10]-v[ 0],v[11]-v[10],mDx2), dP_yp = math::WENO5(v[12]-v[11],v[11]-v[10],v[10]-v[ 0],v[ 0]-v[ 9],v[ 9]-v[ 8],mDx2), dP_zm = math::WENO5(v[14]-v[13],v[15]-v[14],v[ 0]-v[15],v[16]-v[ 0],v[17]-v[16],mDx2), dP_zp = math::WENO5(v[18]-v[17],v[17]-v[16],v[16]-v[ 0],v[ 0]-v[15],v[15]-v[14],mDx2)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (const BaseType::BufferType& v = mValues ; return 2* mInv2Dx* math::Vec3<)",
    "insertText": "ValueType(V[0]>0 ? math::WENO5(v[ 2]-v[ 1],v[ 3]-v[ 2],v[ 0]-v[ 3], v[ 4]-v[ 0],v[ 5]-v[ 4],mDx2) : math::WENO5(v[ 6]-v[ 5],v[ 5]-v[ 4],v[ 4]-v[ 0], v[ 0]-v[ 3],v[ 3]-v[ 2],mDx2), V[1]>0 ? math::WENO5(v[ 8]-v[ 7],v[ 9]-v[ 8],v[ 0]-v[ 9], v[10]-v[ 0],v[11]-v[10],mDx2) : math::WENO5(v[12]-v[11],v[11]-v[10],v[10]-v[ 0], v[ 0]-v[ 9],v[ 9]-v[ 8],mDx2), V[2]>0 ? math::WENO5(v[14]-v[13],v[15]-v[14],v[ 0]-v[15], v[16]-v[ 0],v[17]-v[16],mDx2) : math::WENO5(v[18]-v[17],v[17]-v[16],v[16]-v[ 0], v[ 0]-v[15],v[15]-v[14],mDx2))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const BaseType::BufferType& v = mValues ;)",
    "insertText": "return(v[ 0]>0 ? (v[ 3]<0 || v[ 4]<0 || v[ 9]<0 || v[10]<0 || v[15]<0 || v[16]<0) : (v[ 3]>0 || v[ 4]>0 || v[ 9]>0 || v[10]>0 || v[15]>0 || v[16]>0))"
  },
  {
    "label": "CurvatureStencil()",
    "kind": "Method",
    "detail": "Function (} template<,,bool> class BaseStencil ; using BaseType::mAcc ; using BaseType::mValues ; const ValueType mDx2,mInv2Dx,mInvDx2 ; } ; template<GridT,bool IsSafe = true> class CurvatureStencil : public BaseStencil<CurvatureStencil<GridT,IsSafe>,GridT,IsSafe> { typedef CurvatureStencil<GridT,IsSafe> SelfT ; typedef BaseStencil<SelfT,GridT,IsSafe> BaseType ; public : typedef GridT GridType ; typedef GridT::TreeType TreeType ; typedef GridT::ValueType ValueType ; const int SIZE = 1 9 ;)",
    "insertText": "CurvatureStencil(const GridType& grid) : BaseType(grid, SIZE) , mInv2Dx(ValueType(0.5 / grid.voxelSize()[0])) , mInvDx2(ValueType(4.0 * mInv2Dx * mInv2Dx))"
  },
  {
    "label": "CurvatureStencil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CurvatureStencil(const GridType& grid, Real dx) : BaseType(grid, SIZE) , mInv2Dx(ValueType(0.5 / dx)) , mInvDx2(ValueType(4.0 * mInv2Dx * mInv2Dx))"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "meanCurvature()"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (Real alpha,normGrad ; return this ->)",
    "insertText": "meanCurvature(alpha, normGrad) ? ValueType(alpha*mInv2Dx/math::Pow3(normGrad))"
  },
  {
    "label": "gaussianCurvature()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "gaussianCurvature()"
  },
  {
    "label": "gaussianCurvature()",
    "kind": "Method",
    "detail": "Function (Real alpha,normGrad ; return this ->)",
    "insertText": "gaussianCurvature(alpha, normGrad) ? ValueType(alpha*mInvDx2/math::Pow4(normGrad))"
  },
  {
    "label": "curvatures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "curvatures(ValueType &mean, ValueType& gauss)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real alphaM,alphaG,normGrad ;)",
    "insertText": "if(this->curvatures(alphaM, alphaG, normGrad))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (mean =)",
    "insertText": "ValueType(alphaM*mInv2Dx/math::Pow3(normGrad))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (gauss =)",
    "insertText": "ValueType(alphaG*mInvDx2/math::Pow4(normGrad))"
  },
  {
    "label": "meanCurvatureNormGrad()",
    "kind": "Method",
    "detail": "Function (} else { mean = gauss = 0 ; } } ValueType)",
    "insertText": "meanCurvatureNormGrad()"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (Real alpha,normGrad ; return this ->)",
    "insertText": "meanCurvature(alpha, normGrad) ? ValueType(alpha*mInvDx2/(2*math::Pow2(normGrad)))"
  },
  {
    "label": "gaussianCurvatureNormGrad()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "gaussianCurvatureNormGrad()"
  },
  {
    "label": "gaussianCurvature()",
    "kind": "Method",
    "detail": "Function (Real alpha,normGrad ; return this ->)",
    "insertText": "gaussianCurvature(alpha, normGrad) ? ValueType(2*alpha*mInv2Dx*mInvDx2/math::Pow3(normGrad))"
  },
  {
    "label": "curvaturesNormGrad()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "curvaturesNormGrad(ValueType &mean, ValueType& gauss)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (mean =)",
    "insertText": "ValueType(alphaM*mInvDx2/(2*math::Pow2(normGrad)))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (gauss =)",
    "insertText": "ValueType(2*alphaG*mInv2Dx*mInvDx2/math::Pow3(normGrad))"
  },
  {
    "label": "principalCurvatures()",
    "kind": "Method",
    "detail": "Function (} else { mean = gauss = 0 ; } } std::pair<ValueType,ValueType>)",
    "insertText": "principalCurvatures()"
  },
  {
    "label": "pair()",
    "kind": "Method",
    "detail": "Function (std::pair<ValueType,ValueType>)",
    "insertText": "pair(0, 0)"
  },
  {
    "label": "Pow3()",
    "kind": "Method",
    "detail": "Function (const Real mean = alphaM* mInv2Dx /)",
    "insertText": "Pow3(normGrad)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (const Real tmp =)",
    "insertText": "sqrt(mean*mean - alphaG*mInvDx2/math::Pow4(normGrad))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (pair . first =)",
    "insertText": "ValueType(mean - tmp)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (pair . second =)",
    "insertText": "ValueType(mean + tmp)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "init(const Coord &ijk)"
  },
  {
    "label": "Dx()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Dx()"
  },
  {
    "label": "Dy()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Dy()"
  },
  {
    "label": "Dz()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Dz()"
  },
  {
    "label": "Dxx()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Dxx()"
  },
  {
    "label": "Dxz()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Dxz()"
  },
  {
    "label": "Dyz()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Dyz()"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "meanCurvature(Real& alpha, Real& normGrad)"
  },
  {
    "label": "Dx()",
    "kind": "Method",
    "detail": "Function (const Real Dx = this ->)",
    "insertText": "Dx(), Dy = this->Dy(), Dz = this->Dz()"
  },
  {
    "label": "Dxx()",
    "kind": "Method",
    "detail": "Function (alpha = normGrad = 0 ; return false ; } const Real Dxx = this ->)",
    "insertText": "Dxx(), Dyy = this->Dyy(), Dzz = this->Dzz()"
  },
  {
    "label": "Dx2()",
    "kind": "Method",
    "detail": "Function (alpha =)",
    "insertText": "Dx2(Dyy + Dzz) + Dy2*(Dxx + Dzz) + Dz2*(Dxx + Dyy) - 2*(Dx*(Dy*this->Dxy() + Dz*this->Dxz()) + Dy*Dz*this->Dyz())"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (normGrad =)",
    "insertText": "sqrt(normGrad2)"
  },
  {
    "label": "Dxx()",
    "kind": "Method",
    "detail": "Function (alpha = normGrad = 0 ; return false ; } const Real Dxx = this ->)",
    "insertText": "Dxx(), Dyy = this->Dyy(), Dzz = this->Dzz(), Dxy = this->Dxy(), Dxz = this->Dxz(), Dyz = this->Dyz()"
  },
  {
    "label": "Dx2()",
    "kind": "Method",
    "detail": "Function (alpha =)",
    "insertText": "Dx2(Dyy*Dzz - Dyz*Dyz) + Dy2*(Dxx*Dzz - Dxz*Dxz) + Dz2*(Dxx*Dyy - Dxy*Dxy) + 2*( Dy*Dz*(Dxy*Dxz - Dyz*Dxx) + Dx*Dz*(Dxy*Dyz - Dxz*Dyy) + Dx*Dy*(Dxz*Dyz - Dxy*Dzz))"
  },
  {
    "label": "Dx2()",
    "kind": "Method",
    "detail": "Function (alphaM =)",
    "insertText": "Dx2(Dyy + Dzz) + Dy2*(Dxx + Dzz) + Dz2*(Dxx + Dyy) - 2*(Dx*(Dy*Dxy + Dz*Dxz) + Dy*Dz*Dyz)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(halfWidth>0)"
  },
  {
    "label": "getCenterValue()",
    "kind": "Method",
    "detail": "Function (} const ValueType&)",
    "insertText": "getCenterValue()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (BaseType::mCenter = ijk ; this ->)",
    "insertText": "init(ijk)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init(BaseType::mCenter)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int n = 0 ;)",
    "insertText": "for(Coord p=ijk.offsetBy(-mHalfWidth), q=ijk.offsetBy(mHalfWidth); p[0] <= q[0]; ++p[0])"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mValues [ n + + ] = mAcc .)",
    "insertText": "getValue(p)"
  }
]