[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneContext"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "IMovieScenePlaybackClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlaybackClient"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FMovieSceneRootEvaluationTemplateInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneRootEvaluationTemplateInstance"
  },
  {
    "label": "FMovieSceneSequenceInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneSequenceInstance"
  },
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "IMovieSceneSequencePlayerObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieSceneSequencePlayerObserver"
  },
  {
    "label": "EMovieSceneViewportParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EMovieSceneViewportParams"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FPlayerIndexPlaybackCapability",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlayerIndexPlaybackCapability"
  },
  {
    "label": "FMovieSceneCameraCutParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneCameraCutParams"
  },
  {
    "label": "FMovieSceneObjectCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectCache"
  },
  {
    "label": "GetPlayer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Containers / ArrayView . h \" # include \" Misc / InlineValue . h \" # include \" EntitySystem / MovieSceneSharedPlaybackState . h \" # include \" Evaluation / IMovieScenePlaybackCapability . h \" # include \" Evaluation / MovieSceneAnimTypeID . h \" # include \" Evaluation / MovieSceneEvaluationOperand . h \" # include \" Evaluation / MovieSceneEvaluationState . h \" # include \" Evaluation / MovieScenePreAnimatedState . h \" # include \" Evaluation / SequenceDirectorPlaybackCapability . h \" # include \" MovieSceneSpawnRegister . h \" enum class EMovieSceneBuiltInEasing : uint8 ; struct FMovieSceneContext ; class UMovieSceneSequence ; class FViewportClient ; class IMovieScenePlaybackClient ; class UMovieSceneEntitySystemLinker ; struct FMovieSceneRootEvaluationTemplateInstance ; class FMovieSceneSequenceInstance ; class IMovieScenePlayer ; class IMovieSceneSequencePlayerObserver ; struct EMovieSceneViewportParams ; namespace UE::MovieScene { enum class ESequenceInstanceUpdateFlags : uint8 ; struct FSharedPlaybackState ; struct FPlayerIndexPlaybackCapability { TPlaybackCapabilityID<FPlayerIndexPlaybackCapability> ID ; IMovieScenePlayer*)",
    "insertText": "GetPlayer(TSharedRef<const FSharedPlaybackState> Owner)"
  },
  {
    "label": "GetPlayerIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetPlayerIndex(TSharedRef<const FSharedPlaybackState> Owner)"
  },
  {
    "label": "FPlayerIndexPlaybackCapability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPlayerIndexPlaybackCapability(uint16 InPlayerIndex) : PlayerIndex(InPlayerIndex)"
  },
  {
    "label": "PlayerIndex()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "PlayerIndex(uint16)"
  },
  {
    "label": "IMovieScenePlayer()",
    "kind": "Method",
    "detail": "Function (} ; } struct FMovieSceneCameraCutParams { UObject* UnlockIfCameraObject = nullptr ; bool bJumpCut = false ; float BlendTime = - 1 . f ; TOptional<EMovieSceneBuiltInEasing> BlendType ; bool bLockPreviousCamera = false ; # if WITH_EDITOR UObject* PreviousCameraObject = nullptr ; float PreviewBlendFactor = - 1 . f ; bool bCanBlend = false ; # endif } ; using EMovieSceneCameraCutParams = FMovieSceneCameraCutParams ; class IMovieScenePlayer : public UE::MovieScene::IObjectBindingNotifyPlaybackCapability,public UE::MovieScene::IStaticBindingOverridesPlaybackCapability { public :)",
    "insertText": "IMovieScenePlayer()"
  },
  {
    "label": "GetEvaluationTemplate()",
    "kind": "Method",
    "detail": "Function (FMovieSceneRootEvaluationTemplateInstance&)",
    "insertText": "GetEvaluationTemplate()"
  },
  {
    "label": "ConstructEntitySystemLinker()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntitySystemLinker*)",
    "insertText": "ConstructEntitySystemLinker()"
  },
  {
    "label": "GetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (} EMovieScenePlayerStatus::Type)",
    "insertText": "GetPlaybackStatus()"
  },
  {
    "label": "SetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackStatus(EMovieScenePlayerStatus::Type InPlaybackStatus)"
  },
  {
    "label": "GetPlaybackClient()",
    "kind": "Method",
    "detail": "Function (IMovieScenePlaybackClient*)",
    "insertText": "GetPlaybackClient()"
  },
  {
    "label": "GetSpawnRegister()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneSpawnRegister&)",
    "insertText": "GetSpawnRegister()"
  },
  {
    "label": "NotifyBindingUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyBindingUpdate(const FGuid& InGuid, FMovieSceneSequenceIDRef InSequenceID, TArrayView<TWeakObjectPtr<>> Objects)"
  },
  {
    "label": "NotifyBindingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBindingsChanged()"
  },
  {
    "label": "GetBindingOverride()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEvaluationOperand*)",
    "insertText": "GetBindingOverride(const FMovieSceneEvaluationOperand& InOperand)"
  },
  {
    "label": "AddBindingOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBindingOverride(const FMovieSceneEvaluationOperand& InOperand, const FMovieSceneEvaluationOperand& InOverrideOperand)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BindingOverrides .)",
    "insertText": "Add(InOperand, InOverrideOperand)"
  },
  {
    "label": "RemoveBindingOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveBindingOverride(const FMovieSceneEvaluationOperand& InOperand)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (BindingOverrides .)",
    "insertText": "Remove(InOperand)"
  },
  {
    "label": "PopulateUpdateFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateUpdateFlags(UE::MovieScene::ESequenceInstanceUpdateFlags& OutFlags)"
  },
  {
    "label": "GetPlaybackContext()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetPlaybackContext()"
  },
  {
    "label": "IsDisablingEventTriggers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisablingEventTriggers(FFrameTime& DisabledUntilTime)"
  },
  {
    "label": "IsPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreview()"
  },
  {
    "label": "PostEvaluation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostEvaluation(const FMovieSceneContext& Context)"
  },
  {
    "label": "GetObserver()",
    "kind": "Method",
    "detail": "Function (} TScriptInterface<IMovieSceneSequencePlayerObserver>)",
    "insertText": "GetObserver()"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (public : TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindBoundObjects(const FGuid& ObjectBindingID, FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindBoundObjects(const FMovieSceneEvaluationOperand& Operand)"
  },
  {
    "label": "FindObjectId()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "FindObjectId(UObject& InObject, FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "FindCachedObjectId()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "FindCachedObjectId(UObject& InObject, FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SavePreAnimatedState(UObject& InObject, FMovieSceneAnimTypeID InTokenType, const IMovieScenePreAnimatedTokenProducer& InProducer)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (PreAnimatedState .)",
    "insertText": "SavePreAnimatedState(InObject, InTokenType, InProducer)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SavePreAnimatedState(FMovieSceneAnimTypeID InTokenType, const IMovieScenePreAnimatedGlobalTokenProducer& InProducer)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (PreAnimatedState .)",
    "insertText": "SavePreAnimatedState(InTokenType, InProducer)"
  },
  {
    "label": "RestorePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RestorePreAnimatedState()"
  },
  {
    "label": "ClearObjectCaches()",
    "kind": "Method",
    "detail": "Function (State .)",
    "insertText": "ClearObjectCaches(GetSharedPlaybackState())"
  },
  {
    "label": "DiscardPreAnimatedState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DiscardPreAnimatedState()"
  },
  {
    "label": "InvalidateCachedData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateCachedData()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IMovieScenePlayer*)",
    "insertText": "Get(uint16 InUniqueIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(TArray<IMovieScenePlayer*>& OutPlayers, bool bOnlyUnstoppedPlayers)"
  },
  {
    "label": "SetIsEvaluatingFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsEvaluatingFlag(uint16 InUniqueIndex, bool bIsUpdating)"
  },
  {
    "label": "IsEvaluating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEvaluating()"
  },
  {
    "label": "FindSharedPlaybackState()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::MovieScene::FSharedPlaybackState>)",
    "insertText": "FindSharedPlaybackState()"
  },
  {
    "label": "GetSharedPlaybackState()",
    "kind": "Method",
    "detail": "Function (TSharedRef<UE::MovieScene::FSharedPlaybackState>)",
    "insertText": "GetSharedPlaybackState()"
  },
  {
    "label": "GetUniqueIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetUniqueIndex()"
  },
  {
    "label": "UpdateCameraCut()",
    "kind": "Method",
    "detail": "Function (EMovieSceneCameraCutParams CameraCutParams ; CameraCutParams . UnlockIfCameraObject = UnlockIfCameraObject ; CameraCutParams . bJumpCut = bJumpCut ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "UpdateCameraCut(CameraObject, CameraCutParams)"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (} protected : struct FMovieSceneObjectCache ; void)",
    "insertText": "ResolveBoundObjects(UE::UniversalObjectLocator::FResolveParams& ResolveParams, const FGuid& InBindingId, FMovieSceneSequenceID SequenceID, UMovieSceneSequence& Sequence, TArray<UObject*, TInlineAllocator<1>>& OutObjects)"
  }
]