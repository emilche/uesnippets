[
  {
    "label": "UBrainComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrainComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "TDataClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDataClass"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FOnBlackboardChangeNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnBlackboardChangeNotificationInfo"
  },
  {
    "label": "FBBKeyCachedAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBBKeyCachedAccessor"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" Components / ActorComponent . h \" # include \" EngineDefines . h \" # include \" BehaviorTree / Blackboard / BlackboardKeyType . h \" # include \" AISystem . h \" # include \" BehaviorTree / BlackboardData . h \" # include \" BlackboardComponent . generated . h \" class UBrainComponent ; namespace EBlackboardDescription { enum Type { OnlyValue,KeyWithValue,DetailedKeyWithValue,Full,} ; })",
    "insertText": "UCLASS(ClassGroup = AI, meta = (BlueprintSpawnableComponent), hidecategories = (Sockets, Collision), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AIMODULE_API UBlackboardComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "UninitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeComponent()"
  },
  {
    "label": "GetKeyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetKeyName(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetKeyID()",
    "kind": "Method",
    "detail": "Function (FBlackboard::FKey)",
    "insertText": "GetKeyID(const FName& KeyName)"
  },
  {
    "label": "GetKeyType()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UBlackboardKeyType>)",
    "insertText": "GetKeyType(FBlackboard::FKey KeyID)"
  },
  {
    "label": "IsKeyInstanceSynced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyInstanceSynced(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "HasValidAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidAsset()"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterObserver(FBlackboard::FKey KeyID, const UObject* NotifyOwner, FOnBlackboardChangeNotification ObserverDelegate)"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObserver(FBlackboard::FKey KeyID, FDelegateHandle ObserverHandle)"
  },
  {
    "label": "UnregisterObserversFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObserversFrom(const UObject* NotifyOwner)"
  },
  {
    "label": "PauseObserverNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseObserverNotifications()"
  },
  {
    "label": "ResumeObserverNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeObserverNotifications(bool bSendQueuedObserverNotifications)"
  },
  {
    "label": "GetBrainComponent()",
    "kind": "Method",
    "detail": "Function (UBrainComponent*)",
    "insertText": "GetBrainComponent()"
  },
  {
    "label": "GetBlackboardAsset()",
    "kind": "Method",
    "detail": "Function (UBlackboardData*)",
    "insertText": "GetBlackboardAsset()"
  },
  {
    "label": "CacheBrainComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBrainComponent(UBrainComponent& BrainComponent)"
  },
  {
    "label": "InitializeBlackboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeBlackboard(UBlackboardData& NewAsset)"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(const UBlackboardData* TestAsset)"
  },
  {
    "label": "IsVectorValueSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVectorValueSet(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetLocationFromEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocationFromEntry(FBlackboard::FKey KeyID, FVector& ResultLocation)"
  },
  {
    "label": "GetRotationFromEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRotationFromEntry(FBlackboard::FKey KeyID, FRotator& ResultRotation)"
  },
  {
    "label": "ClearValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearValue(FBlackboard::FKey KeyID)"
  },
  {
    "label": "CopyKeyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyKeyValue(FBlackboard::FKey SourceKeyID, FBlackboard::FKey DestinationID)"
  },
  {
    "label": "IsKeyOfType()",
    "kind": "Method",
    "detail": "Function (template<class TDataClass> bool)",
    "insertText": "IsKeyOfType(FBlackboard::FKey KeyID)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (template<class TDataClass> bool)",
    "insertText": "SetValue(const FName& KeyName, typename TDataClass::FDataType Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (template<class TDataClass> bool)",
    "insertText": "SetValue(FBlackboard::FKey KeyID, typename TDataClass::FDataType Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (template<class TDataClass> TDataClass::FDataType)",
    "insertText": "GetValue(const FName& KeyName)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (template<class TDataClass> TDataClass::FDataType)",
    "insertText": "GetValue(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetKeyRawData()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetKeyRawData(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetKeyRawData()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetKeyRawData(const FName& KeyName)"
  },
  {
    "label": "IsValidKey()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "IsValidKey(FBlackboard::FKey KeyID)"
  },
  {
    "label": "CompareKeyValues()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS EBlackboardCompare::Type)",
    "insertText": "CompareKeyValues(TSubclassOf<UBlackboardKeyType> KeyType, FBlackboard::FKey KeyA, FBlackboard::FKey KeyB)"
  },
  {
    "label": "GetDebugInfoString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugInfoString(EBlackboardDescription::Type Mode)"
  },
  {
    "label": "DescribeKeyValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeKeyValue(const FName& KeyName, EBlackboardDescription::Type Mode)"
  },
  {
    "label": "DescribeKeyValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeKeyValue(FBlackboard::FKey KeyID, EBlackboardDescription::Type Mode)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(4.26, \"Directly accessing BlackboardAsset is not longer supported. Use DefaultBlackboardAsset or InitializeBlackboard to set it and GetBlackboardAsset to retrieve it\") UPROPERTY(transient)"
  },
  {
    "label": "FOnBlackboardChangeNotificationInfo()",
    "kind": "Method",
    "detail": "Function (protected : struct FOnBlackboardChangeNotificationInfo {)",
    "insertText": "FOnBlackboardChangeNotificationInfo(const FOnBlackboardChangeNotification& InDelegateHandle) : DelegateHandle(InDelegateHandle)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "GetHandle()"
  },
  {
    "label": "NotifyObservers()",
    "kind": "Method",
    "detail": "Function (} FOnBlackboardChangeNotification DelegateHandle ; bool bToBeRemoved = false ; } ; int32 NotifyObserversRecursionCount = 0 ; int32 ObserversToRemoveCount = 0 ; TMultiMap<FBlackboard::FKey,FOnBlackboardChangeNotificationInfo> Observers ; TMultiMap<const UObject*,FDelegateHandle> ObserverHandles ; TArray<FBlackboard::FKey> QueuedUpdates ; uint32 bPausedNotifies : 1 ; uint32 bSynchronizedKeyPopulated : 1 ; void)",
    "insertText": "NotifyObservers(FBlackboard::FKey KeyID)"
  },
  {
    "label": "InitializeParentChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeParentChain(UBlackboardData* NewAsset)"
  },
  {
    "label": "DestroyValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyValues()"
  },
  {
    "label": "PopulateSynchronizedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateSynchronizedKeys()"
  },
  {
    "label": "ShouldSyncWithBlackboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSyncWithBlackboard(UBlackboardComponent& OtherBlackboardComponent)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const FBlackboardEntry* EntryInfo = BlackboardAsset ? BlackboardAsset ->)",
    "insertText": "GetKey(KeyID)"
  },
  {
    "label": "GetKeyID()",
    "kind": "Method",
    "detail": "Function (const FBlackboard::FKey KeyID =)",
    "insertText": "GetKeyID(KeyName)"
  },
  {
    "label": "GetKeyRawData()",
    "kind": "Method",
    "detail": "Function (uint8* RawData =)",
    "insertText": "GetKeyRawData(KeyID)"
  },
  {
    "label": "HasInstance()",
    "kind": "Method",
    "detail": "Function (KeyType)",
    "insertText": "HasInstance()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (const bool bChanged =)",
    "insertText": "SetValue((TDataClass*)KeyOb, RawData, Value)"
  },
  {
    "label": "NotifyObservers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyObservers(KeyID)"
  },
  {
    "label": "GetCurrentSafe()",
    "kind": "Method",
    "detail": "Function (UAISystem* AISystem =)",
    "insertText": "GetCurrentSafe(GetWorld())"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (UBlackboardComponent* OtherBlackboard = Iter .)",
    "insertText": "Value()"
  },
  {
    "label": "GetKeyID()",
    "kind": "Method",
    "detail": "Function (const FBlackboard::FKey OtherKeyID = OtherBlackboardAsset ? OtherBlackboardAsset ->)",
    "insertText": "GetKeyID(EntryInfo->EntryName)"
  },
  {
    "label": "GetKeyRawData()",
    "kind": "Method",
    "detail": "Function (uint8* OtherRawData = OtherBlackboard ->)",
    "insertText": "GetKeyRawData(OtherKeyID)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue((TDataClass*)OtherKeyOb, OtherRawData, Value)"
  },
  {
    "label": "NotifyObservers()",
    "kind": "Method",
    "detail": "Function (OtherBlackboard ->)",
    "insertText": "NotifyObservers(OtherKeyID)"
  },
  {
    "label": "HasInstance()",
    "kind": "Method",
    "detail": "Function (const uint16 DataOffset = EntryInfo -> KeyType ->)",
    "insertText": "HasInstance() ? sizeof(FBlackboardInstancedKeyMemory)"
  },
  {
    "label": "FBBKeyCachedAccessor()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS template<TBlackboardKey> struct FBBKeyCachedAccessor { private : FBlackboard::FKey BBKey ; typedef TBlackboardKey::FDataType FStoredType ; FStoredType CachedValue ; public :)",
    "insertText": "FBBKeyCachedAccessor() : BBKey(FBlackboard::InvalidKey), CachedValue(TBlackboardKey::InvalidValue)"
  },
  {
    "label": "FBBKeyCachedAccessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBBKeyCachedAccessor(const UBlackboardComponent& BBComponent, FBlackboard::FKey InBBKey)"
  },
  {
    "label": "TBlackboardKey()",
    "kind": "Method",
    "detail": "Function (BBKey = InBBKey ; CachedValue = BBComponent . GetValue<)",
    "insertText": "TBlackboardKey(InBBKey)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} } template<T2> bool)",
    "insertText": "SetValue(UBlackboardComponent& BBComponent, const T2 InValue)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetValue(UBlackboardComponent& BBComponent, const FStoredType InValue)"
  },
  {
    "label": "TBlackboardKey()",
    "kind": "Method",
    "detail": "Function (CachedValue = InValue ; BBComponent . SetValue<)",
    "insertText": "TBlackboardKey(BBKey, InValue)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  }
]