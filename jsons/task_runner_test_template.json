[
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "TaskRunnerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskRunnerTest"
  },
  {
    "label": "TaskTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TASK_RUNNER_TEST_TEMPLATE_H_ # define BASE_TEST_TASK_RUNNER_TEST_TEMPLATE_H_ # include<cstddef> # include<map> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / location . h \" # include \" base / memory / ref_counted . h \" # include \" base / synchronization / condition_variable . h \" # include \" base / synchronization / lock . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / task / task_runner . h \" # include \" base / threading / thread . h \" # include \" testing / gtest / include / gtest / gtest . h \" namespace base { namespace test { class TaskTracker : public RefCountedThreadSafe<TaskTracker> { public :)",
    "insertText": "TaskTracker()"
  },
  {
    "label": "TaskTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskTracker(const TaskTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskTracker&)",
    "insertText": "operator(const TaskTracker&)"
  },
  {
    "label": "WrapTask()",
    "kind": "Method",
    "detail": "Function (RepeatingClosure)",
    "insertText": "WrapTask(RepeatingClosure task, int i)"
  },
  {
    "label": "GetTaskRunCounts()",
    "kind": "Method",
    "detail": "Function (std::map<int,int>)",
    "insertText": "GetTaskRunCounts()"
  },
  {
    "label": "WaitForCompletedTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCompletedTasks(int count)"
  },
  {
    "label": "RunTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTask(RepeatingClosure task, int i)"
  },
  {
    "label": "TaskRunnerTest()",
    "kind": "Method",
    "detail": "Function (Lock lock_ ; std::map<int,int> task_run_counts_ ; int task_runs_ ; ConditionVariable task_runs_cv_ ; } ; } template<TaskRunnerTestDelegate> class TaskRunnerTest : public testing::Test { protected :)",
    "insertText": "TaskRunnerTest() : task_tracker_(base::MakeRefCounted<test::TaskTracker>())"
  },
  {
    "label": "TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (} const scoped_refptr<test::TaskTracker> task_tracker_ ; TaskRunnerTestDelegate delegate_ ; } ;)",
    "insertText": "TYPED_TEST_SUITE_P(TaskRunnerTest)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPED_TEST_P(TaskRunnerTest, Basic)"
  },
  {
    "label": "StartTaskRunner()",
    "kind": "Method",
    "detail": "Function (std::map<int,int> expected_task_run_counts ; this -> delegate_ .)",
    "insertText": "StartTaskRunner()"
  },
  {
    "label": "GetTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<TaskRunner> task_runner = this -> delegate_ .)",
    "insertText": "GetTaskRunner()"
  },
  {
    "label": "WrapTask()",
    "kind": "Method",
    "detail": "Function (RepeatingClosure ith_task = this -> task_tracker_ ->)",
    "insertText": "WrapTask(RepeatingClosure(), i)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (task_runner ->)",
    "insertText": "PostTask(FROM_HERE, ith_task)"
  },
  {
    "label": "StopTaskRunner()",
    "kind": "Method",
    "detail": "Function (+ + expected_task_run_counts [ i ] ; } } this -> delegate_ .)",
    "insertText": "StopTaskRunner()"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(expected_task_run_counts, this->task_tracker_->GetTaskRunCounts())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(TaskRunnerTest, Delayed)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (task_runner ->)",
    "insertText": "PostDelayedTask(FROM_HERE, ith_task, base::Milliseconds(j))"
  },
  {
    "label": "WaitForCompletedTasks()",
    "kind": "Method",
    "detail": "Function (+ + expected_task_run_counts [ i ] ; + + expected_total_tasks ; } } this -> task_tracker_ ->)",
    "insertText": "WaitForCompletedTasks(expected_total_tasks)"
  },
  {
    "label": "REGISTER_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "REGISTER_TYPED_TEST_SUITE_P(TaskRunnerTest, Basic, Delayed)"
  }
]