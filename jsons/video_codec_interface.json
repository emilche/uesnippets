[
  {
    "label": "CodecSpecificInfoVP8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSpecificInfoVP8"
  },
  {
    "label": "CodecSpecificInfoVP9",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSpecificInfoVP9"
  },
  {
    "label": "CodecSpecificInfoH264",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSpecificInfoH264"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_INCLUDE_VIDEO_CODEC_INTERFACE_H_ # define MODULES_VIDEO_CODING_INCLUDE_VIDEO_CODEC_INTERFACE_H_ # include<vector> # include \" absl / base / attributes . h \" # include \" absl / types / optional . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_decoder . h \" # include \" api / video_codecs / video_encoder . h \" # include \" common_video / generic_frame_descriptor / generic_frame_info . h \" # include \" modules / video_coding / codecs / h264 / include / h264_globals . h \" # include \" modules / video_coding / codecs / vp9 / include / vp9_globals . h \" # include \" modules / video_coding / include / video_error_codes . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct CodecSpecificInfoVP8 { bool nonReference ; uint8_t temporalIdx ; bool layerSync ; int8_t keyIdx ; bool useExplicitDependencies ; size_t kBuffersCount = 3 ; size_t referencedBuffers [ kBuffersCount ] ; size_t referencedBuffersCount ; size_t updatedBuffers [ kBuffersCount ] ; size_t updatedBuffersCount ; } ;)",
    "insertText": "static_assert(std::is_pod<CodecSpecificInfoVP8>::value, \"\")"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (struct CodecSpecificInfoVP9 { bool first_frame_in_picture ; bool inter_pic_predicted ; bool flexible_mode ; bool ss_data_available ; bool non_ref_for_inter_layer_pred ; uint8_t temporal_idx ; bool temporal_up_switch ; bool inter_layer_predicted ; uint8_t gof_idx ; size_t num_spatial_layers ; size_t first_active_layer ; bool spatial_layer_resolution_present ; uint16_t width [ kMaxVp9NumberOfSpatialLayers ] ; uint16_t height [ kMaxVp9NumberOfSpatialLayers ] ; GofInfoVP9 gof ; uint8_t num_ref_pics ; uint8_t p_diff [ kMaxVp9RefPics ] ;)",
    "insertText": "ABSL_DEPRECATED(\"\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(std::is_pod<CodecSpecificInfoVP9>::value, \"\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (struct CodecSpecificInfoH264 { H264PacketizationMode packetization_mode ; uint8_t temporal_idx ; bool base_layer_sync ; bool idr_frame ; } ;)",
    "insertText": "static_assert(std::is_pod<CodecSpecificInfoH264>::value, \"\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (union CodecSpecificInfoUnion { CodecSpecificInfoVP8 VP8 ; CodecSpecificInfoVP9 VP9 ; CodecSpecificInfoH264 H264 ; } ;)",
    "insertText": "static_assert(std::is_pod<CodecSpecificInfoUnion>::value, \"\")"
  },
  {
    "label": "CodecSpecificInfo()",
    "kind": "Method",
    "detail": "Function (struct RTC_EXPORT CodecSpecificInfo {)",
    "insertText": "CodecSpecificInfo()"
  },
  {
    "label": "CodecSpecificInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CodecSpecificInfo(const CodecSpecificInfo&)"
  }
]