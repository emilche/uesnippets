[
  {
    "label": "Camera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Camera"
  },
  {
    "label": "MX_RENDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDER_API"
  },
  {
    "label": "Camera()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_CAMERA_H # define MATERIALX_CAMERA_H # include<MaterialXRender / Types . h> MATERIALX_NAMESPACE_BEGIN using CameraPtr = std::shared_ptr<class Camera> ; class Camera { public :)",
    "insertText": "Camera() : _worldMatrix(Matrix44::IDENTITY), _viewMatrix(Matrix44::IDENTITY), _projectionMatrix(Matrix44::IDENTITY), _arcballActive(false), _arcballQuat(Quaternion::IDENTITY), _arcballDelta(Quaternion::IDENTITY), _arcballSpeed(2.0f)"
  },
  {
    "label": "Camera()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Camera()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} CameraPtr)",
    "insertText": "create()"
  },
  {
    "label": "setWorldMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setWorldMatrix(const Matrix44& mat)"
  },
  {
    "label": "getWorldMatrix()",
    "kind": "Method",
    "detail": "Function (_worldMatrix = mat ; } const Matrix44&)",
    "insertText": "getWorldMatrix()"
  },
  {
    "label": "getViewMatrix()",
    "kind": "Method",
    "detail": "Function (_viewMatrix = mat ; } const Matrix44&)",
    "insertText": "getViewMatrix()"
  },
  {
    "label": "getProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (_projectionMatrix = mat ; } const Matrix44&)",
    "insertText": "getProjectionMatrix()"
  },
  {
    "label": "getInverse()",
    "kind": "Method",
    "detail": "Function (Matrix44 invView = _viewMatrix .)",
    "insertText": "getInverse()"
  },
  {
    "label": "getViewDirection()",
    "kind": "Method",
    "detail": "Function (} Vector3)",
    "insertText": "getViewDirection()"
  },
  {
    "label": "setViewportSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setViewportSize(const Vector2& size)"
  },
  {
    "label": "getViewportSize()",
    "kind": "Method",
    "detail": "Function (_viewportSize = size ; } const Vector2&)",
    "insertText": "getViewportSize()"
  },
  {
    "label": "transformPointPerspective()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "transformPointPerspective(getWorldViewProjMatrix(), v)"
  },
  {
    "label": "Vector3()",
    "kind": "Method",
    "detail": "Function (v = v* 0 . 5 f +)",
    "insertText": "Vector3(0.5f)"
  },
  {
    "label": "unprojectFromViewport()",
    "kind": "Method",
    "detail": "Function (v [ 0 ]* = _viewportSize [ 0 ] ; v [ 1 ]* = _viewportSize [ 1 ] ; return v ; } Vector3)",
    "insertText": "unprojectFromViewport(Vector3 v)"
  },
  {
    "label": "Vector3()",
    "kind": "Method",
    "detail": "Function (v [ 0 ] / = _viewportSize [ 0 ] ; v [ 1 ] / = _viewportSize [ 1 ] ; v = v* 2 . 0 f -)",
    "insertText": "Vector3(1.0f)"
  },
  {
    "label": "transformPointPerspective()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "transformPointPerspective(getWorldViewProjMatrix().getInverse(), v)"
  },
  {
    "label": "applyArcballMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "applyArcballMotion(const Vector2& pos)"
  },
  {
    "label": "arcballMatrix()",
    "kind": "Method",
    "detail": "Function (Matrix44)",
    "insertText": "arcballMatrix()"
  },
  {
    "label": "createViewMatrix()",
    "kind": "Method",
    "detail": "Function (} Matrix44)",
    "insertText": "createViewMatrix(const Vector3& eye, const Vector3& target, const Vector3& up)"
  },
  {
    "label": "createPerspectiveMatrix()",
    "kind": "Method",
    "detail": "Function (Matrix44)",
    "insertText": "createPerspectiveMatrix(float left, float right, float bottom, float top, float nearP, float farP)"
  },
  {
    "label": "createOrthographicMatrix()",
    "kind": "Method",
    "detail": "Function (Matrix44)",
    "insertText": "createOrthographicMatrix(float left, float right, float bottom, float top, float nearP, float farP)"
  },
  {
    "label": "transformPointPerspective()",
    "kind": "Method",
    "detail": "Function (Vector3)",
    "insertText": "transformPointPerspective(const Matrix44& m, const Vector3& v)"
  },
  {
    "label": "multiply()",
    "kind": "Method",
    "detail": "Function (Vector4 res = m .)",
    "insertText": "multiply(Vector4(v[0], v[1], v[2], 1.0f))"
  }
]