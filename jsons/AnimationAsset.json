[
  {
    "label": "UAnimMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMetaData"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAssetMappingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetMappingTable"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "UPoseAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseAsset"
  },
  {
    "label": "UMirrorDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTable"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FAnimationUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateContext"
  },
  {
    "label": "IAnimNotifyEventContextDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimNotifyEventContextDataInterface"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMarkerPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkerPair"
  },
  {
    "label": "FMarkerTickRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkerTickRecord"
  },
  {
    "label": "FDeltaTimeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeltaTimeRecord"
  },
  {
    "label": "FBlendSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSampleData"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FBlendFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendFilter"
  },
  {
    "label": "FPoseCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseCurve"
  },
  {
    "label": "FAnimExtractContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimExtractContext"
  },
  {
    "label": "FMarkerSyncAnimPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkerSyncAnimPosition"
  },
  {
    "label": "FPassedMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPassedMarker"
  },
  {
    "label": "FAnimTickRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTickRecord"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "FMarkerTickContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarkerTickContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimGroupInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimGroupInstance"
  },
  {
    "label": "FRootMotionMovementParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootMotionMovementParams"
  },
  {
    "label": "FAnimAssetTickContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimAssetTickContext"
  },
  {
    "label": "FAnimationGroupReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationGroupReference"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "FMarkerPair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / AnimTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" AnimInterpFilter . h \" # include \" AnimEnums . h \" # include \" Interfaces / Interface_PreviewMeshProvider . h \" # include \" AnimationAsset . generated . h \" class UAnimMetaData ; class UAnimMontage ; class UAssetMappingTable ; class UAssetUserData ; class USkeleton ; class UAnimSequenceBase ; class UBlendSpace ; class UPoseAsset ; class UMirrorDataTable ; class USkeletalMesh ; struct FAnimationUpdateContext ; namespace SmartName { typedef uint16 UID_Type ; } namespace UE { namespace Anim { class IAnimNotifyEventContextDataInterface ; } } namespace MarkerIndexSpecialValues { enum Type { Uninitialized = - 2,AnimationBoundary = - 1,} ; } ; struct FMarkerPair { int32 MarkerIndex ; float TimeToMarker ;)",
    "insertText": "FMarkerPair() : MarkerIndex(MarkerIndexSpecialValues::Uninitialized)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (MarkerIndex = MarkerIndexSpecialValues::Uninitialized ; } } ; struct FMarkerTickRecord { FMarkerPair PreviousMarker ; FMarkerPair NextMarker ; bool)",
    "insertText": "IsValid(bool bLooping)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDeltaTimeRecord { public : void)",
    "insertText": "Set(float InPrevious, float InDelta)"
  },
  {
    "label": "SetPrevious()",
    "kind": "Method",
    "detail": "Function (Previous = InPrevious ; Delta = InDelta ; bPreviousIsValid = true ; } void)",
    "insertText": "SetPrevious(float InPrevious)"
  },
  {
    "label": "GetPrevious()",
    "kind": "Method",
    "detail": "Function (Previous = InPrevious ; bPreviousIsValid = true ; } float)",
    "insertText": "GetPrevious()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FBlendSampleData()",
    "kind": "Method",
    "detail": "Function (FDeltaTimeRecord DeltaTimeRecord ; FMarkerTickRecord MarkerTickRecord ; TArray<float> PerBoneBlendData ; TArray<float> PerBoneWeightRate ;)",
    "insertText": "FBlendSampleData() : SampleDataIndex(0) , Animation(nullptr) , TotalWeight(0.f) , WeightRate(0.f) , Time(0.f) , PreviousTime(0.f) , SamplePlayRate(0.0f) , DeltaTimeRecord()"
  },
  {
    "label": "FBlendSampleData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlendSampleData(int32 Index) : SampleDataIndex(Index) , Animation(nullptr) , TotalWeight(0.f) , WeightRate(0.f) , Time(0.f) , PreviousTime(0.f) , SamplePlayRate(0.0f) , DeltaTimeRecord()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBlendSampleData& Other)"
  },
  {
    "label": "AddWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddWeight(float Weight)"
  },
  {
    "label": "GetClampedWeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetClampedWeight()"
  },
  {
    "label": "NormalizeDataWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NormalizeDataWeight(TArray<FBlendSampleData>& SampleDataList)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FBlendFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlendFilter()"
  },
  {
    "label": "GetFilterLastOutput()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetFilterLastOutput()"
  },
  {
    "label": "FPoseCurve()",
    "kind": "Method",
    "detail": "Function (FName Name ; int32 PoseIndex ; float Value ;)",
    "insertText": "FPoseCurve() : Name(NAME_None) , PoseIndex(INDEX_NONE) , Value(0.f)"
  },
  {
    "label": "FPoseCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPoseCurve(int32 InPoseIndex, FName InName, float InValue) : Name(InName) , PoseIndex(InPoseIndex) , Value(InValue)"
  },
  {
    "label": "FAnimExtractContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimExtractContext(double InCurrentTime = 0.0, bool InbExtractRootMotion = false, FDeltaTimeRecord InDeltaTimeRecord = {}, bool InbLooping = false) : CurrentTime(InCurrentTime) , bExtractRootMotion(InbExtractRootMotion) , DeltaTimeRecord(InDeltaTimeRecord) , bLooping(InbLooping) , PoseCurves() , BonesRequired() , InterpolationOverride() #if WITH_EDITOR , bIgnoreRootLock(false) , bExtractWithRootMotionProvider(true)"
  },
  {
    "label": "IsBoneRequired()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBoneRequired(int32 BoneIndex)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Sync)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FMarkerSyncAnimPosition()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMarkerSyncAnimPosition() : PositionBetweenMarkers(0.0f)"
  },
  {
    "label": "FMarkerSyncAnimPosition()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMarkerSyncAnimPosition(const FName& InPrevMarkerName, const FName& InNextMarkerName, const float& InAlpha) : PreviousMarkerName(InPrevMarkerName) , NextMarkerName(InNextMarkerName) , PositionBetweenMarkers(InAlpha)"
  },
  {
    "label": "GetRootMotionWeight()",
    "kind": "Method",
    "detail": "Function (float* TimeAccumulator = nullptr ; float PlayRateMultiplier = 1 . 0 f ; float EffectiveBlendWeight = 0 . 0 f ; float RootMotionWeightModifier = 1 . 0 f ; bool bLooping = false ; bool bIsEvaluator = false ; bool bRequestedInertialization = false ; bool bOverridePositionWhenJoiningSyncGroupAsLeader = false ; bool bIsExclusiveLeader = false ; bool bActiveContext = true ; const UMirrorDataTable* MirrorDataTable = nullptr ; TSharedPtr<TArray<TUniquePtr<const UE::Anim::IAnimNotifyEventContextDataInterface>>> ContextData ; union { struct { FBlendFilter* BlendFilter ; TArray<FBlendSampleData>* BlendSampleDataCache ; int32 TriangulationIndex ; float BlendSpacePositionX ; float BlendSpacePositionY ; bool bTeleportToTime ; } BlendSpace ; struct { float CurrentPosition ; TArray<FPassedMarker>* MarkersPassedThisTick ; } Montage ; } ; FDeltaTimeRecord* DeltaTimeRecord = nullptr ; FMarkerTickRecord* MarkerTickRecord = nullptr ; bool bCanUseMarkerSync = false ; float LeaderScore = 0 . 0 f ; float)",
    "insertText": "GetRootMotionWeight()"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimTickRecord()"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimTickRecord(UAnimSequenceBase* InSequence, bool bInLooping, float InPlayRate, bool bInIsEvaluator, float InFinalBlendWeight, float& InCurrentTime, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimTickRecord(UBlendSpace* InBlendSpace, const FVector& InBlendInput, TArray<FBlendSampleData>& InBlendSampleDataCache, FBlendFilter& InBlendFilter, bool bInLooping, float InPlayRate, bool bShouldTeleportToTime, bool bInIsEvaluator, float InFinalBlendWeight, float& InCurrentTime, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimTickRecord(UAnimMontage* InMontage, float InCurrentPosition, float InWeight, TArray<FPassedMarker>& InMarkersPassedThisTick, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimTickRecord(UPoseAsset* InPoseAsset, float InFinalBlendWeight)"
  },
  {
    "label": "GatherContextData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherContextData(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "MakeContextData()",
    "kind": "Method",
    "detail": "Function (template<Type,. . . TArgs> void)",
    "insertText": "MakeContextData(TArgs&&... Args)"
  },
  {
    "label": "AllocateContextDataContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateContextDataContainer()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ContextData ->)",
    "insertText": "Add(MakeUnique<Type>(Forward<TArgs>(Args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAnimTickRecord& Other)"
  },
  {
    "label": "FMarkerTickContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMarkerTickContext() : ValidMarkers(&DefaultMarkerNames)"
  },
  {
    "label": "SetMarkerSyncStartPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMarkerSyncStartPosition(const FMarkerSyncAnimPosition& SyncPosition)"
  },
  {
    "label": "SetMarkerSyncEndPosition()",
    "kind": "Method",
    "detail": "Function (MarkerSyncStartPostion = SyncPosition ; } void)",
    "insertText": "SetMarkerSyncEndPosition(const FMarkerSyncAnimPosition& SyncPosition)"
  },
  {
    "label": "GetMarkerSyncStartPosition()",
    "kind": "Method",
    "detail": "Function (MarkerSyncEndPostion = SyncPosition ; } const FMarkerSyncAnimPosition&)",
    "insertText": "GetMarkerSyncStartPosition()"
  },
  {
    "label": "IsMarkerSyncEndValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMarkerSyncEndValid()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString MarkerString ;)",
    "insertText": "for(const auto& ValidMarker : *ValidMarkers)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (MarkerString .)",
    "insertText": "Append(FString::Printf(TEXT(\"%s,\"), *ValidMarker.ToString()))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\" - Sync Start Position : %s\\n - Sync End Position : %s\\n - Markers : %s\"), *MarkerSyncStartPostion.ToString(), *MarkerSyncEndPostion.ToString(), *MarkerString)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} private : FMarkerSyncAnimPosition MarkerSyncStartPostion ; FMarkerSyncAnimPosition MarkerSyncEndPostion ; const TArray<FName>* ValidMarkers ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FAnimGroupInstance()",
    "kind": "Method",
    "detail": "Function (int32 GroupLeaderIndex ; TArray<FName> ValidMarkers ; bool bCanUseMarkerSync ; float MontageLeaderWeight ; FMarkerTickContext MarkerTickContext ; float PreviousAnimLengthRatio ; float AnimLengthRatio ; public :)",
    "insertText": "FAnimGroupInstance() : GroupLeaderIndex(INDEX_NONE) , bCanUseMarkerSync(false) , MontageLeaderWeight(0.f) , PreviousAnimLengthRatio(0.f) , AnimLengthRatio(0.f)"
  },
  {
    "label": "FMarkerTickContext()",
    "kind": "Method",
    "detail": "Function (bCanUseMarkerSync = false ; MontageLeaderWeight = 0 . f ; MarkerTickContext =)",
    "insertText": "FMarkerTickContext()"
  },
  {
    "label": "TestTickRecordForLeadership()",
    "kind": "Method",
    "detail": "Function (PreviousAnimLengthRatio = 0 . f ; AnimLengthRatio = 0 . f ; } void)",
    "insertText": "TestTickRecordForLeadership(EAnimGroupRole::Type MembershipType)"
  },
  {
    "label": "TestTickRecordForLeadership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestTickRecordForLeadership(EAnimGroupRole::CanBeLeader)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finalize(const FAnimGroupInstance* PreviousGroup)"
  },
  {
    "label": "Prepare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepare(const FAnimGroupInstance* PreviousGroup)"
  },
  {
    "label": "FRootMotionMovementParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRootMotionMovementParams() : bHasRootMotion(false) , BlendWeight(0.f)"
  },
  {
    "label": "FRootMotionMovementParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRootMotionMovementParams(const FRootMotionMovementParams& Other) : bHasRootMotion(Other.bHasRootMotion) , BlendWeight(Other.BlendWeight)"
  },
  {
    "label": "FRootMotionMovementParams()",
    "kind": "Method",
    "detail": "Function (RootMotionTransform = Other . RootMotionTransform ; })",
    "insertText": "FRootMotionMovementParams(const FRootMotionMovementParams&& Other) : bHasRootMotion(Other.bHasRootMotion) , BlendWeight(Other.BlendWeight)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RootMotionTransform = Other . RootMotionTransform ; } FRootMotionMovementParams&)",
    "insertText": "operator(const FRootMotionMovementParams& Other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (bHasRootMotion = Other . bHasRootMotion ; BlendWeight = Other . BlendWeight ; RootMotionTransform = Other . RootMotionTransform ; return* this ; } void)",
    "insertText": "Set(const FTransform& InTransform)"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (bHasRootMotion = true ; RootMotionTransform = InTransform ; RootMotionTransform .)",
    "insertText": "SetScale3D(RootMotionScale)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (BlendWeight = 1 . f ; } void)",
    "insertText": "Accumulate(const FTransform& InTransform)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InTransform)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Accumulate(const FRootMotionMovementParams& MovementParams)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(MovementParams.RootMotionTransform)"
  },
  {
    "label": "AccumulateWithBlend()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AccumulateWithBlend(const FTransform& InTransform, float InBlendWeight)"
  },
  {
    "label": "VBlendWeight()",
    "kind": "Method",
    "detail": "Function (const ScalarRegister)",
    "insertText": "VBlendWeight(InBlendWeight)"
  },
  {
    "label": "AccumulateWithShortestRotation()",
    "kind": "Method",
    "detail": "Function (RootMotionTransform .)",
    "insertText": "AccumulateWithShortestRotation(InTransform, VBlendWeight)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (BlendWeight + = InBlendWeight ; } else {)",
    "insertText": "Set(InTransform * VBlendWeight)"
  },
  {
    "label": "AccumulateWithBlend()",
    "kind": "Method",
    "detail": "Function (BlendWeight = InBlendWeight ; } } void)",
    "insertText": "AccumulateWithBlend(const FRootMotionMovementParams & MovementParams, float InBlendWeight)"
  },
  {
    "label": "AccumulateWithBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateWithBlend(MovementParams.RootMotionTransform, InBlendWeight)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Clear()"
  },
  {
    "label": "MakeUpToFullWeight()",
    "kind": "Method",
    "detail": "Function (bHasRootMotion = false ; BlendWeight = 0 . f ; } void)",
    "insertText": "MakeUpToFullWeight()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (float WeightLeft =)",
    "insertText": "Max(1.f - BlendWeight, 0.f)"
  },
  {
    "label": "AccumulateWithBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateWithBlend(FTransform(), WeightLeft)"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (} RootMotionTransform .)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "ConsumeRootMotion()",
    "kind": "Method",
    "detail": "Function (} FRootMotionMovementParams)",
    "insertText": "ConsumeRootMotion(float Alpha)"
  },
  {
    "label": "PartialRootMotion()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "PartialRootMotion(FQuat::Slerp(FQuat::Identity, RootMotionTransform.GetRotation(), Alpha), RootMotionTransform.GetTranslation()*Alpha, RootMotionScale)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (RootMotionTransform = RootMotionTransform .)",
    "insertText": "GetRelativeTransform(PartialRootMotion)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FRootMotionMovementParams ReturnParams ; ReturnParams .)",
    "insertText": "Set(PartialRootMotion)"
  },
  {
    "label": "ScaleTranslation()",
    "kind": "Method",
    "detail": "Function (RootMotionTransform .)",
    "insertText": "ScaleTranslation(TranslationScale)"
  },
  {
    "label": "FAnimAssetTickContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAnimAssetTickContext { public :)",
    "insertText": "FAnimAssetTickContext(float InDeltaTime, ERootMotionMode::Type InRootMotionMode, bool bInOnlyOneAnimationInGroup, const TArray<FName>& ValidMarkerNames) : RootMotionMode(InRootMotionMode) , MarkerTickContext(ValidMarkerNames) , DeltaTime(InDeltaTime) , LeaderDelta(0.f) , PreviousAnimLengthRatio(0.0f) , AnimLengthRatio(0.0f) , bIsMarkerPositionValid(ValidMarkerNames.Num() > 0) , bIsLeader(true) , bOnlyOneAnimationInGroup(bInOnlyOneAnimationInGroup) , bResyncToSyncGroup(false)"
  },
  {
    "label": "FAnimAssetTickContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimAssetTickContext(float InDeltaTime, ERootMotionMode::Type InRootMotionMode, bool bInOnlyOneAnimationInGroup) : RootMotionMode(InRootMotionMode) , DeltaTime(InDeltaTime) , LeaderDelta(0.f) , PreviousAnimLengthRatio(0.0f) , AnimLengthRatio(0.0f) , bIsMarkerPositionValid(false) , bIsLeader(true) , bOnlyOneAnimationInGroup(bInOnlyOneAnimationInGroup) , bResyncToSyncGroup(false)"
  },
  {
    "label": "IsLeader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLeader()"
  },
  {
    "label": "GetLeaderDelta()",
    "kind": "Method",
    "detail": "Function (LeaderDelta = InLeaderDelta ; } float)",
    "insertText": "GetLeaderDelta()"
  },
  {
    "label": "SetAnimationPositionRatio()",
    "kind": "Method",
    "detail": "Function (PreviousAnimLengthRatio = NormalizedTime ; } void)",
    "insertText": "SetAnimationPositionRatio(float NormalizedTime)"
  },
  {
    "label": "GetPreviousAnimationPositionRatio()",
    "kind": "Method",
    "detail": "Function (AnimLengthRatio = NormalizedTime ; } float)",
    "insertText": "GetPreviousAnimationPositionRatio()"
  },
  {
    "label": "CanUseMarkerPosition()",
    "kind": "Method",
    "detail": "Function (bIsMarkerPositionValid = false ; } bool)",
    "insertText": "CanUseMarkerPosition()"
  },
  {
    "label": "ShouldGenerateNotifies()",
    "kind": "Method",
    "detail": "Function (bIsLeader = false ; } bool)",
    "insertText": "ShouldGenerateNotifies()"
  },
  {
    "label": "IsSingleAnimationContext()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSingleAnimationContext()"
  },
  {
    "label": "ShouldResyncToSyncGroup()",
    "kind": "Method",
    "detail": "Function (bResyncToSyncGroup = bInResyncToSyncGroup ; } bool)",
    "insertText": "ShouldResyncToSyncGroup()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=Settings)"
  },
  {
    "label": "FAnimationGroupReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimationGroupReference() : Method(EAnimSyncMethod::DoNotSync) , GroupName(NAME_None) , GroupRole(EAnimGroupRole::CanBeLeader)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(abstract, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() private: UPROPERTY(AssetRegistrySearchable, Category=Animation, VisibleAnywhere)"
  },
  {
    "label": "ValidateParentAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateParentAsset()"
  },
  {
    "label": "GetAssetMappingTable()",
    "kind": "Method",
    "detail": "Function (const UAssetMappingTable*)",
    "insertText": "GetAssetMappingTable()"
  },
  {
    "label": "TickAssetPlayer()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TickAssetPlayer(FAnimTickRecord& Instance, struct FAnimNotifyQueue& NotifyQueue, FAnimAssetTickContext& Context)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "ValidateSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSkeleton()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const TArray<UAnimMetaData*>&)",
    "insertText": "GetMetaData()"
  },
  {
    "label": "FindMetaDataByClass()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "FindMetaDataByClass()"
  },
  {
    "label": "AddMetaData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMetaData(UAnimMetaData* MetaDataInstance)"
  },
  {
    "label": "EmptyMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyMetaData()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Empty()"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveMetaData(UAnimMetaData* MetaDataInstance)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(TArrayView<UAnimMetaData*> MetaDataInstances)"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(USkeletalMesh* PreviewMesh, bool bMarkAsDirty = true)"
  },
  {
    "label": "GetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "GetPreviewMesh(bool bFindIfNotSet = false)"
  },
  {
    "label": "GetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "GetPreviewMesh()"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(PreviewMesh)"
  },
  {
    "label": "ReplaceSkeleton()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReplaceSkeleton(USkeleton* NewSkeleton, bool bConvertSpaces=false)"
  },
  {
    "label": "OnSetSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetSkeleton(USkeleton* NewSkeleton)"
  },
  {
    "label": "HandleAnimReferenceCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleAnimReferenceCollection(TArray<UAnimationAsset*>& AnimationAssets, bool bRecursive)"
  },
  {
    "label": "GetAllAnimationSequencesReferred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllAnimationSequencesReferred(TArray<class UAnimationAsset*>& AnimationSequences, bool bRecursive = true)"
  },
  {
    "label": "ReplaceReferredAnimations()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReplaceReferredAnimations(const TMap<UAnimationAsset*, UAnimationAsset*>& ReplacementMap)"
  },
  {
    "label": "GetMarkerUpdateCounter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMarkerUpdateCounter()"
  },
  {
    "label": "HasParentAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasParentAsset()"
  },
  {
    "label": "UpdateParentAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParentAsset()"
  },
  {
    "label": "RefreshParentAssetData()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RefreshParentAssetData()"
  },
  {
    "label": "GetUniqueMarkerNames()",
    "kind": "Method",
    "detail": "Function (# endif public : TArray<FName>*)",
    "insertText": "GetUniqueMarkerNames()"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataArray()",
    "kind": "Method",
    "detail": "Function (const TArray<UAssetUserData*>*)",
    "insertText": "GetAssetUserDataArray()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (EDataValidationResult)",
    "insertText": "IsDataValid(class FDataValidationContext& Context)"
  },
  {
    "label": "IsValidAdditive()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsValidAdditive()"
  },
  {
    "label": "RemapTracksToNewSkeleton()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if WITH_EDITOR void)",
    "insertText": "RemapTracksToNewSkeleton(USkeleton* NewSkeleton, bool bConvertSpaces)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (# endif public : class USkeleton*)",
    "insertText": "GetSkeleton()"
  },
  {
    "label": "GetSkeletonGuid()",
    "kind": "Method",
    "detail": "Function (SkeletonVirtualBoneGuid = Guid ; } FGuid)",
    "insertText": "GetSkeletonGuid()"
  }
]