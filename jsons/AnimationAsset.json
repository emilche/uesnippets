[
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "UAnimMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMetaData"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAssetMappingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetMappingTable"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "UPoseAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseAsset"
  },
  {
    "label": "UMirrorDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTable"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FAnimationUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateContext"
  },
  {
    "label": "IAnimNotifyEventContextDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimNotifyEventContextDataInterface"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMarkerPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkerPair"
  },
  {
    "label": "FMarkerTickRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkerTickRecord"
  },
  {
    "label": "FDeltaTimeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeltaTimeRecord"
  },
  {
    "label": "FBlendSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSampleData"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FBlendFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendFilter"
  },
  {
    "label": "FPoseCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseCurve"
  },
  {
    "label": "FAnimExtractContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimExtractContext"
  },
  {
    "label": "FMarkerSyncAnimPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkerSyncAnimPosition"
  },
  {
    "label": "FPassedMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPassedMarker"
  },
  {
    "label": "FAnimTickRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTickRecord"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "FMarkerTickContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarkerTickContext"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimGroupInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimGroupInstance"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FRootMotionMovementParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootMotionMovementParams"
  },
  {
    "label": "FAnimAssetTickContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimAssetTickContext"
  },
  {
    "label": "FAnimationGroupReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationGroupReference"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UAssetMappingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetMappingTable"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "UPoseAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseAsset"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (point)",
    "insertText": "return(Other.SampleDataIndex== SampleDataIndex)"
  },
  {
    "label": "GetClampedWeight()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetClampedWeight()"
  },
  {
    "label": "NormalizeDataWeight()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "NormalizeDataWeight(TArray<FBlendSampleData>& SampleDataList)"
  },
  {
    "label": "AllocateContextDataContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateContextDataContainer()"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimTickRecord(UAnimSequenceBase* InSequence, bool bInLooping, float InPlayRate, float InFinalBlendWeight, float& InCurrentTime, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimTickRecord(UAnimSequenceBase* InSequence, bool bInLooping, float InPlayRate, bool bInIsEvaluator, float InFinalBlendWeight, float& InCurrentTime, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimTickRecord(\n\t\tUBlendSpace* InBlendSpace, const FVector& InBlendInput, TArray<FBlendSampleData>& InBlendSampleDataCache, FBlendFilter& InBlendFilter, bool bInLooping, \n\t\tfloat InPlayRate, bool bShouldTeleportToTime, bool bInIsEvaluator, float InFinalBlendWeight, float& InCurrentTime, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimTickRecord(UAnimMontage* InMontage, float InCurrentPosition, float InPreviousPosition, float InMoveDelta, float InWeight, TArray<FPassedMarker>& InMarkersPassedThisTick, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimTickRecord(UAnimMontage* InMontage, float InCurrentPosition, float InWeight, TArray<FPassedMarker>& InMarkersPassedThisTick, FMarkerTickRecord& InMarkerTickRecord)"
  },
  {
    "label": "FAnimTickRecord()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimTickRecord(UPoseAsset* InPoseAsset, float InFinalBlendWeight)"
  },
  {
    "label": "GatherContextData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherContextData(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "TestTickRecordForLeadership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestTickRecordForLeadership(EAnimGroupRole::Type MembershipType)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize(const FAnimGroupInstance* PreviousGroup)"
  },
  {
    "label": "Prepare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prepare(const FAnimGroupInstance* PreviousGroup)"
  },
  {
    "label": "VBlendWeight()",
    "kind": "Method",
    "detail": "Function (ScalarRegister)",
    "insertText": "VBlendWeight(InBlendWeight)"
  },
  {
    "label": "IsLeader()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsLeader()"
  },
  {
    "label": "ValidateParentAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateParentAsset()"
  },
  {
    "label": "GetPlayLength()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetPlayLength()"
  },
  {
    "label": "SetSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkeleton(USkeleton* NewSkeleton)"
  },
  {
    "label": "ResetSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSkeleton(USkeleton* NewSkeleton)"
  },
  {
    "label": "ValidateSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSkeleton()"
  },
  {
    "label": "AddMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetaData(UAnimMetaData* MetaDataInstance)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(UAnimMetaData* MetaDataInstance)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(TArrayView<UAnimMetaData*> MetaDataInstances)"
  },
  {
    "label": "ReplaceSkeleton()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceSkeleton(USkeleton* NewSkeleton, bool bConvertSpaces=false)"
  },
  {
    "label": "HandleAnimReferenceCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAnimReferenceCollection(TArray<UAnimationAsset*>& AnimationAssets, bool bRecursive)"
  },
  {
    "label": "GetAllAnimationSequencesReferred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllAnimationSequencesReferred(TArray<class UAnimationAsset*>& AnimationSequences, bool bRecursive = true)"
  },
  {
    "label": "ReplaceReferredAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceReferredAnimations(const TMap<UAnimationAsset*, UAnimationAsset*>& ReplacementMap)"
  },
  {
    "label": "SetParentAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentAsset(UAnimationAsset* InParentAsset)"
  },
  {
    "label": "RemapAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemapAsset(UAnimationAsset* SourceAsset, UAnimationAsset* TargetAsset)"
  },
  {
    "label": "UpdateParentAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParentAsset()"
  },
  {
    "label": "RefreshParentAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshParentAssetData()"
  },
  {
    "label": "RemapTracksToNewSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTracksToNewSkeleton(USkeleton* NewSkeleton, bool bConvertSpaces)"
  }
]