[
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStatelessHandshakeFailureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatelessHandshakeFailureInfo"
  },
  {
    "label": "StatelessConnectHandlerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatelessConnectHandlerComponent"
  },
  {
    "label": "FCommonSendToClientParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommonSendToClientParams"
  },
  {
    "label": "FParsedHandshakeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParsedHandshakeData"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PacketHandler . h \" # include \" IPAddress . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogHandshake, Log, All)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (class UNetConnection ; class UNetDriver ; enum class EEngineNetworkRuntimeFeatures : uint16 ; # define SECRET_BYTE_SIZE 6 4 # define SECRET_COUNT 2 # define COOKIE_BYTE_SIZE 2 0 namespace UE::Net { enum class EHandshakeVersion : uint8 { Original = 0,Randomized = 1,NetCLVersion = 2,SessionClientId = 3,NetCLUpgradeMessage = 4,Latest = NetCLUpgradeMessage } ; EHandshakeVersion HandshakeCompatibilityBreaks [ ] = { EHandshakeVersion::SessionClientId } ; enum class EHandshakePacketType : uint8 { InitialPacket = 0,Challenge = 1,Response = 2,Ack = 3,RestartHandshake = 4,RestartResponse = 5,VersionUpgrade = 6,Last = VersionUpgrade } ; enum class EHandshakePacketModifier : uint8 { None = 0 x00,RestartHandshake = 0 x01 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EHandshakePacketModifier)"
  },
  {
    "label": "FStatelessHandshakeFailureInfo()",
    "kind": "Method",
    "detail": "Function (enum class EHandshakeFailureReason { None,WrongVersion } ; struct FStatelessHandshakeFailureInfo { EHandshakeFailureReason FailureReason = EHandshakeFailureReason::None ; uint32 RemoteNetworkVersion = 0 ; EEngineNetworkRuntimeFeatures RemoteNetworkFeatures ; public :)",
    "insertText": "FStatelessHandshakeFailureInfo()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using FHandshakeFailureFunc = TUniqueFunction<)",
    "insertText": "void(FStatelessHandshakeFailureInfo HandshakeFailureInfo)"
  },
  {
    "label": "FCommonSendToClientParams()",
    "kind": "Method",
    "detail": "Function (} class StatelessConnectHandlerComponent : public HandlerComponent { using EHandshakeVersion = UE::Net::EHandshakeVersion ; using EHandshakePacketType = UE::Net::EHandshakePacketType ; using EHandshakePacketModifier = UE::Net::EHandshakePacketModifier ; using FHandshakeFailureFunc = UE::Net::FHandshakeFailureFunc ; private : struct FCommonSendToClientParams { const TSharedPtr<const FInternetAddr>& ClientAddress ; EHandshakeVersion HandshakeVersion ; uint32 ClientID ; public :)",
    "insertText": "FCommonSendToClientParams(const TSharedPtr<const FInternetAddr>& InClientAddress, EHandshakeVersion InHandshakeVersion, uint32 InClientID)"
  },
  {
    "label": "StatelessConnectHandlerComponent()",
    "kind": "Method",
    "detail": "Function (} ; public :)",
    "insertText": "StatelessConnectHandlerComponent()"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "InitFromConnectionless()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromConnectionless(StatelessConnectHandlerComponent* InConnectionlessHandler)"
  },
  {
    "label": "SetHandshakeFailureCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHandshakeFailureCallback(FHandshakeFailureFunc&& InHandshakeFailureFunc)"
  },
  {
    "label": "SendInitialPacket()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SendInitialPacket(EHandshakeVersion HandshakeVersion)"
  },
  {
    "label": "SendConnectChallenge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendConnectChallenge(FCommonSendToClientParams CommonParams, uint8 ClientSentHandshakePacketCount)"
  },
  {
    "label": "SendChallengeResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChallengeResponse(EHandshakeVersion HandshakeVersion, uint8 InSecretId, double InTimestamp, uint8 InCookie[COOKIE_BYTE_SIZE])"
  },
  {
    "label": "SendChallengeAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChallengeAck(FCommonSendToClientParams CommonParams, uint8 ClientSentHandshakePacketCount, uint8 InCookie[COOKIE_BYTE_SIZE])"
  },
  {
    "label": "SendRestartHandshakeRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRestartHandshakeRequest(FCommonSendToClientParams CommonParams)"
  },
  {
    "label": "SendVersionUpgradeMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendVersionUpgradeMessage(FCommonSendToClientParams CommonParams)"
  },
  {
    "label": "BeginHandshakePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginHandshakePacket(FBitWriter& HandshakePacket, EHandshakePacketType HandshakePacketType, EHandshakeVersion HandshakeVersion, uint8 SentHandshakePacketCount_LocalOrRemote, uint32 ClientID, EHandshakePacketModifier HandshakePacketModifier=EHandshakePacketModifier::None)"
  },
  {
    "label": "SendToServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToServer(EHandshakeVersion HandshakeVersion, EHandshakePacketType PacketType, FBitWriter& Packet)"
  },
  {
    "label": "SendToClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToClient(FCommonSendToClientParams CommonParams, EHandshakePacketType PacketType, FBitWriter& Packet)"
  },
  {
    "label": "CapHandshakePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapHandshakePacket(FBitWriter& HandshakePacket, EHandshakeVersion HandshakeVersion)"
  },
  {
    "label": "HasPassedChallenge()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasPassedChallenge(const TSharedPtr<const FInternetAddr>& Address, bool& bOutRestartedHandshake)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bOutRestartedHandshake = bRestartedHandshake ;)",
    "insertText": "return(LastChallengeSuccessAddress.IsValid() && Address.IsValid())"
  },
  {
    "label": "GetChallengeSequence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetChallengeSequence(int32& OutServerSequence, int32& OutClientSequence)"
  },
  {
    "label": "DoesRestartedHandshakeMatch()",
    "kind": "Method",
    "detail": "Function (OutServerSequence = LastServerSequence ; OutClientSequence = LastClientSequence ; } bool)",
    "insertText": "DoesRestartedHandshakeMatch(StatelessConnectHandlerComponent& NetConnComponent)"
  },
  {
    "label": "ResetChallengeData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetChallengeData()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (LastChallengeSuccessAddress = nullptr ; bRestartedHandshake = false ; LastServerSequence = 0 ; LastClientSequence = 0 ;)",
    "insertText": "Memzero(AuthorisedCookie, COOKIE_BYTE_SIZE)"
  },
  {
    "label": "SetDriver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDriver(UNetDriver* InDriver)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Incoming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Incoming(FBitReader& Packet)"
  },
  {
    "label": "Outgoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Outgoing(FBitWriter& Packet, FOutPacketTraits& Traits)"
  },
  {
    "label": "IncomingConnectionless()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingConnectionless(FIncomingPacketRef PacketRef)"
  },
  {
    "label": "CanReadUnaligned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReadUnaligned()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "FParsedHandshakeData()",
    "kind": "Method",
    "detail": "Function (private : struct FParsedHandshakeData { EHandshakeVersion RemoteMinVersion = EHandshakeVersion::Latest ; EHandshakeVersion RemoteCurVersion = EHandshakeVersion::Latest ; uint32 RemoteNetworkVersion = 0 ; EEngineNetworkRuntimeFeatures RemoteNetworkFeatures ; UE::Net::EHandshakePacketType HandshakePacketType = UE::Net::EHandshakePacketType::InitialPacket ; uint8 RemoteSentHandshakePacketCount = 0 ; bool bRestartHandshake = false ; uint8 SecretId = 0 ; double Timestamp = 0 . 0 ; uint8 Cookie [ COOKIE_BYTE_SIZE ] = { } ; uint8 OrigCookie [ COOKIE_BYTE_SIZE ] = { } ; public :)",
    "insertText": "FParsedHandshakeData()"
  },
  {
    "label": "ParseHandshakePacket()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "ParseHandshakePacket(FBitReader& Packet, FParsedHandshakeData& OutResult)"
  },
  {
    "label": "ParseHandshakePacketOriginal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseHandshakePacketOriginal(FBitReader& Packet, FParsedHandshakeData& OutResult)"
  },
  {
    "label": "CheckVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckVersion(const FParsedHandshakeData& HandshakeData, EHandshakeVersion& OutTargetVersion)"
  },
  {
    "label": "GenerateCookie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCookie(const TSharedPtr<const FInternetAddr>& ClientAddress, uint8 SecretId, double Timestamp, uint8 (&OutCookie)[COOKIE_BYTE_SIZE])"
  },
  {
    "label": "UpdateSecret()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSecret()"
  },
  {
    "label": "GetAdjustedSizeBits()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAdjustedSizeBits(int32 InSizeBits, EHandshakeVersion HandshakeVersion)"
  },
  {
    "label": "TrackValidationLogs()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "TrackValidationLogs()"
  }
]