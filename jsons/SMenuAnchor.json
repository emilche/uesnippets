[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "FPopupPlacement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPopupPlacement"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / PopupMethodReply . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Framework / Application / IMenu . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; class SWindow ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnIsOpenChanged, bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMenuAnchor ) : _Content() , _Padding(FMargin(0.f)) , _MenuContent( SNew(STextBlock) .Text( NSLOCTEXT(\"SMenuAnchor\", \"NoMenuContent\", \"No Menu Content Assigned; use .MenuContent\") ) ) , _OnGetMenuContent() , _Placement( MenuPlacement_BelowAnchor ) , _FitInWindow( true ) , _Method() , _ShouldDeferPaintingAfterWindowContent(true) , _UseApplicationMenuStack(true) , _IsCollapsedByParent(false) , _ApplyWidgetStyleToMenu(true)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_ARGUMENT( FMargin, Padding ) SLATE_ARGUMENT( TSharedPtr<SWidget>, MenuContent ) SLATE_EVENT( FOnGetContent, OnGetMenuContent ) SLATE_EVENT( FOnIsOpenChanged, OnMenuOpenChanged ) SLATE_ATTRIBUTE( EMenuPlacement, Placement ) SLATE_ARGUMENT(bool, FitInWindow) SLATE_ARGUMENT(TOptional<EPopupMethod>, Method) SLATE_ARGUMENT(bool, ShouldDeferPaintingAfterWindowContent) SLATE_ARGUMENT(bool, UseApplicationMenuStack) SLATE_ARGUMENT(bool, IsCollapsedByParent) SLATE_ARGUMENT(bool, ApplyWidgetStyleToMenu) SLATE_END_ARGS() SLATE_API virtual ~SMenuAnchor()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SMenuAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SMenuAnchor()"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SetMenuContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuContent(TSharedRef<SWidget> InMenuContent)"
  },
  {
    "label": "SetIsOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsOpen(bool InIsOpen, const bool bFocusMenu = true, const int32 FocusUserIndex = 0)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "ShouldOpenDueToClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOpenDueToClick()"
  },
  {
    "label": "GetMenuPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetMenuPosition()"
  },
  {
    "label": "SetMenuPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuPlacement(TAttribute<EMenuPlacement> InMenuPlacement)"
  },
  {
    "label": "SetFitInWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFitInWindow(bool bFit)"
  },
  {
    "label": "HasOpenSubMenus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOpenSubMenus()"
  },
  {
    "label": "GetMenuWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetMenuWindow()"
  },
  {
    "label": "OnMenuDismissed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuDismissed()"
  },
  {
    "label": "UsingApplicationMenuStack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingApplicationMenuStack()"
  },
  {
    "label": "DismissAllApplicationMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissAllApplicationMenus()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "IsOpenAndReusingWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpenAndReusingWindow()"
  },
  {
    "label": "IsOpenViaCreatedWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpenViaCreatedWindow()"
  },
  {
    "label": "OnMenuClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuClosed(TSharedRef<IMenu> InMenu)"
  },
  {
    "label": "ResetPopupMenuContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPopupMenuContent()"
  },
  {
    "label": "ComputeNewWindowMenuPlacement()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "ComputeNewWindowMenuPlacement(const FGeometry& AllottedGeometry, const FVector2D& PopupDesiredSize, EMenuPlacement PlacementMode)"
  },
  {
    "label": "FPopupPlacement()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakPtr<IMenu>> OpenApplicationMenus ; protected : struct FPopupPlacement {)",
    "insertText": "FPopupPlacement(const FGeometry& PlacementGeometry, const FVector2D& PopupDesiredSize, EMenuPlacement PlacementMode)"
  }
]