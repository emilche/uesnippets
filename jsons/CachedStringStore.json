[
  {
    "label": "TCachedStringStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCachedStringStore"
  },
  {
    "label": "FPersistentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentState"
  },
  {
    "label": "TCachedStringStore()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / UnrealMemory . h \" # include \" Memory / SharedBuffer . h \" # include \" Templates / Tuple . h \" # include \" TraceServices / Model / AnalysisCache . h \" namespace TraceServices { template<CharType> class TCachedStringStore { public : typedef TStringView<CharType> StringViewType ;)",
    "insertText": "TCachedStringStore(const TCHAR* InCacheIdentifier, IAnalysisCache& InCache) : Cache(InCache) , CacheIndex(0)"
  },
  {
    "label": "GetCacheId()",
    "kind": "Method",
    "detail": "Function (CacheIndex = Cache .)",
    "insertText": "GetCacheId(InCacheIdentifier, ECacheFlags_NoGlobalCaching)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (const FMutableMemoryView UserData = Cache .)",
    "insertText": "GetUserData(CacheIndex)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "State(FPersistentState*)UserData.GetData()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (BufferCursor = nullptr ; } else {)",
    "insertText": "check(State->BufferLeftBytes <= BlockSize)"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer& Block = Blocks .)",
    "insertText": "Add_GetRef(Cache.GetBlocks(CacheIndex, BlockIndex, 1))"
  },
  {
    "label": "Cursor()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "Cursor(CharType*)Block.GetData()"
  },
  {
    "label": "BlockEnd()",
    "kind": "Method",
    "detail": "Function (CharType*)",
    "insertText": "BlockEnd(CharType*) ((uint8*) Block.GetData() + BlockSize)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const int32 Length = TCString<CharType)",
    "insertText": "Strlen(Cursor)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (continue ; } const uint32 Hash =)",
    "insertText": "GetTypeHash(StringViewType(Cursor))"
  },
  {
    "label": "BlockSize()",
    "kind": "Method",
    "detail": "Function (const uint64 Offset = BlockIndex*)",
    "insertText": "BlockSize((const uint8*)Cursor - (const uint8*)Block.GetData())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StoredStrings .)",
    "insertText": "Add(Hash, TTuple<uint64,const CharType*>(Offset, Cursor))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Cursor + = Length + 1 ; } })",
    "insertText": "check(Blocks.Num() > 0)"
  },
  {
    "label": "BufferCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferCursor(CharType*) ((uint8*)Blocks.Last().GetData() + (BlockSize - State->BufferLeftBytes))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Blocks.Num() == State->BlockCount)"
  },
  {
    "label": "TCachedStringStore()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCachedStringStore()"
  },
  {
    "label": "GetStringAtOffset()",
    "kind": "Method",
    "detail": "Function (} const CharType*)",
    "insertText": "GetStringAtOffset(uint64 OffsetBytes)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 BlockIndex = static_cast<)",
    "insertText": "int32(OffsetBytes / BlockSize)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 OffsetInBlockBytes = static_cast<)",
    "insertText": "uint32(OffsetBytes % BlockSize)"
  },
  {
    "label": "GetOffsetOfString()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetOffsetOfString(const TCHAR* String)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const uint32 Length =)",
    "insertText": "Strlen(String)"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (const FMemoryView View =)",
    "insertText": "MakeMemoryView(String,Length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSharedBuffer& Block = Blocks [ BlockIndex ] ;)",
    "insertText": "if(Block.GetView().Contains(View))"
  },
  {
    "label": "OffsetInBlock()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "OffsetInBlock(UPTRINT)String - (UPTRINT)Block.GetData()"
  },
  {
    "label": "Store_GetOffset()",
    "kind": "Method",
    "detail": "Function (} } return ~ 0 ; } uint64)",
    "insertText": "Store_GetOffset(const CharType* String)"
  },
  {
    "label": "Store_GetOffset()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Store_GetOffset(const StringViewType String)"
  },
  {
    "label": "Store_GetString()",
    "kind": "Method",
    "detail": "Function (} const CharType*)",
    "insertText": "Store_GetString(const CharType* String)"
  },
  {
    "label": "Store_GetString()",
    "kind": "Method",
    "detail": "Function (} const CharType*)",
    "insertText": "Store_GetString(const StringViewType String)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Num()"
  },
  {
    "label": "AllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "AllocatedSize()"
  },
  {
    "label": "StoreInternal()",
    "kind": "Method",
    "detail": "Function (} private : const TTuple<uint64,const CharType*>&)",
    "insertText": "StoreInternal(const StringViewType& String)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 Hash =)",
    "insertText": "GetTypeHash(String)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (uint32 StringLength = String .)",
    "insertText": "Len()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 StringLengthBytes = StringLength*)",
    "insertText": "sizeof(CharType)"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer& Buffer = Blocks .)",
    "insertText": "Add_GetRef(Cache.CreateBlocks(CacheIndex, 1))"
  },
  {
    "label": "BufferCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferCursor(CharType*) Buffer.GetData()"
  },
  {
    "label": "StoredOffset()",
    "kind": "Method",
    "detail": "Function (+ + State -> BlockCount ; State -> BufferLeftBytes = BlockSize ; } const CharType* StoreString = BufferCursor ; const uint64)",
    "insertText": "StoredOffset((Blocks.Num() - 1) * BlockSize) + (BlockSize - State->BufferLeftBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(BufferCursor, String.GetData(), (StringLength - 1) * sizeof(CharType))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (BufferCursor [ StringLength - 1 ] =)",
    "insertText": "TEXT('\\0')"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (State -> BufferLeftBytes - = StringLengthBytes ; BufferCursor + = StringLength ;)",
    "insertText": "check(GetStringAtOffset(StoredOffset) == StoreString)"
  }
]