[
  {
    "label": "FExportHandleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExportHandleData"
  },
  {
    "label": "HORDE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HORDE_API"
  },
  {
    "label": "FExportHandleData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Storage / BlobHandle . h \" # include \" PacketHandle . h \" class FExportHandleData ; typedef TBlobHandle<FExportHandleData> FExportHandle ; class FExportHandleData final : public FBlobHandleData,public TSharedFromThis<FExportHandleData,ESPMode::ThreadSafe> { public : const char Type [ ] ;)",
    "insertText": "FExportHandleData(FPacketHandle InPacket, int32 InExportIdx)"
  },
  {
    "label": "FExportHandleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExportHandleData(FPacketHandle InPacket, const FUtf8StringView& InFragment)"
  },
  {
    "label": "FExportHandleData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FExportHandleData()"
  },
  {
    "label": "AppendIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendIdentifier(FUtf8String& OutBuffer, int32 ExportIdx)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FBlobHandleData& Other)"
  },
  {
    "label": "GetHashCode()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHashCode()"
  },
  {
    "label": "GetOuter()",
    "kind": "Method",
    "detail": "Function (FBlobHandle)",
    "insertText": "GetOuter()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetType()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (FBlob)",
    "insertText": "Read()"
  },
  {
    "label": "TryAppendIdentifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAppendIdentifier(FUtf8String& OutBuffer)"
  },
  {
    "label": "TryParse()",
    "kind": "Method",
    "detail": "Function (private : const FUtf8StringView FragmentPrefix ; FPacketHandle Packet ; int32 ExportIdx ; bool)",
    "insertText": "TryParse(const FUtf8StringView& Fragment, int32& OutExportIdx)"
  }
]