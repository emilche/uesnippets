[
  {
    "label": "FTaskInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskInfo"
  },
  {
    "label": "FRelationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelationInfo"
  },
  {
    "label": "FWaitingForTasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaitingForTasks"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITasksProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITasksProvider"
  },
  {
    "label": "FTaskInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Async / TaskTrace . h \" # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Templates / Function . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { struct FTaskInfo {)",
    "insertText": "FTaskInfo()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (TaskTrace::FId Id = TaskTrace::InvalidId ; const TCHAR* DebugName = nullptr ; bool bTracked = false ; int32 ThreadToExecuteOn = ENamedThreads::AnyThread ; double InvalidTimestamp = - std::numeric_limits<double)",
    "insertText": "max()"
  },
  {
    "label": "ETaskEnumerationResult()",
    "kind": "Method",
    "detail": "Function (} TaskTrace::FId RelativeId ; double Timestamp ; uint32 ThreadId ; } ; TArray<FRelationInfo> Prerequisites ; TArray<FRelationInfo> Subsequents ; TArray<FRelationInfo> ParentTasks ; TArray<FRelationInfo> NestedTasks ; } ; struct FWaitingForTasks { TArray<TaskTrace::FId> Tasks ; double StartedTimestamp ; double FinishedTimestamp = FTaskInfo::InvalidTimestamp ; } ; enum class ETaskEnumerationOption { Alive,Launched,Active,WaitingForPrerequisites,Queued,Executing,WaitingForNested,Completed,Count } ; enum class ETaskEnumerationResult { Continue,Stop,} ; class ITasksProvider : public IProvider { public : typedef TFunctionRef<)",
    "insertText": "ETaskEnumerationResult(const FTaskInfo& Task)"
  },
  {
    "label": "ITasksProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ITasksProvider()"
  },
  {
    "label": "TryGetTask()",
    "kind": "Method",
    "detail": "Function (const FTaskInfo*)",
    "insertText": "TryGetTask(uint32 ThreadId, double Timestamp)"
  },
  {
    "label": "TryGetTask()",
    "kind": "Method",
    "detail": "Function (const FTaskInfo*)",
    "insertText": "TryGetTask(TaskTrace::FId TaskId)"
  },
  {
    "label": "TryGetWaiting()",
    "kind": "Method",
    "detail": "Function (const FWaitingForTasks*)",
    "insertText": "TryGetWaiting(const TCHAR* TimerName, uint32 ThreadId, double Timestamp)"
  },
  {
    "label": "TryGetParallelForTasks()",
    "kind": "Method",
    "detail": "Function (TArray<TaskTrace::FId>)",
    "insertText": "TryGetParallelForTasks(const TCHAR* TimerName, uint32 ThreadId, double StartTime, double EndTime)"
  },
  {
    "label": "GetNumTasks()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetNumTasks()"
  },
  {
    "label": "EnumerateTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTasks(double StartTime, double EndTime, ETaskEnumerationOption EnumerationOption, TaskCallback Callback)"
  },
  {
    "label": "GetTaskProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetTaskProviderName()"
  },
  {
    "label": "ReadTasksProvider()",
    "kind": "Method",
    "detail": "Function (const ITasksProvider*)",
    "insertText": "ReadTasksProvider(const IAnalysisSession& Session)"
  }
]