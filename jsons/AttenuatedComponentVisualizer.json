[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TAttenuatedComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttenuatedComponentVisualizer"
  },
  {
    "label": "DrawVisualization()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / Attenuation . h \" # include \" ComponentVisualizer . h \" # include \" ShowFlags . h \" # include \" SceneView . h \" # include \" SceneManagement . h \" template<class T> class TAttenuatedComponentVisualizer : public FComponentVisualizer { public : void)",
    "insertText": "DrawVisualization(const UActorComponent* Component, const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T* AttenuatedComponent = Cast<const)",
    "insertText": "T(Component)"
  },
  {
    "label": "GetComponentTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform& Transform = AttenuatedComponent ->)",
    "insertText": "GetComponentTransform()"
  },
  {
    "label": "CollectAttenuationShapesForVisualization()",
    "kind": "Method",
    "detail": "Function (TMultiMap<EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails> ShapeDetailsMap ; AttenuatedComponent ->)",
    "insertText": "CollectAttenuationShapesForVisualization(ShapeDetailsMap)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (const FVector Translation = Transform .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetUnitAxis()",
    "kind": "Method",
    "detail": "Function (const FVector UnitXAxis = Transform .)",
    "insertText": "GetUnitAxis(EAxis::X)"
  },
  {
    "label": "GetUnitAxis()",
    "kind": "Method",
    "detail": "Function (const FVector UnitYAxis = Transform .)",
    "insertText": "GetUnitAxis(EAxis::Y)"
  },
  {
    "label": "GetUnitAxis()",
    "kind": "Method",
    "detail": "Function (const FVector UnitZAxis = Transform .)",
    "insertText": "GetUnitAxis(EAxis::Z)"
  },
  {
    "label": "OuterRadiusColor()",
    "kind": "Method",
    "detail": "Function (const FColor)",
    "insertText": "OuterRadiusColor(255, 153, 0)"
  },
  {
    "label": "InnerRadiusColor()",
    "kind": "Method",
    "detail": "Function (const FColor)",
    "insertText": "InnerRadiusColor(216, 130, 0)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const FBaseAttenuationSettings::AttenuationShapeDetails& ShapeDetails = ShapeDetailsPair . Value ;)",
    "insertText": "switch(ShapeDetailsPair.Key)"
  },
  {
    "label": "DrawOrientedWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawOrientedWireBox(PDI, Translation, UnitXAxis, UnitYAxis, UnitZAxis, ShapeDetails.Extents + FVector(ShapeDetails.Falloff), OuterRadiusColor, SDPG_World)"
  },
  {
    "label": "DrawOrientedWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawOrientedWireBox(PDI, Translation, UnitXAxis, UnitYAxis, UnitZAxis, ShapeDetails.Extents, InnerRadiusColor, SDPG_World)"
  },
  {
    "label": "DrawOrientedWireBox()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DrawOrientedWireBox(PDI, Translation, UnitXAxis, UnitYAxis, UnitZAxis, ShapeDetails.Extents, OuterRadiusColor, SDPG_World)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case EAttenuationShape::Capsule :)",
    "insertText": "if(ShapeDetails.Falloff > 0.f)"
  },
  {
    "label": "DrawWireCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCapsule(PDI, Translation, UnitXAxis, UnitYAxis, UnitZAxis, OuterRadiusColor, ShapeDetails.Extents.Y + ShapeDetails.Falloff, ShapeDetails.Extents.X + ShapeDetails.Falloff, 25, SDPG_World)"
  },
  {
    "label": "DrawWireCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCapsule(PDI, Translation, UnitXAxis, UnitYAxis, UnitZAxis, InnerRadiusColor, ShapeDetails.Extents.Y, ShapeDetails.Extents.X, 25, SDPG_World)"
  },
  {
    "label": "DrawWireCapsule()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DrawWireCapsule(PDI, Translation, UnitXAxis, UnitYAxis, UnitZAxis, OuterRadiusColor, ShapeDetails.Extents.Y, ShapeDetails.Extents.X, 25, SDPG_World)"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (} break ; case EAttenuationShape::Cone : { FTransform Origin = Transform ; Origin .)",
    "insertText": "SetScale3D(FVector(1.f))"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (Origin .)",
    "insertText": "SetTranslation(Translation - (UnitXAxis * ShapeDetails.ConeOffset))"
  },
  {
    "label": "DrawWireSphereCappedCone()",
    "kind": "Method",
    "detail": "Function (ConeRadius = ShapeDetails . Extents . X + ShapeDetails . ConeOffset ; ConeAngle = ShapeDetails . Extents . Y ;)",
    "insertText": "DrawWireSphereCappedCone(PDI, Origin, ConeRadius, ConeAngle, 16, 4, 10, InnerRadiusColor, SDPG_World)"
  },
  {
    "label": "DrawWireSphereCappedCone()",
    "kind": "Method",
    "detail": "Function (} else { const double ConeRadius = ShapeDetails . Extents . X + ShapeDetails . ConeOffset ; const double ConeAngle = ShapeDetails . Extents . Y ;)",
    "insertText": "DrawWireSphereCappedCone(PDI, Origin, ConeRadius, ConeAngle, 16, 4, 10, OuterRadiusColor, SDPG_World)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!FMath::IsNearlyZero(ShapeDetails.ConeSphereRadius, KINDA_SMALL_NUMBER))"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(PDI, Origin, OuterRadiusColor, ShapeDetails.ConeSphereRadius + ShapeDetails.ConeSphereFalloff, SDPG_World)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(PDI, Origin, InnerRadiusColor, ShapeDetails.ConeSphereRadius, SDPG_World)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DrawWireSphereAutoSides(PDI, Origin, OuterRadiusColor, ShapeDetails.ConeSphereRadius, SDPG_World)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(PDI, Translation, OuterRadiusColor, ShapeDetails.Extents.X + ShapeDetails.Falloff, SDPG_World)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(PDI, Translation, InnerRadiusColor, ShapeDetails.Extents.X, SDPG_World)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DrawWireSphereAutoSides(PDI, Translation, OuterRadiusColor, ShapeDetails.Extents.X, SDPG_World)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} break ; default :)",
    "insertText": "check(false)"
  },
  {
    "label": "IsVisualizerEnabled()",
    "kind": "Method",
    "detail": "Function (} } } } } private : bool)",
    "insertText": "IsVisualizerEnabled(const FEngineShowFlags& ShowFlags)"
  }
]