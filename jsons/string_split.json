[
  {
    "label": "WhitespaceHandling",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WhitespaceHandling"
  },
  {
    "label": "SplitResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SplitResult"
  },
  {
    "label": "SplitString()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_SPLIT_H_ # define BASE_STRINGS_STRING_SPLIT_H_ # include<string> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" build / build_config . h \" namespace base { enum WhitespaceHandling { KEEP_WHITESPACE,TRIM_WHITESPACE,} ; enum SplitResult { SPLIT_WANT_ALL,SPLIT_WANT_NONEMPTY,} ; [ [ nodiscard ] ] BASE_EXPORT std::vector<std::string>)",
    "insertText": "SplitString(StringPiece input, StringPiece separators, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitString()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<std::u16string>)",
    "insertText": "SplitString(StringPiece16 input, StringPiece16 separators, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringPiece()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<StringPiece>)",
    "insertText": "SplitStringPiece(StringPiece input, StringPiece separators, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringPiece()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<StringPiece16>)",
    "insertText": "SplitStringPiece(StringPiece16 input, StringPiece16 separators, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringIntoKeyValuePairs()",
    "kind": "Method",
    "detail": "Function (using StringPairs = std::vector<std::pair<std::string,std::string>> ; BASE_EXPORT bool)",
    "insertText": "SplitStringIntoKeyValuePairs(StringPiece input, char key_value_delimiter, char key_value_pair_delimiter, StringPairs* key_value_pairs)"
  },
  {
    "label": "SplitStringIntoKeyValuePairsUsingSubstr()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "SplitStringIntoKeyValuePairsUsingSubstr(StringPiece input, char key_value_delimiter, StringPiece key_value_pair_delimiter, StringPairs* key_value_pairs)"
  },
  {
    "label": "SplitStringUsingSubstr()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<std::u16string>)",
    "insertText": "SplitStringUsingSubstr(StringPiece16 input, StringPiece16 delimiter, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringUsingSubstr()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<std::string>)",
    "insertText": "SplitStringUsingSubstr(StringPiece input, StringPiece delimiter, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringPieceUsingSubstr()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<StringPiece16>)",
    "insertText": "SplitStringPieceUsingSubstr(StringPiece16 input, StringPiece16 delimiter, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringPieceUsingSubstr()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<StringPiece>)",
    "insertText": "SplitStringPieceUsingSubstr(StringPiece input, StringPiece delimiter, WhitespaceHandling whitespace, SplitResult result_type)"
  }
]