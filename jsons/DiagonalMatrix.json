[
  {
    "label": "DiagonalBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagonalBase"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "DiagonalMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagonalMatrix"
  },
  {
    "label": "DiagonalWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagonalWrapper"
  },
  {
    "label": "storage_kind_to_shape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "storage_kind_to_shape"
  },
  {
    "label": "Diagonal2Dense",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Diagonal2Dense"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_DIAGONALMATRIX_H # define EIGEN_DIAGONALMATRIX_H namespace Eigen { # ifndef EIGEN_PARSED_BY_DOXYGEN template<Derived> class DiagonalBase : public EigenBase<Derived> { public : typedef internal::traits<Derived>::DiagonalVectorType DiagonalVectorType ; typedef DiagonalVectorType::Scalar Scalar ; typedef DiagonalVectorType::RealScalar RealScalar ; typedef internal::traits<Derived>::StorageKind StorageKind ; typedef internal::traits<Derived>::StorageIndex StorageIndex ; enum { RowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,ColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,MaxRowsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,MaxColsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,IsVectorAtCompileTime = 0,Flags = NoPreferredStorageOrderBit } ; typedef Matrix<Scalar,RowsAtCompileTime,ColsAtCompileTime,0,MaxRowsAtCompileTime,MaxColsAtCompileTime> DenseMatrixType ; typedef DenseMatrixType DenseType ; typedef DiagonalMatrix<Scalar,DiagonalVectorType::SizeAtCompileTime,DiagonalVectorType::MaxSizeAtCompileTime> PlainObject ; EIGEN_DEVICE_FUNC const Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "toDenseMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC DenseMatrixType)",
    "insertText": "toDenseMatrix()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const DiagonalVectorType&)",
    "insertText": "diagonal()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "cols()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived> EIGEN_DEVICE_FUNC const Product<Derived,MatrixDerived,LazyProduct>)",
    "insertText": "operator(const MatrixBase<MatrixDerived> &matrix)"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} typedef DiagonalWrapper<const CwiseUnaryOp<internal::scalar_inverse_op<Scalar>,const DiagonalVectorType>> InverseReturnType ; EIGEN_DEVICE_FUNC const InverseReturnType)",
    "insertText": "inverse()"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const DiagonalWrapper<const)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(DiagonalVectorType,Scalar,product) > operator*(const Scalar& scalar)"
  },
  {
    "label": "EIGEN_SCALAR_BINARYOP_EXPR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const DiagonalWrapper<const)",
    "insertText": "EIGEN_SCALAR_BINARYOP_EXPR_RETURN_TYPE(Scalar,DiagonalVectorType,product) > operator*(const Scalar& scalar, const DiagonalBase& other)"
  },
  {
    "label": "EIGEN_CWISE_BINARY_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC # ifdef EIGEN_PARSED_BY_DOXYGEN unspecified_expression_type # else const DiagonalWrapper<const)",
    "insertText": "EIGEN_CWISE_BINARY_RETURN_TYPE(DiagonalVectorType,typename OtherDerived::DiagonalVectorType,sum) > #endif operator+(const DiagonalBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_CWISE_BINARY_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC # ifdef EIGEN_PARSED_BY_DOXYGEN unspecified_expression_type # else const DiagonalWrapper<const)",
    "insertText": "EIGEN_CWISE_BINARY_RETURN_TYPE(DiagonalVectorType,typename OtherDerived::DiagonalVectorType,difference) > #endif operator-(const DiagonalBase<OtherDerived>& other)"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "DiagonalMatrix(Index dim) : m_diagonal(dim)"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "DiagonalMatrix(const Scalar& x, const Scalar& y) : m_diagonal(x,y)"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "DiagonalMatrix(const Scalar& x, const Scalar& y, const Scalar& z) : m_diagonal(x,y,z)"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_CXX11 template<. . . ArgTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "DiagonalMatrix(const Scalar& a0, const Scalar& a1, const Scalar& a2, const ArgTypes&... args) : m_diagonal(a0, a1, a2, args...)"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "DiagonalMatrix(const std::initializer_list<std::initializer_list<Scalar>>& list) : m_diagonal(list)"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} # endif template<OtherDerived> EIGEN_DEVICE_FUNC)",
    "insertText": "DiagonalMatrix(const DiagonalBase<OtherDerived>& other) : m_diagonal(other.diagonal())"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN)",
    "insertText": "DiagonalMatrix(const DiagonalMatrix& other) : m_diagonal(other.diagonal())"
  },
  {
    "label": "DiagonalMatrix()",
    "kind": "Method",
    "detail": "Function (} # endif template<OtherDerived> EIGEN_DEVICE_FUNC)",
    "insertText": "DiagonalMatrix(const MatrixBase<OtherDerived>& other) : m_diagonal(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC DiagonalMatrix&)",
    "insertText": "operator(const DiagonalBase<OtherDerived>& other)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_diagonal .)",
    "insertText": "resize(size)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "setZero()"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "setZero(Index size)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (m_diagonal .)",
    "insertText": "setZero(size)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "setIdentity()"
  },
  {
    "label": "setOnes()",
    "kind": "Method",
    "detail": "Function (m_diagonal .)",
    "insertText": "setOnes()"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "setIdentity(Index size)"
  },
  {
    "label": "setOnes()",
    "kind": "Method",
    "detail": "Function (m_diagonal .)",
    "insertText": "setOnes(size)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<_DiagonalVectorType> struct traits<DiagonalWrapper<_DiagonalVectorType>> { typedef _DiagonalVectorType DiagonalVectorType ; typedef DiagonalVectorType::Scalar Scalar ; typedef DiagonalVectorType::StorageIndex StorageIndex ; typedef DiagonalShape StorageKind ; typedef traits<DiagonalVectorType>::XprKind XprKind ; enum { RowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,ColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,MaxRowsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,MaxColsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,)",
    "insertText": "Flags(traits<DiagonalVectorType>::Flags & LvalueBit)"
  },
  {
    "label": "DiagonalWrapper()",
    "kind": "Method",
    "detail": "Function (} ; } template<_DiagonalVectorType> class DiagonalWrapper : public DiagonalBase<DiagonalWrapper<_DiagonalVectorType>>,internal::no_assignment_operator { public : # ifndef EIGEN_PARSED_BY_DOXYGEN typedef _DiagonalVectorType DiagonalVectorType ; typedef DiagonalWrapper Nested ; # endif EIGEN_DEVICE_FUNC)",
    "insertText": "DiagonalWrapper(DiagonalVectorType& a_diagonal) : m_diagonal(a_diagonal)"
  },
  {
    "label": "isDiagonal()",
    "kind": "Method",
    "detail": "Function (} template<Derived> bool MatrixBase<Derived)",
    "insertText": "isDiagonal(const RealScalar& prec)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar maxAbsOnDiagonal = static_cast<)",
    "insertText": "RealScalar(-1)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (RealScalar absOnDiagonal =)",
    "insertText": "abs(coeff(j,j))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index j = 0; j < cols(); ++j) for(Index i = 0; i < j; ++i)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} return true ; } namespace internal { template<> struct storage_kind_to_shape<DiagonalShape> { typedef DiagonalShape Shape ; } ; struct Diagonal2Dense { } ; template<> struct AssignmentKind<DenseShape,DiagonalShape> { typedef Diagonal2Dense Kind ; } ; template<DstXprType,SrcXprType,Functor> struct Assignment<DstXprType,SrcXprType,Functor,Diagonal2Dense> { void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "diagonal() = src.diagonal()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "diagonal() += src.diagonal()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "diagonal() -= src.diagonal()"
  }
]