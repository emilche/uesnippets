[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStropheError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStropheError"
  },
  {
    "label": "FStropheError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" XmppStrophe / StropheStanza . h \" # if WITH_XMPP_STROPHE THIRD_PARTY_INCLUDES_START # include \" strophe . h \" THIRD_PARTY_INCLUDES_END enum class EStropheErrorType : uint8 { Unknown,BadFormat,BadNSPrefix,Conflict,ConnectionTimeout,HostGone,HostUnknown,ImproperAddr,InternalServerError,InvalidFrom,InvalidId,InvalidNS,InvalidXML,NotAuthorized,PolicyViolation,RemoteConnectionFailed,ResourceConstraint,RestrictedXML,SeeOtherHost,SystemShutdown,UndefinedCondition,UnsupportedEncoding,UnsupportedStanzaType,UnsupportedVersion,XMLNotWellFormed } ; class FStropheError { public :)",
    "insertText": "FStropheError(const xmpp_stream_error_t& StreamError, int32 InErrorNumber)"
  },
  {
    "label": "GetErrorType()",
    "kind": "Method",
    "detail": "Function (EStropheErrorType)",
    "insertText": "GetErrorType()"
  },
  {
    "label": "GetErrorString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetErrorString()"
  },
  {
    "label": "GetErrorNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetErrorNumber()"
  },
  {
    "label": "GetStanza()",
    "kind": "Method",
    "detail": "Function (const FStropheStanza&)",
    "insertText": "GetStanza()"
  },
  {
    "label": "ConvertStropheError()",
    "kind": "Method",
    "detail": "Function (protected : EStropheErrorType)",
    "insertText": "ConvertStropheError(xmpp_error_type_t InErrorType)"
  }
]