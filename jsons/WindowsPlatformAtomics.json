[
  {
    "label": "FWindowsPlatformAtomics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowsPlatformAtomics"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformAtomics . h \" # include \" Windows / WindowsSystemIncludes . h \" # include<intrin . h> struct FWindowsPlatformAtomics : public FGenericPlatformAtomics {)",
    "insertText": "static_assert(sizeof(int8) == sizeof(char) && alignof(int8) == alignof(char), \"int8 must be compatible with char\")"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "InterlockedIncrement(volatile int8* Value)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedIncrement(volatile int16* Value)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedIncrement(volatile int32* Value)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedIncrement(volatile int64* Value)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return(int64)::_InterlockedIncrement64((long long*)Value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "for(;;)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 OldValue =* Value ;)",
    "insertText": "if(_InterlockedCompareExchange64(Value, OldValue + 1, OldValue) == OldValue)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedDecrement(volatile int16* Value)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedDecrement(volatile int32* Value)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedDecrement(volatile int64* Value)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return(int64)::_InterlockedDecrement64((long long*)Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 OldValue =* Value ;)",
    "insertText": "if(_InterlockedCompareExchange64(Value, OldValue - 1, OldValue) == OldValue)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedAdd(volatile int16* Value, int16 Amount)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedAdd(volatile int32* Value, int32 Amount)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedAdd(volatile int64* Value, int64 Amount)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return(int64)::_InterlockedExchangeAdd64((int64*)Value, (int64)Amount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 OldValue =* Value ;)",
    "insertText": "if(_InterlockedCompareExchange64(Value, OldValue + Amount, OldValue) == OldValue)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedExchange(volatile int16* Value, int16 Exchange)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedExchange(volatile int32* Value, int32 Exchange)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedExchange(volatile int64* Value, int64 Exchange)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return(int64)::_InterlockedExchange64((long long*)Value, (long long)Exchange)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 OldValue =* Value ;)",
    "insertText": "if(_InterlockedCompareExchange64(Value, Exchange, OldValue) == OldValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) if (IsAligned(Dest, alignof(void*)) == false)"
  },
  {
    "label": "HandleAtomicsFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAtomicsFailure(TEXT(\"InterlockedExchangePointer requires Dest pointer to be aligned to %d bytes\"), (int)alignof(void*))"
  },
  {
    "label": "_InterlockedExchangePointer()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "_InterlockedExchangePointer(Dest, Exchange)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedCompareExchange(volatile int8* Dest, int8 Exchange, int8 Comparand)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedCompareExchange(volatile int16* Dest, int16 Exchange, int16 Comparand)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedCompareExchange(volatile int32* Dest, int32 Exchange, int32 Comparand)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedCompareExchange(volatile int64* Dest, int64 Exchange, int64 Comparand)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) if (IsAligned(Dest, alignof(int64)) == false)"
  },
  {
    "label": "HandleAtomicsFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAtomicsFailure(TEXT(\"InterlockedCompareExchange int64 requires Dest pointer to be aligned to %d bytes\"), (int)alignof(int64))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "return(int64)::_InterlockedCompareExchange64(Dest, Exchange, Comparand)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedAnd(volatile int8* Value, const int8 AndValue)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedAnd(volatile int16* Value, const int16 AndValue)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedAnd(volatile int32* Value, const int32 AndValue)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedAnd(volatile int64* Value, const int64 AndValue)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return(int64)::_InterlockedAnd64((volatile long long*)Value, (long long)AndValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int64 OldValue =* Value ;)",
    "insertText": "if(_InterlockedCompareExchange64(Value, OldValue & AndValue, OldValue) == OldValue)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedOr(volatile int16* Value, const int16 OrValue)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedOr(volatile int32* Value, const int32 OrValue)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedOr(volatile int64* Value, const int64 OrValue)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return(int64)::_InterlockedOr64((volatile long long*)Value, (long long)OrValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int64 OldValue =* Value ;)",
    "insertText": "if(_InterlockedCompareExchange64(Value, OldValue | OrValue, OldValue) == OldValue)"
  },
  {
    "label": "InterlockedXor()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedXor(volatile int16* Value, const int16 XorValue)"
  },
  {
    "label": "InterlockedXor()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedXor(volatile int32* Value, const int32 XorValue)"
  },
  {
    "label": "InterlockedXor()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedXor(volatile int64* Value, const int64 XorValue)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return(int64)::_InterlockedXor64((volatile long long*)Value, (long long)XorValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int64 OldValue =* Value ;)",
    "insertText": "if(_InterlockedCompareExchange64(Value, OldValue ^ XorValue, OldValue) == OldValue)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "AtomicRead(volatile const int16* Src)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AtomicRead(volatile const int32* Src)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "AtomicRead(volatile const int64* Src)"
  },
  {
    "label": "AtomicRead_Relaxed()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "AtomicRead_Relaxed(volatile const int8* Src)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS return* Src ; # else return)",
    "insertText": "InterlockedCompareExchange((volatile int64*)Src, 0, 0)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "AtomicStore(volatile int8* Src, int8 Val)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedExchange(Src, Val)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore(volatile int16* Src, int16 Val)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore(volatile int32* Src, int32 Val)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore(volatile int64* Src, int64 Val)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore_Relaxed(volatile int8* Src, int8 Val)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (* Src = Val ; } void)",
    "insertText": "AtomicStore_Relaxed(volatile int16* Src, int16 Val)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (* Src = Val ; } void)",
    "insertText": "AtomicStore_Relaxed(volatile int32* Src, int32 Val)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (* Src = Val ; } void)",
    "insertText": "AtomicStore_Relaxed(volatile int64* Src, int64 Val)"
  },
  {
    "label": "InterlockedCompareExchange128()",
    "kind": "Method",
    "detail": "Function (# endif } # if PLATFORM_HAS_128BIT_ATOMICS bool)",
    "insertText": "InterlockedCompareExchange128(volatile FInt128* Dest, const FInt128& Exchange, FInt128* Comparand)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) if (IsAligned(Dest,16) == false)"
  },
  {
    "label": "HandleAtomicsFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAtomicsFailure(TEXT(\"InterlockedCompareExchange128 requires Dest pointer to be aligned to 16 bytes\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsAligned(Comparand,16) == false)"
  },
  {
    "label": "HandleAtomicsFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAtomicsFailure(TEXT(\"InterlockedCompareExchange128 requires Comparand pointer to be aligned to 16 bytes\"))"
  },
  {
    "label": "_InterlockedCompareExchange128()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "_InterlockedCompareExchange128((int64 volatile *)Dest, Exchange.High, Exchange.Low, (int64*)Comparand)"
  },
  {
    "label": "AtomicRead128()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicRead128(const volatile FInt128* Src, FInt128* OutResult)"
  },
  {
    "label": "InterlockedCompareExchange128()",
    "kind": "Method",
    "detail": "Function (FInt128 Zero ; Zero . High = 0 ; Zero . Low = 0 ;* OutResult = Zero ;)",
    "insertText": "InterlockedCompareExchange128((FInt128*)Src, Zero, OutResult)"
  },
  {
    "label": "InterlockedCompareExchangePointer()",
    "kind": "Method",
    "detail": "Function (} # endif void*)",
    "insertText": "InterlockedCompareExchangePointer(void*volatile* Dest, void* Exchange, void* Comparand)"
  },
  {
    "label": "HandleAtomicsFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAtomicsFailure(TEXT(\"InterlockedCompareExchangePointer requires Dest pointer to be aligned to %d bytes\"), (int)alignof(void*))"
  },
  {
    "label": "_InterlockedCompareExchangePointer()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "_InterlockedCompareExchangePointer(Dest, Exchange, Comparand)"
  },
  {
    "label": "CanUseCompareExchange128()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanUseCompareExchange128()"
  },
  {
    "label": "HandleAtomicsFailure()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "HandleAtomicsFailure(const TCHAR* InFormat, ...)"
  }
]