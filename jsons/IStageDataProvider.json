[
  {
    "label": "FStageDataBaseMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStageDataBaseMessage"
  },
  {
    "label": "STAGEDATACORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STAGEDATACORE_API"
  },
  {
    "label": "FQualifiedFrameTime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Features / IModularFeature . h \" # include \" Features / IModularFeatures . h \" # include \" CoreMinimal . h \" # include \" Misc / App . h \" # include \" StageMessages . h \" namespace UE::StageProviderUtils { const FQualifiedFrameTime InvalidTime =)",
    "insertText": "FQualifiedFrameTime(FFrameTime(FFrameNumber(-1)), FFrameRate(-1, -1))"
  },
  {
    "label": "IStageDataProvider()",
    "kind": "Method",
    "detail": "Function (} struct FStageDataBaseMessage ; class IStageDataProvider : public IModularFeature { public : ~)",
    "insertText": "IStageDataProvider()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (} FName ModularFeatureName ; public : template<MessageType,. . . Args> bool)",
    "insertText": "SendMessage(EStageMessageFlags Flags, Args&&... args)"
  },
  {
    "label": "TempObj()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_STAGEMONITOR_LOGGING MessageType)",
    "insertText": "TempObj(Forward<Args>(args)...)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (# endif return false ; } template<MessageType,. . . Args> bool)",
    "insertText": "SendMessage(EStageMessageFlags Flags, MessageType& Message)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_STAGEMONITOR_LOGGING return)",
    "insertText": "SendMessage(Forward<MessageType>(Message), Flags)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (# endif return false ; } template<MessageType,. . . Args> bool)",
    "insertText": "SendMessage(EStageMessageFlags Flags, MessageType&& Message)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } private : template<MessageType> bool)",
    "insertText": "SendMessage(MessageType&& Message, EStageMessageFlags InFlags)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IModularFeatures& ModularFeatures =)",
    "insertText": "Get()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IStageDataProvider* StageDataProvider =&)",
    "insertText": "Get().GetModularFeature<IStageDataProvider>(IStageDataProvider::ModularFeatureName)"
  },
  {
    "label": "GetCurrentFrameTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FQualifiedFrameTime> CurrentFrameTime =)",
    "insertText": "GetCurrentFrameTime()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Message . DateTime =)",
    "insertText": "Now()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Message . FrameTime = CurrentFrameTime .)",
    "insertText": "GetValue()"
  },
  {
    "label": "SendMessageInternal()",
    "kind": "Method",
    "detail": "Function (} else { Message . FrameTime = UE::StageProviderUtils::InvalidTime ; } return StageDataProvider ->)",
    "insertText": "SendMessageInternal(&Message, MessageType::StaticStruct(), InFlags)"
  },
  {
    "label": "SendMessageInternal()",
    "kind": "Method",
    "detail": "Function (} return false ; } protected : bool)",
    "insertText": "SendMessageInternal(FStageDataBaseMessage* Payload, UScriptStruct* Type, EStageMessageFlags InFlags)"
  }
]