[
  {
    "label": "GetImplicitCollisionType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Collision / PBDCollisionConstraint . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / ParticleHandle . h \" namespace Chaos { bool bChaos_Collision_EnableBoundsChecks ; bool bChaos_Collision_EnableLargeMeshManifolds ; namespace Private { EImplicitObjectType)",
    "insertText": "GetImplicitCollisionType(const FGeometryParticleHandle* Particle, const FImplicitObject* Implicit)"
  },
  {
    "label": "ImplicitType()",
    "kind": "Method",
    "detail": "Function (EImplicitObjectType)",
    "insertText": "ImplicitType(Implicit != nullptr) ? GetInnerType(Implicit->GetCollisionType())"
  },
  {
    "label": "FConstGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (const FBVHParticles* Simplicial =)",
    "insertText": "FConstGenericParticleHandle(Particle)->CollisionParticles().Get()"
  },
  {
    "label": "bHasSimplicial()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bHasSimplicial(Simplicial != nullptr) && (Simplicial->Size() > 0)"
  },
  {
    "label": "ImplicitType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImplicitType(Implicit != nullptr) ? GetInnerType(Implicit->GetType())"
  },
  {
    "label": "CalculateImplicitBoundsTestFlags()",
    "kind": "Method",
    "detail": "Function (} } return ImplicitType ; } FImplicitBoundsTestFlags)",
    "insertText": "CalculateImplicitBoundsTestFlags(FGeometryParticleHandle* Particle0, const FImplicitObject* Implicit0, const FPerShapeData* Shape0, FGeometryParticleHandle* Particle1, const FImplicitObject* Implicit1, const FPerShapeData* Shape1, FRealSingle& OutDistanceCheckSize)"
  },
  {
    "label": "GetImplicitCollisionType()",
    "kind": "Method",
    "detail": "Function (FImplicitBoundsTestFlags Flags ; const EImplicitObjectType ImplicitType0 =)",
    "insertText": "GetImplicitCollisionType(Particle0, Implicit0)"
  },
  {
    "label": "GetImplicitCollisionType()",
    "kind": "Method",
    "detail": "Function (const EImplicitObjectType ImplicitType1 =)",
    "insertText": "GetImplicitCollisionType(Particle1, Implicit1)"
  },
  {
    "label": "bIsSphere0()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsSphere0(ImplicitType0 == ImplicitObjectType::Sphere)"
  },
  {
    "label": "bIsSphere1()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsSphere1(ImplicitType1 == ImplicitObjectType::Sphere)"
  },
  {
    "label": "bIsCapsule0()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsCapsule0(ImplicitType0 == ImplicitObjectType::Capsule)"
  },
  {
    "label": "bIsCapsule1()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsCapsule1(ImplicitType1 == ImplicitObjectType::Capsule)"
  },
  {
    "label": "bIsMesh0()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsMesh0(ImplicitType0 == ImplicitObjectType::TriangleMesh) || (ImplicitType0 == ImplicitObjectType::HeightField)"
  },
  {
    "label": "bIsMesh1()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsMesh1(ImplicitType1 == ImplicitObjectType::TriangleMesh) || (ImplicitType1 == ImplicitObjectType::HeightField)"
  },
  {
    "label": "bIsLevelSet()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsLevelSet((ImplicitType0 == ImplicitObjectType::LevelSet) || (ImplicitType1 == ImplicitObjectType::LevelSet))"
  },
  {
    "label": "bHasBounds0()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bHasBounds0(Implicit0 != nullptr) && Implicit0->HasBoundingBox()"
  },
  {
    "label": "bHasBounds1()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bHasBounds1(Implicit1 != nullptr) && Implicit1->HasBoundingBox()"
  },
  {
    "label": "bAllowBoundsCheck()",
    "kind": "Method",
    "detail": "Function (const bool bAllowBoundsCheck = bChaos_Collision_EnableBoundsChecks&& bHasBounds0&& bHasBounds1 ; Flags . bEnableAABBCheck =)",
    "insertText": "bAllowBoundsCheck(bIsSphere0 && bIsSphere1)"
  },
  {
    "label": "OutDistanceCheckSize()",
    "kind": "Method",
    "detail": "Function (Flags . bEnableOBBCheck0 = bAllowBoundsCheck&& ! bIsSphere0 ; Flags . bEnableOBBCheck1 = bAllowBoundsCheck&& ! bIsSphere1 ; Flags . bEnableDistanceCheck = bAllowBoundsCheck&& bIsSphere0&& bIsSphere1 ;)",
    "insertText": "OutDistanceCheckSize(Flags.bEnableDistanceCheck) ? FRealSingle(Implicit0->GetMargin() + Implicit1->GetMargin())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Flags . bEnableManifoldUpdate = ! bIsSphere0&& ! bIsSphere1&& ! bIsCapsule0&& ! bIsCapsule1&& ! bIsLevelSet ;)",
    "insertText": "if(!bChaos_Collision_EnableLargeMeshManifolds)"
  },
  {
    "label": "GetIsProbe()",
    "kind": "Method",
    "detail": "Function (Flags . bEnableManifoldUpdate = Flags . bEnableManifoldUpdate&& ! bIsMesh0&& ! bIsMesh1 ; } Flags . bIsProbe = Shape0 ->)",
    "insertText": "GetIsProbe() || Shape1->GetIsProbe()"
  }
]