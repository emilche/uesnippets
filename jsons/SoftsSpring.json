[
  {
    "label": "GetXPBDSpringDelta()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / SoftsEvolutionLinearSystem . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" namespace Chaos::Softs { namespace Spring { template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetXPBDSpringDelta(const SolverParticlesOrRange& Particles, const FSolverReal Dt, const TVec2<int32>& Constraint, const FSolverReal RestLength, FSolverReal& Lambda, const FSolverReal StiffnessValue)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (const int32 Index1 = Constraint [ 0 ] ; const int32 Index2 = Constraint [ 1 ] ; const FSolverReal CombinedInvMass = Particles .)",
    "insertText": "InvM(Index2) + Particles.InvM(Index1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = Particles .)",
    "insertText": "P(Index1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = Particles .)",
    "insertText": "P(Index2)"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (FSolverVec3 Direction = P1 - P2 ; const FSolverReal Distance = Direction .)",
    "insertText": "SafeNormalize()"
  },
  {
    "label": "DLambda()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Offset = Distance - RestLength ; const FSolverReal AlphaInv = StiffnessValue* Dt* Dt ; const FSolverReal)",
    "insertText": "DLambda(-AlphaInv * Offset - Lambda) / (AlphaInv * CombinedInvMass + (FSolverReal)1.)"
  },
  {
    "label": "GetXPBDSpringDeltaWithDamping()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Delta = DLambda* Direction ; Lambda + = DLambda ; return Delta ; } template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetXPBDSpringDeltaWithDamping(const SolverParticlesOrRange& Particles, const FSolverReal Dt, const TVec2<int32>& Constraint, const FSolverReal RestLength, FSolverReal& Lambda, const FSolverReal StiffnessValue, const FSolverReal DampingRatioValue)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Damping = DampingRatioValue* 2 . f*)",
    "insertText": "Sqrt(StiffnessValue / CombinedInvMass) * (RestLength > UE_SMALL_NUMBER ? (FSolverReal)1. / RestLength : (FSolverReal)1.)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Offset = Distance - RestLength ; const FSolverVec3& X1 = Particles .)",
    "insertText": "GetX(Index1)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& X2 = Particles .)",
    "insertText": "GetX(Index2)"
  },
  {
    "label": "DLambda()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 RelativeVelocityTimesDt = P1 - X1 - P2 + X2 ; const FSolverReal AlphaInv = StiffnessValue* Dt* Dt ; const FSolverReal BetaDt = Damping* Dt ; const FSolverReal)",
    "insertText": "DLambda(-AlphaInv * Offset - Lambda - BetaDt * FSolverVec3::DotProduct(Direction, RelativeVelocityTimesDt)) / ((AlphaInv + BetaDt) * CombinedInvMass + (FSolverReal)1.)"
  },
  {
    "label": "GetXPBDSpringDampingDelta()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Delta = DLambda* Direction ; Lambda + = DLambda ; return Delta ; } template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetXPBDSpringDampingDelta(const SolverParticlesOrRange& Particles, const FSolverReal Dt, const TVec2<int32>& Constraint, const FSolverReal RestLength, FSolverReal& Lambda, const FSolverReal StiffnessValue, const FSolverReal DampingRatioValue)"
  },
  {
    "label": "Direction()",
    "kind": "Method",
    "detail": "Function (FSolverVec3)",
    "insertText": "Direction(P1 - P2)"
  },
  {
    "label": "DLambda()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 RelativeVelocityTimesDt = P1 - X1 - P2 + X2 ; const FSolverReal BetaDt = Damping* Dt ; const FSolverReal)",
    "insertText": "DLambda(-BetaDt * FSolverVec3::DotProduct(Direction, RelativeVelocityTimesDt) - Lambda) / (BetaDt * CombinedInvMass + (FSolverReal)1.)"
  },
  {
    "label": "GetXPBDAxialSpringDelta()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Delta = DLambda* Direction ; Lambda + = DLambda ; return Delta ; } template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetXPBDAxialSpringDelta(const SolverParticlesOrRange& Particles, const FSolverReal Dt, const TVec3<int32>& Constraint, const FSolverReal Bary, const FSolverReal RestLength, FSolverReal& Lambda, const FSolverReal StiffnessValue)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (const int32 Index1 = Constraint [ 0 ] ; const int32 Index2 = Constraint [ 1 ] ; const int32 Index3 = Constraint [ 2 ] ; const FSolverReal PInvMass = Particles .)",
    "insertText": "InvM(Index3) * ((FSolverReal)1. - Bary) + Particles.InvM(Index2)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (const FSolverReal CombinedInvMass = PInvMass + Particles .)",
    "insertText": "InvM(Index1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = Particles .)",
    "insertText": "P(Index3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3)",
    "insertText": "P(P2 - P3)"
  },
  {
    "label": "GetXPBDAxialSpringDeltaWithDamping()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Delta = DLambda* Direction ; Lambda + = DLambda ; return Delta ; } template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetXPBDAxialSpringDeltaWithDamping(const SolverParticlesOrRange& Particles, const FSolverReal Dt, const TVec3<int32>& Constraint, const FSolverReal Bary, const FSolverReal RestLength, FSolverReal& Lambda, const FSolverReal StiffnessValue, const FSolverReal DampingRatioValue)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& X3 = Particles .)",
    "insertText": "GetX(Index3)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3)",
    "insertText": "X(X2 - X3)"
  },
  {
    "label": "GetXPBDAxialSpringDampingDelta()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Delta = DLambda* Direction ; Lambda + = DLambda ; return Delta ; } template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetXPBDAxialSpringDampingDelta(const SolverParticlesOrRange& Particles, const FSolverReal Dt, const TVec3<int32>& Constraint, const FSolverReal Bary, const FSolverReal RestLength, FSolverReal& Lambda, const FSolverReal StiffnessValue, const FSolverReal DampingRatioValue)"
  },
  {
    "label": "UpdateSpringLinearSystem()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Delta = DLambda* Direction ; Lambda + = DLambda ; return Delta ; } void)",
    "insertText": "UpdateSpringLinearSystem(const FSolverParticlesRange& Particles, const FSolverReal Dt, const TVec2<int32>& Constraint, const FSolverReal RestLength, const FSolverReal StiffnessValue, const FSolverReal MinStiffness, const FSolverReal DampingRatioValue, FEvolutionLinearSystem& LinearSystem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Index1 = Constraint [ 0 ] ; const int32 Index2 = Constraint [ 1 ] ;)",
    "insertText": "if(StiffnessValue <= MinStiffness || (Particles.InvM(Index2) == (FSolverReal)0. && Particles.InvM(Index1) == (FSolverReal)0.))"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 RelVel = Particles .)",
    "insertText": "V(Index1) - Particles.V(Index2)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverReal CDot =)",
    "insertText": "DotProduct(Direction, RelVel)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Offset = Distance - RestLength ; const FSolverReal)",
    "insertText": "Scalar(StiffnessValue * Offset + Damping * CDot)"
  },
  {
    "label": "OuterProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Force1 = Scalar* Direction ; const FSolverMatrix33 DirDirT =)",
    "insertText": "OuterProduct(Direction, Direction)"
  },
  {
    "label": "Hess11()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33)",
    "insertText": "Hess11(FSolverReal)1. / Distance * (FSolverMatrix33::Identity - DirDirT)"
  },
  {
    "label": "RequiresSPDForceDerivatives()",
    "kind": "Method",
    "detail": "Function (const FSolverReal ScalarModified = LinearSystem .)",
    "insertText": "RequiresSPDForceDerivatives() ? FMath::Min(Scalar, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33 Df1Dx1 = - StiffnessValue* DirDirT + ScalarModified* Hess11 ; const FSolverMatrix33 Df1Dx2 = - Df1Dx1 ; const FSolverMatrix33 Df1Dv1 = - Damping* DirDirT ; const FSolverMatrix33 Df1Dv2 = - Df1Dv1 ;)",
    "insertText": "if(Particles.InvM(Index1) != (FSolverReal)0.)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddForce(Particles, Force1, Index1, Dt)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddSymmetricForceDerivative(Particles, &Df1Dx1, &Df1Dv1, Index1, Index1, Dt)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddSymmetricForceDerivative(Particles, &Df1Dx2, &Df1Dv2, Index1, Index2, Dt)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddForce(Particles, -Force1, Index2, Dt)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddSymmetricForceDerivative(Particles, &Df1Dx1, &Df1Dv1, Index2, Index2, Dt)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "check(Particles.InvM(Index2) != (FSolverReal)0.)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddSymmetricForceDerivative(Particles, &Df1Dx2, &Df1Dv2, Index2, Index1, Dt)"
  },
  {
    "label": "UpdateAxialSpringLinearSystem()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateAxialSpringLinearSystem(const FSolverParticlesRange& Particles, const FSolverReal Dt, const TVec3<int32>& Constraint, const FSolverReal Bary, const FSolverReal RestLength, const FSolverReal StiffnessValue, const FSolverReal MinStiffness, const FSolverReal DampingRatioValue, FEvolutionLinearSystem& LinearSystem)"
  },
  {
    "label": "P2()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 P = Bary*)",
    "insertText": "P2((FSolverReal)1. - Bary)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& V1 = Particles .)",
    "insertText": "V(Index1)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& V2 = Particles .)",
    "insertText": "V(Index2)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& V3 = Particles .)",
    "insertText": "V(Index3)"
  },
  {
    "label": "V2()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 V = Bary*)",
    "insertText": "V2((FSolverReal)1. - Bary)"
  },
  {
    "label": "B3()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33 Df1Dx1 = - StiffnessValue* DirDirT + ScalarModified* Hess11 ; const FSolverMatrix33 Df1Dv1 = - Damping* DirDirT ; const FSolverReal)",
    "insertText": "B3(Bary - (FSolverReal)1.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(Index2) != (FSolverReal)0.)"
  },
  {
    "label": "Df2Dx2()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33)",
    "insertText": "Df2Dx2(Bary * Bary)"
  },
  {
    "label": "Df2Dv2()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33)",
    "insertText": "Df2Dv2(Bary * Bary)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddForce(Particles, -Bary * Force1, Index2, Dt)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddSymmetricForceDerivative(Particles, &Df2Dx2, &Df2Dv2, Index2, Index2, Dt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(Index3) != (FSolverReal)0.)"
  },
  {
    "label": "Df3Dx3()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33)",
    "insertText": "Df3Dx3(B3 * B3)"
  },
  {
    "label": "Df3Dv3()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33)",
    "insertText": "Df3Dv3(B3 * B3)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddForce(Particles, -B3 * Force1, Index3, Dt)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (LinearSystem .)",
    "insertText": "AddSymmetricForceDerivative(Particles, &Df3Dx3, &Df3Dv3, Index3, Index3, Dt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(Index1) != (FSolverReal)0. || Particles.InvM(Index2) != (FSolverReal)0.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(Index1) != (FSolverReal)0. || Particles.InvM(Index3) != (FSolverReal)0.)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (const FSolverMatrix33 Df1Dx3 = - B3* Df1Dx1 ; const FSolverMatrix33 Df1Dv3 = - B3* Df1Dv1 ; LinearSystem .)",
    "insertText": "AddSymmetricForceDerivative(Particles, &Df1Dx3, &Df1Dv3, Index1, Index3, Dt)"
  }
]