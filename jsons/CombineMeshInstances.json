[
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "IGeometryProcessing_CombineMeshInstances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGeometryProcessing_CombineMeshInstances"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSinglePartMeshSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSinglePartMeshSet"
  },
  {
    "label": "FErrorStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FErrorStats"
  },
  {
    "label": "FMeshInstanceGroupData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshInstanceGroupData"
  },
  {
    "label": "FBaseMeshInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseMeshInstance"
  },
  {
    "label": "FStaticMeshInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshInstance"
  },
  {
    "label": "FMeshLODSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshLODSet"
  },
  {
    "label": "FMeshLODSetInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshLODSetInstance"
  },
  {
    "label": "FSourceInstanceList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceInstanceList"
  },
  {
    "label": "FOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptions"
  },
  {
    "label": "FTriangleBudgetOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangleBudgetOptions"
  },
  {
    "label": "FCombineMeshInstancesOptionsPerLOD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCombineMeshInstancesOptionsPerLOD"
  },
  {
    "label": "FCombineMeshInstancesOptionsGeneral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCombineMeshInstancesOptionsGeneral"
  },
  {
    "label": "FOutputMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputMesh"
  },
  {
    "label": "FResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResults"
  },
  {
    "label": "FComputePartMeshesOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputePartMeshesOptions"
  },
  {
    "label": "FComputePartMeshesSinglePartOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputePartMeshesSinglePartOptions"
  },
  {
    "label": "IGeometryProcessing_CombineMeshInstances()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" PhysicsEngine / AggregateGeom . h \" class UPrimitiveComponent ; class UStaticMesh ; class UMaterialInterface ; struct FMeshDescription ; class IGeometryProcessing_CombineMeshInstances : public IModularFeature { public : ~)",
    "insertText": "IGeometryProcessing_CombineMeshInstances()"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (} enum class EMeshDetailLevel { Base = 0,Standard = 1,Small = 2,Decorative = 3 } ; enum class EApproximationType { NoConstraint = 0,AxisAlignedBox = 1<<0,OrientedBox = 1<<1,SweptHull = 1<<2,ConvexHull = 1<<3,SweptProjection = 1<<4,All = 0 xFFFF } ; struct FSinglePartMeshSet { struct FErrorStats { double AverageError ; double MaxError ; } ; TIndirectArray<UE::Geometry::FDynamicMesh3> Source ; TIndirectArray<UE::Geometry::FDynamicMesh3> Simplified ; TArray<FErrorStats> SimplifiedMeshErrors ; TIndirectArray<UE::Geometry::FDynamicMesh3> Approximated ; TArray<FErrorStats> ApproximatedMeshErrors ; } ; struct FMeshInstanceGroupData { TArray<UMaterialInterface*> MaterialSet ; bool bHasConstantOverrideVertexColor = false ; FColor OverrideVertexColor ; bool bPreserveUVs = false ; bool bAllowMerging = true ; bool bAllowApproximation = true ; EApproximationType ApproximationConstraint = EApproximationType::NoConstraint ; } ; struct FBaseMeshInstance { EMeshDetailLevel DetailLevel = EMeshDetailLevel::Standard ; TArray<FTransform3d> TransformSequence ; int32 GroupDataIndex = - 1 ; bool bAllowApproximation = true ; int32 FilterLODLevel = - 1 ; TSharedPtr<FSinglePartMeshSet> PrecomputedMeshes ; int32 InstanceSubsetID = 0 ; } ; struct FStaticMeshInstance : FBaseMeshInstance { UStaticMesh* SourceMesh = nullptr ; UPrimitiveComponent* SourceComponent = nullptr ; int32 SourceInstanceIndex = 0 ; } ; struct FMeshLODSet { TArray<const FMeshDescription*> ReferencedMeshLODs ; FKAggregateGeom SimpleCollisionShapes ; } ; struct FMeshLODSetInstance : FBaseMeshInstance { int32 MeshLODSetIndex = - 1 ; int32 ExternalInstanceID = 0 ; } ; struct FSourceInstanceList { TArray<FStaticMeshInstance> StaticMeshInstances ; TArray<FMeshLODSetInstance> MeshLODSetInstances ; TArray<FMeshLODSet> MeshLODSets ; TArray<FMeshInstanceGroupData> InstanceGroupDatas ; } ; enum class ERemoveHiddenFacesMode { None = 0,Fastest = 1,ExteriorVisibility = 5,OcclusionBased = 6 } ; enum class ECoarseApproximationStrategy { Automatic = 0,VoxelBasedSolidApproximation = 1,SweptPlanarProjection = 2,IntersectSweptPlanarProjections = 3 } ; enum class EVertexColorMappingMode { None = 0,TriangleCountMetric = 1 } ; struct FOptions { int32 NumLODs = 5 ; int32 BaseCopiedLOD = 0 ; int32 NumCopiedLODs = 1 ; int32 NumSimplifiedLODs = 3 ; double SimplifyBaseTolerance = 1 . 0 ; double SimplifyLODLevelToleranceScale = 2 . 0 ; bool bSimplifyPreserveUVs = false ; bool bSimplifyPreserveVertexColors = false ; bool bSimplifyPreserveCorners = true ; double SimplifySharpEdgeAngleDeg = 4 4 . 0 ; double SimplifyMinSalientDimension = 1 . 0 ; int32 ApproximationSourceLOD = 0 ; double OptimizeBaseTriCost = 0 . 7 ; double OptimizeLODLevelTriCostScale = 1 . 5 ; double MaxAllowableApproximationDeviation = 5 . 0 ; ECoarseApproximationStrategy CoarseLODStrategy = ECoarseApproximationStrategy::Automatic ; int32 NumCoarseLODs = 1 ; double CoarseLODBaseTolerance = 1 . 0 ; int32 CoarseLODMaxTriCountBase = 5 0 0 ; double CoarseApproximationDetailSize = 1 0 . 0 ; ERemoveHiddenFacesMode RemoveHiddenFacesMethod = ERemoveHiddenFacesMode::None ; int32 RemoveHiddenStartLOD = 0 ; double RemoveHiddenSamplingDensity = 1 . 0 ; bool bDoubleSidedHiddenRemoval = false ; int32 FilterDecorativePartsLODLevel = 2 ; int ApproximateDecorativePartLODs = 1 ; double HardNormalAngleDeg = 1 5 . 0 ; int PreserveUVLODLevel = - 1 ; bool bMergeCoplanarFaces = true ; int32 MergeCoplanarFacesStartLOD = 1 ; TFunction<UE::)",
    "insertText": "FIndex3i(const UE::Geometry::FDynamicMesh3& Mesh, int32 TriangleID)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TArray<UMaterialInterface*> PreventMergingMaterialSet ; ECoarseApproximationStrategy CoarseLODStrategy = ECoarseApproximationStrategy::Automatic ; double CoarseLODBaseTolerance = 1 . 0 ; double CoarseApproximationDetailSize = 1 0 . 0 ; double HardNormalAngleDeg = 1 5 ; bool bAutoGenerateMissingUVs = false ; bool bAutoGenerateTangents = false ; EVertexColorMappingMode VertexColorMappingMode = EVertexColorMappingMode::None ; void)",
    "insertText": "Init(const FOptions& InOptions, TArray<FCombineMeshInstancesOptionsPerLOD>& OutPerLODOptions)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TriangleGroupingIDFunc = InOptions . TriangleGroupingIDFunc ; PreventMergingMaterialSet = InOptions . PreventMergingMaterialSet ; CoarseLODStrategy = InOptions . CoarseLODStrategy ; CoarseLODBaseTolerance = InOptions . CoarseLODBaseTolerance ; CoarseApproximationDetailSize = InOptions . CoarseApproximationDetailSize ; HardNormalAngleDeg = InOptions . HardNormalAngleDeg ; bAutoGenerateMissingUVs = InOptions . bAutoGenerateMissingUVs ; bAutoGenerateTangents = InOptions . bAutoGenerateTangents ; VertexColorMappingMode = InOptions . VertexColorMappingMode ; OutPerLODOptions .)",
    "insertText": "SetNum(InOptions.NumLODs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCombineMeshInstancesOptionsPerLOD& Options = OutPerLODOptions [ LODIndex ] ; Options . PreferredLOD = LODIndex ; Options . OptimizationMethod = EMeshOptimizationMethod::SimplifyOrApproximate ;)",
    "insertText": "if(LODIndex < InOptions.NumCopiedLODs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Options . OptimizationMethod = EMeshOptimizationMethod::None ; } else)",
    "insertText": "if(LODIndex < InOptions.NumCopiedLODs + InOptions.NumSimplifiedLODs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Options . OptimizationMethod = EMeshOptimizationMethod::SimplifyOrApproximate ; } else)",
    "insertText": "if(LODIndex >= InOptions.NumLODs - InOptions.NumCoarseLODs)"
  },
  {
    "label": "bMergeCoplanarFaces()",
    "kind": "Method",
    "detail": "Function (Options . OptimizationMethod = EMeshOptimizationMethod::VoxelizeAndDecimate ; } Options . bDoubleSidedHiddenRemoval = InOptions . bDoubleSidedHiddenRemoval ; Options . RemoveHiddenFacesMethod = InOptions . RemoveHiddenFacesMethod ; Options . RemoveHiddenSamplingDensity = InOptions . RemoveHiddenSamplingDensity ; Options . bMergeCoplanarFaces = InOptions . bMergeCoplanarFaces ; Options . bPlanarPolygonRetriangulation = InOptions .)",
    "insertText": "bMergeCoplanarFaces(InOptions.PlanarPolygonRetriangulationStartLOD > -1 && LODIndex >= InOptions.PlanarPolygonRetriangulationStartLOD)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Options . Decorations = EDecorationHandling::Keep ;)",
    "insertText": "if(LODIndex >= InOptions.FilterDecorativePartsLODLevel - InOptions.ApproximateDecorativePartLODs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Options . Decorations = EDecorationHandling::Approximate ; } else)",
    "insertText": "if(LODIndex >= InOptions.FilterDecorativePartsLODLevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Options . Decorations = EDecorationHandling::Remove ; } Options . SimplificationTolerance = SimplificationTolerance ;)",
    "insertText": "if(Options.OptimizationMethod != EMeshOptimizationMethod::None)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SimplificationTolerance* = InOptions . SimplifyLODLevelToleranceScale ; } Options . bPreserveUVs = LODIndex<= InOptions . PreserveUVLODLevel ; Options . bEnableBudgetStrategy_PartLODPromotion = InOptions . bEnableBudgetStrategy_PartLODPromotion ; Options . PartLODPromotionBudgetMultiplier = InOptions . PartLODPromotionBudgetMultiplier ; Options . TriangleBudgetOptions . Method = ETriangleBudgetMethod::NoRestriction ;)",
    "insertText": "if(Options.OptimizationMethod != EMeshOptimizationMethod::VoxelizeAndDecimate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 HardBudget = InOptions . HardLODBudgets [ LODIndex ] ;)",
    "insertText": "if(HardBudget > -1)"
  },
  {
    "label": "ConstructDefaultOptions()",
    "kind": "Method",
    "detail": "Function (Options . TriangleBudgetOptions . Method = ETriangleBudgetMethod::UseTriangleBudget ; Options . TriangleBudgetOptions . TriangleBudget = HardBudget ; } } } else { Options . TriangleBudgetOptions . Method = LODIndex> InOptions . NumLODs - InOptions . NumCoarseLODs ? ETriangleBudgetMethod::UsePercentageOfPreviousLOD : ETriangleBudgetMethod::UseTriangleBudget ; Options . TriangleBudgetOptions . TriangleBudget = InOptions . CoarseLODMaxTriCountBase ; Options . TriangleBudgetOptions . LODReductionPercentage = . 5 ; } } } } ; struct FOutputMesh { TArray<UE::Geometry::FDynamicMesh3> MeshLODs ; TArray<UMaterialInterface*> MaterialSet ; FKAggregateGeom SimpleCollisionShapes ; int32 InstanceSubsetID = 0 ; } ; struct FResults { TArray<FOutputMesh> CombinedMeshes ; } ; FOptions)",
    "insertText": "ConstructDefaultOptions()"
  },
  {
    "label": "CombineMeshInstances()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CombineMeshInstances(const FSourceInstanceList& MeshInstances, const FOptions& Options, FResults& ResultsOut)"
  },
  {
    "label": "SetApproximationLODs()",
    "kind": "Method",
    "detail": "Function (} struct FComputePartMeshesOptions { int32 SimplificationSourceLOD = 0 ; int32 NumSimplifiedLODs = 3 ; double SimplifyBaseTolerance = 1 . 0 ; double SimplifyLODLevelToleranceScale = 2 . 0 ; bool bSimplifyPreserveUVs = false ; bool bSimplifyPreserveVertexColors = false ; bool bSimplifyPreserveCorners = true ; double SimplifySharpEdgeAngleDeg = 4 4 . 0 ; double SimplifyMinSalientDimension = 1 . 0 ; double HardNormalAngleDeg = 1 5 . 0 ; int32 ApproximationSourceLOD = 0 ; double MaxAllowableApproximationDeviation = 5 . 0 ; TArray<double> ApproximationTriCosts ; void)",
    "insertText": "SetApproximationLODs(int32 NumInitialApproximations, double OptimizeBaseTriCost, double InitialTriCostScale, int32 NumAdditionalApproximations = 10, double AdditionalTriCostAdd = 0.25)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (int32 NumApproximatedLODs = NumInitialApproximations + NumAdditionalApproximations ; ApproximationTriCosts .)",
    "insertText": "Reset(NumInitialApproximations + NumAdditionalApproximations)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TriCost* = OptimizeBaseTriCost ; ApproximationTriCosts .)",
    "insertText": "Add(TriCost)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(ApproximationTriCosts.Num() < NumApproximatedLODs)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } bool bRetriangulateSourceLODs = true ; int32 StartRetriangulateSourceLOD = 1 ; int PreserveUVLODLevel = - 1 ; void)",
    "insertText": "Init(const FOptions& Options)"
  },
  {
    "label": "SetApproximationLODs()",
    "kind": "Method",
    "detail": "Function (SimplificationSourceLOD = Options . ApproximationSourceLOD ; NumSimplifiedLODs = Options . NumSimplifiedLODs ; SimplifyBaseTolerance = Options . SimplifyBaseTolerance ; SimplifyLODLevelToleranceScale = Options . SimplifyLODLevelToleranceScale ; bSimplifyPreserveUVs = Options . bSimplifyPreserveUVs ; bSimplifyPreserveVertexColors = Options . bSimplifyPreserveVertexColors ; bSimplifyPreserveCorners = Options . bSimplifyPreserveCorners ; SimplifySharpEdgeAngleDeg = Options . SimplifySharpEdgeAngleDeg ; SimplifyMinSalientDimension = Options . SimplifyMinSalientDimension ; HardNormalAngleDeg = Options . HardNormalAngleDeg ; ApproximationSourceLOD = Options . ApproximationSourceLOD ;)",
    "insertText": "SetApproximationLODs(FMath::Max(0, Options.NumLODs - Options.NumCopiedLODs - Options.NumSimplifiedLODs - Options.NumCoarseLODs), Options.OptimizeBaseTriCost, Options.OptimizeLODLevelTriCostScale)"
  },
  {
    "label": "FComputePartMeshesSinglePartOptions()",
    "kind": "Method",
    "detail": "Function (MaxAllowableApproximationDeviation = Options . MaxAllowableApproximationDeviation ; bRetriangulateSourceLODs = Options . bRetriangulateSourceLODs ; StartRetriangulateSourceLOD = Options . StartRetriangulateSourceLOD ; PreserveUVLODLevel = Options . PreserveUVLODLevel ; } } ; struct FComputePartMeshesSinglePartOptions {)",
    "insertText": "FComputePartMeshesSinglePartOptions()"
  },
  {
    "label": "FComputePartMeshesSinglePartOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputePartMeshesSinglePartOptions(EApproximationType ApproximationConstraint, bool bPreserveUVs = false) : ApproximationConstraint(ApproximationConstraint), bPreserveUVs(bPreserveUVs)"
  },
  {
    "label": "ComputeSinglePartMeshSet()",
    "kind": "Method",
    "detail": "Function (} EApproximationType ApproximationConstraint = EApproximationType::NoConstraint ; bool bPreserveUVs = false ; } ; void)",
    "insertText": "ComputeSinglePartMeshSet(TConstArrayView<const FMeshDescription*> SourceMeshLODs, const FComputePartMeshesOptions& GeneralOptions, const FComputePartMeshesSinglePartOptions& PartOptions, FSinglePartMeshSet& ResultMeshes)"
  },
  {
    "label": "ComputeSinglePartMeshSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeSinglePartMeshSet(UStaticMesh* SourceMesh, const FComputePartMeshesOptions& GeneralOptions, const FComputePartMeshesSinglePartOptions& PartOptions, FSinglePartMeshSet& ResultPartMeshSet)"
  },
  {
    "label": "ComputePartMeshSets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputePartMeshSets(FSourceInstanceList& MeshInstances, const FComputePartMeshesOptions& Options, bool bKeepExistingPartMeshes, TArray<TSharedPtr<FSinglePartMeshSet>>& ResultMeshSets)"
  },
  {
    "label": "CombineMeshInstances()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CombineMeshInstances(const FSourceInstanceList& MeshInstances, const FCombineMeshInstancesOptionsGeneral& AllLODOptions, TConstArrayView<FCombineMeshInstancesOptionsPerLOD> PerLODOptions, FResults& ResultsOut)"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (} const FName)",
    "insertText": "GetModularFeatureName()"
  }
]