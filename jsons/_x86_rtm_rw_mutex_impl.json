[
  {
    "label": "RTM_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RTM_type"
  },
  {
    "label": "x86_rtm_rw_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "x86_rtm_rw_mutex"
  },
  {
    "label": "interface7",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "interface7"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__x86_rtm_rw_mutex_impl_H # define __TBB__x86_rtm_rw_mutex_impl_H # ifndef __TBB_spin_rw_mutex_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif # if __TBB_TSX_AVAILABLE # include \" . . / tbb_stddef . h \" # include \" . . / tbb_machine . h \" # include \" . . / tbb_profiling . h \" # include \" . . / spin_rw_mutex . h \" namespace tbb { namespace interface8 { namespace internal { enum RTM_type { RTM_not_in_mutex,RTM_transacting_reader,RTM_transacting_writer,RTM_real_reader,RTM_real_writer } ; const unsigned long speculation_granularity = 6 4 ; class x86_rtm_rw_mutex : private spin_rw_mutex { # if __TBB_USE_X86_RTM_RW_MUTEX | | __TBB_GCC_VERSION<4 0 0 0 0 public : # else private : # endif class interface7::internal::padded_mutex<x86_rtm_rw_mutex,true> ; class scoped_lock ; class scoped_lock ; private : void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_construct()"
  },
  {
    "label": "internal_acquire_writer()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_acquire_writer(x86_rtm_rw_mutex::scoped_lock&, bool only_speculate=false)"
  },
  {
    "label": "internal_acquire_reader()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_acquire_reader(x86_rtm_rw_mutex::scoped_lock&, bool only_speculate=false)"
  },
  {
    "label": "internal_upgrade()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_upgrade(x86_rtm_rw_mutex::scoped_lock&)"
  },
  {
    "label": "internal_downgrade()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_downgrade(x86_rtm_rw_mutex::scoped_lock&)"
  },
  {
    "label": "internal_try_acquire_writer()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_try_acquire_writer(x86_rtm_rw_mutex::scoped_lock&)"
  },
  {
    "label": "internal_release()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_release(x86_rtm_rw_mutex::scoped_lock&)"
  },
  {
    "label": "internal_get_mutex()",
    "kind": "Method",
    "detail": "Function (x86_rtm_rw_mutex*)",
    "insertText": "internal_get_mutex(const spin_rw_mutex::scoped_lock& lock)"
  },
  {
    "label": "internal_set_mutex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_set_mutex(spin_rw_mutex::scoped_lock& lock, spin_rw_mutex* mtx)"
  },
  {
    "label": "x86_rtm_rw_mutex()",
    "kind": "Method",
    "detail": "Function (lock . mutex = mtx ; } public :)",
    "insertText": "x86_rtm_rw_mutex()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} # endif const bool is_rw_mutex = true ; const bool is_recursive_mutex = false ; const bool is_fair_mutex = false ; # if __TBB_USE_X86_RTM_RW_MUTEX | | __TBB_GCC_VERSION<4 0 0 0 0 # else private : # endif class scoped_lock : tbb::internal::no_copy { class x86_rtm_rw_mutex ; spin_rw_mutex::scoped_lock my_scoped_lock ; RTM_type transaction_state ; public :)",
    "insertText": "scoped_lock() : my_scoped_lock(), transaction_state(RTM_not_in_mutex)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(x86_rtm_rw_mutex& m, bool write = true ) : my_scoped_lock(), transaction_state(RTM_not_in_mutex)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "acquire(m, write)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "acquire(x86_rtm_rw_mutex& m, bool write = true)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "release()"
  },
  {
    "label": "internal_get_mutex()",
    "kind": "Method",
    "detail": "Function (x86_rtm_rw_mutex* mutex =)",
    "insertText": "internal_get_mutex(my_scoped_lock)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(mutex, \"lock is not acquired\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(transaction_state!=RTM_not_in_mutex, \"lock is not acquired\")"
  },
  {
    "label": "upgrade_to_writer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "upgrade_to_writer()"
  },
  {
    "label": "downgrade_to_reader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "downgrade_to_reader()"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_acquire(x86_rtm_rw_mutex& m, bool write = true)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!mutex, \"lock is already acquired\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(write) return m.internal_try_acquire_writer(*this)"
  },
  {
    "label": "internal_acquire_reader()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "internal_acquire_reader(*this, true)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (transaction_state = RTM_real_reader ; return true ; } return false ; } } ; private : char pad [ speculation_granularity -)",
    "insertText": "sizeof(spin_rw_mutex)"
  }
]