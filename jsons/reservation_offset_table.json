[
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "_ReservationOffsetTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ReservationOffsetTable"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_RESERVATION_OFFSET_TABLE_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_RESERVATION_OFFSET_TABLE_H_ # include<cstddef> # include<cstdint> # include<limits> # include<tuple> # include \" base / allocator / partition_allocator / address_pool_manager . h \" # include \" base / allocator / partition_allocator / partition_address_space . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" namespace partition_alloc::internal { uint16_t kOffsetTagNotAllocated = std::numeric_limits<uint16_t)",
    "insertText": "max()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (public : # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (size_t kReservationOffsetTableLength = kReservationOffsetTableCoverage>> kSuperPageShift ; # else uint64_t kGiB = 1 0 2 4* 1 0 2 4* 1 0 2 4 ull ; size_t kReservationOffsetTableLength = 4* kGiB / kSuperPageSize ; # endif)",
    "insertText": "static_assert(kReservationOffsetTableLength < kOffsetTagNormalBuckets, \"Offsets should be smaller than kOffsetTagNormalBuckets.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (PA_CONSTINIT struct _ReservationOffsetTable {)",
    "insertText": "static_assert(kReservationOffsetTableLength <= std::numeric_limits<uint16_t>::max(), \"Length of the reservation offset table must be less than MAX_UINT16\")"
  },
  {
    "label": "_ReservationOffsetTable()",
    "kind": "Method",
    "detail": "Function (uint16_t offsets [ kReservationOffsetTableLength ] = { } ;)",
    "insertText": "_ReservationOffsetTable()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else } reservation_offset_table_ ; # endif } ; # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) PA_ALWAYS_INLINE uint16_t* GetReservationOffsetTable(pool_handle handle)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(0 < handle && handle <= kNumPools)"
  },
  {
    "label": "GetReservationOffsetTable()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uint16_t*)",
    "insertText": "GetReservationOffsetTable(uintptr_t address)"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (pool_handle handle =)",
    "insertText": "GetPool(address)"
  },
  {
    "label": "GetReservationOffsetTableEnd()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE const uint16_t*)",
    "insertText": "GetReservationOffsetTableEnd(uintptr_t address)"
  },
  {
    "label": "ReservationOffsetPointer()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uint16_t*)",
    "insertText": "ReservationOffsetPointer(pool_handle pool, uintptr_t offset_in_pool)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (size_t table_index = offset_in_pool>> kSuperPageShift ;)",
    "insertText": "PA_DCHECK(table_index < ReservationOffsetTable::kReservationOffsetTableLength)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) auto [pool, offset] = GetPoolAndOffset(address)"
  },
  {
    "label": "ComputeReservationStart()",
    "kind": "Method",
    "detail": "Function (# endif } PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ComputeReservationStart(uintptr_t address, uint16_t* offset_ptr)"
  },
  {
    "label": "GetDirectMapReservationStart()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "GetDirectMapReservationStart(uintptr_t address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) bool is_in_brp_pool = IsManagedByPartitionAllocBRPPool(address)"
  },
  {
    "label": "IsManagedByPartitionAllocRegularPool()",
    "kind": "Method",
    "detail": "Function (bool is_in_regular_pool =)",
    "insertText": "IsManagedByPartitionAllocRegularPool(address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) PA_DCHECK(!is_in_brp_pool)"
  },
  {
    "label": "ReservationOffsetPointer()",
    "kind": "Method",
    "detail": "Function (# endif # endif uint16_t* offset_ptr =)",
    "insertText": "ReservationOffsetPointer(address)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(*offset_ptr != kOffsetTagNotAllocated)"
  },
  {
    "label": "ComputeReservationStart()",
    "kind": "Method",
    "detail": "Function (uintptr_t reservation_start =)",
    "insertText": "ComputeReservationStart(address, offset_ptr)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) #if !defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (# else size_t kBRPOffset = 0 ull ; # endif)",
    "insertText": "PA_DCHECK(is_in_brp_pool == IsManagedByPartitionAllocBRPPool(reservation_start + kBRPOffset))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(is_in_regular_pool == IsManagedByPartitionAllocRegularPool(reservation_start))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(*ReservationOffsetPointer(reservation_start) == 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif return reservation_start ; } # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) PA_ALWAYS_INLINE uintptr_t GetDirectMapReservationStart(uintptr_t address, pool_handle pool, uintptr_t offset_in_pool)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(AddressPoolManager::GetInstance().GetPoolBaseAddress(pool) + offset_in_pool == address)"
  },
  {
    "label": "ReservationOffsetPointer()",
    "kind": "Method",
    "detail": "Function (uint16_t* offset_ptr =)",
    "insertText": "ReservationOffsetPointer(pool, offset_in_pool)"
  },
  {
    "label": "IsManagedByNormalBuckets()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByNormalBuckets(uintptr_t address)"
  }
]