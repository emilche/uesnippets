[
  {
    "label": "FFlanger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFlanger"
  },
  {
    "label": "FFlanger()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / Delay . h \" namespace Audio { class FFlanger { public :)",
    "insertText": "FFlanger()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate)"
  },
  {
    "label": "SetModulationRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulationRate(const float InModulationRate)"
  },
  {
    "label": "SetModulationDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulationDepth(const float InModulationDepth)"
  },
  {
    "label": "SetCenterDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCenterDelay(const float InCenterDelay)"
  },
  {
    "label": "SetMixLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMixLevel(const float InMixLevel)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const FAlignedFloatBuffer& InBuffer, const int32 InNumSamples, FAlignedFloatBuffer& OutBuffer)"
  }
]