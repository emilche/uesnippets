[
  {
    "label": "FSandboxPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSandboxPlatformFile"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FNetworkFileServerClientConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkFileServerClientConnection"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FNetworkFileServerClientConnection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / CoreMisc . h \" # include \" INetworkFileSystemModule . h \" class FSandboxPlatformFile ; class ITargetPlatform ; class FNetworkFileServerClientConnection : public FSelfRegisteringExec { public :)",
    "insertText": "FNetworkFileServerClientConnection(const FNetworkFileServerOptions& InFileServerOptions)"
  },
  {
    "label": "FNetworkFileServerClientConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetworkFileServerClientConnection()"
  },
  {
    "label": "ProcessPayload()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ProcessPayload(FArchive& Ar)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "ConvertClientFilenameToServerFilename()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConvertClientFilenameToServerFilename(FString& FilenameToConvert)"
  },
  {
    "label": "ConvertLocalFilenameToServerFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertLocalFilenameToServerFilename(FString& FilenameToConvert)"
  },
  {
    "label": "ProcessOpenFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessOpenFile(FArchive& In, FArchive& Out, bool bIsWriting)"
  },
  {
    "label": "ProcessReadFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReadFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessWriteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessWriteFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessSeekFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSeekFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessCloseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCloseFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessGetFileInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessGetFileInfo(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessMoveFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMoveFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessDeleteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeleteFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessCopyFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCopyFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessSetTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSetTimeStamp(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessSetReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSetReadOnly(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessCreateDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCreateDirectory(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessDeleteDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeleteDirectory(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessDeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeleteDirectoryRecursively(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessToAbsolutePathForRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessToAbsolutePathForRead(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessToAbsolutePathForWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessToAbsolutePathForWrite(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessReportLocalFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReportLocalFiles(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessGetFileList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessGetFileList(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHeartbeat(FArchive& In, FArchive& Out)"
  },
  {
    "label": "ProcessSyncFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessSyncFile(FArchive& In, FArchive& Out)"
  },
  {
    "label": "SendPayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPayload(TArray<uint8> &Out)"
  },
  {
    "label": "FileModifiedCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileModifiedCallback(const FString& Filename)"
  },
  {
    "label": "Exec_Runtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Runtime(class UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "FixupSandboxPathForClient()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FixupSandboxPathForClient(const FString& Filename)"
  },
  {
    "label": "FixupSandboxPathsForClient()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FDateTime>)",
    "insertText": "FixupSandboxPathsForClient(const TMap<FString, FDateTime>& SandboxPaths)"
  }
]