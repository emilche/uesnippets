[
  {
    "label": "FLerpVert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLerpVert"
  },
  {
    "label": "FLerpVert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components . h \" struct FLerpVert { FVector3f Position ; FVector3f TangentX ; FVector3f TangentY ; FVector3f TangentZ ; FLinearColor Color ; FVector2f UVs [ MAX_STATIC_TEXCOORDS ] ;)",
    "insertText": "FLerpVert()"
  },
  {
    "label": "FLerpVert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLerpVert(FStaticMeshBuildVertex In ) : Position( In.Position ) , TangentX( In.TangentX ) , TangentY( In.TangentY ) , TangentZ( In.TangentZ)"
  },
  {
    "label": "ReinterpretAsLinear()",
    "kind": "Method",
    "detail": "Function (Color = In . Color .)",
    "insertText": "ReinterpretAsLinear()"
  },
  {
    "label": "FStaticMeshBuildVertex()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FStaticMeshBuildVertex()"
  },
  {
    "label": "ToFColor()",
    "kind": "Method",
    "detail": "Function (FStaticMeshBuildVertex Vert ; Vert . Position = Position ; Vert . TangentX = TangentX ; Vert . TangentY = TangentY ; Vert . TangentZ = TangentZ ; Vert . Color = Color .)",
    "insertText": "ToFColor(false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Position + = Other . Position ; TangentX + = Other . TangentX ; TangentY + = Other . TangentY ; TangentZ + = Other . TangentZ ; Color + = Other . Color ;)",
    "insertText": "for(uint32 i = 0; i < MAX_STATIC_TEXCOORDS; i++)"
  }
]