[
  {
    "label": "DxilModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilModule"
  },
  {
    "label": "HLModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HLModule"
  },
  {
    "label": "FunctionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionType"
  },
  {
    "label": "GVMaterializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GVMaterializer"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "RandomNumberGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomNumberGenerator"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "ModFlagBehavior",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ModFlagBehavior"
  },
  {
    "label": "ModuleFlagEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ModuleFlagEntry"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_MODULE_H # define LLVM_IR_MODULE_H # include \" llvm / ADT / iterator_range . h \" # include \" llvm / IR / Comdat . h \" # include \" llvm / IR / DataLayout . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / GlobalAlias . h \" # include \" llvm / IR / GlobalVariable . h \" # include \" llvm / IR / Metadata . h \" # include \" llvm / Support / CBindingWrapping . h \" # include \" llvm / Support / CodeGen . h \" # include \" llvm / Support / DataTypes . h \" # include<system_error> namespace hlsl { class DxilModule ; class HLModule ; } namespace llvm { class FunctionType ; class GVMaterializer ; class LLVMContext ; class RandomNumberGenerator ; class StructType ; template<> struct ilist_traits<Function> : public SymbolTableListTraits<Function,Module> { Function*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(Function*)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} Function*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} Function*)",
    "insertText": "ensureHead(Function*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(Function*, Function*)"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(GlobalVariable*)"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} GlobalVariable*)",
    "insertText": "ensureHead(GlobalVariable*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(GlobalVariable*, GlobalVariable*)"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(GlobalAlias*)"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} GlobalAlias*)",
    "insertText": "ensureHead(GlobalAlias*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(GlobalAlias*, GlobalAlias*)"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(NamedMDNode*)"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} NamedMDNode*)",
    "insertText": "ensureHead(NamedMDNode*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(NamedMDNode*, NamedMDNode*)"
  },
  {
    "label": "addNodeToList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addNodeToList(NamedMDNode *)"
  },
  {
    "label": "removeNodeFromList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeNodeFromList(NamedMDNode *)"
  },
  {
    "label": "isValidModFlagBehavior()",
    "kind": "Method",
    "detail": "Function (} private : ilist_node<NamedMDNode> Sentinel ; } ; class Module { public : typedef iplist<GlobalVariable> GlobalListType ; typedef iplist<Function> FunctionListType ; typedef iplist<GlobalAlias> AliasListType ; typedef ilist<NamedMDNode> NamedMDListType ; typedef StringMap<Comdat> ComdatSymTabType ; typedef GlobalListType::iterator global_iterator ; typedef GlobalListType::const_iterator const_global_iterator ; typedef FunctionListType::iterator iterator ; typedef FunctionListType::const_iterator const_iterator ; typedef FunctionListType::reverse_iterator reverse_iterator ; typedef FunctionListType::const_reverse_iterator const_reverse_iterator ; typedef AliasListType::iterator alias_iterator ; typedef AliasListType::const_iterator const_alias_iterator ; typedef NamedMDListType::iterator named_metadata_iterator ; typedef NamedMDListType::const_iterator const_named_metadata_iterator ; enum ModFlagBehavior { Error = 1,Warning = 2,Require = 3,Override = 4,Append = 5,AppendUnique = 6,ModFlagBehaviorFirstVal = Error,ModFlagBehaviorLastVal = AppendUnique } ; bool)",
    "insertText": "isValidModFlagBehavior(Metadata *MD, ModFlagBehavior &MFB)"
  },
  {
    "label": "ModuleFlagEntry()",
    "kind": "Method",
    "detail": "Function (struct ModuleFlagEntry { ModFlagBehavior Behavior ; MDString* Key ; Metadata* Val ;)",
    "insertText": "ModuleFlagEntry(ModFlagBehavior B, MDString *K, Metadata *V) : Behavior(B), Key(K), Val(V)"
  },
  {
    "label": "Module()",
    "kind": "Method",
    "detail": "Function (} } ; private : LLVMContext& Context ; GlobalListType GlobalList ; FunctionListType FunctionList ; AliasListType AliasList ; NamedMDListType NamedMDList ; std::string GlobalScopeAsm ; ValueSymbolTable* ValSymTab ; ComdatSymTabType ComdatSymTab ; std::unique_ptr<GVMaterializer> Materializer ; std::string ModuleID ; std::string TargetTriple ; void* NamedMDSymTab ; DataLayout DL ; class Constant ; hlsl::HLModule* TheHLModule = nullptr ; hlsl::DxilModule* TheDxilModule = nullptr ; public :)",
    "insertText": "Module(StringRef ModuleID, LLVMContext& C)"
  },
  {
    "label": "Module()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Module()"
  },
  {
    "label": "getModuleIdentifier()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getModuleIdentifier()"
  },
  {
    "label": "getDataLayout()",
    "kind": "Method",
    "detail": "Function (} const DataLayout&)",
    "insertText": "getDataLayout()"
  },
  {
    "label": "getTargetTriple()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getTargetTriple()"
  },
  {
    "label": "setModuleIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setModuleIdentifier(StringRef ID)"
  },
  {
    "label": "setDataLayout()",
    "kind": "Method",
    "detail": "Function (ModuleID = ID ; } void)",
    "insertText": "setDataLayout(StringRef Desc)"
  },
  {
    "label": "setDataLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDataLayout(const DataLayout &Other)"
  },
  {
    "label": "setTargetTriple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTargetTriple(StringRef T)"
  },
  {
    "label": "setModuleInlineAsm()",
    "kind": "Method",
    "detail": "Function (TargetTriple = T ; } void)",
    "insertText": "setModuleInlineAsm(StringRef Asm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GlobalScopeAsm = Asm ;)",
    "insertText": "if(!GlobalScopeAsm.empty() && GlobalScopeAsm[GlobalScopeAsm.size()-1] != '\\n')"
  },
  {
    "label": "appendModuleInlineAsm()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "appendModuleInlineAsm(StringRef Asm)"
  },
  {
    "label": "getNamedValue()",
    "kind": "Method",
    "detail": "Function (} GlobalValue*)",
    "insertText": "getNamedValue(StringRef Name)"
  },
  {
    "label": "getMDKindID()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getMDKindID(StringRef Name)"
  },
  {
    "label": "getMDKindNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getMDKindNames(SmallVectorImpl<StringRef> &Result)"
  },
  {
    "label": "getTypeByName()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "getTypeByName(StringRef Name)"
  },
  {
    "label": "getIdentifiedStructTypes()",
    "kind": "Method",
    "detail": "Function (std::vector<StructType*>)",
    "insertText": "getIdentifiedStructTypes()"
  },
  {
    "label": "getOrInsertFunction()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getOrInsertFunction(StringRef Name, FunctionType *T, AttributeSet AttributeList)"
  },
  {
    "label": "getOrInsertFunction()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getOrInsertFunction(StringRef Name, FunctionType *T)"
  },
  {
    "label": "getOrInsertFunction()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getOrInsertFunction(StringRef Name, AttributeSet AttributeList, Type *RetTy, ...)"
  },
  {
    "label": "getOrInsertFunction()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getOrInsertFunction(StringRef Name, Type *RetTy, ...)"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (Function*)",
    "insertText": "getFunction(StringRef Name)"
  },
  {
    "label": "getGlobalVariable()",
    "kind": "Method",
    "detail": "Function (GlobalVariable*)",
    "insertText": "getGlobalVariable(StringRef Name)"
  },
  {
    "label": "getGlobalVariable()",
    "kind": "Method",
    "detail": "Function (} GlobalVariable*)",
    "insertText": "getGlobalVariable(StringRef Name, bool AllowInternal)"
  },
  {
    "label": "getGlobalVariable()",
    "kind": "Method",
    "detail": "Function (} GlobalVariable*)",
    "insertText": "getGlobalVariable(StringRef Name, bool AllowInternal = false)"
  },
  {
    "label": "getNamedGlobal()",
    "kind": "Method",
    "detail": "Function (GlobalVariable*)",
    "insertText": "getNamedGlobal(StringRef Name)"
  },
  {
    "label": "getOrInsertGlobal()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getOrInsertGlobal(StringRef Name, Type *Ty)"
  },
  {
    "label": "getNamedAlias()",
    "kind": "Method",
    "detail": "Function (GlobalAlias*)",
    "insertText": "getNamedAlias(StringRef Name)"
  },
  {
    "label": "getNamedMetadata()",
    "kind": "Method",
    "detail": "Function (NamedMDNode*)",
    "insertText": "getNamedMetadata(const Twine &Name)"
  },
  {
    "label": "getOrInsertNamedMetadata()",
    "kind": "Method",
    "detail": "Function (NamedMDNode*)",
    "insertText": "getOrInsertNamedMetadata(StringRef Name)"
  },
  {
    "label": "eraseNamedMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseNamedMetadata(NamedMDNode *NMD)"
  },
  {
    "label": "getOrInsertComdat()",
    "kind": "Method",
    "detail": "Function (Comdat*)",
    "insertText": "getOrInsertComdat(StringRef Name)"
  },
  {
    "label": "getModuleFlagsMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getModuleFlagsMetadata(SmallVectorImpl<ModuleFlagEntry> &Flags)"
  },
  {
    "label": "getModuleFlag()",
    "kind": "Method",
    "detail": "Function (Metadata*)",
    "insertText": "getModuleFlag(StringRef Key)"
  },
  {
    "label": "getModuleFlagsMetadata()",
    "kind": "Method",
    "detail": "Function (NamedMDNode*)",
    "insertText": "getModuleFlagsMetadata()"
  },
  {
    "label": "getOrInsertModuleFlagsMetadata()",
    "kind": "Method",
    "detail": "Function (NamedMDNode*)",
    "insertText": "getOrInsertModuleFlagsMetadata()"
  },
  {
    "label": "addModuleFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addModuleFlag(ModFlagBehavior Behavior, StringRef Key, Metadata *Val)"
  },
  {
    "label": "addModuleFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addModuleFlag(ModFlagBehavior Behavior, StringRef Key, Constant *Val)"
  },
  {
    "label": "addModuleFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addModuleFlag(ModFlagBehavior Behavior, StringRef Key, uint32_t Val)"
  },
  {
    "label": "addModuleFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addModuleFlag(MDNode *Node)"
  },
  {
    "label": "setMaterializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaterializer(GVMaterializer *GVM)"
  },
  {
    "label": "getMaterializer()",
    "kind": "Method",
    "detail": "Function (GVMaterializer*)",
    "insertText": "getMaterializer()"
  },
  {
    "label": "isDematerializable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDematerializable(const GlobalValue *GV)"
  },
  {
    "label": "materialize()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "materialize(GlobalValue *GV)"
  },
  {
    "label": "dematerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dematerialize(GlobalValue *GV)"
  },
  {
    "label": "materializeAll()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "materializeAll()"
  },
  {
    "label": "materializeAllPermanently()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "materializeAllPermanently()"
  },
  {
    "label": "materializeMetadata()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "materializeMetadata()"
  },
  {
    "label": "materializeSelectNamedMetadata()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "materializeSelectNamedMetadata(ArrayRef<StringRef> NamedMetadata)"
  },
  {
    "label": "getGlobalList()",
    "kind": "Method",
    "detail": "Function (const GlobalListType&)",
    "insertText": "getGlobalList()"
  },
  {
    "label": "global_begin()",
    "kind": "Method",
    "detail": "Function (} const_global_iterator)",
    "insertText": "global_begin()"
  },
  {
    "label": "global_end()",
    "kind": "Method",
    "detail": "Function (} global_iterator)",
    "insertText": "global_end()"
  },
  {
    "label": "global_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "global_empty()"
  },
  {
    "label": "globals()",
    "kind": "Method",
    "detail": "Function (} iterator_range<global_iterator>)",
    "insertText": "globals()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "functions()",
    "kind": "Method",
    "detail": "Function (} iterator_range<iterator>)",
    "insertText": "functions()"
  },
  {
    "label": "alias_begin()",
    "kind": "Method",
    "detail": "Function (} alias_iterator)",
    "insertText": "alias_begin()"
  },
  {
    "label": "alias_end()",
    "kind": "Method",
    "detail": "Function (} alias_iterator)",
    "insertText": "alias_end()"
  },
  {
    "label": "alias_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "alias_size()"
  },
  {
    "label": "alias_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "alias_empty()"
  },
  {
    "label": "aliases()",
    "kind": "Method",
    "detail": "Function (} iterator_range<alias_iterator>)",
    "insertText": "aliases()"
  },
  {
    "label": "named_metadata_begin()",
    "kind": "Method",
    "detail": "Function (} named_metadata_iterator)",
    "insertText": "named_metadata_begin()"
  },
  {
    "label": "named_metadata_end()",
    "kind": "Method",
    "detail": "Function (} named_metadata_iterator)",
    "insertText": "named_metadata_end()"
  },
  {
    "label": "named_metadata_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "named_metadata_size()"
  },
  {
    "label": "named_metadata_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "named_metadata_empty()"
  },
  {
    "label": "named_metadata()",
    "kind": "Method",
    "detail": "Function (} iterator_range<named_metadata_iterator>)",
    "insertText": "named_metadata()"
  },
  {
    "label": "dropTriviallyDeadConstantArrays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dropTriviallyDeadConstantArrays()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, AssemblyAnnotationWriter *AAW, bool ShouldPreserveUseListOrder = false)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (LLVM_DUMP_METHOD void)",
    "insertText": "dump()"
  },
  {
    "label": "dropAllReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAllReferences()"
  },
  {
    "label": "getDwarfVersion()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getDwarfVersion()"
  },
  {
    "label": "getPICLevel()",
    "kind": "Method",
    "detail": "Function (PICLevel::Level)",
    "insertText": "getPICLevel()"
  },
  {
    "label": "setPICLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPICLevel(PICLevel::Level PL)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*RemoveGlobalCallback)(llvm::Module*, llvm::GlobalObject*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ResetModuleCallback)(llvm::Module*)"
  },
  {
    "label": "CallRemoveGlobalHook()",
    "kind": "Method",
    "detail": "Function (RemoveGlobalCallback pfnRemoveGlobal = nullptr ; void)",
    "insertText": "CallRemoveGlobalHook(llvm::GlobalObject* G)"
  },
  {
    "label": "HasHLModule()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasHLModule()"
  },
  {
    "label": "GetHLModule()",
    "kind": "Method",
    "detail": "Function (TheHLModule = pValue ; } hlsl::HLModule&)",
    "insertText": "GetHLModule()"
  },
  {
    "label": "ResetHLModule()",
    "kind": "Method",
    "detail": "Function (ResetModuleCallback pfnResetHLModule = nullptr ; void)",
    "insertText": "ResetHLModule()"
  },
  {
    "label": "HasDxilModule()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDxilModule()"
  },
  {
    "label": "GetDxilModule()",
    "kind": "Method",
    "detail": "Function (TheDxilModule = pValue ; } hlsl::DxilModule&)",
    "insertText": "GetDxilModule()"
  },
  {
    "label": "ResetDxilModule()",
    "kind": "Method",
    "detail": "Function (ResetModuleCallback pfnResetDxilModule = nullptr ; void)",
    "insertText": "ResetDxilModule()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; raw_ostream&)",
    "insertText": "operator(raw_ostream &O, const Module &M)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "print(O, nullptr)"
  }
]