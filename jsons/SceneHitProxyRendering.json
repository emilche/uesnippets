[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FStaticMeshBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatch"
  },
  {
    "label": "FHitProxyMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyMeshProcessor"
  },
  {
    "label": "FEditorSelectionMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorSelectionMeshProcessor"
  },
  {
    "label": "FEditorLevelInstanceMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorLevelInstanceMeshProcessor"
  },
  {
    "label": "FHitProxyMeshProcessor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" HitProxies . h \" # include \" MeshPassProcessor . h \" class FPrimitiveSceneProxy ; class FScene ; class FStaticMeshBatch ; # if WITH_EDITOR class FHitProxyMeshProcessor : public FSceneRenderingAllocatorObject<FHitProxyMeshProcessor>,public FMeshPassProcessor { public :)",
    "insertText": "FHitProxyMeshProcessor(const FScene* Scene, const FSceneView* InViewIfDynamicMeshCommand, bool InbAllowTranslucentPrimitivesInHitProxy, const FMeshPassProcessorRenderState& InRenderState, FMeshPassDrawListContext* InDrawListContext)"
  },
  {
    "label": "AddMeshBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId = -1)"
  },
  {
    "label": "TryAddMeshBatch()",
    "kind": "Method",
    "detail": "Function (FMeshPassProcessorRenderState PassDrawRenderState ; private : bool)",
    "insertText": "TryAddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial* Material)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Process(const FMeshBatch& MeshBatch, uint64 BatchElementMask, int32 StaticMeshId, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode)"
  },
  {
    "label": "FEditorSelectionMeshProcessor()",
    "kind": "Method",
    "detail": "Function (const bool bAllowTranslucentPrimitivesInHitProxy ; } ; class FEditorSelectionMeshProcessor : public FSceneRenderingAllocatorObject<FEditorSelectionMeshProcessor>,public FMeshPassProcessor { public :)",
    "insertText": "FEditorSelectionMeshProcessor(const FScene* Scene, const FSceneView* InViewIfDynamicMeshCommand, FMeshPassDrawListContext* InDrawListContext)"
  },
  {
    "label": "GetStencilValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStencilValue(const FSceneView* View, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "FEditorLevelInstanceMeshProcessor()",
    "kind": "Method",
    "detail": "Function (TMap<const FPrimitiveSceneProxy*,int32> ProxyToStencilIndex ; TMap<FName,int32> ActorNameToStencilIndex ; } ; class FEditorLevelInstanceMeshProcessor : public FSceneRenderingAllocatorObject<FEditorLevelInstanceMeshProcessor>,public FMeshPassProcessor { public :)",
    "insertText": "FEditorLevelInstanceMeshProcessor(const FScene* Scene, const FSceneView* InViewIfDynamicMeshCommand, FMeshPassDrawListContext* InDrawListContext)"
  }
]