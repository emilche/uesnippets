[
  {
    "label": "SLodProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLodProfile() : m_fHighDetail3dDistance(300.0f), m_fBillboardStartDistance(1300.0f), m_fLowDetail3dDistance(1200.0f), m_fBillboardFinalDistance(1500.0f), m_bLodIsPresent(true)"
  },
  {
    "label": "ComputeDerived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDerived()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsValid( ))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} st_bool)",
    "insertText": "IsValid(void)"
  },
  {
    "label": "ComputeDerived()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeDerived(void)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (m_f3dRange = m_fLowDetail3dDistance - m_fHighDetail3dDistance ; m_fBillboardRange = m_fBillboardFinalDistance - m_fBillboardStartDistance ; } void)",
    "insertText": "Scale(st_float32 fScalar)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Square(SLodProfile& sSquaredProfile)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (sSquaredProfile . m_bLodIsPresent = m_bLodIsPresent ; } SLodProfile::operator const)",
    "insertText": "st_float32(void)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (} const SGeometry*)",
    "insertText": "GetGeometry(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_bool bSuccess = false ;)",
    "insertText": "if(sLodProfile.IsValid( ))"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (sLodProfile .)",
    "insertText": "Square(m_sLodProfileSquared)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (bSuccess = true ; } else)",
    "insertText": "SetError(\"CCore::SetLodRange, one of the near/start values exceeds its corresponding far/end value\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_int32 nLodLevel = - 1 ;)",
    "insertText": "if(fLod <= 0.0f)"
  },
  {
    "label": "st_int8()",
    "kind": "Method",
    "detail": "Function (nLodLevel =)",
    "insertText": "st_int8(m_sGeometry.m_nNumLods > 0 ? m_sGeometry.m_nNumLods - 1 : -1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(fLod >= 1.0f)"
  },
  {
    "label": "nLodLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nLodLevel(m_sGeometry.m_nNumLods > 0)"
  },
  {
    "label": "st_int8()",
    "kind": "Method",
    "detail": "Function (} else { const st_float32 c_fMirrorLodValue = 1 . 0 f - fLod ; nLodLevel =)",
    "insertText": "st_int8(c_fMirrorLodValue * m_sGeometry.m_nNumLods)"
  },
  {
    "label": "ComputeLodByDistance()",
    "kind": "Method",
    "detail": "Function (} return nLodLevel ; } st_float32)",
    "insertText": "ComputeLodByDistance(st_float32 fDistance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_float32 fLod = - 1 . 0 f ;)",
    "insertText": "if(fDistance < m_sLodProfile.m_fHighDetail3dDistance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_float32 fLod = - 1 . 0 f ;)",
    "insertText": "if(fDistanceSquared < m_sLodProfileSquared.m_fHighDetail3dDistance)"
  },
  {
    "label": "st_max()",
    "kind": "Method",
    "detail": "Function (st_float32 fLodClamped =)",
    "insertText": "st_max(0.0f, fLod)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (st_float32 fSpacing = 1 . 0 f /)",
    "insertText": "st_float32(nNumDiscreteLevels)"
  },
  {
    "label": "st_int32()",
    "kind": "Method",
    "detail": "Function (st_float32 fMod = fLodClamped -)",
    "insertText": "st_int32(fLodClamped / fSpacing)"
  },
  {
    "label": "optimize()",
    "kind": "Method",
    "detail": "Function (} # ifdef _XBOX # pragma)",
    "insertText": "optimize(\"\", on) #endif inline CWind& CCore::GetWind(void)"
  },
  {
    "label": "GetCollisionObjects()",
    "kind": "Method",
    "detail": "Function (} const SCollisionObject*)",
    "insertText": "GetCollisionObjects(st_int32& nNumObjects)"
  },
  {
    "label": "SetHueVariationParams()",
    "kind": "Method",
    "detail": "Function (nNumObjects = m_nNumCollisionObjects ; return m_pCollisionObjects ; } void)",
    "insertText": "SetHueVariationParams(const SHueVariationParams& sParams)"
  },
  {
    "label": "GetHueVariationParams()",
    "kind": "Method",
    "detail": "Function (m_sHueVariationParams = sParams ; } const CCore::SHueVariationParams&)",
    "insertText": "GetHueVariationParams(void)"
  },
  {
    "label": "GetAmbientImageScalar()",
    "kind": "Method",
    "detail": "Function (m_fAmbientImageScalar = fScalar ; } st_float32)",
    "insertText": "GetAmbientImageScalar(void)"
  },
  {
    "label": "UncompressVec3()",
    "kind": "Method",
    "detail": "Function (m_pUserData = pUserData ; } Vec3)",
    "insertText": "UncompressVec3(const st_uint8* pCompressedVector)"
  },
  {
    "label": "UncompressScalar()",
    "kind": "Method",
    "detail": "Function (} st_float32)",
    "insertText": "UncompressScalar(st_uint8 uiCompressedScalar)"
  },
  {
    "label": "CompressScalar()",
    "kind": "Method",
    "detail": "Function (} st_uint8)",
    "insertText": "CompressScalar(st_float32 fUncompressedScalar)"
  },
  {
    "label": "CompressVec3()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompressVec3(st_uint8 auiCompressedValue[3], const Vec3& vVector)"
  },
  {
    "label": "CompressScalar()",
    "kind": "Method",
    "detail": "Function (auiCompressedValue [ 0 ] =)",
    "insertText": "CompressScalar(vVector.x)"
  },
  {
    "label": "CompressScalar()",
    "kind": "Method",
    "detail": "Function (auiCompressedValue [ 1 ] =)",
    "insertText": "CompressScalar(vVector.y)"
  },
  {
    "label": "CompressScalar()",
    "kind": "Method",
    "detail": "Function (auiCompressedValue [ 2 ] =)",
    "insertText": "CompressScalar(vVector.z)"
  },
  {
    "label": "GetVertexPropertyDesc()",
    "kind": "Method",
    "detail": "Function (} const SVertexPropertyDesc&)",
    "insertText": "GetVertexPropertyDesc(EVertexProperty eProperty)"
  },
  {
    "label": "GetPixelPropertyDesc()",
    "kind": "Method",
    "detail": "Function (const SVertexPropertyDesc asDescs [ VERTEX_PROPERTY_COUNT + 2 ] = { { 1,\" UNASSIGNED \",\" UASS \" },{ 3,\" Position \",\" posi \" },{ 2,\" DiffuseTexCoords \",\" texd \" },{ 3,\" Normal \",\" norm \" },{ 3,\" LodPosition \",\" lodp \" },{ 1,\" GeometryTypeHint \",\" hint \" },{ 3,\" LeafCardCorner \",\" lfcc \" },{ 1,\" LeafCardLodScalar \",\" lfls \" },{ 1,\" LeafCardSelfShadowOffset \",\" lfso \" },{ 4,\" WindBranchData \",\" wbrn \" },{ 3,\" WindExtraData \",\" wext \" },{ 1,\" WindFlags \",\" wflg \" },{ 3,\" LeafAnchorPoint \",\" lanc \" },{ 1,\" BoneID \",\" bnid \" },{ 3,\" BranchSeamDiffuse \",\" bsdf \" },{ 2,\" BranchSeamDetail \",\" bsdt \" },{ 2,\" DetailTexCoords \",\" texl \" },{ 3,\" Tangent \",\" tang \" },{ 2,\" LightMapTexCoords \",\" lmap \" },{ 1,\" AmbientOcclusion \",\" aocc \" },{ 1,\" Pad \",\" pad \" } } ; return asDescs [ eProperty + 1 ] ; } const SPixelPropertyDesc&)",
    "insertText": "GetPixelPropertyDesc(EPixelProperty eProperty)"
  },
  {
    "label": "ComponentName()",
    "kind": "Method",
    "detail": "Function (const SPixelPropertyDesc asDescs [ PIXEL_PROPERTY_COUNT + 1 ] = { { 4,\" Projection \",\" proj \" },{ 1,\" FogScalar \",\" fogs \" },{ 3,\" FogColor \",\" fogc \" },{ 2,\" DiffuseTexCoords \",\" texd \" },{ 2,\" DetailTexCoords \",\" texl \" },{ 3,\" PerVertexLightingColor \",\" pvlc \" },{ 3,\" NormalInTangentSpace \",\" nmts \" },{ 3,\" Normal \",\" norm \" },{ 3,\" Binormal \",\" bnrm \" },{ 3,\" Tangent \",\" tang \" },{ 3,\" SpecularHalfVector \",\" shvc \" },{ 1,\" PerVertexSpecularDot \",\" pvsd \" },{ 1,\" PerVertexAmbientContrast \",\" pvac \" },{ 1,\" FadeToBillboard \",\" f2bb \" },{ 1,\" TransmissionFactor \",\" tran \" },{ 1,\" RenderEffectsFade \",\" efad \" },{ 1,\" AmbientOcclusion \",\" ao \" },{ 3,\" BranchSeamDiffuse \",\" bsdt \" },{ 2,\" BranchSeamDetail \",\" bslt \" },{ 1,\" ShadowDepth \",\" sdep \" },{ 4,\" ShadowMapProjection0 \",\" smp0 \" },{ 4,\" ShadowMapProjection1 \",\" smp1 \" },{ 4,\" ShadowMapProjection2 \",\" smp2 \" },{ 4,\" ShadowMapProjection3 \",\" smp3 \" },{ 3,\" HueVariation \",\" huev \" } } ; return asDescs [ eProperty ] ; } const st_char*)",
    "insertText": "ComponentName(st_int32 nComponent)"
  },
  {
    "label": "SrtBuffer()",
    "kind": "Method",
    "detail": "Function (const char* asNames [ 4 ] = { \" x \",\" y \",\" z \",\" w \" } ; return asNames [ nComponent ] ; } else return \" unknown \" ; } const st_byte*)",
    "insertText": "SrtBuffer(void)"
  }
]