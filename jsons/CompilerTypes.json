[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SToolchainInjections",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SToolchainInjections"
  },
  {
    "label": "SCommandLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCommandLine"
  },
  {
    "label": "SPackageUsageEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPackageUsageEntry"
  },
  {
    "label": "SPackageUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPackageUsage"
  },
  {
    "label": "SBuildParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBuildParams"
  },
  {
    "label": "SBuildContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBuildContext"
  },
  {
    "label": "SProgramContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SProgramContext"
  },
  {
    "label": "SBuildContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Semantics / SemanticProgram . h \" # include \" uLang / Diagnostics / Diagnostics . h \" # include \" uLang / CompilerPasses / ApiLayerInjections . h \" namespace uLang { enum class EAstNodeSetKey : uintptr_t ; struct SToolchainInjections { TSRefArray<IPreParseInjection> _PreParseInjections ; TSRefArray<IPostParseInjection> _PostParseInjections ; TSRefArray<IPreSemAnalysisInjection> _PreSemAnalysisInjections ; TSRefArray<IIntraSemAnalysisInjection> _IntraSemAnalysisInjections ; TSRefArray<IPostSemAnalysisInjection> _PostSemAnalysisInjections ; TSRefArray<IPreTranslateInjection> _PreTranslateInjections ; TSRefArray<IPreLinkInjection> _PreLinkInjections ; } ; struct SCommandLine { TArray<CUTF8String> _Tokens ; TArray<CUTF8String> _Switches ; CUTF8String _Unparsed ; } ; struct SPackageUsageEntry { CUTF8String _PackageName ; TArray<CUTF8String> _UsedDependencies ; } ; struct SPackageUsage { TArray<SPackageUsageEntry> _Packages ; } ; struct SBuildParams { enum class ELinkParam { RequireComplete,Skip,Default,} ; bool _bGenerateDigests = true ; bool _bGenerateCode = true ; ELinkParam _LinkType = ELinkParam::Default ; bool _bSemanticAnalysisOnly = false ; int32_t _MaxNumPersistentVars = 0 ; uint32_t _UploadedAtFNVersion = VerseFN::UploadedAtFNVersion::Latest ; enum class EWhichVM { VerseVM,BPVM } ; # if WITH_VERSE_BPVM EWhichVM _TargetVM = EWhichVM::BPVM ; # else EWhichVM _TargetVM = EWhichVM::VerseVM ; # endif } ; struct SBuildContext { TSRef<CDiagnostics> _Diagnostics ; SToolchainInjections _AddedInjections ; TArray<CUTF8String> _BuiltInPackageNames = { \" Solaris / VerseNative \" } ; TUPtr<SPackageUsage> _PackageUsage ; SBuildParams _Params ;)",
    "insertText": "SBuildContext(TSRef<CDiagnostics> Diagnostics) : _Diagnostics(Move(Diagnostics))"
  },
  {
    "label": "SBuildContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SBuildContext() : _Diagnostics(TSRef<CDiagnostics>::New())"
  },
  {
    "label": "SProgramContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct SProgramContext { TSRef<CSemanticProgram> _Program ;)",
    "insertText": "SProgramContext(const TSRef<CSemanticProgram>& Program) : _Program(Program)"
  }
]