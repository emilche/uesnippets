[
  {
    "label": "TDistLine3Ray3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistLine3Ray3"
  },
  {
    "label": "TDistLine3Ray3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" LineTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistLine3Ray3 { public : TLine3<Real> Line ; TRay<Real> Ray ; Real DistanceSquared = - 1 . 0 ; TVector<Real> LineClosestPoint ; Real LineParameter ; TVector<Real> RayClosestPoint ; Real RayParameter ;)",
    "insertText": "TDistLine3Ray3(const TLine3<Real>& LineIn, const TRay<Real>& RayIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Line = LineIn ; Ray = RayIn ; } Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real b0 = kDiff .)",
    "insertText": "Dot(Line.Direction)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (Real c = kDiff .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Real det =)",
    "insertText": "Abs((Real)1 - a01 * a01)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real b1,s0,s1,sqrDist ;)",
    "insertText": "if(det >= TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (b1 = - kDiff .)",
    "insertText": "Dot(Ray.Direction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s1 = a01* b0 - b1 ;)",
    "insertText": "if(s1 >= (Real)0)"
  },
  {
    "label": "invDet()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "invDet((Real)1)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s0(a01 * b1 - b0)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (s1* = invDet ; sqrDist =)",
    "insertText": "s0(s0 + a01 * s1 + ((Real)2) * b0) + s1 * (a01 * s0 + s1 + ((Real)2) * b1)"
  },
  {
    "label": "s1()",
    "kind": "Method",
    "detail": "Function (} else { s0 = - b0 ;)",
    "insertText": "s1(Real)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sqrDist = b0* s0 + c ; } LineClosestPoint = Line . Origin + s0* Line . Direction ; RayClosestPoint = Ray . Origin + s1* Ray . Direction ; LineParameter = s0 ; RayParameter = s1 ;)",
    "insertText": "if(sqrDist < (Real)0)"
  },
  {
    "label": "sqrDist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sqrDist(Real)"
  }
]