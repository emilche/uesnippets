[
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "MachineConstantPoolValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineConstantPoolValue"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "SDDbgValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDDbgValue"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "TargetSelectionDAGInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSelectionDAGInfo"
  },
  {
    "label": "SDVTListNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDVTListNode"
  },
  {
    "label": "FoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FoldingSetTrait"
  },
  {
    "label": "FoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FoldingSetTrait"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "SDDbgInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDDbgInfo"
  },
  {
    "label": "SelectionDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAG"
  },
  {
    "label": "SelectionDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAG"
  },
  {
    "label": "DAGUpdateListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DAGUpdateListener"
  },
  {
    "label": "DAGUpdateListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DAGUpdateListener"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "createSentinel()"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "createSentinel()"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createNode(const SDNode &)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(const SDNode *Node)"
  },
  {
    "label": "checkForCycles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkForCycles(const SelectionDAG *DAG, bool force = false)"
  },
  {
    "label": "NodeDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeDeleted(SDNode *N, SDNode *E)"
  },
  {
    "label": "NodeUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeUpdated(SDNode *N)"
  },
  {
    "label": "setSubgraphColorHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setSubgraphColorHelper(SDNode *N, const char *Color,\n                              DenseSet<SDNode *> &visited,\n                              int level, bool &printed)"
  },
  {
    "label": "SelectionDAG()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "SelectionDAG(const TargetMachine &TM, llvm::CodeGenOpt::Level)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(MachineFunction &mf)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "viewGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewGraph(const std::string &Title)"
  },
  {
    "label": "viewGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewGraph()"
  },
  {
    "label": "clearGraphAttrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearGraphAttrs()"
  },
  {
    "label": "setGraphAttrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGraphAttrs(const SDNode *N, const char *Attrs)"
  },
  {
    "label": "setGraphColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGraphColor(const SDNode *N, const char *Color)"
  },
  {
    "label": "setSubgraphColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSubgraphColor(SDNode *N, const char *Color)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Combine(CombineLevel Level, AliasAnalysis &AA,\n               CodeGenOpt::Level OptLevel)"
  },
  {
    "label": "LegalizeTypes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegalizeTypes()"
  },
  {
    "label": "Legalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Legalize()"
  },
  {
    "label": "LegalizeOp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegalizeOp(SDNode *N, SmallSetVector<SDNode *, 16> &UpdatedNodes)"
  },
  {
    "label": "LegalizeVectors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegalizeVectors()"
  },
  {
    "label": "RemoveDeadNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadNodes()"
  },
  {
    "label": "DeleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNode(SDNode *N)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT1, EVT VT2)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT1, EVT VT2, EVT VT3)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT1, EVT VT2, EVT VT3, EVT VT4)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(ArrayRef<EVT> VTs)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstant(uint64_t Val, SDLoc DL, EVT VT, bool isTarget = false,\n                      bool isOpaque = false)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstant(const APInt &Val, SDLoc DL, EVT VT, bool isTarget = false,\n                      bool isOpaque = false)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstant(const ConstantInt &Val, SDLoc DL, EVT VT,\n                      bool isTarget = false, bool isOpaque = false)"
  },
  {
    "label": "getIntPtrConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getIntPtrConstant(uint64_t Val, SDLoc DL, bool isTarget = false)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstant(Val, DL, VT, true, isOpaque)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstant(Val, DL, VT, true, isOpaque)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstant(Val, DL, VT, true, isOpaque)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstantFP(double Val, SDLoc DL, EVT VT, bool isTarget = false)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstantFP(const APFloat& Val, SDLoc DL, EVT VT,\n                        bool isTarget = false)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstantFP(const ConstantFP &CF, SDLoc DL, EVT VT,\n                        bool isTarget = false)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstantFP(Val, DL, VT, true)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstantFP(Val, DL, VT, true)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstantFP(Val, DL, VT, true)"
  },
  {
    "label": "getGlobalAddress()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getGlobalAddress(const GlobalValue *GV, SDLoc DL, EVT VT,\n                           int64_t offset = 0, bool isTargetGA = false,\n                           unsigned char TargetFlags = 0)"
  },
  {
    "label": "getGlobalAddress()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getGlobalAddress(GV, DL, VT, offset, true, TargetFlags)"
  },
  {
    "label": "getFrameIndex()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getFrameIndex(int FI, EVT VT, bool isTarget = false)"
  },
  {
    "label": "getFrameIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getFrameIndex(FI, VT, true)"
  },
  {
    "label": "getJumpTable()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getJumpTable(int JTI, EVT VT, bool isTarget = false,\n                       unsigned char TargetFlags = 0)"
  },
  {
    "label": "getJumpTable()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getJumpTable(JTI, VT, true, TargetFlags)"
  },
  {
    "label": "getConstantPool()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstantPool(const Constant *C, EVT VT,\n                          unsigned Align = 0, int Offs = 0, bool isT=false,\n                          unsigned char TargetFlags = 0)"
  },
  {
    "label": "getConstantPool()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstantPool(C, VT, Align, Offset, true, TargetFlags)"
  },
  {
    "label": "getConstantPool()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstantPool(MachineConstantPoolValue *C, EVT VT,\n                          unsigned Align = 0, int Offs = 0, bool isT=false,\n                          unsigned char TargetFlags = 0)"
  },
  {
    "label": "getConstantPool()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getConstantPool(C, VT, Align, Offset, true, TargetFlags)"
  },
  {
    "label": "getTargetIndex()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetIndex(int Index, EVT VT, int64_t Offset = 0,\n                         unsigned char TargetFlags = 0)"
  },
  {
    "label": "getBasicBlock()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBasicBlock(MachineBasicBlock *MBB)"
  },
  {
    "label": "getBasicBlock()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBasicBlock(MachineBasicBlock *MBB, SDLoc dl)"
  },
  {
    "label": "getExternalSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getExternalSymbol(const char *Sym, EVT VT)"
  },
  {
    "label": "getExternalSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getExternalSymbol(const char *Sym, SDLoc dl, EVT VT)"
  },
  {
    "label": "getTargetExternalSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetExternalSymbol(const char *Sym, EVT VT,\n                                  unsigned char TargetFlags = 0)"
  },
  {
    "label": "getMCSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMCSymbol(MCSymbol *Sym, EVT VT)"
  },
  {
    "label": "getValueType()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getValueType(EVT)"
  },
  {
    "label": "getRegister()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getRegister(unsigned Reg, EVT VT)"
  },
  {
    "label": "getRegisterMask()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getRegisterMask(const uint32_t *RegMask)"
  },
  {
    "label": "getEHLabel()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getEHLabel(SDLoc dl, SDValue Root, MCSymbol *Label)"
  },
  {
    "label": "getBlockAddress()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBlockAddress(const BlockAddress *BA, EVT VT,\n                          int64_t Offset = 0, bool isTarget = false,\n                          unsigned char TargetFlags = 0)"
  },
  {
    "label": "getBlockAddress()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getBlockAddress(BA, VT, Offset, true, TargetFlags)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNode(ISD::CopyFromReg, dl, VTs, Ops)"
  },
  {
    "label": "getCondCode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getCondCode(ISD::CondCode Cond)"
  },
  {
    "label": "getConvertRndSat()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConvertRndSat(EVT VT, SDLoc dl, SDValue Val, SDValue DTy,\n                           SDValue STy,\n                           SDValue Rnd, SDValue Sat, ISD::CvtCode Code)"
  },
  {
    "label": "getVectorShuffle()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getVectorShuffle(EVT VT, SDLoc dl, SDValue N1, SDValue N2,\n                           const int *MaskElts)"
  },
  {
    "label": "getCommutedVectorShuffle()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getCommutedVectorShuffle(const ShuffleVectorSDNode &SV)"
  },
  {
    "label": "getAnyExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAnyExtOrTrunc(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getSExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getSExtOrTrunc(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getZExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getZExtOrTrunc(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getZeroExtendInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getZeroExtendInReg(SDValue Op, SDLoc DL, EVT SrcTy)"
  },
  {
    "label": "getAnyExtendVectorInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAnyExtendVectorInReg(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getSignExtendVectorInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getSignExtendVectorInReg(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getZeroExtendVectorInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getZeroExtendVectorInReg(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getBoolExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBoolExtOrTrunc(SDValue Op, SDLoc SL, EVT VT, EVT OpVT)"
  },
  {
    "label": "getNOT()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNOT(SDLoc DL, SDValue Val, EVT VT)"
  },
  {
    "label": "getLogicalNOT()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLogicalNOT(SDLoc DL, SDValue Val, EVT VT)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNode(ISD::CALLSEQ_START, DL, VTs, Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNode(ISD::CALLSEQ_END, DL, NodeTys, Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT,\n                  ArrayRef<SDUse> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT,\n                  ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, ArrayRef<EVT> ResultTys,\n                  ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs,\n                  ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2,\n                  const SDNodeFlags *Flags = nullptr)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2,\n                  SDValue N3)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2,\n                  SDValue N3, SDValue N4)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2,\n                  SDValue N3, SDValue N4, SDValue N5)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1,\n                  SDValue N2)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1,\n                  SDValue N2, SDValue N3)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1,\n                  SDValue N2, SDValue N3, SDValue N4)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1,\n                  SDValue N2, SDValue N3, SDValue N4, SDValue N5)"
  },
  {
    "label": "getStackArgumentTokenFactor()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getStackArgumentTokenFactor(SDValue Chain)"
  },
  {
    "label": "getMemcpy()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemcpy(SDValue Chain, SDLoc dl, SDValue Dst, SDValue Src,\n                    SDValue Size, unsigned Align, bool isVol, bool AlwaysInline,\n                    bool isTailCall, MachinePointerInfo DstPtrInfo,\n                    MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "getMemmove()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemmove(SDValue Chain, SDLoc dl, SDValue Dst, SDValue Src,\n                     SDValue Size, unsigned Align, bool isVol, bool isTailCall,\n                     MachinePointerInfo DstPtrInfo,\n                     MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "getMemset()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemset(SDValue Chain, SDLoc dl, SDValue Dst, SDValue Src,\n                    SDValue Size, unsigned Align, bool isVol, bool isTailCall,\n                    MachinePointerInfo DstPtrInfo)"
  },
  {
    "label": "getVAArg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getVAArg(EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr,\n                   SDValue SV, unsigned Align)"
  },
  {
    "label": "getAtomicCmpSwap()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomicCmpSwap(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTs,\n                           SDValue Chain, SDValue Ptr, SDValue Cmp, SDValue Swp,\n                           MachinePointerInfo PtrInfo, unsigned Alignment,\n                           AtomicOrdering SuccessOrdering,\n                           AtomicOrdering FailureOrdering,\n                           SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomicCmpSwap()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomicCmpSwap(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTs,\n                           SDValue Chain, SDValue Ptr, SDValue Cmp, SDValue Swp,\n                           MachineMemOperand *MMO,\n                           AtomicOrdering SuccessOrdering,\n                           AtomicOrdering FailureOrdering,\n                           SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDValue Chain,\n                    SDValue Ptr, SDValue Val, const Value *PtrVal,\n                    unsigned Alignment, AtomicOrdering Ordering,\n                    SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDValue Chain,\n                    SDValue Ptr, SDValue Val, MachineMemOperand *MMO,\n                    AtomicOrdering Ordering,\n                    SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, EVT VT,\n                    SDValue Chain, SDValue Ptr, MachineMemOperand *MMO,\n                    AtomicOrdering Ordering,\n                    SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTList,\n                    ArrayRef<SDValue> Ops, MachineMemOperand *MMO,\n                    AtomicOrdering SuccessOrdering,\n                    AtomicOrdering FailureOrdering,\n                    SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTList,\n                    ArrayRef<SDValue> Ops, MachineMemOperand *MMO,\n                    AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getMemIntrinsicNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemIntrinsicNode(unsigned Opcode, SDLoc dl, SDVTList VTList,\n                              ArrayRef<SDValue> Ops,\n                              EVT MemVT, MachinePointerInfo PtrInfo,\n                              unsigned Align = 0, bool Vol = false,\n                              bool ReadMem = true, bool WriteMem = true,\n                              unsigned Size = 0)"
  },
  {
    "label": "getMemIntrinsicNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemIntrinsicNode(unsigned Opcode, SDLoc dl, SDVTList VTList,\n                              ArrayRef<SDValue> Ops,\n                              EVT MemVT, MachineMemOperand *MMO)"
  },
  {
    "label": "getMergeValues()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMergeValues(ArrayRef<SDValue> Ops, SDLoc dl)"
  },
  {
    "label": "getLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLoad(EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr,\n                  MachineMemOperand *MMO)"
  },
  {
    "label": "getExtLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getExtLoad(ISD::LoadExtType ExtType, SDLoc dl, EVT VT,\n                     SDValue Chain, SDValue Ptr, EVT MemVT,\n                     MachineMemOperand *MMO)"
  },
  {
    "label": "getIndexedLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getIndexedLoad(SDValue OrigLoad, SDLoc dl, SDValue Base,\n                         SDValue Offset, ISD::MemIndexedMode AM)"
  },
  {
    "label": "getLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLoad(ISD::MemIndexedMode AM, ISD::LoadExtType ExtType,\n                  EVT VT, SDLoc dl,\n                  SDValue Chain, SDValue Ptr, SDValue Offset,\n                  EVT MemVT, MachineMemOperand *MMO)"
  },
  {
    "label": "getStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getStore(SDValue Chain, SDLoc dl, SDValue Val, SDValue Ptr,\n                   MachineMemOperand *MMO)"
  },
  {
    "label": "getTruncStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTruncStore(SDValue Chain, SDLoc dl, SDValue Val, SDValue Ptr,\n                        EVT TVT, MachineMemOperand *MMO)"
  },
  {
    "label": "getIndexedStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getIndexedStore(SDValue OrigStoe, SDLoc dl, SDValue Base,\n                           SDValue Offset, ISD::MemIndexedMode AM)"
  },
  {
    "label": "getMaskedLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedLoad(EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr,\n                        SDValue Mask, SDValue Src0, EVT MemVT,\n                        MachineMemOperand *MMO, ISD::LoadExtType)"
  },
  {
    "label": "getMaskedStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedStore(SDValue Chain, SDLoc dl, SDValue Val,\n                         SDValue Ptr, SDValue Mask, EVT MemVT,\n                         MachineMemOperand *MMO, bool IsTrunc)"
  },
  {
    "label": "getMaskedGather()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedGather(SDVTList VTs, EVT VT, SDLoc dl,\n                          ArrayRef<SDValue> Ops, MachineMemOperand *MMO)"
  },
  {
    "label": "getMaskedScatter()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedScatter(SDVTList VTs, EVT VT, SDLoc dl,\n                           ArrayRef<SDValue> Ops, MachineMemOperand *MMO)"
  },
  {
    "label": "getSrcValue()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getSrcValue(const Value *v)"
  },
  {
    "label": "getMDNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMDNode(const MDNode *MD)"
  },
  {
    "label": "getBitcast()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBitcast(EVT VT, SDValue V)"
  },
  {
    "label": "getAddrSpaceCast()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAddrSpaceCast(SDLoc dl, EVT VT, SDValue Ptr,\n                           unsigned SrcAS, unsigned DestAS)"
  },
  {
    "label": "getShiftAmountOperand()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getShiftAmountOperand(EVT LHSTy, SDValue Op)"
  },
  {
    "label": "getTargetExtractSubreg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetExtractSubreg(int SRIdx, SDLoc DL, EVT VT,\n                                 SDValue Operand)"
  },
  {
    "label": "getTargetInsertSubreg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetInsertSubreg(int SRIdx, SDLoc DL, EVT VT,\n                                SDValue Operand, SDValue Subreg)"
  },
  {
    "label": "RemoveDeadNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadNode(SDNode *N)"
  },
  {
    "label": "RemoveDeadNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadNodes(SmallVectorImpl<SDNode *> &DeadNodes)"
  },
  {
    "label": "ReplaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesWith(SDValue From, SDValue Op)"
  },
  {
    "label": "ReplaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesWith(SDNode *From, SDNode *To)"
  },
  {
    "label": "ReplaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesWith(SDNode *From, const SDValue *To)"
  },
  {
    "label": "ReplaceAllUsesOfValueWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesOfValueWith(SDValue From, SDValue To)"
  },
  {
    "label": "ReplaceAllUsesOfValuesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesOfValuesWith(const SDValue *From, const SDValue *To,\n                                  unsigned Num)"
  },
  {
    "label": "AssignTopologicalOrder()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AssignTopologicalOrder()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "llvm_unreachable(\"Unknown FP format\")"
  },
  {
    "label": "AddDbgValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDbgValue(SDDbgValue *DB, SDNode *SD, bool isParameter)"
  },
  {
    "label": "TransferDbgValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferDbgValues(SDValue From, SDValue To)"
  },
  {
    "label": "CreateStackTemporary()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "CreateStackTemporary(EVT VT, unsigned minAlign = 1)"
  },
  {
    "label": "CreateStackTemporary()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "CreateStackTemporary(EVT VT1, EVT VT2)"
  },
  {
    "label": "FoldConstantArithmetic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "FoldConstantArithmetic(unsigned Opcode, SDLoc DL, EVT VT,\n                                 SDNode *Cst1, SDNode *Cst2)"
  },
  {
    "label": "FoldConstantArithmetic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "FoldConstantArithmetic(unsigned Opcode, SDLoc DL, EVT VT,\n                                 const ConstantSDNode *Cst1,\n                                 const ConstantSDNode *Cst2)"
  },
  {
    "label": "FoldSetCC()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "FoldSetCC(EVT VT, SDValue N1,\n                    SDValue N2, ISD::CondCode Cond, SDLoc dl)"
  },
  {
    "label": "UnrollVectorOp()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "UnrollVectorOp(SDNode *N, unsigned ResNE = 0)"
  },
  {
    "label": "SplitVector()",
    "kind": "Method",
    "detail": "Function (SDValue>)",
    "insertText": "SplitVector(const SDValue &N, const SDLoc &DL,\n                                          const EVT &LoVT, const EVT &HiVT)"
  },
  {
    "label": "SplitVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SplitVector(N, DL, LoVT, HiVT)"
  },
  {
    "label": "ExtractVectorElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractVectorElements(SDValue Op, SmallVectorImpl<SDValue> &Args,\n                             unsigned Start = 0, unsigned Count = 0)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNode(SDNode *N)"
  },
  {
    "label": "RemoveNodeFromCSEMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNodeFromCSEMaps(SDNode *N)"
  },
  {
    "label": "AddModifiedNodeToCSEMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModifiedNodeToCSEMaps(SDNode *N)"
  },
  {
    "label": "DeleteNodeNotInCSEMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNodeNotInCSEMaps(SDNode *N)"
  },
  {
    "label": "DeallocateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateNode(SDNode *N)"
  },
  {
    "label": "allnodes_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allnodes_clear()"
  }
]