[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "MachineConstantPoolValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineConstantPoolValue"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "SDDbgValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDDbgValue"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "TargetSelectionDAGInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSelectionDAGInfo"
  },
  {
    "label": "SDVTListNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDVTListNode"
  },
  {
    "label": "FoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FoldingSetTrait"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "SDDbgInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDDbgInfo"
  },
  {
    "label": "SelectionDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAG"
  },
  {
    "label": "DAGUpdateListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DAGUpdateListener"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "SDVTListNode()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SELECTIONDAG_H # define LLVM_CODEGEN_SELECTIONDAG_H # include \" llvm / ADT / DenseSet . h \" # include \" llvm / ADT / SetVector . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / ilist . h \" # include \" llvm / CodeGen / DAGCombine . h \" # include \" llvm / CodeGen / MachineFunction . h \" # include \" llvm / CodeGen / SelectionDAGNodes . h \" # include \" llvm / Support / RecyclingAllocator . h \" # include \" llvm / Target / TargetMachine . h \" # include<cassert> # include<map> # include<string> # include<vector> namespace llvm { class AliasAnalysis ; class MachineConstantPoolValue ; class MachineFunction ; class MDNode ; class SDDbgValue ; class TargetLowering ; class TargetSelectionDAGInfo ; class SDVTListNode : public FoldingSetNode { struct FoldingSetTrait<SDVTListNode> ; FoldingSetNodeIDRef FastID ; const EVT* VTs ; unsigned int NumVTs ; unsigned HashValue ; public :)",
    "insertText": "SDVTListNode(const FoldingSetNodeIDRef ID, const EVT *VT, unsigned int Num) : FastID(ID), VTs(VT), NumVTs(Num)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (HashValue = ID .)",
    "insertText": "ComputeHash()"
  },
  {
    "label": "getSDVTList()",
    "kind": "Method",
    "detail": "Function (} SDVTList)",
    "insertText": "getSDVTList()"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (SDVTList result = { VTs,NumVTs } ; return result ; } } ; template<> struct FoldingSetTrait<SDVTListNode> : DefaultFoldingSetTrait<SDVTListNode> { void)",
    "insertText": "Profile(const SDVTListNode &X, FoldingSetNodeID& ID)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (ID = X . FastID ; } bool)",
    "insertText": "Equals(const SDVTListNode &X, const FoldingSetNodeID &ID, unsigned IDHash, FoldingSetNodeID &TempID)"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(SDNode *)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} SDNode*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} SDNode*)",
    "insertText": "ensureHead(SDNode*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(SDNode*, SDNode*)"
  },
  {
    "label": "deleteNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deleteNode(SDNode *)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"ilist_traits<SDNode> shouldn't see a deleteNode call!\")"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "createNode(const SDNode &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; class SDDbgInfo { BumpPtrAllocator Alloc ; SmallVector<SDDbgValue*,3 2> DbgValues ; SmallVector<SDDbgValue*,3 2> ByvalParmDbgValues ; typedef DenseMap<const SDNode*,SmallVector<SDDbgValue*,2>> DbgValMapType ; DbgValMapType DbgValMap ; void)",
    "insertText": "operator(const SDDbgInfo&)"
  },
  {
    "label": "SDDbgInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDDbgInfo(const SDDbgInfo&)"
  },
  {
    "label": "SDDbgInfo()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SDDbgInfo()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "add(SDDbgValue *V, const SDNode *Node, bool isParameter)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ByvalParmDbgValues .)",
    "insertText": "push_back(V)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase(const SDNode *Node)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Alloc .)",
    "insertText": "Reset()"
  },
  {
    "label": "getAlloc()",
    "kind": "Method",
    "detail": "Function (} BumpPtrAllocator&)",
    "insertText": "getAlloc()"
  },
  {
    "label": "getSDDbgValues()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<SDDbgValue*>)",
    "insertText": "getSDDbgValues(const SDNode *Node)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DbgValMapType::iterator I = DbgValMap .)",
    "insertText": "find(Node)"
  },
  {
    "label": "DbgBegin()",
    "kind": "Method",
    "detail": "Function (} typedef SmallVectorImpl<SDDbgValue*>::iterator DbgIterator ; DbgIterator)",
    "insertText": "DbgBegin()"
  },
  {
    "label": "DbgEnd()",
    "kind": "Method",
    "detail": "Function (} DbgIterator)",
    "insertText": "DbgEnd()"
  },
  {
    "label": "ByvalParmDbgBegin()",
    "kind": "Method",
    "detail": "Function (} DbgIterator)",
    "insertText": "ByvalParmDbgBegin()"
  },
  {
    "label": "ByvalParmDbgEnd()",
    "kind": "Method",
    "detail": "Function (} DbgIterator)",
    "insertText": "ByvalParmDbgEnd()"
  },
  {
    "label": "checkForCycles()",
    "kind": "Method",
    "detail": "Function (} } ; class SelectionDAG ; void)",
    "insertText": "checkForCycles(const SelectionDAG *DAG, bool force = false)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (class SelectionDAG { const TargetMachine& TM ; const TargetSelectionDAGInfo* TSI ; const TargetLowering* TLI ; MachineFunction* MF ; LLVMContext* Context ; CodeGenOpt::Level OptLevel ; SDNode EntryNode ; SDValue Root ; ilist<SDNode> AllNodes ; typedef RecyclingAllocator<BumpPtrAllocator,SDNode,)",
    "insertText": "sizeof(LargestSDNode)"
  },
  {
    "label": "DAGUpdateListener()",
    "kind": "Method",
    "detail": "Function (NodeAllocatorType NodeAllocator ; FoldingSet<SDNode> CSEMap ; BumpPtrAllocator OperandAllocator ; BumpPtrAllocator Allocator ; SDDbgInfo* DbgInfo ; public : struct DAGUpdateListener { DAGUpdateListener* const Next ; SelectionDAG& DAG ;)",
    "insertText": "DAGUpdateListener(SelectionDAG &D) : Next(D.UpdateListeners), DAG(D)"
  },
  {
    "label": "DAGUpdateListener()",
    "kind": "Method",
    "detail": "Function (DAG . UpdateListeners = this ; } ~)",
    "insertText": "DAGUpdateListener()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DAG.UpdateListeners == this && \"DAGUpdateListeners must be destroyed in LIFO order\")"
  },
  {
    "label": "NodeDeleted()",
    "kind": "Method",
    "detail": "Function (DAG . UpdateListeners = Next ; } void)",
    "insertText": "NodeDeleted(SDNode *N, SDNode *E)"
  },
  {
    "label": "NodeUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeUpdated(SDNode *N)"
  },
  {
    "label": "setSubgraphColorHelper()",
    "kind": "Method",
    "detail": "Function (} ; bool NewNodesMustHaveLegalTypes ; private : struct DAGUpdateListener ; DAGUpdateListener* UpdateListeners ; bool)",
    "insertText": "setSubgraphColorHelper(SDNode *N, const char *Color, DenseSet<SDNode *> &visited, int level, bool &printed)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const SelectionDAG&)"
  },
  {
    "label": "SelectionDAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectionDAG(const SelectionDAG&)"
  },
  {
    "label": "SelectionDAG()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SelectionDAG(const TargetMachine &TM, llvm::CodeGenOpt::Level)"
  },
  {
    "label": "SelectionDAG()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SelectionDAG()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(MachineFunction &mf)"
  },
  {
    "label": "getMachineFunction()",
    "kind": "Method",
    "detail": "Function (MachineFunction&)",
    "insertText": "getMachineFunction()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (} const TargetMachine&)",
    "insertText": "getTarget()"
  },
  {
    "label": "getTargetLoweringInfo()",
    "kind": "Method",
    "detail": "Function (} const TargetLowering&)",
    "insertText": "getTargetLoweringInfo()"
  },
  {
    "label": "viewGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewGraph()"
  },
  {
    "label": "clearGraphAttrs()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG std::map<const SDNode*,std::string> NodeGraphAttrs ; # endif void)",
    "insertText": "clearGraphAttrs()"
  },
  {
    "label": "setGraphAttrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGraphAttrs(const SDNode *N, const char *Attrs)"
  },
  {
    "label": "getGraphAttrs()",
    "kind": "Method",
    "detail": "Function (const std::string)",
    "insertText": "getGraphAttrs(const SDNode *N)"
  },
  {
    "label": "setGraphColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGraphColor(const SDNode *N, const char *Color)"
  },
  {
    "label": "setSubgraphColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSubgraphColor(SDNode *N, const char *Color)"
  },
  {
    "label": "allnodes_begin()",
    "kind": "Method",
    "detail": "Function (typedef ilist<SDNode>::const_iterator allnodes_const_iterator ; allnodes_const_iterator)",
    "insertText": "allnodes_begin()"
  },
  {
    "label": "allnodes_end()",
    "kind": "Method",
    "detail": "Function (} allnodes_const_iterator)",
    "insertText": "allnodes_end()"
  },
  {
    "label": "allnodes_size()",
    "kind": "Method",
    "detail": "Function (} ilist<SDNode>::size_type)",
    "insertText": "allnodes_size()"
  },
  {
    "label": "allnodes()",
    "kind": "Method",
    "detail": "Function (} iterator_range<allnodes_iterator>)",
    "insertText": "allnodes()"
  },
  {
    "label": "getRoot()",
    "kind": "Method",
    "detail": "Function (} const SDValue&)",
    "insertText": "getRoot()"
  },
  {
    "label": "setRoot()",
    "kind": "Method",
    "detail": "Function (} const SDValue&)",
    "insertText": "setRoot(SDValue N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((!N.getNode() || N.getValueType() == MVT::Other) && \"DAG root value is not a chain!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Root = N ;)",
    "insertText": "if(N.getNode()) checkForCycles(this)"
  },
  {
    "label": "LegalizeTypes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegalizeTypes()"
  },
  {
    "label": "Legalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Legalize()"
  },
  {
    "label": "LegalizeOp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegalizeOp(SDNode *N, SmallSetVector<SDNode *, 16> &UpdatedNodes)"
  },
  {
    "label": "LegalizeVectors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegalizeVectors()"
  },
  {
    "label": "RemoveDeadNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadNodes()"
  },
  {
    "label": "DeleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNode(SDNode *N)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT1, EVT VT2)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT1, EVT VT2, EVT VT3)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(EVT VT1, EVT VT2, EVT VT3, EVT VT4)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList)",
    "insertText": "getVTList(ArrayRef<EVT> VTs)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstant(uint64_t Val, SDLoc DL, EVT VT, bool isTarget = false, bool isOpaque = false)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstant(const APInt &Val, SDLoc DL, EVT VT, bool isTarget = false, bool isOpaque = false)"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstant(const ConstantInt &Val, SDLoc DL, EVT VT, bool isTarget = false, bool isOpaque = false)"
  },
  {
    "label": "getIntPtrConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getIntPtrConstant(uint64_t Val, SDLoc DL, bool isTarget = false)"
  },
  {
    "label": "getTargetConstant()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetConstant(uint64_t Val, SDLoc DL, EVT VT, bool isOpaque = false)"
  },
  {
    "label": "getTargetConstant()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getTargetConstant(const APInt &Val, SDLoc DL, EVT VT, bool isOpaque = false)"
  },
  {
    "label": "getTargetConstant()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getTargetConstant(const ConstantInt &Val, SDLoc DL, EVT VT, bool isOpaque = false)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getConstantFP(double Val, SDLoc DL, EVT VT, bool isTarget = false)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstantFP(const APFloat& Val, SDLoc DL, EVT VT, bool isTarget = false)"
  },
  {
    "label": "getConstantFP()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConstantFP(const ConstantFP &CF, SDLoc DL, EVT VT, bool isTarget = false)"
  },
  {
    "label": "getTargetConstantFP()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetConstantFP(double Val, SDLoc DL, EVT VT)"
  },
  {
    "label": "getTargetConstantFP()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getTargetConstantFP(const APFloat& Val, SDLoc DL, EVT VT)"
  },
  {
    "label": "getTargetConstantFP()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getTargetConstantFP(const ConstantFP &Val, SDLoc DL, EVT VT)"
  },
  {
    "label": "getGlobalAddress()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getGlobalAddress(const GlobalValue *GV, SDLoc DL, EVT VT, int64_t offset = 0, bool isTargetGA = false, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getTargetGlobalAddress()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetGlobalAddress(const GlobalValue *GV, SDLoc DL, EVT VT, int64_t offset = 0, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getFrameIndex()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getFrameIndex(int FI, EVT VT, bool isTarget = false)"
  },
  {
    "label": "getTargetFrameIndex()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetFrameIndex(int FI, EVT VT)"
  },
  {
    "label": "getJumpTable()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getJumpTable(int JTI, EVT VT, bool isTarget = false, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getTargetJumpTable()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetJumpTable(int JTI, EVT VT, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getConstantPool()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getConstantPool(const Constant *C, EVT VT, unsigned Align = 0, int Offs = 0, bool isT=false, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getTargetConstantPool()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetConstantPool(const Constant *C, EVT VT, unsigned Align = 0, int Offset = 0, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getConstantPool()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getConstantPool(MachineConstantPoolValue *C, EVT VT, unsigned Align = 0, int Offs = 0, bool isT=false, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getTargetConstantPool()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetConstantPool(MachineConstantPoolValue *C, EVT VT, unsigned Align = 0, int Offset = 0, unsigned char TargetFlags=0)"
  },
  {
    "label": "getTargetIndex()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getTargetIndex(int Index, EVT VT, int64_t Offset = 0, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getBasicBlock()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBasicBlock(MachineBasicBlock *MBB)"
  },
  {
    "label": "getBasicBlock()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBasicBlock(MachineBasicBlock *MBB, SDLoc dl)"
  },
  {
    "label": "getExternalSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getExternalSymbol(const char *Sym, EVT VT)"
  },
  {
    "label": "getExternalSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getExternalSymbol(const char *Sym, SDLoc dl, EVT VT)"
  },
  {
    "label": "getTargetExternalSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetExternalSymbol(const char *Sym, EVT VT, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getMCSymbol()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMCSymbol(MCSymbol *Sym, EVT VT)"
  },
  {
    "label": "getValueType()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getValueType(EVT)"
  },
  {
    "label": "getRegister()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getRegister(unsigned Reg, EVT VT)"
  },
  {
    "label": "getRegisterMask()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getRegisterMask(const uint32_t *RegMask)"
  },
  {
    "label": "getEHLabel()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getEHLabel(SDLoc dl, SDValue Root, MCSymbol *Label)"
  },
  {
    "label": "getBlockAddress()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBlockAddress(const BlockAddress *BA, EVT VT, int64_t Offset = 0, bool isTarget = false, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getTargetBlockAddress()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetBlockAddress(const BlockAddress *BA, EVT VT, int64_t Offset = 0, unsigned char TargetFlags = 0)"
  },
  {
    "label": "getCopyToReg()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCopyToReg(SDValue Chain, SDLoc dl, unsigned Reg, SDValue N)"
  },
  {
    "label": "getCopyToReg()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCopyToReg(SDValue Chain, SDLoc dl, unsigned Reg, SDValue N, SDValue Glue)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList VTs =)",
    "insertText": "getVTList(MVT::Other, MVT::Glue)"
  },
  {
    "label": "getRegister()",
    "kind": "Method",
    "detail": "Function (SDValue Ops [ ] = { Chain,)",
    "insertText": "getRegister(Reg, N.getValueType())"
  },
  {
    "label": "getCopyToReg()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCopyToReg(SDValue Chain, SDLoc dl, SDValue Reg, SDValue N, SDValue Glue)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue Ops [ ] = { Chain,Reg,N,Glue } ; return)",
    "insertText": "getNode(ISD::CopyToReg, dl, VTs, ArrayRef<SDValue>(Ops, Glue.getNode() ? 4 : 3))"
  },
  {
    "label": "getCopyFromReg()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCopyFromReg(SDValue Chain, SDLoc dl, unsigned Reg, EVT VT)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList VTs =)",
    "insertText": "getVTList(VT, MVT::Other)"
  },
  {
    "label": "getRegister()",
    "kind": "Method",
    "detail": "Function (SDValue Ops [ ] = { Chain,)",
    "insertText": "getRegister(Reg, VT)"
  },
  {
    "label": "getCopyFromReg()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCopyFromReg(SDValue Chain, SDLoc dl, unsigned Reg, EVT VT, SDValue Glue)"
  },
  {
    "label": "getVTList()",
    "kind": "Method",
    "detail": "Function (SDVTList VTs =)",
    "insertText": "getVTList(VT, MVT::Other, MVT::Glue)"
  },
  {
    "label": "getCondCode()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCondCode(ISD::CondCode Cond)"
  },
  {
    "label": "getConvertRndSat()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getConvertRndSat(EVT VT, SDLoc dl, SDValue Val, SDValue DTy, SDValue STy, SDValue Rnd, SDValue Sat, ISD::CvtCode Code)"
  },
  {
    "label": "getVectorShuffle()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getVectorShuffle(EVT VT, SDLoc dl, SDValue N1, SDValue N2, const int *MaskElts)"
  },
  {
    "label": "getVectorShuffle()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getVectorShuffle(EVT VT, SDLoc dl, SDValue N1, SDValue N2, ArrayRef<int> MaskElts)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(VT.getVectorNumElements() == MaskElts.size() && \"Must have the same number of vector elements as mask elements!\")"
  },
  {
    "label": "getCommutedVectorShuffle()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCommutedVectorShuffle(const ShuffleVectorSDNode &SV)"
  },
  {
    "label": "getAnyExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAnyExtOrTrunc(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getSExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getSExtOrTrunc(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getZExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getZExtOrTrunc(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getZeroExtendInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getZeroExtendInReg(SDValue Op, SDLoc DL, EVT SrcTy)"
  },
  {
    "label": "getAnyExtendVectorInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAnyExtendVectorInReg(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getSignExtendVectorInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getSignExtendVectorInReg(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getZeroExtendVectorInReg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getZeroExtendVectorInReg(SDValue Op, SDLoc DL, EVT VT)"
  },
  {
    "label": "getBoolExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBoolExtOrTrunc(SDValue Op, SDLoc SL, EVT VT, EVT OpVT)"
  },
  {
    "label": "getNOT()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNOT(SDLoc DL, SDValue Val, EVT VT)"
  },
  {
    "label": "getLogicalNOT()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLogicalNOT(SDLoc DL, SDValue Val, EVT VT)"
  },
  {
    "label": "getCALLSEQ_START()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getCALLSEQ_START(SDValue Chain, SDValue Op, SDLoc DL)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue Ops [ ] = { Chain,Op } ; return)",
    "insertText": "getNode(ISD::CALLSEQ_START, DL, VTs, Ops)"
  },
  {
    "label": "getCALLSEQ_END()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getCALLSEQ_END(SDValue Chain, SDValue Op1, SDValue Op2, SDValue InGlue, SDLoc DL)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SmallVector<SDValue,4> Ops ; Ops .)",
    "insertText": "push_back(Chain)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Ops .)",
    "insertText": "push_back(Op1)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Ops .)",
    "insertText": "push_back(Op2)"
  },
  {
    "label": "getUNDEF()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getUNDEF(EVT VT)"
  },
  {
    "label": "getGLOBAL_OFFSET_TABLE()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getGLOBAL_OFFSET_TABLE(EVT VT)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, ArrayRef<SDUse> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, ArrayRef<EVT> ResultTys, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2, const SDNodeFlags *Flags = nullptr)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2, SDValue N3)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2, SDValue N3, SDValue N4)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, EVT VT, SDValue N1, SDValue N2, SDValue N3, SDValue N4, SDValue N5)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1, SDValue N2)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1, SDValue N2, SDValue N3)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1, SDValue N2, SDValue N3, SDValue N4)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1, SDValue N2, SDValue N3, SDValue N4, SDValue N5)"
  },
  {
    "label": "getStackArgumentTokenFactor()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getStackArgumentTokenFactor(SDValue Chain)"
  },
  {
    "label": "getMemcpy()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemcpy(SDValue Chain, SDLoc dl, SDValue Dst, SDValue Src, SDValue Size, unsigned Align, bool isVol, bool AlwaysInline, bool isTailCall, MachinePointerInfo DstPtrInfo, MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "getMemmove()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemmove(SDValue Chain, SDLoc dl, SDValue Dst, SDValue Src, SDValue Size, unsigned Align, bool isVol, bool isTailCall, MachinePointerInfo DstPtrInfo, MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "getMemset()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemset(SDValue Chain, SDLoc dl, SDValue Dst, SDValue Src, SDValue Size, unsigned Align, bool isVol, bool isTailCall, MachinePointerInfo DstPtrInfo)"
  },
  {
    "label": "getSetCC()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getSetCC(SDLoc DL, EVT VT, SDValue LHS, SDValue RHS, ISD::CondCode Cond)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LHS.getValueType().isVector() == RHS.getValueType().isVector() && \"Cannot compare scalars to vectors\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LHS.getValueType().isVector() == VT.isVector() && \"Cannot compare scalars to vectors\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Cond != ISD::SETCC_INVALID && \"Cannot create a setCC of an invalid node.\")"
  },
  {
    "label": "getSelect()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getSelect(SDLoc DL, EVT VT, SDValue Cond, SDValue LHS, SDValue RHS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LHS.getValueType() == RHS.getValueType() && \"Cannot use select on differing types\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(VT.isVector() == LHS.getValueType().isVector() && \"Cannot mix vectors and scalars\")"
  },
  {
    "label": "getSelectCC()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getSelectCC(SDLoc DL, SDValue LHS, SDValue RHS, SDValue True, SDValue False, ISD::CondCode Cond)"
  },
  {
    "label": "getVAArg()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "getVAArg(EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr, SDValue SV, unsigned Align)"
  },
  {
    "label": "getAtomicCmpSwap()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomicCmpSwap(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTs, SDValue Chain, SDValue Ptr, SDValue Cmp, SDValue Swp, MachinePointerInfo PtrInfo, unsigned Alignment, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomicCmpSwap()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomicCmpSwap(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTs, SDValue Chain, SDValue Ptr, SDValue Cmp, SDValue Swp, MachineMemOperand *MMO, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDValue Chain, SDValue Ptr, SDValue Val, const Value *PtrVal, unsigned Alignment, AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDValue Chain, SDValue Ptr, SDValue Val, MachineMemOperand *MMO, AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, EVT VT, SDValue Chain, SDValue Ptr, MachineMemOperand *MMO, AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTList, ArrayRef<SDValue> Ops, MachineMemOperand *MMO, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getAtomic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAtomic(unsigned Opcode, SDLoc dl, EVT MemVT, SDVTList VTList, ArrayRef<SDValue> Ops, MachineMemOperand *MMO, AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "getMemIntrinsicNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemIntrinsicNode(unsigned Opcode, SDLoc dl, SDVTList VTList, ArrayRef<SDValue> Ops, EVT MemVT, MachinePointerInfo PtrInfo, unsigned Align = 0, bool Vol = false, bool ReadMem = true, bool WriteMem = true, unsigned Size = 0)"
  },
  {
    "label": "getMemIntrinsicNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMemIntrinsicNode(unsigned Opcode, SDLoc dl, SDVTList VTList, ArrayRef<SDValue> Ops, EVT MemVT, MachineMemOperand *MMO)"
  },
  {
    "label": "getMergeValues()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMergeValues(ArrayRef<SDValue> Ops, SDLoc dl)"
  },
  {
    "label": "getLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLoad(EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr, MachinePointerInfo PtrInfo, bool isVolatile, bool isNonTemporal, bool isInvariant, unsigned Alignment, const AAMDNodes &AAInfo = AAMDNodes(), const MDNode *Ranges = nullptr)"
  },
  {
    "label": "getLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLoad(EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr, MachineMemOperand *MMO)"
  },
  {
    "label": "getExtLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getExtLoad(ISD::LoadExtType ExtType, SDLoc dl, EVT VT, SDValue Chain, SDValue Ptr, MachinePointerInfo PtrInfo, EVT MemVT, bool isVolatile, bool isNonTemporal, bool isInvariant, unsigned Alignment, const AAMDNodes &AAInfo = AAMDNodes())"
  },
  {
    "label": "getExtLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getExtLoad(ISD::LoadExtType ExtType, SDLoc dl, EVT VT, SDValue Chain, SDValue Ptr, EVT MemVT, MachineMemOperand *MMO)"
  },
  {
    "label": "getIndexedLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getIndexedLoad(SDValue OrigLoad, SDLoc dl, SDValue Base, SDValue Offset, ISD::MemIndexedMode AM)"
  },
  {
    "label": "getLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLoad(ISD::MemIndexedMode AM, ISD::LoadExtType ExtType, EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr, SDValue Offset, MachinePointerInfo PtrInfo, EVT MemVT, bool isVolatile, bool isNonTemporal, bool isInvariant, unsigned Alignment, const AAMDNodes &AAInfo = AAMDNodes(), const MDNode *Ranges = nullptr)"
  },
  {
    "label": "getLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getLoad(ISD::MemIndexedMode AM, ISD::LoadExtType ExtType, EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr, SDValue Offset, EVT MemVT, MachineMemOperand *MMO)"
  },
  {
    "label": "getStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getStore(SDValue Chain, SDLoc dl, SDValue Val, SDValue Ptr, MachinePointerInfo PtrInfo, bool isVolatile, bool isNonTemporal, unsigned Alignment, const AAMDNodes &AAInfo = AAMDNodes())"
  },
  {
    "label": "getStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getStore(SDValue Chain, SDLoc dl, SDValue Val, SDValue Ptr, MachineMemOperand *MMO)"
  },
  {
    "label": "getTruncStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTruncStore(SDValue Chain, SDLoc dl, SDValue Val, SDValue Ptr, MachinePointerInfo PtrInfo, EVT TVT, bool isNonTemporal, bool isVolatile, unsigned Alignment, const AAMDNodes &AAInfo = AAMDNodes())"
  },
  {
    "label": "getTruncStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTruncStore(SDValue Chain, SDLoc dl, SDValue Val, SDValue Ptr, EVT TVT, MachineMemOperand *MMO)"
  },
  {
    "label": "getIndexedStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getIndexedStore(SDValue OrigStoe, SDLoc dl, SDValue Base, SDValue Offset, ISD::MemIndexedMode AM)"
  },
  {
    "label": "getMaskedLoad()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedLoad(EVT VT, SDLoc dl, SDValue Chain, SDValue Ptr, SDValue Mask, SDValue Src0, EVT MemVT, MachineMemOperand *MMO, ISD::LoadExtType)"
  },
  {
    "label": "getMaskedStore()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedStore(SDValue Chain, SDLoc dl, SDValue Val, SDValue Ptr, SDValue Mask, EVT MemVT, MachineMemOperand *MMO, bool IsTrunc)"
  },
  {
    "label": "getMaskedGather()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedGather(SDVTList VTs, EVT VT, SDLoc dl, ArrayRef<SDValue> Ops, MachineMemOperand *MMO)"
  },
  {
    "label": "getMaskedScatter()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMaskedScatter(SDVTList VTs, EVT VT, SDLoc dl, ArrayRef<SDValue> Ops, MachineMemOperand *MMO)"
  },
  {
    "label": "getSrcValue()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getSrcValue(const Value *v)"
  },
  {
    "label": "getMDNode()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getMDNode(const MDNode *MD)"
  },
  {
    "label": "getBitcast()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getBitcast(EVT VT, SDValue V)"
  },
  {
    "label": "getAddrSpaceCast()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getAddrSpaceCast(SDLoc dl, EVT VT, SDValue Ptr, unsigned SrcAS, unsigned DestAS)"
  },
  {
    "label": "getShiftAmountOperand()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getShiftAmountOperand(EVT LHSTy, SDValue Op)"
  },
  {
    "label": "UpdateNodeOperands()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "UpdateNodeOperands(SDNode *N, SDValue Op)"
  },
  {
    "label": "UpdateNodeOperands()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "UpdateNodeOperands(SDNode *N, SDValue Op1, SDValue Op2)"
  },
  {
    "label": "UpdateNodeOperands()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "UpdateNodeOperands(SDNode *N, SDValue Op1, SDValue Op2, SDValue Op3)"
  },
  {
    "label": "UpdateNodeOperands()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "UpdateNodeOperands(SDNode *N, SDValue Op1, SDValue Op2, SDValue Op3, SDValue Op4)"
  },
  {
    "label": "UpdateNodeOperands()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "UpdateNodeOperands(SDNode *N, SDValue Op1, SDValue Op2, SDValue Op3, SDValue Op4, SDValue Op5)"
  },
  {
    "label": "UpdateNodeOperands()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "UpdateNodeOperands(SDNode *N, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT, SDValue Op1)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT, SDValue Op1, SDValue Op2)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT, SDValue Op1, SDValue Op2, SDValue Op3)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT1, EVT VT2)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT1, EVT VT2, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT1, EVT VT2, EVT VT3, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned MachineOpc, EVT VT1, EVT VT2, EVT VT3, EVT VT4, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT1, EVT VT2, SDValue Op1)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT1, EVT VT2, SDValue Op1, SDValue Op2)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT1, EVT VT2, SDValue Op1, SDValue Op2, SDValue Op3)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, EVT VT1, EVT VT2, EVT VT3, SDValue Op1, SDValue Op2, SDValue Op3)"
  },
  {
    "label": "SelectNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "SelectNodeTo(SDNode *N, unsigned TargetOpc, SDVTList VTs, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "MorphNodeTo()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "MorphNodeTo(SDNode *N, unsigned Opc, SDVTList VTs, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT, SDValue Op1)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT, SDValue Op1, SDValue Op2)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT, SDValue Op1, SDValue Op2, SDValue Op3)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, SDValue Op1)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, SDValue Op1, SDValue Op2)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, SDValue Op1, SDValue Op2, SDValue Op3)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, EVT VT3, SDValue Op1, SDValue Op2)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, EVT VT3, SDValue Op1, SDValue Op2, SDValue Op3)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, EVT VT3, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, EVT VT1, EVT VT2, EVT VT3, EVT VT4, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, ArrayRef<EVT> ResultTys, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getMachineNode()",
    "kind": "Method",
    "detail": "Function (MachineSDNode*)",
    "insertText": "getMachineNode(unsigned Opcode, SDLoc dl, SDVTList VTs, ArrayRef<SDValue> Ops)"
  },
  {
    "label": "getTargetExtractSubreg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetExtractSubreg(int SRIdx, SDLoc DL, EVT VT, SDValue Operand)"
  },
  {
    "label": "getTargetInsertSubreg()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "getTargetInsertSubreg(int SRIdx, SDLoc DL, EVT VT, SDValue Operand, SDValue Subreg)"
  },
  {
    "label": "getNodeIfExists()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "getNodeIfExists(unsigned Opcode, SDVTList VTs, ArrayRef<SDValue> Ops, const SDNodeFlags *Flags = nullptr)"
  },
  {
    "label": "getDbgValue()",
    "kind": "Method",
    "detail": "Function (SDDbgValue*)",
    "insertText": "getDbgValue(MDNode *Var, MDNode *Expr, SDNode *N, unsigned R, bool IsIndirect, uint64_t Off, DebugLoc DL, unsigned O)"
  },
  {
    "label": "getConstantDbgValue()",
    "kind": "Method",
    "detail": "Function (SDDbgValue*)",
    "insertText": "getConstantDbgValue(MDNode *Var, MDNode *Expr, const Value *C, uint64_t Off, DebugLoc DL, unsigned O)"
  },
  {
    "label": "getFrameIndexDbgValue()",
    "kind": "Method",
    "detail": "Function (SDDbgValue*)",
    "insertText": "getFrameIndexDbgValue(MDNode *Var, MDNode *Expr, unsigned FI, uint64_t Off, DebugLoc DL, unsigned O)"
  },
  {
    "label": "RemoveDeadNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadNode(SDNode *N)"
  },
  {
    "label": "RemoveDeadNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadNodes(SmallVectorImpl<SDNode *> &DeadNodes)"
  },
  {
    "label": "ReplaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesWith(SDValue From, SDValue Op)"
  },
  {
    "label": "ReplaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesWith(SDNode *From, SDNode *To)"
  },
  {
    "label": "ReplaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesWith(SDNode *From, const SDValue *To)"
  },
  {
    "label": "ReplaceAllUsesOfValueWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesOfValueWith(SDValue From, SDValue To)"
  },
  {
    "label": "ReplaceAllUsesOfValuesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllUsesOfValuesWith(const SDValue *From, const SDValue *To, unsigned Num)"
  },
  {
    "label": "AssignTopologicalOrder()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AssignTopologicalOrder()"
  },
  {
    "label": "RepositionNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepositionNode(allnodes_iterator Position, SDNode *N)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (AllNodes .)",
    "insertText": "insert(Position, AllNodes.remove(N))"
  },
  {
    "label": "isCommutativeBinOp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCommutativeBinOp(unsigned Opcode)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Unknown FP format\")"
  },
  {
    "label": "GetDbgValues()",
    "kind": "Method",
    "detail": "Function (ArrayRef<SDDbgValue*>)",
    "insertText": "GetDbgValues(const SDNode* SD)"
  },
  {
    "label": "TransferDbgValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TransferDbgValues(SDValue From, SDValue To)"
  },
  {
    "label": "hasDebugValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasDebugValues()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump()"
  },
  {
    "label": "CreateStackTemporary()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "CreateStackTemporary(EVT VT, unsigned minAlign = 1)"
  },
  {
    "label": "CreateStackTemporary()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "CreateStackTemporary(EVT VT1, EVT VT2)"
  },
  {
    "label": "FoldConstantArithmetic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "FoldConstantArithmetic(unsigned Opcode, SDLoc DL, EVT VT, SDNode *Cst1, SDNode *Cst2)"
  },
  {
    "label": "FoldConstantArithmetic()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "FoldConstantArithmetic(unsigned Opcode, SDLoc DL, EVT VT, const ConstantSDNode *Cst1, const ConstantSDNode *Cst2)"
  },
  {
    "label": "FoldSetCC()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "FoldSetCC(EVT VT, SDValue N1, SDValue N2, ISD::CondCode Cond, SDLoc dl)"
  },
  {
    "label": "SignBitIsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SignBitIsZero(SDValue Op, unsigned Depth = 0)"
  },
  {
    "label": "MaskedValueIsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaskedValueIsZero(SDValue Op, const APInt &Mask, unsigned Depth = 0)"
  },
  {
    "label": "computeKnownBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeKnownBits(SDValue Op, APInt &KnownZero, APInt &KnownOne, unsigned Depth = 0)"
  },
  {
    "label": "ComputeNumSignBits()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "ComputeNumSignBits(SDValue Op, unsigned Depth = 0)"
  },
  {
    "label": "isBaseWithConstantOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBaseWithConstantOffset(SDValue Op)"
  },
  {
    "label": "isKnownNeverNaN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownNeverNaN(SDValue Op)"
  },
  {
    "label": "isKnownNeverZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownNeverZero(SDValue Op)"
  },
  {
    "label": "isEqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEqualTo(SDValue A, SDValue B)"
  },
  {
    "label": "UnrollVectorOp()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "UnrollVectorOp(SDNode *N, unsigned ResNE = 0)"
  },
  {
    "label": "isConsecutiveLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isConsecutiveLoad(LoadSDNode *LD, LoadSDNode *Base, unsigned Bytes, int Dist)"
  },
  {
    "label": "InferPtrAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "InferPtrAlignment(SDValue Ptr)"
  },
  {
    "label": "GetSplitDestVTs()",
    "kind": "Method",
    "detail": "Function (std::pair<EVT,EVT>)",
    "insertText": "GetSplitDestVTs(const EVT &VT)"
  },
  {
    "label": "SplitVector()",
    "kind": "Method",
    "detail": "Function (std::pair<SDValue,SDValue>)",
    "insertText": "SplitVector(const SDValue &N, const SDLoc &DL, const EVT &LoVT, const EVT &HiVT)"
  },
  {
    "label": "SplitVector()",
    "kind": "Method",
    "detail": "Function (std::pair<SDValue,SDValue>)",
    "insertText": "SplitVector(const SDValue &N, const SDLoc &DL)"
  },
  {
    "label": "tie()",
    "kind": "Method",
    "detail": "Function (EVT LoVT,HiVT ;)",
    "insertText": "tie(LoVT, HiVT) = GetSplitDestVTs(N.getValueType())"
  },
  {
    "label": "SplitVectorOperand()",
    "kind": "Method",
    "detail": "Function (} std::pair<SDValue,SDValue>)",
    "insertText": "SplitVectorOperand(const SDNode *N, unsigned OpNo)"
  },
  {
    "label": "ExtractVectorElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtractVectorElements(SDValue Op, SmallVectorImpl<SDValue> &Args, unsigned Start = 0, unsigned Count = 0)"
  },
  {
    "label": "getEVTAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getEVTAlignment(EVT MemoryVT)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InsertNode(SDNode *N)"
  },
  {
    "label": "RemoveNodeFromCSEMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNodeFromCSEMaps(SDNode *N)"
  },
  {
    "label": "AddModifiedNodeToCSEMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModifiedNodeToCSEMaps(SDNode *N)"
  },
  {
    "label": "FindModifiedNodeSlot()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "FindModifiedNodeSlot(SDNode *N, SDValue Op, void *&InsertPos)"
  },
  {
    "label": "FindModifiedNodeSlot()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "FindModifiedNodeSlot(SDNode *N, SDValue Op1, SDValue Op2, void *&InsertPos)"
  },
  {
    "label": "FindModifiedNodeSlot()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "FindModifiedNodeSlot(SDNode *N, ArrayRef<SDValue> Ops, void *&InsertPos)"
  },
  {
    "label": "UpdadeSDLocOnMergedSDNode()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "UpdadeSDLocOnMergedSDNode(SDNode *N, SDLoc loc)"
  },
  {
    "label": "DeleteNodeNotInCSEMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNodeNotInCSEMaps(SDNode *N)"
  },
  {
    "label": "DeallocateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateNode(SDNode *N)"
  },
  {
    "label": "allnodes_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allnodes_clear()"
  },
  {
    "label": "GetBinarySDNode()",
    "kind": "Method",
    "detail": "Function (BinarySDNode*)",
    "insertText": "GetBinarySDNode(unsigned Opcode, SDLoc DL, SDVTList VTs, SDValue N1, SDValue N2, const SDNodeFlags *Flags = nullptr)"
  },
  {
    "label": "FindNodeOrInsertPos()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "FindNodeOrInsertPos(const FoldingSetNodeID &ID, void *&InsertPos)"
  },
  {
    "label": "FindNodeOrInsertPos()",
    "kind": "Method",
    "detail": "Function (SDNode*)",
    "insertText": "FindNodeOrInsertPos(const FoldingSetNodeID &ID, DebugLoc DL, void *&InsertPos)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (FoldingSet<SDVTListNode> VTListMap ; std::vector<CondCodeSDNode*> CondCodeNodes ; std::vector<SDNode*> ValueTypeNodes ; std::map<EVT,SDNode*,EVT::compareRawBits> ExtendedValueTypeNodes ; StringMap<SDNode*> ExternalSymbols ; std::map<std::pair<std::string,unsigned char>,SDNode*> TargetExternalSymbols ; DenseMap<MCSymbol*,SDNode*> MCSymbols ; } ; template<> struct GraphTraits<SelectionDAG*> : public GraphTraits<SDNode*> { typedef SelectionDAG::allnodes_iterator nodes_iterator ; nodes_iterator)",
    "insertText": "nodes_begin(SelectionDAG *G)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(SelectionDAG *G)"
  }
]