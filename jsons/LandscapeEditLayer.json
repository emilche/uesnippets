[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLandscapeLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayer"
  },
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "ULandscapeEditLayerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayerBase"
  },
  {
    "label": "FEditLayerAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditLayerAction"
  },
  {
    "label": "FExecuteParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExecuteParams"
  },
  {
    "label": "FExecuteResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExecuteResult"
  },
  {
    "label": "ULandscapeEditLayerPersistent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayerPersistent"
  },
  {
    "label": "ULandscapeEditLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayer"
  },
  {
    "label": "ULandscapeEditLayerProcedural",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayerProcedural"
  },
  {
    "label": "ULandscapeEditLayerSplines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayerSplines"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" LandscapeEditLayerRenderer . h \" # include \" LandscapeEditTypes . h \" # include \" LandscapeEditLayer . generated . h \" enum class ELandscapeToolTargetType : uint8 ; struct FLandscapeLayer ; class ALandscape ;)",
    "insertText": "UCLASS(MinimalAPI, Abstract)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FEditLayerAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditLayerAction()"
  },
  {
    "label": "FExecuteParams()",
    "kind": "Method",
    "detail": "Function (public : class FExecuteParams {)",
    "insertText": "FExecuteParams()"
  },
  {
    "label": "FExecuteParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FExecuteParams(const FLandscapeLayer* InLayer, ALandscape* InLandscape) : Layer(InLayer) , Landscape(InLandscape)"
  },
  {
    "label": "GetLayer()",
    "kind": "Method",
    "detail": "Function (} const FLandscapeLayer*)",
    "insertText": "GetLayer()"
  },
  {
    "label": "FExecuteResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExecuteResult(bool bInSuccess, const FText& InReason = FText()) : bSuccess(bInSuccess) , Reason(InReason)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} bool bSuccess = true ; FText Reason ; } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FExecuteResult, FExecuteDelegate, const FExecuteParams&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FCanExecuteDelegate, const FExecuteParams& , FText&)"
  },
  {
    "label": "FEditLayerAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditLayerAction(const FText& InLabel, const FExecuteDelegate& InExecuteDelegate, const FCanExecuteDelegate& InCanExecuteDelegate) : Label(InLabel) , ExecuteDelegate(InExecuteDelegate) , CanExecuteDelegate(InCanExecuteDelegate)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (} const FText&)",
    "insertText": "GetLabel()"
  },
  {
    "label": "SupportsTargetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTargetType(ELandscapeToolTargetType InType) const PURE_VIRTUAL(ULandscapeEditLayerBase::SupportsTargetType, return true;)"
  },
  {
    "label": "NeedsPersistentTextures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsPersistentTextures() const PURE_VIRTUAL(ULandscapeEditLayerBase::NeedsPersistentTextures, return false;)"
  },
  {
    "label": "SupportsEditingTools()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEditingTools() const PURE_VIRTUAL(ULandscapeEditLayerBase::SupportsEditingTools, return true;)"
  },
  {
    "label": "SupportsMultiple()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMultiple() const PURE_VIRTUAL(ULandscapeEditLayerBase::SupportsMultiple, return true;)"
  },
  {
    "label": "SupportsBeingCollapsedAway()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBeingCollapsedAway() const PURE_VIRTUAL(ULandscapeEditLayerBase::SupportsBeingCollapsedAway, return true;)"
  },
  {
    "label": "SupportsCollapsingTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsCollapsingTo() const PURE_VIRTUAL(ULandscapeEditLayerBase::SupportsCollapsingTo, return true;)"
  },
  {
    "label": "GetDefaultName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultName() const PURE_VIRTUAL(ULandscapeEditLayerBase::GetDefaultName, return FString();)"
  },
  {
    "label": "GetActions()",
    "kind": "Method",
    "detail": "Function (TArray<FEditLayerAction>)",
    "insertText": "GetActions()"
  },
  {
    "label": "OnLayerCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLayerCreated(FLandscapeLayer& Layer)"
  },
  {
    "label": "OnLayerRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLayerRemoved()"
  },
  {
    "label": "GetEditLayerRendererStates()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR TArray<UE::Landscape::EditLayers::FEditLayerRendererState>)",
    "insertText": "GetEditLayerRendererStates(const ULandscapeInfo* InLandscapeInfo, bool bInSkipBrush)"
  },
  {
    "label": "GetOwningLayer()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITOR const FLandscapeLayer*)",
    "insertText": "GetOwningLayer()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual bool NeedsPersistentTextures()"
  },
  {
    "label": "GetRenderItems()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<UE::Landscape::EditLayers::FEditLayerRenderItem>)",
    "insertText": "GetRenderItems(const ULandscapeInfo* InLandscapeInfo)"
  },
  {
    "label": "RenderLayer()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "RenderLayer(ILandscapeEditLayerRenderer::FRenderParams& InRenderParams)"
  },
  {
    "label": "GetEditLayerRendererDebugName()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL FString)",
    "insertText": "GetEditLayerRendererDebugName()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual bool SupportsTargetType(ELandscapeToolTargetType InType)"
  },
  {
    "label": "SupportsEditingTools()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEditingTools()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual bool SupportsEditingTools()"
  },
  {
    "label": "NeedsPersistentTextures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsPersistentTextures()"
  }
]