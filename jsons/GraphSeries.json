[
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "FGraphSeriesEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphSeriesEvent"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphTrack"
  },
  {
    "label": "FGraphTrackBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphTrackBuilder"
  },
  {
    "label": "FBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBox"
  },
  {
    "label": "GetBaselineY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformMath . h \" # include \" Insights / ViewModels / GraphTrackEvent . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" class FTimingTrackViewport ; struct FGraphSeriesEvent ; class FGraphValueViewport { public : double)",
    "insertText": "GetBaselineY()"
  },
  {
    "label": "GetScaleY()",
    "kind": "Method",
    "detail": "Function (BaselineY = InBaselineY ; } double)",
    "insertText": "GetScaleY()"
  },
  {
    "label": "GetYForValue()",
    "kind": "Method",
    "detail": "Function (ScaleY = InScaleY ; } float)",
    "insertText": "GetYForValue(double Value)"
  },
  {
    "label": "GetRoundedYForValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetRoundedYForValue(double Value)"
  },
  {
    "label": "GetValueForY()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetValueForY(float Y)"
  },
  {
    "label": "FGraphSeries()",
    "kind": "Method",
    "detail": "Function (} private : double BaselineY = 0 . 0 ; double ScaleY = 1 . 0 ; } ; class FGraphSeries { class FGraphTrack ; class FGraphTrackBuilder ; public : struct FBox { float X ; float W ; float Y ; } ; public :)",
    "insertText": "FGraphSeries()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetName()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (Name =)",
    "insertText": "FromString(InName)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetName(const FString& InName)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetName(const FText& InName)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } const FText&)",
    "insertText": "GetDescription()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (Description =)",
    "insertText": "FromString(InDescription)"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDescription(const FString& InDescription)"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDescription(const FText& InDescription)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (Description = InDescription ; } bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bIsVisible = bOnOff ; } bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "ClearDirtyFlag()",
    "kind": "Method",
    "detail": "Function (bIsDirty = true ; } void)",
    "insertText": "ClearDirtyFlag()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (bIsDirty = false ; } const FLinearColor&)",
    "insertText": "GetColor()"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (Color = InColor ; BorderColor = InBorderColor ; FillColor = InColor ; FillColor . A = 0 . 5 f ; } void)",
    "insertText": "SetColor(FLinearColor InColor, FLinearColor InBorderColor, FLinearColor InFillColor)"
  },
  {
    "label": "HasEventDuration()",
    "kind": "Method",
    "detail": "Function (Color = InColor ; BorderColor = InBorderColor ; FillColor = InFillColor ; } bool)",
    "insertText": "HasEventDuration()"
  },
  {
    "label": "IsAutoZoomEnabled()",
    "kind": "Method",
    "detail": "Function (bHasEventDuration = bOnOff ; } bool)",
    "insertText": "IsAutoZoomEnabled()"
  },
  {
    "label": "DisableAutoZoom()",
    "kind": "Method",
    "detail": "Function (bAutoZoom = true ; } void)",
    "insertText": "DisableAutoZoom()"
  },
  {
    "label": "IsAutoZoomDirty()",
    "kind": "Method",
    "detail": "Function (bAutoZoom = false ; } bool)",
    "insertText": "IsAutoZoomDirty()"
  },
  {
    "label": "SetBaselineY()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBaselineY(const double InBaselineY)"
  },
  {
    "label": "SetBaselineY()",
    "kind": "Method",
    "detail": "Function (ValueViewport .)",
    "insertText": "SetBaselineY(InBaselineY)"
  },
  {
    "label": "SetScaleY()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScaleY(const double InScaleY)"
  },
  {
    "label": "SetScaleY()",
    "kind": "Method",
    "detail": "Function (ValueViewport .)",
    "insertText": "SetScaleY(FMath::Max(InScaleY, DBL_EPSILON))"
  },
  {
    "label": "ComputeBaselineAndScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeBaselineAndScale(const double InLowValue, const double InHighValue, const float InTopY, const float InBottomY, double& OutBaselineY, double& OutScaleY)"
  },
  {
    "label": "InvRange()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "InvRange(InHighValue - InLowValue)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (OutScaleY = static_cast<)",
    "insertText": "double(InBottomY - InTopY)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (OutBaselineY = static_cast<)",
    "insertText": "double(InTopY)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (} const FGraphSeriesEvent*)",
    "insertText": "GetEvent(const float PosX, const float PosY, const FTimingTrackViewport& Viewport, bool bCheckLine, bool bCheckBox)"
  },
  {
    "label": "UpdateAutoZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutoZoom(const float InTopY, const float InBottomY, const double InMinEventValue, const double InMaxEventValue, const bool bIsAutoZoomAnimated = true)"
  },
  {
    "label": "UpdateAutoZoomEx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAutoZoomEx(const float InTopY, const float InBottomY, const double InMinEventValue, const double InMaxEventValue, const bool bIsAutoZoomAnimated)"
  },
  {
    "label": "FormatValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatValue(double Value)"
  }
]