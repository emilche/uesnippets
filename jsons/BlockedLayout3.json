[
  {
    "label": "TBlockData3Layout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBlockData3Layout"
  },
  {
    "label": "TBlockedGrid3Layout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlockedGrid3Layout"
  },
  {
    "label": "ToLocalIJK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IntBoxTypes . h \" namespace UE { namespace Geometry { template<int32 BlockSize_> struct TBlockData3Layout { int32 BlockSize = BlockSize_ ; int32 ElemCount = BlockSize_* BlockSize_* BlockSize_ ; FVector3i)",
    "insertText": "ToLocalIJK(int32 LocalLinear)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (const int32 i = LocalLinear % BlockSize ; const int32)",
    "insertText": "j(LocalLinear / BlockSize)"
  },
  {
    "label": "LocalLinear()",
    "kind": "Method",
    "detail": "Function (const int32 k =)",
    "insertText": "LocalLinear(BlockSize * BlockSize)"
  },
  {
    "label": "ToLinear()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ToLinear(const int32& LocalI, const int32& LocalJ, const int32& LocalK)"
  },
  {
    "label": "TBlockedGrid3Layout()",
    "kind": "Method",
    "detail": "Function (} } ; template<int32 BlockSize_> class TBlockedGrid3Layout { public : int32 BlockSize = BlockSize_ ; int32 BlockElemCount = BlockSize* BlockSize* BlockSize ; typedef TBlockData3Layout<BlockSize_> FBlockData3Layout ;)",
    "insertText": "TBlockedGrid3Layout() : BlockDimensions(FVector3i::Zero()) , Dimensions(FVector3i::Zero())"
  },
  {
    "label": "TBlockedGrid3Layout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBlockedGrid3Layout(int32 DimI, int32 DimJ, int32 DimK)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(DimI, DimJ, DimK)"
  },
  {
    "label": "TBlockedGrid3Layout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBlockedGrid3Layout(FVector3i Dims)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(Dims[0], Dims[1], Dims[2])"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Resize(int32 DimI, int32 DimJ, int32 DimK)"
  },
  {
    "label": "BlocksI()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "BlocksI(DimI / BlockSize) + ( (DimI % BlockSize != 0) ? 1 : 0)"
  },
  {
    "label": "BlocksJ()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "BlocksJ(DimJ / BlockSize) + ( (DimJ % BlockSize != 0) ? 1 : 0)"
  },
  {
    "label": "BlocksK()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "BlocksK(DimK / BlockSize) + ( (DimK % BlockSize != 0) ? 1 : 0)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (BlockDimensions =)",
    "insertText": "FVector3i(BlocksI, BlocksJ, BlocksK)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (Dimensions =)",
    "insertText": "FVector3i(DimI, DimJ, DimK)"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (} const FVector3i&)",
    "insertText": "GetDimensions()"
  },
  {
    "label": "BoundsInclusive()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox3i)",
    "insertText": "BoundsInclusive()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Size()"
  },
  {
    "label": "IsValidIJK()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIJK(const FVector3i& IJK)"
  },
  {
    "label": "BlockIJK()",
    "kind": "Method",
    "detail": "Function (const FVector3i)",
    "insertText": "BlockIJK(IJK[0] / BlockSize, IJK[1]/BlockSize, IJK[2]/BlockSize)"
  },
  {
    "label": "GetBlockAndLocalIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBlockAndLocalIndex(const FVector3i& IJK, int32& BlockIndexOut, int32& LocalIndexOut)"
  },
  {
    "label": "IJKtoBlockIndex()",
    "kind": "Method",
    "detail": "Function (BlockIndexOut =)",
    "insertText": "IJKtoBlockIndex(IJK)"
  },
  {
    "label": "ToLinear()",
    "kind": "Method",
    "detail": "Function (const int32 LocalI = IJK . X % BlockSize ; const int32 LocalJ = IJK . Y % BlockSize ; const int32 LocalK = IJK . Z % BlockSize ; LocalIndexOut =)",
    "insertText": "ToLinear(LocalI, LocalJ, LocalK)"
  },
  {
    "label": "GetBlockAndLocalIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBlockAndLocalIndex(int32 I, int32 J, int32 K, int32& BlockIndexOut, int32& LocalIndexOut)"
  },
  {
    "label": "BlockIndexToBlockIJK()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "BlockIndexToBlockIJK(const int32 BlockIndex)"
  },
  {
    "label": "BlockJ()",
    "kind": "Method",
    "detail": "Function (const int32 BlockI = BlockIndex % BlockDimensions . X ; const int32)",
    "insertText": "BlockJ(BlockIndex / BlockDimensions.X)"
  },
  {
    "label": "BlockIndex()",
    "kind": "Method",
    "detail": "Function (const int32 BlockK =)",
    "insertText": "BlockIndex(BlockDimensions.X * BlockDimensions.Y)"
  },
  {
    "label": "BlockIJKToBlockIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "BlockIJKToBlockIndex(const FVector3i& BlockIJK)"
  }
]