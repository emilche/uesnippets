[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPropertyAndParent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAndParent"
  },
  {
    "label": "SEnvironmentLightingViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEnvironmentLightingViewer"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCheckBox"
  },
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / Optional . h \" # include \" Serialization / Archive . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" class SWidget ; struct FGeometry ; struct FPropertyAndParent ; # define ENVLIGHT_MAX_DETAILSVIEWS 5 class SEnvironmentLightingViewer : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SEnvironmentLightingViewer)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "SEnvironmentLightingViewer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SEnvironmentLightingViewer()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnButtonCreateSkyLight()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<class IDetailsView> DetailsViews [ ENVLIGHT_MAX_DETAILSVIEWS ] ; FLinearColor DefaultForegroundColor ; TSharedPtr<class SCheckBox> CheckBoxAtmosphericLightsOnly ; TSharedPtr<SComboBox<TSharedPtr<FString>>> ComboBoxDetailFilter ; TArray<TSharedPtr<FString>> ComboBoxDetailFilterOptions ; int32 SelectedComboBoxDetailFilterOptions ; TSharedPtr<class SButton> ButtonCreateSkyLight ; TSharedPtr<class SButton> ButtonCreateAtmosphericLight0 ; TSharedPtr<class SButton> ButtonCreateSkyAtmosphere ; TSharedPtr<class SButton> ButtonCreateVolumetricCloud ; TSharedPtr<class SButton> ButtonCreateHeightFog ; FReply)",
    "insertText": "OnButtonCreateSkyLight()"
  },
  {
    "label": "OnButtonCreateDirectionalLight()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonCreateDirectionalLight(uint32 Index)"
  },
  {
    "label": "OnButtonCreateSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonCreateSkyAtmosphere()"
  },
  {
    "label": "OnButtonCreateVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonCreateVolumetricCloud()"
  },
  {
    "label": "OnButtonCreateHeightFog()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonCreateHeightFog()"
  },
  {
    "label": "ComboBoxDetailFilterWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ComboBoxDetailFilterWidget(TSharedPtr<FString> InItem)"
  },
  {
    "label": "ComboBoxDetailFilterWidgetSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComboBoxDetailFilterWidgetSelectionChanged(TSharedPtr<FString> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetSelectedComboBoxDetailFilterTextLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedComboBoxDetailFilterTextLabel()"
  },
  {
    "label": "GetIsPropertyVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsPropertyVisible(const FPropertyAndParent& PropertyAndParent)"
  }
]