[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_INTERNALS_POSIX_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_INTERNALS_POSIX_H_ # include<algorithm> # include<cerrno> # include<cstdint> # include<cstring> # include<sys / mman . h> # include \" base / allocator / partition_allocator / oom . h \" # include \" base / allocator / partition_allocator / page_allocator . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / pkey . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / posix / eintr_wrapper . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_APPLE) #include \"base/allocator/partition_allocator/partition_alloc_base/mac/foundation_util.h\" #if BUILDFLAG(IS_IOS) #include \"base/allocator/partition_allocator/partition_alloc_base/ios/ios_util.h\" #elif BUILDFLAG(IS_MAC) #include \"base/allocator/partition_allocator/partition_alloc_base/mac/mac_util.h\" #else #error \"Unknown platform\" #endif #include \"base/allocator/partition_allocator/partition_alloc_base/mac/scoped_cftyperef.h\" #include <Availability.h> #include <Security/Security.h> #include <mach/mach.h> #endif #if BUILDFLAG(IS_ANDROID) #include <sys/prctl.h> #endif #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) #include <sys/resource.h> #endif #ifndef MAP_ANONYMOUS #define MAP_ANONYMOUS MAP_ANON #endif #if BUILDFLAG(IS_MAC) #pragma clang diagnostic push #pragma clang diagnostic ignored \"-Wavailability\" uint32_t SecTaskGetCodeSignStatus(SecTaskRef task) API_AVAILABLE(macos(10.12))"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# pragma clang diagnostic pop # endif namespace partition_alloc::internal { namespace { # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) const char* PageTagToName(PageTag tag)"
  },
  {
    "label": "GetAccessFlags()",
    "kind": "Method",
    "detail": "Function (} # endif } bool kHintIsAdvisory = true ; std::atomic<int32_t> s_allocPageErrorCode { 0 } ; int)",
    "insertText": "GetAccessFlags(PageAccessibilityConfiguration accessibility)"
  },
  {
    "label": "SystemAllocPagesInternal()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "SystemAllocPagesInternal(uintptr_t hint, size_t length, PageAccessibilityConfiguration accessibility, PageTag page_tag, int file_descriptor_for_shared_alloc)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) PA_DCHECK(PageTag::kFirst <= page_tag)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(PageTag::kLast >= page_tag)"
  },
  {
    "label": "VM_MAKE_TAG()",
    "kind": "Method",
    "detail": "Function (int fd = file_descriptor_for_shared_alloc = = - 1 ?)",
    "insertText": "VM_MAKE_TAG(static_cast<int>(page_tag))"
  },
  {
    "label": "GetAccessFlags()",
    "kind": "Method",
    "detail": "Function (# else int fd = file_descriptor_for_shared_alloc ; # endif int access_flag =)",
    "insertText": "GetAccessFlags(accessibility)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (int map_flags = MAP_ANONYMOUS | MAP_PRIVATE ; # if)",
    "insertText": "BUILDFLAG(IS_MAC) static const bool kUseMapJit = UseMapJit()"
  },
  {
    "label": "mmap()",
    "kind": "Method",
    "detail": "Function (map_flags | = MAP_JIT ; } # endif void* ret =)",
    "insertText": "mmap(reinterpret_cast<void*>(hint), length, access_flag, map_flags, fd, 0)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (s_allocPageErrorCode = errno ; ret = nullptr ; } # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) if (ret)"
  },
  {
    "label": "prctl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, ret, length, PageTagToName(page_tag))"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (} # endif return reinterpret_cast<)",
    "insertText": "uintptr_t(ret)"
  },
  {
    "label": "TrySetSystemPagesAccessInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TrySetSystemPagesAccessInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_PKEYS) return 0 == base::PkeyMprotect(reinterpret_cast<void*>(address), length, GetAccessFlags(accessibility), accessibility.pkey)"
  },
  {
    "label": "PA_HANDLE_EINTR()",
    "kind": "Method",
    "detail": "Function (# else return 0 = =)",
    "insertText": "PA_HANDLE_EINTR(mprotect(reinterpret_cast<void*>(address), length, GetAccessFlags(accessibility)))"
  },
  {
    "label": "SetSystemPagesAccessInternal()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "SetSystemPagesAccessInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_PKEYS) int ret = base::PkeyMprotect(reinterpret_cast<void*>(address), length, GetAccessFlags(accessibility), accessibility.pkey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(ret == -1 && errno == ENOMEM && (access_flags & PROT_WRITE)) OOM_CRASH(length)"
  },
  {
    "label": "PA_PCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_PCHECK(0 == ret)"
  },
  {
    "label": "FreePagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreePagesInternal(uintptr_t address, size_t length)"
  },
  {
    "label": "PA_PCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_PCHECK(0 == munmap(reinterpret_cast<void*>(address), length))"
  },
  {
    "label": "TrimMappingInternal()",
    "kind": "Method",
    "detail": "Function (} uintptr_t)",
    "insertText": "TrimMappingInternal(uintptr_t base_address, size_t base_length, size_t trim_length, PageAccessibilityConfiguration accessibility, size_t pre_slack, size_t post_slack)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uintptr_t ret = base_address ;)",
    "insertText": "if(pre_slack)"
  },
  {
    "label": "FreePages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePages(base_address, pre_slack)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ret = base_address + pre_slack ; })",
    "insertText": "if(post_slack)"
  },
  {
    "label": "FreePages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePages(ret + trim_length, post_slack)"
  },
  {
    "label": "DecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} return ret ; } void)",
    "insertText": "DecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "DiscardSystemPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardSystemPages(address, length)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (bool change_permissions = accessibility_disposition = = PageAccessibilityDisposition::kRequireUpdate ; # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) if (!DecommittedMemoryIsAlwaysZeroed() && change_permissions)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (size_t size =)",
    "insertText": "min(length, 2 * SystemPageSize())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* ptr = reinterpret_cast<)",
    "insertText": "void(address)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(mprotect(ptr, size, PROT_WRITE) == 0)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(ptr, 0xcc, size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(change_permissions)"
  },
  {
    "label": "SetSystemPagesAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemPagesAccess(address, length, PageAccessibilityConfiguration::kInaccessible)"
  },
  {
    "label": "DecommitAndZeroSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DecommitAndZeroSystemPagesInternal(uintptr_t address, size_t length)"
  },
  {
    "label": "mmap()",
    "kind": "Method",
    "detail": "Function (void* ret =)",
    "insertText": "mmap(ptr, length, PROT_NONE, MAP_FIXED | MAP_ANONYMOUS | MAP_PRIVATE, -1, 0)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(ptr == ret)"
  },
  {
    "label": "RecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "SetSystemPagesAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemPagesAccess(address, length, accessibility)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(IS_APPLE) madvise(reinterpret_cast<void*>(address), length, MADV_FREE_REUSE)"
  },
  {
    "label": "TryRecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "TryRecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "TrySetSystemPagesAccess()",
    "kind": "Method",
    "detail": "Function (bool ok =)",
    "insertText": "TrySetSystemPagesAccess(address, length, accessibility)"
  },
  {
    "label": "DiscardSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (# endif return true ; } void)",
    "insertText": "DiscardSystemPagesInternal(uintptr_t address, size_t length)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) int ret = madvise(ptr, length, MADV_FREE_REUSABLE)"
  },
  {
    "label": "madvise()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "madvise(ptr, length, MADV_DONTNEED)"
  },
  {
    "label": "PA_PCHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PA_PCHECK(ret == 0)"
  },
  {
    "label": "PA_PCHECK()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "PA_PCHECK(0 == madvise(ptr, length, MADV_DONTNEED))"
  }
]