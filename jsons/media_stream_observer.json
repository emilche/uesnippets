[
  {
    "label": "MediaStreamObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaStreamObserver"
  },
  {
    "label": "MediaStreamObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_MEDIA_STREAM_OBSERVER_H_ # define PC_MEDIA_STREAM_OBSERVER_H_ # include<functional> # include \" api / media_stream_interface . h \" # include \" api / scoped_refptr . h \" namespace webrtc { class MediaStreamObserver : public ObserverInterface { public :)",
    "insertText": "MediaStreamObserver(MediaStreamInterface* stream, std::function<void(AudioTrackInterface*, MediaStreamInterface*)> audio_track_added_callback, std::function<void(AudioTrackInterface*, MediaStreamInterface*)> audio_track_removed_callback, std::function<void(VideoTrackInterface*, MediaStreamInterface*)> video_track_added_callback, std::function<void(VideoTrackInterface*, MediaStreamInterface*)> video_track_removed_callback)"
  },
  {
    "label": "MediaStreamObserver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MediaStreamObserver()"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (const MediaStreamInterface*)",
    "insertText": "stream()"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChanged()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : rtc::scoped_refptr<MediaStreamInterface> stream_ ; AudioTrackVector cached_audio_tracks_ ; VideoTrackVector cached_video_tracks_ ; const std::function<)",
    "insertText": "void(AudioTrackInterface*, MediaStreamInterface*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const std::function<)",
    "insertText": "void(VideoTrackInterface*, MediaStreamInterface*)"
  }
]