[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorShufflingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorShufflingOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "PacketLoader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketLoader"
  },
  {
    "label": "TensorShufflingOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_SHUFFLING_H # define EIGEN_CXX11_TENSOR_TENSOR_SHUFFLING_H namespace Eigen { namespace internal { template<Shuffle,XprType> struct traits<TensorShufflingOp<Shuffle,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<Shuffle,XprType> struct eval<TensorShufflingOp<Shuffle,XprType>,Eigen::Dense> { typedef const TensorShufflingOp<Shuffle,XprType>& type ; } ; template<Shuffle,XprType> struct nested<TensorShufflingOp<Shuffle,XprType>,1,eval<TensorShufflingOp<Shuffle,XprType>>::type> { typedef TensorShufflingOp<Shuffle,XprType> type ; } ; } template<Shuffle,XprType> class TensorShufflingOp : public TensorBase<TensorShufflingOp<Shuffle,XprType>> { public : typedef TensorBase<TensorShufflingOp<Shuffle,XprType>> Base ; typedef Eigen::internal::traits<TensorShufflingOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorShufflingOp>::type Nested ; typedef Eigen::internal::traits<TensorShufflingOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorShufflingOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorShufflingOp(const XprType& expr, const Shuffle& shfl) : m_xpr(expr), m_shuffle(shfl)"
  },
  {
    "label": "shufflePermutation()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Shuffle&)",
    "insertText": "shufflePermutation()"
  },
  {
    "label": "PacketAccess()",
    "kind": "Method",
    "detail": "Function (const Shuffle m_shuffle ; } ; template<Shuffle,ArgType,Device> struct TensorEvaluator<const TensorShufflingOp<Shuffle,ArgType>,Device> { typedef TensorEvaluator<const TensorShufflingOp<Shuffle,ArgType>,Device> Self ; typedef TensorShufflingOp<Shuffle,ArgType> XprType ; typedef XprType::Index Index ; const int NumDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; typedef DSizes<Index,NumDims> Dimensions ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,)",
    "insertText": "PacketAccess(PacketType<CoeffReturnType, Device>::size > 1)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_const<Scalar>::type ScalarNoConst ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef internal::TensorMaterializedBlock<ScalarNoConst,NumDims,Layout,Index> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_device(device), m_impl(op.expression(), device)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const TensorEvaluator<ArgType,Device>::Dimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_is_identity = true ;)",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (m_shuffle [ i ] = static_cast<)",
    "insertText": "int(shuffle[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = input_dims [ shuffle [ i ] ] ; m_inverseShuffle [ shuffle [ i ] ] = i ;)",
    "insertText": "if(m_is_identity && shuffle[i] != i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_is_identity = false ; } })",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_unshuffledInputStrides [ 0 ] = 1 ; m_outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_unshuffledInputStrides [ i ] = m_unshuffledInputStrides [ i - 1 ]* input_dims [ i - 1 ] ; m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* m_dimensions [ i - 1 ] ; m_fastOutputStrides [ i ] = internal::TensorIntDivisor<)",
    "insertText": "Index(m_outputStrides[i] > 0 ? m_outputStrides[i] : Index(1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { m_unshuffledInputStrides [ NumDims - 1 ] = 1 ; m_outputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); })"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { return m_impl .)",
    "insertText": "coeff(srcCoeff(index))"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} } template<int LoadMode,Self,bool ImplPacketAccess> struct PacketLoader { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "Run(const Self& self, Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] = self .)",
    "insertText": "coeff(index + i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index + PacketSize - 1 < dimensions().TotalSize())"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int inner_dim = Layout = = static_cast<)",
    "insertText": "int(ColMajor)"
  },
  {
    "label": "firstLevelCacheSize()",
    "kind": "Method",
    "detail": "Function (const size_t target_size = m_device .)",
    "insertText": "firstLevelCacheSize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool inner_dim_shuffled = m_shuffle [ inner_dim ] ! = inner_dim ; using BlockRequirements = internal::TensorBlockResourceRequirements ;)",
    "insertText": "if(inner_dim_shuffled)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (} else { return BlockRequirements::skewed<)",
    "insertText": "Scalar(target_size)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool root_of_expr_ast = false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(m_impl.data() != NULL)"
  },
  {
    "label": "prepareStorage()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockIO<ScalarNoConst,Index,NumDims,Layout> TensorBlockIO ; typedef TensorBlockIO::Dst TensorBlockIODst ; typedef TensorBlockIO::Src TensorBlockIOSrc ; const TensorBlock::Storage block_storage =)",
    "insertText": "prepareStorage(desc, scratch, root_of_expr_ast)"
  },
  {
    "label": "input_strides()",
    "kind": "Method",
    "detail": "Function (TensorBlockIO::Dimensions)",
    "insertText": "input_strides(m_unshuffledInputStrides)"
  },
  {
    "label": "src()",
    "kind": "Method",
    "detail": "Function (TensorBlockIOSrc)",
    "insertText": "src(input_strides, m_impl.data(), srcCoeff(desc.offset()))"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (TensorBlockIODst)",
    "insertText": "dst(block_storage.dimensions(), block_storage.strides(), block_storage.data())"
  },
  {
    "label": "dst_to_src_dim_map()",
    "kind": "Method",
    "detail": "Function (TensorBlockIO::DimensionsMap)",
    "insertText": "dst_to_src_dim_map(m_shuffle)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(dst, src, dst_to_src_dim_map)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const double compute_cost = m_is_identity ? TensorOpCost::AddCost<)",
    "insertText": "Index() : NumDims * (2 * TensorOpCost::AddCost<Index>() + 2 * TensorOpCost::MulCost<Index>() + TensorOpCost::DivCost<Index>())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Storage::Type)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "GetBlockOutputIndex()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "GetBlockOutputIndex(Index input_index, const DSizes<Index, NumDims>& input_block_strides, const DSizes<Index, NumDims>& output_block_strides, const DSizes<internal::TensorIntDivisor<Index>, NumDims>& fast_input_block_strides)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index idx = input_index / fast_input_block_strides [ i ] ; output_index + = idx* output_block_strides [ m_inverseShuffle [ i ] ] ; input_index - = idx* input_block_strides [ i ] ; } return output_index + input_index* output_block_strides [ m_inverseShuffle [ 0 ] ] ; } else {)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "srcCoeff()",
    "kind": "Method",
    "detail": "Function (const Index idx = input_index / fast_input_block_strides [ i ] ; output_index + = idx* output_block_strides [ m_inverseShuffle [ i ] ] ; input_index - = idx* input_block_strides [ i ] ; } return output_index + input_index* output_block_strides [ m_inverseShuffle [ NumDims - 1 ] ] ; } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "srcCoeff(Index index)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_const<Scalar>::type ScalarNoConst ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (internal::pstore<CoeffReturnType,)",
    "insertText": "PacketReturnType(values, x)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "coeffRef(index+i)"
  },
  {
    "label": "writeBlock()",
    "kind": "Method",
    "detail": "Function (} } template<TensorBlock> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writeBlock(const TensorBlockDesc& desc, const TensorBlock& block)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(this->m_impl.data() != NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* mem = NULL ;)",
    "insertText": "if(block_buffer == NULL)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (mem = this -> m_device .)",
    "insertText": "allocate(desc.size() * sizeof(Scalar))"
  },
  {
    "label": "ScalarNoConst()",
    "kind": "Method",
    "detail": "Function (ScalarNoConst* buf = static_cast<)",
    "insertText": "ScalarNoConst(mem)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockAssignment<ScalarNoConst,NumDims,TensorBlock::XprType,Index> TensorBlockAssignment ;)",
    "insertText": "Run(TensorBlockAssignment::target( desc.dimensions(), internal::strides<Layout>(desc.dimensions()), buf), block.expr())"
  },
  {
    "label": "src()",
    "kind": "Method",
    "detail": "Function (block_buffer = buf ; } TensorBlockIOSrc)",
    "insertText": "src(internal::strides<Layout>(desc.dimensions()), block_buffer)"
  },
  {
    "label": "output_strides()",
    "kind": "Method",
    "detail": "Function (TensorBlockIO::Dimensions)",
    "insertText": "output_strides(this->m_unshuffledInputStrides)"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (output_dimensions [ this -> m_shuffle [ i ] ] = desc .)",
    "insertText": "dimension(i)"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (} TensorBlockIODst)",
    "insertText": "dst(output_dimensions, output_strides, this->m_impl.data(), this->srcCoeff(desc.offset()))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (dst_to_src_dim_map [ i ] = static_cast<)",
    "insertText": "int(this->m_inverseShuffle[i])"
  }
]