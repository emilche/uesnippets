[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "DimensionId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DimensionId"
  },
  {
    "label": "TensorChippingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorChippingOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "DimensionId()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CHIPPING_H # define EIGEN_CXX11_TENSOR_TENSOR_CHIPPING_H namespace Eigen { namespace internal { template<DenseIndex DimId,XprType> struct traits<TensorChippingOp<DimId,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions - 1 ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<DenseIndex DimId,XprType> struct eval<TensorChippingOp<DimId,XprType>,Eigen::Dense> { typedef const TensorChippingOp<DimId,XprType> EIGEN_DEVICE_REF type ; } ; template<DenseIndex DimId,XprType> struct nested<TensorChippingOp<DimId,XprType>,1,eval<TensorChippingOp<DimId,XprType>>::type> { typedef TensorChippingOp<DimId,XprType> type ; } ; template<DenseIndex DimId> struct DimensionId { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "DimensionId(DenseIndex dim)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(dim)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dim == DimId)"
  },
  {
    "label": "actualDim()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE DenseIndex)",
    "insertText": "actualDim()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dim >= 0)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Index)",
    "insertText": "offset()"
  },
  {
    "label": "expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<XprType::Nested>::type&)",
    "insertText": "expression()"
  },
  {
    "label": "IsOuterChipping()",
    "kind": "Method",
    "detail": "Function (const Index m_offset ; const internal::DimensionId<DimId> m_dim ; } ; template<DenseIndex DimId,ArgType,Device> struct TensorEvaluator<const TensorChippingOp<DimId,ArgType>,Device> { typedef TensorChippingOp<DimId,ArgType> XprType ; const int NumInputDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; const int NumDims = NumInputDims - 1 ; typedef XprType::Index Index ; typedef DSizes<Index,NumDims> Dimensions ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,Layout = TensorEvaluator<ArgType,Device>::Layout,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = TensorEvaluator<ArgType,Device>::BlockAccess,)",
    "insertText": "IsOuterChipping(static_cast<int>(Layout) == ColMajor && DimId == NumInputDims - 1) || (static_cast<int>(Layout) == RowMajor && DimId == 0), IsInnerChipping = (static_cast<int>(Layout) == ColMajor && DimId == 0) || (static_cast<int>(Layout) == RowMajor && DimId == NumInputDims - 1)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_const<Scalar>::type ScalarNoConst ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef internal::TensorBlockDescriptor<NumInputDims,Index> ArgTensorBlockDesc ; typedef TensorEvaluator<const ArgType,Device>::TensorBlock ArgTensorBlock ; typedef internal::TensorMaterializedBlock<ScalarNoConst,NumDims,Layout,Index> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device), m_dim(op.dim()), m_device(device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumInputDims >= 1), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(NumInputDims > m_dim.actualDim())"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const TensorEvaluator<ArgType,Device>::Dimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(op.offset() < input_dims[m_dim.actualDim()])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int j = 0 ;)",
    "insertText": "for(int i = 0; i < NumInputDims; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ j ] = input_dims [ i ] ; + + j ; } } m_stride = 1 ; m_inputStride = 1 ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_stride* = input_dims [ i ] ; m_inputStride* = input_dims [ i ] ; } } else {)",
    "insertText": "for(int i = NumInputDims-1; i > m_dim.actualDim(); --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_stride == 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index inputIndex = index* m_inputStride + m_inputOffset ; EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] = m_impl .)",
    "insertText": "coeff(inputIndex)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (inputIndex + = m_inputStride ; } PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_stride > index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { const Index idx = index / m_stride ; const Index rem = index - idx* m_stride ;)",
    "insertText": "if(rem + PacketSize <= m_stride)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (Index inputIndex = idx* m_inputStride + m_inputOffset + rem ; return m_impl . template packet<)",
    "insertText": "LoadMode(inputIndex)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (cost + = TensorOpCost::MulCost<)",
    "insertText": "Index() + TensorOpCost::AddCost<Index>()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((static_cast<int>(Layout) == static_cast<int>(ColMajor) && m_dim.actualDim() == NumInputDims - 1) || (static_cast<int>(Layout) == static_cast<int>(RowMajor) && m_dim.actualDim() == 0))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (cost + = TensorOpCost::AddCost<)",
    "insertText": "Index()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} else { cost + = 3* TensorOpCost::MulCost<)",
    "insertText": "Index() + TensorOpCost::DivCost<Index>() + 3 * TensorOpCost::AddCost<Index>()"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} return m_impl .)",
    "insertText": "costPerCoeff(vectorized) + TensorOpCost(0, 0, cost, vectorized, PacketSize)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "lastLevelCacheSize()",
    "kind": "Method",
    "detail": "Function (const size_t target_size = m_device .)",
    "insertText": "lastLevelCacheSize()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool root_of_expr_ast = false)"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (input_block_dims [ i ] = i<chip_dim ? desc .)",
    "insertText": "dimension(i) : i > chip_dim ? desc.dimension(i - 1)"
  },
  {
    "label": "arg_desc()",
    "kind": "Method",
    "detail": "Function (} ArgTensorBlockDesc)",
    "insertText": "arg_desc(srcCoeff(desc.offset()), input_block_dims)"
  },
  {
    "label": "destination()",
    "kind": "Method",
    "detail": "Function (arg_destination_strides [ i ] = i<chip_dim ? desc .)",
    "insertText": "destination().strides()[i] : i > chip_dim ? desc.destination().strides()"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (} arg_desc . template AddDestinationBuffer<)",
    "insertText": "Layout(desc.destination().template data<ScalarNoConst>(), arg_destination_strides)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} ArgTensorBlock arg_block = m_impl .)",
    "insertText": "block(arg_desc, scratch, root_of_expr_ast)"
  },
  {
    "label": "prepareStorage()",
    "kind": "Method",
    "detail": "Function (} else { const TensorBlock::Storage block_storage =)",
    "insertText": "prepareStorage(desc, scratch)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockAssignment<ScalarNoConst,NumInputDims,ArgTensorBlock::XprType,Index> TensorBlockAssignment ;)",
    "insertText": "Run(TensorBlockAssignment::target( arg_desc.dimensions(), internal::strides<Layout>(arg_desc.dimensions()), block_storage.data()), arg_block.expr())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Storage::Type)",
    "insertText": "data()"
  },
  {
    "label": "constCast()",
    "kind": "Method",
    "detail": "Function (Storage::Type result =)",
    "insertText": "constCast(m_impl.data())"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "srcCoeff()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "srcCoeff(Index index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index inputIndex ;)",
    "insertText": "if(isInnerChipping())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (inputIndex = index* m_inputStride + m_inputOffset ; } else)",
    "insertText": "if(isOuterChipping())"
  },
  {
    "label": "isInnerChipping()",
    "kind": "Method",
    "detail": "Function (inputIndex = index + m_inputOffset ; } else { const Index idx = index / m_stride ; inputIndex = idx* m_inputStride + m_inputOffset ; index - = idx* m_stride ; inputIndex + = index ; } return inputIndex ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "isInnerChipping()"
  },
  {
    "label": "isOuterChipping()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "isOuterChipping()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} Dimensions m_dimensions ; Index m_stride ; Index m_inputOffset ; Index m_inputStride ; TensorEvaluator<ArgType,Device> m_impl ; const internal::DimensionId<DimId> m_dim ; const Device EIGEN_DEVICE_REF m_device ; } ; template<DenseIndex DimId,ArgType,Device> struct TensorEvaluator<TensorChippingOp<DimId,ArgType>,Device> : public TensorEvaluator<const TensorChippingOp<DimId,ArgType>,Device> { typedef TensorEvaluator<const TensorChippingOp<DimId,ArgType>,Device> Base ; typedef TensorChippingOp<DimId,ArgType> XprType ; const int NumInputDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; const int NumDims = NumInputDims - 1 ; typedef XprType::Index Index ; typedef DSizes<Index,NumDims> Dimensions ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; enum { IsAligned = false,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = TensorEvaluator<ArgType,Device>::RawAccess,Layout = TensorEvaluator<ArgType,Device>::Layout,RawAccess = false } ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) if (this->isInnerChipping())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(this->m_stride == 1)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; internal::pstore<CoeffReturnType,)",
    "insertText": "PacketReturnType(values, x)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this -> m_impl .)",
    "insertText": "coeffRef(inputIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (inputIndex + = this -> m_inputStride ; } } else)",
    "insertText": "if(this->isOuterChipping())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(this->m_stride > index)"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (this -> m_impl . template writePacket<)",
    "insertText": "StoreMode(index + this->m_inputOffset, x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { const Index idx = index / this -> m_stride ; const Index rem = index - idx* this -> m_stride ;)",
    "insertText": "if(rem + PacketSize <= this->m_stride)"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (const Index inputIndex = idx* this -> m_inputStride + this -> m_inputOffset + rem ; this -> m_impl . template writePacket<)",
    "insertText": "StoreMode(inputIndex, x)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "coeffRef(index)"
  },
  {
    "label": "writeBlock()",
    "kind": "Method",
    "detail": "Function (+ + index ; } } } } template<TensorBlock> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writeBlock(const TensorBlockDesc& desc, const TensorBlock& block)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->m_impl.data() != NULL)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} typedef TensorReshapingOp<const DSizes<Index,NumInputDims>,const TensorBlock::XprType> TensorBlockExpr ; typedef internal::TensorBlockAssignment<Scalar,NumInputDims,TensorBlockExpr,Index> TensorBlockAssign ;)",
    "insertText": "Run(TensorBlockAssign::target( input_block_dims, internal::strides<Layout>(this->m_impl.dimensions()), this->m_impl.data(), this->srcCoeff(desc.offset())), block.expr().reshape(input_block_dims))"
  }
]