[
  {
    "label": "FTransformSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransformSource"
  },
  {
    "label": "FTransformSource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" namespace GeometryCollection::Facades { class FTransformSource { public : const FName TransformSourceGroupName ; const FName SourceNameAttributeName ; const FName SourceGuidAttributeName ; const FName SourceRootsAttributeName ;)",
    "insertText": "FTransformSource(FManagedArrayCollection& InSelf)"
  },
  {
    "label": "FTransformSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformSource(const FManagedArrayCollection& InSelf)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AddTransformSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransformSource(const FString& Name, const FString& Guid, const TSet<int32>& Roots)"
  },
  {
    "label": "GetTransformSource()",
    "kind": "Method",
    "detail": "Function (TSet<int32>)",
    "insertText": "GetTransformSource(const FString& Name, const FString& Guid)"
  }
]