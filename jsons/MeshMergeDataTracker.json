[
  {
    "label": "FSectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionInfo"
  },
  {
    "label": "MESHMERGEUTILITIES_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MESHMERGEUTILITIES_API"
  },
  {
    "label": "FMeshLODKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StaticMeshResources . h \" # include \" Materials / MaterialInstance . h \" # include \" MaterialUtilities . h \" # include \" StaticMeshAttributes . h \" typedef TPair<uint32,uint32> MeshLODPair ; typedef TPair<uint32,uint32> SectionRemapPair ; typedef TPair<uint32,uint32> MaterialRemapPair ; struct FSectionInfo ; struct FMeshLODKey { public :)",
    "insertText": "FMeshLODKey(int32 MeshIndex, int32 LODIndex, UStaticMesh* InMesh = nullptr)"
  },
  {
    "label": "CombinedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombinedKey((LODIndex & 0xffff) << 16) | (MeshIndex & 0xffff)"
  },
  {
    "label": "FMeshLODKey()",
    "kind": "Method",
    "detail": "Function (Mesh = InMesh ; VertexColorHash = 0 ; })",
    "insertText": "FMeshLODKey(uint32 InCombinedKey)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (CombinedKey = InCombinedKey ; Mesh = nullptr ; VertexColorHash = 0 ; } UStaticMesh*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "GetLODIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLODIndex()"
  },
  {
    "label": "GetVertexColorHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetVertexColorHash()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VertexColorHash = InVertexColorHash ; } bool)",
    "insertText": "operator(const FMeshLODKey& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMaterialKey& Other)"
  },
  {
    "label": "UMaterialInstance()",
    "kind": "Method",
    "detail": "Function (const UMaterialInstance* MaterialInstance0 = Cast<)",
    "insertText": "UMaterialInstance(Material)"
  },
  {
    "label": "UMaterialInstance()",
    "kind": "Method",
    "detail": "Function (const UMaterialInstance* MaterialInstance1 = Cast<)",
    "insertText": "UMaterialInstance(Other.Material)"
  },
  {
    "label": "FMeshMergeDataTracker()",
    "kind": "Method",
    "detail": "Function (} else { return Material = = Other . Material ; } } const UMaterialInterface* Material ; } ; typedef TMap<FMeshLODKey,FMeshDescription>::TConstIterator TConstRawMeshIterator ; typedef TMap<FMeshLODKey,FMeshDescription>::TIterator TRawMeshIterator ; typedef TArray<int32>::TConstIterator TConstLODIndexIterator ; class FMeshMergeDataTracker { public :)",
    "insertText": "FMeshMergeDataTracker()"
  },
  {
    "label": "ProcessRawMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRawMeshes()"
  },
  {
    "label": "AddSectionRemapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSectionRemapping(int32 MeshIndex, int32 LODIndex, int32 OriginalIndex, int32 UniqueIndex)"
  },
  {
    "label": "GetMeshLODsMappedToUniqueSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshLODsMappedToUniqueSection(int32 UniqueIndex, TArray<FMeshLODKey>& InOutMeshLODs)"
  },
  {
    "label": "GetMappingsForMeshLOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMappingsForMeshLOD(FMeshLODKey Key, TArray<SectionRemapPair>& InOutMappings)"
  },
  {
    "label": "AddAndRetrieveRawMesh()",
    "kind": "Method",
    "detail": "Function (FMeshDescription&)",
    "insertText": "AddAndRetrieveRawMesh(int32 MeshIndex, int32 LODIndex, UStaticMesh* InMesh)"
  },
  {
    "label": "RemoveRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRawMesh(int32 MeshIndex, int32 LODIndex)"
  },
  {
    "label": "GetRawMeshPtr()",
    "kind": "Method",
    "detail": "Function (FMeshDescription*)",
    "insertText": "GetRawMeshPtr(int32 MeshIndex, int32 LODIndex)"
  },
  {
    "label": "GetRawMeshPtr()",
    "kind": "Method",
    "detail": "Function (FMeshDescription*)",
    "insertText": "GetRawMeshPtr(FMeshLODKey Key)"
  },
  {
    "label": "FindRawMeshAndLODIndex()",
    "kind": "Method",
    "detail": "Function (FMeshDescription*)",
    "insertText": "FindRawMeshAndLODIndex(int32 MeshIndex, int32& OutLODIndex)"
  },
  {
    "label": "TryFindRawMeshForLOD()",
    "kind": "Method",
    "detail": "Function (FMeshDescription*)",
    "insertText": "TryFindRawMeshForLOD(int32 MeshIndex, int32& InOutDesiredLODIndex)"
  },
  {
    "label": "GetConstRawMeshIterator()",
    "kind": "Method",
    "detail": "Function (TConstRawMeshIterator)",
    "insertText": "GetConstRawMeshIterator()"
  },
  {
    "label": "GetRawMeshIterator()",
    "kind": "Method",
    "detail": "Function (TRawMeshIterator)",
    "insertText": "GetRawMeshIterator()"
  },
  {
    "label": "AddLightmapChannelRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLightmapChannelRecord(int32 MeshIndex, int32 LODIndex, int32 LightmapChannelIndex)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSection(const FSectionInfo& SectionInfo)"
  },
  {
    "label": "NumberOfUniqueSections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfUniqueSections()"
  },
  {
    "label": "GetMaterialForSectionIndex()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialForSectionIndex(int32 SectionIndex)"
  },
  {
    "label": "GetSection()",
    "kind": "Method",
    "detail": "Function (const FSectionInfo&)",
    "insertText": "GetSection(int32 SectionIndex)"
  },
  {
    "label": "AddBakedMaterialSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBakedMaterialSection(const FSectionInfo& SectionInfo)"
  },
  {
    "label": "AddMaterialSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaterialSlotName(UMaterialInterface *MaterialInterface, FName MaterialSlotName)"
  },
  {
    "label": "GetMaterialSlotName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMaterialSlotName(UMaterialInterface *MaterialInterface)"
  },
  {
    "label": "AddLODIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLODIndex(int32 LODIndex)"
  },
  {
    "label": "GetNumLODsForMergedMesh()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumLODsForMergedMesh()"
  },
  {
    "label": "GetLODIndexIterator()",
    "kind": "Method",
    "detail": "Function (TConstLODIndexIterator)",
    "insertText": "GetLODIndexIterator()"
  },
  {
    "label": "AddLightMapPixels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLightMapPixels(int32 Pixels)"
  },
  {
    "label": "GetLightMapDimension()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLightMapDimension()"
  },
  {
    "label": "DoesLODContainVertexColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesLODContainVertexColors(int32 LODIndex)"
  },
  {
    "label": "DoesAnyLODContainVertexColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesAnyLODContainVertexColors()"
  },
  {
    "label": "DoesUVChannelContainData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesUVChannelContainData(int32 UVChannel, int32 LODIndex)"
  },
  {
    "label": "DoesUVChannelContainData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesUVChannelContainData(int32 UVChannel)"
  },
  {
    "label": "DoesMeshLODRequireUniqueUVs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMeshLODRequireUniqueUVs(FMeshLODKey Key)"
  },
  {
    "label": "GetAvailableLightMapUVChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAvailableLightMapUVChannel()"
  },
  {
    "label": "AddComponentToWedgeMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponentToWedgeMapping(int32 MeshIndex, int32 LODIndex, uint32 WedgeIndex)"
  },
  {
    "label": "GetComponentToWedgeMappng()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetComponentToWedgeMappng(int32 MeshIndex, int32 LODIndex)"
  }
]