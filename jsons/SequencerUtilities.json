[
  {
    "label": "ACineCameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACineCameraActor"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UMovieSceneFolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneFolder"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneTimeWarpGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTimeWarpGetter"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FMovieSceneBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBinding"
  },
  {
    "label": "FMovieScenePossessable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePossessable"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "FMovieSceneSpawnable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSpawnable"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "ULevelSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelSequence"
  },
  {
    "label": "UMovieSceneCustomBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCustomBinding"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITrackExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITrackExtension"
  },
  {
    "label": "FCreateBindingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateBindingParams"
  },
  {
    "label": "FMovieScenePasteFoldersParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePasteFoldersParams"
  },
  {
    "label": "FMovieScenePasteSectionsParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePasteSectionsParams"
  },
  {
    "label": "FMovieScenePasteTracksParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePasteTracksParams"
  },
  {
    "label": "FMovieScenePasteBindingsParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePasteBindingsParams"
  },
  {
    "label": "FSequencerChangeBindingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerChangeBindingInfo"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "FOpenSequencerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenSequencerData"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "OnSequencerCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequencerCreated(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "OnSequencerClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequencerClosed(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "MakeAddButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddButton(FText HoverText, FOnGetContent MenuContent, const TAttribute<bool>& HoverState, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "MakeAddButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddButton(FText HoverText, FOnClicked OnClicked, const TAttribute<bool>& HoverState, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "MakeTimeWarpMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeTimeWarpMenuEntry(FMenuBuilder& MenuBuilder, UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::ITrackExtension> TrackModel)"
  },
  {
    "label": "PopulateTimeWarpChannelSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTimeWarpChannelSubMenu(FMenuBuilder& MenuBuilder, UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::ITrackExtension> TrackModel)"
  },
  {
    "label": "CreateNewSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewSection(UMovieSceneTrack* InTrack, TWeakPtr<ISequencer> InSequencer, int32 InRowIndex, EMovieSceneBlendType InBlendType)"
  },
  {
    "label": "PopulateMenu_CreateNewSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateMenu_CreateNewSection(FMenuBuilder& MenuBuilder, int32 RowIndex, UMovieSceneTrack* Track, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "PopulateMenu_BlenderSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateMenu_BlenderSubMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "PopulateMenu_SetBlendType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateMenu_SetBlendType(FMenuBuilder& MenuBuilder, UMovieSceneSection* Section, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "PopulateMenu_SetBlendType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateMenu_SetBlendType(FMenuBuilder& MenuBuilder, const TArray<TWeakObjectPtr<UMovieSceneSection>>& InSections, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "GetAssociatedLevelSequenceMapPackages()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAssociatedLevelSequenceMapPackages(const ULevelSequence* InSequence)"
  },
  {
    "label": "GetAssociatedLevelSequenceMapPackages()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAssociatedLevelSequenceMapPackages(FName LevelSequencePackageName)"
  },
  {
    "label": "GetUniqueName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUniqueName(FName CandidateName, const TArray<FName>& ExistingNames)"
  },
  {
    "label": "AddActors()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "AddActors(TSharedRef<ISequencer> Sequencer, const TArray<TWeakObjectPtr<AActor> >& InActors)"
  },
  {
    "label": "CreateCamera()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "CreateCamera(TSharedRef<ISequencer> Sequencer, const bool bSpawnable, ACineCameraActor*& OutActor)"
  },
  {
    "label": "CreateCameraWithRig()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "CreateCameraWithRig(TSharedRef<ISequencer> Sequencer, AActor* Actor, const bool bSpawnable, ACineCameraActor*& OutActor)"
  },
  {
    "label": "MakeNewSpawnable()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "MakeNewSpawnable(TSharedRef<ISequencer> Sequencer, UObject& SourceObject, UActorFactory* ActorFactory = nullptr, bool bSetupDefaults = true, FName SpawnableName = NAME_None)"
  },
  {
    "label": "CanConvertToPossessable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConvertToPossessable(TSharedRef<ISequencer> Sequencer, FGuid BindingGuid, int32 BindingIndex = 0)"
  },
  {
    "label": "CanConvertToCustomBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConvertToCustomBinding(TSharedRef<ISequencer> Sequencer, FGuid BindingGuid, TSubclassOf<UMovieSceneCustomBinding> CustomBindingType, int32 BindingIndex = 0)"
  },
  {
    "label": "CopyFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFolders(const TArray<UMovieSceneFolder*>& Folders, FString& ExportedText)"
  },
  {
    "label": "PasteFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteFolders(const FString& TextToImport, FMovieScenePasteFoldersParams PasteFoldersParams, TArray<UMovieSceneFolder*>& OutFolders, TArray<FNotificationInfo>& OutErrors)"
  },
  {
    "label": "CanPasteFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteFolders(const FString& TextToImport)"
  },
  {
    "label": "CopyTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTracks(const TArray<UMovieSceneTrack*>& Tracks, const TArray<UMovieSceneFolder*>& InFolders, FString& ExportedText)"
  },
  {
    "label": "PasteTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteTracks(const FString& TextToImport, FMovieScenePasteTracksParams PasteTracksParams, TArray<UMovieSceneTrack*>& OutTracks, TArray<FNotificationInfo>& OutErrors)"
  },
  {
    "label": "CanPasteTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteTracks(const FString& TextToImport)"
  },
  {
    "label": "CopySections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySections(const TArray<UMovieSceneSection*>& Sections, FString& ExportedText)"
  },
  {
    "label": "PasteSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteSections(const FString& TextToImport, FMovieScenePasteSectionsParams PasteSectionsParams, TArray<UMovieSceneSection*>& OutSections, TArray<FNotificationInfo>& OutErrors)"
  },
  {
    "label": "CanPasteSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteSections(const FString& TextToImport)"
  },
  {
    "label": "CopyBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBindings(TSharedRef<ISequencer> Sequencer, const TArray<FMovieSceneBindingProxy>& Bindings, const TArray<UMovieSceneFolder*>& InFolders, FString& ExportedText)"
  },
  {
    "label": "CopyBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBindings(TSharedRef<ISequencer> Sequencer, const TArray<FMovieSceneBindingProxy>& Bindings, const TArray<UMovieSceneFolder*>& InFolders, FOutputDevice& Ar)"
  },
  {
    "label": "PasteBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteBindings(const FString& TextToImport, TSharedRef<ISequencer> Sequencer, FMovieScenePasteBindingsParams PasteBindingsParams, TArray<FMovieSceneBindingProxy>& OutBindings, TArray<FNotificationInfo>& OutErrors)"
  },
  {
    "label": "CanPasteBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteBindings(TSharedRef<ISequencer> Sequencer, const FString& TextToImport)"
  },
  {
    "label": "GetPasteBindingsObjectNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPasteBindingsObjectNames(TSharedRef<ISequencer> Sequencer, const FString& TextToImport)"
  },
  {
    "label": "UpdateBindingIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBindingIDs(TSharedRef<ISequencer> Sequencer, FGuid OldGuid, FGuid NewGuid)"
  },
  {
    "label": "AssignActor()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "AssignActor(TSharedRef<ISequencer> Sequencer, AActor* Actor, FGuid InObjectBinding)"
  },
  {
    "label": "AddActorsToBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorsToBinding(TSharedRef<ISequencer> Sequencer, const TArray<AActor*>& Actors, const FMovieSceneBindingProxy& ObjectBinding)"
  },
  {
    "label": "AddObjectsToBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjectsToBinding(TSharedRef<ISequencer> Sequencer, const TArray<UObject*>& Objects, const FMovieSceneBindingProxy& ObjectBinding, UObject* ResolutionContext)"
  },
  {
    "label": "ReplaceBindingWithActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceBindingWithActors(TSharedRef<ISequencer> Sequencer, const TArray<AActor*>& Actors, const FMovieSceneBindingProxy& ObjectBinding)"
  },
  {
    "label": "RemoveActorsFromBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorsFromBinding(TSharedRef<ISequencer> Sequencer, const TArray<AActor*>& Actors, const FMovieSceneBindingProxy& ObjectBinding)"
  },
  {
    "label": "ShowReadOnlyError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowReadOnlyError()"
  },
  {
    "label": "ShowSpawnableNotAllowedError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSpawnableNotAllowedError()"
  },
  {
    "label": "SaveCurrentMovieSceneAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentMovieSceneAs(TSharedRef<ISequencer> Sequencer)"
  },
  {
    "label": "SynchronizeExternalSelectionWithSequencerSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeExternalSelectionWithSequencerSelection(TSharedRef<ISequencer> Sequencer)"
  },
  {
    "label": "GetTimeBounds()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetTimeBounds(TSharedRef<ISequencer> Sequencer)"
  }
]