[
  {
    "label": "FRollingHashConst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRollingHashConst"
  },
  {
    "label": "FRollingHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRollingHash"
  },
  {
    "label": "ROTLEFT_64B()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Core / RingBuffer . h \" # define)",
    "insertText": "ROTLEFT_64B(Value, Shifts ) Value = ( ( ( Value ) << ( ( Shifts ) % 64 ) ) | ( ( Value ) >> ( ( 64 - ( ( Shifts ) % 64 ) ) % 64 ) ))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (uint64 HashTable [ 2 5 6 ] ; void)",
    "insertText": "Init()"
  },
  {
    "label": "FRollingHash()",
    "kind": "Method",
    "detail": "Function (} ; class FRollingHash { typedef TRingBuffer<uint8> HashRingBuffer ; public :)",
    "insertText": "FRollingHash(uint32 WindowSize)"
  },
  {
    "label": "ConsumeByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeByte(const uint8& NewByte)"
  },
  {
    "label": "ConsumeBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeBytes(const uint8* NewBytes, const uint32& NumBytes)"
  },
  {
    "label": "RollForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RollForward(const uint8& NewByte)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "GetWindowHash()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "GetWindowHash()"
  },
  {
    "label": "GetWindowData()",
    "kind": "Method",
    "detail": "Function (const HashRingBuffer&)",
    "insertText": "GetWindowData()"
  },
  {
    "label": "GetNumDataNeeded()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "GetNumDataNeeded()"
  },
  {
    "label": "GetWindowSize()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "GetWindowSize()"
  },
  {
    "label": "GetHashForDataSet()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetHashForDataSet(const uint8* DataSet, uint32 WindowSize)"
  },
  {
    "label": "FRollingHash()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRollingHash()"
  },
  {
    "label": "CheckRollingHashAlgorithm()",
    "kind": "Method",
    "detail": "Function (const uint32 WindowSize = 0 ; uint64 HashState = 0 ; uint32 NumBytesConsumed = 0 ; HashRingBuffer WindowData = 0 ; } ; bool)",
    "insertText": "CheckRollingHashAlgorithm()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (bool bCheckOk = true ; FString IndivWords [ 6 ] ; IndivWords [ 0 ] = \" 1 2 3 4 5 6 \" ; IndivWords [ 1 ] = \" 7 8 9 0 - = \" ; IndivWords [ 2 ] = \" qwerty \" ; IndivWords [ 3 ] = \" uiop [ ] \" ; IndivWords [ 4 ] = \" asdfgh \" ; IndivWords [ 5 ] = \" jkl ; ' # \" ; FString DataToRollOver =)",
    "insertText": "Printf(TEXT( \"%s%s%s%s%s%s\" ), *IndivWords[0], *IndivWords[1], *IndivWords[2], *IndivWords[3], *IndivWords[4], *IndivWords[5])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 IndivHashes [ 6 ] ;)",
    "insertText": "for(uint32 idx = 0; idx < 6; ++idx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint8 Converted [ 6 ] ;)",
    "insertText": "for(uint32 iChar = 0; iChar < 6; ++iChar)"
  },
  {
    "label": "GetHashForDataSet()",
    "kind": "Method",
    "detail": "Function (IndivHashes [ idx ] =)",
    "insertText": "GetHashForDataSet(Converted, 6)"
  },
  {
    "label": "RollingHash()",
    "kind": "Method",
    "detail": "Function (} FRollingHash)",
    "insertText": "RollingHash(6)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 StrIdx = 0 ;)",
    "insertText": "for(uint32 k=0; k<6; ++k) RollingHash.ConsumeByte( DataToRollOver[ StrIdx++ ])"
  }
]