[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "GCModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCModuleInfo"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "MachineFrameInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFrameInfo"
  },
  {
    "label": "MachineConstantPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineConstantPool"
  },
  {
    "label": "MachineJumpTableInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineJumpTableInfo"
  },
  {
    "label": "MachineModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineModuleInfo"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSubtargetInfo"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "MachinePointerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachinePointerInfo"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "MachineFunctionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineFunctionInfo"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEFUNCTION_H # define LLVM_CODEGEN_MACHINEFUNCTION_H # include \" llvm / ADT / ilist . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / IR / DebugLoc . h \" # include \" llvm / IR / Metadata . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / ArrayRecycler . h \" # include \" llvm / Support / Recycler . h \" namespace llvm { class Value ; class Function ; class GCModuleInfo ; class MachineRegisterInfo ; class MachineFrameInfo ; class MachineConstantPool ; class MachineJumpTableInfo ; class MachineModuleInfo ; class MCContext ; class Pass ; class TargetMachine ; class TargetSubtargetInfo ; class TargetRegisterClass ; struct MachinePointerInfo ; template<> struct ilist_traits<MachineBasicBlock> : public ilist_default_traits<MachineBasicBlock> { ilist_half_node<MachineBasicBlock> Sentinel ; public : MachineBasicBlock*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(MachineBasicBlock *)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} MachineBasicBlock*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} MachineBasicBlock*)",
    "insertText": "ensureHead(MachineBasicBlock*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(MachineBasicBlock*, MachineBasicBlock*)"
  },
  {
    "label": "addNodeToList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addNodeToList(MachineBasicBlock* MBB)"
  },
  {
    "label": "removeNodeFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeNodeFromList(MachineBasicBlock* MBB)"
  },
  {
    "label": "deleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteNode(MachineBasicBlock *MBB)"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "createNode(const MachineBasicBlock &)"
  },
  {
    "label": "MachineFunctionInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct MachineFunctionInfo { ~)",
    "insertText": "MachineFunctionInfo()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (template<Ty> Ty*)",
    "insertText": "create(BumpPtrAllocator &Allocator, MachineFunction &MF)"
  },
  {
    "label": "MachineFunction()",
    "kind": "Method",
    "detail": "Function (} } ; class MachineFunction { const Function* Fn ; const TargetMachine& Target ; const TargetSubtargetInfo* STI ; MCContext& Ctx ; MachineModuleInfo& MMI ; MachineRegisterInfo* RegInfo ; MachineFunctionInfo* MFInfo ; MachineFrameInfo* FrameInfo ; MachineConstantPool* ConstantPool ; MachineJumpTableInfo* JumpTableInfo ; std::vector<MachineBasicBlock*> MBBNumbering ; BumpPtrAllocator Allocator ; Recycler<MachineInstr> InstructionRecycler ; ArrayRecycler<MachineOperand> OperandRecycler ; Recycler<MachineBasicBlock> BasicBlockRecycler ; typedef ilist<MachineBasicBlock> BasicBlockListType ; BasicBlockListType BasicBlocks ; unsigned FunctionNumber ; unsigned Alignment ; bool ExposesReturnsTwice ; bool HasInlineAsm ;)",
    "insertText": "MachineFunction(const MachineFunction &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MachineFunction&)"
  },
  {
    "label": "MachineFunction()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MachineFunction(const Function *Fn, const TargetMachine &TM, unsigned FunctionNum, MachineModuleInfo &MMI)"
  },
  {
    "label": "MachineFunction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MachineFunction()"
  },
  {
    "label": "getMMI()",
    "kind": "Method",
    "detail": "Function (MachineModuleInfo&)",
    "insertText": "getMMI()"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (const Function*)",
    "insertText": "getFunction()"
  },
  {
    "label": "getFunctionNumber()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getFunctionNumber()"
  },
  {
    "label": "getSubtarget()",
    "kind": "Method",
    "detail": "Function (STI = ST ; } template<STC> const STC&)",
    "insertText": "getSubtarget()"
  },
  {
    "label": "getRegInfo()",
    "kind": "Method",
    "detail": "Function (} MachineRegisterInfo&)",
    "insertText": "getRegInfo()"
  },
  {
    "label": "getConstantPool()",
    "kind": "Method",
    "detail": "Function (MachineConstantPool*)",
    "insertText": "getConstantPool()"
  },
  {
    "label": "ensureAlignment()",
    "kind": "Method",
    "detail": "Function (Alignment = A ; } void)",
    "insertText": "ensureAlignment(unsigned A)"
  },
  {
    "label": "exposesReturnsTwice()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "exposesReturnsTwice()"
  },
  {
    "label": "hasInlineAsm()",
    "kind": "Method",
    "detail": "Function (ExposesReturnsTwice = B ; } bool)",
    "insertText": "hasInlineAsm()"
  },
  {
    "label": "getInfo()",
    "kind": "Method",
    "detail": "Function (HasInlineAsm = B ; } template<Ty> Ty*)",
    "insertText": "getInfo()"
  },
  {
    "label": "getBlockNumbered()",
    "kind": "Method",
    "detail": "Function (} MachineBasicBlock*)",
    "insertText": "getBlockNumbered(unsigned N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N < MBBNumbering.size() && \"Illegal block number\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MBBNumbering[N] && \"Block was removed from the machine function!\")"
  },
  {
    "label": "getNumBlockIDs()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumBlockIDs()"
  },
  {
    "label": "RenumberBlocks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RenumberBlocks(MachineBasicBlock *MBBFrom = nullptr)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, SlotIndexes* = nullptr)"
  },
  {
    "label": "viewCFG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewCFG()"
  },
  {
    "label": "viewCFGOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewCFGOnly()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verify(Pass *p = nullptr, const char *Banner = nullptr)"
  },
  {
    "label": "addLiveIn()",
    "kind": "Method",
    "detail": "Function (typedef BasicBlockListType::iterator iterator ; typedef BasicBlockListType::const_iterator const_iterator ; typedef std::reverse_iterator<const_iterator> const_reverse_iterator ; typedef std::reverse_iterator<iterator> reverse_iterator ; unsigned)",
    "insertText": "addLiveIn(unsigned PReg, const TargetRegisterClass *RC)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const MachineBasicBlock&)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} const MachineBasicBlock&)",
    "insertText": "back()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_back(MachineBasicBlock *MBB)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (BasicBlocks .)",
    "insertText": "push_back(MBB)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_front(MachineBasicBlock *MBB)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (BasicBlocks .)",
    "insertText": "push_front(MBB)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(iterator MBBI, MachineBasicBlock *MBB)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (BasicBlocks .)",
    "insertText": "insert(MBBI, MBB)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "splice(iterator InsertPt, iterator MBBI)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (BasicBlocks .)",
    "insertText": "splice(InsertPt, BasicBlocks, MBBI)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "splice(iterator InsertPt, iterator MBBI, iterator MBBE)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (BasicBlocks .)",
    "insertText": "splice(InsertPt, BasicBlocks, MBBI, MBBE)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "remove(iterator MBBI)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (BasicBlocks .)",
    "insertText": "remove(MBBI)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase(iterator MBBI)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (BasicBlocks .)",
    "insertText": "erase(MBBI)"
  },
  {
    "label": "addToMBBNumbering()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "addToMBBNumbering(MachineBasicBlock *MBB)"
  },
  {
    "label": "removeFromMBBNumbering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeFromMBBNumbering(unsigned N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N < MBBNumbering.size() && \"Illegal basic block #\")"
  },
  {
    "label": "CreateMachineInstr()",
    "kind": "Method",
    "detail": "Function (MBBNumbering [ N ] = nullptr ; } MachineInstr*)",
    "insertText": "CreateMachineInstr(const MCInstrDesc &MCID, DebugLoc DL, bool NoImp = false)"
  },
  {
    "label": "CloneMachineInstr()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "CloneMachineInstr(const MachineInstr *Orig)"
  },
  {
    "label": "DeleteMachineInstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMachineInstr(MachineInstr *MI)"
  },
  {
    "label": "CreateMachineBasicBlock()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock*)",
    "insertText": "CreateMachineBasicBlock(const BasicBlock *bb = nullptr)"
  },
  {
    "label": "DeleteMachineBasicBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMachineBasicBlock(MachineBasicBlock *MBB)"
  },
  {
    "label": "getMachineMemOperand()",
    "kind": "Method",
    "detail": "Function (MachineMemOperand*)",
    "insertText": "getMachineMemOperand(MachinePointerInfo PtrInfo, unsigned f, uint64_t s, unsigned base_alignment, const AAMDNodes &AAInfo = AAMDNodes(), const MDNode *Ranges = nullptr)"
  },
  {
    "label": "getMachineMemOperand()",
    "kind": "Method",
    "detail": "Function (MachineMemOperand*)",
    "insertText": "getMachineMemOperand(const MachineMemOperand *MMO, int64_t Offset, uint64_t Size)"
  },
  {
    "label": "allocateOperandArray()",
    "kind": "Method",
    "detail": "Function (typedef ArrayRecycler<MachineOperand>::Capacity OperandCapacity ; MachineOperand*)",
    "insertText": "allocateOperandArray(OperandCapacity Cap)"
  },
  {
    "label": "deallocateOperandArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocateOperandArray(OperandCapacity Cap, MachineOperand *Array)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (OperandRecycler .)",
    "insertText": "deallocate(Cap, Array)"
  },
  {
    "label": "allocateRegisterMask()",
    "kind": "Method",
    "detail": "Function (} uint32_t*)",
    "insertText": "allocateRegisterMask(unsigned NumRegister)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "Size(NumRegister + 31)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (uint32_t* Mask = Allocator . Allocate<)",
    "insertText": "uint32_t(Size)"
  },
  {
    "label": "extractLoadMemRefs()",
    "kind": "Method",
    "detail": "Function (std::pair<MachineInstr::mmo_iterator,MachineInstr::mmo_iterator>)",
    "insertText": "extractLoadMemRefs(MachineInstr::mmo_iterator Begin, MachineInstr::mmo_iterator End)"
  },
  {
    "label": "extractStoreMemRefs()",
    "kind": "Method",
    "detail": "Function (std::pair<MachineInstr::mmo_iterator,MachineInstr::mmo_iterator>)",
    "insertText": "extractStoreMemRefs(MachineInstr::mmo_iterator Begin, MachineInstr::mmo_iterator End)"
  },
  {
    "label": "getJTISymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getJTISymbol(unsigned JTI, MCContext &Ctx, bool isLinkerPrivate = false)"
  },
  {
    "label": "getPICBaseSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getPICBaseSymbol()"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct GraphTraits<MachineFunction*> : public GraphTraits<MachineBasicBlock*> { NodeType*)",
    "insertText": "getEntryNode(MachineFunction *F)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} typedef MachineFunction::iterator nodes_iterator ; nodes_iterator)",
    "insertText": "nodes_begin(MachineFunction *F)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(MachineFunction *F)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size(MachineFunction *F)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<const MachineFunction*> : public GraphTraits<const MachineBasicBlock*> { NodeType*)",
    "insertText": "getEntryNode(const MachineFunction *F)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} typedef MachineFunction::const_iterator nodes_iterator ; nodes_iterator)",
    "insertText": "nodes_begin(const MachineFunction *F)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(const MachineFunction *F)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size(const MachineFunction *F)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Inverse<MachineFunction*>> : public GraphTraits<Inverse<MachineBasicBlock*>> { NodeType*)",
    "insertText": "getEntryNode(Inverse<MachineFunction*> G)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Inverse<const MachineFunction*>> : public GraphTraits<Inverse<const MachineBasicBlock*>> { NodeType*)",
    "insertText": "getEntryNode(Inverse<const MachineFunction *> G)"
  }
]