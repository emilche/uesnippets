[
  {
    "label": "VectorToScalarConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorToScalarConverter"
  },
  {
    "label": "ScalarToVectorConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScalarToVectorConverter"
  },
  {
    "label": "ToMaskGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ToMaskGrid"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "GridOperator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridOperator"
  },
  {
    "label": "Cpt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cpt"
  },
  {
    "label": "IsOpT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsOpT"
  },
  {
    "label": "WsOpT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WsOpT"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "Curl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Curl"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "Divergence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Divergence"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "Gradient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Gradient"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "Laplacian",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Laplacian"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "MeanCurvature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeanCurvature"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "Magnitude",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Magnitude"
  },
  {
    "label": "OpT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpT"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "Normalize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Normalize"
  },
  {
    "label": "OpT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpT"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Functor"
  },
  {
    "label": "cpt()",
    "kind": "Method",
    "detail": "Function (ScalarToVectorConverter<GridType>::Type::Ptr)",
    "insertText": "cpt(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "cpt()",
    "kind": "Method",
    "detail": "Function (ScalarToVectorConverter<GridType>::Type::Ptr)",
    "insertText": "cpt(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "curl()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "curl(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "curl()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "curl(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "divergence()",
    "kind": "Method",
    "detail": "Function (VectorToScalarConverter<GridType>::Type::Ptr)",
    "insertText": "divergence(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "divergence()",
    "kind": "Method",
    "detail": "Function (VectorToScalarConverter<GridType>::Type::Ptr)",
    "insertText": "divergence(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "gradient()",
    "kind": "Method",
    "detail": "Function (ScalarToVectorConverter<GridType>::Type::Ptr)",
    "insertText": "gradient(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "gradient()",
    "kind": "Method",
    "detail": "Function (ScalarToVectorConverter<GridType>::Type::Ptr)",
    "insertText": "gradient(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "laplacian()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "laplacian(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "laplacian()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "laplacian(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meanCurvature(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meanCurvature(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "magnitude()",
    "kind": "Method",
    "detail": "Function (VectorToScalarConverter<GridType>::Type::Ptr)",
    "insertText": "magnitude(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "magnitude()",
    "kind": "Method",
    "detail": "Function (VectorToScalarConverter<GridType>::Type::Ptr)",
    "insertText": "magnitude(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "normalize(const GridType& grid, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "normalize(const GridType& grid, const MaskT& mask, bool threaded, InterruptT* interrupt)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "leafManager(*tree)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor)",
    "insertText": "functor(mInputGrid, mMask, threaded, useWorldTransform, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt, /*densify=*/false)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt, /*densify=*/false)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor<math::FD_1ST>)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor<math::CD_2ND>)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt, /*densify=*/false)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (Functor)",
    "insertText": "functor(mInputGrid, mMask, threaded, mInterrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(mInputGrid, mMask, map, mInterrupt, /*densify=*/false)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, interrupt)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (InterruptT>)",
    "insertText": "op(grid, mask, interrupt)"
  }
]