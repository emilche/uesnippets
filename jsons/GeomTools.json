[
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FUtilEdge3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilEdge3D"
  },
  {
    "label": "FUtilEdge2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilEdge2D"
  },
  {
    "label": "FUtilVertex2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilVertex2D"
  },
  {
    "label": "FUtilPoly2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilPoly2D"
  },
  {
    "label": "FUtilPoly2DSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilPoly2DSet"
  },
  {
    "label": "FUtilTri2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilTri2D"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FClipSMVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMVertex"
  },
  {
    "label": "FClipSMFace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMFace"
  },
  {
    "label": "FClipSMTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMTriangle"
  },
  {
    "label": "FClipSMPolygon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMPolygon"
  },
  {
    "label": "FGeomTools2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeomTools2D"
  },
  {
    "label": "ComputeGradientsAndNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGradientsAndNormal()"
  },
  {
    "label": "GetClippableStaticMeshTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClippableStaticMeshTriangles(TArray<FClipSMTriangle>& OutClippableTriangles, const UStaticMesh* StaticMesh)"
  },
  {
    "label": "ClipMeshWithPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipMeshWithPlane(TArray<FClipSMTriangle>& OutTris, TArray<FUtilEdge3D>& OutClipEdges, const TArray<FClipSMTriangle>& InTriangles, const FPlane& Plane)"
  },
  {
    "label": "ProjectEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectEdges(TArray<FUtilEdge2D>& Out2DEdges, FMatrix& ToWorld, const TArray<FUtilEdge3D>& In3DEdges, const FPlane& InPlane)"
  },
  {
    "label": "Buid2DPolysFromEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Buid2DPolysFromEdges(TArray<FUtilPoly2D>& OutPolys, const TArray<FUtilEdge2D>& InEdges, const FColor& VertColor)"
  },
  {
    "label": "TriangulatePoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriangulatePoly(TArray<FClipSMTriangle>& OutTris, const FClipSMPolygon& InPoly, bool bKeepColinearVertices = false)"
  },
  {
    "label": "Transform2DPolygonToSMPolygon()",
    "kind": "Method",
    "detail": "Function (FClipSMPolygon)",
    "insertText": "Transform2DPolygonToSMPolygon(const FUtilPoly2D& InTri, const FMatrix& InMatrix)"
  },
  {
    "label": "GeneratePlanarFitPolyUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlanarFitPolyUVs(FUtilPoly2D& Polygon)"
  },
  {
    "label": "GeneratePlanarTilingPolyUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlanarTilingPolyUVs(FUtilPoly2D& Polygon, float TileSize)"
  },
  {
    "label": "RemoveRedundantTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantTriangles(TArray<FClipSMTriangle>& Tris)"
  },
  {
    "label": "Split2DPolysWithPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Split2DPolysWithPlane(FUtilPoly2DSet& PolySet, const FPlane& Plane, const FColor& ExteriorVertColor, const FColor& InteriorVertColor)"
  },
  {
    "label": "VectorsOnSameSide()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VectorsOnSameSide(const FVector3f& Vec, const FVector3f& A, const FVector3f& B, const float SameSideDotProductEpsilon = 0.0f )"
  },
  {
    "label": "PointInTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PointInTriangle(const FVector3f& A, const FVector3f& B, const FVector3f& C, const FVector3f& P, const float InsideTriangleDotProductEpsilon = 0.0f)"
  },
  {
    "label": "CorrectPolygonWinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CorrectPolygonWinding(TArray<FVector2D>& OutVertices, const TArray<FVector2D>& Vertices, const bool bNegativeWinding)"
  },
  {
    "label": "IsPolygonWindingCCW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPolygonWindingCCW(const TArray<FVector2D>& Points)"
  },
  {
    "label": "IsPolygonWindingCCW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPolygonWindingCCW(const TArray<FIntPoint>& Points)"
  },
  {
    "label": "ArePolygonsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePolygonsValid(const TArray<TArray<FVector2D>>& Polygons)"
  },
  {
    "label": "ReducePolygons()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FVector2D>>)",
    "insertText": "ReducePolygons(const TArray<TArray<FVector2D>>& Polygons, const TArray<bool>& PolygonNegativeWinding)"
  },
  {
    "label": "TriangulatePoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriangulatePoly(TArray<FVector2D>& OutTris, const TArray<FVector2D>& PolygonVertices, bool bKeepColinearVertices = false)"
  },
  {
    "label": "RemoveRedundantTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantTriangles(TArray<FVector2D>& OutTriangles, const TArray<FVector2D>& InTriangles)"
  },
  {
    "label": "GenerateConvexPolygonsFromTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateConvexPolygonsFromTriangles(TArray<TArray<FVector2D>>& OutPolygons, const TArray<FVector2D>& InTriangles)"
  },
  {
    "label": "GenerateConvexHullFromPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateConvexHullFromPoints(TArray<FVector2D>& OutConvexHull, TArray<FVector2D>& Points)"
  },
  {
    "label": "IsPointInPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInPolygon(const FVector2D& TestPoint, const TArray<FVector2D>& PolygonPoints)"
  }
]