[
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FUtilEdge3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilEdge3D"
  },
  {
    "label": "FUtilEdge2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilEdge2D"
  },
  {
    "label": "FUtilVertex2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilVertex2D"
  },
  {
    "label": "FUtilPoly2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilPoly2D"
  },
  {
    "label": "FUtilPoly2DSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilPoly2DSet"
  },
  {
    "label": "FUtilTri2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUtilTri2D"
  },
  {
    "label": "FClipSMVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMVertex"
  },
  {
    "label": "FClipSMFace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMFace"
  },
  {
    "label": "FClipSMTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMTriangle"
  },
  {
    "label": "FClipSMPolygon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClipSMPolygon"
  },
  {
    "label": "FGeomTools2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeomTools2D"
  },
  {
    "label": "FUtilVertex2D()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class UStaticMesh ; struct FUtilEdge3D { FVector3f V0 ; FVector3f V1 ; } ; struct FUtilEdge2D { FVector2D V0 ; FVector2D V1 ; } ; struct FUtilVertex2D { FVector2D Pos ; FColor Color ; FVector2D UV ; bool bInteriorEdge ;)",
    "insertText": "FUtilVertex2D()"
  },
  {
    "label": "FUtilVertex2D()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUtilVertex2D(const FVector2D& InPos) : Pos(InPos), Color(255,255,255,255), UV(0.f, 0.f), bInteriorEdge(false)"
  },
  {
    "label": "FUtilVertex2D()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUtilVertex2D(const FVector2D& InPos, const FColor& InColor) : Pos(InPos), Color(InColor), UV(0.f, 0.f), bInteriorEdge(false)"
  },
  {
    "label": "CopyFace()",
    "kind": "Method",
    "detail": "Function (} } ; struct FUtilPoly2D { TArray<FUtilVertex2D> Verts ; } ; struct FUtilPoly2DSet { TArray<FUtilPoly2D> Polys ; FMatrix PolyToWorld ; } ; struct FUtilTri2D { FUtilVertex2D Verts [ 3 ] ; } ; struct FClipSMVertex { FVector3f Pos ; FVector3f TangentX ; FVector3f TangentY ; FVector3f TangentZ ; FVector2D UVs [ 8 ] ; FColor Color ; } ; struct FClipSMFace { int32 MaterialIndex ; uint32 SmoothingMask ; int32 NumUVs ; bool bOverrideTangentBasis ; FVector FaceNormal ; FMatrix TangentXGradient ; FMatrix TangentYGradient ; FMatrix TangentZGradient ; FMatrix UVGradient [ 8 ] ; FMatrix ColorGradient ; void)",
    "insertText": "CopyFace(const FClipSMFace& OtherFace)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(this,&OtherFace,sizeof(FClipSMFace))"
  },
  {
    "label": "ComputeGradientsAndNormal()",
    "kind": "Method",
    "detail": "Function (} } ; struct FClipSMTriangle : FClipSMFace { FClipSMVertex Vertices [ 3 ] ; void)",
    "insertText": "ComputeGradientsAndNormal()"
  },
  {
    "label": "FClipSMTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClipSMTriangle(int32 Init)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FClipSMTriangle))"
  },
  {
    "label": "FClipSMPolygon()",
    "kind": "Method",
    "detail": "Function (} } ; struct FClipSMPolygon : FClipSMFace { TArray<FClipSMVertex> Vertices ;)",
    "insertText": "FClipSMPolygon(int32 Init)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FClipSMPolygon))"
  },
  {
    "label": "GetClippableStaticMeshTriangles()",
    "kind": "Method",
    "detail": "Function (} } ; namespace FGeomTools { void)",
    "insertText": "GetClippableStaticMeshTriangles(TArray<FClipSMTriangle>& OutClippableTriangles, const UStaticMesh* StaticMesh)"
  },
  {
    "label": "ClipMeshWithPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipMeshWithPlane(TArray<FClipSMTriangle>& OutTris, TArray<FUtilEdge3D>& OutClipEdges, const TArray<FClipSMTriangle>& InTriangles, const FPlane& Plane)"
  },
  {
    "label": "ProjectEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectEdges(TArray<FUtilEdge2D>& Out2DEdges, FMatrix& ToWorld, const TArray<FUtilEdge3D>& In3DEdges, const FPlane& InPlane)"
  },
  {
    "label": "Buid2DPolysFromEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Buid2DPolysFromEdges(TArray<FUtilPoly2D>& OutPolys, const TArray<FUtilEdge2D>& InEdges, const FColor& VertColor)"
  },
  {
    "label": "TriangulatePoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriangulatePoly(TArray<FClipSMTriangle>& OutTris, const FClipSMPolygon& InPoly, bool bKeepColinearVertices = false)"
  },
  {
    "label": "Transform2DPolygonToSMPolygon()",
    "kind": "Method",
    "detail": "Function (FClipSMPolygon)",
    "insertText": "Transform2DPolygonToSMPolygon(const FUtilPoly2D& InTri, const FMatrix& InMatrix)"
  },
  {
    "label": "GeneratePlanarFitPolyUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlanarFitPolyUVs(FUtilPoly2D& Polygon)"
  },
  {
    "label": "GeneratePlanarTilingPolyUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlanarTilingPolyUVs(FUtilPoly2D& Polygon, float TileSize)"
  },
  {
    "label": "RemoveRedundantTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantTriangles(TArray<FClipSMTriangle>& Tris)"
  },
  {
    "label": "Split2DPolysWithPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Split2DPolysWithPlane(FUtilPoly2DSet& PolySet, const FPlane& Plane, const FColor& ExteriorVertColor, const FColor& InteriorVertColor)"
  },
  {
    "label": "VectorsOnSameSide()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VectorsOnSameSide(const FVector3f& Vec, const FVector3f& A, const FVector3f& B, const float SameSideDotProductEpsilon = 0.0f)"
  },
  {
    "label": "PointInTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PointInTriangle(const FVector3f& A, const FVector3f& B, const FVector3f& C, const FVector3f& P, const float InsideTriangleDotProductEpsilon = 0.0f)"
  },
  {
    "label": "CorrectPolygonWinding()",
    "kind": "Method",
    "detail": "Function (} ; class FGeomTools2D { public : void)",
    "insertText": "CorrectPolygonWinding(TArray<FVector2D>& OutVertices, const TArray<FVector2D>& Vertices, const bool bNegativeWinding)"
  },
  {
    "label": "IsPolygonWindingCCW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPolygonWindingCCW(const TArray<FVector2D>& Points)"
  },
  {
    "label": "IsPolygonWindingCCW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPolygonWindingCCW(const TArray<FIntPoint>& Points)"
  },
  {
    "label": "ArePolygonsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePolygonsValid(const TArray<TArray<FVector2D>>& Polygons)"
  },
  {
    "label": "ReducePolygons()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FVector2D>>)",
    "insertText": "ReducePolygons(const TArray<TArray<FVector2D>>& Polygons, const TArray<bool>& PolygonNegativeWinding)"
  },
  {
    "label": "TriangulatePoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriangulatePoly(TArray<FVector2D>& OutTris, const TArray<FVector2D>& PolygonVertices, bool bKeepColinearVertices = false)"
  },
  {
    "label": "RemoveRedundantTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantTriangles(TArray<FVector2D>& OutTriangles, const TArray<FVector2D>& InTriangles)"
  },
  {
    "label": "GenerateConvexPolygonsFromTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateConvexPolygonsFromTriangles(TArray<TArray<FVector2D>>& OutPolygons, const TArray<FVector2D>& InTriangles)"
  },
  {
    "label": "GenerateConvexHullFromPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateConvexHullFromPoints(TArray<FVector2D>& OutConvexHull, TArray<FVector2D>& Points)"
  },
  {
    "label": "IsPointInPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInPolygon(const FVector2D& TestPoint, const TArray<FVector2D>& PolygonPoints)"
  }
]