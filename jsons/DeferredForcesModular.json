[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeometryCollectionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionPhysicsProxy"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FApplyForceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FApplyForceData"
  },
  {
    "label": "FApplyForceAtPositionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FApplyForceAtPositionData"
  },
  {
    "label": "FAddTorqueInRadiansData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddTorqueInRadiansData"
  },
  {
    "label": "FAddImpulseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddImpulseData"
  },
  {
    "label": "FAddImpulseAtPositionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddImpulseAtPositionData"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" GeometryCollection / ManagedArray . h \" enum class EForceFlags : uint32 { None = 0,AllowSubstepping = 1<<0,AccelChange = 1<<1,VelChange = 1<<2,IsLocalForce = 1<<3,LevelSlope = 1<<4 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EForceFlags)"
  },
  {
    "label": "FApplyForceData()",
    "kind": "Method",
    "detail": "Function (class FGeometryCollectionPhysicsProxy ; class FDeferredForcesModular { public : struct FApplyForceData {)",
    "insertText": "FApplyForceData(const FTransform& OffsetTransformIn, int TransformIndexIn, int ParticleIndexIn, const FVector& ForceIn, bool bAllowSubsteppingIn, bool bAccelChangeIn, bool bLevelSlope, const FColor& ColorIn) : OffsetTransform(OffsetTransformIn) , TransformIndex(TransformIndexIn) , ParticleIdx(ParticleIndexIn) , Force(ForceIn) , Flags(EForceFlags::None) , DebugColor(ColorIn)"
  },
  {
    "label": "FApplyForceAtPositionData()",
    "kind": "Method",
    "detail": "Function (Flags | = bAllowSubsteppingIn ? EForceFlags::AllowSubstepping : EForceFlags::None ; Flags | = bAccelChangeIn ? EForceFlags::AccelChange : EForceFlags::None ; Flags | = bLevelSlope ? EForceFlags::LevelSlope : EForceFlags::None ; } FTransform OffsetTransform ; int TransformIndex ; int32 ParticleIdx ; FVector Force ; EForceFlags Flags ; FColor DebugColor ; } ; struct FApplyForceAtPositionData {)",
    "insertText": "FApplyForceAtPositionData(const FTransform& OffsetTransformIn, int TransformIndexIn, int ParticleIndexIn, const FVector& ForceIn, const FVector& PositionIn, bool bAllowSubsteppingIn, bool bIsLocalForceIn, bool bLevelSlope, const FColor& ColorIn) : OffsetTransform(OffsetTransformIn) , TransformIndex(TransformIndexIn) , ParticleIdx(ParticleIndexIn) , Force(ForceIn) , Position(PositionIn) , Flags(EForceFlags::None) , DebugColor(ColorIn)"
  },
  {
    "label": "FAddTorqueInRadiansData()",
    "kind": "Method",
    "detail": "Function (Flags | = bAllowSubsteppingIn ? EForceFlags::AllowSubstepping : EForceFlags::None ; Flags | = bIsLocalForceIn ? EForceFlags::IsLocalForce : EForceFlags::None ; Flags | = bLevelSlope ? EForceFlags::LevelSlope : EForceFlags::None ; } FTransform OffsetTransform ; int TransformIndex ; int32 ParticleIdx ; FVector Force ; FVector Position ; EForceFlags Flags ; FColor DebugColor ; } ; struct FAddTorqueInRadiansData {)",
    "insertText": "FAddTorqueInRadiansData(const FTransform& OffsetTransformIn, int TransformIndexIn, int ParticleIndexIn, const FVector& TorqueIn, bool bAllowSubsteppingIn, bool bAccelChangeIn, const FColor& ColorIn) : OffsetTransform(OffsetTransformIn) , TransformIndex(TransformIndexIn) , ParticleIdx(ParticleIndexIn) , Torque(TorqueIn) , Flags(EForceFlags::None) , DebugColor(ColorIn)"
  },
  {
    "label": "FAddImpulseData()",
    "kind": "Method",
    "detail": "Function (Flags | = bAllowSubsteppingIn ? EForceFlags::AllowSubstepping : EForceFlags::None ; Flags | = bAccelChangeIn ? EForceFlags::AccelChange : EForceFlags::None ; } FTransform OffsetTransform ; int TransformIndex ; int32 ParticleIdx ; FVector Torque ; EForceFlags Flags ; FColor DebugColor ; } ; struct FAddImpulseData {)",
    "insertText": "FAddImpulseData(const FTransform& OffsetTransformIn, int TransformIndexIn, int ParticleIndexIn, const FVector& ImpulseIn, const bool bVelChangeIn) : OffsetTransform(OffsetTransformIn) , TransformIndex(TransformIndexIn) , ParticleIdx(ParticleIndexIn) , Impulse(ImpulseIn) , Flags(EForceFlags::None)"
  },
  {
    "label": "FAddImpulseAtPositionData()",
    "kind": "Method",
    "detail": "Function (Flags | = bVelChangeIn ? EForceFlags::VelChange : EForceFlags::None ; } FTransform OffsetTransform ; int TransformIndex ; int32 ParticleIdx ; FVector Impulse ; EForceFlags Flags ; } ; struct FAddImpulseAtPositionData {)",
    "insertText": "FAddImpulseAtPositionData(const FTransform& OffsetTransformIn, int TransformIndexIn, int ParticleIndexIn, const FVector& ImpulseIn, const FVector& PositionIn) : OffsetTransform(OffsetTransformIn) , TransformIndex(TransformIndexIn) , ParticleIdx(ParticleIndexIn) , Impulse(ImpulseIn) , Position(PositionIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FTransform OffsetTransform ; int TransformIndex ; int32 ParticleIdx ; FVector Impulse ; FVector Position ; } ; void)",
    "insertText": "Add(const FApplyForceData& ApplyForceDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ApplyForceDatas .)",
    "insertText": "Add(ApplyForceDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FApplyForceAtPositionData& ApplyForceAtPositionDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ApplyForceAtPositionDatas .)",
    "insertText": "Add(ApplyForceAtPositionDataIn)"
  },
  {
    "label": "AddCOM()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCOM(const FApplyForceAtPositionData& ApplyForceAtPositionDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FAddTorqueInRadiansData& ApplyTorqueDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ApplyTorqueDatas .)",
    "insertText": "Add(ApplyTorqueDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FAddImpulseData& ApplyImpulseDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ApplyImpulseDatas .)",
    "insertText": "Add(ApplyImpulseDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FAddImpulseAtPositionData& ApplyImpulseAtPositionDataIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ApplyImpulseAtPositionDatas .)",
    "insertText": "Add(ApplyImpulseAtPositionDataIn)"
  },
  {
    "label": "GetParticleFromUniqueIndex()",
    "kind": "Method",
    "detail": "Function (} Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetParticleFromUniqueIndex(int32 ParticleUniqueIdx, const TArray<Chaos::FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetParticle(FGeometryCollectionPhysicsProxy* Proxy , int TransformIndex , int32 ParticleIdx , const FVector& PositionalOffset , const TManagedArray<FTransform>& Transforms , const TManagedArray<FTransform>& CollectionMassToLocal , const TManagedArray<int32>& Parent , FTransform& TransformOut)"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetParticle(FGeometryCollectionPhysicsProxy* Proxy , int TransformIndex , int32 ParticleIdx , const FVector& PositionalOffset , const FTransform& Transform , const TManagedArray<FTransform>& CollectionMassToLocal , const TManagedArray<int32>& Parent , FTransform& TransformOut)"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetParticle(const FTransform& OffsetTransform , FGeometryCollectionPhysicsProxy* Proxy , int32 ParticleIdx , const FVector& PositionalOffset , FTransform& TransformOut)"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetParticle(const FTransform& OffsetTransform , TArray<Chaos::FPBDRigidParticleHandle*>& Particles , TArray<Chaos::FPBDRigidClusteredParticleHandle*>& ClusterParticles , int32 ParticleIdx , const FVector& PositionalOffset , FTransform& TransformOut)"
  },
  {
    "label": "GetClusterParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetClusterParticle(TArray<Chaos::FPBDRigidClusteredParticleHandle*>& ClusterParticles)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FGeometryCollectionPhysicsProxy* Proxy , const TManagedArray<FTransform>& Transforms , const TManagedArray<FTransform>& CollectionMassToLocal , const TManagedArray<int32>& Parent)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FGeometryCollectionPhysicsProxy* Proxy , const TManagedArray<FTransform3f>& Transforms , const TManagedArray<FTransform>& CollectionMassToLocal , const TManagedArray<int32>& Parent)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FGeometryCollectionPhysicsProxy* Proxy)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(TArray<Chaos::FPBDRigidParticleHandle*>& Particles , TArray<Chaos::FPBDRigidClusteredParticleHandle*>& ClusterParticles)"
  },
  {
    "label": "ApplyTemplate()",
    "kind": "Method",
    "detail": "Function (private : template<TransformType> void)",
    "insertText": "ApplyTemplate(FGeometryCollectionPhysicsProxy* Proxy , const TManagedArray<TransformType>& Transforms , const TManagedArray<FTransform>& CollectionMassToLocal , const TManagedArray<int32>& Parent)"
  },
  {
    "label": "AddForceAtPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtPosition(Chaos::FPBDRigidParticleHandle* RigidHandle, const FApplyForceAtPositionData& DataIn, const FTransform& OffsetTransform)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque(Chaos::FPBDRigidParticleHandle* RigidHandle, const FAddTorqueInRadiansData& DataIn, const FTransform& OffsetTransform)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(Chaos::FPBDRigidParticleHandle* RigidHandle, const FApplyForceData& DataIn, const FTransform& OffsetTransform)"
  },
  {
    "label": "AddForceAtCOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtCOM(Chaos::FPBDRigidParticleHandle* RigidHandle, const FApplyForceAtPositionData& DataIn)"
  }
]