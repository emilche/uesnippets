[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeometryCollectionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionPhysicsProxy"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FApplyForceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FApplyForceData"
  },
  {
    "label": "FApplyForceAtPositionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FApplyForceAtPositionData"
  },
  {
    "label": "FAddTorqueInRadiansData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddTorqueInRadiansData"
  },
  {
    "label": "FAddImpulseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddImpulseData"
  },
  {
    "label": "FAddImpulseAtPositionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddImpulseAtPositionData"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FGeometryCollectionPhysicsProxy* Proxy\n\t\t, const TManagedArray<FTransform>& Transforms\n\t\t, const TManagedArray<FTransform>& CollectionMassToLocal\n\t\t, const TManagedArray<int32>& Parent)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FGeometryCollectionPhysicsProxy* Proxy\n\t\t, const TManagedArray<FTransform3f>& Transforms\n\t\t, const TManagedArray<FTransform>& CollectionMassToLocal\n\t\t, const TManagedArray<int32>& Parent)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FGeometryCollectionPhysicsProxy* Proxy)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(TArray<Chaos::FPBDRigidParticleHandle*>& Particles\n\t\t, TArray<Chaos::FPBDRigidClusteredParticleHandle*>& ClusterParticles)"
  },
  {
    "label": "ApplyTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTemplate(FGeometryCollectionPhysicsProxy* Proxy\n\t\t, const TManagedArray<TransformType>& Transforms\n\t\t, const TManagedArray<FTransform>& CollectionMassToLocal\n\t\t, const TManagedArray<int32>& Parent)"
  },
  {
    "label": "AddForceAtPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtPosition(Chaos::FPBDRigidParticleHandle* RigidHandle, const FApplyForceAtPositionData& DataIn, const FTransform& OffsetTransform)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque(Chaos::FPBDRigidParticleHandle* RigidHandle, const FAddTorqueInRadiansData& DataIn, const FTransform& OffsetTransform)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(Chaos::FPBDRigidParticleHandle* RigidHandle, const FApplyForceData& DataIn, const FTransform& OffsetTransform)"
  },
  {
    "label": "AddForceAtCOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtCOM(Chaos::FPBDRigidParticleHandle* RigidHandle, const FApplyForceAtPositionData& DataIn)"
  }
]