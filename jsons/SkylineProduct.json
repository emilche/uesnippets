[
  {
    "label": "SkylineProductReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SkylineProductReturnType"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "SkylineProduct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SkylineProduct"
  },
  {
    "label": "skyline_product_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "skyline_product_selector"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_FIXED()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SKYLINEPRODUCT_H # define EIGEN_SKYLINEPRODUCT_H namespace Eigen { template<Lhs,Rhs,int ProductMode> struct SkylineProductReturnType { typedef const internal::nested_eval<Lhs,Rhs::RowsAtCompileTime>::type LhsNested ; typedef const internal::nested_eval<Rhs,Lhs::RowsAtCompileTime>::type RhsNested ; typedef SkylineProduct<LhsNested,RhsNested,ProductMode> Type ; } ; template<LhsNested,RhsNested,int ProductMode> struct internal::traits<SkylineProduct<LhsNested,RhsNested,ProductMode>> { typedef internal::remove_all<LhsNested>::type _LhsNested ; typedef internal::remove_all<RhsNested>::type _RhsNested ; typedef _LhsNested::Scalar Scalar ; enum { LhsCoeffReadCost = _LhsNested::CoeffReadCost,RhsCoeffReadCost = _RhsNested::CoeffReadCost,LhsFlags = _LhsNested::Flags,RhsFlags = _RhsNested::Flags,RowsAtCompileTime = _LhsNested::RowsAtCompileTime,ColsAtCompileTime = _RhsNested::ColsAtCompileTime,InnerSize =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_FIXED(_LhsNested::ColsAtCompileTime, _RhsNested::RowsAtCompileTime), MaxRowsAtCompileTime = _LhsNested::MaxRowsAtCompileTime, MaxColsAtCompileTime = _RhsNested::MaxColsAtCompileTime, EvalToRowMajor = (RhsFlags & LhsFlags & RowMajorBit), ResultIsSkyline = ProductMode == SkylineTimeSkylineProduct, RemovedBits = ~((EvalToRowMajor ? 0 : RowMajorBit) | (ResultIsSkyline ? 0 : SkylineBit)), Flags = (int(LhsFlags | RhsFlags) & HereditaryBits & RemovedBits)"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<ResultIsSkyline,SkylineMatrixBase<SkylineProduct<LhsNested,RhsNested,ProductMode>>,MatrixBase<SkylineProduct<LhsNested,RhsNested,ProductMode>>>::type Base ; } ; namespace internal { template<LhsNested,RhsNested,int ProductMode> class SkylineProduct : no_assignment_operator,public traits<SkylineProduct<LhsNested,RhsNested,ProductMode>>::Base { public :)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(SkylineProduct)"
  },
  {
    "label": "SkylineProduct()",
    "kind": "Method",
    "detail": "Function (typedef traits<SkylineProduct>::_RhsNested _RhsNested ; public : template<Lhs,Rhs> EIGEN_STRONG_INLINE)",
    "insertText": "SkylineProduct(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(lhs.cols() == rhs.rows())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { ProductIsValid = _LhsNested::ColsAtCompileTime = = Dynamic | | _RhsNested::RowsAtCompileTime = = Dynamic | |)",
    "insertText": "int(_LhsNested::ColsAtCompileTime) == int(_RhsNested::RowsAtCompileTime), AreVectors = _LhsNested::IsVectorAtCompileTime && _RhsNested::IsVectorAtCompileTime, SameSizes = EIGEN_PREDICATE_SAME_MATRIX_SIZE(_LhsNested, _RhsNested)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(ProductIsValid || !(AreVectors && SameSizes), INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS) EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors), INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION) EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT) } EIGEN_STRONG_INLINE Index rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "cols()"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE const _LhsNested&)",
    "insertText": "lhs()"
  },
  {
    "label": "LhsIsRowMajor()",
    "kind": "Method",
    "detail": "Function (typedef remove_all<Lhs>::type _Lhs ; typedef remove_all<Rhs>::type _Rhs ; typedef traits<Lhs>::Scalar Scalar ; enum {)",
    "insertText": "LhsIsRowMajor(_Lhs::Flags & RowMajorBit) == RowMajorBit, LhsIsSelfAdjoint = (_Lhs::Flags & SelfAdjointBit) == SelfAdjointBit, ProcessFirstHalf = LhsIsSelfAdjoint && (((_Lhs::Flags & (UpperTriangularBit | LowerTriangularBit)) == 0) || ((_Lhs::Flags & UpperTriangularBit) && !LhsIsRowMajor) || ((_Lhs::Flags & LowerTriangularBit) && LhsIsRowMajor)), ProcessSecondHalf = LhsIsSelfAdjoint && (!ProcessFirstHalf)"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dst(row, col) = lhs.coeffDiag(row) * rhs(row, col)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(Index row = 0; row < lhs.rows(); row++)"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (_Lhs::InnerLowerIterator)",
    "insertText": "lIt(lhs, row)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (const Index stop = lIt .)",
    "insertText": "col() + lIt.size()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index k = lIt .)",
    "insertText": "col()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Scalar tmp = 0 ;)",
    "insertText": "while(k < stop)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (tmp + = lIt .)",
    "insertText": "value() * rhs(k++, col)"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (+ + lIt ; })",
    "insertText": "dst(row, col)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (lIt + = - lIt .)",
    "insertText": "size()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(Index lhscol = 0; lhscol < lhs.cols(); lhscol++)"
  },
  {
    "label": "uIt()",
    "kind": "Method",
    "detail": "Function (_Lhs::InnerUpperIterator)",
    "insertText": "uIt(lhs, lhscol)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index stop = uIt .)",
    "insertText": "size() + uIt.row()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Scalar rhsCoeff = rhs .)",
    "insertText": "coeff(lhscol, rhscol)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Index k = uIt .)",
    "insertText": "row()"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dst(k++, rhscol) += uIt.value()"
  },
  {
    "label": "skyline_col_major_time_dense_product()",
    "kind": "Method",
    "detail": "Function (} } } template<Lhs,Rhs,Dest> EIGEN_DONT_INLINE void)",
    "insertText": "skyline_col_major_time_dense_product(const Lhs& lhs, const Rhs& rhs, Dest& dst)"
  },
  {
    "label": "uIt()",
    "kind": "Method",
    "detail": "Function (_Lhs::InnerUpperIterator)",
    "insertText": "uIt(lhs, row)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (const Index stop = uIt .)",
    "insertText": "col() + uIt.size()"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (_Lhs::InnerLowerIterator)",
    "insertText": "lIt(lhs, lhscol)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index stop = lIt .)",
    "insertText": "size() + lIt.row()"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dst(k++, rhscol) += lIt.value()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } template<Lhs,Rhs,ResultType,int LhsStorageOrder = traits<Lhs>::Flags& RowMajorBit> struct skyline_product_selector ; template<Lhs,Rhs,ResultType> struct skyline_product_selector<Lhs,Rhs,ResultType,RowMajor> { typedef traits<remove_all<Lhs>::type>::Scalar Scalar ; void)",
    "insertText": "run(const Lhs& lhs, const Rhs& rhs, ResultType & res)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (skyline_row_major_time_dense_product<Lhs,Rhs,)",
    "insertText": "ResultType(lhs, rhs, res)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> template<OtherDerived> EIGEN_STRONG_INLINE const SkylineProductReturnType<Derived,OtherDerived>::Type SkylineMatrixBase<Derived)",
    "insertText": "operator(const MatrixBase<OtherDerived> &other)"
  }
]