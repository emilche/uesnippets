[
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SEditorViewportToolbarMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditorViewportToolbarMenu"
  },
  {
    "label": "SViewportToolBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewportToolBar"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / SlateDelegates . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / Attribute . h \" # include \" SViewportToolBar . h \" # include \" Styling / AppStyle . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class SMenuAnchor ; struct FGeometry ; struct FPointerEvent ; struct FSlateBrush ; namespace EMenuItemType { enum Type { Default,Header,Separator,} ; } class SEditorViewportToolbarMenu : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SEditorViewportToolbarMenu) : _MenuStyle(&FAppStyle::Get().GetWidgetStyle<FButtonStyle>(\"EditorViewportToolBar.Button\")) , _ForegroundColor(FSlateColor::UseStyle())"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<class SViewportToolBar>, ParentToolBar)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_STYLE_ARGUMENT(FButtonStyle, MenuStyle) SLATE_ATTRIBUTE(FText, Label) SLATE_ATTRIBUTE(const FSlateBrush*, LabelIcon) SLATE_ARGUMENT(FName, Image) SLATE_EVENT(FOnGetContent, OnGetMenuContent) SLATE_ATTRIBUTE(FSlateColor, ForegroundColor) SLATE_ARGUMENT_DEFAULT(EMenuPlacement, MenuPlacement)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() UNREALED_API void Construct( const FArguments& Declaration)"
  },
  {
    "label": "GetParentToolBar()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class SViewportToolBar>)",
    "insertText": "GetParentToolBar()"
  },
  {
    "label": "IsMenuOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMenuOpen()"
  },
  {
    "label": "OnMenuClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnMenuClicked()"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetLabelIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLabelIconVisibility()"
  },
  {
    "label": "GetFilteredToolTipText()",
    "kind": "Method",
    "detail": "Function (protected : TWeakPtr<class SViewportToolBar> ParentToolBar ; FName MenuName ; FText)",
    "insertText": "GetFilteredToolTipText(TAttribute<FText> ToolTipText)"
  }
]