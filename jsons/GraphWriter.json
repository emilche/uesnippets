[
  {
    "label": "Name",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Name"
  },
  {
    "label": "GraphWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphWriter"
  },
  {
    "label": "EscapeString()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_GRAPHWRITER_H # define LLVM_SUPPORT_GRAPHWRITER_H # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / Support / DOTGraphTraits . h \" # include \" llvm / Support / raw_ostream . h \" # include<vector> namespace llvm { namespace DOT { std::string)",
    "insertText": "EscapeString(const std::string &Label)"
  },
  {
    "label": "getColorString()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getColorString(unsigned NodeNumber)"
  },
  {
    "label": "DisplayGraph()",
    "kind": "Method",
    "detail": "Function (} namespace GraphProgram { enum Name { DOT,FDP,NEATO,TWOPI,CIRCO } ; } bool)",
    "insertText": "DisplayGraph(StringRef Filename, bool wait = true, GraphProgram::Name program = GraphProgram::DOT)"
  },
  {
    "label": "getEdgeSourceLabels()",
    "kind": "Method",
    "detail": "Function (template<GraphType> class GraphWriter { raw_ostream& O ; const GraphType& G ; typedef DOTGraphTraits<GraphType> DOTTraits ; typedef GraphTraits<GraphType> GTraits ; typedef GTraits::NodeType NodeType ; typedef GTraits::nodes_iterator node_iterator ; typedef GTraits::ChildIteratorType child_iterator ; DOTTraits DTraits ; bool)",
    "insertText": "getEdgeSourceLabels(raw_ostream &O, NodeType *Node)"
  },
  {
    "label": "child_begin()",
    "kind": "Method",
    "detail": "Function (child_iterator EI =)",
    "insertText": "child_begin(Node)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (child_iterator EE =)",
    "insertText": "child_end(Node)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool hasEdgeSourceLabels = false ;)",
    "insertText": "for(unsigned i = 0; EI != EE && i != 64; ++EI, ++i)"
  },
  {
    "label": "getEdgeSourceLabel()",
    "kind": "Method",
    "detail": "Function (std::string label = DTraits .)",
    "insertText": "getEdgeSourceLabel(Node, EI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (hasEdgeSourceLabels = true ;)",
    "insertText": "if(i)"
  },
  {
    "label": "EscapeString()",
    "kind": "Method",
    "detail": "Function (O<<\"<s \"<<i<<\"> \"<<)",
    "insertText": "EscapeString(label)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EI != EE && hasEdgeSourceLabels)"
  },
  {
    "label": "DOTTraits()",
    "kind": "Method",
    "detail": "Function (DTraits =)",
    "insertText": "DOTTraits(SN)"
  },
  {
    "label": "writeGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeGraph(const std::string &Title = \"\")"
  },
  {
    "label": "writeHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeHeader(Title)"
  },
  {
    "label": "writeNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeNodes()"
  },
  {
    "label": "writeFooter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeFooter()"
  },
  {
    "label": "writeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeHeader(const std::string &Title)"
  },
  {
    "label": "getGraphName()",
    "kind": "Method",
    "detail": "Function (std::string GraphName = DTraits .)",
    "insertText": "getGraphName(G)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ n \" ; else)",
    "insertText": "if(!GraphName.empty()) O << \"digraph \\\"\" << DOT::EscapeString(GraphName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ n \" ; else O<<\" digraph unnamed { \\ n \" ;)",
    "insertText": "if(DTraits.renderGraphFromBottomUp())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ n \" ;)",
    "insertText": "if(!Title.empty()) O << \"\\tlabel=\\\"\" << DOT::EscapeString(Title)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ n \" ; else)",
    "insertText": "if(!GraphName.empty()) O << \"\\tlabel=\\\"\" << DOT::EscapeString(GraphName)"
  },
  {
    "label": "getGraphProperties()",
    "kind": "Method",
    "detail": "Function (\\ n \" ; O<<DTraits .)",
    "insertText": "getGraphProperties(G)"
  },
  {
    "label": "isNodeHidden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNodeHidden(NodeType &Node)"
  },
  {
    "label": "isNodeHidden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNodeHidden(NodeType *const *Node)"
  },
  {
    "label": "isNodeHidden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNodeHidden(NodeType *Node)"
  },
  {
    "label": "writeNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeNode(NodeType& Node)"
  },
  {
    "label": "writeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeNode(&Node)"
  },
  {
    "label": "writeNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeNode(NodeType *const *Node)"
  },
  {
    "label": "writeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeNode(*Node)"
  },
  {
    "label": "writeNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeNode(NodeType *Node)"
  },
  {
    "label": "getNodeAttributes()",
    "kind": "Method",
    "detail": "Function (std::string NodeAttributes = DTraits .)",
    "insertText": "getNodeAttributes(Node, G)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (O<<\" \\ tNode \"<<static_cast<const)",
    "insertText": "void(Node)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (O<<\" label = \\ \" { \" ;)",
    "insertText": "if(!DTraits.renderGraphFromBottomUp())"
  },
  {
    "label": "EscapeString()",
    "kind": "Method",
    "detail": "Function (O<<)",
    "insertText": "EscapeString(DTraits.getNodeLabel(Node, G))"
  },
  {
    "label": "getNodeDescription()",
    "kind": "Method",
    "detail": "Function (std::string NodeDesc = DTraits .)",
    "insertText": "getNodeDescription(Node, G)"
  },
  {
    "label": "EdgeSourceLabels()",
    "kind": "Method",
    "detail": "Function (} std::string edgeSourceLabels ; raw_string_ostream)",
    "insertText": "EdgeSourceLabels(edgeSourceLabels)"
  },
  {
    "label": "getEdgeSourceLabels()",
    "kind": "Method",
    "detail": "Function (bool hasEdgeSourceLabels =)",
    "insertText": "getEdgeSourceLabels(EdgeSourceLabels, Node)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (O<<\" { \"<<EdgeSourceLabels .)",
    "insertText": "str()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DTraits.hasEdgeDestLabels())"
  },
  {
    "label": "numEdgeDestLabels()",
    "kind": "Method",
    "detail": "Function (O<<\" | { \" ; unsigned i = 0,e = DTraits .)",
    "insertText": "numEdgeDestLabels(Node)"
  },
  {
    "label": "EscapeString()",
    "kind": "Method",
    "detail": "Function (O<<\"<d \"<<i<<\"> \"<<)",
    "insertText": "EscapeString(DTraits.getEdgeDestLabel(Node, i))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(i != e)"
  },
  {
    "label": "writeEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeEdge(NodeType *Node, unsigned edgeidx, child_iterator EI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int DestPort = - 1 ;)",
    "insertText": "if(DTraits.edgeTargetsEdgeSource(Node, EI))"
  },
  {
    "label": "getEdgeTarget()",
    "kind": "Method",
    "detail": "Function (child_iterator TargetIt = DTraits .)",
    "insertText": "getEdgeTarget(Node, EI)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "Offset(unsigned)std::distance(GTraits::child_begin(TargetNode), TargetIt)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (DestPort = static_cast<)",
    "insertText": "int(Offset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DTraits.getEdgeSourceLabel(Node, EI).empty())"
  },
  {
    "label": "emitEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitEdge(static_cast<const void*>(Node), edgeidx, static_cast<const void*>(TargetNode), DestPort, DTraits.getEdgeAttributes(Node, EI, G))"
  },
  {
    "label": "emitSimpleNode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "emitSimpleNode(const void *ID, const std::string &Attr, const std::string &Label, unsigned NumEdgeSources = 0, const std::vector<std::string> *EdgeSourceLabels = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (O<<\" \\ tNode \"<<ID<<\" [ \" ;)",
    "insertText": "if(!Attr.empty())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (O<<\" label = \\ \" \" ;)",
    "insertText": "if(NumEdgeSources)"
  },
  {
    "label": "EscapeString()",
    "kind": "Method",
    "detail": "Function (\" ; O<<)",
    "insertText": "EscapeString(Label)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (O<<\" | { \" ;)",
    "insertText": "for(unsigned i = 0; i != NumEdgeSources; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (O<<\"<s \"<<i<<\"> \" ;)",
    "insertText": "if(EdgeSourceLabels) O << DOT::EscapeString((*EdgeSourceLabels)[i])"
  },
  {
    "label": "emitEdge()",
    "kind": "Method",
    "detail": "Function (} O<<\" } } \" ; } O<<\" \\ \" ] ; \\ n \" ; } void)",
    "insertText": "emitEdge(const void *SrcNodeID, int SrcNodePort, const void *DestNodeID, int DestNodePort, const std::string &Attrs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (O<<\" \\ tNode \"<<SrcNodeID ;)",
    "insertText": "if(SrcNodePort >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (O<<\" -> Node \"<<DestNodeID ;)",
    "insertText": "if(DestNodePort >= 0 && DTraits.hasEdgeDestLabels())"
  },
  {
    "label": "getOStream()",
    "kind": "Method",
    "detail": "Function (O<<\" ; \\ n \" ; } raw_ostream&)",
    "insertText": "getOStream()"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (GraphWriter<GraphType>)",
    "insertText": "W(O, G, ShortNames)"
  },
  {
    "label": "writeGraph()",
    "kind": "Method",
    "detail": "Function (W .)",
    "insertText": "writeGraph(Title.str())"
  },
  {
    "label": "WriteGraph()",
    "kind": "Method",
    "detail": "Function (template<GraphType> std::string)",
    "insertText": "WriteGraph(const GraphType &G, const Twine &Name, bool ShortNames = false, const Twine &Title = \"\")"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (N = N .)",
    "insertText": "substr(0, std::min<std::size_t>(N.size(), 140))"
  },
  {
    "label": "createGraphFilename()",
    "kind": "Method",
    "detail": "Function (std::string Filename =)",
    "insertText": "createGraphFilename(N, FD)"
  },
  {
    "label": "O()",
    "kind": "Method",
    "detail": "Function (raw_fd_ostream)",
    "insertText": "O(FD, true)"
  },
  {
    "label": "errs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "errs()"
  },
  {
    "label": "WriteGraph()",
    "kind": "Method",
    "detail": "Function (std::string Filename =)",
    "insertText": "WriteGraph(G, Name, ShortNames, Title)"
  },
  {
    "label": "DisplayGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayGraph(Filename, false, Program)"
  }
]