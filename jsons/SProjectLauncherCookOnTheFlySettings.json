[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SProjectLauncherCookOnTheFlySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherCookOnTheFlySettings"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Models / ProjectLauncherModel . h \" class Error ; enum class ECheckBoxState : uint8 ; class SProjectLauncherCookOnTheFlySettings : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherCookOnTheFlySettings)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: ~SProjectLauncherCookOnTheFlySettings()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel)"
  },
  {
    "label": "HandleIncrementalCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleIncrementalCheckBoxCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "HandleIncrementalCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleIncrementalCheckBoxIsChecked()"
  },
  {
    "label": "HandleProfileManagerProfileSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProfileManagerProfileSelected(const ILauncherProfilePtr& SelectedProfile, const ILauncherProfilePtr& PreviousProfile)"
  },
  {
    "label": "HandleValidationErrorIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleValidationErrorIconVisibility(ELauncherProfileValidationErrors::Type Error)"
  },
  {
    "label": "HandleCookOptionsTextBlockText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleCookOptionsTextBlockText()"
  },
  {
    "label": "HandleCookerOptionsCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCookerOptionsCommitted(const FText& NewText, ETextCommit::Type CommitType)"
  }
]