[
  {
    "label": "solve_assertion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "solve_assertion"
  },
  {
    "label": "SolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SolverBase"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "generic_xpr_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_xpr_base"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SOLVERBASE_H # define EIGEN_SOLVERBASE_H namespace Eigen { namespace internal { template<Derived> struct solve_assertion { template<bool Transpose_,Rhs> void)",
    "insertText": "run(const Derived& solver, const Rhs& b)"
  },
  {
    "label": "Transpose_()",
    "kind": "Method",
    "detail": "Function (solver . template _check_solve_assertion<)",
    "insertText": "Transpose_(b)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived> struct solve_assertion<Transpose<Derived>> { typedef Transpose<Derived> type ; template<bool Transpose_,Rhs> void)",
    "insertText": "run(const type& transpose, const Rhs& b)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (internal::solve_assertion<internal::remove_all<Derived>::type>::template run<)",
    "insertText": "true(transpose.nestedExpression(), b)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Derived> struct solve_assertion<CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<Scalar>,const Transpose<Derived>>> { typedef CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<Scalar>,const Transpose<Derived>> type ; template<bool Transpose_,Rhs> void)",
    "insertText": "run(const type& adjoint, const Rhs& b)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (internal::solve_assertion<internal::remove_all<Transpose<Derived>>::type>::template run<)",
    "insertText": "true(adjoint.nestedExpression(), b)"
  },
  {
    "label": "SizeAtCompileTime()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> class SolverBase : public EigenBase<Derived> { public : typedef EigenBase<Derived> Base ; typedef internal::traits<Derived>::Scalar Scalar ; typedef Scalar CoeffReturnType ; template<Derived_> struct internal::solve_assertion ; enum { RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,)",
    "insertText": "SizeAtCompileTime(internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime, internal::traits<Derived>::ColsAtCompileTime>::ret), MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime, MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime, MaxSizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::MaxRowsAtCompileTime, internal::traits<Derived>::MaxColsAtCompileTime>::ret), IsVectorAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime == 1 || internal::traits<Derived>::MaxColsAtCompileTime == 1, NumDimensions = int(MaxSizeAtCompileTime) == 1 ? 0 : bool(IsVectorAtCompileTime)"
  },
  {
    "label": "SolverBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolverBase()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} using Base::derived ; template<Rhs> const Solve<Derived,Rhs>)",
    "insertText": "solve(const MatrixBase<Rhs>& b)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (internal::solve_assertion<internal::remove_all<Derived>::type>::template run<)",
    "insertText": "false(derived(), b)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} typedef internal::add_const<Transpose<const Derived>>::type ConstTransposeReturnType ; ConstTransposeReturnType)",
    "insertText": "transpose()"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} typedef internal::conditional<NumTraits<Scalar>::IsComplex,CwiseUnaryOp<internal::scalar_conjugate_op<Scalar>,ConstTransposeReturnType>,ConstTransposeReturnType>::type AdjointReturnType ; AdjointReturnType)",
    "insertText": "adjoint()"
  },
  {
    "label": "_check_solve_assertion()",
    "kind": "Method",
    "detail": "Function (} protected : template<bool Transpose_,Rhs> void)",
    "insertText": "_check_solve_assertion(const Rhs& b)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(b)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(derived().m_isInitialized && \"Solver is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((Transpose_?derived().cols():derived().rows())==b.rows() && \"SolverBase::solve(): invalid number of rows of the right hand side matrix b\")"
  }
]