[
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "MemoryReclaimerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryReclaimerTest"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_MEMORY_RECLAIMER_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_MEMORY_RECLAIMER_H_ # include<memory> # include<set> # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / no_destructor . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / time / time . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_lock . h \" namespace partition_alloc { class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (public : MemoryReclaimer*)",
    "insertText": "Instance()"
  },
  {
    "label": "MemoryReclaimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryReclaimer(const MemoryReclaimer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MemoryReclaimer&)",
    "insertText": "operator(const MemoryReclaimer&)"
  },
  {
    "label": "RegisterPartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPartition(PartitionRoot<>* partition)"
  },
  {
    "label": "UnregisterPartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPartition(PartitionRoot<>* partition)"
  },
  {
    "label": "ReclaimNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReclaimNormal()"
  },
  {
    "label": "GetRecommendedReclaimIntervalInMicroseconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetRecommendedReclaimIntervalInMicroseconds()"
  },
  {
    "label": "ReclaimAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReclaimAll()"
  },
  {
    "label": "MemoryReclaimer()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "MemoryReclaimer()"
  },
  {
    "label": "Reclaim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reclaim(int flags)"
  },
  {
    "label": "ReclaimAndReschedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReclaimAndReschedule()"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "PA_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (internal::Lock lock_ ; std::set<PartitionRoot<>*> partitions_)",
    "insertText": "PA_GUARDED_BY(lock_)"
  }
]