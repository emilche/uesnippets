[
  {
    "label": "UGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollection"
  },
  {
    "label": "UGeometryCollectionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollectionComponent"
  },
  {
    "label": "FGeometryCollectionSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionSection"
  },
  {
    "label": "FResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResources"
  },
  {
    "label": "FGeometryCollectionTransformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionTransformBuffer"
  },
  {
    "label": "FGeometryCollectionDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionDynamicData"
  },
  {
    "label": "FGeometryCollectionDynamicDataPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionDynamicDataPool"
  },
  {
    "label": "FGeometryCollectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionSceneProxy"
  },
  {
    "label": "FNaniteGeometryCollectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteGeometryCollectionSceneProxy"
  },
  {
    "label": "FGeometryNaniteData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryNaniteData"
  },
  {
    "label": "FEmptyLightCacheInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmptyLightCacheInfo"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMeshBuilder . h \" # include \" EngineGlobals . h \" # include \" HAL / CriticalSection . h \" # include \" PrimitiveViewRelevance . h \" # include \" PrimitiveSceneProxy . h \" # include \" StaticMeshResources . h \" # include \" Rendering / SkinWeightVertexBuffer . h \" # include \" GeometryCollectionRendering . h \" # include \" GeometryCollection / GeometryCollectionEditorSelection . h \" # include \" HitProxies . h \" # include \" EngineUtils . h \" # include \" NaniteSceneProxy . h \" # include \" GeometryCollection / GeometryCollectionObject . h \" # include \" GeometryCollection / GeometryCollectionRenderData . h \" # include \" GeometryCollection / GeometryCollectionHitProxy . h \" # include \" InstanceDataSceneProxy . h \" class UGeometryCollection ; class UGeometryCollectionComponent ; struct FGeometryCollectionSection ; namespace Nanite { struct FResources ; } class FGeometryCollectionTransformBuffer : public FVertexBuffer { public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"FGeometryCollectionTransformBuffer\"))"
  },
  {
    "label": "CreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (VertexBufferRHI = RHICmdList .)",
    "insertText": "CreateVertexBuffer(NumTransforms * sizeof(FVector4f) * 4, BUF_Dynamic | BUF_ShaderResource, CreateInfo)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (VertexBufferSRV = RHICmdList .)",
    "insertText": "CreateShaderResourceView(VertexBufferRHI, 16, PF_A32B32G32R32F)"
  },
  {
    "label": "UpdateDynamicData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateDynamicData(FRHICommandListBase& RHICmdList, const TArray<FMatrix44f>& Transforms, EResourceLockMode LockMode)"
  },
  {
    "label": "CopyTransformsWithConversionWhenNeeded()",
    "kind": "Method",
    "detail": "Function (int32 NumTransforms ; FShaderResourceViewRHIRef VertexBufferSRV ; } ; void)",
    "insertText": "CopyTransformsWithConversionWhenNeeded(TArray<FMatrix44f>& DstTransforms, const TArray<FMatrix>& SrcTransforms)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (DstTransforms .)",
    "insertText": "SetNumUninitialized(SrcTransforms.Num())"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (DstTransforms [ TransformIndex ] =)",
    "insertText": "FMatrix44f(SrcTransforms[TransformIndex])"
  },
  {
    "label": "CopyTransformsWithConversionWhenNeeded()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CopyTransformsWithConversionWhenNeeded(TArray<FMatrix44f>& DstTransforms, const TArray<FTransform>& SrcTransforms)"
  },
  {
    "label": "FTransform3f()",
    "kind": "Method",
    "detail": "Function (DstTransforms [ TransformIndex ] =)",
    "insertText": "FTransform3f(SrcTransforms[TransformIndex]).ToMatrixWithScale()"
  },
  {
    "label": "CopyTransformsWithConversionWhenNeeded()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CopyTransformsWithConversionWhenNeeded(TArray<FMatrix44f>& DstTransforms, const TArray<FTransform3f>& SrcTransforms)"
  },
  {
    "label": "ToMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (DstTransforms [ TransformIndex ] = SrcTransforms [ TransformIndex ] .)",
    "insertText": "ToMatrixWithScale()"
  },
  {
    "label": "FGeometryCollectionDynamicData()",
    "kind": "Method",
    "detail": "Function (} } struct FGeometryCollectionDynamicData { TArray<FMatrix44f> Transforms ; uint64 FrameIndex = 0 ;)",
    "insertText": "FGeometryCollectionDynamicData()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetTransforms()",
    "kind": "Method",
    "detail": "Function (FrameIndex = GFrameCounter ; } void)",
    "insertText": "SetTransforms(const TArray<FTransform>& InTransforms)"
  },
  {
    "label": "CopyTransformsWithConversionWhenNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTransformsWithConversionWhenNeeded(Transforms, InTransforms)"
  },
  {
    "label": "SetTransforms()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransforms(const TArray<FTransform3f>& InTransforms)"
  },
  {
    "label": "FGeometryCollectionDynamicDataPool()",
    "kind": "Method",
    "detail": "Function (} } ; class FGeometryCollectionDynamicDataPool { public :)",
    "insertText": "FGeometryCollectionDynamicDataPool()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionDynamicData*)",
    "insertText": "Allocate()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(FGeometryCollectionDynamicData* DynamicData)"
  },
  {
    "label": "FGeometryCollectionSceneProxy()",
    "kind": "Method",
    "detail": "Function (private : TArray<FGeometryCollectionDynamicData*> UsedList ; TArray<FGeometryCollectionDynamicData*> FreeList ; FCriticalSection ListLock ; } ; class FGeometryCollectionSceneProxy final : public FPrimitiveSceneProxy { TArray<UMaterialInterface*> Materials ; FMaterialRelevance MaterialRelevance ; FGeometryCollectionMeshResources const& MeshResource ; FGeometryCollectionMeshDescription MeshDescription ; int32 NumTransforms = 0 ; TSharedPtr<FGeometryCollection,ESPMode::ThreadSafe> GeometryCollection ; FCollisionResponseContainer CollisionResponse ; FBoxSphereBounds PreSkinnedBounds ; FGeometryCollectionVertexFactory VertexFactory ; bool bSupportsManualVertexFetch ; FPositionVertexBuffer SkinnedPositionVertexBuffer ; int32 CurrentTransformBufferIndex = 0 ; bool bSupportsTripleBufferVertexUpload = false ; bool bRenderResourcesCreated = false ; TArray<FGeometryCollectionTransformBuffer,TInlineAllocator<3>> TransformBuffers ; FGeometryCollectionDynamicData* DynamicData = nullptr ; # if WITH_EDITOR bool bShowBoneColors = false ; bool bSuppressSelectionMaterial = false ; TArray<FColor> BoneColors ; FColorVertexBuffer ColorVertexBuffer ; FGeometryCollectionVertexFactory VertexFactoryDebugColor ; UMaterialInterface* BoneSelectedMaterial = nullptr ; # endif # if GEOMETRYCOLLECTION_EDITOR_SELECTION bool bUsesSubSections = false ; bool bEnableBoneSelection = false ; TArray<TRefCountPtr<HHitProxy>> HitProxies ; FColorVertexBuffer HitProxyIdBuffer ; # endif # if RHI_RAYTRACING bool bGeometryResourceUpdated = false ; FRayTracingGeometry RayTracingGeometry ; FRWBuffer RayTracingDynamicVertexBuffer ; # endif public :)",
    "insertText": "FGeometryCollectionSceneProxy(UGeometryCollectionComponent* Component)"
  },
  {
    "label": "FGeometryCollectionSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGeometryCollectionSceneProxy()"
  },
  {
    "label": "SetDynamicData_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicData_RenderThread(FRHICommandListBase& RHICmdList, FGeometryCollectionDynamicData* NewDynamicData)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryFootprint()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "CreateRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderThreadResources(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "DestroyRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderThreadResources()"
  },
  {
    "label": "GetPreSkinnedLocalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreSkinnedLocalBounds(FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "AllowInstanceCullingOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowInstanceCullingOcclusionQueries()"
  },
  {
    "label": "GetCustomHitProxyIdBuffer()",
    "kind": "Method",
    "detail": "Function (const FColorVertexBuffer*)",
    "insertText": "GetCustomHitProxyIdBuffer()"
  },
  {
    "label": "IsRayTracingRelevant()",
    "kind": "Method",
    "detail": "Function (} # endif # if RHI_RAYTRACING bool)",
    "insertText": "IsRayTracingRelevant()"
  },
  {
    "label": "SetupVertexFactory()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "SetupVertexFactory(FRHICommandListBase& RHICmdList, FGeometryCollectionVertexFactory& GeometryCollectionVertexFactory, FColorVertexBuffer* ColorOverride = nullptr)"
  },
  {
    "label": "UpdateSkinnedPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkinnedPositions(FRHICommandListBase& RHICmdList, TArray<FMatrix44f> const& Transforms)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (FMaterialRenderProxy*)",
    "insertText": "GetMaterial(FMeshElementCollector& Collector, int32 MaterialIndex)"
  },
  {
    "label": "GetVertexFactory()",
    "kind": "Method",
    "detail": "Function (FVertexFactory const*)",
    "insertText": "GetVertexFactory()"
  },
  {
    "label": "GetCurrentTransformBuffer()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionTransformBuffer&)",
    "insertText": "GetCurrentTransformBuffer()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumBuffers = TransformBuffers .)",
    "insertText": "Num()"
  },
  {
    "label": "PreviousIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "PreviousIndex(CurrentTransformBufferIndex + NumBuffers - 1)"
  },
  {
    "label": "CurrentTransformBufferIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentTransformBufferIndex(CurrentTransformBufferIndex + 1) % TransformBuffers.Num()"
  },
  {
    "label": "UpdatingRayTracingGeometry_RenderingThread()",
    "kind": "Method",
    "detail": "Function (} } # if RHI_RAYTRACING void)",
    "insertText": "UpdatingRayTracingGeometry_RenderingThread(TArray<FGeometryCollectionMeshElement> const& InSectionArray)"
  },
  {
    "label": "ShowCollisionMeshes()",
    "kind": "Method",
    "detail": "Function (# endif private : bool)",
    "insertText": "ShowCollisionMeshes(const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "FNaniteGeometryCollectionSceneProxy()",
    "kind": "Method",
    "detail": "Function (} ; class FNaniteGeometryCollectionSceneProxy : public Nanite::FSceneProxyBase { public : using Super = Nanite::FSceneProxyBase ;)",
    "insertText": "FNaniteGeometryCollectionSceneProxy(UGeometryCollectionComponent* Component)"
  },
  {
    "label": "FNaniteGeometryCollectionSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNaniteGeometryCollectionSceneProxy()"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (# if GEOMETRYCOLLECTION_EDITOR_SELECTION HHitProxy*)",
    "insertText": "CreateHitProxies(UPrimitiveComponent* Component, TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "DrawStaticElements()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DrawStaticElements(FStaticPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetNaniteResourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNaniteResourceInfo(uint32& ResourceID, uint32& HierarchyOffset, uint32& ImposterIndex)"
  },
  {
    "label": "GetResourceMeshInfo()",
    "kind": "Method",
    "detail": "Function (Nanite::FResourceMeshInfo)",
    "insertText": "GetResourceMeshInfo()"
  },
  {
    "label": "SetDynamicData_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicData_RenderThread(FGeometryCollectionDynamicData* NewDynamicData, const FMatrix &PrimitiveLocalToWorld)"
  },
  {
    "label": "ResetPreviousTransforms_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPreviousTransforms_RenderThread()"
  },
  {
    "label": "FlushGPUSceneUpdate_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushGPUSceneUpdate_GameThread()"
  },
  {
    "label": "GetRequiresGPUSceneUpdate_RenderThread()",
    "kind": "Method",
    "detail": "Function (bRequiresGPUSceneUpdate = bRequireUpdate ; } bool)",
    "insertText": "GetRequiresGPUSceneUpdate_RenderThread()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FLightCacheInterface* LCI =& EmptyLightCacheInfo ; LCIs .)",
    "insertText": "Add(LCI)"
  },
  {
    "label": "GetInteraction()",
    "kind": "Method",
    "detail": "Function (} protected : const UGeometryCollection* GeometryCollection = nullptr ; FCollisionResponseContainer CollisionResponse ; struct FGeometryNaniteData { FBoxSphereBounds LocalBounds ; uint32 HierarchyOffset ; } ; TArray<FGeometryNaniteData> GeometryNaniteData ; uint32 NaniteResourceID = INDEX_NONE ; uint32 NaniteHierarchyOffset = INDEX_NONE ; FMaterialRelevance MaterialRelevance ; uint32 bCastShadow : 1 ; uint32 bReverseCulling : 1 ; uint32 bHasMaterialErrors : 1 ; uint32 bRequiresGPUSceneUpdate : 1 ; uint32 bEnableBoneSelection : 1 ; # if GEOMETRYCOLLECTION_EDITOR_SELECTION TArray<TRefCountPtr<HHitProxy>> HitProxies ; # endif FInstanceSceneDataBuffers InstanceSceneDataBuffersImpl ; FGeometryCollectionDynamicData* DynamicData = nullptr ; class FEmptyLightCacheInfo : public FLightCacheInterface { public : FLightInteraction)",
    "insertText": "GetInteraction(const FLightSceneProxy* LightSceneProxy)"
  }
]