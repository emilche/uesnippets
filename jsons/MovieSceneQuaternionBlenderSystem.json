[
  {
    "label": "FQuatTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuatTransform"
  },
  {
    "label": "FQuaternionBlenderAccumulationBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuaternionBlenderAccumulationBuffers"
  },
  {
    "label": "UMovieSceneQuaternionBlenderSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneQuaternionBlenderSystem"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / SortedMap . h \" # include \" EntitySystem / MovieSceneBlenderSystem . h \" # include \" EntitySystem / MovieSceneCachedEntityFilterResult . h \" # include \" EntitySystem / MovieSceneDecompositionQuery . h \" # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" MovieSceneQuaternionBlenderSystem . generated . h \" namespace UE::MovieScene { struct FQuatTransform { FVector Translation ; FQuat Rotation ; FVector Scale ; } ; struct FQuaternionBlenderAccumulationBuffers { TSparseArray<double> AbsoluteWeights ; TArray<FQuatTransform> Absolutes ; TArray<FQuatTransform> Additives ; } ; })",
    "insertText": "UCLASS(DisplayName=\"Shortest Rotation (quaternion slerp)\", meta=(Tooltip=\"Uses a quaternion spherical interpolation (slerp) to blend between transforms using the shortest rotation path. Does not support over-rotation.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() MOVIESCENETRACKS_API UMovieSceneQuaternionBlenderSystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "OnSchedulePersistentTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSchedulePersistentTasks(UE::MovieScene::IEntitySystemScheduler* TaskScheduler)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "DispatchDecomposeTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "DispatchDecomposeTask(const UE::MovieScene::FValueDecompositionParams& Params, UE::MovieScene::FAlignedDecomposedValue* Output)"
  }
]