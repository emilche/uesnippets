[
  {
    "label": "GenericPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericPointer"
  },
  {
    "label": "Token",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Token"
  },
  {
    "label": "PercentDecodeStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PercentDecodeStream"
  },
  {
    "label": "PercentEncodeStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PercentEncodeStream"
  },
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_POINTER_H_ # define RAPIDJSON_POINTER_H_ # include \" document . h \" # include \" uri . h \" # include \" internal / itoa . h \" # include \" error / error . h \" # ifdef __clang__ RAPIDJSON_DIAG_PUSH)",
    "insertText": "RAPIDJSON_DIAG_OFF(switch-enum) #elif defined(_MSC_VER) RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(4512) #endif RAPIDJSON_NAMESPACE_BEGIN static const SizeType kPointerInvalidIndex = ~SizeType(0)"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (template<ValueType,Allocator = CrtAllocator> class GenericPointer { public : typedef ValueType::EncodingType EncodingType ; typedef ValueType::Ch Ch ; typedef GenericUri<ValueType,Allocator> UriType ; struct Token { const Ch* name ; SizeType length ; SizeType index ; } ;)",
    "insertText": "GenericPointer(Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone)"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericPointer(const Ch* source, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(source, internal::StrLen(source))"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING)",
    "insertText": "GenericPointer(const std::basic_string<Ch>& source, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(source.c_str(), source.size())"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "GenericPointer(const Ch* source, size_t length, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(source, length)"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericPointer(const Token* tokens, size_t tokenCount) : allocator_(), ownAllocator_(), nameBuffer_(), tokens_(const_cast<Token*>(tokens)), tokenCount_(tokenCount), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone)"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericPointer(const GenericPointer& rhs) : allocator_(), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone)"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (* this = rhs ; })",
    "insertText": "GenericPointer(const GenericPointer& rhs, Allocator* allocator) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone)"
  },
  {
    "label": "GenericPointer()",
    "kind": "Method",
    "detail": "Function (* this = rhs ; } ~)",
    "insertText": "GenericPointer()"
  },
  {
    "label": "RAPIDJSON_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_DELETE(ownAllocator_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GenericPointer&)",
    "insertText": "operator(const GenericPointer& rhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tokenCount_ = rhs . tokenCount_ ; parseErrorOffset_ = rhs . parseErrorOffset_ ; parseErrorCode_ = rhs . parseErrorCode_ ;)",
    "insertText": "if(rhs.nameBuffer_) CopyFromRaw(rhs)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(allocator_, other.allocator_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ownAllocator_, other.ownAllocator_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(nameBuffer_, other.nameBuffer_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(tokens_, other.tokens_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(tokenCount_, other.tokenCount_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(parseErrorOffset_, other.parseErrorOffset_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(parseErrorCode_, other.parseErrorCode_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "Swap(b)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} GenericPointer)",
    "insertText": "Append(const Token& token, Allocator* allocator = 0)"
  },
  {
    "label": "CopyFromRaw()",
    "kind": "Method",
    "detail": "Function (GenericPointer r ; r . allocator_ = allocator ; Ch* p = r .)",
    "insertText": "CopyFromRaw(*this, 1, token.length + 1)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(p, token.name, (token.length + 1) * sizeof(Ch))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (r . tokens_ [ tokenCount_ ] . name = p ; r . tokens_ [ tokenCount_ ] . length = token . length ; r . tokens_ [ tokenCount_ ] . index = token . index ; return r ; } GenericPointer)",
    "insertText": "Append(const Ch* name, SizeType length, Allocator* allocator = 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Token token = { name,length,kPointerInvalidIndex } ; return)",
    "insertText": "Append(token, allocator)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::NotExpr<internal::IsSame<typename internal::RemoveConst<T>::Type, Ch> >), (GenericPointer)) Append(T* name, Allocator* allocator = 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING GenericPointer)",
    "insertText": "Append(const std::basic_string<Ch>& name, Allocator* allocator = 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} # endif GenericPointer)",
    "insertText": "Append(SizeType index, Allocator* allocator = 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (char buffer [ 2 1 ] ; char* end =)",
    "insertText": "sizeof(SizeType) == 4 ? internal::u32toa(index, buffer) : internal::u64toa(index, buffer)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (SizeType length = static_cast<)",
    "insertText": "SizeType(end - buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ length ] = ' \\ 0 ' ;)",
    "insertText": "if(sizeof(Ch) == 1)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (Token token = { reinterpret_cast<)",
    "insertText": "Ch(buffer)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { Ch name [ 2 1 ] ;)",
    "insertText": "for(size_t i = 0; i <= length; i++) name[i] = static_cast<Ch>(buffer[i])"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } GenericPointer)",
    "insertText": "Append(const ValueType& token, Allocator* allocator = 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(token.GetUint64() <= SizeType(~0))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Stringify()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<OutputStream> bool)",
    "insertText": "Stringify(OutputStream& os)"
  },
  {
    "label": "StringifyUriFragment()",
    "kind": "Method",
    "detail": "Function (} template<OutputStream> bool)",
    "insertText": "StringifyUriFragment(OutputStream& os)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Create(ValueType& root, typename ValueType::AllocatorType& allocator, bool* alreadyExist = 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(IsValid())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueType* v =& root ; bool exist = true ;)",
    "insertText": "for(const Token *t = tokens_; t != tokens_ + tokenCount_; ++t)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (v ->)",
    "insertText": "PushBack(ValueType().Move(), allocator)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v((*v)[v->Size() - 1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (exist = false ; } else {)",
    "insertText": "if(t->index == kPointerInvalidIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!v->IsArray() && !v->IsObject()) v->SetArray()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(v->IsArray())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (v ->)",
    "insertText": "Reserve(t->index + 1, allocator)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (exist = false ; })",
    "insertText": "v((*v)[t->index])"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (} else { ValueType::MemberIterator m = v ->)",
    "insertText": "FindMember(GenericValue<EncodingType>(GenericStringRef<Ch>(t->name, t->length)))"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (v ->)",
    "insertText": "AddMember(ValueType(t->name, t->length, allocator).Move(), ValueType().Move(), allocator)"
  },
  {
    "label": "MemberEnd()",
    "kind": "Method",
    "detail": "Function (m = v ->)",
    "insertText": "MemberEnd()"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (value)",
    "insertText": "v(--m)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (exist = false ; } else v =& m -> value ; } } })",
    "insertText": "if(alreadyExist)"
  },
  {
    "label": "GetUri()",
    "kind": "Method",
    "detail": "Function (} UriType)",
    "insertText": "GetUri(ValueType& root, const UriType& rootUri, size_t* unresolvedTokenIndex = 0, Allocator* allocator = 0)"
  },
  {
    "label": "kIdValue()",
    "kind": "Method",
    "detail": "Function (const Ch kIdString [ ] = { ' i ',' d ',' \\ 0 ' } ; const ValueType)",
    "insertText": "kIdValue(kIdString, 2)"
  },
  {
    "label": "UriType()",
    "kind": "Method",
    "detail": "Function (UriType base =)",
    "insertText": "UriType(rootUri, allocator)"
  },
  {
    "label": "UriType()",
    "kind": "Method",
    "detail": "Function (UriType here =)",
    "insertText": "UriType(m->value, allocator).Resolve(base, allocator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (v =& m -> value ; } continue ; case kArrayType :)",
    "insertText": "if(t->index == kPointerInvalidIndex || t->index >= v->Size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; default : break ; })",
    "insertText": "if(unresolvedTokenIndex) *unresolvedTokenIndex = static_cast<size_t>(t - tokens_)"
  },
  {
    "label": "GetUri()",
    "kind": "Method",
    "detail": "Function (} return base ; } UriType)",
    "insertText": "GetUri(const ValueType& root, const UriType& rootUri, size_t* unresolvedTokenIndex = 0, Allocator* allocator = 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ValueType*)",
    "insertText": "Get(ValueType& root, size_t* unresolvedTokenIndex = 0)"
  },
  {
    "label": "GetWithDefault()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "GetWithDefault(ValueType& root, const ValueType& defaultValue, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool alreadyExist ; ValueType& v =)",
    "insertText": "Create(root, allocator, &alreadyExist)"
  },
  {
    "label": "GetWithDefault()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "GetWithDefault(ValueType& root, const Ch* defaultValue, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "GetWithDefault()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING ValueType&)",
    "insertText": "GetWithDefault(ValueType& root, const std::basic_string<Ch>& defaultValue, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (ValueType&)) GetWithDefault(ValueType& root, T defaultValue, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "GetWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<stackAllocator> ValueType&)",
    "insertText": "GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const ValueType& defaultValue)"
  },
  {
    "label": "GetWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<stackAllocator> ValueType&)",
    "insertText": "GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const Ch* defaultValue)"
  },
  {
    "label": "GetWithDefault()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<stackAllocator> ValueType&)",
    "insertText": "GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const std::basic_string<Ch>& defaultValue)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T,stackAllocator>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (ValueType&)) GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, T defaultValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& root, ValueType& value, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& root, const ValueType& value, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& root, const Ch* value, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING ValueType&)",
    "insertText": "Set(ValueType& root, const std::basic_string<Ch>& value, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (ValueType&)) Set(ValueType& root, T value, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<stackAllocator> ValueType&)",
    "insertText": "Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, ValueType& value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<stackAllocator> ValueType&)",
    "insertText": "Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const ValueType& value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<stackAllocator> ValueType&)",
    "insertText": "Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const Ch* value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<stackAllocator> ValueType&)",
    "insertText": "Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const std::basic_string<Ch>& value)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T,stackAllocator>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (ValueType&)) Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, T value)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Swap(ValueType& root, ValueType& value, typename ValueType::AllocatorType& allocator)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} template<stackAllocator> ValueType&)",
    "insertText": "Swap(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, ValueType& value)"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Erase(ValueType& root)"
  },
  {
    "label": "tokens_()",
    "kind": "Method",
    "detail": "Function (ValueType* v =& root ; const Token* last =)",
    "insertText": "tokens_(tokenCount_ - 1)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (break ; default : return false ; } })",
    "insertText": "switch(v->GetType())"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (v ->)",
    "insertText": "Erase(v->Begin() + last->index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (length)",
    "insertText": "for(Token *t = rhs.tokens_; t != rhs.tokens_ + rhs.tokenCount_; ++t)"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (tokenCount_ = rhs . tokenCount_ + extraToken ; tokens_ = static_cast<)",
    "insertText": "Token(allocator_->Malloc(tokenCount_ * sizeof(Token) + (nameBufferSize + extraNameBufferSize) * sizeof(Ch)))"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (nameBuffer_ = reinterpret_cast<)",
    "insertText": "Ch(tokens_ + tokenCount_)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(tokens_, rhs.tokens_, rhs.tokenCount_ * sizeof(Token))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(nameBufferSize > 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(nameBuffer_, rhs.nameBuffer_, nameBufferSize * sizeof(Ch))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t i = 0; i < rhs.tokenCount_; ++i)"
  },
  {
    "label": "NeedPercentEncode()",
    "kind": "Method",
    "detail": "Function (std::ptrdiff_t name_offset = rhs . tokens_ [ i ] . name - rhs . nameBuffer_ ; tokens_ [ i ] . name = nameBuffer_ + name_offset ; } return nameBuffer_ + nameBufferSize ; } bool)",
    "insertText": "NeedPercentEncode(Ch c)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} # ifndef __clang__ # endif void)",
    "insertText": "Parse(const Ch* source, size_t length)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(source != NULL)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(nameBuffer_ == 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(tokens_ == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (tokenCount_ = 0 ;)",
    "insertText": "for(const Ch* s = source; s != source + length; s++) if (*s == '/')"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (Token* token = tokens_ = static_cast<)",
    "insertText": "Token(allocator_->Malloc(tokenCount_ * sizeof(Token) + length * sizeof(Ch)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t i = 0 ; bool uriFragment = false ;)",
    "insertText": "if(source[i] == '#')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uriFragment = true ; i + + ; })",
    "insertText": "if(i != length && source[i] != '/')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (parseErrorCode_ = kPointerParseErrorTokenMustBeginWithSolidus ; goto error ; })",
    "insertText": "while(i < length)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(source[i] == '/')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (i + + ; token -> name = name ; bool isNumber = true ;)",
    "insertText": "while(i < length && source[i] != '/')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ch c = source [ i ] ;)",
    "insertText": "if(uriFragment)"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (PercentDecodeStream)",
    "insertText": "is(&source[i], source + length)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (GenericInsituStringStream<EncodingType>)",
    "insertText": "os(name)"
  },
  {
    "label": "PutBegin()",
    "kind": "Method",
    "detail": "Function (Ch* begin = os .)",
    "insertText": "PutBegin()"
  },
  {
    "label": "PutEnd()",
    "kind": "Method",
    "detail": "Function (parseErrorCode_ = kPointerParseErrorInvalidPercentEncoding ; goto error ; } size_t len = os .)",
    "insertText": "PutEnd(begin)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (i + = is .)",
    "insertText": "Tell()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (parseErrorCode_ = kPointerParseErrorCharacterMustPercentEncode ; goto error ; } } i + + ;)",
    "insertText": "if(c == '~')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (c = source [ i ] ;)",
    "insertText": "if(c == '0')"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (* name + + = c ; } token -> length = static_cast<)",
    "insertText": "SizeType(name - token->name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* name + + = ' \\ 0 ' ;)",
    "insertText": "if(isNumber && token->length > 1 && token->name[0] == '0')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType n = 0 ;)",
    "insertText": "if(isNumber)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (SizeType m = n* 1 0 + static_cast<)",
    "insertText": "SizeType(token->name[j] - '0')"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (isNumber = false ; break ; } n = m ; } } token -> index = isNumber ? n : kPointerInvalidIndex ; token + + ; })",
    "insertText": "RAPIDJSON_ASSERT(name <= nameBuffer_ + length)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (parseErrorCode_ = kPointerParseErrorNone ; return ; error :)",
    "insertText": "Free(tokens_)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "Put('/')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "Put('~')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "Put('0')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(c == '/')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "Put('1')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(uriFragment && NeedPercentEncode(c))"
  },
  {
    "label": "source()",
    "kind": "Method",
    "detail": "Function (GenericStringStream<ValueType::EncodingType>)",
    "insertText": "source(&t->name[j])"
  },
  {
    "label": "target()",
    "kind": "Method",
    "detail": "Function (PercentEncodeStream<OutputStream>)",
    "insertText": "target(os)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} else os .)",
    "insertText": "Put(c)"
  },
  {
    "label": "PercentDecodeStream()",
    "kind": "Method",
    "detail": "Function (} } return true ; } class PercentDecodeStream { public : typedef ValueType::Ch Ch ;)",
    "insertText": "PercentDecodeStream(const Ch* source, const Ch* end) : src_(source), head_(source), end_(end), valid_(true)"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (} Ch)",
    "insertText": "Take()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (valid_ = false ; return 0 ; } src_ + + ; Ch c = 0 ;)",
    "insertText": "for(int j = 0; j < 2; j++)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (c = static_cast<)",
    "insertText": "Ch(c << 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ch h =* src_ ;)",
    "insertText": "if(h >= '0' && h <= '9') c = static_cast<Ch>(c + h - '0')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Put(char c)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (unsigned char u = static_cast<unsigned)",
    "insertText": "char(c)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (const char hexDigits [ 1 6 ] = { ' 0 ',' 1 ',' 2 ',' 3 ',' 4 ',' 5 ',' 6 ',' 7 ',' 8 ',' 9 ',' A ',' B ',' C ',' D ',' E ',' F ' } ; os_ .)",
    "insertText": "Put('%')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os_ .)",
    "insertText": "Put(static_cast<typename OutputStream::Ch>(hexDigits[u >> 4]))"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (os_ .)",
    "insertText": "Put(static_cast<typename OutputStream::Ch>(hexDigits[u & 15]))"
  },
  {
    "label": "CreateValueByPointer()",
    "kind": "Method",
    "detail": "Function (} private : OutputStream& os_ ; } ; Allocator* allocator_ ; Allocator* ownAllocator_ ; Ch* nameBuffer_ ; Token* tokens_ ; size_t tokenCount_ ; size_t parseErrorOffset_ ; PointerParseErrorCode parseErrorCode_ ; } ; typedef GenericPointer<Value> Pointer ; template<T> T::ValueType&)",
    "insertText": "CreateValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::AllocatorType& a)"
  },
  {
    "label": "CreateValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "CreateValueByPointer(T& root, const CharType(&source)[N], typename T::AllocatorType& a)"
  },
  {
    "label": "CreateValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType> DocumentType::ValueType&)",
    "insertText": "CreateValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer)"
  },
  {
    "label": "CreateValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "CreateValueByPointer(DocumentType& document, const CharType(&source)[N])"
  },
  {
    "label": "GetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T> T::ValueType*)",
    "insertText": "GetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, size_t* unresolvedTokenIndex = 0)"
  },
  {
    "label": "GetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T> const T::ValueType*)",
    "insertText": "GetValueByPointer(const T& root, const GenericPointer<typename T::ValueType>& pointer, size_t* unresolvedTokenIndex = 0)"
  },
  {
    "label": "GetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType*)",
    "insertText": "GetValueByPointer(T& root, const CharType (&source)[N], size_t* unresolvedTokenIndex = 0)"
  },
  {
    "label": "GetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> const T::ValueType*)",
    "insertText": "GetValueByPointer(const T& root, const CharType(&source)[N], size_t* unresolvedTokenIndex = 0)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<T> T::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::ValueType& defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<T> T::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::Ch* defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<T> T::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const std::basic_string<typename T::Ch>& defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename T::ValueType&)) GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, T2 defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const typename T::ValueType& defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const typename T::Ch* defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const std::basic_string<typename T::Ch>& defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T,CharType,size_t N,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename T::ValueType&)) GetValueByPointerWithDefault(T& root, const CharType(&source)[N], T2 defaultValue, typename T::AllocatorType& a)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType> DocumentType::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::ValueType& defaultValue)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType> DocumentType::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::Ch* defaultValue)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<DocumentType> DocumentType::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const std::basic_string<typename DocumentType::Ch>& defaultValue)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<DocumentType,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename DocumentType::ValueType&)) GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, T2 defaultValue)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const typename DocumentType::ValueType& defaultValue)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const typename DocumentType::Ch* defaultValue)"
  },
  {
    "label": "GetValueByPointerWithDefault()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const std::basic_string<typename DocumentType::Ch>& defaultValue)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<DocumentType,CharType,size_t N,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename DocumentType::ValueType&)) GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], T2 defaultValue)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::ValueType& value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::ValueType& value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::Ch* value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<T> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const std::basic_string<typename T::Ch>& value, typename T::AllocatorType& a)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename T::ValueType&)) SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, T2 value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const CharType(&source)[N], typename T::ValueType& value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const CharType(&source)[N], const typename T::ValueType& value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const CharType(&source)[N], const typename T::Ch* value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "SetValueByPointer(T& root, const CharType(&source)[N], const std::basic_string<typename T::Ch>& value, typename T::AllocatorType& a)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T,CharType,size_t N,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename T::ValueType&)) SetValueByPointer(T& root, const CharType(&source)[N], T2 value, typename T::AllocatorType& a)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, typename DocumentType::ValueType& value)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::ValueType& value)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::Ch* value)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<DocumentType> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const std::basic_string<typename DocumentType::Ch>& value)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<DocumentType,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename DocumentType::ValueType&)) SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, T2 value)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const CharType(&source)[N], typename DocumentType::ValueType& value)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const CharType(&source)[N], const typename DocumentType::ValueType& value)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const CharType(&source)[N], const typename DocumentType::Ch* value)"
  },
  {
    "label": "SetValueByPointer()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "SetValueByPointer(DocumentType& document, const CharType(&source)[N], const std::basic_string<typename DocumentType::Ch>& value)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<DocumentType,CharType,size_t N,T2>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T2>, internal::IsGenericValue<T2> >), (typename DocumentType::ValueType&)) SetValueByPointer(DocumentType& document, const CharType(&source)[N], T2 value)"
  },
  {
    "label": "SwapValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T> T::ValueType&)",
    "insertText": "SwapValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::ValueType& value, typename T::AllocatorType& a)"
  },
  {
    "label": "SwapValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> T::ValueType&)",
    "insertText": "SwapValueByPointer(T& root, const CharType(&source)[N], typename T::ValueType& value, typename T::AllocatorType& a)"
  },
  {
    "label": "SwapValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType> DocumentType::ValueType&)",
    "insertText": "SwapValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, typename DocumentType::ValueType& value)"
  },
  {
    "label": "SwapValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<DocumentType,CharType,size_t N> DocumentType::ValueType&)",
    "insertText": "SwapValueByPointer(DocumentType& document, const CharType(&source)[N], typename DocumentType::ValueType& value)"
  },
  {
    "label": "EraseValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "EraseValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer)"
  },
  {
    "label": "EraseValueByPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,CharType,size_t N> bool)",
    "insertText": "EraseValueByPointer(T& root, const CharType(&source)[N])"
  }
]