[
  {
    "label": "FGameMapsSettingsCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameMapsSettingsCustomization"
  },
  {
    "label": "FGameMapsSettingsCustomization()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / PackageName . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Misc / Paths . h \" # include \" HAL / FileManager . h \" # include \" Textures / SlateIcon . h \" # include \" Styling / AppStyle . h \" # include \" Framework / Commands / UIAction . h \" # include \" IDetailCustomization . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Widgets / Input / SEditableTextBox . h \" # include \" Widgets / Input / SComboButton . h \" # include \" GameModeInfoCustomizer . h \" # define LOCTEXT_NAMESPACE \" FLevelEditorPlaySettingsCustomization \" class FGameMapsSettingsCustomization : public IDetailCustomization { public : ~)",
    "insertText": "FGameMapsSettingsCustomization()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& LayoutBuilder)"
  },
  {
    "label": "EditCategory()",
    "kind": "Method",
    "detail": "Function (IDetailCategoryBuilder& DefaultModesCategory = LayoutBuilder .)",
    "insertText": "EditCategory(\"DefaultModes\")"
  },
  {
    "label": "GetObjectsBeingCustomized()",
    "kind": "Method",
    "detail": "Function ({ TArray<TWeakObjectPtr<UObject>> ObjectsCustomized ; LayoutBuilder .)",
    "insertText": "GetObjectsBeingCustomized(ObjectsCustomized)"
  },
  {
    "label": "ObjectCustomized()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ObjectCustomized(ObjectsCustomized.Num() > 0) ? ObjectsCustomized[0].Get()"
  },
  {
    "label": "GlobalDefaultGameModeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GlobalDefaultGameModeName(TEXT(\"GlobalDefaultGameMode\"))"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (GameInfoModeCustomizer =)",
    "insertText": "MakeShareable(new FGameModeInfoCustomizer(ObjectCustomized, GlobalDefaultGameModeName))"
  },
  {
    "label": "CustomizeGameModeSetting()",
    "kind": "Method",
    "detail": "Function (GameInfoModeCustomizer ->)",
    "insertText": "CustomizeGameModeSetting(LayoutBuilder, DefaultModesCategory)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (} } public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeMapSetting()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "CustomizeMapSetting(IDetailLayoutBuilder& LayoutBuilder, IDetailCategoryBuilder& CategoryBuilder, const FName& PropertyName)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyHandle> PropertyHandle = LayoutBuilder .)",
    "insertText": "GetProperty(PropertyName)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow& PropertyRow = CategoryBuilder .)",
    "insertText": "AddProperty(PropertyHandle)"
  },
  {
    "label": "CustomWidget()",
    "kind": "Method",
    "detail": "Function (PropertyRow .)",
    "insertText": "CustomWidget() .NameContent() [ PropertyHandle->CreatePropertyNameWidget() ] .ValueContent() .MaxDesiredWidth(0) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .FillWidth(1.0f) [ SNew(SEditableTextBox) .ForegroundColor(this, &FGameMapsSettingsCustomization::HandleMapTextBoxForegroundColor, PropertyHandle) .OnTextChanged(this, &FGameMapsSettingsCustomization::HandleMapTextBoxTextChanged, PropertyHandle) .OnTextCommitted(this, &FGameMapsSettingsCustomization::HandleMapTextBoxTextCommitted, PropertyHandle) .Text(this, &FGameMapsSettingsCustomization::HandleMapTextBoxText, PropertyHandle) .ToolTipText(PropertyHandle->GetToolTipText()) ] + SHorizontalBox::Slot() .AutoWidth() .Padding(2.0f, 0.0f, 0.0f, 0.0f) [ SNew(SComboButton) .ButtonContent() [ SNullWidget::NullWidget ] .ContentPadding(FMargin(6.0f, 1.0f)) .MenuContent() [ MakeMapMenu(PropertyHandle) ] .ToolTipText(LOCTEXT(\"AvailableMapsButtonTooltip\", \"Pick from the list of available maps\"))"
  },
  {
    "label": "IsValidMapName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidMapName(const FString& MapName)"
  },
  {
    "label": "MakeMapMenu()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "MakeMapMenu(const TSharedPtr<IPropertyHandle>& PropertyHandle)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (FMenuBuilder)",
    "insertText": "MenuBuilder(true, NULL)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (const FString MapFileWildCard =)",
    "insertText": "Printf(TEXT(\"*%s\"), *FPackageName::GetMapPackageExtension())"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (TArray<FString> MapNames ; MenuBuilder .)",
    "insertText": "BeginSection(NAME_None, LOCTEXT(\"ProjectMapsSectionHeader\", \"Project\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "Get().FindFilesRecursive(MapNames, *FPaths::ProjectContentDir(), *MapFileWildCard, true, false)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (MapNames .)",
    "insertText": "Sort([](const FString& A, const FString& B) { return FPaths::GetBaseFilename(A) < FPaths::GetBaseFilename(B); })"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "Action(FExecuteAction::CreateRaw(this, &FGameMapsSettingsCustomization::HandleMapSelected, MapNames[i], PropertyHandle))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FText::FromString( FPaths::GetBaseFilename(MapNames[i]) ), FText::FromString( MapNames[i] ), FSlateIcon(), Action)"
  },
  {
    "label": "EndSection()",
    "kind": "Method",
    "detail": "Function (} } MenuBuilder .)",
    "insertText": "EndSection()"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(NAME_None, LOCTEXT(\"EngineMapsSectionHeader\", \"Engine\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "Get().FindFilesRecursive(MapNames, *FPaths::EngineContentDir(), *MapFileWildCard, true, false)"
  },
  {
    "label": "HandleMapSelected()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleMapSelected(FString MapName, TSharedPtr<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString PackageName ;)",
    "insertText": "if(FPackageName::TryConvertFilenameToLongPackageName(MapName, PackageName))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (PropertyHandle ->)",
    "insertText": "SetValue(PackageName)"
  },
  {
    "label": "HandleMapTextBoxForegroundColor()",
    "kind": "Method",
    "detail": "Function (} } FSlateColor)",
    "insertText": "HandleMapTextBoxForegroundColor(TSharedPtr<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Value ;)",
    "insertText": "if(PropertyHandle->GetValue(Value) == FPropertyAccess::Success)"
  },
  {
    "label": "InvertedForegroundName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "InvertedForegroundName(\"InvertedForeground\")"
  },
  {
    "label": "HandleMapTextBoxText()",
    "kind": "Method",
    "detail": "Function (} } return FLinearColor::Red ; } FText)",
    "insertText": "HandleMapTextBoxText(TSharedPtr<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HandleMapTextBoxTextChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleMapTextBoxTextChanged(const FText& InText, TSharedPtr<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (PropertyHandle ->)",
    "insertText": "SetValue(InText.ToString())"
  },
  {
    "label": "HandleMapTextBoxTextCommitted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleMapTextBoxTextCommitted(const FText& InText, ETextCommit::Type , TSharedPtr<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Value ;)",
    "insertText": "if((PropertyHandle->GetValue(Value) != FPropertyAccess::Success) || !IsValidMapName(Value))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (PropertyHandle ->)",
    "insertText": "SetValue(FString())"
  }
]