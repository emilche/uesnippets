[
  {
    "label": "SSessionBrowserTreeInstanceRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSessionBrowserTreeInstanceRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" SessionFrontendStyle . h \" # include \" Styling / StyleDefaults . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" # include \" SlateOptMacros . h \" # include \" Styling / AppStyle . h \" # include \" Models / SessionBrowserTreeItems . h \" # include \" Widgets / Images / SImage . h \" # include \" PlatformInfo . h \" # include \" Styling / StyleColors . h \" # define LOCTEXT_NAMESPACE \" SSessionBrowserTreeRow \" class SSessionBrowserTreeInstanceRow : public SMultiColumnTableRow<TSharedPtr<FSessionBrowserTreeItem>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSessionBrowserTreeInstanceRow)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, HighlightText) SLATE_ARGUMENT(TSharedPtr<STableViewBase>, OwnerTableView) SLATE_ARGUMENT(TSharedPtr<FSessionBrowserInstanceTreeItem>, Item) SLATE_ARGUMENT(bool, ShowSelection) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (HighlightText = InArgs . _HighlightText ; Item = InArgs . _Item ; SMultiColumnTableRow<TSharedPtr<FSessionBrowserTreeItem>)",
    "insertText": "Construct(FSuperRowType::FArguments().ShowSelection(InArgs._ShowSelection).Style(FAppStyle::Get(), \"TableView.Row\"), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "GetInstanceInfo()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISessionInstanceInfo> InstanceInfo = Item ->)",
    "insertText": "GetInstanceInfo()"
  },
  {
    "label": "FindPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* const PlatformInfo =)",
    "insertText": "FindPlatformInfo(*InstanceInfo->GetPlatformName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(ColumnName == \"Level\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Name\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(ColumnName == \"Status\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Type\")"
  },
  {
    "label": "HandleAuthorizedImage()",
    "kind": "Method",
    "detail": "Function (} } return SNullWidget::NullWidget ; } END_SLATE_FUNCTION_BUILD_OPTIMIZATION private : const FSlateBrush*)",
    "insertText": "HandleAuthorizedImage()"
  },
  {
    "label": "HandleDeviceColumnText()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } FText)",
    "insertText": "HandleDeviceColumnText()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "GetNameImageColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetNameImageColor()"
  },
  {
    "label": "GetNameTextColor()",
    "kind": "Method",
    "detail": "Function (} return FLinearColor::Transparent ; } FSlateColor)",
    "insertText": "GetNameTextColor()"
  },
  {
    "label": "UseSubduedForeground()",
    "kind": "Method",
    "detail": "Function (Color =)",
    "insertText": "UseSubduedForeground()"
  },
  {
    "label": "HandleInstanceBorderBrush()",
    "kind": "Method",
    "detail": "Function (; } return Color ; } const FSlateBrush*)",
    "insertText": "HandleInstanceBorderBrush()"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetBrush(\"ErrorReporting.EmptyBox\")"
  },
  {
    "label": "HandleInstanceTypeText()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } FText)",
    "insertText": "HandleInstanceTypeText()"
  },
  {
    "label": "HandleLevelColumnText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleLevelColumnText()"
  },
  {
    "label": "HandleStatusImageColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleStatusImageColor()"
  }
]