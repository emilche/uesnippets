[
  {
    "label": "TLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLocation"
  },
  {
    "label": "TLocation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace RenderingSpatialHash { template<ScalarType> struct TLocation { using FIntVector3 = UE::Math::TIntVector3<ScalarType> ; FIntVector3 Coord ; int32 Level ;)",
    "insertText": "TLocation()"
  },
  {
    "label": "TLocation()",
    "kind": "Method",
    "detail": "Function (} ; template<ScalarBType>)",
    "insertText": "TLocation(const TLocation< ScalarBType>& InLoc) : Coord(UE::Math::TIntVector3<ScalarType>(InLoc.Coord)) , Level(InLoc.Level)"
  },
  {
    "label": "TLocation()",
    "kind": "Method",
    "detail": "Function (} template<ScalarBType>)",
    "insertText": "TLocation(const UE::Math::TIntVector3< ScalarBType>& InCoord, int32 InLevel) : Coord(UE::Math::TIntVector3<ScalarType>(InCoord)) , Level(InLevel)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const TLocation& CellLocation)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TLocation& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TLocation Result ; Result . Coord = Coord + RHS . Coord ; Result . Level = Level ; return Result ; } TLocation)",
    "insertText": "operator(const TLocation& RHS)"
  },
  {
    "label": "CalcLevel()",
    "kind": "Method",
    "detail": "Function (TLocation Result ; Result . Coord = Coord - RHS . Coord ; Result . Level = Level ; return Result ; } } ; using FLocation64 = TLocation<int64> ; using FLocation32 = TLocation<int32> ; using FLocation8 = TLocation<int8> ; int32)",
    "insertText": "CalcLevel(double Size)"
  },
  {
    "label": "CalcLevel()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "CalcLevel(float Size)"
  },
  {
    "label": "CalcLevelFromRadius()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "CalcLevelFromRadius(double Radius)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (} ; double)",
    "insertText": "GetCellSize(int32 Level)"
  },
  {
    "label": "GetRecCellSize()",
    "kind": "Method",
    "detail": "Function (} ; double)",
    "insertText": "GetRecCellSize(int32 Level)"
  },
  {
    "label": "ToCellLoc()",
    "kind": "Method",
    "detail": "Function (} FLocation64)",
    "insertText": "ToCellLoc(int32 Level, const FVector& WorldPos)"
  },
  {
    "label": "GetRecCellSize()",
    "kind": "Method",
    "detail": "Function (FLocation64 Result ; double RecLevelCellSize =)",
    "insertText": "GetRecCellSize(Level)"
  },
  {
    "label": "FIntVector3()",
    "kind": "Method",
    "detail": "Function (Result . Level = Level ; FVector LevelGridPos = WorldPos* RecLevelCellSize ; Result . Coord =)",
    "insertText": "FIntVector3(FMath::FloorToInt(LevelGridPos.X), FMath::FloorToInt(LevelGridPos.Y), FMath::FloorToInt(LevelGridPos.Z))"
  },
  {
    "label": "CalcLevelFromRadius()",
    "kind": "Method",
    "detail": "Function (int32 Level =)",
    "insertText": "CalcLevelFromRadius(BoxSphereBounds.SphereRadius)"
  },
  {
    "label": "CalcLevelAndLocation()",
    "kind": "Method",
    "detail": "Function (} ; FLocation64)",
    "insertText": "CalcLevelAndLocation(const FVector4d& Sphere)"
  },
  {
    "label": "CalcLevelFromRadius()",
    "kind": "Method",
    "detail": "Function (int32 Level =)",
    "insertText": "CalcLevelFromRadius(Sphere.W)"
  },
  {
    "label": "CalcLevelAndLocationClamped()",
    "kind": "Method",
    "detail": "Function (} ; FLocation64)",
    "insertText": "CalcLevelAndLocationClamped(const FVector3d& Center, double Radius, int32 FirstLevel)"
  },
  {
    "label": "CalcLevelFromRadius()",
    "kind": "Method",
    "detail": "Function (int32 Level =)",
    "insertText": "CalcLevelFromRadius(Radius)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Level =)",
    "insertText": "Max(Level, FirstLevel)"
  },
  {
    "label": "CalcWorldPosition()",
    "kind": "Method",
    "detail": "Function (} ; FVector3d)",
    "insertText": "CalcWorldPosition(const FLocation64& Loc)"
  },
  {
    "label": "ToLevel()",
    "kind": "Method",
    "detail": "Function (} FLocation64)",
    "insertText": "ToLevel(const FLocation64& Loc, int32 Level)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 LevelDelta = Level - Loc . Level ; FLocation64 ResLoc = Loc ; ResLoc . Level = Level ;)",
    "insertText": "if(LevelDelta > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ResLoc . Coord = ResLoc . Coord>> LevelDelta ; } else)",
    "insertText": "if(LevelDelta < 0)"
  }
]