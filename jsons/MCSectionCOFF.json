[
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCSectionCOFF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSectionCOFF"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCSectionCOFF()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSECTIONCOFF_H # define LLVM_MC_MCSECTIONCOFF_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / MC / MCSection . h \" # include \" llvm / Support / COFF . h \" namespace llvm { class MCSymbol ; class MCSectionCOFF : public MCSection { StringRef SectionName ; unsigned Characteristics ; MCSymbol* COMDATSymbol ; int Selection ; private : class MCContext ;)",
    "insertText": "MCSectionCOFF(StringRef Section, unsigned Characteristics, MCSymbol *COMDATSymbol, int Selection, SectionKind K, MCSymbol *Begin) : MCSection(SV_COFF, K, Begin), SectionName(Section), Characteristics(Characteristics), COMDATSymbol(COMDATSymbol), Selection(Selection)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Characteristics & 0x00F00000) == 0 && \"alignment must not be set upon section creation\")"
  },
  {
    "label": "MCSectionCOFF()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCSectionCOFF()"
  },
  {
    "label": "ShouldOmitSectionDirective()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldOmitSectionDirective(StringRef Name, const MCAsmInfo &MAI)"
  },
  {
    "label": "getSectionName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getSectionName()"
  },
  {
    "label": "PrintSwitchToSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSwitchToSection(const MCAsmInfo &MAI, raw_ostream &OS, const MCExpr *Subsection)"
  },
  {
    "label": "UseCodeAlign()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCodeAlign()"
  },
  {
    "label": "isVirtualSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVirtualSection()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const MCSection *S)"
  }
]