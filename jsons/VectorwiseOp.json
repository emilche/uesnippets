[
  {
    "label": "PartialReduxExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartialReduxExpr"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "partial_redux_dummy_func",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "partial_redux_dummy_func"
  },
  {
    "label": "member_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "member_"
  },
  {
    "label": "Cost",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cost"
  },
  {
    "label": "member_lpnorm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "member_lpnorm"
  },
  {
    "label": "member_redux",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "member_redux"
  },
  {
    "label": "VectorwiseOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorwiseOp"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Functor"
  },
  {
    "label": "ReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReturnType"
  },
  {
    "label": "ReduxReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReduxReturnType"
  },
  {
    "label": "ExtendedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtendedType"
  },
  {
    "label": "OppositeExtendedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OppositeExtendedType"
  },
  {
    "label": "LpNormReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LpNormReturnType"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PARTIAL_REDUX_H # define EIGEN_PARTIAL_REDUX_H namespace Eigen { template<MatrixType,MemberOp,int Direction> class PartialReduxExpr ; namespace internal { template<MatrixType,MemberOp,int Direction> struct traits<PartialReduxExpr<MatrixType,MemberOp,Direction>> : traits<MatrixType> { typedef MemberOp::result_type Scalar ; typedef traits<MatrixType>::StorageKind StorageKind ; typedef traits<MatrixType>::XprKind XprKind ; typedef MatrixType::Scalar InputScalar ; enum { RowsAtCompileTime = Direction = = Vertical ? 1 : MatrixType::RowsAtCompileTime,ColsAtCompileTime = Direction = = Horizontal ? 1 : MatrixType::ColsAtCompileTime,MaxRowsAtCompileTime = Direction = = Vertical ? 1 : MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = Direction = = Horizontal ? 1 : MatrixType::MaxColsAtCompileTime,Flags = RowsAtCompileTime = = 1 ? RowMajorBit : 0,TraversalSize = Direction = = Vertical ? MatrixType::RowsAtCompileTime : MatrixType::ColsAtCompileTime } ; } ; } template<MatrixType,MemberOp,int Direction> class PartialReduxExpr : public internal::dense_xpr_base<PartialReduxExpr<MatrixType,MemberOp,Direction>>::type,internal::no_assignment_operator { public : typedef internal::dense_xpr_base<PartialReduxExpr>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(PartialReduxExpr) EIGEN_DEVICE_FUNC explicit PartialReduxExpr(const MatrixType& mat, const MemberOp& func = MemberOp()) : m_matrix(mat), m_functor(func)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC MatrixType::Nested)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(member_##MEMBER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ typedef BINARYOP<Scalar,Scalar> BinaryOp ; \\ template<int Size> struct Cost { enum { value = COST } ; } ; \\ enum { Vectorizable = VECTORIZABLE } ; \\ template<XprType> \\ EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE \\ ResultType)",
    "insertText": "operator()(const XprType& mat)"
  },
  {
    "label": "binaryFunc()",
    "kind": "Method",
    "detail": "Function (} \\ BinaryOp)",
    "insertText": "binaryFunc()"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (} \\ } # define)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(MEMBER,COST) \\ EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR(MEMBER,COST,0,partial_redux_dummy_func)"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(norm, (Size+5) * NumTraits<Scalar>::MulCost + (Size-1)*NumTraits<Scalar>::AddCost)"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(stableNorm, (Size+5) * NumTraits<Scalar>::MulCost + (Size-1)*NumTraits<Scalar>::AddCost)"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(blueNorm, (Size+5) * NumTraits<Scalar>::MulCost + (Size-1)*NumTraits<Scalar>::AddCost)"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(hypotNorm, (Size-1) * functor_traits<scalar_hypot_op<Scalar> >::Cost)"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(all, (Size-1)*NumTraits<Scalar>::AddCost)"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(any, (Size-1)*NumTraits<Scalar>::AddCost)"
  },
  {
    "label": "EIGEN_MEMBER_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MEMBER_FUNCTOR(count, (Size-1)*NumTraits<Scalar>::AddCost)"
  },
  {
    "label": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR(sum, (Size-1)*NumTraits<Scalar>::AddCost, 1, internal::scalar_sum_op)"
  },
  {
    "label": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR(minCoeff, (Size-1)*NumTraits<Scalar>::AddCost, 1, internal::scalar_min_op)"
  },
  {
    "label": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR(maxCoeff, (Size-1)*NumTraits<Scalar>::AddCost, 1, internal::scalar_max_op)"
  },
  {
    "label": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MAKE_PARTIAL_REDUX_FUNCTOR(prod, (Size-1)*NumTraits<Scalar>::MulCost, 1, internal::scalar_product_op)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (template<int p,ResultType,Scalar> struct member_lpnorm { typedef ResultType result_type ; enum { Vectorizable = 0 } ; template<int Size> struct Cost { enum {)",
    "insertText": "value(Size+5) * NumTraits<Scalar>::MulCost + (Size-1)"
  },
  {
    "label": "member_lpnorm()",
    "kind": "Method",
    "detail": "Function (} ; EIGEN_DEVICE_FUNC)",
    "insertText": "member_lpnorm()"
  },
  {
    "label": "BinaryOp()",
    "kind": "Method",
    "detail": "Function (} } ; template<BinaryOpT,Scalar> struct member_redux { typedef BinaryOpT BinaryOp ; typedef result_of<)",
    "insertText": "BinaryOp(const Scalar&,const Scalar&)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (enum { Vectorizable = functor_traits<BinaryOp>::PacketAccess } ; template<int Size> struct Cost { enum {)",
    "insertText": "value(Size-1)"
  },
  {
    "label": "member_redux()",
    "kind": "Method",
    "detail": "Function (} ; EIGEN_DEVICE_FUNC)",
    "insertText": "member_redux(const BinaryOp func) : m_functor(func)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC result_type)",
    "insertText": "operator()(const DenseBase<Derived>& mat)"
  },
  {
    "label": "extendedTo()",
    "kind": "Method",
    "detail": "Function (protected : template<OtherDerived> struct ExtendedType { typedef Replicate<OtherDerived,isVertical ? 1 : ExpressionType::RowsAtCompileTime,isHorizontal ? 1 : ExpressionType::ColsAtCompileTime> Type ; } ; template<OtherDerived> EIGEN_DEVICE_FUNC ExtendedType<OtherDerived>::Type)",
    "insertText": "extendedTo(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(isVertical, OtherDerived::MaxColsAtCompileTime==1), YOU_PASSED_A_ROW_VECTOR_BUT_A_COLUMN_VECTOR_WAS_EXPECTED) EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(isHorizontal, OtherDerived::MaxRowsAtCompileTime==1), YOU_PASSED_A_COLUMN_VECTOR_BUT_A_ROW_VECTOR_WAS_EXPECTED) return typename ExtendedType<OtherDerived>::Type (other.derived(), isVertical ? 1 : m_matrix.rows(), isHorizontal ? 1 : m_matrix.cols())"
  },
  {
    "label": "extendedToOpposite()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> struct OppositeExtendedType { typedef Replicate<OtherDerived,isHorizontal ? 1 : ExpressionType::RowsAtCompileTime,isVertical ? 1 : ExpressionType::ColsAtCompileTime> Type ; } ; template<OtherDerived> EIGEN_DEVICE_FUNC OppositeExtendedType<OtherDerived>::Type)",
    "insertText": "extendedToOpposite(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(isHorizontal, OtherDerived::MaxColsAtCompileTime==1), YOU_PASSED_A_ROW_VECTOR_BUT_A_COLUMN_VECTOR_WAS_EXPECTED) EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(isVertical, OtherDerived::MaxRowsAtCompileTime==1), YOU_PASSED_A_COLUMN_VECTOR_BUT_A_ROW_VECTOR_WAS_EXPECTED) return typename OppositeExtendedType<OtherDerived>::Type (other.derived(), isHorizontal ? 1 : m_matrix.rows(), isVertical ? 1 : m_matrix.cols())"
  },
  {
    "label": "VectorwiseOp()",
    "kind": "Method",
    "detail": "Function (} public : EIGEN_DEVICE_FUNC)",
    "insertText": "VectorwiseOp(ExpressionType& matrix) : m_matrix(matrix)"
  },
  {
    "label": "_expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const ExpressionType&)",
    "insertText": "_expression()"
  },
  {
    "label": "DirectionType()",
    "kind": "Method",
    "detail": "Function (typedef internal::subvector_stl_iterator<const ExpressionType,)",
    "insertText": "DirectionType(Direction)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (# endif iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "redux()",
    "kind": "Method",
    "detail": "Function (} template<BinaryOp> EIGEN_DEVICE_FUNC const ReduxReturnType<BinaryOp>::Type)",
    "insertText": "redux(const BinaryOp& func = BinaryOp())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(redux_length()>0 && \"you are using an empty matrix\")"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (} typedef ReturnType<internal::member_minCoeff>::Type MinCoeffReturnType ; typedef ReturnType<internal::member_maxCoeff>::Type MaxCoeffReturnType ; typedef PartialReduxExpr<const CwiseUnaryOp<internal::scalar_abs2_op<Scalar>,const ExpressionTypeNestedCleaned>,internal::member_sum<RealScalar,RealScalar>,Direction> SquaredNormReturnType ; typedef CwiseUnaryOp<internal::scalar_sqrt_op<RealScalar>,const SquaredNormReturnType> NormReturnType ; typedef ReturnType<internal::member_blueNorm,RealScalar>::Type BlueNormReturnType ; typedef ReturnType<internal::member_stableNorm,RealScalar>::Type StableNormReturnType ; typedef ReturnType<internal::member_hypotNorm,RealScalar>::Type HypotNormReturnType ; typedef ReturnType<internal::member_sum>::Type SumReturnType ; typedef)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(SumReturnType,Scalar,quotient)"
  },
  {
    "label": "minCoeff()",
    "kind": "Method",
    "detail": "Function (typedef ReturnType<internal::member_all>::Type AllReturnType ; typedef ReturnType<internal::member_any>::Type AnyReturnType ; typedef PartialReduxExpr<ExpressionType,internal::member_count<Index,Scalar>,Direction> CountReturnType ; typedef ReturnType<internal::member_prod>::Type ProdReturnType ; typedef Reverse<const ExpressionType,Direction> ConstReverseReturnType ; typedef Reverse<ExpressionType,Direction> ReverseReturnType ; template<int p> struct LpNormReturnType { typedef PartialReduxExpr<ExpressionType,internal::member_lpnorm<p,RealScalar,Scalar>,Direction> Type ; } ; EIGEN_DEVICE_FUNC const MinCoeffReturnType)",
    "insertText": "minCoeff()"
  },
  {
    "label": "maxCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const MaxCoeffReturnType)",
    "insertText": "maxCoeff()"
  },
  {
    "label": "squaredNorm()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const SquaredNormReturnType)",
    "insertText": "squaredNorm()"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const NormReturnType)",
    "insertText": "norm()"
  },
  {
    "label": "lpNorm()",
    "kind": "Method",
    "detail": "Function (} template<int p> EIGEN_DEVICE_FUNC const LpNormReturnType<p>::Type)",
    "insertText": "lpNorm()"
  },
  {
    "label": "blueNorm()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const BlueNormReturnType)",
    "insertText": "blueNorm()"
  },
  {
    "label": "stableNorm()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const StableNormReturnType)",
    "insertText": "stableNorm()"
  },
  {
    "label": "hypotNorm()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const HypotNormReturnType)",
    "insertText": "hypotNorm()"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const SumReturnType)",
    "insertText": "sum()"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const MeanReturnType)",
    "insertText": "mean()"
  },
  {
    "label": "all()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const AllReturnType)",
    "insertText": "all()"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const AnyReturnType)",
    "insertText": "any()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const CountReturnType)",
    "insertText": "count()"
  },
  {
    "label": "prod()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const ProdReturnType)",
    "insertText": "prod()"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const ConstReverseReturnType)",
    "insertText": "reverse()"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (} typedef Replicate<)",
    "insertText": "ExpressionType(isVertical?Dynamic:1),(isHorizontal?Dynamic:1)"
  },
  {
    "label": "replicate()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ReplicateReturnType)",
    "insertText": "replicate(Index factor)"
  },
  {
    "label": "replicate()",
    "kind": "Method",
    "detail": "Function (template<int Factor> const Replicate<ExpressionType,isVertical* Factor + isHorizontal,isHorizontal* Factor + isVertical> EIGEN_DEVICE_FUNC)",
    "insertText": "replicate(Index factor = Factor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC ExpressionType&)",
    "insertText": "operator(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) return m_matrix = extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) return m_matrix += extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) return m_matrix -= extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_ARRAYXPR(ExpressionType) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) m_matrix *= extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_ARRAYXPR(ExpressionType) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) m_matrix /= extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) return m_matrix + extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) return m_matrix - extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_ARRAYXPR(ExpressionType) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) return m_matrix * extendedTo(other.derived())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_ARRAYXPR(ExpressionType) EIGEN_STATIC_ASSERT_SAME_XPR_KIND(ExpressionType, OtherDerived) return m_matrix / extendedTo(other.derived())"
  },
  {
    "label": "normalized()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CwiseBinaryOp<internal::scalar_quotient_op<Scalar>,const ExpressionTypeNestedCleaned,const OppositeExtendedType<NormReturnType>::Type>)",
    "insertText": "normalized()"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "normalize()"
  },
  {
    "label": "reverseInPlace()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "reverseInPlace()"
  },
  {
    "label": "homogeneous()",
    "kind": "Method",
    "detail": "Function (typedef Homogeneous<ExpressionType,Direction> HomogeneousReturnType ; EIGEN_DEVICE_FUNC HomogeneousReturnType)",
    "insertText": "homogeneous()"
  },
  {
    "label": "cross()",
    "kind": "Method",
    "detail": "Function (typedef ExpressionType::PlainObject CrossReturnType ; template<OtherDerived> EIGEN_DEVICE_FUNC const CrossReturnType)",
    "insertText": "cross(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { HNormalized_Size = Direction = = Vertical ? internal::traits<ExpressionType>::RowsAtCompileTime : internal::traits<ExpressionType>::ColsAtCompileTime,HNormalized_SizeMinusOne = HNormalized_Size = = Dynamic ? Dynamic : HNormalized_Size - 1 } ; typedef Block<const ExpressionType,Direction = = Vertical ?)",
    "insertText": "int(HNormalized_SizeMinusOne) : int(internal::traits<ExpressionType>::RowsAtCompileTime), Direction==Horizontal ? int(HNormalized_SizeMinusOne) : int(internal::traits<ExpressionType>::ColsAtCompileTime)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef Block<const ExpressionType,Direction = = Vertical ? 1 :)",
    "insertText": "int(internal::traits<ExpressionType>::RowsAtCompileTime), Direction==Horizontal ? 1 : int(internal::traits<ExpressionType>::ColsAtCompileTime)"
  },
  {
    "label": "hnormalized()",
    "kind": "Method",
    "detail": "Function (typedef CwiseBinaryOp<internal::scalar_quotient_op<internal::traits<ExpressionType>::Scalar>,const HNormalized_Block,const Replicate<HNormalized_Factors,Direction = = Vertical ? HNormalized_SizeMinusOne : 1,Direction = = Horizontal ? HNormalized_SizeMinusOne : 1>> HNormalizedReturnType ; EIGEN_DEVICE_FUNC const HNormalizedReturnType)",
    "insertText": "hnormalized()"
  },
  {
    "label": "redux_length()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_VECTORWISEOP_PLUGIN # include EIGEN_VECTORWISEOP_PLUGIN # endif protected : Index)",
    "insertText": "redux_length()"
  },
  {
    "label": "colwise()",
    "kind": "Method",
    "detail": "Function (} ExpressionTypeNested m_matrix ; } ; template<Derived> EIGEN_DEVICE_FUNC DenseBase<Derived>::ColwiseReturnType DenseBase<Derived)",
    "insertText": "colwise()"
  },
  {
    "label": "rowwise()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC DenseBase<Derived>::RowwiseReturnType DenseBase<Derived)",
    "insertText": "rowwise()"
  }
]