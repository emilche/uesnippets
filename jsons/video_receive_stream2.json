[
  {
    "label": "RtpStreamReceiverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpStreamReceiverInterface"
  },
  {
    "label": "RtpStreamReceiverControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpStreamReceiverControllerInterface"
  },
  {
    "label": "RtxReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtxReceiveStream"
  },
  {
    "label": "VCMTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMTiming"
  },
  {
    "label": "CallStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallStats"
  },
  {
    "label": "VideoFrameMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFrameMetaData"
  },
  {
    "label": "VideoReceiveStream2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoReceiveStream2"
  },
  {
    "label": "DecodeFrameResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecodeFrameResult"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_RECEIVE_STREAM2_H_ # define VIDEO_VIDEO_RECEIVE_STREAM2_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" api / video / recordable_encoded_frame . h \" # include \" call / call . h \" # include \" call / rtp_packet_sink_interface . h \" # include \" call / syncable . h \" # include \" call / video_receive_stream . h \" # include \" modules / rtp_rtcp / source / source_tracker . h \" # include \" modules / video_coding / nack_requester . h \" # include \" modules / video_coding / video_receiver2 . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" video / receive_statistics_proxy2 . h \" # include \" video / rtp_streams_synchronizer2 . h \" # include \" video / rtp_video_stream_receiver2 . h \" # include \" video / transport_adapter . h \" # include \" video / video_stream_buffer_controller . h \" # include \" video / video_stream_decoder2 . h \" namespace webrtc { class RtpStreamReceiverInterface ; class RtpStreamReceiverControllerInterface ; class RtxReceiveStream ; class VCMTiming ; TimeDelta kMaxWaitForKeyFrame =)",
    "insertText": "Millis(200)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (TimeDelta kMaxWaitForFrame =)",
    "insertText": "Seconds(3)"
  },
  {
    "label": "VideoFrameMetaData()",
    "kind": "Method",
    "detail": "Function (namespace internal { class CallStats ; struct VideoFrameMetaData {)",
    "insertText": "VideoFrameMetaData(const webrtc::VideoFrame& frame, Timestamp now) : rtp_timestamp(frame.timestamp()), timestamp_us(frame.timestamp_us()), ntp_time_ms(frame.ntp_time_ms()), width(frame.width()), height(frame.height()), decode_timestamp(now)"
  },
  {
    "label": "render_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "render_time_ms()"
  },
  {
    "label": "VideoReceiveStream2()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoReceiveStream2()"
  },
  {
    "label": "RegisterWithTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWithTransport(RtpStreamReceiverControllerInterface* receiver_controller)"
  },
  {
    "label": "UnregisterFromTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterFromTransport()"
  },
  {
    "label": "sync_group()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "sync_group()"
  },
  {
    "label": "remote_ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "remote_ssrc()"
  },
  {
    "label": "DeliverRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeliverRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "SetSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSync(Syncable* audio_syncable)"
  },
  {
    "label": "SetLocalSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSsrc(uint32_t local_ssrc)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetRtpExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpExtensions(std::vector<RtpExtension> extensions)"
  },
  {
    "label": "GetRtpExtensionMap()",
    "kind": "Method",
    "detail": "Function (RtpHeaderExtensionMap)",
    "insertText": "GetRtpExtensionMap()"
  },
  {
    "label": "transport_cc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "transport_cc()"
  },
  {
    "label": "SetTransportCc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransportCc(bool transport_cc)"
  },
  {
    "label": "SetRtcpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtcpMode(RtcpMode mode)"
  },
  {
    "label": "SetFlexFecProtection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlexFecProtection(RtpPacketSinkInterface* flexfec_sink)"
  },
  {
    "label": "SetLossNotificationEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLossNotificationEnabled(bool enabled)"
  },
  {
    "label": "SetNackHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackHistory(TimeDelta history)"
  },
  {
    "label": "SetProtectionPayloadTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProtectionPayloadTypes(int red_payload_type, int ulpfec_payload_type)"
  },
  {
    "label": "SetRtcpXr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtcpXr(Config::Rtp::RtcpXr rtcp_xr)"
  },
  {
    "label": "SetAssociatedPayloadTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssociatedPayloadTypes(std::map<int, int> associated_payload_types)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoReceiveStreamInterface::Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumPlayoutDelayMs()"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(rtc::scoped_refptr<FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(rtc::scoped_refptr<FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(const VideoFrame& video_frame)"
  },
  {
    "label": "OnCompleteFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompleteFrame(std::unique_ptr<EncodedFrame> frame)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t avg_rtt_ms, int64_t max_rtt_ms)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "id()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (absl::optional<Syncable::Info>)",
    "insertText": "GetInfo()"
  },
  {
    "label": "GetPlayoutRtpTimestamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPlayoutRtpTimestamp(uint32_t* rtp_timestamp, int64_t* time_ms)"
  },
  {
    "label": "SetEstimatedPlayoutNtpTimestampMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEstimatedPlayoutNtpTimestampMs(int64_t ntp_timestamp_ms, int64_t time_ms)"
  },
  {
    "label": "SetMinimumPlayoutDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinimumPlayoutDelay(int delay_ms)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpSource>)",
    "insertText": "GetSources()"
  },
  {
    "label": "SetAndGetRecordingState()",
    "kind": "Method",
    "detail": "Function (RecordingState)",
    "insertText": "SetAndGetRecordingState(RecordingState state, bool generate_key_frame)"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame()"
  },
  {
    "label": "OnEncodedFrame()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnEncodedFrame(std::unique_ptr<EncodedFrame> frame)"
  },
  {
    "label": "OnDecodableFrameTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecodableFrameTimeout(TimeDelta wait)"
  },
  {
    "label": "CreateAndRegisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndRegisterExternalDecoder(const Decoder& decoder)"
  },
  {
    "label": "HandleEncodedFrameOnDecodeQueue()",
    "kind": "Method",
    "detail": "Function (struct DecodeFrameResult { bool force_request_key_frame ; absl::optional<int64_t> decoded_frame_picture_id ; bool keyframe_required ; } ; DecodeFrameResult)",
    "insertText": "HandleEncodedFrameOnDecodeQueue(std::unique_ptr<EncodedFrame> frame, bool keyframe_request_is_due, bool keyframe_required) RTC_RUN_ON(decode_queue_)"
  },
  {
    "label": "UpdatePlayoutDelays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlayoutDelays() const RTC_EXCLUSIVE_LOCKS_REQUIRED(worker_sequence_checker_)"
  },
  {
    "label": "RequestKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestKeyFrame(Timestamp now) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "HandleKeyFrameGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeyFrameGeneration(bool received_frame_is_keyframe, Timestamp now, bool always_request_key_frame, bool keyframe_request_is_due) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "IsReceivingKeyFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReceivingKeyFrame(Timestamp timestamp) const RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "DecodeAndMaybeDispatchEncodedFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeAndMaybeDispatchEncodedFrame(std::unique_ptr<EncodedFrame> frame) RTC_RUN_ON(decode_queue_)"
  },
  {
    "label": "UpdateHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHistograms()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker worker_sequence_checker_ ; RTC_NO_UNIQUE_ADDRESS SequenceChecker packet_sequence_checker_ ; TaskQueueFactory* const task_queue_factory_ ; TransportAdapter transport_adapter_ ; const VideoReceiveStreamInterface::Config config_ ; const int num_cpu_cores_ ; Call* const call_ ; Clock* const clock_ ; CallStats* const call_stats_ ; bool decoder_running_)",
    "insertText": "RTC_GUARDED_BY(worker_sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool decoder_stopped_)",
    "insertText": "RTC_GUARDED_BY(decode_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SourceTracker source_tracker_ ; ReceiveStatisticsProxy stats_proxy_ ; const std::unique_ptr<ReceiveStatistics> rtp_receive_statistics_ ; std::unique_ptr<VCMTiming> timing_ ; VideoReceiver2 video_receiver_ ; std::unique_ptr<rtc::VideoSinkInterface<VideoFrame>> incoming_video_stream_ ; RtpVideoStreamReceiver2 rtp_video_stream_receiver_ ; std::unique_ptr<VideoStreamDecoder> video_stream_decoder_ ; RtpStreamsSynchronizer rtp_stream_sync_ ; std::unique_ptr<VideoStreamBufferController> buffer_ ; std::unique_ptr<RtpStreamReceiverInterface> media_receiver_)",
    "insertText": "RTC_GUARDED_BY(packet_sequence_checker_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void(const RecordableEncodedFrame&)> encoded_frame_buffer_function_ RTC_GUARDED_BY(decode_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::Mutex pending_resolution_mutex_ ; absl::optional<RecordableEncodedFrame::EncodedResolution> pending_resolution_)",
    "insertText": "RTC_GUARDED_BY(pending_resolution_mutex_)"
  }
]