[
  {
    "label": "FQueuedThreadPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedThreadPool"
  },
  {
    "label": "EnumType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnumType"
  },
  {
    "label": "FInstallBundleManagerKeepAwake",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstallBundleManagerKeepAwake"
  },
  {
    "label": "FInstallBundleManagerScreenSaverControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstallBundleManagerScreenSaverControl"
  },
  {
    "label": "FInstallBundleSuppressAnalytics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSuppressAnalytics"
  },
  {
    "label": "FInstallBundleWork",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstallBundleWork"
  },
  {
    "label": "FContentRequestStateStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentRequestStateStats"
  },
  {
    "label": "FContentRequestStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentRequestStats"
  },
  {
    "label": "FContentRequestStatsMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentRequestStatsMap"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPersistentTimerData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPersistentTimerData"
  },
  {
    "label": "FPersistentStatsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPersistentStatsBase"
  },
  {
    "label": "FBundlePersistentStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBundlePersistentStats"
  },
  {
    "label": "FSessionPersistentStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSessionPersistentStats"
  },
  {
    "label": "FPersistentStatContainerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPersistentStatContainerBase"
  },
  {
    "label": "IBundleSourceContentRequestSharedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IBundleSourceContentRequestSharedContext"
  },
  {
    "label": "FContentRequestSharedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentRequestSharedContext"
  },
  {
    "label": "GetAppVersion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" Containers / Ticker . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / IDelegateInstance . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformMisc . h \" # include \" InstallBundleTypes . h \" # include \" Misc / EmbeddedCommunication . h \" # include \" Serialization / JsonSerializerMacros . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / IsEnum . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" Internationalization / Regex . h \" class FQueuedThreadPool ; namespace InstallBundleUtil { FString)",
    "insertText": "GetAppVersion()"
  },
  {
    "label": "HasInternetConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInternetConnection(ENetworkConnectionType ConnectionType)"
  },
  {
    "label": "GetInstallBundlePauseReason()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetInstallBundlePauseReason(EInstallBundlePauseFlags Flags)"
  },
  {
    "label": "GetInstallBundleSectionPrefix()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetInstallBundleSectionPrefix()"
  },
  {
    "label": "GetConfiguredBundleSources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConfiguredBundleSources(TArray<FString>& OutSources, TMap<FString, FString>& OutFallbackSources)"
  },
  {
    "label": "HasInstallBundleInConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInstallBundleInConfig(const FString& BundleName)"
  },
  {
    "label": "AllInstallBundlePredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllInstallBundlePredicate(const FConfigFile& InstallBundleConfig, const FString& Section)"
  },
  {
    "label": "IsPlatformInstallBundlePredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformInstallBundlePredicate(const FConfigFile& InstallBundleConfig, const FString& Section)"
  },
  {
    "label": "LoadBundleRegexFromConfig()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<FString,TArray<FRegexPattern>>>)",
    "insertText": "LoadBundleRegexFromConfig(const FConfigFile& InstallBundleConfig, TFunctionRef<bool(const FConfigFile& InstallBundleConfig, const FString& Section)> SectionPredicate = AllInstallBundlePredicate)"
  },
  {
    "label": "MatchBundleRegex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchBundleRegex(const TArray<TPair<FString, TArray<FRegexPattern>>>& BundleRegexList, const FString& Path, FString& OutBundleName)"
  },
  {
    "label": "CastAsUnderlying()",
    "kind": "Method",
    "detail": "Function (float MinimumBundleWeight = 0 . 0 5 f ; template<class EnumType> auto&)",
    "insertText": "CastAsUnderlying(EnumType &Type)"
  },
  {
    "label": "UnderType()",
    "kind": "Method",
    "detail": "Function (using UnderType = std::underlying_type_t<EnumType> ; return* reinterpret_cast<)",
    "insertText": "UnderType(&Type)"
  },
  {
    "label": "CastAsUnderlying()",
    "kind": "Method",
    "detail": "Function (} template<class EnumType> const auto&)",
    "insertText": "CastAsUnderlying(const EnumType &Type)"
  },
  {
    "label": "CastToUnderlying()",
    "kind": "Method",
    "detail": "Function (} template<class EnumType> auto)",
    "insertText": "CastToUnderlying(EnumType Type)"
  },
  {
    "label": "UnderType()",
    "kind": "Method",
    "detail": "Function (using UnderType = std::underlying_type_t<EnumType> ; return static_cast<)",
    "insertText": "UnderType(Type)"
  },
  {
    "label": "TLexToString()",
    "kind": "Method",
    "detail": "Function (} template<EnumType,StringArrType,EnumType EnumCount = EnumType::Count> const TCHAR*)",
    "insertText": "TLexToString(EnumType E, const StringArrType& Strings)"
  },
  {
    "label": "CastToUnderlying()",
    "kind": "Method",
    "detail": "Function (auto Count =)",
    "insertText": "CastToUnderlying(EnumCount)"
  },
  {
    "label": "CastToUnderlying()",
    "kind": "Method",
    "detail": "Function (auto Idx =)",
    "insertText": "CastToUnderlying(E)"
  },
  {
    "label": "FInstallBundleManagerKeepAwake()",
    "kind": "Method",
    "detail": "Function (} } class FInstallBundleManagerKeepAwake : public FEmbeddedKeepAwake { FName Tag ; FName TagWithRendering ; public :)",
    "insertText": "FInstallBundleManagerKeepAwake(bool bNeedsRendering = false) : FEmbeddedKeepAwake(bNeedsRendering ? TagWithRendering : Tag, bNeedsRendering)"
  },
  {
    "label": "IncDisable()",
    "kind": "Method",
    "detail": "Function (} } ; class FInstallBundleManagerScreenSaverControl { bool bDidDisableScreensaver ; int DisableCount ; void)",
    "insertText": "IncDisable()"
  },
  {
    "label": "DecDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecDisable()"
  },
  {
    "label": "FInstallBundleManagerScreenSaverControl()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FInstallBundleManagerScreenSaverControl()"
  },
  {
    "label": "FInstallBundleManagerScreenSaverControl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInstallBundleManagerScreenSaverControl(const FInstallBundleManagerScreenSaverControl& Other)"
  },
  {
    "label": "FInstallBundleManagerScreenSaverControl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInstallBundleManagerScreenSaverControl(FInstallBundleManagerScreenSaverControl&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstallBundleManagerScreenSaverControl&)",
    "insertText": "operator(const FInstallBundleManagerScreenSaverControl& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstallBundleManagerScreenSaverControl&)",
    "insertText": "operator(FInstallBundleManagerScreenSaverControl&& Other)"
  },
  {
    "label": "FInstallBundleSuppressAnalytics()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInstallBundleSuppressAnalytics()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable()"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "FInstallBundleWork()",
    "kind": "Method",
    "detail": "Function (private : bool bIsEnabled ; } ; class FInstallBundleWork : public FNonAbandonableTask { public :)",
    "insertText": "FInstallBundleWork()"
  },
  {
    "label": "FInstallBundleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstallBundleWork(TUniqueFunction<void()> InWork, TUniqueFunction<void()> InOnComplete) : WorkFunc(MoveTemp(InWork)) , OnCompleteFunc(MoveTemp(InOnComplete))"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "WorkFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkFunc()"
  },
  {
    "label": "CallOnComplete()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CallOnComplete()"
  },
  {
    "label": "OnCompleteFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompleteFunc()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} } TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "StartInstallBundleAsyncIOTask()",
    "kind": "Method",
    "detail": "Function (} ; using FInstallBundleTask = FAsyncTask<FInstallBundleWork> ; using FAutoDeleteInstallBundleTask = FAutoDeleteAsyncTask<FInstallBundleWork> ; void)",
    "insertText": "StartInstallBundleAsyncIOTask(TUniqueFunction<void()> WorkFunc)"
  },
  {
    "label": "StartInstallBundleAsyncIOTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartInstallBundleAsyncIOTask(FQueuedThreadPool* ThreadPool, TUniqueFunction<void()> WorkFunc)"
  },
  {
    "label": "StartInstallBundleAsyncIOTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartInstallBundleAsyncIOTask(TArray<TUniquePtr<FInstallBundleTask>>& Tasks, TUniqueFunction<void()> WorkFunc, TUniqueFunction<void()> OnComplete)"
  },
  {
    "label": "StartInstallBundleAsyncIOTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartInstallBundleAsyncIOTask(FQueuedThreadPool* ThreadPool, TArray<TUniquePtr<FInstallBundleTask>>& Tasks, TUniqueFunction<void()> WorkFunc, TUniqueFunction<void()> OnComplete)"
  },
  {
    "label": "FinishInstallBundleAsyncIOTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishInstallBundleAsyncIOTasks(TArray<TUniquePtr<FInstallBundleTask>>& Tasks)"
  },
  {
    "label": "CleanupInstallBundleAsyncIOTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupInstallBundleAsyncIOTasks(TArray<TUniquePtr<FInstallBundleTask>>& Tasks)"
  },
  {
    "label": "GetElapsedTime()",
    "kind": "Method",
    "detail": "Function (struct FContentRequestStateStats { double StartTime = 0 . 0 ; double EndTime = 0 . 0 ; uint64 DataSize = 0 ; bool bOpen = true ; double)",
    "insertText": "GetElapsedTime()"
  },
  {
    "label": "StatsBegin()",
    "kind": "Method",
    "detail": "Function (} } ; class FContentRequestStatsMap { private : TMap<FName,InstallBundleUtil::FContentRequestStats> StatsMap ; public : void)",
    "insertText": "StatsBegin(FName BundleName)"
  },
  {
    "label": "StatsEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsEnd(FName BundleName)"
  },
  {
    "label": "StatsBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsBegin(FName BundleName, const TCHAR* State)"
  },
  {
    "label": "StatsEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsEnd(FName BundleName, const TCHAR* State, uint64 DataSize = 0)"
  },
  {
    "label": "StatsReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsReset(FName BundleName)"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,InstallBundleUtil::FContentRequestStats>&)",
    "insertText": "GetMap()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "LexToString(ECountStatNames InType)"
  },
  {
    "label": "IsTimerReal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimerReal(ETimingStatNames InTimer)"
  },
  {
    "label": "IsTimerFG()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimerFG(ETimingStatNames InTimer)"
  },
  {
    "label": "IsTimerBG()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimerBG(ETimingStatNames InTimer)"
  },
  {
    "label": "GetAssociatedRealTimerName()",
    "kind": "Method",
    "detail": "Function (ETimingStatNames)",
    "insertText": "GetAssociatedRealTimerName(ETimingStatNames InTimerType)"
  },
  {
    "label": "GetAssociatedFGTimerName()",
    "kind": "Method",
    "detail": "Function (ETimingStatNames)",
    "insertText": "GetAssociatedFGTimerName(ETimingStatNames InTimerType)"
  },
  {
    "label": "GetAssociatedBGTimerName()",
    "kind": "Method",
    "detail": "Function (ETimingStatNames)",
    "insertText": "GetAssociatedBGTimerName(ETimingStatNames InTimerType)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (class FPersistentTimerData : public FJsonSerializable { public : BEGIN_JSON_SERIALIZER)",
    "insertText": "JSON_SERIALIZE(\"LastUpdateTime\", LastUpdateTime)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"TotalTime\", CurrentValue)"
  },
  {
    "label": "FPersistentTimerData()",
    "kind": "Method",
    "detail": "Function (END_JSON_SERIALIZER public :)",
    "insertText": "FPersistentTimerData() : LastUpdateTime(0.) , CurrentValue(0.)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (} double LastUpdateTime ; double CurrentValue ; } ; class FPersistentStatsBase : public FJsonSerializable { public : BEGIN_JSON_SERIALIZER)",
    "insertText": "JSON_SERIALIZE(\"AnalyticsSessionID\", AnalyticsSessionID)"
  },
  {
    "label": "JSON_SERIALIZE_MAP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE_MAP(\"CountStats\", CountStatMap)"
  },
  {
    "label": "JSON_SERIALIZE_MAP_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE_MAP_SERIALIZABLE(\"TimingStats\", TimingStatsMap, FPersistentTimerData)"
  },
  {
    "label": "FPersistentStatsBase()",
    "kind": "Method",
    "detail": "Function (END_JSON_SERIALIZER public : ~)",
    "insertText": "FPersistentStatsBase()"
  },
  {
    "label": "StatsBegin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StatsBegin(const FString& ExpectedAnalyticsID, bool bForceResetData = false)"
  },
  {
    "label": "StatsEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsEnd(bool bStopAllActiveTimers = true)"
  },
  {
    "label": "IsTimingStatStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimingStatStarted(ETimingStatNames StatToUpdate)"
  },
  {
    "label": "StartTimingStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTimingStat(ETimingStatNames StatToUpdate)"
  },
  {
    "label": "StopTimingStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTimingStat(ETimingStatNames StatToUpdate, bool UpdateTimerOnStop = true)"
  },
  {
    "label": "UpdateTimingStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimingStat(ETimingStatNames StatToUpdate)"
  },
  {
    "label": "UpdateAllActiveTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllActiveTimers()"
  },
  {
    "label": "StopAllActiveTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllActiveTimers()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "HasTimingStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimingStat(ETimingStatNames StatToCheck)"
  },
  {
    "label": "HasCountStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCountStat(ECountStatNames StatToCheck)"
  },
  {
    "label": "GetTimingStatData()",
    "kind": "Method",
    "detail": "Function (const FPersistentTimerData*)",
    "insertText": "GetTimingStatData(ETimingStatNames StatToGet)"
  },
  {
    "label": "GetCountStatData()",
    "kind": "Method",
    "detail": "Function (const int*)",
    "insertText": "GetCountStatData(ECountStatNames StatToGet)"
  },
  {
    "label": "SaveStatsToDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveStatsToDisk()"
  },
  {
    "label": "LoadStatsFromDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadStatsFromDisk()"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ResetStats(const FString& NewAnalyticsSessionID)"
  },
  {
    "label": "OnLoadingDataFromDisk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadingDataFromDisk()"
  },
  {
    "label": "HandleTimerStatsAfterDataLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTimerStatsAfterDataLoad()"
  },
  {
    "label": "FPersistentStatsBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPersistentStatsBase() : TimingStatsMap() , CountStatMap() , AnalyticsSessionID() , bIsActive(false) , bIsDirty(false) , bHasLoadedFromDisk(false)"
  },
  {
    "label": "GetBaseExpectedAnalyticsID()",
    "kind": "Method",
    "detail": "Function (} protected : TMap<FString,FPersistentTimerData> TimingStatsMap ; TMap<FString,int> CountStatMap ; FString AnalyticsSessionID ; bool bIsActive ; bool bIsDirty ; bool bHasLoadedFromDisk ; public : const FString)",
    "insertText": "GetBaseExpectedAnalyticsID()"
  },
  {
    "label": "GetFullPathForStatFile()",
    "kind": "Method",
    "detail": "Function (public : const FString)",
    "insertText": "GetFullPathForStatFile()"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (} ; class FBundlePersistentStats : public FPersistentStatsBase { public : BEGIN_JSON_SERIALIZER)",
    "insertText": "JSON_SERIALIZE(\"BundleName\", BundleName)"
  },
  {
    "label": "FBundlePersistentStats()",
    "kind": "Method",
    "detail": "Function (END_JSON_SERIALIZER private :)",
    "insertText": "FBundlePersistentStats()"
  },
  {
    "label": "FBundlePersistentStats()",
    "kind": "Method",
    "detail": "Function (FString BundleName ; public :)",
    "insertText": "FBundlePersistentStats(FName BundleNameIn) : BundleName(BundleNameIn.ToString())"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (} ; class FSessionPersistentStats : public FPersistentStatsBase { public : BEGIN_JSON_SERIALIZER)",
    "insertText": "JSON_SERIALIZE(\"SessionName\", SessionName)"
  },
  {
    "label": "JSON_SERIALIZE_ARRAY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE_ARRAY(\"RequiredBundles\", RequiredBundles)"
  },
  {
    "label": "FSessionPersistentStats()",
    "kind": "Method",
    "detail": "Function (END_JSON_SERIALIZER private :)",
    "insertText": "FSessionPersistentStats()"
  },
  {
    "label": "FSessionPersistentStats()",
    "kind": "Method",
    "detail": "Function (FString SessionName ; TArray<FString> RequiredBundles ; public :)",
    "insertText": "FSessionPersistentStats(const FString& ContentRequestNameIn) : SessionName(ContentRequestNameIn) , RequiredBundles()"
  },
  {
    "label": "AddRequiredBundles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRequiredBundles(const TArray<FString>& RequiredBundlesToAdd)"
  },
  {
    "label": "AddRequiredBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequiredBundles(const TArray<FName>& RequiredBundlesToAdd)"
  },
  {
    "label": "ResetRequiredBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRequiredBundles(const TArray<FString>& NewRequiredBundles = TArray<FString>())"
  },
  {
    "label": "GetRequiredBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequiredBundles(TArray<FString>& OutRequiredBundles)"
  },
  {
    "label": "FPersistentStatContainerBase()",
    "kind": "Method",
    "detail": "Function (} ; class FPersistentStatContainerBase { public :)",
    "insertText": "FPersistentStatContainerBase()"
  },
  {
    "label": "InitializeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBase()"
  },
  {
    "label": "ShutdownBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownBase()"
  },
  {
    "label": "StartBundlePersistentStatTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartBundlePersistentStatTracking(FName BundleName, const FString& ExpectedAnalyticsID = FString(), bool bForceResetStatData = false)"
  },
  {
    "label": "StartSessionPersistentStatTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSessionPersistentStatTracking(const FString& SessionName, const TArray<FName>& RequiredBundles = TArray<FName>(), const FString& ExpectedAnalyticsID = FString(), bool bForceResetStatData = false)"
  },
  {
    "label": "StopBundlePersistentStatTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopBundlePersistentStatTracking(FName BundleName, bool bStopAllActiveTimers = true)"
  },
  {
    "label": "StopSessionPersistentStatTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSessionPersistentStatTracking(const FString& SessionName, bool bStopAllActiveTimers = true)"
  },
  {
    "label": "StartBundlePersistentStatTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartBundlePersistentStatTimer(FName BundleName, ETimingStatNames TimerToStart)"
  },
  {
    "label": "StartSessionPersistentStatTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSessionPersistentStatTimer(const FString& SessionName, ETimingStatNames TimerToStart)"
  },
  {
    "label": "StopBundlePersistentStatTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopBundlePersistentStatTimer(FName BundleName, ETimingStatNames TimerToStop)"
  },
  {
    "label": "StopSessionPersistentStatTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSessionPersistentStatTimer(const FString& SessionName, ETimingStatNames TimerToStop)"
  },
  {
    "label": "UpdateBundlePersistentStatTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBundlePersistentStatTimer(FName BundleName, ETimingStatNames TimerToUpdate)"
  },
  {
    "label": "UpdateSessionPersistentStatTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSessionPersistentStatTimer(const FString& SessionName, ETimingStatNames TimerToUpdate)"
  },
  {
    "label": "IncrementBundlePersistentCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementBundlePersistentCounter(FName BundleName, ECountStatNames CounterToUpdate)"
  },
  {
    "label": "IncrementSessionPersistentCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementSessionPersistentCounter(const FString& SessionName, ECountStatNames CounterToUpdate)"
  },
  {
    "label": "GetBundleStat()",
    "kind": "Method",
    "detail": "Function (const FBundlePersistentStats*)",
    "insertText": "GetBundleStat(FName BundleName)"
  },
  {
    "label": "GetSessionStat()",
    "kind": "Method",
    "detail": "Function (const FSessionPersistentStats*)",
    "insertText": "GetSessionStat(const FString& SessionName)"
  },
  {
    "label": "SaveAllDirtyStatsToDisk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAllDirtyStatsToDisk()"
  },
  {
    "label": "RemoveSessionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSessionStats(const FString& SessionName)"
  },
  {
    "label": "RemoveBundleStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBundleStats(FName BundleName)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Tick(float dt)"
  },
  {
    "label": "ResetTimerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimerUpdate()"
  },
  {
    "label": "ResetDirtyStatUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDirtyStatUpdate()"
  },
  {
    "label": "UpdateAllBundlesActiveTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllBundlesActiveTimers()"
  },
  {
    "label": "UpdateAllSessionActiveTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllSessionActiveTimers()"
  },
  {
    "label": "OnApp_EnteringBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApp_EnteringBackground()"
  },
  {
    "label": "OnApp_EnteringForeground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApp_EnteringForeground()"
  },
  {
    "label": "OnBackground_HandleBundleStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBackground_HandleBundleStats()"
  },
  {
    "label": "OnForeground_HandleBundleStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnForeground_HandleBundleStats()"
  },
  {
    "label": "OnBackground_HandleSessionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBackground_HandleSessionStats()"
  },
  {
    "label": "OnForeground_HandleSessionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnForeground_HandleSessionStats()"
  },
  {
    "label": "OnTimerStartedForStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimerStartedForStat(FPersistentStatsBase& BundleStatForTimer, ETimingStatNames TimerStarted)"
  },
  {
    "label": "OnTimerStoppedForStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimerStoppedForStat(FPersistentStatsBase& BundleStatForTimer, ETimingStatNames TimerStarted)"
  },
  {
    "label": "UpdateStatsForBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsForBackground(FPersistentStatsBase& StatToUpdate)"
  },
  {
    "label": "UpdateStatsForForeground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsForForeground(FPersistentStatsBase& StatToUpdate)"
  },
  {
    "label": "LoadRequiredBundleDataFromDiskForSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadRequiredBundleDataFromDiskForSession(const FString& SessionName)"
  },
  {
    "label": "IBundleSourceContentRequestSharedContext()",
    "kind": "Method",
    "detail": "Function (protected : TMap<FName,FBundlePersistentStats> PerBundlePersistentStatMap ; TMap<FString,FSessionPersistentStats> SessionPersistentStatMap ; FTSTicker::FDelegateHandle TickHandle ; FDelegateHandle OnApp_EnteringForegroundHandle ; FDelegateHandle OnApp_EnteringBackgroundHandle ; float TimerAutoUpdateTimeRemaining ; float TimerDirtyStatUpdateTimeRemaining ; bool bShouldAutoUpdateTimersInTick ; float TimerAutoUpdateRate ; bool bShouldSaveDirtyStatsOnTick ; float DirtyStatSaveToDiskRate ; bool bShouldAutoHandleFGBGStats ; } ; } struct IBundleSourceContentRequestSharedContext { ~)",
    "insertText": "IBundleSourceContentRequestSharedContext()"
  },
  {
    "label": "FContentRequestSharedContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FContentRequestSharedContext {)",
    "insertText": "FContentRequestSharedContext()"
  },
  {
    "label": "FContentRequestSharedContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContentRequestSharedContext(const FContentRequestSharedContext& Other)"
  },
  {
    "label": "FContentRequestSharedContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContentRequestSharedContext(FContentRequestSharedContext&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FContentRequestSharedContext&)",
    "insertText": "operator(const FContentRequestSharedContext& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FContentRequestSharedContext&)",
    "insertText": "operator(FContentRequestSharedContext&& Other)"
  }
]