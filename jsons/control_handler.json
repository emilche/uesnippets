[
  {
    "label": "CongestionControlHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CongestionControlHandler"
  },
  {
    "label": "CongestionControlHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_RTP_CONTROL_HANDLER_H_ # define MODULES_CONGESTION_CONTROLLER_RTP_CONTROL_HANDLER_H_ # include<stdint . h> # include \" absl / types / optional . h \" # include \" api / sequence_checker . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / system / no_unique_address . h \" namespace webrtc { class CongestionControlHandler { public :)",
    "insertText": "CongestionControlHandler()"
  },
  {
    "label": "CongestionControlHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CongestionControlHandler(const CongestionControlHandler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CongestionControlHandler&)",
    "insertText": "operator(const CongestionControlHandler&)"
  },
  {
    "label": "SetTargetRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetRate(TargetTransferRate new_target_rate)"
  },
  {
    "label": "SetNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkAvailability(bool network_available)"
  },
  {
    "label": "SetPacerQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacerQueue(TimeDelta expected_queue_time)"
  },
  {
    "label": "GetUpdate()",
    "kind": "Method",
    "detail": "Function (absl::optional<TargetTransferRate>)",
    "insertText": "GetUpdate()"
  }
]