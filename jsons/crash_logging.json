[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CrashKeyString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CrashKeyString"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CrashKeyImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CrashKeyImplementation"
  },
  {
    "label": "AllocateCrashKeyString()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_DEBUG_CRASH_LOGGING_H_ # define BASE_DEBUG_CRASH_LOGGING_H_ # include<stddef . h> # include<iosfwd> # include<memory> # include<type_traits> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_number_conversions . h \" # include \" base / strings / string_piece . h \" namespace base { namespace debug { enum class CrashKeySize { Size32 = 3 2,Size64 = 6 4,Size256 = 2 5 6,Size1024 = 1 0 2 4,} ; struct CrashKeyString ; BASE_EXPORT CrashKeyString*)",
    "insertText": "AllocateCrashKeyString(const char name[], CrashKeySize size)"
  },
  {
    "label": "SetCrashKeyString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "SetCrashKeyString(CrashKeyString* crash_key, base::StringPiece value)"
  },
  {
    "label": "ClearCrashKeyString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ClearCrashKeyString(CrashKeyString* crash_key)"
  },
  {
    "label": "OutputCrashKeysToStream()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "OutputCrashKeysToStream(std::ostream& out)"
  },
  {
    "label": "ScopedCrashKeyString()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ScopedCrashKeyString { public :)",
    "insertText": "ScopedCrashKeyString(CrashKeyString* crash_key, base::StringPiece value)"
  },
  {
    "label": "ScopedCrashKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedCrashKeyString(ScopedCrashKeyString&& other)"
  },
  {
    "label": "ScopedCrashKeyString()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedCrashKeyString()"
  },
  {
    "label": "ScopedCrashKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedCrashKeyString(const ScopedCrashKeyString&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedCrashKeyString&)",
    "insertText": "operator(const ScopedCrashKeyString&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedCrashKeyString&)",
    "insertText": "operator(ScopedCrashKeyString&&)"
  },
  {
    "label": "SCOPED_CRASH_KEY_STRING_INTERNAL2()",
    "kind": "Method",
    "detail": "Function (private : raw_ptr<CrashKeyString> crash_key_ ; } ; # define)",
    "insertText": "SCOPED_CRASH_KEY_STRING_INTERNAL2(category, name, nonce, data, \\ key_size) \\ static_assert(::std::size(category \"-\" name) < 40, \\ \"Crash key names must be shorter than 40 characters.\")"
  },
  {
    "label": "nonce()",
    "kind": "Method",
    "detail": "Function (\\::base::debug::ScopedCrashKeyString scoped_crash_key_helper # #)",
    "insertText": "nonce(\\ [] { \\ static auto* const key = ::base::debug::AllocateCrashKeyString( \\ category \"-\" name, key_size); \\ return key; \\ }(), \\ (data)) #define SCOPED_CRASH_KEY_STRING_INTERNAL(category, name, nonce, data, \\ key_size) \\ SCOPED_CRASH_KEY_STRING_INTERNAL2(category, name, nonce, data, key_size) #define SCOPED_CRASH_KEY_STRING32(category, name, data) \\ SCOPED_CRASH_KEY_STRING_INTERNAL(category, name, __COUNTER__, (data), \\ ::base::debug::CrashKeySize::Size32) #define SCOPED_CRASH_KEY_STRING64(category, name, data) \\ SCOPED_CRASH_KEY_STRING_INTERNAL(category, name, __COUNTER__, (data), \\ ::base::debug::CrashKeySize::Size64) #define SCOPED_CRASH_KEY_STRING256(category, name, data) \\ SCOPED_CRASH_KEY_STRING_INTERNAL(category, name, __COUNTER__, (data), \\ ::base::debug::CrashKeySize::Size256) #define SCOPED_CRASH_KEY_STRING1024(category, name, data) \\ SCOPED_CRASH_KEY_STRING_INTERNAL(category, name, __COUNTER__, (data), \\ ::base::debug::CrashKeySize::Size1024) #define SCOPED_CRASH_KEY_BOOL(category, name, data) \\ static_assert(std::is_same<std::decay_t<decltype(data)>, bool>::value, \\ \"SCOPED_CRASH_KEY_BOOL must be passed a boolean value.\")"
  },
  {
    "label": "SCOPED_CRASH_KEY_STRING32()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SCOPED_CRASH_KEY_STRING32(category, name, (data) ? \"true\" : \"false\") #define SCOPED_CRASH_KEY_NUMBER(category, name, data) \\ SCOPED_CRASH_KEY_STRING32(category, name, ::base::NumberToString(data))"
  },
  {
    "label": "CrashKeyImplementation()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "CrashKeyImplementation()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (CrashKeyString*)",
    "insertText": "Allocate(const char name[], CrashKeySize size)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(CrashKeyString* crash_key, base::StringPiece value)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(CrashKeyString* crash_key)"
  },
  {
    "label": "SetCrashKeyImplementation()",
    "kind": "Method",
    "detail": "Function (} ; BASE_EXPORT void)",
    "insertText": "SetCrashKeyImplementation(std::unique_ptr<CrashKeyImplementation> impl)"
  },
  {
    "label": "CrashKeyString()",
    "kind": "Method",
    "detail": "Function (struct CrashKeyString {)",
    "insertText": "CrashKeyString(const char name[], CrashKeySize size) : name(name), size(size)"
  }
]