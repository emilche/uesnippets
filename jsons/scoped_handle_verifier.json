[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "HandleHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HandleHash"
  },
  {
    "label": "ScopedHandleVerifierInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedHandleVerifierInfo"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_HANDLE_VERIFIER_H_ # define BASE_WIN_SCOPED_HANDLE_VERIFIER_H_ # include<memory> # include<unordered_map> # include \" base / base_export . h \" # include \" base / debug / stack_trace . h \" # include \" base / hash / hash . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / lock_impl . h \" # include \" base / threading / thread_local . h \" # include \" base / win / windows_types . h \" namespace base { namespace win { enum class HandleOperation ; namespace internal { struct HandleHash { size_t)",
    "insertText": "operator()(const HANDLE& handle)"
  },
  {
    "label": "ScopedHandleVerifierInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct ScopedHandleVerifierInfo {)",
    "insertText": "ScopedHandleVerifierInfo(const void* owner, const void* pc1, const void* pc2, std::unique_ptr<debug::StackTrace> stack, DWORD thread_id)"
  },
  {
    "label": "ScopedHandleVerifierInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedHandleVerifierInfo()"
  },
  {
    "label": "ScopedHandleVerifierInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedHandleVerifierInfo(const ScopedHandleVerifierInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedHandleVerifierInfo&)",
    "insertText": "operator(const ScopedHandleVerifierInfo&)"
  },
  {
    "label": "ScopedHandleVerifierInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedHandleVerifierInfo(ScopedHandleVerifierInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedHandleVerifierInfo&)",
    "insertText": "operator(ScopedHandleVerifierInfo&&)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (raw_ptr<const void> owner ; raw_ptr<const void> pc1 ; raw_ptr<const void> pc2 ; std::unique_ptr<debug::StackTrace> stack ; DWORD thread_id ; } ; # pragma)",
    "insertText": "warning(push) #pragma warning(disable : 5030)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "warning(pop) public: explicit ScopedHandleVerifier(bool enabled)"
  },
  {
    "label": "ScopedHandleVerifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedHandleVerifier(const ScopedHandleVerifier&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedHandleVerifier&)",
    "insertText": "operator(const ScopedHandleVerifier&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ScopedHandleVerifier*)",
    "insertText": "Get()"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseHandle(HANDLE handle)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTracking(HANDLE handle, const void* owner, const void* pc1, const void* pc2)"
  },
  {
    "label": "StopTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTracking(HANDLE handle, const void* owner, const void* pc1, const void* pc2)"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "OnHandleBeingClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHandleBeingClosed(HANDLE handle, HandleOperation operation)"
  },
  {
    "label": "GetModule()",
    "kind": "Method",
    "detail": "Function (HMODULE)",
    "insertText": "GetModule()"
  },
  {
    "label": "ScopedHandleVerifier()",
    "kind": "Method",
    "detail": "Function (private : ~)",
    "insertText": "ScopedHandleVerifier()"
  },
  {
    "label": "StartTrackingImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTrackingImpl(HANDLE handle, const void* owner, const void* pc1, const void* pc2)"
  },
  {
    "label": "StopTrackingImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTrackingImpl(HANDLE handle, const void* owner, const void* pc1, const void* pc2)"
  },
  {
    "label": "OnHandleBeingClosedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHandleBeingClosedImpl(HANDLE handle, HandleOperation operation)"
  },
  {
    "label": "GetLock()",
    "kind": "Method",
    "detail": "Function (base::internal::LockImpl*)",
    "insertText": "GetLock()"
  },
  {
    "label": "InstallVerifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallVerifier()"
  },
  {
    "label": "ThreadSafeAssignOrCreateScopedHandleVerifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadSafeAssignOrCreateScopedHandleVerifier(ScopedHandleVerifier * existing_verifier, bool enabled)"
  },
  {
    "label": "GetHandleVerifierModuleForTesting()",
    "kind": "Method",
    "detail": "Function (base::debug::StackTrace creation_stack_ ; bool enabled_ ; base::ThreadLocalBoolean closing_ ; raw_ptr<base::internal::LockImpl> lock_ ; std::unordered_map<HANDLE,ScopedHandleVerifierInfo,HandleHash> map_ ; } ; BASE_EXPORT HMODULE)",
    "insertText": "GetHandleVerifierModuleForTesting()"
  }
]