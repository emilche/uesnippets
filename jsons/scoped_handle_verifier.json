[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "HandleHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HandleHash"
  },
  {
    "label": "ScopedHandleVerifierInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedHandleVerifierInfo"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "even",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "even"
  },
  {
    "label": "ScopedHandleVerifier()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedHandleVerifier(bool enabled)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseHandle(HANDLE handle)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTracking(HANDLE handle, const void* owner, const void* pc1,\n                             const void* pc2)"
  },
  {
    "label": "StopTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTracking(HANDLE handle, const void* owner, const void* pc1,\n                            const void* pc2)"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "OnHandleBeingClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHandleBeingClosed(HANDLE handle, HandleOperation operation)"
  },
  {
    "label": "StartTrackingImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTrackingImpl(HANDLE handle, const void* owner, const void* pc1,\n                         const void* pc2)"
  },
  {
    "label": "StopTrackingImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTrackingImpl(HANDLE handle, const void* owner, const void* pc1,\n                        const void* pc2)"
  },
  {
    "label": "OnHandleBeingClosedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHandleBeingClosedImpl(HANDLE handle, HandleOperation operation)"
  },
  {
    "label": "InstallVerifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallVerifier()"
  },
  {
    "label": "ThreadSafeAssignOrCreateScopedHandleVerifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadSafeAssignOrCreateScopedHandleVerifier(\n      ScopedHandleVerifier * existing_verifier, bool enabled)"
  },
  {
    "label": "GetHandleVerifierModuleForTesting()",
    "kind": "Method",
    "detail": "Function (HMODULE)",
    "insertText": "GetHandleVerifierModuleForTesting()"
  }
]