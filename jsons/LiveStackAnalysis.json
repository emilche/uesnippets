[
  {
    "label": "LiveStacks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveStacks"
  },
  {
    "label": "info",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "info"
  },
  {
    "label": "LiveStacks()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LIVESTACKANALYSIS_H # define LLVM_CODEGEN_LIVESTACKANALYSIS_H # include \" llvm / CodeGen / LiveInterval . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Target / TargetRegisterInfo . h \" # include<map> # include<unordered_map> namespace llvm { class LiveStacks : public MachineFunctionPass { const TargetRegisterInfo* TRI ; VNInfo::Allocator VNInfoAllocator ; typedef std::unordered_map<int,LiveInterval> SS2IntervalMap ; SS2IntervalMap S2IMap ; std::map<int,const TargetRegisterClass*> S2RCMap ; public : char ID ;)",
    "insertText": "LiveStacks() : MachineFunctionPass(ID)"
  },
  {
    "label": "initializeLiveStacksPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeLiveStacksPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} typedef SS2IntervalMap::iterator iterator ; typedef SS2IntervalMap::const_iterator const_iterator ; const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "end()"
  },
  {
    "label": "getNumIntervals()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumIntervals()"
  },
  {
    "label": "getOrCreateInterval()",
    "kind": "Method",
    "detail": "Function (} LiveInterval&)",
    "insertText": "getOrCreateInterval(int Slot, const TargetRegisterClass *RC)"
  },
  {
    "label": "getInterval()",
    "kind": "Method",
    "detail": "Function (LiveInterval&)",
    "insertText": "getInterval(int Slot)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Slot >= 0 && \"Spill slot indice must be >= 0\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (SS2IntervalMap::iterator I = S2IMap .)",
    "insertText": "find(Slot)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != S2IMap.end() && \"Interval does not exist for stack slot\")"
  },
  {
    "label": "getIntervalRegClass()",
    "kind": "Method",
    "detail": "Function (} const TargetRegisterClass*)",
    "insertText": "getIntervalRegClass(int Slot)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != S2RCMap.end() && \"Register class info does not exist for stack slot\")"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnMachineFunction(MachineFunction&)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &O, const Module* = nullptr)"
  }
]