[
  {
    "label": "TSphere",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSphere"
  },
  {
    "label": "FCapsule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCapsule"
  },
  {
    "label": "FConvex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvex"
  },
  {
    "label": "TPlane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPlane"
  },
  {
    "label": "FBVHParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBVHParticles"
  },
  {
    "label": "FCollisionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionContext"
  },
  {
    "label": "FHeightField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeightField"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FTriangleMeshImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMeshImplicitObject"
  },
  {
    "label": "UpdateConstraint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / CollisionResolutionUtil . h \" # include \" Chaos / Collision / PBDCollisionConstraint . h \" # include \" Chaos / ParticleHandleFwd . h \" namespace Chaos { template<T,int d> class TSphere ; class FCapsule ; class FConvex ; template<T,int d> class TPlane ; class FBVHParticles ; class FCollisionContext ; class FHeightField ; class FImplicitObject ; class FPBDCollisionConstraint ; class FTriangleMeshImplicitObject ; namespace Collisions { void)",
    "insertText": "UpdateConstraint(FPBDCollisionConstraint& Constraint, const FRigidTransform3& ShapeWorldTransform0, const FRigidTransform3& ShapeWorldTransform1, const FReal Dt)"
  },
  {
    "label": "UpdateConstraintSwept()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateConstraintSwept(FPBDCollisionConstraint& Constraint, const FRigidTransform3& ShapeStartWorldTransform0, const FRigidTransform3& ShapeStartWorldTransform1, const FReal Dt)"
  },
  {
    "label": "CalculateShapePairType()",
    "kind": "Method",
    "detail": "Function (EContactShapesType)",
    "insertText": "CalculateShapePairType(const FGeometryParticleHandle* Particle0, const FImplicitObject* Implicit0, const FGeometryParticleHandle* Particle1, const FImplicitObject* Implicit1, bool& bOutSwap)"
  },
  {
    "label": "ShouldUseCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseCCD(const FGeometryParticleHandle* Particle0, const FVec3& DeltaX0, const FGeometryParticleHandle* Particle1, const FVec3& DeltaX1, FVec3& Dir, FReal& Length)"
  },
  {
    "label": "UpdateLevelsetLevelsetConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelsetLevelsetConstraint(const FRigidTransform3& WorldTransform0, const FRigidTransform3& WorldTransform1, const FReal Dt, FPBDCollisionConstraint& Constraint)"
  }
]