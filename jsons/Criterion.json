[
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FIsoCurvature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIsoCurvature"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FCriterion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / CADEntity . h \" # include \" Core / Types . h \" # include \" Geo / GeoPoint . h \" # include \" Math / Point . h \" # include \" Mesh / Criteria / CriterionType . h \" namespace UE::CADKernel { const TCHAR* CriterionTypeNames [ ] ; const char* CriterionTypeConstNames [ ] ; const char* CriterionTypeConstDescHelp [ ] ; class FTopologicalEdge ; struct FCurvePoint ; struct FIsoCurvature ; class FCriterion : public FEntity { class FEntity ; protected :)",
    "insertText": "FCriterion()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "GetCriterionType()",
    "kind": "Method",
    "detail": "Function (ECriterion CriterionType =)",
    "insertText": "GetCriterionType()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<CriterionType ; })",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FCriterion>)",
    "insertText": "Deserialize(FCADKernelArchive& Archive)"
  },
  {
    "label": "CreateCriterion()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCriterion>)",
    "insertText": "CreateCriterion(ECriterion type, double value = 0.)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (# endif EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "GetCriterionName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCriterionName()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Value()"
  },
  {
    "label": "EvaluateSag()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "EvaluateSag(const FPoint& PointPoint, const FPoint& PointNext, const FPoint& PointMiddle, double& Length)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (FPoint ChordVec = PointNext - PointPoint ; FPoint MiddleVec = PointMiddle - PointPoint ; double Sag = 0 . 0 ; double NormSqrVec = ChordVec* ChordVec ; Length =)",
    "insertText": "sqrt(NormSqrVec)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPoint VecSag = ChordVec ^ MiddleVec ; double NormSqrSag = VecSag* VecSag ; Sag = NormSqrSag / NormSqrVec ;)",
    "insertText": "if(Sag < SMALL_NUMBER_SQUARE)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (Sag = 0 . ; } else { Sag =)",
    "insertText": "sqrt(Sag)"
  },
  {
    "label": "IsAppliedBetweenBreaks()",
    "kind": "Method",
    "detail": "Function (} } return Sag ; } bool)",
    "insertText": "IsAppliedBetweenBreaks()"
  },
  {
    "label": "DefaultValue()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "DefaultValue(ECriterion type)"
  },
  {
    "label": "UpdateDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelta(double InDeltaU, double InUSag, double InDiagonalSag, double InVSag, double ChordLength, double DiagonalLength, double& OutDeltaUMax, double& OutDeltaUMin, FIsoCurvature& SurfaceCurvature)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const double DiagonalSagU =)",
    "insertText": "Abs(InDiagonalSag - InVSag)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (InUSag =)",
    "insertText": "Max(InUSag, DiagonalSagU)"
  },
  {
    "label": "ComputeDeltaU()",
    "kind": "Method",
    "detail": "Function (const double CriterionDeltaUMax =)",
    "insertText": "ComputeDeltaU(ChordLength, InDeltaU, InUSag)"
  },
  {
    "label": "UpdateWithUMaxValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWithUMaxValue(CriterionDeltaUMax, OutDeltaUMax, OutDeltaUMin)"
  },
  {
    "label": "ComputeDeltaU()",
    "kind": "Method",
    "detail": "Function (} } protected : double)",
    "insertText": "ComputeDeltaU(double ChordLength, double DeltaU, double Sag)"
  },
  {
    "label": "UpdateWithUMinValue()",
    "kind": "Method",
    "detail": "Function (OutDeltaUMax = OutDeltaUMin ; } else { OutDeltaUMax = NewMaxValue ; } } } void)",
    "insertText": "UpdateWithUMinValue(double NewMinValue, double& OutDeltaUMax, double& OutDeltaUMin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutDeltaUMin = NewMinValue ; })",
    "insertText": "if(OutDeltaUMax < NewMinValue)"
  }
]