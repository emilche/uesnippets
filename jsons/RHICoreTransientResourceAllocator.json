[
  {
    "label": "FRHITransientResourceStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientResourceStats"
  },
  {
    "label": "FRHITransientMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientMemoryStats"
  },
  {
    "label": "TRHITransientResourceCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRHITransientResourceCache"
  },
  {
    "label": "FCacheItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheItem"
  },
  {
    "label": "IRHITransientMemoryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHITransientMemoryCache"
  },
  {
    "label": "FRHITransientHeapCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientHeapCache"
  },
  {
    "label": "FRHITransientResourceHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientResourceHeapAllocator"
  },
  {
    "label": "FRHITransientHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientHeapAllocator"
  },
  {
    "label": "FAliasingOverlap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAliasingOverlap"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "FFindResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFindResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHITransientHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientHeap"
  },
  {
    "label": "FInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializer"
  },
  {
    "label": "FResourceInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceInitializer"
  },
  {
    "label": "FRHITransientPagePoolCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientPagePoolCache"
  },
  {
    "label": "FRHITransientResourcePageAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientResourcePageAllocator"
  },
  {
    "label": "FRHITransientPageSpanAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientPageSpanAllocator"
  },
  {
    "label": "FPageSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageSpan"
  },
  {
    "label": "FRHITransientPagePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientPagePool"
  },
  {
    "label": "FAllocationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationContext"
  },
  {
    "label": "FPageMapRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageMapRequest"
  },
  {
    "label": "RHICORE_TRANSIENT_ALLOCATOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHITransientResourceAllocator . h \" # include \" Algo / Partition . h \" # define)",
    "insertText": "RHICORE_TRANSIENT_ALLOCATOR_DEBUG(!UE_BUILD_SHIPPING && !UE_BUILD_TEST) #if RHICORE_TRANSIENT_ALLOCATOR_DEBUG #define IF_RHICORE_TRANSIENT_ALLOCATOR_DEBUG(Op) Op #else #define IF_RHICORE_TRANSIENT_ALLOCATOR_DEBUG(Op) #endif inline uint64 ComputeHash(const FRHITextureCreateInfo& InCreateInfo, uint64 HeapOffset)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (FRHITextureCreateInfo NewInfo ;)",
    "insertText": "Memzero(&NewInfo, sizeof(FRHITextureCreateInfo))"
  },
  {
    "label": "CityHash64WithSeed()",
    "kind": "Method",
    "detail": "Function (NewInfo = InCreateInfo ; return)",
    "insertText": "CityHash64WithSeed((const char*)&NewInfo, sizeof(FRHITextureCreateInfo), HeapOffset)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "ComputeHash(const FRHITextureCreateInfo& InCreateInfo)"
  },
  {
    "label": "CityHash64()",
    "kind": "Method",
    "detail": "Function (NewInfo = InCreateInfo ; return)",
    "insertText": "CityHash64((const char*)&NewInfo, sizeof(FRHITextureCreateInfo))"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "ComputeHash(const FRHIBufferCreateInfo& InCreateInfo, uint64 HeapOffset)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "ComputeHash(const FRHIBufferCreateInfo& InCreateInfo)"
  },
  {
    "label": "FRHITransientResourceStats()",
    "kind": "Method",
    "detail": "Function (} struct FRHITransientResourceStats {)",
    "insertText": "FRHITransientResourceStats()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FRHITransientResourceStats& Other)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (AllocatedSize + = Other . AllocatedSize ; AllocationCount + = Other . AllocationCount ; DeallocationCount + = Other . DeallocationCount ; CreateCount + = Other . CreateCount ; } void)",
    "insertText": "Allocate(uint64 Size)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (AllocationCount + + ; AllocatedSize + = Size ; } void)",
    "insertText": "Deallocate(uint64 Size)"
  },
  {
    "label": "FRHITransientMemoryStats()",
    "kind": "Method",
    "detail": "Function (DeallocationCount + + ; } uint64 AllocatedSize = 0 ; uint32 AllocationCount = 0 ; uint32 DeallocationCount = 0 ; uint32 CreateCount = 0 ; } ; struct FRHITransientMemoryStats { public :)",
    "insertText": "FRHITransientMemoryStats()"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(const FRHITransientMemoryStats& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Textures .)",
    "insertText": "Add(Other.Textures)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Buffers .)",
    "insertText": "Add(Other.Buffers)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (AliasedSize =)",
    "insertText": "Max(AliasedSize, Other.AliasedSize)"
  },
  {
    "label": "AllocateTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateTexture(uint64 Size)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (Textures .)",
    "insertText": "Allocate(Size)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (AliasedSizeCurrent + = Size ; AliasedSize =)",
    "insertText": "Max(AliasedSize, AliasedSizeCurrent)"
  },
  {
    "label": "DeallocateTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeallocateTexture(uint64 Size)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (Textures .)",
    "insertText": "Deallocate(Size)"
  },
  {
    "label": "AllocateBuffer()",
    "kind": "Method",
    "detail": "Function (AliasedSizeCurrent - = Size ; } void)",
    "insertText": "AllocateBuffer(uint64 Size)"
  },
  {
    "label": "DeallocateBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeallocateBuffer(uint64 Size)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (AliasedSizeCurrent - = Size ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Submit()",
    "kind": "Method",
    "detail": "Function (Textures = { } ; Buffers = { } ; AliasedSize = AliasedSizeCurrent ; } void)",
    "insertText": "Submit(uint64 TotalMemoryCapacity)"
  },
  {
    "label": "HasDeallocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDeallocations()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Cache .)",
    "insertText": "Reserve(Capacity)"
  },
  {
    "label": "TRHITransientResourceCache()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TRHITransientResourceCache()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (delete Item . Resource ; })",
    "insertText": "for(TransientResourceType* Resource : Allocated)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (delete Resource ; } } template<CreateFunctionType> TransientResourceType*)",
    "insertText": "Acquire(uint64 Hash, CreateFunctionType CreateFunction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FCacheItem& CacheItem = Cache [ Index ] ;)",
    "insertText": "if(CacheItem.Hash == Hash)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (TransientResourceType* Resource = CacheItem . Resource ; Cache .)",
    "insertText": "RemoveAtSwap(Index, EAllowShrinking::No)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Allocated .)",
    "insertText": "Emplace(Resource)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (HitCount + + ; return Resource ; } })",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(CreatePlacedResource)"
  },
  {
    "label": "CreateFunction()",
    "kind": "Method",
    "detail": "Function (TransientResourceType* Resource =)",
    "insertText": "CreateFunction(Hash)"
  },
  {
    "label": "Forfeit()",
    "kind": "Method",
    "detail": "Function (MissCount + + ; return Resource ; } template<ReleaseFunctionType> void)",
    "insertText": "Forfeit(uint64 CurrentFrameIndex, ReleaseFunctionType ReleaseFunction)"
  },
  {
    "label": "Partition()",
    "kind": "Method",
    "detail": "Function (const int32 FirstForfeitIndex =)",
    "insertText": "Partition(Allocated.GetData(), Allocated.Num(), [](const FRHITransientResource* Resource) { return Resource->IsAcquired(); })"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (const auto ResourcesToForfeit =)",
    "insertText": "MakeArrayView(Allocated.GetData() + FirstForfeitIndex, Allocated.Num() - FirstForfeitIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Cache .)",
    "insertText": "Emplace(Resource, Resource->GetHash(), CurrentFrameIndex)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} Allocated .)",
    "insertText": "SetNum(FirstForfeitIndex, EAllowShrinking::No)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Cache, [](const FCacheItem& LHS, const FCacheItem& RHS) { return LHS.LastUsedFrame > RHS.LastUsedFrame; })"
  },
  {
    "label": "Forfeit()",
    "kind": "Method",
    "detail": "Function (break ; } } HitCount = 0 ; MissCount = 0 ; } void)",
    "insertText": "Forfeit(uint64 CurrentFrameIndex)"
  },
  {
    "label": "GetAllocated()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<TransientResourceType*>)",
    "insertText": "GetAllocated()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "TryReleaseItem()",
    "kind": "Method",
    "detail": "Function (} private : template<ReleaseFunctionType> bool)",
    "insertText": "TryReleaseItem(uint64 CurrentFrameIndex, ReleaseFunctionType ReleaseFunction)"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (const FCacheItem& Item = Cache .)",
    "insertText": "Top()"
  },
  {
    "label": "ReleaseFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFunction(Item.Resource)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (delete Item . Resource ; Cache .)",
    "insertText": "Pop()"
  },
  {
    "label": "IRHITransientMemoryCache()",
    "kind": "Method",
    "detail": "Function (} TransientResourceType* Resource ; uint64 Hash { } ; uint64 LastUsedFrame { } ; } ; TArray<FCacheItem> Cache ; TArray<TransientResourceType*> Allocated ; uint32 GarbageCollectLatency ; uint32 Capacity ; uint32 HitCount = 0 ; uint32 MissCount = 0 ; } ; class IRHITransientMemoryCache { public : ~)",
    "insertText": "IRHITransientMemoryCache()"
  },
  {
    "label": "GarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GarbageCollect()"
  },
  {
    "label": "FAliasingOverlap()",
    "kind": "Method",
    "detail": "Function (} ; class FRHITransientHeapCache ; class FRHITransientResourceHeapAllocator ; class FRHITransientHeapAllocator { public : struct FAliasingOverlap {)",
    "insertText": "FAliasingOverlap()"
  },
  {
    "label": "FAliasingOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAliasingOverlap(FRHITransientResource* InResource, uint32 InAcquireFence) : Resource(InResource) , AcquireFence(InAcquireFence)"
  },
  {
    "label": "FRHITransientHeapAllocator()",
    "kind": "Method",
    "detail": "Function (} FRHITransientResource* Resource ; uint32 AcquireFence ; } ;)",
    "insertText": "FRHITransientHeapAllocator(uint64 Capacity, uint32 Alignment)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (FRHITransientHeapAllocation)",
    "insertText": "Allocate(const FRHITransientAllocationFences& Fences, uint64 Size, uint32 Alignment, TArray<FAliasingOverlap>& OutAliasingOverlaps)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(FRHITransientResource* Resource, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "SetGpuVirtualAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGpuVirtualAddress(uint64 InGpuVirtualAddress)"
  },
  {
    "label": "GetGpuVirtualAddress()",
    "kind": "Method",
    "detail": "Function (GpuVirtualAddress = InGpuVirtualAddress ; } uint64)",
    "insertText": "GetGpuVirtualAddress()"
  },
  {
    "label": "GetStart()",
    "kind": "Method",
    "detail": "Function (struct FRange { FRHITransientResource* Resource = nullptr ; FRHITransientAllocationFences Fences ; uint64 Size = 0 ; uint64 Offset = 0 ; FRangeHandle NextFreeHandle = InvalidRangeHandle ; FRangeHandle PrevFreeHandle = InvalidRangeHandle ; uint64)",
    "insertText": "GetStart()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} Ranges .)",
    "insertText": "Emplace()"
  },
  {
    "label": "InsertRange()",
    "kind": "Method",
    "detail": "Function (} FRangeHandle)",
    "insertText": "InsertRange(FRangeHandle PreviousHandle, FRHITransientResource* Resource, const FRHITransientAllocationFences& Fences, uint64 Offset, uint64 Size)"
  },
  {
    "label": "CreateRange()",
    "kind": "Method",
    "detail": "Function (FRangeHandle Handle =)",
    "insertText": "CreateRange()"
  },
  {
    "label": "RemoveRange()",
    "kind": "Method",
    "detail": "Function (FRange& CurrentRange = Ranges [ Handle ] ; CurrentRange . Resource = Resource ; CurrentRange . Fences = Fences ; CurrentRange . Offset = Offset ; CurrentRange . Size = Size ; FRange& PreviousRange = Ranges [ PreviousHandle ] ; CurrentRange . NextFreeHandle = PreviousRange . NextFreeHandle ; PreviousRange . NextFreeHandle = Handle ; return Handle ; } FRangeHandle)",
    "insertText": "RemoveRange(FRangeHandle PreviousHandle, FRangeHandle CurrentHandle)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FRange& PreviousRange = Ranges [ PreviousHandle ] ; FRange& CurrentRange = Ranges [ CurrentHandle ] ; FRangeHandle NextCurrentHandle = CurrentRange . NextFreeHandle ;)",
    "insertText": "check(PreviousRange.NextFreeHandle == CurrentHandle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PreviousRange . NextFreeHandle = CurrentRange . NextFreeHandle ; CurrentRange . NextFreeHandle = InvalidRangeHandle ; CurrentRange . Resource = nullptr ; RangeFreeList .)",
    "insertText": "Add(CurrentHandle)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (uint64 GpuVirtualAddress = 0 ; uint64 Capacity = 0 ; uint64 UsedSize = 0 ; uint64 AlignmentWaste = 0 ; uint32 AllocationCount = 0 ; uint32 AlignmentMin = 0 ; FRangeHandle HeadHandle = InvalidRangeHandle ; TArray<FRangeHandle> RangeFreeList ; TArray<FRange> Ranges ; } ; enum class ERHITransientHeapFlags : uint8 { AllowBuffers = 1<<0,AllowTextures = 1<<1,AllowRenderTargets = 1<<2,AllowNNEBuffers = 1<<3,AllowAll = AllowBuffers | AllowTextures | AllowRenderTargets | AllowNNEBuffers } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERHITransientHeapFlags)"
  },
  {
    "label": "FResourceInitializer()",
    "kind": "Method",
    "detail": "Function (class FRHITransientHeap { public : struct FInitializer { uint64 Size = 0 ; uint32 Alignment = 0 ; ERHITransientHeapFlags Flags = ERHITransientHeapFlags::AllowAll ; uint32 TextureCacheSize = 0 ; uint32 BufferCacheSize = 0 ; } ; struct FResourceInitializer {)",
    "insertText": "FResourceInitializer(const FRHITransientHeapAllocation& InAllocation, uint64 InHash) : Heap(*InAllocation.Heap) , Allocation(InAllocation) , Hash(InHash)"
  },
  {
    "label": "FRHITransientTexture()",
    "kind": "Method",
    "detail": "Function (} FRHITransientHeap& Heap ; const FRHITransientHeapAllocation& Allocation ; const uint64 Hash ; } ; using FCreateTextureFunction = TFunction<)",
    "insertText": "FRHITransientTexture(const FResourceInitializer&)"
  },
  {
    "label": "FRHITransientBuffer()",
    "kind": "Method",
    "detail": "Function (using FCreateBufferFunction = TFunction<)",
    "insertText": "FRHITransientBuffer(const FResourceInitializer&)"
  },
  {
    "label": "FRHITransientHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransientHeap(const FInitializer& InInitializer) : Initializer(InInitializer) , Allocator(InInitializer.Size, InInitializer.Alignment) , AlignmentLog2(FPlatformMath::CeilLogTwo64(InInitializer.Alignment)) , Textures(InInitializer.TextureCacheSize) , Buffers(InInitializer.BufferCacheSize)"
  },
  {
    "label": "FRHITransientHeap()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHITransientHeap()"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (FRHITransientTexture*)",
    "insertText": "CreateTexture(const FRHITextureCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences, uint64 CurrentAllocatorCycle, uint64 TextureSize, uint32 TextureAlignment, FCreateTextureFunction CreateTextureFunction)"
  },
  {
    "label": "DeallocateMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateMemory(FRHITransientTexture* Texture, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRHITransientBuffer*)",
    "insertText": "CreateBuffer(const FRHIBufferCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences, uint64 CurrentAllocatorCycle, uint64 BufferSize, uint32 BufferAlignment, FCreateBufferFunction CreateBufferFunction)"
  },
  {
    "label": "DeallocateMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateMemory(FRHITransientBuffer* Buffer, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(uint64 CurrentAllocatorCycle, FRHITransientMemoryStats& OutMemoryStats, FRHITransientAllocationStats* OutAllocationStats)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (const FInitializer&)",
    "insertText": "GetInitializer()"
  },
  {
    "label": "GetGPUVirtualAddress()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetGPUVirtualAddress()"
  },
  {
    "label": "GetLastUsedGarbageCollectCycle()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetLastUsedGarbageCollectCycle()"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "IsCommitRequired()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCommitRequired()"
  },
  {
    "label": "SetGpuVirtualAddress()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetGpuVirtualAddress(uint64 InBaseGPUVirtualAddress)"
  },
  {
    "label": "SetGpuVirtualAddress()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "SetGpuVirtualAddress(InBaseGPUVirtualAddress)"
  },
  {
    "label": "AllocateMemoryInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AllocateMemoryInternal(FRHITransientResource* Resource, const FRHITransientHeapAllocation& Allocation)"
  },
  {
    "label": "DeallocateMemoryInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateMemoryInternal(FRHITransientResource* Resource, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "CreateDefault()",
    "kind": "Method",
    "detail": "Function (FInitializer Initializer ; FRHITransientHeapAllocator Allocator ; uint64 LastUsedGarbageCollectCycle = 0 ; uint64 CommitSize = 0 ; uint64 CommitSizeMax = 0 ; uint32 AlignmentLog2 ; TArray<FRHITransientHeapAllocator::FAliasingOverlap> AliasingOverlaps ; FRHITransientMemoryStats Stats ; TRHITransientResourceCache<FRHITransientTexture> Textures ; TRHITransientResourceCache<FRHITransientBuffer> Buffers ; FRHITransientHeapCache ; FRHITransientResourceHeapAllocator ; } ; class FRHITransientHeapCache : public IRHITransientMemoryCache { public : struct FInitializer { FInitializer)",
    "insertText": "CreateDefault()"
  },
  {
    "label": "FRHITransientHeapCache()",
    "kind": "Method",
    "detail": "Function (const uint32 kDefaultResourceCacheSize = 2 5 6 ; uint64 MinimumFirstHeapSize = 0 ; uint64 MinimumHeapSize = 0 ; uint32 HeapAlignment = 0 ; uint32 GarbageCollectLatency = 0 ; uint32 TextureCacheSize = kDefaultResourceCacheSize ; uint32 BufferCacheSize = kDefaultResourceCacheSize ; bool bSupportsAllHeapFlags = true ; bool bSupportsVirtualMapping = false ; } ;)",
    "insertText": "FRHITransientHeapCache(const FInitializer& InInitializer) : Initializer(InInitializer)"
  },
  {
    "label": "FRHITransientHeapCache()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHITransientHeapCache()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (FRHITransientHeap*)",
    "insertText": "Acquire(uint64 FirstAllocationSize, ERHITransientHeapFlags FirstAllocationHeapFlags)"
  },
  {
    "label": "Forfeit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Forfeit(TConstArrayView<FRHITransientHeap*> Heaps)"
  },
  {
    "label": "CreateHeap()",
    "kind": "Method",
    "detail": "Function (} private : FRHITransientHeap*)",
    "insertText": "CreateHeap(const FRHITransientHeap::FInitializer& Initializer)"
  },
  {
    "label": "FRHITransientResourceHeapAllocator()",
    "kind": "Method",
    "detail": "Function (FInitializer Initializer ; FRHITransientMemoryStats Stats ; FCriticalSection CriticalSection ; TArray<FRHITransientHeap*> LiveList ; TArray<FRHITransientHeap*> FreeList ; uint64 GarbageCollectCycle = 0 ; FRHITransientResourceHeapAllocator ; } ; class FRHITransientResourceHeapAllocator : public IRHITransientResourceAllocator { public :)",
    "insertText": "FRHITransientResourceHeapAllocator(FRHITransientHeapCache& InHeapCache)"
  },
  {
    "label": "FRHITransientResourceHeapAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHITransientResourceHeapAllocator()"
  },
  {
    "label": "SetCreateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateMode(ERHITransientResourceCreateMode InCreateMode)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(FRHICommandListImmediate& RHICmdList, FRHITransientAllocationStats* OutAllocationStats)"
  },
  {
    "label": "GetHeaps()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FRHITransientHeap*>)",
    "insertText": "GetHeaps()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TransientResourceType* Resource ;)",
    "insertText": "if(CreateMode == ERHITransientResourceCreateMode::Inline)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (TransientResourceType::FResourceTaskResult TaskResult =)",
    "insertText": "Lambda()"
  },
  {
    "label": "TransientResourceType()",
    "kind": "Method",
    "detail": "Function (Resource = new)",
    "insertText": "TransientResourceType(TaskResult.Resource.GetReference(), TaskResult.GpuVirtualAddress, Hash, Size, ERHITransientAllocationType::Heap, CreateInfo)"
  },
  {
    "label": "TransientResourceType()",
    "kind": "Method",
    "detail": "Function (} else { Resource = new)",
    "insertText": "TransientResourceType(UE::Tasks::Launch(UE_SOURCE_LOCATION, MoveTemp(Lambda), LowLevelTasks::ETaskPriority::High), Hash, Size, ERHITransientAllocationType::Heap, CreateInfo)"
  },
  {
    "label": "CreateTextureInternal()",
    "kind": "Method",
    "detail": "Function (} return Resource ; } protected : FRHITransientTexture*)",
    "insertText": "CreateTextureInternal(const FRHITextureCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences, uint64 TextureSize, uint32 TextureAlignment, FRHITransientHeap::FCreateTextureFunction CreateTextureFunction)"
  },
  {
    "label": "CreateBufferInternal()",
    "kind": "Method",
    "detail": "Function (FRHITransientBuffer*)",
    "insertText": "CreateBufferInternal(const FRHIBufferCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences, uint32 BufferSize, uint32 BufferAlignment, FRHITransientHeap::FCreateBufferFunction CreateBufferFunction)"
  },
  {
    "label": "IF_RHICORE_TRANSIENT_ALLOCATOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (private : TArray<FRHITransientHeap*> Heaps ; uint64 CurrentCycle = 0 ; uint32 DeallocationCount = 0 ; ERHITransientResourceCreateMode CreateMode = ERHITransientResourceCreateMode::;)",
    "insertText": "IF_RHICORE_TRANSIENT_ALLOCATOR_DEBUG(TSet<FRHITransientResource*> ActiveResources)"
  },
  {
    "label": "FRHITransientPageSpanAllocator()",
    "kind": "Method",
    "detail": "Function (} ; class FRHITransientPagePoolCache ; class FRHITransientResourcePageAllocator ; class FRHITransientPageSpanAllocator { public :)",
    "insertText": "FRHITransientPageSpanAllocator(uint32 InPageCount, uint32 InPageSize) : MaxSpanCount(InPageCount + 2) , MaxPageCount(InPageCount) , PageSize(InPageSize)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Allocate(FRHITransientResource* Resource, const FRHITransientAllocationFences& Fences, uint32 PageCount, uint32& NumPagesAllocated, uint32& OutSpanIndex)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(FRHITransientResource* Resource, const FRHITransientAllocationFences& Fences, uint32 SpanIndex)"
  },
  {
    "label": "GetSpanArray()",
    "kind": "Method",
    "detail": "Function (template<SpanArrayType> void)",
    "insertText": "GetSpanArray(uint32 SpanIndex, SpanArrayType& OutPageSpans)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (SpanIndex = PageSpans [ SpanIndex ] . NextSpanIndex ; })",
    "insertText": "while(SpanIndex != InvalidIndex)"
  },
  {
    "label": "GetAllocationCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocationCount()"
  },
  {
    "label": "GetFreeSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetFreeSize()"
  },
  {
    "label": "GetMaxSpanCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxSpanCount()"
  },
  {
    "label": "IsLinked()",
    "kind": "Method",
    "detail": "Function (const uint32 FreeSpanListHeadIndex = 0 ; const uint32 FreeSpanListTailIndex = 1 ; struct FPageSpan : FRHITransientPageSpan { const bool)",
    "insertText": "IsLinked()"
  },
  {
    "label": "SplitSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSpan(uint32 SpanIndex, uint32 PageCount)"
  },
  {
    "label": "MergeSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeSpans(uint32 SpanIndex0, uint32 SpanIndex1)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAfter(uint32 InsertPosition, uint32 InsertSpanIndex)"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertBefore(uint32 InsertPosition, uint32 InsertSpanIndex)"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink(uint32 SpanIndex)"
  },
  {
    "label": "AllocSpan()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AllocSpan()"
  },
  {
    "label": "ReleaseSpan()",
    "kind": "Method",
    "detail": "Function (uint32 SpanIndex = UnusedSpanList [ UnusedSpanListCount - 1 ] ; UnusedSpanListCount - - ; return SpanIndex ; } void)",
    "insertText": "ReleaseSpan(uint32 SpanIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (UnusedSpanList [ UnusedSpanListCount ] = SpanIndex ; UnusedSpanListCount + + ;)",
    "insertText": "check(UnusedSpanListCount <= MaxPageCount)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Validate()"
  },
  {
    "label": "GetFirstSpanIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFirstSpanIndex()"
  },
  {
    "label": "FRHITransientPagePool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHITransientPagePool()"
  },
  {
    "label": "FAllocationContext()",
    "kind": "Method",
    "detail": "Function (struct FAllocationContext {)",
    "insertText": "FAllocationContext(FRHITransientResource& InResource, const FRHITransientAllocationFences& InFences, uint32 InPageSize) : Resource(InResource) , Allocations(InResource.GetPageAllocation().PoolAllocations) , Spans(InResource.GetPageAllocation().Spans) , AllocationsBefore(Allocations) , GpuVirtualAddress(Resource.GetGpuVirtualAddress()) , Size(Align(Resource.GetSize(), InPageSize)) , Fences(InFences) , PagesRemaining(Size / InPageSize)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "Deallocate(Resource, Fences, SpanIndex)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "FPageMapRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPageMapRequest(uint64 InDestinationAddress, uint64 InSourcePagePoolAddress, uint32 InSourcePageCount, uint32 InPageSpanOffset, uint32 InPageSpanCount) : DestinationAddress(InDestinationAddress) , SourcePagePoolAddress(InSourcePagePoolAddress) , SourcePageCount(InSourcePageCount) , PageSpanOffset(InPageSpanOffset) , PageSpanCount(InPageSpanCount)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (GpuVirtualAddress = InGpuVirtualAddress ; } private : void)",
    "insertText": "Flush(FRHICommandListImmediate& RHICmdList, TArray<FPageMapRequest>&& InPageMapRequests, TArray<FRHITransientPageSpan>&& InPageSpans)"
  },
  {
    "label": "FRHITransientPagePoolCache()",
    "kind": "Method",
    "detail": "Function (const uint32 kDefaultResourceCacheSize = 2 5 6 ; uint64 PoolSize = 0 ; uint64 PoolSizeFirst = 0 ; uint32 PageSize = 0 ; uint32 GarbageCollectLatency = 0 ; uint32 TextureCacheSize = kDefaultResourceCacheSize ; uint32 BufferCacheSize = kDefaultResourceCacheSize ; } ;)",
    "insertText": "FRHITransientPagePoolCache(const FInitializer& InInitializer) : Initializer(InInitializer)"
  },
  {
    "label": "FRHITransientPagePoolCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransientPagePoolCache(const FRHITransientPagePoolCache&)"
  },
  {
    "label": "FRHITransientPagePoolCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHITransientPagePoolCache()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (FRHITransientPagePool*)",
    "insertText": "Acquire()"
  },
  {
    "label": "GetFastPagePool()",
    "kind": "Method",
    "detail": "Function (FRHITransientPagePool*)",
    "insertText": "GetFastPagePool()"
  },
  {
    "label": "Forfeit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Forfeit(TConstArrayView<FRHITransientPagePool*> PagePools)"
  },
  {
    "label": "CreateFastPagePool()",
    "kind": "Method",
    "detail": "Function (const FInitializer Initializer ; private : FRHITransientPagePool*)",
    "insertText": "CreateFastPagePool()"
  },
  {
    "label": "FRHITransientResourcePageAllocator()",
    "kind": "Method",
    "detail": "Function (FRHITransientMemoryStats Stats ; FCriticalSection CriticalSection ; FRHITransientPagePool* FastPagePool = nullptr ; TArray<FRHITransientPagePool*> LiveList ; TArray<FRHITransientPagePool*> FreeList ; uint64 GarbageCollectCycle = 0 ; uint64 TotalMemoryCapacity = 0 ; FRHITransientResourcePageAllocator ; } ; class FRHITransientResourcePageAllocator : public IRHITransientResourceAllocator { public :)",
    "insertText": "FRHITransientResourcePageAllocator(FRHITransientPagePoolCache& InPagePoolCache) : PagePoolCache(InPagePoolCache) , Textures(InPagePoolCache.Initializer.TextureCacheSize, ResourceCacheGarbageCollectionLatency) , Buffers(InPagePoolCache.Initializer.BufferCacheSize, ResourceCacheGarbageCollectionLatency) , PageSize(PagePoolCache.Initializer.PageSize)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (} FRHITransientTexture*)",
    "insertText": "CreateTexture(const FRHITextureCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRHITransientBuffer*)",
    "insertText": "CreateBuffer(const FRHIBufferCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "GetPageSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPageSize()"
  },
  {
    "label": "AllocateMemoryInternal()",
    "kind": "Method",
    "detail": "Function (} FRHITransientPagePoolCache& PagePoolCache ; private : uint32 ResourceCacheGarbageCollectionLatency = 2 ; uint64 KB = 1 0 2 4 ; uint64 MB = 1 0 2 4* KB ; void)",
    "insertText": "AllocateMemoryInternal(FRHITransientResource* Resource, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences, bool bFastPoolRequested, float FastPoolPercentageRequested)"
  },
  {
    "label": "CreateTextureInternal()",
    "kind": "Method",
    "detail": "Function (FRHITransientTexture*)",
    "insertText": "CreateTextureInternal(const FRHITextureCreateInfo& CreateInfo, const TCHAR* DebugName, uint64 Hash)"
  },
  {
    "label": "CreateBufferInternal()",
    "kind": "Method",
    "detail": "Function (FRHITransientBuffer*)",
    "insertText": "CreateBufferInternal(const FRHIBufferCreateInfo& CreateInfo, const TCHAR* DebugName, uint64 Hash)"
  },
  {
    "label": "ReleaseTextureInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTextureInternal(FRHITransientTexture* Texture)"
  },
  {
    "label": "ReleaseBufferInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBufferInternal(FRHITransientBuffer* Buffer)"
  },
  {
    "label": "EnumeratePageSpans()",
    "kind": "Method",
    "detail": "Function (template<FunctionType> void)",
    "insertText": "EnumeratePageSpans(const FRHITransientResource* Resource, FunctionType Function)"
  },
  {
    "label": "GetPageAllocation()",
    "kind": "Method",
    "detail": "Function (const FRHITransientPageAllocation& PageAllocation = Resource ->)",
    "insertText": "GetPageAllocation()"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(PoolAllocation.Pool, PageAllocation.Spans[Index])"
  }
]