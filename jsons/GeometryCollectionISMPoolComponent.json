[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UGeometryCollectionISMPoolComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollectionISMPoolComponent"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "FInstanceGroups",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceGroups"
  },
  {
    "label": "FInstanceGroupRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceGroupRange"
  },
  {
    "label": "FISMComponentDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISMComponentDescription"
  },
  {
    "label": "EFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFlags"
  },
  {
    "label": "FGeometryCollectionStaticMeshInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionStaticMeshInstance"
  },
  {
    "label": "FGeometryCollectionMeshInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionMeshInfo"
  },
  {
    "label": "FGeometryCollectionISMPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionISMPool"
  },
  {
    "label": "FGeometryCollectionMeshGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionMeshGroup"
  },
  {
    "label": "FGeometryCollectionISM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionISM"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UGeometryCollectionISMPoolDebugDrawComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollectionISMPoolDebugDrawComponent"
  },
  {
    "label": "FInstanceGroupRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / SceneComponent . h \" # include \" Containers / Map . h \" # include \" InstancedStaticMeshDelegates . h \" # include \" Materials / MaterialInterface . h \" # include \" InstanceDataTypes . h \" # include \" GeometryCollectionISMPoolComponent . generated . h \" class AActor ; class UGeometryCollectionISMPoolComponent ; class UInstancedStaticMeshComponent ; struct FInstanceGroups { using FInstanceGroupId = int32 ; struct FInstanceGroupRange {)",
    "insertText": "FInstanceGroupRange(int32 InStart, int32 InCount) : Start(InStart) , Count(InCount)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} int32 Start = 0 ; int32 Count = 0 ; } ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TotalInstanceCount = 0 ; TotalFreeInstanceCount = 0 ; GroupRanges .)",
    "insertText": "Empty()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetMaxInstanceIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxInstanceIndex()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FInstanceGroupId GroupId = FreeList [ Index ] ;)",
    "insertText": "if(Count == GroupRanges[GroupId].Count)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (TotalFreeInstanceCount - = Count ; FreeList .)",
    "insertText": "RemoveAtSwap(Index, EAllowShrinking::No)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TotalFreeInstanceCount + = GroupRanges [ GroupId ] . Count ; FreeList .)",
    "insertText": "Add(GroupId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32 TotalInstanceCount = 0 ; int32 TotalFreeInstanceCount = 0 ; TArray<FInstanceGroupRange> GroupRanges ; TArray<FInstanceGroupId> FreeList ; } ; struct FISMComponentDescription { enum EFlags { UseHISM = 1<<1,GpuLodSelection = 1<<2,ReverseCulling = 1<<3,StaticMobility = 1<<4,WorldPositionOffsetWritesVelocity = 1<<5,EvaluateWorldPositionOffset = 1<<6,AffectShadow = 1<<7,AffectDistanceFieldLighting = 1<<8,AffectDynamicIndirectLighting = 1<<9,AffectFarShadow = 1<<1 0,DistanceCullPrimitive = 1<<1 1,} ; uint32 Flags = WorldPositionOffsetWritesVelocity | EvaluateWorldPositionOffset | AffectShadow ; int32 NumCustomDataFloats = 0 ; FVector Position = FVector::ZeroVector ; int32 StartCullDistance = 0 ; int32 EndCullDistance = 0 ; int32 MinLod = 0 ; uint32 GroupHash = 0 ; float LodScale = 1 . f ; TArray<FName> Tags ; FName StatsCategory ; bool)",
    "insertText": "operator(const FISMComponentDescription& Other)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "HashCombineFast(GetTypeHash(Desc.Flags), GetTypeHash(Desc.NumCustomDataFloats))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Desc.Position))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Desc.StartCullDistance))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Desc.EndCullDistance))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Desc.MinLod))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Desc.LodScale))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Desc.GroupHash))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetArrayHash(Desc.Tags.GetData(), Desc.Tags.Num()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct FGeometryCollectionStaticMeshInstance { TWeakObjectPtr<UStaticMesh> StaticMesh ; TArray<TWeakObjectPtr<UMaterialInterface>> MaterialsOverrides ; TArray<float> CustomPrimitiveData ; FISMComponentDescription Desc ; bool)",
    "insertText": "operator(const FGeometryCollectionStaticMeshInstance& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 CombinedHash =)",
    "insertText": "GetTypeHash(MeshInstance.StaticMesh)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (CombinedHash =)",
    "insertText": "HashCombineFast(CombinedHash, GetTypeHash(MeshInstance.MaterialsOverrides.Num()))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (CombinedHash =)",
    "insertText": "HashCombineFast(CombinedHash, GetTypeHash(Material))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const float CustomFloat : MeshInstance.CustomPrimitiveData)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (CombinedHash =)",
    "insertText": "HashCombineFast(CombinedHash, GetTypeHash(CustomFloat))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (} CombinedHash =)",
    "insertText": "HashCombineFast(CombinedHash, GetTypeHash(MeshInstance.Desc))"
  },
  {
    "label": "ShadowCopyCustomData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShadowCopyCustomData(int32 InstanceCount, int32 NumCustomDataFloatsPerInstance, TArrayView<const float> CustomDataFloats)"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (} ; struct FGeometryCollectionISMPool ; struct FGeometryCollectionMeshGroup { using FMeshId = int32 ; FMeshId)",
    "insertText": "AddMesh(const FGeometryCollectionStaticMeshInstance& MeshInstance, int32 InstanceCount, const FGeometryCollectionMeshInfo& ISMInstanceInfo, TArrayView<const float> CustomDataFloats)"
  },
  {
    "label": "BatchUpdateInstancesTransforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BatchUpdateInstancesTransforms(FGeometryCollectionISMPool& ISMPool, FMeshId MeshId, int32 StartInstanceIndex, TArrayView<const FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)"
  },
  {
    "label": "BatchUpdateInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchUpdateInstanceCustomData(FGeometryCollectionISMPool& ISMPool, int32 CustomFloatIndex, float CustomFloatValue)"
  },
  {
    "label": "RemoveAllMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllMeshes(FGeometryCollectionISMPool& ISMPool)"
  },
  {
    "label": "CreateISM()",
    "kind": "Method",
    "detail": "Function (TArray<FGeometryCollectionMeshInfo> MeshInfos ; bool bAllowPerInstanceRemoval = false ; } ; struct FGeometryCollectionISM { void)",
    "insertText": "CreateISM(USceneComponent* InOwningComponent)"
  },
  {
    "label": "InitISM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitISM(const FGeometryCollectionStaticMeshInstance& InMeshInstance, bool bKeepAlive, bool bOverrideTransformUpdates = false)"
  },
  {
    "label": "AddInstanceGroup()",
    "kind": "Method",
    "detail": "Function (FInstanceGroups::FInstanceGroupId)",
    "insertText": "AddInstanceGroup(int32 InstanceCount, TArrayView<const float> CustomDataFloats)"
  },
  {
    "label": "FGeometryCollectionISMPool()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionStaticMeshInstance MeshInstance ; TObjectPtr<UInstancedStaticMeshComponent> ISMComponent ; FInstanceGroups InstanceGroups ; TArray<FPrimitiveInstanceId> InstanceIds ; } ; struct FGeometryCollectionISMPool { using FISMIndex = int32 ;)",
    "insertText": "FGeometryCollectionISMPool()"
  },
  {
    "label": "GetOrAddISM()",
    "kind": "Method",
    "detail": "Function (FISMIndex)",
    "insertText": "GetOrAddISM(UGeometryCollectionISMPoolComponent* OwningComponent, const FGeometryCollectionStaticMeshInstance& MeshInstance, bool& bOutISMCreated)"
  },
  {
    "label": "RemoveISM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveISM(FISMIndex ISMIndex, bool bKeepAlive, bool bRecycle)"
  },
  {
    "label": "AddInstancesToISM()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionMeshInfo)",
    "insertText": "AddInstancesToISM(UGeometryCollectionISMPoolComponent* OwningComponent, const FGeometryCollectionStaticMeshInstance& MeshInstance, int32 InstanceCount, TArrayView<const float> CustomDataFloats)"
  },
  {
    "label": "RemoveInstancesFromISM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstancesFromISM(const FGeometryCollectionMeshInfo& MeshInfo)"
  },
  {
    "label": "BatchUpdateInstancesTransforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BatchUpdateInstancesTransforms(FGeometryCollectionMeshInfo& MeshInfo, int32 StartInstanceIndex, TArrayView<const FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport, bool bAllowPerInstanceRemoval)"
  },
  {
    "label": "BatchUpdateInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchUpdateInstanceCustomData(FGeometryCollectionMeshInfo const& MeshInfo, int32 CustomFloatIndex, float CustomFloatValue)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(UGeometryCollectionISMPoolComponent* OwningComponent)"
  },
  {
    "label": "RequestPreallocateMeshInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestPreallocateMeshInstance(const FGeometryCollectionStaticMeshInstance& MeshInstances)"
  },
  {
    "label": "ProcessPreallocationRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPreallocationRequests(UGeometryCollectionISMPoolComponent* OwningComponent, int32 MaxPreallocations)"
  },
  {
    "label": "UpdateAbsoluteTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAbsoluteTransforms(const FTransform& BaseTransform, EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TArray<FGeometryCollectionISM> ISMs ; TMap<FGeometryCollectionStaticMeshInstance,FISMIndex> MeshToISMIndex ; TSet<FGeometryCollectionStaticMeshInstance> PrellocationQueue ; TArray<int32> FreeList ; TArray<int32> FreeListISM ; bool bCachedKeepAlive = false ; bool bCachedRecycle = false ; bool bDisableBoundsAndTransformUpdate = false ; } ;)",
    "insertText": "UCLASS(meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (using FMeshId = int32 ; void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "CreateMeshGroup()",
    "kind": "Method",
    "detail": "Function (FMeshGroupId)",
    "insertText": "CreateMeshGroup(bool bAllowPerInstanceRemoval = false)"
  },
  {
    "label": "DestroyMeshGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyMeshGroup(FMeshGroupId MeshGroupId)"
  },
  {
    "label": "AddMeshToGroup()",
    "kind": "Method",
    "detail": "Function (FMeshId)",
    "insertText": "AddMeshToGroup(FMeshGroupId MeshGroupId, const FGeometryCollectionStaticMeshInstance& MeshInstance, int32 InstanceCount, TArrayView<const float> CustomDataFloats)"
  },
  {
    "label": "BatchUpdateInstancesTransforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BatchUpdateInstancesTransforms(FMeshGroupId MeshGroupId, FMeshId MeshId, int32 StartInstanceIndex, TArrayView<const FTransform> NewInstancesTransforms, bool bWorldSpace = false, bool bMarkRenderStateDirty = false, bool bTeleport = false)"
  },
  {
    "label": "BatchUpdateInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BatchUpdateInstanceCustomData(FMeshGroupId MeshGroupId, int32 CustomFloatIndex, float CustomFloatValue)"
  },
  {
    "label": "PreallocateMeshInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreallocateMeshInstance(const FGeometryCollectionStaticMeshInstance& MeshInstance)"
  },
  {
    "label": "SetTickablePoolManagement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickablePoolManagement(bool bEnablePoolManagement)"
  },
  {
    "label": "SetOverrideTransformUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverrideTransformUpdates(bool bOverrideUpdates)"
  }
]