[
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FWorldSelectionElementArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldSelectionElementArgs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTypedElementDeletionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementDeletionOptions"
  },
  {
    "label": "FWorldElementPasteImporter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldElementPasteImporter"
  },
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContext"
  },
  {
    "label": "UTypedElementWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementWorldInterface"
  },
  {
    "label": "ITypedElementWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedElementWorldInterface"
  },
  {
    "label": "UTypedElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementRegistry"
  },
  {
    "label": "TTypedElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElement"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Interfaces / TypedElementSelectionInterface . h \" # include \" CoreFwd . h \" # include \" UObject / Interface . h \" # include \" Templates / SharedPointer . h \" # include \" TypedElementWorldInterface . generated . h \" class ULevel ; class UTypedElementSelectionSet ; class UWorld ; struct FCollisionShape ; struct FCollisionQueryParams ; struct FConvexVolume ; struct FEngineShowFlags ; struct FWorldSelectionElementArgs ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Game,Editor,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FTypedElementDeletionOptions& SetVerifyDeletionCanHappen(const bool InVerifyDeletionCanHappen)"
  },
  {
    "label": "VerifyDeletionCanHappen()",
    "kind": "Method",
    "detail": "Function (bVerifyDeletionCanHappen = InVerifyDeletionCanHappen ; return* this ; } bool)",
    "insertText": "VerifyDeletionCanHappen()"
  },
  {
    "label": "WarnAboutReferences()",
    "kind": "Method",
    "detail": "Function (bWarnAboutReferences = InWarnAboutReferences ; return* this ; } bool)",
    "insertText": "WarnAboutReferences()"
  },
  {
    "label": "WarnAboutSoftReferences()",
    "kind": "Method",
    "detail": "Function (bWarnAboutSoftReferences = InWarnAboutSoftReferences ; return* this ; } bool)",
    "insertText": "WarnAboutSoftReferences()"
  },
  {
    "label": "FWorldElementPasteImporter()",
    "kind": "Method",
    "detail": "Function (} ; struct FWorldElementPasteImporter { ~)",
    "insertText": "FWorldElementPasteImporter()"
  },
  {
    "label": "Import()",
    "kind": "Method",
    "detail": "Function (struct FContext { FTypedElementListConstPtr CurrentSelection ; UWorld* World ; FStringView Text ; } ; void)",
    "insertText": "Import(FContext& Context)"
  },
  {
    "label": "GetImportedElements()",
    "kind": "Method",
    "detail": "Function (} TArray<FTypedElementHandle>)",
    "insertText": "GetImportedElements()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ITypedElementWorldInterface {)",
    "insertText": "GENERATED_BODY() public: virtual bool IsTemplateElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "SetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetRelativeTransform(const FTypedElementHandle& InElementHandle, const FTransform& InTransform)"
  },
  {
    "label": "GetPivotOffset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetPivotOffset(const FTypedElementHandle& InElementHandle, FVector& OutPivotOffset)"
  },
  {
    "label": "NotifyMovementOngoing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyMovementOngoing(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "NotifyMovementEnded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyMovementEnded(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "FindSuitableTransformAtPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindSuitableTransformAtPoint(const FTypedElementHandle& InElementHandle, const FTransform& InPotentialTransform, FTransform& OutSuitableTransform)"
  },
  {
    "label": "FindSuitableTransformAlongPath()",
    "kind": "Method",
    "detail": "Function (OutSuitableTransform = InPotentialTransform ; return true ; } bool)",
    "insertText": "FindSuitableTransformAlongPath(const FTypedElementHandle& InElementHandle, const FVector& InPathStart, const FVector& InPathEnd, const FCollisionShape& InTestShape, TArrayView<const FTypedElementHandle> InElementsToIgnore, FTransform& OutSuitableTransform)"
  },
  {
    "label": "DeleteElements()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteElements(TArrayView<const FTypedElementHandle> InElementHandles, UWorld* InWorld, UTypedElementSelectionSet* InSelectionSet, const FTypedElementDeletionOptions& InDeletionOptions)"
  },
  {
    "label": "DuplicateElements()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle> NewElements ;)",
    "insertText": "DuplicateElements(MakeArrayView(&InElementHandle, 1), InWorld, InLocationOffset, NewElements)"
  },
  {
    "label": "DuplicateElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DuplicateElements(TArrayView<const FTypedElementHandle> InElementHandles, UWorld* InWorld, const FVector& InLocationOffset, TArray<FTypedElementHandle>& OutNewElements)"
  },
  {
    "label": "CanCopyElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCopyElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyElements(MakeArrayView(&InElementHandle, 1), Out)"
  },
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyElements(TArrayView<const FTypedElementHandle> InElementHandles, FOutputDevice& Out)"
  },
  {
    "label": "GetPasteImporter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FWorldElementPasteImporter>)",
    "insertText": "GetPasteImporter()"
  },
  {
    "label": "IsElementInConvexVolume()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsElementInConvexVolume(const FTypedElementHandle& Handle, const FConvexVolume& InVolume, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "IsElementInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementInBox(const FTypedElementHandle& Handle, const FBox& InBox, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "GetSelectionElementsInConvexVolume()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsInConvexVolume(const FTypedElementHandle& Handle, const FConvexVolume& InVolume, const FWorldSelectionElementArgs& SelectionArgs)"
  },
  {
    "label": "GetSelectionElementsInBox()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsInBox(const FTypedElementHandle& Handle, const FBox& InBox, const FWorldSelectionElementArgs& SelectionArgs)"
  },
  {
    "label": "GetSelectionElementsFromSelectionFunction()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsFromSelectionFunction(const FTypedElementHandle& Handle, const FWorldSelectionElementArgs& SelectionArgs, const TFunction<bool(const FTypedElementHandle& , const FWorldSelectionElementArgs& )>& SelectionFunction)"
  },
  {
    "label": "GetRegistry()",
    "kind": "Method",
    "detail": "Function (protected : class UTypedElementRegistry&)",
    "insertText": "GetRegistry()"
  },
  {
    "label": "IsTemplateElement()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TTypedElement<ITypedElementWorldInterface> : public TTypedElementBase<ITypedElementWorldInterface> { bool)",
    "insertText": "IsTemplateElement()"
  },
  {
    "label": "CanEditElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanEditElement()"
  },
  {
    "label": "GetOwnerLevel()",
    "kind": "Method",
    "detail": "Function (} ULevel*)",
    "insertText": "GetOwnerLevel()"
  },
  {
    "label": "GetOwnerWorld()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "GetOwnerWorld()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetBounds(FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "CanMoveElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanMoveElement(const ETypedElementWorldType InWorldType)"
  },
  {
    "label": "CanScaleElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanScaleElement()"
  },
  {
    "label": "GetWorldTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetWorldTransform(FTransform& OutTransform)"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetWorldTransform(const FTransform& InTransform)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRelativeTransform(FTransform& OutTransform)"
  },
  {
    "label": "SetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetRelativeTransform(const FTransform& InTransform)"
  },
  {
    "label": "GetPivotOffset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetPivotOffset(FVector& OutPivotOffset)"
  },
  {
    "label": "SetPivotOffset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetPivotOffset(const FVector& InPivotOffset)"
  },
  {
    "label": "NotifyMovementStarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyMovementStarted()"
  },
  {
    "label": "NotifyMovementStarted()",
    "kind": "Method",
    "detail": "Function (InterfacePtr ->)",
    "insertText": "NotifyMovementStarted(*this)"
  },
  {
    "label": "NotifyMovementOngoing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyMovementOngoing()"
  },
  {
    "label": "NotifyMovementOngoing()",
    "kind": "Method",
    "detail": "Function (InterfacePtr ->)",
    "insertText": "NotifyMovementOngoing(*this)"
  },
  {
    "label": "NotifyMovementEnded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyMovementEnded()"
  },
  {
    "label": "NotifyMovementEnded()",
    "kind": "Method",
    "detail": "Function (InterfacePtr ->)",
    "insertText": "NotifyMovementEnded(*this)"
  },
  {
    "label": "FindSuitableTransformAtPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindSuitableTransformAtPoint(const FTransform& InPotentialTransform, FTransform& OutSuitableTransform)"
  },
  {
    "label": "FindSuitableTransformAlongPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindSuitableTransformAlongPath(const FVector& InPathStart, const FVector& InPathEnd, const FCollisionShape& InTestShape, TArrayView<const FTypedElementHandle> InElementsToIgnore, FTransform& OutSuitableTransform)"
  },
  {
    "label": "AddIgnoredElementToCollisionQueryParams()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddIgnoredElementToCollisionQueryParams(const FTypedElementHandle& InElementHandle, FCollisionQueryParams& InOutParams, bool bAlsoIgnoreSubElements = true)"
  },
  {
    "label": "CanDeleteElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDeleteElement()"
  },
  {
    "label": "DeleteElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteElement(UWorld* InWorld, UTypedElementSelectionSet* InSelectionSet, const FTypedElementDeletionOptions& InDeletionOptions)"
  },
  {
    "label": "CanDuplicateElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDuplicateElement()"
  },
  {
    "label": "DuplicateElement()",
    "kind": "Method",
    "detail": "Function (} FTypedElementHandle)",
    "insertText": "DuplicateElement(UWorld* InWorld, const FVector& InLocationOffset)"
  },
  {
    "label": "CanCopyElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCopyElement()"
  },
  {
    "label": "CopyElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyElement(FOutputDevice& Out)"
  },
  {
    "label": "CopyElement()",
    "kind": "Method",
    "detail": "Function (InterfacePtr ->)",
    "insertText": "CopyElement(*this, Out)"
  },
  {
    "label": "CanPromoteElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanPromoteElement()"
  },
  {
    "label": "PromoteElement()",
    "kind": "Method",
    "detail": "Function (} FTypedElementHandle)",
    "insertText": "PromoteElement(UWorld* OverrideWorld = nullptr)"
  },
  {
    "label": "IsElementInConvexVolume()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsElementInConvexVolume(const FConvexVolume& InVolume, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "IsElementInBox()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsElementInBox(const FBox& InBox, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "GetSelectionElementsInConvexVolume()",
    "kind": "Method",
    "detail": "Function (} TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsInConvexVolume(const FConvexVolume& InVolume, const FWorldSelectionElementArgs& SelectionArgs)"
  },
  {
    "label": "GetSelectionElementsInBox()",
    "kind": "Method",
    "detail": "Function (} TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsInBox(const FBox& InBox, const FWorldSelectionElementArgs& SelectionArgs)"
  },
  {
    "label": "GetSelectionElementsFromSelectionFunction()",
    "kind": "Method",
    "detail": "Function (} TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsFromSelectionFunction(const FWorldSelectionElementArgs& SelectionArgs, const TFunction<bool(const FTypedElementHandle&, const FWorldSelectionElementArgs&)>& SelectionFunction)"
  }
]