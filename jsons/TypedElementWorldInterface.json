[
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FWorldSelectionElementArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldSelectionElementArgs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTypedElementDeletionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementDeletionOptions"
  },
  {
    "label": "FWorldElementPasteImporter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldElementPasteImporter"
  },
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContext"
  },
  {
    "label": "UTypedElementWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementWorldInterface"
  },
  {
    "label": "ITypedElementWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedElementWorldInterface"
  },
  {
    "label": "UTypedElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementRegistry"
  },
  {
    "label": "TTypedElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElement"
  },
  {
    "label": "FWorldSelectionElementArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldSelectionElementArgs"
  },
  {
    "label": "GetWorldTransform()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetWorldTransform(InElementHandle, OutTransform)"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SetWorldTransform(InElementHandle, InTransform)"
  },
  {
    "label": "FTypedElementHandle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FTypedElementHandle()"
  },
  {
    "label": "IsElementInConvexVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementInConvexVolume(const FTypedElementHandle& Handle, const FConvexVolume& InVolume, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "IsElementInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementInBox(const FTypedElementHandle& Handle, const FBox& InBox, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "GetSelectionElementsInConvexVolume()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsInConvexVolume(const FTypedElementHandle& Handle, const FConvexVolume& InVolume, const FWorldSelectionElementArgs& SelectionArgs)"
  },
  {
    "label": "GetSelectionElementsInBox()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsInBox(const FTypedElementHandle& Handle, const FBox& InBox, const FWorldSelectionElementArgs& SelectionArgs)"
  },
  {
    "label": "IsTemplateElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTemplateElement(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "CanEditElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditElement(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBounds(const FScriptTypedElementHandle& InElementHandle, FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "CanMoveElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveElement(const FScriptTypedElementHandle& InElementHandle, const ETypedElementWorldType InWorldType)"
  },
  {
    "label": "CanScaleElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanScaleElement(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetWorldTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWorldTransform(const FScriptTypedElementHandle& InElementHandle, FTransform& OutTransform)"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWorldTransform(const FScriptTypedElementHandle& InElementHandle, const FTransform& InTransform)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRelativeTransform(const FScriptTypedElementHandle& InElementHandle, FTransform& OutTransform)"
  },
  {
    "label": "SetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRelativeTransform(const FScriptTypedElementHandle& InElementHandle, const FTransform& InTransform)"
  },
  {
    "label": "GetPivotOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPivotOffset(const FScriptTypedElementHandle& InElementHandle, FVector& OutPivotOffset)"
  },
  {
    "label": "SetPivotOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPivotOffset(const FScriptTypedElementHandle& InElementHandle, const FVector& InPivotOffset)"
  },
  {
    "label": "NotifyMovementStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMovementStarted(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "NotifyMovementOngoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMovementOngoing(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "NotifyMovementEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMovementEnded(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "CanDeleteElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteElement(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "DeleteElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteElement(const FScriptTypedElementHandle& InElementHandle, UWorld* InWorld, UTypedElementSelectionSet* InSelectionSet, const FTypedElementDeletionOptions& InDeletionOptions)"
  },
  {
    "label": "CanDuplicateElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateElement(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "DuplicateElement()",
    "kind": "Method",
    "detail": "Function (FScriptTypedElementHandle)",
    "insertText": "DuplicateElement(const FScriptTypedElementHandle& InElementHandle, UWorld* InWorld, const FVector& InLocationOffset)"
  },
  {
    "label": "CanPromoteElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPromoteElement(const FScriptTypedElementHandle& InElementHandle)"
  },
  {
    "label": "PromoteElement()",
    "kind": "Method",
    "detail": "Function (FScriptTypedElementHandle)",
    "insertText": "PromoteElement(const FScriptTypedElementHandle& InElementHandle, UWorld* OverrideWorld = nullptr)"
  }
]