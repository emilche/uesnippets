[
  {
    "label": "FSkelMeshRenderSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRenderSection"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "FMorphTargetVertexInfoBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMorphTargetVertexInfoBuffers"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FMorphTargetVertexInfoBuffers()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FMorphTargetVertexInfoBuffers()"
  },
  {
    "label": "InitMorphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMorphResources(EShaderPlatform ShaderPlatform, const TArray<FSkelMeshRenderSection>& RenderSections, const TArray<UMorphTarget*>& MorphTargets, int NumVertices, int32 LODIndex, float TargetPositionErrorTolerance)"
  },
  {
    "label": "GetMaximumThreadGroupSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaximumThreadGroupSize()"
  },
  {
    "label": "CalculatePositionPrecision()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculatePositionPrecision(float TargetPositionErrorTolerance)"
  },
  {
    "label": "IsPlatformShaderSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformShaderSupported(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ResetCPUData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCPUData()"
  },
  {
    "label": "ValidateVertexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateVertexBuffers(bool bMorphTargetsShouldBeValid)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]