[
  {
    "label": "FSkelMeshRenderSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRenderSection"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "FMorphTargetVertexInfoBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMorphTargetVertexInfoBuffers"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FMorphTargetVertexInfoBuffers()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" # include \" Containers / DynamicRHIResourceArray . h \" # include \" Math / Vector4 . h \" struct FSkelMeshRenderSection ; class UMorphTarget ; class FMorphTargetVertexInfoBuffers : public FRenderResource { public :)",
    "insertText": "FMorphTargetVertexInfoBuffers()"
  },
  {
    "label": "InitMorphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMorphResources(EShaderPlatform ShaderPlatform, const TArray<FSkelMeshRenderSection>& RenderSections, const TArray<UMorphTarget*>& MorphTargets, int NumVertices, int32 LODIndex, float TargetPositionErrorTolerance)"
  },
  {
    "label": "IsMorphResourcesInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMorphResourcesInitialized()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (bEmptyMorphCPUDataOnInitRHI = bEmpty ; } void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetNumBatches()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumBatches(uint32 index = UINT_MAX)"
  },
  {
    "label": "GetBatchStartOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetBatchStartOffset(uint32 Index)"
  },
  {
    "label": "CalculatePositionPrecision()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "CalculatePositionPrecision(float TargetPositionErrorTolerance)"
  },
  {
    "label": "GetTangentZPrecision()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "GetTangentZPrecision()"
  },
  {
    "label": "ResetCPUData()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef MorphDataBuffer ; FShaderResourceViewRHIRef MorphDataSRV ; protected : void)",
    "insertText": "ResetCPUData()"
  },
  {
    "label": "ValidateVertexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateVertexBuffers(bool bMorphTargetsShouldBeValid)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TResourceArray<uint32> MorphData ; TArray<FVector4f> MaximumValuePerMorph ; TArray<FVector4f> MinimumValuePerMorph ; TArray<uint32> BatchStartOffsetPerMorph ; TArray<uint32> BatchesPerMorph ; uint32 NumTotalBatches = 0 ; float PositionPrecision = 0 . 0 f ; float TangentZPrecision = 0 . 0 f ; bool bIsMorphCPUDataValid = false ; bool bResourcesInitialized = false ; bool bRHIInitialized = false ; bool bEmptyMorphCPUDataOnInitRHI = true ; class FSkeletalMeshLODRenderData ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMorphTargetVertexInfoBuffers& MorphTargetVertexInfoBuffers)"
  }
]