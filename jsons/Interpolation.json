[
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "PointSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointSampler"
  },
  {
    "label": "BoxSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoxSampler"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "QuadraticSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuadraticSampler"
  },
  {
    "label": "StaggeredPointSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StaggeredPointSampler"
  },
  {
    "label": "StaggeredBoxSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StaggeredBoxSampler"
  },
  {
    "label": "StaggeredQuadraticSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StaggeredQuadraticSampler"
  },
  {
    "label": "GridSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridSampler"
  },
  {
    "label": "DualGridSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DualGridSampler"
  },
  {
    "label": "AlphaMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlphaMask"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_INTERPOLATION_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_INTERPOLATION_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<openvdb / Platform . h> # include<openvdb / math / Math . h> # include<openvdb / math / Transform . h> # include<openvdb / Grid . h> # include<openvdb / tree / ValueAccessor . h> # include<cmath> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<size_t Order,bool Staggered = false> struct Sampler {)",
    "insertText": "static_assert(Order < 3, \"Samplers of order higher than 2 are not supported\")"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "name()"
  },
  {
    "label": "radius()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "radius()"
  },
  {
    "label": "mipmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mipmap()"
  },
  {
    "label": "consistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "consistent()"
  },
  {
    "label": "staggered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "staggered()"
  },
  {
    "label": "order()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "order()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (template<class TreeT> bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord, typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (template<class TreeT> TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "getValues()",
    "kind": "Method",
    "detail": "Function (template<class ValueT,class TreeT,size_t N> void)",
    "insertText": "getValues(ValueT (&data)[N][N][N], const TreeT& inTree, Coord ijk)"
  },
  {
    "label": "probeValues()",
    "kind": "Method",
    "detail": "Function (template<class ValueT,class TreeT,size_t N> bool)",
    "insertText": "probeValues(ValueT (&data)[N][N][N], const TreeT& inTree, Coord ijk)"
  },
  {
    "label": "extrema()",
    "kind": "Method",
    "detail": "Function (template<class ValueT,size_t N> void)",
    "insertText": "extrema(ValueT (&data)[N][N][N], ValueT& vMin, ValueT& vMax)"
  },
  {
    "label": "trilinearInterpolation()",
    "kind": "Method",
    "detail": "Function (template<class ValueT,size_t N> ValueT)",
    "insertText": "trilinearInterpolation(ValueT (&data)[N][N][N], const Vec3R& uvw)"
  },
  {
    "label": "triquadraticInterpolation()",
    "kind": "Method",
    "detail": "Function (template<class ValueT,size_t N> ValueT)",
    "insertText": "triquadraticInterpolation(ValueT (&data)[N][N][N], const Vec3R& uvw)"
  },
  {
    "label": "GridSampler()",
    "kind": "Method",
    "detail": "Function (} ; template<GridOrTreeType,SamplerType> class GridSampler { public : using Ptr = SharedPtr<GridSampler> ; using ValueType = GridOrTreeType::ValueType ; using GridType = TreeAdapter<GridOrTreeType>::GridType ; using TreeType = TreeAdapter<GridOrTreeType>::TreeType ; using AccessorType = TreeAdapter<GridOrTreeType>::AccessorType ;)",
    "insertText": "GridSampler(const GridType& grid) : mTree(&(grid.tree())), mTransform(&(grid.transform()))"
  },
  {
    "label": "GridSampler()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GridSampler(const TreeType& tree, const math::Transform& transform) : mTree(&tree), mTransform(&transform)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} const math::Transform&)",
    "insertText": "transform()"
  },
  {
    "label": "sampleVoxel()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "sampleVoxel(typename Coord::ValueType i, typename Coord::ValueType j, typename Coord::ValueType k)"
  },
  {
    "label": "isSample()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "isSample(const Coord& ijk)"
  },
  {
    "label": "isSample()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "isSample(const Vec3d& ispoint)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType result = zeroVal<)",
    "insertText": "ValueType()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sample(*mTree, ispoint, result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sample(*mTree, mTransform->worldToIndex(wspoint), result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sample(*mAccessor, ispoint, result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sample(*mAccessor, mTransform->worldToIndex(wspoint), result)"
  },
  {
    "label": "DualGridSampler()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DualGridSampler(const TreeType& sourceTree, const math::Transform& sourceXform, const math::Transform& targetXform) : mSourceTree(&sourceTree) , mSourceXform(&sourceXform) , mTargetXform(&targetXform) , mAligned(targetXform == sourceXform)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "operator()(const Coord& ijk)"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (const Vec3R world = mTargetXform ->)",
    "insertText": "indexToWorld(ijk)"
  },
  {
    "label": "isAligned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAligned()"
  },
  {
    "label": "AlphaMask()",
    "kind": "Method",
    "detail": "Function (using GridType = GridT ; using MaskType = MaskT ; using SamlerType = SamplerT ; using FloatType = FloatT ;)",
    "insertText": "AlphaMask(const GridT& grid, const MaskT& mask, FloatT min, FloatT max, bool invert) : mAcc(mask.tree()) , mSampler(mAcc, mask.transform() , grid.transform()) , mMin(min) , mInvNorm(1/(max-min)) , mInvert(invert)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(min < max)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const Coord& xyz, FloatT& a, FloatT& b)"
  },
  {
    "label": "SmoothUnitStep()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "SmoothUnitStep((mSampler(xyz) - mMin) * mInvNorm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (b = 1 - a ;)",
    "insertText": "if(mInvert) std::swap(a,b)"
  },
  {
    "label": "ceilVec3()",
    "kind": "Method",
    "detail": "Function (} Vec3i)",
    "insertText": "ceilVec3(const Vec3R& v)"
  },
  {
    "label": "roundVec3()",
    "kind": "Method",
    "detail": "Function (} Vec3i)",
    "insertText": "roundVec3(const Vec3R& v)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (data [ 0 ] [ 0 ] [ 0 ] = inTree .)",
    "insertText": "getValue(ijk)"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (bool hasActiveValues = false ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[0][0][0])"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (ijk [ 2 ] + = 1 ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[0][0][1])"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (ijk [ 1 ] + = 1 ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[0][1][1])"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (ijk [ 2 ] - = 1 ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[0][1][0])"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (ijk [ 0 ] + = 1 ; ijk [ 1 ] - = 1 ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[1][0][0])"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (ijk [ 2 ] + = 1 ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[1][0][1])"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (ijk [ 1 ] + = 1 ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[1][1][1])"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (ijk [ 2 ] - = 1 ; hasActiveValues | = inTree .)",
    "insertText": "probeValue(ijk, data[1][1][0])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (vMin = vMax = data [ 0 ] [ 0 ] [ 0 ] ; vMin =)",
    "insertText": "Min(vMin, data[0][0][1])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (vMax =)",
    "insertText": "Max(vMax, data[0][0][1])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (vMin =)",
    "insertText": "Min(vMin, data[0][1][0])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (vMax =)",
    "insertText": "Max(vMax, data[0][1][0])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (vMin =)",
    "insertText": "Min(vMin, data[0][1][1])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (vMax =)",
    "insertText": "Max(vMax, data[0][1][1])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (vMin =)",
    "insertText": "Min(vMin, data[1][0][0])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (vMax =)",
    "insertText": "Max(vMax, data[1][0][0])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (vMin =)",
    "insertText": "Min(vMin, data[1][0][1])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (vMax =)",
    "insertText": "Max(vMax, data[1][0][1])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (vMin =)",
    "insertText": "Min(vMin, data[1][1][0])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (vMax =)",
    "insertText": "Max(vMax, data[1][1][0])"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (vMin =)",
    "insertText": "Min(vMin, data[1][1][1])"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (vMax =)",
    "insertText": "Max(vMax, data[1][1][1])"
  },
  {
    "label": "_interpolate()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "_interpolate(const ValueT& a, const ValueT& b, double weight)"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN const auto)",
    "insertText": "temp(b - a)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_END return static_cast<)",
    "insertText": "ValueT(a + ValueT(temp))"
  },
  {
    "label": "_interpolate()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "_interpolate(_interpolate( _interpolate(data[0][0][0], data[0][0][1], uvw[2]), _interpolate(data[0][1][0], data[0][1][1], uvw[2]), uvw[1]), _interpolate( _interpolate(data[1][0][0], data[1][0][1], uvw[2]), _interpolate(data[1][1][0], data[1][1][1], uvw[2]), uvw[1]), uvw[0])"
  },
  {
    "label": "floorVec3()",
    "kind": "Method",
    "detail": "Function (using ValueT = TreeT::ValueType ; const Vec3i inIdx =)",
    "insertText": "floorVec3(inCoord)"
  },
  {
    "label": "probeValues()",
    "kind": "Method",
    "detail": "Function (const Vec3R uvw = inCoord - inIdx ; ValueT data [ 2 ] [ 2 ] [ 2 ] ; const bool hasActiveValues =)",
    "insertText": "probeValues(data, inTree, Coord(inIdx))"
  },
  {
    "label": "trilinearInterpolation()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "trilinearInterpolation(data, uvw)"
  },
  {
    "label": "getValues()",
    "kind": "Method",
    "detail": "Function (const Vec3R uvw = inCoord - inIdx ; ValueT data [ 2 ] [ 2 ] [ 2 ] ;)",
    "insertText": "getValues(data, inTree, Coord(inIdx))"
  },
  {
    "label": "_interpolate()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "_interpolate(const ValueT* value, double weight)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN const ValueT a = static_cast<)",
    "insertText": "ValueT(0.5 * (value[0] + value[2]) - value[1]), b = static_cast<ValueT>(0.5 * (value[2] - value[0])), c = static_cast<ValueT>(value[1])"
  },
  {
    "label": "weight()",
    "kind": "Method",
    "detail": "Function (const auto temp =)",
    "insertText": "weight(weight * a + b)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_END return static_cast<)",
    "insertText": "ValueT(temp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ; ValueT vx [ 3 ] ;)",
    "insertText": "for(int dx = 0; dx < 3; ++dx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueT vy [ 3 ] ;)",
    "insertText": "for(int dy = 0; dy < 3; ++dy)"
  },
  {
    "label": "_interpolate()",
    "kind": "Method",
    "detail": "Function (const ValueT* vz =& data [ dx ] [ dy ] [ 0 ] ; vy [ dy ] =)",
    "insertText": "_interpolate(vz, uvw.z())"
  },
  {
    "label": "_interpolate()",
    "kind": "Method",
    "detail": "Function (} vx [ dx ] =)",
    "insertText": "_interpolate(vy, uvw.y())"
  },
  {
    "label": "_interpolate()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "_interpolate(vx, uvw.x())"
  },
  {
    "label": "floorVec3()",
    "kind": "Method",
    "detail": "Function (using ValueT = TreeT::ValueType ; const Vec3i inIdx =)",
    "insertText": "floorVec3(inCoord), inLoIdx = inIdx - Vec3i(1, 1, 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Vec3R uvw = inCoord - inIdx ; bool active = false ; ValueT data [ 3 ] [ 3 ] [ 3 ] ;)",
    "insertText": "for(int dx = 0, ix = inLoIdx.x(); dx < 3; ++dx, ++ix)"
  },
  {
    "label": "triquadraticInterpolation()",
    "kind": "Method",
    "detail": "Function (} } } result =)",
    "insertText": "triquadraticInterpolation(data, uvw)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (data [ dx ] [ dy ] [ dz ] = inTree .)",
    "insertText": "getValue(Coord(ix, iy, iz))"
  },
  {
    "label": "TreeT()",
    "kind": "Method",
    "detail": "Function (using ValueType = TreeT::ValueType ; ValueType tempX,tempY,tempZ ; bool active = false ; active = PointSampler::sample<)",
    "insertText": "TreeT(inTree, inCoord + Vec3R(0.5, 0, 0), tempX)"
  },
  {
    "label": "TreeT()",
    "kind": "Method",
    "detail": "Function (active = PointSampler::sample<)",
    "insertText": "TreeT(inTree, inCoord + Vec3R(0, 0.5, 0), tempY)"
  },
  {
    "label": "TreeT()",
    "kind": "Method",
    "detail": "Function (active = PointSampler::sample<)",
    "insertText": "TreeT(inTree, inCoord + Vec3R(0, 0, 0.5), tempZ)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "x() = tempX.x()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "y() = tempY.y()"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "z() = tempZ.z()"
  },
  {
    "label": "TreeT()",
    "kind": "Method",
    "detail": "Function (using ValueT = TreeT::ValueType ; const ValueT tempX = PointSampler::sample<)",
    "insertText": "TreeT(inTree, inCoord + Vec3R(0.5, 0.0, 0.0))"
  },
  {
    "label": "TreeT()",
    "kind": "Method",
    "detail": "Function (const ValueT tempY = PointSampler::sample<)",
    "insertText": "TreeT(inTree, inCoord + Vec3R(0.0, 0.5, 0.0))"
  },
  {
    "label": "TreeT()",
    "kind": "Method",
    "detail": "Function (const ValueT tempZ = PointSampler::sample<)",
    "insertText": "TreeT(inTree, inCoord + Vec3R(0.0, 0.0, 0.5))"
  }
]