[
  {
    "label": "MySampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MySampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "PointSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointSampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "BoxSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoxSampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "QuadraticSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuadraticSampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "StaggeredPointSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StaggeredPointSampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "StaggeredBoxSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StaggeredBoxSampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "StaggeredQuadraticSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StaggeredQuadraticSampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "GridSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridSampler"
  },
  {
    "label": "GridSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridSampler"
  },
  {
    "label": "GridSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridSampler"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "DualGridSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DualGridSampler"
  },
  {
    "label": "DualGridSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DualGridSampler"
  },
  {
    "label": "AlphaMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlphaMask"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sampler"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& tree, const Vec3R& coord, typename TreeT::ValueType& val)"
  },
  {
    "label": "radius()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "radius()"
  },
  {
    "label": "mipmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mipmap()"
  },
  {
    "label": "consistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "consistent()"
  },
  {
    "label": "staggered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "staggered()"
  },
  {
    "label": "order()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "order()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord,\n                       typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord,\n                       typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord,\n                       typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord,\n                       typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord,\n                       typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord,\n                       typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord,\n                       typename TreeT::ValueType& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "static_assert(std::is_floating_point<FloatT>::value,\n        \"AlphaMask requires a floating-point value type\")"
  }
]