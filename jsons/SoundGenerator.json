[
  {
    "label": "FSoundGeneratorInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundGeneratorInitParams"
  },
  {
    "label": "ISoundGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundGenerator"
  },
  {
    "label": "USynthComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USynthComponent"
  },
  {
    "label": "FSoundGeneratorNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundGeneratorNull"
  },
  {
    "label": "ISoundGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDeviceManager . h \" # include \" CoreMinimal . h \" # include \" Containers / MpscQueue . h \" # include \" Templates / Function . h \" namespace Audio { using AudioTaskQueueId = uint32 ; } struct FSoundGeneratorInitParams { Audio::FDeviceId AudioDeviceID ; uint64 AudioComponentId = 0 ; float SampleRate = 0 . 0 f ; int32 AudioMixerNumOutputFrames = 0 ; int32 NumChannels = 0 ; int32 NumFramesPerCallback = 0 ; uint64 InstanceID = 0 ; bool bIsPreviewSound = false ; FString GraphName ; float StartTime = 0 . 0 f ; } ; class ISoundGenerator { public :)",
    "insertText": "ISoundGenerator()"
  },
  {
    "label": "OnGenerateAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnGenerateAudio(float* OutAudio, int32 NumSamples)"
  },
  {
    "label": "GetDesiredNumSamplesToRenderPerCallback()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDesiredNumSamplesToRenderPerCallback()"
  },
  {
    "label": "OnEndGenerate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndGenerate()"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFinished()"
  },
  {
    "label": "GetSynchronizedRenderQueueId()",
    "kind": "Method",
    "detail": "Function (Audio::AudioTaskQueueId)",
    "insertText": "GetSynchronizedRenderQueueId()"
  },
  {
    "label": "PumpPendingMessages()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PumpPendingMessages()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TMpscQueue<TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(OutAudio, NumSamples * sizeof(float))"
  }
]