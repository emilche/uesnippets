[
  {
    "label": "Uint128Low64()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THIRD_PARTY_CITYHASH_V103_SRC_CITY_V103_H_ # define BASE_THIRD_PARTY_CITYHASH_V103_SRC_CITY_V103_H_ # include<stdint . h> # include<stdlib . h> # include<utility> namespace base { namespace internal { namespace cityhash_v103 { typedef uint8_t uint8 ; typedef uint32_t uint32 ; typedef uint64_t uint64 ; typedef std::pair<uint64,uint64> uint128 ; uint64)",
    "insertText": "Uint128Low64(const uint128& x)"
  },
  {
    "label": "CityHash64WithSeed()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CityHash64WithSeed(const char* buf, size_t len, uint64 seed)"
  },
  {
    "label": "CityHash64WithSeeds()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CityHash64WithSeeds(const char* buf, size_t len, uint64 seed0, uint64 seed1)"
  },
  {
    "label": "CityHash128()",
    "kind": "Method",
    "detail": "Function (uint128)",
    "insertText": "CityHash128(const char* s, size_t len)"
  },
  {
    "label": "CityHash128WithSeed()",
    "kind": "Method",
    "detail": "Function (uint128)",
    "insertText": "CityHash128WithSeed(const char* s, size_t len, uint128 seed)"
  },
  {
    "label": "Hash128to64()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "Hash128to64(const uint128& x)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (const uint64 kMul = 0 x9ddfea08eb382d69ULL ; uint64)",
    "insertText": "a(Uint128Low64(x) ^ Uint128High64(x))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(a >> 47)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "b(Uint128High64(x) ^ a)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "b(b >> 47)"
  }
]