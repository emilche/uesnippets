[
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "SCEV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEV"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "TransformKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TransformKind"
  },
  {
    "label": "TransformForPostIncUse()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_SCALAREVOLUTIONNORMALIZATION_H # define LLVM_ANALYSIS_SCALAREVOLUTIONNORMALIZATION_H # include \" llvm / ADT / SmallPtrSet . h \" namespace llvm { class Instruction ; class DominatorTree ; class Loop ; class ScalarEvolution ; class SCEV ; class Value ; enum TransformKind { Normalize,NormalizeAutodetect,Denormalize } ; typedef SmallPtrSet<const Loop*,2> PostIncLoopSet ; const SCEV*)",
    "insertText": "TransformForPostIncUse(TransformKind Kind, const SCEV *S, Instruction *User, Value *OperandValToReplace, PostIncLoopSet &Loops, ScalarEvolution &SE, DominatorTree &DT)"
  }
]