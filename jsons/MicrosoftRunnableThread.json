[
  {
    "label": "FRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnable"
  },
  {
    "label": "FRunnableThreadWin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThreadWin"
  },
  {
    "label": "_ThreadProc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringConv . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" HAL / Event . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / ThreadManager . h \" # include \" ProfilingDebugging / MemoryTrace . h \" # include \" Microsoft / WindowsHWrapper . h \" class FRunnable ; class FRunnableThreadWin : public FRunnableThread { HANDLE Thread = 0 ;::DWORD STDCALL)",
    "insertText": "_ThreadProc(LPVOID pThis)"
  },
  {
    "label": "ThisThread()",
    "kind": "Method",
    "detail": "Function (auto*)",
    "insertText": "ThisThread(FRunnableThreadWin*)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().AddThread(ThisThread->GetThreadID(), ThisThread)"
  },
  {
    "label": "GuardedRun()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GuardedRun()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "FRunnableThreadWin()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FRunnableThreadWin()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Kill(true)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetThreadPriority(EThreadPriority NewPriority)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (ThreadPriority = NewPriority)",
    "insertText": "SetThreadPriority(Thread, TranslateThreadPriority(ThreadPriority))"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Suspend(bool bShouldPause = true)"
  },
  {
    "label": "SuspendThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendThread(Thread)"
  },
  {
    "label": "ResumeThread()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ResumeThread(Thread)"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Kill(bool bShouldWait)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bDidExitOK = true ;)",
    "insertText": "if(Runnable)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (Runnable ->)",
    "insertText": "Stop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bShouldWait == true)"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSingleObject(Thread, INFINITE)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CloseHandle(Thread)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (Thread = NULL ; # if UE_MEMORY_TRACE_ENABLED | | ENABLE_LOW_LEVEL_MEM_TRACKER const uint64 FakeAddress =)",
    "insertText": "uint64(this) | (1ull << 47)"
  },
  {
    "label": "MemoryTrace_Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Free(FakeAddress)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelFree(ELLMTracker::Default, (const void*)FakeAddress))"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelFree(ELLMTracker::Platform, (const void*)FakeAddress))"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (# endif return bDidExitOK ; } void)",
    "insertText": "WaitForCompletion()"
  },
  {
    "label": "SetThreadAffinity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetThreadAffinity(const FThreadAffinity& Affinity)"
  },
  {
    "label": "TranslateThreadPriority()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TranslateThreadPriority(EThreadPriority Priority)"
  },
  {
    "label": "CreateInternal()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CreateInternal(FRunnable* InRunnable, const TCHAR* InThreadName, uint32 InStackSize = 0, EThreadPriority InThreadPri = TPri_Normal, uint64 InThreadAffinityMask = 0, EThreadCreateFlags InCreateFlags = EThreadCreateFlags::None)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bOnce = false ;)",
    "insertText": "if(!bOnce)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (bOnce = true)",
    "insertText": "SetThreadPriority(::GetCurrentThread(), TranslateThreadPriority(TPri_Normal))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(InRunnable)"
  },
  {
    "label": "GetSynchEventFromPool()",
    "kind": "Method",
    "detail": "Function (Runnable = InRunnable ; ThreadAffinityMask = InThreadAffinityMask ; ThreadInitSyncEvent =)",
    "insertText": "GetSynchEventFromPool(true)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ThreadName = InThreadName ? InThreadName :)",
    "insertText": "TEXT(\"Unnamed UE\")"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (ThreadPriority = InThreadPri ; { # if UE_MEMORY_TRACE_ENABLED | | ENABLE_LOW_LEVEL_MEM_TRACKER)",
    "insertText": "LLM_SCOPE(ELLMTag::ThreadStack)"
  },
  {
    "label": "LLM_PLATFORM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_PLATFORM_SCOPE(ELLMTag::ThreadStackPlatform)"
  },
  {
    "label": "ActualStackSize()",
    "kind": "Method",
    "detail": "Function (uint64 DefaultStackSize = 1 0 2 4* 1 0 2 4 ; uint32 DefaultAlignment = 6 4* 1 0 2 4 ; const uint64)",
    "insertText": "ActualStackSize(InStackSize == 0) ? DefaultStackSize : uint64(InStackSize)"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Alloc(FakeAddress, ActualStackSize, DefaultAlignment)"
  },
  {
    "label": "MemoryTrace_MarkAllocAsHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_MarkAllocAsHeap(FakeAddress, EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelAlloc(ELLMTracker::Default, (const void*)FakeAddress, ActualStackSize))"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelAlloc(ELLMTracker::Platform, (const void*)FakeAddress, ActualStackSize))"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (# endif Thread =)",
    "insertText": "CreateThread(NULL, InStackSize, _ThreadProc, this, STACK_SIZE_PARAM_IS_A_RESERVATION | CREATE_SUSPENDED, (::DWORD*)&ThreadID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Thread == NULL)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (ThreadInitSyncEvent ->)",
    "insertText": "Wait(INFINITE)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (ThreadPriority = TPri_Normal ;)",
    "insertText": "SetThreadPriority(InThreadPri)"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReturnSynchEventToPool(ThreadInitSyncEvent)"
  }
]