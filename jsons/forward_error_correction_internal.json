[
  {
    "label": "PacketMaskTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketMaskTable"
  },
  {
    "label": "PacketMaskTable()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_FORWARD_ERROR_CORRECTION_INTERNAL_H_ # define MODULES_RTP_RTCP_SOURCE_FORWARD_ERROR_CORRECTION_INTERNAL_H_ # include<stddef . h> # include<stdint . h> # include \" api / array_view . h \" # include \" modules / include / module_fec_types . h \" namespace webrtc { size_t kUlpfecMaxMediaPackets = 4 8 ; size_t kUlpfecPacketMaskSizeLBitClear = 2 ; size_t kUlpfecPacketMaskSizeLBitSet = 6 ; size_t kFECPacketMaskMaxSize = 2 8 8 ; size_t kUlpfecMinPacketMaskSize = kUlpfecPacketMaskSizeLBitClear ; size_t kUlpfecMaxPacketMaskSize = kUlpfecPacketMaskSizeLBitSet ; namespace internal { class PacketMaskTable { public :)",
    "insertText": "PacketMaskTable(FecMaskType fec_mask_type, int num_media_packets)"
  },
  {
    "label": "PacketMaskTable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PacketMaskTable()"
  },
  {
    "label": "LookUp()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const uint8_t>)",
    "insertText": "LookUp(int num_media_packets, int num_fec_packets)"
  },
  {
    "label": "PickTable()",
    "kind": "Method",
    "detail": "Function (private : const uint8_t*)",
    "insertText": "PickTable(FecMaskType fec_mask_type, int num_media_packets)"
  },
  {
    "label": "LookUpInFecTable()",
    "kind": "Method",
    "detail": "Function (const uint8_t* table_ ; uint8_t fec_packet_mask_ [ kFECPacketMaskMaxSize ] ; } ; rtc::ArrayView<const uint8_t>)",
    "insertText": "LookUpInFecTable(const uint8_t* table, int media_packet_index, int fec_index)"
  },
  {
    "label": "GeneratePacketMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePacketMasks(int num_media_packets, int num_fec_packets, int num_imp_packets, bool use_unequal_protection, PacketMaskTable* mask_table, uint8_t* packet_mask)"
  },
  {
    "label": "PacketMaskSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "PacketMaskSize(size_t num_sequence_numbers)"
  },
  {
    "label": "InsertZeroColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertZeroColumns(int num_zeros, uint8_t* new_mask, int new_mask_bytes, int num_fec_packets, int new_bit_index)"
  },
  {
    "label": "CopyColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyColumn(uint8_t* new_mask, int new_mask_bytes, uint8_t* old_mask, int old_mask_bytes, int num_fec_packets, int new_bit_index, int old_bit_index)"
  }
]