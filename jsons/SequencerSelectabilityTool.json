[
  {
    "label": "FSequencerSelectabilityTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelectabilityTool"
  },
  {
    "label": "FSequencerSelectabilityTool()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" EditorModeTools . h \" # include \" EditorViewportSelectability . h \" class FSequencerSelectabilityTool : public FModeTool,public FEditorViewportSelectability { public :)",
    "insertText": "FSequencerSelectabilityTool()"
  },
  {
    "label": "FSequencerSelectabilityTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequencerSelectabilityTool(const FOnGetWorld& InOnGetWorld, const FOnIsObjectSelectableInViewport& InOnIsObjectSelectableInViewport)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "BoxSelect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BoxSelect(FBox& InBox, const bool InSelect)"
  },
  {
    "label": "FrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelect(const FConvexVolume& InFrustum, FEditorViewportClient* const InEditorViewportClient, const bool InSelect)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* const InEditorViewportClient, FViewport* const InViewport, const FSceneView* InView, FCanvas* const InCanvas)"
  }
]