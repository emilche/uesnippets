[
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "FDelegateDispatchDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelegateDispatchDetails"
  },
  {
    "label": "FInputActionBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputActionBinding"
  },
  {
    "label": "FInputAxisBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisBinding"
  },
  {
    "label": "FInputKeyBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyBinding"
  },
  {
    "label": "FKeyBind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyBind"
  },
  {
    "label": "FInputAxisProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisProperties"
  },
  {
    "label": "FInputAxisConfigEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisConfigEntry"
  },
  {
    "label": "FInputActionKeyMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputActionKeyMapping"
  },
  {
    "label": "FInputAxisKeyMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisKeyMapping"
  },
  {
    "label": "FInputActionSpeechMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputActionSpeechMapping"
  },
  {
    "label": "FInputKeyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyParams"
  },
  {
    "label": "EInputEvent",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInputEvent"
  },
  {
    "label": "UPlayerInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayerInput"
  },
  {
    "label": "FActionKeyDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActionKeyDetails"
  },
  {
    "label": "FAxisKeyDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAxisKeyDetails"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UEnhancedPlayerInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnhancedPlayerInput"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" InputCoreTypes . h \" # include \" UObject / ScriptMacros . h \" # include \" Framework / Commands / InputChord . h \" # include \" GestureRecognizer . h \" # include \" KeyState . h \" # include \" PlayerInput . generated . h \" class FDebugDisplayInfo ; class UInputComponent ; class ULocalPlayer ; struct FDelegateDispatchDetails ; struct FInputActionBinding ; struct FInputAxisBinding ; struct FInputKeyBinding ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(config, EditAnywhere, Category = \"Input\")"
  },
  {
    "label": "FKeyBind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyBind() : Control(false) , Shift(false) , Alt(false) , Cmd(false) , bIgnoreCtrl(false) , bIgnoreShift(false) , bIgnoreAlt(false) , bIgnoreCmd(false) , bDisabled(false)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=\"Input\")"
  },
  {
    "label": "FInputAxisProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputAxisProperties() : DeadZone(0.2f) , Sensitivity(1.f) , Exponent(1.f) , bInvert(false)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(VisibleAnywhere, Category=\"Input\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Input\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FInputActionKeyMapping& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ;)",
    "insertText": "if(ActionName.LexicalLess(Other.ActionName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = true ; } else)",
    "insertText": "if(ActionName == Other.ActionName)"
  },
  {
    "label": "bResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bResult(Key < Other.Key)"
  },
  {
    "label": "FInputActionKeyMapping()",
    "kind": "Method",
    "detail": "Function (} return bResult ; })",
    "insertText": "FInputActionKeyMapping(const FName InActionName = NAME_None, const FKey InKey = EKeys::Invalid, const bool bInShift = false, const bool bInCtrl = false, const bool bInAlt = false, const bool bInCmd = false) : ActionName(InActionName) , bShift(bInShift) , bCtrl(bInCtrl) , bAlt(bInAlt) , bCmd(bInCmd) , Key(InKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FInputAxisKeyMapping& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ;)",
    "insertText": "if(AxisName.LexicalLess(Other.AxisName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = true ; } else)",
    "insertText": "if(AxisName == Other.AxisName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = true ; } else)",
    "insertText": "if(Key == Other.Key)"
  },
  {
    "label": "bResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bResult(Scale < Other.Scale)"
  },
  {
    "label": "FInputAxisKeyMapping()",
    "kind": "Method",
    "detail": "Function (} } return bResult ; })",
    "insertText": "FInputAxisKeyMapping(const FName InAxisName = NAME_None, const FKey InKey = EKeys::Invalid, const float InScale = 1.f) : AxisName(InAxisName) , Scale(InScale) , Key(InKey)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() static FName GetKeyCategory()"
  },
  {
    "label": "GetActionName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetActionName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FInputActionSpeechMapping& Other)"
  },
  {
    "label": "bResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bResult(SpeechKeyword.LexicalLess(Other.SpeechKeyword))"
  },
  {
    "label": "FInputActionSpeechMapping()",
    "kind": "Method",
    "detail": "Function (} return bResult ; })",
    "insertText": "FInputActionSpeechMapping(const FName InActionName = NAME_None, const FName InSpeechKeyword = NAME_None) : ActionName(InActionName) , SpeechKeyword(InSpeechKeyword)"
  },
  {
    "label": "FInputKeyParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FInputKeyParams {)",
    "insertText": "FInputKeyParams()"
  },
  {
    "label": "FInputKeyParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputKeyParams(FKey InKey, enum EInputEvent InEvent, FVector InDelta, bool bGamepadOverride = false, FInputDeviceId InInputDevice = INPUTDEVICEID_NONE) : Key(InKey) , InputDevice(InInputDevice) , Event(InEvent) , Delta(InDelta) , bIsGamepadOverride(bGamepadOverride)"
  },
  {
    "label": "FInputKeyParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FInputKeyParams(FKey InKey, enum EInputEvent InEvent, double InDelta, bool bGamepadOverride = false, FInputDeviceId InInputDevice = INPUTDEVICEID_NONE) : Key(InKey) , InputDevice(InInputDevice) , Event(InEvent) , Delta(FVector(InDelta, 0.0, 0.0)) , bIsGamepadOverride(bGamepadOverride)"
  },
  {
    "label": "FInputKeyParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FInputKeyParams(FKey InKey, double InDelta, float InDeltaTime, int32 InNumSamples, bool bGamepadOverride = false, FInputDeviceId InInputDevice = INPUTDEVICEID_NONE) : Key(InKey) , InputDevice(InInputDevice) , NumSamples(InNumSamples) , DeltaTime(InDeltaTime) , Delta(FVector(InDelta, 0.0, 0.0)) , bIsGamepadOverride(bGamepadOverride)"
  },
  {
    "label": "FInputKeyParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FInputKeyParams(FKey InKey, FVector InDelta, float InDeltaTime, int32 InNumSamples, bool bGamepadOverride = false, FInputDeviceId InInputDevice = INPUTDEVICEID_NONE) : Key(InKey) , InputDevice(InInputDevice) , NumSamples(InNumSamples) , DeltaTime(InDeltaTime) , Delta(InDelta) , bIsGamepadOverride(bGamepadOverride)"
  },
  {
    "label": "IsGamepad()",
    "kind": "Method",
    "detail": "Function (} ; FKey Key = EKeys::Invalid ; FInputDeviceId InputDevice = INPUTDEVICEID_NONE ; enum EInputEvent Event = EInputEvent::IE_Pressed ; int32 NumSamples = 0 ; float DeltaTime = 1 / 6 0 . f ; FVector Delta = FVector::ZeroVector ; bool bIsGamepadOverride = false ; bool)",
    "insertText": "IsGamepad()"
  },
  {
    "label": "Get1DAxisDelta()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Get1DAxisDelta()"
  },
  {
    "label": "Get3DAxisDelta()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "Get3DAxisDelta()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config=Input, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UPlayerInput()"
  },
  {
    "label": "GetAxisProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAxisProperties(const FKey AxisKey, FInputAxisProperties& AxisProperties)"
  },
  {
    "label": "SetAxisProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxisProperties(const FKey AxisKey, const FInputAxisProperties& AxisProperties)"
  },
  {
    "label": "SetMouseSensitivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouseSensitivity(const float SensitivityX, const float SensitivityY)"
  },
  {
    "label": "SetMouseSensitivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouseSensitivity(Sensitivity, Sensitivity)"
  },
  {
    "label": "GetMouseSensitivityX()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMouseSensitivityX()"
  },
  {
    "label": "GetMouseSensitivityY()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMouseSensitivityY()"
  },
  {
    "label": "GetInvertAxisKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInvertAxisKey(const FKey AxisKey)"
  },
  {
    "label": "GetInvertAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInvertAxis(const FName AxisName)"
  },
  {
    "label": "AddActionMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActionMapping(const FInputActionKeyMapping& KeyMapping)"
  },
  {
    "label": "RemoveActionMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActionMapping(const FInputActionKeyMapping& KeyMapping)"
  },
  {
    "label": "AddAxisMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAxisMapping(const FInputAxisKeyMapping& KeyMapping)"
  },
  {
    "label": "RemoveAxisMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAxisMapping(const FInputAxisKeyMapping& KeyMapping)"
  },
  {
    "label": "AddEngineDefinedActionMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEngineDefinedActionMapping(const FInputActionKeyMapping& ActionMapping)"
  },
  {
    "label": "AddEngineDefinedAxisMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEngineDefinedAxisMapping(const FInputAxisKeyMapping& AxisMapping)"
  },
  {
    "label": "ForceRebuildingKeyMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRebuildingKeyMaps(const bool bRestoreDefaults = false)"
  },
  {
    "label": "GetOwningLocalPlayer()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "GetOwningLocalPlayer()"
  },
  {
    "label": "FAxisKeyDetails()",
    "kind": "Method",
    "detail": "Function (private : struct FActionKeyDetails { TArray<FInputActionKeyMapping> Actions ; FInputChord CapturingChord ; } ; struct FAxisKeyDetails { TArray<FInputAxisKeyMapping> KeyMappings ; uint8 bInverted : 1 ;)",
    "insertText": "FAxisKeyDetails() : bInverted(false)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (} } ; TMap<FKey,FInputAxisProperties> AxisProperties ; TMap<FName,FActionKeyDetails> ActionKeyMap ; TMap<FName,FAxisKeyDetails> AxisKeyMap ; TMap<FKey,FKeyState> KeyStateMap ; uint32 KeyMapBuildIndex ; uint8 bKeyMapsBuilt : 1 ; public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "FlushPressedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPressedKeys()"
  },
  {
    "label": "FlushPressedActionBindingKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPressedActionBindingKeys(FName ActionName)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyParams& Params)"
  },
  {
    "label": "InputTouch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputTouch(uint32 Handle, ETouchType::Type Type, const FVector2D& TouchLocation, float Force, FDateTime DeviceTimestamp, uint32 TouchpadIndex)"
  },
  {
    "label": "InputMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputMotion(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration)"
  },
  {
    "label": "InputGesture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputGesture(const FKey Gesture, const EInputEvent Event, const float Value)"
  },
  {
    "label": "UpdatePinchStartDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePinchStartDistance()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "ProcessInputStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInputStack(const TArray<UInputComponent*>& InputComponentStack, const float DeltaTime, const bool bGamePaused)"
  },
  {
    "label": "EvaluateKeyMapState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "EvaluateKeyMapState(const float DeltaTime, const bool bGamePaused, OUT TArray<TPair<FKey, FKeyState*>>& KeysWithEvents)"
  },
  {
    "label": "EvaluateInputDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateInputDelegates(const TArray<UInputComponent*>& InputComponentStack, const float DeltaTime, const bool bGamePaused, const TArray<TPair<FKey, FKeyState*>>& KeysWithEvents)"
  },
  {
    "label": "DiscardPlayerInput()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DiscardPlayerInput()"
  },
  {
    "label": "SmoothMouse()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SmoothMouse(float aMouse, uint8& SampleCount, int32 Index)"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(class UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "GetKeyState()",
    "kind": "Method",
    "detail": "Function (FKeyState*)",
    "insertText": "GetKeyState(FKey InKey)"
  },
  {
    "label": "IsPressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPressed(FKey InKey)"
  },
  {
    "label": "WasJustPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasJustPressed(FKey InKey)"
  },
  {
    "label": "WasJustReleased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasJustReleased(FKey InKey)"
  },
  {
    "label": "GetTimeDown()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeDown(FKey InKey)"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyValue(FKey InKey)"
  },
  {
    "label": "GetRawKeyValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRawKeyValue(FKey InKey)"
  },
  {
    "label": "GetProcessedVectorKeyValue()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetProcessedVectorKeyValue(FKey InKey)"
  },
  {
    "label": "GetRawVectorKeyValue()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetRawVectorKeyValue(FKey InKey)"
  },
  {
    "label": "IsAltPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAltPressed()"
  },
  {
    "label": "IsCtrlPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCtrlPressed()"
  },
  {
    "label": "IsShiftPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShiftPressed()"
  },
  {
    "label": "IsCmdPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCmdPressed()"
  },
  {
    "label": "GetKeyMapBuildIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetKeyMapBuildIndex()"
  },
  {
    "label": "GetBind()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBind(FKey Key)"
  },
  {
    "label": "GetExecBind()",
    "kind": "Method",
    "detail": "Function (FKeyBind)",
    "insertText": "GetExecBind(FString const& ExecCommand)"
  },
  {
    "label": "ExecInputCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecInputCommands(UWorld* InWorld, const TCHAR* Cmd, class FOutputDevice& Ar)"
  },
  {
    "label": "GetKeysForAction()",
    "kind": "Method",
    "detail": "Function (# endif const TArray<FInputActionKeyMapping>&)",
    "insertText": "GetKeysForAction(const FName ActionName)"
  },
  {
    "label": "GetKeysForAxis()",
    "kind": "Method",
    "detail": "Function (const TArray<FInputAxisKeyMapping>&)",
    "insertText": "GetKeysForAxis(const FName AxisName)"
  },
  {
    "label": "GetEngineDefinedActionMappings()",
    "kind": "Method",
    "detail": "Function (const TArray<FInputActionKeyMapping>&)",
    "insertText": "GetEngineDefinedActionMappings()"
  },
  {
    "label": "MassageAxisInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MassageAxisInput(FKey Key, float RawValue)"
  },
  {
    "label": "ProcessNonAxesKeys()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessNonAxesKeys(FKey Inkey, FKeyState* KeyState)"
  },
  {
    "label": "FinishProcessingPlayerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishProcessingPlayerInput()"
  },
  {
    "label": "KeyEventOccurred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyEventOccurred(FKey Key, EInputEvent Event, TArray<uint32>& EventIndices, const FKeyState* KeyState = nullptr)"
  },
  {
    "label": "GetChordsForAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChordsForAction(const FInputActionBinding& ActionBinding, const bool bGamePaused, TArray<struct FDelegateDispatchDetails>& FoundChords, TArray<FKey>& KeysToConsume)"
  },
  {
    "label": "GetChordsForKeyMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChordsForKeyMapping(const FInputActionKeyMapping& KeyMapping, const FInputActionBinding& ActionBinding, const bool bGamePaused, TArray<FDelegateDispatchDetails>& FoundChords, TArray<FKey>& KeysToConsume, const FKeyState* KeyState = nullptr)"
  },
  {
    "label": "GetChordForKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChordForKey(const FInputKeyBinding& KeyBinding, const bool bGamePaused, TArray<struct FDelegateDispatchDetails>& FoundChords, TArray<FKey>& KeysToConsume, const FKeyState* KeyState = nullptr)"
  },
  {
    "label": "DetermineAxisValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DetermineAxisValue(const FInputAxisBinding& AxisBinding, const bool bGamePaused, TArray<FKey>& KeysToConsume, OUT bool& bHadAnyNonConsumedKeys)"
  },
  {
    "label": "ConditionalBuildKeyMappings_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBuildKeyMappings_Internal()"
  },
  {
    "label": "ConsumeKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeKey(FKey Key)"
  },
  {
    "label": "IsKeyConsumed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyConsumed(FKey Key, const FKeyState* KeyState = nullptr)"
  },
  {
    "label": "ConditionalInitAxisProperties()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConditionalInitAxisProperties()"
  },
  {
    "label": "IsKeyHandledByAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyHandledByAction(FKey Key)"
  }
]