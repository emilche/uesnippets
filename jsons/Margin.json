[
  {
    "label": "FMargin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMargin"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Types / SlateEnums . h \" # include \" Types / SlateVector2 . h \" # include \" Margin . generated . h \")",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Appearance)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMargin() : Left(0.0f) , Top(0.0f) , Right(0.0f) , Bottom(0.0f)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMargin(float UniformMargin) : Left(UniformMargin) , Top(UniformMargin) , Right(UniformMargin) , Bottom(UniformMargin)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMargin(float Horizontal, float Vertical) : Left(Horizontal) , Top(Vertical) , Right(Horizontal) , Bottom(Vertical)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMargin(const FVector2f InVector) : Left(InVector.X) , Top(InVector.Y) , Right(InVector.X) , Bottom(InVector.Y)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMargin(const FVector2d InVector) : Left(UE_REAL_TO_FLOAT(InVector.X)) , Top(UE_REAL_TO_FLOAT(InVector.Y)) , Right(UE_REAL_TO_FLOAT(InVector.X)) , Bottom(UE_REAL_TO_FLOAT(InVector.Y))"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMargin(double InLeft, double InTop, double InRight, double InBottom) : Left((float)InLeft) , Top((float)InTop) , Right((float)InRight) , Bottom((float)InBottom)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMargin(const FVector4f InVector) : Left(InVector.X) , Top(InVector.Y) , Right(InVector.Z) , Bottom(InVector.W)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMargin(const FVector4d InVector) : Left(UE_REAL_TO_FLOAT(InVector.X)) , Top(UE_REAL_TO_FLOAT(InVector.Y)) , Right(UE_REAL_TO_FLOAT(InVector.Z)) , Bottom(UE_REAL_TO_FLOAT(InVector.W))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : FMargin)",
    "insertText": "operator(float Scale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "operator(const FMargin& InScale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "operator(const FMargin& InDelta)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "operator(const FMargin& Other)"
  },
  {
    "label": "GetTopLeft2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetTopLeft2f()"
  },
  {
    "label": "GetDesiredSize()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetDesiredSize()"
  },
  {
    "label": "GetDesiredSize2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetDesiredSize2f()"
  },
  {
    "label": "GetTotalSpaceAlong()",
    "kind": "Method",
    "detail": "Function (} template<EOrientation Orientation> float)",
    "insertText": "GetTotalSpaceAlong()"
  }
]