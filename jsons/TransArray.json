[
  {
    "label": "TTransArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTransArray"
  },
  {
    "label": "TTransArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / Array . h \" # include \" Misc / ITransaction . h \" ITransaction* GUndo ; template<T> class TTransArray : public TArray<T> { public : typedef TArray<T> Super ;)",
    "insertText": "TTransArray(UObject* InOwner ) : Owner( InOwner)"
  },
  {
    "label": "TTransArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransArray(UObject* InOwner, const Super& Other ) : Super( Other ) , Owner( InOwner)"
  },
  {
    "label": "TTransArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransArray(TTransArray&&)"
  },
  {
    "label": "TTransArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TTransArray(const TTransArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TTransArray&)",
    "insertText": "operator(TTransArray&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TTransArray&)",
    "insertText": "operator(const TTransArray&)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddUninitialized(int32 Count=1)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 Index =)",
    "insertText": "AddUninitialized(Count)"
  },
  {
    "label": "SaveArray()",
    "kind": "Method",
    "detail": "Function (GUndo ->)",
    "insertText": "SaveArray(Owner, (FScriptArray*)this, Index, Count, 1, sizeof(T), alignof(T), DefaultConstructItem, SerializeItem, DestructItem)"
  },
  {
    "label": "InsertUninitialized()",
    "kind": "Method",
    "detail": "Function (} return Index ; } void)",
    "insertText": "InsertUninitialized(int32 Index, int32 Count=1)"
  },
  {
    "label": "InsertUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertUninitialized(Index, Count)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveAt(int32 Index, int32 Count=1)"
  },
  {
    "label": "SaveArray()",
    "kind": "Method",
    "detail": "Function (GUndo ->)",
    "insertText": "SaveArray(Owner, (FScriptArray*)this, Index, Count, -1, sizeof(T), alignof(T), DefaultConstructItem, SerializeItem, DestructItem)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RemoveAt(Index, Count)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 Slack=0)"
  },
  {
    "label": "SaveArray()",
    "kind": "Method",
    "detail": "Function (GUndo ->)",
    "insertText": "SaveArray(Owner, (FScriptArray*)this, 0, this->ArrayNum, -1, sizeof(T), alignof(T), DefaultConstructItem, SerializeItem, DestructItem)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "AssignButKeepOwner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignButKeepOwner(const Super& Other)"
  },
  {
    "label": "AssignButKeepOwner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignButKeepOwner(Super&& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(const T& Item)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(*this) T(Item)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddZeroed(int32 n=1)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 Index =)",
    "insertText": "AddUninitialized(n)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this->GetData() + Index, n*sizeof(T))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Remove(const T& Item)"
  },
  {
    "label": "CheckAddress()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "CheckAddress(&Item)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 OriginalNum = this -> ArrayNum ;)",
    "insertText": "for(int32 Index=0; Index<this->ArrayNum; Index++)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(Index--)"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (} } return OriginalNum - this -> ArrayNum ; } UObject*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "ModifyItem()",
    "kind": "Method",
    "detail": "Function (Owner = NewOwner ; } void)",
    "insertText": "ModifyItem(int32 Index)"
  },
  {
    "label": "SaveArray()",
    "kind": "Method",
    "detail": "Function (GUndo ->)",
    "insertText": "SaveArray(Owner, (FScriptArray*)this, Index, 1, 0, sizeof(T), alignof(T), DefaultConstructItem, SerializeItem, DestructItem)"
  },
  {
    "label": "ModifyAllItems()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ModifyAllItems()"
  },
  {
    "label": "SaveArray()",
    "kind": "Method",
    "detail": "Function (GUndo ->)",
    "insertText": "SaveArray(Owner, (FScriptArray*)this, 0, this->Num(), 0, sizeof(T), alignof(T), DefaultConstructItem, SerializeItem, DestructItem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FArchive&)",
    "insertText": "operator(FArchive& Ar, TTransArray& A)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (Ar<<A . Owner ;)",
    "insertText": "Ar(Super&)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TPtr)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeItem(FArchive& Ar, void* TPtr)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ar(T*)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestructItem(void* TPtr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} UObject* Owner ; } ; template<T> void* operator)",
    "insertText": "new(size_t Size, TTransArray<T>& Array)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 Index = Array .)",
    "insertText": "AddUninitialized()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Insert(Index)"
  }
]