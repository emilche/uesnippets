[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "IComponentDebuggingTypedPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IComponentDebuggingTypedPtr"
  },
  {
    "label": "TComponentDebuggingTypedPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentDebuggingTypedPtr"
  },
  {
    "label": "TComponentHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentHeader"
  },
  {
    "label": "FComponentTypeDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentTypeDebugInfo"
  },
  {
    "label": "TComponentTypeDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentTypeDebugInfo"
  },
  {
    "label": "IComponentDebuggingTypedPtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MovieSceneFwd . h \" # if UE_MOVIESCENE_ENTITY_DEBUG # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" Math / Vector4 . h \" # include \" Misc / FrameTime . h \" # include \" UObject / ObjectKey . h \" # include \" Misc / InlineValue . h \" class FName ; namespace UE::MovieScene { bool GRichComponentDebugging ; struct IComponentDebuggingTypedPtr { ~)",
    "insertText": "IComponentDebuggingTypedPtr()"
  },
  {
    "label": "TComponentDebuggingTypedPtr()",
    "kind": "Method",
    "detail": "Function (} void* Ptr ; } ; template<T> struct TComponentDebuggingTypedPtr : IComponentDebuggingTypedPtr {)",
    "insertText": "TComponentDebuggingTypedPtr()"
  },
  {
    "label": "TComponentHeader()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TComponentHeader : FComponentHeader {)",
    "insertText": "TComponentHeader()"
  },
  {
    "label": "FComponentTypeDebugInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FComponentTypeDebugInfo { FString DebugName ; const TCHAR* DebugTypeName = nullptr ; ~)",
    "insertText": "FComponentTypeDebugInfo()"
  },
  {
    "label": "InitializeComponentHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeComponentHeader(void* Ptr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Ptr) FComponentHeader()"
  },
  {
    "label": "InitializeDebugComponentData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeDebugComponentData(FComponentHeader& Header, uint8 Capacity)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Ptr) TComponentHeader<T>()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TComponentDebuggingTypedPtr<T>* TypedComponents = new TComponentDebuggingTypedPtr<T> [ Capacity ] ;)",
    "insertText": "for(int32 Index = 0; Index < Capacity; ++Index)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TypedComponents [ Index ] . Ptr = static_cast<)",
    "insertText": "T(Header.GetValuePtr(Index))"
  }
]