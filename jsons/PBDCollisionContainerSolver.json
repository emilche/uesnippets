[
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FSolverBody",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBody"
  },
  {
    "label": "FSolverBodyContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBodyContainer"
  },
  {
    "label": "FPBDCollisionContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionContainerSolver"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Collision / CollisionApplyType . h \" # include \" Chaos / Collision / PBDCollisionSolver . h \" # include \" Chaos / Collision / PBDCollisionSolverSettings . h \" # include \" Chaos / Evolution / SolverConstraintContainer . h \" # include \" Chaos / Framework / ScratchBuffer . h \" namespace Chaos { class FPBDCollisionConstraint ; class FPBDCollisionConstraints ; class FSolverBody ; class FSolverBodyContainer ; class FPBDCollisionContainerSolver : public FConstraintContainerSolver { public :)",
    "insertText": "UE_NONCOPYABLE(FPBDCollisionContainerSolver)"
  },
  {
    "label": "FPBDCollisionContainerSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDCollisionContainerSolver(const FPBDCollisionConstraints& InConstraintContainer, const int32 InPriority)"
  },
  {
    "label": "FPBDCollisionContainerSolver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDCollisionContainerSolver()"
  },
  {
    "label": "NumSolvers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumSolvers()"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraints(const TArrayView<Private::FPBDIslandConstraint*>& ConstraintHandles)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "GetConstraintSolver()",
    "kind": "Method",
    "detail": "Function (const Private::FPBDCollisionSolver&)",
    "insertText": "GetConstraintSolver(const int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (} private : FPBDCollisionConstraint*)",
    "insertText": "GetConstraint(const int32 Index)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraint(FPBDCollisionConstraint& Constraint)"
  },
  {
    "label": "CalculateCollisionBufferSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CalculateCollisionBufferSize(const size_t InTightFittingNum, const size_t InCurrentBufferNum)"
  },
  {
    "label": "CalculateConstraintMaxManifoldPoints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalculateConstraintMaxManifoldPoints(const FPBDCollisionConstraint* Constraint)"
  },
  {
    "label": "PrepareSolverBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareSolverBuffer()"
  },
  {
    "label": "UpdatePositionShockPropagation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePositionShockPropagation(const FReal Dt, const int32 It, const int32 NumIts, const int32 BeginIndex, const int32 EndIndex, const FPBDCollisionSolverSettings& SolverSettings)"
  },
  {
    "label": "UpdateVelocityShockPropagation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVelocityShockPropagation(const FReal Dt, const int32 It, const int32 NumIts, const int32 BeginIndex, const int32 EndIndex, const FPBDCollisionSolverSettings& SolverSettings)"
  },
  {
    "label": "ApplyShockPropagation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyShockPropagation(const FSolverReal ShockPropagation)"
  },
  {
    "label": "SolvePositionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolvePositionImpl(const FReal Dt, const int32 It, const int32 NumIts, const int32 BeginIndex, const int32 EndIndex, const FPBDCollisionSolverSettings& SolverSettings)"
  },
  {
    "label": "SolveVelocityImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveVelocityImpl(const FReal Dt, const int32 It, const int32 NumIts, const int32 BeginIndex, const int32 EndIndex, const FPBDCollisionSolverSettings& SolverSettings)"
  },
  {
    "label": "UpdateCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollisions(const FReal InDt, const int32 BeginIndex, const int32 EndIndex)"
  }
]