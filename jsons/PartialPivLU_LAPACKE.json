[
  {
    "label": "partial_lu_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "partial_lu_impl"
  },
  {
    "label": "EIGEN_LAPACKE_LU_PARTPIV()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PARTIALLU_LAPACK_H # define EIGEN_PARTIALLU_LAPACK_H namespace Eigen { namespace internal { # define)",
    "insertText": "EIGEN_LAPACKE_LU_PARTPIV(EIGTYPE, LAPACKE_TYPE, LAPACKE_PREFIX)"
  },
  {
    "label": "blocked_lu()",
    "kind": "Method",
    "detail": "Function (\\ \\ lapack_int)",
    "insertText": "blocked_lu(Index rows, Index cols, EIGTYPE* lu_data, Index luStride, lapack_int* row_transpositions, lapack_int& nb_transpositions, lapack_int maxBlockSize=256)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_UNUSED_VARIABLE(maxBlockSize)"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ lapack_int matrix_order,first_zero_pivot ; \\ lapack_int m,n,lda,* ipiv,info ; \\ EIGTYPE* a ; \\ \\ matrix_order = StorageOrder = = RowMajor ? LAPACK_ROW_MAJOR : LAPACK_COL_MAJOR ; \\ lda = convert_index<)",
    "insertText": "lapack_int(luStride)"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ a = lu_data ; \\ ipiv = row_transpositions ; \\ m = convert_index<)",
    "insertText": "lapack_int(rows)"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ n = convert_index<)",
    "insertText": "lapack_int(cols)"
  },
  {
    "label": "getrf()",
    "kind": "Method",
    "detail": "Function (\\ nb_transpositions = 0 ; \\ \\ info = LAPACKE_ # # LAPACKE_PREFIX # #)",
    "insertText": "getrf(matrix_order, m, n, (LAPACKE_TYPE*)a, lda, ipiv)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "for(int i=0;i<m;i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ipiv [ i ] - - ;)",
    "insertText": "if(ipiv[i]!=i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} \\ \\)",
    "insertText": "eigen_assert(info >= 0)"
  }
]