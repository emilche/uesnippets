[
  {
    "label": "FGraphAStarDefaultPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphAStarDefaultPolicy"
  },
  {
    "label": "EGraphAStarResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGraphAStarResult"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "FGraphAStarDefaultNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphAStarDefaultNode"
  },
  {
    "label": "CQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CQuery"
  },
  {
    "label": "CQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CQuery"
  },
  {
    "label": "CQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CQuery"
  },
  {
    "label": "CQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CQuery"
  },
  {
    "label": "FRangeChecklessAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRangeChecklessAllocator"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FGraphAStar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphAStar"
  },
  {
    "label": "FNodeSorter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeSorter"
  },
  {
    "label": "FNodePool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodePool"
  },
  {
    "label": "FOpenList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenList"
  },
  {
    "label": "PopIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PopIndex()"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_CONST()",
    "kind": "Method",
    "detail": "Function (methods)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_CONST(int32, GetNeighbourCount, const FGraphNodeRef, NO_COUNT)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS()",
    "kind": "Method",
    "detail": "Function (methods)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS(FGraphNodeRef, SetPathInfo, const int32, const FSearchNode&, Obj[Param1] = Param2.NodeRef)"
  }
]