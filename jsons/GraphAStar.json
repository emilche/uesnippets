[
  {
    "label": "FGraphAStarDefaultPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphAStarDefaultPolicy"
  },
  {
    "label": "EGraphAStarResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGraphAStarResult"
  },
  {
    "label": "FGraphAStarDefaultNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphAStarDefaultNode"
  },
  {
    "label": "CQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CQuery"
  },
  {
    "label": "FRangeChecklessAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRangeChecklessAllocator"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "FGraphAStar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphAStar"
  },
  {
    "label": "FNodeSorter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeSorter"
  },
  {
    "label": "FNodePool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodePool"
  },
  {
    "label": "FOpenList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenList"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AI / NavigationSystemBase . h \" struct FGraphAStarDefaultPolicy { const int32 NodePoolSize = 6 4 ; const int32 OpenSetSize = 6 4 ; const int32 FatalPathLength = 1 0 0 0 0 ; const bool bReuseNodePoolInSubsequentSearches = false ; } ; enum EGraphAStarResult { SearchFail,SearchSuccess,GoalUnreachable,InfiniteLoop } ; const int32 NO_COUNT = INT_MAX ; # define ENABLE_GRAPH_ASTAR_LOGGING 0 # if ENABLE_GRAPH_ASTAR_LOGGING # define)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Verbosity, Format, ...) UE_LOG(LogAStar, Verbosity, Format, __VA_ARGS__) #else #define UE_GRAPH_ASTAR_LOG(...)"
  },
  {
    "label": "FGraphAStarDefaultNode()",
    "kind": "Method",
    "detail": "Function (typedef TGraph::FNodeRef FGraphNodeRef ; const FGraphNodeRef NodeRef ; FGraphNodeRef ParentRef ; FVector::FReal TraversalCost ; FVector::FReal TotalCost ; int32 SearchNodeIndex ; int32 ParentNodeIndex ; uint8 bIsOpened : 1 ; uint8 bIsClosed : 1 ;)",
    "insertText": "FGraphAStarDefaultNode(const FGraphNodeRef& InNodeRef) : NodeRef(InNodeRef) , ParentRef(TIsPointer<FGraphNodeRef>::Value ? (FGraphNodeRef)0 : (FGraphNodeRef)INDEX_NONE) , TraversalCost(TNumericLimits<FVector::FReal>::Max()) , TotalCost(TNumericLimits<FVector::FReal>::Max()) , SearchNodeIndex(INDEX_NONE) , ParentNodeIndex(INDEX_NONE) , bIsOpened(false) , bIsClosed(false)"
  },
  {
    "label": "MarkOpened()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkOpened()"
  },
  {
    "label": "MarkNotOpened()",
    "kind": "Method",
    "detail": "Function (bIsOpened = true ; } void)",
    "insertText": "MarkNotOpened()"
  },
  {
    "label": "MarkClosed()",
    "kind": "Method",
    "detail": "Function (bIsOpened = false ; } void)",
    "insertText": "MarkClosed()"
  },
  {
    "label": "MarkNotClosed()",
    "kind": "Method",
    "detail": "Function (bIsClosed = true ; } void)",
    "insertText": "MarkNotClosed()"
  },
  {
    "label": "IsOpened()",
    "kind": "Method",
    "detail": "Function (bIsClosed = false ; } bool)",
    "insertText": "IsOpened()"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (\\ template<TemplateClass> auto)",
    "insertText": "Requires(TemplateClassParameter& Obj) -> decltype(Obj.ConditionalFunctionName())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<TemplateClass> \\)",
    "insertText": "decltype(auto) ConditionalFunctionName(TemplateClassParameter & Obj)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ if)",
    "insertText": "constexpr(TModels_V<CQuery##ConditionalFunctionName, TemplateClass>)"
  },
  {
    "label": "ConditionalFunctionName()",
    "kind": "Method",
    "detail": "Function (\\ return Obj .)",
    "insertText": "ConditionalFunctionName()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else \\ { \\)",
    "insertText": "return(ConditionalReturnType)(DefaultImpl)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION(ConditionalReturnType, ConditionalFunctionName, DefaultImpl ) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_IMPL( TemplateClass, TemplateClass, ConditionalReturnType, ConditionalFunctionName, DefaultImpl ) #define DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CONST( ConditionalReturnType, ConditionalFunctionName, DefaultImpl ) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_IMPL( TemplateClass, const TemplateClass, ConditionalReturnType, ConditionalFunctionName, DefaultImpl ) #define DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_IMPL( TemplateClass, TemplateClassParameter, ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, DefaultImpl)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (\\ template<TemplateClass> auto)",
    "insertText": "Requires(TemplateClassParameter& Obj, ConditionalParamType1 Param1) -> decltype(Obj.ConditionalFunctionName(Param1))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<TemplateClass> \\)",
    "insertText": "decltype(auto) ConditionalFunctionName(TemplateClassParameter & Obj, ConditionalParamType1 Param1)"
  },
  {
    "label": "ConditionalFunctionName()",
    "kind": "Method",
    "detail": "Function (\\ return Obj .)",
    "insertText": "ConditionalFunctionName(Param1)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM(ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, DefaultImpl) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_IMPL( TemplateClass, TemplateClass, ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, DefaultImpl) #define DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_CONST( ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, DefaultImpl) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_IMPL( TemplateClass, const TemplateClass, ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, DefaultImpl) #define DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_IMPL( TemplateClass, TemplateClassParameter, ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, ConditionalParamType2, DefaultImpl)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (\\ template<TemplateClass> auto)",
    "insertText": "Requires(TemplateClassParameter& Obj, ConditionalParamType1 Param1, ConditionalParamType2 Param2) -> decltype(Obj.ConditionalFunctionName(Param1,Param2))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<TemplateClass> \\)",
    "insertText": "decltype(auto) ConditionalFunctionName(TemplateClassParameter & Obj, ConditionalParamType1 Param1, ConditionalParamType2 Param2)"
  },
  {
    "label": "ConditionalFunctionName()",
    "kind": "Method",
    "detail": "Function (\\ return Obj .)",
    "insertText": "ConditionalFunctionName(Param1, Param2)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS(ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, ConditionalParamType2, DefaultImpl) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_IMPL( TemplateClass, TemplateClass, ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, ConditionalParamType2, DefaultImpl) #define DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_CONST( ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, ConditionalParamType2, DefaultImpl) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_IMPL(TemplateClass, const TemplateClass, ConditionalReturnType, ConditionalFunctionName, ConditionalParamType1, ConditionalParamType2, DefaultImpl) #define DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CUSTOM( ConditionalFunctionName, QueryReturnType, QueryFunctionName, QueryParam, QueryDefaultImpl, QueryImpl)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (\\ template<TemplateClass> auto)",
    "insertText": "Requires(const TemplateClass& Obj) -> decltype(Obj.ConditionalFunctionName())"
  },
  {
    "label": "QueryFunctionName()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<TemplateClass> \\ QueryReturnType)",
    "insertText": "QueryFunctionName(const TemplateClass& Obj, QueryParam)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (\\ if)",
    "insertText": "constexpr(TModels_V<CQuery##QueryFunctionName, TemplateClass>)"
  },
  {
    "label": "FNodeSorter()",
    "kind": "Method",
    "detail": "Function (\\ return QueryImpl ; \\ } \\ else \\ { \\ return QueryDefaultImpl ; \\ } \\ } template<bool DoRangeCheck> class FRangeChecklessAllocator : public FDefaultAllocator { public : enum { RequireRangeCheck = DoRangeCheck } ; } ; template<> struct TAllocatorTraits<FRangeChecklessAllocator<true>> : TAllocatorTraits<FDefaultAllocator> { } ; template<> struct TAllocatorTraits<FRangeChecklessAllocator<false>> : TAllocatorTraits<FDefaultAllocator> { } ; template<TGraph,Policy = FGraphAStarDefaultPolicy,TSearchNode = FGraphAStarDefaultNode<TGraph>,bool DoRangeCheck = false> struct FGraphAStar { typedef TGraph::FNodeRef FGraphNodeRef ; typedef TSearchNode FSearchNode ; using FNodeArray = TArray<FSearchNode,FRangeChecklessAllocator<DoRangeCheck>> ; using FRangeChecklessSetAllocator = TSetAllocator<TSparseArrayAllocator<FRangeChecklessAllocator<DoRangeCheck>,TInlineAllocator<4,FRangeChecklessAllocator<DoRangeCheck>>>,TInlineAllocator<1,FRangeChecklessAllocator<DoRangeCheck>>> ; using FNodeMap = TMap<FGraphNodeRef,int32,FRangeChecklessSetAllocator> ; using FIndexArray = TArray<int32,FRangeChecklessAllocator<DoRangeCheck>> ; struct FNodeSorter { const FNodeArray& NodePool ;)",
    "insertText": "FNodeSorter(const FNodeArray& InNodePool) : NodePool(InNodePool)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const int32 A, const int32 B)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(Policy::NodePoolSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (NodeMap .)",
    "insertText": "Reserve(FMath::RoundUpToPowerOfTwo(Policy::NodePoolSize / 4))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FSearchNode&)",
    "insertText": "Add(const FSearchNode& SearchNode)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (FSearchNode& NewNode =)",
    "insertText": "Emplace_GetRef(SearchNode)"
  },
  {
    "label": "UE_PTRDIFF_TO_INT32()",
    "kind": "Method",
    "detail": "Function (NewNode . SearchNodeIndex =)",
    "insertText": "UE_PTRDIFF_TO_INT32(&NewNode - Super::GetData())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodeMap .)",
    "insertText": "Add(SearchNode.NodeRef, NewNode.SearchNodeIndex)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (const int32 NotInMapIndex = - 1 ; int32& Index = NodeMap .)",
    "insertText": "FindOrAdd(NodeRef, NotInMapIndex)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (} FSearchNode& NewNode =)",
    "insertText": "Emplace_GetRef(NodeRef)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Index = NewNode . SearchNodeIndex ; return NewNode ; } FSearchNode*)",
    "insertText": "Find(const FGraphNodeRef NodeRef)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* IndexPtr = NodeMap .)",
    "insertText": "Find(NodeRef)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(Policy::NodePoolSize)"
  },
  {
    "label": "ReinitNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReinitNodes()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Node) FSearchNode(Node.NodeRef)"
  },
  {
    "label": "FOpenList()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FOpenList : FIndexArray { typedef FIndexArray Super ; FNodeArray& NodePool ; const FNodeSorter& NodeSorter ;)",
    "insertText": "FOpenList(FNodeArray& InNodePool, const FNodeSorter& InNodeSorter)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (InNodePool },NodeSorter { InNodeSorter } {)",
    "insertText": "Reserve(Policy::OpenSetSize)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(FSearchNode& SearchNode)"
  },
  {
    "label": "HeapPush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapPush(SearchNode.SearchNodeIndex, NodeSorter)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Modify(FSearchNode& SearchNode)"
  },
  {
    "label": "HeapSiftUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSiftUp(Super::GetData(), 0, UE_PTRDIFF_TO_INT32(&NodeIndex - Super::GetData()), FIdentityFunctor(), NodeSorter)"
  },
  {
    "label": "PopIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PopIndex()"
  },
  {
    "label": "HeapPop()",
    "kind": "Method",
    "detail": "Function (int32 SearchNodeIndex = INDEX_NONE ;)",
    "insertText": "HeapPop(SearchNodeIndex, NodeSorter, EAllowShrinking::No)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_CONST()",
    "kind": "Method",
    "detail": "Function (} } ; const TGraph& Graph ; FNodePool NodePool ; FNodeSorter NodeSorter ; FOpenList OpenList ;)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_CONST(int32, GetNeighbourCount, const FGraphNodeRef, NO_COUNT)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_CONST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_1PARAM_CONST(int32, GetNeighbourCountV2, const FSearchNode&, Obj.GetNeighbourCount(Param1.NodeRef))"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_CONST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_CONST(FGraphNodeRef, GetNeighbour, const FSearchNode&, const int32, Obj.GetNeighbour(Param1.NodeRef,Param2))"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_CONST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_CONST(FVector::FReal, GetTraversalCost, const FSearchNode&, const FSearchNode&, Obj.GetTraversalCost(Param1.NodeRef, Param2.NodeRef)) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS_CONST(FVector::FReal, GetHeuristicCost, const FSearchNode&, const FSearchNode&, Obj.GetHeuristicCost(Param1.NodeRef, Param2.NodeRef)) DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CONST(bool, ShouldIgnoreClosedNodes, false)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CONST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CONST(bool, ShouldIncludeStartNodeInPath, false)"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CONST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CONST(FVector::FReal, GetCostLimit, TNumericLimits<FVector::FReal>::Max())"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CUSTOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CUSTOM(GetMaxSearchNodes, bool, HasReachMaxSearchNodes, uint32 NodeCount, false, NodeCount >= Obj.GetMaxSearchNodes())"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CUSTOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_CUSTOM(GetCostLimit, bool, HasExceededCostLimit, FVector::FReal Cost, false, Cost > Obj.GetCostLimit())"
  },
  {
    "label": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_OPTIONALLY_IMPLEMENTED_TEMPLATE_CLASS_FUNCTION_2PARAMS(FGraphNodeRef, SetPathInfo, const int32, const FSearchNode&, Obj[Param1] = Param2.NodeRef)"
  },
  {
    "label": "FGraphAStar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraphAStar(const TGraph& InGraph)"
  },
  {
    "label": "UE_REAL_TO_FLOAT_CLAMPED_MAX()",
    "kind": "Method",
    "detail": "Function (OutBestNodeCost =)",
    "insertText": "UE_REAL_TO_FLOAT_CLAMPED_MAX(BestNodeCost)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Best node %i (end node %i)\"), ConsideredNodeUnsafe.NodeRef, EndNode.NodeRef)"
  },
  {
    "label": "GetHeuristicScale()",
    "kind": "Method",
    "detail": "Function (OutBestNodeIndex = ConsideredNodeUnsafe . SearchNodeIndex ; OutBestNodeCost = 0 . ; return false ; } const FVector::FReal HeuristicScale = Filter .)",
    "insertText": "GetHeuristicScale()"
  },
  {
    "label": "GetNeighbourCountV2()",
    "kind": "Method",
    "detail": "Function (const int32 NeighbourCount =)",
    "insertText": "GetNeighbourCountV2(Graph, ConsideredNodeUnsafe)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Found %i neighbor\"), NeighbourCount)"
  },
  {
    "label": "GetNeighbour()",
    "kind": "Method",
    "detail": "Function (const auto& NeighbourRef =)",
    "insertText": "GetNeighbour(Graph, NodePool[ConsideredNodeIndex], NeighbourNodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } else { continue ; } })",
    "insertText": "if(NeighbourRef == NodePool[ConsideredNodeIndex].ParentRef || NeighbourRef == NodePool[ConsideredNodeIndex].NodeRef || Filter.IsTraversalAllowed(NodePool[ConsideredNodeIndex].NodeRef, NeighbourRef) == false)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Filtered %lld from %lld\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } FSearchNode* ExistingNeighbourNode = nullptr ;)",
    "insertText": "if(HasReachMaxSearchNodes(Filter, (uint32)NodePool.Num()))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (ExistingNeighbourNode = NodePool .)",
    "insertText": "Find(NeighbourRef)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Reach Limit %lld from %lld\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (continue ; } } FSearchNode& NeighbourNode = ExistingNeighbourNode ?* ExistingNeighbourNode : NodePool .)",
    "insertText": "FindOrAdd(NeighbourRef)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Skipping closed %lld from %lld\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef)"
  },
  {
    "label": "GetTraversalCost()",
    "kind": "Method",
    "detail": "Function (continue ; } const FVector::FReal NewTraversalCost =)",
    "insertText": "GetTraversalCost(Filter, NodePool[ConsideredNodeIndex], NeighbourNode)"
  },
  {
    "label": "bIsBound()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal NewHeuristicCost =)",
    "insertText": "bIsBound(NeighbourNode.NodeRef != EndNode.NodeRef) ? (GetHeuristicCost(Filter, NeighbourNode, EndNode) * HeuristicScale)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal NewTotalCost = NewTraversalCost + NewHeuristicCost ;)",
    "insertText": "if(HasExceededCostLimit(Filter, NewTotalCost))"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Skipping reach cost limit %lld from %lld cost %f total %f prev cost %f limit %f\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef, NewTraversalCost, NewTotalCost, NeighbourNode.TotalCost, GetCostLimit(Filter))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(NewTotalCost >= NeighbourNode.TotalCost)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Skipping new cost higher %lld from %lld cost %f total %f prev cost %f\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef, NewTraversalCost, NewTotalCost, NeighbourNode.TotalCost)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Pushing %lld from %lld cost %f total %f\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef, NewTraversalCost, NewTotalCost)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (OpenList .)",
    "insertText": "Push(NeighbourNode)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" Modifying %lld from %lld cost %f total %f\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef, NewTraversalCost, NewTotalCost)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (OpenList .)",
    "insertText": "Modify(NeighbourNode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NewHeuristicCost < OutBestNodeCost)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" New best path %lld from %lld new best heuristic %f prev best heuristic %f\"), (uint64)NeighbourRef, (uint64)NodePool[ConsideredNodeIndex].NodeRef, NewHeuristicCost, OutBestNodeCost)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (OutBestNodeCost = NewHeuristicCost ; OutBestNodeIndex = NeighbourNode . SearchNodeIndex ; } } return true ; } template<TQueryFilter,TResultPathInfo = TArray<FGraphNodeRef>> EGraphAStarResult)",
    "insertText": "FindPath(const FSearchNode& StartNode, const FSearchNode& EndNode, const TQueryFilter& Filter, TResultPathInfo& OutPath)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\"\"))"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\"Starting FindPath request...\"))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 BestNodeIndex = INDEX_NONE ; FVector::FReal BestNodeCost = TNumericLimits<FVector::FReal)",
    "insertText": "Max()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function ({ FSearchNode& StartPoolNode = NodePool .)",
    "insertText": "Add(StartNode)"
  },
  {
    "label": "GetHeuristicCost()",
    "kind": "Method",
    "detail": "Function (StartPoolNode . TraversalCost = 0 ; StartPoolNode . TotalCost =)",
    "insertText": "GetHeuristicCost(Filter, StartNode, EndNode) * Filter.GetHeuristicScale()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (OpenList .)",
    "insertText": "Push(StartPoolNode)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (BestNodeIndex = StartPoolNode . SearchNodeIndex ; BestNodeCost = StartPoolNode . TotalCost ; } const int32 StartPoolSearchNodeIndex = NodePool [ BestNodeIndex ] . SearchNodeIndex ; const FGraphNodeRef StartPoolNodeRef = NodePool [ BestNodeIndex ] . NodeRef ; EGraphAStarResult Result = EGraphAStarResult::SearchSuccess ; const bool bIsBound = true ; bool bProcessNodes = true ;)",
    "insertText": "while(OpenList.Num() > 0 && bProcessNodes)"
  },
  {
    "label": "ProcessSingleNode()",
    "kind": "Method",
    "detail": "Function (bProcessNodes =)",
    "insertText": "ProcessSingleNode(EndNode, bIsBound, Filter, BestNodeIndex, BestNodeCost)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(BestNodeCost != 0.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result = EGraphAStarResult::GoalUnreachable ; })",
    "insertText": "if(Result == EGraphAStarResult::SearchSuccess || Filter.WantsPartialSolution())"
  },
  {
    "label": "ShouldIncludeStartNodeInPath()",
    "kind": "Method",
    "detail": "Function (int32 SearchNodeIndex = BestNodeIndex ; int32 PathLength =)",
    "insertText": "ShouldIncludeStartNodeInPath(Filter)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Result = EGraphAStarResult::InfiniteLoop ; } OutPath .)",
    "insertText": "Reset(PathLength)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (OutPath .)",
    "insertText": "AddZeroed(PathLength)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\"Storing path result (length=%i)...\"), PathLength)"
  },
  {
    "label": "UE_GRAPH_ASTAR_LOG()",
    "kind": "Method",
    "detail": "Function (SearchNodeIndex = BestNodeIndex ; int32 ResultNodeIndex = PathLength - 1 ; do {)",
    "insertText": "UE_GRAPH_ASTAR_LOG(Display, TEXT(\" NodeRef %i\"), NodePool[SearchNodeIndex].NodeRef)"
  },
  {
    "label": "SetPathInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPathInfo(OutPath, ResultNodeIndex--, NodePool[SearchNodeIndex])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (SearchNodeIndex = NodePool [ SearchNodeIndex ] . ParentNodeIndex ; })",
    "insertText": "while(ResultNodeIndex >= 0)"
  },
  {
    "label": "FloodFrom()",
    "kind": "Method",
    "detail": "Function (} return Result ; } template<TQueryFilter> EGraphAStarResult)",
    "insertText": "FloodFrom(const FSearchNode& StartNode, const TQueryFilter& Filter)"
  },
  {
    "label": "ProcessSingleNode()",
    "kind": "Method",
    "detail": "Function (bProcessNodes =)",
    "insertText": "ProcessSingleNode(FakeEndNode, bIsBound, Filter, BestNodeIndex, BestNodeCost)"
  },
  {
    "label": "HasReachMaxSearchNodes()",
    "kind": "Method",
    "detail": "Function (} return EGraphAStarResult::SearchSuccess ; } template<TQueryFilter> bool)",
    "insertText": "HasReachMaxSearchNodes(const TQueryFilter& Filter)"
  }
]