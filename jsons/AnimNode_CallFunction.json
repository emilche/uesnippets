[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimNode_CallFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_CallFunction"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / AnimNodeFunctionRef . h \" # include \" AnimNode_CallFunction . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (OnInitialize,OnUpdate,OnBecomeRelevant,OnEvaluate,OnInitializePostRecursion)",
    "insertText": "UMETA(DisplayName = \"On Initialize (Post Recursion)\"), OnUpdatePostRecursion UMETA(DisplayName = \"On Update (Post Recursion)\"), OnBecomeRelevantPostRecursion UMETA(DisplayName = \"On Become Relevant (Post Recursion)\"), OnEvaluatePostRecursion UMETA(DisplayName = \"On Evaluate (Post Recursion)\"), OnStartedBlendingOut, OnStartedBlendingIn, OnFinishedBlendingOut UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = Links)"
  },
  {
    "label": "OnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitializeAnimInstance(const FAnimInstanceProxy* InProxy, const UAnimInstance* InAnimInstance)"
  },
  {
    "label": "NeedsOnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsOnInitializeAnimInstance()"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Context)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "CallFunctionFromCallSite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallFunctionFromCallSite(EAnimFunctionCallSite InCallSite, const FAnimationBaseContext& InContext)"
  },
  {
    "label": "GetFunction()",
    "kind": "Method",
    "detail": "Function (const FAnimNodeFunctionRef&)",
    "insertText": "GetFunction()"
  }
]