[
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "FNullPlatformDisplayMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNullPlatformDisplayMetrics"
  },
  {
    "label": "FDisplayMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayMetrics"
  },
  {
    "label": "FNullApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullApplication"
  },
  {
    "label": "FGenericApplicationMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericApplicationMessageHandler"
  },
  {
    "label": "RebuildDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Map . h \" # include \" Math / Vector2D . h \" # include \" Templates / SharedPointer . h \" # include \" Misc / CoreMisc . h \" # include \" Misc / CoreDelegates . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" GenericPlatform / GenericWindowDefinition . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" GenericPlatform / IInputInterface . h \" # include \" Null / NullWindow . h \" # include \" Null / NullCursor . h \" class IInputDevice ; struct FNullPlatformDisplayMetrics : public FDisplayMetrics { void)",
    "insertText": "RebuildDisplayMetrics(struct FDisplayMetrics& OutDisplayMetrics)"
  },
  {
    "label": "CreateNullApplication()",
    "kind": "Method",
    "detail": "Function (} ; class FNullApplication : public GenericApplication,public FSelfRegisteringExec,public IInputInterface { public : FNullApplication*)",
    "insertText": "CreateNullApplication()"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindowTo(FGenericWindow* Window, const int32 X, const int32 Y)"
  },
  {
    "label": "OnSizeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSizeChanged(FGenericWindow* Window, const int32 Width, const int32 Height)"
  },
  {
    "label": "GetFullscreenInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFullscreenInfo(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "ShowWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowWindow(FGenericWindow* Window)"
  },
  {
    "label": "HideWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideWindow(FGenericWindow* Window)"
  },
  {
    "label": "DestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindow(FGenericWindow* Window)"
  },
  {
    "label": "FNullApplication()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FNullApplication()"
  },
  {
    "label": "DestroyApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyApplication()"
  },
  {
    "label": "Exec_Dev()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Dev(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "FindWindowByPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNullWindow>)",
    "insertText": "FindWindowByPtr(FGenericWindow* WindowToFind)"
  },
  {
    "label": "ActivateWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateWindow(const TSharedPtr<FNullWindow>& Window)"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetMessageHandler(const TSharedRef<class FGenericApplicationMessageHandler>& InMessageHandler)"
  },
  {
    "label": "PollGameDeviceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollGameDeviceState(const float TimeDelta)"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages(const float TimeDelta)"
  },
  {
    "label": "ProcessDeferredEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredEvents(const float TimeDelta)"
  },
  {
    "label": "MakeWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGenericWindow>)",
    "insertText": "MakeWindow()"
  },
  {
    "label": "InitializeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWindow(const TSharedRef<FGenericWindow>& Window, const TSharedRef<FGenericWindowDefinition>& InDefinition, const TSharedPtr<FGenericWindow>& InParent, const bool bShowImmediately)"
  },
  {
    "label": "DestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindow(TSharedRef<FNullWindow> WindowToRemove)"
  },
  {
    "label": "SetCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCapture(const TSharedPtr<FGenericWindow>& InWindow)"
  },
  {
    "label": "GetCapture()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCapture(void)"
  },
  {
    "label": "SetHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPrecisionMouseMode(const bool Enable, const TSharedPtr<FGenericWindow>& InWindow)"
  },
  {
    "label": "IsUsingHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingHighPrecisionMouseMode()"
  },
  {
    "label": "GetModifierKeys()",
    "kind": "Method",
    "detail": "Function (FModifierKeysState)",
    "insertText": "GetModifierKeys()"
  },
  {
    "label": "GetWorkArea()",
    "kind": "Method",
    "detail": "Function (FPlatformRect)",
    "insertText": "GetWorkArea(const FPlatformRect& CurrentWindow)"
  },
  {
    "label": "SetWorkArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorkArea(const FPlatformRect& NewWorkArea)"
  },
  {
    "label": "GetWindowTransparencySupport()",
    "kind": "Method",
    "detail": "Function (EWindowTransparency)",
    "insertText": "GetWindowTransparencySupport()"
  },
  {
    "label": "GetWindowUnderCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericWindow>)",
    "insertText": "GetWindowUnderCursor()"
  },
  {
    "label": "IsMouseAttached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMouseAttached()"
  },
  {
    "label": "HandleCursorCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCursorCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleWindowCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleWindowCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "ParseResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseResolution(const TCHAR* InResolution, uint32& OutX, uint32& OutY)"
  },
  {
    "label": "GetInputInterface()",
    "kind": "Method",
    "detail": "Function (public : IInputInterface*)",
    "insertText": "GetInputInterface()"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues& Values)"
  },
  {
    "label": "SetHapticFeedbackValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHapticFeedbackValues(int32 ControllerId, int32 Hand, const FHapticFeedbackValues& Values)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightColor(int32 ControllerId, FColor Color)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  }
]