[
  {
    "label": "Unwinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Unwinder"
  },
  {
    "label": "ModuleCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleCache"
  },
  {
    "label": "ProfileBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProfileBuilder"
  },
  {
    "label": "StackBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackBuffer"
  },
  {
    "label": "StackSamplerTestDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackSamplerTestDelegate"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Unwinder()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_STACK_SAMPLER_H_ # define BASE_PROFILER_STACK_SAMPLER_H_ # include<memory> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / containers / circular_deque . h \" # include \" base / memory / raw_ptr . h \" # include \" base / profiler / frame . h \" # include \" base / profiler / register_context . h \" # include \" base / profiler / sampling_profiler_thread_token . h \" # include \" base / profiler / stack_copier . h \" # include \" base / profiler / stack_sampler . h \" # include \" base / threading / platform_thread . h \" # include \" build / build_config . h \" namespace base { class Unwinder ; class ModuleCache ; class ProfileBuilder ; class StackBuffer ; class StackSamplerTestDelegate ; class BASE_EXPORT StackSampler { public : using UnwindersFactory = OnceCallback<std::vector<std::unique_ptr<)",
    "insertText": "Unwinder()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StackSampler>)",
    "insertText": "Create(SamplingProfilerThreadToken thread_token, ModuleCache* module_cache, UnwindersFactory core_unwinders_factory, RepeatingClosure record_sample_callback, StackSamplerTestDelegate* test_delegate)"
  },
  {
    "label": "StackSampler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StackSampler()"
  },
  {
    "label": "StackSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackSampler(const StackSampler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StackSampler&)",
    "insertText": "operator(const StackSampler&)"
  },
  {
    "label": "GetStackBufferSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetStackBufferSize()"
  },
  {
    "label": "CreateStackBuffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StackBuffer>)",
    "insertText": "CreateStackBuffer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "AddAuxUnwinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAuxUnwinder(std::unique_ptr<Unwinder> unwinder)"
  },
  {
    "label": "RecordStackFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStackFrames(StackBuffer* stack_buffer, ProfileBuilder* profile_builder, PlatformThreadId thread_id)"
  },
  {
    "label": "WalkStackForTesting()",
    "kind": "Method",
    "detail": "Function (std::vector<Frame>)",
    "insertText": "WalkStackForTesting(ModuleCache* module_cache, RegisterContext* thread_context, uintptr_t stack_top, const base::circular_deque<std::unique_ptr<Unwinder>>& unwinders)"
  },
  {
    "label": "CreateForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StackSampler>)",
    "insertText": "CreateForTesting(std::unique_ptr<StackCopier> stack_copier, UnwindersFactory core_unwinders_factory, ModuleCache* module_cache, RepeatingClosure record_sample_callback = RepeatingClosure(), StackSamplerTestDelegate* test_delegate = nullptr)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS)"
  },
  {
    "label": "StackSampler()",
    "kind": "Method",
    "detail": "Function (# endif private :)",
    "insertText": "StackSampler(std::unique_ptr<StackCopier> stack_copier, UnwindersFactory core_unwinders_factory, ModuleCache* module_cache, RepeatingClosure record_sample_callback, StackSamplerTestDelegate* test_delegate)"
  },
  {
    "label": "WalkStack()",
    "kind": "Method",
    "detail": "Function (std::vector<Frame>)",
    "insertText": "WalkStack(ModuleCache* module_cache, RegisterContext* thread_context, uintptr_t stack_top, const base::circular_deque<std::unique_ptr<Unwinder>>& unwinders)"
  },
  {
    "label": "StackSamplerTestDelegate()",
    "kind": "Method",
    "detail": "Function (# endif bool was_initialized_ = false ; } ; class BASE_EXPORT StackSamplerTestDelegate { public :)",
    "insertText": "StackSamplerTestDelegate(const StackSamplerTestDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StackSamplerTestDelegate&)",
    "insertText": "operator(const StackSamplerTestDelegate&)"
  },
  {
    "label": "StackSamplerTestDelegate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StackSamplerTestDelegate()"
  },
  {
    "label": "OnPreStackWalk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreStackWalk()"
  }
]