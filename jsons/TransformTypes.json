[
  {
    "label": "TTransformSRT3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTransformSRT3"
  },
  {
    "label": "TTransformSRT3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VectorTypes . h \" # include \" Quaternion . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TTransformSRT3 { protected : TQuaternion<RealType> Rotation ; TVector<RealType> Translation ; TVector<RealType> Scale3D ; public :)",
    "insertText": "TTransformSRT3()"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (Rotation = TQuaternion<RealType)",
    "insertText": "Identity()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (Translation = TVector<RealType)",
    "insertText": "Zero()"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (Scale3D = TVector<RealType)",
    "insertText": "One()"
  },
  {
    "label": "TTransformSRT3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransformSRT3(const TQuaternion<RealType>& RotationIn, const UE::Math::TVector<RealType>& TranslationIn, const UE::Math::TVector<RealType>& ScaleIn)"
  },
  {
    "label": "TTransformSRT3()",
    "kind": "Method",
    "detail": "Function (Rotation = RotationIn ; Translation = TranslationIn ; Scale3D = ScaleIn ; })",
    "insertText": "TTransformSRT3(const TQuaternion<RealType>& RotationIn, const UE::Math::TVector<RealType>& TranslationIn)"
  },
  {
    "label": "TTransformSRT3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransformSRT3(const UE::Math::TVector<RealType>& TranslationIn)"
  },
  {
    "label": "TTransformSRT3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransformSRT3(const FTransform3f& Transform)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Rotation = TQuaternion<)",
    "insertText": "RealType(Transform.GetRotation())"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Translation = TVector<)",
    "insertText": "RealType(Transform.GetTranslation())"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Scale3D = TVector<)",
    "insertText": "RealType(Transform.GetScale3D())"
  },
  {
    "label": "TTransformSRT3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransformSRT3(const FTransform3d& Transform)"
  },
  {
    "label": "FTransform3f()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FTransform3f()"
  },
  {
    "label": "FTransform3d()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FTransform3d()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (} const TQuaternion<RealType>&)",
    "insertText": "GetRotation()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotation(const TQuaternion<RealType>& RotationIn)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (Rotation = RotationIn ; } const TVector<RealType>&)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (Translation = TranslationIn ; } const TVector<RealType>&)",
    "insertText": "GetScale()"
  },
  {
    "label": "GetDeterminant()",
    "kind": "Method",
    "detail": "Function (Scale3D = ScaleIn ; } RealType)",
    "insertText": "GetDeterminant()"
  },
  {
    "label": "InverseUnsafe()",
    "kind": "Method",
    "detail": "Function (} TTransformSRT3<RealType>)",
    "insertText": "InverseUnsafe(RealType Tolerance = TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (TQuaternion<RealType> InvRotation = Rotation .)",
    "insertText": "Inverse()"
  },
  {
    "label": "GetSafeScaleReciprocal()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> InvScale3D =)",
    "insertText": "GetSafeScaleReciprocal(Scale3D, Tolerance)"
  },
  {
    "label": "InvRotation()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> InvTranslation =)",
    "insertText": "InvRotation(InvScale3D * -Translation)"
  },
  {
    "label": "CanRepresentInverse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRepresentInverse(RealType Tolerance = TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (} template<RealType2> TVector<RealType2>)",
    "insertText": "TransformPosition(const TVector<RealType2>& P)"
  },
  {
    "label": "RealType2()",
    "kind": "Method",
    "detail": "Function (} else { return TVector<)",
    "insertText": "RealType2(TransformPosition(TVector<RealType>(P)))"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2> TVector<RealType2>)",
    "insertText": "TransformVector(const UE::Math::TVector<RealType2>& V)"
  },
  {
    "label": "RealType2()",
    "kind": "Method",
    "detail": "Function (} else { return TVector<)",
    "insertText": "RealType2(TransformVector(TVector<RealType>(V)))"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2> TVector<RealType2>)",
    "insertText": "TransformVectorNoScale(const UE::Math::TVector<RealType2>& V)"
  },
  {
    "label": "TransformNormal()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2> TVector<RealType2>)",
    "insertText": "TransformNormal(const UE::Math::TVector<RealType2>& Normal)"
  },
  {
    "label": "SignNonZero()",
    "kind": "Method",
    "detail": "Function (const TVector<RealType>& S = Scale3D ; RealType DetSign =)",
    "insertText": "SignNonZero(S.X * S.Y * S.Z)"
  },
  {
    "label": "SafeInvS()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "SafeInvS(S.Y*S.Z*DetSign, S.X*S.Z*DetSign, S.X*S.Y*DetSign)"
  },
  {
    "label": "RealType2()",
    "kind": "Method",
    "detail": "Function (} else { return TVector<)",
    "insertText": "RealType2(TransformNormal(TVector<RealType>(Normal)))"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2> TVector<RealType2>)",
    "insertText": "InverseTransformPosition(const UE::Math::TVector<RealType2>& P)"
  },
  {
    "label": "RealType2()",
    "kind": "Method",
    "detail": "Function (} else { return TVector<)",
    "insertText": "RealType2(InverseTransformPosition(TVector<RealType>(P)))"
  },
  {
    "label": "InverseTransformVector()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2> TVector<RealType2>)",
    "insertText": "InverseTransformVector(const UE::Math::TVector<RealType2>& V)"
  },
  {
    "label": "RealType2()",
    "kind": "Method",
    "detail": "Function (} else { return TVector<)",
    "insertText": "RealType2(InverseTransformVector(TVector<RealType>(V)))"
  },
  {
    "label": "InverseTransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2> TVector<RealType2>)",
    "insertText": "InverseTransformVectorNoScale(const UE::Math::TVector<RealType2>& V)"
  },
  {
    "label": "RealType2()",
    "kind": "Method",
    "detail": "Function (} else { return TVector<)",
    "insertText": "RealType2(InverseTransformVectorNoScale(TVector<RealType>(V)))"
  },
  {
    "label": "InverseTransformNormal()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2> TVector<RealType2>)",
    "insertText": "InverseTransformNormal(const UE::Math::TVector<RealType2>& Normal)"
  },
  {
    "label": "RealType2()",
    "kind": "Method",
    "detail": "Function (} else { return TVector<)",
    "insertText": "RealType2(InverseTransformNormal(TVector<RealType>(Normal)))"
  },
  {
    "label": "TransformRay()",
    "kind": "Method",
    "detail": "Function (} } UE::Math::TRay<RealType>)",
    "insertText": "TransformRay(const UE::Math::TRay<RealType> &Ray)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Origin =)",
    "insertText": "TransformPosition(Ray.Origin)"
  },
  {
    "label": "Normalized()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Direction =)",
    "insertText": "Normalized(TransformVector(Ray.Direction))"
  },
  {
    "label": "InverseTransformRay()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TRay<RealType>)",
    "insertText": "InverseTransformRay(const UE::Math::TRay<RealType> &Ray)"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> InvOrigin =)",
    "insertText": "InverseTransformPosition(Ray.Origin)"
  },
  {
    "label": "Normalized()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> InvDirection =)",
    "insertText": "Normalized(InverseTransformVector(Ray.Direction))"
  },
  {
    "label": "ClampMinimumScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClampMinimumScale(RealType MinimumScale = TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealType Value = Scale3D [ j ] ;)",
    "insertText": "if(TMathUtil<RealType>::Abs(Value) < MinimumScale)"
  },
  {
    "label": "SignNonZero()",
    "kind": "Method",
    "detail": "Function (Value = MinimumScale* TMathUtil<RealType)",
    "insertText": "SignNonZero(Value)"
  },
  {
    "label": "GetSafeScaleReciprocal()",
    "kind": "Method",
    "detail": "Function (Scale3D [ j ] = Value ; } } } TVector<RealType>)",
    "insertText": "GetSafeScaleReciprocal(const TVector<RealType>& InScale, RealType Tolerance = TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> SafeReciprocalScale ;)",
    "insertText": "if(TMathUtil<RealType>::Abs(InScale.X) <= Tolerance)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (SafeReciprocalScale .)",
    "insertText": "X(RealType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TMathUtil<RealType>::Abs(InScale.Y) <= Tolerance)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (SafeReciprocalScale .)",
    "insertText": "Y(RealType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TMathUtil<RealType>::Abs(InScale.Z) <= Tolerance)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (SafeReciprocalScale .)",
    "insertText": "Z(RealType)"
  }
]