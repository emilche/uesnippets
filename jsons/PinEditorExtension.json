[
  {
    "label": "FMovieSceneEditorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEditorData"
  },
  {
    "label": "FSequencerEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditorViewModel"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "FPinEditorExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPinEditorExtension"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / Extensions / DynamicExtensionContainer . h \" struct FMovieSceneEditorData ; namespace UE::Sequencer { class FSequencerEditorViewModel ; class IOutlinerExtension ; class FPinEditorExtension : public IDynamicExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FPinEditorExtension) FPinEditorExtension()"
  },
  {
    "label": "OnCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreated(TSharedRef<FViewModel> InWeakOwner)"
  },
  {
    "label": "IsNodePinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodePinned(TWeakViewModelPtr<IOutlinerExtension> InWeakOutlinerExtension)"
  },
  {
    "label": "IsNodePinnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodePinnable(TWeakViewModelPtr<IOutlinerExtension> InWeakOutlinerExtension)"
  },
  {
    "label": "SetNodePinned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodePinned(TWeakViewModelPtr<IOutlinerExtension> InWeakOutlinerExtension, const bool bInIsPinned)"
  },
  {
    "label": "PinItem()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PinItem(FMovieSceneEditorData& InEditorData, TSharedPtr<FViewModel> InItem, const bool bInIsPinned)"
  }
]