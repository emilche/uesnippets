[
  {
    "label": "MockPeerConnectionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockPeerConnectionObserver"
  },
  {
    "label": "AddTrackEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddTrackEvent"
  },
  {
    "label": "MockCreateSessionDescriptionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockCreateSessionDescriptionObserver"
  },
  {
    "label": "MockSetSessionDescriptionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockSetSessionDescriptionObserver"
  },
  {
    "label": "FakeSetLocalDescriptionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeSetLocalDescriptionObserver"
  },
  {
    "label": "FakeSetRemoteDescriptionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeSetRemoteDescriptionObserver"
  },
  {
    "label": "MockDataChannelObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockDataChannelObserver"
  },
  {
    "label": "Message",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Message"
  },
  {
    "label": "MockStatsObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockStatsObserver"
  },
  {
    "label": "MockRTCStatsCollectorCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockRTCStatsCollectorCallback"
  },
  {
    "label": "AddTrackEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_MOCK_PEER_CONNECTION_OBSERVERS_H_ # define PC_TEST_MOCK_PEER_CONNECTION_OBSERVERS_H_ # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" api / data_channel_interface . h \" # include \" api / jsep_ice_candidate . h \" # include \" pc / stream_collection . h \" # include \" rtc_base / checks . h \" namespace webrtc { class MockPeerConnectionObserver : public PeerConnectionObserver { public : struct AddTrackEvent {)",
    "insertText": "AddTrackEvent(rtc::scoped_refptr<RtpReceiverInterface> event_receiver, std::vector<rtc::scoped_refptr<MediaStreamInterface>> event_streams) : receiver(std::move(event_receiver)), streams(std::move(event_streams))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<MediaStreamTrackInterface>> tracks ;)",
    "insertText": "for(auto audio_track : stream->GetAudioTracks())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tracks .)",
    "insertText": "push_back(audio_track)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto video_track : stream->GetVideoTracks())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tracks .)",
    "insertText": "push_back(video_track)"
  },
  {
    "label": "MockPeerConnectionObserver()",
    "kind": "Method",
    "detail": "Function (} snapshotted_stream_tracks [ stream ] = tracks ; } } rtc::scoped_refptr<RtpReceiverInterface> receiver ; std::vector<rtc::scoped_refptr<MediaStreamInterface>> streams ; std::map<rtc::scoped_refptr<MediaStreamInterface>,std::vector<rtc::scoped_refptr<MediaStreamTrackInterface>>> snapshotted_stream_tracks ; } ;)",
    "insertText": "MockPeerConnectionObserver() : remote_streams_(StreamCollection::Create())"
  },
  {
    "label": "MockPeerConnectionObserver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MockPeerConnectionObserver()"
  },
  {
    "label": "SetPeerConnectionInterface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPeerConnectionInterface(PeerConnectionInterface* pc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pc_ = pc ;)",
    "insertText": "if(pc)"
  },
  {
    "label": "signaling_state()",
    "kind": "Method",
    "detail": "Function (state_ = pc_ ->)",
    "insertText": "signaling_state()"
  },
  {
    "label": "OnSignalingChange()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnSignalingChange(PeerConnectionInterface::SignalingState new_state)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(pc_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(pc_->signaling_state() == new_state)"
  },
  {
    "label": "RemoteStream()",
    "kind": "Method",
    "detail": "Function (state_ = new_state ; } MediaStreamInterface*)",
    "insertText": "RemoteStream(const std::string& label)"
  },
  {
    "label": "remote_streams()",
    "kind": "Method",
    "detail": "Function (} StreamCollectionInterface*)",
    "insertText": "remote_streams()"
  },
  {
    "label": "OnAddStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAddStream(rtc::scoped_refptr<MediaStreamInterface> stream)"
  },
  {
    "label": "AddStream()",
    "kind": "Method",
    "detail": "Function (last_added_stream_ = stream ; remote_streams_ ->)",
    "insertText": "AddStream(stream)"
  },
  {
    "label": "OnRemoveStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveStream(rtc::scoped_refptr<MediaStreamInterface> stream)"
  },
  {
    "label": "RemoveStream()",
    "kind": "Method",
    "detail": "Function (last_removed_stream_ = stream ; remote_streams_ ->)",
    "insertText": "RemoveStream(stream.get())"
  },
  {
    "label": "OnRenegotiationNeeded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRenegotiationNeeded()"
  },
  {
    "label": "OnNegotiationNeededEvent()",
    "kind": "Method",
    "detail": "Function (renegotiation_needed_ = true ; } void)",
    "insertText": "OnNegotiationNeededEvent(uint32_t event_id)"
  },
  {
    "label": "OnDataChannel()",
    "kind": "Method",
    "detail": "Function (latest_negotiation_needed_event_ = event_id ; } void)",
    "insertText": "OnDataChannel(rtc::scoped_refptr<DataChannelInterface> data_channel)"
  },
  {
    "label": "OnIceConnectionChange()",
    "kind": "Method",
    "detail": "Function (last_datachannel_ = data_channel ; } void)",
    "insertText": "OnIceConnectionChange(PeerConnectionInterface::IceConnectionState new_state)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(pc_->ice_connection_state() == new_state)"
  },
  {
    "label": "ice_connected_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ice_connected_(new_state == PeerConnectionInterface::kIceConnectionConnected) || (new_state == PeerConnectionInterface::kIceConnectionCompleted)"
  },
  {
    "label": "OnIceGatheringChange()",
    "kind": "Method",
    "detail": "Function (callback_triggered_ = true ; } void)",
    "insertText": "OnIceGatheringChange(PeerConnectionInterface::IceGatheringState new_state)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(pc_->ice_gathering_state() == new_state)"
  },
  {
    "label": "OnIceCandidate()",
    "kind": "Method",
    "detail": "Function (ice_gathering_complete_ = new_state = = PeerConnectionInterface::kIceGatheringComplete ; callback_triggered_ = true ; } void)",
    "insertText": "OnIceCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (candidates_ .)",
    "insertText": "push_back(std::make_unique<JsepIceCandidate>( candidate->sdp_mid(), candidate->sdp_mline_index(), candidate->candidate()))"
  },
  {
    "label": "OnIceCandidatesRemoved()",
    "kind": "Method",
    "detail": "Function (callback_triggered_ = true ; } void)",
    "insertText": "OnIceCandidatesRemoved(const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "OnIceConnectionReceivingChange()",
    "kind": "Method",
    "detail": "Function (num_candidates_removed_ + + ; callback_triggered_ = true ; } void)",
    "insertText": "OnIceConnectionReceivingChange(bool receiving)"
  },
  {
    "label": "OnAddTrack()",
    "kind": "Method",
    "detail": "Function (callback_triggered_ = true ; } void)",
    "insertText": "OnAddTrack(rtc::scoped_refptr<RtpReceiverInterface> receiver, const std::vector<rtc::scoped_refptr<MediaStreamInterface>>& streams)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(receiver)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (num_added_tracks_ + + ; last_added_track_label_ = receiver ->)",
    "insertText": "id()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (add_track_events_ .)",
    "insertText": "push_back(AddTrackEvent(receiver, streams))"
  },
  {
    "label": "OnTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTrack(rtc::scoped_refptr<RtpTransceiverInterface> transceiver)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (on_track_transceivers_ .)",
    "insertText": "push_back(transceiver)"
  },
  {
    "label": "OnRemoveTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveTrack(rtc::scoped_refptr<RtpReceiverInterface> receiver)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (remove_track_events_ .)",
    "insertText": "push_back(receiver)"
  },
  {
    "label": "GetAddTrackReceivers()",
    "kind": "Method",
    "detail": "Function (} std::vector<rtc::scoped_refptr<RtpReceiverInterface>>)",
    "insertText": "GetAddTrackReceivers()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpReceiverInterface>> receivers ;)",
    "insertText": "for(const AddTrackEvent& event : add_track_events_)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (receivers .)",
    "insertText": "push_back(event.receiver)"
  },
  {
    "label": "CountAddTrackEventsForStream()",
    "kind": "Method",
    "detail": "Function (} return receivers ; } int)",
    "insertText": "CountAddTrackEventsForStream(const std::string& stream_id)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool has_stream_id = false ;)",
    "insertText": "for(auto stream : event.streams)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (has_stream_id = true ; break ; } })",
    "insertText": "if(has_stream_id)"
  },
  {
    "label": "GetLastAddedStreamId()",
    "kind": "Method",
    "detail": "Function (+ + found_tracks ; } } return found_tracks ; } std::string)",
    "insertText": "GetLastAddedStreamId()"
  },
  {
    "label": "GetAllCandidates()",
    "kind": "Method",
    "detail": "Function (} } std::vector<const IceCandidateInterface*>)",
    "insertText": "GetAllCandidates()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<const IceCandidateInterface*> candidates ;)",
    "insertText": "for(const auto& candidate : candidates_)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (candidates .)",
    "insertText": "push_back(candidate.get())"
  },
  {
    "label": "GetCandidatesByMline()",
    "kind": "Method",
    "detail": "Function (} return candidates ; } std::vector<IceCandidateInterface*>)",
    "insertText": "GetCandidatesByMline(int mline_index)"
  },
  {
    "label": "legacy_renegotiation_needed()",
    "kind": "Method",
    "detail": "Function (} } return candidates ; } bool)",
    "insertText": "legacy_renegotiation_needed()"
  },
  {
    "label": "has_negotiation_needed_event()",
    "kind": "Method",
    "detail": "Function (renegotiation_needed_ = false ; } bool)",
    "insertText": "has_negotiation_needed_event()"
  },
  {
    "label": "latest_negotiation_needed_event()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "latest_negotiation_needed_event()"
  },
  {
    "label": "clear_latest_negotiation_needed_event()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear_latest_negotiation_needed_event()"
  },
  {
    "label": "MockCreateSessionDescriptionObserver()",
    "kind": "Method",
    "detail": "Function (latest_negotiation_needed_event_ = absl::nullopt ; } rtc::scoped_refptr<PeerConnectionInterface> pc_ ; PeerConnectionInterface::SignalingState state_ ; std::vector<std::unique_ptr<IceCandidateInterface>> candidates_ ; rtc::scoped_refptr<DataChannelInterface> last_datachannel_ ; rtc::scoped_refptr<StreamCollection> remote_streams_ ; bool renegotiation_needed_ = false ; absl::optional<uint32_t> latest_negotiation_needed_event_ ; bool ice_gathering_complete_ = false ; bool ice_connected_ = false ; bool callback_triggered_ = false ; int num_added_tracks_ = 0 ; std::string last_added_track_label_ ; std::vector<AddTrackEvent> add_track_events_ ; std::vector<rtc::scoped_refptr<RtpReceiverInterface>> remove_track_events_ ; std::vector<rtc::scoped_refptr<RtpTransceiverInterface>> on_track_transceivers_ ; int num_candidates_removed_ = 0 ; private : rtc::scoped_refptr<MediaStreamInterface> last_added_stream_ ; rtc::scoped_refptr<MediaStreamInterface> last_removed_stream_ ; } ; class MockCreateSessionDescriptionObserver : public webrtc::CreateSessionDescriptionObserver { public :)",
    "insertText": "MockCreateSessionDescriptionObserver() : called_(false), error_(\"MockCreateSessionDescriptionObserver not called\")"
  },
  {
    "label": "MockCreateSessionDescriptionObserver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MockCreateSessionDescriptionObserver()"
  },
  {
    "label": "OnSuccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSuccess(SessionDescriptionInterface* desc)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (called_ = true ; error_ = \" \" ; desc_ .)",
    "insertText": "reset(desc)"
  },
  {
    "label": "OnFailure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFailure(webrtc::RTCError error)"
  },
  {
    "label": "message()",
    "kind": "Method",
    "detail": "Function (called_ = true ; error_ = error .)",
    "insertText": "message()"
  },
  {
    "label": "called()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "called()"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "error()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : Mutex mutex_ ; bool called_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class MockSetSessionDescriptionObserver : public webrtc::SetSessionDescriptionObserver { public : rtc::scoped_refptr<MockSetSessionDescriptionObserver>)",
    "insertText": "Create()"
  },
  {
    "label": "MockSetSessionDescriptionObserver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MockSetSessionDescriptionObserver() : called_(false), error_(\"MockSetSessionDescriptionObserver not called\")"
  },
  {
    "label": "MockSetSessionDescriptionObserver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MockSetSessionDescriptionObserver()"
  },
  {
    "label": "OnSuccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSuccess()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(error_.has_value())"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (error_ =)",
    "insertText": "move(error)"
  },
  {
    "label": "MockDataChannelObserver()",
    "kind": "Method",
    "detail": "Function (} private : absl::optional<RTCError> error_ ; } ; class MockDataChannelObserver : public webrtc::DataChannelObserver { public : struct Message { std::string data ; bool binary ; } ;)",
    "insertText": "MockDataChannelObserver(webrtc::DataChannelInterface* channel) : channel_(channel)"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (channel_ ->)",
    "insertText": "RegisterObserver(this)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (states_ .)",
    "insertText": "push_back(channel_->state())"
  },
  {
    "label": "MockDataChannelObserver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MockDataChannelObserver()"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (channel_ ->)",
    "insertText": "UnregisterObserver()"
  },
  {
    "label": "OnBufferedAmountChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBufferedAmountChange(uint64_t previous_amount)"
  },
  {
    "label": "OnStateChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStateChange()"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMessage(const DataBuffer& buffer)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (messages_ .)",
    "insertText": "push_back({std::string(buffer.data.data<char>(), buffer.data.size()), buffer.binary})"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "messages()",
    "kind": "Method",
    "detail": "Function (} std::vector<Message>)",
    "insertText": "messages()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} ; return messages_ .)",
    "insertText": "back()"
  },
  {
    "label": "last_message_is_binary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "last_message_is_binary()"
  },
  {
    "label": "received_message_count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "received_message_count()"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (} DataChannelInterface::DataState)",
    "insertText": "state()"
  },
  {
    "label": "states()",
    "kind": "Method",
    "detail": "Function (} const std::vector<DataChannelInterface::DataState>&)",
    "insertText": "states()"
  },
  {
    "label": "MockStatsObserver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MockStatsObserver()"
  },
  {
    "label": "OnComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnComplete(const StatsReports& reports)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(!called_)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (called_ = true ; stats_ .)",
    "insertText": "Clear()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (stats_ . number_of_reports = reports .)",
    "insertText": "size()"
  },
  {
    "label": "timestamp()",
    "kind": "Method",
    "detail": "Function (stats_ . timestamp = r ->)",
    "insertText": "timestamp()"
  },
  {
    "label": "GetIntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIntValue(r, StatsReport::kStatsValueNameAudioOutputLevel, &stats_.audio_output_level)"
  },
  {
    "label": "GetIntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIntValue(r, StatsReport::kStatsValueNameAudioInputLevel, &stats_.audio_input_level)"
  },
  {
    "label": "GetIntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIntValue(r, StatsReport::kStatsValueNameBytesReceived, &stats_.bytes_received)"
  },
  {
    "label": "GetIntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIntValue(r, StatsReport::kStatsValueNameBytesSent, &stats_.bytes_sent)"
  },
  {
    "label": "GetInt64Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInt64Value(r, StatsReport::kStatsValueNameCaptureStartNtpTimeMs, &stats_.capture_start_ntp_time)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (stats_ . track_ids .)",
    "insertText": "emplace_back()"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStringValue(r, StatsReport::kStatsValueNameTrackId, &stats_.track_ids.back())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(r->type() == StatsReport::kStatsReportTypeBwe)"
  },
  {
    "label": "GetIntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIntValue(r, StatsReport::kStatsValueNameAvailableReceiveBandwidth, &stats_.available_receive_bandwidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(r->type() == StatsReport::kStatsReportTypeComponent)"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStringValue(r, StatsReport::kStatsValueNameDtlsCipher, &stats_.dtls_cipher)"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStringValue(r, StatsReport::kStatsValueNameSrtpCipher, &stats_.srtp_cipher)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(called_)"
  },
  {
    "label": "FindValue()",
    "kind": "Method",
    "detail": "Function (const StatsReport::Value* v = report ->)",
    "insertText": "FindValue(name)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (* value = rtc::FromString<)",
    "insertText": "int(v->ToString())"
  },
  {
    "label": "GetInt64Value()",
    "kind": "Method",
    "detail": "Function (} return v ! = nullptr ; } bool)",
    "insertText": "GetInt64Value(const StatsReport* report, StatsReport::StatsValueName name, int64_t* value)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (* value = rtc::FromString<)",
    "insertText": "int64_t(v->ToString())"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (} return v ! = nullptr ; } bool)",
    "insertText": "GetStringValue(const StatsReport* report, StatsReport::StatsValueName name, std::string* value)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (number_of_reports = 0 ; timestamp = 0 ; audio_output_level = 0 ; audio_input_level = 0 ; bytes_received = 0 ; bytes_sent = 0 ; capture_start_ntp_time = 0 ; available_receive_bandwidth = 0 ; dtls_cipher .)",
    "insertText": "clear()"
  },
  {
    "label": "report()",
    "kind": "Method",
    "detail": "Function (} size_t number_of_reports ; double timestamp ; int audio_output_level ; int audio_input_level ; int bytes_received ; int bytes_sent ; int64_t capture_start_ntp_time ; int available_receive_bandwidth ; std::string dtls_cipher ; std::string srtp_cipher ; std::vector<std::string> track_ids ; } stats_ ; } ; class MockRTCStatsCollectorCallback : public webrtc::RTCStatsCollectorCallback { public : rtc::scoped_refptr<const RTCStatsReport>)",
    "insertText": "report()"
  }
]