[
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "DxilSignatureElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignatureElement"
  },
  {
    "label": "DxilSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignature"
  },
  {
    "label": "DxilSignatureElement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilCompType . h \" # include \" dxc / DXIL / DxilInterpolationMode . h \" # include \" dxc / DXIL / DxilSemantic . h \" # include \" llvm / ADT / StringRef . h \" # include<limits . h> # include<string> # include<vector> namespace hlsl { class ShaderModel ; class DxilSignatureElement { class DxilSignature ; public : using Kind = DXIL::SigPointKind ; const unsigned kUndefinedID = UINT_MAX ;)",
    "insertText": "DxilSignatureElement(Kind K)"
  },
  {
    "label": "DxilSignatureElement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DxilSignatureElement()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(llvm::StringRef Name, const CompType &ElementType, const InterpolationMode &InterpMode, unsigned Rows, unsigned Cols, int StartRow = Semantic::kUndefinedRow, int StartCol = Semantic::kUndefinedCol, unsigned ID = kUndefinedID, const std::vector<unsigned> &IndexVector = std::vector<unsigned>())"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetID()"
  },
  {
    "label": "SetID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetID(unsigned ID)"
  },
  {
    "label": "GetShaderKind()",
    "kind": "Method",
    "detail": "Function (DXIL::ShaderKind)",
    "insertText": "GetShaderKind()"
  },
  {
    "label": "GetSigPointKind()",
    "kind": "Method",
    "detail": "Function (DXIL::SigPointKind)",
    "insertText": "GetSigPointKind()"
  },
  {
    "label": "SetSigPointKind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSigPointKind(DXIL::SigPointKind K)"
  },
  {
    "label": "IsInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInput()"
  },
  {
    "label": "IsOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutput()"
  },
  {
    "label": "IsPatchConstOrPrim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPatchConstOrPrim()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetRows()"
  },
  {
    "label": "SetRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRows(unsigned Rows)"
  },
  {
    "label": "GetCols()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetCols()"
  },
  {
    "label": "SetCols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCols(unsigned Cols)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (const InterpolationMode*)",
    "insertText": "GetInterpolationMode()"
  },
  {
    "label": "GetCompType()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "GetCompType()"
  },
  {
    "label": "GetOutputStream()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetOutputStream()"
  },
  {
    "label": "SetOutputStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputStream(unsigned Stream)"
  },
  {
    "label": "GetSemantic()",
    "kind": "Method",
    "detail": "Function (const Semantic*)",
    "insertText": "GetSemantic()"
  },
  {
    "label": "SetKind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKind(Semantic::Kind kind)"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (Semantic::Kind)",
    "insertText": "GetKind()"
  },
  {
    "label": "IsArbitrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArbitrary()"
  },
  {
    "label": "IsDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDepth()"
  },
  {
    "label": "IsDepthLE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDepthLE()"
  },
  {
    "label": "IsDepthGE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDepthGE()"
  },
  {
    "label": "IsAnyDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyDepth()"
  },
  {
    "label": "GetInterpretation()",
    "kind": "Method",
    "detail": "Function (DXIL::SemanticInterpretationKind)",
    "insertText": "GetInterpretation()"
  },
  {
    "label": "GetSemanticName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetSemanticName()"
  },
  {
    "label": "GetSemanticStartIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetSemanticStartIndex()"
  },
  {
    "label": "GetStartRow()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStartRow()"
  },
  {
    "label": "SetStartRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartRow(int StartRow)"
  },
  {
    "label": "GetStartCol()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStartCol()"
  },
  {
    "label": "SetStartCol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartCol(int Component)"
  },
  {
    "label": "GetSemanticIndexVec()",
    "kind": "Method",
    "detail": "Function (const std::vector<unsigned>&)",
    "insertText": "GetSemanticIndexVec()"
  },
  {
    "label": "SetSemanticIndexVec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSemanticIndexVec(const std::vector<unsigned> &Vec)"
  },
  {
    "label": "AppendSemanticIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSemanticIndex(unsigned SemIdx)"
  },
  {
    "label": "SetCompType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompType(CompType CT)"
  },
  {
    "label": "GetColsAsMask()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetColsAsMask()"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllocated()"
  },
  {
    "label": "GetDynIdxCompMask()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetDynIdxCompMask()"
  },
  {
    "label": "SetDynIdxCompMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynIdxCompMask(unsigned DynIdxCompMask)"
  },
  {
    "label": "GetUsageMask()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetUsageMask()"
  },
  {
    "label": "SetUsageMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUsageMask(unsigned UsageMask)"
  }
]