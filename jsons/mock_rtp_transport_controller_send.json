[
  {
    "label": "MockRtpTransportControllerSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockRtpTransportControllerSend"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_TEST_MOCK_RTP_TRANSPORT_CONTROLLER_SEND_H_ # define CALL_TEST_MOCK_RTP_TRANSPORT_CONTROLLER_SEND_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / crypto / crypto_options . h \" # include \" api / crypto / frame_encryptor_interface . h \" # include \" api / frame_transformer_interface . h \" # include \" api / transport / bitrate_settings . h \" # include \" call / rtp_transport_controller_send_interface . h \" # include \" modules / pacing / packet_router . h \" # include \" rtc_base / network / sent_packet . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / rate_limiter . h \" # include \" test / gmock . h \" namespace webrtc { class MockRtpTransportControllerSend : public RtpTransportControllerSendInterface { public :)",
    "insertText": "MOCK_METHOD(RtpVideoSenderInterface*, CreateRtpVideoSender, ((const std::map<uint32_t, RtpState>&), (const std::map<uint32_t, RtpPayloadState>&), const RtpConfig&, int rtcp_report_interval_ms, Transport*, const RtpSenderObservers&, RtcEventLog*, std::unique_ptr<FecController>, const RtpSenderFrameEncryptionConfig&, rtc::scoped_refptr<FrameTransformerInterface>), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, DestroyRtpVideoSender, (RtpVideoSenderInterface*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(MaybeWorkerThread*, GetWorkerQueue, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(PacketRouter*, packet_router, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(NetworkStateEstimateObserver*, network_state_estimate_observer, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(TransportFeedbackObserver*, transport_feedback_observer, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(RtpPacketSender*, packet_sender, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetAllocatedSendBitrateLimits, (BitrateAllocationLimits), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetPacingFactor, (float), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetQueueTimeLimit, (int), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(StreamFeedbackProvider*, GetStreamFeedbackProvider, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, RegisterTargetTransferRateObserver, (TargetTransferRateObserver*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnNetworkRouteChanged, (absl::string_view, const rtc::NetworkRoute&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnNetworkAvailability, (bool), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(RtcpBandwidthObserver*, GetBandwidthObserver, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int64_t, GetPacerQueuingDelayMs, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(absl::optional<Timestamp>, GetFirstPacketTime, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, EnablePeriodicAlrProbing, (bool), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnSentPacket, (const rtc::SentPacket&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetSdpBitrateParameters, (const BitrateConstraints&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetClientBitratePreferences, (const BitrateSettings&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnTransportOverheadChanged, (size_t), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, AccountForAudioPacketsInPacedSender, (bool), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, IncludeOverheadInPacedSender, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnReceivedPacket, (const ReceivedPacket&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, EnsureStarted, (), (override))"
  }
]