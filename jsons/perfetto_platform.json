[
  {
    "label": "DeferredSequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeferredSequencedTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PerfettoPlatform()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACING_PERFETTO_PLATFORM_H_ # define BASE_TRACING_PERFETTO_PLATFORM_H_ # include \" third_party / perfetto / include / perfetto / tracing / platform . h \" # include \" base / base_export . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / threading / thread_local_storage . h \" namespace base { class DeferredSequencedTaskRunner ; namespace tracing { class BASE_EXPORT PerfettoPlatform : public perfetto::Platform { public : enum class TaskRunnerType { kBuiltin,kThreadPool,} ;)",
    "insertText": "PerfettoPlatform(TaskRunnerType = TaskRunnerType::kThreadPool)"
  },
  {
    "label": "PerfettoPlatform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PerfettoPlatform()"
  },
  {
    "label": "task_runner()",
    "kind": "Method",
    "detail": "Function (SequencedTaskRunner*)",
    "insertText": "task_runner()"
  },
  {
    "label": "did_start_task_runner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "did_start_task_runner()"
  },
  {
    "label": "GetOrCreateThreadLocalObject()",
    "kind": "Method",
    "detail": "Function (ThreadLocalObject*)",
    "insertText": "GetOrCreateThreadLocalObject()"
  },
  {
    "label": "CreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<perfetto::base::TaskRunner>)",
    "insertText": "CreateTaskRunner(const CreateTaskRunnerArgs&)"
  },
  {
    "label": "GetCurrentProcessName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetCurrentProcessName()"
  }
]