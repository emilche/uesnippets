[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "VREDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VREDITOR_API"
  },
  {
    "label": "UViewportWorldInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportWorldInteraction"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UVREditorUISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorUISystem"
  },
  {
    "label": "UVREditorInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorInteractor"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FSavedEditorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavedEditorState"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "UVREditorAssetContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorAssetContainer"
  },
  {
    "label": "AVREditorTeleporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorTeleporter"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "AVREditorAvatarActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorAvatarActor"
  },
  {
    "label": "USpotLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpotLightComponent"
  },
  {
    "label": "UVREditorAutoScaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorAutoScaler"
  },
  {
    "label": "UVREditorPlacement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorPlacement"
  },
  {
    "label": "EColors",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EColors"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FVREditorFloatingUICreationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVREditorFloatingUICreationContext"
  },
  {
    "label": "Touch()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" Editor / UnrealEdTypes . h \" # include \" EditorWorldExtension . h \" # include \" ShowFlags . h \" # include \" Misc / App . h \" # include \" Widgets / SWindow . h \" # include \" HeadMountedDisplayTypes . h \" # include \" UI / VRRadialMenuHandler . h \" # include \" VREditorModeBase . h \" # include \" VREditorMode . generated . h \" class AActor ; class FEditorViewportClient ; class SLevelViewport ; enum class EAutoChangeMode : uint8 ; class UStaticMesh ; class UStaticMeshComponent ; class USoundBase ; class UMaterialInterface ; enum class EGizmoHandleTypes : uint8 ; namespace VRActionTypes { const FName)",
    "insertText": "Touch(\"Touch\")"
  },
  {
    "label": "Modifier()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Modifier(\"Modifier\")"
  },
  {
    "label": "Modifier2()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Modifier2(\"Modifier2\")"
  },
  {
    "label": "ConfirmRadialSelection()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "ConfirmRadialSelection(\"ConfirmRadialSelection\")"
  },
  {
    "label": "TrackpadPositionX()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TrackpadPositionX(\"TrackpadPosition_X\")"
  },
  {
    "label": "TrackpadPositionY()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TrackpadPositionY(\"TrackpadPosition_Y\")"
  },
  {
    "label": "TrackpadUp()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TrackpadUp(\"TrackpadUp\")"
  },
  {
    "label": "TrackpadDown()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TrackpadDown(\"TrackpadDown\")"
  },
  {
    "label": "TrackpadRight()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TrackpadRight(\"TrackpadRight\")"
  },
  {
    "label": "TrackpadLeft()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TrackpadLeft(\"TrackpadLeft\")"
  },
  {
    "label": "TriggerAxis()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "TriggerAxis(\"TriggerAxis\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UCLASS(Abstract, Transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UVREditorMode()"
  },
  {
    "label": "SetHMDDeviceTypeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHMDDeviceTypeOverride(FName InOverrideType)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "TransitionWorld()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TransitionWorld(UWorld* NewWorld, EEditorWorldExtensionTransitionState TransitionState)"
  },
  {
    "label": "NeedsSyntheticDpad()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "NeedsSyntheticDpad()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit(bool bShouldDisableStereo)"
  },
  {
    "label": "PreTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreTick(const float DeltaTime)"
  },
  {
    "label": "PostTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTick(const float DeltaTime)"
  },
  {
    "label": "WantsToExitMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsToExitMode()"
  },
  {
    "label": "StartExitingVRMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartExitingVRMode()"
  },
  {
    "label": "GetLaserForHand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLaserForHand(EControllerHand InHand, FVector& OutLaserStart, FVector& OutLaserEnd)"
  },
  {
    "label": "GetRoomTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetRoomTransform()"
  },
  {
    "label": "SetRoomTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRoomTransform(const FTransform& NewRoomTransform)"
  },
  {
    "label": "GetRoomSpaceHeadTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetRoomSpaceHeadTransform()"
  },
  {
    "label": "GetHeadTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetHeadTransform()"
  },
  {
    "label": "GetWorldInteraction()",
    "kind": "Method",
    "detail": "Function (const class UViewportWorldInteraction&)",
    "insertText": "GetWorldInteraction()"
  },
  {
    "label": "IsFullyInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyInitialized()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UVREditorMode, FOnVRTickHandle, const float)"
  },
  {
    "label": "OnTickHandle()",
    "kind": "Method",
    "detail": "Function (FOnVRTickHandle&)",
    "insertText": "OnTickHandle()"
  },
  {
    "label": "OvershootEaseOut()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "OvershootEaseOut(T Alpha, const float OvershootAmount = 1.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Alpha - - ; return 1 . 0)",
    "insertText": "f(( Alpha * ( ( OvershootAmount + 1 ) * Alpha + OvershootAmount ) + 1 ) - 1.0f)"
  },
  {
    "label": "GetUISystem()",
    "kind": "Method",
    "detail": "Function (} const class UVREditorUISystem&)",
    "insertText": "GetUISystem()"
  },
  {
    "label": "ToggleFlashlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFlashlight(class UVREditorInteractor* Interactor)"
  },
  {
    "label": "CycleTransformGizmoHandleType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleTransformGizmoHandleType()"
  },
  {
    "label": "GetCurrentGizmoType()",
    "kind": "Method",
    "detail": "Function (EGizmoHandleTypes)",
    "insertText": "GetCurrentGizmoType()"
  },
  {
    "label": "GetHMDDeviceType()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetHMDDeviceType()"
  },
  {
    "label": "IsHandAimingTowardsCapsule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHandAimingTowardsCapsule(class UViewportInteractor* Interactor, const FTransform& CapsuleTransform, const FVector CapsuleStart, const FVector CapsuleEnd, const float CapsuleRadius, const float MinDistanceToCapsule, const FVector CapsuleFrontDirection, const float MinDotForAimingAtCapsule)"
  },
  {
    "label": "GetHandInteractor()",
    "kind": "Method",
    "detail": "Function (class UVREditorInteractor*)",
    "insertText": "GetHandInteractor(const EControllerHand ControllerHand)"
  },
  {
    "label": "SnapSelectedActorsToGround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapSelectedActorsToGround()"
  },
  {
    "label": "CreateSavedState()",
    "kind": "Method",
    "detail": "Function (struct FSavedEditorState : public FBaseSavedEditorState { float DragTriggerDistance = 0 . 0 f ; float TransformGizmoScale = 1 . 0 f ; bool bKeyAllEnabled = false ; EAutoChangeMode AutoChangeMode ; } ; TSharedRef<FBaseSavedEditorState>)",
    "insertText": "CreateSavedState()"
  },
  {
    "label": "GetSavedEditorState()",
    "kind": "Method",
    "detail": "Function (} const FSavedEditorState&)",
    "insertText": "GetSavedEditorState()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnVREditingModeExit)"
  },
  {
    "label": "SaveSequencerSettings()",
    "kind": "Method",
    "detail": "Function (FOnVREditingModeExit OnVREditingModeExit_Handler ; void)",
    "insertText": "SaveSequencerSettings(bool bInKeyAllEnabled, EAutoChangeMode InAutoChangeMode, const class USequencerSettings& InSequencerSettings)"
  },
  {
    "label": "CreateMotionControllerMesh()",
    "kind": "Method",
    "detail": "Function (UStaticMeshComponent*)",
    "insertText": "CreateMotionControllerMesh(AActor* OwningActor, USceneComponent* AttachmentToComponent, UStaticMesh* OptionalControllerMesh = nullptr)"
  },
  {
    "label": "CreateMesh()",
    "kind": "Method",
    "detail": "Function (UStaticMeshComponent*)",
    "insertText": "CreateMesh(AActor* OwningActor, const FString& MeshName, USceneComponent* AttachmentToComponent)"
  },
  {
    "label": "CreateMesh()",
    "kind": "Method",
    "detail": "Function (UStaticMeshComponent*)",
    "insertText": "CreateMesh(AActor* OwningActor, UStaticMesh* Mesh, USceneComponent* AttachmentToComponent)"
  },
  {
    "label": "GetAssetContainer()",
    "kind": "Method",
    "detail": "Function (const class UVREditorAssetContainer&)",
    "insertText": "GetAssetContainer()"
  },
  {
    "label": "LoadAssetContainer()",
    "kind": "Method",
    "detail": "Function (class UVREditorAssetContainer&)",
    "insertText": "LoadAssetContainer()"
  },
  {
    "label": "PlaySound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySound(USoundBase* SoundBase, const FVector& InWorldLocation, const float InVolume = 1.0f)"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(UVREditorPlacement, FOnPlaceDraggedMaterial, UPrimitiveComponent*, UMaterialInterface*, bool&)"
  },
  {
    "label": "OnPlaceDraggedMaterial()",
    "kind": "Method",
    "detail": "Function (FOnPlaceDraggedMaterial&)",
    "insertText": "OnPlaceDraggedMaterial()"
  },
  {
    "label": "OnPlacePreviewActor()",
    "kind": "Method",
    "detail": "Function (FOnPlacePreviewActor&)",
    "insertText": "OnPlacePreviewActor()"
  },
  {
    "label": "IsTeleporting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTeleporting()"
  },
  {
    "label": "ToggleDebugMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDebugMode()"
  },
  {
    "label": "IsDebugModeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugModeEnabled()"
  },
  {
    "label": "GetTeleportActor()",
    "kind": "Method",
    "detail": "Function (class AVREditorTeleporter*)",
    "insertText": "GetTeleportActor()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UVREditorMode, FOnToggleVRModeDebug, bool)"
  },
  {
    "label": "OnToggleDebugMode()",
    "kind": "Method",
    "detail": "Function (FOnToggleVRModeDebug&)",
    "insertText": "OnToggleDebugMode()"
  },
  {
    "label": "OnVREditorWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVREditorWindowClosed(const TSharedRef<SWindow>& ClosedWindow)"
  },
  {
    "label": "RestoreWorldToMeters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreWorldToMeters()"
  },
  {
    "label": "BeginEntry()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BeginEntry()"
  },
  {
    "label": "SetupSubsystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSubsystems()"
  },
  {
    "label": "FinishEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishEntry()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (public : enum EColors { DefaultColor,SelectionColor,WorldDraggingColor,UIColor,UISelectionBarColor,UISelectionBarHoverColor,UICloseButtonColor,UICloseButtonHoverColor,TotalCount } ; FLinearColor)",
    "insertText": "GetColor(const EColors Color)"
  },
  {
    "label": "GetDefaultVRNearClipPlane()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDefaultVRNearClipPlane()"
  },
  {
    "label": "RefreshVREditorSequencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshVREditorSequencer(class ISequencer* InCurrentSequencer)"
  },
  {
    "label": "RefreshActorPreviewWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshActorPreviewWidget(TSharedRef<SWidget> InWidget, int32 Index, AActor *Actor, bool bIsPanelDetached = false)"
  },
  {
    "label": "UpdateExternalUMGUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExternalUMGUI(const struct FVREditorFloatingUICreationContext& CreationContext)"
  },
  {
    "label": "UpdateExternalSlateUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExternalSlateUI(TSharedRef<SWidget> InWidget, FName Name, FVector2D InSize)"
  },
  {
    "label": "GetCurrentSequencer()",
    "kind": "Method",
    "detail": "Function (class ISequencer*)",
    "insertText": "GetCurrentSequencer()"
  }
]