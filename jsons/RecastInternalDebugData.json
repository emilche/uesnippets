[
  {
    "label": "FRecastInternalDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastInternalDebugData"
  },
  {
    "label": "FRecastInternalDebugData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" NavMesh / RecastHelpers . h \" # if WITH_RECAST # include \" DebugUtils / DebugDraw . h \" struct FRecastInternalDebugData : public duDebugDraw { duDebugDrawPrimitives CurrentPrim = DU_DRAW_POINTS ; int32 FirstVertexIndex = 0 ; TArray<uint32> TriangleIndices ; TArray<FVector> TriangleVertices ; TArray<FColor> TriangleColors ; TArray<FVector> LineVertices ; TArray<FColor> LineColors ; TArray<FVector> PointVertices ; TArray<FColor> PointColors ; TArray<FVector> LabelVertices ; TArray<FString> Labels ; double BuildTime = 0 . ; double BuildCompressedLayerTime = 0 . ; double BuildNavigationDataTime = 0 . ; double BuildLinkTime = 0 ; uint32 TriangleCount = 0 ; unsigned char Resolution = 0 ;)",
    "insertText": "FRecastInternalDebugData()"
  },
  {
    "label": "depthMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "depthMask(bool state)"
  },
  {
    "label": "texture()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "texture(bool state)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "begin(duDebugDrawPrimitives prim, float size = 1.0f)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (CurrentPrim = prim ; FirstVertexIndex = TriangleVertices .)",
    "insertText": "Num()"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vertex(const FVector::FReal* pos, unsigned int color)"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vertex(pos[0], pos[1], pos[2], color, 0.0f, 0.0f)"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vertex(const FVector::FReal x, const FVector::FReal y, const FVector::FReal z, unsigned int color)"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vertex(x, y, z, color, 0.0f, 0.0f)"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vertex(const FVector::FReal* pos, unsigned int color, const FVector::FReal* uv)"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vertex(pos[0], pos[1], pos[2], color, uv[0], uv[1])"
  },
  {
    "label": "vertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vertex(const FVector::FReal x, const FVector::FReal y, const FVector::FReal z, unsigned int color, const FVector::FReal u, const FVector::FReal v)"
  },
  {
    "label": "text()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "text(const FVector::FReal x, const FVector::FReal y, const FVector::FReal z, const char* text)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "end()"
  }
]