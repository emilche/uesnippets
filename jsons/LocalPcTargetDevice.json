[
  {
    "label": "FLocalPcTargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalPcTargetDevice"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "FLocalPcTargetDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" HAL / FileManager . h \" # include \" HAL / PlatformProcess . h \" # include \" Interfaces / ITargetDevice . h \" # include \" Interfaces / ITargetPlatformControls . h \" # include \" Windows / AllowWindowsPlatformTypes . h \" # include<TlHelp32 . h> class FLocalPcTargetDevice : public ITargetDevice { public :)",
    "insertText": "FLocalPcTargetDevice(const ITargetPlatformControls& InTargetPlatform ) : TargetPlatformControls(InTargetPlatform)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Connect()"
  },
  {
    "label": "GetDeviceType()",
    "kind": "Method",
    "detail": "Function (} ETargetDeviceTypes)",
    "insertText": "GetDeviceType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetOperatingSystemName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetOperatingSystemName()"
  },
  {
    "label": "GetProcessSnapshot()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetProcessSnapshot(TArray<FTargetDeviceProcessInfo>& OutProcessInfos)"
  },
  {
    "label": "CreateToolhelp32Snapshot()",
    "kind": "Method",
    "detail": "Function (HANDLE ProcessSnapshot)",
    "insertText": "CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (PROCESSENTRY32 ProcessEntry ; ProcessEntry . dwSize =)",
    "insertText": "sizeof(PROCESSENTRY32)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FTargetDeviceProcessInfo ProcessInfo ; ProcessInfo . Id = ProcessEntry . th32ProcessID ; ProcessInfo . Name = ProcessEntry . szExeFile ; ProcessInfo . ParentId = ProcessEntry . th32ParentProcessID ; ProcessInfo . UserName =)",
    "insertText": "TEXT(\"-\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HANDLE TokenHandle ;)",
    "insertText": "if(::OpenProcessToken(ProcessHandle, TOKEN_QUERY, &TokenHandle))"
  },
  {
    "label": "GetTokenInformation()",
    "kind": "Method",
    "detail": "Function (DWORD UserTokenSize)",
    "insertText": "GetTokenInformation(TokenHandle, TokenUser, NULL, 0, &UserTokenSize)"
  },
  {
    "label": "PTOKEN_USER()",
    "kind": "Method",
    "detail": "Function (PTOKEN_USER UserToken = reinterpret_cast<)",
    "insertText": "PTOKEN_USER(new BYTE[UserTokenSize])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WCHAR DomainName [ 2 5 6 ] ; DWORD DomainNameLength = 2 5 6 ; WCHAR UserName [ 2 5 6 ] ; DWORD UserNameLength = 2 5 6 ; SID_NAME_USE SidType ;)",
    "insertText": "if(::LookupAccountSid(NULL, UserToken->User.Sid, UserName, &UserNameLength, DomainName, &DomainNameLength, &SidType))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ProcessInfo . UserName = UserName ; } else { ProcessInfo . UserName =)",
    "insertText": "TEXT(\"SYSTEM\")"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (} } } else { DWORD LastError)",
    "insertText": "GetLastError()"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CloseHandle(TokenHandle)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(ProcessHandle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutProcessInfos .)",
    "insertText": "Add(ProcessInfo)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(::Process32Next(ProcessSnapshot, &ProcessEntry))"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(ProcessSnapshot)"
  },
  {
    "label": "CreateToolhelp32Snapshot()",
    "kind": "Method",
    "detail": "Function (} HANDLE ThreadSnapshot)",
    "insertText": "CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (THREADENTRY32 ThreadEntry ; ThreadEntry . dwSize =)",
    "insertText": "sizeof(THREADENTRY32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTargetDeviceProcessInfo& ProcessInfo = OutProcessInfos [ ProcessInfoIndex ] ;)",
    "insertText": "if(ProcessInfo.Id == ThreadEntry.th32OwnerProcessID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FTargetDeviceThreadInfo ThreadInfo ; ThreadInfo . ExitCode = 0 ; ThreadInfo . Id = ThreadEntry . th32ThreadID ; ThreadInfo . StackSize = 0 ; ThreadInfo . State = ETargetDeviceThreadStates::Unknown ; ThreadInfo . WaitState = ETargetDeviceThreadWaitStates::Unknown ; ProcessInfo . Threads .)",
    "insertText": "Add(ThreadInfo)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "while(::Thread32Next(ThreadSnapshot, &ThreadEntry))"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(ThreadSnapshot)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } return OutProcessInfos .)",
    "insertText": "Num()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (} const class ITargetPlatformSettings&)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "GetPlatformControls()",
    "kind": "Method",
    "detail": "Function (} const class ITargetPlatformControls&)",
    "insertText": "GetPlatformControls()"
  },
  {
    "label": "PowerOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PowerOn()"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsFeature(ETargetDeviceFeatures Feature)"
  },
  {
    "label": "GetUserCredentials()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetUserCredentials(FString& OutUserName, FString& OutUserPassword)"
  },
  {
    "label": "OpenProcess()",
    "kind": "Method",
    "detail": "Function (HANDLE ProcessHandle =)",
    "insertText": "OpenProcess(PROCESS_TERMINATE, false, (DWORD)ProcessId)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Result(::TerminateProcess(ProcessHandle, 0) != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HANDLE TokenHandle ; TOKEN_PRIVILEGES Token ;)",
    "insertText": "if(!::OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &TokenHandle))"
  }
]