[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_It",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_It"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_COUNTED_H # define _LIBCPP___RANGES_COUNTED_H # include<__concepts / convertible_to . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / counted_iterator . h> # include<__iterator / default_sentinel . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<__memory / pointer_traits . h> # include<__ranges / subrange . h> # include<__utility / forward . h> # include<__utility / move . h> # include<span> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (namespace __counted { struct __fn { template<contiguous_iterator _It> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__go(_It __it, iter_difference_t<_It> __count) noexcept(noexcept(span(std::to_address(__it), static_cast<size_t>(__count))))"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (} template<random_access_iterator _It> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__go(_It __it, iter_difference_t<_It> __count) noexcept(noexcept(subrange(__it, __it + __count))) -> decltype( subrange(__it, __it + __count))"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (} template<class _It> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__go(_It __it, iter_difference_t<_It> __count) noexcept(noexcept(subrange(counted_iterator(std::move(__it), __count), default_sentinel))) -> decltype( subrange(counted_iterator(std::move(__it), __count), default_sentinel))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _It,convertible_to<iter_difference_t<_It>> _Diff> requires input_or_output_iterator<decay_t<_It>> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_It&& __it, _Diff&& __count) const noexcept(noexcept(__go(std::forward<_It>(__it), std::forward<_Diff>(__count)))) -> decltype( __go(std::forward<_It>(__it), std::forward<_Diff>(__count)))"
  }
]