[
  {
    "label": "FAudioCaptureAndroidStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioCaptureAndroidStream"
  },
  {
    "label": "FAudioCaptureAndroidStream()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioCaptureCore . h \" # include \" oboe / Oboe . h \" namespace Audio { class FAudioCaptureAndroidStream : public IAudioCaptureStream,public oboe::AudioStreamCallback { public :)",
    "insertText": "FAudioCaptureAndroidStream()"
  },
  {
    "label": "GetCaptureDeviceInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCaptureDeviceInfo(FCaptureDeviceInfo& OutInfo, int32 DeviceIndex)"
  },
  {
    "label": "OpenAudioCaptureStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenAudioCaptureStream(const FAudioCaptureDeviceParams& InParams, FOnAudioCaptureFunction InOnCapture, uint32 NumFramesDesired)"
  },
  {
    "label": "CloseStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseStream()"
  },
  {
    "label": "StartStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartStream()"
  },
  {
    "label": "StopStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopStream()"
  },
  {
    "label": "AbortStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbortStream()"
  },
  {
    "label": "GetStreamTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStreamTime(double& OutStreamTime)"
  },
  {
    "label": "GetSampleRate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSampleRate()"
  },
  {
    "label": "IsCapturing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCapturing()"
  },
  {
    "label": "OnAudioCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioCapture(void* InBuffer, uint32 InBufferFrames, double StreamTime, bool bOverflow)"
  },
  {
    "label": "GetInputDevicesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInputDevicesAvailable(TArray<FCaptureDeviceInfo>& OutDevices)"
  },
  {
    "label": "onAudioReady()",
    "kind": "Method",
    "detail": "Function (oboe::DataCallbackResult)",
    "insertText": "onAudioReady(oboe::AudioStream *oboeStream, void *audioData, int32 numFrames)"
  }
]