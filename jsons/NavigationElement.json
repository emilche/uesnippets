[
  {
    "label": "INavRelevantInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavRelevantInterface"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "FNavigationRelevantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantData"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNavigationElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElementHandle"
  },
  {
    "label": "FNavigationDirtyElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyElement"
  },
  {
    "label": "FPrivateToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateToken"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" UObject / WeakObjectPtr . h \" class INavRelevantInterface ; class UBodySetup ; class UObject ; struct FNavigationElement ; struct FNavigationRelevantData ; struct FNavigableGeometryExport ; enum class ENavDataGatheringMode : uint8 ; namespace EHasCustomNavigableGeometry { enum Type : int ; })",
    "insertText": "DECLARE_DELEGATE_TwoParams(FNavigationDataExport, const FNavigationElement&, FNavigationRelevantData&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FCustomGeometryExport, const FNavigationElement&, FNavigableGeometryExport&, bool&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FGeometrySliceExport, const FNavigationElement&, FNavigableGeometryExport&, const FBox&)"
  },
  {
    "label": "FNavigationElementHandle()",
    "kind": "Method",
    "detail": "Function (struct FNavigationElementHandle { const FNavigationElementHandle Invalid ;)",
    "insertText": "FNavigationElementHandle()"
  },
  {
    "label": "FNavigationElementHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationElementHandle(const UObject* Object, const uint64 SubElementId = INDEX_NONE)"
  },
  {
    "label": "FNavigationElementHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationElementHandle(const TWeakObjectPtr<const UObject>& WeakObject, const uint64 SubElementId = INDEX_NONE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FNavigationElementHandle& Other)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FNavigationElementHandle& Handle)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(const FNavigationElementHandle& Handle)"
  },
  {
    "label": "FPrivateToken()",
    "kind": "Method",
    "detail": "Function (private : TWeakObjectPtr<const UObject> OwnerUObject ; uint64 SubElementId = INDEX_NONE ; } ; struct FNavigationElement : TSharedFromThis<FNavigationElement> { private : struct FNavigationDirtyElement ; struct FPrivateToken {)",
    "insertText": "FPrivateToken()"
  },
  {
    "label": "MakeFromUObject_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<FNavigationElement>)",
    "insertText": "MakeFromUObject_DEPRECATED(UObject* InOwner)"
  },
  {
    "label": "FNavigationElement()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FNavigationElement(FPrivateToken, const UObject* Object, uint64 SubElementId)"
  },
  {
    "label": "FNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationElement()"
  },
  {
    "label": "FNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationElement(const UObject& Object, uint64 SubElementId = INDEX_NONE)"
  },
  {
    "label": "FNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationElement(const INavRelevantInterface& NavRelevant, uint64 SubElementId = INDEX_NONE)"
  },
  {
    "label": "CreateFromNavRelevantInterface()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<const FNavigationElement>)",
    "insertText": "CreateFromNavRelevantInterface(const INavRelevantInterface& NavRelevantInterface)"
  },
  {
    "label": "GetWeakUObject()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<const UObject>)",
    "insertText": "GetWeakUObject()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (FNavigationElementHandle)",
    "insertText": "GetHandle()"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetTransform()"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FTransform& InGeometryTransform)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBounds()"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBounds(const FBox& InBounds)"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "SetBodySetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBodySetup(UBodySetup* InBodySetup)"
  },
  {
    "label": "GetNavigationParent()",
    "kind": "Method",
    "detail": "Function (const TWeakObjectPtr<const UObject>&)",
    "insertText": "GetNavigationParent()"
  },
  {
    "label": "SetNavigationParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationParent(const UObject* InNavigationParent)"
  },
  {
    "label": "GetGeometryExportType()",
    "kind": "Method",
    "detail": "Function (EHasCustomNavigableGeometry::Type)",
    "insertText": "GetGeometryExportType()"
  },
  {
    "label": "SetGeometryExportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometryExportType(const EHasCustomNavigableGeometry::Type InCustomNavigableGeometry)"
  },
  {
    "label": "GetGeometryGatheringMode()",
    "kind": "Method",
    "detail": "Function (ENavDataGatheringMode)",
    "insertText": "GetGeometryGatheringMode()"
  },
  {
    "label": "SetGeometryGatheringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometryGatheringMode(const ENavDataGatheringMode InGeometryGatheringMode)"
  },
  {
    "label": "GetDirtyAreaOnRegistration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDirtyAreaOnRegistration()"
  },
  {
    "label": "SetDirtyAreaOnRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirtyAreaOnRegistration(const bool bInDirtyAreaOnRegistration)"
  },
  {
    "label": "IsInBaseNavigationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInBaseNavigationData()"
  },
  {
    "label": "IsFromLevelVisibilityChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFromLevelVisibilityChange()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPathName()"
  },
  {
    "label": "GetFullName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullName()"
  },
  {
    "label": "GetNameSafe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNameSafe(const FNavigationElement* Element)"
  },
  {
    "label": "GetPathNameSafe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPathNameSafe(const FNavigationElement* Element)"
  },
  {
    "label": "GetFullNameSafe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullNameSafe(const FNavigationElement* Element)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FNavigationElement& Element)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(const FNavigationElement& Element)"
  },
  {
    "label": "FNavigationElement()",
    "kind": "Method",
    "detail": "Function (FNavigationDataExport NavigationDataExportDelegate ; FCustomGeometryExport CustomGeometryExportDelegate ; FGeometrySliceExport GeometrySliceExportDelegate ; private :)",
    "insertText": "FNavigationElement(const UObject& Object, uint64 SubElementId, bool bTryInitializeFromInterface)"
  },
  {
    "label": "InitializeFromInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromInterface(const INavRelevantInterface* NavRelevantInterface)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<const UObject> OwnerUObject ; uint64 SubElementId = INDEX_NONE ; TWeakObjectPtr<UBodySetup> BodySetup = nullptr ; FTransform GeometryTransform = FTransform::Identity ; FBox Bounds ; TWeakObjectPtr<const UObject> NavigationParent = nullptr ; EHasCustomNavigableGeometry::Type GeometryExportType ; ENavDataGatheringMode GeometryGatheringMode ; bool bDirtyAreaOnRegistration = true ; bool bIsInBaseNavigationData = false ; bool bIsFromLevelVisibilityChange = false ; } ; uint32)",
    "insertText": "GetTypeHash(const FNavigationElementHandle& Key)"
  },
  {
    "label": "FNavigationElementHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationElementHandle(const UObject* Object, const uint64 SubElementId ) : OwnerUObject(Object) , SubElementId(SubElementId)"
  },
  {
    "label": "FNavigationElementHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationElementHandle(const TWeakObjectPtr<const UObject>& WeakObject, const uint64 SubElementId ) : OwnerUObject(WeakObject) , SubElementId(SubElementId)"
  }
]