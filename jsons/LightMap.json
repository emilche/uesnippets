[
  {
    "label": "FLightMap2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMap2D"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FQuantizedLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightmapData"
  },
  {
    "label": "UVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVirtualTexture"
  },
  {
    "label": "FShadowMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapData2D"
  },
  {
    "label": "FFourDistanceFieldSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFourDistanceFieldSamples"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "FLightMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMap"
  },
  {
    "label": "FLightSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightSample"
  },
  {
    "label": "FLightMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMapData2D"
  },
  {
    "label": "FLightMap2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMap2D"
  },
  {
    "label": "FLightMapPendingTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightMapPendingTexture"
  },
  {
    "label": "FLegacyQuantizedDirectionalLightSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyQuantizedDirectionalLightSample"
  },
  {
    "label": "FLegacyQuantizedSimpleLightSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyQuantizedSimpleLightSample"
  },
  {
    "label": "FQuantizedDirectionalLightSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedDirectionalLightSample"
  },
  {
    "label": "FQuantizedSimpleLightSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedSimpleLightSample"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "QuantizedLightSampleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QuantizedLightSampleType"
  },
  {
    "label": "TQuantizedLightSampleBulkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TQuantizedLightSampleBulkData"
  },
  {
    "label": "FLegacyLightMap1D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyLightMap1D"
  },
  {
    "label": "FSelectedLightmapSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedLightmapSample"
  },
  {
    "label": "FDebugShadowRay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugShadowRay"
  },
  {
    "label": "FLightMapCoefficients",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightMapCoefficients"
  },
  {
    "label": "FQuantizedLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightmapData"
  },
  {
    "label": "TMappingData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMappingData"
  },
  {
    "label": "FLightmapResourceCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmapResourceCluster"
  },
  {
    "label": "IsTexelDebuggingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTexelDebuggingEnabled()"
  },
  {
    "label": "FLightMap()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FLightMap()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Data(SizeX * Y + X)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Data(SizeX * Y + X)"
  },
  {
    "label": "FLightMap2D()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FLightMap2D()"
  },
  {
    "label": "FLightMap2D()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FLightMap2D(bool InAllowHighQualityLightMaps)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects( FReferenceCollector& Collector )"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AllocateLightMap()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FLightMap2D>)",
    "insertText": "AllocateLightMap(UObject* LightMapOuter,\n\t\tFQuantizedLightmapData*& SourceQuantizedData,\n\t\tconst TMap<ULightComponent*, FShadowMapData2D*>& SourceShadowMapData,\n\t\tconst FBoxSphereBounds& Bounds, ELightMapPaddingType InPaddingType, ELightMapFlags InLightmapFlags )"
  },
  {
    "label": "AllocateInstancedLightMap()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FLightMap2D>)",
    "insertText": "AllocateInstancedLightMap(UObject* LightMapOuter, UInstancedStaticMeshComponent* Component,\n\t\tTArray<TUniquePtr<FQuantizedLightmapData>> SourceQuantizedData,\n\t\tTArray<TMap<ULightComponent*, TUniquePtr<FShadowMapData2D>>>&& InstancedShadowMapData,\n\t\tUMapBuildDataRegistry* Registry, FGuid MapBuildDataId, const FBoxSphereBounds& Bounds, ELightMapPaddingType InPaddingType, ELightMapFlags LightmapFlags)"
  },
  {
    "label": "EncodeTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeTextures(const FStaticLightingBuildContext* LightingContext, bool bLightingSuccessful, bool bMultithreadedEncode = false )"
  },
  {
    "label": "EncodeShadowTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EncodeShadowTexture(const FStaticLightingBuildContext* LightingContext, struct FLightMapPendingTexture& PendingTexture, TArray<TArray<FFourDistanceFieldSamples>>& MipData)"
  },
  {
    "label": "FLightMap2D()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FLightMap2D(const TArray<FGuid>& InLightGuids)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SetFeatureLevelAndInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFeatureLevelAndInitialize(const FStaticFeatureLevel InFeatureLevel)"
  },
  {
    "label": "TryInitializeUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryInitializeUniformBuffer()"
  },
  {
    "label": "UpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUniformBuffer()"
  },
  {
    "label": "ConditionalCreateAllocatedVT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalCreateAllocatedVT()"
  },
  {
    "label": "ReleaseAllocatedVT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllocatedVT()"
  }
]