[
  {
    "label": "ReversedAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReversedAdapter"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_ADAPTERS_H_ # define BASE_CONTAINERS_ADAPTERS_H_ # include<stddef . h> # include<iterator> # include<utility> namespace base { namespace internal { template<T> class ReversedAdapter { public : using Iterator =)",
    "insertText": "decltype(std::rbegin(std::declval<T&>()))"
  },
  {
    "label": "ReversedAdapter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReversedAdapter(T& t) : t_(t)"
  },
  {
    "label": "ReversedAdapter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReversedAdapter(const ReversedAdapter& ra) : t_(ra.t_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ReversedAdapter&)",
    "insertText": "operator(const ReversedAdapter&)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  },
  {
    "label": "Reversed()",
    "kind": "Method",
    "detail": "Function (} private : T& t_ ; } ; } template<T> internal::ReversedAdapter<T>)",
    "insertText": "Reversed(T& t)"
  }
]