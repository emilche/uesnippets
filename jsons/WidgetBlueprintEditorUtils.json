[
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "FHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHittestGrid"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "UWidgetSlotPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetSlotPair"
  },
  {
    "label": "UWidgetTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetTree"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UWidgetEditingProjectSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetEditingProjectSettings"
  },
  {
    "label": "FWidgetObjectTextFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetObjectTextFactory"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "FWidgetThumbnailProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetThumbnailProperties"
  },
  {
    "label": "FCreateWidgetFromBlueprintParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateWidgetFromBlueprintParams"
  },
  {
    "label": "FWidgetBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetBlueprintEditor"
  },
  {
    "label": "FUsableWidgetClassResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUsableWidgetClassResult"
  },
  {
    "label": "VerifyWidgetRename()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WidgetBlueprintEditor . h \" # include \" WidgetBlueprint . h \" # include \" WidgetReference . h \" class FDragDropOperation ; class FHittestGrid ; class FMenuBuilder ; class UWidgetBlueprint ; class UWidgetSlotPair ; class UWidgetTree ; class SWindow ; class UWidgetEditingProjectSettings ; class FWidgetObjectTextFactory ; class ULocalPlayer ; class FWidgetBlueprintEditorUtils { public : struct FWidgetThumbnailProperties { FVector2D ScaledSize ; FVector2D Offset ; } ; struct FCreateWidgetFromBlueprintParams { EWidgetDesignFlags FlagsToApply ; ULocalPlayer* LocalPlayer = nullptr ; } ; bool)",
    "insertText": "VerifyWidgetRename(TSharedRef<class FWidgetBlueprintEditor> BlueprintEditor, FWidgetReference Widget, const FText& NewName, FText& OutErrorMessage)"
  },
  {
    "label": "RenameWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameWidget(TSharedRef<class FWidgetBlueprintEditor> BlueprintEditor, const FName& OldObjectName, const FString& NewDisplayName)"
  },
  {
    "label": "ReplaceDesiredFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceDesiredFocus(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, const FName& OldName, const FName& NewName)"
  },
  {
    "label": "SetDesiredFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredFocus(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, const FName DesiredFocusWidgetName)"
  },
  {
    "label": "CreateWidgetContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWidgetContextMenu(FMenuBuilder& MenuBuilder, TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, FVector2D TargetLocation)"
  },
  {
    "label": "CopyWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyWidgets(UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets)"
  },
  {
    "label": "PasteWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<UWidget*>)",
    "insertText": "PasteWidgets(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, FWidgetReference ParentWidget, FName SlotName, FVector2D PasteLocation)"
  },
  {
    "label": "DeleteWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteWidgets(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets, bool bSilentDelete = false)"
  },
  {
    "label": "CutWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutWidgets(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets)"
  },
  {
    "label": "DuplicateWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<UWidget*>)",
    "insertText": "DuplicateWidgets(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets)"
  },
  {
    "label": "CreateUserWidgetFromBlueprint()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "CreateUserWidgetFromBlueprint(UObject* Outer, UWidgetBlueprint* BP, const FCreateWidgetFromBlueprintParams& Params)"
  },
  {
    "label": "DestroyUserWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyUserWidget(UUserWidget* UserWidget)"
  },
  {
    "label": "IsAnySelectedWidgetLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnySelectedWidgetLocked(TSet<FWidgetReference> SelectedWidgets)"
  },
  {
    "label": "CanPasteWidgetsExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteWidgetsExtension(TSet<FWidgetReference> SelectedWidgets)"
  },
  {
    "label": "GetWidgetTemplateFromDragDrop()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetWidgetTemplateFromDragDrop(UWidgetBlueprint* Blueprint, UWidgetTree* RootWidgetTree, TSharedPtr<FDragDropOperation>& DragDropOp)"
  },
  {
    "label": "ShouldPreventDropOnTargetExtensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPreventDropOnTargetExtensions(const UWidget* Target, const TSharedPtr<FDragDropOperation>& DragDropOp, FText& OutFailureText)"
  },
  {
    "label": "IsBindWidgetProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindWidgetProperty(const FProperty* InProperty)"
  },
  {
    "label": "IsBindWidgetProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindWidgetProperty(const FProperty* InProperty, bool& bIsOptional)"
  },
  {
    "label": "IsBindWidgetAnimProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindWidgetAnimProperty(const FProperty* InProperty)"
  },
  {
    "label": "IsBindWidgetAnimProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindWidgetAnimProperty(const FProperty* InProperty, bool& bIsOptional)"
  },
  {
    "label": "IsUsableWidgetClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsableWidgetClass(const UClass* WidgetClass, TSharedRef<FWidgetBlueprintEditor> InCurrentActiveBlueprintEditor)"
  },
  {
    "label": "IsUsableWidgetClass()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FUsableWidgetClassResult,void>)",
    "insertText": "IsUsableWidgetClass(const FAssetData& WidgetAsset, TSharedRef<FWidgetBlueprintEditor> InCurrentActiveBlueprintEditor)"
  },
  {
    "label": "ExportWidgetsToText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportWidgetsToText(TArray<UWidget*> WidgetsToExport, FString& ExportedText)"
  },
  {
    "label": "ImportWidgetsFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportWidgetsFromText(UWidgetBlueprint* BP, const FString& TextToImport, TSet<UWidget*>& ImportedWidgetSet, TMap<FName, UWidgetSlotPair*>& PastedExtraSlotData)"
  },
  {
    "label": "ExportPropertiesToText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportPropertiesToText(UObject* Object, TMap<FName, FString>& ExportedProperties)"
  },
  {
    "label": "ImportPropertiesFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportPropertiesFromText(UObject* Object, const TMap<FName, FString>& ExportedProperties)"
  },
  {
    "label": "DoesClipboardTextContainWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesClipboardTextContainWidget(UWidgetBlueprint* BP)"
  },
  {
    "label": "FindNamedSlotHostForContent()",
    "kind": "Method",
    "detail": "Function (TScriptInterface<INamedSlotInterface>)",
    "insertText": "FindNamedSlotHostForContent(UWidget* WidgetTemplate, UWidgetTree* WidgetTree)"
  },
  {
    "label": "FindNamedSlotHostWidgetForContent()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "FindNamedSlotHostWidgetForContent(UWidget* WidgetTemplate, UWidgetTree* WidgetTree)"
  },
  {
    "label": "FindAllAncestorNamedSlotHostWidgetsForContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllAncestorNamedSlotHostWidgetsForContent(TArray<FWidgetReference>& OutSlotHostWidgets, UWidget* WidgetTemplate, TSharedRef<FWidgetBlueprintEditor> BlueprintEditor)"
  },
  {
    "label": "RemoveNamedSlotHostContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNamedSlotHostContent(UWidget* WidgetTemplate, TScriptInterface<INamedSlotInterface> NamedSlotHost)"
  },
  {
    "label": "ReplaceNamedSlotHostContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceNamedSlotHostContent(UWidget* WidgetTemplate, TScriptInterface<INamedSlotInterface> NamedSlotHost, UWidget* NewContentWidget)"
  },
  {
    "label": "FindLatestWidgetTree()",
    "kind": "Method",
    "detail": "Function (UWidgetTree*)",
    "insertText": "FindLatestWidgetTree(UWidgetBlueprint* Blueprint, UUserWidget* UserWidget)"
  },
  {
    "label": "UpdateHittestGrid()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UpdateHittestGrid(FHittestGrid& HitTestGrid, TSharedRef<SWindow> Window, float Scale, FVector2D DrawSize, float DeltaTime)"
  },
  {
    "label": "GetWidgetPreviewAreaAndSize()",
    "kind": "Method",
    "detail": "Function (TTuple<FVector2D,FVector2D>)",
    "insertText": "GetWidgetPreviewAreaAndSize(UUserWidget* UserWidget, FVector2D DesiredSize, FVector2D PreviewSize, EDesignPreviewSizeMode ThumbnailSizeMode, TOptional<FVector2D> ThumbnailCustomSize)"
  },
  {
    "label": "GetWidgetPreviewDPIScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWidgetPreviewDPIScale(UUserWidget* UserWidget, FVector2D PreviewSize)"
  },
  {
    "label": "ConvertThumbnailSizeModeToDesignerSizeMode()",
    "kind": "Method",
    "detail": "Function (EDesignPreviewSizeMode)",
    "insertText": "ConvertThumbnailSizeModeToDesignerSizeMode(EThumbnailPreviewSizeMode ThumbnailSizeMode, UUserWidget* WidgetInstance)"
  },
  {
    "label": "GetWidgetPreviewUnScaledCustomSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetWidgetPreviewUnScaledCustomSize(FVector2D DesiredSize, UUserWidget* UserWidget, TOptional<FVector2D> ThumbnailCustomSize, EThumbnailPreviewSizeMode ThumbnailSizeMode = EThumbnailPreviewSizeMode::MatchDesignerMode)"
  },
  {
    "label": "GetThumbnailImageScaleAndOffset()",
    "kind": "Method",
    "detail": "Function (TTuple<float,FVector2D>)",
    "insertText": "GetThumbnailImageScaleAndOffset(FVector2D WidgetSize, FVector2D ThumbnailSize)"
  },
  {
    "label": "SetTextureAsAssetThumbnail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureAsAssetThumbnail(UWidgetBlueprint* WidgetBlueprint, UTexture2D* ThumbnailTexture)"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPaletteCategory(const TSubclassOf<UWidget> Widget)"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPaletteCategory(const FAssetData& WidgetAsset, const TSubclassOf<UWidget> NativeClass)"
  },
  {
    "label": "DrawSWidgetInRenderTargetForThumbnail()",
    "kind": "Method",
    "detail": "Function (TOptional<FWidgetThumbnailProperties>)",
    "insertText": "DrawSWidgetInRenderTargetForThumbnail(UUserWidget* WidgetInstance, FRenderTarget* RenderTarget2D, FVector2D ThumbnailSize, TOptional<FVector2D> ThumbnailCustomSize, EThumbnailPreviewSizeMode ThumbnailSizeMode = EThumbnailPreviewSizeMode::MatchDesignerMode)"
  },
  {
    "label": "DrawSWidgetInRenderTargetForThumbnail()",
    "kind": "Method",
    "detail": "Function (TOptional<FWidgetThumbnailProperties>)",
    "insertText": "DrawSWidgetInRenderTargetForThumbnail(UUserWidget* WidgetInstance, UTextureRenderTarget2D* RenderTarget2D, FVector2D ThumbnailSize, TOptional<FVector2D> ThumbnailCustomSize, EThumbnailPreviewSizeMode ThumbnailSizeMode)"
  },
  {
    "label": "DrawSWidgetInRenderTarget()",
    "kind": "Method",
    "detail": "Function (TOptional<FWidgetThumbnailProperties>)",
    "insertText": "DrawSWidgetInRenderTarget(UUserWidget* WidgetInstance, UTextureRenderTarget2D* RenderTarget2D)"
  },
  {
    "label": "GetRelevantMutableSettings()",
    "kind": "Method",
    "detail": "Function (UWidgetEditingProjectSettings*)",
    "insertText": "GetRelevantMutableSettings(TWeakPtr<FWidgetBlueprintEditor> CurrentEditor)"
  },
  {
    "label": "GetRelevantSettings()",
    "kind": "Method",
    "detail": "Function (const UWidgetEditingProjectSettings*)",
    "insertText": "GetRelevantSettings(TWeakPtr<FWidgetBlueprintEditor> CurrentEditor)"
  },
  {
    "label": "GetWidgetBlueprintFromWidget()",
    "kind": "Method",
    "detail": "Function (UWidgetBlueprint*)",
    "insertText": "GetWidgetBlueprintFromWidget(const UWidget* Widget)"
  },
  {
    "label": "CopyWidgetsInternal()",
    "kind": "Method",
    "detail": "Function (private : FString)",
    "insertText": "CopyWidgetsInternal(UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets)"
  },
  {
    "label": "PasteWidgetsInternal()",
    "kind": "Method",
    "detail": "Function (TArray<UWidget*>)",
    "insertText": "PasteWidgetsInternal(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, const FString& TextToImport, FWidgetReference ParentWidget, FName SlotName, FVector2D PasteLocation, bool bForceSibling, bool& TransactionSuccesful)"
  },
  {
    "label": "DisplayPasteWarningAndEarlyExit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisplayPasteWarningAndEarlyExit()"
  },
  {
    "label": "ExecuteOpenSelectedWidgetsForEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOpenSelectedWidgetsForEdit(TSet<FWidgetReference> SelectedWidgets)"
  },
  {
    "label": "FindAndRemoveNamedSlotContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindAndRemoveNamedSlotContent(UWidget* WidgetTemplate, UWidgetTree* WidgetTree)"
  },
  {
    "label": "CanOpenSelectedWidgetsForEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenSelectedWidgetsForEdit(TSet<FWidgetReference> SelectedWidgets)"
  },
  {
    "label": "BuildWrapWithMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWrapWithMenu(FMenuBuilder& Menu, TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets)"
  },
  {
    "label": "WrapWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapWidgets(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets, UClass* WidgetClass)"
  },
  {
    "label": "BuildReplaceWithMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildReplaceWithMenu(FMenuBuilder& Menu, TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets)"
  },
  {
    "label": "ReplaceWidgetWithSelectedTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceWidgetWithSelectedTemplate(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, FWidgetReference Widget)"
  },
  {
    "label": "CanBeReplacedWithTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeReplacedWithTemplate(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, FWidgetReference Widget)"
  },
  {
    "label": "ReplaceWidgetWithChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceWidgetWithChildren(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, FWidgetReference Widget)"
  },
  {
    "label": "ReplaceWidgetWithNamedSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceWidgetWithNamedSlot(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, FWidgetReference Widget, FName NamedSlot)"
  },
  {
    "label": "ReplaceWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceWidgets(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidgetBlueprint* BP, TSet<FWidgetReference> Widgets, UClass* WidgetClass)"
  },
  {
    "label": "FindNextValidName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindNextValidName(UWidgetTree* WidgetTree, const FString& Name)"
  },
  {
    "label": "FindUsedVariablesForWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindUsedVariablesForWidgets(const TSet<FWidgetReference>& Widgets, const UWidgetBlueprint* BP, TArray<UWidget*>& UsedVariables, TArray<FText>& WidgetNames, bool bIncludeVariablesOnChildren)"
  },
  {
    "label": "ShouldContinueDeleteOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldContinueDeleteOperation(UWidgetBlueprint* BP, const TArray<FText>& WidgetNames)"
  },
  {
    "label": "ShouldContinueReplaceOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldContinueReplaceOperation(UWidgetBlueprint* BP, const TArray<FText>& WidgetNames)"
  },
  {
    "label": "DrawSWidgetInRenderTargetInternal()",
    "kind": "Method",
    "detail": "Function (TOptional<FWidgetThumbnailProperties>)",
    "insertText": "DrawSWidgetInRenderTargetInternal(UUserWidget* WidgetInstance, FRenderTarget* RenderTarget2D, UTextureRenderTarget2D* TextureRenderTarget,FVector2D ThumbnailSize, bool bIsForThumbnail, TOptional<FVector2D> ThumbnailCustomSize, EThumbnailPreviewSizeMode ThumbnailSizeMode)"
  },
  {
    "label": "IsDesiredFocusWiget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDesiredFocusWiget(TSharedRef<FWidgetBlueprintEditor> BlueprintEditor, UWidget* Widget)"
  },
  {
    "label": "ProcessImportedText()",
    "kind": "Method",
    "detail": "Function (FWidgetObjectTextFactory)",
    "insertText": "ProcessImportedText(UWidgetBlueprint* BP, const FString& TextToImport, UPackage*& TempPackage)"
  }
]