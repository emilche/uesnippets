[
  {
    "label": "ITextGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextGenerator"
  },
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory"
  },
  {
    "label": "FTextHistory_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Base"
  },
  {
    "label": "FTextHistory_Generated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Generated"
  },
  {
    "label": "FTextHistory_NamedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_NamedFormat"
  },
  {
    "label": "FTextHistory_OrderedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_OrderedFormat"
  },
  {
    "label": "FTextHistory_ArgumentDataFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_ArgumentDataFormat"
  },
  {
    "label": "FTextHistory_FormatNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_FormatNumber"
  },
  {
    "label": "FTextHistory_AsNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsNumber"
  },
  {
    "label": "FTextHistory_AsPercent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsPercent"
  },
  {
    "label": "FTextHistory_AsCurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsCurrency"
  },
  {
    "label": "FTextHistory_AsDate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsDate"
  },
  {
    "label": "FTextHistory_AsTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsTime"
  },
  {
    "label": "FTextHistory_AsDateTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsDateTime"
  },
  {
    "label": "FTextHistory_Transform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Transform"
  },
  {
    "label": "FTextHistory_StringTableEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_StringTableEntry"
  },
  {
    "label": "FStringTableReferenceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableReferenceData"
  },
  {
    "label": "FTextHistory_TextGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_TextGenerator"
  },
  {
    "label": "StaticShouldReadFromBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" Internationalization / CulturePointer . h \" # include \" Internationalization / ITextData . h \" # include \" Internationalization / LocalizedTextSourceTypes . h \" # include \" Internationalization / StringTableCoreFwd . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / TextKey . h \" # include \" Misc / DateTime . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / SharedPointerInternals . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" class ITextGenerator ; struct FDecimalNumberFormattingRules ; enum class ETextHistoryType : int8 { None = - 1,Base = 0,NamedFormat,OrderedFormat,ArgumentFormat,AsNumber,AsPercent,AsCurrency,AsDate,AsTime,AsDateTime,Transform,StringTableEntry,TextGenerator,} ; # define OVERRIDE_TEXT_HISTORY_STRINGIFICATION \\ bool)",
    "insertText": "StaticShouldReadFromBuffer(const TCHAR* Buffer)"
  },
  {
    "label": "ShouldReadFromBuffer()",
    "kind": "Method",
    "detail": "Function (\\ bool)",
    "insertText": "ShouldReadFromBuffer(const TCHAR* Buffer)"
  },
  {
    "label": "ReadFromBuffer()",
    "kind": "Method",
    "detail": "Function (} \\ const TCHAR*)",
    "insertText": "ReadFromBuffer(const TCHAR* Buffer, const TCHAR* TextNamespace, const TCHAR* PackageNamespace)"
  },
  {
    "label": "WriteToBuffer()",
    "kind": "Method",
    "detail": "Function (\\ bool)",
    "insertText": "WriteToBuffer(FString& Buffer, const bool bStripPackageNamespace)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (namespace TextStringificationUtil { # define LOC_DEFINE_REGION const auto& TextMarker =)",
    "insertText": "TEXT(\"TEXT\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& InvTextMarker =)",
    "insertText": "TEXT(\"INVTEXT\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& NsLocTextMarker =)",
    "insertText": "TEXT(\"NSLOCTEXT\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocTextMarker =)",
    "insertText": "TEXT(\"LOCTEXT\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocTableMarker =)",
    "insertText": "TEXT(\"LOCTABLE\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenNumberMarker =)",
    "insertText": "TEXT(\"LOCGEN_NUMBER\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenPercentMarker =)",
    "insertText": "TEXT(\"LOCGEN_PERCENT\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenCurrencyMarker =)",
    "insertText": "TEXT(\"LOCGEN_CURRENCY\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenDateMarker =)",
    "insertText": "TEXT(\"LOCGEN_DATE\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenTimeMarker =)",
    "insertText": "TEXT(\"LOCGEN_TIME\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenDateTimeMarker =)",
    "insertText": "TEXT(\"LOCGEN_DATETIME\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenToLowerMarker =)",
    "insertText": "TEXT(\"LOCGEN_TOLOWER\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenToUpperMarker =)",
    "insertText": "TEXT(\"LOCGEN_TOUPPER\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenFormatOrderedMarker =)",
    "insertText": "TEXT(\"LOCGEN_FORMAT_ORDERED\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocGenFormatNamedMarker =)",
    "insertText": "TEXT(\"LOCGEN_FORMAT_NAMED\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& GroupedSuffix =)",
    "insertText": "TEXT(\"_GROUPED\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& UngroupedSuffix =)",
    "insertText": "TEXT(\"_UNGROUPED\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& CustomSuffix =)",
    "insertText": "TEXT(\"_CUSTOM\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& UtcSuffix =)",
    "insertText": "TEXT(\"_UTC\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const auto& LocalSuffix =)",
    "insertText": "TEXT(\"_LOCAL\")"
  },
  {
    "label": "TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE()",
    "kind": "Method",
    "detail": "Function (# undef LOC_DEFINE_REGION # define)",
    "insertText": "TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(Func, ...) \\ Buffer = Func(Buffer, ##__VA_ARGS__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!Buffer)"
  },
  {
    "label": "PeekInsensitiveMarker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekInsensitiveMarker(const TCHAR* Buffer, const TCHAR* InMarker, const int32 InMarkerLen)"
  },
  {
    "label": "TEXT_STRINGIFICATION_SKIP_MARKER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_SKIP_MARKER(T) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::SkipMarker, T, UE_ARRAY_COUNT(T) - 1) #define TEXT_STRINGIFICATION_SKIP_INSENSITIVE_MARKER(T) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::SkipInsensitiveMarker, T, UE_ARRAY_COUNT(T) - 1) #define TEXT_STRINGIFICATION_SKIP_MARKER_LEN(T) Buffer += (UE_ARRAY_COUNT(T) - 1) const TCHAR* SkipMarker(const TCHAR* Buffer, const TCHAR* InMarker, const int32 InMarkerLen)"
  },
  {
    "label": "SkipInsensitiveMarker()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "SkipInsensitiveMarker(const TCHAR* Buffer, const TCHAR* InMarker, const int32 InMarkerLen)"
  },
  {
    "label": "TEXT_STRINGIFICATION_SKIP_WHITESPACE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_SKIP_WHITESPACE() TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::SkipWhitespace) const TCHAR* SkipWhitespace(const TCHAR* Buffer)"
  },
  {
    "label": "TEXT_STRINGIFICATION_SKIP_WHITESPACE_TO_CHAR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_SKIP_WHITESPACE_TO_CHAR(C) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::SkipWhitespaceToCharacter, TEXT(C)) const TCHAR* SkipWhitespaceToCharacter(const TCHAR* Buffer, const TCHAR InChar)"
  },
  {
    "label": "TEXT_STRINGIFICATION_SKIP_WHITESPACE_AND_CHAR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_SKIP_WHITESPACE_AND_CHAR(C) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::SkipWhitespaceAndCharacter, TEXT(C)) const TCHAR* SkipWhitespaceAndCharacter(const TCHAR* Buffer, const TCHAR InChar)"
  },
  {
    "label": "TEXT_STRINGIFICATION_READ_NUMBER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_READ_NUMBER(V) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::ReadNumberFromBuffer, V) const TCHAR* ReadNumberFromBuffer(const TCHAR* Buffer, FFormatArgumentValue& OutValue)"
  },
  {
    "label": "TEXT_STRINGIFICATION_READ_ALNUM()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_READ_ALNUM(V) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::ReadAlnumFromBuffer, V) const TCHAR* ReadAlnumFromBuffer(const TCHAR* Buffer, FString& OutValue)"
  },
  {
    "label": "TEXT_STRINGIFICATION_READ_QUOTED_STRING()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_READ_QUOTED_STRING(V) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::ReadQuotedStringFromBuffer, V) const TCHAR* ReadQuotedStringFromBuffer(const TCHAR* Buffer, FString& OutStr)"
  },
  {
    "label": "TEXT_STRINGIFICATION_READ_SCOPED_ENUM()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_STRINGIFICATION_READ_SCOPED_ENUM(S, V) TEXT_STRINGIFICATION_FUNC_MODIFY_BUFFER_AND_VALIDATE(TextStringificationUtil::ReadScopedEnumFromBuffer, S, V) template <typename T> const TCHAR* ReadScopedEnumFromBuffer(const TCHAR* Buffer, const FString& Scope, T& OutValue)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (Buffer + = Scope .)",
    "insertText": "Len()"
  },
  {
    "label": "ReadAlnumFromBuffer()",
    "kind": "Method",
    "detail": "Function (FString EnumValueString ; Buffer =)",
    "insertText": "ReadAlnumFromBuffer(Buffer, EnumValueString)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (Buffer + = Scope ; Buffer + =)",
    "insertText": "LexToString(Value)"
  },
  {
    "label": "FTextHistory()",
    "kind": "Method",
    "detail": "Function (} } class FTextHistory : public ITextData,public TRefCountingMixin<FTextHistory> { public :)",
    "insertText": "FTextHistory()"
  },
  {
    "label": "FTextHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory(const FTextHistory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTextHistory&)",
    "insertText": "operator(FTextHistory&)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "GetSourceString()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetSourceString()"
  },
  {
    "label": "GetLocalizedString()",
    "kind": "Method",
    "detail": "Function (} FTextConstDisplayStringPtr)",
    "insertText": "GetLocalizedString()"
  },
  {
    "label": "GetTextId()",
    "kind": "Method",
    "detail": "Function (FTextId)",
    "insertText": "GetTextId()"
  },
  {
    "label": "BuildInvariantDisplayString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "BuildInvariantDisplayString()"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IdenticalTo(const FTextHistory& Other, const ETextIdenticalModeFlags CompareModeFlags)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "GetHistoricNumericData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetHistoricNumericData(const FText& InText, FHistoricTextNumericData& OutHistoricNumericData)"
  },
  {
    "label": "CanUpdateDisplayString()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanUpdateDisplayString()"
  },
  {
    "label": "MarkDisplayStringOutOfDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDisplayStringOutOfDate()"
  },
  {
    "label": "MarkDisplayStringUpToDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDisplayStringUpToDate()"
  },
  {
    "label": "FTextHistory_Base()",
    "kind": "Method",
    "detail": "Function (private : uint16 GlobalRevision = 0 ; uint16 LocalRevision = 0 ; } ; class FTextHistory_Base : public FTextHistory { public :)",
    "insertText": "FTextHistory_Base()"
  },
  {
    "label": "FTextHistory_Base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_Base(const FTextId& InTextId, FString&& InSourceString)"
  },
  {
    "label": "FTextHistory_Base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_Base(const FTextId& InTextId, FString&& InSourceString, FTextConstDisplayStringPtr&& InLocalizedString)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (OVERRIDE_TEXT_HISTORY_STRINGIFICATION ; ETextHistoryType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "UpdateDisplayString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisplayString()"
  },
  {
    "label": "FTextHistory_Generated()",
    "kind": "Method",
    "detail": "Function (private : FTextId TextId ; FString SourceString ; FTextConstDisplayStringPtr LocalizedString ; } ; class FTextHistory_Generated : public FTextHistory { public :)",
    "insertText": "FTextHistory_Generated()"
  },
  {
    "label": "FTextHistory_Generated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_Generated(FString&& InDisplayString)"
  },
  {
    "label": "BuildLocalizedDisplayString()",
    "kind": "Method",
    "detail": "Function (protected : FString)",
    "insertText": "BuildLocalizedDisplayString()"
  },
  {
    "label": "FTextHistory_NamedFormat()",
    "kind": "Method",
    "detail": "Function (FString DisplayString ; } ; class FTextHistory_NamedFormat : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_NamedFormat()"
  },
  {
    "label": "FTextHistory_NamedFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_NamedFormat(FString&& InDisplayString, FTextFormat&& InSourceFmt, FFormatNamedArguments&& InArguments)"
  },
  {
    "label": "GetHistoricFormatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHistoricFormatData(const FText& InText, TArray<FHistoricTextFormatData>& OutHistoricFormatData)"
  },
  {
    "label": "FTextHistory_OrderedFormat()",
    "kind": "Method",
    "detail": "Function (private : FTextFormat SourceFmt ; FFormatNamedArguments Arguments ; } ; class FTextHistory_OrderedFormat : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_OrderedFormat()"
  },
  {
    "label": "FTextHistory_OrderedFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_OrderedFormat(FString&& InDisplayString, FTextFormat&& InSourceFmt, FFormatOrderedArguments&& InArguments)"
  },
  {
    "label": "FTextHistory_ArgumentDataFormat()",
    "kind": "Method",
    "detail": "Function (private : FTextFormat SourceFmt ; FFormatOrderedArguments Arguments ; } ; class FTextHistory_ArgumentDataFormat : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_ArgumentDataFormat()"
  },
  {
    "label": "FTextHistory_ArgumentDataFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_ArgumentDataFormat(FString&& InDisplayString, FTextFormat&& InSourceFmt, TArray<FFormatArgumentData>&& InArguments)"
  },
  {
    "label": "FTextHistory_FormatNumber()",
    "kind": "Method",
    "detail": "Function (private : FTextFormat SourceFmt ; TArray<FFormatArgumentData> Arguments ; } ; class FTextHistory_FormatNumber : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_FormatNumber()"
  },
  {
    "label": "FTextHistory_FormatNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_FormatNumber(FString&& InDisplayString, FFormatArgumentValue InSourceValue, const FNumberFormattingOptions* const InFormatOptions, FCulturePtr InTargetCulture)"
  },
  {
    "label": "BuildNumericDisplayString()",
    "kind": "Method",
    "detail": "Function (protected : FString)",
    "insertText": "BuildNumericDisplayString(const FDecimalNumberFormattingRules& InFormattingRules, const int32 InValueMultiplier = 1)"
  },
  {
    "label": "FTextHistory_AsNumber()",
    "kind": "Method",
    "detail": "Function (FFormatArgumentValue SourceValue ; TOptional<FNumberFormattingOptions> FormatOptions ; FCulturePtr TargetCulture ; } ; class FTextHistory_AsNumber : public FTextHistory_FormatNumber { public :)",
    "insertText": "FTextHistory_AsNumber()"
  },
  {
    "label": "FTextHistory_AsNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_AsNumber(FString&& InDisplayString, FFormatArgumentValue InSourceValue, const FNumberFormattingOptions* const InFormatOptions, FCulturePtr InTargetCulture)"
  },
  {
    "label": "FTextHistory_AsPercent()",
    "kind": "Method",
    "detail": "Function (} ; class FTextHistory_AsPercent : public FTextHistory_FormatNumber { public :)",
    "insertText": "FTextHistory_AsPercent()"
  },
  {
    "label": "FTextHistory_AsPercent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_AsPercent(FString&& InDisplayString, FFormatArgumentValue InSourceValue, const FNumberFormattingOptions* const InFormatOptions, FCulturePtr InTargetCulture)"
  },
  {
    "label": "FTextHistory_AsCurrency()",
    "kind": "Method",
    "detail": "Function (} ; class FTextHistory_AsCurrency : public FTextHistory_FormatNumber { public :)",
    "insertText": "FTextHistory_AsCurrency()"
  },
  {
    "label": "FTextHistory_AsCurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_AsCurrency(FString&& InDisplayString, FFormatArgumentValue InSourceValue, FString InCurrencyCode, const FNumberFormattingOptions* const InFormatOptions, FCulturePtr InTargetCulture)"
  },
  {
    "label": "FTextHistory_AsDate()",
    "kind": "Method",
    "detail": "Function (private : FString CurrencyCode ; } ; class FTextHistory_AsDate : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_AsDate()"
  },
  {
    "label": "FTextHistory_AsDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_AsDate(FString&& InDisplayString, FDateTime InSourceDateTime, const EDateTimeStyle::Type InDateStyle, FString InTimeZone, FCulturePtr InTargetCulture)"
  },
  {
    "label": "FTextHistory_AsTime()",
    "kind": "Method",
    "detail": "Function (private : FDateTime SourceDateTime ; EDateTimeStyle::Type DateStyle ; FString TimeZone ; FCulturePtr TargetCulture ; } ; class FTextHistory_AsTime : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_AsTime()"
  },
  {
    "label": "FTextHistory_AsTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_AsTime(FString&& InDisplayString, FDateTime InSourceDateTime, const EDateTimeStyle::Type InTimeStyle, FString InTimeZone, FCulturePtr InTargetCulture)"
  },
  {
    "label": "FTextHistory_AsDateTime()",
    "kind": "Method",
    "detail": "Function (private : FDateTime SourceDateTime ; EDateTimeStyle::Type TimeStyle ; FString TimeZone ; FCulturePtr TargetCulture ; } ; class FTextHistory_AsDateTime : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_AsDateTime()"
  },
  {
    "label": "FTextHistory_AsDateTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_AsDateTime(FString&& InDisplayString, FDateTime InSourceDateTime, const EDateTimeStyle::Type InDateStyle, const EDateTimeStyle::Type InTimeStyle, FString InTimeZone, FCulturePtr InTargetCulture)"
  },
  {
    "label": "FTextHistory_AsDateTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_AsDateTime(FString&& InDisplayString, FDateTime InSourceDateTime, FString InCustomPattern, FString InTimeZone, FCulturePtr InTargetCulture)"
  },
  {
    "label": "FTextHistory_Transform()",
    "kind": "Method",
    "detail": "Function (private : FDateTime SourceDateTime ; EDateTimeStyle::Type DateStyle ; EDateTimeStyle::Type TimeStyle ; FString CustomPattern ; FString TimeZone ; FCulturePtr TargetCulture ; } ; class FTextHistory_Transform : public FTextHistory_Generated { public : enum class ETransformType : uint8 { ToLower = 0,ToUpper,} ;)",
    "insertText": "FTextHistory_Transform()"
  },
  {
    "label": "FTextHistory_Transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_Transform(FString&& InDisplayString, FText InSourceText, const ETransformType InTransformType)"
  },
  {
    "label": "FTextHistory_StringTableEntry()",
    "kind": "Method",
    "detail": "Function (private : FText SourceText ; ETransformType TransformType ; } ; class FTextHistory_StringTableEntry : public FTextHistory { public :)",
    "insertText": "FTextHistory_StringTableEntry()"
  },
  {
    "label": "FTextHistory_StringTableEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_StringTableEntry(FName InTableId, const FTextKey& InKey, const EStringTableLoadingPolicy InLoadingPolicy)"
  },
  {
    "label": "GetTableIdAndKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTableIdAndKey(FName& OutTableId, FTextKey& OutKey)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : enum class EStringTableLoadingPhase : uint8 { PendingLoad,Loading,Loaded,} ; class FStringTableReferenceData : public TSharedFromThis<FStringTableReferenceData,ESPMode::ThreadSafe> { public : void)",
    "insertText": "Initialize(FName InTableId, const FTextKey& InKey, const EStringTableLoadingPolicy InLoadingPolicy)"
  },
  {
    "label": "IsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentical(const FStringTableReferenceData& Other)"
  },
  {
    "label": "GetTableId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTableId()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (FTextKey)",
    "insertText": "GetKey()"
  },
  {
    "label": "CollectStringTableAssetReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectStringTableAssetReferences(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "ResolveStringTableEntry()",
    "kind": "Method",
    "detail": "Function (FStringTableEntryConstPtr)",
    "insertText": "ResolveStringTableEntry()"
  },
  {
    "label": "ResolveDisplayString()",
    "kind": "Method",
    "detail": "Function (FTextConstDisplayStringPtr)",
    "insertText": "ResolveDisplayString(const bool bForceRefresh = false)"
  },
  {
    "label": "ConditionalBeginAssetLoad()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConditionalBeginAssetLoad()"
  },
  {
    "label": "FTextHistory_TextGenerator()",
    "kind": "Method",
    "detail": "Function (FName TableId ; FTextKey Key ; EStringTableLoadingPhase LoadingPhase = EStringTableLoadingPhase::PendingLoad ; FStringTableEntryConstWeakPtr StringTableEntry ; FTextConstDisplayStringPtr DisplayString ; FCriticalSection DataCS ; } ; typedef TSharedPtr<FStringTableReferenceData,ESPMode::ThreadSafe> FStringTableReferenceDataPtr ; typedef TWeakPtr<FStringTableReferenceData,ESPMode::ThreadSafe> FStringTableReferenceDataWeakPtr ; FStringTableReferenceDataPtr StringTableReferenceData ; } ; class FTextHistory_TextGenerator : public FTextHistory_Generated { public :)",
    "insertText": "FTextHistory_TextGenerator()"
  },
  {
    "label": "FTextHistory_TextGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextHistory_TextGenerator(FString&& InDisplayString, const TSharedRef<ITextGenerator>& InTextGenerator)"
  }
]