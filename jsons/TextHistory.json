[
  {
    "label": "ITextGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextGenerator"
  },
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTextHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory"
  },
  {
    "label": "could",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "could"
  },
  {
    "label": "FTextHistory_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Base"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTextHistory_Generated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Generated"
  },
  {
    "label": "FTextHistory_NamedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_NamedFormat"
  },
  {
    "label": "FTextHistory_OrderedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_OrderedFormat"
  },
  {
    "label": "FTextHistory_ArgumentDataFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_ArgumentDataFormat"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTextHistory_FormatNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_FormatNumber"
  },
  {
    "label": "FTextHistory_AsNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsNumber"
  },
  {
    "label": "FTextHistory_AsPercent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsPercent"
  },
  {
    "label": "FTextHistory_AsCurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsCurrency"
  },
  {
    "label": "FTextHistory_AsDate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsDate"
  },
  {
    "label": "FTextHistory_AsTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsTime"
  },
  {
    "label": "FTextHistory_AsDateTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_AsDateTime"
  },
  {
    "label": "FTextHistory_Transform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_Transform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "FTextHistory_StringTableEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_StringTableEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStringTableReferenceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringTableReferenceData"
  },
  {
    "label": "FTextHistory_TextGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextHistory_TextGenerator"
  },
  {
    "label": "StaticShouldReadFromBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticShouldReadFromBuffer(const TCHAR* Buffer)"
  },
  {
    "label": "StaticShouldReadFromBuffer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "StaticShouldReadFromBuffer(Buffer)"
  },
  {
    "label": "PeekMarker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekMarker(const TCHAR* Buffer, const TCHAR* InMarker, const int32 InMarkerLen)"
  },
  {
    "label": "PeekInsensitiveMarker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekInsensitiveMarker(const TCHAR* Buffer, const TCHAR* InMarker, const int32 InMarkerLen)"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "FTextId()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FTextId()"
  },
  {
    "label": "StaticShouldReadFromBuffer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "StaticShouldReadFromBuffer(Buffer)"
  },
  {
    "label": "UpdateDisplayStringIfOutOfDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisplayStringIfOutOfDate()"
  },
  {
    "label": "MarkDisplayStringOutOfDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDisplayStringOutOfDate()"
  },
  {
    "label": "MarkDisplayStringUpToDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDisplayStringUpToDate()"
  },
  {
    "label": "FTextHistory_Generated()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FTextHistory_Generated(FString&& InDisplayString)"
  },
  {
    "label": "FTextId()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FTextId()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FName InTableId, const FTextKey& InKey, const EStringTableLoadingPolicy InLoadingPolicy)"
  },
  {
    "label": "CollectStringTableAssetReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectStringTableAssetReferences(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "GetTextId()",
    "kind": "Method",
    "detail": "Function (FTextId)",
    "insertText": "GetTextId()"
  },
  {
    "label": "ResolveStringTableEntry()",
    "kind": "Method",
    "detail": "Function (FStringTableEntryConstPtr)",
    "insertText": "ResolveStringTableEntry()"
  },
  {
    "label": "ResolveDisplayString()",
    "kind": "Method",
    "detail": "Function (FTextConstDisplayStringPtr)",
    "insertText": "ResolveDisplayString(const bool bForceRefresh = false)"
  },
  {
    "label": "ConditionalBeginAssetLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBeginAssetLoad()"
  }
]