[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FBoundedCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" namespace UE::CADKernel { class FBoundedCurve : public FCurve { class FEntity ; protected : TSharedPtr<FCurve> Curve ;)",
    "insertText": "FBoundedCurve(TSharedRef<FCurve> InCurve, const FLinearBoundary& InBoundary, int8 InDimension) : FCurve(InBoundary, InDimension) , Curve(InCurve)"
  },
  {
    "label": "FBoundedCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoundedCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, Curve)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNotDerivableCoordinates(const FLinearBoundary& InBoundary, int32 DerivativeOrder, TArray<double>& OutNotDerivableCoordinates)"
  },
  {
    "label": "MakeBoundedCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeBoundedCurve(const FLinearBoundary& InBoundary)"
  }
]