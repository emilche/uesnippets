[
  {
    "label": "TestStdOut()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaSessionServer . h \" # include \" UbaStorageServer . h \" namespace uba { bool)",
    "insertText": "TestStdOut(LoggerWithWriter& logger, const StringBufferBase& testRootDir, bool remote, const tchar* app = nullptr, const tchar* arg = nullptr, const tchar* expectedOut = nullptr)"
  },
  {
    "label": "networkBackend()",
    "kind": "Method",
    "detail": "Function (LogWriter& logWriter = logger . m_writer ; NetworkBackendTcp)",
    "insertText": "networkBackend(logWriter)"
  },
  {
    "label": "networkServer()",
    "kind": "Method",
    "detail": "Function (bool ctorSuccess = true ; NetworkServer)",
    "insertText": "networkServer(ctorSuccess, { logWriter })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> rootDir ; rootDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"Uba\"))"
  },
  {
    "label": "storageServerInfo()",
    "kind": "Method",
    "detail": "Function (StorageServerCreateInfo)",
    "insertText": "storageServerInfo(networkServer, rootDir.data, logWriter)"
  },
  {
    "label": "storageServer()",
    "kind": "Method",
    "detail": "Function (storageServerInfo . casCapacityBytes = 1 0 2 4 ull* 1 0 2 4* 1 0 2 4 ; StorageServer)",
    "insertText": "storageServer(storageServerInfo)"
  },
  {
    "label": "sessionServerInfo()",
    "kind": "Method",
    "detail": "Function (SessionServerCreateInfo)",
    "insertText": "sessionServerInfo(storageServer, networkServer, logWriter)"
  },
  {
    "label": "sessionServer()",
    "kind": "Method",
    "detail": "Function (sessionServerInfo . checkMemory = false ; sessionServerInfo . rootDir = rootDir . data ; sessionServerInfo . traceEnabled = true ; SessionServer)",
    "insertText": "sessionServer(sessionServerInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto sg =)",
    "insertText": "MakeGuard([&]() { networkServer.DisconnectClients(); })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> workingDir ; workingDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"WorkingDir\"))"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (workingDir .)",
    "insertText": "EnsureEndsWithSlash()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> testApp ;)",
    "insertText": "if(!app)"
  },
  {
    "label": "GetTestAppPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTestAppPath(logger, testApp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (app = testApp . data ; })",
    "insertText": "if(!arg)"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (arg =)",
    "insertText": "TC(\"-stdout=rootprocess\")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (expectedOut =)",
    "insertText": "TC(\"rootprocess\")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (} ProcessStartInfo pi ; pi . application = app ; pi . arguments = arg ; pi . workingDir = workingDir . data ; pi . description =)",
    "insertText": "TC(\"StdOutDesc\")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (pi . logFile =)",
    "insertText": "TC(\"Log\")"
  },
  {
    "label": "RunProcessRemote()",
    "kind": "Method",
    "detail": "Function (auto ph = remote ? sessionServer .)",
    "insertText": "RunProcessRemote(pi) : sessionServer.RunProcess(pi)"
  },
  {
    "label": "StopListen()",
    "kind": "Method",
    "detail": "Function (networkBackend .)",
    "insertText": "StopListen()"
  },
  {
    "label": "DisconnectClients()",
    "kind": "Method",
    "detail": "Function (networkServer .)",
    "insertText": "DisconnectClients()"
  },
  {
    "label": "WaitOnAllTasks()",
    "kind": "Method",
    "detail": "Function (sessionServer .)",
    "insertText": "WaitOnAllTasks()"
  },
  {
    "label": "GetLogLines()",
    "kind": "Method",
    "detail": "Function (auto& logLines = ph .)",
    "insertText": "GetLogLines()"
  },
  {
    "label": "TestStdOutRemote()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestStdOutRemote(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "TestStdOutViaCmd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestStdOutViaCmd(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> args ; args .)",
    "insertText": "Append(TC(\"/c \\\"\"))"
  },
  {
    "label": "GetTestAppPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTestAppPath(logger, args)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (args .)",
    "insertText": "Append(TC(\" -stdout=foo\\\"\"))"
  }
]