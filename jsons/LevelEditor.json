[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SLevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelEditor"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "FLevelEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorModule"
  },
  {
    "label": "IAssetEditorInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetEditorInstance"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "FLevelEditorCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorCommands"
  },
  {
    "label": "FLevelEditorModesCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorModesCommands"
  },
  {
    "label": "FLevelViewportCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportCommands"
  },
  {
    "label": "FTitleBarItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTitleBarItem"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / IConsoleManager . h \" # include \" Modules / ModuleInterface . h \" # include \" Framework / Docking / TabManager . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Framework / Docking / LayoutService . h \" # include \" ILevelEditor . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" ViewportTypeDefinition . h \" # include \" LevelEditorOutlinerSettings . h \" class AActor ; class IAssetViewport ; class SDockTab ; class SLevelEditor ; class UAnimSequence ; class USkeletalMeshComponent ; class UTypedElementSelectionSet ; enum class EMapChangeType : uint8 ; const FName LevelEditorApp ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FAreObjectsEditable, const TArray<TWeakObjectPtr<UObject>>&)"
  },
  {
    "label": "FLevelEditorModule()",
    "kind": "Method",
    "detail": "Function (class LevelEditorTabIds { public : const FName LevelEditorViewport ; const FName LevelEditorViewport_Clone1 ; const FName LevelEditorViewport_Clone2 ; const FName LevelEditorViewport_Clone3 ; const FName LevelEditorViewport_Clone4 ; const FName LevelEditorToolBox ; const FName LevelEditorSelectionDetails ; const FName LevelEditorSelectionDetails2 ; const FName LevelEditorSelectionDetails3 ; const FName LevelEditorSelectionDetails4 ; const FName PlacementBrowser ; const FName LevelEditorBuildAndSubmit ; const FName LevelEditorSceneOutliner ; const FName LevelEditorSceneOutliner2 ; const FName LevelEditorSceneOutliner3 ; const FName LevelEditorSceneOutliner4 ; const FName LevelEditorStatsViewer ; const FName LevelEditorLayerBrowser ; const FName LevelEditorDataLayerBrowser ; const FName Sequencer ; const FName SequencerGraphEditor ; const FName WorldSettings ; const FName WorldBrowserComposition ; const FName WorldBrowserPartitionEditor ; const FName WorldBrowserHierarchy ; const FName WorldBrowserDetails ; const FName LevelEditorHierarchicalLODOutliner ; const FName OutputLog ; const FName LevelEditorEnvironmentLightingViewer ; } ; class FLevelEditorModule : public IModuleInterface,public IHasMenuExtensibility,public IHasToolBarExtensibility { public :)",
    "insertText": "FLevelEditorModule()"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "SupportsDynamicReloading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDynamicReloading()"
  },
  {
    "label": "SummonBuildAndSubmit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonBuildAndSubmit()"
  },
  {
    "label": "SummonWorldBrowserHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonWorldBrowserHierarchy()"
  },
  {
    "label": "SummonWorldBrowserDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonWorldBrowserDetails()"
  },
  {
    "label": "SummonWorldBrowserComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonWorldBrowserComposition()"
  },
  {
    "label": "AttachSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "AttachSequencer(TSharedPtr<SWidget> SequencerWidget, TSharedPtr<class IAssetEditorInstance> SequencerAssetEditor)"
  },
  {
    "label": "StartPlayInEditorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayInEditorSession()"
  },
  {
    "label": "GoImmersiveWithActiveLevelViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoImmersiveWithActiveLevelViewport(const bool bForceGameView)"
  },
  {
    "label": "ToggleImmersiveOnActiveLevelViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleImmersiveOnActiveLevelViewport()"
  },
  {
    "label": "GetFirstLevelEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ILevelEditor>)",
    "insertText": "GetFirstLevelEditor()"
  },
  {
    "label": "GetLevelEditorTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetLevelEditorTab()"
  },
  {
    "label": "GetFirstActiveViewport()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class IAssetViewport>)",
    "insertText": "GetFirstActiveViewport()"
  },
  {
    "label": "GetFirstActiveLevelViewport()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SLevelViewport>)",
    "insertText": "GetFirstActiveLevelViewport()"
  },
  {
    "label": "FocusPIEViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusPIEViewport()"
  },
  {
    "label": "FocusViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViewport()"
  },
  {
    "label": "GetGlobalLevelEditorActions()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FUICommandList>)",
    "insertText": "GetGlobalLevelEditorActions()"
  },
  {
    "label": "GetLevelEditorCommands()",
    "kind": "Method",
    "detail": "Function (} const class FLevelEditorCommands&)",
    "insertText": "GetLevelEditorCommands()"
  },
  {
    "label": "GetLevelEditorModesCommands()",
    "kind": "Method",
    "detail": "Function (const class FLevelEditorModesCommands&)",
    "insertText": "GetLevelEditorModesCommands()"
  },
  {
    "label": "GetLevelViewportCommands()",
    "kind": "Method",
    "detail": "Function (const class FLevelViewportCommands&)",
    "insertText": "GetLevelViewportCommands()"
  },
  {
    "label": "GetLevelEditorInstance()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class ILevelEditor>)",
    "insertText": "GetLevelEditorInstance()"
  },
  {
    "label": "GetLevelEditorInstanceTab()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class SDockTab>)",
    "insertText": "GetLevelEditorInstanceTab()"
  },
  {
    "label": "GetLevelEditorTabManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager>)",
    "insertText": "GetLevelEditorTabManager()"
  },
  {
    "label": "SetLevelEditorInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelEditorInstance(TWeakPtr<class SLevelEditor> LevelEditor)"
  },
  {
    "label": "SetLevelEditorInstanceTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelEditorInstanceTab(TWeakPtr<class SDockTab> LevelEditorTab)"
  },
  {
    "label": "SetLevelEditorTabManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelEditorTabManager(const TSharedPtr<SDockTab>& OwnerTab)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FLevelEditorModule, FTabManagerChangedEvent)"
  },
  {
    "label": "OnTabManagerChanged()",
    "kind": "Method",
    "detail": "Function (FTabManagerChangedEvent&)",
    "insertText": "OnTabManagerChanged()"
  },
  {
    "label": "OnTabContentChanged()",
    "kind": "Method",
    "detail": "Function (FTabContentChangedEvent&)",
    "insertText": "OnTabContentChanged()"
  },
  {
    "label": "OnLevelEditorCreated()",
    "kind": "Method",
    "detail": "Function (FOnLevelEditorCreated&)",
    "insertText": "OnLevelEditorCreated()"
  },
  {
    "label": "BroadcastElementSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastElementSelectionChanged(const UTypedElementSelectionSet* SelectionSet, bool bForceRefresh=false)"
  },
  {
    "label": "BroadcastOverridePropertyEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastOverridePropertyEditorSelection(const TArray<AActor*>& NewSelection, bool bForceRefresh=false)"
  },
  {
    "label": "BroadcastRedrawViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastRedrawViewports(bool bInvalidateHitProxies)"
  },
  {
    "label": "BroadcastTakeHighResScreenShots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastTakeHighResScreenShots()"
  },
  {
    "label": "BroadcastMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastMapChanged(UWorld* World, EMapChangeType MapChangeType)"
  },
  {
    "label": "BroadcastComponentsEdited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastComponentsEdited()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(FLevelEditorModule, FActorSelectionChangedEvent, const TArray<UObject*>&, bool)"
  },
  {
    "label": "OnActorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (FActorSelectionChangedEvent&)",
    "insertText": "OnActorSelectionChanged()"
  },
  {
    "label": "OnElementSelectionChanged()",
    "kind": "Method",
    "detail": "Function (FElementSelectionChangedEvent&)",
    "insertText": "OnElementSelectionChanged()"
  },
  {
    "label": "OnOverridePropertyEditorSelection()",
    "kind": "Method",
    "detail": "Function (FOverridePropertyEditorSelectionEvent&)",
    "insertText": "OnOverridePropertyEditorSelection()"
  },
  {
    "label": "OnRedrawLevelEditingViewports()",
    "kind": "Method",
    "detail": "Function (FRedrawLevelEditingViewportsEvent&)",
    "insertText": "OnRedrawLevelEditingViewports()"
  },
  {
    "label": "OnMapChanged()",
    "kind": "Method",
    "detail": "Function (FMapChangedEvent&)",
    "insertText": "OnMapChanged()"
  },
  {
    "label": "OnComponentsEdited()",
    "kind": "Method",
    "detail": "Function (FComponentsEditedEvent&)",
    "insertText": "OnComponentsEdited()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedRef<FExtender>, FLevelViewportMenuExtender_SelectedObjects, const TSharedRef<FUICommandList>, const TArray<UObject*>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedRef<FExtender>, FLevelViewportMenuExtender_SelectedActors, const TSharedRef<FUICommandList>, const TArray<AActor*>)"
  },
  {
    "label": "GetAllLevelViewportDragDropContextMenuExtenders()",
    "kind": "Method",
    "detail": "Function (TArray<FLevelViewportMenuExtender_SelectedObjects>&)",
    "insertText": "GetAllLevelViewportDragDropContextMenuExtenders()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ILevelEditor, FOnRegisterTabs, TSharedPtr<FTabManager>)"
  },
  {
    "label": "OnRegisterTabs()",
    "kind": "Method",
    "detail": "Function (FOnRegisterTabs&)",
    "insertText": "OnRegisterTabs()"
  },
  {
    "label": "OnRegisterLayoutExtensions()",
    "kind": "Method",
    "detail": "Function (FOnRegisterLayoutExtensions&)",
    "insertText": "OnRegisterLayoutExtensions()"
  },
  {
    "label": "RemoveTitleBarItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTitleBarItem(FName InTitleBarIdentifier)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FLevelEditorModule, FTitleBarMessagesChanged)"
  },
  {
    "label": "OnTitleBarMessagesChanged()",
    "kind": "Method",
    "detail": "Function (FTitleBarMessagesChanged&)",
    "insertText": "OnTitleBarMessagesChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (TitleBarMessagesChangedEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT(FLevelEditorModule, FTakeHighResScreenShotsEvent)"
  },
  {
    "label": "OnTakeHighResScreenShots()",
    "kind": "Method",
    "detail": "Function (FTakeHighResScreenShotsEvent&)",
    "insertText": "OnTakeHighResScreenShots()"
  },
  {
    "label": "OnCaptureSingleFrameAnimSequence()",
    "kind": "Method",
    "detail": "Function (FCaptureSingleFrameAnimSequence&)",
    "insertText": "OnCaptureSingleFrameAnimSequence()"
  },
  {
    "label": "AddCustomFilterToOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomFilterToOutliner(FLevelEditorOutlinerSettings::FOutlinerFilterFactory InCreateCustomFilter)"
  },
  {
    "label": "AddCustomClassFilterToOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomClassFilterToOutliner(TSharedRef<FCustomClassFilterData> InCustomClassFilterData)"
  },
  {
    "label": "GetOutlinerFilterCategory()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFilterCategory>)",
    "insertText": "GetOutlinerFilterCategory(const FName& CategoryName)"
  },
  {
    "label": "AddEditableObjectPredicate()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddEditableObjectPredicate(const FAreObjectsEditable& InPredicate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AreObjectsEditableDelegates .)",
    "insertText": "Add(InPredicate)"
  },
  {
    "label": "RemoveEditableObjectPredicate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveEditableObjectPredicate(FDelegateHandle InPredicateHandle)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (AreObjectsEditableDelegates .)",
    "insertText": "RemoveAll([=](const FAreObjectsEditable& P){ return P.GetHandle() == InPredicateHandle; })"
  },
  {
    "label": "AreObjectsEditable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreObjectsEditable(const TArray<TWeakObjectPtr<UObject>>& InObjects)"
  },
  {
    "label": "RegisterViewportType()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RegisterViewportType(FName InLayoutName, const FViewportTypeDefinition& InDefinition)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CustomViewports .)",
    "insertText": "Add(InLayoutName, InDefinition)"
  },
  {
    "label": "UnregisterViewportType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterViewportType(FName InLayoutName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CustomViewports .)",
    "insertText": "Remove(InLayoutName)"
  },
  {
    "label": "IterateViewportTypes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IterateViewportTypes(TFunctionRef<void(FName, const FViewportTypeDefinition&)> Iter)"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iter(Pair.Key, Pair.Value)"
  },
  {
    "label": "BindGlobalLevelEditorCommands()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BindGlobalLevelEditorCommands()"
  },
  {
    "label": "HandleTabManagerPersistLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTabManagerPersistLayout(const TSharedRef<FTabManager::FLayout>& LayoutToSave)"
  },
  {
    "label": "SaveToConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveToConfig(GEditorLayoutIni, LayoutToSave)"
  },
  {
    "label": "SpawnLevelEditor()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<SDockTab>)",
    "insertText": "SpawnLevelEditor(const FSpawnTabArgs& InArgs)"
  }
]