[
  {
    "label": "VariableBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VariableBlock"
  },
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "Scope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Scope"
  },
  {
    "label": "ShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderGenerator"
  },
  {
    "label": "BEGIN_SHADER_STAGE()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_SHADERSTAGE_H # define MATERIALX_SHADERSTAGE_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / GenOptions . h> # include<MaterialXGenShader / ShaderGraph . h> # include<MaterialXGenShader / Syntax . h> # include<MaterialXFormat / File . h> # include<MaterialXCore / Node . h> # include<sstream> # define)",
    "insertText": "BEGIN_SHADER_STAGE(stage, name) if (stage.getName() == name)"
  },
  {
    "label": "END_SHADER_STAGE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "END_SHADER_STAGE(stage, name)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const string PIXEL ; } class VariableBlock ; using VariableBlockPtr = std::shared_ptr<VariableBlock> ; using VariableBlockMap = std::unordered_map<string,VariableBlockPtr> ; using ShaderPortPredicate = std::function<)",
    "insertText": "bool(ShaderPort*)"
  },
  {
    "label": "VariableBlock()",
    "kind": "Method",
    "detail": "Function (class VariableBlock { public :)",
    "insertText": "VariableBlock(const string& name, const string& instance) : _name(name), _instance(instance)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getName()"
  },
  {
    "label": "getInstance()",
    "kind": "Method",
    "detail": "Function (_name = name ; } const string&)",
    "insertText": "getInstance()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (_instance = instance ; } bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ShaderPort*)",
    "insertText": "operator(size_t index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const ShaderPort*)",
    "insertText": "operator(const string& name)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (ShaderPort*)",
    "insertText": "find(const string& name)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (ShaderPort*)",
    "insertText": "find(const ShaderPortPredicate& predicate)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (ShaderPort*)",
    "insertText": "add(const TypeDesc* type, const string& name, ValuePtr value = nullptr)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(ShaderPortPtr port)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (private : string _name ; string _instance ; std::unordered_map<string,ShaderPortPtr> _variableMap ; vector<ShaderPort*> _variableOrder ; } ; class ShaderStage { public : using FunctionCallId = std::pair<const ShaderNode*,int> ; struct Scope { Syntax::Punctuation punctuation ; std::set<FunctionCallId> functions ;)",
    "insertText": "Scope(Syntax::Punctuation p) : punctuation(p)"
  },
  {
    "label": "ShaderStage()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "ShaderStage(const string& name, ConstSyntaxPtr syntax)"
  },
  {
    "label": "getSourceCode()",
    "kind": "Method",
    "detail": "Function (_code = code ; } const string&)",
    "insertText": "getSourceCode()"
  },
  {
    "label": "createInputBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlockPtr)",
    "insertText": "createInputBlock(const string& name, const string& instance = EMPTY_STRING)"
  },
  {
    "label": "createOutputBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlockPtr)",
    "insertText": "createOutputBlock(const string& name, const string& instance = EMPTY_STRING)"
  },
  {
    "label": "getUniformBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlock&)",
    "insertText": "getUniformBlock(const string& name)"
  },
  {
    "label": "getInputBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlock&)",
    "insertText": "getInputBlock(const string& name)"
  },
  {
    "label": "getOutputBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlock&)",
    "insertText": "getOutputBlock(const string& name)"
  },
  {
    "label": "getConstantBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlock&)",
    "insertText": "getConstantBlock()"
  },
  {
    "label": "getUniformBlocks()",
    "kind": "Method",
    "detail": "Function (const VariableBlockMap&)",
    "insertText": "getUniformBlocks()"
  },
  {
    "label": "endScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "endScope(bool semicolon = false, bool newline = true)"
  },
  {
    "label": "beginLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "beginLine()"
  },
  {
    "label": "endLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "endLine(bool semicolon = true)"
  },
  {
    "label": "newLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "newLine()"
  },
  {
    "label": "addString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addString(const string& str)"
  },
  {
    "label": "addLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLine(const string& str, bool semicolon = true)"
  },
  {
    "label": "addComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addComment(const string& str)"
  },
  {
    "label": "addBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addBlock(const string& str, const FilePath& sourceFilename, GenContext& context)"
  },
  {
    "label": "addInclude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addInclude(const FilePath& includeFilename, const FilePath& sourceFilename, GenContext& context)"
  },
  {
    "label": "addValue()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "addValue(const T& value)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (StringStream str ; str<<value ; _code + = str .)",
    "insertText": "str()"
  },
  {
    "label": "addFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addFunctionDefinition(const ShaderNode& node, GenContext& context)"
  },
  {
    "label": "addFunctionCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addFunctionCall(const ShaderNode& node, GenContext& context)"
  },
  {
    "label": "isEmitted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEmitted(const ShaderNode& node, GenContext& context)"
  },
  {
    "label": "setFunctionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFunctionName(const string& functionName)"
  },
  {
    "label": "addStageUniform()",
    "kind": "Method",
    "detail": "Function (_functionName = functionName ; } private : const string _name ; string _functionName ; ConstSyntaxPtr _syntax ; int _indentations ; vector<Scope> _scopes ; StringSet _includes ; std::set<size_t> _definedFunctions ; VariableBlock _constants ; VariableBlockMap _uniforms ; VariableBlockMap _inputs ; VariableBlockMap _outputs ; string _code ; class ShaderGenerator ; } ; using ShaderStagePtr = std::shared_ptr<ShaderStage> ; ShaderPort*)",
    "insertText": "addStageUniform(const string& block, const TypeDesc* type, const string& name, ShaderStage& stage)"
  },
  {
    "label": "getUniformBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlock& uniforms = stage .)",
    "insertText": "getUniformBlock(block)"
  },
  {
    "label": "addStageInput()",
    "kind": "Method",
    "detail": "Function (} ShaderPort*)",
    "insertText": "addStageInput(const string& block, const TypeDesc* type, const string& name, ShaderStage& stage)"
  },
  {
    "label": "getInputBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlock& inputs = stage .)",
    "insertText": "getInputBlock(block)"
  },
  {
    "label": "addStageOutput()",
    "kind": "Method",
    "detail": "Function (} ShaderPort*)",
    "insertText": "addStageOutput(const string& block, const TypeDesc* type, const string& name, ShaderStage& stage)"
  },
  {
    "label": "getOutputBlock()",
    "kind": "Method",
    "detail": "Function (VariableBlock& outputs = stage .)",
    "insertText": "getOutputBlock(block)"
  },
  {
    "label": "addStageConnectorBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addStageConnectorBlock(const string& block, const string& instance, ShaderStage& from, ShaderStage& to)"
  },
  {
    "label": "createOutputBlock()",
    "kind": "Method",
    "detail": "Function (from .)",
    "insertText": "createOutputBlock(block, instance)"
  },
  {
    "label": "createInputBlock()",
    "kind": "Method",
    "detail": "Function (to .)",
    "insertText": "createInputBlock(block, instance)"
  },
  {
    "label": "addStageConnector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addStageConnector(const string& block, const TypeDesc* type, const string& name, ShaderStage& from, ShaderStage& to)"
  },
  {
    "label": "addStageOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addStageOutput(block, type, name, from)"
  },
  {
    "label": "addStageInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addStageInput(block, type, name, to)"
  }
]