[
  {
    "label": "TArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TArray"
  },
  {
    "label": "NotLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotLess"
  },
  {
    "label": "TInlineAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInlineAllocator"
  },
  {
    "label": "TArrayView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TArrayView"
  },
  {
    "label": "TStringViewAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStringViewAdapter"
  },
  {
    "label": "FStringProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStringProxy"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if !)",
    "insertText": "defined(TRACE_UE_COMPAT_LAYER) # if defined(__UNREAL__) && __UNREAL__ # define TRACE_UE_COMPAT_LAYER 0 # else # define TRACE_UE_COMPAT_LAYER 1 # endif #endif #if TRACE_UE_COMPAT_LAYER #define PLATFORM_ANDROID 0 #define PLATFORM_APPLE 0 #define PLATFORM_HOLOLENS 0 #define PLATFORM_MAC 0 #define PLATFORM_UNIX 0 #define PLATFORM_WINDOWS 0 #ifdef _WIN32 # undef PLATFORM_WINDOWS # define PLATFORM_WINDOWS 1 #elif defined(__linux__) # undef PLATFORM_UNIX # define PLATFORM_UNIX 1 #elif defined(__APPLE__) # undef PLATFORM_MAC # define PLATFORM_MAC 1 # undef PLATFORM_APPLE # define PLATFORM_APPLE 1 #endif #if defined(__amd64__) || defined(_M_X64) # define PLATFORM_CPU_X86_FAMILY 1 # define PLATFORM_CPU_ARM_FAMILY 0 # define PLATFORM_64BITS 1 # define PLATFORM_CACHE_LINE_SIZE 64 #elif defined(__arm64__) || defined(_M_ARM64) || defined(_M_ARM64EC) # define PLATFORM_CPU_X86_FAMILY 0 # define PLATFORM_CPU_ARM_FAMILY 1 # define PLATFORM_64BITS 1 # define PLATFORM_CACHE_LINE_SIZE 64 #else # error Unknown architecture #endif #if defined(_MSC_VER) # define _ENABLE_EXTENDED_ALIGNED_STORAGE #endif #include <algorithm> #include <cstddef> #include <cstdint> #include <cstring> #include <string> #include <string_view> #include <utility> #include <vector> #if PLATFORM_WINDOWS # if !defined(WIN32_LEAN_AND_MEAN) # define WIN32_LEAN_AND_MEAN # endif # if !defined(NOGDI) # define NOGDI # endif # if !defined(NOMINMAX)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (using uint16 = uint16_t ; using uint32 = uint32_t ; using uint64 = uint64_t ; using int8 = int8_t ; using int16 = int16_t ; using int32 = int32_t ; using int64 = int64_t ; using UPTRINT = uintptr_t ; using PTRINT = intptr_t ; using SIZE_T = size_t ; # if PLATFORM_WINDOWS # undef TEXT # endif # define)",
    "insertText": "TEXT(x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (using WIDECHAR = char16_t ; # if)",
    "insertText": "defined(_MSC_VER) # define FORCENOINLINE __declspec(noinline) # define FORCEINLINE __forceinline #else # define FORCENOINLINE inline __attribute__((noinline)) # define FORCEINLINE inline __attribute__((always_inline)) #endif #if defined(_MSC_VER) # define LIKELY(x) x # define UNLIKELY(x) x #else # define LIKELY(x) __builtin_expect(!!(x), 1) # define UNLIKELY(x) __builtin_expect(!!(x), 0) #endif #define UE_ARRAY_COUNT(x) (sizeof(x) / sizeof(x[0])) #if defined(TRACE_DLL_EXPORT) # if PLATFORM_WINDOWS && defined(TRACE_DLL_EXPORT) # if TRACE_IMPLEMENT # define TRACELOG_API __declspec(dllexport) # else # define TRACELOG_API __declspec(dllimport) # endif # else # define TRACELOG_API __attribute__ ((visibility (\"default\"))) # endif #else # define TRACELOG_API #endif #define TRACEANALYSIS_API TRACELOG_API #if !defined(IS_MONOLITHIC) # define IS_MONOLITHIC 0 #endif #define TSAN_SAFE #define THIRD_PARTY_INCLUDES_END #define THIRD_PARTY_INCLUDES_START #define TRACE_ENABLED 1 #define TRACE_PRIVATE_CONTROL_ENABLED 0 #define TRACE_PRIVATE_EXTERNAL_LZ4 1 #define UE_LAUNDER(x) (x) #define UE_DEPRECATED(x, ...) #define UE_TRACE_ENABLED TRACE_ENABLED #define PREPROCESSOR_JOIN(a,b) PREPROCESSOR_JOIN_IMPL(a,b) #define PREPROCESSOR_JOIN_IMPL(a,b) a##b #define DEFINE_LOG_CATEGORY_STATIC(...) #define UE_LOG(...) #define check(x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define checkf(x, ...) check(x) #if !defined(UE_BUILD_SHIPPING) # define UE_BUILD_SHIPPING 1 #endif #define UE_BUILD_TEST 0 #if defined(__has_builtin) # if __has_builtin(__builtin_trap) # define PLATFORM_BREAK()"
  },
  {
    "label": "__builtin_trap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_trap()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) # endif #elif defined(_MSC_VER) # define PLATFORM_BREAK()"
  },
  {
    "label": "__debugbreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__debugbreak()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #endif #if !defined(PLATFORM_BREAK) # define PLATFORM_BREAK()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #endif template <typename T> inline auto Forward(T t)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "MoveTemp(T&& t)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Swap(T& x, T& y)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T,ALLOCATOR = void> struct TArray : public std::vector<T> { using Super = std::vector<T> ; using Super::vector ; using Super::back ; using Super::begin ; using Super::clear ; using Super::data ; using Super::emplace_back ; using Super::empty ; using Super::end ; using Super::erase ; using Super::front ; using Super::insert ; using Super::pop_back ; using Super::push_back ; using Super::reserve ; using Super::resize ; using Super::size ; void)",
    "insertText": "Add(const T& t)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(t)"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "Add_GetRef(const T& t)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "AddUninitialized(size_t n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size() + n)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Emplace()"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace_back()"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Insert(T const& t, size_t i)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(begin() + i, t)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(const T& t)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Pop(bool Eh=true)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (T t =)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pop_back()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNum(size_t num)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(num)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumZeroed(size_t num)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(num, 0)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumUninitialized(size_t num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(size_t num)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(num)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "Last()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "GetData()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAll(bool (*p)(T const&))"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(remove_if(begin(), end(), p), end())"
  },
  {
    "label": "RemoveAllSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllSwap(bool (*p)(T const&))"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll(p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct NotLess { bool)",
    "insertText": "operator() (T const& Lhs, T const& Rhs)"
  },
  {
    "label": "Heapify()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "Heapify()"
  },
  {
    "label": "make_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_heap(begin(), end(), NotLess())"
  },
  {
    "label": "HeapPush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HeapPush(T const& t)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(t)"
  },
  {
    "label": "push_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_heap(begin(), end(), NotLess())"
  },
  {
    "label": "HeapPopDiscard()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HeapPopDiscard()"
  },
  {
    "label": "pop_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pop_heap(begin(), end(), NotLess())"
  },
  {
    "label": "HeapTop()",
    "kind": "Method",
    "detail": "Function (} T const&)",
    "insertText": "HeapTop()"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (} } ; template<size_t S> struct TInlineAllocator { } ; template<T> struct TArrayView {)",
    "insertText": "TArrayView()"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayView(T* data, size_t size) : _data(data), _size(size)"
  },
  {
    "label": "FStringProxy()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStringProxy {)",
    "insertText": "FStringProxy()"
  },
  {
    "label": "FStringProxy()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "FStringProxy(size_t len, const T* ptr)"
  },
  {
    "label": "FStringProxy()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "FStringProxy(const T& r) : FStringProxy(r.size(), r.data())"
  },
  {
    "label": "ToView()",
    "kind": "Method",
    "detail": "Function (} std::string _str ; const void* _ptr ; uint32_t _len ; uint32_t _char_size ; std::string_view)",
    "insertText": "ToView()"
  },
  {
    "label": "FStringProxy()",
    "kind": "Method",
    "detail": "Function (} ; template<T>)",
    "insertText": "FStringProxy(size_t len, const T* ptr) : _ptr(ptr) , _len(uint32_t(len)) , _char_size(sizeof(T))"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (_char_size = 1 ; _str .)",
    "insertText": "reserve(_len)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (char* __restrict cursor = _str .)",
    "insertText": "data()"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (_ptr = cursor ; } return)",
    "insertText": "string_view((const char*)_ptr, _len)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} using FAnsiStringView = TStringViewAdapter<char> ; using FWideStringView = TStringViewAdapter<char16_t> ; using FString = struct FStringProxy ; using ANSITEXTVIEW = FAnsiStringView ; namespace UECompat { template<T> T)",
    "insertText": "Max(T const& a, T const& b)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Strlen(const char* str)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Malloc(size_t size)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Realloc(void* ptr, size_t size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(void* ptr)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Memcpy(void* d, const void* s, size_t n)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(d, s, n)"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (} template<T,COMPARE = std::less<T::value_type>> void)",
    "insertText": "StableSort(T& container, COMPARE&& compare=COMPARE())"
  },
  {
    "label": "stable_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stable_sort(container.GetData(), container.GetData() + container.Num(), std::forward<COMPARE>(compare))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} template<T,COMPARE = std::less<T::value_type>> void)",
    "insertText": "Sort(T& container, COMPARE&& compare=COMPARE())"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sort(container.GetData(), container.GetData() + container.Num(), std::forward<COMPARE>(compare))"
  },
  {
    "label": "SortBy()",
    "kind": "Method",
    "detail": "Function (} template<T,P> void)",
    "insertText": "SortBy(T& container, P const& p)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(container, [&p] (typename T::value_type& lhs, typename T::value_type& rhs) { return p(lhs) < p(rhs); })"
  },
  {
    "label": "LowerBoundBy()",
    "kind": "Method",
    "detail": "Function (} template<T,V,P> int)",
    "insertText": "LowerBoundBy(T const& container, V const& v, P const& p)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (auto adapter = [&)",
    "insertText": "p(typename T::value_type const& lhs, V const& v)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (auto* last = first + container .)",
    "insertText": "Num()"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (auto iter =)",
    "insertText": "lower_bound(first, last, v, adapter)"
  }
]