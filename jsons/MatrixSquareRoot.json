[
  {
    "label": "matrix_sqrt_compute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_sqrt_compute"
  },
  {
    "label": "MatrixSquareRootReturnValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixSquareRootReturnValue"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_2x2_diagonal_block()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MATRIX_SQUARE_ROOT # define EIGEN_MATRIX_SQUARE_ROOT namespace Eigen { namespace internal { template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_2x2_diagonal_block(const MatrixType& T, Index i, ResultType& sqrtT)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (typedef traits<MatrixType>::Scalar Scalar ; Matrix<Scalar,2,2> block = T . template)",
    "insertText": "block(i,i)"
  },
  {
    "label": "es()",
    "kind": "Method",
    "detail": "Function (EigenSolver<Matrix<Scalar,2,2>>)",
    "insertText": "es(block)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (sqrtT . template)",
    "insertText": "block(i,i) = (es.eigenvectors() * es.eigenvalues().cwiseSqrt().asDiagonal() * es.eigenvectors().inverse()).real()"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_1x1_off_diagonal_block()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_1x1_off_diagonal_block(const MatrixType& T, Index i, Index j, ResultType& sqrtT)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (typedef traits<MatrixType>::Scalar Scalar ; Scalar)",
    "insertText": "tmp(sqrtT.row(i).segment(i+1,j-i-1) * sqrtT.col(j).segment(i+1,j-i-1)).value()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (sqrtT .)",
    "insertText": "coeffRef(i,j) = (T.coeff(i,j) - tmp) / (sqrtT.coeff(i,i) + sqrtT.coeff(j,j))"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_1x2_off_diagonal_block()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_1x2_off_diagonal_block(const MatrixType& T, Index i, Index j, ResultType& sqrtT)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (typedef traits<MatrixType>::Scalar Scalar ; Matrix<Scalar,1,2> rhs = T . template)",
    "insertText": "block(i,j)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,2,2> A = sqrtT .)",
    "insertText": "coeff(i,i) * Matrix<Scalar,2,2>::Identity()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (A + = sqrtT . template)",
    "insertText": "block(j,j).transpose()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (sqrtT . template)",
    "insertText": "block(i,j).transpose() = A.fullPivLu().solve(rhs.transpose())"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_2x1_off_diagonal_block()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_2x1_off_diagonal_block(const MatrixType& T, Index i, Index j, ResultType& sqrtT)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,2,2> A = sqrtT .)",
    "insertText": "coeff(j,j) * Matrix<Scalar,2,2>::Identity()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (sqrtT . template)",
    "insertText": "block(i,j) = A.fullPivLu().solve(rhs)"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_solve_auxiliary_equation()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_solve_auxiliary_equation(MatrixType& X, const MatrixType& A, const MatrixType& B, const MatrixType& C)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (typedef traits<MatrixType>::Scalar Scalar ; Matrix<Scalar,4,4> coeffMatrix = Matrix<Scalar,4,4)",
    "insertText": "Zero()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(0,0) = A.coeff(0,0) + B.coeff(0,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(1,1) = A.coeff(0,0) + B.coeff(1,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(2,2) = A.coeff(1,1) + B.coeff(0,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(3,3) = A.coeff(1,1) + B.coeff(1,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(0,1) = B.coeff(1,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(0,2) = A.coeff(0,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(1,0) = B.coeff(0,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(1,3) = A.coeff(0,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(2,0) = A.coeff(1,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(2,3) = B.coeff(1,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(3,1) = A.coeff(1,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (coeffMatrix .)",
    "insertText": "coeffRef(3,2) = B.coeff(0,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,4,1> rhs ; rhs .)",
    "insertText": "coeffRef(0) = C.coeff(0,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (rhs .)",
    "insertText": "coeffRef(1) = C.coeff(0,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (rhs .)",
    "insertText": "coeffRef(2) = C.coeff(1,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (rhs .)",
    "insertText": "coeffRef(3) = C.coeff(1,1)"
  },
  {
    "label": "fullPivLu()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,4,1> result ; result = coeffMatrix .)",
    "insertText": "fullPivLu().solve(rhs)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "coeffRef(0,0) = result.coeff(0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "coeffRef(0,1) = result.coeff(1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "coeffRef(1,0) = result.coeff(2)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "coeffRef(1,1) = result.coeff(3)"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_2x2_off_diagonal_block()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_2x2_off_diagonal_block(const MatrixType& T, Index i, Index j, ResultType& sqrtT)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,2,2> B = sqrtT . template)",
    "insertText": "block(j,j)"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_solve_auxiliary_equation()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,2,2> X ;)",
    "insertText": "matrix_sqrt_quasi_triangular_solve_auxiliary_equation(X, A, B, C)"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_diagonal()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_diagonal(const MatrixType& T, ResultType& sqrtT)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; const Index size = T .)",
    "insertText": "rows()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(T(i,i) >= 0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (sqrtT .)",
    "insertText": "coeffRef(i,i) = sqrt(T.coeff(i,i))"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_2x2_diagonal_block()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "matrix_sqrt_quasi_triangular_2x2_diagonal_block(T, i, sqrtT)"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_off_diagonal()",
    "kind": "Method",
    "detail": "Function (+ + i ; } } } template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular_off_diagonal(const MatrixType& T, ResultType& sqrtT)"
  },
  {
    "label": "iBlockIs2x2()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "iBlockIs2x2(i < size - 1) && (T.coeff(i+1, i) != 0)"
  },
  {
    "label": "jBlockIs2x2()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "jBlockIs2x2(j < size - 1) && (T.coeff(j+1, j) != 0)"
  },
  {
    "label": "matrix_sqrt_quasi_triangular()",
    "kind": "Method",
    "detail": "Function (} } } } template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_quasi_triangular(const MatrixType &arg, ResultType &result)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(arg.rows() == arg.cols())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "resize(arg.rows(), arg.cols())"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_diagonal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_sqrt_quasi_triangular_diagonal(arg, result)"
  },
  {
    "label": "matrix_sqrt_quasi_triangular_off_diagonal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_sqrt_quasi_triangular_off_diagonal(arg, result)"
  },
  {
    "label": "matrix_sqrt_triangular()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,ResultType> void)",
    "insertText": "matrix_sqrt_triangular(const MatrixType &arg, ResultType &result)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(i,i) = sqrt(arg.coeff(i,i))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index j = 1; j < arg.cols(); j++)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "tmp(result.row(i).segment(i+1,j-i-1) * result.col(j).segment(i+1,j-i-1)).value()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(i,j) = (arg.coeff(i,j) - tmp) / (result.coeff(i,i) + result.coeff(j,j))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } namespace internal { template<MatrixType,int IsComplex = NumTraits<internal::traits<MatrixType>::Scalar>::IsComplex> struct matrix_sqrt_compute { template<ResultType> void)",
    "insertText": "run(const MatrixType &arg, ResultType &result)"
  },
  {
    "label": "schurOfA()",
    "kind": "Method",
    "detail": "Function (const RealSchur<PlainType>)",
    "insertText": "schurOfA(arg)"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (const PlainType& T = schurOfA .)",
    "insertText": "matrixT()"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (const PlainType& U = schurOfA .)",
    "insertText": "matrixU()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (PlainType sqrtT =)",
    "insertText": "Zero(arg.rows(), arg.cols())"
  },
  {
    "label": "matrix_sqrt_quasi_triangular()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_sqrt_quasi_triangular(T, sqrtT)"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (result = U* sqrtT* U .)",
    "insertText": "adjoint()"
  },
  {
    "label": "matrix_sqrt_triangular()",
    "kind": "Method",
    "detail": "Function (PlainType sqrtT ;)",
    "insertText": "matrix_sqrt_triangular(T, sqrtT)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "U(sqrtT.template triangularView<Upper>() * U.adjoint())"
  },
  {
    "label": "MatrixSquareRootReturnValue()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> class MatrixSquareRootReturnValue : public ReturnByValue<MatrixSquareRootReturnValue<Derived>> { protected : typedef internal::ref_selector<Derived>::type DerivedNested ; public :)",
    "insertText": "MatrixSquareRootReturnValue(const Derived& src) : m_src(src)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<Derived,1 0>::type DerivedEvalType ; typedef internal::remove_all<DerivedEvalType>::type DerivedEvalTypeClean ; DerivedEvalType)",
    "insertText": "tmp(m_src)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::matrix_sqrt_compute<DerivedEvalTypeClean)",
    "insertText": "run(tmp, result)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} protected : const DerivedNested m_src ; } ; namespace internal { template<Derived> struct traits<MatrixSquareRootReturnValue<Derived>> { typedef Derived::PlainObject ReturnType ; } ; } template<Derived> const MatrixSquareRootReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "sqrt()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows() == cols())"
  }
]