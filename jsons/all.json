[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_ALL_H # define _LIBCPP___RANGES_ALL_H # include<__config> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / owning_view . h> # include<__ranges / range_adaptor . h> # include<__ranges / ref_view . h> # include<__utility / auto_cast . h> # include<__utility / declval . h> # include<__utility / forward . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __all { struct __fn : __range_adaptor_closure<__fn> { template<class _Tp> requires ranges::view<decay_t<_Tp>> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(_LIBCPP_AUTO_CAST(std::forward<_Tp>(__t)))) -> decltype(_LIBCPP_AUTO_CAST(std::forward<_Tp>(__t)))"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp>)",
    "insertText": "requires(!ranges::view<decay_t<_Tp>>) && requires (_Tp&& __t)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (ranges::ref_view { std::forward<)",
    "insertText": "_Tp(__t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(ranges::ref_view{std::forward<_Tp>(__t)}))"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp>)",
    "insertText": "requires(!ranges::view<decay_t<_Tp>> && !requires (_Tp&& __t) { ranges::ref_view{std::forward<_Tp>(__t)}; } && requires (_Tp&& __t) { ranges::owning_view{std::forward<_Tp>(__t)}; }) [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr auto operator()(_Tp&& __t) const noexcept(noexcept(ranges::owning_view{std::forward<_Tp>(__t)}))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto all = __all::__fn { } ; } template<ranges::viewable_range _Range> using all_t =)",
    "insertText": "decltype(views::all(declval<_Range>()))"
  }
]