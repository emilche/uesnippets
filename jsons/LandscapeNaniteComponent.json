[
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "ULandscapeSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSubsystem"
  },
  {
    "label": "FStaticMeshSourceModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshSourceModel"
  },
  {
    "label": "FLandscapeComponentDataInterfaceBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeComponentDataInterfaceBase"
  },
  {
    "label": "FAsyncComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncComponentData"
  },
  {
    "label": "FAsyncBuildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncBuildData"
  },
  {
    "label": "ULandscapeNaniteComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeNaniteComponent"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Components / StaticMeshComponent . h \" # include \" LandscapeDataAccess . h \" # include \" StaticMeshAttributes . h \" # include \" LandscapeNaniteComponent . generated . h \" class ALandscape ; class ALandscapeProxy ; class ULandscapeComponent ; class FPrimitiveSceneProxy ; class ULandscapeSubsystem ; struct FStaticMeshSourceModel ; struct FLandscapeComponentDataInterfaceBase ; namespace UE::Landscape::Nanite { struct FAsyncComponentData { TArray<FColor> HeightAndNormalData ; TArray<uint8> Visibility ; TSharedPtr<FLandscapeComponentDataInterfaceBase> ComponentDataInterface ; int32 Stride = 0 ; } ; struct FAsyncBuildData { using ComponentDataMap = TMap<ULandscapeComponent*,FAsyncComponentData> ; ComponentDataMap ComponentData ; TWeakObjectPtr<ALandscapeProxy> LandscapeWeakRef ; TWeakObjectPtr<ULandscapeSubsystem> LandscapeSubSystemWeakRef ; UStaticMesh* NaniteStaticMesh = nullptr ; FMeshDescription* NaniteMeshDescription = nullptr ; TArray<UMaterialInterface*,TInlineAllocator<4>> InputMaterials ; TArray<FName,TInlineAllocator<4>> InputMaterialSlotNames ; TInlineComponentArray<ULandscapeComponent*> InputComponents ; FStaticMeshSourceModel* SourceModel = nullptr ; TSharedPtr<FStaticMeshAttributes> MeshAttributes ; int32 LOD = 0 ; bool bExportResult = false ; bool bIsComplete = false ; bool bCancelled = false ; } ; })",
    "insertText": "UCLASS(hidecategories = (Display, Attachment, Physics, Debug, Collision, Movement, Rendering, PrimitiveComponent, Object, Transform, Mobility, VirtualTexture), showcategories = (\"Rendering|Material\"), MinimalAPI, Within = LandscapeProxy)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ULandscapeNaniteComponent(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy*)",
    "insertText": "GetLandscapeProxy()"
  },
  {
    "label": "GetLandscapeActor()",
    "kind": "Method",
    "detail": "Function (ALandscape*)",
    "insertText": "GetLandscapeActor()"
  },
  {
    "label": "GetProxyContentId()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetProxyContentId()"
  },
  {
    "label": "UpdatedSharedPropertiesFromActor()",
    "kind": "Method",
    "detail": "Function (ProxyContentId = InProxyContentId ; } void)",
    "insertText": "UpdatedSharedPropertiesFromActor()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool bValue)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "UpdateMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterials()"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CollectPSOPrecacheData(const FPSOPrecacheParams& BasePrecachePSOParams, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "InitializeForLandscape()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR bool)",
    "insertText": "InitializeForLandscape(ALandscapeProxy* Landscape, const FGuid& NewProxyContentId, const TArrayView<ULandscapeComponent*>& InComponentsToExport, int32 InNaniteComponentIndex)"
  },
  {
    "label": "InitializeForLandscapeAsync()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "InitializeForLandscapeAsync(ALandscapeProxy* Landscape, const FGuid& NewProxyContentId, bool bInIsAsync, const TArrayView<ULandscapeComponent*>& InComponentsToExport, int32 InNaniteComponentIndex)"
  },
  {
    "label": "InitializePlatformForLandscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializePlatformForLandscape(ALandscapeProxy* Landscape, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (# endif FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "IsHLODRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLODRelevant()"
  }
]