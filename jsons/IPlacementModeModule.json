[
  {
    "label": "FNamePermissionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamePermissionList"
  },
  {
    "label": "FPlaceableItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlaceableItem"
  },
  {
    "label": "FPlacementModeID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlacementModeID"
  },
  {
    "label": "FPlacementModeModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlacementModeModule"
  },
  {
    "label": "FPlacementCategoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlacementCategoryInfo"
  },
  {
    "label": "FDragHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDragHandler"
  },
  {
    "label": "FBuiltInPlacementCategories",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuiltInPlacementCategories"
  },
  {
    "label": "IPlacementModeModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlacementModeModule"
  },
  {
    "label": "FPlacementModeID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" UObject / Class . h \" # include \" GameFramework / Actor . h \" # include \" AssetRegistry / AssetData . h \" # include \" Widgets / SWidget . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" ActorFactories / ActorFactory . h \" # include \" ActorPlacementInfo . h \" # include \" GameFramework / Volume . h \" # include \" Editor . h \" # include \" Textures / SlateIcon . h \" class FNamePermissionList ; struct FPlaceableItem ; class FPlacementModeID { public :)",
    "insertText": "FPlacementModeID(const FPlacementModeID&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPlacementModeID&)",
    "insertText": "operator(const FPlacementModeID&)"
  },
  {
    "label": "FPlacementModeID()",
    "kind": "Method",
    "detail": "Function (private : class FPlacementModeModule ;)",
    "insertText": "FPlacementModeID()"
  },
  {
    "label": "FPlacementCategoryInfo()",
    "kind": "Method",
    "detail": "Function (} FName Category ; FGuid UniqueID ; } ; struct FPlacementCategoryInfo {)",
    "insertText": "FPlacementCategoryInfo(FText InDisplayName, FSlateIcon InDisplayIcon, FName InHandle, FString InTag, int32 InSortOrder = 0, bool bInSortable = true) : DisplayName(InDisplayName), DisplayIcon(InDisplayIcon), UniqueHandle(InHandle), SortOrder(InSortOrder), TagMetaData(MoveTemp(InTag)), bSortable(bInSortable)"
  },
  {
    "label": "FPlacementCategoryInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlacementCategoryInfo(FText InDisplayName, FName InHandle, FString InTag, int32 InSortOrder = 0, bool bInSortable = true) : DisplayName(InDisplayName), DisplayIcon(), UniqueHandle(InHandle), SortOrder(InSortOrder), TagMetaData(MoveTemp(InTag)), bSortable(bInSortable)"
  },
  {
    "label": "SWidget()",
    "kind": "Method",
    "detail": "Function (} FText DisplayName ; FText ShortDisplayName ; FSlateIcon DisplayIcon ; FName UniqueHandle ; int32 SortOrder ; FString TagMetaData ; TFunction<TSharedRef<)",
    "insertText": "SWidget()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (bool bSortable ; TArray<TSharedRef<FPlaceableItem>> CustomDraggableItems ; } ; struct FPlaceableItem { struct FDragHandler : public TSharedFromThis<FDragHandler> { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal(TSharedRef<FDragDropOperation>, FGetContentToDrag)"
  },
  {
    "label": "FPlaceableItem()",
    "kind": "Method",
    "detail": "Function (FGetContentToDrag GetContentToDrag ; TSharedPtr<IToolTip> ToolTip ; const FSlateBrush* IconBrush ; } ;)",
    "insertText": "FPlaceableItem() : Factory(nullptr)"
  },
  {
    "label": "FPlaceableItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlaceableItem(TScriptInterface<IAssetFactoryInterface> InAssetFactory, const FAssetData& InAssetData, TOptional<int32> InSortOrder = TOptional<int32>()) : Factory(Cast<UActorFactory>(InAssetFactory.GetObject())) , AssetFactory(InAssetFactory) , AssetData(InAssetData) , bAlwaysUseGenericThumbnail(false) , SortOrder(InSortOrder)"
  },
  {
    "label": "AutoSetNativeAndDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoSetNativeAndDisplayName()"
  },
  {
    "label": "FPlaceableItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlaceableItem(UActorFactory* InFactory, const FAssetData& InAssetData, TOptional<int32> InSortOrder = TOptional<int32>()) : Factory(InFactory) , AssetFactory(InFactory) , AssetData(InAssetData) , bAlwaysUseGenericThumbnail(false) , SortOrder(InSortOrder)"
  },
  {
    "label": "FPlaceableItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlaceableItem(UClass& InActorFactoryClass, TOptional<int32> InSortOrder = TOptional<int32>()) : Factory(GEditor->FindActorFactoryByClass(&InActorFactoryClass)) , AssetFactory(Factory) , AssetData(Factory ? Factory->GetDefaultActorClass(FAssetData()) : FAssetData()) , bAlwaysUseGenericThumbnail(false) , SortOrder(InSortOrder)"
  },
  {
    "label": "FPlaceableItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlaceableItem(TScriptInterface<IAssetFactoryInterface> InAssetFactory, const FAssetData& InAssetData, FName InClassThumbnailBrushOverride, FName InClassIconBrushOverride, TOptional<FLinearColor> InAssetTypeColorOverride = TOptional<FLinearColor>(), TOptional<int32> InSortOrder = TOptional<int32>(), TOptional<FText> InDisplayName = TOptional<FText>()) : Factory(Cast<UActorFactory>(InAssetFactory.GetObject())) , AssetFactory(InAssetFactory) , AssetData(InAssetData) , ClassThumbnailBrushOverride(InClassThumbnailBrushOverride) , ClassIconBrushOverride(InClassIconBrushOverride) , bAlwaysUseGenericThumbnail(true) , AssetTypeColorOverride(InAssetTypeColorOverride) , SortOrder(InSortOrder)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (DisplayName = InDisplayName .)",
    "insertText": "GetValue()"
  },
  {
    "label": "FPlaceableItem()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FPlaceableItem(TSharedPtr<FPlaceableItem::FDragHandler> InDragHandler , TOptional<int32> InSortOrder , FText InLabel , FString InName ): NativeName( InName ) , DisplayName( InLabel ) , bAlwaysUseGenericThumbnail(false) , SortOrder(InSortOrder) , DragHandler(InDragHandler)"
  },
  {
    "label": "FPlaceableItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlaceableItem(UClass& InActorFactoryClass, const FAssetData& InAssetData, FName InClassThumbnailBrushOverride = NAME_None, FName InClassIconBrushOverride = NAME_None, TOptional<FLinearColor> InAssetTypeColorOverride = TOptional<FLinearColor>(), TOptional<int32> InSortOrder = TOptional<int32>(), TOptional<FText> InDisplayName = TOptional<FText>() ) : Factory(GEditor->FindActorFactoryByClass(&InActorFactoryClass)) , AssetFactory(Factory) , AssetData(InAssetData) , ClassThumbnailBrushOverride(InClassThumbnailBrushOverride) , ClassIconBrushOverride(InClassIconBrushOverride) , bAlwaysUseGenericThumbnail(true) , AssetTypeColorOverride(InAssetTypeColorOverride) , SortOrder(InSortOrder)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (UClass* Class = AssetData .)",
    "insertText": "GetClass() == UClass::StaticClass() ? Cast<UClass>(AssetData.GetAsset())"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (Class ->)",
    "insertText": "GetName(NativeName)"
  },
  {
    "label": "GetDisplayNameText()",
    "kind": "Method",
    "detail": "Function (DisplayName = Class ->)",
    "insertText": "GetDisplayNameText()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} else { NativeName = AssetData . AssetName .)",
    "insertText": "ToString()"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (DisplayName =)",
    "insertText": "FromName(AssetData.AssetName)"
  },
  {
    "label": "GetNativeFName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetNativeFName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (NativeFName =)",
    "insertText": "FName(*NativeName)"
  },
  {
    "label": "Favorites()",
    "kind": "Method",
    "detail": "Function (} return NativeFName ; } public : UActorFactory* Factory = nullptr ; TScriptInterface<IAssetFactoryInterface> AssetFactory = nullptr ; FAssetData AssetData ; FString NativeName ; FText DisplayName ; FName ClassThumbnailBrushOverride ; FName ClassIconBrushOverride ; bool bAlwaysUseGenericThumbnail ; TOptional<FLinearColor> AssetTypeColorOverride ; TOptional<int32> SortOrder ; TSharedPtr<FDragHandler> DragHandler ; private : FName NativeFName ; } ; struct FBuiltInPlacementCategories { FName)",
    "insertText": "Favorites()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"Favorites\")"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"RecentlyPlaced\")"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"Basic\")"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"Lights\")"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"Shapes\")"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"Visual\")"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"Volumes\")"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(\"AllClasses\")"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "AddToRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToRecentlyPlaced(const TArray< UObject* >& Assets, UActorFactory* FactoryUsed = NULL)"
  },
  {
    "label": "AddToRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToRecentlyPlaced(const TArray< UObject* >& Assets, TScriptInterface<IAssetFactoryInterface> FactoryUsed)"
  },
  {
    "label": "AddToRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToRecentlyPlaced(Assets, Cast<UActorFactory>(FactoryUsed.GetObject()))"
  },
  {
    "label": "AddToRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToRecentlyPlaced(UObject* Asset, UActorFactory* FactoryUsed = NULL)"
  },
  {
    "label": "AddToRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToRecentlyPlaced(UObject* Asset, TScriptInterface<IAssetFactoryInterface> FactoryUsed)"
  },
  {
    "label": "AddToRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToRecentlyPlaced(Asset, Cast<UActorFactory>(FactoryUsed.GetObject()))"
  },
  {
    "label": "GetRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (} const TArray<FActorPlacementInfo>&)",
    "insertText": "GetRecentlyPlaced()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IPlacementModeModule, FOnPlacementModeCategoryListChanged)"
  },
  {
    "label": "OnPlacementModeCategoryListChanged()",
    "kind": "Method",
    "detail": "Function (FOnPlacementModeCategoryListChanged&)",
    "insertText": "OnPlacementModeCategoryListChanged()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IPlacementModeModule, FOnPlacementModeCategoryRefreshed, FName)"
  },
  {
    "label": "OnPlacementModeCategoryRefreshed()",
    "kind": "Method",
    "detail": "Function (FOnPlacementModeCategoryRefreshed&)",
    "insertText": "OnPlacementModeCategoryRefreshed()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IPlacementModeModule, FOnRecentlyPlacedChanged, const TArray< FActorPlacementInfo >&)"
  },
  {
    "label": "OnRecentlyPlacedChanged()",
    "kind": "Method",
    "detail": "Function (FOnRecentlyPlacedChanged&)",
    "insertText": "OnRecentlyPlacedChanged()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IPlacementModeModule, FOnAllPlaceableAssetsChanged)"
  },
  {
    "label": "OnAllPlaceableAssetsChanged()",
    "kind": "Method",
    "detail": "Function (FOnAllPlaceableAssetsChanged&)",
    "insertText": "OnAllPlaceableAssetsChanged()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IPlacementModeModule, FOnPlaceableItemFilteringChanged)"
  },
  {
    "label": "OnPlaceableItemFilteringChanged()",
    "kind": "Method",
    "detail": "Function (FOnPlaceableItemFilteringChanged&)",
    "insertText": "OnPlaceableItemFilteringChanged()"
  },
  {
    "label": "CreatePlacementModeBrowser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreatePlacementModeBrowser(TSharedRef<SDockTab> ParentTab)"
  },
  {
    "label": "RegisterPlacementCategory()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "RegisterPlacementCategory(const FPlacementCategoryInfo& Info)"
  },
  {
    "label": "UnregisterPlacementCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPlacementCategory(FName Handle)"
  },
  {
    "label": "GetRegisteredPlacementCategory()",
    "kind": "Method",
    "detail": "Function (const FPlacementCategoryInfo*)",
    "insertText": "GetRegisteredPlacementCategory(FName UniqueHandle)"
  },
  {
    "label": "GetCategoryPermissionList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FNamePermissionList>&)",
    "insertText": "GetCategoryPermissionList()"
  },
  {
    "label": "GetSortedCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSortedCategories(TArray<FPlacementCategoryInfo>& OutCategories)"
  },
  {
    "label": "RegisterPlaceableItem()",
    "kind": "Method",
    "detail": "Function (TOptional<FPlacementModeID>)",
    "insertText": "RegisterPlaceableItem(FName CategoryName, const TSharedRef<FPlaceableItem>& Item)"
  },
  {
    "label": "UnregisterPlaceableItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPlaceableItem(FPlacementModeID ID)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "bool(const TSharedPtr<FPlaceableItem>&)"
  },
  {
    "label": "RegisterPlaceableItemFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterPlaceableItemFilter(TPlaceableItemPredicate Predicate, FName OwnerName)"
  },
  {
    "label": "UnregisterPlaceableItemFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPlaceableItemFilter(FName OwnerName)"
  },
  {
    "label": "GetItemsForCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetItemsForCategory(FName Category, TArray<TSharedPtr<FPlaceableItem>>& OutItems)"
  },
  {
    "label": "GetFilteredItemsForCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredItemsForCategory(FName Category, TArray<TSharedPtr<FPlaceableItem>>& OutItems, TFunctionRef<bool(const TSharedPtr<FPlaceableItem>&)> Filter)"
  },
  {
    "label": "GetItemsWithNamesForCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetItemsWithNamesForCategory(FName CategoryName, TArray<TSharedPtr<FPlaceableItem>>& OutItems, const TArray<FName>& ItemNames)"
  },
  {
    "label": "RegenerateItemsForCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateItemsForCategory(FName Category)"
  }
]