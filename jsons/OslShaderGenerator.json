[
  {
    "label": "OslShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OslShaderGenerator"
  },
  {
    "label": "MX_GENOSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENOSL_API"
  },
  {
    "label": "OslShaderGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_OSLSHADERGENERATOR_H # define MATERIALX_OSLSHADERGENERATOR_H # include<MaterialXGenOsl / Export . h> # include<MaterialXGenShader / ShaderGenerator . h> MATERIALX_NAMESPACE_BEGIN using OslShaderGeneratorPtr = shared_ptr<class OslShaderGenerator> ; class OslShaderGenerator : public ShaderGenerator { public :)",
    "insertText": "OslShaderGenerator()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderGeneratorPtr)",
    "insertText": "create()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "emitFunctionCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionCalls(const ShaderGraph& graph, GenContext& context, ShaderStage& stage, uint32_t classification = 0u)"
  },
  {
    "label": "emitFunctionBodyBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionBodyBegin(const ShaderNode& node, GenContext& context, ShaderStage& stage, Syntax::Punctuation punc = Syntax::CURLY_BRACKETS)"
  },
  {
    "label": "registerShaderMetadata()",
    "kind": "Method",
    "detail": "Function (const string TARGET ; void)",
    "insertText": "registerShaderMetadata(const DocumentPtr& doc, GenContext& context)"
  },
  {
    "label": "createShader()",
    "kind": "Method",
    "detail": "Function (protected : const string T_FILE_EXTRA_ARGUMENTS ; ShaderPtr)",
    "insertText": "createShader(const string& name, ElementPtr element, GenContext& context)"
  },
  {
    "label": "emitLibraryIncludes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLibraryIncludes(ShaderStage& stage, GenContext& context)"
  },
  {
    "label": "emitShaderInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitShaderInputs(const VariableBlock& inputs, ShaderStage& stage)"
  },
  {
    "label": "emitShaderOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitShaderOutputs(const VariableBlock& inputs, ShaderStage& stage)"
  }
]