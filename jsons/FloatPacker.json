[
  {
    "label": "FFloatInfo_IEEE32",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloatInfo_IEEE32"
  },
  {
    "label": "TFloatPacker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFloatPacker"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Logging / LogMacros . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogFloatPacker, Log, All)"
  },
  {
    "label": "ToPackedType()",
    "kind": "Method",
    "detail": "Function (class FFloatInfo_IEEE32 { public : enum { MantissaBits = 2 3 } ; enum { ExponentBits = 8 } ; enum { SignShift = 3 1 } ; enum { ExponentBias = 1 2 7 } ; enum { MantissaMask = 0 x007fffff } ; enum { ExponentMask = 0 x7f800000 } ; enum { SignMask = 0 x80000000 } ; typedef float FloatType ; typedef uint32 PackedType ; PackedType)",
    "insertText": "ToPackedType(FloatType Value)"
  },
  {
    "label": "ToFloatType()",
    "kind": "Method",
    "detail": "Function (} FloatType)",
    "insertText": "ToFloatType(PackedType Value)"
  },
  {
    "label": "ExponentBias()",
    "kind": "Method",
    "detail": "Function (} } ; template<uint32 NumExponentBits,uint32 NumMantissaBits,bool bRound,FloatInfo = FFloatInfo_IEEE32> class TFloatPacker { public : enum { NumOutputsBits = NumExponentBits + NumMantissaBits + 1 } ; enum { MantissaShift = FloatInfo::MantissaBits - NumMantissaBits } ; enum {)",
    "insertText": "ExponentBias(1 << (NumExponentBits-1))"
  },
  {
    "label": "MantissaMask()",
    "kind": "Method",
    "detail": "Function (enum { SignShift = NumExponentBits + NumMantissaBits } ; enum {)",
    "insertText": "MantissaMask(1 << NumMantissaBits)"
  },
  {
    "label": "ExponentMask()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "ExponentMask((1 << NumExponentBits)-1)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (enum { SignMask = 1<<SignShift } ; enum { MinExponent = - ExponentBias - 1 } ; enum { MaxExponent = ExponentBias } ; typedef FloatInfo::PackedType PackedType ; typedef FloatInfo::FloatType FloatType ; PackedType)",
    "insertText": "Encode(FloatType Value)"
  },
  {
    "label": "ToPackedType()",
    "kind": "Method",
    "detail": "Function (} const PackedType ValuePacked =)",
    "insertText": "ToPackedType(Value)"
  },
  {
    "label": "Exponent()",
    "kind": "Method",
    "detail": "Function (PackedType Mantissa = ValuePacked& FloatInfo::MantissaMask ; int32)",
    "insertText": "Exponent(ValuePacked & FloatInfo::ExponentMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const PackedType Sign = ValuePacked>> FloatInfo::SignShift ; Exponent - = FloatInfo::ExponentBias ;)",
    "insertText": "if(bRound)"
  },
  {
    "label": "Mantissa()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mantissa(1 << (MantissaShift-1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Mantissa = 0 ; + + Exponent ; } } Mantissa>> = MantissaShift ;)",
    "insertText": "if(Exponent < MinExponent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Exponent > MaxExponent)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (Exponent = MaxExponent ; } Exponent - = MinExponent ;)",
    "insertText": "return(Sign << SignShift) | (Exponent << NumMantissaBits) | (Mantissa)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} FloatType)",
    "insertText": "Decode(PackedType Value)"
  },
  {
    "label": "Exponent()",
    "kind": "Method",
    "detail": "Function (} PackedType Mantissa = Value& MantissaMask ; int32)",
    "insertText": "Exponent(Value & ExponentMask)"
  },
  {
    "label": "ToFloatType()",
    "kind": "Method",
    "detail": "Function (const PackedType Sign = Value>> SignShift ; Exponent + = MinExponent ; Exponent + = FloatInfo::ExponentBias ; Mantissa<<= MantissaShift ; return)",
    "insertText": "ToFloatType((Sign << FloatInfo::SignShift) | (Exponent << FloatInfo::MantissaBits) | (Mantissa))"
  },
  {
    "label": "EncodeNoSign()",
    "kind": "Method",
    "detail": "Function (} # if 0 PackedType)",
    "insertText": "EncodeNoSign(FloatType Value)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (Exponent = MaxExponent ; } Exponent - = MinExponent ;)",
    "insertText": "return(Exponent << NumMantissaBits) | (Mantissa)"
  },
  {
    "label": "DecodeNoSign()",
    "kind": "Method",
    "detail": "Function (} FloatType)",
    "insertText": "DecodeNoSign(PackedType Value)"
  },
  {
    "label": "ToFloatType()",
    "kind": "Method",
    "detail": "Function (Exponent + = MinExponent ; Exponent + = FloatInfo::ExponentBias ; Mantissa<<= MantissaShift ; return)",
    "insertText": "ToFloatType((Exponent << FloatInfo::MantissaBits) | (Mantissa))"
  }
]