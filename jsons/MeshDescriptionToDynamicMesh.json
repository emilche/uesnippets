[
  {
    "label": "TMeshTangents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshTangents"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FMeshDescriptionToDynamicMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDescriptionToDynamicMesh"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PREDECLARE_GEOMETRY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" GeometryBase . h \" # include \" MeshDescription . h \" # include \" MeshTypes . h \")",
    "insertText": "PREDECLARE_GEOMETRY(template<typename RealType> class TMeshTangents)"
  },
  {
    "label": "SetPolygonGroupToMaterialIndexMap()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace Geometry { class FDynamicMesh3 ; } } struct FMeshDescription ; using UE::Geometry::FDynamicMesh3 ; class FMeshDescriptionToDynamicMesh { public : bool bPrintDebugMessages = false ; bool bEnableOutputGroups = true ; bool bCalculateMaps = true ; bool bDisableAttributes = false ; bool bTransformVertexColorsLinearToSRGB = true ; void)",
    "insertText": "SetPolygonGroupToMaterialIndexMap(const TArray<int32>& PolygonGroupToMaterialIndexMapIn)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (PolygonGroupToMaterialIndexMap = PolygonGroupToMaterialIndexMapIn ; } TArray<FTriangleID> TriIDMap ; TArray<FVertexID> VertIDMap ; bool bVIDsFromNonManifoldMeshDescriptionAttr = false ; enum class EPrimaryGroupMode { SetToZero,SetToPolygonID,SetToPolygonGroupID,SetToPolyGroup } ; EPrimaryGroupMode GroupMode = EPrimaryGroupMode::SetToPolyGroup ; void)",
    "insertText": "Convert(const FMeshDescription* MeshIn, FDynamicMesh3& MeshOut, bool bCopyTangents = false)"
  },
  {
    "label": "CopyTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTangents(const FMeshDescription* SourceMesh, const FDynamicMesh3* TargetMesh, UE::Geometry::TMeshTangents<float>* TangentsOut)"
  },
  {
    "label": "CopyTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTangents(const FMeshDescription* SourceMesh, const FDynamicMesh3* TargetMesh, UE::Geometry::TMeshTangents<double>* TangentsOut)"
  },
  {
    "label": "ApplyVertexColorTransform()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ApplyVertexColorTransform(FVector4f& Color)"
  }
]