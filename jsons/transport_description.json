[
  {
    "label": "SecurePolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SecurePolicy"
  },
  {
    "label": "IceRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IceRole"
  },
  {
    "label": "IceMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IceMode"
  },
  {
    "label": "ConnectionRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConnectionRole"
  },
  {
    "label": "IceParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceParameters"
  },
  {
    "label": "TransportDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransportDescription"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TRANSPORT_DESCRIPTION_H_ # define P2P_BASE_TRANSPORT_DESCRIPTION_H_ # include<memory> # include<string> # include<vector> # include \" absl / algorithm / container . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / rtc_error . h \" # include \" p2p / base / p2p_constants . h \" # include \" rtc_base / ssl_fingerprint . h \" # include \" rtc_base / system / rtc_export . h \" namespace cricket { enum SecurePolicy { SEC_DISABLED,SEC_ENABLED,SEC_REQUIRED } ; enum IceRole { ICEROLE_CONTROLLING = 0,ICEROLE_CONTROLLED,ICEROLE_UNKNOWN } ; enum IceMode { ICEMODE_FULL,ICEMODE_LITE } ; enum ConnectionRole { CONNECTIONROLE_NONE = 0,CONNECTIONROLE_ACTIVE,CONNECTIONROLE_PASSIVE,CONNECTIONROLE_ACTPASS,CONNECTIONROLE_HOLDCONN,} ; struct IceParameters { RTC_EXPORT webrtc::RTCErrorOr<IceParameters>)",
    "insertText": "Parse(absl::string_view raw_ufrag, absl::string_view raw_pwd)"
  },
  {
    "label": "IceParameters()",
    "kind": "Method",
    "detail": "Function (std::string ufrag ; std::string pwd ; bool renomination = false ;)",
    "insertText": "IceParameters()"
  },
  {
    "label": "IceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IceParameters(absl::string_view ice_ufrag, absl::string_view ice_pwd, bool ice_renomination) : ufrag(ice_ufrag), pwd(ice_pwd), renomination(ice_renomination)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const IceParameters& other)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} webrtc::RTCError)",
    "insertText": "Validate()"
  },
  {
    "label": "StringToConnectionRole()",
    "kind": "Method",
    "detail": "Function (} ; const char CONNECTIONROLE_ACTIVE_STR [ ] ; const char CONNECTIONROLE_PASSIVE_STR [ ] ; const char CONNECTIONROLE_ACTPASS_STR [ ] ; const char CONNECTIONROLE_HOLDCONN_STR [ ] ; auto* ICE_OPTION_TRICKLE = \" trickle \" ; auto* ICE_OPTION_RENOMINATION = \" renomination \" ; absl::optional<ConnectionRole>)",
    "insertText": "StringToConnectionRole(absl::string_view role_str)"
  },
  {
    "label": "ConnectionRoleToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectionRoleToString(const ConnectionRole& role, std::string* role_str)"
  },
  {
    "label": "TransportDescription()",
    "kind": "Method",
    "detail": "Function (struct TransportDescription {)",
    "insertText": "TransportDescription()"
  },
  {
    "label": "TransportDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportDescription(const std::vector<std::string>& transport_options, absl::string_view ice_ufrag, absl::string_view ice_pwd, IceMode ice_mode, ConnectionRole role, const rtc::SSLFingerprint* identity_fingerprint)"
  },
  {
    "label": "TransportDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportDescription(absl::string_view ice_ufrag, absl::string_view ice_pwd)"
  },
  {
    "label": "TransportDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportDescription(const TransportDescription& from)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TransportDescription&)",
    "insertText": "operator(const TransportDescription& from)"
  },
  {
    "label": "HasOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOption(absl::string_view option)"
  },
  {
    "label": "AddOption()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOption(absl::string_view option)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (transport_options .)",
    "insertText": "emplace_back(option)"
  },
  {
    "label": "secure()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "secure()"
  },
  {
    "label": "CopyFingerprint()",
    "kind": "Method",
    "detail": "Function (} rtc::SSLFingerprint*)",
    "insertText": "CopyFingerprint(const rtc::SSLFingerprint* from)"
  }
]