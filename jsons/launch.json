[
  {
    "label": "PathToTransfer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PathToTransfer"
  },
  {
    "label": "HandleToTransfer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HandleToTransfer"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetAppOutputScopedAllowBaseSyncPrimitives",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GetAppOutputScopedAllowBaseSyncPrimitives"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_LAUNCH_H_ # define BASE_PROCESS_LAUNCH_H_ # include<stddef . h> # include<string> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / command_line . h \" # include \" base / environment . h \" # include \" base / files / file_path . h \" # include \" base / memory / raw_ptr . h \" # include \" base / process / process . h \" # include \" base / process / process_handle . h \" # include \" base / strings / string_piece . h \" # include \" base / threading / thread_restrictions . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/windows_types.h\" #elif BUILDFLAG(IS_FUCHSIA) #include <lib/fdio/spawn.h> #include <zircon/types.h> #endif #if BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) #include \"base/posix/file_descriptor_shuffle.h\" #endif #if BUILDFLAG(IS_MAC)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (base::FilePath path ; zx_handle_t handle ; } ; struct HandleToTransfer { uint32_t id ; zx_handle_t handle ; } ; typedef std::vector<HandleToTransfer> HandlesToTransferVector ; typedef std::vector<std::pair<int,int>> FileHandleMappingVector ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif struct BASE_EXPORT LaunchOptions { #)",
    "insertText": "if(BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)) && !BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "PreExecDelegate()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "PreExecDelegate()"
  },
  {
    "label": "PreExecDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreExecDelegate(const PreExecDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PreExecDelegate&)",
    "insertText": "operator(const PreExecDelegate&)"
  },
  {
    "label": "RunAsyncSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunAsyncSafe()"
  },
  {
    "label": "LaunchOptions()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "LaunchOptions()"
  },
  {
    "label": "LaunchOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchOptions(const LaunchOptions&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (bool elevated = false ; bool feedback_cursor_off = false ; enum class Inherit { kSpecific,kAll } ; Inherit inherit_mode = Inherit::kSpecific ; HandlesToInheritVector handles_to_inherit ; UserTokenHandle as_user = nullptr ; bool empty_desktop_name = false ; HANDLE job_handle = nullptr ; HANDLE stdin_handle = nullptr ; HANDLE stdout_handle = nullptr ; HANDLE stderr_handle = nullptr ; bool force_breakaway_from_job_ = false ; bool grant_foreground_privilege = false ; bool disable_cetcompat = false ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) || BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (bool clear_environment = false ; # endif # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (bool allow_new_privs = false ; bool kill_on_parent_death = false ; # endif # if)",
    "insertText": "BUILDFLAG(IS_MAC)"
  },
  {
    "label": "AddHandleToTransfer()",
    "kind": "Method",
    "detail": "Function (HandlesToTransferVector handles_to_transfer ; uint32_t)",
    "insertText": "AddHandleToTransfer(HandlesToTransferVector* handles_to_transfer, zx_handle_t handle)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif raw_ptr<const std::vector<int>> maximize_rlimits = nullptr ; bool new_process_group = false ; # endif # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS)"
  },
  {
    "label": "LaunchProcess()",
    "kind": "Method",
    "detail": "Function (# endif } ; BASE_EXPORT Process)",
    "insertText": "LaunchProcess(const CommandLine& cmdline, const LaunchOptions& options)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) BASE_EXPORT Process LaunchProcess(const CommandLine::StringType& cmdline, const LaunchOptions& options)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) BASE_EXPORT Process LaunchProcess(const std::vector<std::string>& argv, const LaunchOptions& options)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_APPLE) BASE_EXPORT void CloseSuperfluousFds(const InjectiveMultimap& saved_map)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) BASE_EXPORT bool SetJobObjectLimitFlags(HANDLE job_object, DWORD limit_flags)"
  },
  {
    "label": "RouteStdioToConsole()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "RouteStdioToConsole(bool create_console_if_not_found)"
  },
  {
    "label": "GetAppOutput()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT bool)",
    "insertText": "GetAppOutput(const CommandLine& cl, std::string* output)"
  },
  {
    "label": "GetAppOutputAndError()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetAppOutputAndError(const CommandLine& cl, std::string* output)"
  },
  {
    "label": "GetAppOutputWithExitCode()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetAppOutputWithExitCode(const CommandLine& cl, std::string* output, int* exit_code)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) BASE_EXPORT bool GetAppOutput(CommandLine::StringPieceType cl, std::string* output)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) BASE_EXPORT bool GetAppOutput(const std::vector<std::string>& argv, std::string* output)"
  },
  {
    "label": "GetAppOutputAndError()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetAppOutputAndError(const std::vector<std::string>& argv, std::string* output)"
  },
  {
    "label": "RaiseProcessToHighPriority()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT void)",
    "insertText": "RaiseProcessToHighPriority()"
  },
  {
    "label": "LaunchOptionsForTest()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT LaunchOptions)",
    "insertText": "LaunchOptionsForTest()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) BASE_EXPORT pid_t ForkWithFlags(int flags, pid_t* ptid, pid_t* ctid)"
  }
]