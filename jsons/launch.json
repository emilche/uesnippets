[
  {
    "label": "PathToTransfer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PathToTransfer"
  },
  {
    "label": "HandleToTransfer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HandleToTransfer"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "GetAppOutputScopedAllowBaseSyncPrimitives",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GetAppOutputScopedAllowBaseSyncPrimitives"
  },
  {
    "label": "AddHandleToTransfer()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "AddHandleToTransfer(\n      HandlesToTransferVector* handles_to_transfer,\n      zx_handle_t handle)"
  },
  {
    "label": "LaunchProcess()",
    "kind": "Method",
    "detail": "Function (Process)",
    "insertText": "LaunchProcess(const CommandLine& cmdline,\n                                  const LaunchOptions& options)"
  },
  {
    "label": "LaunchProcess()",
    "kind": "Method",
    "detail": "Function (Process)",
    "insertText": "LaunchProcess(const CommandLine::StringType& cmdline,\n                                  const LaunchOptions& options)"
  },
  {
    "label": "LaunchProcess()",
    "kind": "Method",
    "detail": "Function (Process)",
    "insertText": "LaunchProcess(const std::vector<std::string>& argv,\n                                  const LaunchOptions& options)"
  },
  {
    "label": "CloseSuperfluousFds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseSuperfluousFds(const InjectiveMultimap& saved_map)"
  },
  {
    "label": "SetJobObjectLimitFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetJobObjectLimitFlags(HANDLE job_object, DWORD limit_flags)"
  },
  {
    "label": "RouteStdioToConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RouteStdioToConsole(bool create_console_if_not_found)"
  },
  {
    "label": "GetAppOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAppOutput(const CommandLine& cl, std::string* output)"
  },
  {
    "label": "GetAppOutputAndError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAppOutputAndError(const CommandLine& cl,\n                                      std::string* output)"
  },
  {
    "label": "GetAppOutputWithExitCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAppOutputWithExitCode(const CommandLine& cl,\n                                          std::string* output, int* exit_code)"
  },
  {
    "label": "GetAppOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAppOutput(CommandLine::StringPieceType cl,\n                              std::string* output)"
  },
  {
    "label": "GetAppOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAppOutput(const std::vector<std::string>& argv,\n                              std::string* output)"
  },
  {
    "label": "GetAppOutputAndError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAppOutputAndError(const std::vector<std::string>& argv,\n                                      std::string* output)"
  },
  {
    "label": "RaiseProcessToHighPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseProcessToHighPriority()"
  },
  {
    "label": "LaunchOptionsForTest()",
    "kind": "Method",
    "detail": "Function (LaunchOptions)",
    "insertText": "LaunchOptionsForTest()"
  },
  {
    "label": "ForkWithFlags()",
    "kind": "Method",
    "detail": "Function (pid_t)",
    "insertText": "ForkWithFlags(int flags, pid_t* ptid, pid_t* ctid)"
  }
]