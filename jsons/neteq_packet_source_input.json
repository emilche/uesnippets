[
  {
    "label": "RtpFileSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpFileSource"
  },
  {
    "label": "NetEqPacketSourceInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqPacketSourceInput"
  },
  {
    "label": "NetEqRtpDumpInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqRtpDumpInput"
  },
  {
    "label": "NetEqPacketSourceInput()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_PACKET_SOURCE_INPUT_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_PACKET_SOURCE_INPUT_H_ # include<map> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" modules / audio_coding / neteq / tools / neteq_input . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" namespace webrtc { namespace test { class RtpFileSource ; class NetEqPacketSourceInput : public NetEqInput { public : using RtpHeaderExtensionMap = std::map<int,webrtc::RTPExtensionType> ;)",
    "insertText": "NetEqPacketSourceInput()"
  },
  {
    "label": "NextPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextPacketTime()"
  },
  {
    "label": "PopPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PacketData>)",
    "insertText": "PopPacket()"
  },
  {
    "label": "NextHeader()",
    "kind": "Method",
    "detail": "Function (absl::optional<RTPHeader>)",
    "insertText": "NextHeader()"
  },
  {
    "label": "ended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ended()"
  },
  {
    "label": "LoadNextPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadNextPacket()"
  },
  {
    "label": "NetEqRtpDumpInput()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t> next_output_event_ms_ ; private : std::unique_ptr<Packet> packet_ ; } ; class NetEqRtpDumpInput final : public NetEqPacketSourceInput { public :)",
    "insertText": "NetEqRtpDumpInput(absl::string_view file_name, const RtpHeaderExtensionMap& hdr_ext_map, absl::optional<uint32_t> ssrc_filter)"
  },
  {
    "label": "NextOutputEventTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextOutputEventTime()"
  },
  {
    "label": "AdvanceOutputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceOutputEvent()"
  },
  {
    "label": "source()",
    "kind": "Method",
    "detail": "Function (protected : PacketSource*)",
    "insertText": "source()"
  }
]