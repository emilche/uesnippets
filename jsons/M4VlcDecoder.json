[
  {
    "label": "M4BlockVlcCodeTab",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "M4BlockVlcCodeTab"
  },
  {
    "label": "M4VlcDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4VlcDecoder"
  },
  {
    "label": "M4BitstreamParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4BitstreamParser"
  },
  {
    "label": "MK_VLC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" vdecmpeg4 . h \" # include \" M4Memory . h \" # include \" M4Bitstream . h \" namespace vdecmpeg4 { # define)",
    "insertText": "MK_VLC(a,b) \\ ( ((a)&0x1ffff) | ((b)<<17) ) #define VLC_CODE(a) \\ ((a)&0x1ffff) #define VLC_LEN(a) \\ ((a)>>17) #define VLC_ERROR MK_VLC(0x1ffff, 0)"
  },
  {
    "label": "M4VlcDecoder()",
    "kind": "Method",
    "detail": "Function (struct M4BlockVlcCodeTab { M4_VLC* mVlcCodeTab [ 3 ] ; void* mMaxLevel ; void* mMaxRun ; } ; class M4VlcDecoder { public :)",
    "insertText": "M4VlcDecoder()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init()"
  },
  {
    "label": "getCoeffIntraNoAsm()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "getCoeffIntraNoAsm(int32& run, int32& last, M4Bitstream& bs)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (uint32 bits = bs .)",
    "insertText": "show(12)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(bits >= 8)"
  },
  {
    "label": "getIntraVlcTab()",
    "kind": "Method",
    "detail": "Function (M4_VLC vlc =)",
    "insertText": "getIntraVlcTab(bits)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(vlc != VLC_ERROR)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (bs .)",
    "insertText": "skip(VLC_LEN(vlc))"
  },
  {
    "label": "VLC_CODE()",
    "kind": "Method",
    "detail": "Function (int32 level ; uint32 code =)",
    "insertText": "VLC_CODE(vlc)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(code >> 8)"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (level = code& 2 5 5 ;)",
    "insertText": "last(code >> 16)"
  },
  {
    "label": "getBit()",
    "kind": "Method",
    "detail": "Function (int32 ret = bs .)",
    "insertText": "getBit()"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (bs .)",
    "insertText": "skip((escMode == 2) ? 2 : 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (level + = mMaxLevel [ last ] [ run ] ; } else)",
    "insertText": "if(escMode == 2)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (run + = mMaxRun [ last ] [ level ] + 1 ; } else {)",
    "insertText": "M4CHECK(0)"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "last(int32) bs.getBits(1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(int32) bs.getBits(6)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (bs .)",
    "insertText": "skip(1)"
  },
  {
    "label": "level()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "level(int32) bs.getBits(12)"
  },
  {
    "label": "getCoeffInterNoAsm()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "getCoeffInterNoAsm(int32& run, int32& last, M4Bitstream& bs)"
  },
  {
    "label": "getInterVlcTab()",
    "kind": "Method",
    "detail": "Function (M4_VLC vlc =)",
    "insertText": "getInterVlcTab(bits)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(code >> 4)"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (level = code& 1 5 ;)",
    "insertText": "last(code >> 12)"
  },
  {
    "label": "getIntraVlcTab()",
    "kind": "Method",
    "detail": "Function (} private : M4_VLC)",
    "insertText": "getIntraVlcTab(uint32 bits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bits >= 128)"
  },
  {
    "label": "getInterVlcTab()",
    "kind": "Method",
    "detail": "Function (} else { return mIntraCodeTab . mVlcCodeTab [ 2 ] [ bits - 8 ] ; } } M4_VLC)",
    "insertText": "getInterVlcTab(uint32 bits)"
  },
  {
    "label": "M4VlcDecoder()",
    "kind": "Method",
    "detail": "Function (} else { return mInterCodeTab . mVlcCodeTab [ 2 ] [ bits - 8 ] ; } })",
    "insertText": "M4VlcDecoder(const M4VlcDecoder &pObj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const M4VlcDecoder&)",
    "insertText": "operator(const M4VlcDecoder &pObj)"
  }
]