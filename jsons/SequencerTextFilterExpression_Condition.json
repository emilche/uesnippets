[
  {
    "label": "FSequencerTextFilterExpression_Condition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTextFilterExpression_Condition"
  },
  {
    "label": "FSequencerTextFilterExpression_Condition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Filters / SequencerTextFilterExpressionContext . h \" class FSequencerTextFilterExpression_Condition : public FSequencerTextFilterExpressionContext { public :)",
    "insertText": "FSequencerTextFilterExpression_Condition(ISequencerTrackFilters& InFilterInterface)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetKeys()"
  },
  {
    "label": "GetValueType()",
    "kind": "Method",
    "detail": "Function (ESequencerTextFilterValueType)",
    "insertText": "GetValueType()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescription()"
  },
  {
    "label": "TestComplexExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestComplexExpression(const FName& InKey , const FTextFilterString& InValue , const ETextFilterComparisonOperation InComparisonOperation , const ETextFilterTextComparisonMode InTextComparisonMode)"
  }
]