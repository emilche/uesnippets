[
  {
    "label": "RtpRtcpInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpRtcpInterface"
  },
  {
    "label": "PacketRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketRouter"
  },
  {
    "label": "PacketRouter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_PACING_PACKET_ROUTER_H_ # define MODULES_PACING_PACKET_ROUTER_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<memory> # include<unordered_map> # include<utility> # include<vector> # include \" api / transport / network_types . h \" # include \" modules / pacing / pacing_controller . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtcp_packet . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RtpRtcpInterface ; class PacketRouter : public PacingController::PacketSender { public :)",
    "insertText": "PacketRouter()"
  },
  {
    "label": "PacketRouter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketRouter(uint16_t start_transport_seq)"
  },
  {
    "label": "PacketRouter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketRouter(const PacketRouter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PacketRouter&)",
    "insertText": "operator(const PacketRouter&)"
  },
  {
    "label": "AddSendRtpModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSendRtpModule(RtpRtcpInterface* rtp_module, bool remb_candidate)"
  },
  {
    "label": "RemoveSendRtpModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSendRtpModule(RtpRtcpInterface* rtp_module)"
  },
  {
    "label": "AddReceiveRtpModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReceiveRtpModule(RtcpFeedbackSenderInterface* rtcp_sender, bool remb_candidate)"
  },
  {
    "label": "RemoveReceiveRtpModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReceiveRtpModule(RtcpFeedbackSenderInterface* rtcp_sender)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacket(std::unique_ptr<RtpPacketToSend> packet, const PacedPacketInfo& cluster_info)"
  },
  {
    "label": "FetchFec()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "FetchFec()"
  },
  {
    "label": "GeneratePadding()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "GeneratePadding(DataSize size)"
  },
  {
    "label": "OnAbortedRetransmissions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbortedRetransmissions(uint32_t ssrc, rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "GetRtxSsrcForMedia()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "GetRtxSsrcForMedia(uint32_t ssrc)"
  },
  {
    "label": "CurrentTransportSequenceNumber()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "CurrentTransportSequenceNumber()"
  },
  {
    "label": "SendRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRemb(int64_t bitrate_bps, std::vector<uint32_t> ssrcs)"
  },
  {
    "label": "SendCombinedRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCombinedRtcpPacket(std::vector<std::unique_ptr<rtcp::RtcpPacket>> packets)"
  },
  {
    "label": "AddRembModuleCandidate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddRembModuleCandidate(RtcpFeedbackSenderInterface* candidate_module, bool media_sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(modules_mutex_)"
  },
  {
    "label": "MaybeRemoveRembModuleCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeRemoveRembModuleCandidate(RtcpFeedbackSenderInterface* candidate_module, bool media_sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(modules_mutex_)"
  },
  {
    "label": "UnsetActiveRembModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetActiveRembModule() RTC_EXCLUSIVE_LOCKS_REQUIRED(modules_mutex_)"
  },
  {
    "label": "DetermineActiveRembModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineActiveRembModule() RTC_EXCLUSIVE_LOCKS_REQUIRED(modules_mutex_)"
  },
  {
    "label": "AddSendRtpModuleToMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSendRtpModuleToMap(RtpRtcpInterface* rtp_module, uint32_t ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(modules_mutex_)"
  },
  {
    "label": "RemoveSendRtpModuleFromMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSendRtpModuleFromMap(uint32_t ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(modules_mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex modules_mutex_ ; std::unordered_map<uint32_t,RtpRtcpInterface*> send_modules_map_)",
    "insertText": "RTC_GUARDED_BY(modules_mutex_)"
  }
]