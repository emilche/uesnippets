[
  {
    "label": "ReturnAsParamAdapter()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_POST_TASK_AND_REPLY_WITH_RESULT_INTERNAL_H_ # define BASE_TASK_POST_TASK_AND_REPLY_WITH_RESULT_INTERNAL_H_ # include<memory> # include<utility> # include \" base / callback . h \" # include \" base / check . h \" namespace base { namespace internal { template<ReturnType> void)",
    "insertText": "ReturnAsParamAdapter(OnceCallback<ReturnType()> func, std::unique_ptr<ReturnType>* result)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (result ->)",
    "insertText": "reset(new ReturnType(std::move(func).Run()))"
  },
  {
    "label": "ReplyAdapter()",
    "kind": "Method",
    "detail": "Function (} template<TaskReturnType,ReplyArgType> void)",
    "insertText": "ReplyAdapter(OnceCallback<void(ReplyArgType)> callback, std::unique_ptr<TaskReturnType>* result)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(result->get())"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(callback).Run(std::move(**result))"
  }
]