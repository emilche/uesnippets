[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGPUSkinCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCache"
  },
  {
    "label": "FRayTracingSkinnedGeometryUpdateQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingSkinnedGeometryUpdateQueue"
  },
  {
    "label": "FSkeletalMeshObjectGPUSkin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObjectGPUSkin"
  },
  {
    "label": "FVertexOffsetBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexOffsetBuffers"
  },
  {
    "label": "FDynamicSkelMeshObjectDataGPUSkin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicSkelMeshObjectDataGPUSkin"
  },
  {
    "label": "FMorphGPUSkinVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMorphGPUSkinVertex"
  },
  {
    "label": "FMorphVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMorphVertexBuffer"
  },
  {
    "label": "FMorphVertexBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMorphVertexBufferPool"
  },
  {
    "label": "FVertexFactoryBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexFactoryBuffers"
  },
  {
    "label": "FSkeletalMeshDeformerHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshDeformerHelpers"
  },
  {
    "label": "FSkeletalMeshObjectNanite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObjectNanite"
  },
  {
    "label": "FVertexFactoryData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryData"
  },
  {
    "label": "FSkeletalMeshObjectLOD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshObjectLOD"
  },
  {
    "label": "FGPUMorphUpdateCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUMorphUpdateCS"
  },
  {
    "label": "FGPUMorphNormalizeCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUMorphNormalizeCS"
  },
  {
    "label": "FDynamicSkelMeshObjectDataGPUSkin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ProfilingDebugging / ResourceSize . h \" # include \" RenderResource . h \" # include \" RayTracingGeometry . h \" # include \" ShaderParameters . h \" # include \" Components / ExternalMorphSet . h \" # include \" Components / SkinnedMeshComponent . h \" # include \" GlobalShader . h \" # include \" GPUSkinVertexFactory . h \" # include \" SkeletalRenderPublic . h \" # include \" ClothingSystemRuntimeTypes . h \" # include \" Rendering / SkeletalMeshRenderData . h \" # include \" Rendering / SkeletalMeshLODRenderData . h \" # include \" Animation / MeshDeformerGeometry . h \" enum class EGPUSkinCacheEntryMode ; class FGPUSkinCache ; class FRayTracingSkinnedGeometryUpdateQueue ; class FSkeletalMeshObjectGPUSkin ; class FVertexOffsetBuffers ; enum class ESkeletalMeshGPUSkinTechnique : uint8 {,GPUSkinCache,MeshDeformer } ; class FDynamicSkelMeshObjectDataGPUSkin {)",
    "insertText": "FDynamicSkelMeshObjectDataGPUSkin()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "AllocDynamicSkelMeshObjectDataGPUSkin()",
    "kind": "Method",
    "detail": "Function (public : FDynamicSkelMeshObjectDataGPUSkin*)",
    "insertText": "AllocDynamicSkelMeshObjectDataGPUSkin()"
  },
  {
    "label": "FreeDynamicSkelMeshObjectDataGPUSkin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDynamicSkelMeshObjectDataGPUSkin(FDynamicSkelMeshObjectDataGPUSkin* Who)"
  },
  {
    "label": "InitDynamicSkelMeshObjectDataGPUSkin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDynamicSkelMeshObjectDataGPUSkin(USkinnedMeshComponent* InMeshComponent, FSkeletalMeshRenderData* InSkeletalMeshRenderData, FSkeletalMeshObjectGPUSkin* InMeshObject, int32 InLODIndex, const FMorphTargetWeightMap& InActiveMorphTargets, const TArray<float>& InMorphTargetWeights, EPreviousBoneTransformUpdateMode PreviousBoneTransformUpdateMode, const FExternalMorphWeightData& InExternalMorphWeightData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FMatrix44f> ReferenceToLocal ; TArray<FMatrix44f> ReferenceToLocalForRayTracing ; TArray<FMatrix44f> PreviousReferenceToLocal ; TArray<FMatrix44f> PreviousReferenceToLocalForRayTracing ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "ActiveMorphTargetsEqual()",
    "kind": "Method",
    "detail": "Function (# endif int32 LODIndex ; # if RHI_RAYTRACING int32 RayTracingLODIndex ; # endif FMorphTargetWeightMap ActiveMorphTargets ; TArray<float> MorphTargetWeights ; TArray<int32> SectionIdsUseByActiveMorphTargets ; TArray<int32> SectionIdsUseByActiveMorphTargetsForRayTracing ; int32 NumWeightedActiveMorphTargets ; FExternalMorphWeightData ExternalMorphWeightData ; FExternalMorphSets ExternalMorphSets ; TMap<int32,FClothSimulData> ClothingSimData ; FMatrix ClothObjectLocalToWorld ; FMatrix LocalToWorld ; float ClothBlendWeight ; bool)",
    "insertText": "ActiveMorphTargetsEqual(const FMorphTargetWeightMap& InCompareActiveMorphTargets, const TArray<float>& CompareMorphTargetWeights)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "AddDedicatedSystemMemoryBytes()",
    "kind": "Method",
    "detail": "Function (CumulativeResourceSize .)",
    "insertText": "AddDedicatedSystemMemoryBytes(sizeof(*this))"
  },
  {
    "label": "AddUnknownMemoryBytes()",
    "kind": "Method",
    "detail": "Function (CumulativeResourceSize .)",
    "insertText": "AddUnknownMemoryBytes(ReferenceToLocal.GetAllocatedSize())"
  },
  {
    "label": "AddUnknownMemoryBytes()",
    "kind": "Method",
    "detail": "Function (CumulativeResourceSize .)",
    "insertText": "AddUnknownMemoryBytes(ActiveMorphTargets.GetAllocatedSize())"
  },
  {
    "label": "FMorphGPUSkinVertex()",
    "kind": "Method",
    "detail": "Function (ESkeletalMeshGPUSkinTechnique GPUSkinTechnique ; # if RHI_RAYTRACING uint8 bAnySegmentUsesWorldPositionOffset : 1 ; # endif } ; struct FMorphGPUSkinVertex { FVector3f DeltaPosition ; FVector3f DeltaTangentZ ;)",
    "insertText": "FMorphGPUSkinVertex()"
  },
  {
    "label": "FMorphGPUSkinVertex()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FMorphGPUSkinVertex(const FVector3f& InDeltaPosition, const FVector3f& InDeltaTangentZ)"
  },
  {
    "label": "FMorphVertexBuffer()",
    "kind": "Method",
    "detail": "Function (DeltaPosition = InDeltaPosition ; DeltaTangentZ = InDeltaTangentZ ; } } ; class FMorphVertexBuffer : public FVertexBuffer { public :)",
    "insertText": "FMorphVertexBuffer() : bHasBeenUpdated(false) , bNeedsInitialClear(true) , bUsesComputeShader(false) , LODIdx(-1) , SkelMeshRenderData(nullptr)"
  },
  {
    "label": "FMorphVertexBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMorphVertexBuffer(FSkeletalMeshRenderData* InSkelMeshRenderData, int32 InLODIdx, ERHIFeatureLevel::Type InFeatureLevel) : bHasBeenUpdated(false) , bNeedsInitialClear(true) , LODIdx(InLODIdx) , FeatureLevel(InFeatureLevel) , SkelMeshRenderData(InSkelMeshRenderData)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (bUsesComputeShader = false ; } void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "RecreateResourcesIfRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateResourcesIfRequired(FRHICommandListBase& RHICmdList, bool bInUsesComputeShader)"
  },
  {
    "label": "UpdateRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRHI(RHICmdList)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "GetResourceSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetResourceSize()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SIZE_T ResourceSize =)",
    "insertText": "sizeof(*this)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (FSkeletalMeshLODRenderData& LodData = SkelMeshRenderData -> LODRenderData [ LODIdx ] ; ResourceSize + = LodData .)",
    "insertText": "GetNumVertices() * sizeof(FMorphGPUSkinVertex)"
  },
  {
    "label": "GetNumVerticies()",
    "kind": "Method",
    "detail": "Function (} return ResourceSize ; } SIZE_T)",
    "insertText": "GetNumVerticies()"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (FSkeletalMeshLODRenderData& LodData = SkelMeshRenderData -> LODRenderData [ LODIdx ] ; return LodData .)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetSRV()",
    "kind": "Method",
    "detail": "Function (} bool bHasBeenUpdated ; bool bNeedsInitialClear ; FRHIShaderResourceView*)",
    "insertText": "GetSRV()"
  },
  {
    "label": "FMorphVertexBuffer()",
    "kind": "Method",
    "detail": "Function (MorphVertexBuffers [ 0 ] =)",
    "insertText": "FMorphVertexBuffer(InSkelMeshRenderData, InLOD, InFeatureLevel)"
  },
  {
    "label": "FMorphVertexBufferPool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMorphVertexBufferPool()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitResources(const FName& OwnerName)"
  },
  {
    "label": "EnableDoubleBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDoubleBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetUpdatedFrameNumber()",
    "kind": "Method",
    "detail": "Function (UpdatedFrameNumber = FrameNumber ; } uint32)",
    "insertText": "GetUpdatedFrameNumber()"
  },
  {
    "label": "GetMorphVertexBufferForReading()",
    "kind": "Method",
    "detail": "Function (const FMorphVertexBuffer&)",
    "insertText": "GetMorphVertexBufferForReading(bool bPrevious)"
  },
  {
    "label": "GetMorphVertexBufferForWriting()",
    "kind": "Method",
    "detail": "Function (FMorphVertexBuffer&)",
    "insertText": "GetMorphVertexBufferForWriting()"
  },
  {
    "label": "FSkeletalMeshObjectGPUSkin()",
    "kind": "Method",
    "detail": "Function (private : FMorphVertexBuffer MorphVertexBuffers [ 2 ] ; bool bInitializedResources = false ; bool bDoubleBuffer = false ; uint32 CurrentBuffer = 0 ; uint32 PreviousRevisionNumber = 0 ; uint32 CurrentRevisionNumber = 0 ; uint32 UpdatedFrameNumber = 0 ; } ; class FSkeletalMeshObjectGPUSkin : public FSkeletalMeshObject { public :)",
    "insertText": "FSkeletalMeshObjectGPUSkin(USkinnedMeshComponent* InMeshComponent, FSkeletalMeshRenderData* InSkelMeshRenderData, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "FSkeletalMeshObjectGPUSkin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSkeletalMeshObjectGPUSkin()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources(USkinnedMeshComponent* InMeshComponent)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int32 LODIndex,USkinnedMeshComponent* InMeshComponent,const FMorphTargetWeightMap& InActiveMorphTargets, const TArray<float>& InMorphTargetWeights, EPreviousBoneTransformUpdateMode PreviousBoneTransformUpdateMode, const FExternalMorphWeightData& InExternalMorphWeightData)"
  },
  {
    "label": "UpdateDynamicData_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDynamicData_RenderThread(FGPUSkinCache* GPUSkinCache, FRHICommandList& RHICmdList, FDynamicSkelMeshObjectDataGPUSkin* InDynamicData, FSceneInterface* Scene, uint64 FrameNumberToPrepare, uint32 RevisionNumber, uint32 PreviousRevisionNumber, bool bRecreating)"
  },
  {
    "label": "GetSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (const FVertexFactory*)",
    "insertText": "GetSkinVertexFactory(const FSceneView* View, int32 LODIndex,int32 ChunkIdx, ESkinVertexFactoryMode VFMode = ESkinVertexFactoryMode::Default)"
  },
  {
    "label": "GetStaticSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (const FVertexFactory*)",
    "insertText": "GetStaticSkinVertexFactory(int32 LODIndex, int32 ChunkIdx, ESkinVertexFactoryMode VFMode)"
  },
  {
    "label": "GetComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (TArray<FTransform>*)",
    "insertText": "GetComponentSpaceTransforms()"
  },
  {
    "label": "GetReferenceToLocalMatrices()",
    "kind": "Method",
    "detail": "Function (const TArray<FMatrix44f>&)",
    "insertText": "GetReferenceToLocalMatrices()"
  },
  {
    "label": "GetCachedGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCachedGeometry(FCachedGeometry& OutCachedGeometry)"
  },
  {
    "label": "GetDeformerGeometry()",
    "kind": "Method",
    "detail": "Function (FMeshDeformerGeometry&)",
    "insertText": "GetDeformerGeometry(int32 LODIndex)"
  },
  {
    "label": "IsGPUSkinMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGPUSkinMesh()"
  },
  {
    "label": "QueuePendingRayTracingGeometryUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueuePendingRayTracingGeometryUpdate(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetLOD()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetLOD()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (DynamicData ->)",
    "insertText": "GetResourceSizeEx(CumulativeResourceSize)"
  },
  {
    "label": "AddUnknownMemoryBytes()",
    "kind": "Method",
    "detail": "Function (} CumulativeResourceSize .)",
    "insertText": "AddUnknownMemoryBytes(LODs.GetAllocatedSize())"
  },
  {
    "label": "CalcNumActiveGPUMorphSets()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "CalcNumActiveGPUMorphSets(FMorphVertexBuffer& MorphVertexBuffer, const FExternalMorphSets& ExternalMorphSets)"
  },
  {
    "label": "IsExternalMorphSetActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalMorphSetActive(int32 MorphSetID, const FExternalMorphSet& MorphSet)"
  },
  {
    "label": "GetSkinWeightVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FSkinWeightVertexBuffer*)",
    "insertText": "GetSkinWeightVertexBuffer(int32 LODIndex)"
  },
  {
    "label": "GetBaseSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (FGPUBaseSkinVertexFactory const*)",
    "insertText": "GetBaseSkinVertexFactory(int32 LODIndex, int32 ChunkIdx)"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (struct FVertexFactoryBuffers { FStaticMeshVertexBuffers* StaticVertexBuffers = nullptr ; FSkinWeightVertexBuffer* SkinWeightVertexBuffer = nullptr ; FColorVertexBuffer* ColorVertexBuffer = nullptr ; FMorphVertexBufferPool* MorphVertexBufferPool = nullptr ; FSkeletalMeshVertexClothBuffer* APEXClothVertexBuffer = nullptr ; FVertexOffsetBuffers* VertexOffsetVertexBuffers = nullptr ; uint32 NumVertices = 0 ; } ; FMatrix)",
    "insertText": "GetTransform()"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FMatrix& InNewLocalToWorld, uint32 FrameNumber)"
  },
  {
    "label": "RefreshClothingTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshClothingTransforms(const FMatrix& InNewLocalToWorld, uint32 FrameNumber)"
  },
  {
    "label": "UpdateSkinWeightBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkinWeightBuffer(USkinnedMeshComponent* InMeshComponent)"
  },
  {
    "label": "GetUsedVertexFactoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedVertexFactoryData(FSkeletalMeshRenderData* SkelMeshRenderData, int32 InLOD, USkinnedMeshComponent* SkinnedMeshComponent, FSkelMeshRenderSection& RenderSection, ERHIFeatureLevel::Type InFeatureLevel, bool bHasMorphTargets, FPSOPrecacheVertexFactoryDataList& VertexFactoryDataList)"
  },
  {
    "label": "GetGPUSkinTechnique()",
    "kind": "Method",
    "detail": "Function (ESkeletalMeshGPUSkinTechnique)",
    "insertText": "GetGPUSkinTechnique(int32 LODIndex)"
  },
  {
    "label": "UpdateRayTracingGeometry_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRayTracingGeometry_Internal(FSkeletalMeshLODRenderData& LODModel, uint32 LODIndex, TArray<FBufferRHIRef>& VertexBuffers, FRayTracingGeometry& RayTracingGeometry, bool bAnySegmentUsesWorldPositionOffset, FSkeletalMeshObject* MeshObject, FRayTracingSkinnedGeometryUpdateQueue* RayTracingUpdateQueue)"
  },
  {
    "label": "FVertexFactoryData()",
    "kind": "Method",
    "detail": "Function (class FVertexFactoryData { public :)",
    "insertText": "FVertexFactoryData()"
  },
  {
    "label": "InitVertexFactories()",
    "kind": "Method",
    "detail": "Function (} TArray<TUniquePtr<FGPUBaseSkinVertexFactory>> VertexFactories ; TArray<TUniquePtr<FGPUSkinPassthroughVertexFactory>> PassthroughVertexFactories ; void)",
    "insertText": "InitVertexFactories(const FVertexFactoryBuffers& VertexBuffers, const TArray<FSkelMeshRenderSection>& Sections, ERHIFeatureLevel::Type FeatureLevel, FGPUSkinPassthroughVertexFactory::EVertexAttributeFlags VertexAttributeMask, ESkeletalMeshGPUSkinTechnique GPUSkinTechnique)"
  },
  {
    "label": "ReleaseVertexFactories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseVertexFactories()"
  },
  {
    "label": "UpdateVertexFactoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVertexFactoryData(const FVertexFactoryBuffers& VertexBuffers)"
  },
  {
    "label": "FVertexFactoryData()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FVertexFactoryData(const FVertexFactoryData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVertexFactoryData&)",
    "insertText": "operator(const FVertexFactoryData&)"
  },
  {
    "label": "FSkeletalMeshObjectLOD()",
    "kind": "Method",
    "detail": "Function (} ; struct FSkeletalMeshObjectLOD {)",
    "insertText": "FSkeletalMeshObjectLOD(FSkeletalMeshRenderData* InSkelMeshRenderData, int32 InLOD, ERHIFeatureLevel::Type InFeatureLevel, FMorphVertexBufferPool* InRecreateBufferPool, ESkeletalMeshGPUSkinTechnique InSkinTechnique) : SkelMeshRenderData(InSkelMeshRenderData) , LODIndex(InLOD) , FeatureLevel(InFeatureLevel) , MeshObjectWeightBuffer(nullptr) , MeshObjectColorBuffer(nullptr) , GPUSkinTechnique(InSkinTechnique)"
  },
  {
    "label": "FMorphVertexBufferPool()",
    "kind": "Method",
    "detail": "Function (MorphVertexBufferPool = InRecreateBufferPool ; } else { MorphVertexBufferPool = new)",
    "insertText": "FMorphVertexBufferPool(InSkelMeshRenderData, LODIndex, FeatureLevel)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitResources(const FSkelMeshObjectLODInfo& MeshLODInfo, FSkelMeshComponentLODInfo* CompLODInfo, ERHIFeatureLevel::Type FeatureLevel, FGPUSkinPassthroughVertexFactory::EVertexAttributeFlags VertexAttributeMask)"
  },
  {
    "label": "InitMorphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMorphResources(const FSkelMeshObjectLODInfo& MeshLODInfo, bool bInUsePerBoneMotionBlur, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "AddUnknownMemoryBytes()",
    "kind": "Method",
    "detail": "Function (CumulativeResourceSize .)",
    "insertText": "AddUnknownMemoryBytes(MorphVertexBufferPool->GetResourceSize())"
  },
  {
    "label": "AddUnknownMemoryBytes()",
    "kind": "Method",
    "detail": "Function (CumulativeResourceSize .)",
    "insertText": "AddUnknownMemoryBytes(GPUSkinVertexFactories.GetResourceSize())"
  },
  {
    "label": "UpdateMorphVertexBufferCPU()",
    "kind": "Method",
    "detail": "Function (} FSkeletalMeshRenderData* SkelMeshRenderData ; int32 LODIndex ; ERHIFeatureLevel::Type FeatureLevel ; TRefCountPtr<FMorphVertexBufferPool> MorphVertexBufferPool ; FVertexFactoryData GPUSkinVertexFactories ; FSkinWeightVertexBuffer* MeshObjectWeightBuffer ; FColorVertexBuffer* MeshObjectColorBuffer ; FMeshDeformerGeometry DeformerGeometry ; ESkeletalMeshGPUSkinTechnique GPUSkinTechnique ; void)",
    "insertText": "UpdateMorphVertexBufferCPU(FRHICommandList& RHICmdList, const FMorphTargetWeightMap& InActiveMorphTargets, const TArray<float>& MorphTargetWeights, const TArray<int32>& SectionIdsUseByActiveMorphTargets, bool bGPUSkinCacheEnabled, FMorphVertexBuffer& MorphVertexBuffer)"
  },
  {
    "label": "UpdateMorphVertexBufferGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphVertexBufferGPU(FRHICommandList& RHICmdList, const TArray<float>& MorphTargetWeights, const FMorphTargetVertexInfoBuffers& MorphTargetVertexInfoBuffers, const TArray<int32>& SectionIdsUseByActiveMorphTargets, const FName& OwnerName, EGPUSkinCacheEntryMode Mode, FMorphVertexBuffer& MorphVertexBuffer, bool bClearMorphVertexBuffer, bool bNormalizePass, const FVector4& MorphScale, const FVector4& InvMorphScale)"
  },
  {
    "label": "UpdateSkinWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkinWeights(FSkelMeshComponentLODInfo* CompLODInfo)"
  },
  {
    "label": "GetVertexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexBuffers(FVertexFactoryBuffers& OutVertexBuffers, FSkeletalMeshLODRenderData& LODData)"
  },
  {
    "label": "InitMorphResources()",
    "kind": "Method",
    "detail": "Function (TArray<float> MorphAccumulatedWeightArray ; } ; void)",
    "insertText": "InitMorphResources(bool bInUsePerBoneMotionBlur, const TArray<float>& MorphTargetWeights)"
  },
  {
    "label": "ProcessUpdatedDynamicData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessUpdatedDynamicData(EGPUSkinCacheEntryMode Mode, FGPUSkinCache* GPUSkinCache, FRHICommandList& RHICmdList, uint32 FrameNumberToPrepare, uint32 RevisionNumber, uint32 PreviousRevisionNumber, bool bMorphNeedsUpdate, int32 LODIndex, bool bRecreating)"
  },
  {
    "label": "UpdateMorphVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphVertexBuffer(FRHICommandList& RHICmdList, EGPUSkinCacheEntryMode Mode, FSkeletalMeshObjectLOD& LOD, const FSkeletalMeshLODRenderData& LODData, bool bGPUSkinCacheEnabled, FMorphVertexBuffer& MorphVertexBuffer)"
  },
  {
    "label": "FSkeletalMeshObjectGPUSkin()",
    "kind": "Method",
    "detail": "Function (TArray<struct FSkeletalMeshObjectLOD> LODs ; FDynamicSkelMeshObjectDataGPUSkin* DynamicData = nullptr ; uint32 LastBoneTransformRevisionNumber = 0 ; bool bMorphResourcesInitialized = false ; private :)",
    "insertText": "FSkeletalMeshObjectGPUSkin(const FSkeletalMeshObjectGPUSkin&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSkeletalMeshObjectGPUSkin&)",
    "insertText": "operator(const FSkeletalMeshObjectGPUSkin&)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FGPUMorphUpdateCS : public FGlobalShader { public :)",
    "insertText": "DECLARE_SHADER_TYPE(FGPUMorphUpdateCS, Global)"
  },
  {
    "label": "FGPUMorphUpdateCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGPUMorphUpdateCS()"
  },
  {
    "label": "FGPUMorphUpdateCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGPUMorphUpdateCS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (const uint32 MorphTargetDispatchBatchSize = 1 2 8 ; void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FVector4& LocalScale, const FMorphTargetVertexInfoBuffers& MorphTargetVertexInfoBuffers, FMorphVertexBuffer& MorphVertexBuffer, uint32 NumGroups, uint32 BatchOffsets[MorphTargetDispatchBatchSize], uint32 GroupOffsets[MorphTargetDispatchBatchSize], float Weights[MorphTargetDispatchBatchSize])"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispatch(FRHICommandList& RHICmdList, uint32 Size)"
  },
  {
    "label": "UnsetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetParameters(FRHIBatchedShaderUnbinds& BatchedUnbinds)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, MorphVertexBufferParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, MorphTargetWeightsParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, OffsetAndSizeParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, MorphTargetBatchOffsetsParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, MorphTargetGroupOffsetsParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PositionScaleParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PrecisionParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, NumGroupsParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, MorphDataBufferParameter)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FGPUMorphNormalizeCS : public FGlobalShader { public :)",
    "insertText": "DECLARE_SHADER_TYPE(FGPUMorphNormalizeCS, Global)"
  },
  {
    "label": "FGPUMorphNormalizeCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGPUMorphNormalizeCS()"
  },
  {
    "label": "FGPUMorphNormalizeCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGPUMorphNormalizeCS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FVector4& LocalScale, const FMorphTargetVertexInfoBuffers& MorphTargetVertexInfoBuffers, FMorphVertexBuffer& MorphVertexBuffer, uint32 NumVertices)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispatch(FRHICommandList& RHICmdList, uint32 NumVertices)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, NumVerticesParameter)"
  }
]