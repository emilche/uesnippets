[
  {
    "label": "BoolPack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoolPack"
  },
  {
    "label": "Storage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Storage"
  },
  {
    "label": "InitializeElements()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_BOUNDED_INLINE_VECTOR_IMPL_H_ # define RTC_BASE_BOUNDED_INLINE_VECTOR_IMPL_H_ # include<stdint . h> # include<cstring> # include<memory> # include<type_traits> # include<utility> namespace webrtc { namespace bounded_inline_vector_impl { template<bool . . .> struct BoolPack ; template<bool . . . Bs> using AllTrue = std::is_same<BoolPack<Bs . . .,true>,BoolPack<true,Bs . . .>> ; template<To,. . . Froms> using AllConvertible = AllTrue<std::is_convertible<Froms,To>::value . . .> ; template<T> void)",
    "insertText": "InitializeElements(T* data)"
  },
  {
    "label": "InitializeElements()",
    "kind": "Method",
    "detail": "Function (} template<T,U,. . . Us> void)",
    "insertText": "InitializeElements(T* data, U&& element, Us&&... elements)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(data) T(std::forward<U>(element))"
  },
  {
    "label": "InitializeElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeElements(data + 1, std::forward<Us>(elements)...)"
  },
  {
    "label": "DefaultInitializeElements()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "DefaultInitializeElements(T* data, int size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&data[i])"
  },
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "CopyElements(const T* src_data, int src_size, T* dst_data, int* dst_size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst_data, src_data, src_size * sizeof(T))"
  },
  {
    "label": "uninitialized_copy_n()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "uninitialized_copy_n(src_data, src_size, dst_data)"
  },
  {
    "label": "MoveElements()",
    "kind": "Method",
    "detail": "Function (}* dst_size = src_size ; } template<T> void)",
    "insertText": "MoveElements(T* src_data, int src_size, T* dst_data, int* dst_size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int i = 0; i < src_size; ++i)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&dst_data[i]) T(std::move(src_data[i]))"
  },
  {
    "label": "DestroyElements()",
    "kind": "Method",
    "detail": "Function (} }* dst_size = src_size ; } template<T> void)",
    "insertText": "DestroyElements(T* data, int size)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (data [ i ] . ~)",
    "insertText": "T()"
  },
  {
    "label": "is_small()",
    "kind": "Method",
    "detail": "Function (} } } int kSmallSize = 6 4 ; template<T,int fixed_capacity,bool is_trivial = std::is_trivial<T>::value,bool)",
    "insertText": "is_small(sizeof(T) * fixed_capacity <= kSmallSize)"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (template<. . . Ts,std::enable_if_t<AllConvertible<T,Ts . . .>::value>* = nullptr>)",
    "insertText": "Storage(Ts&&... elements) : size(sizeof...(Ts))"
  },
  {
    "label": "InitializeElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeElements(data, std::forward<Ts>(elements)...)"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Storage(const Storage& other)"
  },
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyElements(other.data, other.size, data, &size)"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Storage(Storage&& other)"
  },
  {
    "label": "MoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveElements(other.data, other.size, data, &size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Storage&)",
    "insertText": "operator(const Storage& other)"
  },
  {
    "label": "DestroyElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyElements(data, size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } Storage&)",
    "insertText": "operator(Storage&& other)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} int size ; union { T data [ fixed_capacity ] ; } ; } ; template<T,int fixed_capacity> struct Storage<T,fixed_capacity,true,true> {)",
    "insertText": "static_assert(std::is_trivial<T>::value, \"\")"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Storage(const Storage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Storage&)",
    "insertText": "operator(const Storage&)"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Storage()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Storage(const Storage& other) : size(other.size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(data, other.data, other.size * sizeof(T))"
  }
]