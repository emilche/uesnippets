[
  {
    "label": "UActorContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorContainer"
  },
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstance"
  },
  {
    "label": "UExternalDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerInstance"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerManager"
  },
  {
    "label": "UExternalDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerAsset"
  },
  {
    "label": "FStreamingGenerationActorDescView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingGenerationActorDescView"
  },
  {
    "label": "FHierarchicalLogArchive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHierarchicalLogArchive"
  },
  {
    "label": "FWorldPartitionStreamingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionStreamingContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWorldPartitionRuntimeCellPropertyOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionRuntimeCellPropertyOverride"
  },
  {
    "label": "FWorldPartitionRuntimeCellObjectMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionRuntimeCellObjectMapping"
  },
  {
    "label": "UActorDescContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainer"
  },
  {
    "label": "FWorldPartitionRuntimeCellDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionRuntimeCellDebugInfo"
  },
  {
    "label": "UWorldPartitionRuntimeCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeCell"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FWorldPartitionActorDescView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDescView"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "FSpatialHashStreamingGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpatialHashStreamingGrid"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" # include \" WorldPartition / WorldPartitionStreamingSource . h \" # include \" WorldPartition / WorldPartitionActorContainerID . h \" # include \" WorldPartition / WorldPartitionRuntimeCellData . h \" # include \" WorldPartition / WorldPartitionRuntimeCellInterface . h \" # include \" WorldPartition / Cook / WorldPartitionCookPackageInterface . h \" # include \" WorldPartition / DataLayer / DataLayerInstanceNames . h \" # include \" ProfilingDebugging / ProfilingHelpers . h \" # include \" Misc / HierarchicalLogArchive . h \" # include \" Algo / AnyOf . h \" # include \" UObject / ObjectMacros . h \" # include \" WorldPartitionRuntimeCell . generated . h \" class UActorContainer ; class UDataLayerAsset ; class UDataLayerInstance ; class UExternalDataLayerInstance ; class UWorldPartition ; class UDataLayerManager ; class UExternalDataLayerAsset ; class FStreamingGenerationActorDescView ; struct FHierarchicalLogArchive ; struct FWorldPartitionStreamingContext ; enum class EWorldPartitionDataLayersLogicOperator : uint8 ; enum class EWorldPartitionRuntimeCellVisualizeMode { StreamingPriority,StreamingStatus } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FWorldPartitionRuntimeCellPropertyOverride()"
  },
  {
    "label": "FWorldPartitionRuntimeCellPropertyOverride()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionRuntimeCellPropertyOverride(const FActorContainerID& InOwnerContainerID, const FString& InAssetPath, FName InPackageName, const FActorContainerPath& InContainerPath) #if WITH_EDITORONLY_DATA : OwnerContainerID(InOwnerContainerID) , AssetPath(InAssetPath) , PackageName(InPackageName) , ContainerPath(InContainerPath)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FWorldPartitionRuntimeCellObjectMapping() #if WITH_EDITORONLY_DATA : ContainerTransform(FTransform::Identity) , bIsEditorOnly(false)"
  },
  {
    "label": "FWorldPartitionRuntimeCellObjectMapping()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionRuntimeCellObjectMapping(FName InPackage, FName InPath, const FTopLevelAssetPath& InBaseClass, const FTopLevelAssetPath& InNativeClass, const FActorContainerID& InContainerID, const FTransform& InContainerTransform, const FTransform& InEditorOnlyParentTransform, FName InContainerPackage, FName InWorldPackage, const FGuid& InActorInstanceGuid, bool bInIsEditorOnly ) #if WITH_EDITORONLY_DATA : Package(InPackage) , Path(InPath) , BaseClass(InBaseClass) , NativeClass(InNativeClass) , ContainerID(InContainerID) , ContainerTransform(InContainerTransform) , EditorOnlyParentTransform(InEditorOnlyParentTransform) , ContainerPackage(InContainerPackage) , WorldPackage(InWorldPackage) , ActorInstanceGuid(InActorInstanceGuid) , LoadedPath(InPath) , bIsEditorOnly(bInIsEditorOnly)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# endif } ; class UActorDescContainer ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(EWorldPartitionRuntimeCellState::Unloaded < EWorldPartitionRuntimeCellState::Loaded && EWorldPartitionRuntimeCellState::Loaded < EWorldPartitionRuntimeCellState::Activated, \"Streaming Query code is dependent on this being true\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITOR ENGINE_API virtual void PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "GetTypedOuter()",
    "kind": "Method",
    "detail": "Function (# endif template<class T> T*)",
    "insertText": "GetTypedOuter()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Load() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::Load,)"
  },
  {
    "label": "Unload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unload() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::Unload,)"
  },
  {
    "label": "CanUnload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnload() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::CanUnload, return true;)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Activate() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::Activate,)"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::Deactivate,)"
  },
  {
    "label": "GetLevel()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "GetLevel() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::GetLevel, return nullptr;)"
  },
  {
    "label": "GetCurrentState()",
    "kind": "Method",
    "detail": "Function (EWorldPartitionRuntimeCellState)",
    "insertText": "GetCurrentState() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::GetCurrentState, return EWorldPartitionRuntimeCellState::Unloaded;)"
  },
  {
    "label": "GetDebugColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetDebugColor(EWorldPartitionRuntimeCellVisualizeMode VisualizeMode)"
  },
  {
    "label": "CopyWithNewOpacity()",
    "kind": "Method",
    "detail": "Function (const FLinearColor DefaultColor = FLinearColor::Black .)",
    "insertText": "CopyWithNewOpacity(0.25f)"
  },
  {
    "label": "SetStreamingPriority()",
    "kind": "Method",
    "detail": "Function (bIsAlwaysLoaded = bInIsAlwaysLoaded ; } void)",
    "insertText": "SetStreamingPriority(int32 InStreamingPriority) const PURE_VIRTUAL(UWorldPartitionRuntimeCell::SetStreamingPriority,)"
  },
  {
    "label": "GetStreamingStatus()",
    "kind": "Method",
    "detail": "Function (EStreamingStatus)",
    "insertText": "GetStreamingStatus()"
  },
  {
    "label": "GetClientOnlyVisible()",
    "kind": "Method",
    "detail": "Function (bClientOnlyVisible = bInClientOnlyVisible ; } bool)",
    "insertText": "GetClientOnlyVisible()"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstances()"
  },
  {
    "label": "GetExternalDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (const UExternalDataLayerInstance*)",
    "insertText": "GetExternalDataLayerInstance()"
  },
  {
    "label": "ContainsDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDataLayer(const UDataLayerAsset* DataLayerAsset)"
  },
  {
    "label": "ContainsDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDataLayer(const UDataLayerInstance* DataLayerInstance)"
  },
  {
    "label": "HasContentBundle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContentBundle()"
  },
  {
    "label": "GetDataLayers()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetDataLayers()"
  },
  {
    "label": "GetExternalDataLayer()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetExternalDataLayer()"
  },
  {
    "label": "HasAnyDataLayer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyDataLayer(const TSet<FName>& InDataLayers)"
  },
  {
    "label": "GetLevelPackageName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetLevelPackageName()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetOwningWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetOwningWorld()"
  },
  {
    "label": "GetOuterWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetOuterWorld()"
  },
  {
    "label": "GetDataLayerManager()",
    "kind": "Method",
    "detail": "Function (UDataLayerManager*)",
    "insertText": "GetDataLayerManager()"
  },
  {
    "label": "GetCellEffectiveWantedState()",
    "kind": "Method",
    "detail": "Function (EDataLayerRuntimeState)",
    "insertText": "GetCellEffectiveWantedState(const FWorldPartitionStreamingContext& Context)"
  },
  {
    "label": "GetBlockOnSlowLoading()",
    "kind": "Method",
    "detail": "Function (bBlockOnSlowLoading = bInBlockOnSlowLoading ; } bool)",
    "insertText": "GetBlockOnSlowLoading()"
  },
  {
    "label": "SetDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataLayers(const TArray<const UDataLayerInstance*>& InDataLayerInstances)"
  },
  {
    "label": "SetContentBundleUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentBundleUID(const FGuid& InContentBundleID)"
  },
  {
    "label": "SetLevelPackageName()",
    "kind": "Method",
    "detail": "Function (ContentBundleID = InContentBundleID ; } void)",
    "insertText": "SetLevelPackageName(const FName& InLevelPackageName)"
  },
  {
    "label": "GetActorPackageNames()",
    "kind": "Method",
    "detail": "Function (LevelPackageName = InLevelPackageName ; } TSet<FName>)",
    "insertText": "GetActorPackageNames()"
  },
  {
    "label": "AddActorToCell()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddActorToCell(const FStreamingGenerationActorDescView& ActorDescView) PURE_VIRTUAL(UWorldPartitionRuntimeCell::AddActorToCell,)"
  },
  {
    "label": "Fixup()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "Fixup() PURE_VIRTUAL(UWorldPartitionRuntimeCell::Fixup,)"
  },
  {
    "label": "GetActorCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetActorCount() const PURE_VIRTUAL(UWorldPartitionRuntimeCell::GetActorCount, return 0;)"
  },
  {
    "label": "OnPrepareGeneratorPackageForCook()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnPrepareGeneratorPackageForCook(TArray<UPackage*>& OutModifiedPackages)"
  },
  {
    "label": "SetIsHLOD()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetIsHLOD(bool bInIsHLOD)"
  },
  {
    "label": "GetIsHLOD()",
    "kind": "Method",
    "detail": "Function (bIsHLOD = bInIsHLOD ; } bool)",
    "insertText": "GetIsHLOD()"
  },
  {
    "label": "GetCellDebugColor()",
    "kind": "Method",
    "detail": "Function (CellGuid = InCellGuid ; } const FLinearColor&)",
    "insertText": "GetCellDebugColor()"
  },
  {
    "label": "GetSourceCellGuid()",
    "kind": "Method",
    "detail": "Function (CellDebugColor = InCellDebugColor ; } const FGuid&)",
    "insertText": "GetSourceCellGuid()"
  },
  {
    "label": "SetDebugStreamingPriority()",
    "kind": "Method",
    "detail": "Function (SourceCellGuid = InSourceCellGuid ; } # if ! UE_BUILD_SHIPPING void)",
    "insertText": "SetDebugStreamingPriority(float InDebugStreamingPriority)"
  },
  {
    "label": "GetDataLayersInline()",
    "kind": "Method",
    "detail": "Function (# endif protected : const TArray<FName>&)",
    "insertText": "GetDataLayersInline()"
  },
  {
    "label": "ShouldServerWaitForClientLevelVisibility()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldServerWaitForClientLevelVisibility()"
  },
  {
    "label": "AppendStreamingSourceInfo()",
    "kind": "Method",
    "detail": "Function (# endif EDataLayerRuntimeState EffectiveWantedState ; int32 EffectiveWantedStateEpoch ; public : void)",
    "insertText": "AppendStreamingSourceInfo(const FWorldPartitionStreamingSource& Source, const FSphericalSector& SourceShape, const FWorldPartitionStreamingContext& Context)"
  },
  {
    "label": "AppendStreamingSourceInfo()",
    "kind": "Method",
    "detail": "Function (RuntimeCellData ->)",
    "insertText": "AppendStreamingSourceInfo(Source, SourceShape, Context)"
  },
  {
    "label": "MergeStreamingSourceInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeStreamingSourceInfo()"
  },
  {
    "label": "SortCompare()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SortCompare(const UWorldPartitionRuntimeCell* Other)"
  },
  {
    "label": "GetContentBounds()",
    "kind": "Method",
    "detail": "Function (const FBox&)",
    "insertText": "GetContentBounds()"
  },
  {
    "label": "GetCellBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetCellBounds()"
  },
  {
    "label": "GetStreamingBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetStreamingBounds()"
  },
  {
    "label": "IsDebugShown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDebugShown()"
  }
]