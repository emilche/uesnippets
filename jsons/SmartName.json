[
  {
    "label": "FSmartName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSmartName"
  },
  {
    "label": "FSmartNameMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSmartNameMapping"
  },
  {
    "label": "FSmartNameMappingIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSmartNameMappingIterator"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FSmartNameContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSmartNameContainer"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" UObject / Class . h \" # include \" Animation / BoneReference . h \" # include \" Animation / AnimTypes . h \" # include \" UObject / AnimPhysObjectVersion . h \" # include \" Animation / AnimCurveMetadata . h \" # include \" SmartName . generated . h \" struct FSmartName ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (struct FSmartNameMappingIterator ; class USkeleton ;)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FSmartNameMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSmartNameMapping()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSmartNameMapping& Elem)"
  },
  {
    "label": "GetName_NoLock()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "GetName_NoLock(const SmartName::UID_Type& Uid, FName& OutName)"
  },
  {
    "label": "Exists_NoLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exists_NoLock(const SmartName::UID_Type& Uid)"
  },
  {
    "label": "Exists_NoLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exists_NoLock(const FName& Name)"
  },
  {
    "label": "FindUID_NoLock()",
    "kind": "Method",
    "detail": "Function (SmartName::UID_Type)",
    "insertText": "FindUID_NoLock(const FName& Name)"
  },
  {
    "label": "GetCurveMetaData_NoLock()",
    "kind": "Method",
    "detail": "Function (const FCurveMetaData*)",
    "insertText": "GetCurveMetaData_NoLock(FName CurveName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FName Name ;)",
    "insertText": "if(Mapping->GetName_NoLock(Index, Name))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSmartNameContainer& Elem)"
  },
  {
    "label": "GetContainerInternal()",
    "kind": "Method",
    "detail": "Function (class USkeleton ; protected : FSmartNameMapping*)",
    "insertText": "GetContainerInternal(const FName& ContainerName)"
  },
  {
    "label": "FSmartName()",
    "kind": "Method",
    "detail": "Function (SmartName::UID_Type UID ;)",
    "insertText": "FSmartName() : DisplayName(NAME_None) , UID(SmartName::MaxUID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FSmartName const& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSmartName& Other)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSmartName& P)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (P .)",
    "insertText": "Serialize(Ar)"
  }
]