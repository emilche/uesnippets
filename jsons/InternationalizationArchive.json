[
  {
    "label": "FLocMetadataObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocMetadataObject"
  },
  {
    "label": "FArchiveEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveEntry"
  },
  {
    "label": "FInternationalizationArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternationalizationArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FArchiveEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Internationalization / InternationalizationManifest . h \" # include \" Internationalization / LocKeyFuncs . h \" # include \" Misc / Crc . h \" # include \" Templates / SharedPointer . h \" class FLocMetadataObject ; class FArchiveEntry { public :)",
    "insertText": "FArchiveEntry(const FLocKey& InNamespace, const FLocKey& InKey, const FLocItem& InSource, const FLocItem& InTranslation, TSharedPtr<FLocMetadataObject> InKeyMetadataObj = nullptr, bool IsOptional = false)"
  },
  {
    "label": "FInternationalizationArchive()",
    "kind": "Method",
    "detail": "Function (const FLocKey Namespace ; const FLocKey Key ; const FLocItem Source ; FLocItem Translation ; bool bIsOptional ; TSharedPtr<FLocMetadataObject> KeyMetadataObj ; } ; typedef TMultiMap<FLocKey,TSharedRef<FArchiveEntry>> FArchiveEntryByLocKeyContainer ; typedef TMultiMap<FString,TSharedRef<FArchiveEntry>,FDefaultSetAllocator,FLocKeyMultiMapFuncs<TSharedRef<FArchiveEntry>>> FArchiveEntryByStringContainer ; class FInternationalizationArchive { public : enum class EFormatVersion : uint8 { Initial = 0,EscapeFixes,AddedKeys,LatestPlusOne,Latest = LatestPlusOne - 1 } ;)",
    "insertText": "FInternationalizationArchive() : FormatVersion(EFormatVersion::Latest)"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddEntry(const FLocKey& Namespace, const FLocKey& Key, const FLocItem& Source, const FLocItem& Translation, const TSharedPtr<FLocMetadataObject> KeyMetadataObj, const bool bOptional)"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddEntry(const TSharedRef<FArchiveEntry>& InEntry)"
  },
  {
    "label": "UpdateEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEntry(const TSharedRef<FArchiveEntry>& OldEntry, const TSharedRef<FArchiveEntry>& NewEntry)"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTranslation(const FLocKey& Namespace, const FLocKey& Key, const FLocItem& Source, const FLocItem& Translation, const TSharedPtr<FLocMetadataObject> KeyMetadataObj)"
  },
  {
    "label": "FindEntryByKey()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArchiveEntry>)",
    "insertText": "FindEntryByKey(const FLocKey& Namespace, const FLocKey& Key, const TSharedPtr<FLocMetadataObject> KeyMetadataObj)"
  },
  {
    "label": "GetEntriesByKeyIterator()",
    "kind": "Method",
    "detail": "Function (FArchiveEntryByLocKeyContainer::TConstIterator)",
    "insertText": "GetEntriesByKeyIterator()"
  },
  {
    "label": "GetNumEntriesByKey()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumEntriesByKey()"
  },
  {
    "label": "GetEntriesBySourceTextIterator()",
    "kind": "Method",
    "detail": "Function (} FArchiveEntryByStringContainer::TConstIterator)",
    "insertText": "GetEntriesBySourceTextIterator()"
  },
  {
    "label": "GetNumEntriesBySourceText()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumEntriesBySourceText()"
  },
  {
    "label": "SetFormatVersion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFormatVersion(const EFormatVersion Version)"
  }
]