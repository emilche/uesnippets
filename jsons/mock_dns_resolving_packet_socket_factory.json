[
  {
    "label": "MockDnsResolvingPacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockDnsResolvingPacketSocketFactory"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_MOCK_DNS_RESOLVING_PACKET_SOCKET_FACTORY_H_ # define P2P_BASE_MOCK_DNS_RESOLVING_PACKET_SOCKET_FACTORY_H_ # include<functional> # include<memory> # include \" api / test / mock_async_dns_resolver . h \" # include \" p2p / base / basic_packet_socket_factory . h \" namespace rtc { class MockDnsResolvingPacketSocketFactory : public BasicPacketSocketFactory { public : using Expectations = std::function<)",
    "insertText": "void(webrtc::MockAsyncDnsResolver*, webrtc::MockAsyncDnsResolverResult*)"
  },
  {
    "label": "MockDnsResolvingPacketSocketFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MockDnsResolvingPacketSocketFactory(SocketFactory* socket_factory) : BasicPacketSocketFactory(socket_factory)"
  },
  {
    "label": "CreateAsyncDnsResolver()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<webrtc::AsyncDnsResolverInterface>)",
    "insertText": "CreateAsyncDnsResolver()"
  },
  {
    "label": "MockAsyncDnsResolver()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::MockAsyncDnsResolver> resolver = std::make_unique<)",
    "insertText": "MockAsyncDnsResolver()"
  },
  {
    "label": "expectations_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "expectations_(resolver.get(), &resolver_result_)"
  },
  {
    "label": "SetExpectations()",
    "kind": "Method",
    "detail": "Function (} return resolver ; } void)",
    "insertText": "SetExpectations(Expectations expectations)"
  }
]