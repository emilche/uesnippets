[
  {
    "label": "ControllerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ControllerManager"
  },
  {
    "label": "EventLogWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventLogWriter"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "AudioNetworkAdaptorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioNetworkAdaptorImpl"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_AUDIO_NETWORK_ADAPTOR_IMPL_H_ # define MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_AUDIO_NETWORK_ADAPTOR_IMPL_H_ # include<stdio . h> # include<memory> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" modules / audio_coding / audio_network_adaptor / controller . h \" # include \" modules / audio_coding / audio_network_adaptor / debug_dump_writer . h \" # include \" modules / audio_coding / audio_network_adaptor / include / audio_network_adaptor . h \" # include \" modules / audio_coding / audio_network_adaptor / include / audio_network_adaptor_config . h \" namespace webrtc { class ControllerManager ; class EventLogWriter ; class RtcEventLog ; class AudioNetworkAdaptorImpl final : public AudioNetworkAdaptor { public : struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "AudioNetworkAdaptorImpl()",
    "kind": "Method",
    "detail": "Function (RtcEventLog* event_log ; } ;)",
    "insertText": "AudioNetworkAdaptorImpl(const Config& config, std::unique_ptr<ControllerManager> controller_manager, std::unique_ptr<DebugDumpWriter> debug_dump_writer = nullptr)"
  },
  {
    "label": "AudioNetworkAdaptorImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioNetworkAdaptorImpl()"
  },
  {
    "label": "AudioNetworkAdaptorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioNetworkAdaptorImpl(const AudioNetworkAdaptorImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioNetworkAdaptorImpl&)",
    "insertText": "operator(const AudioNetworkAdaptorImpl&)"
  },
  {
    "label": "SetUplinkBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUplinkBandwidth(int uplink_bandwidth_bps)"
  },
  {
    "label": "SetUplinkPacketLossFraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUplinkPacketLossFraction(float uplink_packet_loss_fraction)"
  },
  {
    "label": "SetRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtt(int rtt_ms)"
  },
  {
    "label": "SetTargetAudioBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetAudioBitrate(int target_audio_bitrate_bps)"
  },
  {
    "label": "SetOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverhead(size_t overhead_bytes_per_packet)"
  },
  {
    "label": "GetEncoderRuntimeConfig()",
    "kind": "Method",
    "detail": "Function (AudioEncoderRuntimeConfig)",
    "insertText": "GetEncoderRuntimeConfig()"
  },
  {
    "label": "StartDebugDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDebugDump(FILE* file_handle)"
  },
  {
    "label": "StopDebugDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDebugDump()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (ANAStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "DumpNetworkMetrics()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DumpNetworkMetrics()"
  },
  {
    "label": "UpdateNetworkMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkMetrics(const Controller::NetworkMetrics& network_metrics)"
  }
]