[
  {
    "label": "FGlobalEditorNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalEditorNotification"
  },
  {
    "label": "FGlobalEditorProgressNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalEditorProgressNotification"
  },
  {
    "label": "FGlobalEditorNotification()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / Notifications / GlobalNotification . h \" # include \" Stats / Stats . h \" # include \" TickableEditorObject . h \" # include \" Framework / Notifications / NotificationManager . h \" class FGlobalEditorNotification : public FGlobalNotification,public FTickableEditorObject { public :)",
    "insertText": "FGlobalEditorNotification(const double InEnableDelayInSeconds = 1.0) : FGlobalNotification(InEnableDelayInSeconds)"
  },
  {
    "label": "FGlobalEditorNotification()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGlobalEditorNotification()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "FGlobalEditorProgressNotification()",
    "kind": "Method",
    "detail": "Function (} ; class FGlobalEditorProgressNotification : public FTickableEditorObject { public :)",
    "insertText": "FGlobalEditorProgressNotification(const FText InProgressMessage) : ProgressMessage(InProgressMessage)"
  },
  {
    "label": "AllowedToStartNotification()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "AllowedToStartNotification()"
  },
  {
    "label": "UpdateProgressMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProgressMessage(const FText NewMessage)"
  },
  {
    "label": "CancelNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelNotification()"
  },
  {
    "label": "StartNotification()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "StartNotification(int32 InStartWorkNum, FText ProgressText)"
  },
  {
    "label": "UpdateNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNotification(int32 InTotalWorkComplete, FText ProgressText)"
  }
]