[
  {
    "label": "FStructConversionTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructConversionTable"
  },
  {
    "label": "UBlueprintTypeConversions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintTypeConversions"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BlueprintTypeConversions . generated . h \" namespace UE::Kismet::BlueprintTypeConversions { using ConversionFunctionT =)",
    "insertText": "void(*)(const void*, void*)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (using ConversionFunctionPairT = TPair<ConversionFunctionT,UFunction*> ; class FStructConversionTable { public : const FStructConversionTable&)",
    "insertText": "Get()"
  },
  {
    "label": "GetConversionFunction()",
    "kind": "Method",
    "detail": "Function (TOptional<UE::Kismet::BlueprintTypeConversions::ConversionFunctionPairT>)",
    "insertText": "GetConversionFunction(const UScriptStruct* InFrom, const UScriptStruct* InTo)"
  },
  {
    "label": "FStructConversionTable()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FStructConversionTable()"
  },
  {
    "label": "GetVariantsFromStructs()",
    "kind": "Method",
    "detail": "Function (using StructVariantPairT = TPair<const UScriptStruct*,const UScriptStruct*> ; using ImplicitCastLookupTableT = TMap<StructVariantPairT,UE::Kismet::BlueprintTypeConversions::ConversionFunctionPairT> ; using StructVariantLookupTableT = TMap<const UScriptStruct*,const UScriptStruct*> ; StructVariantPairT)",
    "insertText": "GetVariantsFromStructs(const UScriptStruct* InStruct1, const UScriptStruct* InStruct2)"
  },
  {
    "label": "MAKE_CONVERSION_EXEC_FUNCTION_NAME()",
    "kind": "Method",
    "detail": "Function (ImplicitCastLookupTableT ImplicitCastLookupTable ; StructVariantLookupTableT StructVariantLookupTable ; FStructConversionTable* Instance ; } ; } # define)",
    "insertText": "MAKE_CONVERSION_EXEC_FUNCTION_NAME(SourceType, DestType) \\ execConvert##SourceType##To##DestType #define DECLARE_CONVERSION_FUNCTIONS(BaseType, VariantType1, VariantType2) \\ DECLARE_FUNCTION(MAKE_CONVERSION_EXEC_FUNCTION_NAME(VariantType1, VariantType2))"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DECLARE_FUNCTION(MAKE_CONVERSION_EXEC_FUNCTION_NAME(VariantType2, VariantType1))"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_UCLASS_BODY() UFUNCTION(CustomThunk, meta = (BlueprintInternalUseOnly = \"true\")) static ENGINE_API TArray<int> ConvertArrayType(const TArray<int>& InArray)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FUNCTION(execConvertArrayType)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FUNCTION(execConvertSetType)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FUNCTION(execConvertMapType)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FVector, FVector3f, FVector3d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FVector2D, FVector2f, FVector2d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FVector4, FVector4f, FVector4d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FPlane, FPlane4f, FPlane4d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FQuat, FQuat4f, FQuat4d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FRotator, FRotator3f, FRotator3d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FTransform, FTransform3f, FTransform3d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FMatrix, FMatrix44f, FMatrix44d)"
  },
  {
    "label": "DECLARE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CONVERSION_FUNCTIONS(FBox2D, FBox2f, FBox2d)"
  }
]