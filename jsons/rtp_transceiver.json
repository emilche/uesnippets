[
  {
    "label": "MediaEngineInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaEngineInterface"
  },
  {
    "label": "PeerConnectionSdpMethods",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionSdpMethods"
  },
  {
    "label": "RtpTransceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransceiver"
  },
  {
    "label": "RtpTransceiver()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_RTP_TRANSCEIVER_H_ # define PC_RTP_TRANSCEIVER_H_ # include<stddef . h> # include<functional> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio_options . h \" # include \" api / jsep . h \" # include \" api / media_types . h \" # include \" api / rtc_error . h \" # include \" api / rtp_parameters . h \" # include \" api / rtp_receiver_interface . h \" # include \" api / rtp_sender_interface . h \" # include \" api / rtp_transceiver_direction . h \" # include \" api / rtp_transceiver_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / video / video_bitrate_allocator_factory . h \" # include \" media / base / media_channel . h \" # include \" pc / channel_interface . h \" # include \" pc / connection_context . h \" # include \" pc / proxy . h \" # include \" pc / rtp_receiver . h \" # include \" pc / rtp_receiver_proxy . h \" # include \" pc / rtp_sender . h \" # include \" pc / rtp_sender_proxy . h \" # include \" pc / rtp_transport_internal . h \" # include \" pc / session_description . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread_annotations . h \" namespace cricket { class MediaEngineInterface ; } namespace webrtc { class PeerConnectionSdpMethods ; class RtpTransceiver : public RtpTransceiverInterface,public sigslot::has_slots<> { public :)",
    "insertText": "RtpTransceiver(cricket::MediaType media_type, ConnectionContext* context)"
  },
  {
    "label": "RtpTransceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpTransceiver(rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>> sender, rtc::scoped_refptr<RtpReceiverProxyWithInternal<RtpReceiverInternal>> receiver, ConnectionContext* context, std::vector<RtpHeaderExtensionCapability> HeaderExtensionsToOffer, std::function<void()> on_negotiation_needed)"
  },
  {
    "label": "RtpTransceiver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpTransceiver()"
  },
  {
    "label": "RtpTransceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpTransceiver(const RtpTransceiver&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpTransceiver&)",
    "insertText": "operator(const RtpTransceiver&)"
  },
  {
    "label": "RtpTransceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpTransceiver(RtpTransceiver&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpTransceiver&)",
    "insertText": "operator(RtpTransceiver&&)"
  },
  {
    "label": "channel()",
    "kind": "Method",
    "detail": "Function (cricket::ChannelInterface*)",
    "insertText": "channel()"
  },
  {
    "label": "CreateChannel()",
    "kind": "Method",
    "detail": "Function (} RTCError)",
    "insertText": "CreateChannel(absl::string_view mid, Call* call_ptr, const cricket::MediaConfig& media_config, bool srtp_required, CryptoOptions crypto_options, const cricket::AudioOptions& audio_options, const cricket::VideoOptions& video_options, VideoBitrateAllocatorFactory* video_bitrate_allocator_factory, std::function<RtpTransportInternal*(absl::string_view)> transport_lookup)"
  },
  {
    "label": "SetChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannel(std::unique_ptr<cricket::ChannelInterface> channel, std::function<RtpTransportInternal*(const std::string&)> transport_lookup)"
  },
  {
    "label": "ClearChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChannel()"
  },
  {
    "label": "AddSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSender(rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>> sender)"
  },
  {
    "label": "RemoveSender()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSender(RtpSenderInterface* sender)"
  },
  {
    "label": "senders()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>>>)",
    "insertText": "senders()"
  },
  {
    "label": "RemoveReceiver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveReceiver(RtpReceiverInterface* receiver)"
  },
  {
    "label": "receivers()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpReceiverProxyWithInternal<RtpReceiverInternal>>>)",
    "insertText": "receivers()"
  },
  {
    "label": "receiver_internal()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpReceiverInternal>)",
    "insertText": "receiver_internal()"
  },
  {
    "label": "mline_index()",
    "kind": "Method",
    "detail": "Function (absl::optional<size_t>)",
    "insertText": "mline_index()"
  },
  {
    "label": "set_mid()",
    "kind": "Method",
    "detail": "Function (mline_index_ = mline_index ; } void)",
    "insertText": "set_mid(const absl::optional<std::string>& mid)"
  },
  {
    "label": "set_direction()",
    "kind": "Method",
    "detail": "Function (mid_ = mid ; } void)",
    "insertText": "set_direction(RtpTransceiverDirection direction)"
  },
  {
    "label": "set_current_direction()",
    "kind": "Method",
    "detail": "Function (direction_ = direction ; } void)",
    "insertText": "set_current_direction(RtpTransceiverDirection direction)"
  },
  {
    "label": "set_fired_direction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_fired_direction(absl::optional<RtpTransceiverDirection> direction)"
  },
  {
    "label": "set_created_by_addtrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_created_by_addtrack(bool created_by_addtrack)"
  },
  {
    "label": "set_reused_for_addtrack()",
    "kind": "Method",
    "detail": "Function (created_by_addtrack_ = created_by_addtrack ; } void)",
    "insertText": "set_reused_for_addtrack(bool reused_for_addtrack)"
  },
  {
    "label": "created_by_addtrack()",
    "kind": "Method",
    "detail": "Function (reused_for_addtrack_ = reused_for_addtrack ; } bool)",
    "insertText": "created_by_addtrack()"
  },
  {
    "label": "StopTransceiverProcedure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTransceiverProcedure()"
  },
  {
    "label": "media_type()",
    "kind": "Method",
    "detail": "Function (cricket::MediaType)",
    "insertText": "media_type()"
  },
  {
    "label": "mid()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "mid()"
  },
  {
    "label": "sender()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "sender()"
  },
  {
    "label": "receiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpReceiverInterface>)",
    "insertText": "receiver()"
  },
  {
    "label": "stopped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "stopped()"
  },
  {
    "label": "stopping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "stopping()"
  },
  {
    "label": "direction()",
    "kind": "Method",
    "detail": "Function (RtpTransceiverDirection)",
    "insertText": "direction()"
  },
  {
    "label": "SetDirectionWithError()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetDirectionWithError(RtpTransceiverDirection new_direction)"
  },
  {
    "label": "current_direction()",
    "kind": "Method",
    "detail": "Function (absl::optional<RtpTransceiverDirection>)",
    "insertText": "current_direction()"
  },
  {
    "label": "fired_direction()",
    "kind": "Method",
    "detail": "Function (absl::optional<RtpTransceiverDirection>)",
    "insertText": "fired_direction()"
  },
  {
    "label": "StopStandard()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "StopStandard()"
  },
  {
    "label": "StopInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopInternal()"
  },
  {
    "label": "SetCodecPreferences()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetCodecPreferences(rtc::ArrayView<RtpCodecCapability> codecs)"
  },
  {
    "label": "codec_preferences()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpCodecCapability>)",
    "insertText": "codec_preferences()"
  },
  {
    "label": "HeaderExtensionsNegotiated()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpHeaderExtensionCapability>)",
    "insertText": "HeaderExtensionsNegotiated()"
  },
  {
    "label": "SetOfferedRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetOfferedRtpHeaderExtensions(rtc::ArrayView<const RtpHeaderExtensionCapability> header_extensions_to_offer)"
  },
  {
    "label": "OnNegotiationUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNegotiationUpdate(SdpType sdp_type, const cricket::MediaContentDescription* content)"
  },
  {
    "label": "media_engine()",
    "kind": "Method",
    "detail": "Function (private : cricket::MediaEngineInterface*)",
    "insertText": "media_engine()"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (} ConnectionContext*)",
    "insertText": "context()"
  },
  {
    "label": "StopSendingAndReceiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSendingAndReceiving()"
  },
  {
    "label": "PushNewMediaChannelAndDeleteChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushNewMediaChannelAndDeleteChannel(std::unique_ptr<cricket::ChannelInterface> channel_to_delete)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase* const thread_ ; const bool unified_plan_ ; const cricket::MediaType media_type_ ; rtc::scoped_refptr<PendingTaskSafetyFlag> signaling_thread_safety_ ; std::vector<rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>>> senders_ ; std::vector<rtc::scoped_refptr<RtpReceiverProxyWithInternal<RtpReceiverInternal>>> receivers_ ; bool stopped_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const std::function<)",
    "insertText": "void()"
  }
]