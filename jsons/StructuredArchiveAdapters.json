[
  {
    "label": "FStructuredArchiveFromArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveFromArchive"
  },
  {
    "label": "FImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImpl"
  },
  {
    "label": "FArchiveFromStructuredArchiveImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveFromStructuredArchiveImpl"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FArchiveFromStructuredArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveFromStructuredArchive"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Concepts / Insertable . h \" # include \" Templates / Models . h \" # include \" Serialization / ArchiveProxy . h \" # include \" Serialization / StructuredArchiveSlots . h \" # include \" Templates / UniqueObj . h \" class FStructuredArchiveFromArchive {)",
    "insertText": "UE_NONCOPYABLE(FStructuredArchiveFromArchive)"
  },
  {
    "label": "FStructuredArchiveFromArchive()",
    "kind": "Method",
    "detail": "Function (uint32 ImplAlignment = 8 ; struct FImpl ; public :)",
    "insertText": "FStructuredArchiveFromArchive(FArchive& Ar)"
  },
  {
    "label": "FStructuredArchiveFromArchive()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStructuredArchiveFromArchive()"
  },
  {
    "label": "GetSlot()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveSlot)",
    "insertText": "GetSlot()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "alignas(ImplAlignment)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_TEXT_ARCHIVE_SUPPORT class FArchiveFromStructuredArchiveImpl : public FArchiveProxy {)",
    "insertText": "UE_NONCOPYABLE(FArchiveFromStructuredArchiveImpl)"
  },
  {
    "label": "FArchiveFromStructuredArchiveImpl()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FArchiveFromStructuredArchiveImpl(FStructuredArchiveSlot Slot)"
  },
  {
    "label": "FArchiveFromStructuredArchiveImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FArchiveFromStructuredArchiveImpl()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Close()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "AtEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AtEnd()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using FArchive::operator<<; FArchive&)",
    "insertText": "operator(class FName& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(class UObject*& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(class FText& Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "GetCacheableArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetCacheableArchive()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Finalize(FStructuredArchiveRecord Record)"
  },
  {
    "label": "OpenArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenArchive()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Commit()"
  },
  {
    "label": "FArchiveFromStructuredArchive()",
    "kind": "Method",
    "detail": "Function (TUniqueObj<FImpl> Pimpl ; } ; class FArchiveFromStructuredArchive { public :)",
    "insertText": "FArchiveFromStructuredArchive(FStructuredArchiveSlot InSlot) : Impl(InSlot)"
  },
  {
    "label": "GetArchive()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "GetArchive()"
  },
  {
    "label": "FArchiveFromStructuredArchive()",
    "kind": "Method",
    "detail": "Function (} private : FArchiveFromStructuredArchiveImpl Impl ; } ; # else class FArchiveFromStructuredArchive { public :)",
    "insertText": "FArchiveFromStructuredArchive(FStructuredArchiveSlot InSlot) : Ar(InSlot.GetUnderlyingArchive())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : FArchive& Ar ; } ; # endif template<T,std::enable_if_t<! TModels_V<CInsertable<FArchive&>,T>&& TModels_V<CInsertable<FStructuredArchiveSlot>,T>,int> = 0> FArchive&)",
    "insertText": "operator(FArchive& Ar, T& Obj)"
  },
  {
    "label": "ArAdapt()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveFromArchive)",
    "insertText": "ArAdapt(Ar)"
  },
  {
    "label": "Adapter()",
    "kind": "Method",
    "detail": "Function (# if WITH_TEXT_ARCHIVE_SUPPORT FArchiveFromStructuredArchive)",
    "insertText": "Adapter(Slot)"
  },
  {
    "label": "GetUnderlyingArchive()",
    "kind": "Method",
    "detail": "Function (# else FArchive& Ar = Slot .)",
    "insertText": "GetUnderlyingArchive()"
  }
]