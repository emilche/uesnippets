[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FIbmLiveStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIbmLiveStreaming"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRtmpUrl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRtmpUrl"
  },
  {
    "label": "FIngest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIngest"
  },
  {
    "label": "FFormData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFormData"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameplayMediaEncoder . h \" # include \" Interfaces / IHttpRequest . h \" # include \" GameplayMediaEncoderCommon . h \" # if)",
    "insertText": "defined(WITH_IBMRTMPINGEST)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# include \" rtmp_c / core / init . h \" # include \" rtmp_c / net / rtmp / rtmpclient . h \" # include \" rtmp_c / net / rtmp / modules / rtmpmodule_connect . h \" # include \" rtmp_c / net / rtmp / modules / rtmpmodule_broadcaster . h \" # include \" rtmp_c / core / rawdata . h \" # include \" rtmp_c / core / platform / threadfunc . h \" # include \" rtmp_c / codec / codecs . h \" } THIRD_PARTY_INCLUDES_END class FJsonObject ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(IbmLiveStreaming, Log, All)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class FIbmLiveStreaming final : private IGameplayMediaEncoderListener { public : using FBandwidthProbeCallback = TFunction<)",
    "insertText": "void(uint32, bool)"
  },
  {
    "label": "FIbmLiveStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIbmLiveStreaming()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FIbmLiveStreaming*)",
    "insertText": "Get()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(const FString& ClientId, const FString& ClientSecret, const FString& Channel, uint32 AudioSampleRate, uint32 AudioNumChannels, uint32 AudioBitrate)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "StartCmd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCmd()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()->Start()"
  },
  {
    "label": "StopCmd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopCmd()"
  },
  {
    "label": "FFormData()",
    "kind": "Method",
    "detail": "Function (} } private : enum class EState { None,GettingAccessToken,GettingIngestSettings,Connecting,Connected,Stopping } ; struct FRtmpUrl { FString Host ; FString Application ; FString Channel ; FString ApplicationName ; FString StreamName ; FString StreamNamePrefix ; } ; struct FIngest { FString StreamingKey ; FRtmpUrl RtmpUrl ; } ; struct FFormData { public :)",
    "insertText": "FFormData()"
  },
  {
    "label": "AddField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddField(const FString& Name, const FString& Value)"
  },
  {
    "label": "CreateHttpPostRequest()",
    "kind": "Method",
    "detail": "Function (template<T1,T2> TSharedRef<IHttpRequest>)",
    "insertText": "CreateHttpPostRequest(const FString& URL, T1&& TargetObj, T2&& TargetObjHandler)"
  },
  {
    "label": "CreateHttpPostRequestImpl()",
    "kind": "Method",
    "detail": "Function (auto HttpRequest =)",
    "insertText": "CreateHttpPostRequestImpl(URL)"
  },
  {
    "label": "OnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (HttpRequest ->)",
    "insertText": "OnProcessRequestComplete().BindRaw(std::forward<T1>(TargetObj), std::forward<T2>(TargetObjHandler))"
  },
  {
    "label": "CreateHttpPostRequestImpl()",
    "kind": "Method",
    "detail": "Function (FString BoundaryLabel ; FString BoundaryBegin ; FString BoundaryEnd ; FString Data ; TSharedRef<IHttpRequest>)",
    "insertText": "CreateHttpPostRequestImpl(const FString& URL)"
  },
  {
    "label": "OnMediaSample()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnMediaSample(const FGameplayMediaEncoderSample& Sample)"
  },
  {
    "label": "OnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProcessRequestComplete(FHttpRequestPtr SourceHttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "GetJsonField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetJsonField(const TSharedPtr<FJsonObject>& JsonObject, const FString& FieldName, FString& DestStr)"
  },
  {
    "label": "GetJsonField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetJsonField(const TSharedPtr<FJsonObject>& JsonObject, const FString& FieldName, const TSharedPtr<FJsonObject>*& DestObj)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect()"
  },
  {
    "label": "FinishStopOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishStopOnGameThread()"
  },
  {
    "label": "StopFromSocketThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopFromSocketThread()"
  },
  {
    "label": "OnConnectionError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionError(RTMPModuleConnect* Module, RTMPEvent Evt, void* RejectInfoObj)"
  },
  {
    "label": "OnConnectionSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionSuccess(RTMPModuleConnect* Module)"
  },
  {
    "label": "OnStreamPublished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamPublished(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStreamDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamDeleted(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStreamError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamError(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStopPublish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStopPublish(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStreamBandwidthChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamBandwidthChanged(RTMPModuleBroadcaster* Module, unsigned long Bandwidth, int32 QueueWasEmpty)"
  },
  {
    "label": "OnConnectionErrorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionErrorImpl(RTMPModuleConnect* Module, RTMPEvent Evt, void* RejectInfoObj)"
  },
  {
    "label": "OnConnectionSuccessImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionSuccessImpl(RTMPModuleConnect* Module)"
  },
  {
    "label": "OnStreamPublishedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamPublishedImpl(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStreamDeletedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamDeletedImpl(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStreamErrorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamErrorImpl(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStopPublishImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStopPublishImpl(RTMPModuleBroadcaster* Module)"
  },
  {
    "label": "OnStreamBandwidthChangedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamBandwidthChangedImpl(RTMPModuleBroadcaster* Module, uint32 Bandwidth, bool bQueueWasEmpty)"
  },
  {
    "label": "GetAvccHeader()",
    "kind": "Method",
    "detail": "Function (RawData*)",
    "insertText": "GetAvccHeader(const TArrayView<uint8>& DataView, const uint8** OutPpsEnd)"
  },
  {
    "label": "GetVideoPacket()",
    "kind": "Method",
    "detail": "Function (RawData*)",
    "insertText": "GetVideoPacket(const TArrayView<uint8>& Data, bool bVideoKeyframe, const uint8* DataBegin)"
  },
  {
    "label": "InjectVideo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectVideo(uint32 TimestampMs, const TArrayView<uint8>& DataView, bool bIsKeyFrame)"
  },
  {
    "label": "InjectAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectAudio(uint32 TimestampMs, const TArrayView<uint8>& DataView)"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (template<T> const uint8*)",
    "insertText": "Bytes(T& t)"
  },
  {
    "label": "CustomLogMsg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomLogMsg(const char* Msg)"
  },
  {
    "label": "CheckState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckState(const wchar_t* FuncName, EState ExpectedState)"
  },
  {
    "label": "CheckState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckState(const wchar_t* FuncName, EState ExpectedStateMin, EState ExpectedStateMax)"
  },
  {
    "label": "QueueFrame()",
    "kind": "Method",
    "detail": "Function (FIbmLiveStreaming* Singleton ; struct { FString ClientId ; FString ClientSecret ; FString Channel ; uint32 AudioSampleRate ; uint32 AudioNumChannels ; uint32 AudioBitrate ; } Config ; FIngest Ingest ; TAtomic<EState> State = EState::None ; TAtomic<uint32> AudioPacketsSent = 0 ; TAtomic<uint32> VideoPacketsSent = 0 ; FTimespan LiveStreamStartTimespan ; uint32 FpsCalculationStartVideoPackets = 0 ; double FpsCalculationStartTime = 0 ; struct { RTMPClient* Client = nullptr ; RTMPModuleBroadcaster* BroadcasterModule = nullptr ; RTMPModuleConnect* ConnectModule = nullptr ; } Ctx ; FCriticalSection CtxMutex ; void)",
    "insertText": "QueueFrame(RTMPContentType FrameType, RawData* Pkt, uint32 TimestampMs)"
  }
]