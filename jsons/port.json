[
  {
    "label": "IcePriorityValue",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IcePriorityValue"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "StunStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunStats"
  },
  {
    "label": "CandidateStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CandidateStats"
  },
  {
    "label": "ProtocolAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProtocolAddress"
  },
  {
    "label": "IceCandidateErrorEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceCandidateErrorEvent"
  },
  {
    "label": "CandidatePairChangeEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CandidatePairChangeEvent"
  },
  {
    "label": "Port",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Port"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "StringToProto()",
    "kind": "Method",
    "detail": "Function (absl::optional<ProtocolType>)",
    "insertText": "StringToProto(absl::string_view proto_name)"
  },
  {
    "label": "KeepAliveUntilPruned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepAliveUntilPruned()"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prune()"
  },
  {
    "label": "CancelPendingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPendingTasks()"
  },
  {
    "label": "SetIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceParameters(int component,\n                        absl::string_view username_fragment,\n                        absl::string_view password)"
  },
  {
    "label": "SendPortDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPortDestroyed(Port* port)"
  },
  {
    "label": "HandleIncomingPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIncomingPacket(rtc::AsyncPacketSocket* socket,\n                                    const char* data,\n                                    size_t size,\n                                    const rtc::SocketAddress& remote_addr,\n                                    int64_t packet_time_us)"
  },
  {
    "label": "SendUnknownAttributesErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUnknownAttributesErrorResponse(\n      StunMessage* message,\n      const rtc::SocketAddress& addr,\n      const std::vector<uint16_t>& unknown_types)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "set_timeout_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_timeout_delay(int delay)"
  },
  {
    "label": "MaybeIceRoleConflict()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeIceRoleConflict(const rtc::SocketAddress& addr,\n                            IceMessage* stun_msg,\n                            absl::string_view remote_ufrag)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend()"
  },
  {
    "label": "AddPrflxCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrflxCandidate(const Candidate& local)"
  },
  {
    "label": "ComputeFoundation()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeFoundation(absl::string_view type,\n                                absl::string_view protocol,\n                                absl::string_view relay_protocol,\n                                const rtc::SocketAddress& base_address)"
  },
  {
    "label": "UpdateNetworkCost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkCost()"
  },
  {
    "label": "AddAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAddress(const rtc::SocketAddress& address,\n                  const rtc::SocketAddress& base_address,\n                  const rtc::SocketAddress& related_address,\n                  absl::string_view protocol,\n                  absl::string_view relay_protocol,\n                  absl::string_view tcptype,\n                  absl::string_view type,\n                  uint32_t type_preference,\n                  uint32_t relay_preference,\n                  absl::string_view url,\n                  bool is_final)"
  },
  {
    "label": "PostAddAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostAddAddress(bool is_final)"
  },
  {
    "label": "AddOrReplaceConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrReplaceConnection(Connection* conn)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(const char* data,\n                    size_t size,\n                    const rtc::SocketAddress& addr,\n                    ProtocolType proto)"
  },
  {
    "label": "GetStunMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStunMessage(const char* data,\n                      size_t size,\n                      const rtc::SocketAddress& addr,\n                      std::unique_ptr<IceMessage>* out_msg,\n                      std::string* out_username)"
  },
  {
    "label": "IsCompatibleAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleAddress(const rtc::SocketAddress& addr)"
  },
  {
    "label": "DestroyAllConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllConnections()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  },
  {
    "label": "PostDestroyIfDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDestroyIfDead(bool delayed)"
  },
  {
    "label": "DestroyIfDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIfDead()"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnConnectionDestroyed(Connection* conn)"
  },
  {
    "label": "DestroyConnectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyConnectionInternal(Connection* conn, bool async)"
  },
  {
    "label": "OnNetworkTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkTypeChanged(const rtc::Network* network)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (candidates_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  }
]