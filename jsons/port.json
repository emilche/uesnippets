[
  {
    "label": "IcePriorityValue",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IcePriorityValue"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "StunStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunStats"
  },
  {
    "label": "CandidateStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CandidateStats"
  },
  {
    "label": "ProtocolAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProtocolAddress"
  },
  {
    "label": "IceCandidateErrorEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceCandidateErrorEvent"
  },
  {
    "label": "CandidatePairChangeEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CandidatePairChangeEvent"
  },
  {
    "label": "Port",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Port"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "StunStats()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_PORT_H_ # define P2P_BASE_PORT_H_ # include<map> # include<memory> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / candidate . h \" # include \" api / field_trials_view . h \" # include \" api / packet_socket_factory . h \" # include \" api / rtc_error . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / transport / field_trial_based_config . h \" # include \" api / transport / stun . h \" # include \" logging / rtc_event_log / events / rtc_event_ice_candidate_pair . h \" # include \" logging / rtc_event_log / events / rtc_event_ice_candidate_pair_config . h \" # include \" logging / rtc_event_log / ice_logger . h \" # include \" p2p / base / candidate_pair_interface . h \" # include \" p2p / base / connection . h \" # include \" p2p / base / connection_info . h \" # include \" p2p / base / p2p_constants . h \" # include \" p2p / base / port_interface . h \" # include \" p2p / base / stun_request . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / callback_list . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / memory / always_valid_pointer . h \" # include \" rtc_base / net_helper . h \" # include \" rtc_base / network . h \" # include \" rtc_base / proxy_info . h \" # include \" rtc_base / rate_tracker . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / weak_ptr . h \" namespace cricket { RTC_EXPORT const char LOCAL_PORT_TYPE [ ] ; RTC_EXPORT const char STUN_PORT_TYPE [ ] ; RTC_EXPORT const char PRFLX_PORT_TYPE [ ] ; RTC_EXPORT const char RELAY_PORT_TYPE [ ] ; const int DISCARD_PORT ; const char TCPTYPE_ACTIVE_STR [ ] ; const char TCPTYPE_PASSIVE_STR [ ] ; const char TCPTYPE_SIMOPEN_STR [ ] ; enum IcePriorityValue : uint8_t { ICE_TYPE_PREFERENCE_RELAY_TLS = 0,ICE_TYPE_PREFERENCE_RELAY_TCP = 1,ICE_TYPE_PREFERENCE_RELAY_UDP = 2,ICE_TYPE_PREFERENCE_PRFLX_TCP = 8 0,ICE_TYPE_PREFERENCE_HOST_TCP = 9 0,ICE_TYPE_PREFERENCE_SRFLX = 1 0 0,ICE_TYPE_PREFERENCE_PRFLX = 1 1 0,ICE_TYPE_PREFERENCE_HOST = 1 2 6 } ; enum class MdnsNameRegistrationStatus { kNotStarted,kInProgress,kCompleted,} ; class StunStats { public :)",
    "insertText": "StunStats()"
  },
  {
    "label": "StunStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StunStats(const StunStats&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StunStats&)",
    "insertText": "operator(const StunStats& other)"
  },
  {
    "label": "CandidateStats()",
    "kind": "Method",
    "detail": "Function (int stun_binding_requests_sent = 0 ; int stun_binding_responses_received = 0 ; double stun_binding_rtt_ms_total = 0 ; double stun_binding_rtt_ms_squared_total = 0 ; } ; class CandidateStats { public :)",
    "insertText": "CandidateStats()"
  },
  {
    "label": "CandidateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CandidateStats(const CandidateStats&)"
  },
  {
    "label": "CandidateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CandidateStats(CandidateStats&&)"
  },
  {
    "label": "CandidateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CandidateStats(Candidate candidate, absl::optional<StunStats> stats = absl::nullopt) : candidate_(std::move(candidate)), stun_stats_(std::move(stats))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CandidateStats&)",
    "insertText": "operator(const CandidateStats& other)"
  },
  {
    "label": "candidate()",
    "kind": "Method",
    "detail": "Function (const Candidate&)",
    "insertText": "candidate()"
  },
  {
    "label": "StringToProto()",
    "kind": "Method",
    "detail": "Function (absl::optional<ProtocolType>)",
    "insertText": "StringToProto(absl::string_view proto_name)"
  },
  {
    "label": "ProtocolAddress()",
    "kind": "Method",
    "detail": "Function (struct ProtocolAddress { rtc::SocketAddress address ; ProtocolType proto ;)",
    "insertText": "ProtocolAddress(const rtc::SocketAddress& a, ProtocolType p) : address(a), proto(p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ProtocolAddress& o)"
  },
  {
    "label": "IceCandidateErrorEvent()",
    "kind": "Method",
    "detail": "Function (} } ; struct IceCandidateErrorEvent {)",
    "insertText": "IceCandidateErrorEvent()"
  },
  {
    "label": "IceCandidateErrorEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IceCandidateErrorEvent(absl::string_view address, int port, absl::string_view url, int error_code, absl::string_view error_text) : address(std::move(address)), port(port), url(std::move(url)), error_code(error_code), error_text(std::move(error_text))"
  },
  {
    "label": "Port()",
    "kind": "Method",
    "detail": "Function (} std::string address ; int port = 0 ; std::string url ; int error_code = 0 ; std::string error_text ; } ; struct CandidatePairChangeEvent { CandidatePair selected_candidate_pair ; int64_t last_data_received_ms ; std::string reason ; int64_t estimated_disconnected_time_ms ; } ; typedef std::set<rtc::SocketAddress> ServerAddresses ; class Port : public PortInterface,public sigslot::has_slots<> { public : enum class State { INIT,KEEP_ALIVE_UNTIL_PRUNED,PRUNED } ;)",
    "insertText": "Port(webrtc::TaskQueueBase* thread, absl::string_view type, rtc::PacketSocketFactory* factory, const rtc::Network* network, absl::string_view username_fragment, absl::string_view password, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "Port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Port(webrtc::TaskQueueBase* thread, absl::string_view type, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username_fragment, absl::string_view password, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "Port()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Port()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "Type()"
  },
  {
    "label": "Network()",
    "kind": "Method",
    "detail": "Function (const rtc::Network*)",
    "insertText": "Network()"
  },
  {
    "label": "GetIceRole()",
    "kind": "Method",
    "detail": "Function (IceRole)",
    "insertText": "GetIceRole()"
  },
  {
    "label": "SetIceRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceRole(IceRole role)"
  },
  {
    "label": "SetIceTiebreaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceTiebreaker(uint64_t tiebreaker)"
  },
  {
    "label": "IceTiebreaker()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "IceTiebreaker()"
  },
  {
    "label": "SharedSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SharedSocket()"
  },
  {
    "label": "ResetSharedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSharedSocket()"
  },
  {
    "label": "KeepAliveUntilPruned()",
    "kind": "Method",
    "detail": "Function (shared_socket_ = false ; } void)",
    "insertText": "KeepAliveUntilPruned()"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prune()"
  },
  {
    "label": "CancelPendingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPendingTasks()"
  },
  {
    "label": "thread()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase*)",
    "insertText": "thread()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (content_name_ =)",
    "insertText": "string(content_name)"
  },
  {
    "label": "component()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "component()"
  },
  {
    "label": "send_retransmit_count_attribute()",
    "kind": "Method",
    "detail": "Function (component_ = component ; } bool)",
    "insertText": "send_retransmit_count_attribute()"
  },
  {
    "label": "generation()",
    "kind": "Method",
    "detail": "Function (send_retransmit_count_attribute_ = enable ; } uint32_t)",
    "insertText": "generation()"
  },
  {
    "label": "username_fragment()",
    "kind": "Method",
    "detail": "Function (generation_ = generation ; } const std::string)",
    "insertText": "username_fragment()"
  },
  {
    "label": "password()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "password()"
  },
  {
    "label": "Candidates()",
    "kind": "Method",
    "detail": "Function (sigslot::signal2<Port*,const Candidate&> SignalCandidateReady ; const std::vector<Candidate>&)",
    "insertText": "Candidates()"
  },
  {
    "label": "SubscribePortDestroyed()",
    "kind": "Method",
    "detail": "Function (sigslot::signal2<Port*,const IceCandidateErrorEvent&> SignalCandidateError ; sigslot::signal1<Port*> SignalPortComplete ; sigslot::signal1<Port*> SignalPortError ; void)",
    "insertText": "SubscribePortDestroyed(std::function<void(PortInterface*)> callback)"
  },
  {
    "label": "SendPortDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPortDestroyed(Port* port)"
  },
  {
    "label": "connections()",
    "kind": "Method",
    "detail": "Function (typedef std::map<rtc::SocketAddress,Connection*> AddressMap ; const AddressMap&)",
    "insertText": "connections()"
  },
  {
    "label": "DestroyConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyConnection(Connection* conn)"
  },
  {
    "label": "DestroyConnectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyConnectionInternal(conn, false)"
  },
  {
    "label": "DestroyConnectionAsync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyConnectionAsync(Connection* conn)"
  },
  {
    "label": "DestroyConnectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyConnectionInternal(conn, true)"
  },
  {
    "label": "HandleIncomingPacket()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleIncomingPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& remote_addr, int64_t packet_time_us)"
  },
  {
    "label": "CanHandleIncomingPacketsFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHandleIncomingPacketsFrom(const rtc::SocketAddress& remote_addr)"
  },
  {
    "label": "SendBindingErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBindingErrorResponse(StunMessage* message, const rtc::SocketAddress& addr, int error_code, absl::string_view reason)"
  },
  {
    "label": "SendUnknownAttributesErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUnknownAttributesErrorResponse(StunMessage* message, const rtc::SocketAddress& addr, const std::vector<uint16_t>& unknown_types)"
  },
  {
    "label": "set_proxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_proxy(absl::string_view user_agent, const rtc::ProxyInfo& proxy)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (user_agent_ =)",
    "insertText": "string(user_agent)"
  },
  {
    "label": "user_agent()",
    "kind": "Method",
    "detail": "Function (proxy_ = proxy ; } const std::string&)",
    "insertText": "user_agent()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "min_port()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "min_port()"
  },
  {
    "label": "ParseStunUsername()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseStunUsername(const StunMessage* stun_msg, std::string* local_username, std::string* remote_username)"
  },
  {
    "label": "CreateStunUsername()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CreateStunUsername(absl::string_view remote_username)"
  },
  {
    "label": "MaybeIceRoleConflict()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeIceRoleConflict(const rtc::SocketAddress& addr, IceMessage* stun_msg, absl::string_view remote_ufrag)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(rtc::AsyncPacketSocket* socket, const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend()"
  },
  {
    "label": "AddPrflxCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrflxCandidate(const Candidate& local)"
  },
  {
    "label": "network_cost()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "network_cost()"
  },
  {
    "label": "ComputeFoundation()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ComputeFoundation(absl::string_view type, absl::string_view protocol, absl::string_view relay_protocol, const rtc::SocketAddress& base_address)"
  },
  {
    "label": "UpdateNetworkCost()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateNetworkCost()"
  },
  {
    "label": "set_type()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_type(absl::string_view type)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (type_ =)",
    "insertText": "string(type)"
  },
  {
    "label": "NewWeakPtr()",
    "kind": "Method",
    "detail": "Function (} rtc::WeakPtr<Port>)",
    "insertText": "NewWeakPtr()"
  },
  {
    "label": "AddAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAddress(const rtc::SocketAddress& address, const rtc::SocketAddress& base_address, const rtc::SocketAddress& related_address, absl::string_view protocol, absl::string_view relay_protocol, absl::string_view tcptype, absl::string_view type, uint32_t type_preference, uint32_t relay_preference, absl::string_view url, bool is_final)"
  },
  {
    "label": "FinishAddingAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAddingAddress(const Candidate& c, bool is_final) RTC_RUN_ON(thread_)"
  },
  {
    "label": "PostAddAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostAddAddress(bool is_final)"
  },
  {
    "label": "AddOrReplaceConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrReplaceConnection(Connection* conn)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(const char* data, size_t size, const rtc::SocketAddress& addr, ProtocolType proto)"
  },
  {
    "label": "GetStunMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStunMessage(const char* data, size_t size, const rtc::SocketAddress& addr, std::unique_ptr<IceMessage>* out_msg, std::string* out_username)"
  },
  {
    "label": "IsCompatibleAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleAddress(const rtc::SocketAddress& addr)"
  },
  {
    "label": "StunDscpValue()",
    "kind": "Method",
    "detail": "Function (rtc::DiffServCodePoint)",
    "insertText": "StunDscpValue()"
  },
  {
    "label": "HandleConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionDestroyed(Connection* conn)"
  },
  {
    "label": "DestroyAllConnections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyAllConnections()"
  },
  {
    "label": "CopyPortInformationToPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyPortInformationToPacketInfo(rtc::PacketInfo* info)"
  },
  {
    "label": "mdns_name_registration_status()",
    "kind": "Method",
    "detail": "Function (MdnsNameRegistrationStatus)",
    "insertText": "mdns_name_registration_status()"
  },
  {
    "label": "field_trials()",
    "kind": "Method",
    "detail": "Function (mdns_name_registration_status_ = status ; } const webrtc::FieldTrialsView&)",
    "insertText": "field_trials()"
  },
  {
    "label": "PostDestroyIfDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDestroyIfDead(bool delayed)"
  },
  {
    "label": "DestroyIfDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIfDead()"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnConnectionDestroyed(Connection* conn)"
  },
  {
    "label": "DestroyConnectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyConnectionInternal(Connection* conn, bool async)"
  },
  {
    "label": "OnNetworkTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkTypeChanged(const rtc::Network* network)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase* const thread_ ; rtc::PacketSocketFactory* const factory_ ; std::string type_ ; bool send_retransmit_count_attribute_ ; const rtc::Network* network_ ; uint16_t min_port_ ; uint16_t max_port_ ; std::string content_name_ ; int component_ ; uint32_t generation_ ; std::string ice_username_fragment_ ; std::string password_ ; std::vector<Candidate> candidates_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "MaybeObfuscateAddress()",
    "kind": "Method",
    "detail": "Function (AddressMap connections_ ; int timeout_delay_ ; bool enable_port_packets_ ; IceRole ice_role_ ; uint64_t tiebreaker_ ; bool shared_socket_ ; std::string user_agent_ ; rtc::ProxyInfo proxy_ ; int16_t network_cost_ ; State state_ = State::INIT ; int64_t last_time_all_connections_removed_ = 0 ; MdnsNameRegistrationStatus mdns_name_registration_status_ = MdnsNameRegistrationStatus::kNotStarted ; rtc::WeakPtrFactory<Port> weak_factory_ ; webrtc::AlwaysValidPointer<const webrtc::FieldTrialsView,webrtc::FieldTrialBasedConfig> field_trials_ ; bool)",
    "insertText": "MaybeObfuscateAddress(Candidate* c, absl::string_view type, bool is_final) RTC_RUN_ON(thread_)"
  }
]