[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FProfilerStatMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerStatMetaData"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateFontInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateFontInfo"
  },
  {
    "label": "FFrameThreadTimes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameThreadTimes"
  },
  {
    "label": "FMiniViewSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMiniViewSample"
  },
  {
    "label": "SProfilerMiniView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProfilerMiniView"
  },
  {
    "label": "EMiniviewCursor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EMiniviewCursor"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSlateOnPaintState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateOnPaintState"
  },
  {
    "label": "FMiniViewSample()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" ProfilerCommon . h \" # include \" Layout / Geometry . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Rendering / RenderingCommon . h \" class FPaintArgs ; class FProfilerStatMetaData ; class FSlateWindowElementList ; struct FSlateFontInfo ; struct FFrameThreadTimes { int FrameNumber ; TMap<uint32,float> ThreadTimes ; } ; struct FMiniViewSample { TArray<int32> Frames ; TMap<uint32,float> ThreadTimes ; float TotalThreadTime ; float GameThreadTime ; float RenderThreadTime ;)",
    "insertText": "FMiniViewSample() : TotalThreadTime(0.0f) , GameThreadTime(0.0f) , RenderThreadTime(0.0f)"
  },
  {
    "label": "AddFrameAndAccumulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddFrameAndAccumulate(const FFrameThreadTimes& FrameThreadTimes)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Frames) int32( FrameThreadTimes.FrameNumber)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (ThreadTimes .)",
    "insertText": "FindOrAdd(It.Key() ) += It.Value()"
  },
  {
    "label": "AddFrameAndFindMax()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddFrameAndFindMax(const FFrameThreadTimes& FrameThreadTimes)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (float& ThreadMS = ThreadTimes .)",
    "insertText": "FindOrAdd(It.Key())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ThreadMS =)",
    "insertText": "Max(ThreadMS, It.Value())"
  },
  {
    "label": "CalculateTotalThreadTime()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CalculateTotalThreadTime(const uint32 GameThreadID, const TArray<uint32>& RenderThreadIDs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TotalThreadTime = 0 . 0 f ; GameThreadTime = 0 . 0 f ; RenderThreadTime = 0 . 0 f ;)",
    "insertText": "for(auto It = ThreadTimes.CreateConstIterator(); It; ++It)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const float CurrentTimeMS = It .)",
    "insertText": "Value()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TotalThreadTime + = CurrentTimeMS ; GameThreadTime + = CurrentTimeMS ; } else)",
    "insertText": "if(RenderThreadIDs.Contains(It.Key()))"
  },
  {
    "label": "TotalThreadTime()",
    "kind": "Method",
    "detail": "Function (TotalThreadTime + = CurrentTimeMS ; RenderThreadTime + = CurrentTimeMS ; } })",
    "insertText": "TotalThreadTime(float)Frames.Num()"
  },
  {
    "label": "GameThreadTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThreadTime(float)Frames.Num()"
  },
  {
    "label": "RenderThreadTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderThreadTime(float)Frames.Num()"
  },
  {
    "label": "CalculateMaxThreadTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalculateMaxThreadTime(const uint32 GameThreadID, const TArray<uint32>& RenderThreadIDs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentGameThreadTime = CurrentTimeMS ; } else)",
    "insertText": "if(RenderThreadIDs.Contains( It.Key() ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentRenderThreadTime = CurrentTimeMS ; } const float CurrentTotalTile = CurrentGameThreadTime + CurrentRenderThreadTime ;)",
    "insertText": "if(CurrentTotalTile > TotalThreadTime)"
  },
  {
    "label": "FSlateOnPaintState()",
    "kind": "Method",
    "detail": "Function (TotalThreadTime = CurrentTotalTile ; GameThreadTime = CurrentRenderThreadTime ; RenderThreadTime = CurrentGameThreadTime ; } } } } ; class SProfilerMiniView : public SCompoundWidget { enum { MIN_NUM_PIXELS_PER_SAMPLE = 4,MOUSE_SNAP_DISTANCE = 4,MAX_VISIBLE_THREADTIME = 1 5 0,} ; struct EMiniviewCursor { enum Type { Default,Arrow,Hand,} ; } ; struct FSlateOnPaintState : public FNoncopyable {)",
    "insertText": "FSlateOnPaintState(const FGeometry& InAllottedGeometry, const FSlateRect& InMyCullingRect, FSlateWindowElementList& InOutDrawElements, int32& InLayerId, const FWidgetStyle& InWidgetStyle, ESlateDrawEffect InDrawEffects ) : AllottedGeometry( InAllottedGeometry ) , MyCullingRect( InMyCullingRect ) , WidgetStyle( InWidgetStyle ) , OutDrawElements( InOutDrawElements ) , LayerId( InLayerId ) , DrawEffects( InDrawEffects)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} # if 0 void)",
    "insertText": "Set(const FGeometry& InAllottedGeometry, const FSlateRect& InMyCullingRect, FSlateWindowElementList& InOutDrawElements, int32& InLayerId, const FWidgetStyle& InWidgetStyle, ESlateDrawEffect InDrawEffects)"
  },
  {
    "label": "SProfilerMiniView()",
    "kind": "Method",
    "detail": "Function (_AllottedGeometry =& InAllottedGeometry ; _MyCullingRect =& InMyCullingRect ; _WidgetStyle =& InWidgetStyle ; _OutDrawElements =& InOutDrawElements ; _LayerId =& InLayerId ; _DrawEffects = InDrawEffects ; } # endif const FGeometry& AllottedGeometry ; const FSlateRect& MyCullingRect ; const FWidgetStyle& WidgetStyle ; FSlateWindowElementList& OutDrawElements ; int32& LayerId ; const ESlateDrawEffect DrawEffects ; } ; public :)",
    "insertText": "SProfilerMiniView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SProfilerMiniView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FVector2D& ScreenSpacePosition)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "AddThreadTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddThreadTime(int32 InFrameIndex, const TMap<uint32, float>& InThreadMS, const TSharedRef<FProfilerStatMetaData>& InStatMetaData)"
  },
  {
    "label": "MoveWithoutZoomSelectionBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWithoutZoomSelectionBox(int32 FrameStart, int32 FrameEnd)"
  },
  {
    "label": "MoveAndZoomSelectionBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAndZoomSelectionBox(int32 FrameStart, int32 FrameEnd)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawText(const FString& Text, const FSlateFontInfo& FontInfo, FVector2D Position, const FColor& TextColor, const FColor& ShadowColor, FVector2D ShadowOffset)"
  },
  {
    "label": "MoveSelectionBox()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "MoveSelectionBox(int32 FrameIndex)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EVENT_TwoParams(SProfilerMiniView, FSelectionBoxChangedEvent, int32 , int32)"
  },
  {
    "label": "OnSelectionBoxChanged()",
    "kind": "Method",
    "detail": "Function (FSelectionBoxChangedEvent&)",
    "insertText": "OnSelectionBoxChanged()"
  },
  {
    "label": "FrameIndexToPosition()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "FrameIndexToPosition(const int32 FrameIndex)"
  },
  {
    "label": "ProcessData()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "ProcessData()"
  },
  {
    "label": "UpdateNumPixelsPerSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNumPixelsPerSample()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumPixelsPerSample =)",
    "insertText": "Max((float)MIN_NUM_PIXELS_PER_SAMPLE, (float)ThisGeometry.GetLocalSize().X / (float)AllFrames.Num())"
  },
  {
    "label": "GetNumPixelsPerSample()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "GetNumPixelsPerSample()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FMiniViewSample& MiniViewSample = MiniViewSamples [ SampleIndex ] ;)",
    "insertText": "for(const int32& Frame : MiniViewSample.Frames)"
  },
  {
    "label": "ShouldUpdateData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUpdateData()"
  },
  {
    "label": "EnsureDataUpdateDuringPreview()",
    "kind": "Method",
    "detail": "Function (FSlateOnPaintState* PaintState ; FVector2D MousePositionOnButtonDown ; int32 SelectionBoxFrameStart ; int32 SelectionBoxFrameEnd ; int32 HoveredFrameIndex ; float DistanceDragged ; float NumPixelsPerSample ; float NumPixelsPerFrame ; bool bIsLeftMousePressed ; bool bIsRightMousePressed ; bool bCanBeStartDragged ; bool bCanBeEndDragged ; bool bAllowSelectionBoxZooming ; bool bUpdateData ; EMiniviewCursor::Type CursorType ; private : EActiveTimerReturnType)",
    "insertText": "EnsureDataUpdateDuringPreview(double InCurrentTime, float InDeltaTime)"
  }
]