[
  {
    "label": "ThreadPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadPool"
  },
  {
    "label": "ThreadPool()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_INTERNAL_THREAD_POOL_H_ # define ABSL_SYNCHRONIZATION_INTERNAL_THREAD_POOL_H_ # include<cassert> # include<cstddef> # include<functional> # include<queue> # include<thread> # include<vector> # include \" absl / base / thread_annotations . h \" # include \" absl / synchronization / mutex . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace synchronization_internal { class ThreadPool { public :)",
    "insertText": "ThreadPool(int num_threads)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (threads_ .)",
    "insertText": "push_back(std::thread(&ThreadPool::WorkLoop, this))"
  },
  {
    "label": "ThreadPool()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ThreadPool(const ThreadPool &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadPool&)",
    "insertText": "operator(const ThreadPool &)"
  },
  {
    "label": "ThreadPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadPool()"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function ({ absl::MutexLock)",
    "insertText": "l(&mu_)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (queue_ .)",
    "insertText": "push(nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(auto &t : threads_)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (t .)",
    "insertText": "join()"
  },
  {
    "label": "Schedule()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Schedule(std::function<void()> func)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(func != nullptr)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (queue_ .)",
    "insertText": "push(std::move(func))"
  },
  {
    "label": "WorkAvailable()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "WorkAvailable() const ABSL_EXCLUSIVE_LOCKS_REQUIRED(mu_)"
  },
  {
    "label": "WorkLoop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WorkLoop()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void()"
  },
  {
    "label": "Await()",
    "kind": "Method",
    "detail": "Function (mu_ .)",
    "insertText": "Await(absl::Condition(this, &ThreadPool::WorkAvailable))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (func =)",
    "insertText": "move(queue_.front())"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (queue_ .)",
    "insertText": "pop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(func == nullptr)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "func()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } absl::Mutex mu_ ; std::queue<std::function<)",
    "insertText": "void()>> queue_ ABSL_GUARDED_BY(mu_)"
  }
]