[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iterator"
  },
  {
    "label": "_Sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___LIBCXX_DEBUG_RANDOMIZE_RANGE_H # define _LIBCPP___LIBCXX_DEBUG_RANDOMIZE_RANGE_H # include<__config> # ifdef _LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY # include<__algorithm / shuffle . h> # include<__type_traits / is_constant_evaluated . h> # endif # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Iterator, class _Sentinel> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void __debug_randomize_range(_Iterator __first, _Sentinel __last)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef _LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY # ifdef _LIBCPP_CXX03_LANG # error Support for unspecified stability is only for C + + 1 1 and higher # endif)",
    "insertText": "if(!__libcpp_is_constant_evaluated()) std::__shuffle<_AlgPolicy>(__first, __last, __libcpp_debug_randomizer())"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "else(void)"
  }
]