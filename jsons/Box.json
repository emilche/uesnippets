[
  {
    "label": "Box",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Box"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_MATH_BOX_H # define NV_MATH_BOX_H # include<nvmath / Vector . h> # include<float . h> namespace nv { class Box { public :)",
    "insertText": "Box()"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "Box(const Box & b ) : m_mins(b.m_mins), m_maxs(b.m_maxs)"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Box(Vector3::Arg mins, Vector3::Arg maxs ) : m_mins(mins), m_maxs(maxs)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "float()"
  },
  {
    "label": "mins()",
    "kind": "Method",
    "detail": "Function (} Vector3)",
    "insertText": "mins()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (m_mins .)",
    "insertText": "set(FLT_MAX, FLT_MAX, FLT_MAX)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (m_maxs .)",
    "insertText": "set(-FLT_MAX, -FLT_MAX, -FLT_MAX)"
  },
  {
    "label": "cube()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cube(Vector3::Arg center, float dist)"
  },
  {
    "label": "setCenterExtents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCenterExtents(center, Vector3(dist, dist, dist))"
  },
  {
    "label": "setCenterExtents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCenterExtents(Vector3::Arg center, Vector3::Arg extents)"
  },
  {
    "label": "center()",
    "kind": "Method",
    "detail": "Function (m_mins = center - extents ; m_maxs = center + extents ; } Vector3)",
    "insertText": "center()"
  },
  {
    "label": "extents()",
    "kind": "Method",
    "detail": "Function (} Vector3)",
    "insertText": "extents()"
  },
  {
    "label": "extents()",
    "kind": "Method",
    "detail": "Function (} scalar)",
    "insertText": "extents(uint axis)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(axis < 3)"
  },
  {
    "label": "nvAssume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvAssume(false)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (m_mins =)",
    "insertText": "min(m_mins, p)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (m_maxs =)",
    "insertText": "max(m_maxs, p)"
  },
  {
    "label": "addBoxToBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addBoxToBounds(const Box & b)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (m_mins =)",
    "insertText": "min(m_mins, b.m_mins)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (m_maxs =)",
    "insertText": "max(m_maxs, b.m_maxs)"
  },
  {
    "label": "translate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "translate(Vector3::Arg v)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (m_mins + = v ; m_maxs + = v ; } void)",
    "insertText": "scale(float s)"
  },
  {
    "label": "area()",
    "kind": "Method",
    "detail": "Function (m_mins* = s ; m_maxs* = s ; } float)",
    "insertText": "area()"
  },
  {
    "label": "volume()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "volume()"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "contains(Vector3::Arg p)"
  }
]