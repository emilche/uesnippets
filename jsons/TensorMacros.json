[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_META_MACROS_H # define EIGEN_CXX11_TENSOR_TENSOR_META_MACROS_H # if !)",
    "insertText": "defined(EIGEN_GPUCC) #if EIGEN_HAS_VARIADIC_TEMPLATES #ifdef EIGEN_COMP_GNUC #if EIGEN_GNUC_AT_LEAST(4,8) #define EIGEN_HAS_SFINAE #endif #else #define EIGEN_HAS_SFINAE #endif #endif #endif #define EIGEN_SFINAE_ENABLE_IF( __condition__ ) \\ typename internal::enable_if< ( __condition__ ) , int >::type = 0 #if defined(SYCL_DEVICE_ONLY) #define EIGEN_DEVICE_REF #else #define EIGEN_DEVICE_REF & #endif #define EIGEN_SYCL_TRY_CATCH(X)"
  },
  {
    "label": "EIGEN_CATCH()",
    "kind": "Method",
    "detail": "Function (\\ EIGEN_TRY { X ; } \\)",
    "insertText": "EIGEN_CATCH(const cl::sycl::exception& e)"
  },
  {
    "label": "EIGEN_THROW_X()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_THROW_X(std::runtime_error(\"SYCL exception at \" + \\ std::string(__FILE__) + \":\" + \\ std::to_string(__LINE__) + \"\\n\" + \\ e.what()))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(false) #if (!defined(EIGEN_SYCL_LOCAL_MEM) && !defined(EIGEN_SYCL_NO_LOCAL_MEM)) || \\ (defined(EIGEN_SYCL_LOCAL_MEM) && defined(EIGEN_SYCL_NO_LOCAL_MEM)) #define EIGEN_SYCL_LOCAL_MEM_UNSET_OR_ON 1 #define EIGEN_SYCL_LOCAL_MEM_UNSET_OR_OFF 1 #elif defined(EIGEN_SYCL_LOCAL_MEM) && !defined(EIGEN_SYCL_NO_LOCAL_MEM) #define EIGEN_SYCL_LOCAL_MEM_UNSET_OR_ON 1 #elif !defined(EIGEN_SYCL_LOCAL_MEM) && defined(EIGEN_SYCL_NO_LOCAL_MEM) #define EIGEN_SYCL_LOCAL_MEM_UNSET_OR_OFF 1 #endif #if EIGEN_COMP_CLANG #define EIGEN_TENSOR_INHERIT_ASSIGNMENT_EQUAL_OPERATOR(Derived)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const Derived& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(other)"
  }
]