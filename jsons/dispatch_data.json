[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_DISPATCHER_INTERNAL_DISPATCH_DATA_H_ # define BASE_ALLOCATOR_DISPATCHER_INTERNAL_DISPATCH_DATA_H_ # include \" base / allocator / buildflags . h \" # include \" base / base_export . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC) #include \"base/allocator/partition_allocator/partition_alloc.h\" #endif #if BUILDFLAG(USE_ALLOCATOR_SHIM)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_ALLOCATOR_SHIM)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif struct BASE_EXPORT DispatchData { # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC)"
  },
  {
    "label": "SetAllocationObserverHooks()",
    "kind": "Method",
    "detail": "Function (using FreeObserverHook = partition_alloc::PartitionAllocHooks::FreeObserverHook ; DispatchData&)",
    "insertText": "SetAllocationObserverHooks(AllocationObserverHook*, FreeObserverHook*)"
  },
  {
    "label": "GetAllocationObserverHook()",
    "kind": "Method",
    "detail": "Function (AllocationObserverHook*)",
    "insertText": "GetAllocationObserverHook()"
  },
  {
    "label": "GetFreeObserverHook()",
    "kind": "Method",
    "detail": "Function (FreeObserverHook*)",
    "insertText": "GetFreeObserverHook()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : AllocationObserverHook* allocation_observer_hook_ = nullptr ; FreeObserverHook* free_observer_hook_ = nullptr ; public : # endif # if)",
    "insertText": "BUILDFLAG(USE_ALLOCATOR_SHIM) DispatchData& SetAllocatorDispatch(AllocatorDispatch* allocator_dispatch)"
  },
  {
    "label": "GetAllocatorDispatch()",
    "kind": "Method",
    "detail": "Function (AllocatorDispatch*)",
    "insertText": "GetAllocatorDispatch()"
  }
]