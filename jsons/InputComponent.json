[
  {
    "label": "UPlayerInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayerInput"
  },
  {
    "label": "DelegateType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelegateType"
  },
  {
    "label": "DynamicDelegateType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicDelegateType"
  },
  {
    "label": "TInputUnifiedDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInputUnifiedDelegate"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "FInputBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputBinding"
  },
  {
    "label": "FInputActionUnifiedDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputActionUnifiedDelegate"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputActionBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputActionBinding"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "FInputKeyBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyBinding"
  },
  {
    "label": "FInputTouchUnifiedDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputTouchUnifiedDelegate"
  },
  {
    "label": "FInputTouchBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputTouchBinding"
  },
  {
    "label": "EInputEvent",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInputEvent"
  },
  {
    "label": "FInputAxisUnifiedDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisUnifiedDelegate"
  },
  {
    "label": "FInputAxisBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisBinding"
  },
  {
    "label": "FInputAxisKeyBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisKeyBinding"
  },
  {
    "label": "FInputVectorAxisUnifiedDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputVectorAxisUnifiedDelegate"
  },
  {
    "label": "FInputVectorAxisBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputVectorAxisBinding"
  },
  {
    "label": "FInputGestureUnifiedDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputGestureUnifiedDelegate"
  },
  {
    "label": "FInputGestureBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputGestureBinding"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCachedKeyToActionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedKeyToActionInfo"
  },
  {
    "label": "FGetActionsBoundToKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGetActionsBoundToKey"
  },
  {
    "label": "UEnhancedInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnhancedInputComponent"
  },
  {
    "label": "TInputUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" InputCoreTypes . h \" # include \" Components / ActorComponent . h \" # include \" Framework / Commands / InputChord . h \" # include \" InputComponent . generated . h \" class UPlayerInput ; template<class DelegateType,class DynamicDelegateType> struct TInputUnifiedDelegate {)",
    "insertText": "TInputUnifiedDelegate()"
  },
  {
    "label": "TInputUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TInputUnifiedDelegate(DelegateType D) : FuncDelegate(MakeShared<DelegateType>(MoveTemp(D)))"
  },
  {
    "label": "TInputUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TInputUnifiedDelegate(DynamicDelegateType D) : FuncDynDelegate(MakeShared<DynamicDelegateType>(MoveTemp(D)))"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "IsBoundToObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBoundToObject(void const* Object)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(FuncDynDelegate.IsValid())"
  },
  {
    "label": "BindDelegate()",
    "kind": "Method",
    "detail": "Function (} } return false ; } template<class UserClass> void)",
    "insertText": "BindDelegate(UserClass* Object, typename DelegateType::template TMethodPtr< UserClass > Func)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FuncDynDelegate .)",
    "insertText": "Reset()"
  },
  {
    "label": "DelegateType()",
    "kind": "Method",
    "detail": "Function (; FuncDelegate = MakeShared<)",
    "insertText": "DelegateType(DelegateType::CreateUObject(Object, Func))"
  },
  {
    "label": "BindDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindDelegate(UObject* Object, const FName FuncName)"
  },
  {
    "label": "DynamicDelegateType()",
    "kind": "Method",
    "detail": "Function (FuncDynDelegate = MakeShared<)",
    "insertText": "DynamicDelegateType()"
  },
  {
    "label": "BindUFunction()",
    "kind": "Method",
    "detail": "Function (FuncDynDelegate ->)",
    "insertText": "BindUFunction(Object, FuncName)"
  },
  {
    "label": "GetDelegateForManualSet()",
    "kind": "Method",
    "detail": "Function (} DelegateType&)",
    "insertText": "GetDelegateForManualSet()"
  },
  {
    "label": "DelegateType()",
    "kind": "Method",
    "detail": "Function (FuncDelegate = MakeShared<)",
    "insertText": "DelegateType()"
  },
  {
    "label": "GetDelegate()",
    "kind": "Method",
    "detail": "Function (} const DelegateType&)",
    "insertText": "GetDelegate()"
  },
  {
    "label": "GetDynamicDelegate()",
    "kind": "Method",
    "detail": "Function (} const DynamicDelegateType&)",
    "insertText": "GetDynamicDelegate()"
  },
  {
    "label": "FInputBinding()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedPtr<DelegateType> FuncDelegate ; TSharedPtr<DynamicDelegateType> FuncDynDelegate ; const DelegateType UnboundDelegate ; const DynamicDelegateType UnboundDynamicDelegate ; } ; template<class DelegateType,class DynamicDelegateType> const DelegateType TInputUnifiedDelegate<DelegateType,DynamicDelegateType>::UnboundDelegate ; template<class DelegateType,class DynamicDelegateType> const DynamicDelegateType TInputUnifiedDelegate<DelegateType,DynamicDelegateType>::UnboundDynamicDelegate ; struct FInputBinding { uint8 bConsumeInput : 1 ; uint8 bExecuteWhenPaused : 1 ;)",
    "insertText": "FInputBinding() : bConsumeInput(true) , bExecuteWhenPaused(false)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE(FInputActionHandlerSignature)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FInputActionHandlerWithKeySignature, FKey)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FInputActionHandlerDynamicSignature, FKey, Key)"
  },
  {
    "label": "FInputActionUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (struct FInputActionUnifiedDelegate {)",
    "insertText": "FInputActionUnifiedDelegate() : BoundDelegateType(EBoundDelegate::Unbound)"
  },
  {
    "label": "FInputActionUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FInputActionUnifiedDelegate(FInputActionHandlerSignature D) : FuncDelegate(MakeShared<FInputActionHandlerSignature>(MoveTemp(D))), BoundDelegateType(EBoundDelegate::Delegate)"
  },
  {
    "label": "FInputActionUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FInputActionUnifiedDelegate(FInputActionHandlerWithKeySignature D) : FuncDelegateWithKey(MakeShared<FInputActionHandlerWithKeySignature>(MoveTemp(D))), BoundDelegateType(EBoundDelegate::DelegateWithKey)"
  },
  {
    "label": "FInputActionUnifiedDelegate()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FInputActionUnifiedDelegate(FInputActionHandlerDynamicSignature D) : FuncDynDelegate(MakeShared<FInputActionHandlerDynamicSignature>(MoveTemp(D))), BoundDelegateType(EBoundDelegate::DynamicDelegate)"
  },
  {
    "label": "GetUObject()",
    "kind": "Method",
    "detail": "Function (} return false ; } const UObject*)",
    "insertText": "GetUObject()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } const void*)",
    "insertText": "GetObject()"
  },
  {
    "label": "BindDelegate()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<class UserClass> void)",
    "insertText": "BindDelegate(UserClass* Object, typename FInputActionHandlerSignature::template TMethodPtr< UserClass > Func)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unbind()"
  },
  {
    "label": "FInputActionHandlerSignature()",
    "kind": "Method",
    "detail": "Function (BoundDelegateType = EBoundDelegate::Delegate ; FuncDelegate = MakeShared<)",
    "insertText": "FInputActionHandlerSignature(FInputActionHandlerSignature::CreateUObject(Object, Func))"
  },
  {
    "label": "BindDelegate()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> void)",
    "insertText": "BindDelegate(UserClass* Object, typename FInputActionHandlerWithKeySignature::template TMethodPtr< UserClass > Func)"
  },
  {
    "label": "FInputActionHandlerWithKeySignature()",
    "kind": "Method",
    "detail": "Function (BoundDelegateType = EBoundDelegate::DelegateWithKey ; FuncDelegateWithKey = MakeShared<)",
    "insertText": "FInputActionHandlerWithKeySignature(FInputActionHandlerWithKeySignature::CreateUObject(Object, Func))"
  },
  {
    "label": "BindDelegate()",
    "kind": "Method",
    "detail": "Function (} template<class DelegateType,class UserClass,. . . VarTypes> void)",
    "insertText": "BindDelegate(UserClass* Object, typename DelegateType::template TMethodPtr< UserClass > Func, VarTypes... Vars)"
  },
  {
    "label": "FInputActionHandlerSignature()",
    "kind": "Method",
    "detail": "Function (BoundDelegateType = EBoundDelegate::Delegate ; FuncDelegate = MakeShared<)",
    "insertText": "FInputActionHandlerSignature(FInputActionHandlerSignature::CreateUObject(Object, Func, Vars...))"
  },
  {
    "label": "FInputActionHandlerDynamicSignature()",
    "kind": "Method",
    "detail": "Function (BoundDelegateType = EBoundDelegate::DynamicDelegate ; FuncDynDelegate = MakeShared<)",
    "insertText": "FInputActionHandlerDynamicSignature()"
  },
  {
    "label": "FInputActionHandlerSignature()",
    "kind": "Method",
    "detail": "Function (BoundDelegateType = EBoundDelegate::Delegate ; FuncDelegate = MakeShared<)",
    "insertText": "FInputActionHandlerSignature()"
  },
  {
    "label": "FInputActionHandlerWithKeySignature()",
    "kind": "Method",
    "detail": "Function (BoundDelegateType = EBoundDelegate::DelegateWithKey ; FuncDelegateWithKey = MakeShared<)",
    "insertText": "FInputActionHandlerWithKeySignature()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (break ; } BoundDelegateType = EBoundDelegate::Unbound ; } void)",
    "insertText": "Execute(const FKey Key)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FuncDelegate ->)",
    "insertText": "Execute()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case EBoundDelegate::DelegateWithKey :)",
    "insertText": "if(FuncDelegateWithKey->IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FuncDelegateWithKey ->)",
    "insertText": "Execute(Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case EBoundDelegate::DynamicDelegate :)",
    "insertText": "if(FuncDynDelegate->IsBound())"
  },
  {
    "label": "FInputActionBinding()",
    "kind": "Method",
    "detail": "Function (} break ; } } private : TSharedPtr<FInputActionHandlerSignature> FuncDelegate ; TSharedPtr<FInputActionHandlerWithKeySignature> FuncDelegateWithKey ; TSharedPtr<FInputActionHandlerDynamicSignature> FuncDynDelegate ; enum class EBoundDelegate : uint8 { Unbound,Delegate,DelegateWithKey,DynamicDelegate } ; EBoundDelegate BoundDelegateType ; } ; struct FInputActionBinding : public FInputBinding { private : uint8 bPaired : 1 ; public : TEnumAsByte<EInputEvent> KeyEvent ; private : FName ActionName ; int32 Handle ; public : FInputActionUnifiedDelegate ActionDelegate ;)",
    "insertText": "FInputActionBinding() : FInputBinding() , bPaired(false) , KeyEvent(EInputEvent::IE_Pressed) , ActionName(NAME_None) , Handle(INDEX_NONE)"
  },
  {
    "label": "FInputActionBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputActionBinding(const FName InActionName, const EInputEvent InKeyEvent) : FInputBinding() , bPaired(false) , KeyEvent(InKeyEvent) , ActionName(InActionName) , Handle(INDEX_NONE)"
  },
  {
    "label": "GetActionName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetActionName()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GenerateNewHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateNewHandle()"
  },
  {
    "label": "FInputKeyBinding()",
    "kind": "Method",
    "detail": "Function (class UInputComponent ; } ; struct FInputKeyBinding : public FInputBinding { TEnumAsByte<EInputEvent> KeyEvent ; FInputChord Chord ; FInputActionUnifiedDelegate KeyDelegate ;)",
    "insertText": "FInputKeyBinding() : FInputBinding() , KeyEvent(EInputEvent::IE_Pressed)"
  },
  {
    "label": "FInputKeyBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputKeyBinding(const FInputChord InChord, const EInputEvent InKeyEvent) : FInputBinding() , KeyEvent(InKeyEvent) , Chord(InChord)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInputTouchHandlerSignature, ETouchIndex::Type, FVector)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_TwoParams(FInputTouchHandlerDynamicSignature, ETouchIndex::Type, FingerIndex, FVector, Location)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (struct FInputTouchUnifiedDelegate : public TInputUnifiedDelegate<FInputTouchHandlerSignature,FInputTouchHandlerDynamicSignature> { void)",
    "insertText": "Execute(const ETouchIndex::Type FingerIndex, const FVector Location)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FuncDelegate ->)",
    "insertText": "Execute(FingerIndex, Location)"
  },
  {
    "label": "FInputTouchBinding()",
    "kind": "Method",
    "detail": "Function (} } } } ; struct FInputTouchBinding : public FInputBinding { TEnumAsByte<EInputEvent> KeyEvent ; FInputTouchUnifiedDelegate TouchDelegate ;)",
    "insertText": "FInputTouchBinding() : FInputBinding() , KeyEvent(EInputEvent::IE_Pressed)"
  },
  {
    "label": "FInputTouchBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputTouchBinding(const enum EInputEvent InKeyEvent) : FInputBinding() , KeyEvent(InKeyEvent)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FInputAxisHandlerSignature, float)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FInputAxisHandlerDynamicSignature, float, AxisValue)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (struct FInputAxisUnifiedDelegate : public TInputUnifiedDelegate<FInputAxisHandlerSignature,FInputAxisHandlerDynamicSignature> { void)",
    "insertText": "Execute(const float AxisValue)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FuncDelegate ->)",
    "insertText": "Execute(AxisValue)"
  },
  {
    "label": "FInputAxisBinding()",
    "kind": "Method",
    "detail": "Function (} } } } ; struct FInputAxisBinding : public FInputBinding { FName AxisName ; FInputAxisUnifiedDelegate AxisDelegate ; float AxisValue ;)",
    "insertText": "FInputAxisBinding() : FInputBinding() , AxisName(NAME_None) , AxisValue(0.f)"
  },
  {
    "label": "FInputAxisBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputAxisBinding(const FName InAxisName) : FInputBinding() , AxisName(InAxisName) , AxisValue(0.f)"
  },
  {
    "label": "FInputAxisKeyBinding()",
    "kind": "Method",
    "detail": "Function (} } ; struct FInputAxisKeyBinding : public FInputBinding { float AxisValue ; FKey AxisKey ; FInputAxisUnifiedDelegate AxisDelegate ;)",
    "insertText": "FInputAxisKeyBinding() : FInputBinding() , AxisValue(0.f)"
  },
  {
    "label": "FInputAxisKeyBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputAxisKeyBinding(const FKey InAxisKey) : FInputBinding() , AxisValue(0.f) , AxisKey(InAxisKey)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FInputVectorAxisHandlerSignature, FVector)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FInputVectorAxisHandlerDynamicSignature, FVector, AxisValue)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (struct FInputVectorAxisUnifiedDelegate : public TInputUnifiedDelegate<FInputVectorAxisHandlerSignature,FInputVectorAxisHandlerDynamicSignature> { void)",
    "insertText": "Execute(const FVector AxisValue)"
  },
  {
    "label": "FInputVectorAxisBinding()",
    "kind": "Method",
    "detail": "Function (} } } } ; struct FInputVectorAxisBinding : public FInputBinding { FVector AxisValue ; FKey AxisKey ; FInputVectorAxisUnifiedDelegate AxisDelegate ;)",
    "insertText": "FInputVectorAxisBinding() : FInputBinding()"
  },
  {
    "label": "FInputVectorAxisBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputVectorAxisBinding(const FKey InAxisKey) : FInputBinding() , AxisKey(InAxisKey)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FInputGestureHandlerSignature, float)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FInputGestureHandlerDynamicSignature, float, Value)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (struct FInputGestureUnifiedDelegate : public TInputUnifiedDelegate<FInputGestureHandlerSignature,FInputGestureHandlerDynamicSignature> { void)",
    "insertText": "Execute(const float Value)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FuncDelegate ->)",
    "insertText": "Execute(Value)"
  },
  {
    "label": "FInputGestureBinding()",
    "kind": "Method",
    "detail": "Function (} } } } ; struct FInputGestureBinding : public FInputBinding { float GestureValue ; FKey GestureKey ; FInputGestureUnifiedDelegate GestureDelegate ;)",
    "insertText": "FInputGestureBinding() : FInputBinding() , GestureValue(0.f)"
  },
  {
    "label": "FInputGestureBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputGestureBinding(const FKey InGestureKey) : FInputBinding() , GestureValue(0.f) , GestureKey(InGestureKey)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { CAS_LeftStick,CAS_RightStick,CAS_MAX } ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FCachedKeyToActionInfo()",
    "kind": "Method",
    "detail": "Function (uint32 KeyMapBuiltForIndex ; TMap<FKey,TArray<TSharedPtr<FInputActionBinding>>> KeyToActionMap ; TArray<TSharedPtr<FInputActionBinding>> AnyKeyToActionMap ;)",
    "insertText": "FCachedKeyToActionInfo() : PlayerInput(nullptr) , KeyMapBuiltForIndex(0)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(NotBlueprintable, transient, config=Input, hidecategories=(Activation, \"Components|Activation\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "ClearBindingsForObject()",
    "kind": "Method",
    "detail": "Function (public : int32 Priority ; uint8 bBlockInput : 1 ; void)",
    "insertText": "ClearBindingsForObject(UObject* InOwner)"
  },
  {
    "label": "ConditionalBuildKeyMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBuildKeyMap(UPlayerInput* PlayerInput)"
  },
  {
    "label": "GetAxisValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAxisValue(const FName AxisName)"
  },
  {
    "label": "GetAxisKeyValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAxisKeyValue(const FKey AxisKey)"
  },
  {
    "label": "GetVectorAxisValue()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetVectorAxisValue(const FKey AxisKey)"
  },
  {
    "label": "HasBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBindings()"
  },
  {
    "label": "AddActionBinding()",
    "kind": "Method",
    "detail": "Function (FInputActionBinding&)",
    "insertText": "AddActionBinding(FInputActionBinding Binding)"
  },
  {
    "label": "ClearActionBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActionBindings()"
  },
  {
    "label": "GetActionBinding()",
    "kind": "Method",
    "detail": "Function (FInputActionBinding&)",
    "insertText": "GetActionBinding(const int32 BindingIndex)"
  },
  {
    "label": "GetNumActionBindings()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumActionBindings()"
  },
  {
    "label": "RemoveActionBinding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveActionBinding(const int32 BindingIndex)"
  },
  {
    "label": "RemoveActionBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActionBinding(FName ActionName, EInputEvent KeyEvent)"
  },
  {
    "label": "RemoveActionBindingForHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActionBindingForHandle(const int32 Handle)"
  },
  {
    "label": "RemoveActionBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActionBinding(const FInputActionBinding &BindingToRemove, const int32 BindingIndex)"
  },
  {
    "label": "ClearBindingValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBindingValues()"
  },
  {
    "label": "BindAction()",
    "kind": "Method",
    "detail": "Function (template<class UserClass> FInputActionBinding&)",
    "insertText": "BindAction(const FName ActionName, const EInputEvent KeyEvent, UserClass* Object, typename FInputActionHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "AB()",
    "kind": "Method",
    "detail": "Function (FInputActionBinding)",
    "insertText": "AB(ActionName, KeyEvent)"
  },
  {
    "label": "BindDelegate()",
    "kind": "Method",
    "detail": "Function (AB . ActionDelegate .)",
    "insertText": "BindDelegate(Object, Func)"
  },
  {
    "label": "BindAction()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputActionBinding&)",
    "insertText": "BindAction(const FName ActionName, const EInputEvent KeyEvent, UserClass* Object, typename FInputActionHandlerWithKeySignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "BindAction()",
    "kind": "Method",
    "detail": "Function (} template<class DelegateType,class UserClass,. . . VarTypes> FInputActionBinding&)",
    "insertText": "BindAction(const FName ActionName, const EInputEvent KeyEvent, UserClass* Object, typename DelegateType::template TMethodPtr< UserClass > Func, VarTypes... Vars)"
  },
  {
    "label": "DelegateType()",
    "kind": "Method",
    "detail": "Function (AB . ActionDelegate . BindDelegate<)",
    "insertText": "DelegateType(Object, Func, Vars...)"
  },
  {
    "label": "BindAxis()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputAxisBinding&)",
    "insertText": "BindAxis(const FName AxisName, UserClass* Object, typename FInputAxisHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "AB()",
    "kind": "Method",
    "detail": "Function (FInputAxisBinding)",
    "insertText": "AB(AxisName)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (AxisBindings .)",
    "insertText": "Emplace(MoveTemp(AB))"
  },
  {
    "label": "RemoveAxisBinding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAxisBinding(const FName AxisName)"
  },
  {
    "label": "ClearAxisBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAxisBindings()"
  },
  {
    "label": "BindAxis()",
    "kind": "Method",
    "detail": "Function (FInputAxisBinding&)",
    "insertText": "BindAxis(const FName AxisName)"
  },
  {
    "label": "BindAxisKey()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputAxisKeyBinding&)",
    "insertText": "BindAxisKey(const FKey AxisKey, UserClass* Object, typename FInputAxisHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "AB()",
    "kind": "Method",
    "detail": "Function (FInputAxisKeyBinding)",
    "insertText": "AB(AxisKey)"
  },
  {
    "label": "BindAxisKey()",
    "kind": "Method",
    "detail": "Function (} FInputAxisKeyBinding&)",
    "insertText": "BindAxisKey(const FKey AxisKey)"
  },
  {
    "label": "BindVectorAxis()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputVectorAxisBinding&)",
    "insertText": "BindVectorAxis(const FKey AxisKey, UserClass* Object, typename FInputVectorAxisHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "BindVectorAxis()",
    "kind": "Method",
    "detail": "Function (} FInputVectorAxisBinding&)",
    "insertText": "BindVectorAxis(const FKey AxisKey)"
  },
  {
    "label": "BindKey()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputKeyBinding&)",
    "insertText": "BindKey(const FInputChord Chord, const EInputEvent KeyEvent, UserClass* Object, typename FInputActionHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "KB()",
    "kind": "Method",
    "detail": "Function (FInputKeyBinding)",
    "insertText": "KB(Chord, KeyEvent)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (KeyBindings .)",
    "insertText": "Emplace(MoveTemp(KB))"
  },
  {
    "label": "BindKey()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputKeyBinding&)",
    "insertText": "BindKey(const FKey Key, const EInputEvent KeyEvent, UserClass* Object, typename FInputActionHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "BindKey()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputKeyBinding&)",
    "insertText": "BindKey(const FKey Key, const EInputEvent KeyEvent, UserClass* Object, typename FInputActionHandlerWithKeySignature::TMethodPtr<UserClass> Func)"
  },
  {
    "label": "KB()",
    "kind": "Method",
    "detail": "Function (FInputKeyBinding)",
    "insertText": "KB(FInputChord(Key, false, false, false, false), KeyEvent)"
  },
  {
    "label": "BindTouch()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputTouchBinding&)",
    "insertText": "BindTouch(const EInputEvent KeyEvent, UserClass* Object, typename FInputTouchHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "TB()",
    "kind": "Method",
    "detail": "Function (FInputTouchBinding)",
    "insertText": "TB(KeyEvent)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TouchBindings .)",
    "insertText": "Emplace(MoveTemp(TB))"
  },
  {
    "label": "BindGesture()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> FInputGestureBinding&)",
    "insertText": "BindGesture(const FKey GestureKey, UserClass* Object, typename FInputGestureHandlerSignature::TMethodPtr< UserClass > Func)"
  },
  {
    "label": "GB()",
    "kind": "Method",
    "detail": "Function (FInputGestureBinding)",
    "insertText": "GB(GestureKey)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (GestureBindings .)",
    "insertText": "Emplace(MoveTemp(GB))"
  },
  {
    "label": "GetActionsBoundToKey()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "GetActionsBoundToKey(UPlayerInput* PlayerInput, FKey Key, TArray<TSharedPtr<FInputActionBinding>>& Actions)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (class UEnhancedInputComponent ; } ; struct FGetActionsBoundToKey { private : void)",
    "insertText": "Get(UInputComponent* InputComponent, UPlayerInput* PlayerInput, FKey Key, TArray<TSharedPtr<FInputActionBinding>>& Actions)"
  },
  {
    "label": "GetActionsBoundToKey()",
    "kind": "Method",
    "detail": "Function (InputComponent ->)",
    "insertText": "GetActionsBoundToKey(PlayerInput, Key, Actions)"
  }
]