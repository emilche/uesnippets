[
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_CONSTANTS"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_PARAMETER"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC1"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_PARAMETER1"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef __cplusplus # error D3DX12 requires C + + # endif # include \" d3d12 . h \" # include \" d3dx12_default . h \" struct CD3DX12_DESCRIPTOR_RANGE : public D3D12_DESCRIPTOR_RANGE {)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE()"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE(const D3D12_DESCRIPTOR_RANGE &o) noexcept : D3D12_DESCRIPTOR_RANGE(o)"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(rangeType, numDescriptors, baseShaderRegister, registerSpace, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, rangeType, numDescriptors, baseShaderRegister, registerSpace, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_DESCRIPTOR_RANGE &range, D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE()",
    "kind": "Method",
    "detail": "Function (range . RangeType = rangeType ; range . NumDescriptors = numDescriptors ; range . BaseShaderRegister = baseShaderRegister ; range . RegisterSpace = registerSpace ; range . OffsetInDescriptorsFromTableStart = offsetInDescriptorsFromTableStart ; } } ; struct CD3DX12_ROOT_DESCRIPTOR_TABLE : public D3D12_ROOT_DESCRIPTOR_TABLE {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE(const D3D12_ROOT_DESCRIPTOR_TABLE &o) noexcept : D3D12_ROOT_DESCRIPTOR_TABLE(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE* _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(numDescriptorRanges, _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE* _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, numDescriptorRanges, _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR_TABLE &rootDescriptorTable, UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE* _pDescriptorRanges)"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS()",
    "kind": "Method",
    "detail": "Function (rootDescriptorTable . NumDescriptorRanges = numDescriptorRanges ; rootDescriptorTable . pDescriptorRanges = _pDescriptorRanges ; } } ; struct CD3DX12_ROOT_CONSTANTS : public D3D12_ROOT_CONSTANTS {)",
    "insertText": "CD3DX12_ROOT_CONSTANTS()"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_CONSTANTS(const D3D12_ROOT_CONSTANTS &o) noexcept : D3D12_ROOT_CONSTANTS(o)"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_CONSTANTS(UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(num32BitValues, shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, num32BitValues, shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_CONSTANTS &rootConstants, UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR()",
    "kind": "Method",
    "detail": "Function (rootConstants . Num32BitValues = num32BitValues ; rootConstants . ShaderRegister = shaderRegister ; rootConstants . RegisterSpace = registerSpace ; } } ; struct CD3DX12_ROOT_DESCRIPTOR : public D3D12_ROOT_DESCRIPTOR {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR(const D3D12_ROOT_DESCRIPTOR &o) noexcept : D3D12_ROOT_DESCRIPTOR(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR(UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR &table, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER()",
    "kind": "Method",
    "detail": "Function (table . ShaderRegister = shaderRegister ; table . RegisterSpace = registerSpace ; } } ; struct CD3DX12_ROOT_PARAMETER : public D3D12_ROOT_PARAMETER {)",
    "insertText": "CD3DX12_ROOT_PARAMETER()"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_PARAMETER(const D3D12_ROOT_PARAMETER &o) noexcept : D3D12_ROOT_PARAMETER(o)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.DescriptorTable, numDescriptorRanges, pDescriptorRanges)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstants(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.Constants, num32BitValues, shaderRegister, registerSpace)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_CBV ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.Descriptor, shaderRegister, registerSpace)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsDescriptorTable(*this, numDescriptorRanges, pDescriptorRanges, visibility)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstants(UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsConstants(*this, num32BitValues, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsConstantBufferView(*this, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsShaderResourceView(*this, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsUnorderedAccessView(*this, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC()",
    "kind": "Method",
    "detail": "Function (} } ; struct CD3DX12_STATIC_SAMPLER_DESC : public D3D12_STATIC_SAMPLER_DESC {)",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC()"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC(const D3D12_STATIC_SAMPLER_DESC &o) noexcept : D3D12_STATIC_SAMPLER_DESC(o)"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC(UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(shaderRegister, filter, addressU, addressV, addressW, mipLODBias, maxAnisotropy, comparisonFunc, borderColor, minLOD, maxLOD, shaderVisibility, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_STATIC_SAMPLER_DESC &samplerDesc, UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (samplerDesc . ShaderRegister = shaderRegister ; samplerDesc . Filter = filter ; samplerDesc . AddressU = addressU ; samplerDesc . AddressV = addressV ; samplerDesc . AddressW = addressW ; samplerDesc . MipLODBias = mipLODBias ; samplerDesc . MaxAnisotropy = maxAnisotropy ; samplerDesc . ComparisonFunc = comparisonFunc ; samplerDesc . BorderColor = borderColor ; samplerDesc . MinLOD = minLOD ; samplerDesc . MaxLOD = maxLOD ; samplerDesc . ShaderVisibility = shaderVisibility ; samplerDesc . RegisterSpace = registerSpace ; } void)",
    "insertText": "Init(UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, shaderRegister, filter, addressU, addressV, addressW, mipLODBias, maxAnisotropy, comparisonFunc, borderColor, minLOD, maxLOD, shaderVisibility, registerSpace)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "defined(D3D12_SDK_VERSION) && (D3D12_SDK_VERSION >= 609)"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC1()"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC1(const D3D12_STATIC_SAMPLER_DESC &o)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(this, &o, sizeof(D3D12_STATIC_SAMPLER_DESC))"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC1()",
    "kind": "Method",
    "detail": "Function (Flags = D3D12_SAMPLER_FLAGS::D3D12_SAMPLER_FLAG_NONE ; })",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC1(const D3D12_STATIC_SAMPLER_DESC1 & o) noexcept : D3D12_STATIC_SAMPLER_DESC1(o)"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC1(UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0, D3D12_SAMPLER_FLAGS flags = D3D12_SAMPLER_FLAGS::D3D12_SAMPLER_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(shaderRegister, filter, addressU, addressV, addressW, mipLODBias, maxAnisotropy, comparisonFunc, borderColor, minLOD, maxLOD, shaderVisibility, registerSpace, flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_STATIC_SAMPLER_DESC1 &samplerDesc, UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0, D3D12_SAMPLER_FLAGS flags = D3D12_SAMPLER_FLAGS::D3D12_SAMPLER_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (samplerDesc . ShaderRegister = shaderRegister ; samplerDesc . Filter = filter ; samplerDesc . AddressU = addressU ; samplerDesc . AddressV = addressV ; samplerDesc . AddressW = addressW ; samplerDesc . MipLODBias = mipLODBias ; samplerDesc . MaxAnisotropy = maxAnisotropy ; samplerDesc . ComparisonFunc = comparisonFunc ; samplerDesc . BorderColor = borderColor ; samplerDesc . MinLOD = minLOD ; samplerDesc . MaxLOD = maxLOD ; samplerDesc . ShaderVisibility = shaderVisibility ; samplerDesc . RegisterSpace = registerSpace ; samplerDesc . Flags = flags ; } void)",
    "insertText": "Init(UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0, D3D12_SAMPLER_FLAGS flags = D3D12_SAMPLER_FLAGS::D3D12_SAMPLER_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, shaderRegister, filter, addressU, addressV, addressW, mipLODBias, maxAnisotropy, comparisonFunc, borderColor, minLOD, maxLOD, shaderVisibility, registerSpace, flags)"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct CD3DX12_ROOT_SIGNATURE_DESC : public D3D12_ROOT_SIGNATURE_DESC {)",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC()"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC(const D3D12_ROOT_SIGNATURE_DESC &o) noexcept : D3D12_ROOT_SIGNATURE_DESC(o)"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC(CD3DX12_DEFAULT)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(0, nullptr, 0, nullptr, D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_SIGNATURE_DESC &desc, UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1()",
    "kind": "Method",
    "detail": "Function (desc . NumParameters = numParameters ; desc . pParameters = _pParameters ; desc . NumStaticSamplers = numStaticSamplers ; desc . pStaticSamplers = _pStaticSamplers ; desc . Flags = flags ; } } ; struct CD3DX12_DESCRIPTOR_RANGE1 : public D3D12_DESCRIPTOR_RANGE1 {)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1()"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1(const D3D12_DESCRIPTOR_RANGE1 &o) noexcept : D3D12_DESCRIPTOR_RANGE1(o)"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, D3D12_DESCRIPTOR_RANGE_FLAGS flags = D3D12_DESCRIPTOR_RANGE_FLAG_NONE, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(rangeType, numDescriptors, baseShaderRegister, registerSpace, flags, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, D3D12_DESCRIPTOR_RANGE_FLAGS flags = D3D12_DESCRIPTOR_RANGE_FLAG_NONE, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, rangeType, numDescriptors, baseShaderRegister, registerSpace, flags, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_DESCRIPTOR_RANGE1 &range, D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, D3D12_DESCRIPTOR_RANGE_FLAGS flags = D3D12_DESCRIPTOR_RANGE_FLAG_NONE, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()",
    "kind": "Method",
    "detail": "Function (range . RangeType = rangeType ; range . NumDescriptors = numDescriptors ; range . BaseShaderRegister = baseShaderRegister ; range . RegisterSpace = registerSpace ; range . Flags = flags ; range . OffsetInDescriptorsFromTableStart = offsetInDescriptorsFromTableStart ; } } ; struct CD3DX12_ROOT_DESCRIPTOR_TABLE1 : public D3D12_ROOT_DESCRIPTOR_TABLE1 {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1(const D3D12_ROOT_DESCRIPTOR_TABLE1 &o) noexcept : D3D12_ROOT_DESCRIPTOR_TABLE1(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1* _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1* _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR_TABLE1 &rootDescriptorTable, UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1* _pDescriptorRanges)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1()",
    "kind": "Method",
    "detail": "Function (rootDescriptorTable . NumDescriptorRanges = numDescriptorRanges ; rootDescriptorTable . pDescriptorRanges = _pDescriptorRanges ; } } ; struct CD3DX12_ROOT_DESCRIPTOR1 : public D3D12_ROOT_DESCRIPTOR1 {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1(const D3D12_ROOT_DESCRIPTOR1 &o) noexcept : D3D12_ROOT_DESCRIPTOR1(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(shaderRegister, registerSpace, flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, shaderRegister, registerSpace, flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR1 &table, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE)"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER1()",
    "kind": "Method",
    "detail": "Function (table . ShaderRegister = shaderRegister ; table . RegisterSpace = registerSpace ; table . Flags = flags ; } } ; struct CD3DX12_ROOT_PARAMETER1 : public D3D12_ROOT_PARAMETER1 {)",
    "insertText": "CD3DX12_ROOT_PARAMETER1()"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_PARAMETER1(const D3D12_ROOT_PARAMETER1 &o) noexcept : D3D12_ROOT_PARAMETER1(o)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1* pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstants(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_CBV ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.Descriptor, shaderRegister, registerSpace, flags)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1* pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsConstantBufferView(*this, shaderRegister, registerSpace, flags, visibility)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsShaderResourceView(*this, shaderRegister, registerSpace, flags, visibility)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsUnorderedAccessView(*this, shaderRegister, registerSpace, flags, visibility)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (} } ; struct CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC : public D3D12_VERSIONED_ROOT_SIGNATURE_DESC {)",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(const D3D12_VERSIONED_ROOT_SIGNATURE_DESC &o) noexcept : D3D12_VERSIONED_ROOT_SIGNATURE_DESC(o)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(const D3D12_ROOT_SIGNATURE_DESC &o)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (Version = D3D_ROOT_SIGNATURE_VERSION_1_0 ; Desc_1_0 = o ; })",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(const D3D12_ROOT_SIGNATURE_DESC1 &o)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (Version = D3D_ROOT_SIGNATURE_VERSION_1_1 ; Desc_1_1 = o ; } # if)",
    "insertText": "defined(D3D12_SDK_VERSION) && (D3D12_SDK_VERSION >= 609) explicit CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(const D3D12_ROOT_SIGNATURE_DESC2& o)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (Version = D3D_ROOT_SIGNATURE_VERSION_1_2 ; Desc_1_2 = o ; } # endif)",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_0(numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER1* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_1(numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(CD3DX12_DEFAULT)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_1(0, nullptr, 0, nullptr, D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init_1_0(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_0(*this, numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init_1_0(_Out_ D3D12_VERSIONED_ROOT_SIGNATURE_DESC &desc, UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (desc . Version = D3D_ROOT_SIGNATURE_VERSION_1_0 ; desc . Desc_1_0 . NumParameters = numParameters ; desc . Desc_1_0 . pParameters = _pParameters ; desc . Desc_1_0 . NumStaticSamplers = numStaticSamplers ; desc . Desc_1_0 . pStaticSamplers = _pStaticSamplers ; desc . Desc_1_0 . Flags = flags ; } void)",
    "insertText": "Init_1_1(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER1* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_1(*this, numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init_1_1(_Out_ D3D12_VERSIONED_ROOT_SIGNATURE_DESC &desc, UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER1* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (desc . Version = D3D_ROOT_SIGNATURE_VERSION_1_1 ; desc . Desc_1_1 . NumParameters = numParameters ; desc . Desc_1_1 . pParameters = _pParameters ; desc . Desc_1_1 . NumStaticSamplers = numStaticSamplers ; desc . Desc_1_1 . pStaticSamplers = _pStaticSamplers ; desc . Desc_1_1 . Flags = flags ; } # if)",
    "insertText": "defined(D3D12_SDK_VERSION) && (D3D12_SDK_VERSION >= 609) static inline void Init_1_2( _Out_ D3D12_VERSIONED_ROOT_SIGNATURE_DESC& desc, UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER1* _pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC1* _pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (desc . Version = D3D_ROOT_SIGNATURE_VERSION_1_2 ; desc . Desc_1_2 . NumParameters = numParameters ; desc . Desc_1_2 . pParameters = _pParameters ; desc . Desc_1_2 . NumStaticSamplers = numStaticSamplers ; desc . Desc_1_2 . pStaticSamplers = _pStaticSamplers ; desc . Desc_1_2 . Flags = flags ; } # endif } ; struct CD3DX12_CPU_DESCRIPTOR_HANDLE : public D3D12_CPU_DESCRIPTOR_HANDLE {)",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE()"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(const D3D12_CPU_DESCRIPTOR_HANDLE &o) noexcept : D3D12_CPU_DESCRIPTOR_HANDLE(o)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(CD3DX12_DEFAULT)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (ptr = 0 ; })",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &other, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(other, offsetScaledByIncrementSize)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &other, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(other, offsetInDescriptors, descriptorIncrementSize)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_CPU_DESCRIPTOR_HANDLE&)",
    "insertText": "Offset(INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "SIZE_T(INT64(ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "SIZE_T(INT64(ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_CPU_DESCRIPTOR_HANDLE&)",
    "insertText": "operator(const D3D12_CPU_DESCRIPTOR_HANDLE &other)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (ptr = other . ptr ; return* this ; } void)",
    "insertText": "InitOffsetted(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(*this, base, offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(*this, base, offsetInDescriptors, descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_CPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "SIZE_T(INT64(base.ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_CPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "SIZE_T(INT64(base.ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (} } ; struct CD3DX12_GPU_DESCRIPTOR_HANDLE : public D3D12_GPU_DESCRIPTOR_HANDLE {)",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE()"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(const D3D12_GPU_DESCRIPTOR_HANDLE &o) noexcept : D3D12_GPU_DESCRIPTOR_HANDLE(o)"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(CD3DX12_DEFAULT)"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (ptr = 0 ; })",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &other, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &other, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "UINT64(INT64(ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "UINT64(INT64(ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_GPU_DESCRIPTOR_HANDLE&)",
    "insertText": "operator(const D3D12_GPU_DESCRIPTOR_HANDLE &other)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (ptr = other . ptr ; return* this ; } void)",
    "insertText": "InitOffsetted(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_GPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "UINT64(INT64(base.ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_GPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "UINT64(INT64(base.ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "D3DX12SerializeVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef __clang__ # pragma clang diagnostic push # pragma clang diagnostic ignored \" - Wcovered - switch - default \" # endif HRESULT)",
    "insertText": "D3DX12SerializeVersionedRootSignature(_In_ const D3D12_VERSIONED_ROOT_SIGNATURE_DESC* pRootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION MaxVersion, _Outptr_ ID3DBlob** ppBlob, _Always_(_Outptr_opt_result_maybenull_) ID3DBlob** ppErrorBlob)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (* ppErrorBlob = nullptr ; })",
    "insertText": "switch(MaxVersion)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ; const D3D12_ROOT_SIGNATURE_DESC1& desc_1_1 = pRootSignatureDesc -> Desc_1_1 ; const SIZE_T ParametersSize =)",
    "insertText": "sizeof(D3D12_ROOT_PARAMETER)"
  },
  {
    "label": "pParameters()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pParameters(ParametersSize > 0) ? HeapAlloc(GetProcessHeap(), 0, ParametersSize)"
  },
  {
    "label": "D3D12_ROOT_PARAMETER()",
    "kind": "Method",
    "detail": "Function (hr = E_OUTOFMEMORY ; } auto pParameters_1_0 = static_cast<)",
    "insertText": "D3D12_ROOT_PARAMETER(pParameters)"
  },
  {
    "label": "__analysis_assume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__analysis_assume(ParametersSize == sizeof(D3D12_ROOT_PARAMETER) * desc_1_1.NumParameters)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (pParameters_1_0 [ n ] . ParameterType = desc_1_1 . pParameters [ n ] . ParameterType ; pParameters_1_0 [ n ] . ShaderVisibility = desc_1_1 . pParameters [ n ] . ShaderVisibility ;)",
    "insertText": "switch(desc_1_1.pParameters[n].ParameterType)"
  },
  {
    "label": "pDescriptorRanges()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pDescriptorRanges(DescriptorRangesSize > 0 && SUCCEEDED(hr)) ? HeapAlloc(GetProcessHeap(), 0, DescriptorRangesSize)"
  },
  {
    "label": "D3D12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (hr = E_OUTOFMEMORY ; } auto pDescriptorRanges_1_0 = static_cast<)",
    "insertText": "D3D12_DESCRIPTOR_RANGE(pDescriptorRanges)"
  },
  {
    "label": "__analysis_assume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__analysis_assume(DescriptorRangesSize == sizeof(D3D12_DESCRIPTOR_RANGE) * table_1_1.NumDescriptorRanges)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (pDescriptorRanges_1_0 [ x ] . BaseShaderRegister = table_1_1 . pDescriptorRanges [ x ] . BaseShaderRegister ; pDescriptorRanges_1_0 [ x ] . NumDescriptors = table_1_1 . pDescriptorRanges [ x ] . NumDescriptors ; pDescriptorRanges_1_0 [ x ] . OffsetInDescriptorsFromTableStart = table_1_1 . pDescriptorRanges [ x ] . OffsetInDescriptorsFromTableStart ; pDescriptorRanges_1_0 [ x ] . RangeType = table_1_1 . pDescriptorRanges [ x ] . RangeType ; pDescriptorRanges_1_0 [ x ] . RegisterSpace = table_1_1 . pDescriptorRanges [ x ] . RegisterSpace ; } } D3D12_ROOT_DESCRIPTOR_TABLE& table_1_0 = pParameters_1_0 [ n ] . DescriptorTable ; table_1_0 . NumDescriptorRanges = table_1_1 . NumDescriptorRanges ; table_1_0 . pDescriptorRanges = pDescriptorRanges_1_0 ; } break ; default : break ; } } } D3D12_STATIC_SAMPLER_DESC* pStaticSamplers = nullptr ; # if)",
    "insertText": "defined(D3D12_SDK_VERSION) && (D3D12_SDK_VERSION >= 609) if (desc_1_1.NumStaticSamplers > 0 && pRootSignatureDesc->Version == D3D_ROOT_SIGNATURE_VERSION_1_2)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const SIZE_T SamplersSize =)",
    "insertText": "sizeof(D3D12_STATIC_SAMPLER_DESC)"
  },
  {
    "label": "D3D12_STATIC_SAMPLER_DESC()",
    "kind": "Method",
    "detail": "Function (pStaticSamplers = static_cast<)",
    "insertText": "D3D12_STATIC_SAMPLER_DESC(HeapAlloc(GetProcessHeap(), 0, SamplersSize))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (hr = E_OUTOFMEMORY ; } else { const D3D12_ROOT_SIGNATURE_DESC2& desc_1_2 = pRootSignatureDesc -> Desc_1_2 ;)",
    "insertText": "for(UINT n = 0; n < desc_1_1.NumStaticSamplers; ++n)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (hr = E_INVALIDARG ; break ; })",
    "insertText": "memcpy(pStaticSamplers + n, desc_1_2.pStaticSamplers + n, sizeof(D3D12_STATIC_SAMPLER_DESC))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } # endif)",
    "insertText": "if(SUCCEEDED(hr))"
  },
  {
    "label": "desc_1_0()",
    "kind": "Method",
    "detail": "Function (const CD3DX12_ROOT_SIGNATURE_DESC)",
    "insertText": "desc_1_0(desc_1_1.NumParameters, pParameters_1_0, desc_1_1.NumStaticSamplers, pStaticSamplers == nullptr ? desc_1_1.pStaticSamplers : pStaticSamplers, desc_1_1.Flags)"
  },
  {
    "label": "D3D12SerializeRootSignature()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "D3D12SerializeRootSignature(&desc_1_0, D3D_ROOT_SIGNATURE_VERSION_1, ppBlob, ppErrorBlob)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pParameters)"
  },
  {
    "label": "HeapFree()",
    "kind": "Method",
    "detail": "Function (auto pDescriptorRanges_1_0 = pParameters_1_0 [ n ] . DescriptorTable . pDescriptorRanges ;)",
    "insertText": "HeapFree(GetProcessHeap(), 0, reinterpret_cast<void*>(const_cast<D3D12_DESCRIPTOR_RANGE*>(pDescriptorRanges_1_0)))"
  },
  {
    "label": "HeapFree()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "HeapFree(GetProcessHeap(), 0, pParameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pStaticSamplers)"
  },
  {
    "label": "HeapFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapFree(GetProcessHeap(), 0, pStaticSamplers)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} return hr ; } default : break ; } break ; case D3D_ROOT_SIGNATURE_VERSION_1_1 :)",
    "insertText": "switch(pRootSignatureDesc->Version)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ; const D3D12_ROOT_SIGNATURE_DESC1& desc_1_1 = pRootSignatureDesc -> Desc_1_1 ; D3D12_STATIC_SAMPLER_DESC* pStaticSamplers = nullptr ;)",
    "insertText": "if(desc_1_1.NumStaticSamplers > 0)"
  },
  {
    "label": "desc()",
    "kind": "Method",
    "detail": "Function (const CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC)",
    "insertText": "desc(desc_1_1.NumParameters, desc_1_1.pParameters, desc_1_1.NumStaticSamplers, pStaticSamplers == nullptr ? desc_1_1.pStaticSamplers : pStaticSamplers, desc_1_1.Flags)"
  },
  {
    "label": "D3D12SerializeVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "D3D12SerializeVersionedRootSignature(&desc, ppBlob, ppErrorBlob)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} return hr ; } # endif default : break ; } break ; # if)",
    "insertText": "defined(D3D12_SDK_VERSION) && (D3D12_SDK_VERSION >= 609) case D3D_ROOT_SIGNATURE_VERSION_1_2: #endif default: return D3D12SerializeVersionedRootSignature(pRootSignatureDesc, ppBlob, ppErrorBlob)"
  }
]