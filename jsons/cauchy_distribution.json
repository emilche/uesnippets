[
  {
    "label": "_RealType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RealType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_RT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RT"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_CAUCHY_DISTRIBUTION_H # define _LIBCPP___RANDOM_CAUCHY_DISTRIBUTION_H # include<__config> # include<__random / is_valid . h> # include<__random / uniform_real_distribution . h> # include<cmath> # include<iosfwd> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (public : typedef _RealType result_type ; class _LIBCPP_TEMPLATE_VIS param_type { result_type __a_ ; result_type __b_ ; public : typedef cauchy_distribution distribution_type ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "param_type(result_type __a = 0, result_type __b = 1) : __a_(__a), __b_(__b)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "a()"
  },
  {
    "label": "cauchy_distribution()",
    "kind": "Method",
    "detail": "Function (} } ; private : param_type __p_ ; public : # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "cauchy_distribution() : cauchy_distribution(0)"
  },
  {
    "label": "cauchy_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "cauchy_distribution(result_type __a, result_type __b = 1) : __p_(param_type(__a, __b))"
  },
  {
    "label": "cauchy_distribution()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "cauchy_distribution(result_type __a = 0, result_type __b = 1) : __p_(param_type(__a, __b))"
  },
  {
    "label": "cauchy_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "cauchy_distribution(const param_type& __p) : __p_(__p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g, const param_type& __p)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "b()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY param_type)",
    "insertText": "param()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__p_ = __p ; } _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "max()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const cauchy_distribution& __x, const cauchy_distribution& __y)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (uniform_real_distribution<result_type> __gen ; return __p .)",
    "insertText": "a() + __p.b() * _VSTD::tan(3.1415926535897932384626433832795 * __gen(__g))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _Traits,class _RT> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const cauchy_distribution<_RT>& __x)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _OStream ; __os .)",
    "insertText": "flags(_OStream::dec | _OStream::left | _OStream::fixed | _OStream::scientific)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (__os<<__x .)",
    "insertText": "a() << __sp << __x.b()"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (typedef cauchy_distribution<_RT> _Eng ; typedef _Eng::result_type result_type ; typedef _Eng::param_type param_type ; __save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result_type __a ; result_type __b ; __is>> __a>> __b ;)",
    "insertText": "if(!__is.fail()) __x.param(param_type(__a, __b))"
  }
]