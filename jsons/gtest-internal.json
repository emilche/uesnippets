[
  {
    "label": "MessageLite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageLite"
  },
  {
    "label": "AssertionResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssertionResult"
  },
  {
    "label": "Message",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Message"
  },
  {
    "label": "Test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Test"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "TestPartResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPartResult"
  },
  {
    "label": "UnitTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTest"
  },
  {
    "label": "TraceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceInfo"
  },
  {
    "label": "TestInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfoImpl"
  },
  {
    "label": "UnitTestImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestImpl"
  },
  {
    "label": "IgnoredValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IgnoredValue"
  },
  {
    "label": "Sink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sink"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "EditType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EditType"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FloatingPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatingPoint"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "TypeIdHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeIdHelper"
  },
  {
    "label": "TestFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestFactoryBase"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "TestClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestClass"
  },
  {
    "label": "TestFactoryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestFactoryImpl"
  },
  {
    "label": "CodeLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodeLocation"
  },
  {
    "label": "SuiteApiResolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SuiteApiResolver"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "DefaultNameGenerator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultNameGenerator"
  },
  {
    "label": "NameGeneratorSelector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NameGeneratorSelector"
  },
  {
    "label": "TestSel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSel"
  },
  {
    "label": "TypeParameterizedTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeParameterizedTest"
  },
  {
    "label": "TestSel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSel"
  },
  {
    "label": "TypeParameterizedTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeParameterizedTest"
  },
  {
    "label": "TypeParameterizedTestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeParameterizedTestSuite"
  },
  {
    "label": "TypeParameterizedTestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeParameterizedTestSuite"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "TrueWithString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrueWithString"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "HasDebugStringAndShortDebugString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HasDebugStringAndShortDebugString"
  },
  {
    "label": "by",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "by"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "itself",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "itself"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "named",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "named"
  },
  {
    "label": "C",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "C",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C"
  },
  {
    "label": "IsHashTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsHashTable"
  },
  {
    "label": "IsRecursiveContainerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRecursiveContainerImpl"
  },
  {
    "label": "IsRecursiveContainerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRecursiveContainerImpl"
  },
  {
    "label": "IsRecursiveContainerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRecursiveContainerImpl"
  },
  {
    "label": "IsRecursiveContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRecursiveContainer"
  },
  {
    "label": "RelationToSourceReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelationToSourceReference"
  },
  {
    "label": "RelationToSourceCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelationToSourceCopy"
  },
  {
    "label": "NativeArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NativeArray"
  },
  {
    "label": "IndexSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexSequence"
  },
  {
    "label": "DoubleSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DoubleSequence"
  },
  {
    "label": "DoubleSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DoubleSequence"
  },
  {
    "label": "DoubleSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DoubleSequence"
  },
  {
    "label": "MakeIndexSequenceImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeIndexSequenceImpl"
  },
  {
    "label": "MakeIndexSequenceImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeIndexSequenceImpl"
  },
  {
    "label": "Ignore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Ignore"
  },
  {
    "label": "ElemFromListImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ElemFromListImpl"
  },
  {
    "label": "ElemFromListImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ElemFromListImpl"
  },
  {
    "label": "ElemFromList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ElemFromList"
  },
  {
    "label": "FlatTupleConstructTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlatTupleConstructTag"
  },
  {
    "label": "FlatTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlatTuple"
  },
  {
    "label": "FlatTupleElemBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlatTupleElemBase"
  },
  {
    "label": "FlatTupleElemBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlatTupleElemBase"
  },
  {
    "label": "FlatTupleBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlatTupleBase"
  },
  {
    "label": "FlatTupleBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlatTupleBase"
  },
  {
    "label": "minimizes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "minimizes"
  },
  {
    "label": "FlatTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlatTuple"
  },
  {
    "label": "tuple_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_size"
  },
  {
    "label": "tuple_size",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tuple_size"
  },
  {
    "label": "tuple_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_size"
  },
  {
    "label": "NeverThrown",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NeverThrown"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_TEST_CLASS_NAME_"
  },
  {
    "label": "PrintToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PrintToString(const T& value)"
  },
  {
    "label": "AppendUserMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AppendUserMessage(const std::string& gtest_msg,\n                                         const Message& user_msg)"
  },
  {
    "label": "GoogleTestFailureException()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "GoogleTestFailureException(const TestPartResult& failure)"
  },
  {
    "label": "CalculateOptimalEdits()",
    "kind": "Method",
    "detail": "Function (std::vector<EditType>)",
    "insertText": "CalculateOptimalEdits(\n    const std::vector<size_t>& left, const std::vector<size_t>& right)"
  },
  {
    "label": "CalculateOptimalEdits()",
    "kind": "Method",
    "detail": "Function (std::vector<EditType>)",
    "insertText": "CalculateOptimalEdits(\n    const std::vector<std::string>& left,\n    const std::vector<std::string>& right)"
  },
  {
    "label": "CreateUnifiedDiff()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CreateUnifiedDiff(const std::vector<std::string>& left,\n                                         const std::vector<std::string>& right,\n                                         size_t context = 2)"
  },
  {
    "label": "EqFailure()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "EqFailure(const char* expected_expression,\n                                     const char* actual_expression,\n                                     const std::string& expected_value,\n                                     const std::string& actual_value,\n                                     bool ignoring_case)"
  },
  {
    "label": "GetBoolAssertionFailureMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetBoolAssertionFailureMessage(\n    const AssertionResult& assertion_result, const char* expression_text,\n    const char* actual_predicate_value, const char* expected_predicate_value)"
  },
  {
    "label": "fp()",
    "kind": "Method",
    "detail": "Function (FloatingPoint)",
    "insertText": "fp(0)"
  },
  {
    "label": "ReinterpretBits()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ReinterpretBits(kExponentBitMask)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RawType)",
    "insertText": "Max()"
  },
  {
    "label": "GetTestTypeId()",
    "kind": "Method",
    "detail": "Function (TypeId)",
    "insertText": "GetTestTypeId()"
  },
  {
    "label": "IsHRESULTSuccess()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsHRESULTSuccess(const char* expr,\n                                            long hr)"
  },
  {
    "label": "IsHRESULTFailure()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsHRESULTFailure(const char* expr,\n                                            long hr)"
  },
  {
    "label": "SkipPrefix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipPrefix(const char* prefix, const char** pstr)"
  },
  {
    "label": "SplitString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitString(const ::std::string& str, char delimiter,\n                 ::std::vector<::std::string>* dest)"
  },
  {
    "label": "StreamableToString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "StreamableToString(i)"
  },
  {
    "label": "RegisterTypeParameterizedTestSuite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTypeParameterizedTestSuite(const char* test_suite_name,\n                                                   CodeLocation code_location)"
  },
  {
    "label": "RegisterTypeParameterizedTestSuiteInstantiation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTypeParameterizedTestSuiteInstantiation(\n    const char* case_name)"
  },
  {
    "label": "GetCurrentOsStackTraceExceptTop()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetCurrentOsStackTraceExceptTop(UnitTest* unit_test,\n                                                       int skip_count)"
  },
  {
    "label": "AlwaysTrue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AlwaysTrue()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "Generate(uint32_t range)"
  },
  {
    "label": "CheckDebugString()",
    "kind": "Method",
    "detail": "Function (std::false_type)",
    "insertText": "CheckDebugString(...)"
  },
  {
    "label": "CheckShortDebugString()",
    "kind": "Method",
    "detail": "Function (std::false_type)",
    "insertText": "CheckShortDebugString(...)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "test(typename U::hasher*, typename U::reverse_iterator*)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "test(typename U::hasher*, ...)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "test(...)"
  },
  {
    "label": "ArrayEq()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArrayEq(const T* lhs, size_t size, const U* rhs)"
  },
  {
    "label": "CopyArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyArray(const T* from, size_t size, U* to)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "static_assert(!std::is_const<Element>::value, \"Type must not be const\")"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_, __LINE__)"
  }
]