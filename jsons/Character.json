[
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UArrowComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UArrowComponent"
  },
  {
    "label": "UCapsuleComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCapsuleComponent"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "UPawnMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPawnMovementComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "FCharacterAsyncInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterAsyncInput"
  },
  {
    "label": "FCharacterAsyncOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterAsyncOutput"
  },
  {
    "label": "FRepRootMotionMontage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepRootMotionMontage"
  },
  {
    "label": "FSimulatedRootMotionReplicatedMove",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulatedRootMotionReplicatedMove"
  },
  {
    "label": "FBasedMovementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasedMovementInfo"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / CoreNet . h \" # include \" Engine / NetSerialization . h \" # include \" Engine / EngineTypes . h \" # include \" Components / ActorComponent . h \" # include \" GameFramework / Actor . h \" # include \" GameFramework / Pawn . h \" # include \" GameFramework / CharacterMovementReplication . h \" # include \" Animation / AnimationAsset . h \" # include \" GameFramework / RootMotionSource . h \" # include \" Character . generated . h \" class ACharacter ; class AController ; class FDebugDisplayInfo ; class UAnimMontage ; class UArrowComponent ; class UCapsuleComponent ; class UCharacterMovementComponent ; class UPawnMovementComponent ; class UPrimitiveComponent ; class USkeletalMeshComponent ; struct FAnimMontageInstance ; struct FCharacterAsyncInput ; struct FCharacterAsyncOutput ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FMovementModeChangedSignature, class ACharacter*, Character, EMovementMode, PrevMovementMode, uint8, PreviousCustomMode)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FCharacterMovementUpdatedSignature, float, DeltaSeconds, FVector, OldLocation, FVector, OldVelocity)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FCharacterReachedApexSignature)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FLandedSignature, const FHitResult&, Hit)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (namespace CharacterCVars { int32 EnableCharacterAccelerationReplication ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "HasRootMotion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasRootMotion()"
  },
  {
    "label": "GetAnimMontage()",
    "kind": "Method",
    "detail": "Function (} UAnimMontage*)",
    "insertText": "GetAnimMontage()"
  },
  {
    "label": "IsDynamicBase()",
    "kind": "Method",
    "detail": "Function (} ; namespace MovementBaseUtility { bool)",
    "insertText": "IsDynamicBase(const UPrimitiveComponent* MovementBase)"
  },
  {
    "label": "IsSimulatedBase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulatedBase(const UPrimitiveComponent* MovementBase)"
  },
  {
    "label": "AddTickDependency()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTickDependency(FTickFunction& BasedObjectTick, UPrimitiveComponent* NewBase)"
  },
  {
    "label": "RemoveTickDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTickDependency(FTickFunction& BasedObjectTick, UPrimitiveComponent* OldBase)"
  },
  {
    "label": "GetMovementBaseVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetMovementBaseVelocity(const UPrimitiveComponent* MovementBase, const FName BoneName)"
  },
  {
    "label": "GetMovementBaseTangentialVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetMovementBaseTangentialVelocity(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& WorldLocation)"
  },
  {
    "label": "GetMovementBaseTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMovementBaseTransform(const UPrimitiveComponent* MovementBase, const FName BoneName, FVector& OutLocation, FQuat& OutQuat)"
  },
  {
    "label": "TransformLocationToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformLocationToWorld(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& LocalLocation, FVector& OutLocationWorldSpace)"
  },
  {
    "label": "TransformLocationToLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformLocationToLocal(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& WorldSpaceLocation, FVector& OutLocalLocation)"
  },
  {
    "label": "TransformDirectionToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformDirectionToWorld(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& LocalDirection, FVector& OutDirectionWorldSpace)"
  },
  {
    "label": "TransformDirectionToLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformDirectionToLocal(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& WorldSpaceDirection, FVector& OutLocalDirection)"
  },
  {
    "label": "HasRelativeRotation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasRelativeRotation()"
  },
  {
    "label": "IsBaseUnresolved()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBaseUnresolved()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(config=Game, BlueprintType, meta=(ShortTooltip=\"A character is a type of Pawn that includes the ability to walk around.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API ACharacter(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "GetReplicatedCustomConditionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReplicatedCustomConditionState(FCustomPropertyConditionState& OutActiveState)"
  },
  {
    "label": "ServerMovePacked_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMovePacked_Implementation(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ServerMovePacked_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMovePacked_Validate(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ClientMoveResponsePacked_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientMoveResponsePacked_Implementation(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "ClientMoveResponsePacked_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClientMoveResponsePacked_Validate(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMove, ServerMovePacked) UFUNCTION(unreliable, server, WithValidation) ENGINE_API void ServerMove(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMove_Implementation, ServerMovePacked_Implementation) ENGINE_API void ServerMove_Implementation(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMove_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMove_Validate(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveNoBase, ServerMovePacked) UFUNCTION(unreliable, server, WithValidation) ENGINE_API void ServerMoveNoBase(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveNoBase_Implementation, ServerMovePacked_Implementation) ENGINE_API void ServerMoveNoBase_Implementation(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveNoBase_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveNoBase_Validate(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDual, ServerMovePacked) UFUNCTION(unreliable, server, WithValidation) ENGINE_API void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDual_Implementation, ServerMovePacked_Implementation) ENGINE_API void ServerMoveDual_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDual_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDualNoBase, ServerMovePacked) UFUNCTION(unreliable, server, WithValidation) ENGINE_API void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDualNoBase_Implementation, ServerMovePacked_Implementation) ENGINE_API void ServerMoveDualNoBase_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualNoBase_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDualNoBase_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDualHybridRootMotion, ServerMovePacked) UFUNCTION(unreliable, server, WithValidation) ENGINE_API void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDualHybridRootMotion_Implementation, ServerMovePacked_Implementation) ENGINE_API void ServerMoveDualHybridRootMotion_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDualHybridRootMotion_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveOld, ServerMovePacked) UFUNCTION(unreliable, server, WithValidation) ENGINE_API void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveOld_Implementation, ServerMovePacked_Implementation) ENGINE_API void ServerMoveOld_Implementation(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ServerMoveOld_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveOld_Validate(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAckGoodMove, ClientMoveResponsePacked) UFUNCTION(unreliable, client) ENGINE_API void ClientAckGoodMove(float TimeStamp)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAckGoodMove_Implementation, ClientMoveResponsePacked_Implementation) ENGINE_API void ClientAckGoodMove_Implementation(float TimeStamp)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustPosition, ClientMoveResponsePacked) UFUNCTION(unreliable, client) ENGINE_API void ClientAdjustPosition(float TimeStamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustPosition_Implementation, ClientMoveResponsePacked_Implementation) ENGINE_API void ClientAdjustPosition_Implementation(float TimeStamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientVeryShortAdjustPosition, ClientMoveResponsePacked) UFUNCTION(unreliable, client) ENGINE_API void ClientVeryShortAdjustPosition(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientVeryShortAdjustPosition_Implementation, ClientMoveResponsePacked_Implementation) ENGINE_API void ClientVeryShortAdjustPosition_Implementation(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustRootMotionPosition, ClientMoveResponsePacked) UFUNCTION(unreliable, client) ENGINE_API void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustRootMotionPosition_Implementation, ClientMoveResponsePacked_Implementation) ENGINE_API void ClientAdjustRootMotionPosition_Implementation(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustRootMotionSourcePosition, ClientMoveResponsePacked) UFUNCTION(unreliable, client) ENGINE_API void ClientAdjustRootMotionSourcePosition(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustRootMotionSourcePosition_Implementation, ClientMoveResponsePacked_Implementation) ENGINE_API void ClientAdjustRootMotionSourcePosition_Implementation(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (public : class USkeletalMeshComponent*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "GetCharacterMovement()",
    "kind": "Method",
    "detail": "Function (} UCharacterMovementComponent*)",
    "insertText": "GetCharacterMovement()"
  },
  {
    "label": "SetReplicateMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicateMovement(bool bInReplicateMovement)"
  },
  {
    "label": "ShouldReplicateAcceleration()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldReplicateAcceleration()"
  },
  {
    "label": "BaseChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BaseChange()"
  },
  {
    "label": "GetReplicatedMovementMode()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetReplicatedMovementMode()"
  },
  {
    "label": "GetGravityDirection()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetGravityDirection()"
  },
  {
    "label": "GetGravityTransform()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetGravityTransform()"
  },
  {
    "label": "GetReplicatedGravityDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetReplicatedGravityDirection()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (uint32 NumActorOverlapEventsCounter ; void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "ClearCrossLevelReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCrossLevelReferences()"
  },
  {
    "label": "PreNetReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreNetReceive()"
  },
  {
    "label": "PostNetReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceive()"
  },
  {
    "label": "GatherCurrentMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherCurrentMovement()"
  },
  {
    "label": "OnRep_ReplicatedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRep_ReplicatedMovement()"
  },
  {
    "label": "PostNetReceiveLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceiveLocationAndRotation()"
  },
  {
    "label": "GetSimpleCollisionCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSimpleCollisionCylinder(float& CollisionRadius, float& CollisionHalfHeight)"
  },
  {
    "label": "FindComponentByClass()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "FindComponentByClass(const TSubclassOf<UActorComponent> ComponentClass)"
  },
  {
    "label": "TornOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TornOff()"
  },
  {
    "label": "NotifyActorBeginOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorBeginOverlap(AActor* OtherActor)"
  },
  {
    "label": "NotifyActorEndOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorEndOverlap(AActor* OtherActor)"
  },
  {
    "label": "FindComponentByClass()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "FindComponentByClass()"
  },
  {
    "label": "GetNavAgentLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetNavAgentLocation()"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "GetMovementComponent()",
    "kind": "Method",
    "detail": "Function (UPawnMovementComponent*)",
    "insertText": "GetMovementComponent()"
  },
  {
    "label": "GetMovementBase()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent*)",
    "insertText": "GetMovementBase()"
  },
  {
    "label": "TurnOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TurnOff()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart()"
  },
  {
    "label": "PawnClientRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PawnClientRestart()"
  },
  {
    "label": "PossessedBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PossessedBy(AController* NewController)"
  },
  {
    "label": "UnPossessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnPossessed()"
  },
  {
    "label": "SetupPlayerInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(class UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "RecalculateBaseEyeHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateBaseEyeHeight()"
  },
  {
    "label": "UpdateNavigationRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavigationRelevance()"
  },
  {
    "label": "ApplyDamageMomentum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDamageMomentum(float DamageTaken, FDamageEvent const& DamageEvent, APawn* PawnInstigator, AActor* DamageCauser)"
  },
  {
    "label": "CanJumpInternal_Implementation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanJumpInternal_Implementation()"
  },
  {
    "label": "JumpIsAllowedInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JumpIsAllowedInternal()"
  },
  {
    "label": "ResetJumpState()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ResetJumpState()"
  },
  {
    "label": "OnJumped_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnJumped_Implementation()"
  },
  {
    "label": "Falling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Falling()"
  },
  {
    "label": "NotifyJumpApex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyJumpApex()"
  },
  {
    "label": "Landed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Landed(const FHitResult& Hit)"
  },
  {
    "label": "OnWalkingOffLedge_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWalkingOffLedge_Implementation(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta)"
  },
  {
    "label": "MoveBlockedBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveBlockedBy(const FHitResult& Impact)"
  },
  {
    "label": "OnEndCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)"
  },
  {
    "label": "OnStartCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)"
  },
  {
    "label": "RecalculateCrouchedEyeHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateCrouchedEyeHeight()"
  },
  {
    "label": "OnMovementModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovementModeChanged(EMovementMode PrevMovementMode, uint8 PreviousCustomMode = 0)"
  },
  {
    "label": "ShouldNotifyLanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldNotifyLanded(const struct FHitResult& Hit)"
  },
  {
    "label": "CheckJumpInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckJumpInput(float DeltaTime)"
  },
  {
    "label": "ClearJumpInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearJumpInput(float DeltaTime)"
  },
  {
    "label": "GetJumpMaxHoldTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetJumpMaxHoldTime()"
  },
  {
    "label": "ClientCheatWalk_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatWalk_Implementation()"
  },
  {
    "label": "ClientCheatFly_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatFly_Implementation()"
  },
  {
    "label": "ClientCheatGhost_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatGhost_Implementation()"
  },
  {
    "label": "RootMotionDebugClientPrintOnScreen_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RootMotionDebugClientPrintOnScreen_Implementation(const FString& InString)"
  },
  {
    "label": "FindRootMotionRepMove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindRootMotionRepMove(const FAnimMontageInstance& ClientMontageInstance)"
  },
  {
    "label": "CanUseRootMotionRepMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUseRootMotionRepMove(const FSimulatedRootMotionReplicatedMove& RootMotionRepMove, const FAnimMontageInstance& ClientMontageInstance)"
  },
  {
    "label": "RestoreReplicatedMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RestoreReplicatedMove(const FSimulatedRootMotionReplicatedMove& RootMotionRepMove)"
  },
  {
    "label": "OnUpdateSimulatedPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateSimulatedPosition(const FVector& OldLocation, const FQuat& OldRotation)"
  },
  {
    "label": "SimulatedRootMotionPositionFixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulatedRootMotionPositionFixup(float DeltaSeconds)"
  },
  {
    "label": "GetRootMotionAnimMontageInstance()",
    "kind": "Method",
    "detail": "Function (FAnimMontageInstance*)",
    "insertText": "GetRootMotionAnimMontageInstance()"
  },
  {
    "label": "SetAnimRootMotionTranslationScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimRootMotionTranslationScale(float InAnimRootMotionTranslationScale = 1.f)"
  },
  {
    "label": "PreReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReplication(IRepChangedPropertyTracker & ChangedPropertyTracker)"
  },
  {
    "label": "PreReplicationForReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReplicationForReplay(IRepChangedPropertyTracker& ChangedPropertyTracker)"
  },
  {
    "label": "FillAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAsyncInput(FCharacterAsyncInput& Input)"
  },
  {
    "label": "InitializeAsyncOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAsyncOutput(FCharacterAsyncOutput& Output)"
  },
  {
    "label": "ApplyAsyncOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAsyncOutput(const FCharacterAsyncOutput& Output)"
  }
]