[
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UArrowComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UArrowComponent"
  },
  {
    "label": "UCapsuleComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCapsuleComponent"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "UPawnMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPawnMovementComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "FCharacterAsyncInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterAsyncInput"
  },
  {
    "label": "FCharacterAsyncOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterAsyncOutput"
  },
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "FRepRootMotionMontage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepRootMotionMontage"
  },
  {
    "label": "FSimulatedRootMotionReplicatedMove",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulatedRootMotionReplicatedMove"
  },
  {
    "label": "FBasedMovementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasedMovementInfo"
  },
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UCapsuleComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCapsuleComponent"
  },
  {
    "label": "UArrowComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UArrowComponent"
  },
  {
    "label": "FBasedMovementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasedMovementInfo"
  },
  {
    "label": "FBasedMovementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasedMovementInfo"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FRepRootMotionMontage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepRootMotionMontage"
  },
  {
    "label": "IsDynamicBase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicBase(const UPrimitiveComponent* MovementBase)"
  },
  {
    "label": "IsSimulatedBase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulatedBase(const UPrimitiveComponent* MovementBase)"
  },
  {
    "label": "IsDynamicBase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsDynamicBase(MovementBase)"
  },
  {
    "label": "AddTickDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTickDependency(FTickFunction& BasedObjectTick, UPrimitiveComponent* NewBase)"
  },
  {
    "label": "RemoveTickDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTickDependency(FTickFunction& BasedObjectTick, UPrimitiveComponent* OldBase)"
  },
  {
    "label": "GetMovementBaseVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetMovementBaseVelocity(const UPrimitiveComponent* MovementBase, const FName BoneName)"
  },
  {
    "label": "GetMovementBaseTangentialVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetMovementBaseTangentialVelocity(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& WorldLocation)"
  },
  {
    "label": "GetMovementBaseTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMovementBaseTransform(const UPrimitiveComponent* MovementBase, const FName BoneName, FVector& OutLocation, FQuat& OutQuat)"
  },
  {
    "label": "TransformLocationToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformLocationToWorld(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& LocalLocation, FVector& OutLocationWorldSpace)"
  },
  {
    "label": "TransformLocationToLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformLocationToLocal(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& WorldSpaceLocation, FVector& OutLocalLocation)"
  },
  {
    "label": "TransformDirectionToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformDirectionToWorld(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& LocalDirection, FVector& OutDirectionWorldSpace)"
  },
  {
    "label": "TransformDirectionToLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformDirectionToLocal(const UPrimitiveComponent* MovementBase, const FName BoneName, const FVector& WorldSpaceDirection, FVector& OutLocalDirection)"
  },
  {
    "label": "ServerMovePacked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMovePacked(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ServerMovePacked_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMovePacked_Implementation(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ServerMovePacked_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMovePacked_Validate(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ClientMoveResponsePacked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientMoveResponsePacked(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "ClientMoveResponsePacked_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientMoveResponsePacked_Implementation(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "ClientMoveResponsePacked_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClientMoveResponsePacked_Validate(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "ServerMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMove_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove_Implementation(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMove_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMove_Validate(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveNoBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveNoBase(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveNoBase_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveNoBase_Implementation(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveNoBase_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveNoBase_Validate(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDual_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDual_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualNoBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualNoBase_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDualNoBase_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualNoBase_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDualNoBase_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDualHybridRootMotion_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDualHybridRootMotion_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveOld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ServerMoveOld_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveOld_Implementation(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ServerMoveOld_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveOld_Validate(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ClientAckGoodMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAckGoodMove(float TimeStamp)"
  },
  {
    "label": "ClientAckGoodMove_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAckGoodMove_Implementation(float TimeStamp)"
  },
  {
    "label": "ClientAdjustPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustPosition(float TimeStamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustPosition_Implementation(float TimeStamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientVeryShortAdjustPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientVeryShortAdjustPosition(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientVeryShortAdjustPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientVeryShortAdjustPosition_Implementation(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionPosition_Implementation(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionSourcePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionSourcePosition(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionSourcePosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionSourcePosition_Implementation(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "SetBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBase(UPrimitiveComponent* NewBase, const FName BoneName = NAME_None, bool bNotifyActor=true)"
  },
  {
    "label": "CacheInitialMeshOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation)"
  },
  {
    "label": "OnRep_ReplicatedBasedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRep_ReplicatedBasedMovement()"
  },
  {
    "label": "BaseChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BaseChange()"
  },
  {
    "label": "OnRep_ReplayLastTransformUpdateTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRep_ReplayLastTransformUpdateTimeStamp()"
  },
  {
    "label": "SaveRelativeBasedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveRelativeBasedMovement(const FVector& NewRelativeLocation, const FRotator& NewRotation, bool bRelativeRotation)"
  },
  {
    "label": "OnRep_IsCrouched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRep_IsCrouched()"
  },
  {
    "label": "NotifyActorBeginOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorBeginOverlap(AActor* OtherActor)"
  },
  {
    "label": "NotifyActorEndOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorEndOverlap(AActor* OtherActor)"
  },
  {
    "label": "ApplyDamageMomentum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDamageMomentum(float DamageTaken, FDamageEvent const& DamageEvent, APawn* PawnInstigator, AActor* DamageCauser)"
  },
  {
    "label": "Jump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Jump()"
  },
  {
    "label": "StopJumping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopJumping()"
  },
  {
    "label": "ResetJumpState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetJumpState()"
  },
  {
    "label": "PlayAnimMontage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate = 1.f, FName StartSectionName = NAME_None)"
  },
  {
    "label": "StopAnimMontage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAnimMontage(class UAnimMontage* AnimMontage = nullptr)"
  },
  {
    "label": "LaunchCharacter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride)"
  },
  {
    "label": "OnLaunched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride)"
  },
  {
    "label": "OnJumped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnJumped()"
  },
  {
    "label": "OnJumped_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnJumped_Implementation()"
  },
  {
    "label": "NotifyJumpApex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyJumpApex()"
  },
  {
    "label": "Landed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Landed(const FHitResult& Hit)"
  },
  {
    "label": "OnLanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLanded(const FHitResult& Hit)"
  },
  {
    "label": "OnWalkingOffLedge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWalkingOffLedge(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta)"
  },
  {
    "label": "OnWalkingOffLedge_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWalkingOffLedge_Implementation(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta)"
  },
  {
    "label": "Crouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Crouch(bool bClientSimulation = false)"
  },
  {
    "label": "UnCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnCrouch(bool bClientSimulation = false)"
  },
  {
    "label": "OnEndCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)"
  },
  {
    "label": "K2_OnEndCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)"
  },
  {
    "label": "OnStartCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)"
  },
  {
    "label": "K2_OnStartCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)"
  },
  {
    "label": "RecalculateCrouchedEyeHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateCrouchedEyeHeight()"
  },
  {
    "label": "OnMovementModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovementModeChanged(EMovementMode PrevMovementMode, uint8 PreviousCustomMode = 0)"
  },
  {
    "label": "K2_OnMovementModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)"
  },
  {
    "label": "K2_UpdateCustomMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_UpdateCustomMovement(float DeltaTime)"
  },
  {
    "label": "ShouldNotifyLanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldNotifyLanded(const struct FHitResult& Hit)"
  },
  {
    "label": "CheckJumpInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckJumpInput(float DeltaTime)"
  },
  {
    "label": "ClearJumpInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearJumpInput(float DeltaTime)"
  },
  {
    "label": "ClientCheatWalk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatWalk()"
  },
  {
    "label": "ClientCheatWalk_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatWalk_Implementation()"
  },
  {
    "label": "ClientCheatFly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatFly()"
  },
  {
    "label": "ClientCheatFly_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatFly_Implementation()"
  },
  {
    "label": "ClientCheatGhost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatGhost()"
  },
  {
    "label": "ClientCheatGhost_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientCheatGhost_Implementation()"
  },
  {
    "label": "RootMotionDebugClientPrintOnScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RootMotionDebugClientPrintOnScreen(const FString& InString)"
  },
  {
    "label": "RootMotionDebugClientPrintOnScreen_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RootMotionDebugClientPrintOnScreen_Implementation(const FString& InString)"
  },
  {
    "label": "RestoreReplicatedMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RestoreReplicatedMove(const FSimulatedRootMotionReplicatedMove& RootMotionRepMove)"
  },
  {
    "label": "OnUpdateSimulatedPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateSimulatedPosition(const FVector& OldLocation, const FQuat& OldRotation)"
  },
  {
    "label": "OnRep_RootMotion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRep_RootMotion()"
  },
  {
    "label": "SimulatedRootMotionPositionFixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulatedRootMotionPositionFixup(float DeltaSeconds)"
  },
  {
    "label": "SetAnimRootMotionTranslationScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimRootMotionTranslationScale(float InAnimRootMotionTranslationScale = 1.f)"
  },
  {
    "label": "ApplyAsyncOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAsyncOutput(const FCharacterAsyncOutput& Output)"
  }
]