[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "FViewportInteractorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportInteractorData"
  },
  {
    "label": "FViewportInteractorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportInteractorData"
  },
  {
    "label": "UViewportWorldInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportWorldInteraction"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UViewportWorldInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportWorldInteraction"
  },
  {
    "label": "SetWorldInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldInteraction( class UViewportWorldInteraction* InWorldInteraction )"
  },
  {
    "label": "SetOtherInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOtherInteractor( UViewportInteractor* InOtherInteractor )"
  },
  {
    "label": "RemoveOtherInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOtherInteractor()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick( const float DeltaTime )"
  },
  {
    "label": "AddKeyAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyAction( const FKey& Key, const FViewportActionKeyInput& Action )"
  },
  {
    "label": "RemoveKeyAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeyAction( const FKey& Key )"
  },
  {
    "label": "HandleInputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputKey( class FEditorViewportClient& ViewportClient, const FKey Key, const EInputEvent Event )"
  },
  {
    "label": "HandleInputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputAxis( class FEditorViewportClient& ViewportClient, const FKey Key, const float Delta, const float DeltaTime )"
  },
  {
    "label": "SetHoverLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoverLocation(const FVector& InHoverLocation)"
  },
  {
    "label": "GetLaserPointer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLaserPointer( FVector& LaserPointerStart, FVector& LaserPointerEnd, const bool bEvenIfBlocked = false, const float LaserLengthOverride = 0.0f )"
  },
  {
    "label": "GetGrabberSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGrabberSphere( FSphere& OutGrabberSphere, const bool bEvenIfBlocked = false )"
  },
  {
    "label": "GetHitResultFromLaserPointer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetHitResultFromLaserPointer(OptionalListOfIgnoredActors, bIgnoreGizmos ? EHitResultGizmoFilterMode::All : EHitResultGizmoFilterMode::NoGizmos, ObjectsInFrontOfGizmo, bEvenIfBlocked, LaserLengthOverride)"
  },
  {
    "label": "GetHitResultFromLaserPointer()",
    "kind": "Method",
    "detail": "Function (FHitResult)",
    "insertText": "GetHitResultFromLaserPointer( TArray<AActor*>* OptionalListOfIgnoredActors = nullptr, const EHitResultGizmoFilterMode GizmoFilterMode = EHitResultGizmoFilterMode::All, TArray<UClass*>* ObjectsInFrontOfGizmo = nullptr, const bool bEvenIfBlocked = false, const float LaserLengthOverride = 0.0f )"
  },
  {
    "label": "ResetHoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHoverState()"
  },
  {
    "label": "OnStartDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartDragging( const FVector& HitLocation, const bool bIsPlacingNewObjects )"
  },
  {
    "label": "GetHoverLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetHoverLocation()"
  },
  {
    "label": "SetDraggingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggingMode( const EViewportInteractionDraggingMode NewDraggingMode )"
  },
  {
    "label": "ResetLaserEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLaserEnd()"
  },
  {
    "label": "SetHitResultGizmoFilterMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHitResultGizmoFilterMode(EHitResultGizmoFilterMode newFilter)"
  },
  {
    "label": "SetCanCarry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanCarry(const bool bInCanCarry)"
  },
  {
    "label": "HandleInputKey_BP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputKey_BP( const FViewportActionKeyInput& Action, const FKey Key, const EInputEvent Event, bool& bOutWasHandled)"
  },
  {
    "label": "HandleInputAxis_BP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputAxis_BP( const FViewportActionKeyInput& Action, const FKey Key, const float Delta, const float DeltaTime, bool& bOutWasHandled)"
  }
]