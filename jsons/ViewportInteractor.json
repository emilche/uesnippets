[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "FViewportInteractorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportInteractorData"
  },
  {
    "label": "UViewportWorldInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportWorldInteraction"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" InputCoreTypes . h \" # include \" Engine / EngineTypes . h \" # include \" ViewportInteractionTypes . h \" # include \" ViewportInteractorData . h \" # include \" ViewportInteractionUtils . h \" # include \" ViewportInteractor . generated . h \" class AActor ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (All,NoGizmos,GizmosOnly } ;)",
    "insertText": "UCLASS(Abstract, Blueprintable, BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UViewportInteractor()"
  },
  {
    "label": "GetInteractorData()",
    "kind": "Method",
    "detail": "Function (struct FViewportInteractorData&)",
    "insertText": "GetInteractorData()"
  },
  {
    "label": "SetWorldInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldInteraction(class UViewportWorldInteraction* InWorldInteraction)"
  },
  {
    "label": "SetOtherInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOtherInteractor(UViewportInteractor* InOtherInteractor)"
  },
  {
    "label": "RemoveOtherInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOtherInteractor()"
  },
  {
    "label": "GetLastHoverComponent()",
    "kind": "Method",
    "detail": "Function (class UActorComponent*)",
    "insertText": "GetLastHoverComponent()"
  },
  {
    "label": "AddKeyAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyAction(const FKey& Key, const FViewportActionKeyInput& Action)"
  },
  {
    "label": "RemoveKeyAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeyAction(const FKey& Key)"
  },
  {
    "label": "PollInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollInput()"
  },
  {
    "label": "HandleInputKey()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleInputKey(class FEditorViewportClient& ViewportClient, const FKey Key, const EInputEvent Event)"
  },
  {
    "label": "HandleInputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputAxis(class FEditorViewportClient& ViewportClient, const FKey Key, const float Delta, const float DeltaTime)"
  },
  {
    "label": "IsModifierPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModifierPressed()"
  },
  {
    "label": "GetLastDraggingMode()",
    "kind": "Method",
    "detail": "Function (EViewportInteractionDraggingMode)",
    "insertText": "GetLastDraggingMode()"
  },
  {
    "label": "GetDragTranslationVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetDragTranslationVelocity()"
  },
  {
    "label": "SetHoverLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoverLocation(const FVector& InHoverLocation)"
  },
  {
    "label": "GetGrabberSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGrabberSphere(FSphere& OutGrabberSphere, const bool bEvenIfBlocked = false)"
  },
  {
    "label": "GetLaserPointerMaxLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLaserPointerMaxLength()"
  },
  {
    "label": "PlayHapticEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayHapticEffect(const float Strength)"
  },
  {
    "label": "GetHitResultFromLaserPointer()",
    "kind": "Method",
    "detail": "Function (} FHitResult)",
    "insertText": "GetHitResultFromLaserPointer(TArray<AActor*>* OptionalListOfIgnoredActors = nullptr, const EHitResultGizmoFilterMode GizmoFilterMode = EHitResultGizmoFilterMode::All, TArray<UClass*>* ObjectsInFrontOfGizmo = nullptr, const bool bEvenIfBlocked = false, const float LaserLengthOverride = 0.0f)"
  },
  {
    "label": "ResetHoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHoverState()"
  },
  {
    "label": "CalculateDragRay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateDragRay(double& InOutDragRayLength, double& InOutDragRayVelocity)"
  },
  {
    "label": "OnStartDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartDragging(const FVector& HitLocation, const bool bIsPlacingNewObjects)"
  },
  {
    "label": "IsHovering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHovering()"
  },
  {
    "label": "GetIsLaserBlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsLaserBlocked()"
  },
  {
    "label": "GetDragHapticFeedbackStrength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDragHapticFeedbackStrength()"
  },
  {
    "label": "IsHoveringOverPriorityType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHoveringOverPriorityType()"
  },
  {
    "label": "IsHoveringOverSelectedActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHoveringOverSelectedActor()"
  },
  {
    "label": "ResetLaserEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLaserEnd()"
  },
  {
    "label": "PreviewInputKey()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PreviewInputKey(class FEditorViewportClient& ViewportClient, FViewportActionKeyInput& Action, const FKey Key, const EInputEvent Event, bool& bOutWasHandled)"
  },
  {
    "label": "PreviewInputAxis()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PreviewInputAxis(class FEditorViewportClient& ViewportClient, FViewportActionKeyInput& Action, const FKey Key, const float Delta, const float DeltaTime, bool& bOutWasHandled)"
  },
  {
    "label": "HandleInputKey()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "HandleInputKey(class FEditorViewportClient& ViewportClient, FViewportActionKeyInput& Action, const FKey Key, const EInputEvent Event, bool& bOutWasHandled)"
  },
  {
    "label": "HandleInputAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputAxis(class FEditorViewportClient& ViewportClient, FViewportActionKeyInput& Action, const FKey Key, const float Delta, const float DeltaTime, bool& bOutWasHandled)"
  },
  {
    "label": "AllowLaserSmoothing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowLaserSmoothing()"
  }
]