[
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FThreadManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadManager"
  },
  {
    "label": "FThreadStackBackTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadStackBackTrace"
  },
  {
    "label": "FForkProcessHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForkProcessHelper"
  },
  {
    "label": "PLATFORM_SUPPORTS_ALL_THREAD_BACKTRACES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" CoreGlobals . h \" # include \" Containers / Map . h \" # include \" HAL / CriticalSection . h \" # ifndef PLATFORM_SUPPORTS_ALL_THREAD_BACKTRACES # define)",
    "insertText": "PLATFORM_SUPPORTS_ALL_THREAD_BACKTRACES(PLATFORM_WINDOWS || PLATFORM_MAC)"
  },
  {
    "label": "CheckThreadListSafeToContinueIteration()",
    "kind": "Method",
    "detail": "Function (class FThreadManager { FCriticalSection ThreadsCritical ; using FThreads = TMap<uint32,FRunnableThread*,TInlineSetAllocator<2 5 6>> ; FThreads Threads ; bool bIsThreadListDirty = false ; bool)",
    "insertText": "CheckThreadListSafeToContinueIteration()"
  },
  {
    "label": "OnThreadListModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadListModified()"
  },
  {
    "label": "FThreadManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FThreadManager()"
  },
  {
    "label": "AddThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddThread(uint32 ThreadId, FRunnableThread* Thread)"
  },
  {
    "label": "RemoveThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveThread(FRunnableThread* Thread)"
  },
  {
    "label": "NumThreads()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumThreads()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick()"
  },
  {
    "label": "GetThreadName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetThreadName(uint32 ThreadId)"
  },
  {
    "label": "GameThreadName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GameThreadName(TEXT(\"GameThread\"))"
  },
  {
    "label": "RenderThreadName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RenderThreadName(TEXT(\"RenderThread\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(ThreadId == GGameThreadId)"
  },
  {
    "label": "GetAllThreadStackBackTraces()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_SUPPORTS_ALL_THREAD_BACKTRACES struct FThreadStackBackTrace { uint32 ProgramCountersMaxStackSize = 1 0 0 ; typedef TArray<uint64,TFixedAllocator<ProgramCountersMaxStackSize>> FProgramCountersArray ; uint32 ThreadId ; FString ThreadName ; FProgramCountersArray ProgramCounters ; } ; void)",
    "insertText": "GetAllThreadStackBackTraces(TArray<FThreadStackBackTrace>& StackTraces)"
  },
  {
    "label": "ForEachThreadStackBackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachThreadStackBackTrace(TFunctionRef<bool(uint32 ThreadId, const TCHAR* ThreadName, const TConstArrayView<uint64>& StackTrace)> Func)"
  },
  {
    "label": "ForEachThread()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ForEachThread(TFunction<void(uint32 ThreadId, FRunnableThread* Thread)> Func)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FThreadManager&)",
    "insertText": "Get()"
  },
  {
    "label": "GetForkableThreads()",
    "kind": "Method",
    "detail": "Function (private : class FForkProcessHelper ; TArray<FRunnableThread*>)",
    "insertText": "GetForkableThreads()"
  },
  {
    "label": "GetThreadNameInternal()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetThreadNameInternal(uint32 ThreadId)"
  },
  {
    "label": "HandleOnParentPreFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnParentPreFork()"
  }
]