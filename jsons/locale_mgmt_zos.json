[
  {
    "label": "locale_struct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "locale_struct"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_SUPPORT_IBM_LOCALE_MGMT_ZOS_H # define _LIBCPP_SUPPORT_IBM_LOCALE_MGMT_ZOS_H # if)",
    "insertText": "defined(__MVS__)"
  },
  {
    "label": "_NCAT()",
    "kind": "Method",
    "detail": "Function (# endif # define _LC_MAX LC_MESSAGES # define)",
    "insertText": "_NCAT(_LC_MAX + 1) #define _CATMASK(n) (1 << (n)) #define LC_COLLATE_MASK _CATMASK(LC_COLLATE) #define LC_CTYPE_MASK _CATMASK(LC_CTYPE) #define LC_MONETARY_MASK _CATMASK(LC_MONETARY) #define LC_NUMERIC_MASK _CATMASK(LC_NUMERIC) #define LC_TIME_MASK _CATMASK(LC_TIME) #define LC_MESSAGES_MASK _CATMASK(LC_MESSAGES) #define LC_ALL_MASK (_CATMASK(_NCAT) - 1)"
  },
  {
    "label": "newlocale()",
    "kind": "Method",
    "detail": "Function (int category_mask ; std::string lc_collate ; std::string lc_ctype ; std::string lc_monetary ; std::string lc_numeric ; std::string lc_time ; std::string lc_messages ; }* locale_t ; locale_t)",
    "insertText": "newlocale(int category_mask, const char* locale, locale_t base)"
  },
  {
    "label": "freelocale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freelocale(locale_t locobj)"
  },
  {
    "label": "uselocale()",
    "kind": "Method",
    "detail": "Function (locale_t)",
    "insertText": "uselocale(locale_t newloc)"
  }
]