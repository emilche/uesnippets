[
  {
    "label": "plcrash_async_cfe_reader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_async_cfe_reader"
  },
  {
    "label": "unwind_info_section_header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unwind_info_section_header"
  },
  {
    "label": "plcrash_async_cfe_entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_async_cfe_entry"
  },
  {
    "label": "_PLCRASH_ASYNC_CFE_SAVED_REGISTER_MAX()",
    "kind": "Method",
    "detail": "Function (# ifndef PLCRASH_ASYNC_COMPACT_UNWIND_ENCODING_H # define PLCRASH_ASYNC_COMPACT_UNWIND_ENCODING_H 1 # include \" PLCrashAsync . h \" # include \" PLCrashAsyncImageList . h \" # include \" PLCrashAsyncThread . h \" # include \" PLCrashFeatureConfig . h \" # include<mach - o / compact_unwind_encoding . h> # if PLCRASH_FEATURE_UNWIND_COMPACT typedef struct plcrash_async_cfe_reader { plcrash_async_mobject_t* mobj ; cpu_type_t cpu_type ; struct unwind_info_section_header header ; const plcrash_async_byteorder_t* byteorder ; } plcrash_async_cfe_reader_t ; typedef enum { PLCRASH_ASYNC_CFE_ENTRY_TYPE_FRAME_PTR = 1,PLCRASH_ASYNC_CFE_ENTRY_TYPE_FRAMELESS_IMMD = 2,PLCRASH_ASYNC_CFE_ENTRY_TYPE_FRAMELESS_INDIRECT = 3,PLCRASH_ASYNC_CFE_ENTRY_TYPE_DWARF = 4,PLCRASH_ASYNC_CFE_ENTRY_TYPE_NONE = 5 } plcrash_async_cfe_entry_type_t ; # define PLCRASH_ASYNC_CFE_PERMUTATION_REGISTER_MAX 6 # define PLCRASH_ASYNC_CFE_SAVED_REGISTER_X86_MAX 6 # define PLCRASH_ASYNC_CFE_SAVED_REGISTER_ARM64_MAX 1 0 # define)",
    "insertText": "_PLCRASH_ASYNC_CFE_SAVED_REGISTER_MAX(a, b) (((a) > (b)) ? (a) : (b)) #define PLCRASH_ASYNC_CFE_SAVED_REGISTER_MAX _PLCRASH_ASYNC_CFE_SAVED_REGISTER_MAX(PLCRASH_ASYNC_CFE_SAVED_REGISTER_X86_MAX, PLCRASH_ASYNC_CFE_SAVED_REGISTER_ARM64_MAX)"
  },
  {
    "label": "plcrash_async_cfe_reader_init()",
    "kind": "Method",
    "detail": "Function (plcrash_async_cfe_entry_type_t type ; cpu_type_t cpu_type ; intptr_t stack_offset ; uint32_t stack_adjust ; plcrash_regnum_t return_address_register ; uint32_t register_count ; plcrash_regnum_t register_list [ PLCRASH_ASYNC_CFE_SAVED_REGISTER_MAX ] ; } plcrash_async_cfe_entry_t ; plcrash_error_t)",
    "insertText": "plcrash_async_cfe_reader_init(plcrash_async_cfe_reader_t *reader, plcrash_async_mobject_t *mobj, cpu_type_t cputype)"
  },
  {
    "label": "plcrash_async_cfe_reader_find_pc()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_cfe_reader_find_pc(plcrash_async_cfe_reader_t *reader, pl_vm_address_t pc, pl_vm_address_t *function_base, uint32_t *encoding)"
  },
  {
    "label": "plcrash_async_cfe_reader_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_cfe_reader_free(plcrash_async_cfe_reader_t *reader)"
  },
  {
    "label": "plcrash_async_cfe_entry_init()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_cfe_entry_init(plcrash_async_cfe_entry_t *entry, cpu_type_t cpu_type, uint32_t encoding)"
  },
  {
    "label": "plcrash_async_cfe_entry_type()",
    "kind": "Method",
    "detail": "Function (plcrash_async_cfe_entry_type_t)",
    "insertText": "plcrash_async_cfe_entry_type(plcrash_async_cfe_entry_t *entry)"
  },
  {
    "label": "plcrash_async_cfe_entry_stack_offset()",
    "kind": "Method",
    "detail": "Function (intptr_t)",
    "insertText": "plcrash_async_cfe_entry_stack_offset(plcrash_async_cfe_entry_t *entry)"
  },
  {
    "label": "plcrash_async_cfe_entry_stack_adjustment()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "plcrash_async_cfe_entry_stack_adjustment(plcrash_async_cfe_entry_t *entry)"
  },
  {
    "label": "plcrash_async_cfe_entry_return_address_register()",
    "kind": "Method",
    "detail": "Function (plcrash_regnum_t)",
    "insertText": "plcrash_async_cfe_entry_return_address_register(plcrash_async_cfe_entry_t *entry)"
  },
  {
    "label": "plcrash_async_cfe_entry_register_count()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "plcrash_async_cfe_entry_register_count(plcrash_async_cfe_entry_t *entry)"
  },
  {
    "label": "plcrash_async_cfe_entry_register_list()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_cfe_entry_register_list(plcrash_async_cfe_entry_t *entry, plcrash_regnum_t register_list[])"
  },
  {
    "label": "plcrash_async_cfe_entry_apply()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_cfe_entry_apply(task_t task, pl_vm_address_t function_address, const plcrash_async_thread_state_t *thread_state, plcrash_async_cfe_entry_t *entry, plcrash_async_thread_state_t *new_thread_state)"
  },
  {
    "label": "plcrash_async_cfe_entry_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_cfe_entry_free(plcrash_async_cfe_entry_t *entry)"
  },
  {
    "label": "plcrash_async_cfe_register_encode()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "plcrash_async_cfe_register_encode(const uint32_t registers[], uint32_t count)"
  },
  {
    "label": "plcrash_async_cfe_register_decode()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_cfe_register_decode(uint32_t permutation, uint32_t count, uint32_t registers[])"
  }
]