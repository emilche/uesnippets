[
  {
    "label": "FQualifiedFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQualifiedFrameTime"
  },
  {
    "label": "FQualifiedFrameTime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Timecode . h \" struct FQualifiedFrameTime {)",
    "insertText": "FQualifiedFrameTime() : Time(0), Rate(24, 1)"
  },
  {
    "label": "FQualifiedFrameTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQualifiedFrameTime(const FFrameTime& InTime, const FFrameRate& InRate) : Time(InTime), Rate(InRate)"
  },
  {
    "label": "FQualifiedFrameTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQualifiedFrameTime(const FTimecode& InTimecode, const FFrameRate& InRate) : Time(InTimecode.ToFrameNumber(InRate)) , Rate(InRate)"
  },
  {
    "label": "AsSeconds()",
    "kind": "Method",
    "detail": "Function (} public : double)",
    "insertText": "AsSeconds()"
  },
  {
    "label": "ToTimecode()",
    "kind": "Method",
    "detail": "Function (} FTimecode)",
    "insertText": "ToTimecode()"
  },
  {
    "label": "ToTimecode()",
    "kind": "Method",
    "detail": "Function (} FTimecode)",
    "insertText": "ToTimecode(bool bDropFrame)"
  }
]