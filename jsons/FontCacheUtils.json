[
  {
    "label": "FLRUStringCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLRUStringCache"
  },
  {
    "label": "FCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheEntry"
  },
  {
    "label": "FCaseSensitiveStringKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaseSensitiveStringKeyFuncs"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" SlateGlobals . h \")",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Font Measure Memory\"), STAT_SlateFontMeasureCacheMemory, STATGROUP_SlateMemory, SLATECORE_API)"
  },
  {
    "label": "FLRUStringCache()",
    "kind": "Method",
    "detail": "Function (class FLRUStringCache { public :)",
    "insertText": "FLRUStringCache(int32 InMaxNumElements ) : LookupSet() , MostRecent(nullptr) , LeastRecent(nullptr) , MaxNumElements(InMaxNumElements)"
  },
  {
    "label": "FLRUStringCache()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLRUStringCache()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AccessItem()",
    "kind": "Method",
    "detail": "Function (} const FVector2f*)",
    "insertText": "AccessItem(FStringView Key)"
  },
  {
    "label": "FindByHash()",
    "kind": "Method",
    "detail": "Function (FCacheEntry** Entry = LookupSet .)",
    "insertText": "FindByHash(FLookupSet::KeyFuncsType::GetKeyHash(Key), Key)"
  },
  {
    "label": "MarkAsRecent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsRecent(*Entry)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "Add(FStringView Key, const FVector2f& Value)"
  },
  {
    "label": "Eject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Eject()"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (} FCacheEntry* NewEntry = new)",
    "insertText": "FCacheEntry(FString(Key), Value)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (NewEntry ->)",
    "insertText": "Link(MostRecent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MostRecent = NewEntry ;)",
    "insertText": "if(LeastRecent == nullptr)"
  },
  {
    "label": "STAT()",
    "kind": "Method",
    "detail": "Function (LeastRecent = NewEntry ; })",
    "insertText": "STAT(uint32 CurrentMemUsage = LookupSet.GetAllocatedSize())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LookupSet .)",
    "insertText": "Add(NewEntry)"
  },
  {
    "label": "STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STAT(uint32 NewMemUsage = LookupSet.GetAllocatedSize())"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_SlateFontMeasureCacheMemory, NewMemUsage - CurrentMemUsage)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} else { FCacheEntry* EntryPtr =* Entry ; EntryPtr -> Value = Value ;)",
    "insertText": "checkSlow(FLookupSet::KeyFuncsType::Matches(EntryPtr->Key, Key))"
  },
  {
    "label": "MarkAsRecent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsRecent(EntryPtr)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_SlateFontMeasureCacheMemory, LookupSet.GetAllocatedSize())"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (MostRecent = LeastRecent = nullptr ; } private : struct FCacheEntry { FString Key ; FVector2f Value ; FCacheEntry* Next ; FCacheEntry* Prev ;)",
    "insertText": "FCacheEntry(FString InKey, const FVector2f& InValue ) : Key( MoveTemp(InKey) ) , Value( InValue ) , Next( nullptr ) , Prev( nullptr)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_SlateFontMeasureCacheMemory, Key.GetAllocatedSize()+sizeof(Value)+sizeof(Next)+sizeof(Prev))"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCacheEntry()"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_SlateFontMeasureCacheMemory, Key.GetAllocatedSize()+sizeof(Value)+sizeof(Next)+sizeof(Prev))"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Link(FCacheEntry* Before)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Next = Before ;)",
    "insertText": "if(Before)"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (Before -> Prev = this ; } } void)",
    "insertText": "Unlink()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Prev -> Next = Next ; })",
    "insertText": "if(Next)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (Next -> Prev = Prev ; } Prev = nullptr ; Next = nullptr ; } } ; struct FCaseSensitiveStringKeyFuncs : BaseKeyFuncs<FCacheEntry*,FString> { const FString&)",
    "insertText": "GetSetKey(const FCacheEntry* Entry)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(FStringView Identifier)"
  },
  {
    "label": "MarkAsRecent()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "MarkAsRecent(FCacheEntry* Entry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LeastRecent = LeastRecent -> Prev ; })",
    "insertText": "if(Entry != MostRecent)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FCacheEntry* EntryToRemove = LeastRecent ;)",
    "insertText": "check(EntryToRemove)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (LookupSet .)",
    "insertText": "Remove(EntryToRemove->Key)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_SlateFontMeasureCacheMemory, CurrentMemUsage - NewMemUsage)"
  }
]