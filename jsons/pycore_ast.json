[
  {
    "label": "_mod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_mod"
  },
  {
    "label": "_stmt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_stmt"
  },
  {
    "label": "_expr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_expr"
  },
  {
    "label": "_expr_context",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_expr_context"
  },
  {
    "label": "_boolop",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_boolop"
  },
  {
    "label": "_operator",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_operator"
  },
  {
    "label": "_unaryop",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_unaryop"
  },
  {
    "label": "_cmpop",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_cmpop"
  },
  {
    "label": "_comprehension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_comprehension"
  },
  {
    "label": "_excepthandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_excepthandler"
  },
  {
    "label": "_arguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_arguments"
  },
  {
    "label": "_arg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_arg"
  },
  {
    "label": "_keyword",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_keyword"
  },
  {
    "label": "_alias",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_alias"
  },
  {
    "label": "_withitem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_withitem"
  },
  {
    "label": "_match_case",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_match_case"
  },
  {
    "label": "_pattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_pattern"
  },
  {
    "label": "_type_ignore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_type_ignore"
  },
  {
    "label": "_mod_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_mod_kind"
  },
  {
    "label": "_stmt_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_stmt_kind"
  },
  {
    "label": "_expr_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_expr_kind"
  },
  {
    "label": "_excepthandler_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_excepthandler_kind"
  },
  {
    "label": "_pattern_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_pattern_kind"
  },
  {
    "label": "_type_ignore_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_type_ignore_kind"
  },
  {
    "label": "_Py_asdl_mod_seq_new()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_AST_H # define Py_INTERNAL_AST_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # include \" pycore_asdl . h \" typedef struct _mod* mod_ty ; typedef struct _stmt* stmt_ty ; typedef struct _expr* expr_ty ; typedef enum _expr_context { Load = 1,Store = 2,Del = 3 } expr_context_ty ; typedef enum _boolop { And = 1,Or = 2 } boolop_ty ; typedef enum _operator { Add = 1,Sub = 2,Mult = 3,MatMult = 4,Div = 5,Mod = 6,Pow = 7,LShift = 8,RShift = 9,BitOr = 1 0,BitXor = 1 1,BitAnd = 1 2,FloorDiv = 1 3 } operator_ty ; typedef enum _unaryop { Invert = 1,Not = 2,UAdd = 3,USub = 4 } unaryop_ty ; typedef enum _cmpop { Eq = 1,NotEq = 2,Lt = 3,LtE = 4,Gt = 5,GtE = 6,Is = 7,IsNot = 8,In = 9,NotIn = 1 0 } cmpop_ty ; typedef struct _comprehension* comprehension_ty ; typedef struct _excepthandler* excepthandler_ty ; typedef struct _arguments* arguments_ty ; typedef struct _arg* arg_ty ; typedef struct _keyword* keyword_ty ; typedef struct _alias* alias_ty ; typedef struct _withitem* withitem_ty ; typedef struct _match_case* match_case_ty ; typedef struct _pattern* pattern_ty ; typedef struct _type_ignore* type_ignore_ty ; typedef struct { _ASDL_SEQ_HEAD mod_ty typed_elements [ 1 ] ; } asdl_mod_seq ; asdl_mod_seq*)",
    "insertText": "_Py_asdl_mod_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_stmt_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD stmt_ty typed_elements [ 1 ] ; } asdl_stmt_seq ; asdl_stmt_seq*)",
    "insertText": "_Py_asdl_stmt_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_expr_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD expr_ty typed_elements [ 1 ] ; } asdl_expr_seq ; asdl_expr_seq*)",
    "insertText": "_Py_asdl_expr_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_comprehension_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD comprehension_ty typed_elements [ 1 ] ; } asdl_comprehension_seq ; asdl_comprehension_seq*)",
    "insertText": "_Py_asdl_comprehension_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_excepthandler_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD excepthandler_ty typed_elements [ 1 ] ; } asdl_excepthandler_seq ; asdl_excepthandler_seq*)",
    "insertText": "_Py_asdl_excepthandler_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_arguments_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD arguments_ty typed_elements [ 1 ] ; } asdl_arguments_seq ; asdl_arguments_seq*)",
    "insertText": "_Py_asdl_arguments_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_arg_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD arg_ty typed_elements [ 1 ] ; } asdl_arg_seq ; asdl_arg_seq*)",
    "insertText": "_Py_asdl_arg_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_keyword_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD keyword_ty typed_elements [ 1 ] ; } asdl_keyword_seq ; asdl_keyword_seq*)",
    "insertText": "_Py_asdl_keyword_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_alias_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD alias_ty typed_elements [ 1 ] ; } asdl_alias_seq ; asdl_alias_seq*)",
    "insertText": "_Py_asdl_alias_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_withitem_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD withitem_ty typed_elements [ 1 ] ; } asdl_withitem_seq ; asdl_withitem_seq*)",
    "insertText": "_Py_asdl_withitem_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_match_case_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD match_case_ty typed_elements [ 1 ] ; } asdl_match_case_seq ; asdl_match_case_seq*)",
    "insertText": "_Py_asdl_match_case_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_pattern_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD pattern_ty typed_elements [ 1 ] ; } asdl_pattern_seq ; asdl_pattern_seq*)",
    "insertText": "_Py_asdl_pattern_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_type_ignore_seq_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { _ASDL_SEQ_HEAD type_ignore_ty typed_elements [ 1 ] ; } asdl_type_ignore_seq ; asdl_type_ignore_seq*)",
    "insertText": "_Py_asdl_type_ignore_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_PyAST_Module()",
    "kind": "Method",
    "detail": "Function (enum _mod_kind { Module_kind = 1,Interactive_kind = 2,Expression_kind = 3,FunctionType_kind = 4 } ; struct _mod { enum _mod_kind kind ; union { struct { asdl_stmt_seq* body ; asdl_type_ignore_seq* type_ignores ; } Module ; struct { asdl_stmt_seq* body ; } Interactive ; struct { expr_ty body ; } Expression ; struct { asdl_expr_seq* argtypes ; expr_ty returns ; } FunctionType ; } v ; } ; enum _stmt_kind { FunctionDef_kind = 1,AsyncFunctionDef_kind = 2,ClassDef_kind = 3,Return_kind = 4,Delete_kind = 5,Assign_kind = 6,AugAssign_kind = 7,AnnAssign_kind = 8,For_kind = 9,AsyncFor_kind = 1 0,While_kind = 1 1,If_kind = 1 2,With_kind = 1 3,AsyncWith_kind = 1 4,Match_kind = 1 5,Raise_kind = 1 6,Try_kind = 1 7,TryStar_kind = 1 8,Assert_kind = 1 9,Import_kind = 2 0,ImportFrom_kind = 2 1,Global_kind = 2 2,Nonlocal_kind = 2 3,Expr_kind = 2 4,Pass_kind = 2 5,Break_kind = 2 6,Continue_kind = 2 7 } ; struct _stmt { enum _stmt_kind kind ; union { struct { identifier name ; arguments_ty args ; asdl_stmt_seq* body ; asdl_expr_seq* decorator_list ; expr_ty returns ; string type_comment ; } FunctionDef ; struct { identifier name ; arguments_ty args ; asdl_stmt_seq* body ; asdl_expr_seq* decorator_list ; expr_ty returns ; string type_comment ; } AsyncFunctionDef ; struct { identifier name ; asdl_expr_seq* bases ; asdl_keyword_seq* keywords ; asdl_stmt_seq* body ; asdl_expr_seq* decorator_list ; } ClassDef ; struct { expr_ty value ; } Return ; struct { asdl_expr_seq* targets ; } Delete ; struct { asdl_expr_seq* targets ; expr_ty value ; string type_comment ; } Assign ; struct { expr_ty target ; operator_ty op ; expr_ty value ; } AugAssign ; struct { expr_ty target ; expr_ty annotation ; expr_ty value ; int simple ; } AnnAssign ; struct { expr_ty target ; expr_ty iter ; asdl_stmt_seq* body ; asdl_stmt_seq* orelse ; string type_comment ; } For ; struct { expr_ty target ; expr_ty iter ; asdl_stmt_seq* body ; asdl_stmt_seq* orelse ; string type_comment ; } AsyncFor ; struct { expr_ty test ; asdl_stmt_seq* body ; asdl_stmt_seq* orelse ; } While ; struct { expr_ty test ; asdl_stmt_seq* body ; asdl_stmt_seq* orelse ; } If ; struct { asdl_withitem_seq* items ; asdl_stmt_seq* body ; string type_comment ; } With ; struct { asdl_withitem_seq* items ; asdl_stmt_seq* body ; string type_comment ; } AsyncWith ; struct { expr_ty subject ; asdl_match_case_seq* cases ; } Match ; struct { expr_ty exc ; expr_ty cause ; } Raise ; struct { asdl_stmt_seq* body ; asdl_excepthandler_seq* handlers ; asdl_stmt_seq* orelse ; asdl_stmt_seq* finalbody ; } Try ; struct { asdl_stmt_seq* body ; asdl_excepthandler_seq* handlers ; asdl_stmt_seq* orelse ; asdl_stmt_seq* finalbody ; } TryStar ; struct { expr_ty test ; expr_ty msg ; } Assert ; struct { asdl_alias_seq* names ; } Import ; struct { identifier module ; asdl_alias_seq* names ; int level ; } ImportFrom ; struct { asdl_identifier_seq* names ; } Global ; struct { asdl_identifier_seq* names ; } Nonlocal ; struct { expr_ty value ; } Expr ; } v ; int lineno ; int col_offset ; int end_lineno ; int end_col_offset ; } ; enum _expr_kind { BoolOp_kind = 1,NamedExpr_kind = 2,BinOp_kind = 3,UnaryOp_kind = 4,Lambda_kind = 5,IfExp_kind = 6,Dict_kind = 7,Set_kind = 8,ListComp_kind = 9,SetComp_kind = 1 0,DictComp_kind = 1 1,GeneratorExp_kind = 1 2,Await_kind = 1 3,Yield_kind = 1 4,YieldFrom_kind = 1 5,Compare_kind = 1 6,Call_kind = 1 7,FormattedValue_kind = 1 8,JoinedStr_kind = 1 9,Constant_kind = 2 0,Attribute_kind = 2 1,Subscript_kind = 2 2,Starred_kind = 2 3,Name_kind = 2 4,List_kind = 2 5,Tuple_kind = 2 6,Slice_kind = 2 7 } ; struct _expr { enum _expr_kind kind ; union { struct { boolop_ty op ; asdl_expr_seq* values ; } BoolOp ; struct { expr_ty target ; expr_ty value ; } NamedExpr ; struct { expr_ty left ; operator_ty op ; expr_ty right ; } BinOp ; struct { unaryop_ty op ; expr_ty operand ; } UnaryOp ; struct { arguments_ty args ; expr_ty body ; } Lambda ; struct { expr_ty test ; expr_ty body ; expr_ty orelse ; } IfExp ; struct { asdl_expr_seq* keys ; asdl_expr_seq* values ; } Dict ; struct { asdl_expr_seq* elts ; } Set ; struct { expr_ty elt ; asdl_comprehension_seq* generators ; } ListComp ; struct { expr_ty elt ; asdl_comprehension_seq* generators ; } SetComp ; struct { expr_ty key ; expr_ty value ; asdl_comprehension_seq* generators ; } DictComp ; struct { expr_ty elt ; asdl_comprehension_seq* generators ; } GeneratorExp ; struct { expr_ty value ; } Await ; struct { expr_ty value ; } Yield ; struct { expr_ty value ; } YieldFrom ; struct { expr_ty left ; asdl_int_seq* ops ; asdl_expr_seq* comparators ; } Compare ; struct { expr_ty func ; asdl_expr_seq* args ; asdl_keyword_seq* keywords ; } Call ; struct { expr_ty value ; int conversion ; expr_ty format_spec ; } FormattedValue ; struct { asdl_expr_seq* values ; } JoinedStr ; struct { constant value ; string kind ; } Constant ; struct { expr_ty value ; identifier attr ; expr_context_ty ctx ; } Attribute ; struct { expr_ty value ; expr_ty slice ; expr_context_ty ctx ; } Subscript ; struct { expr_ty value ; expr_context_ty ctx ; } Starred ; struct { identifier id ; expr_context_ty ctx ; } Name ; struct { asdl_expr_seq* elts ; expr_context_ty ctx ; } List ; struct { asdl_expr_seq* elts ; expr_context_ty ctx ; } Tuple ; struct { expr_ty lower ; expr_ty upper ; expr_ty step ; } Slice ; } v ; int lineno ; int col_offset ; int end_lineno ; int end_col_offset ; } ; struct _comprehension { expr_ty target ; expr_ty iter ; asdl_expr_seq* ifs ; int is_async ; } ; enum _excepthandler_kind { ExceptHandler_kind = 1 } ; struct _excepthandler { enum _excepthandler_kind kind ; union { struct { expr_ty type ; identifier name ; asdl_stmt_seq* body ; } ExceptHandler ; } v ; int lineno ; int col_offset ; int end_lineno ; int end_col_offset ; } ; struct _arguments { asdl_arg_seq* posonlyargs ; asdl_arg_seq* args ; arg_ty vararg ; asdl_arg_seq* kwonlyargs ; asdl_expr_seq* kw_defaults ; arg_ty kwarg ; asdl_expr_seq* defaults ; } ; struct _arg { identifier arg ; expr_ty annotation ; string type_comment ; int lineno ; int col_offset ; int end_lineno ; int end_col_offset ; } ; struct _keyword { identifier arg ; expr_ty value ; int lineno ; int col_offset ; int end_lineno ; int end_col_offset ; } ; struct _alias { identifier name ; identifier asname ; int lineno ; int col_offset ; int end_lineno ; int end_col_offset ; } ; struct _withitem { expr_ty context_expr ; expr_ty optional_vars ; } ; struct _match_case { pattern_ty pattern ; expr_ty guard ; asdl_stmt_seq* body ; } ; enum _pattern_kind { MatchValue_kind = 1,MatchSingleton_kind = 2,MatchSequence_kind = 3,MatchMapping_kind = 4,MatchClass_kind = 5,MatchStar_kind = 6,MatchAs_kind = 7,MatchOr_kind = 8 } ; struct _pattern { enum _pattern_kind kind ; union { struct { expr_ty value ; } MatchValue ; struct { constant value ; } MatchSingleton ; struct { asdl_pattern_seq* patterns ; } MatchSequence ; struct { asdl_expr_seq* keys ; asdl_pattern_seq* patterns ; identifier rest ; } MatchMapping ; struct { expr_ty cls ; asdl_pattern_seq* patterns ; asdl_identifier_seq* kwd_attrs ; asdl_pattern_seq* kwd_patterns ; } MatchClass ; struct { identifier name ; } MatchStar ; struct { pattern_ty pattern ; identifier name ; } MatchAs ; struct { asdl_pattern_seq* patterns ; } MatchOr ; } v ; int lineno ; int col_offset ; int end_lineno ; int end_col_offset ; } ; enum _type_ignore_kind { TypeIgnore_kind = 1 } ; struct _type_ignore { enum _type_ignore_kind kind ; union { struct { int lineno ; string tag ; } TypeIgnore ; } v ; } ; mod_ty)",
    "insertText": "_PyAST_Module(asdl_stmt_seq * body, asdl_type_ignore_seq * type_ignores, PyArena *arena)"
  },
  {
    "label": "_PyAST_Interactive()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "_PyAST_Interactive(asdl_stmt_seq * body, PyArena *arena)"
  },
  {
    "label": "_PyAST_Expression()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "_PyAST_Expression(expr_ty body, PyArena *arena)"
  },
  {
    "label": "_PyAST_FunctionType()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "_PyAST_FunctionType(asdl_expr_seq * argtypes, expr_ty returns, PyArena *arena)"
  },
  {
    "label": "_PyAST_FunctionDef()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_FunctionDef(identifier name, arguments_ty args, asdl_stmt_seq * body, asdl_expr_seq * decorator_list, expr_ty returns, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AsyncFunctionDef()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AsyncFunctionDef(identifier name, arguments_ty args, asdl_stmt_seq * body, asdl_expr_seq * decorator_list, expr_ty returns, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_ClassDef()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_ClassDef(identifier name, asdl_expr_seq * bases, asdl_keyword_seq * keywords, asdl_stmt_seq * body, asdl_expr_seq * decorator_list, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Return()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Return(expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Delete()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Delete(asdl_expr_seq * targets, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Assign()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Assign(asdl_expr_seq * targets, expr_ty value, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AugAssign()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AugAssign(expr_ty target, operator_ty op, expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AnnAssign()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AnnAssign(expr_ty target, expr_ty annotation, expr_ty value, int simple, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_For()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_For(expr_ty target, expr_ty iter, asdl_stmt_seq * body, asdl_stmt_seq * orelse, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AsyncFor()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AsyncFor(expr_ty target, expr_ty iter, asdl_stmt_seq * body, asdl_stmt_seq * orelse, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_While()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_While(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_If()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_If(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_With()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_With(asdl_withitem_seq * items, asdl_stmt_seq * body, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AsyncWith()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AsyncWith(asdl_withitem_seq * items, asdl_stmt_seq * body, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Match()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Match(expr_ty subject, asdl_match_case_seq * cases, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Raise()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Raise(expr_ty exc, expr_ty cause, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Try()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Try(asdl_stmt_seq * body, asdl_excepthandler_seq * handlers, asdl_stmt_seq * orelse, asdl_stmt_seq * finalbody, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_TryStar()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_TryStar(asdl_stmt_seq * body, asdl_excepthandler_seq * handlers, asdl_stmt_seq * orelse, asdl_stmt_seq * finalbody, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Assert()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Assert(expr_ty test, expr_ty msg, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Import()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Import(asdl_alias_seq * names, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_ImportFrom()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_ImportFrom(identifier module, asdl_alias_seq * names, int level, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Global()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Global(asdl_identifier_seq * names, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Nonlocal()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Nonlocal(asdl_identifier_seq * names, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Expr()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Expr(expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Pass()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Pass(int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Break()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Break(int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Continue()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Continue(int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_BoolOp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_BoolOp(boolop_ty op, asdl_expr_seq * values, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_NamedExpr()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_NamedExpr(expr_ty target, expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_BinOp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_BinOp(expr_ty left, operator_ty op, expr_ty right, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_UnaryOp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_UnaryOp(unaryop_ty op, expr_ty operand, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Lambda()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Lambda(arguments_ty args, expr_ty body, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_IfExp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_IfExp(expr_ty test, expr_ty body, expr_ty orelse, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Dict()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Dict(asdl_expr_seq * keys, asdl_expr_seq * values, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Set()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Set(asdl_expr_seq * elts, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_ListComp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_ListComp(expr_ty elt, asdl_comprehension_seq * generators, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_SetComp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_SetComp(expr_ty elt, asdl_comprehension_seq * generators, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_DictComp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_DictComp(expr_ty key, expr_ty value, asdl_comprehension_seq * generators, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_GeneratorExp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_GeneratorExp(expr_ty elt, asdl_comprehension_seq * generators, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Await()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Await(expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Yield()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Yield(expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_YieldFrom()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_YieldFrom(expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Compare()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Compare(expr_ty left, asdl_int_seq * ops, asdl_expr_seq * comparators, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Call()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Call(expr_ty func, asdl_expr_seq * args, asdl_keyword_seq * keywords, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_FormattedValue()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_FormattedValue(expr_ty value, int conversion, expr_ty format_spec, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_JoinedStr()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_JoinedStr(asdl_expr_seq * values, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Constant()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Constant(constant value, string kind, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Attribute()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Attribute(expr_ty value, identifier attr, expr_context_ty ctx, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Subscript()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Subscript(expr_ty value, expr_ty slice, expr_context_ty ctx, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Starred()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Starred(expr_ty value, expr_context_ty ctx, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Name()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Name(identifier id, expr_context_ty ctx, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_List()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_List(asdl_expr_seq * elts, expr_context_ty ctx, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Tuple()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Tuple(asdl_expr_seq * elts, expr_context_ty ctx, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Slice()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Slice(expr_ty lower, expr_ty upper, expr_ty step, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_comprehension()",
    "kind": "Method",
    "detail": "Function (comprehension_ty)",
    "insertText": "_PyAST_comprehension(expr_ty target, expr_ty iter, asdl_expr_seq * ifs, int is_async, PyArena *arena)"
  },
  {
    "label": "_PyAST_ExceptHandler()",
    "kind": "Method",
    "detail": "Function (excepthandler_ty)",
    "insertText": "_PyAST_ExceptHandler(expr_ty type, identifier name, asdl_stmt_seq * body, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_arguments()",
    "kind": "Method",
    "detail": "Function (arguments_ty)",
    "insertText": "_PyAST_arguments(asdl_arg_seq * posonlyargs, asdl_arg_seq * args, arg_ty vararg, asdl_arg_seq * kwonlyargs, asdl_expr_seq * kw_defaults, arg_ty kwarg, asdl_expr_seq * defaults, PyArena *arena)"
  },
  {
    "label": "_PyAST_arg()",
    "kind": "Method",
    "detail": "Function (arg_ty)",
    "insertText": "_PyAST_arg(identifier arg, expr_ty annotation, string type_comment, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_keyword()",
    "kind": "Method",
    "detail": "Function (keyword_ty)",
    "insertText": "_PyAST_keyword(identifier arg, expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_alias()",
    "kind": "Method",
    "detail": "Function (alias_ty)",
    "insertText": "_PyAST_alias(identifier name, identifier asname, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_withitem()",
    "kind": "Method",
    "detail": "Function (withitem_ty)",
    "insertText": "_PyAST_withitem(expr_ty context_expr, expr_ty optional_vars, PyArena *arena)"
  },
  {
    "label": "_PyAST_match_case()",
    "kind": "Method",
    "detail": "Function (match_case_ty)",
    "insertText": "_PyAST_match_case(pattern_ty pattern, expr_ty guard, asdl_stmt_seq * body, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchValue()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchValue(expr_ty value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchSingleton()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchSingleton(constant value, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchSequence()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchSequence(asdl_pattern_seq * patterns, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchMapping()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchMapping(asdl_expr_seq * keys, asdl_pattern_seq * patterns, identifier rest, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchClass()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchClass(expr_ty cls, asdl_pattern_seq * patterns, asdl_identifier_seq * kwd_attrs, asdl_pattern_seq * kwd_patterns, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchStar()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchStar(identifier name, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchAs()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchAs(pattern_ty pattern, identifier name, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchOr()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchOr(asdl_pattern_seq * patterns, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_TypeIgnore()",
    "kind": "Method",
    "detail": "Function (type_ignore_ty)",
    "insertText": "_PyAST_TypeIgnore(int lineno, string tag, PyArena *arena)"
  },
  {
    "label": "PyAST_mod2obj()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "PyAST_mod2obj(mod_ty t)"
  },
  {
    "label": "PyAST_obj2mod()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode)"
  },
  {
    "label": "PyAST_Check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PyAST_Check(PyObject* obj)"
  },
  {
    "label": "_PyAST_Validate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyAST_Validate(mod_ty)"
  },
  {
    "label": "_PyAST_ExprAsUnicode()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyAST_ExprAsUnicode(expr_ty)"
  },
  {
    "label": "_PyAST_GetDocString()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyAST_GetDocString(asdl_stmt_seq *)"
  }
]