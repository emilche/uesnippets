[
  {
    "label": "_mod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_mod"
  },
  {
    "label": "_stmt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_stmt"
  },
  {
    "label": "_expr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_expr"
  },
  {
    "label": "_expr_context",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_expr_context"
  },
  {
    "label": "_boolop",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_boolop"
  },
  {
    "label": "_operator",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_operator"
  },
  {
    "label": "_unaryop",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_unaryop"
  },
  {
    "label": "_cmpop",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_cmpop"
  },
  {
    "label": "_comprehension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_comprehension"
  },
  {
    "label": "_excepthandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_excepthandler"
  },
  {
    "label": "_arguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_arguments"
  },
  {
    "label": "_arg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_arg"
  },
  {
    "label": "_keyword",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_keyword"
  },
  {
    "label": "_alias",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_alias"
  },
  {
    "label": "_withitem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_withitem"
  },
  {
    "label": "_match_case",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_match_case"
  },
  {
    "label": "_pattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_pattern"
  },
  {
    "label": "_type_ignore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_type_ignore"
  },
  {
    "label": "_mod_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_mod_kind"
  },
  {
    "label": "_mod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_mod"
  },
  {
    "label": "_mod_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_mod_kind"
  },
  {
    "label": "_stmt_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_stmt_kind"
  },
  {
    "label": "_stmt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_stmt"
  },
  {
    "label": "_stmt_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_stmt_kind"
  },
  {
    "label": "_expr_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_expr_kind"
  },
  {
    "label": "_expr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_expr"
  },
  {
    "label": "_expr_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_expr_kind"
  },
  {
    "label": "_comprehension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_comprehension"
  },
  {
    "label": "_excepthandler_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_excepthandler_kind"
  },
  {
    "label": "_excepthandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_excepthandler"
  },
  {
    "label": "_excepthandler_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_excepthandler_kind"
  },
  {
    "label": "_arguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_arguments"
  },
  {
    "label": "_arg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_arg"
  },
  {
    "label": "_keyword",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_keyword"
  },
  {
    "label": "_alias",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_alias"
  },
  {
    "label": "_withitem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_withitem"
  },
  {
    "label": "_match_case",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_match_case"
  },
  {
    "label": "_pattern_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_pattern_kind"
  },
  {
    "label": "_pattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_pattern"
  },
  {
    "label": "_pattern_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_pattern_kind"
  },
  {
    "label": "_type_ignore_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_type_ignore_kind"
  },
  {
    "label": "_type_ignore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_type_ignore"
  },
  {
    "label": "_type_ignore_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_type_ignore_kind"
  },
  {
    "label": "_PyAST_Module()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "_PyAST_Module(asdl_stmt_seq * body, asdl_type_ignore_seq * type_ignores,\n                     PyArena *arena)"
  },
  {
    "label": "_PyAST_Interactive()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "_PyAST_Interactive(asdl_stmt_seq * body, PyArena *arena)"
  },
  {
    "label": "_PyAST_Expression()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "_PyAST_Expression(expr_ty body, PyArena *arena)"
  },
  {
    "label": "_PyAST_FunctionType()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "_PyAST_FunctionType(asdl_expr_seq * argtypes, expr_ty returns, PyArena\n                           *arena)"
  },
  {
    "label": "_PyAST_FunctionDef()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_FunctionDef(identifier name, arguments_ty args, asdl_stmt_seq *\n                           body, asdl_expr_seq * decorator_list, expr_ty\n                           returns, string type_comment, int lineno, int\n                           col_offset, int end_lineno, int end_col_offset,\n                           PyArena *arena)"
  },
  {
    "label": "_PyAST_AsyncFunctionDef()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AsyncFunctionDef(identifier name, arguments_ty args,\n                                asdl_stmt_seq * body, asdl_expr_seq *\n                                decorator_list, expr_ty returns, string\n                                type_comment, int lineno, int col_offset, int\n                                end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_ClassDef()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_ClassDef(identifier name, asdl_expr_seq * bases,\n                        asdl_keyword_seq * keywords, asdl_stmt_seq * body,\n                        asdl_expr_seq * decorator_list, int lineno, int\n                        col_offset, int end_lineno, int end_col_offset, PyArena\n                        *arena)"
  },
  {
    "label": "_PyAST_Return()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Return(expr_ty value, int lineno, int col_offset, int\n                      end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Delete()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Delete(asdl_expr_seq * targets, int lineno, int col_offset, int\n                      end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Assign()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Assign(asdl_expr_seq * targets, expr_ty value, string\n                      type_comment, int lineno, int col_offset, int end_lineno,\n                      int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AugAssign()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AugAssign(expr_ty target, operator_ty op, expr_ty value, int\n                         lineno, int col_offset, int end_lineno, int\n                         end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AnnAssign()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AnnAssign(expr_ty target, expr_ty annotation, expr_ty value, int\n                         simple, int lineno, int col_offset, int end_lineno,\n                         int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_For()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_For(expr_ty target, expr_ty iter, asdl_stmt_seq * body,\n                   asdl_stmt_seq * orelse, string type_comment, int lineno, int\n                   col_offset, int end_lineno, int end_col_offset, PyArena\n                   *arena)"
  },
  {
    "label": "_PyAST_AsyncFor()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AsyncFor(expr_ty target, expr_ty iter, asdl_stmt_seq * body,\n                        asdl_stmt_seq * orelse, string type_comment, int\n                        lineno, int col_offset, int end_lineno, int\n                        end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_While()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_While(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq *\n                     orelse, int lineno, int col_offset, int end_lineno, int\n                     end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_If()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_If(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse,\n                  int lineno, int col_offset, int end_lineno, int\n                  end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_With()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_With(asdl_withitem_seq * items, asdl_stmt_seq * body, string\n                    type_comment, int lineno, int col_offset, int end_lineno,\n                    int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_AsyncWith()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_AsyncWith(asdl_withitem_seq * items, asdl_stmt_seq * body,\n                         string type_comment, int lineno, int col_offset, int\n                         end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Match()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Match(expr_ty subject, asdl_match_case_seq * cases, int lineno,\n                     int col_offset, int end_lineno, int end_col_offset,\n                     PyArena *arena)"
  },
  {
    "label": "_PyAST_Raise()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Raise(expr_ty exc, expr_ty cause, int lineno, int col_offset,\n                     int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Try()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Try(asdl_stmt_seq * body, asdl_excepthandler_seq * handlers,\n                   asdl_stmt_seq * orelse, asdl_stmt_seq * finalbody, int\n                   lineno, int col_offset, int end_lineno, int end_col_offset,\n                   PyArena *arena)"
  },
  {
    "label": "_PyAST_TryStar()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_TryStar(asdl_stmt_seq * body, asdl_excepthandler_seq * handlers,\n                       asdl_stmt_seq * orelse, asdl_stmt_seq * finalbody, int\n                       lineno, int col_offset, int end_lineno, int\n                       end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Assert()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Assert(expr_ty test, expr_ty msg, int lineno, int col_offset,\n                      int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Import()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Import(asdl_alias_seq * names, int lineno, int col_offset, int\n                      end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_ImportFrom()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_ImportFrom(identifier module, asdl_alias_seq * names, int level,\n                          int lineno, int col_offset, int end_lineno, int\n                          end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Global()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Global(asdl_identifier_seq * names, int lineno, int col_offset,\n                      int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Nonlocal()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Nonlocal(asdl_identifier_seq * names, int lineno, int\n                        col_offset, int end_lineno, int end_col_offset, PyArena\n                        *arena)"
  },
  {
    "label": "_PyAST_Expr()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Expr(expr_ty value, int lineno, int col_offset, int end_lineno,\n                    int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Pass()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Pass(int lineno, int col_offset, int end_lineno, int\n                    end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Break()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Break(int lineno, int col_offset, int end_lineno, int\n                     end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Continue()",
    "kind": "Method",
    "detail": "Function (stmt_ty)",
    "insertText": "_PyAST_Continue(int lineno, int col_offset, int end_lineno, int\n                        end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_BoolOp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_BoolOp(boolop_ty op, asdl_expr_seq * values, int lineno, int\n                      col_offset, int end_lineno, int end_col_offset, PyArena\n                      *arena)"
  },
  {
    "label": "_PyAST_NamedExpr()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_NamedExpr(expr_ty target, expr_ty value, int lineno, int\n                         col_offset, int end_lineno, int end_col_offset,\n                         PyArena *arena)"
  },
  {
    "label": "_PyAST_BinOp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_BinOp(expr_ty left, operator_ty op, expr_ty right, int lineno,\n                     int col_offset, int end_lineno, int end_col_offset,\n                     PyArena *arena)"
  },
  {
    "label": "_PyAST_UnaryOp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_UnaryOp(unaryop_ty op, expr_ty operand, int lineno, int\n                       col_offset, int end_lineno, int end_col_offset, PyArena\n                       *arena)"
  },
  {
    "label": "_PyAST_Lambda()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Lambda(arguments_ty args, expr_ty body, int lineno, int\n                      col_offset, int end_lineno, int end_col_offset, PyArena\n                      *arena)"
  },
  {
    "label": "_PyAST_IfExp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_IfExp(expr_ty test, expr_ty body, expr_ty orelse, int lineno,\n                     int col_offset, int end_lineno, int end_col_offset,\n                     PyArena *arena)"
  },
  {
    "label": "_PyAST_Dict()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Dict(asdl_expr_seq * keys, asdl_expr_seq * values, int lineno,\n                    int col_offset, int end_lineno, int end_col_offset, PyArena\n                    *arena)"
  },
  {
    "label": "_PyAST_Set()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Set(asdl_expr_seq * elts, int lineno, int col_offset, int\n                   end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_ListComp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_ListComp(expr_ty elt, asdl_comprehension_seq * generators, int\n                        lineno, int col_offset, int end_lineno, int\n                        end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_SetComp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_SetComp(expr_ty elt, asdl_comprehension_seq * generators, int\n                       lineno, int col_offset, int end_lineno, int\n                       end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_DictComp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_DictComp(expr_ty key, expr_ty value, asdl_comprehension_seq *\n                        generators, int lineno, int col_offset, int end_lineno,\n                        int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_GeneratorExp()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_GeneratorExp(expr_ty elt, asdl_comprehension_seq * generators,\n                            int lineno, int col_offset, int end_lineno, int\n                            end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Await()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Await(expr_ty value, int lineno, int col_offset, int end_lineno,\n                     int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Yield()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Yield(expr_ty value, int lineno, int col_offset, int end_lineno,\n                     int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_YieldFrom()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_YieldFrom(expr_ty value, int lineno, int col_offset, int\n                         end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Compare()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Compare(expr_ty left, asdl_int_seq * ops, asdl_expr_seq *\n                       comparators, int lineno, int col_offset, int end_lineno,\n                       int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Call()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Call(expr_ty func, asdl_expr_seq * args, asdl_keyword_seq *\n                    keywords, int lineno, int col_offset, int end_lineno, int\n                    end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_FormattedValue()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_FormattedValue(expr_ty value, int conversion, expr_ty\n                              format_spec, int lineno, int col_offset, int\n                              end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_JoinedStr()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_JoinedStr(asdl_expr_seq * values, int lineno, int col_offset,\n                         int end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Constant()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Constant(constant value, string kind, int lineno, int\n                        col_offset, int end_lineno, int end_col_offset, PyArena\n                        *arena)"
  },
  {
    "label": "_PyAST_Attribute()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Attribute(expr_ty value, identifier attr, expr_context_ty ctx,\n                         int lineno, int col_offset, int end_lineno, int\n                         end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Subscript()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Subscript(expr_ty value, expr_ty slice, expr_context_ty ctx, int\n                         lineno, int col_offset, int end_lineno, int\n                         end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_Starred()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Starred(expr_ty value, expr_context_ty ctx, int lineno, int\n                       col_offset, int end_lineno, int end_col_offset, PyArena\n                       *arena)"
  },
  {
    "label": "_PyAST_Name()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Name(identifier id, expr_context_ty ctx, int lineno, int\n                    col_offset, int end_lineno, int end_col_offset, PyArena\n                    *arena)"
  },
  {
    "label": "_PyAST_List()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_List(asdl_expr_seq * elts, expr_context_ty ctx, int lineno, int\n                    col_offset, int end_lineno, int end_col_offset, PyArena\n                    *arena)"
  },
  {
    "label": "_PyAST_Tuple()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Tuple(asdl_expr_seq * elts, expr_context_ty ctx, int lineno, int\n                     col_offset, int end_lineno, int end_col_offset, PyArena\n                     *arena)"
  },
  {
    "label": "_PyAST_Slice()",
    "kind": "Method",
    "detail": "Function (expr_ty)",
    "insertText": "_PyAST_Slice(expr_ty lower, expr_ty upper, expr_ty step, int lineno,\n                     int col_offset, int end_lineno, int end_col_offset,\n                     PyArena *arena)"
  },
  {
    "label": "_PyAST_comprehension()",
    "kind": "Method",
    "detail": "Function (comprehension_ty)",
    "insertText": "_PyAST_comprehension(expr_ty target, expr_ty iter,\n                                      asdl_expr_seq * ifs, int is_async,\n                                      PyArena *arena)"
  },
  {
    "label": "_PyAST_ExceptHandler()",
    "kind": "Method",
    "detail": "Function (excepthandler_ty)",
    "insertText": "_PyAST_ExceptHandler(expr_ty type, identifier name,\n                                      asdl_stmt_seq * body, int lineno, int\n                                      col_offset, int end_lineno, int\n                                      end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_arguments()",
    "kind": "Method",
    "detail": "Function (arguments_ty)",
    "insertText": "_PyAST_arguments(asdl_arg_seq * posonlyargs, asdl_arg_seq * args,\n                              arg_ty vararg, asdl_arg_seq * kwonlyargs,\n                              asdl_expr_seq * kw_defaults, arg_ty kwarg,\n                              asdl_expr_seq * defaults, PyArena *arena)"
  },
  {
    "label": "_PyAST_arg()",
    "kind": "Method",
    "detail": "Function (arg_ty)",
    "insertText": "_PyAST_arg(identifier arg, expr_ty annotation, string type_comment, int\n                  lineno, int col_offset, int end_lineno, int end_col_offset,\n                  PyArena *arena)"
  },
  {
    "label": "_PyAST_keyword()",
    "kind": "Method",
    "detail": "Function (keyword_ty)",
    "insertText": "_PyAST_keyword(identifier arg, expr_ty value, int lineno, int\n                          col_offset, int end_lineno, int end_col_offset,\n                          PyArena *arena)"
  },
  {
    "label": "_PyAST_alias()",
    "kind": "Method",
    "detail": "Function (alias_ty)",
    "insertText": "_PyAST_alias(identifier name, identifier asname, int lineno, int\n                      col_offset, int end_lineno, int end_col_offset, PyArena\n                      *arena)"
  },
  {
    "label": "_PyAST_withitem()",
    "kind": "Method",
    "detail": "Function (withitem_ty)",
    "insertText": "_PyAST_withitem(expr_ty context_expr, expr_ty optional_vars,\n                            PyArena *arena)"
  },
  {
    "label": "_PyAST_match_case()",
    "kind": "Method",
    "detail": "Function (match_case_ty)",
    "insertText": "_PyAST_match_case(pattern_ty pattern, expr_ty guard,\n                                asdl_stmt_seq * body, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchValue()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchValue(expr_ty value, int lineno, int col_offset, int\n                             end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchSingleton()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchSingleton(constant value, int lineno, int col_offset,\n                                 int end_lineno, int end_col_offset, PyArena\n                                 *arena)"
  },
  {
    "label": "_PyAST_MatchSequence()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchSequence(asdl_pattern_seq * patterns, int lineno, int\n                                col_offset, int end_lineno, int end_col_offset,\n                                PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchMapping()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchMapping(asdl_expr_seq * keys, asdl_pattern_seq *\n                               patterns, identifier rest, int lineno, int\n                               col_offset, int end_lineno, int end_col_offset,\n                               PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchClass()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchClass(expr_ty cls, asdl_pattern_seq * patterns,\n                             asdl_identifier_seq * kwd_attrs, asdl_pattern_seq\n                             * kwd_patterns, int lineno, int col_offset, int\n                             end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchStar()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchStar(identifier name, int lineno, int col_offset, int\n                            end_lineno, int end_col_offset, PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchAs()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchAs(pattern_ty pattern, identifier name, int lineno, int\n                          col_offset, int end_lineno, int end_col_offset,\n                          PyArena *arena)"
  },
  {
    "label": "_PyAST_MatchOr()",
    "kind": "Method",
    "detail": "Function (pattern_ty)",
    "insertText": "_PyAST_MatchOr(asdl_pattern_seq * patterns, int lineno, int\n                          col_offset, int end_lineno, int end_col_offset,\n                          PyArena *arena)"
  },
  {
    "label": "_PyAST_TypeIgnore()",
    "kind": "Method",
    "detail": "Function (type_ignore_ty)",
    "insertText": "_PyAST_TypeIgnore(int lineno, string tag, PyArena *arena)"
  },
  {
    "label": "PyAST_obj2mod()",
    "kind": "Method",
    "detail": "Function (mod_ty)",
    "insertText": "PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode)"
  },
  {
    "label": "PyAST_Check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PyAST_Check(PyObject* obj)"
  },
  {
    "label": "_PyAST_Validate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyAST_Validate(mod_ty)"
  }
]