[
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "MakeFixedFlatSet()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_FIXED_FLAT_SET_H_ # define BASE_CONTAINERS_FIXED_FLAT_SET_H_ # include<array> # include<functional> # include<type_traits> # include \" base / check . h \" # include \" base / containers / flat_set . h \" # include \" base / containers / flat_tree . h \" namespace base { template<class Key,size_t N,class Compare = std::less<>> using fixed_flat_set = base::flat_set<Key,Compare,std::array<const Key,N>> ; template<class Key,size_t N,class Compare = std::less<>> fixed_flat_set<Key,N,Compare>)",
    "insertText": "MakeFixedFlatSet(std::common_type_t<Key>(&&data)[N], const Compare& comp = Compare())"
  },
  {
    "label": "InsertionSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertionSort(data, data + N, comp)"
  }
]