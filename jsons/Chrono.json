[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # ifdef CADKERNEL_DEV # include<chrono> # include<string> # include<utility> # endif namespace UE::CADKernel { enum class ETimeUnit : uint8 { NanoSeconds = 0,MicroSeconds = 1,MilliSeconds,Seconds } ; # ifdef CADKERNEL_DEV typedef std::chrono::high_resolution_clock::time_point FTimePoint ; typedef std::chrono::high_resolution_clock::duration FDuration ; # else typedef uint64 FTimePoint ; typedef uint64 FDuration ; # endif class FChrono { ETimeUnit DefaultUnit = ETimeUnit::NanoSeconds ; public : const FTimePoint)",
    "insertText": "Now()"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV return std::chrono::)",
    "insertText": "now()"
  },
  {
    "label": "Elapse()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } const FDuration)",
    "insertText": "Elapse(FTimePoint StartTime)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV)",
    "insertText": "return(std::chrono::high_resolution_clock::now() - StartTime)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } const FDuration)",
    "insertText": "Init()"
  },
  {
    "label": "FDuration()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV return)",
    "insertText": "FDuration()"
  },
  {
    "label": "ConvertInto()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } template<Unit> int64)",
    "insertText": "ConvertInto(FDuration Duration)"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV return std::chrono::duration_cast<)",
    "insertText": "Unit(Duration).count()"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } void)",
    "insertText": "PrintClockElapse(EVerboseLevel Level, const TCHAR* Indent, const TCHAR* Process, FDuration Duration, ETimeUnit Unit = ETimeUnit::MicroSeconds)"
  }
]