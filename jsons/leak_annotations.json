[
  {
    "label": "ScopedLeakSanitizerDisabler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedLeakSanitizerDisabler"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_DEBUG_LEAK_ANNOTATIONS_H_ # define BASE_DEBUG_LEAK_ANNOTATIONS_H_ # include \" build / build_config . h \" # if)",
    "insertText": "defined(LEAK_SANITIZER) && !BUILDFLAG(IS_NACL)"
  },
  {
    "label": "ScopedLeakSanitizerDisabler()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedLeakSanitizerDisabler()"
  },
  {
    "label": "__lsan_disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__lsan_disable()"
  },
  {
    "label": "ScopedLeakSanitizerDisabler()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedLeakSanitizerDisabler(const ScopedLeakSanitizerDisabler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedLeakSanitizerDisabler&)",
    "insertText": "operator(const ScopedLeakSanitizerDisabler&)"
  },
  {
    "label": "__lsan_enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__lsan_enable()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; # define ANNOTATE_SCOPED_MEMORY_LEAK \\ ScopedLeakSanitizerDisabler leak_sanitizer_disabler ; static_cast<)",
    "insertText": "void(0) #define ANNOTATE_LEAKING_OBJECT_PTR(X) __lsan_ignore_object(X)"
  }
]