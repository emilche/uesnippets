[
  {
    "label": "__vector4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__vector4"
  },
  {
    "label": "XMVECTORF32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORF32"
  },
  {
    "label": "XMVECTORI32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORI32"
  },
  {
    "label": "XMVECTORU8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORU8"
  },
  {
    "label": "XMVECTORU32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORU32"
  },
  {
    "label": "_XMMATRIX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMMATRIX"
  },
  {
    "label": "_XMFLOAT2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT2"
  },
  {
    "label": "XMFLOAT2A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT2A"
  },
  {
    "label": "_XMHALF2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHALF2"
  },
  {
    "label": "_XMSHORTN2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORTN2"
  },
  {
    "label": "_XMSHORT2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORT2"
  },
  {
    "label": "_XMUSHORTN2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORTN2"
  },
  {
    "label": "_XMUSHORT2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORT2"
  },
  {
    "label": "_XMFLOAT3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3"
  },
  {
    "label": "XMFLOAT3A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT3A"
  },
  {
    "label": "_XMHENDN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHENDN3"
  },
  {
    "label": "_XMHEND3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHEND3"
  },
  {
    "label": "_XMUHENDN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUHENDN3"
  },
  {
    "label": "_XMUHEND3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUHEND3"
  },
  {
    "label": "_XMDHENN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDHENN3"
  },
  {
    "label": "_XMDHEN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDHEN3"
  },
  {
    "label": "_XMUDHENN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDHENN3"
  },
  {
    "label": "_XMUDHEN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDHEN3"
  },
  {
    "label": "_XMU565",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMU565"
  },
  {
    "label": "_XMFLOAT3PK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3PK"
  },
  {
    "label": "_XMFLOAT3SE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3SE"
  },
  {
    "label": "_XMFLOAT4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT4"
  },
  {
    "label": "XMFLOAT4A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT4A"
  },
  {
    "label": "_XMHALF4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHALF4"
  },
  {
    "label": "_XMSHORTN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORTN4"
  },
  {
    "label": "_XMSHORT4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORT4"
  },
  {
    "label": "_XMUSHORTN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORTN4"
  },
  {
    "label": "_XMUSHORT4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORT4"
  },
  {
    "label": "_XMXDECN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXDECN4"
  },
  {
    "label": "_XMXDEC4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXDEC4"
  },
  {
    "label": "_XMDECN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDECN4"
  },
  {
    "label": "_XMDEC4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDEC4"
  },
  {
    "label": "_XMUDECN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDECN4"
  },
  {
    "label": "_XMUDEC4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDEC4"
  },
  {
    "label": "_XMXICON4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXICON4"
  },
  {
    "label": "_XMXICO4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXICO4"
  },
  {
    "label": "_XMICON4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMICON4"
  },
  {
    "label": "_XMICO4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMICO4"
  },
  {
    "label": "_XMUICON4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUICON4"
  },
  {
    "label": "_XMUICO4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUICO4"
  },
  {
    "label": "_XMCOLOR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMCOLOR"
  },
  {
    "label": "_XMBYTEN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMBYTEN4"
  },
  {
    "label": "_XMBYTE4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMBYTE4"
  },
  {
    "label": "_XMUBYTEN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUBYTEN4"
  },
  {
    "label": "_XMUBYTE4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUBYTE4"
  },
  {
    "label": "_XMUNIBBLE4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUNIBBLE4"
  },
  {
    "label": "_XMU555",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMU555"
  },
  {
    "label": "_XMFLOAT3X3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3X3"
  },
  {
    "label": "_XMFLOAT4X3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT4X3"
  },
  {
    "label": "XMFLOAT4X3A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT4X3A"
  },
  {
    "label": "_XMFLOAT4X4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT4X4"
  },
  {
    "label": "XMFLOAT4X4A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT4X4A"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && (_MSC_VER > 1000) #pragma once #endif #ifndef __XNAMATH_H__ #define __XNAMATH_H__ #ifdef __XBOXMATH_H__ #error XNAMATH and XBOXMATH are incompatible in the same compilation module. Use one or the other. #endif #define XNAMATH_VERSION 203 #if !defined(_XM_X64_) && !defined(_XM_X86_) #if defined(_M_AMD64) || defined(_AMD64_) #define _XM_X64_ #elif defined(_M_IX86) || defined(_X86_) #define _XM_X86_ #endif #endif #if !defined(_XM_BIGENDIAN_) && !defined(_XM_LITTLEENDIAN_) #if defined(_XM_X64_) || defined(_XM_X86_) #define _XM_LITTLEENDIAN_ #elif defined(_XBOX_VER) #define _XM_BIGENDIAN_ #else #error xnamath.h only supports x86, x64, or XBox 360 targets #endif #endif #if defined(_XM_X86_) || defined(_XM_X64_) #define _XM_SSE_INTRINSICS_ #if !defined(__cplusplus) && !defined(_XM_NO_INTRINSICS_) #error xnamath.h only supports C compliation for Xbox 360 targets and no intrinsics cases for x86/x64 #endif #elif defined(_XBOX_VER) #if !defined(__VMX128_SUPPORTED) && !defined(_XM_NO_INTRINSICS_) #error xnamath.h requires VMX128 compiler support for XBOX 360 #endif #define _XM_VMX128_INTRINSICS_ #else #error xnamath.h only supports x86, x64, or XBox 360 targets #endif #if defined(_XM_SSE_INTRINSICS_) #ifndef _XM_NO_INTRINSICS_ #include <xmmintrin.h> #include <emmintrin.h> #endif #elif defined(_XM_VMX128_INTRINSICS_) #error This version of xnamath.h is for Windows use only #endif #if defined(_XM_SSE_INTRINSICS_) #pragma warning(push) #pragma warning(disable:4985) #endif #include <math.h> #if defined(_XM_SSE_INTRINSICS_) #pragma warning(pop) #endif #include <sal.h> #if !defined(XMINLINE) #if !defined(XM_NO_MISALIGNED_VECTOR_ACCESS) #define XMINLINE __inline #else #define XMINLINE __forceinline #endif #endif #if !defined(XMFINLINE) #define XMFINLINE __forceinline #endif #if !defined(XMDEBUG) #if defined(_DEBUG) #define XMDEBUG #endif #endif #if !defined(XMASSERT) #if defined(_PREFAST_) #define XMASSERT(Expression) __analysis_assume((Expression)) #elif defined(XMDEBUG) #define XMASSERT(Expression) ((VOID)((Expression) || (XMAssert(#Expression, __FILE__, __LINE__), 0))) #else #define XMASSERT(Expression) ((VOID)0) #endif #endif #if !defined(XM_NO_ALIGNMENT) #define _DECLSPEC_ALIGN_16_ __declspec(align(16)) #else #define _DECLSPEC_ALIGN_16_ #endif #if defined(_MSC_VER) && (_MSC_VER<1500) && (_MSC_VER>=1400) #define _XM_ISVS2005_ #endif #define XM_PI 3.141592654f #define XM_2PI 6.283185307f #define XM_1DIVPI 0.318309886f #define XM_1DIV2PI 0.159154943f #define XM_PIDIV2 1.570796327f #define XM_PIDIV4 0.785398163f #define XM_SELECT_0 0x00000000 #define XM_SELECT_1 0xFFFFFFFF #define XM_PERMUTE_0X 0x00010203 #define XM_PERMUTE_0Y 0x04050607 #define XM_PERMUTE_0Z 0x08090A0B #define XM_PERMUTE_0W 0x0C0D0E0F #define XM_PERMUTE_1X 0x10111213 #define XM_PERMUTE_1Y 0x14151617 #define XM_PERMUTE_1Z 0x18191A1B #define XM_PERMUTE_1W 0x1C1D1E1F #define XM_CRMASK_CR6 0x000000F0 #define XM_CRMASK_CR6TRUE 0x00000080 #define XM_CRMASK_CR6FALSE 0x00000020 #define XM_CRMASK_CR6BOUNDS XM_CRMASK_CR6FALSE #define XM_CACHE_LINE_SIZE 64 XMFINLINE FLOAT XMConvertToRadians(FLOAT fDegrees)"
  },
  {
    "label": "XMConvertToDegrees()",
    "kind": "Method",
    "detail": "Function (} XMFINLINE FLOAT)",
    "insertText": "XMConvertToDegrees(FLOAT fRadians)"
  },
  {
    "label": "XMComparisonAllTrue()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "XMComparisonAllTrue(CR) (((CR) & XM_CRMASK_CR6TRUE) == XM_CRMASK_CR6TRUE) #define XMComparisonAnyTrue(CR) (((CR) & XM_CRMASK_CR6FALSE) != XM_CRMASK_CR6FALSE) #define XMComparisonAllFalse(CR) (((CR) & XM_CRMASK_CR6FALSE) == XM_CRMASK_CR6FALSE) #define XMComparisonAnyFalse(CR) (((CR) & XM_CRMASK_CR6TRUE) != XM_CRMASK_CR6TRUE) #define XMComparisonMixed(CR) (((CR) & XM_CRMASK_CR6) == 0) #define XMComparisonAllInBounds(CR) (((CR) & XM_CRMASK_CR6BOUNDS) == XM_CRMASK_CR6BOUNDS) #define XMComparisonAnyOutOfBounds(CR) (((CR) & XM_CRMASK_CR6BOUNDS) != XM_CRMASK_CR6BOUNDS) #define XMMin(a, b) (((a) < (b)) ? (a) : (b)) #define XMMax(a, b) (((a) > (b)) ? (a) : (b)) #pragma warning(push) #pragma warning(disable:4201 4365 4324) #if !defined (_XM_X86_) && !defined(_XM_X64_) #pragma bitfield_order(push) #pragma bitfield_order(lsb_to_msb) #endif #if defined(_XM_NO_INTRINSICS_) && !defined(_XBOX_VER)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (union { float vector4_f32 [ 4 ] ; unsigned int vector4_u32 [ 4 ] ; # ifndef XM_STRICT_VECTOR4 struct { FLOAT x ; FLOAT y ; FLOAT z ; FLOAT w ; } ; FLOAT v [ 4 ] ; UINT u [ 4 ] ; # endif } ; } __vector4 ; # endif #)",
    "insertText": "if(defined (_XM_X86_) || defined(_XM_X64_)) && defined(_XM_NO_INTRINSICS_)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# else typedef)",
    "insertText": "__declspec(align(16))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else typedef __vector4 XMVECTOR ; # endif typedef _DECLSPEC_ALIGN_16_ struct XMVECTORF32 { union { float f [ 4 ] ; XMVECTOR v ; } ; # if)",
    "insertText": "defined(__cplusplus) inline operator XMVECTOR()"
  },
  {
    "label": "__m128d()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "__m128d()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # endif } XMVECTORU32 ; # if)",
    "insertText": "defined(_XM_VMX128_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_XM_X86_) && !defined(_XM_NO_INTRINSICS_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else typedef const XMVECTOR CXMVECTOR ; # endif # if)",
    "insertText": "defined(__cplusplus) && !defined(XM_NO_OPERATOR_OVERLOADS) XMVECTOR operator+ (FXMVECTOR V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "operator(FXMVECTOR V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMVECTOR&)",
    "insertText": "operator(XMVECTOR& V1, FXMVECTOR V2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMVECTOR&)",
    "insertText": "operator(XMVECTOR& V, FLOAT S)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "operator(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "operator(FXMVECTOR V, FLOAT S)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "operator(FLOAT S, FXMVECTOR V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "if(defined(_XM_X86_) || defined(_XM_X64_)) && defined(_XM_NO_INTRINSICS_)"
  },
  {
    "label": "_XMMATRIX()",
    "kind": "Method",
    "detail": "Function (union { XMVECTOR r [ 4 ] ; struct { FLOAT _11,_12,_13,_14 ; FLOAT _21,_22,_23,_24 ; FLOAT _31,_32,_33,_34 ; FLOAT _41,_42,_43,_44 ; } ; FLOAT m [ 4 ] [ 4 ] ; } ; # ifdef __cplusplus)",
    "insertText": "_XMMATRIX()"
  },
  {
    "label": "_XMMATRIX()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMMATRIX(FXMVECTOR R0, FXMVECTOR R1, FXMVECTOR R2, CXMVECTOR R3)"
  },
  {
    "label": "_XMMATRIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMMATRIX(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m03, FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m13, FLOAT m20, FLOAT m21, FLOAT m22, FLOAT m23, FLOAT m30, FLOAT m31, FLOAT m32, FLOAT m33)"
  },
  {
    "label": "_XMMATRIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMMATRIX(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "operator() (UINT Row, UINT Column)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef XM_NO_OPERATOR_OVERLOADS _XMMATRIX&)",
    "insertText": "operator(CONST _XMMATRIX& M)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif } XMMATRIX ; # if)",
    "insertText": "defined(_XM_VMX128_INTRINSICS_)"
  },
  {
    "label": "_XMFLOAT2()",
    "kind": "Method",
    "detail": "Function (# else typedef const XMMATRIX CXMMATRIX ; # endif typedef USHORT HALF ; typedef struct _XMFLOAT2 { FLOAT x ; FLOAT y ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT2()"
  },
  {
    "label": "_XMFLOAT2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT2(FLOAT _x, FLOAT _y) : x(_x), y(_y)"
  },
  {
    "label": "_XMFLOAT2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT2(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMFLOAT2&)",
    "insertText": "operator(CONST _XMFLOAT2& Float2)"
  },
  {
    "label": "XMFLOAT2A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMFLOAT2A() : XMFLOAT2()"
  },
  {
    "label": "XMFLOAT2A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT2A(FLOAT _x, FLOAT _y) : XMFLOAT2(_x, _y)"
  },
  {
    "label": "XMFLOAT2A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT2A(CONST FLOAT *pArray) : XMFLOAT2(pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; XMFLOAT2A&)",
    "insertText": "operator(CONST XMFLOAT2A& Float2)"
  },
  {
    "label": "_XMHALF2()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct _XMHALF2 { HALF x ; HALF y ; # ifdef __cplusplus)",
    "insertText": "_XMHALF2()"
  },
  {
    "label": "_XMHALF2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHALF2(HALF _x, HALF _y) : x(_x), y(_y)"
  },
  {
    "label": "_XMHALF2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHALF2(CONST HALF *pArray)"
  },
  {
    "label": "_XMHALF2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMHALF2(FLOAT _x, FLOAT _y)"
  },
  {
    "label": "_XMHALF2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMHALF2(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMHALF2&)",
    "insertText": "operator(CONST _XMHALF2& Half2)"
  },
  {
    "label": "_XMSHORTN2()",
    "kind": "Method",
    "detail": "Function (# endif } XMHALF2 ; typedef struct _XMSHORTN2 { SHORT x ; SHORT y ; # ifdef __cplusplus)",
    "insertText": "_XMSHORTN2()"
  },
  {
    "label": "_XMSHORTN2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORTN2(SHORT _x, SHORT _y) : x(_x), y(_y)"
  },
  {
    "label": "_XMSHORTN2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORTN2(CONST SHORT *pArray)"
  },
  {
    "label": "_XMSHORTN2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORTN2(FLOAT _x, FLOAT _y)"
  },
  {
    "label": "_XMSHORTN2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORTN2(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMSHORTN2&)",
    "insertText": "operator(CONST _XMSHORTN2& ShortN2)"
  },
  {
    "label": "_XMSHORT2()",
    "kind": "Method",
    "detail": "Function (# endif } XMSHORTN2 ; typedef struct _XMSHORT2 { SHORT x ; SHORT y ; # ifdef __cplusplus)",
    "insertText": "_XMSHORT2()"
  },
  {
    "label": "_XMSHORT2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORT2(SHORT _x, SHORT _y) : x(_x), y(_y)"
  },
  {
    "label": "_XMSHORT2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORT2(CONST SHORT *pArray)"
  },
  {
    "label": "_XMSHORT2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORT2(FLOAT _x, FLOAT _y)"
  },
  {
    "label": "_XMSHORT2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORT2(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMSHORT2&)",
    "insertText": "operator(CONST _XMSHORT2& Short2)"
  },
  {
    "label": "_XMUSHORTN2()",
    "kind": "Method",
    "detail": "Function (# endif } XMSHORT2 ; typedef struct _XMUSHORTN2 { USHORT x ; USHORT y ; # ifdef __cplusplus)",
    "insertText": "_XMUSHORTN2()"
  },
  {
    "label": "_XMUSHORTN2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORTN2(USHORT _x, USHORT _y) : x(_x), y(_y)"
  },
  {
    "label": "_XMUSHORTN2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORTN2(CONST USHORT *pArray)"
  },
  {
    "label": "_XMUSHORTN2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORTN2(FLOAT _x, FLOAT _y)"
  },
  {
    "label": "_XMUSHORTN2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORTN2(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMUSHORTN2&)",
    "insertText": "operator(CONST _XMUSHORTN2& UShortN2)"
  },
  {
    "label": "_XMUSHORT2()",
    "kind": "Method",
    "detail": "Function (# endif } XMUSHORTN2 ; typedef struct _XMUSHORT2 { USHORT x ; USHORT y ; # ifdef __cplusplus)",
    "insertText": "_XMUSHORT2()"
  },
  {
    "label": "_XMUSHORT2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORT2(USHORT _x, USHORT _y) : x(_x), y(_y)"
  },
  {
    "label": "_XMUSHORT2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORT2(CONST USHORT *pArray)"
  },
  {
    "label": "_XMUSHORT2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORT2(FLOAT _x, FLOAT _y)"
  },
  {
    "label": "_XMUSHORT2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORT2(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMUSHORT2&)",
    "insertText": "operator(CONST _XMUSHORT2& UShort2)"
  },
  {
    "label": "_XMFLOAT3()",
    "kind": "Method",
    "detail": "Function (# endif } XMUSHORT2 ; typedef struct _XMFLOAT3 { FLOAT x ; FLOAT y ; FLOAT z ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT3()"
  },
  {
    "label": "_XMFLOAT3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT3(FLOAT _x, FLOAT _y, FLOAT _z) : x(_x), y(_y), z(_z)"
  },
  {
    "label": "_XMFLOAT3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT3(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMFLOAT3&)",
    "insertText": "operator(CONST _XMFLOAT3& Float3)"
  },
  {
    "label": "XMFLOAT3A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMFLOAT3A() : XMFLOAT3()"
  },
  {
    "label": "XMFLOAT3A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT3A(FLOAT _x, FLOAT _y, FLOAT _z) : XMFLOAT3(_x, _y, _z)"
  },
  {
    "label": "XMFLOAT3A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT3A(CONST FLOAT *pArray) : XMFLOAT3(pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; XMFLOAT3A&)",
    "insertText": "operator(CONST XMFLOAT3A& Float3)"
  },
  {
    "label": "_XMHENDN3()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct _XMHENDN3 { union { struct { INT x : 1 1 ; INT y : 1 1 ; INT z : 1 0 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMHENDN3()"
  },
  {
    "label": "_XMHENDN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHENDN3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMHENDN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHENDN3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMHENDN3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMHENDN3(CONST FLOAT *pArray)"
  },
  {
    "label": "UINT()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "UINT()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMHENDN3&)",
    "insertText": "operator(CONST UINT Packed)"
  },
  {
    "label": "_XMHEND3()",
    "kind": "Method",
    "detail": "Function (# endif } XMHENDN3 ; typedef struct _XMHEND3 { union { struct { INT x : 1 1 ; INT y : 1 1 ; INT z : 1 0 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMHEND3()"
  },
  {
    "label": "_XMHEND3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHEND3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMHEND3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHEND3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMHEND3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMHEND3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUHENDN3()",
    "kind": "Method",
    "detail": "Function (# endif } XMHEND3 ; typedef struct _XMUHENDN3 { union { struct { UINT x : 1 1 ; UINT y : 1 1 ; UINT z : 1 0 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUHENDN3()"
  },
  {
    "label": "_XMUHENDN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUHENDN3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUHENDN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUHENDN3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMUHENDN3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUHENDN3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUHEND3()",
    "kind": "Method",
    "detail": "Function (# endif } XMUHENDN3 ; typedef struct _XMUHEND3 { union { struct { UINT x : 1 1 ; UINT y : 1 1 ; UINT z : 1 0 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUHEND3()"
  },
  {
    "label": "_XMUHEND3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUHEND3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUHEND3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUHEND3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMUHEND3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUHEND3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMDHENN3()",
    "kind": "Method",
    "detail": "Function (# endif } XMUHEND3 ; typedef struct _XMDHENN3 { union { struct { INT x : 1 0 ; INT y : 1 1 ; INT z : 1 1 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMDHENN3()"
  },
  {
    "label": "_XMDHENN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDHENN3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMDHENN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDHENN3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMDHENN3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMDHENN3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMDHEN3()",
    "kind": "Method",
    "detail": "Function (# endif } XMDHENN3 ; typedef struct _XMDHEN3 { union { struct { INT x : 1 0 ; INT y : 1 1 ; INT z : 1 1 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMDHEN3()"
  },
  {
    "label": "_XMDHEN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDHEN3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMDHEN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDHEN3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMDHEN3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMDHEN3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUDHENN3()",
    "kind": "Method",
    "detail": "Function (# endif } XMDHEN3 ; typedef struct _XMUDHENN3 { union { struct { UINT x : 1 0 ; UINT y : 1 1 ; UINT z : 1 1 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUDHENN3()"
  },
  {
    "label": "_XMUDHENN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDHENN3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUDHENN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDHENN3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMUDHENN3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUDHENN3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUDHEN3()",
    "kind": "Method",
    "detail": "Function (# endif } XMUDHENN3 ; typedef struct _XMUDHEN3 { union { struct { UINT x : 1 0 ; UINT y : 1 1 ; UINT z : 1 1 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUDHEN3()"
  },
  {
    "label": "_XMUDHEN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDHEN3(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUDHEN3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDHEN3(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMUDHEN3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUDHEN3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMU565()",
    "kind": "Method",
    "detail": "Function (# endif } XMUDHEN3 ; typedef struct _XMU565 { union { struct { USHORT x : 5 ; USHORT y : 6 ; USHORT z : 5 ; } ; USHORT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMU565()"
  },
  {
    "label": "_XMU565()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMU565(USHORT Packed) : v(Packed)"
  },
  {
    "label": "_XMU565()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMU565(CHAR _x, CHAR _y, CHAR _z) : x(_x), y(_y), z(_z)"
  },
  {
    "label": "_XMU565()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMU565(CONST CHAR *pArray)"
  },
  {
    "label": "_XMU565()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMU565(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMU565()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMU565(CONST FLOAT *pArray)"
  },
  {
    "label": "USHORT()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "USHORT()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMU565&)",
    "insertText": "operator(CONST USHORT Packed)"
  },
  {
    "label": "_XMFLOAT3PK()",
    "kind": "Method",
    "detail": "Function (# endif } XMU565 ; typedef struct _XMFLOAT3PK { union { struct { UINT xm : 6 ; UINT xe : 5 ; UINT ym : 6 ; UINT ye : 5 ; UINT zm : 5 ; UINT ze : 5 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT3PK()"
  },
  {
    "label": "_XMFLOAT3PK()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT3PK(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMFLOAT3PK()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT3PK(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMFLOAT3PK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMFLOAT3PK(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMFLOAT3SE()",
    "kind": "Method",
    "detail": "Function (# endif } XMFLOAT3PK ; typedef struct _XMFLOAT3SE { union { struct { UINT xm : 9 ; UINT ym : 9 ; UINT zm : 9 ; UINT e : 5 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT3SE()"
  },
  {
    "label": "_XMFLOAT3SE()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT3SE(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMFLOAT3SE()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT3SE(FLOAT _x, FLOAT _y, FLOAT _z)"
  },
  {
    "label": "_XMFLOAT3SE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMFLOAT3SE(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMFLOAT4()",
    "kind": "Method",
    "detail": "Function (# endif } XMFLOAT3SE ; typedef struct _XMFLOAT4 { FLOAT x ; FLOAT y ; FLOAT z ; FLOAT w ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT4()"
  },
  {
    "label": "_XMFLOAT4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMFLOAT4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMFLOAT4&)",
    "insertText": "operator(CONST _XMFLOAT4& Float4)"
  },
  {
    "label": "XMFLOAT4A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMFLOAT4A() : XMFLOAT4()"
  },
  {
    "label": "XMFLOAT4A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT4A(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w) : XMFLOAT4(_x, _y, _z, _w)"
  },
  {
    "label": "XMFLOAT4A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT4A(CONST FLOAT *pArray) : XMFLOAT4(pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; XMFLOAT4A&)",
    "insertText": "operator(CONST XMFLOAT4A& Float4)"
  },
  {
    "label": "_XMHALF4()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct _XMHALF4 { HALF x ; HALF y ; HALF z ; HALF w ; # ifdef __cplusplus)",
    "insertText": "_XMHALF4()"
  },
  {
    "label": "_XMHALF4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHALF4(HALF _x, HALF _y, HALF _z, HALF _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMHALF4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMHALF4(CONST HALF *pArray)"
  },
  {
    "label": "_XMHALF4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMHALF4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMHALF4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMHALF4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMHALF4&)",
    "insertText": "operator(CONST _XMHALF4& Half4)"
  },
  {
    "label": "_XMSHORTN4()",
    "kind": "Method",
    "detail": "Function (# endif } XMHALF4 ; typedef struct _XMSHORTN4 { SHORT x ; SHORT y ; SHORT z ; SHORT w ; # ifdef __cplusplus)",
    "insertText": "_XMSHORTN4()"
  },
  {
    "label": "_XMSHORTN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORTN4(SHORT _x, SHORT _y, SHORT _z, SHORT _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMSHORTN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORTN4(CONST SHORT *pArray)"
  },
  {
    "label": "_XMSHORTN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORTN4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMSHORTN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORTN4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMSHORTN4&)",
    "insertText": "operator(CONST _XMSHORTN4& ShortN4)"
  },
  {
    "label": "_XMSHORT4()",
    "kind": "Method",
    "detail": "Function (# endif } XMSHORTN4 ; typedef struct _XMSHORT4 { SHORT x ; SHORT y ; SHORT z ; SHORT w ; # ifdef __cplusplus)",
    "insertText": "_XMSHORT4()"
  },
  {
    "label": "_XMSHORT4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORT4(SHORT _x, SHORT _y, SHORT _z, SHORT _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMSHORT4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMSHORT4(CONST SHORT *pArray)"
  },
  {
    "label": "_XMSHORT4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORT4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMSHORT4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMSHORT4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMSHORT4&)",
    "insertText": "operator(CONST _XMSHORT4& Short4)"
  },
  {
    "label": "_XMUSHORTN4()",
    "kind": "Method",
    "detail": "Function (# endif } XMSHORT4 ; typedef struct _XMUSHORTN4 { USHORT x ; USHORT y ; USHORT z ; USHORT w ; # ifdef __cplusplus)",
    "insertText": "_XMUSHORTN4()"
  },
  {
    "label": "_XMUSHORTN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORTN4(USHORT _x, USHORT _y, USHORT _z, USHORT _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMUSHORTN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORTN4(CONST USHORT *pArray)"
  },
  {
    "label": "_XMUSHORTN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORTN4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUSHORTN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORTN4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMUSHORTN4&)",
    "insertText": "operator(CONST _XMUSHORTN4& UShortN4)"
  },
  {
    "label": "_XMUSHORT4()",
    "kind": "Method",
    "detail": "Function (# endif } XMUSHORTN4 ; typedef struct _XMUSHORT4 { USHORT x ; USHORT y ; USHORT z ; USHORT w ; # ifdef __cplusplus)",
    "insertText": "_XMUSHORT4()"
  },
  {
    "label": "_XMUSHORT4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORT4(USHORT _x, USHORT _y, USHORT _z, USHORT _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMUSHORT4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUSHORT4(CONST USHORT *pArray)"
  },
  {
    "label": "_XMUSHORT4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORT4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUSHORT4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUSHORT4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMUSHORT4&)",
    "insertText": "operator(CONST _XMUSHORT4& UShort4)"
  },
  {
    "label": "_XMXDECN4()",
    "kind": "Method",
    "detail": "Function (# endif } XMUSHORT4 ; typedef struct _XMXDECN4 { union { struct { INT x : 1 0 ; INT y : 1 0 ; INT z : 1 0 ; UINT w : 2 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMXDECN4()"
  },
  {
    "label": "_XMXDECN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXDECN4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMXDECN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXDECN4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMXDECN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMXDECN4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMXDEC4()",
    "kind": "Method",
    "detail": "Function (# endif } XMXDECN4 ; typedef struct _XMXDEC4 { union { struct { INT x : 1 0 ; INT y : 1 0 ; INT z : 1 0 ; UINT w : 2 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMXDEC4()"
  },
  {
    "label": "_XMXDEC4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXDEC4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMXDEC4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXDEC4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMXDEC4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMXDEC4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMDECN4()",
    "kind": "Method",
    "detail": "Function (# endif } XMXDEC4 ; typedef struct _XMDECN4 { union { struct { INT x : 1 0 ; INT y : 1 0 ; INT z : 1 0 ; INT w : 2 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMDECN4()"
  },
  {
    "label": "_XMDECN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDECN4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMDECN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDECN4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMDECN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMDECN4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMDEC4()",
    "kind": "Method",
    "detail": "Function (# endif } XMDECN4 ; typedef struct _XMDEC4 { union { struct { INT x : 1 0 ; INT y : 1 0 ; INT z : 1 0 ; INT w : 2 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMDEC4()"
  },
  {
    "label": "_XMDEC4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDEC4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMDEC4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMDEC4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMDEC4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMDEC4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUDECN4()",
    "kind": "Method",
    "detail": "Function (# endif } XMDEC4 ; typedef struct _XMUDECN4 { union { struct { UINT x : 1 0 ; UINT y : 1 0 ; UINT z : 1 0 ; UINT w : 2 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUDECN4()"
  },
  {
    "label": "_XMUDECN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDECN4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUDECN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDECN4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUDECN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUDECN4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUDEC4()",
    "kind": "Method",
    "detail": "Function (# endif } XMUDECN4 ; typedef struct _XMUDEC4 { union { struct { UINT x : 1 0 ; UINT y : 1 0 ; UINT z : 1 0 ; UINT w : 2 ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUDEC4()"
  },
  {
    "label": "_XMUDEC4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDEC4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUDEC4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUDEC4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUDEC4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUDEC4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMXICON4()",
    "kind": "Method",
    "detail": "Function (# endif } XMUDEC4 ; typedef struct _XMXICON4 { union { struct { INT64 x : 2 0 ; INT64 y : 2 0 ; INT64 z : 2 0 ; UINT64 w : 4 ; } ; UINT64 v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMXICON4()"
  },
  {
    "label": "_XMXICON4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXICON4(UINT64 Packed) : v(Packed)"
  },
  {
    "label": "_XMXICON4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXICON4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMXICON4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMXICON4(CONST FLOAT *pArray)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "UINT64()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMXICON4&)",
    "insertText": "operator(CONST UINT64 Packed)"
  },
  {
    "label": "_XMXICO4()",
    "kind": "Method",
    "detail": "Function (# endif } XMXICON4 ; typedef struct _XMXICO4 { union { struct { INT64 x : 2 0 ; INT64 y : 2 0 ; INT64 z : 2 0 ; UINT64 w : 4 ; } ; UINT64 v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMXICO4()"
  },
  {
    "label": "_XMXICO4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXICO4(UINT64 Packed) : v(Packed)"
  },
  {
    "label": "_XMXICO4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMXICO4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMXICO4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMXICO4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMICON4()",
    "kind": "Method",
    "detail": "Function (# endif } XMXICO4 ; typedef struct _XMICON4 { union { struct { INT64 x : 2 0 ; INT64 y : 2 0 ; INT64 z : 2 0 ; INT64 w : 4 ; } ; UINT64 v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMICON4()"
  },
  {
    "label": "_XMICON4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMICON4(UINT64 Packed) : v(Packed)"
  },
  {
    "label": "_XMICON4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMICON4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMICON4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMICON4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMICO4()",
    "kind": "Method",
    "detail": "Function (# endif } XMICON4 ; typedef struct _XMICO4 { union { struct { INT64 x : 2 0 ; INT64 y : 2 0 ; INT64 z : 2 0 ; INT64 w : 4 ; } ; UINT64 v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMICO4()"
  },
  {
    "label": "_XMICO4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMICO4(UINT64 Packed) : v(Packed)"
  },
  {
    "label": "_XMICO4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMICO4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMICO4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMICO4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUICON4()",
    "kind": "Method",
    "detail": "Function (# endif } XMICO4 ; typedef struct _XMUICON4 { union { struct { UINT64 x : 2 0 ; UINT64 y : 2 0 ; UINT64 z : 2 0 ; UINT64 w : 4 ; } ; UINT64 v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUICON4()"
  },
  {
    "label": "_XMUICON4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUICON4(UINT64 Packed) : v(Packed)"
  },
  {
    "label": "_XMUICON4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUICON4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUICON4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUICON4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMUICO4()",
    "kind": "Method",
    "detail": "Function (# endif } XMUICON4 ; typedef struct _XMUICO4 { union { struct { UINT64 x : 2 0 ; UINT64 y : 2 0 ; UINT64 z : 2 0 ; UINT64 w : 4 ; } ; UINT64 v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUICO4()"
  },
  {
    "label": "_XMUICO4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUICO4(UINT64 Packed) : v(Packed)"
  },
  {
    "label": "_XMUICO4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUICO4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUICO4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUICO4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMCOLOR()",
    "kind": "Method",
    "detail": "Function (# endif } XMUICO4 ; typedef struct _XMCOLOR { union { struct { UINT b : 8 ; UINT g : 8 ; UINT r : 8 ; UINT a : 8 ; } ; UINT c ; } ; # ifdef __cplusplus)",
    "insertText": "_XMCOLOR()"
  },
  {
    "label": "_XMCOLOR()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMCOLOR(UINT Color) : c(Color)"
  },
  {
    "label": "_XMCOLOR()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMCOLOR(FLOAT _r, FLOAT _g, FLOAT _b, FLOAT _a)"
  },
  {
    "label": "_XMCOLOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMCOLOR(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMCOLOR&)",
    "insertText": "operator(CONST UINT Color)"
  },
  {
    "label": "_XMBYTEN4()",
    "kind": "Method",
    "detail": "Function (# endif } XMCOLOR ; typedef struct _XMBYTEN4 { union { struct { CHAR x ; CHAR y ; CHAR z ; CHAR w ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMBYTEN4()"
  },
  {
    "label": "_XMBYTEN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMBYTEN4(CHAR _x, CHAR _y, CHAR _z, CHAR _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMBYTEN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMBYTEN4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMBYTEN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMBYTEN4(CONST CHAR *pArray)"
  },
  {
    "label": "_XMBYTEN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMBYTEN4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMBYTEN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMBYTEN4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMBYTEN4&)",
    "insertText": "operator(CONST _XMBYTEN4& ByteN4)"
  },
  {
    "label": "_XMBYTE4()",
    "kind": "Method",
    "detail": "Function (# endif } XMBYTEN4 ; typedef struct _XMBYTE4 { union { struct { CHAR x ; CHAR y ; CHAR z ; CHAR w ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMBYTE4()"
  },
  {
    "label": "_XMBYTE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMBYTE4(CHAR _x, CHAR _y, CHAR _z, CHAR _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMBYTE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMBYTE4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMBYTE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMBYTE4(CONST CHAR *pArray)"
  },
  {
    "label": "_XMBYTE4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMBYTE4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMBYTE4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMBYTE4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMBYTE4&)",
    "insertText": "operator(CONST _XMBYTE4& Byte4)"
  },
  {
    "label": "_XMUBYTEN4()",
    "kind": "Method",
    "detail": "Function (# endif } XMBYTE4 ; typedef struct _XMUBYTEN4 { union { struct { BYTE x ; BYTE y ; BYTE z ; BYTE w ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUBYTEN4()"
  },
  {
    "label": "_XMUBYTEN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUBYTEN4(BYTE _x, BYTE _y, BYTE _z, BYTE _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMUBYTEN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUBYTEN4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUBYTEN4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUBYTEN4(CONST BYTE *pArray)"
  },
  {
    "label": "_XMUBYTEN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUBYTEN4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUBYTEN4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUBYTEN4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMUBYTEN4&)",
    "insertText": "operator(CONST _XMUBYTEN4& UByteN4)"
  },
  {
    "label": "_XMUBYTE4()",
    "kind": "Method",
    "detail": "Function (# endif } XMUBYTEN4 ; typedef struct _XMUBYTE4 { union { struct { BYTE x ; BYTE y ; BYTE z ; BYTE w ; } ; UINT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUBYTE4()"
  },
  {
    "label": "_XMUBYTE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUBYTE4(BYTE _x, BYTE _y, BYTE _z, BYTE _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMUBYTE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUBYTE4(UINT Packed) : v(Packed)"
  },
  {
    "label": "_XMUBYTE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUBYTE4(CONST BYTE *pArray)"
  },
  {
    "label": "_XMUBYTE4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUBYTE4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUBYTE4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUBYTE4(CONST FLOAT *pArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_XMUBYTE4&)",
    "insertText": "operator(CONST _XMUBYTE4& UByte4)"
  },
  {
    "label": "_XMUNIBBLE4()",
    "kind": "Method",
    "detail": "Function (# endif } XMUBYTE4 ; typedef struct _XMUNIBBLE4 { union { struct { USHORT x : 4 ; USHORT y : 4 ; USHORT z : 4 ; USHORT w : 4 ; } ; USHORT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMUNIBBLE4()"
  },
  {
    "label": "_XMUNIBBLE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUNIBBLE4(USHORT Packed) : v(Packed)"
  },
  {
    "label": "_XMUNIBBLE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUNIBBLE4(CHAR _x, CHAR _y, CHAR _z, CHAR _w) : x(_x), y(_y), z(_z), w(_w)"
  },
  {
    "label": "_XMUNIBBLE4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMUNIBBLE4(CONST CHAR *pArray)"
  },
  {
    "label": "_XMUNIBBLE4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUNIBBLE4(FLOAT _x, FLOAT _y, FLOAT _z, FLOAT _w)"
  },
  {
    "label": "_XMUNIBBLE4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMUNIBBLE4(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMU555()",
    "kind": "Method",
    "detail": "Function (# endif } XMUNIBBLE4 ; typedef struct _XMU555 { union { struct { USHORT x : 5 ; USHORT y : 5 ; USHORT z : 5 ; USHORT w : 1 ; } ; USHORT v ; } ; # ifdef __cplusplus)",
    "insertText": "_XMU555()"
  },
  {
    "label": "_XMU555()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMU555(USHORT Packed) : v(Packed)"
  },
  {
    "label": "_XMU555()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMU555(CHAR _x, CHAR _y, CHAR _z, BOOL _w) : x(_x), y(_y), z(_z), w(_w ? 0x1 : 0)"
  },
  {
    "label": "_XMU555()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMU555(CONST CHAR *pArray, BOOL _w)"
  },
  {
    "label": "_XMU555()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMU555(FLOAT _x, FLOAT _y, FLOAT _z, BOOL _w)"
  },
  {
    "label": "_XMU555()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMU555(CONST FLOAT *pArray, BOOL _w)"
  },
  {
    "label": "_XMFLOAT3X3()",
    "kind": "Method",
    "detail": "Function (# endif } XMU555 ; typedef struct _XMFLOAT3X3 { union { struct { FLOAT _11,_12,_13 ; FLOAT _21,_22,_23 ; FLOAT _31,_32,_33 ; } ; FLOAT m [ 3 ] [ 3 ] ; } ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT3X3()"
  },
  {
    "label": "_XMFLOAT3X3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT3X3(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m20, FLOAT m21, FLOAT m22)"
  },
  {
    "label": "_XMFLOAT3X3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMFLOAT3X3(CONST FLOAT *pArray)"
  },
  {
    "label": "_XMFLOAT4X3()",
    "kind": "Method",
    "detail": "Function (# endif } XMFLOAT3X3 ; typedef struct _XMFLOAT4X3 { union { struct { FLOAT _11,_12,_13 ; FLOAT _21,_22,_23 ; FLOAT _31,_32,_33 ; FLOAT _41,_42,_43 ; } ; FLOAT m [ 4 ] [ 3 ] ; } ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT4X3()"
  },
  {
    "label": "_XMFLOAT4X3()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT4X3(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m20, FLOAT m21, FLOAT m22, FLOAT m30, FLOAT m31, FLOAT m32)"
  },
  {
    "label": "_XMFLOAT4X3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMFLOAT4X3(CONST FLOAT *pArray)"
  },
  {
    "label": "XMFLOAT4X3A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMFLOAT4X3A() : XMFLOAT4X3()"
  },
  {
    "label": "XMFLOAT4X3A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT4X3A(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m20, FLOAT m21, FLOAT m22, FLOAT m30, FLOAT m31, FLOAT m32) : XMFLOAT4X3(m00,m01,m02,m10,m11,m12,m20,m21,m22,m30,m31,m32)"
  },
  {
    "label": "XMFLOAT4X3A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT4X3A(CONST FLOAT *pArray) : XMFLOAT4X3(pArray)"
  },
  {
    "label": "_XMFLOAT4X4()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct _XMFLOAT4X4 { union { struct { FLOAT _11,_12,_13,_14 ; FLOAT _21,_22,_23,_24 ; FLOAT _31,_32,_33,_34 ; FLOAT _41,_42,_43,_44 ; } ; FLOAT m [ 4 ] [ 4 ] ; } ; # ifdef __cplusplus)",
    "insertText": "_XMFLOAT4X4()"
  },
  {
    "label": "_XMFLOAT4X4()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "_XMFLOAT4X4(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m03, FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m13, FLOAT m20, FLOAT m21, FLOAT m22, FLOAT m23, FLOAT m30, FLOAT m31, FLOAT m32, FLOAT m33)"
  },
  {
    "label": "_XMFLOAT4X4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_XMFLOAT4X4(CONST FLOAT *pArray)"
  },
  {
    "label": "XMFLOAT4X4A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMFLOAT4X4A() : XMFLOAT4X4()"
  },
  {
    "label": "XMFLOAT4X4A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT4X4A(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m03, FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m13, FLOAT m20, FLOAT m21, FLOAT m22, FLOAT m23, FLOAT m30, FLOAT m31, FLOAT m32, FLOAT m33) : XMFLOAT4X4(m00,m01,m02,m03,m10,m11,m12,m13,m20,m21,m22,m23,m30,m31,m32,m33)"
  },
  {
    "label": "XMFLOAT4X4A()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "XMFLOAT4X4A(CONST FLOAT *pArray) : XMFLOAT4X4(pArray)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if !)",
    "insertText": "defined(_XM_X86_) && !defined(_XM_X64_) #pragma bitfield_order(pop) #endif #pragma warning(pop) #if !defined(_XM_NO_INTRINSICS_) && defined(_XM_VMX128_INTRINSICS_) #else XMVECTOR XMConvertVectorIntToFloat(FXMVECTOR VInt, UINT DivExponent)"
  },
  {
    "label": "XMConvertVectorFloatToInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMConvertVectorFloatToInt(FXMVECTOR VFloat, UINT MulExponent)"
  },
  {
    "label": "XMConvertVectorUIntToFloat()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMConvertVectorUIntToFloat(FXMVECTOR VUInt, UINT DivExponent)"
  },
  {
    "label": "XMConvertVectorFloatToUInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMConvertVectorFloatToUInt(FXMVECTOR VFloat, UINT MulExponent)"
  },
  {
    "label": "XMConvertHalfToFloat()",
    "kind": "Method",
    "detail": "Function (# endif FLOAT)",
    "insertText": "XMConvertHalfToFloat(HALF Value)"
  },
  {
    "label": "XMConvertHalfToFloatStream()",
    "kind": "Method",
    "detail": "Function (FLOAT*)",
    "insertText": "XMConvertHalfToFloatStream(_Out_bytecap_x_(sizeof(FLOAT)+OutputStride*(HalfCount-1)) FLOAT* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(HALF)+InputStride*(HalfCount-1)) CONST HALF* pInputStream, _In_ UINT InputStride, _In_ UINT HalfCount)"
  },
  {
    "label": "XMConvertFloatToHalf()",
    "kind": "Method",
    "detail": "Function (HALF)",
    "insertText": "XMConvertFloatToHalf(FLOAT Value)"
  },
  {
    "label": "XMConvertFloatToHalfStream()",
    "kind": "Method",
    "detail": "Function (HALF*)",
    "insertText": "XMConvertFloatToHalfStream(_Out_bytecap_x_(sizeof(HALF)+OutputStride*(FloatCount-1)) HALF* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(FLOAT)+InputStride*(FloatCount-1)) CONST FLOAT* pInputStream, _In_ UINT InputStride, _In_ UINT FloatCount)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_XM_NO_INTRINSICS_) && defined(_XM_VMX128_INTRINSICS_) #else XMVECTOR XMVectorSetBinaryConstant(UINT C0, UINT C1, UINT C2, UINT C3)"
  },
  {
    "label": "XMVectorSplatConstant()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatConstant(INT IntConstant, UINT DivExponent)"
  },
  {
    "label": "XMVectorSplatConstantInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatConstantInt(INT IntConstant)"
  },
  {
    "label": "XMLoadInt()",
    "kind": "Method",
    "detail": "Function (# endif XMVECTOR)",
    "insertText": "XMLoadInt(_In_ CONST UINT* pSource)"
  },
  {
    "label": "XMLoadFloat()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat(_In_ CONST FLOAT* pSource)"
  },
  {
    "label": "XMLoadInt2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadInt2(_In_count_c_(2) CONST UINT* pSource)"
  },
  {
    "label": "XMLoadInt2A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadInt2A(_In_count_c_(2) CONST UINT* PSource)"
  },
  {
    "label": "XMLoadFloat2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat2(_In_ CONST XMFLOAT2* pSource)"
  },
  {
    "label": "XMLoadFloat2A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat2A(_In_ CONST XMFLOAT2A* pSource)"
  },
  {
    "label": "XMLoadHalf2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHalf2(_In_ CONST XMHALF2* pSource)"
  },
  {
    "label": "XMLoadShortN2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShortN2(_In_ CONST XMSHORTN2* pSource)"
  },
  {
    "label": "XMLoadShort2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShort2(_In_ CONST XMSHORT2* pSource)"
  },
  {
    "label": "XMLoadUShortN2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShortN2(_In_ CONST XMUSHORTN2* pSource)"
  },
  {
    "label": "XMLoadUShort2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShort2(_In_ CONST XMUSHORT2* pSource)"
  },
  {
    "label": "XMLoadInt3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadInt3(_In_count_c_(3) CONST UINT* pSource)"
  },
  {
    "label": "XMLoadInt3A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadInt3A(_In_count_c_(3) CONST UINT* pSource)"
  },
  {
    "label": "XMLoadFloat3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3(_In_ CONST XMFLOAT3* pSource)"
  },
  {
    "label": "XMLoadFloat3A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3A(_In_ CONST XMFLOAT3A* pSource)"
  },
  {
    "label": "XMLoadHenDN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHenDN3(_In_ CONST XMHENDN3* pSource)"
  },
  {
    "label": "XMLoadHenD3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHenD3(_In_ CONST XMHEND3* pSource)"
  },
  {
    "label": "XMLoadUHenDN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUHenDN3(_In_ CONST XMUHENDN3* pSource)"
  },
  {
    "label": "XMLoadUHenD3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUHenD3(_In_ CONST XMUHEND3* pSource)"
  },
  {
    "label": "XMLoadDHenN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDHenN3(_In_ CONST XMDHENN3* pSource)"
  },
  {
    "label": "XMLoadDHen3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDHen3(_In_ CONST XMDHEN3* pSource)"
  },
  {
    "label": "XMLoadUDHenN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDHenN3(_In_ CONST XMUDHENN3* pSource)"
  },
  {
    "label": "XMLoadUDHen3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDHen3(_In_ CONST XMUDHEN3* pSource)"
  },
  {
    "label": "XMLoadU565()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadU565(_In_ CONST XMU565* pSource)"
  },
  {
    "label": "XMLoadFloat3PK()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3PK(_In_ CONST XMFLOAT3PK* pSource)"
  },
  {
    "label": "XMLoadFloat3SE()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3SE(_In_ CONST XMFLOAT3SE* pSource)"
  },
  {
    "label": "XMLoadInt4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadInt4(_In_count_c_(4) CONST UINT* pSource)"
  },
  {
    "label": "XMLoadInt4A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadInt4A(_In_count_c_(4) CONST UINT* pSource)"
  },
  {
    "label": "XMLoadFloat4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat4(_In_ CONST XMFLOAT4* pSource)"
  },
  {
    "label": "XMLoadFloat4A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat4A(_In_ CONST XMFLOAT4A* pSource)"
  },
  {
    "label": "XMLoadHalf4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHalf4(_In_ CONST XMHALF4* pSource)"
  },
  {
    "label": "XMLoadShortN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShortN4(_In_ CONST XMSHORTN4* pSource)"
  },
  {
    "label": "XMLoadShort4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShort4(_In_ CONST XMSHORT4* pSource)"
  },
  {
    "label": "XMLoadUShortN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShortN4(_In_ CONST XMUSHORTN4* pSource)"
  },
  {
    "label": "XMLoadUShort4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShort4(_In_ CONST XMUSHORT4* pSource)"
  },
  {
    "label": "XMLoadXIcoN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXIcoN4(_In_ CONST XMXICON4* pSource)"
  },
  {
    "label": "XMLoadXIco4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXIco4(_In_ CONST XMXICO4* pSource)"
  },
  {
    "label": "XMLoadIcoN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadIcoN4(_In_ CONST XMICON4* pSource)"
  },
  {
    "label": "XMLoadIco4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadIco4(_In_ CONST XMICO4* pSource)"
  },
  {
    "label": "XMLoadUIcoN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUIcoN4(_In_ CONST XMUICON4* pSource)"
  },
  {
    "label": "XMLoadUIco4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUIco4(_In_ CONST XMUICO4* pSource)"
  },
  {
    "label": "XMLoadXDecN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXDecN4(_In_ CONST XMXDECN4* pSource)"
  },
  {
    "label": "XMLoadXDec4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXDec4(_In_ CONST XMXDEC4* pSource)"
  },
  {
    "label": "XMLoadDecN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDecN4(_In_ CONST XMDECN4* pSource)"
  },
  {
    "label": "XMLoadDec4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDec4(_In_ CONST XMDEC4* pSource)"
  },
  {
    "label": "XMLoadUDecN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDecN4(_In_ CONST XMUDECN4* pSource)"
  },
  {
    "label": "XMLoadUDec4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDec4(_In_ CONST XMUDEC4* pSource)"
  },
  {
    "label": "XMLoadByteN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadByteN4(_In_ CONST XMBYTEN4* pSource)"
  },
  {
    "label": "XMLoadByte4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadByte4(_In_ CONST XMBYTE4* pSource)"
  },
  {
    "label": "XMLoadUByteN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUByteN4(_In_ CONST XMUBYTEN4* pSource)"
  },
  {
    "label": "XMLoadUByte4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUByte4(_In_ CONST XMUBYTE4* pSource)"
  },
  {
    "label": "XMLoadUNibble4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUNibble4(_In_ CONST XMUNIBBLE4* pSource)"
  },
  {
    "label": "XMLoadU555()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadU555(_In_ CONST XMU555* pSource)"
  },
  {
    "label": "XMLoadColor()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadColor(_In_ CONST XMCOLOR* pSource)"
  },
  {
    "label": "XMLoadFloat3x3()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat3x3(_In_ CONST XMFLOAT3X3* pSource)"
  },
  {
    "label": "XMLoadFloat4x3()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x3(_In_ CONST XMFLOAT4X3* pSource)"
  },
  {
    "label": "XMLoadFloat4x3A()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x3A(_In_ CONST XMFLOAT4X3A* pSource)"
  },
  {
    "label": "XMLoadFloat4x4()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x4(_In_ CONST XMFLOAT4X4* pSource)"
  },
  {
    "label": "XMLoadFloat4x4A()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x4A(_In_ CONST XMFLOAT4X4A* pSource)"
  },
  {
    "label": "XMStoreInt()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt(_Out_ UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat(_Out_ FLOAT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt2(_Out_cap_c_(2) UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt2A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt2A(_Out_cap_c_(2) UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat2(_Out_ XMFLOAT2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat2A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat2A(_Out_ XMFLOAT2A* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHalf2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHalf2(_Out_ XMHALF2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShortN2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShortN2(_Out_ XMSHORTN2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShort2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShort2(_Out_ XMSHORT2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShortN2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShortN2(_Out_ XMUSHORTN2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShort2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShort2(_Out_ XMUSHORT2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt3(_Out_cap_c_(3) UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt3A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt3A(_Out_cap_c_(3) UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3(_Out_ XMFLOAT3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3A(_Out_ XMFLOAT3A* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHenDN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHenDN3(_Out_ XMHENDN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHenD3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHenD3(_Out_ XMHEND3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUHenDN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUHenDN3(_Out_ XMUHENDN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUHenD3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUHenD3(_Out_ XMUHEND3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDHenN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDHenN3(_Out_ XMDHENN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDHen3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDHen3(_Out_ XMDHEN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDHenN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDHenN3(_Out_ XMUDHENN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDHen3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDHen3(_Out_ XMUDHEN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreU565()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreU565(_Out_ XMU565* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3PK()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3PK(_Out_ XMFLOAT3PK* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3SE()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3SE(_Out_ XMFLOAT3SE* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt4(_Out_cap_c_(4) UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt4A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt4A(_Out_cap_c_(4) UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt4NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt4NC(_Out_ UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4(_Out_ XMFLOAT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat4A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4A(_Out_ XMFLOAT4A* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat4NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4NC(_Out_ XMFLOAT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHalf4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHalf4(_Out_ XMHALF4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShortN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShortN4(_Out_ XMSHORTN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShort4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShort4(_Out_ XMSHORT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShortN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShortN4(_Out_ XMUSHORTN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShort4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShort4(_Out_ XMUSHORT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXIcoN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXIcoN4(_Out_ XMXICON4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXIco4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXIco4(_Out_ XMXICO4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreIcoN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreIcoN4(_Out_ XMICON4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreIco4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreIco4(_Out_ XMICO4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUIcoN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUIcoN4(_Out_ XMUICON4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUIco4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUIco4(_Out_ XMUICO4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXDecN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXDecN4(_Out_ XMXDECN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXDec4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXDec4(_Out_ XMXDEC4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDecN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDecN4(_Out_ XMDECN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDec4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDec4(_Out_ XMDEC4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDecN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDecN4(_Out_ XMUDECN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDec4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDec4(_Out_ XMUDEC4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreByteN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreByteN4(_Out_ XMBYTEN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreByte4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreByte4(_Out_ XMBYTE4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUByteN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUByteN4(_Out_ XMUBYTEN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUByte4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUByte4(_Out_ XMUBYTE4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUNibble4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUNibble4(_Out_ XMUNIBBLE4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreU555()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreU555(_Out_ XMU555* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreColor()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreColor(_Out_ XMCOLOR* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3x3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3x3(_Out_ XMFLOAT3X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat3x3NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3x3NC(_Out_ XMFLOAT3X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x3(_Out_ XMFLOAT4X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x3A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x3A(_Out_ XMFLOAT4X3A* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x3NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x3NC(_Out_ XMFLOAT4X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x4(_Out_ XMFLOAT4X4* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x4A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x4A(_Out_ XMFLOAT4X4A* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x4NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x4NC(_Out_ XMFLOAT4X4* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMVectorZero()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorZero()"
  },
  {
    "label": "XMVectorSet()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSet(FLOAT x, FLOAT y, FLOAT z, FLOAT w)"
  },
  {
    "label": "XMVectorSetInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetInt(UINT x, UINT y, UINT z, UINT w)"
  },
  {
    "label": "XMVectorReplicate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicate(FLOAT Value)"
  },
  {
    "label": "XMVectorReplicatePtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicatePtr(_In_ CONST FLOAT *pValue)"
  },
  {
    "label": "XMVectorReplicateInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicateInt(UINT Value)"
  },
  {
    "label": "XMVectorReplicateIntPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicateIntPtr(_In_ CONST UINT *pValue)"
  },
  {
    "label": "XMVectorTrueInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTrueInt()"
  },
  {
    "label": "XMVectorFalseInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorFalseInt()"
  },
  {
    "label": "XMVectorSplatX()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatX(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatY(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatZ()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatZ(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatW(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatOne()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatOne()"
  },
  {
    "label": "XMVectorSplatInfinity()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatInfinity()"
  },
  {
    "label": "XMVectorSplatQNaN()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatQNaN()"
  },
  {
    "label": "XMVectorSplatEpsilon()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatEpsilon()"
  },
  {
    "label": "XMVectorSplatSignMask()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatSignMask()"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetByIndex(FXMVECTOR V,UINT i)"
  },
  {
    "label": "XMVectorGetX()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetX(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetY()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetY(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetZ()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetZ(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetW()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetW(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetByIndexPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetByIndexPtr(_Out_ FLOAT *f, FXMVECTOR V, UINT i)"
  },
  {
    "label": "XMVectorGetXPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetXPtr(_Out_ FLOAT *x, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetYPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetYPtr(_Out_ FLOAT *y, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetZPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetZPtr(_Out_ FLOAT *z, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetWPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetWPtr(_Out_ FLOAT *w, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntByIndex()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntByIndex(FXMVECTOR V,UINT i)"
  },
  {
    "label": "XMVectorGetIntX()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntX(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntY()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntY(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntZ()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntZ(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntW()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntW(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntByIndexPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntByIndexPtr(_Out_ UINT *x,FXMVECTOR V, UINT i)"
  },
  {
    "label": "XMVectorGetIntXPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntXPtr(_Out_ UINT *x, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntYPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntYPtr(_Out_ UINT *y, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntZPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntZPtr(_Out_ UINT *z, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntWPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntWPtr(_Out_ UINT *w, FXMVECTOR V)"
  },
  {
    "label": "XMVectorSetByIndex()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetByIndex(FXMVECTOR V,FLOAT f,UINT i)"
  },
  {
    "label": "XMVectorSetX()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetX(FXMVECTOR V, FLOAT x)"
  },
  {
    "label": "XMVectorSetY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetY(FXMVECTOR V, FLOAT y)"
  },
  {
    "label": "XMVectorSetZ()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetZ(FXMVECTOR V, FLOAT z)"
  },
  {
    "label": "XMVectorSetW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetW(FXMVECTOR V, FLOAT w)"
  },
  {
    "label": "XMVectorSetByIndexPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetByIndexPtr(FXMVECTOR V, _In_ CONST FLOAT *f, UINT i)"
  },
  {
    "label": "XMVectorSetXPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetXPtr(FXMVECTOR V, _In_ CONST FLOAT *x)"
  },
  {
    "label": "XMVectorSetYPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetYPtr(FXMVECTOR V, _In_ CONST FLOAT *y)"
  },
  {
    "label": "XMVectorSetZPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetZPtr(FXMVECTOR V, _In_ CONST FLOAT *z)"
  },
  {
    "label": "XMVectorSetWPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetWPtr(FXMVECTOR V, _In_ CONST FLOAT *w)"
  },
  {
    "label": "XMVectorSetIntByIndex()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntByIndex(FXMVECTOR V, UINT x,UINT i)"
  },
  {
    "label": "XMVectorSetIntX()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntX(FXMVECTOR V, UINT x)"
  },
  {
    "label": "XMVectorSetIntY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntY(FXMVECTOR V, UINT y)"
  },
  {
    "label": "XMVectorSetIntZ()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntZ(FXMVECTOR V, UINT z)"
  },
  {
    "label": "XMVectorSetIntW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntW(FXMVECTOR V, UINT w)"
  },
  {
    "label": "XMVectorSetIntByIndexPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntByIndexPtr(FXMVECTOR V, _In_ CONST UINT *x, UINT i)"
  },
  {
    "label": "XMVectorSetIntXPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntXPtr(FXMVECTOR V, _In_ CONST UINT *x)"
  },
  {
    "label": "XMVectorSetIntYPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntYPtr(FXMVECTOR V, _In_ CONST UINT *y)"
  },
  {
    "label": "XMVectorSetIntZPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntZPtr(FXMVECTOR V, _In_ CONST UINT *z)"
  },
  {
    "label": "XMVectorSetIntWPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntWPtr(FXMVECTOR V, _In_ CONST UINT *w)"
  },
  {
    "label": "XMVectorPermuteControl()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPermuteControl(UINT ElementIndex0, UINT ElementIndex1, UINT ElementIndex2, UINT ElementIndex3)"
  },
  {
    "label": "XMVectorPermute()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPermute(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Control)"
  },
  {
    "label": "XMVectorSelectControl()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSelectControl(UINT VectorIndex0, UINT VectorIndex1, UINT VectorIndex2, UINT VectorIndex3)"
  },
  {
    "label": "XMVectorSelect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSelect(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Control)"
  },
  {
    "label": "XMVectorMergeXY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMergeXY(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMergeZW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMergeZW(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_XM_NO_INTRINSICS_) && defined(_XM_VMX128_INTRINSICS_) #else XMVECTOR XMVectorShiftLeft(FXMVECTOR V1, FXMVECTOR V2, UINT Elements)"
  },
  {
    "label": "XMVectorRotateLeft()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorRotateLeft(FXMVECTOR V, UINT Elements)"
  },
  {
    "label": "XMVectorRotateRight()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorRotateRight(FXMVECTOR V, UINT Elements)"
  },
  {
    "label": "XMVectorSwizzle()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSwizzle(FXMVECTOR V, UINT E0, UINT E1, UINT E2, UINT E3)"
  },
  {
    "label": "XMVectorInsert()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorInsert(FXMVECTOR VD, FXMVECTOR VS, UINT VSLeftRotateElements, UINT Select0, UINT Select1, UINT Select2, UINT Select3)"
  },
  {
    "label": "XMVectorEqual()",
    "kind": "Method",
    "detail": "Function (# endif XMVECTOR)",
    "insertText": "XMVectorEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorEqualR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorEqualR(_Out_ UINT* pCR, FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorEqualInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorEqualIntR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorEqualIntR(_Out_ UINT* pCR, FXMVECTOR V, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNearEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVectorNotEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNotEqualInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreater()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreaterR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreaterR(_Out_ UINT* pCR, FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreaterOrEqualR(_Out_ UINT* pCR, FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorLess()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLess(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorLessOrEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorInBounds()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorInBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVectorInBoundsR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorInBoundsR(_Out_ UINT* pCR, FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVectorIsNaN()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorIsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVectorIsInfinite()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorIsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVectorMin()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMin(FXMVECTOR V1,FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMax()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMax(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorRound()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorRound(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTruncate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTruncate(FXMVECTOR V)"
  },
  {
    "label": "XMVectorFloor()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorFloor(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCeiling()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCeiling(FXMVECTOR V)"
  },
  {
    "label": "XMVectorClamp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorClamp(FXMVECTOR V, FXMVECTOR Min, FXMVECTOR Max)"
  },
  {
    "label": "XMVectorSaturate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSaturate(FXMVECTOR V)"
  },
  {
    "label": "XMVectorAndInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAndInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorAndCInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAndCInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorOrInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorOrInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNorInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNorInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorXorInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorXorInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNegate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNegate(FXMVECTOR V)"
  },
  {
    "label": "XMVectorAdd()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAdd(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorAddAngles()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAddAngles(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorSubtract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSubtract(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorSubtractAngles()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSubtractAngles(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMultiply()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMultiply(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMultiplyAdd(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3)"
  },
  {
    "label": "XMVectorDivide()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorDivide(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNegativeMultiplySubtract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNegativeMultiplySubtract(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3)"
  },
  {
    "label": "XMVectorScale()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorScale(FXMVECTOR V, FLOAT ScaleFactor)"
  },
  {
    "label": "XMVectorReciprocalEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocalEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorReciprocal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocal(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSqrtEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSqrtEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSqrt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSqrt(FXMVECTOR V)"
  },
  {
    "label": "XMVectorReciprocalSqrtEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocalSqrtEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocalSqrt(FXMVECTOR V)"
  },
  {
    "label": "XMVectorExpEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorExpEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorExp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorExp(FXMVECTOR V)"
  },
  {
    "label": "XMVectorLogEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLogEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorLog()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLog(FXMVECTOR V)"
  },
  {
    "label": "XMVectorPowEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPowEst(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorPow()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPow(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorAbs()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAbs(FXMVECTOR V)"
  },
  {
    "label": "XMVectorMod()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMod(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorModAngles()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorModAngles(FXMVECTOR Angles)"
  },
  {
    "label": "XMVectorSin()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSin(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSinEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCos()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCos(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCosEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCosEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinCos()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorSinCos(_Out_ XMVECTOR* pSin, _Out_ XMVECTOR* pCos, FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinCosEst()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorSinCosEst(_Out_ XMVECTOR* pSin, _Out_ XMVECTOR* pCos, FXMVECTOR V)"
  },
  {
    "label": "XMVectorTan()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTan(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTanEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTanEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinH()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSinH(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinHEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSinHEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCosH()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCosH(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCosHEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCosHEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTanH()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTanH(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTanHEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTanHEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorASin()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorASin(FXMVECTOR V)"
  },
  {
    "label": "XMVectorASinEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorASinEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorACos()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorACos(FXMVECTOR V)"
  },
  {
    "label": "XMVectorACosEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorACosEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorATan()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATan(FXMVECTOR V)"
  },
  {
    "label": "XMVectorATanEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATanEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorATan2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATan2(FXMVECTOR Y, FXMVECTOR X)"
  },
  {
    "label": "XMVectorATan2Est()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATan2Est(FXMVECTOR Y, FXMVECTOR X)"
  },
  {
    "label": "XMVectorLerp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLerp(FXMVECTOR V0, FXMVECTOR V1, FLOAT t)"
  },
  {
    "label": "XMVectorLerpV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLerpV(FXMVECTOR V0, FXMVECTOR V1, FXMVECTOR T)"
  },
  {
    "label": "XMVectorHermite()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorHermite(FXMVECTOR Position0, FXMVECTOR Tangent0, FXMVECTOR Position1, CXMVECTOR Tangent1, FLOAT t)"
  },
  {
    "label": "XMVectorHermiteV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorHermiteV(FXMVECTOR Position0, FXMVECTOR Tangent0, FXMVECTOR Position1, CXMVECTOR Tangent1, CXMVECTOR T)"
  },
  {
    "label": "XMVectorCatmullRom()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCatmullRom(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, CXMVECTOR Position3, FLOAT t)"
  },
  {
    "label": "XMVectorCatmullRomV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCatmullRomV(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, CXMVECTOR Position3, CXMVECTOR T)"
  },
  {
    "label": "XMVectorBaryCentric()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorBaryCentric(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, FLOAT f, FLOAT g)"
  },
  {
    "label": "XMVectorBaryCentricV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorBaryCentricV(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, CXMVECTOR F, CXMVECTOR G)"
  },
  {
    "label": "XMVector2Equal()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2Equal(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2EqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2EqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2EqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2EqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2EqualIntR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2EqualIntR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2NearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVector2NotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2NotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2NotEqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2NotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2Greater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2Greater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2GreaterR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2GreaterR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2GreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2GreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2Less()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2Less(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2LessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2LessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2InBounds()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2InBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector2InBoundsR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2InBoundsR(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector2IsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2IsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVector2IsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2IsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVector2Dot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Dot(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2Cross()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Cross(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2LengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2LengthSq(FXMVECTOR V)"
  },
  {
    "label": "XMVector2ReciprocalLengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ReciprocalLengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector2ReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ReciprocalLength(FXMVECTOR V)"
  },
  {
    "label": "XMVector2LengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2LengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector2Length()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Length(FXMVECTOR V)"
  },
  {
    "label": "XMVector2NormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2NormalizeEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector2Normalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Normalize(FXMVECTOR V)"
  },
  {
    "label": "XMVector2ClampLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ClampLength(FXMVECTOR V, FLOAT LengthMin, FLOAT LengthMax)"
  },
  {
    "label": "XMVector2ClampLengthV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax)"
  },
  {
    "label": "XMVector2Reflect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Reflect(FXMVECTOR Incident, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector2Refract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Refract(FXMVECTOR Incident, FXMVECTOR Normal, FLOAT RefractionIndex)"
  },
  {
    "label": "XMVector2RefractV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMVector2Orthogonal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Orthogonal(FXMVECTOR V)"
  },
  {
    "label": "XMVector2AngleBetweenNormalsEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector2AngleBetweenNormals()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector2AngleBetweenVectors()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2LinePointDistance()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2LinePointDistance(FXMVECTOR LinePoint1, FXMVECTOR LinePoint2, FXMVECTOR Point)"
  },
  {
    "label": "XMVector2IntersectLine()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2IntersectLine(FXMVECTOR Line1Point1, FXMVECTOR Line1Point2, FXMVECTOR Line2Point1, CXMVECTOR Line2Point2)"
  },
  {
    "label": "XMVector2Transform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Transform(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT4*)",
    "insertText": "XMVector2TransformStream(_Out_bytecap_x_(sizeof(XMFLOAT4)+OutputStride*(VectorCount-1)) XMFLOAT4* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT2)+InputStride*(VectorCount-1)) CONST XMFLOAT2* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformStreamNC()",
    "kind": "Method",
    "detail": "Function (XMFLOAT4*)",
    "insertText": "XMVector2TransformStreamNC(_Out_bytecap_x_(sizeof(XMFLOAT4)+OutputStride*(VectorCount-1)) XMFLOAT4* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT2)+InputStride*(VectorCount-1)) CONST XMFLOAT2* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformCoord()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2TransformCoord(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformCoordStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT2*)",
    "insertText": "XMVector2TransformCoordStream(_Out_bytecap_x_(sizeof(XMFLOAT2)+OutputStride*(VectorCount-1)) XMFLOAT2* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT2)+InputStride*(VectorCount-1)) CONST XMFLOAT2* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2TransformNormal(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformNormalStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT2*)",
    "insertText": "XMVector2TransformNormalStream(_Out_bytecap_x_(sizeof(XMFLOAT2)+OutputStride*(VectorCount-1)) XMFLOAT2* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT2)+InputStride*(VectorCount-1)) CONST XMFLOAT2* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector3Equal()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3Equal(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3EqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3EqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3EqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3EqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3EqualIntR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3EqualIntR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3NearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVector3NotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3NotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3NotEqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3NotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3Greater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3Greater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3GreaterR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3GreaterR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3GreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3GreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3Less()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3Less(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3LessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3LessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3InBounds()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3InBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector3InBoundsR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3InBoundsR(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector3IsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3IsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVector3IsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3IsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVector3Dot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Dot(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3Cross()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Cross(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3LengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3LengthSq(FXMVECTOR V)"
  },
  {
    "label": "XMVector3ReciprocalLengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ReciprocalLengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector3ReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ReciprocalLength(FXMVECTOR V)"
  },
  {
    "label": "XMVector3LengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3LengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector3Length()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Length(FXMVECTOR V)"
  },
  {
    "label": "XMVector3NormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3NormalizeEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector3Normalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Normalize(FXMVECTOR V)"
  },
  {
    "label": "XMVector3ClampLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ClampLength(FXMVECTOR V, FLOAT LengthMin, FLOAT LengthMax)"
  },
  {
    "label": "XMVector3ClampLengthV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax)"
  },
  {
    "label": "XMVector3Reflect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Reflect(FXMVECTOR Incident, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector3Refract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Refract(FXMVECTOR Incident, FXMVECTOR Normal, FLOAT RefractionIndex)"
  },
  {
    "label": "XMVector3RefractV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMVector3Orthogonal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Orthogonal(FXMVECTOR V)"
  },
  {
    "label": "XMVector3AngleBetweenNormalsEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector3AngleBetweenNormals()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector3AngleBetweenVectors()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3LinePointDistance()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3LinePointDistance(FXMVECTOR LinePoint1, FXMVECTOR LinePoint2, FXMVECTOR Point)"
  },
  {
    "label": "XMVector3ComponentsFromNormal()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVector3ComponentsFromNormal(_Out_ XMVECTOR* pParallel, _Out_ XMVECTOR* pPerpendicular, FXMVECTOR V, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector3Rotate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Rotate(FXMVECTOR V, FXMVECTOR RotationQuaternion)"
  },
  {
    "label": "XMVector3InverseRotate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3InverseRotate(FXMVECTOR V, FXMVECTOR RotationQuaternion)"
  },
  {
    "label": "XMVector3Transform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Transform(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT4*)",
    "insertText": "XMVector3TransformStream(_Out_bytecap_x_(sizeof(XMFLOAT4)+OutputStride*(VectorCount-1)) XMFLOAT4* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT3)+InputStride*(VectorCount-1)) CONST XMFLOAT3* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformStreamNC()",
    "kind": "Method",
    "detail": "Function (XMFLOAT4*)",
    "insertText": "XMVector3TransformStreamNC(_Out_bytecap_x_(sizeof(XMFLOAT4)+OutputStride*(VectorCount-1)) XMFLOAT4* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT3)+InputStride*(VectorCount-1)) CONST XMFLOAT3* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformCoord()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3TransformCoord(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformCoordStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT3*)",
    "insertText": "XMVector3TransformCoordStream(_Out_bytecap_x_(sizeof(XMFLOAT3)+OutputStride*(VectorCount-1)) XMFLOAT3* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT3)+InputStride*(VectorCount-1)) CONST XMFLOAT3* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3TransformNormal(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformNormalStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT3*)",
    "insertText": "XMVector3TransformNormalStream(_Out_bytecap_x_(sizeof(XMFLOAT3)+OutputStride*(VectorCount-1)) XMFLOAT3* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT3)+InputStride*(VectorCount-1)) CONST XMFLOAT3* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMVector3Project()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Project(FXMVECTOR V, FLOAT ViewportX, FLOAT ViewportY, FLOAT ViewportWidth, FLOAT ViewportHeight, FLOAT ViewportMinZ, FLOAT ViewportMaxZ, CXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World)"
  },
  {
    "label": "XMVector3ProjectStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT3*)",
    "insertText": "XMVector3ProjectStream(_Out_bytecap_x_(sizeof(XMFLOAT3)+OutputStride*(VectorCount-1)) XMFLOAT3* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT3)+InputStride*(VectorCount-1)) CONST XMFLOAT3* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, FLOAT ViewportX, FLOAT ViewportY, FLOAT ViewportWidth, FLOAT ViewportHeight, FLOAT ViewportMinZ, FLOAT ViewportMaxZ, CXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World)"
  },
  {
    "label": "XMVector3Unproject()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Unproject(FXMVECTOR V, FLOAT ViewportX, FLOAT ViewportY, FLOAT ViewportWidth, FLOAT ViewportHeight, FLOAT ViewportMinZ, FLOAT ViewportMaxZ, CXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World)"
  },
  {
    "label": "XMVector3UnprojectStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT3*)",
    "insertText": "XMVector3UnprojectStream(_Out_bytecap_x_(sizeof(XMFLOAT3)+OutputStride*(VectorCount-1)) XMFLOAT3* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT3)+InputStride*(VectorCount-1)) CONST XMFLOAT3* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, FLOAT ViewportX, FLOAT ViewportY, FLOAT ViewportWidth, FLOAT ViewportHeight, FLOAT ViewportMinZ, FLOAT ViewportMaxZ, CXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World)"
  },
  {
    "label": "XMVector4Equal()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4Equal(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4EqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4EqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4EqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4EqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4EqualIntR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4EqualIntR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4NearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVector4NotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4NotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4NotEqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4NotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Greater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4Greater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4GreaterR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4GreaterR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4GreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4GreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Less()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4Less(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4LessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4LessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4InBounds()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4InBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector4InBoundsR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4InBoundsR(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector4IsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4IsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVector4IsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4IsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVector4Dot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Dot(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Cross()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Cross(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3)"
  },
  {
    "label": "XMVector4LengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4LengthSq(FXMVECTOR V)"
  },
  {
    "label": "XMVector4ReciprocalLengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ReciprocalLengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector4ReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ReciprocalLength(FXMVECTOR V)"
  },
  {
    "label": "XMVector4LengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4LengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector4Length()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Length(FXMVECTOR V)"
  },
  {
    "label": "XMVector4NormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4NormalizeEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector4Normalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Normalize(FXMVECTOR V)"
  },
  {
    "label": "XMVector4ClampLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ClampLength(FXMVECTOR V, FLOAT LengthMin, FLOAT LengthMax)"
  },
  {
    "label": "XMVector4ClampLengthV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax)"
  },
  {
    "label": "XMVector4Reflect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Reflect(FXMVECTOR Incident, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector4Refract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Refract(FXMVECTOR Incident, FXMVECTOR Normal, FLOAT RefractionIndex)"
  },
  {
    "label": "XMVector4RefractV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMVector4Orthogonal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Orthogonal(FXMVECTOR V)"
  },
  {
    "label": "XMVector4AngleBetweenNormalsEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector4AngleBetweenNormals()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector4AngleBetweenVectors()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Transform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Transform(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector4TransformStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT4*)",
    "insertText": "XMVector4TransformStream(_Out_bytecap_x_(sizeof(XMFLOAT4)+OutputStride*(VectorCount-1)) XMFLOAT4* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT4)+InputStride*(VectorCount-1)) CONST XMFLOAT4* pInputStream, _In_ UINT InputStride, _In_ UINT VectorCount, CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixIsNaN(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixIsInfinite(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIsIdentity()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixIsIdentity(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixMultiply()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixMultiply(CXMMATRIX M1, CXMMATRIX M2)"
  },
  {
    "label": "XMMatrixMultiplyTranspose()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixMultiplyTranspose(CXMMATRIX M1, CXMMATRIX M2)"
  },
  {
    "label": "XMMatrixTranspose()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTranspose(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixInverse()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixInverse(_Out_ XMVECTOR* pDeterminant, CXMMATRIX M)"
  },
  {
    "label": "XMMatrixDeterminant()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMMatrixDeterminant(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixDecompose()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixDecompose(_Out_ XMVECTOR *outScale, _Out_ XMVECTOR *outRotQuat, _Out_ XMVECTOR *outTrans, CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIdentity()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixIdentity()"
  },
  {
    "label": "XMMatrixSet()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixSet(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m03, FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m13, FLOAT m20, FLOAT m21, FLOAT m22, FLOAT m23, FLOAT m30, FLOAT m31, FLOAT m32, FLOAT m33)"
  },
  {
    "label": "XMMatrixTranslation()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTranslation(FLOAT OffsetX, FLOAT OffsetY, FLOAT OffsetZ)"
  },
  {
    "label": "XMMatrixTranslationFromVector()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTranslationFromVector(FXMVECTOR Offset)"
  },
  {
    "label": "XMMatrixScaling()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixScaling(FLOAT ScaleX, FLOAT ScaleY, FLOAT ScaleZ)"
  },
  {
    "label": "XMMatrixScalingFromVector()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixScalingFromVector(FXMVECTOR Scale)"
  },
  {
    "label": "XMMatrixRotationX()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationX(FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationY()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationY(FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationZ()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationZ(FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationRollPitchYaw()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationRollPitchYaw(FLOAT Pitch, FLOAT Yaw, FLOAT Roll)"
  },
  {
    "label": "XMMatrixRotationRollPitchYawFromVector()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationRollPitchYawFromVector(FXMVECTOR Angles)"
  },
  {
    "label": "XMMatrixRotationNormal()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationNormal(FXMVECTOR NormalAxis, FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationAxis()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationAxis(FXMVECTOR Axis, FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationQuaternion()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationQuaternion(FXMVECTOR Quaternion)"
  },
  {
    "label": "XMMatrixTransformation2D()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTransformation2D(FXMVECTOR ScalingOrigin, FLOAT ScalingOrientation, FXMVECTOR Scaling, FXMVECTOR RotationOrigin, FLOAT Rotation, CXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixTransformation()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTransformation(FXMVECTOR ScalingOrigin, FXMVECTOR ScalingOrientationQuaternion, FXMVECTOR Scaling, CXMVECTOR RotationOrigin, CXMVECTOR RotationQuaternion, CXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixAffineTransformation2D()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixAffineTransformation2D(FXMVECTOR Scaling, FXMVECTOR RotationOrigin, FLOAT Rotation, FXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixAffineTransformation()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixAffineTransformation(FXMVECTOR Scaling, FXMVECTOR RotationOrigin, FXMVECTOR RotationQuaternion, CXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixReflect()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixReflect(FXMVECTOR ReflectionPlane)"
  },
  {
    "label": "XMMatrixShadow()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixShadow(FXMVECTOR ShadowPlane, FXMVECTOR LightPosition)"
  },
  {
    "label": "XMMatrixLookAtLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookAtLH(FXMVECTOR EyePosition, FXMVECTOR FocusPosition, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixLookAtRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookAtRH(FXMVECTOR EyePosition, FXMVECTOR FocusPosition, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixLookToLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookToLH(FXMVECTOR EyePosition, FXMVECTOR EyeDirection, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixLookToRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookToRH(FXMVECTOR EyePosition, FXMVECTOR EyeDirection, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixPerspectiveLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveLH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveRH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveFovLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveFovLH(FLOAT FovAngleY, FLOAT AspectHByW, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveFovRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveFovRH(FLOAT FovAngleY, FLOAT AspectHByW, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveOffCenterLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveOffCenterLH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveOffCenterRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveOffCenterRH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicLH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicRH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicOffCenterLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicOffCenterLH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicOffCenterRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicOffCenterRH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMQuaternionEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionEqual(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionNotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionNotEqual(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionIsNaN(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionIsInfinite(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionIsIdentity()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionIsIdentity(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionDot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionDot(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionMultiply(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionLengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionLengthSq(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionReciprocalLength(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionLength(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionNormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionNormalizeEst(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionNormalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionNormalize(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionConjugate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionConjugate(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionInverse()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionInverse(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionLn()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionLn(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionExp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionExp(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionSlerp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSlerp(FXMVECTOR Q0, FXMVECTOR Q1, FLOAT t)"
  },
  {
    "label": "XMQuaternionSlerpV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSlerpV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR T)"
  },
  {
    "label": "XMQuaternionSquad()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSquad(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR Q3, FLOAT t)"
  },
  {
    "label": "XMQuaternionSquadV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSquadV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR Q3, CXMVECTOR T)"
  },
  {
    "label": "XMQuaternionSquadSetup()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMQuaternionSquadSetup(_Out_ XMVECTOR* pA, _Out_ XMVECTOR* pB, _Out_ XMVECTOR* pC, FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR Q3)"
  },
  {
    "label": "XMQuaternionBaryCentric()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionBaryCentric(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, FLOAT f, FLOAT g)"
  },
  {
    "label": "XMQuaternionBaryCentricV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionBaryCentricV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR F, CXMVECTOR G)"
  },
  {
    "label": "XMQuaternionIdentity()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionIdentity()"
  },
  {
    "label": "XMQuaternionRotationRollPitchYaw()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationRollPitchYaw(FLOAT Pitch, FLOAT Yaw, FLOAT Roll)"
  },
  {
    "label": "XMQuaternionRotationRollPitchYawFromVector()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationRollPitchYawFromVector(FXMVECTOR Angles)"
  },
  {
    "label": "XMQuaternionRotationNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationNormal(FXMVECTOR NormalAxis, FLOAT Angle)"
  },
  {
    "label": "XMQuaternionRotationAxis()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationAxis(FXMVECTOR Axis, FLOAT Angle)"
  },
  {
    "label": "XMQuaternionRotationMatrix()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationMatrix(CXMMATRIX M)"
  },
  {
    "label": "XMQuaternionToAxisAngle()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMQuaternionToAxisAngle(_Out_ XMVECTOR* pAxis, _Out_ FLOAT* pAngle, FXMVECTOR Q)"
  },
  {
    "label": "XMPlaneEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneEqual(FXMVECTOR P1, FXMVECTOR P2)"
  },
  {
    "label": "XMPlaneNearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneNearEqual(FXMVECTOR P1, FXMVECTOR P2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMPlaneNotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneNotEqual(FXMVECTOR P1, FXMVECTOR P2)"
  },
  {
    "label": "XMPlaneIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneIsNaN(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneIsInfinite(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneDot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneDot(FXMVECTOR P, FXMVECTOR V)"
  },
  {
    "label": "XMPlaneDotCoord()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneDotCoord(FXMVECTOR P, FXMVECTOR V)"
  },
  {
    "label": "XMPlaneDotNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneDotNormal(FXMVECTOR P, FXMVECTOR V)"
  },
  {
    "label": "XMPlaneNormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneNormalizeEst(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneNormalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneNormalize(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneIntersectLine()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneIntersectLine(FXMVECTOR P, FXMVECTOR LinePoint1, FXMVECTOR LinePoint2)"
  },
  {
    "label": "XMPlaneIntersectPlane()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMPlaneIntersectPlane(_Out_ XMVECTOR* pLinePoint1, _Out_ XMVECTOR* pLinePoint2, FXMVECTOR P1, FXMVECTOR P2)"
  },
  {
    "label": "XMPlaneTransform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneTransform(FXMVECTOR P, CXMMATRIX M)"
  },
  {
    "label": "XMPlaneTransformStream()",
    "kind": "Method",
    "detail": "Function (XMFLOAT4*)",
    "insertText": "XMPlaneTransformStream(_Out_bytecap_x_(sizeof(XMFLOAT4)+OutputStride*(PlaneCount-1)) XMFLOAT4* pOutputStream, _In_ UINT OutputStride, _In_bytecount_x_(sizeof(XMFLOAT4)+InputStride*(PlaneCount-1)) CONST XMFLOAT4* pInputStream, _In_ UINT InputStride, _In_ UINT PlaneCount, CXMMATRIX M)"
  },
  {
    "label": "XMPlaneFromPointNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneFromPointNormal(FXMVECTOR Point, FXMVECTOR Normal)"
  },
  {
    "label": "XMPlaneFromPoints()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneFromPoints(FXMVECTOR Point1, FXMVECTOR Point2, FXMVECTOR Point3)"
  },
  {
    "label": "XMColorEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorNotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorNotEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorGreater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorGreater(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorGreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorGreaterOrEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorLess()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorLess(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorLessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorLessOrEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorIsNaN(FXMVECTOR C)"
  },
  {
    "label": "XMColorIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorIsInfinite(FXMVECTOR C)"
  },
  {
    "label": "XMColorNegative()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorNegative(FXMVECTOR C)"
  },
  {
    "label": "XMColorModulate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorModulate(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorAdjustSaturation()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorAdjustSaturation(FXMVECTOR C, FLOAT Saturation)"
  },
  {
    "label": "XMColorAdjustContrast()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorAdjustContrast(FXMVECTOR C, FLOAT Contrast)"
  },
  {
    "label": "XMVerifyCPUSupport()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVerifyCPUSupport()"
  },
  {
    "label": "XMAssert()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMAssert(_In_z_ CONST CHAR* pExpression, _In_z_ CONST CHAR* pFileName, UINT LineNumber)"
  },
  {
    "label": "XMFresnelTerm()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMFresnelTerm(FXMVECTOR CosIncidentAngle, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMScalarNearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMScalarNearEqual(FLOAT S1, FLOAT S2, FLOAT Epsilon)"
  },
  {
    "label": "XMScalarModAngle()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarModAngle(FLOAT Value)"
  },
  {
    "label": "XMScalarSin()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarSin(FLOAT Value)"
  },
  {
    "label": "XMScalarCos()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarCos(FLOAT Value)"
  },
  {
    "label": "XMScalarSinCos()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMScalarSinCos(_Out_ FLOAT* pSin, _Out_ FLOAT* pCos, FLOAT Value)"
  },
  {
    "label": "XMScalarASin()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarASin(FLOAT Value)"
  },
  {
    "label": "XMScalarACos()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarACos(FLOAT Value)"
  },
  {
    "label": "XMScalarSinEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarSinEst(FLOAT Value)"
  },
  {
    "label": "XMScalarCosEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarCosEst(FLOAT Value)"
  },
  {
    "label": "XMScalarSinCosEst()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMScalarSinCosEst(_Out_ FLOAT* pSin, _Out_ FLOAT* pCos, FLOAT Value)"
  },
  {
    "label": "XMScalarASinEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarASinEst(FLOAT Value)"
  },
  {
    "label": "XMScalarACosEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarACosEst(FLOAT Value)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# define XMGLOBALCONST CONST)",
    "insertText": "__declspec(selectany)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (1 . 0 f,- 0 . 1 6 6 6 6 6 6 6 7 f,8 . 3 3 3 3 3 3 3 3 3 e - 3 f,- 1 . 9 8 4 1 2 6 9 8 4 e - 4 f } ; XMGLOBALCONST XMVECTORF32 g_XMSinCoefficients1 = { 2 . 7 5 5 7 3 1 9 2 2 e - 6 f,- 2 . 5 0 5 2 1 0 8 3 9 e - 8 f,1 . 6 0 5 9 0 4 3 8 4 e - 1 0 f,- 7 . 6 4 7 1 6 3 7 3 2 e - 1 3 f } ; XMGLOBALCONST XMVECTORF32 g_XMSinCoefficients2 = { 2 . 8 1 1 4 5 7 2 5 4 e - 1 5 f,- 8 . 2 2 0 6 3 5 2 4 7 e - 1 8 f,1 . 9 5 7 2 9 4 1 0 6 e - 2 0 f,- 3 . 8 6 8 1 7 0 1 7 1 e - 2 3 f } ; XMGLOBALCONST XMVECTORF32 g_XMCosCoefficients0 = { 1 . 0 f,- 0 . 5 f,4 . 1 6 6 6 6 6 6 6 7 e - 2 f,- 1 . 3 8 8 8 8 8 8 8 9 e - 3 f } ; XMGLOBALCONST XMVECTORF32 g_XMCosCoefficients1 = { 2 . 4 8 0 1 5 8 7 3 0 e - 5 f,- 2 . 7 5 5 7 3 1 9 2 2 e - 7 f,2 . 0 8 7 6 7 5 6 9 9 e - 9 f,- 1 . 1 4 7 0 7 4 5 6 0 e - 1 1 f } ; XMGLOBALCONST XMVECTORF32 g_XMCosCoefficients2 = { 4 . 7 7 9 4 7 7 3 3 2 e - 1 4 f,- 1 . 5 6 1 9 2 0 6 9 7 e - 1 6 f,4 . 1 1 0 3 1 7 6 2 3 e - 1 9 f,- 8 . 8 9 6 7 9 1 3 9 2 e - 2 2 f } ; XMGLOBALCONST XMVECTORF32 g_XMTanCoefficients0 = { 1 . 0 f,0 . 3 3 3 3 3 3 3 3 3 f,0 . 1 3 3 3 3 3 3 3 3 f,5 . 3 9 6 8 2 5 3 9 7 e - 2 f } ; XMGLOBALCONST XMVECTORF32 g_XMTanCoefficients1 = { 2 . 1 8 6 9 4 8 8 5 4 e - 2 f,8 . 8 6 3 2 3 5 5 3 0 e - 3 f,3 . 5 9 2 1 2 8 1 6 7 e - 3 f,1 . 4 5 5 8 3 4 4 8 5 e - 3 f } ; XMGLOBALCONST XMVECTORF32 g_XMTanCoefficients2 = { 5 . 9 0 0 2 7 4 2 6 4 e - 4 f,2 . 3 9 1 2 9 0 7 6 4 e - 4 f,9 . 6 9 1 5 3 7 7 0 7 e - 5 f,3 . 9 2 7 8 3 2 9 5 0 e - 5 f } ; XMGLOBALCONST XMVECTORF32 g_XMASinCoefficients0 = { - 0 . 0 5 8 0 6 3 6 7 5 6 3 9 0 4 f,- 0 . 4 1 8 6 1 9 7 2 4 6 9 4 1 6 f,0 . 2 2 4 8 0 1 1 4 7 9 1 6 2 1 f,2 . 1 7 3 3 7 2 4 1 3 6 0 6 0 6 f } ; XMGLOBALCONST XMVECTORF32 g_XMASinCoefficients1 = { 0 . 6 1 6 5 7 2 7 5 9 0 7 1 7 0 f,4 . 2 9 6 9 6 4 9 8 2 8 3 4 5 5 f,- 1 . 1 8 9 4 2 8 2 2 2 5 5 4 5 2 f,- 6 . 5 3 7 8 4 8 3 2 0 9 4 8 3 1 f } ; XMGLOBALCONST XMVECTORF32 g_XMASinCoefficients2 = { - 1 . 3 6 9 2 6 5 5 3 8 6 3 4 1 3 f,- 4 . 4 8 1 7 9 2 9 4 2 3 7 2 1 0 f,1 . 4 1 8 1 0 6 7 2 9 4 1 8 3 3 f,5 . 4 8 1 7 9 2 5 7 9 3 5 7 1 3 f } ; XMGLOBALCONST XMVECTORF32 g_XMATanCoefficients0 = { 1 . 0 f,0 . 3 3 3 3 3 3 3 3 4 f,0 . 2 f,0 . 1 4 2 8 5 7 1 4 3 f } ; XMGLOBALCONST XMVECTORF32 g_XMATanCoefficients1 = { 1 . 1 1 1 1 1 1 1 1 1 e - 1 f,9 . 0 9 0 9 0 9 0 9 1 e - 2 f,7 . 6 9 2 3 0 7 6 9 2 e - 2 f,6 . 6 6 6 6 6 6 6 6 7 e - 2 f } ; XMGLOBALCONST XMVECTORF32 g_XMATanCoefficients2 = { 5 . 8 8 2 3 5 2 9 4 1 e - 2 f,5 . 2 6 3 1 5 7 8 9 5 e - 2 f,4 . 7 6 1 9 0 4 7 6 2 e - 2 f,4 . 3 4 7 8 2 6 0 8 7 e - 2 f } ; XMGLOBALCONST XMVECTORF32 g_XMSinEstCoefficients = { 1 . 0 f,- 1 . 6 6 5 2 1 8 5 6 9 9 1 5 4 1 e - 1 f,8 . 1 9 9 9 1 3 0 1 8 7 5 5 e - 3 f,- 1 . 6 1 4 7 5 9 3 7 2 2 8 e - 4 f } ; XMGLOBALCONST XMVECTORF32 g_XMCosEstCoefficients = { 1 . 0 f,- 4 . 9 5 3 4 8 0 0 8 9 1 8 0 9 6 e - 1 f,3 . 8 7 8 2 5 9 9 6 2 8 8 1 e - 2 f,- 9 . 2 4 5 8 7 9 7 6 2 6 3 e - 4 f } ; XMGLOBALCONST XMVECTORF32 g_XMTanEstCoefficients = { 2 . 4 8 4 f,- 1 . 9 5 4 9 2 3 1 8 3 e - 1 f,2 . 4 6 7 4 0 1 1 0 1 f,XM_1DIVPI } ; XMGLOBALCONST XMVECTORF32 g_XMATanEstCoefficients = { 7 . 6 8 9 8 9 1 4 1 8 9 5 1 e - 1 f,1 . 1 0 4 7 4 2 4 9 3 3 4 8 f,8 . 6 6 1 8 4 4 2 6 6 0 0 6 e - 1 f,XM_PIDIV2 } ; XMGLOBALCONST XMVECTORF32 g_XMASinEstCoefficients = { - 1 . 3 6 1 7 8 2 7 2 8 8 6 7 1 1 f,2 . 3 7 9 4 9 4 9 3 4 6 4 5 3 8 f,- 8 . 0 8 2 2 8 5 6 5 6 5 0 4 8 6 e - 1 f,2 . 7 8 4 4 0 1 4 2 7 4 6 7 3 6 e - 1 f } ; XMGLOBALCONST XMVECTORF32 g_XMASinEstConstants = { 1 . 0 0 0 0 0 0 1 1 9 2 1 f,XM_PIDIV2,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMPiConstants0 = { XM_PI,XM_2PI,XM_1DIVPI,XM_1DIV2PI } ; XMGLOBALCONST XMVECTORF32 g_XMIdentityR0 = { 1 . 0 f,0 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMIdentityR1 = { 0 . 0 f,1 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMIdentityR2 = { 0 . 0 f,0 . 0 f,1 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMIdentityR3 = { 0 . 0 f,0 . 0 f,0 . 0 f,1 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegIdentityR0 = { - 1 . 0 f,0 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegIdentityR1 = { 0 . 0 f,- 1 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegIdentityR2 = { 0 . 0 f,0 . 0 f,- 1 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegIdentityR3 = { 0 . 0 f,0 . 0 f,0 . 0 f,- 1 . 0 f } ; XMGLOBALCONST XMVECTORI32 g_XMNegativeZero = { 0 x80000000,0 x80000000,0 x80000000,0 x80000000 } ; XMGLOBALCONST XMVECTORI32 g_XMNegate3 = { 0 x80000000,0 x80000000,0 x80000000,0 x00000000 } ; XMGLOBALCONST XMVECTORI32 g_XMMask3 = { 0 xFFFFFFFF,0 xFFFFFFFF,0 xFFFFFFFF,0 x00000000 } ; XMGLOBALCONST XMVECTORI32 g_XMMaskX = { 0 xFFFFFFFF,0 x00000000,0 x00000000,0 x00000000 } ; XMGLOBALCONST XMVECTORI32 g_XMMaskY = { 0 x00000000,0 xFFFFFFFF,0 x00000000,0 x00000000 } ; XMGLOBALCONST XMVECTORI32 g_XMMaskZ = { 0 x00000000,0 x00000000,0 xFFFFFFFF,0 x00000000 } ; XMGLOBALCONST XMVECTORI32 g_XMMaskW = { 0 x00000000,0 x00000000,0 x00000000,0 xFFFFFFFF } ; XMGLOBALCONST XMVECTORF32 g_XMOne = { 1 . 0 f,1 . 0 f,1 . 0 f,1 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMOne3 = { 1 . 0 f,1 . 0 f,1 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMZero = { 0 . 0 f,0 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegativeOne = { - 1 . 0 f,- 1 . 0 f,- 1 . 0 f,- 1 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMOneHalf = { 0 . 5 f,0 . 5 f,0 . 5 f,0 . 5 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegativeOneHalf = { - 0 . 5 f,- 0 . 5 f,- 0 . 5 f,- 0 . 5 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegativeTwoPi = { - XM_2PI,- XM_2PI,- XM_2PI,- XM_2PI } ; XMGLOBALCONST XMVECTORF32 g_XMNegativePi = { - XM_PI,- XM_PI,- XM_PI,- XM_PI } ; XMGLOBALCONST XMVECTORF32 g_XMHalfPi = { XM_PIDIV2,XM_PIDIV2,XM_PIDIV2,XM_PIDIV2 } ; XMGLOBALCONST XMVECTORF32 g_XMPi = { XM_PI,XM_PI,XM_PI,XM_PI } ; XMGLOBALCONST XMVECTORF32 g_XMReciprocalPi = { XM_1DIVPI,XM_1DIVPI,XM_1DIVPI,XM_1DIVPI } ; XMGLOBALCONST XMVECTORF32 g_XMTwoPi = { XM_2PI,XM_2PI,XM_2PI,XM_2PI } ; XMGLOBALCONST XMVECTORF32 g_XMReciprocalTwoPi = { XM_1DIV2PI,XM_1DIV2PI,XM_1DIV2PI,XM_1DIV2PI } ; XMGLOBALCONST XMVECTORF32 g_XMEpsilon = { 1 . 1 9 2 0 9 2 8 9 6 e - 7 f,1 . 1 9 2 0 9 2 8 9 6 e - 7 f,1 . 1 9 2 0 9 2 8 9 6 e - 7 f,1 . 1 9 2 0 9 2 8 9 6 e - 7 f } ; XMGLOBALCONST XMVECTORI32 g_XMInfinity = { 0 x7F800000,0 x7F800000,0 x7F800000,0 x7F800000 } ; XMGLOBALCONST XMVECTORI32 g_XMQNaN = { 0 x7FC00000,0 x7FC00000,0 x7FC00000,0 x7FC00000 } ; XMGLOBALCONST XMVECTORI32 g_XMQNaNTest = { 0 x007FFFFF,0 x007FFFFF,0 x007FFFFF,0 x007FFFFF } ; XMGLOBALCONST XMVECTORI32 g_XMAbsMask = { 0 x7FFFFFFF,0 x7FFFFFFF,0 x7FFFFFFF,0 x7FFFFFFF } ; XMGLOBALCONST XMVECTORI32 g_XMFltMin = { 0 x00800000,0 x00800000,0 x00800000,0 x00800000 } ; XMGLOBALCONST XMVECTORI32 g_XMFltMax = { 0 x7F7FFFFF,0 x7F7FFFFF,0 x7F7FFFFF,0 x7F7FFFFF } ; XMGLOBALCONST XMVECTORI32 g_XMNegOneMask = { 0 xFFFFFFFF,0 xFFFFFFFF,0 xFFFFFFFF,0 xFFFFFFFF } ; XMGLOBALCONST XMVECTORI32 g_XMMaskA8R8G8B8 = { 0 x00FF0000,0 x0000FF00,0 x000000FF,0 xFF000000 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipA8R8G8B8 = { 0 x00000000,0 x00000000,0 x00000000,0 x80000000 } ; XMGLOBALCONST XMVECTORF32 g_XMFixAA8R8G8B8 = { 0 . 0 f,0 . 0 f,0 . 0)",
    "insertText": "f(float)(0x80000000U)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORF32 g_XMNormalizeA8R8G8B8 = { 1 . 0)",
    "insertText": "f(255.0f*(float)(0x10000)),1.0f/(255.0f*(float)(0x100)),1.0f/255.0f,1.0f/(255.0f*(float)(0x1000000))"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORI32 g_XMMaskA2B10G10R10 = { 0 x000003FF,0 x000FFC00,0 x3FF00000,0 xC0000000 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipA2B10G10R10 = { 0 x00000200,0 x00080000,0 x20000000,0 x80000000 } ; XMGLOBALCONST XMVECTORF32 g_XMFixAA2B10G10R10 = { - 5 1 2 . 0 f,- 5 1 2 . 0)",
    "insertText": "f(float)(0x400),-512.0f*(float)(0x100000),(float)(0x80000000U)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORF32 g_XMNormalizeA2B10G10R10 = { 1 . 0 f / 5 1 1 . 0 f,1 . 0)",
    "insertText": "f(511.0f*(float)(0x400)),1.0f/(511.0f*(float)(0x100000)),1.0f/(3.0f*(float)(0x40000000))"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORI32 g_XMMaskX16Y16 = { 0 x0000FFFF,0 xFFFF0000,0 x00000000,0 x00000000 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipX16Y16 = { 0 x00008000,0 x00000000,0 x00000000,0 x00000000 } ; XMGLOBALCONST XMVECTORF32 g_XMFixX16Y16 = { - 3 2 7 6 8 . 0 f,0 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNormalizeX16Y16 = { 1 . 0 f / 3 2 7 6 7 . 0 f,1 . 0)",
    "insertText": "f(32767.0f*65536.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORI32 g_XMMaskX16Y16Z16W16 = { 0 x0000FFFF,0 x0000FFFF,0 xFFFF0000,0 xFFFF0000 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipX16Y16Z16W16 = { 0 x00008000,0 x00008000,0 x00000000,0 x00000000 } ; XMGLOBALCONST XMVECTORF32 g_XMFixX16Y16Z16W16 = { - 3 2 7 6 8 . 0 f,- 3 2 7 6 8 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNormalizeX16Y16Z16W16 = { 1 . 0 f / 3 2 7 6 7 . 0 f,1 . 0 f / 3 2 7 6 7 . 0 f,1 . 0)",
    "insertText": "f(32767.0f*65536.0f),1.0f/(32767.0f*65536.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORF32 g_XMNoFraction = { 8 3 8 8 6 0 8 . 0 f,8 3 8 8 6 0 8 . 0 f,8 3 8 8 6 0 8 . 0 f,8 3 8 8 6 0 8 . 0 f } ; XMGLOBALCONST XMVECTORI32 g_XMMaskByte = { 0 x000000FF,0 x000000FF,0 x000000FF,0 x000000FF } ; XMGLOBALCONST XMVECTORF32 g_XMNegateX = { - 1 . 0 f,1 . 0 f,1 . 0 f,1 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegateY = { 1 . 0 f,- 1 . 0 f,1 . 0 f,1 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegateZ = { 1 . 0 f,1 . 0 f,- 1 . 0 f,1 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMNegateW = { 1 . 0 f,1 . 0 f,1 . 0 f,- 1 . 0 f } ; XMGLOBALCONST XMVECTORI32 g_XMSelect0101 = { XM_SELECT_0,XM_SELECT_1,XM_SELECT_0,XM_SELECT_1 } ; XMGLOBALCONST XMVECTORI32 g_XMSelect1010 = { XM_SELECT_1,XM_SELECT_0,XM_SELECT_1,XM_SELECT_0 } ; XMGLOBALCONST XMVECTORI32 g_XMOneHalfMinusEpsilon = { 0 x3EFFFFFD,0 x3EFFFFFD,0 x3EFFFFFD,0 x3EFFFFFD } ; XMGLOBALCONST XMVECTORI32 g_XMSelect1000 = { XM_SELECT_1,XM_SELECT_0,XM_SELECT_0,XM_SELECT_0 } ; XMGLOBALCONST XMVECTORI32 g_XMSelect1100 = { XM_SELECT_1,XM_SELECT_1,XM_SELECT_0,XM_SELECT_0 } ; XMGLOBALCONST XMVECTORI32 g_XMSelect1110 = { XM_SELECT_1,XM_SELECT_1,XM_SELECT_1,XM_SELECT_0 } ; XMGLOBALCONST XMVECTORI32 g_XMSwizzleXYXY = { XM_PERMUTE_0X,XM_PERMUTE_0Y,XM_PERMUTE_0X,XM_PERMUTE_0Y } ; XMGLOBALCONST XMVECTORI32 g_XMSwizzleXYZX = { XM_PERMUTE_0X,XM_PERMUTE_0Y,XM_PERMUTE_0Z,XM_PERMUTE_0X } ; XMGLOBALCONST XMVECTORI32 g_XMSwizzleYXZW = { XM_PERMUTE_0Y,XM_PERMUTE_0X,XM_PERMUTE_0Z,XM_PERMUTE_0W } ; XMGLOBALCONST XMVECTORI32 g_XMSwizzleYZXW = { XM_PERMUTE_0Y,XM_PERMUTE_0Z,XM_PERMUTE_0X,XM_PERMUTE_0W } ; XMGLOBALCONST XMVECTORI32 g_XMSwizzleZXYW = { XM_PERMUTE_0Z,XM_PERMUTE_0X,XM_PERMUTE_0Y,XM_PERMUTE_0W } ; XMGLOBALCONST XMVECTORI32 g_XMPermute0X0Y1X1Y = { XM_PERMUTE_0X,XM_PERMUTE_0Y,XM_PERMUTE_1X,XM_PERMUTE_1Y } ; XMGLOBALCONST XMVECTORI32 g_XMPermute0Z0W1Z1W = { XM_PERMUTE_0Z,XM_PERMUTE_0W,XM_PERMUTE_1Z,XM_PERMUTE_1W } ; XMGLOBALCONST XMVECTORF32 g_XMFixupY16 = { 1 . 0 f,1 . 0 f / 6 5 5 3 6 . 0 f,0 . 0 f,0 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMFixupY16W16 = { 1 . 0 f,1 . 0 f,1 . 0 f / 6 5 5 3 6 . 0 f,1 . 0 f / 6 5 5 3 6 . 0 f } ; XMGLOBALCONST XMVECTORI32 g_XMFlipY = { 0,0 x80000000,0,0 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipZ = { 0,0,0 x80000000,0 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipW = { 0,0,0,0 x80000000 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipYZ = { 0,0 x80000000,0 x80000000,0 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipZW = { 0,0,0 x80000000,0 x80000000 } ; XMGLOBALCONST XMVECTORI32 g_XMFlipYW = { 0,0 x80000000,0,0 x80000000 } ; XMGLOBALCONST XMVECTORI32 g_XMMaskHenD3 = { 0 x7FF,0 x7ff<<1 1,0 x3FF<<2 2,0 } ; XMGLOBALCONST XMVECTORI32 g_XMMaskDHen3 = { 0 x3FF,0 x7ff<<1 0,0 x7FF<<2 1,0 } ; XMGLOBALCONST XMVECTORF32 g_XMAddUHenD3 = { 0,0,3 2 7 6 8 . 0 f* 6 5 5 3 6 . 0 f,0 } ; XMGLOBALCONST XMVECTORF32 g_XMAddHenD3 = { - 1 0 2 4 . 0 f,- 1 0 2 4 . 0 f* 2 0 4 8 . 0 f,0,0 } ; XMGLOBALCONST XMVECTORF32 g_XMAddDHen3 = { - 5 1 2 . 0 f,- 1 0 2 4 . 0 f* 1 0 2 4 . 0 f,0,0 } ; XMGLOBALCONST XMVECTORF32 g_XMMulHenD3 = { 1 . 0 f,1 . 0 f / 2 0 4 8 . 0 f,1 . 0)",
    "insertText": "f(2048.0f*2048.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORF32 g_XMMulDHen3 = { 1 . 0 f,1 . 0 f / 1 0 2 4 . 0 f,1 . 0)",
    "insertText": "f(1024.0f*2048.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORI32 g_XMXorHenD3 = { 0 x400,0 x400<<1 1,0,0 } ; XMGLOBALCONST XMVECTORI32 g_XMXorDHen3 = { 0 x200,0 x400<<1 0,0,0 } ; XMGLOBALCONST XMVECTORI32 g_XMMaskIco4 = { 0 xFFFFF,0 xFFFFF000,0 xFFFFF,0 xF0000000 } ; XMGLOBALCONST XMVECTORI32 g_XMXorXIco4 = { 0 x80000,0,0 x80000,0 x80000000 } ; XMGLOBALCONST XMVECTORI32 g_XMXorIco4 = { 0 x80000,0,0 x80000,0 } ; XMGLOBALCONST XMVECTORF32 g_XMAddXIco4 = { - 8 . 0 f* 6 5 5 3 6 . 0 f,0,- 8 . 0 f* 6 5 5 3 6 . 0 f,3 2 7 6 8 . 0 f* 6 5 5 3 6 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMAddUIco4 = { 0,3 2 7 6 8 . 0 f* 6 5 5 3 6 . 0 f,0,3 2 7 6 8 . 0 f* 6 5 5 3 6 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMAddIco4 = { - 8 . 0 f* 6 5 5 3 6 . 0 f,0,- 8 . 0 f* 6 5 5 3 6 . 0 f,0 } ; XMGLOBALCONST XMVECTORF32 g_XMMulIco4 = { 1 . 0 f,1 . 0 f / 4 0 9 6 . 0 f,1 . 0 f,1 . 0)",
    "insertText": "f(4096.0f*65536.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORI32 g_XMMaskDec4 = { 0 x3FF,0 x3FF<<1 0,0 x3FF<<2 0,0 x3<<3 0 } ; XMGLOBALCONST XMVECTORI32 g_XMXorDec4 = { 0 x200,0 x200<<1 0,0 x200<<2 0,0 } ; XMGLOBALCONST XMVECTORF32 g_XMAddUDec4 = { 0,0,0,3 2 7 6 8 . 0 f* 6 5 5 3 6 . 0 f } ; XMGLOBALCONST XMVECTORF32 g_XMAddDec4 = { - 5 1 2 . 0 f,- 5 1 2 . 0 f* 1 0 2 4 . 0 f,- 5 1 2 . 0 f* 1 0 2 4 . 0 f* 1 0 2 4 . 0 f,0 } ; XMGLOBALCONST XMVECTORF32 g_XMMulDec4 = { 1 . 0 f,1 . 0 f / 1 0 2 4 . 0 f,1 . 0)",
    "insertText": "f(1024.0f*1024.0f),1.0f/(1024.0f*1024.0f*1024.0f)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (XMGLOBALCONST XMVECTORI32 g_XMMaskByte4 = { 0 xFF,0 xFF00,0 xFF0000,0 xFF000000 } ; XMGLOBALCONST XMVECTORI32 g_XMXorByte4 = { 0 x80,0 x8000,0 x800000,0 x00000000 } ; XMGLOBALCONST XMVECTORF32 g_XMAddByte4 = { - 1 2 8 . 0 f,- 1 2 8 . 0 f* 2 5 6 . 0 f,- 1 2 8 . 0 f* 6 5 5 3 6 . 0 f,0 } ; # pragma)",
    "insertText": "warning(push) #pragma warning(disable:4214 4204 4365 4616 6001) #if !defined(__cplusplus) && !defined(_XBOX) && defined(_XM_ISVS2005_) #undef logf #define logf(x) ((float)log((double)(x))) #endif #if defined(_XM_NO_INTRINSICS_) || defined(_XM_SSE_INTRINSICS_) XMFINLINE XMVECTOR XMVectorSetBinaryConstant(UINT C0, UINT C1, UINT C2, UINT C3)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_XM_NO_INTRINSICS_)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (vResult .)",
    "insertText": "u(0-(C0&1))"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (vResult .)",
    "insertText": "u(0-(C1&1))"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (vResult .)",
    "insertText": "u(0-(C2&1))"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (vResult .)",
    "insertText": "u(0-(C3&1))"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (vTemp =)",
    "insertText": "_mm_and_si128(vTemp,g_vMask1)"
  },
  {
    "label": "_mm_cmpeq_epi32()",
    "kind": "Method",
    "detail": "Function (vTemp =)",
    "insertText": "_mm_cmpeq_epi32(vTemp,g_vMask1)"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (vTemp =)",
    "insertText": "_mm_and_si128(vTemp,g_XMOne)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_XM_NO_INTRINSICS_) XMASSERT( IntConstant >= -16 && IntConstant <= 15)"
  },
  {
    "label": "XMASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMASSERT(DivExponent<32)"
  },
  {
    "label": "XMConvertVectorIntToFloat()",
    "kind": "Method",
    "detail": "Function ({ XMVECTORI32 V = { IntConstant,IntConstant,IntConstant,IntConstant } ; return)",
    "insertText": "XMConvertVectorIntToFloat(V.v, DivExponent)"
  },
  {
    "label": "XMASSERT()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "XMASSERT(IntConstant >= -16 && IntConstant <= 15)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i vScale =)",
    "insertText": "_mm_set1_epi32(IntConstant)"
  },
  {
    "label": "_mm_cvtepi32_ps()",
    "kind": "Method",
    "detail": "Function (XMVECTOR vResult =)",
    "insertText": "_mm_cvtepi32_ps(vScale)"
  },
  {
    "label": "x3F800000U()",
    "kind": "Method",
    "detail": "Function (UINT uScale = 0)",
    "insertText": "x3F800000U(DivExponent << 23)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (vScale =)",
    "insertText": "_mm_set1_epi32(uScale)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (vResult =)",
    "insertText": "_mm_mul_ps(vResult,reinterpret_cast<const __m128 *>(&vScale)[0])"
  },
  {
    "label": "XMVectorShiftLeft()",
    "kind": "Method",
    "detail": "Function (# endif } XMFINLINE XMVECTOR)",
    "insertText": "XMVectorShiftLeft(FXMVECTOR V1, FXMVECTOR V2, UINT Elements)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_XM_NO_INTRINSICS_) XMASSERT( Elements < 4)"
  },
  {
    "label": "vector4_f32()",
    "kind": "Method",
    "detail": "Function ({ XMVECTORF32 vResult = { V . vector4_f32 [ Elements& 3 ],V .)",
    "insertText": "vector4_f32(Elements + 1) & 3], V.vector4_f32[(Elements + 2) & 3], V.vector4_f32[(Elements + 3)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fy =)",
    "insertText": "XMVectorGetByIndex(V,((Elements) + 1) & 3)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fz =)",
    "insertText": "XMVectorGetByIndex(V,((Elements) + 2) & 3)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fw =)",
    "insertText": "XMVectorGetByIndex(V,((Elements) + 3) & 3)"
  },
  {
    "label": "vector4_f32()",
    "kind": "Method",
    "detail": "Function ({ XMVECTORF32 vResult = { V .)",
    "insertText": "vector4_f32(4 - (Elements)) & 3], V.vector4_f32[(5 - (Elements)) & 3], V.vector4_f32[(6 - (Elements)) & 3], V.vector4_f32[(7 - (Elements))"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fy =)",
    "insertText": "XMVectorGetByIndex(V,(5 - (Elements)) & 3)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fz =)",
    "insertText": "XMVectorGetByIndex(V,(6 - (Elements)) & 3)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fw =)",
    "insertText": "XMVectorGetByIndex(V,(7 - (Elements)) & 3)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_XM_NO_INTRINSICS_) XMASSERT( (E0 < 4) && (E1 < 4) && (E2 < 4) && (E3 < 4))"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function ({ XMVECTORF32 vResult = { V . vector4_f32 [ E0 ],V . vector4_f32 [ E1 ],V . vector4_f32 [ E2 ],V . vector4_f32 [ E3 ] } ; return vResult . v ; } # else FLOAT fx =)",
    "insertText": "XMVectorGetByIndex(V,E0)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fy =)",
    "insertText": "XMVectorGetByIndex(V,E1)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fz =)",
    "insertText": "XMVectorGetByIndex(V,E2)"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT fw =)",
    "insertText": "XMVectorGetByIndex(V,E3)"
  },
  {
    "label": "XMVectorSelectControl()",
    "kind": "Method",
    "detail": "Function (XMVECTOR Control =)",
    "insertText": "XMVectorSelectControl(Select0&1, Select1&1, Select2&1, Select3&1)"
  }
]