[
  {
    "label": "__vector4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__vector4"
  },
  {
    "label": "XMVECTORF32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORF32"
  },
  {
    "label": "XMVECTORI32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORI32"
  },
  {
    "label": "XMVECTORU8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORU8"
  },
  {
    "label": "XMVECTORU32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMVECTORU32"
  },
  {
    "label": "_XMMATRIX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMMATRIX"
  },
  {
    "label": "_XMMATRIX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMMATRIX"
  },
  {
    "label": "_XMFLOAT2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT2"
  },
  {
    "label": "XMFLOAT2A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT2A"
  },
  {
    "label": "_XMHALF2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHALF2"
  },
  {
    "label": "_XMSHORTN2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORTN2"
  },
  {
    "label": "_XMSHORT2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORT2"
  },
  {
    "label": "_XMUSHORTN2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORTN2"
  },
  {
    "label": "_XMUSHORT2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORT2"
  },
  {
    "label": "_XMFLOAT3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3"
  },
  {
    "label": "XMFLOAT3A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT3A"
  },
  {
    "label": "_XMHENDN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHENDN3"
  },
  {
    "label": "_XMHEND3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHEND3"
  },
  {
    "label": "_XMUHENDN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUHENDN3"
  },
  {
    "label": "_XMUHEND3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUHEND3"
  },
  {
    "label": "_XMDHENN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDHENN3"
  },
  {
    "label": "_XMDHEN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDHEN3"
  },
  {
    "label": "_XMUDHENN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDHENN3"
  },
  {
    "label": "_XMUDHEN3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDHEN3"
  },
  {
    "label": "_XMU565",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMU565"
  },
  {
    "label": "_XMFLOAT3PK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3PK"
  },
  {
    "label": "_XMFLOAT3SE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3SE"
  },
  {
    "label": "_XMFLOAT4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT4"
  },
  {
    "label": "XMFLOAT4A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT4A"
  },
  {
    "label": "_XMHALF4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMHALF4"
  },
  {
    "label": "_XMSHORTN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORTN4"
  },
  {
    "label": "_XMSHORT4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMSHORT4"
  },
  {
    "label": "_XMUSHORTN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORTN4"
  },
  {
    "label": "_XMUSHORT4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUSHORT4"
  },
  {
    "label": "_XMXDECN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXDECN4"
  },
  {
    "label": "_XMXDEC4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXDEC4"
  },
  {
    "label": "_XMDECN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDECN4"
  },
  {
    "label": "_XMDEC4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMDEC4"
  },
  {
    "label": "_XMUDECN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDECN4"
  },
  {
    "label": "_XMUDEC4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUDEC4"
  },
  {
    "label": "_XMXICON4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXICON4"
  },
  {
    "label": "_XMXICO4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMXICO4"
  },
  {
    "label": "_XMICON4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMICON4"
  },
  {
    "label": "_XMICO4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMICO4"
  },
  {
    "label": "_XMUICON4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUICON4"
  },
  {
    "label": "_XMUICO4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUICO4"
  },
  {
    "label": "_XMCOLOR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMCOLOR"
  },
  {
    "label": "_XMBYTEN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMBYTEN4"
  },
  {
    "label": "_XMBYTE4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMBYTE4"
  },
  {
    "label": "_XMUBYTEN4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUBYTEN4"
  },
  {
    "label": "_XMUBYTE4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUBYTE4"
  },
  {
    "label": "_XMUNIBBLE4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMUNIBBLE4"
  },
  {
    "label": "_XMU555",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMU555"
  },
  {
    "label": "_XMFLOAT3X3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT3X3"
  },
  {
    "label": "_XMFLOAT4X3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT4X3"
  },
  {
    "label": "XMFLOAT4X3A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT4X3A"
  },
  {
    "label": "_XMFLOAT4X4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XMFLOAT4X4"
  },
  {
    "label": "XMFLOAT4X4A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMFLOAT4X4A"
  },
  {
    "label": "XMConvertVectorIntToFloat()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMConvertVectorIntToFloat(FXMVECTOR VInt, UINT DivExponent)"
  },
  {
    "label": "XMConvertVectorFloatToInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMConvertVectorFloatToInt(FXMVECTOR VFloat, UINT MulExponent)"
  },
  {
    "label": "XMConvertVectorUIntToFloat()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMConvertVectorUIntToFloat(FXMVECTOR VUInt, UINT DivExponent)"
  },
  {
    "label": "XMConvertVectorFloatToUInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMConvertVectorFloatToUInt(FXMVECTOR VFloat, UINT MulExponent)"
  },
  {
    "label": "XMConvertHalfToFloat()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMConvertHalfToFloat(HALF Value)"
  },
  {
    "label": "XMConvertFloatToHalf()",
    "kind": "Method",
    "detail": "Function (HALF)",
    "insertText": "XMConvertFloatToHalf(FLOAT Value)"
  },
  {
    "label": "XMVectorSetBinaryConstant()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetBinaryConstant(UINT C0, UINT C1, UINT C2, UINT C3)"
  },
  {
    "label": "XMVectorSplatConstant()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatConstant(INT IntConstant, UINT DivExponent)"
  },
  {
    "label": "XMVectorSplatConstantInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatConstantInt(INT IntConstant)"
  },
  {
    "label": "XMLoadInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadInt(_In_ CONST UINT* pSource)"
  },
  {
    "label": "XMLoadFloat()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat(_In_ CONST FLOAT* pSource)"
  },
  {
    "label": "XMLoadFloat2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat2(_In_ CONST XMFLOAT2* pSource)"
  },
  {
    "label": "XMLoadFloat2A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat2A(_In_ CONST XMFLOAT2A* pSource)"
  },
  {
    "label": "XMLoadHalf2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHalf2(_In_ CONST XMHALF2* pSource)"
  },
  {
    "label": "XMLoadShortN2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShortN2(_In_ CONST XMSHORTN2* pSource)"
  },
  {
    "label": "XMLoadShort2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShort2(_In_ CONST XMSHORT2* pSource)"
  },
  {
    "label": "XMLoadUShortN2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShortN2(_In_ CONST XMUSHORTN2* pSource)"
  },
  {
    "label": "XMLoadUShort2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShort2(_In_ CONST XMUSHORT2* pSource)"
  },
  {
    "label": "XMLoadFloat3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3(_In_ CONST XMFLOAT3* pSource)"
  },
  {
    "label": "XMLoadFloat3A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3A(_In_ CONST XMFLOAT3A* pSource)"
  },
  {
    "label": "XMLoadHenDN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHenDN3(_In_ CONST XMHENDN3* pSource)"
  },
  {
    "label": "XMLoadHenD3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHenD3(_In_ CONST XMHEND3* pSource)"
  },
  {
    "label": "XMLoadUHenDN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUHenDN3(_In_ CONST XMUHENDN3* pSource)"
  },
  {
    "label": "XMLoadUHenD3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUHenD3(_In_ CONST XMUHEND3* pSource)"
  },
  {
    "label": "XMLoadDHenN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDHenN3(_In_ CONST XMDHENN3* pSource)"
  },
  {
    "label": "XMLoadDHen3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDHen3(_In_ CONST XMDHEN3* pSource)"
  },
  {
    "label": "XMLoadUDHenN3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDHenN3(_In_ CONST XMUDHENN3* pSource)"
  },
  {
    "label": "XMLoadUDHen3()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDHen3(_In_ CONST XMUDHEN3* pSource)"
  },
  {
    "label": "XMLoadU565()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadU565(_In_ CONST XMU565* pSource)"
  },
  {
    "label": "XMLoadFloat3PK()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3PK(_In_ CONST XMFLOAT3PK* pSource)"
  },
  {
    "label": "XMLoadFloat3SE()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat3SE(_In_ CONST XMFLOAT3SE* pSource)"
  },
  {
    "label": "XMLoadFloat4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat4(_In_ CONST XMFLOAT4* pSource)"
  },
  {
    "label": "XMLoadFloat4A()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadFloat4A(_In_ CONST XMFLOAT4A* pSource)"
  },
  {
    "label": "XMLoadHalf4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadHalf4(_In_ CONST XMHALF4* pSource)"
  },
  {
    "label": "XMLoadShortN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShortN4(_In_ CONST XMSHORTN4* pSource)"
  },
  {
    "label": "XMLoadShort4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadShort4(_In_ CONST XMSHORT4* pSource)"
  },
  {
    "label": "XMLoadUShortN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShortN4(_In_ CONST XMUSHORTN4* pSource)"
  },
  {
    "label": "XMLoadUShort4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUShort4(_In_ CONST XMUSHORT4* pSource)"
  },
  {
    "label": "XMLoadXIcoN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXIcoN4(_In_ CONST XMXICON4* pSource)"
  },
  {
    "label": "XMLoadXIco4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXIco4(_In_ CONST XMXICO4* pSource)"
  },
  {
    "label": "XMLoadIcoN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadIcoN4(_In_ CONST XMICON4* pSource)"
  },
  {
    "label": "XMLoadIco4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadIco4(_In_ CONST XMICO4* pSource)"
  },
  {
    "label": "XMLoadUIcoN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUIcoN4(_In_ CONST XMUICON4* pSource)"
  },
  {
    "label": "XMLoadUIco4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUIco4(_In_ CONST XMUICO4* pSource)"
  },
  {
    "label": "XMLoadXDecN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXDecN4(_In_ CONST XMXDECN4* pSource)"
  },
  {
    "label": "XMLoadXDec4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadXDec4(_In_ CONST XMXDEC4* pSource)"
  },
  {
    "label": "XMLoadDecN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDecN4(_In_ CONST XMDECN4* pSource)"
  },
  {
    "label": "XMLoadDec4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadDec4(_In_ CONST XMDEC4* pSource)"
  },
  {
    "label": "XMLoadUDecN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDecN4(_In_ CONST XMUDECN4* pSource)"
  },
  {
    "label": "XMLoadUDec4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUDec4(_In_ CONST XMUDEC4* pSource)"
  },
  {
    "label": "XMLoadByteN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadByteN4(_In_ CONST XMBYTEN4* pSource)"
  },
  {
    "label": "XMLoadByte4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadByte4(_In_ CONST XMBYTE4* pSource)"
  },
  {
    "label": "XMLoadUByteN4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUByteN4(_In_ CONST XMUBYTEN4* pSource)"
  },
  {
    "label": "XMLoadUByte4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUByte4(_In_ CONST XMUBYTE4* pSource)"
  },
  {
    "label": "XMLoadUNibble4()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadUNibble4(_In_ CONST XMUNIBBLE4* pSource)"
  },
  {
    "label": "XMLoadU555()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadU555(_In_ CONST XMU555* pSource)"
  },
  {
    "label": "XMLoadColor()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMLoadColor(_In_ CONST XMCOLOR* pSource)"
  },
  {
    "label": "XMLoadFloat3x3()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat3x3(_In_ CONST XMFLOAT3X3* pSource)"
  },
  {
    "label": "XMLoadFloat4x3()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x3(_In_ CONST XMFLOAT4X3* pSource)"
  },
  {
    "label": "XMLoadFloat4x3A()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x3A(_In_ CONST XMFLOAT4X3A* pSource)"
  },
  {
    "label": "XMLoadFloat4x4()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x4(_In_ CONST XMFLOAT4X4* pSource)"
  },
  {
    "label": "XMLoadFloat4x4A()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMLoadFloat4x4A(_In_ CONST XMFLOAT4X4A* pSource)"
  },
  {
    "label": "XMStoreInt()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt(_Out_ UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat(_Out_ FLOAT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat2(_Out_ XMFLOAT2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat2A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat2A(_Out_ XMFLOAT2A* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHalf2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHalf2(_Out_ XMHALF2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShortN2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShortN2(_Out_ XMSHORTN2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShort2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShort2(_Out_ XMSHORT2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShortN2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShortN2(_Out_ XMUSHORTN2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShort2()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShort2(_Out_ XMUSHORT2* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3(_Out_ XMFLOAT3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3A(_Out_ XMFLOAT3A* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHenDN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHenDN3(_Out_ XMHENDN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHenD3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHenD3(_Out_ XMHEND3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUHenDN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUHenDN3(_Out_ XMUHENDN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUHenD3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUHenD3(_Out_ XMUHEND3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDHenN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDHenN3(_Out_ XMDHENN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDHen3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDHen3(_Out_ XMDHEN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDHenN3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDHenN3(_Out_ XMUDHENN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDHen3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDHen3(_Out_ XMUDHEN3* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreU565()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreU565(_Out_ XMU565* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3PK()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3PK(_Out_ XMFLOAT3PK* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3SE()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3SE(_Out_ XMFLOAT3SE* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreInt4NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreInt4NC(_Out_ UINT* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4(_Out_ XMFLOAT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat4A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4A(_Out_ XMFLOAT4A* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat4NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4NC(_Out_ XMFLOAT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreHalf4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreHalf4(_Out_ XMHALF4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShortN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShortN4(_Out_ XMSHORTN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreShort4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreShort4(_Out_ XMSHORT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShortN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShortN4(_Out_ XMUSHORTN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUShort4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUShort4(_Out_ XMUSHORT4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXIcoN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXIcoN4(_Out_ XMXICON4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXIco4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXIco4(_Out_ XMXICO4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreIcoN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreIcoN4(_Out_ XMICON4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreIco4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreIco4(_Out_ XMICO4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUIcoN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUIcoN4(_Out_ XMUICON4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUIco4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUIco4(_Out_ XMUICO4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXDecN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXDecN4(_Out_ XMXDECN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreXDec4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreXDec4(_Out_ XMXDEC4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDecN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDecN4(_Out_ XMDECN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreDec4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreDec4(_Out_ XMDEC4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDecN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDecN4(_Out_ XMUDECN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUDec4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUDec4(_Out_ XMUDEC4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreByteN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreByteN4(_Out_ XMBYTEN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreByte4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreByte4(_Out_ XMBYTE4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUByteN4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUByteN4(_Out_ XMUBYTEN4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUByte4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUByte4(_Out_ XMUBYTE4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreUNibble4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreUNibble4(_Out_ XMUNIBBLE4* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreU555()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreU555(_Out_ XMU555* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreColor()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreColor(_Out_ XMCOLOR* pDestination, FXMVECTOR V)"
  },
  {
    "label": "XMStoreFloat3x3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3x3(_Out_ XMFLOAT3X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat3x3NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat3x3NC(_Out_ XMFLOAT3X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x3()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x3(_Out_ XMFLOAT4X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x3A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x3A(_Out_ XMFLOAT4X3A* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x3NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x3NC(_Out_ XMFLOAT4X3* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x4()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x4(_Out_ XMFLOAT4X4* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x4A()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x4A(_Out_ XMFLOAT4X4A* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMStoreFloat4x4NC()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMStoreFloat4x4NC(_Out_ XMFLOAT4X4* pDestination, CXMMATRIX M)"
  },
  {
    "label": "XMVectorZero()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorZero()"
  },
  {
    "label": "XMVectorSet()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSet(FLOAT x, FLOAT y, FLOAT z, FLOAT w)"
  },
  {
    "label": "XMVectorSetInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetInt(UINT x, UINT y, UINT z, UINT w)"
  },
  {
    "label": "XMVectorReplicate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicate(FLOAT Value)"
  },
  {
    "label": "XMVectorReplicatePtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicatePtr(_In_ CONST FLOAT *pValue)"
  },
  {
    "label": "XMVectorReplicateInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicateInt(UINT Value)"
  },
  {
    "label": "XMVectorReplicateIntPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReplicateIntPtr(_In_ CONST UINT *pValue)"
  },
  {
    "label": "XMVectorTrueInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTrueInt()"
  },
  {
    "label": "XMVectorFalseInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorFalseInt()"
  },
  {
    "label": "XMVectorSplatX()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatX(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatY(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatZ()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatZ(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatW(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSplatOne()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatOne()"
  },
  {
    "label": "XMVectorSplatInfinity()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatInfinity()"
  },
  {
    "label": "XMVectorSplatQNaN()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatQNaN()"
  },
  {
    "label": "XMVectorSplatEpsilon()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatEpsilon()"
  },
  {
    "label": "XMVectorSplatSignMask()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSplatSignMask()"
  },
  {
    "label": "XMVectorGetByIndex()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetByIndex(FXMVECTOR V,UINT i)"
  },
  {
    "label": "XMVectorGetX()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetX(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetY()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetY(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetZ()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetZ(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetW()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMVectorGetW(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetByIndexPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetByIndexPtr(_Out_ FLOAT *f, FXMVECTOR V, UINT i)"
  },
  {
    "label": "XMVectorGetXPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetXPtr(_Out_ FLOAT *x, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetYPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetYPtr(_Out_ FLOAT *y, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetZPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetZPtr(_Out_ FLOAT *z, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetWPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetWPtr(_Out_ FLOAT *w, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntByIndex()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntByIndex(FXMVECTOR V,UINT i)"
  },
  {
    "label": "XMVectorGetIntX()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntX(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntY()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntY(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntZ()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntZ(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntW()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVectorGetIntW(FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntByIndexPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntByIndexPtr(_Out_ UINT *x,FXMVECTOR V, UINT i)"
  },
  {
    "label": "XMVectorGetIntXPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntXPtr(_Out_ UINT *x, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntYPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntYPtr(_Out_ UINT *y, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntZPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntZPtr(_Out_ UINT *z, FXMVECTOR V)"
  },
  {
    "label": "XMVectorGetIntWPtr()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorGetIntWPtr(_Out_ UINT *w, FXMVECTOR V)"
  },
  {
    "label": "XMVectorSetByIndex()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetByIndex(FXMVECTOR V,FLOAT f,UINT i)"
  },
  {
    "label": "XMVectorSetX()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetX(FXMVECTOR V, FLOAT x)"
  },
  {
    "label": "XMVectorSetY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetY(FXMVECTOR V, FLOAT y)"
  },
  {
    "label": "XMVectorSetZ()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetZ(FXMVECTOR V, FLOAT z)"
  },
  {
    "label": "XMVectorSetW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetW(FXMVECTOR V, FLOAT w)"
  },
  {
    "label": "XMVectorSetByIndexPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetByIndexPtr(FXMVECTOR V, _In_ CONST FLOAT *f, UINT i)"
  },
  {
    "label": "XMVectorSetXPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetXPtr(FXMVECTOR V, _In_ CONST FLOAT *x)"
  },
  {
    "label": "XMVectorSetYPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetYPtr(FXMVECTOR V, _In_ CONST FLOAT *y)"
  },
  {
    "label": "XMVectorSetZPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetZPtr(FXMVECTOR V, _In_ CONST FLOAT *z)"
  },
  {
    "label": "XMVectorSetWPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetWPtr(FXMVECTOR V, _In_ CONST FLOAT *w)"
  },
  {
    "label": "XMVectorSetIntByIndex()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntByIndex(FXMVECTOR V, UINT x,UINT i)"
  },
  {
    "label": "XMVectorSetIntX()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntX(FXMVECTOR V, UINT x)"
  },
  {
    "label": "XMVectorSetIntY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntY(FXMVECTOR V, UINT y)"
  },
  {
    "label": "XMVectorSetIntZ()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntZ(FXMVECTOR V, UINT z)"
  },
  {
    "label": "XMVectorSetIntW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntW(FXMVECTOR V, UINT w)"
  },
  {
    "label": "XMVectorSetIntByIndexPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntByIndexPtr(FXMVECTOR V, _In_ CONST UINT *x, UINT i)"
  },
  {
    "label": "XMVectorSetIntXPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntXPtr(FXMVECTOR V, _In_ CONST UINT *x)"
  },
  {
    "label": "XMVectorSetIntYPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntYPtr(FXMVECTOR V, _In_ CONST UINT *y)"
  },
  {
    "label": "XMVectorSetIntZPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntZPtr(FXMVECTOR V, _In_ CONST UINT *z)"
  },
  {
    "label": "XMVectorSetIntWPtr()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSetIntWPtr(FXMVECTOR V, _In_ CONST UINT *w)"
  },
  {
    "label": "XMVectorPermuteControl()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPermuteControl(UINT ElementIndex0, UINT ElementIndex1, UINT ElementIndex2, UINT ElementIndex3)"
  },
  {
    "label": "XMVectorPermute()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPermute(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Control)"
  },
  {
    "label": "XMVectorSelectControl()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSelectControl(UINT VectorIndex0, UINT VectorIndex1, UINT VectorIndex2, UINT VectorIndex3)"
  },
  {
    "label": "XMVectorSelect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSelect(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Control)"
  },
  {
    "label": "XMVectorMergeXY()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMergeXY(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMergeZW()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMergeZW(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorShiftLeft()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorShiftLeft(FXMVECTOR V1, FXMVECTOR V2, UINT Elements)"
  },
  {
    "label": "XMVectorRotateLeft()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorRotateLeft(FXMVECTOR V, UINT Elements)"
  },
  {
    "label": "XMVectorRotateRight()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorRotateRight(FXMVECTOR V, UINT Elements)"
  },
  {
    "label": "XMVectorSwizzle()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSwizzle(FXMVECTOR V, UINT E0, UINT E1, UINT E2, UINT E3)"
  },
  {
    "label": "XMVectorInsert()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorInsert(FXMVECTOR VD, FXMVECTOR VS, UINT VSLeftRotateElements,\n                        UINT Select0, UINT Select1, UINT Select2, UINT Select3)"
  },
  {
    "label": "XMVectorEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorEqualR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorEqualR(_Out_ UINT* pCR, FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorEqualInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorEqualIntR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorEqualIntR(_Out_ UINT* pCR, FXMVECTOR V, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNearEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVectorNotEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNotEqualInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreater()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreaterR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreaterR(_Out_ UINT* pCR, FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorGreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorGreaterOrEqualR(_Out_ UINT* pCR, FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorLess()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLess(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorLessOrEqual()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorInBounds()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorInBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVectorInBoundsR()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorInBoundsR(_Out_ UINT* pCR, FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVectorIsNaN()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorIsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVectorIsInfinite()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorIsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVectorMin()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMin(FXMVECTOR V1,FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMax()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMax(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorRound()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorRound(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTruncate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTruncate(FXMVECTOR V)"
  },
  {
    "label": "XMVectorFloor()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorFloor(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCeiling()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCeiling(FXMVECTOR V)"
  },
  {
    "label": "XMVectorClamp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorClamp(FXMVECTOR V, FXMVECTOR Min, FXMVECTOR Max)"
  },
  {
    "label": "XMVectorSaturate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSaturate(FXMVECTOR V)"
  },
  {
    "label": "XMVectorAndInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAndInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorAndCInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAndCInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorOrInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorOrInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNorInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNorInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorXorInt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorXorInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNegate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNegate(FXMVECTOR V)"
  },
  {
    "label": "XMVectorAdd()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAdd(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorAddAngles()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAddAngles(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorSubtract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSubtract(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorSubtractAngles()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSubtractAngles(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMultiply()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMultiply(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMultiplyAdd(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3)"
  },
  {
    "label": "XMVectorDivide()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorDivide(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorNegativeMultiplySubtract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorNegativeMultiplySubtract(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3)"
  },
  {
    "label": "XMVectorScale()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorScale(FXMVECTOR V, FLOAT ScaleFactor)"
  },
  {
    "label": "XMVectorReciprocalEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocalEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorReciprocal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocal(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSqrtEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSqrtEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSqrt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSqrt(FXMVECTOR V)"
  },
  {
    "label": "XMVectorReciprocalSqrtEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocalSqrtEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorReciprocalSqrt(FXMVECTOR V)"
  },
  {
    "label": "XMVectorExpEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorExpEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorExp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorExp(FXMVECTOR V)"
  },
  {
    "label": "XMVectorLogEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLogEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorLog()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLog(FXMVECTOR V)"
  },
  {
    "label": "XMVectorPowEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPowEst(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorPow()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorPow(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorAbs()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorAbs(FXMVECTOR V)"
  },
  {
    "label": "XMVectorMod()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorMod(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVectorModAngles()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorModAngles(FXMVECTOR Angles)"
  },
  {
    "label": "XMVectorSin()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSin(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSinEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCos()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCos(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCosEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCosEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinCos()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorSinCos(_Out_ XMVECTOR* pSin, _Out_ XMVECTOR* pCos, FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinCosEst()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVectorSinCosEst(_Out_ XMVECTOR* pSin, _Out_ XMVECTOR* pCos, FXMVECTOR V)"
  },
  {
    "label": "XMVectorTan()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTan(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTanEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTanEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinH()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSinH(FXMVECTOR V)"
  },
  {
    "label": "XMVectorSinHEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorSinHEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCosH()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCosH(FXMVECTOR V)"
  },
  {
    "label": "XMVectorCosHEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCosHEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTanH()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTanH(FXMVECTOR V)"
  },
  {
    "label": "XMVectorTanHEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorTanHEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorASin()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorASin(FXMVECTOR V)"
  },
  {
    "label": "XMVectorASinEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorASinEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorACos()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorACos(FXMVECTOR V)"
  },
  {
    "label": "XMVectorACosEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorACosEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorATan()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATan(FXMVECTOR V)"
  },
  {
    "label": "XMVectorATanEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATanEst(FXMVECTOR V)"
  },
  {
    "label": "XMVectorATan2()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATan2(FXMVECTOR Y, FXMVECTOR X)"
  },
  {
    "label": "XMVectorATan2Est()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorATan2Est(FXMVECTOR Y, FXMVECTOR X)"
  },
  {
    "label": "XMVectorLerp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLerp(FXMVECTOR V0, FXMVECTOR V1, FLOAT t)"
  },
  {
    "label": "XMVectorLerpV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorLerpV(FXMVECTOR V0, FXMVECTOR V1, FXMVECTOR T)"
  },
  {
    "label": "XMVectorHermite()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorHermite(FXMVECTOR Position0, FXMVECTOR Tangent0, FXMVECTOR Position1, CXMVECTOR Tangent1, FLOAT t)"
  },
  {
    "label": "XMVectorHermiteV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorHermiteV(FXMVECTOR Position0, FXMVECTOR Tangent0, FXMVECTOR Position1, CXMVECTOR Tangent1, CXMVECTOR T)"
  },
  {
    "label": "XMVectorCatmullRom()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCatmullRom(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, CXMVECTOR Position3, FLOAT t)"
  },
  {
    "label": "XMVectorCatmullRomV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorCatmullRomV(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, CXMVECTOR Position3, CXMVECTOR T)"
  },
  {
    "label": "XMVectorBaryCentric()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorBaryCentric(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, FLOAT f, FLOAT g)"
  },
  {
    "label": "XMVectorBaryCentricV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVectorBaryCentricV(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, CXMVECTOR F, CXMVECTOR G)"
  },
  {
    "label": "XMVector2Equal()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2Equal(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2EqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2EqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2EqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2EqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2EqualIntR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2EqualIntR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2NearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVector2NotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2NotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2NotEqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2NotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2Greater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2Greater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2GreaterR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2GreaterR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2GreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2GreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2Less()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2Less(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2LessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2LessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2InBounds()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2InBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector2InBoundsR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector2InBoundsR(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector2IsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2IsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVector2IsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector2IsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVector2Dot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Dot(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2Cross()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Cross(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2LengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2LengthSq(FXMVECTOR V)"
  },
  {
    "label": "XMVector2ReciprocalLengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ReciprocalLengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector2ReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ReciprocalLength(FXMVECTOR V)"
  },
  {
    "label": "XMVector2LengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2LengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector2Length()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Length(FXMVECTOR V)"
  },
  {
    "label": "XMVector2NormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2NormalizeEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector2Normalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Normalize(FXMVECTOR V)"
  },
  {
    "label": "XMVector2ClampLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ClampLength(FXMVECTOR V, FLOAT LengthMin, FLOAT LengthMax)"
  },
  {
    "label": "XMVector2ClampLengthV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax)"
  },
  {
    "label": "XMVector2Reflect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Reflect(FXMVECTOR Incident, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector2Refract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Refract(FXMVECTOR Incident, FXMVECTOR Normal, FLOAT RefractionIndex)"
  },
  {
    "label": "XMVector2RefractV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMVector2Orthogonal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Orthogonal(FXMVECTOR V)"
  },
  {
    "label": "XMVector2AngleBetweenNormalsEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector2AngleBetweenNormals()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector2AngleBetweenVectors()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector2LinePointDistance()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2LinePointDistance(FXMVECTOR LinePoint1, FXMVECTOR LinePoint2, FXMVECTOR Point)"
  },
  {
    "label": "XMVector2IntersectLine()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2IntersectLine(FXMVECTOR Line1Point1, FXMVECTOR Line1Point2, FXMVECTOR Line2Point1, CXMVECTOR Line2Point2)"
  },
  {
    "label": "XMVector2Transform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2Transform(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformCoord()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2TransformCoord(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector2TransformNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector2TransformNormal(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector3Equal()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3Equal(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3EqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3EqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3EqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3EqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3EqualIntR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3EqualIntR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3NearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVector3NotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3NotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3NotEqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3NotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3Greater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3Greater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3GreaterR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3GreaterR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3GreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3GreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3Less()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3Less(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3LessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3LessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3InBounds()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3InBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector3InBoundsR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector3InBoundsR(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector3IsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3IsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVector3IsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector3IsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVector3Dot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Dot(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3Cross()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Cross(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3LengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3LengthSq(FXMVECTOR V)"
  },
  {
    "label": "XMVector3ReciprocalLengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ReciprocalLengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector3ReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ReciprocalLength(FXMVECTOR V)"
  },
  {
    "label": "XMVector3LengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3LengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector3Length()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Length(FXMVECTOR V)"
  },
  {
    "label": "XMVector3NormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3NormalizeEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector3Normalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Normalize(FXMVECTOR V)"
  },
  {
    "label": "XMVector3ClampLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ClampLength(FXMVECTOR V, FLOAT LengthMin, FLOAT LengthMax)"
  },
  {
    "label": "XMVector3ClampLengthV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax)"
  },
  {
    "label": "XMVector3Reflect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Reflect(FXMVECTOR Incident, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector3Refract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Refract(FXMVECTOR Incident, FXMVECTOR Normal, FLOAT RefractionIndex)"
  },
  {
    "label": "XMVector3RefractV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMVector3Orthogonal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Orthogonal(FXMVECTOR V)"
  },
  {
    "label": "XMVector3AngleBetweenNormalsEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector3AngleBetweenNormals()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector3AngleBetweenVectors()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector3LinePointDistance()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3LinePointDistance(FXMVECTOR LinePoint1, FXMVECTOR LinePoint2, FXMVECTOR Point)"
  },
  {
    "label": "XMVector3ComponentsFromNormal()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMVector3ComponentsFromNormal(_Out_ XMVECTOR* pParallel, _Out_ XMVECTOR* pPerpendicular, FXMVECTOR V, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector3Rotate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Rotate(FXMVECTOR V, FXMVECTOR RotationQuaternion)"
  },
  {
    "label": "XMVector3InverseRotate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3InverseRotate(FXMVECTOR V, FXMVECTOR RotationQuaternion)"
  },
  {
    "label": "XMVector3Transform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Transform(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformCoord()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3TransformCoord(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector3TransformNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3TransformNormal(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMVector3Project()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Project(FXMVECTOR V, FLOAT ViewportX, FLOAT ViewportY, FLOAT ViewportWidth, FLOAT ViewportHeight, FLOAT ViewportMinZ, FLOAT ViewportMaxZ, \n                    CXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World)"
  },
  {
    "label": "XMVector3Unproject()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector3Unproject(FXMVECTOR V, FLOAT ViewportX, FLOAT ViewportY, FLOAT ViewportWidth, FLOAT ViewportHeight, FLOAT ViewportMinZ, FLOAT ViewportMaxZ, \n                    CXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World)"
  },
  {
    "label": "XMVector4Equal()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4Equal(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4EqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4EqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4EqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4EqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4EqualIntR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4EqualIntR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4NearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMVector4NotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4NotEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4NotEqualInt()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4NotEqualInt(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Greater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4Greater(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4GreaterR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4GreaterR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4GreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4GreaterOrEqualR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Less()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4Less(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4LessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4LessOrEqual(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4InBounds()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4InBounds(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector4InBoundsR()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "XMVector4InBoundsR(FXMVECTOR V, FXMVECTOR Bounds)"
  },
  {
    "label": "XMVector4IsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4IsNaN(FXMVECTOR V)"
  },
  {
    "label": "XMVector4IsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVector4IsInfinite(FXMVECTOR V)"
  },
  {
    "label": "XMVector4Dot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Dot(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Cross()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Cross(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3)"
  },
  {
    "label": "XMVector4LengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4LengthSq(FXMVECTOR V)"
  },
  {
    "label": "XMVector4ReciprocalLengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ReciprocalLengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector4ReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ReciprocalLength(FXMVECTOR V)"
  },
  {
    "label": "XMVector4LengthEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4LengthEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector4Length()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Length(FXMVECTOR V)"
  },
  {
    "label": "XMVector4NormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4NormalizeEst(FXMVECTOR V)"
  },
  {
    "label": "XMVector4Normalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Normalize(FXMVECTOR V)"
  },
  {
    "label": "XMVector4ClampLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ClampLength(FXMVECTOR V, FLOAT LengthMin, FLOAT LengthMax)"
  },
  {
    "label": "XMVector4ClampLengthV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax)"
  },
  {
    "label": "XMVector4Reflect()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Reflect(FXMVECTOR Incident, FXMVECTOR Normal)"
  },
  {
    "label": "XMVector4Refract()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Refract(FXMVECTOR Incident, FXMVECTOR Normal, FLOAT RefractionIndex)"
  },
  {
    "label": "XMVector4RefractV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMVector4Orthogonal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Orthogonal(FXMVECTOR V)"
  },
  {
    "label": "XMVector4AngleBetweenNormalsEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector4AngleBetweenNormals()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2)"
  },
  {
    "label": "XMVector4AngleBetweenVectors()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2)"
  },
  {
    "label": "XMVector4Transform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMVector4Transform(FXMVECTOR V, CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixIsNaN(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixIsInfinite(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIsIdentity()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixIsIdentity(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixMultiply()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixMultiply(CXMMATRIX M1, CXMMATRIX M2)"
  },
  {
    "label": "XMMatrixMultiplyTranspose()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixMultiplyTranspose(CXMMATRIX M1, CXMMATRIX M2)"
  },
  {
    "label": "XMMatrixTranspose()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTranspose(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixInverse()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixInverse(_Out_ XMVECTOR* pDeterminant, CXMMATRIX M)"
  },
  {
    "label": "XMMatrixDeterminant()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMMatrixDeterminant(CXMMATRIX M)"
  },
  {
    "label": "XMMatrixDecompose()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMMatrixDecompose(_Out_ XMVECTOR *outScale, _Out_ XMVECTOR *outRotQuat, _Out_ XMVECTOR *outTrans, CXMMATRIX M)"
  },
  {
    "label": "XMMatrixIdentity()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixIdentity()"
  },
  {
    "label": "XMMatrixSet()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixSet(FLOAT m00, FLOAT m01, FLOAT m02, FLOAT m03,\n                         FLOAT m10, FLOAT m11, FLOAT m12, FLOAT m13,\n                         FLOAT m20, FLOAT m21, FLOAT m22, FLOAT m23,\n                         FLOAT m30, FLOAT m31, FLOAT m32, FLOAT m33)"
  },
  {
    "label": "XMMatrixTranslation()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTranslation(FLOAT OffsetX, FLOAT OffsetY, FLOAT OffsetZ)"
  },
  {
    "label": "XMMatrixTranslationFromVector()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTranslationFromVector(FXMVECTOR Offset)"
  },
  {
    "label": "XMMatrixScaling()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixScaling(FLOAT ScaleX, FLOAT ScaleY, FLOAT ScaleZ)"
  },
  {
    "label": "XMMatrixScalingFromVector()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixScalingFromVector(FXMVECTOR Scale)"
  },
  {
    "label": "XMMatrixRotationX()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationX(FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationY()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationY(FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationZ()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationZ(FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationRollPitchYaw()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationRollPitchYaw(FLOAT Pitch, FLOAT Yaw, FLOAT Roll)"
  },
  {
    "label": "XMMatrixRotationRollPitchYawFromVector()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationRollPitchYawFromVector(FXMVECTOR Angles)"
  },
  {
    "label": "XMMatrixRotationNormal()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationNormal(FXMVECTOR NormalAxis, FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationAxis()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationAxis(FXMVECTOR Axis, FLOAT Angle)"
  },
  {
    "label": "XMMatrixRotationQuaternion()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixRotationQuaternion(FXMVECTOR Quaternion)"
  },
  {
    "label": "XMMatrixTransformation2D()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTransformation2D(FXMVECTOR ScalingOrigin, FLOAT ScalingOrientation, FXMVECTOR Scaling, \n                    FXMVECTOR RotationOrigin, FLOAT Rotation, CXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixTransformation()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixTransformation(FXMVECTOR ScalingOrigin, FXMVECTOR ScalingOrientationQuaternion, FXMVECTOR Scaling, \n                    CXMVECTOR RotationOrigin, CXMVECTOR RotationQuaternion, CXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixAffineTransformation2D()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixAffineTransformation2D(FXMVECTOR Scaling, FXMVECTOR RotationOrigin, FLOAT Rotation, FXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixAffineTransformation()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixAffineTransformation(FXMVECTOR Scaling, FXMVECTOR RotationOrigin, FXMVECTOR RotationQuaternion, CXMVECTOR Translation)"
  },
  {
    "label": "XMMatrixReflect()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixReflect(FXMVECTOR ReflectionPlane)"
  },
  {
    "label": "XMMatrixShadow()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixShadow(FXMVECTOR ShadowPlane, FXMVECTOR LightPosition)"
  },
  {
    "label": "XMMatrixLookAtLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookAtLH(FXMVECTOR EyePosition, FXMVECTOR FocusPosition, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixLookAtRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookAtRH(FXMVECTOR EyePosition, FXMVECTOR FocusPosition, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixLookToLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookToLH(FXMVECTOR EyePosition, FXMVECTOR EyeDirection, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixLookToRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixLookToRH(FXMVECTOR EyePosition, FXMVECTOR EyeDirection, FXMVECTOR UpDirection)"
  },
  {
    "label": "XMMatrixPerspectiveLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveLH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveRH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveFovLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveFovLH(FLOAT FovAngleY, FLOAT AspectHByW, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveFovRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveFovRH(FLOAT FovAngleY, FLOAT AspectHByW, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveOffCenterLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveOffCenterLH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixPerspectiveOffCenterRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixPerspectiveOffCenterRH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicLH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicRH(FLOAT ViewWidth, FLOAT ViewHeight, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicOffCenterLH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicOffCenterLH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMMatrixOrthographicOffCenterRH()",
    "kind": "Method",
    "detail": "Function (XMMATRIX)",
    "insertText": "XMMatrixOrthographicOffCenterRH(FLOAT ViewLeft, FLOAT ViewRight, FLOAT ViewBottom, FLOAT ViewTop, FLOAT NearZ, FLOAT FarZ)"
  },
  {
    "label": "XMQuaternionEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionEqual(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionNotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionNotEqual(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionIsNaN(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionIsInfinite(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionIsIdentity()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMQuaternionIsIdentity(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionDot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionDot(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionMultiply(FXMVECTOR Q1, FXMVECTOR Q2)"
  },
  {
    "label": "XMQuaternionLengthSq()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionLengthSq(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionReciprocalLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionReciprocalLength(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionLength()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionLength(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionNormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionNormalizeEst(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionNormalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionNormalize(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionConjugate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionConjugate(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionInverse()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionInverse(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionLn()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionLn(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionExp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionExp(FXMVECTOR Q)"
  },
  {
    "label": "XMQuaternionSlerp()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSlerp(FXMVECTOR Q0, FXMVECTOR Q1, FLOAT t)"
  },
  {
    "label": "XMQuaternionSlerpV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSlerpV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR T)"
  },
  {
    "label": "XMQuaternionSquad()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSquad(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR Q3, FLOAT t)"
  },
  {
    "label": "XMQuaternionSquadV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionSquadV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR Q3, CXMVECTOR T)"
  },
  {
    "label": "XMQuaternionSquadSetup()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMQuaternionSquadSetup(_Out_ XMVECTOR* pA, _Out_ XMVECTOR* pB, _Out_ XMVECTOR* pC, FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR Q3)"
  },
  {
    "label": "XMQuaternionBaryCentric()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionBaryCentric(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, FLOAT f, FLOAT g)"
  },
  {
    "label": "XMQuaternionBaryCentricV()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionBaryCentricV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, CXMVECTOR F, CXMVECTOR G)"
  },
  {
    "label": "XMQuaternionIdentity()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionIdentity()"
  },
  {
    "label": "XMQuaternionRotationRollPitchYaw()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationRollPitchYaw(FLOAT Pitch, FLOAT Yaw, FLOAT Roll)"
  },
  {
    "label": "XMQuaternionRotationRollPitchYawFromVector()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationRollPitchYawFromVector(FXMVECTOR Angles)"
  },
  {
    "label": "XMQuaternionRotationNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationNormal(FXMVECTOR NormalAxis, FLOAT Angle)"
  },
  {
    "label": "XMQuaternionRotationAxis()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationAxis(FXMVECTOR Axis, FLOAT Angle)"
  },
  {
    "label": "XMQuaternionRotationMatrix()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMQuaternionRotationMatrix(CXMMATRIX M)"
  },
  {
    "label": "XMQuaternionToAxisAngle()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMQuaternionToAxisAngle(_Out_ XMVECTOR* pAxis, _Out_ FLOAT* pAngle, FXMVECTOR Q)"
  },
  {
    "label": "XMPlaneEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneEqual(FXMVECTOR P1, FXMVECTOR P2)"
  },
  {
    "label": "XMPlaneNearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneNearEqual(FXMVECTOR P1, FXMVECTOR P2, FXMVECTOR Epsilon)"
  },
  {
    "label": "XMPlaneNotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneNotEqual(FXMVECTOR P1, FXMVECTOR P2)"
  },
  {
    "label": "XMPlaneIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneIsNaN(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMPlaneIsInfinite(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneDot()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneDot(FXMVECTOR P, FXMVECTOR V)"
  },
  {
    "label": "XMPlaneDotCoord()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneDotCoord(FXMVECTOR P, FXMVECTOR V)"
  },
  {
    "label": "XMPlaneDotNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneDotNormal(FXMVECTOR P, FXMVECTOR V)"
  },
  {
    "label": "XMPlaneNormalizeEst()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneNormalizeEst(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneNormalize()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneNormalize(FXMVECTOR P)"
  },
  {
    "label": "XMPlaneIntersectLine()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneIntersectLine(FXMVECTOR P, FXMVECTOR LinePoint1, FXMVECTOR LinePoint2)"
  },
  {
    "label": "XMPlaneIntersectPlane()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMPlaneIntersectPlane(_Out_ XMVECTOR* pLinePoint1, _Out_ XMVECTOR* pLinePoint2, FXMVECTOR P1, FXMVECTOR P2)"
  },
  {
    "label": "XMPlaneTransform()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneTransform(FXMVECTOR P, CXMMATRIX M)"
  },
  {
    "label": "XMPlaneFromPointNormal()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneFromPointNormal(FXMVECTOR Point, FXMVECTOR Normal)"
  },
  {
    "label": "XMPlaneFromPoints()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMPlaneFromPoints(FXMVECTOR Point1, FXMVECTOR Point2, FXMVECTOR Point3)"
  },
  {
    "label": "XMColorEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorNotEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorNotEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorGreater()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorGreater(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorGreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorGreaterOrEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorLess()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorLess(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorLessOrEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorLessOrEqual(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorIsNaN()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorIsNaN(FXMVECTOR C)"
  },
  {
    "label": "XMColorIsInfinite()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMColorIsInfinite(FXMVECTOR C)"
  },
  {
    "label": "XMColorNegative()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorNegative(FXMVECTOR C)"
  },
  {
    "label": "XMColorModulate()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorModulate(FXMVECTOR C1, FXMVECTOR C2)"
  },
  {
    "label": "XMColorAdjustSaturation()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorAdjustSaturation(FXMVECTOR C, FLOAT Saturation)"
  },
  {
    "label": "XMColorAdjustContrast()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMColorAdjustContrast(FXMVECTOR C, FLOAT Contrast)"
  },
  {
    "label": "XMVerifyCPUSupport()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMVerifyCPUSupport()"
  },
  {
    "label": "XMAssert()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMAssert(_In_z_ CONST CHAR* pExpression, _In_z_ CONST CHAR* pFileName, UINT LineNumber)"
  },
  {
    "label": "XMFresnelTerm()",
    "kind": "Method",
    "detail": "Function (XMVECTOR)",
    "insertText": "XMFresnelTerm(FXMVECTOR CosIncidentAngle, FXMVECTOR RefractionIndex)"
  },
  {
    "label": "XMScalarNearEqual()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "XMScalarNearEqual(FLOAT S1, FLOAT S2, FLOAT Epsilon)"
  },
  {
    "label": "XMScalarModAngle()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarModAngle(FLOAT Value)"
  },
  {
    "label": "XMScalarSin()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarSin(FLOAT Value)"
  },
  {
    "label": "XMScalarCos()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarCos(FLOAT Value)"
  },
  {
    "label": "XMScalarSinCos()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMScalarSinCos(_Out_ FLOAT* pSin, _Out_ FLOAT* pCos, FLOAT Value)"
  },
  {
    "label": "XMScalarASin()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarASin(FLOAT Value)"
  },
  {
    "label": "XMScalarACos()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarACos(FLOAT Value)"
  },
  {
    "label": "XMScalarSinEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarSinEst(FLOAT Value)"
  },
  {
    "label": "XMScalarCosEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarCosEst(FLOAT Value)"
  },
  {
    "label": "XMScalarSinCosEst()",
    "kind": "Method",
    "detail": "Function (VOID)",
    "insertText": "XMScalarSinCosEst(_Out_ FLOAT* pSin, _Out_ FLOAT* pCos, FLOAT Value)"
  },
  {
    "label": "XMScalarASinEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarASinEst(FLOAT Value)"
  },
  {
    "label": "XMScalarACosEst()",
    "kind": "Method",
    "detail": "Function (FLOAT)",
    "insertText": "XMScalarACosEst(FLOAT Value)"
  },
  {
    "label": "XMConvertVectorIntToFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "XMConvertVectorIntToFloat( V.v, DivExponent)"
  },
  {
    "label": "XMASSERT()",
    "kind": "Method",
    "detail": "Function (XM_SSE_INTRINSICS_)",
    "insertText": "XMASSERT( IntConstant >= -16 && IntConstant <= 15 )"
  },
  {
    "label": "XMASSERT()",
    "kind": "Method",
    "detail": "Function (XM_SSE_INTRINSICS_)",
    "insertText": "XMASSERT( IntConstant >= -16 && IntConstant <= 15 )"
  },
  {
    "label": "_mm_set_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_set_ps( fw, fz, fy, fx )"
  },
  {
    "label": "_mm_set_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_set_ps( fw, fz, fy, fx )"
  },
  {
    "label": "_mm_set_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_set_ps( fw, fz, fy, fx )"
  }
]