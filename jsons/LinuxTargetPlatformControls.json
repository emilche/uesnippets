[
  {
    "label": "TLinuxTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLinuxTargetPlatformControls"
  },
  {
    "label": "TLinuxTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Interfaces / TargetDeviceId . h \" # include \" Common / TargetPlatformControlsBase . h \" # include \" SteamDeck / SteamDeckDevice . h \" # include \" AnalyticsEventAttribute . h \" # include \" InstalledPlatformInfo . h \" # include \" LinuxTargetDevice . h \" # include \" Linux / LinuxPlatformProperties . h \" # if WITH_ENGINE # include \" TextureResource . h \" # endif # define LOCTEXT_NAMESPACE \" TLinuxTargetPlatformControls \" template<TProperties> class TLinuxTargetPlatformControls : public TTargetPlatformControlsBase<TProperties> { public : typedef TTargetPlatformControlsBase<TProperties> TSuper ;)",
    "insertText": "TLinuxTargetPlatformControls(ITargetPlatformSettings* TargetPlatformSettings) : TSuper(TargetPlatformSettings) #if WITH_ENGINE , bChangingDeviceConfig(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_LINUX)",
    "insertText": "if(!TProperties::IsArm64())"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (LocalDevice =)",
    "insertText": "MakeShareable(new FLinuxTargetDevice(*this, FPlatformProcess::ComputerName(), nullptr))"
  },
  {
    "label": "InitDevicesFromConfig()",
    "kind": "Method",
    "detail": "Function (} # endif # if WITH_ENGINE)",
    "insertText": "InitDevicesFromConfig()"
  },
  {
    "label": "DiscoverDevices()",
    "kind": "Method",
    "detail": "Function (SteamDevices = TSteamDeckDevice<FLinuxTargetDevice)",
    "insertText": "DiscoverDevices(*this, TEXT(\"Native Linux\"))"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (} # endif } public : void)",
    "insertText": "EnableDeviceCheck(bool OnOff)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddDevice(const FString& DeviceName, bool bDefault)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddDevice(const FString& DeviceName, const FString& DeviceUserFriendlyName, const FString& Username, const FString& Password, bool bDefault)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FLinuxTargetDevicePtr& Device = Devices .)",
    "insertText": "FindOrAdd(DeviceName)"
  },
  {
    "label": "SaveDevicesToConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDevicesToConfig()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else nullptr ) ) ; # endif)",
    "insertText": "if(!Username.IsEmpty() || !Password.IsEmpty())"
  },
  {
    "label": "SetUserCredentials()",
    "kind": "Method",
    "detail": "Function (Device ->)",
    "insertText": "SetUserCredentials(Username, Password)"
  },
  {
    "label": "OnDeviceDiscovered()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnDeviceDiscovered().Broadcast(Device.ToSharedRef())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Add(LocalDevice)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const auto& DeviceIter : Devices)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Add(DeviceIter.Value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const ITargetDevicePtr& SteamDeck : SteamDevices)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Add(SteamDeck)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "GenerateStreamingInstallManifest(const TMultiMap<FString, int32>& PakchunkMap, const TSet<int32>& PakchunkIndicesInUse)"
  },
  {
    "label": "IsSdkInstalled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSdkInstalled(bool bProjectHasCode, FString& OutDocumentationPath)"
  },
  {
    "label": "GetEnvironmentVariable()",
    "kind": "Method",
    "detail": "Function (FString ToolchainMultiarchRoot =)",
    "insertText": "GetEnvironmentVariable(TEXT(\"LINUX_MULTIARCH_ROOT\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ToolchainCompiler + = \" / bin / clang + + . exe \" ; } else)",
    "insertText": "if(PLATFORM_MAC)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (ToolchainCompiler + = \" / bin / clang + + \" ; } else {)",
    "insertText": "checkf(false, TEXT(\"Unable to target Linux on an unknown platform.\"))"
  },
  {
    "label": "CheckRequirements()",
    "kind": "Method",
    "detail": "Function (} return true ; } int32)",
    "insertText": "CheckRequirements(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FString& OutTutorialPath, FString& OutDocumentationPath, FText& CustomizedLogMessage)"
  },
  {
    "label": "CheckRequirements()",
    "kind": "Method",
    "detail": "Function (int32 ReadyToBuild =)",
    "insertText": "CheckRequirements(bProjectHasCode, Configuration, bRequiresAssetNativization, OutTutorialPath, OutDocumentationPath, CustomizedLogMessage)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ReadyToBuild | = ETargetPlatformReadyStatus::CodeUnsupported ; } FText Reason ;)",
    "insertText": "if(this->RequiresTempTarget(bProjectHasCode, Configuration, bRequiresAssetNativization, Reason))"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (ReadyToBuild | = ETargetPlatformReadyStatus::PluginsUnsupported ; } } return ReadyToBuild ; } void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(TArray<FAnalyticsEventAttribute>& AnalyticsParamArray)"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(AnalyticsParamArray)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(AnalyticsParamArray, TEXT(\"/Script/LinuxTargetPlatform.LinuxTargetSettings\"), TEXT(\"TargetedRHIs\"), GEngineIni)"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ENGINE void)",
    "insertText": "GetTextureFormats(const UTexture* InTexture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetDefaultTextureFormatNamePerLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultTextureFormatNamePerLayer(OutFormats.AddDefaulted_GetRef(), this->GetTargetPlatformSettings(), this, InTexture, true, 4, true)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetAllDefaultTextureFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllDefaultTextureFormats(this->GetTargetPlatformSettings(), OutFormats)"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (} } # endif bool)",
    "insertText": "SupportsVariants()"
  },
  {
    "label": "DeviceBaseKey()",
    "kind": "Method",
    "detail": "Function (FString DeviceName,DeviceUser,DevicePass ; FString)",
    "insertText": "DeviceBaseKey(FString::Printf(TEXT(\"LinuxTargetPlatfrom_%s_Device_%d\"), *TSuper::PlatformName(), NumDevices))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString DeviceNameKey = DeviceBaseKey +)",
    "insertText": "TEXT(\"_Name\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(!AddDevice(DeviceName, false))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; } FString DeviceUserKey = DeviceBaseKey +)",
    "insertText": "TEXT(\"_User\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString DevicePassKey = DeviceBaseKey +)",
    "insertText": "TEXT(\"_Pass\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr Device = DeviceIter . Value ;)",
    "insertText": "if(Device.IsValid() && Device->GetId().GetDeviceName() == DeviceName)"
  },
  {
    "label": "SetUserCredentials()",
    "kind": "Method",
    "detail": "Function (Device ->)",
    "insertText": "SetUserCredentials(DeviceUser, DevicePass)"
  },
  {
    "label": "DeviceBaseKey()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr Device = DeviceIter . Value ; FString)",
    "insertText": "DeviceBaseKey(FString::Printf(TEXT(\"LinuxTargetPlatfrom_%s_Device_%d\"), *TSuper::PlatformName(), DeviceIndex))"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (FString DeviceName = Device ->)",
    "insertText": "GetId().GetDeviceName()"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (continue ; } GConfig ->)",
    "insertText": "SetString(TEXT(\"/Script/LinuxTargetPlatform.LinuxTargetSettings\"), *DeviceNameKey, *DeviceName, GEngineIni)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString DeviceUser,DevicePass ;)",
    "insertText": "if(Device->GetUserCredentials(DeviceUser, DevicePass))"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (GConfig ->)",
    "insertText": "SetString(TEXT(\"/Script/LinuxTargetPlatform.LinuxTargetSettings\"), *DeviceUserKey, *DeviceUser, GEngineIni)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (GConfig ->)",
    "insertText": "SetString(TEXT(\"/Script/LinuxTargetPlatform.LinuxTargetSettings\"), *DevicePassKey, *DevicePass, GEngineIni)"
  }
]