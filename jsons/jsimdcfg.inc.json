[
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (; ; Automatically generated include file from jsimdcfg . inc . h ; # define JPEG_INTERNALS # include \" . . / jpeglib . h \" # include \" . . / jconfig . h \" # include \" . . / jmorecfg . h \" # include \" jsimd . h \" ; ; - - jpeglib . h ; % define _cpp_protection_DCTSIZE DCTSIZE % define _cpp_protection_DCTSIZE2 DCTSIZE2 ; ; - - jmorecfg . h ; % define _cpp_protection_RGB_RED RGB_RED % define _cpp_protection_RGB_GREEN RGB_GREEN % define _cpp_protection_RGB_BLUE RGB_BLUE % define _cpp_protection_RGB_PIXELSIZE RGB_PIXELSIZE % define _cpp_protection_EXT_RGB_RED EXT_RGB_RED % define _cpp_protection_EXT_RGB_GREEN EXT_RGB_GREEN % define _cpp_protection_EXT_RGB_BLUE EXT_RGB_BLUE % define _cpp_protection_EXT_RGB_PIXELSIZE EXT_RGB_PIXELSIZE % define _cpp_protection_EXT_RGBX_RED EXT_RGBX_RED % define _cpp_protection_EXT_RGBX_GREEN EXT_RGBX_GREEN % define _cpp_protection_EXT_RGBX_BLUE EXT_RGBX_BLUE % define _cpp_protection_EXT_RGBX_PIXELSIZE EXT_RGBX_PIXELSIZE % define _cpp_protection_EXT_BGR_RED EXT_BGR_RED % define _cpp_protection_EXT_BGR_GREEN EXT_BGR_GREEN % define _cpp_protection_EXT_BGR_BLUE EXT_BGR_BLUE % define _cpp_protection_EXT_BGR_PIXELSIZE EXT_BGR_PIXELSIZE % define _cpp_protection_EXT_BGRX_RED EXT_BGRX_RED % define _cpp_protection_EXT_BGRX_GREEN EXT_BGRX_GREEN % define _cpp_protection_EXT_BGRX_BLUE EXT_BGRX_BLUE % define _cpp_protection_EXT_BGRX_PIXELSIZE EXT_BGRX_PIXELSIZE % define _cpp_protection_EXT_XBGR_RED EXT_XBGR_RED % define _cpp_protection_EXT_XBGR_GREEN EXT_XBGR_GREEN % define _cpp_protection_EXT_XBGR_BLUE EXT_XBGR_BLUE % define _cpp_protection_EXT_XBGR_PIXELSIZE EXT_XBGR_PIXELSIZE % define _cpp_protection_EXT_XRGB_RED EXT_XRGB_RED % define _cpp_protection_EXT_XRGB_GREEN EXT_XRGB_GREEN % define _cpp_protection_EXT_XRGB_BLUE EXT_XRGB_BLUE % define _cpp_protection_EXT_XRGB_PIXELSIZE EXT_XRGB_PIXELSIZE % define RGBX_FILLER_0XFF 1 ; Representation of a single)",
    "insertText": "sample(pixel element value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (On this SIMD implementation,this must be ' unsigned char ' . ; % define JSAMPLE byte ; unsigned char % define SIZEOF_JSAMPLE SIZEOF_BYTE ;)",
    "insertText": "sizeof(JSAMPLE)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Representation of a DCT frequency coefficient . ; On this SIMD implementation,this must be ' short ' . ; % define JCOEF word ; short % define SIZEOF_JCOEF SIZEOF_WORD ;)",
    "insertText": "sizeof(JCOEF)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Datatype used for image dimensions . ; On this SIMD implementation,this must be ' unsigned int ' . ; % define JDIMENSION dword ; unsigned int % define SIZEOF_JDIMENSION SIZEOF_DWORD ;)",
    "insertText": "sizeof(JDIMENSION)"
  },
  {
    "label": "JSAMPLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSAMPLE(jpeglib.h)"
  },
  {
    "label": "JSAMPROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSAMPROW(jpeglib.h)"
  },
  {
    "label": "JSAMPARRAY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSAMPARRAY(jpeglib.h)"
  },
  {
    "label": "JCOEF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JCOEF(jpeglib.h)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sizeof(JSAMPROW)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sizeof(JSAMPARRAY)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sizeof(JSAMPIMAGE)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sizeof(JCOEFPTR)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (; - - jdct . h ; ; A forward DCT routine is given a pointer to a work area of type DCTELEM [ ] ; ; the DCT is to be performed in - place in that buffer . ; To maximize parallelism,Type DCTELEM is changed to)",
    "insertText": "short(originally, int)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (% define DCTELEM word ; short % define SIZEOF_DCTELEM SIZEOF_WORD ;)",
    "insertText": "sizeof(DCTELEM)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (float % define SIZEOF_FAST_FLOAT SIZEOF_FP32 ;)",
    "insertText": "sizeof(FAST_FLOAT)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (To maximize parallelism,Type MULTIPLIER is changed to short . ; % define ISLOW_MULT_TYPE word ; must be short % define SIZEOF_ISLOW_MULT_TYPE SIZEOF_WORD ;)",
    "insertText": "sizeof(ISLOW_MULT_TYPE)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (must be short % define SIZEOF_IFAST_MULT_TYPE SIZEOF_WORD ;)",
    "insertText": "sizeof(IFAST_MULT_TYPE)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (fractional bits in scale factors % define FLOAT_MULT_TYPE FP32 ; must be float % define SIZEOF_FLOAT_MULT_TYPE SIZEOF_FP32 ;)",
    "insertText": "sizeof(FLOAT_MULT_TYPE)"
  }
]