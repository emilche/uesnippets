[
  {
    "label": "FMessageBusNotification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageBusNotification"
  },
  {
    "label": "FMessageEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageEndpoint"
  },
  {
    "label": "FMessageEndpointBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageEndpointBuilder"
  },
  {
    "label": "MessageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageType"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayBuilder . h \" # include \" Containers / Queue . h \" # include \" IMessageAttachment . h \" # include \" IMessageBus . h \" # include \" IMessageContext . h \" # include \" IMessageHandler . h \" # include \" IMessageReceiver . h \" # include \" IMessageSender . h \" # include \" IMessageBusListener . h \" # include \" Misc / Guid . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" Misc / ScopeLock . h \")",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnMessageEndpointError, const IMessageContext&, const FString&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (struct FMessageBusNotification { EMessageBusNotification NotificationType ; FMessageAddress RegistrationAddress ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnBusNotification, const FMessageBusNotification&)"
  },
  {
    "label": "FMessageEndpoint()",
    "kind": "Method",
    "detail": "Function (class FMessageEndpoint : public TSharedFromThis<FMessageEndpoint,ESPMode::ThreadSafe>,public IMessageReceiver,public IMessageSender,public IBusListener { public : typedef struct FMessageEndpointBuilder Builder ;)",
    "insertText": "FMessageEndpoint(const FName& InName, const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& InBus, const TArray<TSharedPtr<IMessageHandler, ESPMode::ThreadSafe>>& InHandlers, const FOnBusNotification InNotificationDelegate) : Address(FMessageAddress::NewAddress()) , BusPtr(InBus) , Enabled(true) , Handlers(InHandlers) , NotificationDelegate(InNotificationDelegate) , Id(FGuid::NewGuid()) , InboxEnabled(false) , Name(InName)"
  },
  {
    "label": "SetRecipientThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecipientThread(FTaskGraphInterface::Get().GetCurrentThreadIfKnown())"
  },
  {
    "label": "FMessageEndpoint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMessageEndpoint()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (auto Bus = BusPtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Unregister(Address)"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "Disable()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (Enabled = false ; } void)",
    "insertText": "Enable()"
  },
  {
    "label": "GetAddress()",
    "kind": "Method",
    "detail": "Function (Enabled = true ; } const FMessageAddress&)",
    "insertText": "GetAddress()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "GetThreadIndex()",
    "kind": "Method",
    "detail": "Function (RecipientThread =)",
    "insertText": "GetThreadIndex(NamedThread)"
  },
  {
    "label": "Defer()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Defer(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const FTimespan& Delay)"
  },
  {
    "label": "GetBusIfEnabled()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMessageBus,ESPMode::ThreadSafe> Bus =)",
    "insertText": "GetBusIfEnabled()"
  },
  {
    "label": "Forward()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Forward(Context, TArrayBuilder<FMessageAddress>().Add(Address), Delay, AsShared())"
  },
  {
    "label": "Forward()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Forward(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay)"
  },
  {
    "label": "Forward()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Forward(Context, Recipients, Delay, AsShared())"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Publish(void* Message, UScriptStruct* TypeInfo, EMessageScope Scope, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, TypeInfo, Scope, TMap<FName, FString>(), Delay, Expiration)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Publish(void* Message, UScriptStruct* TypeInfo, EMessageScope Scope, const TMap<FName, FString> Annotations, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Publish(Message, TypeInfo, Scope, Annotations, Delay, Expiration, AsShared())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, TypeInfo, EMessageFlags::None, Attachment, Recipients, Delay, Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Send(void* Message, UScriptStruct* TypeInfo, EMessageFlags Flags, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Send(Message, TypeInfo, Flags, TMap<FName, FString>(), Attachment, Recipients, Delay, Expiration, AsShared())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Send(void* Message, UScriptStruct* TypeInfo, EMessageFlags Flags, const TMap<FName, FString> Annotations, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Send(Message, TypeInfo, Flags, Annotations, Attachment, Recipients, Delay, Expiration, AsShared())"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subscribe(UClass::TryConvertShortTypeNameToPathName<UStruct>(MessageType.ToString()), ScopeRange)"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Subscribe(const FTopLevelAssetPath& MessageType, const FMessageScopeRange& ScopeRange)"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Subscribe(AsShared(), MessageType, ScopeRange)"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unsubscribe(UClass::TryConvertShortTypeNameToPathName<UStruct>(MessageType.ToString()))"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unsubscribe(const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Unsubscribe(AsShared(), MessageType)"
  },
  {
    "label": "DisableInbox()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "DisableInbox()"
  },
  {
    "label": "EnableInbox()",
    "kind": "Method",
    "detail": "Function (InboxEnabled = false ; } void)",
    "insertText": "EnableInbox()"
  },
  {
    "label": "IsInboxEmpty()",
    "kind": "Method",
    "detail": "Function (InboxEnabled = true ; } bool)",
    "insertText": "IsInboxEmpty()"
  },
  {
    "label": "IsInboxEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInboxEnabled()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMessageContext,ESPMode::ThreadSafe> Context ;)",
    "insertText": "while(Inbox.Dequeue(Context))"
  },
  {
    "label": "ProcessMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMessage(Context.ToSharedRef())"
  },
  {
    "label": "ReceiveFromInbox()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "ReceiveFromInbox(TSharedPtr<IMessageContext, ESPMode::ThreadSafe>& OutContext)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} public : FName)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Inbox .)",
    "insertText": "Enqueue(Context)"
  },
  {
    "label": "ProcessMessage()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ProcessMessage(Context)"
  },
  {
    "label": "GetListenerThread()",
    "kind": "Method",
    "detail": "Function (} } ENamedThreads::Type)",
    "insertText": "GetListenerThread()"
  },
  {
    "label": "GetSenderAddress()",
    "kind": "Method",
    "detail": "Function (} public : FMessageAddress)",
    "insertText": "GetSenderAddress()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (ErrorDelegate .)",
    "insertText": "ExecuteIfBound(Context.Get(), Error)"
  },
  {
    "label": "MakeMessage()",
    "kind": "Method",
    "detail": "Function (} public : template<T,. . . InArgTypes> T*)",
    "insertText": "MakeMessage(InArgTypes&&... Args)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void* Buffer =)",
    "insertText": "Malloc(sizeof(T))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (T* Message =)",
    "insertText": "new(Buffer) T(::Forward<InArgTypes>(Args)...)"
  },
  {
    "label": "Forward()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Forward(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const FMessageAddress& Recipient, const FTimespan& Delay)"
  },
  {
    "label": "Forward()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Forward(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const TArray<FMessageAddress>& Recipients)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), EMessageScope::Network, FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message, EMessageScope Scope)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), Scope, FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message, const TMap<FName, FString> Annotations)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), Annotations, EMessageScope::Network, FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message, const TMap<FName, FString> Annotations, EMessageScope Scope)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), Annotations, Scope, FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message, const FTimespan& Delay)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), EMessageScope::Network, Delay, FDateTime::MaxValue())"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message, EMessageScope Scope, const FTimespan& Delay)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), Scope, Delay, FDateTime::MaxValue())"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message, EMessageScope Scope, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), Scope, Delay, Expiration)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Publish(MessageType* Message, const TMap<FName, FString> Annotations, EMessageScope Scope, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(Message, MessageType::StaticStruct(), Annotations, Scope, Delay, Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const FMessageAddress& Recipient)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, nullptr, TArrayBuilder<FMessageAddress>().Add(Recipient), FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TMap<FName, FString> Annotations, const FMessageAddress& Recipient)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, Annotations, nullptr, TArrayBuilder<FMessageAddress>().Add(Recipient), FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const FMessageAddress& Recipient, const FTimespan& Delay)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, nullptr, TArrayBuilder<FMessageAddress>().Add(Recipient), Delay, FDateTime::MaxValue())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const FMessageAddress& Recipient, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, nullptr, TArrayBuilder<FMessageAddress>().Add(Recipient), Delay, Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const FMessageAddress& Recipient)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, Attachment, TArrayBuilder<FMessageAddress>().Add(Recipient), FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const FMessageAddress& Recipient, const FDateTime& Expiration, const FTimespan& Delay)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, Attachment, TArrayBuilder<FMessageAddress>().Add(Recipient), Delay, Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TMap<FName, FString> Annotations, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const FMessageAddress& Recipient, const FDateTime& Expiration, const FTimespan& Delay)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, Annotations, Attachment, TArrayBuilder<FMessageAddress>().Add(Recipient), Delay, Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TArray<FMessageAddress>& Recipients)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, nullptr, Recipients, FTimespan::Zero(), FDateTime::MaxValue())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, nullptr, Recipients, Delay, FDateTime::MaxValue())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, Attachment, Recipients, Delay, FDateTime::MaxValue())"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), EMessageFlags::None, Attachment, Recipients, Delay, Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, EMessageFlags Flags, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), Flags, Attachment, Recipients, Delay, Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Send(MessageType* Message, EMessageFlags Flags, const TMap<FName, FString> Annotations, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay, const FDateTime& Expiration)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(Message, MessageType::StaticStruct(), Flags, Annotations, Attachment, Recipients, Delay, Expiration)"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (} template<class MessageType> void)",
    "insertText": "Subscribe()"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subscribe(MessageType::StaticStruct()->GetStructPathName(), FMessageScopeRange::AtLeast(EMessageScope::Thread))"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (} template<class MessageType> void)",
    "insertText": "Subscribe(const FMessageScopeRange& ScopeRange)"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subscribe(MessageType::StaticStruct()->GetStructPathName(), ScopeRange)"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unsubscribe()"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unsubscribe(IMessageBus::PATHNAME_All)"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unsubscribe(MessageType::StaticStruct()->GetStructPathName())"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SafeRelease(TSharedPtr<FMessageEndpoint, ESPMode::ThreadSafe>& Endpoint)"
  },
  {
    "label": "ClearHandlers()",
    "kind": "Method",
    "detail": "Function (Endpoint ->)",
    "insertText": "ClearHandlers()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Endpoint .)",
    "insertText": "Reset()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&HandlersCS)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Handlers .)",
    "insertText": "Empty()"
  },
  {
    "label": "ProcessMessage()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "ProcessMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (Handlers [ HandlerIndex ] ->)",
    "insertText": "HandleMessage(Context)"
  }
]