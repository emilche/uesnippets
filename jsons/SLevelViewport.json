[
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FLevelViewportLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportLayout"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "SActorPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SActorPreview"
  },
  {
    "label": "SCaptureRegionWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCaptureRegionWidget"
  },
  {
    "label": "SGameLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGameLayerManager"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELabelAnchorMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELabelAnchorMode"
  },
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "ISceneOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutlinerColumn"
  },
  {
    "label": "ISceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutliner"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FLevelViewportLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportLayout"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SCaptureRegionWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCaptureRegionWidget"
  },
  {
    "label": "EViewTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EViewTransition"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FViewportActorPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportActorPreview"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SInViewportDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInViewportDetails"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const FAssetEditorViewportConstructionArgs& InConstructionArgs)"
  },
  {
    "label": "ConstructViewportOverlayContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructViewportOverlayContent()"
  },
  {
    "label": "ConstructLevelEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructLevelEditorViewportClient(FLevelEditorViewportInstanceSettings& ViewportInstanceSettings)"
  },
  {
    "label": "SetKeyboardFocusToThisViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyboardFocusToThisViewport()"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AsShared()"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AsShared()"
  },
  {
    "label": "EnableInViewportMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableInViewportMenu()"
  },
  {
    "label": "OnToggleMaximize()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleMaximize()"
  },
  {
    "label": "OnActorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorSelectionChanged(const TArray<UObject*>& NewSelection, bool bForceRefresh=false)"
  },
  {
    "label": "OnElementSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementSelectionChanged(const UTypedElementSelectionSet* SelectionSet, bool bForceRefresh)"
  },
  {
    "label": "ToggleShowLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowLayer( FName LayerName )"
  },
  {
    "label": "ToggleShowFoliageType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowFoliageType(TWeakObjectPtr<class UFoliageType> FoliageType)"
  },
  {
    "label": "ToggleAllFoliageTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAllFoliageTypes(bool bVisible)"
  },
  {
    "label": "OnActorLockToggleFromMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorLockToggleFromMenu(AActor* Actor)"
  },
  {
    "label": "OnActorLockToggleFromMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorLockToggleFromMenu()"
  },
  {
    "label": "ToggleActorPilotCameraView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActorPilotCameraView()"
  },
  {
    "label": "SetAllowsCinematicControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowsCinematicControl(bool bAllow)"
  },
  {
    "label": "GetActorLockSceneOutlinerColumnWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetActorLockSceneOutlinerColumnWidth()"
  },
  {
    "label": "OnPreviewSelectedCamerasChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewSelectedCamerasChange()"
  },
  {
    "label": "SetDeviceProfileString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceProfileString( const FString& ProfileName )"
  },
  {
    "label": "OnSetViewportConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetViewportConfiguration(FName ConfigurationName)"
  },
  {
    "label": "SetViewportTypeWithinLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportTypeWithinLayout(FName InLayoutType)"
  },
  {
    "label": "ToggleViewportTypeActivationWithinLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleViewportTypeActivationWithinLayout(FName InLayoutType)"
  },
  {
    "label": "IsViewportTypeWithinLayoutEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewportTypeWithinLayoutEqual(FName InLayoutType)"
  },
  {
    "label": "SetActorAlwaysPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorAlwaysPreview(TWeakObjectPtr<AActor> PreviewActor, bool bAlwaysPreview = true)"
  },
  {
    "label": "ToggleActorPreviewIsPinned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActorPreviewIsPinned(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "ToggleActorPreviewIsPanelDetached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActorPreviewIsPanelDetached(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "IsActorPreviewPinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorPreviewPinned(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "IsActorPreviewDetached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorPreviewDetached(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "OnFloatingButtonClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFloatingButtonClicked()"
  },
  {
    "label": "RemoveAllPreviews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllPreviews(const bool bRemoveFromDesktopViewport = true)"
  },
  {
    "label": "OnSetBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetBookmark( int32 BookmarkIndex )"
  },
  {
    "label": "OnHasBookmarkSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnHasBookmarkSet(int32 BookmarkIndex)"
  },
  {
    "label": "OnJumpToBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnJumpToBookmark( int32 BookmarkIndex )"
  },
  {
    "label": "OnClearBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearBookmark( int32 BookmarkIndex )"
  },
  {
    "label": "OnClearAllBookmarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearAllBookmarks()"
  },
  {
    "label": "OnCompactBookmarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompactBookmarks()"
  },
  {
    "label": "LoadLegacyConfigFromIni()",
    "kind": "Method",
    "detail": "Function (FLevelEditorViewportInstanceSettings)",
    "insertText": "LoadLegacyConfigFromIni(const FString& ConfigKey, const FLevelEditorViewportInstanceSettings& InDefaultSettings)"
  },
  {
    "label": "HandleViewportSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportSettingChanged(FName PropertyName)"
  },
  {
    "label": "OnAdvancedSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdvancedSettings()"
  },
  {
    "label": "OnToggleImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleImmersive()"
  },
  {
    "label": "OnToggleSidebarTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSidebarTabs()"
  },
  {
    "label": "OnToggleMaximizeMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleMaximizeMode()"
  },
  {
    "label": "PreviewSelectedCameraActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviewSelectedCameraActors(const bool bPreviewInDesktopViewport = true)"
  },
  {
    "label": "OnCreateCameraActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateCameraActor(UClass *InClass)"
  },
  {
    "label": "OnTakeHighResScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTakeHighResScreenshot()"
  },
  {
    "label": "OnToggleAllVolumeActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllVolumeActors( bool bVisible )"
  },
  {
    "label": "ToggleShowVolumeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowVolumeClass( int32 VolumeID )"
  },
  {
    "label": "OnToggleAllLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllLayers( bool bVisible )"
  },
  {
    "label": "OnToggleAllSpriteCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllSpriteCategories( bool bVisible )"
  },
  {
    "label": "ToggleSpriteCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSpriteCategory( int32 CategoryID )"
  },
  {
    "label": "OnToggleAllStatCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllStatCommands(bool bVisible)"
  },
  {
    "label": "OnUseDefaultShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUseDefaultShowFlags(bool bUseSavedDefaults = false)"
  },
  {
    "label": "OnToggleAllowCinematicPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllowCinematicPreview()"
  },
  {
    "label": "FindSelectedInLevelScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSelectedInLevelScript()"
  },
  {
    "label": "OnSelectLockedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectLockedActor()"
  },
  {
    "label": "OnActorUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorUnlock()"
  },
  {
    "label": "OnActorLockSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorLockSelected()"
  },
  {
    "label": "RedrawViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawViewport( bool bInvalidateHitProxies )"
  },
  {
    "label": "HandleDragObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDragObjects(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandlePlaceDraggedObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePlaceDraggedObjects(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent, bool bCreateDropPreview)"
  },
  {
    "label": "GetAssetsFromDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsFromDrag(const FDragDropEvent& DragDropEvent, TArray<FAssetData>& AssetDataArray)"
  },
  {
    "label": "OnApplyMaterialToViewportTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplyMaterialToViewportTarget()"
  },
  {
    "label": "BindOptionCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindOptionCommands( FUICommandList& CommandList )"
  },
  {
    "label": "BindViewCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindViewCommands( FUICommandList& CommandList )"
  },
  {
    "label": "BindDropCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindDropCommands( FUICommandList& CommandList )"
  },
  {
    "label": "BindStatCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindStatCommand(const TSharedPtr<FUICommandInfo> InMenuItem, const FString& InCommandName)"
  },
  {
    "label": "OnMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMapChanged( UWorld* World, EMapChangeType MapChangeType )"
  },
  {
    "label": "OnLevelActorsRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorsRemoved(AActor* InActor)"
  },
  {
    "label": "OnEditorClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorClose()"
  },
  {
    "label": "PreviewActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviewActors( const TArray< AActor* >& ActorsToPreview, const bool bPreviewInDesktopViewport = true)"
  },
  {
    "label": "UpdateActorPreviewViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorPreviewViewports()"
  },
  {
    "label": "RemoveActorPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorPreview( int32 PreviewIndex, AActor* Actor = nullptr, const bool bRemoveFromDesktopViewport = true)"
  },
  {
    "label": "OnUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUndo()"
  },
  {
    "label": "OnRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRedo()"
  },
  {
    "label": "ShowMouseCaptureLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowMouseCaptureLabel(ELabelAnchorMode AnchorMode)"
  },
  {
    "label": "HideMouseCaptureLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideMouseCaptureLabel()"
  },
  {
    "label": "ResetNewLevelViewFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNewLevelViewFlags()"
  },
  {
    "label": "TransitionToPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionToPIE(bool bIsSimulating)"
  },
  {
    "label": "TransitionFromPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionFromPIE(bool bIsSimulating)"
  },
  {
    "label": "OnPerformanceSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPerformanceSettingsChanged(UObject* Obj, struct FPropertyChangedEvent& ChangeEvent)"
  },
  {
    "label": "LockActorInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockActorInternal(AActor* NewActorToLock)"
  },
  {
    "label": "GetCameraInformationFromActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCameraInformationFromActor(AActor* Actor, FMinimalViewInfo& out_CameraInfo)"
  },
  {
    "label": "CanGetCameraInformationFromActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGetCameraInformationFromActor(AActor* Actor)"
  }
]