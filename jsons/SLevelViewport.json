[
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FLevelViewportLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportLayout"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "SActorPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SActorPreview"
  },
  {
    "label": "SCaptureRegionWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCaptureRegionWidget"
  },
  {
    "label": "SGameLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGameLayerManager"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELabelAnchorMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELabelAnchorMode"
  },
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "ISceneOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutlinerColumn"
  },
  {
    "label": "ISceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutliner"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "EViewTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EViewTransition"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FViewportActorPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportActorPreview"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SInViewportDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInViewportDetails"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / CurveSequence . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" SWorldPartitionViewportWidget . h \" # include \" EditorViewportClient . h \" # include \" Widgets / Layout / SScaleBox . h \" # include \" Widgets / SWindow . h \" # include \" Settings / LevelEditorViewportSettings . h \" # include \" SAssetEditorViewport . h \" # include \" EditorModeManager . h \" # include \" IAssetViewport . h \" # include \" LevelEditorViewport . h \" class FLevelEditorViewportClient ; class FLevelViewportLayout ; class FSceneViewport ; class FUICommandList ; class ILevelEditor ; class SActorPreview ; class SCaptureRegionWidget ; class SGameLayerManager ; class UFoliageType ; enum class EMapChangeType : uint8 ; enum ELabelAnchorMode : int ; class SLevelViewport : public SAssetEditorViewport,public IAssetViewport { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SLevelViewport)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TWeakPtr<ILevelEditor>, ParentLevelEditor ) SLATE_ARGUMENT( TSharedPtr<FLevelEditorViewportClient>, LevelEditorViewportClient ) SLATE_END_ARGS() SLevelViewport()"
  },
  {
    "label": "SLevelViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SLevelViewport()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const FAssetEditorViewportConstructionArgs& InConstructionArgs)"
  },
  {
    "label": "ConstructViewportOverlayContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructViewportOverlayContent()"
  },
  {
    "label": "ConstructLevelEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructLevelEditorViewportClient(FLevelEditorViewportInstanceSettings& ViewportInstanceSettings)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsInForegroundTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInForegroundTab()"
  },
  {
    "label": "GetLevelViewportClient()",
    "kind": "Method",
    "detail": "Function (const FLevelEditorViewportClient&)",
    "insertText": "GetLevelViewportClient()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FUICommandList>&)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "StartPlayInEditorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayInEditorSession(UGameViewportClient* PlayClient, const bool bInSimulateInEditor)"
  },
  {
    "label": "EndPlayInEditorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayInEditorSession()"
  },
  {
    "label": "SwapViewportsForSimulateInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapViewportsForSimulateInEditor()"
  },
  {
    "label": "SwapViewportsForPlayInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapViewportsForPlayInEditor()"
  },
  {
    "label": "OnSimulateSessionStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSimulateSessionStarted()"
  },
  {
    "label": "OnSimulateSessionFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSimulateSessionFinished()"
  },
  {
    "label": "RegisterGameViewportIfPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGameViewportIfPIE()"
  },
  {
    "label": "HasPlayInEditorViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPlayInEditorViewport()"
  },
  {
    "label": "GetActiveViewport()",
    "kind": "Method",
    "detail": "Function (FViewport*)",
    "insertText": "GetActiveViewport()"
  },
  {
    "label": "GetSharedActiveViewport()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSceneViewport>)",
    "insertText": "GetSharedActiveViewport()"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "GetViewportWidget()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<SViewport>)",
    "insertText": "GetViewportWidget()"
  },
  {
    "label": "RemoveOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOverlayWidget(TSharedRef<SWidget> OverlaidWidget)"
  },
  {
    "label": "OnFocusViewportToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusViewportToSelection()"
  },
  {
    "label": "GetTransformToolbarVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTransformToolbarVisibility()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "ToggleInViewportContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInViewportContextMenu()"
  },
  {
    "label": "HideInViewportContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideInViewportContextMenu()"
  },
  {
    "label": "CanToggleInViewportContextMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleInViewportContextMenu()"
  },
  {
    "label": "EnableInViewportMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableInViewportMenu()"
  },
  {
    "label": "GetContextMenuPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetContextMenuPadding()"
  },
  {
    "label": "OnToggleMaximize()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleMaximize()"
  },
  {
    "label": "IsMaximized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaximized()"
  },
  {
    "label": "CanMaximize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMaximize()"
  },
  {
    "label": "MakeImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeImmersive(const bool bWantImmersive, const bool bAllowAnimation)"
  },
  {
    "label": "IsImmersive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImmersive()"
  },
  {
    "label": "GetCloseImmersiveButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCloseImmersiveButtonVisibility()"
  },
  {
    "label": "GetMaximizeToggleVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetMaximizeToggleVisibility()"
  },
  {
    "label": "IsPlayInEditorViewportActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInEditorViewportActive()"
  },
  {
    "label": "OnActorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorSelectionChanged(const TArray<UObject*>& NewSelection, bool bForceRefresh=false)"
  },
  {
    "label": "OnElementSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementSelectionChanged(const UTypedElementSelectionSet* SelectionSet, bool bForceRefresh)"
  },
  {
    "label": "ToggleGameView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGameView()"
  },
  {
    "label": "CanToggleGameView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleGameView()"
  },
  {
    "label": "IsInGameView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInGameView()"
  },
  {
    "label": "ToggleShowLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowLayer(FName LayerName)"
  },
  {
    "label": "IsLayerVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerVisible(FName LayerName)"
  },
  {
    "label": "ToggleShowFoliageType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowFoliageType(TWeakObjectPtr<class UFoliageType> FoliageType)"
  },
  {
    "label": "ToggleAllFoliageTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAllFoliageTypes(bool bVisible)"
  },
  {
    "label": "IsFoliageTypeVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFoliageTypeVisible(TWeakObjectPtr<class UFoliageType> FoliageType)"
  },
  {
    "label": "OnActorLockToggleFromMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorLockToggleFromMenu(AActor* Actor)"
  },
  {
    "label": "OnActorLockToggleFromMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorLockToggleFromMenu()"
  },
  {
    "label": "IsActorLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorLocked(const TWeakObjectPtr<AActor> Actor)"
  },
  {
    "label": "IsAnyActorLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyActorLocked()"
  },
  {
    "label": "IsSelectedActorLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedActorLocked()"
  },
  {
    "label": "ToggleActorPilotCameraView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActorPilotCameraView()"
  },
  {
    "label": "IsLockedCameraViewEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLockedCameraViewEnabled()"
  },
  {
    "label": "SetAllowsCinematicControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowsCinematicControl(bool bAllow)"
  },
  {
    "label": "GetAllowsCinematicControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowsCinematicControl()"
  },
  {
    "label": "GetActorLockSceneOutlinerColumnWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetActorLockSceneOutlinerColumnWidth()"
  },
  {
    "label": "CreateActorLockSceneOutlinerColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ISceneOutlinerColumn>)",
    "insertText": "CreateActorLockSceneOutlinerColumn(class ISceneOutliner& SceneOutliner)"
  },
  {
    "label": "OnPreviewSelectedCamerasChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewSelectedCamerasChange()"
  },
  {
    "label": "SetDeviceProfileString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceProfileString(const FString& ProfileName)"
  },
  {
    "label": "IsDeviceProfileStringSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeviceProfileStringSet(FString ProfileName)"
  },
  {
    "label": "GetDeviceProfileString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceProfileString()"
  },
  {
    "label": "GetParentLevelEditor()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<ILevelEditor>)",
    "insertText": "GetParentLevelEditor()"
  },
  {
    "label": "GetCurrentScreenPercentageText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentScreenPercentageText()"
  },
  {
    "label": "GetSelectedActorsCurrentLevelText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedActorsCurrentLevelText(bool bDrawOnlyLabel)"
  },
  {
    "label": "GetCurrentScreenPercentageVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCurrentScreenPercentageVisibility()"
  },
  {
    "label": "GetViewportControlsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetViewportControlsVisibility()"
  },
  {
    "label": "GetToolBarVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetToolBarVisibility()"
  },
  {
    "label": "IsActorAlwaysPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorAlwaysPreview(TWeakObjectPtr<AActor> Actor)"
  },
  {
    "label": "SetActorAlwaysPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorAlwaysPreview(TWeakObjectPtr<AActor> PreviewActor, bool bAlwaysPreview = true)"
  },
  {
    "label": "ToggleActorPreviewIsPinned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActorPreviewIsPinned(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "ToggleActorPreviewIsPanelDetached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActorPreviewIsPanelDetached(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "IsActorPreviewPinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorPreviewPinned(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "IsActorPreviewDetached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorPreviewDetached(TWeakObjectPtr<AActor> PreviewActor)"
  },
  {
    "label": "OnFloatingButtonClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFloatingButtonClicked()"
  },
  {
    "label": "GetToolbarVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetToolbarVisibility()"
  },
  {
    "label": "GetFullToolbarVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFullToolbarVisibility()"
  },
  {
    "label": "RemoveAllPreviews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllPreviews(const bool bRemoveFromDesktopViewport = true)"
  },
  {
    "label": "OnSetBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetBookmark(int32 BookmarkIndex)"
  },
  {
    "label": "OnHasBookmarkSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnHasBookmarkSet(int32 BookmarkIndex)"
  },
  {
    "label": "OnJumpToBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnJumpToBookmark(int32 BookmarkIndex)"
  },
  {
    "label": "OnClearBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearBookmark(int32 BookmarkIndex)"
  },
  {
    "label": "OnClearAllBookmarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearAllBookmarks()"
  },
  {
    "label": "OnCompactBookmarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompactBookmarks()"
  },
  {
    "label": "GetConfigKey()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetConfigKey()"
  },
  {
    "label": "MakeViewportToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakeViewportToolbar()"
  },
  {
    "label": "BuildViewportToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildViewportToolbar()"
  },
  {
    "label": "OnIncrementPositionGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncrementPositionGridSize()"
  },
  {
    "label": "OnDecrementPositionGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecrementPositionGridSize()"
  },
  {
    "label": "OnIncrementRotationGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncrementRotationGridSize()"
  },
  {
    "label": "OnDecrementRotationGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecrementRotationGridSize()"
  },
  {
    "label": "OnGetViewportBorderBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "OnGetViewportBorderBrush()"
  },
  {
    "label": "OnGetViewportBorderColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "OnGetViewportBorderColorAndOpacity()"
  },
  {
    "label": "OnGetViewportContentVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetViewportContentVisibility()"
  },
  {
    "label": "OnGetFocusedViewportIndicatorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetFocusedViewportIndicatorVisibility()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "LoadLegacyConfigFromIni()",
    "kind": "Method",
    "detail": "Function (private : bool bNeedToUpdatePreviews ; FLevelEditorViewportInstanceSettings)",
    "insertText": "LoadLegacyConfigFromIni(const FString& ConfigKey, const FLevelEditorViewportInstanceSettings& InDefaultSettings)"
  },
  {
    "label": "HandleViewportSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportSettingChanged(FName PropertyName)"
  },
  {
    "label": "OnAdvancedSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdvancedSettings()"
  },
  {
    "label": "OnToggleImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleImmersive()"
  },
  {
    "label": "OnToggleSidebarTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSidebarTabs()"
  },
  {
    "label": "CanToggleMaximizeMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleMaximizeMode()"
  },
  {
    "label": "OnToggleMaximizeMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleMaximizeMode()"
  },
  {
    "label": "PreviewSelectedCameraActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviewSelectedCameraActors(const bool bPreviewInDesktopViewport = true)"
  },
  {
    "label": "OnCreateCameraActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateCameraActor(UClass *InClass)"
  },
  {
    "label": "OnTakeHighResScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTakeHighResScreenshot()"
  },
  {
    "label": "IsPerspectiveViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPerspectiveViewport()"
  },
  {
    "label": "OnToggleAllVolumeActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllVolumeActors(bool bVisible)"
  },
  {
    "label": "ToggleShowVolumeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowVolumeClass(int32 VolumeID)"
  },
  {
    "label": "IsVolumeVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVolumeVisible(int32 VolumeID)"
  },
  {
    "label": "OnToggleAllLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllLayers(bool bVisible)"
  },
  {
    "label": "OnToggleAllSpriteCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllSpriteCategories(bool bVisible)"
  },
  {
    "label": "ToggleSpriteCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSpriteCategory(int32 CategoryID)"
  },
  {
    "label": "IsSpriteCategoryVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpriteCategoryVisible(int32 CategoryID)"
  },
  {
    "label": "OnToggleAllStatCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllStatCommands(bool bVisible)"
  },
  {
    "label": "OnUseDefaultShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUseDefaultShowFlags(bool bUseSavedDefaults = false)"
  },
  {
    "label": "OnToggleAllowCinematicPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllowCinematicPreview()"
  },
  {
    "label": "AllowsCinematicPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsCinematicPreview()"
  },
  {
    "label": "FindSelectedInLevelScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSelectedInLevelScript()"
  },
  {
    "label": "CanFindSelectedInLevelScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFindSelectedInLevelScript()"
  },
  {
    "label": "OnSelectLockedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectLockedActor()"
  },
  {
    "label": "CanExecuteSelectLockedActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteSelectLockedActor()"
  },
  {
    "label": "OnActorUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorUnlock()"
  },
  {
    "label": "CanExecuteActorUnlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteActorUnlock()"
  },
  {
    "label": "OnActorLockSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorLockSelected()"
  },
  {
    "label": "CanExecuteActorLockSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteActorLockSelected()"
  },
  {
    "label": "RedrawViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawViewport(bool bInvalidateHitProxies)"
  },
  {
    "label": "HandleDragObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDragObjects(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandlePlaceDraggedObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePlaceDraggedObjects(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent, bool bCreateDropPreview)"
  },
  {
    "label": "GetAssetsFromDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsFromDrag(const FDragDropEvent& DragDropEvent, TArray<FAssetData>& AssetDataArray)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnApplyMaterialToViewportTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplyMaterialToViewportTarget()"
  },
  {
    "label": "BindOptionCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindOptionCommands(FUICommandList& CommandList)"
  },
  {
    "label": "BindViewCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindViewCommands(FUICommandList& CommandList)"
  },
  {
    "label": "BindShowCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindShowCommands(FUICommandList& CommandList)"
  },
  {
    "label": "BindDropCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindDropCommands(FUICommandList& CommandList)"
  },
  {
    "label": "BindStatCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindStatCommand(const TSharedPtr<FUICommandInfo> InMenuItem, const FString& InCommandName)"
  },
  {
    "label": "BuildViewportDragDropContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildViewportDragDropContextMenu()"
  },
  {
    "label": "OnMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMapChanged(UWorld* World, EMapChangeType MapChangeType)"
  },
  {
    "label": "OnLevelActorsRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorsRemoved(AActor* InActor)"
  },
  {
    "label": "OnEditorClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorClose()"
  },
  {
    "label": "GetLockedIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLockedIconVisibility()"
  },
  {
    "label": "GetLockedIconToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLockedIconToolTip()"
  },
  {
    "label": "PreviewActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviewActors(const TArray< AActor* >& ActorsToPreview, const bool bPreviewInDesktopViewport = true)"
  },
  {
    "label": "UpdateActorPreviewViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorPreviewViewports()"
  },
  {
    "label": "RemoveActorPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorPreview(int32 PreviewIndex, AActor* Actor = nullptr, const bool bRemoveFromDesktopViewport = true)"
  },
  {
    "label": "CanProduceActionForCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanProduceActionForCommand(const TSharedRef<const FUICommandInfo>& Command)"
  },
  {
    "label": "OnUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUndo()"
  },
  {
    "label": "OnRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRedo()"
  },
  {
    "label": "CanExecuteUndo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteUndo()"
  },
  {
    "label": "CanExecuteRedo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteRedo()"
  },
  {
    "label": "GetMouseCaptureLabelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetMouseCaptureLabelVisibility()"
  },
  {
    "label": "GetMouseCaptureLabelColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetMouseCaptureLabelColorAndOpacity()"
  },
  {
    "label": "GetMouseCaptureLabelText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMouseCaptureLabelText()"
  },
  {
    "label": "ShowMouseCaptureLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowMouseCaptureLabel(ELabelAnchorMode AnchorMode)"
  },
  {
    "label": "HideMouseCaptureLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideMouseCaptureLabel()"
  },
  {
    "label": "ResetNewLevelViewFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNewLevelViewFlags()"
  },
  {
    "label": "GetGameSceneViewport()",
    "kind": "Method",
    "detail": "Function (FSceneViewport*)",
    "insertText": "GetGameSceneViewport()"
  },
  {
    "label": "OnToggleShowFullToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleShowFullToolbar()"
  },
  {
    "label": "ShouldShowFullToolbar()",
    "kind": "Method",
    "detail": "Function (bShowFullToolbar = ! bShowFullToolbar ; } bool)",
    "insertText": "ShouldShowFullToolbar()"
  },
  {
    "label": "TransitionFromPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionFromPIE(bool bIsSimulating)"
  },
  {
    "label": "OnGetScaleBoxStretch()",
    "kind": "Method",
    "detail": "Function (EStretch::Type)",
    "insertText": "OnGetScaleBoxStretch()"
  },
  {
    "label": "GetSViewportSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetSViewportSize()"
  },
  {
    "label": "OnPerformanceSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPerformanceSettingsChanged(UObject* Obj, struct FPropertyChangedEvent& ChangeEvent)"
  },
  {
    "label": "FViewportActorPreview()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<class FLevelViewportLayout> ParentLayout ; TWeakPtr<ILevelEditor> ParentLevelEditor ; TSharedPtr<SOverlay> PIEViewportOverlayWidget ; TSharedPtr<SGameLayerManager> GameLayerManager ; TSharedPtr<SHorizontalBox> ActorPreviewHorizontalBox ; TSharedPtr<class FSceneViewport> ActiveViewport ; TSharedPtr<class FSceneViewport> InactiveViewport ; TSharedPtr<SWidget> InactiveViewportWidgetEditorContent ; FDelegateHandle PIEPreviewFeatureLevelChangedHandle ; TSharedPtr<FLevelEditorViewportClient> LevelViewportClient ; const FSlateBrush* DebuggingBorder ; const FSlateBrush* BlackBackground ; const FSlateBrush* StartingPlayInEditorBorder ; const FSlateBrush* StartingSimulateBorder ; const FSlateBrush* ReturningToEditorBorder ; const FSlateBrush* NonMaximizedBorder ; TArray<UObject*> DroppedObjects ; FVector2D CachedOnDropLocalMousePos ; TWeakPtr<class SWindow> HighResScreenshotDialog ; TSharedPtr<class SCaptureRegionWidget> CaptureRegionWidget ; struct EViewTransition { enum Type { None = 0,FadingIn,StartingPlayInEditor,StartingSimulate,ReturningToEditor } ; } ; EViewTransition::Type ViewTransitionType ; FCurveSequence ViewTransitionAnim ; bool bViewTransitionAnimPending ; FString DeviceProfile ; FName ConfigKey ; class FViewportActorPreview { public :)",
    "insertText": "FViewportActorPreview() : bIsPinned(false) , bIsPanelDetached(false)"
  },
  {
    "label": "ToggleIsPinned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleIsPinned()"
  },
  {
    "label": "ToggleIsPanelDetached()",
    "kind": "Method",
    "detail": "Function (bIsPinned = ! bIsPinned ; } void)",
    "insertText": "ToggleIsPanelDetached()"
  },
  {
    "label": "LockActorInternal()",
    "kind": "Method",
    "detail": "Function (bIsPanelDetached = ! bIsPanelDetached ; } TWeakObjectPtr<AActor> Actor ; TSharedPtr<FLevelEditorViewportClient> LevelViewportClient ; TSharedPtr<FSceneViewport> SceneViewport ; TSharedPtr<SActorPreview> PreviewWidget ; bool bIsPinned ; bool bIsPanelDetached ; } ; TArray<FViewportActorPreview> ActorPreviews ; TSet<TWeakObjectPtr<AActor>> AlwaysPreviewActors ; TSharedPtr<class SBorder> PIEOverlayBorder ; FCurveSequence PIEOverlayAnim ; bool bPIEHasFocus ; bool bPIEContainsFocus ; int32 UserAllowThrottlingValue ; bool bShowToolbarAndControls ; bool bShowFullToolbar ; TSharedPtr<class SWidget> InViewportMenuWrapper ; bool bIsInViewportMenuShowing ; bool bIsInViewportMenuInitialized ; TSharedPtr<class SInViewportDetails> InViewportMenu ; bool bInViewportMenuEnabled ; TSharedPtr<SWorldPartitionViewportWidget> WorldPartitionViewportWidget ; protected : void)",
    "insertText": "LockActorInternal(AActor* NewActorToLock)"
  },
  {
    "label": "GetCameraInformationFromActor()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "GetCameraInformationFromActor(AActor* Actor, FMinimalViewInfo& out_CameraInfo)"
  },
  {
    "label": "CanGetCameraInformationFromActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGetCameraInformationFromActor(AActor* Actor)"
  }
]