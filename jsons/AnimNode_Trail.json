[
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FPerJointTrailSetup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerJointTrailSetup"
  },
  {
    "label": "FRotationLimit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRotationLimit"
  },
  {
    "label": "FAnimNode_Trail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Trail"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneContainer . h \" # include \" Curves / CurveFloat . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" BoneControllers / AnimNode_AnimDynamics . h \" # include \" AnimNode_Trail . generated . h \" class USkeletalMeshComponent ; struct FPerJointTrailSetup { float TrailRelaxationSpeedPerSecond ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FRotationLimit() : LimitMin(-180, -180, -180) , LimitMax(+180, +180, +180)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAnimNode_Trail()",
    "kind": "Method",
    "detail": "Function (float ThisTimstep ; TArray<FVector> TrailBoneLocations ; TArray<FPerJointTrailSetup> PerJointTrailData ; # if WITH_EDITORONLY_DATA TArray<FColor> TrailDebugColors ; TArray<FColor> PlaneDebugColors ; # endif)",
    "insertText": "FAnimNode_Trail()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternal(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "EnsureChainSize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "EnsureChainSize()"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetAlignVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAlignVector(EAxis::Type AxisOption, bool bInvert)"
  }
]