[
  {
    "label": "E",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "E"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FLOAT_MAX_BIASED_EXP()",
    "kind": "Method",
    "detail": "Function (const unsigned int HALF_FLOAT_MIN_BIASED_EXP_AS_SINGLE_FP_EXP = 0 x38000000 ; const unsigned int HALF_FLOAT_MAX_BIASED_EXP_AS_SINGLE_FP_EXP = 0 x47800000 ; const unsigned int)",
    "insertText": "FLOAT_MAX_BIASED_EXP(0xFF << 23)"
  },
  {
    "label": "HALF_FLOAT_MAX_BIASED_EXP()",
    "kind": "Method",
    "detail": "Function (const unsigned int)",
    "insertText": "HALF_FLOAT_MAX_BIASED_EXP(0x1F << 10)"
  },
  {
    "label": "st_float16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "st_float16()"
  },
  {
    "label": "st_float16()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "st_float16(0.0f)"
  },
  {
    "label": "st_float16()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "st_float16(st_float32 fSinglePrecision)"
  },
  {
    "label": "sign()",
    "kind": "Method",
    "detail": "Function (union { st_float32 f ; st_uint32 x ; } ; f = fSinglePrecision ; st_uint32)",
    "insertText": "sign(st_uint16) (x >> 31)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (st_uint32 mantissa ; st_uint32 exp ; mantissa =)",
    "insertText": "x((1 << 23) - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (exp = x& FLOAT_MAX_BIASED_EXP ;)",
    "insertText": "if(exp >= HALF_FLOAT_MAX_BIASED_EXP_AS_SINGLE_FP_EXP)"
  },
  {
    "label": "mantissa()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mantissa(1 << 23)"
  },
  {
    "label": "m_uiValue()",
    "kind": "Method",
    "detail": "Function (} else { mantissa = 0 ; })",
    "insertText": "m_uiValue(((st_uint16)sign) << 15) | (st_uint16)(HALF_FLOAT_MAX_BIASED_EXP) | (st_uint16)(mantissa >> 13)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(exp <= HALF_FLOAT_MIN_BIASED_EXP_AS_SINGLE_FP_EXP)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exp(HALF_FLOAT_MIN_BIASED_EXP_AS_SINGLE_FP_EXP - exp)"
  },
  {
    "label": "mantissa()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mantissa(14 + exp)"
  },
  {
    "label": "m_uiValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_uiValue(((st_uint16)sign) << 15) | (st_uint16)(mantissa)"
  },
  {
    "label": "m_uiValue()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "m_uiValue(((st_uint16)sign) << 15) | (st_uint16)((exp - HALF_FLOAT_MIN_BIASED_EXP_AS_SINGLE_FP_EXP) >> 13) | (st_uint16)(mantissa >> 13)"
  },
  {
    "label": "st_float16()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "st_float16(const st_float16& hfCopy)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (m_uiValue = hfCopy . m_uiValue ; } st_float16::operator)",
    "insertText": "st_float32(void)"
  },
  {
    "label": "sign()",
    "kind": "Method",
    "detail": "Function (st_uint32)",
    "insertText": "sign(st_uint32) (m_uiValue >> 15)"
  },
  {
    "label": "mantissa()",
    "kind": "Method",
    "detail": "Function (st_uint32)",
    "insertText": "mantissa(st_uint32) (m_uiValue & ((1 << 10) - 1))"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (st_uint32)",
    "insertText": "exp(st_uint32) (m_uiValue & HALF_FLOAT_MAX_BIASED_EXP)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (union { st_float32 f ; st_uint32 x ; } ;)",
    "insertText": "if(exp == HALF_FLOAT_MAX_BIASED_EXP)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (exp = FLOAT_MAX_BIASED_EXP ;)",
    "insertText": "if(mantissa) mantissa = (1 << 23)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(exp == 0x0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (mantissa<<= 1 ; exp = HALF_FLOAT_MIN_BIASED_EXP_AS_SINGLE_FP_EXP ;)",
    "insertText": "while((mantissa & (1 << 10)) == 0)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (mantissa<<= 1 ;)",
    "insertText": "exp(1 << 23)"
  },
  {
    "label": "mantissa()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "mantissa((1 << 10) - 1)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (mantissa<<= 1 3 ; } } else { mantissa<<= 1 3 ;)",
    "insertText": "exp(exp << 13)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "x(sign << 31)"
  },
  {
    "label": "Enumeration()",
    "kind": "Method",
    "detail": "Function (} template<class E,class T> Enumeration<E,T)",
    "insertText": "Enumeration(E eValue) : m_eEnum(static_cast<T>(eValue))"
  },
  {
    "label": "Enumeration()",
    "kind": "Method",
    "detail": "Function (} template<class E,class T> Enumeration<E,T)",
    "insertText": "Enumeration(st_int32 nValue) : m_eEnum(static_cast<T>(nValue))"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (} template<class E,class T> Enumeration<E,T>::operator)",
    "insertText": "E(void)"
  }
]