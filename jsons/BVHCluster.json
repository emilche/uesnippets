[
  {
    "label": "FBVHCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBVHCluster"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "FBVHCluster()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / Bounds . h \" class FBVHCluster { public :)",
    "insertText": "FBVHCluster(uint32 InNumElements, uint32 InMinPartitionSize, uint32 InMaxPartitionSize)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (template<FGetBounds> void)",
    "insertText": "Build(const FGetBounds& GetBounds)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FRange { uint32 Begin ; uint32 End ; bool)",
    "insertText": "operator(const FRange& Other)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (template<FGetBounds> uint32)",
    "insertText": "Split(uint32 Offset, uint32 Num, const FGetBounds& GetBounds)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (template<FGetBounds> void)",
    "insertText": "Sort(uint32* RESTRICT Dst, uint32* RESTRICT Src, uint32 Num, int32 Dim, const FGetBounds& GetBounds)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(0, NumElements, GetBounds)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} template<FGetBounds> void)",
    "insertText": "Build(uint32 Offset, uint32 Num, const FGetBounds& GetBounds)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Ranges .)",
    "insertText": "Add({ Offset, Offset + Num })"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint32 Num0 = SplitIndex + 1 ; uint32 Num1 = Num - Num0 ;)",
    "insertText": "check(Num1 > 0)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(Offset, Num0, GetBounds)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(Offset + Num0, Num1, GetBounds)"
  },
  {
    "label": "LeastCost()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "LeastCost(MAX_flt)"
  },
  {
    "label": "LeastCostSplit()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "LeastCostSplit(-1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32* Unsorted =& Indexes [ Offset ] ; uint32* Sorted =& SortedTo [ Offset ] ;)",
    "insertText": "for(int32 Dim = 0; Dim < 3; Dim++)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Sorted, Unsorted, Num, Dim, GetBounds)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FBounds3f Bounds ;)",
    "insertText": "for(uint32 i = 0; i < Num; i++)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (Bounds + =)",
    "insertText": "GetBounds(Sorted[i])"
  },
  {
    "label": "HalfSurfaceArea()",
    "kind": "Method",
    "detail": "Function (FVector3f Size = Bounds . Max - Bounds . Min ; float HalfSurfaceArea = Size . X* Size . Y + Size . X* Size . Z + Size . Y* Size . Z ; int32 Count = i + 1 ; CostLeft [ Offset + i ] =)",
    "insertText": "HalfSurfaceArea(float)"
  },
  {
    "label": "FBounds3f()",
    "kind": "Method",
    "detail": "Function (} Bounds =)",
    "insertText": "FBounds3f()"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (} uint32 NumPartitions =)",
    "insertText": "DivideAndRoundUp(Num, MaxPartitionSize)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (uint32 Num0 = i + 1 ; uint32 Num1 = Num - Num0 ; uint32 NumPartitions0 =)",
    "insertText": "DivideAndRoundUp(Num0, MaxPartitionSize)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (uint32 NumPartitions1 =)",
    "insertText": "DivideAndRoundUp(Num1, MaxPartitionSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float Cost = CostLeft [ Offset + i ] + CostRight [ Offset + i + 1 ] ;)",
    "insertText": "if(Cost < LeastCost[ Dim ])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (LeastCost [ Dim ] = Cost ; LeastCostSplit [ Dim ] = i ; } } })",
    "insertText": "Swap(Sorted, Unsorted)"
  },
  {
    "label": "Min3Index()",
    "kind": "Method",
    "detail": "Function (} uint32 BestDim =)",
    "insertText": "Min3Index(LeastCost[0], LeastCost[1], LeastCost[2])"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Sorted, Unsorted, Num, BestDim, GetBounds)"
  },
  {
    "label": "RadixSort32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RadixSort32(Dst, Src, Num, [ this, &GetBounds, Dim ]( uint32 Index ) { FBounds3f Bounds = GetBounds( Index ); union { float f; uint32 i; } Center; Center.f = 0.5f * ( Bounds.Min[ Dim ] + Bounds.Max[ Dim ] ); uint32 Mask = -int32( Center.i >> 31 ) | 0x80000000; return Center.i ^ Mask; })"
  }
]