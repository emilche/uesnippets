[
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "ERichCurveExtrapolation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERichCurveExtrapolation"
  },
  {
    "label": "FCachedInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedInterpolation"
  },
  {
    "label": "FPiecewiseCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPiecewiseCurve"
  },
  {
    "label": "MOVIESCENE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENE_API"
  },
  {
    "label": "Integral()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" MovieSceneFwd . h \" # include \" Channels / MovieSceneInterpolation . h \" # include \" MovieSceneTransformTypes . h \" struct FFrameTime ; enum ERichCurveExtrapolation : int ; namespace UE::MovieScene { namespace Interpolation { struct FCachedInterpolation ; } struct FPiecewiseCurve { FPiecewiseCurve)",
    "insertText": "Integral()"
  },
  {
    "label": "Derivative()",
    "kind": "Method",
    "detail": "Function (FPiecewiseCurve)",
    "insertText": "Derivative()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(double Amount)"
  },
  {
    "label": "GetInterpolationForTime()",
    "kind": "Method",
    "detail": "Function (Interpolation::FCachedInterpolation)",
    "insertText": "GetInterpolationForTime(FFrameTime Time)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(FFrameTime Time, double& OutResult)"
  },
  {
    "label": "InverseEvaluate()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "InverseEvaluate(double Value, FFrameTime TimeHint, EInverseEvaluateFlags Flags)"
  },
  {
    "label": "InverseEvaluateBetween()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InverseEvaluateBetween(double Value, FFrameTime StartTime, FFrameTime EndTime, const TFunctionRef<bool(FFrameTime)>& Visitor)"
  },
  {
    "label": "HasDefaultValue()",
    "kind": "Method",
    "detail": "Function (public : TArray<Interpolation::FCachedInterpolation> Values ; } ; struct FPiecewiseCurveData { const FPiecewiseCurve* Channel ; bool)",
    "insertText": "HasDefaultValue()"
  },
  {
    "label": "NumPieces()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPieces()"
  },
  {
    "label": "GetIndexOfPieceByTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndexOfPieceByTime(const FFrameTime& Time)"
  },
  {
    "label": "GetPieceByIndex()",
    "kind": "Method",
    "detail": "Function (Interpolation::FCachedInterpolation)",
    "insertText": "GetPieceByIndex(int32 Index)"
  },
  {
    "label": "GetPieceByTime()",
    "kind": "Method",
    "detail": "Function (Interpolation::FCachedInterpolation)",
    "insertText": "GetPieceByTime(const FFrameTime& Time)"
  },
  {
    "label": "GetFiniteStart()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "GetFiniteStart()"
  },
  {
    "label": "GetFiniteEnd()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "GetFiniteEnd()"
  },
  {
    "label": "GetPreExtrapolation()",
    "kind": "Method",
    "detail": "Function (ERichCurveExtrapolation)",
    "insertText": "GetPreExtrapolation()"
  },
  {
    "label": "GetPostExtrapolation()",
    "kind": "Method",
    "detail": "Function (ERichCurveExtrapolation)",
    "insertText": "GetPostExtrapolation()"
  }
]