[
  {
    "label": "FEncodedTextureDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncodedTextureDescription"
  },
  {
    "label": "ITextureFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureFormat"
  },
  {
    "label": "ITextureTiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureTiler"
  },
  {
    "label": "FTextureEngineParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureEngineParameters"
  },
  {
    "label": "EPixelFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPixelFormat"
  },
  {
    "label": "FTextureBuildMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureBuildMetadata"
  },
  {
    "label": "FCompressedImage2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedImage2D"
  },
  {
    "label": "FColorAdjustmentParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorAdjustmentParameters"
  },
  {
    "label": "FTextureBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureBuildSettings"
  },
  {
    "label": "ITextureCompressorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureCompressorModule"
  },
  {
    "label": "FImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImage"
  },
  {
    "label": "GetRHIStyleSizeZ()",
    "kind": "Method",
    "detail": "Function (int32 NumSlicesWithDepth ; int32)",
    "insertText": "GetRHIStyleSizeZ(bool bTextureArray, bool bVolume)"
  },
  {
    "label": "FColorAdjustmentParameters()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat PixelFormat ; } ; struct FColorAdjustmentParameters { float AdjustBrightness ; float AdjustBrightnessCurve ; float AdjustSaturation ; float AdjustVibrance ; float AdjustRGBCurve ; float AdjustHue ; float AdjustMinAlpha ; float AdjustMaxAlpha ;)",
    "insertText": "FColorAdjustmentParameters() : AdjustBrightness( 1.0f ), AdjustBrightnessCurve( 1.0f ), AdjustSaturation( 1.0f ), AdjustVibrance( 0.0f ), AdjustRGBCurve( 1.0f ), AdjustHue( 0.0f ), AdjustMinAlpha( 0.0f ), AdjustMaxAlpha( 1.0f)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTextureBuildSettings { FCbObjectView FormatConfigOverride ; FColorAdjustmentParameters ColorAdjustment ; bool bDoScaleMipsForAlphaCoverage ; FVector4f AlphaCoverageThresholds ; bool bUseNewMipFilter ; bool bNormalizeNormals ; float MipSharpening ; uint32 DiffuseConvolveMipLevel ; uint32 SharpenMipKernelSize ; uint32 MaxTextureResolution ; FName TextureFormatName ; bool bHDRSource ; uint8 MipGenSettings ; uint32 bCubemap : 1 ; uint32 bTextureArray : 1 ; uint32 bVolume : 1 ; uint32 bLongLatSource : 1 ; uint32 bSRGB : 1 ; uint8 SourceEncodingOverride ; bool bHasColorSpaceDefinition ; FVector2f RedChromaticityCoordinate ; FVector2f GreenChromaticityCoordinate ; FVector2f BlueChromaticityCoordinate ; FVector2f WhiteChromaticityCoordinate ; uint8 ChromaticAdaptationMethod ; uint32 bUseLegacyGamma : 1 ; uint32 bPreserveBorder : 1 ; uint32 bForceNoAlphaChannel : 1 ; uint32 bForceAlphaChannel : 1 ; uint32 bComputeBokehAlpha : 1 ; uint32 bReplicateRed : 1 ; uint32 bReplicateAlpha : 1 ; uint32 bDownsampleWithAverage : 1 ; uint32 bSharpenWithoutColorShift : 1 ; uint32 bBorderColorBlack : 1 ; uint32 bFlipGreenChannel : 1 ; uint32 bApplyYCoCgBlockScale : 1 ; uint32 bApplyKernelToTopMip : 1 ; uint32 bRenormalizeTopMip : 1 ; uint32 bCPUAccessible : 1 ; uint8 CompositeTextureMode ; float CompositePower ; uint32 LODBias ; uint32 LODBiasWithCinematicMips ; uint32 bStreamable_Unused : 1 ; uint32 bVirtualStreamable : 1 ; uint32 bChromaKeyTexture : 1 ; uint8 PowerOfTwoMode ; FColor PaddingColor ; bool bPadWithBorderColor ; int32 ResizeDuringBuildX ; int32 ResizeDuringBuildY ; FColor ChromaKeyColor ; float ChromaKeyThreshold ; int32 CompressionQuality ; int32 LossyCompressionAmount ; FName OodleTextureSdkVersion ; bool bOodlePreserveExtremes ; uint8 OodleRDO ; uint8 OodleEncodeEffort ; uint8 OodleUniversalTiling ; bool bOodleUsesRDO ; float Downscale ; uint8 DownscaleOptions ; int32 VirtualAddressingModeX ; int32 VirtualAddressingModeY ; int32 VirtualTextureTileSize ; int32 VirtualTextureBorderSize ; uint8 RepresentsEncodeSpeedNoSend ; uint8 TextureAddressModeX = 0 ; uint8 TextureAddressModeY = 0 ; uint8 TextureAddressModeZ = 0 ; const ITextureTiler* Tiler = nullptr ; const ITextureTiler* TilerEvenIfNotSharedLinear = nullptr ; bool bAffectedBySharedLinearEncoding = false ; FName BaseTextureFormatName ; const ITextureFormat* BaseTextureFormat = nullptr ; bool bKnowAlphaTransparency = false ; bool bHasTransparentAlpha = false ; bool bDecodeForPCUsage = false ; uint32 MaxTextureResolutionDefault = TNumericLimits<uint32)",
    "insertText": "Max()"
  },
  {
    "label": "FTextureBuildSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextureBuildSettings() : bDoScaleMipsForAlphaCoverage(false) , AlphaCoverageThresholds(0, 0, 0, 0) , bUseNewMipFilter(false) , bNormalizeNormals(false) , MipSharpening(0.0f) , DiffuseConvolveMipLevel(0) , SharpenMipKernelSize(2) , MaxTextureResolution(MaxTextureResolutionDefault) , bHDRSource(false) , MipGenSettings(1 ) , bCubemap(false) , bTextureArray(false) , bVolume(false) , bLongLatSource(false) , bSRGB(false) , SourceEncodingOverride(0 ) , bHasColorSpaceDefinition(false) , RedChromaticityCoordinate(0, 0) , GreenChromaticityCoordinate(0, 0) , BlueChromaticityCoordinate(0, 0) , WhiteChromaticityCoordinate(0, 0) , ChromaticAdaptationMethod(1 ) , bUseLegacyGamma(false) , bPreserveBorder(false) , bForceNoAlphaChannel(false) , bForceAlphaChannel(false) , bComputeBokehAlpha(false) , bReplicateRed(false) , bReplicateAlpha(false) , bDownsampleWithAverage(false) , bSharpenWithoutColorShift(false) , bBorderColorBlack(false) , bFlipGreenChannel(false) , bApplyYCoCgBlockScale(false) , bApplyKernelToTopMip(false) , bRenormalizeTopMip(false) , bCPUAccessible(false) , CompositeTextureMode(0 ) , CompositePower(1.0f) , LODBias(0) , LODBiasWithCinematicMips(0) , bStreamable_Unused(false) , bVirtualStreamable(false) , bChromaKeyTexture(false) , PowerOfTwoMode(0 ) , PaddingColor(FColor::Black) , bPadWithBorderColor(false) , ResizeDuringBuildX(0) , ResizeDuringBuildY(0) , ChromaKeyColor(FColorList::Magenta) , ChromaKeyThreshold(1.0f / 255.0f) , CompressionQuality(-1) , LossyCompressionAmount(0 ) , OodleTextureSdkVersion() , bOodlePreserveExtremes(false) , OodleRDO(30) , OodleEncodeEffort(0 ) , OodleUniversalTiling(0 ) , bOodleUsesRDO(false) , Downscale(0.0) , DownscaleOptions(0) , VirtualAddressingModeX(0) , VirtualAddressingModeY(0) , VirtualTextureTileSize(0) , VirtualTextureBorderSize(0)"
  },
  {
    "label": "GetSourceGammaSpace()",
    "kind": "Method",
    "detail": "Function (} EGammaSpace)",
    "insertText": "GetSourceGammaSpace()"
  },
  {
    "label": "GetDestGammaSpace()",
    "kind": "Method",
    "detail": "Function (} EGammaSpace)",
    "insertText": "GetDestGammaSpace()"
  },
  {
    "label": "GetTextureExpectsAlphaInPixelFormat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetTextureExpectsAlphaInPixelFormat(bool bInSourceMipsAlphaDetected)"
  },
  {
    "label": "GetTextureExpectsAlphaInPixelFormat()",
    "kind": "Method",
    "detail": "Function (* bOutOutputHasAlpha = bHasTransparentAlpha ; } else {* bOutOutputHasAlpha =)",
    "insertText": "GetTextureExpectsAlphaInPixelFormat(bUnknownSourceAlphaFallback)"
  },
  {
    "label": "GetOutputAlphaFromKnownAlphaOrFail()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetOutputAlphaFromKnownAlphaOrFail(bool* bOutOutputHasAlpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* bOutOutputHasAlpha = bHasTransparentAlpha ; return true ; })",
    "insertText": "if(bForceNoAlphaChannel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* bOutOutputHasAlpha = false ; return true ; })",
    "insertText": "if(bForceAlphaChannel)"
  },
  {
    "label": "GetEncodedTextureDescription()",
    "kind": "Method",
    "detail": "Function (* bOutOutputHasAlpha = true ; return true ; } return false ; } void)",
    "insertText": "GetEncodedTextureDescription(FEncodedTextureDescription* OutTextureDescription, const ITextureFormat* InTextureFormat, int32 InEncodedMip0SizeX, int32 InEncodedMip0SizeY, int32 InEncodedMip0NumSlices, int32 InMipCount, bool bInImageHasAlphaChannel)"
  },
  {
    "label": "GetEncodedTextureDescriptionWithPixelFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEncodedTextureDescriptionWithPixelFormat(FEncodedTextureDescription* OutTextureDescription, EPixelFormat InEncodedPixelFormat, int32 InEncodedMip0SizeX, int32 InEncodedMip0SizeY, int32 InEncodedMip0NumSlices, int32 InMipCount)"
  },
  {
    "label": "GetEncodedTextureDescriptionFromSourceMips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEncodedTextureDescriptionFromSourceMips(FEncodedTextureDescription* OutTextureDescription, const ITextureFormat* InTextureFormat, int32 InSourceMip0SizeX, int32 InSourceMip0SizeY, int32 InSourceMip0NumSlices, int32 InSourceMipCount, bool bInImageHasAlphaChannel)"
  },
  {
    "label": "GetOutputMipInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOutputMipInfo(int32 InMip0SizeX, int32 InMip0SizeY, int32 InMip0NumSlices, int32 InExistingMipCount, int32& OutMip0SizeX, int32& OutMip0SizeY, int32& OutMip0NumSlices, int32& OutMipCount)"
  },
  {
    "label": "GetOpenColorIOVersion()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOpenColorIOVersion()"
  },
  {
    "label": "BuildTexture()",
    "kind": "Method",
    "detail": "Function (} ; class ITextureCompressorModule : public IModuleInterface { public : bool)",
    "insertText": "BuildTexture(TArray<struct FImage>& SourceMips, TArray<struct FImage>& AssociatedNormalSourceMips, const FTextureBuildSettings& BuildSettings, FStringView DebugTexturePathName, TArray<FCompressedImage2D>& OutTextureMips, uint32& OutNumMipsInTail, uint32& OutExtData, UE::TextureBuildUtilities::FTextureBuildMetadata* OutMetadata)"
  },
  {
    "label": "GenerateMipChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateMipChain(const FTextureBuildSettings& Settings, const FImage& BaseImage, TArray<FImage> &OutMipChain, uint32 MipChainDepth)"
  },
  {
    "label": "DetermineAlphaChannelTransparency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetermineAlphaChannelTransparency(const FTextureBuildSettings& InBuildSettings, const FLinearColor& InChannelMin, const FLinearColor& InChannelMax, bool& bOutAlphaIsTransparent)"
  },
  {
    "label": "AdjustImageColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustImageColors(FImage& Image, const FTextureBuildSettings& InBuildSettings)"
  },
  {
    "label": "GenerateBaseCubeMipFromLongitudeLatitude2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBaseCubeMipFromLongitudeLatitude2D(FImage* OutMip, const FImage& SrcImage, const FTextureBuildSettings& InBuildSettings)"
  },
  {
    "label": "GenerateAngularFilteredMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAngularFilteredMips(TArray<FImage>& InOutMipChain, int32 NumMips, uint32 DiffuseConvolveMipLevel)"
  },
  {
    "label": "GetMipCountForBuildSettings()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMipCountForBuildSettings(int32 InMip0SizeX, int32 InMip0SizeY, int32 InMip0NumSlices, int32 InExistingMipCount, const FTextureBuildSettings& InBuildSettings, int32& OutMip0SizeX, int32& OutMip0SizeY, int32& OutMip0NumSlices)"
  },
  {
    "label": "GetOutputMipInfo()",
    "kind": "Method",
    "detail": "Function (int32 OutMipCount = 0 ; bool bSucceeded = InBuildSettings .)",
    "insertText": "GetOutputMipInfo(InMip0SizeX, InMip0SizeY, InMip0NumSlices, InExistingMipCount, OutMip0SizeX, OutMip0SizeY, OutMip0NumSlices, OutMipCount)"
  }
]