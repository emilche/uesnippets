[
  {
    "label": "FHasher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHasher"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringView . h \" # include \" Containers / BitArray . h \" # include \" Misc / StringBuilder . h \" # include \" Hash / xxhash . h \" # include \" HLSLTree / HLSLTreeTypes . h \" namespace UE::HLSLTree { class FHasher { public : FXxHash64)",
    "insertText": "Finalize()"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendData(const void* Data, uint64 Size)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "Update(Data, Size)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} private : FXxHash64Builder Builder ; } ; template<T> void)",
    "insertText": "AppendHash(FHasher& Hasher, const T& Value)"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (Hasher .)",
    "insertText": "AppendData(&Value, sizeof(Value))"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AppendHash(FHasher& Hasher, TArrayView<T> Value)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Element)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} } template<Allocator> void)",
    "insertText": "AppendHash(FHasher& Hasher, const TBitArray<Allocator>& Value)"
  },
  {
    "label": "CalculateNumWords()",
    "kind": "Method",
    "detail": "Function (const uint32 NumWords =)",
    "insertText": "CalculateNumWords(Value.Num())"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const uint32* Data = Value .)",
    "insertText": "GetData()"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (Hasher .)",
    "insertText": "AppendData(Data, NumWords * sizeof(uint32))"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const FName& Value)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.GetComparisonIndex())"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.GetNumber())"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, FStringView Value)"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (Hasher .)",
    "insertText": "AppendData(Value.GetData(), Value.Len() * sizeof(TCHAR))"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const FString& Value)"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (Hasher .)",
    "insertText": "AppendData(&Value[0], Value.Len() * sizeof(TCHAR))"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const TCHAR* Value)"
  },
  {
    "label": "AppendData()",
    "kind": "Method",
    "detail": "Function (Hasher .)",
    "insertText": "AppendData(Value, FCString::Strlen(Value) * sizeof(TCHAR))"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const FCustomHLSLInput& Value)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.Name)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.Expression)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const Shader::FType& Type)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const Shader::FValue& Value)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.Type)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.GetComponent(i))"
  },
  {
    "label": "AppendHashes()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AppendHashes(FHasher& Hasher)"
  },
  {
    "label": "AppendHashes()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . ArgTypes> void)",
    "insertText": "AppendHashes(FHasher& Hasher, const T& Value, ArgTypes&&... Args)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value)"
  },
  {
    "label": "AppendHashes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHashes(Hasher, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "HashValue()",
    "kind": "Method",
    "detail": "Function (} template<T> FXxHash64)",
    "insertText": "HashValue(const T& Value)"
  }
]