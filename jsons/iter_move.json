[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_ITER_MOVE_H # define _LIBCPP___ITERATOR_ITER_MOVE_H # include<__concepts / class_or_enum . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / forward . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (namespace __iter_move { void)",
    "insertText": "iter_move()"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> concept __unqualified_iter_move = __class_or_enum<remove_cvref_t<_Tp>>&&)",
    "insertText": "requires(_Tp&& __t)"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_move(std::forward<_Tp>(__t))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (* __t ; requires is_lvalue_reference_v<)",
    "insertText": "decltype(*__t)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (* __t ;)",
    "insertText": "requires(!is_lvalue_reference_v<decltype(*__t)>)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; struct __fn { template<class _Ip> requires __unqualified_iter_move<_Ip> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator()(_Ip&& __i) const noexcept(noexcept(iter_move(std::forward<_Ip>(__i))))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Ip> requires __move_deref<_Ip> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Ip&& __i) const noexcept(noexcept(std::move(*std::forward<_Ip>(__i)))) -> decltype( std::move(*std::forward<_Ip>(__i)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Ip> requires __just_deref<_Ip> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Ip&& __i) const noexcept(noexcept(*std::forward<_Ip>(__i))) -> decltype( *std::forward<_Ip>(__i))"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto iter_move = __iter_move::__fn { } ; } } template<__dereferenceable _Tp> requires)",
    "insertText": "requires(_Tp& __t)"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (__can_reference)",
    "insertText": "iter_move(__t)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} using iter_rvalue_reference_t =)",
    "insertText": "decltype(ranges::iter_move(declval<_Tp&>()))"
  }
]