[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FPendingDelete",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingDelete"
  },
  {
    "label": "FAssetDeleteModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDeleteModel"
  },
  {
    "label": "EState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EState"
  },
  {
    "label": "FPendingDelete()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" struct FAssetData ; struct FPendingDelete : TSharedFromThis<FPendingDelete> { public :)",
    "insertText": "FPendingDelete(UObject* InObject)"
  },
  {
    "label": "CheckForReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForReferences()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObject()"
  },
  {
    "label": "IsAssetContained()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetContained(const FName& PackageName)"
  },
  {
    "label": "IsReferencedInMemoryByNonUndo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReferencedInMemoryByNonUndo()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bIsInternal = Value ; } bool)",
    "insertText": "operator(const FPendingDelete& Other)"
  },
  {
    "label": "FAssetDeleteModel()",
    "kind": "Method",
    "detail": "Function (TArray<FName> DiskReferences ; FReferencerInformationList MemoryReferences ; int32 RemainingDiskReferences ; int32 RemainingMemoryReferences ; private : UObject* Object ; TArray<UObject*> InternalObjects ; bool bReferencesChecked ; bool bIsReferencedInMemoryByNonUndo ; bool bIsReferencedInMemoryByUndo ; bool bIsInternal ; } ; class FAssetDeleteModel { public : enum EState { Waiting = 0,StartScanning,Scanning,UpdateActions,Finished,} ; public :)",
    "insertText": "FAssetDeleteModel(const TArray<UObject*>& InObjectsToDelete)"
  },
  {
    "label": "FAssetDeleteModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAssetDeleteModel()"
  },
  {
    "label": "AddObjectToDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjectToDelete(UObject* InObject)"
  },
  {
    "label": "GetPendingDeletedAssets()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FPendingDelete>>*)",
    "insertText": "GetPendingDeletedAssets()"
  },
  {
    "label": "IsObjectInPendingDeletes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectInPendingDeletes(const UObject* InObject)"
  },
  {
    "label": "IsAssetInPendingDeletes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetInPendingDeletes(const FName& PackageName)"
  },
  {
    "label": "DeleteSourceContentFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSourceContentFiles()"
  },
  {
    "label": "CanDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelete()"
  },
  {
    "label": "DoDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoDelete()"
  },
  {
    "label": "CanForceDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanForceDelete()"
  },
  {
    "label": "DoForceDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoForceDelete()"
  },
  {
    "label": "CanReplaceReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReplaceReferences()"
  },
  {
    "label": "CanReplaceReferencesWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReplaceReferencesWith(const FAssetData& InAssetData)"
  },
  {
    "label": "DoReplaceReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoReplaceReferences(const FAssetData& ReplaceReferencesWith)"
  },
  {
    "label": "GetProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetProgress()"
  },
  {
    "label": "GetProgressText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetProgressText()"
  },
  {
    "label": "IsAnythingReferencedInMemoryByNonUndo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnythingReferencedInMemoryByNonUndo()"
  },
  {
    "label": "GoToNextReferenceInLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GoToNextReferenceInLevel()"
  },
  {
    "label": "GetDeletedObjectCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDeletedObjectCount()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FAssetDeleteModel, FOnStateChanged, EState)"
  },
  {
    "label": "OnStateChanged()",
    "kind": "Method",
    "detail": "Function (FOnStateChanged&)",
    "insertText": "OnStateChanged()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(EState NewState)"
  },
  {
    "label": "ComputeCanReplaceReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeCanReplaceReferences()"
  },
  {
    "label": "DiscoverSourceFileReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscoverSourceFileReferences(FPendingDelete& PendingDelete)"
  }
]