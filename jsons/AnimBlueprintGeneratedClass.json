[
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "UAnimGraphNode_StateMachineBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_StateMachineBase"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UAnimStateNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimStateNode"
  },
  {
    "label": "UAnimStateNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimStateNodeBase"
  },
  {
    "label": "UAnimStateAliasNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimStateAliasNode"
  },
  {
    "label": "UAnimStateTransitionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimStateTransitionNode"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "UPoseWatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatch"
  },
  {
    "label": "FAnimSubsystem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSubsystem"
  },
  {
    "label": "FAnimSubsystemInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSubsystemInstance"
  },
  {
    "label": "FPropertyAccessLibrary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAccessLibrary"
  },
  {
    "label": "FStateMachineStateDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStateMachineStateDebugData"
  },
  {
    "label": "FStateMachineDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStateMachineDebugData"
  },
  {
    "label": "FStateAliasTransitionStateIndexPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStateAliasTransitionStateIndexPair"
  },
  {
    "label": "FAnimationFrameSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationFrameSnapshot"
  },
  {
    "label": "FAnimBlueprintDebugData_NodeVisit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData_NodeVisit"
  },
  {
    "label": "FAnimBlueprintDebugData_AttributeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData_AttributeRecord"
  },
  {
    "label": "FAnimBlueprintDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData"
  },
  {
    "label": "FNodeValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeValue"
  },
  {
    "label": "FSequencePlayerRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencePlayerRecord"
  },
  {
    "label": "FBlendSpacePlayerRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpacePlayerRecord"
  },
  {
    "label": "FAnimBlueprintMutableData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintMutableData"
  },
  {
    "label": "FAnimBlueprintConstantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintConstantData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UAnimBlueprintGeneratedStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintGeneratedStruct"
  },
  {
    "label": "UAnimBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintGeneratedClass"
  },
  {
    "label": "FAnimBlueprintCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimBlueprintCompilerContext"
  },
  {
    "label": "FAnimBlueprintGeneratedClassCompiledData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimBlueprintGeneratedClassCompiledData"
  },
  {
    "label": "FKismetDebugUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKismetDebugUtilities"
  },
  {
    "label": "UAnimBlueprintExtension_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintExtension_Base"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Animation / AnimTypes . h \" # include \" Engine / BlueprintGeneratedClass . h \" # include \" Animation / AnimStateMachineTypes . h \" # include \" Animation / AnimClassInterface . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / BlendSpace . h \" # include \" Animation / ExposedValueHandler . h \" # include \" Engine / PoseWatchRenderData . h \" # include \" AnimBlueprintGeneratedClass . generated . h \" class UAnimGraphNode_Base ; class UAnimGraphNode_StateMachineBase ; class UAnimInstance ; class UAnimStateNode ; class UAnimStateNodeBase ; class UAnimStateAliasNode ; class UAnimStateTransitionNode ; class UEdGraph ; class USkeleton ; class UPoseWatch ; struct FAnimSubsystem ; struct FAnimSubsystemInstance ; struct FPropertyAccessLibrary ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FStateMachineStateDebugData() : StateMachineIndex(INDEX_NONE) , StateIndex(INDEX_NONE) , Weight(0.0f) , ElapsedTime(0.0f)"
  },
  {
    "label": "FStateMachineStateDebugData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStateMachineStateDebugData(int32 InStateMachineIndex, int32 InStateIndex, float InWeight, float InElapsedTime) : StateMachineIndex(InStateMachineIndex) , StateIndex(InStateIndex) , Weight(InWeight) , ElapsedTime(InElapsedTime)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FStateMachineDebugData() : MachineIndex(INDEX_NONE)"
  },
  {
    "label": "FindNodeFromStateIndex()",
    "kind": "Method",
    "detail": "Function (} struct FStateAliasTransitionStateIndexPair { int32 TransitionIndex ; int32 AssociatedStateIndex ; } ; TMap<TWeakObjectPtr<UEdGraphNode>,int32> NodeToStateIndex ; TMap<int32,TWeakObjectPtr<UAnimStateNodeBase>> StateIndexToNode ; TMultiMap<TWeakObjectPtr<UEdGraphNode>,int32> NodeToTransitionIndex ; TMultiMap<TWeakObjectPtr<UAnimStateAliasNode>,FStateAliasTransitionStateIndexPair> StateAliasNodeToTransitionStatePairs ; TWeakObjectPtr<UAnimGraphNode_StateMachineBase> MachineInstanceNode ; int32 MachineIndex ; public : UEdGraphNode*)",
    "insertText": "FindNodeFromStateIndex(int32 StateIndex)"
  },
  {
    "label": "FindNodeFromTransitionIndex()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "FindNodeFromTransitionIndex(int32 TransitionIndex)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FAnimationFrameSnapshot() #if WITH_EDITORONLY_DATA : TimeStamp(0.0)"
  },
  {
    "label": "InitializeFromInstance()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA public : TArray<uint8> SerializedData ; double TimeStamp ; public : void)",
    "insertText": "InitializeFromInstance(UAnimInstance* Instance)"
  },
  {
    "label": "CopyToInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToInstance(UAnimInstance* Instance)"
  },
  {
    "label": "FAnimBlueprintDebugData_NodeVisit()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FAnimBlueprintDebugData_NodeVisit { int32 SourceID ; int32 TargetID ; float Weight ;)",
    "insertText": "FAnimBlueprintDebugData_NodeVisit(int32 InSourceID, int32 InTargetID, float InWeight) : SourceID(InSourceID) , TargetID(InTargetID) , Weight(InWeight)"
  },
  {
    "label": "FAnimBlueprintDebugData_AttributeRecord()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAnimBlueprintDebugData_AttributeRecord { FName Attribute ; int32 OtherNode ;)",
    "insertText": "FAnimBlueprintDebugData_AttributeRecord(int32 InOtherNode, FName InAttribute) : Attribute(InAttribute) , OtherNode(InOtherNode)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FAnimBlueprintDebugData() #if WITH_EDITORONLY_DATA : SnapshotBuffer(NULL) , SnapshotIndex(INDEX_NONE)"
  },
  {
    "label": "FNodeValue()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA public : TMap<TWeakObjectPtr<const UEdGraph>,FStateMachineDebugData> StateMachineDebugData ; TMap<TWeakObjectPtr<const UEdGraph>,TWeakObjectPtr<UAnimStateNode>> StateGraphToNodeMap ; TMap<TWeakObjectPtr<const UEdGraph>,TWeakObjectPtr<UAnimStateTransitionNode>> TransitionGraphToNodeMap ; TMap<TWeakObjectPtr<const UEdGraph>,TWeakObjectPtr<UAnimStateTransitionNode>> TransitionBlendGraphToNodeMap ; TMap<TWeakObjectPtr<const UAnimGraphNode_Base>,int32> NodePropertyToIndexMap ; TMap<int32,TWeakObjectPtr<const UEdGraphNode>> NodePropertyIndexToNodeMap ; TMap<FGuid,int32> NodeGuidToIndexMap ; TMap<TWeakObjectPtr<const UAnimGraphNode_Base>,TArray<FName>> NodeAttributes ; TArray<FStateMachineStateDebugData> StateData ; TSimpleRingBuffer<FAnimationFrameSnapshot>* SnapshotBuffer ; TMap<FEdGraphPinReference,FProperty*> GraphPinToFoldedPropertyMap ; using FNodeVisit = FAnimBlueprintDebugData_NodeVisit ; TArray<FNodeVisit> UpdatedNodesThisFrame ; using FAttributeRecord = FAnimBlueprintDebugData_AttributeRecord ; TMap<int32,TArray<FAttributeRecord>> NodeInputAttributesThisFrame ; TMap<int32,TArray<FAttributeRecord>> NodeOutputAttributesThisFrame ; TMap<int32,FName> NodeSyncsThisFrame ; struct FNodeValue { FString Text ; int32 NodeID ;)",
    "insertText": "FNodeValue(const FString& InText, int32 InNodeID) : Text(InText) , NodeID(InNodeID)"
  },
  {
    "label": "FSequencePlayerRecord()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FNodeValue> NodeValuesThisFrame ; struct FSequencePlayerRecord {)",
    "insertText": "FSequencePlayerRecord(int32 InNodeID, float InPosition, float InLength, int32 InFrameCount) : NodeID(InNodeID) , Position(InPosition) , Length(InLength) , FrameCount(InFrameCount)"
  },
  {
    "label": "FBlendSpacePlayerRecord()",
    "kind": "Method",
    "detail": "Function (} int32 NodeID ; float Position ; float Length ; int32 FrameCount ; } ; TArray<FSequencePlayerRecord> SequencePlayerRecordsThisFrame ; struct FBlendSpacePlayerRecord {)",
    "insertText": "FBlendSpacePlayerRecord(int32 InNodeID, const UBlendSpace* InBlendSpace, const FVector& InPosition, const FVector& InFilteredPosition) : NodeID(InNodeID) , BlendSpace(InBlendSpace) , Position(InPosition) , FilteredPosition(InFilteredPosition)"
  },
  {
    "label": "FAnimBlueprintDebugData()",
    "kind": "Method",
    "detail": "Function (} int32 NodeID ; TWeakObjectPtr<const UBlendSpace> BlendSpace ; FVector Position ; FVector FilteredPosition ; } ; TArray<FBlendSpacePlayerRecord> BlendSpacePlayerRecordsThisFrame ; TArray<FAnimNodePoseWatch> AnimNodePoseWatch ; int32 SnapshotIndex ; public : ~)",
    "insertText": "FAnimBlueprintDebugData()"
  },
  {
    "label": "IsReplayingSnapshot()",
    "kind": "Method",
    "detail": "Function (delete SnapshotBuffer ; } SnapshotBuffer = NULL ; } bool)",
    "insertText": "IsReplayingSnapshot()"
  },
  {
    "label": "GetSnapshotLengthInSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSnapshotLengthInSeconds()"
  },
  {
    "label": "GetSnapshotLengthInFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSnapshotLengthInFrames()"
  },
  {
    "label": "SetSnapshotIndexByTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSnapshotIndexByTime(UAnimInstance* Instance, double TargetTime)"
  },
  {
    "label": "SetSnapshotIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSnapshotIndex(UAnimInstance* Instance, int32 NewIndex)"
  },
  {
    "label": "ResetSnapshotBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSnapshotBuffer()"
  },
  {
    "label": "ResetNodeVisitSites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNodeVisitSites()"
  },
  {
    "label": "RecordNodeVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeVisit(int32 TargetNodeIndex, int32 SourceNodeIndex, float BlendWeight)"
  },
  {
    "label": "RecordNodeVisitArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeVisitArray(const TArray<FNodeVisit>& Nodes)"
  },
  {
    "label": "RecordNodeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeAttribute(int32 TargetNodeIndex, int32 SourceNodeIndex, FName InAttribute)"
  },
  {
    "label": "RecordNodeAttributeMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeAttributeMaps(const TMap<int32, TArray<FAttributeRecord>>& InInputAttributes, const TMap<int32, TArray<FAttributeRecord>>& InOutputAttributes)"
  },
  {
    "label": "RecordNodeSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeSync(int32 InSourceNodeIndex, FName InSyncGroup)"
  },
  {
    "label": "RecordNodeSyncsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeSyncsArray(const TMap<int32, FName>& InNodeSyncs)"
  },
  {
    "label": "RecordStateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStateData(int32 StateMachineIndex, int32 StateIndex, float Weight, float ElapsedTime)"
  },
  {
    "label": "RecordNodeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeValue(int32 InNodeID, const FString& InText)"
  },
  {
    "label": "RecordSequencePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordSequencePlayer(int32 InNodeID, float InPosition, float InLength, int32 InFrameCount)"
  },
  {
    "label": "RecordBlendSpacePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordBlendSpacePlayer(int32 InNodeID, const UBlendSpace* InBlendSpace, const FVector& InPosition, const FVector& InFilteredPosition)"
  },
  {
    "label": "AddPoseWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoseWatch(int32 NodeID, UPoseWatchPoseElement* const InPoseWatchPoseElement)"
  },
  {
    "label": "RemovePoseWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseWatch(int32 NodeID)"
  },
  {
    "label": "ForEachActiveVisiblePoseWatchPoseElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachActiveVisiblePoseWatchPoseElement(const TFunctionRef<void(FAnimNodePoseWatch&)>& InFunction)"
  },
  {
    "label": "DisableAllPoseWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAllPoseWatches()"
  },
  {
    "label": "GetNodeAttributes()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FName>)",
    "insertText": "GetNodeAttributes(TWeakObjectPtr<UAnimGraphNode_Base> InAnimGraphNode)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA namespace EPropertySearchMode { enum Type { OnlyThis,Hierarchy } ; } # endif)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() virtual bool IsAsset()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetBakedStateMachines()",
    "kind": "Method",
    "detail": "Function (TArray<FProperty*> MutableProperties ; TArray<FProperty*> ConstantProperties ; TArray<FStructProperty*> ConstantSubsystemProperties ; TArray<FStructProperty*> MutableSubsystemProperties ; FStructProperty* MutableNodeDataProperty = nullptr ; TArray<const FAnimSubsystem*> Subsystems ; # if WITH_EDITORONLY_DATA bool bDataLayoutValid = true ; # endif public : const TArray<FBakedAnimationStateMachine>&)",
    "insertText": "GetBakedStateMachines()"
  },
  {
    "label": "GetTargetSkeleton()",
    "kind": "Method",
    "detail": "Function (} USkeleton*)",
    "insertText": "GetTargetSkeleton()"
  },
  {
    "label": "GetAnimNodeProperties()",
    "kind": "Method",
    "detail": "Function (} const TArray<FStructProperty*>&)",
    "insertText": "GetAnimNodeProperties()"
  },
  {
    "label": "GetOrderedSavedPoseNodeIndicesMap()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,FCachedPoseIndices>&)",
    "insertText": "GetOrderedSavedPoseNodeIndicesMap()"
  },
  {
    "label": "GetSyncGroupIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSyncGroupIndex(FName SyncGroupName)"
  },
  {
    "label": "GetAnimBlueprintFunctions()",
    "kind": "Method",
    "detail": "Function (} const TArray<FAnimBlueprintFunction>&)",
    "insertText": "GetAnimBlueprintFunctions()"
  },
  {
    "label": "GetGraphBlendOptions()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,FAnimGraphBlendOptions>&)",
    "insertText": "GetGraphBlendOptions()"
  },
  {
    "label": "GetBakedStateMachines_Direct()",
    "kind": "Method",
    "detail": "Function (} private : const TArray<FBakedAnimationStateMachine>&)",
    "insertText": "GetBakedStateMachines_Direct()"
  },
  {
    "label": "GetMutableNodeValueRaw()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetMutableNodeValueRaw(int32 InIndex, const UObject* InObject)"
  },
  {
    "label": "GetMutableNodeData()",
    "kind": "Method",
    "detail": "Function (const FAnimBlueprintMutableData*)",
    "insertText": "GetMutableNodeData(const UObject* InObject)"
  },
  {
    "label": "GetMutableNodeData()",
    "kind": "Method",
    "detail": "Function (FAnimBlueprintMutableData*)",
    "insertText": "GetMutableNodeData(UObject* InObject)"
  },
  {
    "label": "GetConstantNodeData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetConstantNodeData()"
  },
  {
    "label": "GetNodeData()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FAnimNodeData>)",
    "insertText": "GetNodeData()"
  },
  {
    "label": "GetAnimNodePropertyCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAnimNodePropertyCount(const UScriptStruct* InNodeType)"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSubsystem(TFunctionRef<EAnimSubsystemEnumeration(const FAnimSubsystemContext&)> InFunction)"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSubsystem(UObject* InObject, TFunctionRef<EAnimSubsystemEnumeration(const FAnimSubsystemInstanceContext&)> InFunction)"
  },
  {
    "label": "FindSubsystem()",
    "kind": "Method",
    "detail": "Function (const FAnimSubsystem*)",
    "insertText": "FindSubsystem(UScriptStruct* InSubsystemType)"
  },
  {
    "label": "IsDataLayoutValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "IsDataLayoutValid()"
  },
  {
    "label": "InitializeAnimNodeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAnimNodeData(UObject* DefaultObject, bool bForce)"
  },
  {
    "label": "VerifyNodeDataLayout()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "VerifyNodeDataLayout()"
  },
  {
    "label": "GetAnimBlueprintDebugData()",
    "kind": "Method",
    "detail": "Function (# endif public : # if WITH_EDITORONLY_DATA FAnimBlueprintDebugData AnimBlueprintDebugData ; FAnimBlueprintDebugData&)",
    "insertText": "GetAnimBlueprintDebugData()"
  },
  {
    "label": "GetGeneratedClassesHierarchy()",
    "kind": "Method",
    "detail": "Function (TArray<const UBlueprintGeneratedClass*> BlueprintHierarchy ;)",
    "insertText": "GetGeneratedClassesHierarchy(this, BlueprintHierarchy)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* SearchIndex = AnimBlueprintClass -> AnimBlueprintDebugData . NodePropertyToIndexMap .)",
    "insertText": "Find(Node)"
  },
  {
    "label": "GetLinkIDForNode()",
    "kind": "Method",
    "detail": "Function (} template<StructType> int32)",
    "insertText": "GetLinkIDForNode(const UAnimGraphNode_Base* Node, EPropertySearchMode::Type SearchMode = EPropertySearchMode::OnlyThis)"
  },
  {
    "label": "StructType()",
    "kind": "Method",
    "detail": "Function (const int32* pIndex = GetNodePropertyIndex<)",
    "insertText": "StructType(Node, SearchMode)"
  },
  {
    "label": "GetPropertyForNode()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } template<StructType> FStructProperty*)",
    "insertText": "GetPropertyForNode(const UAnimGraphNode_Base* Node, EPropertySearchMode::Type SearchMode = EPropertySearchMode::OnlyThis)"
  },
  {
    "label": "StructType()",
    "kind": "Method",
    "detail": "Function (FStructProperty* AnimationProperty = GetPropertyForNode<)",
    "insertText": "StructType(Node)"
  },
  {
    "label": "GetPropertyInstance()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } template<StructType> StructType*)",
    "insertText": "GetPropertyInstance(UObject* Object, FGuid NodeGuid, EPropertySearchMode::Type SearchMode = EPropertySearchMode::OnlyThis)"
  },
  {
    "label": "GetNodePropertyIndexFromGuid()",
    "kind": "Method",
    "detail": "Function (const int32* pIndex =)",
    "insertText": "GetNodePropertyIndexFromGuid(NodeGuid, SearchMode)"
  },
  {
    "label": "GetPropertyInstanceChecked()",
    "kind": "Method",
    "detail": "Function (} } } return NULL ; } template<StructType> StructType&)",
    "insertText": "GetPropertyInstanceChecked(UObject* Object, const UAnimGraphNode_Base* Node, EPropertySearchMode::Type SearchMode = EPropertySearchMode::OnlyThis)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (const int32 Index = AnimBlueprintDebugData . NodePropertyToIndexMap .)",
    "insertText": "FindChecked(Node)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FStructProperty* AnimationProperty = AnimNodeProperties [ AnimNodeProperties .)",
    "insertText": "Num()"
  },
  {
    "label": "GetNodePropertyIndexFromGuid()",
    "kind": "Method",
    "detail": "Function (} const int32*)",
    "insertText": "GetNodePropertyIndexFromGuid(FGuid Guid, EPropertySearchMode::Type SearchMode = EPropertySearchMode::OnlyThis)"
  },
  {
    "label": "GetNodeIndexFromGuid()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNodeIndexFromGuid(FGuid Guid, EPropertySearchMode::Type SearchMode = EPropertySearchMode::OnlyThis)"
  },
  {
    "label": "GetVisualNodeFromNodePropertyIndex()",
    "kind": "Method",
    "detail": "Function (const UEdGraphNode*)",
    "insertText": "GetVisualNodeFromNodePropertyIndex(int32 PropertyIndex, EPropertySearchMode::Type SearchMode = EPropertySearchMode::OnlyThis)"
  },
  {
    "label": "LinkFunctionsToDefaultObjectNodes()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "LinkFunctionsToDefaultObjectNodes(UObject* DefaultObject)"
  },
  {
    "label": "GenerateAnimationBlueprintFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAnimationBlueprintFunctions()"
  },
  {
    "label": "BuildConstantProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildConstantProperties()"
  },
  {
    "label": "GetConstantsStructName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetConstantsStructName()"
  },
  {
    "label": "GetMutablesStructName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMutablesStructName()"
  },
  {
    "label": "PrepareToConformSparseClassData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PrepareToConformSparseClassData(UScriptStruct* SparseClassDataArchetypeStruct)"
  },
  {
    "label": "ConformSparseClassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConformSparseClassData(UObject* Object)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Link(FArchive& Ar, bool bRelinkExistingProperties)"
  },
  {
    "label": "PurgeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeClass(bool bRecompilingOnLoad)"
  },
  {
    "label": "GetPersistentUberGraphFrame()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetPersistentUberGraphFrame(UObject* Obj, UFunction* FuncToCheck)"
  },
  {
    "label": "PostLoadDefaultObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadDefaultObject(UObject* Object)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetNodeFromPropertyIndex()",
    "kind": "Method",
    "detail": "Function (} ; template<NodeType> NodeType*)",
    "insertText": "GetNodeFromPropertyIndex(UObject* AnimInstanceObject, const IAnimClassInterface* AnimBlueprintClass, int32 PropertyIndex)"
  },
  {
    "label": "GetAnimNodeProperties()",
    "kind": "Method",
    "detail": "Function (FStructProperty* NodeProperty = AnimBlueprintClass ->)",
    "insertText": "GetAnimNodeProperties()[AnimBlueprintClass->GetAnimNodeProperties().Num()"
  }
]