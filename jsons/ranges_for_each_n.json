[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Func"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_FOR_EACH_N_H # define _LIBCPP___ALGORITHM_RANGES_FOR_EACH_N_H # include<__algorithm / in_fun_result . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<__iterator / projected . h> # include<__ranges / concepts . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Iter,class _Func> using for_each_n_result = in_fun_result<_Iter,_Func> ; namespace __for_each_n { struct __fn { template<input_iterator _Iter,class _Proj = identity,indirectly_unary_invocable<projected<_Iter,_Proj>> _Func> _LIBCPP_HIDE_FROM_ABI for_each_n_result<_Iter,_Func>)",
    "insertText": "operator()(_Iter __first, iter_difference_t<_Iter> __count, _Func __func, _Proj __proj = {})"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invoke(__func, std::invoke(__proj, *__first))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } return {)",
    "insertText": "move(__first), std::move(__func)"
  }
]