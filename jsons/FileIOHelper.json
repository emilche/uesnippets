[
  {
    "label": "IDxcBlob",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxcBlob"
  },
  {
    "label": "IDxcBlobEncoding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxcBlobEncoding"
  },
  {
    "label": "IDxcBlobUtf8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxcBlobUtf8"
  },
  {
    "label": "IDxcBlobWide",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxcBlobWide"
  },
  {
    "label": "CDxcThreadMallocAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDxcThreadMallocAllocator"
  },
  {
    "label": "CDxcTMHeapPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDxcTMHeapPtr"
  },
  {
    "label": "CDxcMallocHeapPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDxcMallocHeapPtr"
  },
  {
    "label": "AbstractMemoryStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbstractMemoryStream"
  },
  {
    "label": "GetGlobalHeapMalloc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Global . h \" # include \" dxc / Support / WinIncludes . h \" # ifndef _ATL_DECLSPEC_ALLOCATOR # define _ATL_DECLSPEC_ALLOCATOR # endif struct IDxcBlob ; struct IDxcBlobEncoding ; struct IDxcBlobUtf8 ; struct IDxcBlobWide ; namespace hlsl { IMalloc*)",
    "insertText": "GetGlobalHeapMalloc() throw()"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (class CDxcThreadMallocAllocator { public : _ATL_DECLSPEC_ALLOCATOR void*)",
    "insertText": "Reallocate(void *p, size_t nBytes) throw()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} _ATL_DECLSPEC_ALLOCATOR void*)",
    "insertText": "Allocate(size_t nBytes) throw()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(void *p) throw()"
  },
  {
    "label": "CDxcTMHeapPtr()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class CDxcTMHeapPtr : public CHeapPtr<T,CDxcThreadMallocAllocator> { public :)",
    "insertText": "CDxcTMHeapPtr() throw()"
  },
  {
    "label": "CDxcTMHeapPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CDxcTMHeapPtr(T *pData) throw() : CHeapPtr<T, CDxcThreadMallocAllocator>(pData)"
  },
  {
    "label": "CDxcMallocHeapPtr()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class CDxcMallocHeapPtr { private : CComPtr<IMalloc> m_pMalloc ; public : T* m_pData ;)",
    "insertText": "CDxcMallocHeapPtr(IMalloc *pMalloc) throw() : m_pMalloc(pMalloc), m_pData(nullptr)"
  },
  {
    "label": "CDxcMallocHeapPtr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CDxcMallocHeapPtr()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T() const throw()"
  },
  {
    "label": "ATLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ATLASSERT(m_pData == NULL)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SIZE_T nBytes = ElementCount*)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (m_pData = static_cast<)",
    "insertText": "T(m_pMalloc->Alloc(nBytes))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (m_pData = static_cast<)",
    "insertText": "T(m_pMalloc->Alloc(ByteCount))"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Attach(T *pData) throw()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (m_pMalloc ->)",
    "insertText": "Free(m_pData)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (m_pData = pData ; } T*)",
    "insertText": "Detach() throw()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (T* pTemp = m_pData ; m_pData = NULL ; return pTemp ; } void)",
    "insertText": "Free() throw()"
  },
  {
    "label": "ReadBinaryFile()",
    "kind": "Method",
    "detail": "Function (m_pData = NULL ; } } ; HRESULT)",
    "insertText": "ReadBinaryFile(IMalloc *pMalloc, LPCWSTR pFileName, void **ppData, DWORD *pDataSize) throw()"
  },
  {
    "label": "ReadBinaryFile()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ReadBinaryFile(LPCWSTR pFileName, void **ppData, DWORD *pDataSize) throw()"
  },
  {
    "label": "WriteBinaryFile()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "WriteBinaryFile(LPCWSTR pFileName, const void *pData, DWORD DataSize) throw()"
  },
  {
    "label": "DxcCodePageFromBytes()",
    "kind": "Method",
    "detail": "Function (UINT32)",
    "insertText": "DxcCodePageFromBytes(const char *bytes, size_t byteLen) throw()"
  },
  {
    "label": "DxcCreateBlob()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlob(LPCVOID pPtr, SIZE_T size, bool bPinned, bool bCopy, bool encodingKnown, UINT32 codePage, IMalloc *pMalloc, IDxcBlobEncoding **ppBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobEncodingFromBlob()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobEncodingFromBlob(IDxcBlob *pFromBlob, UINT32 offset, UINT32 length, bool encodingKnown, UINT32 codePage, IMalloc *pMalloc, IDxcBlobEncoding **ppBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobFromFile()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobFromFile(IMalloc *pMalloc, LPCWSTR pFileName, UINT32 *pCodePage, IDxcBlobEncoding **pBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobFromFile()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobFromFile(LPCWSTR pFileName, UINT32 *pCodePage, IDxcBlobEncoding **ppBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobFromBlob()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobFromBlob(IDxcBlob *pBlob, UINT32 offset, UINT32 length, IDxcBlob **ppResult) throw()"
  },
  {
    "label": "DxcCreateBlobOnMalloc()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobOnMalloc(LPCVOID pData, IMalloc *pIMalloc, UINT32 size, IDxcBlob **ppResult) throw()"
  },
  {
    "label": "DxcCreateBlobOnHeapCopy()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobOnHeapCopy(LPCVOID pData, UINT32 size, IDxcBlob **ppResult) throw()"
  },
  {
    "label": "DxcCreateBlobWithEncodingSet()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobWithEncodingSet(IDxcBlob *pBlob, UINT32 codePage, IDxcBlobEncoding **ppBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobWithEncodingSet()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobWithEncodingSet(IMalloc *pMalloc, IDxcBlob *pBlob, UINT32 codePage, IDxcBlobEncoding **ppBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobWithEncodingFromPinned()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobWithEncodingFromPinned(LPCVOID pText, UINT32 size, UINT32 codePage, IDxcBlobEncoding **pBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobFromPinned()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobFromPinned(LPCVOID pText, UINT32 size, IDxcBlob **pBlob) throw()"
  },
  {
    "label": "DxcCreateBlobWithEncodingFromStream()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobWithEncodingFromStream(IStream *pStream, bool newInstanceAlways, UINT32 codePage, IDxcBlobEncoding **pBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobWithEncodingOnHeapCopy()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobWithEncodingOnHeapCopy(LPCVOID pText, UINT32 size, UINT32 codePage, IDxcBlobEncoding **pBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobWithEncodingOnMalloc()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobWithEncodingOnMalloc(LPCVOID pText, IMalloc *pIMalloc, UINT32 size, UINT32 codePage, IDxcBlobEncoding **pBlobEncoding) throw()"
  },
  {
    "label": "DxcCreateBlobWithEncodingOnMallocCopy()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcCreateBlobWithEncodingOnMallocCopy(IMalloc *pIMalloc, LPCVOID pText, UINT32 size, UINT32 codePage, IDxcBlobEncoding **pBlobEncoding) throw()"
  },
  {
    "label": "DxcGetBlobAsUtf8()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcGetBlobAsUtf8(IDxcBlob *pBlob, IMalloc *pMalloc, IDxcBlobUtf8 **pBlobEncoding, UINT32 defaultCodePage = CP_ACP) throw()"
  },
  {
    "label": "DxcGetBlobAsWide()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DxcGetBlobAsWide(IDxcBlob *pBlob, IMalloc *pMalloc, IDxcBlobWide **pBlobEncoding) throw()"
  },
  {
    "label": "IsBlobNullOrEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlobNullOrEmpty(IDxcBlob *pBlob) throw()"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (class AbstractMemoryStream : public IStream { public : LPBYTE)",
    "insertText": "GetPtr() throw()"
  },
  {
    "label": "GetPtrSize()",
    "kind": "Method",
    "detail": "Function (ULONG)",
    "insertText": "GetPtrSize() throw()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (UINT64)",
    "insertText": "GetPosition() throw()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Reserve(ULONG targetSize) throw()"
  },
  {
    "label": "CreateMemoryStream()",
    "kind": "Method",
    "detail": "Function (} ; HRESULT)",
    "insertText": "CreateMemoryStream(IMalloc *pMalloc, AbstractMemoryStream **ppResult) throw()"
  },
  {
    "label": "CreateReadOnlyBlobStream()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateReadOnlyBlobStream(IDxcBlob *pSource, IStream **ppResult) throw()"
  },
  {
    "label": "CreateFixedSizeMemoryStream()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateFixedSizeMemoryStream(LPBYTE pBuffer, size_t size, AbstractMemoryStream **ppResult) throw()"
  },
  {
    "label": "WriteStreamValue()",
    "kind": "Method",
    "detail": "Function (template<T> HRESULT)",
    "insertText": "WriteStreamValue(IStream *pStream, const T &value)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (ULONG cb ; return pStream ->)",
    "insertText": "Write(&value, sizeof(value), &cb)"
  }
]