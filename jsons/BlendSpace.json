[
  {
    "label": "UCachedAnalysisProperties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCachedAnalysisProperties"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "UAnalysisProperties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnalysisProperties"
  },
  {
    "label": "EBlendSpaceAxis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendSpaceAxis"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBlendSpaceBlendProfile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceBlendProfile"
  },
  {
    "label": "FInterpolationParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterpolationParameter"
  },
  {
    "label": "FBlendParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendParameter"
  },
  {
    "label": "FBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSample"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FBlendSpaceSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceSegment"
  },
  {
    "label": "FBlendSpaceTriangleEdgeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceTriangleEdgeInfo"
  },
  {
    "label": "FBlendSpaceTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceTriangle"
  },
  {
    "label": "FWeightedBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedBlendSample"
  },
  {
    "label": "FBlendSpaceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceData"
  },
  {
    "label": "FEditorElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorElement"
  },
  {
    "label": "FGridBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGridBlendSample"
  },
  {
    "label": "FEditorElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorElement"
  },
  {
    "label": "FPerBoneInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerBoneInterpolation"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "FBlendSpaceDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendSpaceDetails"
  },
  {
    "label": "FBlendSampleDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendSampleDetails"
  },
  {
    "label": "UAnimGraphNode_BlendSpaceGraphBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_BlendSpaceGraphBase"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "FBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSample"
  },
  {
    "label": "FBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSample"
  },
  {
    "label": "FBlendSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSample"
  },
  {
    "label": "FEditorElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorElement"
  },
  {
    "label": "FBlendParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendParameter"
  },
  {
    "label": "RuntimeValidateMarkerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RuntimeValidateMarkerData()"
  },
  {
    "label": "UpdateBlendSpacesUsingAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBlendSpacesUsingAnimSequence(UAnimSequenceBase* Sequence)"
  },
  {
    "label": "ValidateSampleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSampleData()"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSample(const FVector& SampleValue)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSample(UAnimSequence* AnimationSequence, const FVector& SampleValue)"
  },
  {
    "label": "ExpandRangeForSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandRangeForSample(const FVector& SampleValue)"
  },
  {
    "label": "EditSampleValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditSampleValue(const int32 BlendSampleIndex, const FVector& NewValue)"
  },
  {
    "label": "UpdateSampleAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSampleAnimation(UAnimSequence* AnimationSequence, const FVector& SampleValue)"
  },
  {
    "label": "ReplaceSampleAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceSampleAnimation(const int32 BlendSampleIndex, UAnimSequence* AnimationSequence)"
  },
  {
    "label": "DeleteSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteSample(const int32 BlendSampleIndex)"
  },
  {
    "label": "ResampleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResampleData()"
  },
  {
    "label": "SetBlendSpaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendSpaceData(const TArray<FBlendSpaceSegment>& Segments)"
  },
  {
    "label": "InitializePerBoneBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePerBoneBlend()"
  },
  {
    "label": "UpdatePreviewBasePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreviewBasePose()"
  },
  {
    "label": "SnapSamplesToClosestGridPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapSamplesToClosestGridPoint()"
  },
  {
    "label": "FillupGridElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillupGridElements(const TArray<FEditorElement>& GridElements, const TArray<int32>& InDimensionIndices)"
  },
  {
    "label": "EmptyGridElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyGridElements()"
  },
  {
    "label": "ClearBlendSpaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBlendSpaceData()"
  },
  {
    "label": "SetBlendSpaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendSpaceData(const TArray<FBlendSpaceTriangle>& Triangles)"
  },
  {
    "label": "ResampleData1D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResampleData1D()"
  },
  {
    "label": "ResampleData2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResampleData2D()"
  }
]