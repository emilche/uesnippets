[
  {
    "label": "FAllSurfaceLevelFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllSurfaceLevelFilter"
  },
  {
    "label": "FCurrentLevelSurfaceLevelFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurrentLevelSurfaceLevelFilter"
  },
  {
    "label": "SurfaceFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceFilter"
  },
  {
    "label": "LevelFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelFilter"
  },
  {
    "label": "TSurfaceIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSurfaceIteratorBase"
  },
  {
    "label": "FAllSurfaceFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllSurfaceFilter"
  },
  {
    "label": "TSurfaceIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSurfaceIterator"
  },
  {
    "label": "FSelectedSurfaceFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedSurfaceFilter"
  },
  {
    "label": "TSelectedSurfaceIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSelectedSurfaceIterator"
  },
  {
    "label": "IsSuitable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / Level . h \" # include \" Engine / World . h \" # include \" Model . h \" class FAllSurfaceLevelFilter { public : bool)",
    "insertText": "IsSuitable(const ULevel* Level)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; typedef FAllSurfaceLevelFilter DefaultSurfaceLevelFilter ; template<class SurfaceFilter,class LevelFilter = DefaultSurfaceLevelFilter> class TSurfaceIteratorBase { public : typedef SurfaceFilter SurfaceFilterType ; typedef LevelFilter LevelFilterType ; FBspSurf*)",
    "insertText": "operator()"
  },
  {
    "label": "GetSurfaceIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSurfaceIndex()"
  },
  {
    "label": "GetLevel()",
    "kind": "Method",
    "detail": "Function (CurrentSurface = NULL ; ULevel* Level = World ->)",
    "insertText": "GetLevel(LevelIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } SurfaceIndex = 0 ;)",
    "insertText": "if(SurfaceIndex >= Level->Model->Surfs.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } } } CurrentSurface =& Level -> Model -> Surfs [ SurfaceIndex ] ;)",
    "insertText": "if(!SurfaceFilterType::IsSuitable( CurrentSurface ))"
  },
  {
    "label": "TSurfaceIteratorBase()",
    "kind": "Method",
    "detail": "Function (CurrentSurface = NULL ; } } } protected :)",
    "insertText": "TSurfaceIteratorBase(UWorld* InWorld) : bReachedEnd( false ) , World( InWorld ) , LevelIndex( 0 ) , SurfaceIndex( -1 ) , CurrentSurface( NULL)"
  },
  {
    "label": "IsSuitable()",
    "kind": "Method",
    "detail": "Function (} private : bool bReachedEnd ; UWorld* World ; int32 LevelIndex ; int32 SurfaceIndex ; FBspSurf* CurrentSurface ; } ; class FAllSurfaceFilter { public : bool)",
    "insertText": "IsSuitable(const FBspSurf* Surface)"
  },
  {
    "label": "TSelectedSurfaceIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class LevelFilter = DefaultSurfaceLevelFilter> class TSelectedSurfaceIterator : public TSurfaceIteratorBase<FSelectedSurfaceFilter,LevelFilter> { public : typedef TSurfaceIteratorBase<FSelectedSurfaceFilter,LevelFilter> Super ;)",
    "insertText": "TSelectedSurfaceIterator(UWorld* InWorld) : Super( InWorld)"
  }
]