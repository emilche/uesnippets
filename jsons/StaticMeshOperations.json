[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FOverlappingCorners",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingCorners"
  },
  {
    "label": "FPolygonGroupID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolygonGroupID"
  },
  {
    "label": "FRawMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawMesh"
  },
  {
    "label": "FUVMapParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUVMapParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStaticMeshOperations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshOperations"
  },
  {
    "label": "FAppendSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAppendSettings"
  },
  {
    "label": "FGenerateUVOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateUVOptions"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Logging / LogMacros . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" MeshTypes . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Misc / SecureHash . h \" class FName ; struct FMeshDescription ; struct FOverlappingCorners ; struct FPolygonGroupID ; struct FRawMesh ; struct FUVMapParameters ; enum class ELightmapUVVersion : int32 ; typedef TMap<FPolygonGroupID,FPolygonGroupID> PolygonGroupMap ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStaticMeshOperations, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FAppendPolygonGroupsDelegate, const FMeshDescription& , FMeshDescription& , PolygonGroupMap&)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0 x00000000,Normals = 0 x00000001,Tangents = 0 x00000002,UseMikkTSpace = 0 x00000004,WeightedNTBs = 0 x00000008,BlendOverlappingNormals = 0 x00000010,IgnoreDegenerateTriangles = 0 x00000020,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EComputeNTBsFlags)"
  },
  {
    "label": "FAppendSettings()",
    "kind": "Method",
    "detail": "Function (class FStaticMeshOperations { public : struct FAppendSettings {)",
    "insertText": "FAppendSettings() : bMergeVertexColor(true)"
  },
  {
    "label": "MergedAssetPivot()",
    "kind": "Method",
    "detail": "Function (true },)",
    "insertText": "MergedAssetPivot(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "ComputeTriangleTangentsAndNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeTriangleTangentsAndNormals(FMeshDescription& MeshDescription, float ComparisonThreshold = 0.0f, const TCHAR* DebugName = nullptr)"
  },
  {
    "label": "ComputeTangentsAndNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeTangentsAndNormals(FMeshDescription& MeshDescription, EComputeNTBsFlags ComputeNTBsOptions)"
  },
  {
    "label": "RecomputeNormalsAndTangentsIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeNormalsAndTangentsIfNeeded(FMeshDescription& MeshDescription, EComputeNTBsFlags ComputeNTBsOptions)"
  },
  {
    "label": "ComputeMikktTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeMikktTangents(FMeshDescription& MeshDescription, bool bIgnoreDegenerateTriangles)"
  },
  {
    "label": "DetermineEdgeHardnessesFromVertexInstanceNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineEdgeHardnessesFromVertexInstanceNormals(FMeshDescription& MeshDescription, float Tolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "ConvertToRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToRawMesh(const FMeshDescription& SourceMeshDescription, FRawMesh& DestinationRawMesh, const TMap<FName, int32>& MaterialMap)"
  },
  {
    "label": "ConvertFromRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertFromRawMesh(const FRawMesh& SourceRawMesh, FMeshDescription& DestinationMeshDescription, const TMap<int32, FName>& MaterialMap, bool bSkipNormalsAndTangents = false, const TCHAR* DebugName = nullptr)"
  },
  {
    "label": "AppendMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMeshDescription(const FMeshDescription& SourceMesh, FMeshDescription& TargetMesh, FAppendSettings& AppendSettings)"
  },
  {
    "label": "AppendMeshDescriptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMeshDescriptions(const TArray<const FMeshDescription*>& SourceMeshes, FMeshDescription& TargetMesh, FAppendSettings& AppendSettings)"
  },
  {
    "label": "HasInvalidVertexInstanceNormalsOrTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HasInvalidVertexInstanceNormalsOrTangents(const FMeshDescription& MeshDescription, bool& bHasInvalidNormals, bool& bHasInvalidTangents)"
  },
  {
    "label": "HasInvalidVertexInstanceNormalsOrTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HasInvalidVertexInstanceNormalsOrTangents(MeshDescription, bHasInvalidNormals, bHasInvalidTangents)"
  },
  {
    "label": "FindOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindOverlappingCorners(FOverlappingCorners& OverlappingCorners, const FMeshDescription& MeshDescription, float ComparisonThreshold)"
  },
  {
    "label": "GetUVChartCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUVChartCount(FMeshDescription& MeshDescription, int32 SrcLightmapIndex, ELightmapUVVersion LightmapUVVersion, const FOverlappingCorners& OverlappingCorners)"
  },
  {
    "label": "CreateLightMapUVLayout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLightMapUVLayout(FMeshDescription& MeshDescription, int32 SrcLightmapIndex, int32 DstLightmapIndex, int32 MinLightmapResolution, ELightmapUVVersion LightmapUVVersion, const FOverlappingCorners& OverlappingCorners)"
  },
  {
    "label": "GenerateUV()",
    "kind": "Method",
    "detail": "Function (enum class EGenerateUVMethod { Default,Legacy,UVAtlas,XAtlas,PatchBuilder } ; struct FGenerateUVOptions { int32 TextureResolution = 5 1 2 ; bool bMergeTrianglesWithIdenticalAttributes = false ; EGenerateUVMethod UVMethod = EGenerateUVMethod::Default ; } ; bool)",
    "insertText": "GenerateUV(const FMeshDescription& MeshDescription, const FGenerateUVOptions& Options, TArray<FVector2D>& OutTexCoords)"
  },
  {
    "label": "AddUVChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUVChannel(FMeshDescription& MeshDescription)"
  },
  {
    "label": "InsertUVChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertUVChannel(FMeshDescription& MeshDescription, int32 UVChannelIndex)"
  },
  {
    "label": "RemoveUVChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveUVChannel(FMeshDescription& MeshDescription, int32 UVChannelIndex)"
  },
  {
    "label": "GeneratePlanarUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlanarUV(const FMeshDescription& MeshDescription, const FUVMapParameters& Params, TMap<FVertexInstanceID, FVector2D>& OutTexCoords)"
  },
  {
    "label": "GenerateCylindricalUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCylindricalUV(FMeshDescription& MeshDescription, const FUVMapParameters& Params, TMap<FVertexInstanceID, FVector2D>& OutTexCoords)"
  },
  {
    "label": "GenerateBoxUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBoxUV(const FMeshDescription& MeshDescription, const FUVMapParameters& Params, TMap<FVertexInstanceID, FVector2D>& OutTexCoords)"
  },
  {
    "label": "SwapPolygonPolygonGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapPolygonPolygonGroup(FMeshDescription& MeshDescription, int32 SectionIndex, int32 TriangleIndexStart, int32 TriangleIndexEnd, bool bRemoveEmptyPolygonGroup)"
  },
  {
    "label": "ConvertHardEdgesToSmoothGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertHardEdgesToSmoothGroup(const FMeshDescription& SourceMeshDescription, TArray<uint32>& FaceSmoothingMasks)"
  },
  {
    "label": "ConvertSmoothGroupToHardEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSmoothGroupToHardEdges(const TArray<uint32>& FaceSmoothingMasks, FMeshDescription& DestinationMeshDescription)"
  },
  {
    "label": "HasVertexColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertexColor(const FMeshDescription& MeshDescription)"
  },
  {
    "label": "BuildWeldedVertexIDRemap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWeldedVertexIDRemap(const FMeshDescription& MeshDescription, const float WeldingThreshold, TMap<FVertexID, FVertexID>& OutVertexIDRemap)"
  },
  {
    "label": "ComputeSHAHash()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "ComputeSHAHash(const FMeshDescription& MeshDescription, bool bSkipTransientAttributes = false)"
  },
  {
    "label": "FlipPolygons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipPolygons(FMeshDescription& MeshDescription)"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTransform(FMeshDescription& MeshDescription, const FTransform& Transform, bool bApplyCorrectNormalTransform = false)"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTransform(FMeshDescription& MeshDescription, const FMatrix& Transform, bool bApplyCorrectNormalTransform = false)"
  },
  {
    "label": "GetUniqueVertexCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUniqueVertexCount(const FMeshDescription& MeshDescription)"
  },
  {
    "label": "GetUniqueVertexCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUniqueVertexCount(const FMeshDescription& MeshDescription, const FOverlappingCorners& OverlappingCorners)"
  },
  {
    "label": "ReorderMeshDescriptionPolygonGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderMeshDescriptionPolygonGroups(const FMeshDescription& SourceMeshDescription , FMeshDescription& DestinationMeshDescription , TOptional<const FString> UnmatchMaterialNameWarning , TOptional<const FString> DestinationPolygonGroupCountDifferFromSource_Msg)"
  },
  {
    "label": "ValidateAndFixData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAndFixData(FMeshDescription& MeshDescription, const FString& DebugName)"
  }
]