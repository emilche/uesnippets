[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "SAnimCurveViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimCurveViewer"
  },
  {
    "label": "UEditorAnimCurveBoneLinks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorAnimCurveBoneLinks"
  },
  {
    "label": "UPoseWatchPoseElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatchPoseElement"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FDisplayedAnimCurveInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedAnimCurveInfo"
  },
  {
    "label": "SAnimCurveListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimCurveListRow"
  },
  {
    "label": "TWeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWeakPtr"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "SAnimCurveTypeList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimCurveTypeList"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Animation / SmartName . h \" # include \" IPersonaPreviewScene . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" Animation / AnimInstance . h \" # include \" PersonaDelegates . h \" # include \" EditorUndoClient . h \" # include \" Filters / FilterBase . h \" # include \" Widgets / Input / SComboBox . h \" namespace UE::Anim { enum class ECurveElementFlags : uint8 ; } class FUICommandList ; class IEditableSkeleton ; class SAnimCurveViewer ; class UEditorAnimCurveBoneLinks ; class UPoseWatchPoseElement ; class UAnimBlueprint ; class UEdGraphNode ; enum class EAnimCurveViewerFilterFlags : uint8 ; class FDisplayedAnimCurveInfo { public : FName CurveName ; float Weight ; bool bOverrideData ; bool bShown ; bool bMorphTarget ; bool bMaterial ; TSharedRef<FDisplayedAnimCurveInfo>)",
    "insertText": "Make(const FName& InCurveName)"
  },
  {
    "label": "GetActiveFlag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetActiveFlag(const TSharedPtr<SAnimCurveViewer>& InAnimCurveViewer, bool bMorphTarget)"
  },
  {
    "label": "FDisplayedAnimCurveInfo()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDisplayedAnimCurveInfo(const FName& InCurveName) : CurveName(InCurveName) , Weight(0.0f) , bOverrideData(false) , bShown(false) , bMorphTarget(false) , bMaterial(false)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SListView<TSharedPtr<FDisplayedAnimCurveInfo>> SAnimCurveListType ; class SAnimCurveListRow : public SMultiColumnTableRow<TSharedPtr<FDisplayedAnimCurveInfo>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimCurveListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FDisplayedAnimCurveInfo>, Item) SLATE_ARGUMENT(class TWeakPtr<SAnimCurveViewer>, AnimCurveViewerPtr) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& OwnerTableView, const TSharedRef<class IPersonaPreviewScene>& InPreviewScene)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "OnAnimCurveWeightChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnAnimCurveWeightChanged(float NewWeight)"
  },
  {
    "label": "OnAnimCurveWeightValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimCurveWeightValueCommitted(float NewWeight, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnAnimCurveOverrideChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimCurveOverrideChecked(ECheckBoxState InState)"
  },
  {
    "label": "IsAnimCurveOverrideChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsAnimCurveOverrideChecked()"
  },
  {
    "label": "GetActiveFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActiveFlag(bool bMorphTarget)"
  },
  {
    "label": "IsAnimCurveTypeBoxChangedChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsAnimCurveTypeBoxChangedChecked(bool bMorphTarget)"
  },
  {
    "label": "GetWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWeight()"
  },
  {
    "label": "GetMinWeight()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetMinWeight()"
  },
  {
    "label": "GetMaxWeight()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetMaxWeight()"
  },
  {
    "label": "GetItemName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetItemName()"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "GetItemFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetItemFont()"
  },
  {
    "label": "GetActiveWeight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActiveWeight(float& OutWeight)"
  },
  {
    "label": "GetCurveTypeWidget()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SAnimCurveViewer> AnimCurveViewerPtr ; TSharedPtr<FDisplayedAnimCurveInfo> Item ; TWeakPtr<class IPersonaPreviewScene> PreviewScenePtr ; float MinWeight = - 1 . 0 f ; float MaxWeight = 1 . 0 f ; TSharedRef<SWidget>)",
    "insertText": "GetCurveTypeWidget()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SAnimCurveViewer : public SCompoundWidget,public FSelfRegisteringEditorUndoClient { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimCurveViewer)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<IEditableSkeleton>, EditableSkeleton) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<class IPersonaPreviewScene>& InPreviewScene, FOnObjectsSelected InOnObjectsSelected)"
  },
  {
    "label": "SAnimCurveViewer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SAnimCurveViewer()"
  },
  {
    "label": "OnPreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewMeshChanged(class USkeletalMesh* OldPreviewMesh, class USkeletalMesh* NewPreviewMesh)"
  },
  {
    "label": "OnPreviewAssetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewAssetChanged(class UAnimationAsset* NewPreviewAsset)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& SearchText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& SearchText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GenerateAnimCurveRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateAnimCurveRow(TSharedPtr<FDisplayedAnimCurveInfo> InInfo, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "AddAnimCurveOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimCurveOverride(FName& Name, float Weight)"
  },
  {
    "label": "RemoveAnimCurveOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAnimCurveOverride(FName& Name)"
  },
  {
    "label": "GetAnimCurveOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnimCurveOverride(FName& Name, float& Weight)"
  },
  {
    "label": "PostUndoRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndoRedo()"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "RefreshCurveList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCurveList(bool bInFullRefresh)"
  },
  {
    "label": "CreateAnimCurveList()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateAnimCurveList(const FString& SearchText = FString(), bool bInFullRefresh = false)"
  },
  {
    "label": "ApplyCustomCurveOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCustomCurveOverride(UAnimInstance* AnimInstance)"
  },
  {
    "label": "HandleCurveMetaDataChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCurveMetaDataChange()"
  },
  {
    "label": "GetAnimInstance()",
    "kind": "Method",
    "detail": "Function (UAnimInstance*)",
    "insertText": "GetAnimInstance()"
  },
  {
    "label": "CreateCurveSourceSelector()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateCurveSourceSelector()"
  },
  {
    "label": "HandlePoseWatchesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePoseWatchesChanged(UAnimBlueprint* , UEdGraphNode*)"
  },
  {
    "label": "RebuildPoseWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildPoseWatches()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OnGetContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnGetContextMenuContent()"
  },
  {
    "label": "OnFindCurveUsesClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFindCurveUsesClicked()"
  },
  {
    "label": "CanFindCurveUses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFindCurveUses()"
  },
  {
    "label": "FindReplaceCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindReplaceCurves()"
  }
]