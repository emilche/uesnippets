[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Mesh / Meshers / IsoTriangulator / IsoNode . h \" # include \" UI / Display . h \" namespace UE::CADKernel { enum class ESegmentType : uint8 { Unknown = 0,Loop = 1,ThinZone = 2,IsoU,IsoV,LoopToLoop,IsoLoopToLoop,InnerToLoopU,InnerToLoopV,InnerToLoop,} ; enum class EIsoSegmentStates : uint8 { None = 0 x00u,Candidate = 0 x01u,LeftCycle = 0 x02u,RightCycle = 0 x04u,Degenerate = 0 x08u,LeftTriangle = 0 x10u,RightTriangle = 0 x20u,SegmentComplete = 0 x30u,Final = 0 x40u,Delete = 0 x80u,All = 0 xFFu } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EIsoSegmentStates)"
  },
  {
    "label": "FIsoSegment()",
    "kind": "Method",
    "detail": "Function (class FGrid ; class FIsoSegment { protected : FIsoNode* FirstNode ; FIsoNode* SecondNode ; ESegmentType Type ; EIsoSegmentStates States ; public :)",
    "insertText": "FIsoSegment() : FirstNode(nullptr) , SecondNode(nullptr) , Type(ESegmentType::Unknown) , States(EIsoSegmentStates::None)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FIsoNode& InFirstNode, FIsoNode& InSecondNode, const ESegmentType InType)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (States = EIsoSegmentStates::None ; FirstNode =& InFirstNode ; SecondNode =& InSecondNode ; Type = InType ;)",
    "insertText": "switch(Type)"
  },
  {
    "label": "SetLinkedToIso()",
    "kind": "Method",
    "detail": "Function (InSecondNode .)",
    "insertText": "SetLinkedToIso(EIsoLink::IsoUPrevious)"
  },
  {
    "label": "SetLinkedToIso()",
    "kind": "Method",
    "detail": "Function (break ; case ESegmentType::IsoV : InFirstNode .)",
    "insertText": "SetLinkedToIso(EIsoLink::IsoVNext)"
  },
  {
    "label": "SetLinkedToIso()",
    "kind": "Method",
    "detail": "Function (InSecondNode .)",
    "insertText": "SetLinkedToIso(EIsoLink::IsoVPrevious)"
  },
  {
    "label": "ConnectToNode()",
    "kind": "Method",
    "detail": "Function (break ; } } bool)",
    "insertText": "ConnectToNode()"
  },
  {
    "label": "ConnectSegment()",
    "kind": "Method",
    "detail": "Function (SecondNode ->)",
    "insertText": "ConnectSegment(*this)"
  },
  {
    "label": "OtherNode()",
    "kind": "Method",
    "detail": "Function (const FIsoNode&)",
    "insertText": "OtherNode(StartNode == &Segment->GetFirstNode()) ? Segment->GetSecondNode() : Segment->GetFirstNode()"
  },
  {
    "label": "DisconnectSegment()",
    "kind": "Method",
    "detail": "Function (FirstNode ->)",
    "insertText": "DisconnectSegment(*this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SecondNode)"
  },
  {
    "label": "IsDelete()",
    "kind": "Method",
    "detail": "Function (} FirstNode = nullptr ; SecondNode = nullptr ; States = EIsoSegmentStates::Delete ; } bool)",
    "insertText": "IsDelete()"
  },
  {
    "label": "SetCandidate()",
    "kind": "Method",
    "detail": "Function (States& = ~ EIsoSegmentStates::Candidate ; } void)",
    "insertText": "SetCandidate()"
  },
  {
    "label": "IsACandidate()",
    "kind": "Method",
    "detail": "Function (States | = EIsoSegmentStates::Candidate ; } bool)",
    "insertText": "IsACandidate()"
  },
  {
    "label": "SetFinalMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFinalMarker()"
  },
  {
    "label": "IsAFinalSegment()",
    "kind": "Method",
    "detail": "Function (States | = EIsoSegmentStates::Final ; } bool)",
    "insertText": "IsAFinalSegment()"
  },
  {
    "label": "HasCycleOnLeft()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCycleOnLeft()"
  },
  {
    "label": "SetHaveCycleOnLeft()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHaveCycleOnLeft()"
  },
  {
    "label": "HasCycleOnRight()",
    "kind": "Method",
    "detail": "Function (States | = EIsoSegmentStates::LeftCycle ; } bool)",
    "insertText": "HasCycleOnRight()"
  },
  {
    "label": "SetHaveCycleOnRight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHaveCycleOnRight()"
  },
  {
    "label": "HasTriangleOn()",
    "kind": "Method",
    "detail": "Function (States | = EIsoSegmentStates::RightCycle ; } bool)",
    "insertText": "HasTriangleOn(EIsoSegmentStates Side)"
  },
  {
    "label": "HasTriangleOnLeft()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTriangleOnLeft()"
  },
  {
    "label": "HasTriangleOnRight()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTriangleOnRight()"
  },
  {
    "label": "HasntTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasntTriangle()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EIsoSegmentStates BoothSides = EIsoSegmentStates::RightTriangle | EIsoSegmentStates::LeftTriangle ;)",
    "insertText": "return(States & BoothSides)"
  },
  {
    "label": "HasTriangleOnRightAndLeft()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTriangleOnRightAndLeft()"
  },
  {
    "label": "SetHasTriangleOn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasTriangleOn(EIsoSegmentStates Side)"
  },
  {
    "label": "SetHasTriangleOnLeft()",
    "kind": "Method",
    "detail": "Function (States | = Side ; } void)",
    "insertText": "SetHasTriangleOnLeft()"
  },
  {
    "label": "SetHasTriangleOnRight()",
    "kind": "Method",
    "detail": "Function (States | = EIsoSegmentStates::LeftTriangle ; } void)",
    "insertText": "SetHasTriangleOnRight()"
  },
  {
    "label": "SetHasInnerTriangle()",
    "kind": "Method",
    "detail": "Function (States | = EIsoSegmentStates::RightTriangle ; } void)",
    "insertText": "SetHasInnerTriangle(bool bOrientation)"
  },
  {
    "label": "ResetHasTriangle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetHasTriangle()"
  },
  {
    "label": "SetAsDegenerated()",
    "kind": "Method",
    "detail": "Function (States& = ~ EIsoSegmentStates::SegmentComplete ; } void)",
    "insertText": "SetAsDegenerated()"
  },
  {
    "label": "ResetDegenerated()",
    "kind": "Method",
    "detail": "Function (States | = EIsoSegmentStates::Degenerate ; } void)",
    "insertText": "ResetDegenerated()"
  },
  {
    "label": "IsDegenerated()",
    "kind": "Method",
    "detail": "Function (States& = ~ EIsoSegmentStates::Degenerate ; } bool)",
    "insertText": "IsDegenerated()"
  },
  {
    "label": "IsFirstNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFirstNode(const FIsoNode* Node)"
  },
  {
    "label": "NewNode()",
    "kind": "Method",
    "detail": "Function (FirstNode =&)",
    "insertText": "NewNode((FLoopNode*)SecondNode)->SetPreviousConnectedNode((FLoopNode*)FirstNode)"
  },
  {
    "label": "SetSecondNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSecondNode(FIsoNode& NewNode)"
  },
  {
    "label": "ReplaceNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceNode(FIsoNode& OldNode, FIsoNode& NewNode)"
  },
  {
    "label": "SetFirstNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFirstNode(NewNode)"
  },
  {
    "label": "ensureCADKernel()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ensureCADKernel(SecondNode == &OldNode)"
  },
  {
    "label": "SetSecondNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSecondNode(NewNode)"
  },
  {
    "label": "SwapOrientation()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SwapOrientation()"
  },
  {
    "label": "TempNode()",
    "kind": "Method",
    "detail": "Function (FIsoNode* TempNode = SecondNode ; SecondNode = FirstNode ; FirstNode =)",
    "insertText": "TempNode((FLoopNode*)FirstNode)->SetNextConnectedNode((FLoopNode*)SecondNode)"
  },
  {
    "label": "GetOtherNode()",
    "kind": "Method",
    "detail": "Function (} const FIsoNode&)",
    "insertText": "GetOtherNode(const FIsoNode* Node)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} const ESegmentType)",
    "insertText": "GetType()"
  },
  {
    "label": "Get2DPoint()",
    "kind": "Method",
    "detail": "Function (const FPoint2D& Point1 = FirstNode ->)",
    "insertText": "Get2DPoint(Space, Grid)"
  },
  {
    "label": "Get3DLengthSquare()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Get3DLengthSquare(const FGrid& Grid)"
  },
  {
    "label": "Get3DPoint()",
    "kind": "Method",
    "detail": "Function (const FPoint& Point1 = FirstNode ->)",
    "insertText": "Get3DPoint(Grid)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; uint32)",
    "insertText": "GetTypeHash(const FIsoSegment& Segment)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 StartHash =)",
    "insertText": "GetTypeHash(Segment.GetFirstNode())"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 EndHash =)",
    "insertText": "GetTypeHash(Segment.GetSecondNode())"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "HashCombine(EndHash, StartHash)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; uint32)",
    "insertText": "GetTypeHash(const FIsoSegment& Segment0, const FIsoSegment& Segment1)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 StartHash =)",
    "insertText": "GetTypeHash(Segment0)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 EndHash =)",
    "insertText": "GetTypeHash(Segment1)"
  },
  {
    "label": "GetSegmentConnectedTo()",
    "kind": "Method",
    "detail": "Function (} } ; FIsoSegment*)",
    "insertText": "GetSegmentConnectedTo(const FIsoNode* Node)"
  }
]