[
  {
    "label": "Accelerate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Accelerate"
  },
  {
    "label": "BackgroundNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BackgroundNoise"
  },
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "ComfortNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComfortNoise"
  },
  {
    "label": "DecoderDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecoderDatabase"
  },
  {
    "label": "DtmfBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtmfBuffer"
  },
  {
    "label": "DtmfToneGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtmfToneGenerator"
  },
  {
    "label": "Expand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Expand"
  },
  {
    "label": "Merge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Merge"
  },
  {
    "label": "NackTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NackTracker"
  },
  {
    "label": "Normal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Normal"
  },
  {
    "label": "PacketBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketBuffer"
  },
  {
    "label": "RedPayloadSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RedPayloadSplitter"
  },
  {
    "label": "PostDecodeVad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PostDecodeVad"
  },
  {
    "label": "PreemptiveExpand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreemptiveExpand"
  },
  {
    "label": "RandomVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomVector"
  },
  {
    "label": "SyncBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SyncBuffer"
  },
  {
    "label": "TimestampScaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimestampScaler"
  },
  {
    "label": "AccelerateFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AccelerateFactory"
  },
  {
    "label": "DtmfEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DtmfEvent"
  },
  {
    "label": "ExpandFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandFactory"
  },
  {
    "label": "PreemptiveExpandFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PreemptiveExpandFactory"
  },
  {
    "label": "NetEqImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqImpl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ErrorCodes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ErrorCodes"
  },
  {
    "label": "Dependencies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dependencies"
  },
  {
    "label": "Dependencies()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_NETEQ_IMPL_H_ # define MODULES_AUDIO_CODING_NETEQ_NETEQ_IMPL_H_ # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio / audio_frame . h \" # include \" api / neteq / neteq . h \" # include \" api / neteq / neteq_controller . h \" # include \" api / neteq / neteq_controller_factory . h \" # include \" api / neteq / tick_timer . h \" # include \" api / rtp_packet_info . h \" # include \" modules / audio_coding / neteq / audio_multi_vector . h \" # include \" modules / audio_coding / neteq / expand_uma_logger . h \" # include \" modules / audio_coding / neteq / packet . h \" # include \" modules / audio_coding / neteq / random_vector . h \" # include \" modules / audio_coding / neteq / statistics_calculator . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Accelerate ; class BackgroundNoise ; class Clock ; class ComfortNoise ; class DecoderDatabase ; class DtmfBuffer ; class DtmfToneGenerator ; class Expand ; class Merge ; class NackTracker ; class Normal ; class PacketBuffer ; class RedPayloadSplitter ; class PostDecodeVad ; class PreemptiveExpand ; class RandomVector ; class SyncBuffer ; class TimestampScaler ; struct AccelerateFactory ; struct DtmfEvent ; struct ExpandFactory ; struct PreemptiveExpandFactory ; class NetEqImpl : public webrtc::NetEq { public : enum class OutputType { kNormalSpeech,kPLC,kCNG,kPLCCNG,kVadPassive,kCodecPLC } ; enum ErrorCodes { kNoError = 0,kOtherError,kUnknownRtpPayloadType,kDecoderNotFound,kInvalidPointer,kAccelerateError,kPreemptiveExpandError,kComfortNoiseErrorCode,kDecoderErrorCode,kOtherDecoderError,kInvalidOperation,kDtmfParsingError,kDtmfInsertError,kSampleUnderrun,kDecodedTooMuch,kRedundancySplitError,kPacketBufferCorruption } ; struct Dependencies {)",
    "insertText": "Dependencies(const NetEq::Config& config, Clock* clock, const rtc::scoped_refptr<AudioDecoderFactory>& decoder_factory, const NetEqControllerFactory& controller_factory)"
  },
  {
    "label": "Dependencies()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Dependencies()"
  },
  {
    "label": "NetEqImpl()",
    "kind": "Method",
    "detail": "Function (Clock* const clock ; std::unique_ptr<TickTimer> tick_timer ; std::unique_ptr<StatisticsCalculator> stats ; std::unique_ptr<DecoderDatabase> decoder_database ; std::unique_ptr<DtmfBuffer> dtmf_buffer ; std::unique_ptr<DtmfToneGenerator> dtmf_tone_generator ; std::unique_ptr<PacketBuffer> packet_buffer ; std::unique_ptr<NetEqController> neteq_controller ; std::unique_ptr<RedPayloadSplitter> red_payload_splitter ; std::unique_ptr<TimestampScaler> timestamp_scaler ; std::unique_ptr<AccelerateFactory> accelerate_factory ; std::unique_ptr<ExpandFactory> expand_factory ; std::unique_ptr<PreemptiveExpandFactory> preemptive_expand_factory ; } ;)",
    "insertText": "NetEqImpl(const NetEq::Config& config, Dependencies&& deps, bool create_components = true)"
  },
  {
    "label": "NetEqImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetEqImpl()"
  },
  {
    "label": "NetEqImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetEqImpl(const NetEqImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NetEqImpl&)",
    "insertText": "operator(const NetEqImpl&)"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertPacket(const RTPHeader& rtp_header, rtc::ArrayView<const uint8_t> payload)"
  },
  {
    "label": "InsertEmptyPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertEmptyPacket(const RTPHeader& rtp_header)"
  },
  {
    "label": "GetAudio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAudio(AudioFrame* audio_frame, bool* muted, int* current_sample_rate_hz = nullptr, absl::optional<Operation> action_override = absl::nullopt)"
  },
  {
    "label": "SetCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCodecs(const std::map<int, SdpAudioFormat>& codecs)"
  },
  {
    "label": "RegisterPayloadType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterPayloadType(int rtp_payload_type, const SdpAudioFormat& audio_format)"
  },
  {
    "label": "RemovePayloadType()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemovePayloadType(uint8_t rtp_payload_type)"
  },
  {
    "label": "RemoveAllPayloadTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllPayloadTypes()"
  },
  {
    "label": "SetMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinimumDelay(int delay_ms)"
  },
  {
    "label": "SetMaximumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaximumDelay(int delay_ms)"
  },
  {
    "label": "SetBaseMinimumDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumDelayMs()"
  },
  {
    "label": "TargetDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TargetDelayMs()"
  },
  {
    "label": "FilteredCurrentDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FilteredCurrentDelayMs()"
  },
  {
    "label": "NetworkStatistics()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NetworkStatistics(NetEqNetworkStatistics* stats)"
  },
  {
    "label": "CurrentNetworkStatistics()",
    "kind": "Method",
    "detail": "Function (NetEqNetworkStatistics)",
    "insertText": "CurrentNetworkStatistics()"
  },
  {
    "label": "GetLifetimeStatistics()",
    "kind": "Method",
    "detail": "Function (NetEqLifetimeStatistics)",
    "insertText": "GetLifetimeStatistics()"
  },
  {
    "label": "GetOperationsAndState()",
    "kind": "Method",
    "detail": "Function (NetEqOperationsAndState)",
    "insertText": "GetOperationsAndState()"
  },
  {
    "label": "EnableVad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVad()"
  },
  {
    "label": "DisableVad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableVad()"
  },
  {
    "label": "GetPlayoutTimestamp()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "GetPlayoutTimestamp()"
  },
  {
    "label": "last_output_sample_rate_hz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "last_output_sample_rate_hz()"
  },
  {
    "label": "GetDecoderFormat()",
    "kind": "Method",
    "detail": "Function (absl::optional<DecoderFormat>)",
    "insertText": "GetDecoderFormat(int payload_type)"
  },
  {
    "label": "FlushBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushBuffers()"
  },
  {
    "label": "EnableNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableNack(size_t max_nack_list_size)"
  },
  {
    "label": "DisableNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableNack()"
  },
  {
    "label": "GetNackList()",
    "kind": "Method",
    "detail": "Function (std::vector<uint16_t>)",
    "insertText": "GetNackList(int64_t round_trip_time_ms)"
  },
  {
    "label": "SyncBufferSizeMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SyncBufferSizeMs()"
  },
  {
    "label": "sync_buffer_for_test()",
    "kind": "Method",
    "detail": "Function (const SyncBuffer*)",
    "insertText": "sync_buffer_for_test()"
  },
  {
    "label": "last_operation_for_test()",
    "kind": "Method",
    "detail": "Function (Operation)",
    "insertText": "last_operation_for_test()"
  },
  {
    "label": "InsertPacketInternal()",
    "kind": "Method",
    "detail": "Function (protected : const int kOutputSizeMs = 1 0 ; const size_t kMaxFrameSize = 5 7 6 0 ; const size_t kSyncBufferSize = kMaxFrameSize + 6 0* 4 8 ; int)",
    "insertText": "InsertPacketInternal(const RTPHeader& rtp_header, rtc::ArrayView<const uint8_t> payload) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetAudioInternal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAudioInternal(AudioFrame* audio_frame, bool* muted, absl::optional<Operation> action_override) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetDecision()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDecision(Operation* operation, PacketList* packet_list, DtmfEvent* dtmf_event, bool* play_dtmf, absl::optional<Operation> action_override) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Decode(PacketList* packet_list, Operation* operation, int* decoded_length, AudioDecoder::SpeechType* speech_type) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DecodeCng()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeCng(AudioDecoder* decoder, int* decoded_length, AudioDecoder::SpeechType* speech_type) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DecodeLoop()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeLoop(PacketList* packet_list, const Operation& operation, AudioDecoder* decoder, int* decoded_length, AudioDecoder::SpeechType* speech_type) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoNormal(const int16_t* decoded_buffer, size_t decoded_length, AudioDecoder::SpeechType speech_type, bool play_dtmf) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoMerge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoMerge(int16_t* decoded_buffer, size_t decoded_length, AudioDecoder::SpeechType speech_type, bool play_dtmf) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoCodecPlc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCodecPlc() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoExpand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoExpand(bool play_dtmf) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoAccelerate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoAccelerate(int16_t* decoded_buffer, size_t decoded_length, AudioDecoder::SpeechType speech_type, bool play_dtmf, bool fast_accelerate) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoPreemptiveExpand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoPreemptiveExpand(int16_t* decoded_buffer, size_t decoded_length, AudioDecoder::SpeechType speech_type, bool play_dtmf) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoRfc3389Cng()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoRfc3389Cng(PacketList* packet_list, bool play_dtmf) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoCodecInternalCng()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoCodecInternalCng(const int16_t* decoded_buffer, size_t decoded_length) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoDtmf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoDtmf(const DtmfEvent& dtmf_event, bool* play_dtmf) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DtmfOverdub()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DtmfOverdub(const DtmfEvent& dtmf_event, size_t num_channels, int16_t* output) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ExtractPackets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ExtractPackets(size_t required_samples, PacketList* packet_list) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "SetSampleRateAndChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRateAndChannels(int fs_hz, size_t channels) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "LastOutputType()",
    "kind": "Method",
    "detail": "Function (OutputType)",
    "insertText": "LastOutputType() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdatePlcComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlcComponents(int fs_hz, size_t channels) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "CurrentNetworkStatisticsInternal()",
    "kind": "Method",
    "detail": "Function (NetEqNetworkStatistics)",
    "insertText": "CurrentNetworkStatisticsInternal() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; Mutex mutex_ ; const std::unique_ptr<TickTimer> tick_timer_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]