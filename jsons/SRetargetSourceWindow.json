[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "SListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListView"
  },
  {
    "label": "FDisplayedRetargetSourceInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedRetargetSourceInfo"
  },
  {
    "label": "SRetargetSourceWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRetargetSourceWindow"
  },
  {
    "label": "SCompatibleSkeletons",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCompatibleSkeletons"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Engine / SkeletalMesh . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" struct FAssetData ; class IEditableSkeleton ; template<ItemType> class SListView ; class FDisplayedRetargetSourceInfo { public : FName Name ; TSoftObjectPtr<USkeletalMesh> ReferenceMesh ; TSharedRef<FDisplayedRetargetSourceInfo>)",
    "insertText": "Make(const FName& SourcePose, TSoftObjectPtr<USkeletalMesh> InReferenceMesh, bool bInDirtyFlag)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FStringFormatArg> Args ; Args .)",
    "insertText": "Add(FStringFormatArg(Name.ToString()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(FStringFormatArg(bDirtyFlag ? TEXT(\" [out of date]\") : TEXT(\"\")))"
  },
  {
    "label": "GetReferenceMeshName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferenceMeshName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FStringFormatArg> Args ; Args .)",
    "insertText": "Add(FStringFormatArg((!ReferenceMesh.IsNull()) ? ReferenceMesh.ToString() : TEXT(\"None\")))"
  },
  {
    "label": "RequestRename()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRename()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnEnterEditingMode .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE(FOnEnterEditingMode)"
  },
  {
    "label": "FDisplayedRetargetSourceInfo()",
    "kind": "Method",
    "detail": "Function (FOnEnterEditingMode OnEnterEditingMode ; protected :)",
    "insertText": "FDisplayedRetargetSourceInfo(const FName& InSource, TSoftObjectPtr<USkeletalMesh> InRefMesh, bool InDirtyFlag) : Name( InSource ) , ReferenceMesh( InRefMesh ) , bRenamePending( false ) , bDirtyFlag(InDirtyFlag)"
  },
  {
    "label": "FDisplayedRetargetSourceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplayedRetargetSourceInfo()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} bool bRenamePending ; bool bDirtyFlag ; } ; typedef SListView<TSharedPtr<FDisplayedRetargetSourceInfo>> SRetargetSourceListType ; class SRetargetSourceWindow : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SRetargetSourceWindow)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<class IEditableSkeleton>& InEditableSkeleton, FSimpleMulticastDelegate& InOnPostUndo)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& SearchText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& SearchText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GenerateRetargetSourceRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateRetargetSourceRow(TSharedPtr<FDisplayedRetargetSourceInfo> InInfo, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnAddRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddRetargetSource()"
  },
  {
    "label": "OnAssetSelectedFromMeshPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetSelectedFromMeshPicker(const FAssetData& AssetData)"
  },
  {
    "label": "AddRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRetargetSource(const FName Name, USkeletalMesh * ReferenceMesh)"
  },
  {
    "label": "CanPerformDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPerformDelete()"
  },
  {
    "label": "OnDeleteRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteRetargetSource()"
  },
  {
    "label": "CanPerformRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPerformRename()"
  },
  {
    "label": "OnRenameRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameRetargetSource()"
  },
  {
    "label": "CanPerformRefresh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPerformRefresh()"
  },
  {
    "label": "OnRefreshRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefreshRetargetSource(bool bAll = false)"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (FText&)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "OnGetContextMenuContent()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SWidget>)",
    "insertText": "OnGetContextMenuContent()"
  },
  {
    "label": "CreateRetargetSourceList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRetargetSourceList(const FString& SearchText = FString(\"\"), const FName NewName = NAME_None)"
  },
  {
    "label": "OnRenameCommit()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class IEditableSkeleton> EditableSkeletonPtr ; TSharedPtr<SSearchBox> NameFilterBox ; TSharedPtr<SRetargetSourceListType> RetargetSourceListView ; TArray<TSharedPtr<FDisplayedRetargetSourceInfo>> RetargetSourceList ; FText FilterText ; TSharedPtr<FDisplayedRetargetSourceInfo> ItemToRename ; void)",
    "insertText": "OnRenameCommit(const FName& InOldName, const FString& InNewName)"
  },
  {
    "label": "OnVerifyRenameCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyRenameCommit(const FName& OldName, const FString& NewName, FText& OutErrorMessage)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo()"
  },
  {
    "label": "OnAddRetargetSourceButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddRetargetSourceButtonClicked()"
  },
  {
    "label": "OnUpdateAllRetargetSourceButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnUpdateAllRetargetSourceButtonClicked()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SCompatibleSkeletons : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCompatibleSkeletons)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<class IEditableSkeleton>& InEditableSkeleton, FSimpleMulticastDelegate& InOnPostUndo)"
  },
  {
    "label": "OnAddSkeletonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddSkeletonClicked()"
  },
  {
    "label": "OnRemoveSkeletonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRemoveSkeletonClicked()"
  },
  {
    "label": "GenerateRowForItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateRowForItem(TSharedRef<FSoftObjectPath> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnAssetSelectedFromSkeletonPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetSelectedFromSkeletonPicker(const FAssetData& AssetData)"
  },
  {
    "label": "UpdateCompatibleSkeletonAssets()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateCompatibleSkeletonAssets(const USkeleton& Skeleton)"
  }
]