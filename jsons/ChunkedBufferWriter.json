[
  {
    "label": "HORDE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HORDE_API"
  },
  {
    "label": "FChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunk"
  },
  {
    "label": "FChunkedBufferWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BlobWriter . h \" class FChunkedBufferWriter { public :)",
    "insertText": "FChunkedBufferWriter(size_t InitialSize = 1024)"
  },
  {
    "label": "FChunkedBufferWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChunkedBufferWriter(const FChunkedBufferWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChunkedBufferWriter&)",
    "insertText": "operator(const FChunkedBufferWriter&)"
  },
  {
    "label": "FChunkedBufferWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChunkedBufferWriter()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetLength()"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (FSharedBufferView)",
    "insertText": "Slice(size_t Offset, size_t Length)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (TArray<FMemoryView>)",
    "insertText": "GetView()"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(void* Buffer)"
  },
  {
    "label": "GetOutputBuffer()",
    "kind": "Method",
    "detail": "Function (FMutableMemoryView)",
    "insertText": "GetOutputBuffer(size_t UsedSize, size_t DesiredSize)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(size_t Size)"
  }
]