[
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "raw_hash_map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_hash_map"
  },
  {
    "label": "P",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "V",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_RAW_HASH_MAP_H_ # define ABSL_CONTAINER_INTERNAL_RAW_HASH_MAP_H_ # include<tuple> # include<type_traits> # include<utility> # include \" absl / base / internal / throw_delegate . h \" # include \" absl / container / internal / container_memory . h \" # include \" absl / container / internal / raw_hash_set . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class Policy,class Hash,class Eq,class Alloc> class raw_hash_map : public raw_hash_set<Policy,Hash,Eq,Alloc> { template<class P> using MappedReference =)",
    "insertText": "decltype(P::value( std::addressof(std::declval<typename raw_hash_map::reference>())))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class P> using MappedConstReference =)",
    "insertText": "decltype(P::value( std::addressof(std::declval<typename raw_hash_map::const_reference>())))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using KeyArgImpl = KeyArg<IsTransparent<Eq>::value&& IsTransparent<Hash>::value> ; public : using key_type = Policy::key_type ; using mapped_type = Policy::mapped_type ; template<class K> using key_arg = KeyArgImpl::template type<K,key_type> ;)",
    "insertText": "static_assert(!std::is_reference<key_type>::value, \"\")"
  },
  {
    "label": "raw_hash_map()",
    "kind": "Method",
    "detail": "Function (using iterator = raw_hash_map::raw_hash_set::iterator ; using const_iterator = raw_hash_map::raw_hash_set::const_iterator ;)",
    "insertText": "raw_hash_map()"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} using raw_hash_map::raw_hash_set::raw_hash_set ; template<class K = key_type,class V = mapped_type,K* = nullptr,V* = nullptr> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(key_arg<K>&& k, V&& v)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class V = mapped_type,K* = nullptr> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(key_arg<K>&& k, const V& v)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class V = mapped_type,V* = nullptr> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(const key_arg<K>& k, V&& v)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class V = mapped_type> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(const key_arg<K>& k, const V& v)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class V = mapped_type,K* = nullptr,V* = nullptr> iterator)",
    "insertText": "insert_or_assign(const_iterator, key_arg<K>&& k, V&& v)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class V = mapped_type,K* = nullptr> iterator)",
    "insertText": "insert_or_assign(const_iterator, key_arg<K>&& k, const V& v)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class V = mapped_type,V* = nullptr> iterator)",
    "insertText": "insert_or_assign(const_iterator, const key_arg<K>& k, V&& v)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class V = mapped_type> iterator)",
    "insertText": "insert_or_assign(const_iterator, const key_arg<K>& k, const V& v)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class . . . Args,std::enable_if<! std::is_convertible<K,const_iterator>::value,int>::type = 0,K* = nullptr> std::pair<iterator,bool>)",
    "insertText": "try_emplace(key_arg<K>&& k, Args&&... args)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class . . . Args,std::enable_if<! std::is_convertible<K,const_iterator>::value,int>::type = 0> std::pair<iterator,bool>)",
    "insertText": "try_emplace(const key_arg<K>& k, Args&&... args)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class . . . Args,K* = nullptr> iterator)",
    "insertText": "try_emplace(const_iterator, key_arg<K>&& k, Args&&... args)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class . . . Args> iterator)",
    "insertText": "try_emplace(const_iterator, const key_arg<K>& k, Args&&... args)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class P = Policy> MappedReference<P>)",
    "insertText": "at(const key_arg<K>& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = this ->)",
    "insertText": "find(key)"
  },
  {
    "label": "ThrowStdOutOfRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrowStdOutOfRange(\"absl::container_internal::raw_hash_map<>::at\")"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "value(&*it)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class P = Policy,K* = nullptr> MappedReference<P>)",
    "insertText": "operator(key_arg<K>&& key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class P = Policy> MappedReference<P>)",
    "insertText": "operator(const key_arg<K>& key)"
  },
  {
    "label": "insert_or_assign_impl()",
    "kind": "Method",
    "detail": "Function (} private : template<class K,class V> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign_impl(K&& k, V&& v)"
  },
  {
    "label": "find_or_prepare_insert()",
    "kind": "Method",
    "detail": "Function (auto res = this ->)",
    "insertText": "find_or_prepare_insert(k)"
  },
  {
    "label": "try_emplace_impl()",
    "kind": "Method",
    "detail": "Function (} template<class K = key_type,class . . . Args> std::pair<iterator,bool>)",
    "insertText": "try_emplace_impl(K&& k, Args&&... args)"
  }
]