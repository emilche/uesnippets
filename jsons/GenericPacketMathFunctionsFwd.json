[
  {
    "label": "ppolevl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ppolevl"
  },
  {
    "label": "pfrexp_generic()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "pfrexp_generic(const Packet& a, Packet& exponent)"
  },
  {
    "label": "pfrexp_generic_get_biased_exponent()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "pfrexp_generic_get_biased_exponent(const Packet& p)"
  },
  {
    "label": "pldexp_generic()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "pldexp_generic(const Packet& a, const Packet& exponent)"
  },
  {
    "label": "plog_float()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "plog_float(const Packet _x)"
  },
  {
    "label": "plog2_float()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "plog2_float(const Packet _x)"
  },
  {
    "label": "plog_double()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "plog_double(const Packet _x)"
  },
  {
    "label": "plog2_double()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "plog2_double(const Packet _x)"
  },
  {
    "label": "generic_plog1p()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "generic_plog1p(const Packet& x)"
  },
  {
    "label": "generic_expm1()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "generic_expm1(const Packet& x)"
  },
  {
    "label": "pexp_float()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "pexp_float(const Packet _x)"
  },
  {
    "label": "pexp_double()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "pexp_double(const Packet _x)"
  },
  {
    "label": "psin_float()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "psin_float(const Packet& x)"
  },
  {
    "label": "pcos_float()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "pcos_float(const Packet& x)"
  },
  {
    "label": "psqrt_complex()",
    "kind": "Method",
    "detail": "Function (Packet)",
    "insertText": "psqrt_complex(const Packet& a)"
  }
]