[
  {
    "label": "FIoHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoHash"
  },
  {
    "label": "THash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THash"
  },
  {
    "label": "ToHex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Memory / MemoryView . h \" struct FIoHash ; namespace UE { namespace GenericHash { FString)",
    "insertText": "ToHex(FMemoryView Memory)"
  },
  {
    "label": "ToHex()",
    "kind": "Method",
    "detail": "Function (FStringBuilderBase&)",
    "insertText": "ToHex(FMemoryView Memory, FStringBuilderBase& Out)"
  },
  {
    "label": "THash()",
    "kind": "Method",
    "detail": "Function (} template<SIZE_T BitCount> struct THash { SIZE_T Size = BitCount>> 3 ; using ByteArray = uint8 [ Size ] ;)",
    "insertText": "THash()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "From()",
    "kind": "Method",
    "detail": "Function (} THash)",
    "insertText": "From(FMemoryView Memory)"
  },
  {
    "label": "From()",
    "kind": "Method",
    "detail": "Function (THash)",
    "insertText": "From(const uint8* Data, SIZE_T DataSize)"
  },
  {
    "label": "From()",
    "kind": "Method",
    "detail": "Function (THash)",
    "insertText": "From(const FIoHash& IoHash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const THash Zero ; bool)",
    "insertText": "operator(const THash& A, const THash& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const THash& H)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LexToString(const THash& H)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FStringBuilderBase&)",
    "insertText": "LexToString(const THash& H, FStringBuilderBase& Out)"
  },
  {
    "label": "GetMutableView()",
    "kind": "Method",
    "detail": "Function (} private : FMutableMemoryView)",
    "insertText": "GetMutableView()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "alignas(uint32)"
  },
  {
    "label": "GetMutableView()",
    "kind": "Method",
    "detail": "Function (THash<BitCount> Hash ; Hash .)",
    "insertText": "GetMutableView().CopyFrom(Memory.Left(THash<BitCount>::Size))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (THash<BitCount> Hash ;)",
    "insertText": "Memcpy(&Hash, &IoHash, FMath::Min(THash<BitCount>::Size, SIZE_T(20)))"
  }
]