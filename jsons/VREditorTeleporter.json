[
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UVREditorInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorInteractor"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "VREDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VREDITOR_API"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "UVREditorInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorInteractor"
  },
  {
    "label": "EState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EState"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init( class UVREditorMode* InMode )"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "StartTeleport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTeleport()"
  },
  {
    "label": "TeleportDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeleportDone()"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility( const bool bVisible )"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor( const FLinearColor& Color )"
  },
  {
    "label": "GetSlideDelta()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSlideDelta( UVREditorInteractor* Interactor, const bool Axis )"
  },
  {
    "label": "StartAiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAiming( class UViewportInteractor* Interactor )"
  },
  {
    "label": "StopAiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAiming()"
  },
  {
    "label": "DoTeleport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoTeleport()"
  },
  {
    "label": "OnPreviewInputAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewInputAction(class FEditorViewportClient& ViewportClient, UViewportInteractor* Interactor,\n\t\tconst struct FViewportActionKeyInput& Action, bool& bOutIsInputCaptured, bool& bWasHandled)"
  },
  {
    "label": "Teleport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teleport(const float DeltaTime)"
  },
  {
    "label": "UpdateTeleportAim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTeleportAim(const float DeltaTime)"
  },
  {
    "label": "UpdatePushPullTeleporter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "UpdatePushPullTeleporter(class UVREditorInteractor* VREditorInteractor, const FVector& LaserPointerStart, const FVector& LaserPointerEnd, const bool bEnablePushPull = true)"
  },
  {
    "label": "UpdateVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisuals(const FVector& NewLocation)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(const bool bShow)"
  },
  {
    "label": "UpdateFadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFadingState(const float DeltaTime)"
  }
]