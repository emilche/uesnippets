[
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UVREditorInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorInteractor"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "VREDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VREDITOR_API"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "EState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EState"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" GameFramework / Actor . h \" # include \" Engine / EngineBaseTypes . h \" # include \" VREditorTeleporter . generated . h \" class UMaterialInstanceDynamic ; class UVREditorInteractor ; class UViewportInteractor ; class UVREditorMode ;)",
    "insertText": "UCLASS(Blueprintable, BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AVREditorTeleporter()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Tick(const float DeltaTime)"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "OnPreviewInputAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewInputAction(class FEditorViewportClient& ViewportClient, UViewportInteractor* Interactor, const struct FViewportActionKeyInput& Action, bool& bOutIsInputCaptured, bool& bWasHandled)"
  },
  {
    "label": "Teleport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teleport(const float DeltaTime)"
  },
  {
    "label": "UpdateTeleportAim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTeleportAim(const float DeltaTime)"
  },
  {
    "label": "UpdatePushPullTeleporter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "UpdatePushPullTeleporter(class UVREditorInteractor* VREditorInteractor, const FVector& LaserPointerStart, const FVector& LaserPointerEnd, const bool bEnablePushPull = true)"
  },
  {
    "label": "UpdateVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisuals(const FVector& NewLocation)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(const bool bShow)"
  },
  {
    "label": "UpdateFadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFadingState(const float DeltaTime)"
  },
  {
    "label": "CalculateAnimatedScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateAnimatedScaleFactor()"
  }
]