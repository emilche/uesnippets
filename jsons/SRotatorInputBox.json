[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SNumericRotatorInputBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNumericRotatorInputBox"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / Input / SNumericEntryBox . h \" class FArrangedChildren ; template<NumericType> class SNumericRotatorInputBox : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnNumericValueChanged, NumericType)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnNumericValueCommitted, NumericType, ETextCommit::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SNumericRotatorInputBox<NumericType> ) : _bColorAxisLabels(false) , _Font(FAppStyle::Get().GetFontStyle(\"NormalFont\")) , _AllowSpin(true) , _SpinDelta(1.f) , _LinearDeltaSensitivity(1) , _MinSliderValue(TOptional<NumericType>()) , _MaxSliderValue(TOptional<NumericType>()) , _DisplayToggle( false ) , _TogglePitchChecked( ECheckBoxState::Checked ) , _ToggleYawChecked( ECheckBoxState::Checked ) , _ToggleRollChecked( ECheckBoxState::Checked ) , _TogglePadding( FMargin( 1.f,0.f,1.f,0.f ))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TOptional<NumericType>, Roll ) SLATE_ATTRIBUTE( TOptional<NumericType>, Pitch ) SLATE_ATTRIBUTE( TOptional<NumericType>, Yaw ) SLATE_ARGUMENT( bool, bColorAxisLabels ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ARGUMENT( bool, AllowSpin ) SLATE_ATTRIBUTE(NumericType, SpinDelta) SLATE_ATTRIBUTE(int32, LinearDeltaSensitivity) SLATE_ATTRIBUTE( TOptional<NumericType>, MinSliderValue ) SLATE_ATTRIBUTE( TOptional<NumericType>, MaxSliderValue ) SLATE_EVENT( FOnNumericValueChanged, OnPitchChanged ) SLATE_EVENT( FOnNumericValueChanged, OnYawChanged ) SLATE_EVENT( FOnNumericValueChanged, OnRollChanged ) SLATE_EVENT( FOnNumericValueCommitted, OnPitchCommitted ) SLATE_EVENT( FOnNumericValueCommitted, OnYawCommitted ) SLATE_EVENT( FOnNumericValueCommitted, OnRollCommitted ) SLATE_EVENT(FSimpleDelegate, OnBeginSliderMovement) SLATE_EVENT(FOnNumericValueChanged, OnEndSliderMovement) SLATE_EVENT( FSimpleDelegate, OnPitchBeginSliderMovement ) SLATE_EVENT( FSimpleDelegate, OnYawBeginSliderMovement ) SLATE_EVENT( FSimpleDelegate, OnRollBeginSliderMovement ) SLATE_EVENT( FOnNumericValueChanged, OnPitchEndSliderMovement ) SLATE_EVENT( FOnNumericValueChanged, OnYawEndSliderMovement ) SLATE_EVENT( FOnNumericValueChanged, OnRollEndSliderMovement ) SLATE_ARGUMENT( TSharedPtr< INumericTypeInterface<NumericType> >, TypeInterface ) SLATE_ARGUMENT( bool, DisplayToggle ) SLATE_ATTRIBUTE( ECheckBoxState, TogglePitchChecked ) SLATE_ATTRIBUTE( ECheckBoxState, ToggleYawChecked ) SLATE_ATTRIBUTE( ECheckBoxState, ToggleRollChecked ) SLATE_EVENT( FOnCheckStateChanged, OnTogglePitchChanged ) SLATE_EVENT( FOnCheckStateChanged, OnToggleYawChanged ) SLATE_EVENT( FOnCheckStateChanged, OnToggleRollChanged ) SLATE_ARGUMENT( FMargin, TogglePadding ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) +SHorizontalBox::Slot() [ SNew(SNumericEntryBox<NumericType>) .AllowSpin(InArgs._AllowSpin) .Delta(InArgs._SpinDelta) .LinearDeltaSensitivity(InArgs._LinearDeltaSensitivity) .MinValue(InArgs._MinSliderValue) .MaxValue(InArgs._MaxSliderValue) .MinSliderValue(InArgs._MinSliderValue) .MaxSliderValue(InArgs._MaxSliderValue) .LabelPadding(FMargin(3.0f)) .LabelLocation(SNumericEntryBox<NumericType>::ELabelLocation::Inside) .Label() [ InArgs._bColorAxisLabels ? SNumericEntryBox<NumericType>::BuildNarrowColorLabel(SNumericEntryBox<NumericType>::RedLabelBackgroundColor) : SNullWidget::NullWidget ] .Font( InArgs._Font ) .Value( InArgs._Roll ) .OnValueChanged( InArgs._OnRollChanged ) .OnValueCommitted( InArgs._OnRollCommitted ) .OnBeginSliderMovement( InArgs._OnRollBeginSliderMovement ) .OnEndSliderMovement( InArgs._OnRollEndSliderMovement ) .UndeterminedString( NSLOCTEXT(\"SRotatorInputBox\", \"MultipleValues\", \"Multiple Values\") ) .ToolTipText_Lambda([RollAttr = InArgs._Roll] { const TOptional<NumericType>& RollValue = RollAttr.Get(); return RollValue.IsSet() ? FText::Format(NSLOCTEXT(\"SRotatorInputBox\", \"Roll_ToolTip\", \"X(Roll): {0}\"), RollValue.GetValue()) : NSLOCTEXT(\"SRotatorInputBox\", \"MultipleValues\", \"Multiple Values\"); }) .TypeInterface(InArgs._TypeInterface) .DisplayToggle(InArgs._DisplayToggle) .ToggleChecked(InArgs._ToggleRollChecked) .OnToggleChanged(InArgs._OnToggleRollChanged) .TogglePadding(InArgs._TogglePadding) ] +SHorizontalBox::Slot() [ SNew(SNumericEntryBox<NumericType>) .AllowSpin(InArgs._AllowSpin) .Delta(InArgs._SpinDelta) .LinearDeltaSensitivity(InArgs._LinearDeltaSensitivity) .MinValue(InArgs._MinSliderValue) .MaxValue(InArgs._MaxSliderValue) .MinSliderValue(InArgs._MinSliderValue) .MaxSliderValue(InArgs._MaxSliderValue) .LabelPadding(FMargin(3.0f)) .LabelLocation(SNumericEntryBox<NumericType>::ELabelLocation::Inside) .Label() [ InArgs._bColorAxisLabels ? SNumericEntryBox<NumericType>::BuildNarrowColorLabel(SNumericEntryBox<NumericType>::GreenLabelBackgroundColor) : SNullWidget::NullWidget ] .Font( InArgs._Font ) .Value( InArgs._Pitch ) .OnValueChanged( InArgs._OnPitchChanged ) .OnValueCommitted( InArgs._OnPitchCommitted ) .OnBeginSliderMovement( CreatePerComponentSliderMovementEvent( InArgs._OnBeginSliderMovement, InArgs._OnPitchBeginSliderMovement ) ) .OnEndSliderMovement( CreatePerComponentSliderMovementEvent< FOnNumericValueChanged, NumericType >( InArgs._OnEndSliderMovement, InArgs._OnPitchEndSliderMovement ) ) .UndeterminedString( NSLOCTEXT(\"SRotatorInputBox\", \"MultipleValues\", \"Multiple Values\") ) .ToolTipText_Lambda([PitchAttr = InArgs._Pitch] { const TOptional<NumericType>& PitchValue = PitchAttr.Get(); return PitchValue.IsSet() ? FText::Format(NSLOCTEXT(\"SRotatorInputBox\", \"Pitch_ToolTip\", \"Y(Pitch): {0}\"), PitchValue.GetValue()) : NSLOCTEXT(\"SRotatorInputBox\", \"MultipleValues\", \"Multiple Values\"); }) .TypeInterface(InArgs._TypeInterface) .DisplayToggle(InArgs._DisplayToggle) .ToggleChecked(InArgs._TogglePitchChecked) .OnToggleChanged(InArgs._OnTogglePitchChanged) .TogglePadding(InArgs._TogglePadding) ] +SHorizontalBox::Slot() [ SNew(SNumericEntryBox<NumericType>) .AllowSpin(InArgs._AllowSpin) .Delta(InArgs._SpinDelta) .LinearDeltaSensitivity(InArgs._LinearDeltaSensitivity) .MinValue(InArgs._MinSliderValue) .MaxValue(InArgs._MaxSliderValue) .MinSliderValue(InArgs._MinSliderValue) .MaxSliderValue(InArgs._MaxSliderValue) .LabelPadding(FMargin(3.0f)) .LabelLocation(SNumericEntryBox<NumericType>::ELabelLocation::Inside) .Label() [ InArgs._bColorAxisLabels ? SNumericEntryBox<NumericType>::BuildNarrowColorLabel(SNumericEntryBox<NumericType>::BlueLabelBackgroundColor) : SNullWidget::NullWidget ] .Font( InArgs._Font ) .Value( InArgs._Yaw ) .OnValueChanged( InArgs._OnYawChanged ) .OnValueCommitted( InArgs._OnYawCommitted ) .OnBeginSliderMovement( InArgs._OnYawBeginSliderMovement ) .OnEndSliderMovement( InArgs._OnYawEndSliderMovement ) .UndeterminedString( NSLOCTEXT(\"SRotatorInputBox\", \"MultipleValues\", \"Multiple Values\") ) .ToolTipText_Lambda([YawAttr = InArgs._Yaw] { const TOptional<NumericType>& YawValue = YawAttr.Get(); return YawValue.IsSet() ? FText::Format(NSLOCTEXT(\"SRotatorInputBox\", \"Yaw_ToolTip\", \"Z(Yaw): {0}\"), YawValue.GetValue()) : NSLOCTEXT(\"SRotatorInputBox\", \"MultipleValues\", \"Multiple Values\"); }) .TypeInterface(InArgs._TypeInterface) .DisplayToggle(InArgs._DisplayToggle) .ToggleChecked(InArgs._ToggleYawChecked) .OnToggleChanged(InArgs._OnToggleYawChanged) .TogglePadding(InArgs._TogglePadding)"
  },
  {
    "label": "CreatePerComponentSliderMovementEvent()",
    "kind": "Method",
    "detail": "Function (} template<EventType,. . . ArgsType> EventType)",
    "insertText": "CreatePerComponentSliderMovementEvent(const EventType OnSliderMovement, const EventType OnComponentSliderMovement)"
  }
]