[
  {
    "label": "FBufferOnePoleLPF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferOnePoleLPF"
  },
  {
    "label": "FBufferOnePoleLPF()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" DSP / BufferVectorOperations . h \" namespace Audio { class FBufferOnePoleLPF { public :)",
    "insertText": "FBufferOnePoleLPF(float InG = 0.0f)"
  },
  {
    "label": "SetG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetG(float InG)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FlushAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAudio()"
  },
  {
    "label": "SetFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrequency(const float InFrequency)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const FAlignedFloatBuffer& InSamples, FAlignedFloatBuffer& OutSamples)"
  }
]