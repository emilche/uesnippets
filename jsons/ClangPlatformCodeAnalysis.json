[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if)",
    "insertText": "defined(__clang_analyzer__ ) #define USING_CODE_ANALYSIS 1 #else #define USING_CODE_ANALYSIS 0 #endif #if USING_CODE_ANALYSIS void CA_AssumeNoReturn() __attribute__((analyzer_noreturn))"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (# define CA_IN # define CA_OUT # define CA_READ_ONLY # define CA_WRITE_ONLY # define CA_VALID_POINTER # define CA_CHECK_RETVAL # define CA_NO_RETURN)",
    "insertText": "__attribute__((analyzer_noreturn)) #define CA_SUPPRESS( WarningNumber ) #define CA_ASSUME( Expr ) (__builtin_expect(!bool(Expr), 0) ? CA_AssumeNoReturn() : (void)0) #define CA_CONSTANT_IF(Condition) if (Condition) #endif #if defined(__has_feature) && __has_feature(address_sanitizer) #define USING_ADDRESS_SANITISER 1 #else #define USING_ADDRESS_SANITISER 0 #endif #if defined(__has_feature) && __has_feature(hwaddress_sanitizer) #define USING_HW_ADDRESS_SANITISER 1 #else #define USING_HW_ADDRESS_SANITISER 0 #endif #if defined(__has_feature) && __has_feature(thread_sanitizer) #define USING_THREAD_SANITISER 1 #else #define USING_THREAD_SANITISER 0 #endif #ifndef USING_UNDEFINED_BEHAVIOR_SANITISER #define USING_UNDEFINED_BEHAVIOR_SANITISER 0 #endif #if USING_THREAD_SANITISER #define TSAN_SAFE __attribute__((no_sanitize(\"thread\")))"
  },
  {
    "label": "AnnotateHappensBefore()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AnnotateHappensBefore(const char *f, int l, void *addr)"
  },
  {
    "label": "AnnotateHappensAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateHappensAfter(const char *f, int l, void *addr)"
  }
]