[
  {
    "label": "FConfigFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigFile"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPlatformIconPaths",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformIconPaths"
  },
  {
    "label": "FPreviewPlatformMenuItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreviewPlatformMenuItem"
  },
  {
    "label": "FDataDrivenPlatformInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataDrivenPlatformInfo"
  },
  {
    "label": "FDataDrivenPlatformInfoRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataDrivenPlatformInfoRegistry"
  },
  {
    "label": "FTurkeySupportModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTurkeySupportModule"
  },
  {
    "label": "DDPI_HAS_EXTENDED_PLATFORMINFO_DATA()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / Text . h \" # include \" Misc / Guid . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FConfigFile ; # define)",
    "insertText": "DDPI_HAS_EXTENDED_PLATFORMINFO_DATA(WITH_EDITOR || IS_PROGRAM)"
  },
  {
    "label": "FPlatformIconPaths()",
    "kind": "Method",
    "detail": "Function (TruePlatformsOnly,AllPlatformInfos,} ; # if DDPI_HAS_EXTENDED_PLATFORMINFO_DATA enum class EPlatformIconSize : uint8 { Normal,Large,XLarge,} ; struct FPlatformIconPaths {)",
    "insertText": "FPlatformIconPaths()"
  },
  {
    "label": "FPlatformIconPaths()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlatformIconPaths(const FString& InIconPath) : NormalPath(InIconPath) , LargePath(InIconPath) , XLargePath(InIconPath)"
  },
  {
    "label": "FPlatformIconPaths()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlatformIconPaths(const FString& InNormalPath, const FString& InLargePath) : NormalPath(InNormalPath) , LargePath(InLargePath) , XLargePath(InLargePath)"
  },
  {
    "label": "FPlatformIconPaths()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlatformIconPaths(const FString& InNormalPath, const FString& InLargePath, const FString& InXLargePath) : NormalPath(InNormalPath) , LargePath(InLargePath) , XLargePath(InXLargePath)"
  },
  {
    "label": "GetCookPlatformName()",
    "kind": "Method",
    "detail": "Function (} FName NormalStyleName ; FString NormalPath ; FName LargeStyleName ; FString LargePath ; FName XLargeStyleName ; FString XLargePath ; } ; struct FPreviewPlatformMenuItem { FName PlatformName ; FName ShaderFormat ; FName ShaderPlatformToPreview ; FName PreviewShaderPlatformName ; FName PreviewFeatureLevelName ; FString ActiveIconPath ; FName ActiveIconName ; FString InactiveIconPath ; FName InactiveIconName ; FText OptionalFriendlyNameOverride ; FText MenuTooltip ; FText IconText ; FName DeviceProfileName ; } ; # endif struct FDataDrivenPlatformInfo { FName IniPlatformName ; TArray<FString> IniParentChain ; bool bIsConfidential = false ; bool bIsFakePlatform = false ; FString TargetSettingsIniSectionName ; TArray<FString> AdditionalRestrictedFolders ; FGuid GlobalIdentifier ; uint32 Freezing_MaxFieldAlignment = 0 xffffffff ; bool Freezing_b32Bit = false ; bool Freezing_bForce64BitMemoryImagePointers = false ; bool Freezing_bAlignBases = false ; bool bHasDedicatedGamepad = false ; bool bDefaultInputStandardKeyboard = false ; bool bInputSupportConfigurable = false ; FString DefaultInputType = \" Gamepad \" ; bool bSupportsMouseAndKeyboard = false ; bool bSupportsGamepad = true ; bool bCanChangeGamepadType = true ; bool bSupportsTouch = false ; FString HardwareCompressionFormat ; FName OverrideCookPlatformName ; const FName&)",
    "insertText": "GetCookPlatformName()"
  },
  {
    "label": "GetPlatformDirectoryNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetPlatformDirectoryNames(bool bCheckValid)"
  },
  {
    "label": "GetValidPlatformDirectoryNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetValidPlatformDirectoryNames()"
  },
  {
    "label": "GetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (} const FDataDrivenPlatformInfo&)",
    "insertText": "GetPlatformInfo(const FString& PlatformName)"
  },
  {
    "label": "GetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const FDataDrivenPlatformInfo&)",
    "insertText": "GetPlatformInfo(FName PlatformName)"
  },
  {
    "label": "GetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const FDataDrivenPlatformInfo&)",
    "insertText": "GetPlatformInfo(const char* PlatformName)"
  },
  {
    "label": "GetSortedPlatformNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>)",
    "insertText": "GetSortedPlatformNames(EPlatformInfoType PlatformType)"
  },
  {
    "label": "GetSortedPlatformInfos()",
    "kind": "Method",
    "detail": "Function (const TArray<const FDataDrivenPlatformInfo*>&)",
    "insertText": "GetSortedPlatformInfos(EPlatformInfoType PlatformType)"
  },
  {
    "label": "GetConfidentialPlatforms()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>&)",
    "insertText": "GetConfidentialPlatforms()"
  },
  {
    "label": "GetNumDataDrivenIniFiles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumDataDrivenIniFiles()"
  },
  {
    "label": "LoadDataDrivenIniFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadDataDrivenIniFile(int32 Index, FConfigFile& IniFile, FString& PlatformName)"
  },
  {
    "label": "HasCompiledSupportForPlatform()",
    "kind": "Method",
    "detail": "Function (# if DDPI_HAS_EXTENDED_PLATFORMINFO_DATA enum class EPlatformNameType { UBT,Ini,TargetPlatform,} ; bool)",
    "insertText": "HasCompiledSupportForPlatform(FName PlatformName, EPlatformNameType PlatformNameType)"
  },
  {
    "label": "ClearDeviceStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDeviceStatus(FName PlatformName)"
  },
  {
    "label": "DeviceIdToInfo()",
    "kind": "Method",
    "detail": "Function (FDataDrivenPlatformInfo&)",
    "insertText": "DeviceIdToInfo(FString DeviceId, FString* OutDeviceName = nullptr)"
  },
  {
    "label": "GetAllPreviewPlatformMenuItems()",
    "kind": "Method",
    "detail": "Function (const TArray<struct FPreviewPlatformMenuItem>&)",
    "insertText": "GetAllPreviewPlatformMenuItems()"
  },
  {
    "label": "IsPlatformHiddenFromUI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformHiddenFromUI(FName PlatformName)"
  },
  {
    "label": "SetPlatformHiddenFromUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformHiddenFromUI(FName PlatformName)"
  },
  {
    "label": "GetMutablePlatformInfo()",
    "kind": "Method",
    "detail": "Function (private : class FTurkeySupportModule ; FDataDrivenPlatformInfo&)",
    "insertText": "GetMutablePlatformInfo(FName PlatformName)"
  },
  {
    "label": "GetMutablePlatformInfos()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FDataDrivenPlatformInfo>&)",
    "insertText": "GetMutablePlatformInfos()"
  }
]