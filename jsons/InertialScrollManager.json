[
  {
    "label": "FInertialScrollManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInertialScrollManager"
  },
  {
    "label": "FScrollSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrollSample"
  },
  {
    "label": "FInertialScrollManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" class FInertialScrollManager { float FrictionCoefficient ; float StaticVelocityDrag ; public :)",
    "insertText": "FInertialScrollManager(double SampleTimeout = 0.1f)"
  },
  {
    "label": "AddScrollSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScrollSample(float Delta, double CurrentTime)"
  },
  {
    "label": "UpdateScrollVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollVelocity(const float InDeltaTime)"
  },
  {
    "label": "ClearScrollVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearScrollVelocity(bool bInShouldStopScrollNow = false)"
  },
  {
    "label": "GetScrollVelocity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrollVelocity()"
  },
  {
    "label": "FScrollSample()",
    "kind": "Method",
    "detail": "Function (bShouldStopScrollNow = false ; } private : struct FScrollSample { double Time ; float Delta ;)",
    "insertText": "FScrollSample(float InDelta, double InTime) : Time(InTime) , Delta(InDelta)"
  }
]