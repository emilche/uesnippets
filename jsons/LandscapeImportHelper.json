[
  {
    "label": "FLandscapeImportFileDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImportFileDescriptor"
  },
  {
    "label": "FLandscapeImportResolution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImportResolution"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLandscapeImportDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImportDescriptor"
  },
  {
    "label": "LANDSCAPEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LANDSCAPEEDITOR_API"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" LandscapeFileFormatInterface . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Templates / EnableIf . h \" # include \" LandscapeImportHelper . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FLandscapeImportFileDescriptor(const FString& InFilePath, const FIntPoint& InCoord) : Coord(InCoord), FilePath(InFilePath)"
  },
  {
    "label": "FLandscapeImportFileDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeImportFileDescriptor() : Coord(EForceInit::ForceInit)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FLandscapeImportResolution(uint32 InWidth, uint32 InHeight) : Width(InWidth), Height(InHeight)"
  },
  {
    "label": "FLandscapeImportResolution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeImportResolution()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (None)",
    "insertText": "UMETA(DisplayName=\"Original\", ToolTip=\"Will Import the data at the gizmo location in the original size\"), ExpandOffset UMETA(DisplayName=\"Expand\", ToolTip=\"Will Import the data at the gizmo location and expand the data to fill the landscape\") , ExpandCentered UMETA(Hidden), Resample UMETA(ToolTip=\"Will resample Import data to fit landscape\"), Subregion UMETA(ToolTip=\"Import Sub-region of the Image to Landscape\")"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FLandscapeImportDescriptor() : Scale(100, 100, 100)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Scale =)",
    "insertText": "FVector(100, 100, 100)"
  },
  {
    "label": "FindDescriptorIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindDescriptorIndex(int32 ImportWidth, int32 ImportHeight)"
  },
  {
    "label": "GetHeightmapImportDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeImportHelper { public : ELandscapeImportResult)",
    "insertText": "GetHeightmapImportDescriptor(const FString& FilePath, bool bSingleFile, bool bFlipYAxis, FLandscapeImportDescriptor& OutImportDescriptor, FText& OutMessage)"
  },
  {
    "label": "GetWeightmapImportDescriptor()",
    "kind": "Method",
    "detail": "Function (ELandscapeImportResult)",
    "insertText": "GetWeightmapImportDescriptor(const FString& FilePath, bool bSingleFile, bool bFlipYAxis, FName LayerName, FLandscapeImportDescriptor& OutImportDescriptor, FText& OutMessage)"
  },
  {
    "label": "GetHeightmapImportData()",
    "kind": "Method",
    "detail": "Function (ELandscapeImportResult)",
    "insertText": "GetHeightmapImportData(const FLandscapeImportDescriptor& ImportDescriptor, int32 DescriptorIndex, TArray<uint16>& OutData, FText& OutMessage)"
  },
  {
    "label": "GetWeightmapImportData()",
    "kind": "Method",
    "detail": "Function (ELandscapeImportResult)",
    "insertText": "GetWeightmapImportData(const FLandscapeImportDescriptor& ImportDescriptor, int32 DescriptorIndex, FName LayerName, TArray<uint8>& OutData, FText& OutMessage)"
  },
  {
    "label": "TransformWeightmapImportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformWeightmapImportData(const TArray<uint8>& InData, TArray<uint8>& OutData, const FLandscapeImportResolution& CurrentResolution, const FLandscapeImportResolution& RequiredResolution, ELandscapeImportTransformType TransformType = ELandscapeImportTransformType::ExpandCentered, FIntPoint Offset = FIntPoint(0,0))"
  },
  {
    "label": "TransformHeightmapImportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformHeightmapImportData(const TArray<uint16>& InData, TArray<uint16>& OutData, const FLandscapeImportResolution& CurrentResolution, const FLandscapeImportResolution& RequiredResolution, ELandscapeImportTransformType TransformType = ELandscapeImportTransformType::ExpandCentered, FIntPoint Offset = FIntPoint(0, 0))"
  },
  {
    "label": "ChooseBestComponentSizeForImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseBestComponentSizeForImport(int32 Width, int32 Height, int32& InOutQuadsPerSection, int32& InOutSectionsPerComponent, FIntPoint& OutComponentCount)"
  },
  {
    "label": "ExtractCoordinates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractCoordinates(const FString& BaseFilename, FIntPoint& OutCoord, FString& OutBaseFilePattern)"
  },
  {
    "label": "GetMatchingFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMatchingFiles(const FString& FilePathPattern, TArray<FString>& OutFilePaths)"
  },
  {
    "label": "GetImportDescriptor()",
    "kind": "Method",
    "detail": "Function (template<T> TEnableIf<std::is_same_v<T,uint16>,ELandscapeImportResult>::Type)",
    "insertText": "GetImportDescriptor(const FString& FilePath, bool bSingleFile, bool bFlipYAxis, FName LayerName, FLandscapeImportDescriptor& OutImportDescriptor, FText& OutMessage)"
  },
  {
    "label": "GetImportData()",
    "kind": "Method",
    "detail": "Function (} template<T> TEnableIf<std::is_same_v<T,uint16>,ELandscapeImportResult>::Type)",
    "insertText": "GetImportData(const FLandscapeImportDescriptor& ImportDescriptor, int32 DescriptorIndex, FName LayerName, TArray<T>& OutData, FText& OutMessage)"
  },
  {
    "label": "TransformImportData()",
    "kind": "Method",
    "detail": "Function (} template<T> TEnableIf<std::is_same_v<T,uint16>,void>::Type)",
    "insertText": "TransformImportData(const TArray<T>& InData, TArray<T>& OutData, const FLandscapeImportResolution& CurrentResolution, const FLandscapeImportResolution& RequiredResolution, ELandscapeImportTransformType TransformType = ELandscapeImportTransformType::ExpandCentered, FIntPoint Offset = FIntPoint(0, 0))"
  }
]