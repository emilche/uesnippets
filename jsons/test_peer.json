[
  {
    "label": "TestPeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPeer"
  },
  {
    "label": "TestPeerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPeerFactory"
  },
  {
    "label": "TestPeer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_TEST_PEER_H_ # define TEST_PC_E2E_TEST_PEER_H_ # include<memory> # include<vector> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" api / function_view . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / set_remote_description_observer_interface . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / test / frame_generator_interface . h \" # include \" api / test / pclf / media_configuration . h \" # include \" api / test / pclf / media_quality_test_params . h \" # include \" api / test / pclf / peer_configurer . h \" # include \" pc / peer_connection_wrapper . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" test / pc / e2e / stats_provider . h \" namespace webrtc { namespace webrtc_pc_e2e { class TestPeer final : public StatsProvider { public : ~)",
    "insertText": "TestPeer()"
  },
  {
    "label": "params()",
    "kind": "Method",
    "detail": "Function (const Params&)",
    "insertText": "params()"
  },
  {
    "label": "AddVideoConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVideoConfig(VideoConfig config)"
  },
  {
    "label": "RemoveVideoConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVideoConfig(absl::string_view stream_label)"
  },
  {
    "label": "SetVideoSubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoSubscription(VideoSubscription subscription)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(RTCStatsCollectorCallback* callback)"
  },
  {
    "label": "ReleaseVideoSource()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer::VideoSource)",
    "insertText": "ReleaseVideoSource(size_t i)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(wrapper_)"
  },
  {
    "label": "pc_factory()",
    "kind": "Method",
    "detail": "Function (} PeerConnectionFactoryInterface*)",
    "insertText": "pc_factory()"
  },
  {
    "label": "pc()",
    "kind": "Method",
    "detail": "Function (} PeerConnectionInterface*)",
    "insertText": "pc()"
  },
  {
    "label": "observer()",
    "kind": "Method",
    "detail": "Function (} MockPeerConnectionObserver*)",
    "insertText": "observer()"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateOffer(rtc::scoped_refptr<CreateSessionDescriptionObserver> observer)"
  },
  {
    "label": "pc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pc()->CreateOffer(observer.get(), params_.rtc_offer_answer_options)"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateOffer()"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateAnswer()"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetLocalDescription(std::unique_ptr<SessionDescriptionInterface> desc, std::string* error_out = nullptr)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetRemoteDescription(std::unique_ptr<SessionDescriptionInterface> desc, std::string* error_out = nullptr)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverInterface>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type, const RtpTransceiverInit& init)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids = {})"
  },
  {
    "label": "CreateDataChannel()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<DataChannelInterface>)",
    "insertText": "CreateDataChannel(const std::string& label)"
  },
  {
    "label": "signaling_state()",
    "kind": "Method",
    "detail": "Function (} PeerConnectionInterface::SignalingState)",
    "insertText": "signaling_state()"
  },
  {
    "label": "IsIceGatheringDone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIceGatheringDone()"
  },
  {
    "label": "IsIceConnected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIceConnected()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<const RTCStatsReport>)",
    "insertText": "GetStats()"
  },
  {
    "label": "DetachAecDump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DetachAecDump()"
  },
  {
    "label": "AddIceCandidates()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "AddIceCandidates(std::vector<std::unique_ptr<IceCandidateInterface>> candidates)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "TestPeer()",
    "kind": "Method",
    "detail": "Function (protected : class TestPeerFactory ;)",
    "insertText": "TestPeer(rtc::scoped_refptr<PeerConnectionFactoryInterface> pc_factory, rtc::scoped_refptr<PeerConnectionInterface> pc, std::unique_ptr<MockPeerConnectionObserver> observer, Params params, ConfigurableParams configurable_params, std::vector<PeerConfigurer::VideoSource> video_sources, rtc::scoped_refptr<AudioProcessing> audio_processing, std::unique_ptr<rtc::Thread> worker_thread)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : const Params params_ ; Mutex mutex_ ; ConfigurableParams configurable_params_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]