[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "URendererSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URendererSettings"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "URendererOverrideSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URendererOverrideSettings"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / Scene . h \" # include \" Engine / DeveloperSettings . h \" # include \" PixelFormat . h \" # include \" UObject / PerPlatformProperties . h \" # include \" LegacyScreenPercentageDriver . h \" # include \" RendererSettings . generated . h \" enum class ESkinCacheDefaultBehavior : uint8 ; struct FPropertyChangedEvent ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { NoClear = 0)",
    "insertText": "UMETA(DisplayName=\"Do not clear\",ToolTip=\"This option is fastest but can cause artifacts unless you render to every pixel. Make sure to use a skybox with this option!\"), HardwareClear = 1 UMETA(DisplayName=\"Hardware clear\",ToolTip=\"Perform a full hardware clear before rendering. Most projects should use this option.\"), QuadAtMaxZ = 2 UMETA(DisplayName=\"Clear at far plane\",ToolTip=\"Draws a quad to perform the clear at the far plane, this is faster than a hardware clear on some GPUs.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { One = 1)",
    "insertText": "UMETA(DisplayName=\"No MSAA\"), Two = 2 UMETA(DisplayName=\"2x MSAA\"), Four = 4 UMETA(DisplayName=\"4x MSAA\"), Eight = 8 UMETA(DisplayName=\"8x MSAA\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Disabled = 0,Enabled = 1)",
    "insertText": "UMETA(ToolTip=\"Depth buffer created immediately. Stencil disabled.\"), EnabledOnDemand = 2 UMETA(ToolTip=\"Depth buffer created on first use, can save memory but cause stalls. Stencil disabled.\"), EnabledWithStencil = 3 UMETA(ToolTip=\"Depth buffer created immediately. Stencil available for read/write.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None = 0)",
    "insertText": "UMETA(DisplayName=\"None\"), OpaqueOnly = 1 UMETA(DisplayName=\"Opaque meshes only\"), OpaqueAndMasked = 2 UMETA(DisplayName=\"Opaque and masked meshes\"), Auto = 3 UMETA(DisplayName=\"Decide automatically\",ToolTip=\"Let the engine decide what to render in the early Z pass based on the features being used.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { DepthPass = 0)",
    "insertText": "UMETA(DisplayName = \"Write during depth pass\"), BasePass = 1 UMETA(DisplayName = \"Write during base pass\"), AfterBasePass = 2 UMETA(DisplayName = \"Write after base pass\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Off = 0)",
    "insertText": "UMETA(ToolTip = \"Always off\"), On = 1 UMETA(ToolTip = \"Always on\"), Auto = 2 UMETA(ToolTip = \"On when the performance cost is low (velocity in depth or base pass).\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Disabled = 0,Enabled = 1,LinearColorSpaceOnly = Enabled)",
    "insertText": "UMETA(Hidden), AllowThroughTonemapper = Enabled UMETA(Hidden)"
  },
  {
    "label": "FromInt()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS namespace EAlphaChannelMode { EAlphaChannelMode::Type)",
    "insertText": "FromInt(int32 InAlphaChannelMode)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { AEM_Histogram)",
    "insertText": "UMETA(DisplayName = \"Auto Exposure Histogram\"), AEM_Basic UMETA(DisplayName = \"Auto Exposure Basic\"), AEM_Manual UMETA(DisplayName = \"Manual\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { DBBPF_B8G8R8A8 = 0)",
    "insertText": "UMETA(DisplayName = \"8bit RGBA\"), DBBPF_A16B16G16R16_DEPRECATED UMETA(DisplayName = \"DEPRECATED - 16bit RGBA\", Hidden), DBBPF_FloatRGB_DEPRECATED UMETA(DisplayName = \"DEPRECATED - Float RGB\", Hidden), DBBPF_FloatRGBA UMETA(DisplayName = \"Float RGBA\"), DBBPF_A2B10G10R10 UMETA(DisplayName = \"10bit RGB, 2bit Alpha\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Disabled = 0)",
    "insertText": "UMETA(DisplayName = \"Disabled\"), Low = 1 UMETA(DisplayName = \"Low\"), Medium = 2 UMETA(DisplayName = \"Medium\"), High = 3 UMETA(DisplayName = \"High\"), HighTop = 4 UMETA(DisplayName = \"High Top\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None = AAM_None)",
    "insertText": "UMETA(DisplayName = \"None\"), FXAA = AAM_FXAA UMETA(DisplayName = \"Fast Approximate Anti-Aliasing (FXAA)\"), TemporalAA = AAM_TemporalAA UMETA(DisplayName = \"Temporal Anti-Aliasing (TAA)\"), MSAA = AAM_MSAA UMETA(DisplayName = \"Multisample Anti-Aliasing (MSAA)\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Half = 0)",
    "insertText": "UMETA(DisplayName = \"Use Half-precision\"), Full_MaterialExpressionOnly = 1 UMETA(DisplayName = \"Use Full-precision for MaterialExpressions only\"), Full = 2 UMETA(DisplayName = \"Use Full-precision for every float\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Forward = 0)",
    "insertText": "UMETA(DisplayName = \"Forward Shading\"), Deferred = 1 UMETA(DisplayName = \"Deferred Shading\")"
  },
  {
    "label": "Convert2PixelFormat()",
    "kind": "Method",
    "detail": "Function (} namespace EDefaultBackBufferPixelFormat { EPixelFormat)",
    "insertText": "Convert2PixelFormat(EDefaultBackBufferPixelFormat::Type InDefaultBackBufferPixelFormat)"
  },
  {
    "label": "NumberOfBitForAlpha()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfBitForAlpha(EDefaultBackBufferPixelFormat::Type InDefaultBackBufferPixelFormat)"
  },
  {
    "label": "FromInt()",
    "kind": "Method",
    "detail": "Function (EDefaultBackBufferPixelFormat::Type)",
    "insertText": "FromInt(int32 InDefaultBackBufferPixelFormat)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { LFAPF_R8 = 0)",
    "insertText": "UMETA(DisplayName = \"8 bits Gray Scale\"), LFAPF_R8G8B8 = 1 UMETA(DisplayName = \"8 bits RGB Color\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None = 0)",
    "insertText": "UMETA(DisplayName = \"Do not compress\", ToolTip = \"Fastest, but disk and memory footprint will be large\"), LZ4 = 1 UMETA(DisplayName = \"LZ4\", ToolTip = \"Compressing using LZ4\"), Oodle = 2 UMETA(DisplayName = \"Oodle\", ToolTip = \"Compressing using Oodle (default)\"), Zlib = 3 UMETA(DisplayName = \"ZLib\", ToolTip = \"Compressing using Zlib\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { DetailTracing = 1)",
    "insertText": "UMETA(DisplayName = \"Detail Tracing\", ToolTip = \"When using Software Ray Tracing, Lumen will trace against individual mesh's Distance Fields for highest quality. Cost can be high in scenes with many overlapping instances.\"), GlobalTracing = 0 UMETA(DisplayName = \"Global Tracing\", ToolTip = \"When using Software Ray Tracing, Lumen will trace against the Global Distance Field for fastest traces.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SurfaceCache = 0)",
    "insertText": "UMETA(DisplayName = \"Surface Cache\"), HitLightingForReflections = 2 UMETA(DisplayName = \"Hit Lighting for Reflections\"), HitLighting = 1 UMETA(DisplayName = \"Hit Lighting\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SceneColor = 0)",
    "insertText": "UMETA(DisplayName = \"Scene Color\"), AntialiasedSceneColorWithTranslucency = 1 UMETA(DisplayName = \"Anti-aliased Scene Color, with Translucency\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { sRGB = 1)",
    "insertText": "UMETA(DisplayName = \"sRGB / Rec709\", ToolTip = \"sRGB / Rec709 (BT.709) color primaries, with D65 white point.\"), Rec2020 = 2 UMETA(DisplayName = \"Rec2020\", ToolTip = \"Rec2020 (BT.2020) primaries with D65 white point.\"), ACESAP0 = 3 UMETA(DIsplayName = \"ACES AP0\", ToolTip = \"ACES AP0 wide gamut primaries, with D60 white point.\"), ACESAP1 = 4 UMETA(DIsplayName = \"ACES AP1 / ACEScg\", ToolTip = \"ACES AP1 / ACEScg wide gamut primaries, with D60 white point.\"), P3DCI = 5 UMETA(DisplayName = \"P3DCI\", ToolTip = \"P3 (Theater) primaries, with DCI Calibration white point.\"), P3D65 = 6 UMETA(DisplayName = \"P3D65\", ToolTip = \"P3 (Display) primaries, with D65 white point.\"), Custom = 7 UMETA(DisplayName = \"Custom\", ToolTip = \"User defined color space and white point.\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UCLASS(config=Engine, defaultconfig, meta=(DisplayName=\"Rendering\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(config, EditAnywhere, Category = Mobile, meta = ( ConsoleVariable = \"r.Mobile.ShadingPath\", DisplayName = \"Mobile Shading\", ToolTip = \"The shading path to use on mobile platforms. Changing this setting requires restarting the editor. Forward shading will force MSAA. Mobile HDR is required for Deferred Shading.\", ConfigRestartRequired = true))"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PreEditChange(FProperty* PropertyAboutToChange)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PreInitPropertiesFixup()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_EDITOR int32 PreEditReflectionCaptureResolution = 1 2 8 ; TWeakPtr<class SNotificationItem> ShaderModelNotificationPtr ; void)",
    "insertText": "PreInitPropertiesFixup()"
  },
  {
    "label": "CheckForMissingShaderModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForMissingShaderModels()"
  },
  {
    "label": "FixAntiAliasingOnShadingPathChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixAntiAliasingOnShadingPathChange(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "SanatizeReflectionCaptureResolution()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SanatizeReflectionCaptureResolution()"
  },
  {
    "label": "UpdateWorkingColorSpaceAndChromaticities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorkingColorSpaceAndChromaticities()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = Engine, projectuserconfig, meta = (DisplayName = \"Rendering Overrides (Local)\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(config, EditAnywhere, Category = ShaderPermutationReduction, meta = ( ConsoleVariable = \"r.SupportAllShaderPermutations\", DisplayName = \"Force all shader permutation support\", ConfigRestartRequired = true))"
  }
]