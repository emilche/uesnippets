[
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "FMovieSceneSharedDataId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSharedDataId"
  },
  {
    "label": "FSharedPersistentDataKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPersistentDataKey"
  },
  {
    "label": "IPersistentEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPersistentEvaluationData"
  },
  {
    "label": "FPersistentEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentEvaluationData"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Evaluation / MovieSceneEvaluationKey . h \" # include \" Evaluation / MovieSceneEvaluationOperand . h \" # include \" Evaluation / MovieSceneSequenceInstanceData . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" MovieSceneFwd . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UniquePtr . h \" class IMovieScenePlayer ; struct FMovieSceneSharedDataId { FMovieSceneSharedDataId)",
    "insertText": "Allocate()"
  },
  {
    "label": "FMovieSceneSharedDataId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSharedDataId(const FMovieSceneSharedDataId&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSharedDataId&)",
    "insertText": "operator(const FMovieSceneSharedDataId&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FMovieSceneSharedDataId A, FMovieSceneSharedDataId B)"
  },
  {
    "label": "FMovieSceneSharedDataId()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FMovieSceneSharedDataId()"
  },
  {
    "label": "FSharedPersistentDataKey()",
    "kind": "Method",
    "detail": "Function (} uint32 UniqueId ; } ; struct FSharedPersistentDataKey {)",
    "insertText": "FSharedPersistentDataKey(FMovieSceneSharedDataId InUniqueId, const FMovieSceneEvaluationOperand& InOperand) : UniqueId(InUniqueId) , Operand(InOperand)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSharedPersistentDataKey& A, const FSharedPersistentDataKey& B)"
  },
  {
    "label": "IPersistentEvaluationData()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneSharedDataId UniqueId ; FMovieSceneEvaluationOperand Operand ; } ; struct IPersistentEvaluationData { ~)",
    "insertText": "IPersistentEvaluationData()"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Persistent Data Access\"), MovieSceneEval_PersistentData_Access, STATGROUP_MovieSceneEval)"
  },
  {
    "label": "FPersistentEvaluationData()",
    "kind": "Method",
    "detail": "Function (struct FPersistentEvaluationData {)",
    "insertText": "FPersistentEvaluationData(IMovieScenePlayer& InPlayer)"
  },
  {
    "label": "FPersistentEvaluationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPersistentEvaluationData(const FPersistentEvaluationData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPersistentEvaluationData&)",
    "insertText": "operator(const FPersistentEvaluationData&)"
  },
  {
    "label": "GetOrAddTrackData()",
    "kind": "Method",
    "detail": "Function (public : template<T> T&)",
    "insertText": "GetOrAddTrackData()"
  },
  {
    "label": "AddTrackData()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "AddTrackData()"
  },
  {
    "label": "GetTrackData()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetTrackData()"
  },
  {
    "label": "FindTrackData()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "FindTrackData()"
  },
  {
    "label": "ResetTrackData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetTrackData()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(TrackKey)"
  },
  {
    "label": "GetOrAddSectionData()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetOrAddSectionData()"
  },
  {
    "label": "AddSectionData()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "AddSectionData()"
  },
  {
    "label": "GetSectionData()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetSectionData()"
  },
  {
    "label": "FindSectionData()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "FindSectionData()"
  },
  {
    "label": "ResetSectionData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetSectionData()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(SectionKey)"
  },
  {
    "label": "GetInstanceData()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneSequenceInstanceData*)",
    "insertText": "GetInstanceData()"
  },
  {
    "label": "GetMovieScenePlayer()",
    "kind": "Method",
    "detail": "Function (IMovieScenePlayer&)",
    "insertText": "GetMovieScenePlayer()"
  },
  {
    "label": "GetTrackKey()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } public : const FMovieSceneEvaluationKey&)",
    "insertText": "GetTrackKey()"
  },
  {
    "label": "SetSectionKey()",
    "kind": "Method",
    "detail": "Function (TrackKey = Key ; } void)",
    "insertText": "SetSectionKey(const FMovieSceneEvaluationKey& Key)"
  },
  {
    "label": "DeriveSectionKey()",
    "kind": "Method",
    "detail": "Function (SectionKey = Key ; } const FMovieSceneEvaluationKey&)",
    "insertText": "DeriveSectionKey(uint32 InSectionIdentifier)"
  },
  {
    "label": "AsSection()",
    "kind": "Method",
    "detail": "Function (SectionKey = TrackKey .)",
    "insertText": "AsSection(InSectionIdentifier)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) if (TUniquePtr<IPersistentEvaluationData>* Existing = SharedData.Find(InKey))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return Add<)",
    "insertText": "T(InKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "Add(const FSharedPersistentDataKey& InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SharedData .)",
    "insertText": "Add(InKey, TUniquePtr<IPersistentEvaluationData>(Ptr))"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) TUniquePtr<IPersistentEvaluationData>* Existing = SharedData.Find(InKey)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "Find(const FSharedPersistentDataKey& InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) const TUniquePtr<IPersistentEvaluationData>* Existing = SharedData.Find(InKey)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "Get(const FSharedPersistentDataKey& InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) T* Ptr = Find<T>(InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) const T* Ptr = Find<T>(InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) SharedData.Remove(InKey)"
  },
  {
    "label": "GetOrAdd()",
    "kind": "Method",
    "detail": "Function (} private : template<T> T&)",
    "insertText": "GetOrAdd(const FMovieSceneEvaluationKey& InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) if (TUniquePtr<IPersistentEvaluationData>* Existing = EntityData.Find(InKey))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "Add(const FMovieSceneEvaluationKey& InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) const TUniquePtr<IPersistentEvaluationData>* Existing = EntityData.Find(InKey)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "Get(const FMovieSceneEvaluationKey& InKey)"
  },
  {
    "label": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOVIESCENE_DETAILED_SCOPE_CYCLE_COUNTER(MovieSceneEval_PersistentData_Access) EntityData.Remove(InKey)"
  }
]