[
  {
    "label": "SparseMatrixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMatrixBase"
  },
  {
    "label": "CwiseProductDenseReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CwiseProductDenseReturnType"
  },
  {
    "label": "SelfAdjointViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SelfAdjointViewReturnType"
  },
  {
    "label": "ConstSelfAdjointViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstSelfAdjointViewReturnType"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSEMATRIXBASE_H # define EIGEN_SPARSEMATRIXBASE_H namespace Eigen { template<Derived> class SparseMatrixBase : public EigenBase<Derived> { public : typedef internal::traits<Derived>::Scalar Scalar ; typedef Scalar value_type ; typedef internal::packet_traits<Scalar>::type PacketScalar ; typedef internal::traits<Derived>::StorageKind StorageKind ; typedef internal::traits<Derived>::StorageIndex StorageIndex ; typedef internal::add_const_on_value_type_if_arithmetic<internal::packet_traits<Scalar>::type>::type PacketReturnType ; typedef SparseMatrixBase StorageBaseType ; typedef Matrix<StorageIndex,Dynamic,1> IndexVector ; typedef Matrix<Scalar,Dynamic,1> ScalarVector ; template<OtherDerived> Derived&)",
    "insertText": "operator(const EigenBase<OtherDerived> &other)"
  },
  {
    "label": "SizeAtCompileTime()",
    "kind": "Method",
    "detail": "Function (enum { RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,)",
    "insertText": "SizeAtCompileTime(internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime, internal::traits<Derived>::ColsAtCompileTime>::ret), MaxRowsAtCompileTime = RowsAtCompileTime, MaxColsAtCompileTime = ColsAtCompileTime, MaxSizeAtCompileTime = (internal::size_at_compile_time<MaxRowsAtCompileTime, MaxColsAtCompileTime>::ret), IsVectorAtCompileTime = RowsAtCompileTime == 1 || ColsAtCompileTime == 1, NumDimensions = int(MaxSizeAtCompileTime) == 1 ? 0 : bool(IsVectorAtCompileTime) ? 1 : 2, Flags = internal::traits<Derived>::Flags, IsRowMajor = Flags&RowMajorBit ? 1 : 0, InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime) : int(IsRowMajor) ? int(ColsAtCompileTime) : int(RowsAtCompileTime), #ifndef EIGEN_PARSED_BY_DOXYGEN _HasDirectAccess = (int(Flags)&DirectAccessBit)"
  },
  {
    "label": "EIGEN_SIZE_MAX()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<NumTraits<Scalar>::IsComplex,CwiseUnaryOp<internal::scalar_conjugate_op<Scalar>,Eigen::Transpose<const Derived>>,Transpose<const Derived>>::type AdjointReturnType ; typedef Transpose<Derived> TransposeReturnType ; typedef internal::add_const<Transpose<const Derived>>::type ConstTransposeReturnType ; typedef SparseMatrix<Scalar,Flags& RowMajorBit ? RowMajor : ColMajor,StorageIndex> PlainObject ; # ifndef EIGEN_PARSED_BY_DOXYGEN typedef NumTraits<Scalar>::Real RealScalar ; typedef internal::conditional<_HasDirectAccess,const Scalar&,Scalar>::type CoeffReturnType ; typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Matrix<Scalar,Dynamic,Dynamic>> ConstantReturnType ; typedef Matrix<Scalar,RowsAtCompileTime,ColsAtCompileTime> DenseMatrixType ; typedef Matrix<Scalar,)",
    "insertText": "EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime), EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (const Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "const_cast_derived()",
    "kind": "Method",
    "detail": "Function (} Derived&)",
    "insertText": "const_cast_derived()"
  },
  {
    "label": "EIGEN_DOC_UNARY_ADDONS()",
    "kind": "Method",
    "detail": "Function (} typedef EigenBase<Derived> Base ; # endif # define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::SparseMatrixBase # ifdef EIGEN_PARSED_BY_DOXYGEN # define)",
    "insertText": "EIGEN_DOC_UNARY_ADDONS(METHOD,OP) #define EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL #define EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(COND) #else #define EIGEN_DOC_UNARY_ADDONS(X,Y) #define EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL #define EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(COND) #endif # include \"../plugins/CommonCwiseUnaryOps.h\" # include \"../plugins/CommonCwiseBinaryOps.h\" # include \"../plugins/MatrixCwiseUnaryOps.h\" # include \"../plugins/MatrixCwiseBinaryOps.h\" # include \"../plugins/BlockMethods.h\" # ifdef EIGEN_SPARSEMATRIXBASE_PLUGIN # include EIGEN_SPARSEMATRIXBASE_PLUGIN # endif #undef EIGEN_CURRENT_STORAGE_BASE_CLASS #undef EIGEN_DOC_UNARY_ADDONS #undef EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL #undef EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF inline Index rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "size()"
  },
  {
    "label": "isVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isVector()"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "outerSize()"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "innerSize()"
  },
  {
    "label": "isRValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRValue()"
  },
  {
    "label": "SparseMatrixBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseMatrixBase() : m_isRValue(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> Derived&)",
    "insertText": "operator(const ReturnByValue<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> Derived&)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Derived&)",
    "insertText": "operator(const Derived& other)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (protected : template<OtherDerived> Derived&)",
    "insertText": "assign(const OtherDerived& other)"
  },
  {
    "label": "assignGeneric()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> void)",
    "insertText": "assignGeneric(const OtherDerived& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : std::ostream&)",
    "insertText": "operator(std::ostream & s, const SparseMatrixBase& m)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef Derived::Nested Nested ; typedef internal::remove_all<Nested>::type NestedCleaned ;)",
    "insertText": "if(Flags&RowMajorBit)"
  },
  {
    "label": "nm()",
    "kind": "Method",
    "detail": "Function (Nested)",
    "insertText": "nm(m.derived())"
  },
  {
    "label": "thisEval()",
    "kind": "Method",
    "detail": "Function (internal::evaluator<NestedCleaned>)",
    "insertText": "thisEval(nm)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index col = 0 ;)",
    "insertText": "for(typename internal::evaluator<NestedCleaned>::InnerIterator it(thisEval, row); it; ++it)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (s<<it .)",
    "insertText": "value()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + col ; })",
    "insertText": "for(; col<m.cols(); ++col)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index row = 0 ;)",
    "insertText": "for(typename internal::evaluator<NestedCleaned>::InnerIterator it(thisEval, 0); it; ++it)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + row ; })",
    "insertText": "for(; row<m.rows(); ++row)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (} else { SparseMatrix<Scalar,RowMajorBit,StorageIndex> trans = m ; s<<static_cast<const SparseMatrixBase<SparseMatrix<Scalar,RowMajorBit,)",
    "insertText": "StorageIndex(trans)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> Derived&)",
    "insertText": "operator(const DiagonalBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Derived&)",
    "insertText": "operator(const Scalar& other)"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> struct CwiseProductDenseReturnType { typedef CwiseBinaryOp<internal::scalar_product_op<ScalarBinaryOpTraits<internal::traits<Derived>::Scalar,internal::traits<OtherDerived>::Scalar>::ReturnType>,const Derived,const OtherDerived> Type ; } ; template<OtherDerived> EIGEN_STRONG_INLINE const CwiseProductDenseReturnType<OtherDerived>::Type)",
    "insertText": "cwiseProduct(const MatrixBase<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> const Product<Derived,OtherDerived>)",
    "insertText": "operator(const DiagonalBase<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> const Product<OtherDerived,Derived>)",
    "insertText": "operator(const DiagonalBase<OtherDerived> &lhs, const SparseMatrixBase& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> const Product<Derived,OtherDerived,AliasFreeProduct>)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> const Product<Derived,OtherDerived>)",
    "insertText": "operator(const MatrixBase<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> const Product<OtherDerived,Derived>)",
    "insertText": "operator(const MatrixBase<OtherDerived> &lhs, const SparseMatrixBase& rhs)"
  },
  {
    "label": "twistedBy()",
    "kind": "Method",
    "detail": "Function (} SparseSymmetricPermutationProduct<Derived,Upper | Lower>)",
    "insertText": "twistedBy(const PermutationMatrix<Dynamic,Dynamic,StorageIndex>& perm)"
  },
  {
    "label": "triangularView()",
    "kind": "Method",
    "detail": "Function (template<int Mode> const TriangularView<const Derived,Mode>)",
    "insertText": "triangularView()"
  },
  {
    "label": "selfadjointView()",
    "kind": "Method",
    "detail": "Function (template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SparseSelfAdjointView<Derived,UpLo> Type ; } ; template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SparseSelfAdjointView<const Derived,UpLo> Type ; } ; template<unsigned int UpLo> ConstSelfAdjointViewReturnType<UpLo>::Type)",
    "insertText": "selfadjointView()"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> Scalar)",
    "insertText": "dot(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> Scalar)",
    "insertText": "dot(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "squaredNorm()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "squaredNorm()"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "norm()"
  },
  {
    "label": "blueNorm()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "blueNorm()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (TransposeReturnType)",
    "insertText": "transpose()"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} const AdjointReturnType)",
    "insertText": "adjoint()"
  },
  {
    "label": "toDense()",
    "kind": "Method",
    "detail": "Function (} DenseMatrixType)",
    "insertText": "toDense()"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> bool)",
    "insertText": "isApprox(const SparseMatrixBase<OtherDerived>& other, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> bool)",
    "insertText": "isApprox(const MatrixBase<OtherDerived>& other, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (} const internal::eval<Derived>::type)",
    "insertText": "eval()"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "sum()"
  },
  {
    "label": "pruned()",
    "kind": "Method",
    "detail": "Function (const SparseView<Derived>)",
    "insertText": "pruned(const Scalar& reference = Scalar(0), const RealScalar& epsilon = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "convert_index()",
    "kind": "Method",
    "detail": "Function (protected : bool m_isRValue ; StorageIndex)",
    "insertText": "convert_index(const Index idx)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} private : template<Dest> void)",
    "insertText": "evalTo(Dest &)"
  }
]