[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FMixerBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerBuffer"
  },
  {
    "label": "FMixerSourceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceBuffer"
  },
  {
    "label": "FMixerSourceVoiceBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMixerSourceVoiceBuffer"
  },
  {
    "label": "FDecodingSoundSourceHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecodingSoundSourceHandle"
  },
  {
    "label": "FSourceDecodeInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceDecodeInit"
  },
  {
    "label": "FDecodingSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDecodingSoundSource"
  },
  {
    "label": "FSourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceInfo"
  },
  {
    "label": "FSoundSourceDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSourceDecoder"
  },
  {
    "label": "FDecodingSoundSourceHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDevice . h \" # include \" Sound / SoundWave . h \" # include \" DSP / SinOsc . h \" # include \" DSP / ParamInterpolator . h \" # include \" Misc / ScopeLock . h \" class FAudioDevice ; # define AUDIO_SOURCE_DECODER_DEBUG 0 namespace Audio { class FMixerBuffer ; class FMixerSourceBuffer ; struct FMixerSourceVoiceBuffer ; struct FDecodingSoundSourceHandle {)",
    "insertText": "FDecodingSoundSourceHandle() : Id(INDEX_NONE)"
  },
  {
    "label": "FSourceDecodeInit()",
    "kind": "Method",
    "detail": "Function (} int32 Id ; FName SoundWaveName ; } ; struct FSourceDecodeInit {)",
    "insertText": "FSourceDecodeInit() : SoundWave(nullptr) , SeekTime(0.0f) , PitchScale(1.0f) , VolumeScale(1.0f) , bForceSyncDecode(false)"
  },
  {
    "label": "FDecodingSoundSource()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<USoundWave> SoundWave ; float SeekTime ; float PitchScale ; float VolumeScale ; bool bForceSyncDecode ; FDecodingSoundSourceHandle Handle ; } ; class FDecodingSoundSource { public :)",
    "insertText": "FDecodingSoundSource(FAudioDevice* AudioDevice, const FSourceDecodeInit& InitData)"
  },
  {
    "label": "FDecodingSoundSource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDecodingSoundSource()"
  },
  {
    "label": "PreInit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreInit(int32 OutputSampleRate)"
  },
  {
    "label": "IsReadyToInit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyToInit()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SetVolumeScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolumeScale(float InVolumeScale, uint32 NumFrames = 512)"
  },
  {
    "label": "SetForceSyncDecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceSyncDecode(bool bShouldForceSyncDecode)"
  },
  {
    "label": "GetAudioBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAudioBuffer(const int32 InNumFrames, const int32 InNumChannels, FAlignedFloatBuffer& OutAudioBuffer)"
  },
  {
    "label": "GetSoundWave()",
    "kind": "Method",
    "detail": "Function (USoundWave*)",
    "insertText": "GetSoundWave()"
  },
  {
    "label": "GetAudioBufferInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAudioBufferInternal(const int32 InNumFrames, const int32 InNumChannels, FAlignedFloatBuffer& OutAudioBuffer)"
  },
  {
    "label": "FSourceInfo()",
    "kind": "Method",
    "detail": "Function (FDecodingSoundSourceHandle Handle ; FDeviceId AudioDeviceID ; TObjectPtr<USoundWave> SoundWave ; FMixerBuffer* MixerBuffer ; FCriticalSection MixerSourceBufferCritSec ; TSharedPtr<FMixerSourceBuffer,ESPMode::ThreadSafe> MixerSourceBuffer ; FAlignedFloatBuffer ScratchBuffer ; int32 SampleRate ; float SeekTime ; FThreadSafeBool bInitialized ; bool bForceSyncDecode { false } ; struct FSourceInfo { int32 NumSourceChannels ; uint32 TotalNumFrames ; uint32 NumFramesRead ; uint32 NumFramesGenerated ; float CurrentFrameAlpha ; int32 CurrentFrameIndex ; int32 CurrentAudioChunkNumFrames ; float BasePitchScale ; float PitchScale ; FParam PitchParam ; uint32 PitchResetFrame ; FParam VolumeParam ; uint32 VolumeResetFrame ; TArray<float> CurrentFrameValues ; TArray<float> NextFrameValues ; TSharedPtr<FMixerSourceVoiceBuffer,ESPMode::ThreadSafe> CurrentPCMBuffer ; bool bIsDone ; bool bHasStarted ; bool bIsLastBuffer ;)",
    "insertText": "FSourceInfo() : NumSourceChannels(0) , TotalNumFrames(0) , NumFramesRead(0) , NumFramesGenerated(0) , CurrentFrameAlpha(0.0f) , CurrentFrameIndex(0) , CurrentAudioChunkNumFrames(0) , BasePitchScale(1.0f) , PitchScale(1.0f) , PitchResetFrame(0) , VolumeResetFrame(0) , bIsDone(false) , bHasStarted(false) , bIsLastBuffer(false)"
  },
  {
    "label": "FSoundSourceDecoder()",
    "kind": "Method",
    "detail": "Function (} } ; FSourceInfo SourceInfo ; # if AUDIO_SOURCE_DECODER_DEBUG FSineOsc SineTone [ 2 ] ; # endif } ; typedef TSharedPtr<FDecodingSoundSource> FDecodingSoundSourcePtr ; class FSoundSourceDecoder : public FGCObject { public :)",
    "insertText": "FSoundSourceDecoder()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector & Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FAudioDevice* InAudioDevice, int32 SampleRate)"
  },
  {
    "label": "CreateSourceHandle()",
    "kind": "Method",
    "detail": "Function (FDecodingSoundSourceHandle)",
    "insertText": "CreateSourceHandle(USoundWave* InSoundWave)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "UpdateRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderThread()"
  },
  {
    "label": "InitDecodingSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitDecodingSource(const FSourceDecodeInit& InitData)"
  },
  {
    "label": "RemoveDecodingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDecodingSource(const FDecodingSoundSourceHandle& Handle)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetSourcePitchScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourcePitchScale(const FDecodingSoundSourceHandle& Handle, float InPitchScale)"
  },
  {
    "label": "SetSourceVolumeScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceVolumeScale(const FDecodingSoundSourceHandle& Handle, float InVolumeScale)"
  },
  {
    "label": "GetSourceBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceBuffer(const FDecodingSoundSourceHandle& InHandle, const int32 NumOutFrames, const int32 NumOutChannels, FAlignedFloatBuffer& OutAudioBuffer)"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinished(const FDecodingSoundSourceHandle& InHandle)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized(const FDecodingSoundSourceHandle& InHandle)"
  },
  {
    "label": "EnqueueDecoderCommand()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EnqueueDecoderCommand(TFunction<void()> Command)"
  },
  {
    "label": "PumpDecoderCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpDecoderCommandQueue()"
  },
  {
    "label": "InitDecodingSourceInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitDecodingSourceInternal(const FSourceDecodeInit& InitData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (int32 AudioThreadId ; FAudioDevice* AudioDevice ; int32 SampleRate ; FCriticalSection DecodingSourcesCritSec ; TMap<int32,FDecodingSoundSourcePtr> InitializingDecodingSources ; TMap<int32,FDecodingSoundSourcePtr> DecodingSources ; TMap<int32,FSourceDecodeInit> PrecachingSources ; TQueue<TFunction<)",
    "insertText": "void()"
  }
]